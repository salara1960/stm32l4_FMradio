
stm32l4_probe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001786c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ea4  08017a00  08017a00  00027a00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080198a4  080198a4  0003035c  2**0
                  CONTENTS
  4 .ARM          00000008  080198a4  080198a4  000298a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080198ac  080198ac  0003035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080198ac  080198ac  000298ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080198b0  080198b0  000298b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  080198b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008288  20000360  08019c10  00030360  2**3
                  ALLOC
 10 ._user_heap_stack 00001000  200085e8  08019c10  000385e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003035c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cff1  00000000  00000000  0003038c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000554c  00000000  00000000  0005d37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023c8  00000000  00000000  000628d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002238  00000000  00000000  00064c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d54d  00000000  00000000  00066ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029c74  00000000  00000000  0009441d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d6b5  00000000  00000000  000be091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cb746  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae68  00000000  00000000  001cb798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000360 	.word	0x20000360
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080179e4 	.word	0x080179e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000364 	.word	0x20000364
 80001cc:	080179e4 	.word	0x080179e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9f5 	b.w	8001094 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b9aa 	b.w	8001094 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <decodeIRED>:
volatile irparams_t irparams;
decode_results results;

//-----------------------------------------------------------------------------
int16_t decodeIRED(decode_results *results)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	if (irparams.rcvstate != STATE_STOP) return 0;
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <decodeIRED+0x64>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b05      	cmp	r3, #5
 80010a8:	d001      	beq.n	80010ae <decodeIRED+0x16>
 80010aa:	2300      	movs	r3, #0
 80010ac:	e021      	b.n	80010f2 <decodeIRED+0x5a>

	results->rawbuf = irparams.rawbuf;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a13      	ldr	r2, [pc, #76]	; (8001100 <decodeIRED+0x68>)
 80010b2:	609a      	str	r2, [r3, #8]
	results->rawlen = irparams.rawlen;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <decodeIRED+0x64>)
 80010b6:	785b      	ldrb	r3, [r3, #1]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	819a      	strh	r2, [r3, #12]
	results->overflow = irparams.overflow;
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <decodeIRED+0x64>)
 80010c2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	81da      	strh	r2, [r3, #14]

	if(irparams.rcvstate != STATE_STOP) return false;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <decodeIRED+0x64>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b05      	cmp	r3, #5
 80010d6:	d001      	beq.n	80010dc <decodeIRED+0x44>
 80010d8:	2300      	movs	r3, #0
 80010da:	e00a      	b.n	80010f2 <decodeIRED+0x5a>

	if (decodeHashIRED(results)) return 1;
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 f883 	bl	80011e8 <decodeHashIRED>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <decodeIRED+0x54>
 80010e8:	2301      	movs	r3, #1
 80010ea:	e002      	b.n	80010f2 <decodeIRED+0x5a>

	enIntIRED();
 80010ec:	f000 f80a 	bl	8001104 <enIntIRED>

	return 0;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2000037c 	.word	0x2000037c
 8001100:	20000380 	.word	0x20000380

08001104 <enIntIRED>:
//-----------------------------------------------------------------------------
void enIntIRED()
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <enIntIRED+0x28>)
 800110a:	2202      	movs	r2, #2
 800110c:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <enIntIRED+0x28>)
 8001110:	2200      	movs	r2, #0
 8001112:	705a      	strb	r2, [r3, #1]

	__HAL_TIM_SET_COUNTER(portIRED, 0x0000);
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <enIntIRED+0x2c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Start_IT(portIRED);
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <enIntIRED+0x2c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f00c fa08 	bl	800d538 <HAL_TIM_Base_Start_IT>
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2000037c 	.word	0x2000037c
 8001130:	20000130 	.word	0x20000130

08001134 <resumeIRED>:
//-----------------------------------------------------------------------------
void resumeIRED() // Restart the ISR state machine
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <resumeIRED+0x1c>)
 800113a:	2202      	movs	r2, #2
 800113c:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <resumeIRED+0x1c>)
 8001140:	2200      	movs	r2, #0
 8001142:	705a      	strb	r2, [r3, #1]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	2000037c 	.word	0x2000037c
 8001154:	00000000 	.word	0x00000000

08001158 <compareIRED>:
//-----------------------------------------------------------------------------
int16_t compareIRED(uint16_t oldval, uint16_t newval)
{
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	460a      	mov	r2, r1
 8001162:	80fb      	strh	r3, [r7, #6]
 8001164:	4613      	mov	r3, r2
 8001166:	80bb      	strh	r3, [r7, #4]
	     if (newval < oldval * .8) return 0;
 8001168:	88bb      	ldrh	r3, [r7, #4]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f9da 	bl	8000524 <__aeabi_i2d>
 8001170:	4604      	mov	r4, r0
 8001172:	460d      	mov	r5, r1
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f9d4 	bl	8000524 <__aeabi_i2d>
 800117c:	a318      	add	r3, pc, #96	; (adr r3, 80011e0 <compareIRED+0x88>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	f7ff fa39 	bl	80005f8 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4620      	mov	r0, r4
 800118c:	4629      	mov	r1, r5
 800118e:	f7ff fca5 	bl	8000adc <__aeabi_dcmplt>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <compareIRED+0x44>
 8001198:	2300      	movs	r3, #0
 800119a:	e01a      	b.n	80011d2 <compareIRED+0x7a>
	else if (oldval < newval * .8) return 2;
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9c0 	bl	8000524 <__aeabi_i2d>
 80011a4:	4604      	mov	r4, r0
 80011a6:	460d      	mov	r5, r1
 80011a8:	88bb      	ldrh	r3, [r7, #4]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f9ba 	bl	8000524 <__aeabi_i2d>
 80011b0:	a30b      	add	r3, pc, #44	; (adr r3, 80011e0 <compareIRED+0x88>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	f7ff fa1f 	bl	80005f8 <__aeabi_dmul>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4620      	mov	r0, r4
 80011c0:	4629      	mov	r1, r5
 80011c2:	f7ff fc8b 	bl	8000adc <__aeabi_dcmplt>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <compareIRED+0x78>
 80011cc:	2302      	movs	r3, #2
 80011ce:	e000      	b.n	80011d2 <compareIRED+0x7a>
	else return 1;
 80011d0:	2301      	movs	r3, #1
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bdb0      	pop	{r4, r5, r7, pc}
 80011da:	bf00      	nop
 80011dc:	f3af 8000 	nop.w
 80011e0:	9999999a 	.word	0x9999999a
 80011e4:	3fe99999 	.word	0x3fe99999

080011e8 <decodeHashIRED>:
//-----------------------------------------------------------------------------
int32_t decodeHashIRED(decode_results *results)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	int32_t hash = FNV_BASIS_32;
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <decodeHashIRED+0x90>)
 80011f2:	60fb      	str	r3, [r7, #12]

	if (results->rawlen < 6) return 0;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80011fa:	2b05      	cmp	r3, #5
 80011fc:	dc01      	bgt.n	8001202 <decodeHashIRED+0x1a>
 80011fe:	2300      	movs	r3, #0
 8001200:	e035      	b.n	800126e <decodeHashIRED+0x86>

	for (int16_t i = 1; (i + 2) < results->rawlen; i++) {
 8001202:	2301      	movs	r3, #1
 8001204:	817b      	strh	r3, [r7, #10]
 8001206:	e023      	b.n	8001250 <decodeHashIRED+0x68>
		int16_t value = compareIRED(results->rawbuf[i], results->rawbuf[i + 2]);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	b298      	uxth	r0, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001220:	3302      	adds	r3, #2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4413      	add	r3, r2
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	b29b      	uxth	r3, r3
 800122a:	4619      	mov	r1, r3
 800122c:	f7ff ff94 	bl	8001158 <compareIRED>
 8001230:	4603      	mov	r3, r0
 8001232:	813b      	strh	r3, [r7, #8]
		hash = (hash * FNV_PRIME_32) ^ value;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4a11      	ldr	r2, [pc, #68]	; (800127c <decodeHashIRED+0x94>)
 8001238:	fb03 f202 	mul.w	r2, r3, r2
 800123c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001240:	4053      	eors	r3, r2
 8001242:	60fb      	str	r3, [r7, #12]
	for (int16_t i = 1; (i + 2) < results->rawlen; i++) {
 8001244:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001248:	b29b      	uxth	r3, r3
 800124a:	3301      	adds	r3, #1
 800124c:	b29b      	uxth	r3, r3
 800124e:	817b      	strh	r3, [r7, #10]
 8001250:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001254:	3302      	adds	r3, #2
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800125c:	4293      	cmp	r3, r2
 800125e:	dbd3      	blt.n	8001208 <decodeHashIRED+0x20>
	}

	results->value = hash;
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	601a      	str	r2, [r3, #0]
	results->bits = 32;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2220      	movs	r2, #32
 800126a:	809a      	strh	r2, [r3, #4]

	return 1;
 800126c:	2301      	movs	r3, #1
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	811c9dc5 	.word	0x811c9dc5
 800127c:	01000193 	.word	0x01000193

08001280 <ST7565_Select>:
uint8_t lcdRdy = 1;

//------------------------------------------------------------------------------

inline static void ST7565_Select()
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
 8001284:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001288:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800128c:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
	#endif
	//-----------------------------------------------------
#endif
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <ST7565_Unselect>:

//------------------------------------------------------------------------------

inline static void ST7565_Unselect()
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
		CS_GPIO_Port->BSRR = CS_Pin;
 800129c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012a0:	2210      	movs	r2, #16
 80012a2:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = CS_Pin;
	#endif
	//-----------------------------------------------------
#endif
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <ST7565_Reset>:
	* @brief	 ( описание ):  аппарвтный сброс дисплея
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Reset()
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	RES_GPIO_Port->BSRR = (RES_Pin << 16);//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET );
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <ST7565_Reset+0x24>)
 80012b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012ba:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80012bc:	2001      	movs	r0, #1
 80012be:	f006 fbc1 	bl	8007a44 <HAL_Delay>
	
	RES_GPIO_Port->BSRR = RES_Pin;//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET );
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <ST7565_Reset+0x24>)
 80012c4:	2204      	movs	r2, #4
 80012c6:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f006 fbbb 	bl	8007a44 <HAL_Delay>
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	48000c00 	.word	0x48000c00

080012d8 <ST7565_w_dats>:
//--------------------------------------------------------------------------------
#ifdef SET_NEW_PROC
inline static void ST7565_w_dats(uint8_t *Data, uint16_t len)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = DC_Pin;//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80012e4:	4b1d      	ldr	r3, [pc, #116]	; (800135c <ST7565_w_dats+0x84>)
 80012e6:	2220      	movs	r2, #32
 80012e8:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <ST7565_w_dats+0x88>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d018      	beq.n	8001324 <ST7565_w_dats+0x4c>
		lcdRdy = 0;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <ST7565_w_dats+0x8c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Data, len) != HAL_OK) devError |= devLCD;
 80012f8:	887b      	ldrh	r3, [r7, #2]
 80012fa:	461a      	mov	r2, r3
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	481a      	ldr	r0, [pc, #104]	; (8001368 <ST7565_w_dats+0x90>)
 8001300:	f00b fa0c 	bl	800c71c <HAL_SPI_Transmit_DMA>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d006      	beq.n	8001318 <ST7565_w_dats+0x40>
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <ST7565_w_dats+0x94>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001312:	b29a      	uxth	r2, r3
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <ST7565_w_dats+0x94>)
 8001316:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 8001318:	bf00      	nop
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <ST7565_w_dats+0x8c>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0fb      	beq.n	800131a <ST7565_w_dats+0x42>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 8001322:	e017      	b.n	8001354 <ST7565_w_dats+0x7c>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 8001324:	887a      	ldrh	r2, [r7, #2]
 8001326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	480e      	ldr	r0, [pc, #56]	; (8001368 <ST7565_w_dats+0x90>)
 800132e:	f00a fd44 	bl	800bdba <HAL_SPI_Transmit>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <ST7565_w_dats+0x6e>
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <ST7565_w_dats+0x94>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <ST7565_w_dats+0x94>)
 8001344:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 8001346:	bf00      	nop
 8001348:	4807      	ldr	r0, [pc, #28]	; (8001368 <ST7565_w_dats+0x90>)
 800134a:	f00b fd85 	bl	800ce58 <HAL_SPI_GetState>
 800134e:	4603      	mov	r3, r0
 8001350:	2b01      	cmp	r3, #1
 8001352:	d1f9      	bne.n	8001348 <ST7565_w_dats+0x70>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	48000400 	.word	0x48000400
 8001360:	20000994 	.word	0x20000994
 8001364:	20000000 	.word	0x20000000
 8001368:	20000aa0 	.word	0x20000aa0
 800136c:	20001b08 	.word	0x20001b08

08001370 <ST7565_w_cmds>:
//
inline static void ST7565_w_cmds(uint8_t *Command, uint16_t len)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = (DC_Pin << 16);//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800137c:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <ST7565_w_cmds+0x88>)
 800137e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001382:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <ST7565_w_cmds+0x8c>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d018      	beq.n	80013be <ST7565_w_cmds+0x4e>
		lcdRdy = 0;
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <ST7565_w_cmds+0x90>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Command, len) != HAL_OK) devError |= devLCD;
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	461a      	mov	r2, r3
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	481a      	ldr	r0, [pc, #104]	; (8001404 <ST7565_w_cmds+0x94>)
 800139a:	f00b f9bf 	bl	800c71c <HAL_SPI_Transmit_DMA>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d006      	beq.n	80013b2 <ST7565_w_cmds+0x42>
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <ST7565_w_cmds+0x98>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <ST7565_w_cmds+0x98>)
 80013b0:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 80013b2:	bf00      	nop
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <ST7565_w_cmds+0x90>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0fb      	beq.n	80013b4 <ST7565_w_cmds+0x44>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 80013bc:	e017      	b.n	80013ee <ST7565_w_cmds+0x7e>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	480f      	ldr	r0, [pc, #60]	; (8001404 <ST7565_w_cmds+0x94>)
 80013c8:	f00a fcf7 	bl	800bdba <HAL_SPI_Transmit>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <ST7565_w_cmds+0x70>
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <ST7565_w_cmds+0x98>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <ST7565_w_cmds+0x98>)
 80013de:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 80013e0:	bf00      	nop
 80013e2:	4808      	ldr	r0, [pc, #32]	; (8001404 <ST7565_w_cmds+0x94>)
 80013e4:	f00b fd38 	bl	800ce58 <HAL_SPI_GetState>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d1f9      	bne.n	80013e2 <ST7565_w_cmds+0x72>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	48000400 	.word	0x48000400
 80013fc:	20000994 	.word	0x20000994
 8001400:	20000000 	.word	0x20000000
 8001404:	20000aa0 	.word	0x20000aa0
 8001408:	20001b08 	.word	0x20001b08

0800140c <ST7565_SetX>:
inline static void ST7565_SetX(uint8_t x)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
	uint8_t bytes[] = { ((x & 0xf0) >> 4) | 0x10, x & 0x0f };
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	091b      	lsrs	r3, r3, #4
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f043 0310 	orr.w	r3, r3, #16
 8001420:	b2db      	uxtb	r3, r3
 8001422:	733b      	strb	r3, [r7, #12]
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	b2db      	uxtb	r3, r3
 800142c:	737b      	strb	r3, [r7, #13]
	ST7565_w_cmds(bytes, 2);
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	2102      	movs	r1, #2
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff9b 	bl	8001370 <ST7565_w_cmds>
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <ST7565_SetY>:
//
inline static void ST7565_SetY(uint8_t y)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	71fb      	strb	r3, [r7, #7]
	uint8_t byte = (y & 0x07) | 0xB0;
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	b25b      	sxtb	r3, r3
 8001456:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800145a:	b25b      	sxtb	r3, r3
 800145c:	b2db      	uxtb	r3, r3
 800145e:	73fb      	strb	r3, [r7, #15]
	ST7565_w_cmds(&byte, 1);
 8001460:	f107 030f 	add.w	r3, r7, #15
 8001464:	2101      	movs	r1, #1
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff82 	bl	8001370 <ST7565_w_cmds>
}
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <ST7565_Display_fill>:
								( данные отправляются сразу на дисплей и записываются в буфер кадра )
								Функцию ST7565_Update() вызывать не нужно
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Display_fill(uint8_t fill)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
uint8_t page;//, column;
	
	memset(ST7565_buffer, fill, (SCREEN_WIDTH * SCREEN_HEIGHT / 8));	// отчистка памяти заполняем массив значением 0x00
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001484:	4619      	mov	r1, r3
 8001486:	4814      	ldr	r0, [pc, #80]	; (80014d8 <ST7565_Display_fill+0x64>)
 8001488:	f012 f86a 	bl	8013560 <memset>
	
	ST7565_Select();
 800148c:	f7ff fef8 	bl	8001280 <ST7565_Select>
#ifdef SET_NEW_PROC
	uint8_t dta[] = {0, 0x10, 0};
 8001490:	4a12      	ldr	r2, [pc, #72]	; (80014dc <ST7565_Display_fill+0x68>)
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	4611      	mov	r1, r2
 800149a:	8019      	strh	r1, [r3, #0]
 800149c:	3302      	adds	r3, #2
 800149e:	0c12      	lsrs	r2, r2, #16
 80014a0:	701a      	strb	r2, [r3, #0]
#endif
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80014a2:	23b7      	movs	r3, #183	; 0xb7
 80014a4:	73fb      	strb	r3, [r7, #15]
 80014a6:	e00e      	b.n	80014c6 <ST7565_Display_fill+0x52>
		ST7565_w_cmd(page);  //set page address
		ST7565_w_cmd(0x10);  //set Column address MSB   
		ST7565_w_cmd(0x00);  //set column address LSB
		for (column = 0; column < 131; column++) ST7565_w_dat(fill);
#else
		dta[0] = page;
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	733b      	strb	r3, [r7, #12]
		ST7565_w_cmds(dta, sizeof(dta));
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2103      	movs	r1, #3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff5c 	bl	8001370 <ST7565_w_cmds>
		ST7565_w_dats(ST7565_buffer, 131);
 80014b8:	2183      	movs	r1, #131	; 0x83
 80014ba:	4807      	ldr	r0, [pc, #28]	; (80014d8 <ST7565_Display_fill+0x64>)
 80014bc:	f7ff ff0c 	bl	80012d8 <ST7565_w_dats>
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	2baf      	cmp	r3, #175	; 0xaf
 80014ca:	d8ed      	bhi.n	80014a8 <ST7565_Display_fill+0x34>
#endif
    }
		
	ST7565_Unselect();
 80014cc:	f7ff fee4 	bl	8001298 <ST7565_Unselect>
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000594 	.word	0x20000594
 80014dc:	08017a00 	.word	0x08017a00

080014e0 <ST7565_Init>:
	* @brief	 ( описание ):  инициализация дисплея ( при другой инициализации можно поменять параметры внутри функции )
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Init()
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
	ST7565_Select();
 80014e6:	f7ff fecb 	bl	8001280 <ST7565_Select>
	ST7565_w_cmd(CMD_DISPLAY_ON);    		//Display on
	// Инвертирование экрана CMD_SET_DISP_NORMAL - OFF    CMD_SET_DISP_REVERSE - ON
	ST7565_w_cmd(CMD_SET_DISP_NORMAL);
	//HAL_Delay(1);//1
#else
	uint8_t dta[] = {
 80014ea:	4a09      	ldr	r2, [pc, #36]	; (8001510 <ST7565_Init+0x30>)
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80014f0:	c303      	stmia	r3!, {r0, r1}
 80014f2:	801a      	strh	r2, [r3, #0]
	};
	#if defined (SCREEN_ORIENTATION_180)
		dta[1] = CMD_SET_ADC_REVERSE;    	//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
		dta[2] = CMD_SET_COM_NORMAL;    		//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
	#endif
	ST7565_w_cmds(dta, sizeof(dta));
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	210a      	movs	r1, #10
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff39 	bl	8001370 <ST7565_w_cmds>
#endif
	
	ST7565_Display_fill(0);
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff ffb8 	bl	8001474 <ST7565_Display_fill>
	
	ST7565_Unselect();
 8001504:	f7ff fec8 	bl	8001298 <ST7565_Unselect>
   
}
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	08017a04 	.word	0x08017a04

08001514 <ST7565_CMD_DISPLAY>:
//--------------------------------------------------------------------------------
void ST7565_CMD_DISPLAY(uint8_t byte)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
#ifdef SET_NEW_PROC
	ST7565_w_cmds(&byte, 1);
 800151e:	1dfb      	adds	r3, r7, #7
 8001520:	2101      	movs	r1, #1
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff ff24 	bl	8001370 <ST7565_w_cmds>

	if (byte == CMD_DISPLAY_OFF) OFF_DISPLAY();
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	2bae      	cmp	r3, #174	; 0xae
 800152c:	d103      	bne.n	8001536 <ST7565_CMD_DISPLAY+0x22>
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <ST7565_CMD_DISPLAY+0x34>)
 8001530:	2201      	movs	r2, #1
 8001532:	619a      	str	r2, [r3, #24]
							else ON_DISPLAY();
#else
	ST7565_w_cmd(byte);
#endif
}
 8001534:	e003      	b.n	800153e <ST7565_CMD_DISPLAY+0x2a>
							else ON_DISPLAY();
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <ST7565_CMD_DISPLAY+0x34>)
 8001538:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800153c:	619a      	str	r2, [r3, #24]
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	48000800 	.word	0x48000800

0800154c <ST7565_Draw_pixel>:
	* @param	( параметры ):	координата X(0 - 127) и координата Y(0 - 63)  color 1 or 0
	* @return  ( возвращает ):	
*******************************************************************************/
// X(0 - 127)  Y(0 - 63)
void ST7565_Draw_pixel(int16_t x, int16_t y, uint8_t color)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	80fb      	strh	r3, [r7, #6]
 8001556:	460b      	mov	r3, r1
 8001558:	80bb      	strh	r3, [r7, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	70fb      	strb	r3, [r7, #3]
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 800155e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001562:	2b7f      	cmp	r3, #127	; 0x7f
 8001564:	dc4c      	bgt.n	8001600 <ST7565_Draw_pixel+0xb4>
 8001566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156a:	2b00      	cmp	r3, #0
 800156c:	db48      	blt.n	8001600 <ST7565_Draw_pixel+0xb4>
 800156e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001572:	2b3f      	cmp	r3, #63	; 0x3f
 8001574:	dc44      	bgt.n	8001600 <ST7565_Draw_pixel+0xb4>
 8001576:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	db40      	blt.n	8001600 <ST7565_Draw_pixel+0xb4>

    uint16_t array_pos = x + ((y >> 3) * SCREEN_WIDTH );
 800157e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001582:	10db      	asrs	r3, r3, #3
 8001584:	b21b      	sxth	r3, r3
 8001586:	b29b      	uxth	r3, r3
 8001588:	01db      	lsls	r3, r3, #7
 800158a:	b29a      	uxth	r2, r3
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	4413      	add	r3, r2
 8001590:	81fb      	strh	r3, [r7, #14]

    if (color) {
 8001592:	78fb      	ldrb	r3, [r7, #3]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d018      	beq.n	80015ca <ST7565_Draw_pixel+0x7e>
        ST7565_buffer[array_pos] |= 1 << (y % 8);
 8001598:	89fb      	ldrh	r3, [r7, #14]
 800159a:	4a1c      	ldr	r2, [pc, #112]	; (800160c <ST7565_Draw_pixel+0xc0>)
 800159c:	5cd3      	ldrb	r3, [r2, r3]
 800159e:	b25a      	sxtb	r2, r3
 80015a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015a4:	4259      	negs	r1, r3
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	f001 0107 	and.w	r1, r1, #7
 80015ae:	bf58      	it	pl
 80015b0:	424b      	negpl	r3, r1
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	4619      	mov	r1, r3
 80015b6:	2301      	movs	r3, #1
 80015b8:	408b      	lsls	r3, r1
 80015ba:	b25b      	sxtb	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	b25a      	sxtb	r2, r3
 80015c0:	89fb      	ldrh	r3, [r7, #14]
 80015c2:	b2d1      	uxtb	r1, r2
 80015c4:	4a11      	ldr	r2, [pc, #68]	; (800160c <ST7565_Draw_pixel+0xc0>)
 80015c6:	54d1      	strb	r1, [r2, r3]
 80015c8:	e01b      	b.n	8001602 <ST7565_Draw_pixel+0xb6>
    } else {
        ST7565_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 80015ca:	89fb      	ldrh	r3, [r7, #14]
 80015cc:	4a0f      	ldr	r2, [pc, #60]	; (800160c <ST7565_Draw_pixel+0xc0>)
 80015ce:	5cd3      	ldrb	r3, [r2, r3]
 80015d0:	b25a      	sxtb	r2, r3
 80015d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015d6:	4259      	negs	r1, r3
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	f001 0107 	and.w	r1, r1, #7
 80015e0:	bf58      	it	pl
 80015e2:	424b      	negpl	r3, r1
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	4619      	mov	r1, r3
 80015e8:	2301      	movs	r3, #1
 80015ea:	408b      	lsls	r3, r1
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	4013      	ands	r3, r2
 80015f4:	b25a      	sxtb	r2, r3
 80015f6:	89fb      	ldrh	r3, [r7, #14]
 80015f8:	b2d1      	uxtb	r1, r2
 80015fa:	4a04      	ldr	r2, [pc, #16]	; (800160c <ST7565_Draw_pixel+0xc0>)
 80015fc:	54d1      	strb	r1, [r2, r3]
 80015fe:	e000      	b.n	8001602 <ST7565_Draw_pixel+0xb6>
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 8001600:	bf00      	nop
    }
}
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	20000594 	.word	0x20000594

08001610 <ST7565_Update>:
	* @brief	 ( описание ):  вывод буффера кадра на дисплей
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Update()
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
uint8_t x, y;
		
	ST7565_Select();
 8001616:	f7ff fe33 	bl	8001280 <ST7565_Select>

  	for (y = 0; y < 8; y++) {
 800161a:	2300      	movs	r3, #0
 800161c:	71bb      	strb	r3, [r7, #6]
 800161e:	e01d      	b.n	800165c <ST7565_Update+0x4c>
		ST7565_SetX(0);	
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff fef3 	bl	800140c <ST7565_SetX>
		ST7565_SetY(y);
 8001626:	79bb      	ldrb	r3, [r7, #6]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff0a 	bl	8001442 <ST7565_SetY>
		for (x = 0; x < 128; x++) {
 800162e:	2300      	movs	r3, #0
 8001630:	71fb      	strb	r3, [r7, #7]
 8001632:	e00c      	b.n	800164e <ST7565_Update+0x3e>
			ST7565_w_dats(&ST7565_buffer[x + 128 * y], 1);
 8001634:	79fa      	ldrb	r2, [r7, #7]
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	01db      	lsls	r3, r3, #7
 800163a:	4413      	add	r3, r2
 800163c:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <ST7565_Update+0x64>)
 800163e:	4413      	add	r3, r2
 8001640:	2101      	movs	r1, #1
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fe48 	bl	80012d8 <ST7565_w_dats>
		for (x = 0; x < 128; x++) {
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	3301      	adds	r3, #1
 800164c:	71fb      	strb	r3, [r7, #7]
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	daee      	bge.n	8001634 <ST7565_Update+0x24>
  	for (y = 0; y < 8; y++) {
 8001656:	79bb      	ldrb	r3, [r7, #6]
 8001658:	3301      	adds	r3, #1
 800165a:	71bb      	strb	r3, [r7, #6]
 800165c:	79bb      	ldrb	r3, [r7, #6]
 800165e:	2b07      	cmp	r3, #7
 8001660:	d9de      	bls.n	8001620 <ST7565_Update+0x10>
		}
	}
	
	ST7565_Unselect();
 8001662:	f7ff fe19 	bl	8001298 <ST7565_Unselect>
	HAL_Delay(50);//(100);
 8001666:	2032      	movs	r0, #50	; 0x32
 8001668:	f006 f9ec 	bl	8007a44 <HAL_Delay>
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000594 	.word	0x20000594

08001678 <ST7565_DrawChar>:
	* @brief	 ( описание ):  функция записывает 1 символ в буфер кадра
	* @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawChar(int16_t x, int16_t y, unsigned char ch, FontDef_t* Font, uint8_t multiplier, uint8_t color)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	4603      	mov	r3, r0
 8001682:	81fb      	strh	r3, [r7, #14]
 8001684:	460b      	mov	r3, r1
 8001686:	81bb      	strh	r3, [r7, #12]
 8001688:	4613      	mov	r3, r2
 800168a:	72fb      	strb	r3, [r7, #11]
uint16_t i, j;
uint16_t b;
int16_t X = x, Y = y;
 800168c:	89fb      	ldrh	r3, [r7, #14]
 800168e:	833b      	strh	r3, [r7, #24]
 8001690:	89bb      	ldrh	r3, [r7, #12]
 8001692:	82fb      	strh	r3, [r7, #22]
int16_t xx, yy;
	
	if (multiplier < 1) multiplier = 1;
 8001694:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001698:	2b00      	cmp	r3, #0
 800169a:	d102      	bne.n	80016a2 <ST7565_DrawChar+0x2a>
 800169c:	2301      	movs	r3, #1
 800169e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	
	// Check available space in LCD
	if (SCREEN_WIDTH >= ( x + Font->FontWidth) || SCREEN_HEIGHT >= ( y + Font->FontHeight)) {
 80016a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	7812      	ldrb	r2, [r2, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	2b80      	cmp	r3, #128	; 0x80
 80016ae:	dd07      	ble.n	80016c0 <ST7565_DrawChar+0x48>
 80016b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	7852      	ldrb	r2, [r2, #1]
 80016b8:	4413      	add	r3, r2
 80016ba:	2b40      	cmp	r3, #64	; 0x40
 80016bc:	f300 8154 	bgt.w	8001968 <ST7565_DrawChar+0x2f0>
		// Go through font
		for (i = 0; i < Font->FontHeight; i++) {
 80016c0:	2300      	movs	r3, #0
 80016c2:	83fb      	strh	r3, [r7, #30]
 80016c4:	e149      	b.n	800195a <ST7565_DrawChar+0x2e2>
			if (ch < 127) {
 80016c6:	7afb      	ldrb	r3, [r7, #11]
 80016c8:	2b7e      	cmp	r3, #126	; 0x7e
 80016ca:	d80f      	bhi.n	80016ec <ST7565_DrawChar+0x74>
				b = Font->data[(ch - 32) * Font->FontHeight + i];
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80016d2:	7afb      	ldrb	r3, [r7, #11]
 80016d4:	3b20      	subs	r3, #32
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	7849      	ldrb	r1, [r1, #1]
 80016da:	fb03 f101 	mul.w	r1, r3, r1
 80016de:	8bfb      	ldrh	r3, [r7, #30]
 80016e0:	440b      	add	r3, r1
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	837b      	strh	r3, [r7, #26]
 80016ea:	e0af      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch > 191) {
 80016ec:	7afb      	ldrb	r3, [r7, #11]
 80016ee:	2bbf      	cmp	r3, #191	; 0xbf
 80016f0:	d90f      	bls.n	8001712 <ST7565_DrawChar+0x9a>
				// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
				// и если в шрифте который содержит сперва латиницу и спец символы и потом 
				// только кирилицу то нужно добавлять 95 если шрифт 
				// содержит только кирилицу то +96 не нужно
				b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80016f8:	7afb      	ldrb	r3, [r7, #11]
 80016fa:	3b60      	subs	r3, #96	; 0x60
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	7849      	ldrb	r1, [r1, #1]
 8001700:	fb03 f101 	mul.w	r1, r3, r1
 8001704:	8bfb      	ldrh	r3, [r7, #30]
 8001706:	440b      	add	r3, r1
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	837b      	strh	r3, [r7, #26]
 8001710:	e09c      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 168) {	// 168 символ по ASCII - Ё
 8001712:	7afb      	ldrb	r3, [r7, #11]
 8001714:	2ba8      	cmp	r3, #168	; 0xa8
 8001716:	d111      	bne.n	800173c <ST7565_DrawChar+0xc4>
				// 160 эллемент ( символ Ё ) 
				b = Font->data[160 * Font->FontHeight + i];
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	785b      	ldrb	r3, [r3, #1]
 8001722:	4619      	mov	r1, r3
 8001724:	460b      	mov	r3, r1
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	015b      	lsls	r3, r3, #5
 800172c:	4619      	mov	r1, r3
 800172e:	8bfb      	ldrh	r3, [r7, #30]
 8001730:	440b      	add	r3, r1
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	837b      	strh	r3, [r7, #26]
 800173a:	e087      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 184) {	// 184 символ по ASCII - ё
 800173c:	7afb      	ldrb	r3, [r7, #11]
 800173e:	2bb8      	cmp	r3, #184	; 0xb8
 8001740:	d111      	bne.n	8001766 <ST7565_DrawChar+0xee>
				// 161 эллемент  ( символ ё ) 
				b = Font->data[161 * Font->FontHeight + i];
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f8d3 1002 	ldr.w	r1, [r3, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	785b      	ldrb	r3, [r3, #1]
 800174c:	461a      	mov	r2, r3
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	015b      	lsls	r3, r3, #5
 8001756:	441a      	add	r2, r3
 8001758:	8bfb      	ldrh	r3, [r7, #30]
 800175a:	4413      	add	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	440b      	add	r3, r1
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	837b      	strh	r3, [r7, #26]
 8001764:	e072      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 170) {	// 168 символ по ASCII - Є
 8001766:	7afb      	ldrb	r3, [r7, #11]
 8001768:	2baa      	cmp	r3, #170	; 0xaa
 800176a:	d10f      	bne.n	800178c <ST7565_DrawChar+0x114>
				// 162 эллемент ( символ Є )
				b = Font->data[162 * Font->FontHeight + i];
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	785b      	ldrb	r3, [r3, #1]
 8001776:	4619      	mov	r1, r3
 8001778:	23a2      	movs	r3, #162	; 0xa2
 800177a:	fb03 f101 	mul.w	r1, r3, r1
 800177e:	8bfb      	ldrh	r3, [r7, #30]
 8001780:	440b      	add	r3, r1
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	837b      	strh	r3, [r7, #26]
 800178a:	e05f      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 175) {	// 184 символ по ASCII - Ї
 800178c:	7afb      	ldrb	r3, [r7, #11]
 800178e:	2baf      	cmp	r3, #175	; 0xaf
 8001790:	d10f      	bne.n	80017b2 <ST7565_DrawChar+0x13a>
				// 163 эллемент  ( символ Ї )
				b = Font->data[163 * Font->FontHeight + i];
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	785b      	ldrb	r3, [r3, #1]
 800179c:	4619      	mov	r1, r3
 800179e:	23a3      	movs	r3, #163	; 0xa3
 80017a0:	fb03 f101 	mul.w	r1, r3, r1
 80017a4:	8bfb      	ldrh	r3, [r7, #30]
 80017a6:	440b      	add	r3, r1
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4413      	add	r3, r2
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	837b      	strh	r3, [r7, #26]
 80017b0:	e04c      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 178) {	// 168 символ по ASCII - І
 80017b2:	7afb      	ldrb	r3, [r7, #11]
 80017b4:	2bb2      	cmp	r3, #178	; 0xb2
 80017b6:	d10f      	bne.n	80017d8 <ST7565_DrawChar+0x160>
				// 164 эллемент ( символ І )
				b = Font->data[164 * Font->FontHeight + i];
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	785b      	ldrb	r3, [r3, #1]
 80017c2:	4619      	mov	r1, r3
 80017c4:	23a4      	movs	r3, #164	; 0xa4
 80017c6:	fb03 f101 	mul.w	r1, r3, r1
 80017ca:	8bfb      	ldrh	r3, [r7, #30]
 80017cc:	440b      	add	r3, r1
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	837b      	strh	r3, [r7, #26]
 80017d6:	e039      	b.n	800184c <ST7565_DrawChar+0x1d4>
			}
			else if (ch == 179) {	// 184 символ по ASCII - і
 80017d8:	7afb      	ldrb	r3, [r7, #11]
 80017da:	2bb3      	cmp	r3, #179	; 0xb3
 80017dc:	d111      	bne.n	8001802 <ST7565_DrawChar+0x18a>
				// 165 эллемент  ( символ і )
				b = Font->data[165 * Font->FontHeight + i];
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	785b      	ldrb	r3, [r3, #1]
 80017e8:	4619      	mov	r1, r3
 80017ea:	460b      	mov	r3, r1
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	0159      	lsls	r1, r3, #5
 80017f2:	4419      	add	r1, r3
 80017f4:	8bfb      	ldrh	r3, [r7, #30]
 80017f6:	440b      	add	r3, r1
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	837b      	strh	r3, [r7, #26]
 8001800:	e024      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 186) {	// 184 символ по ASCII - є
 8001802:	7afb      	ldrb	r3, [r7, #11]
 8001804:	2bba      	cmp	r3, #186	; 0xba
 8001806:	d10f      	bne.n	8001828 <ST7565_DrawChar+0x1b0>
				// 166 эллемент  ( символ є )
				b = Font->data[166 * Font->FontHeight + i];
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	785b      	ldrb	r3, [r3, #1]
 8001812:	4619      	mov	r1, r3
 8001814:	23a6      	movs	r3, #166	; 0xa6
 8001816:	fb03 f101 	mul.w	r1, r3, r1
 800181a:	8bfb      	ldrh	r3, [r7, #30]
 800181c:	440b      	add	r3, r1
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4413      	add	r3, r2
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	837b      	strh	r3, [r7, #26]
 8001826:	e011      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 191) {	// 168 символ по ASCII - ї
 8001828:	7afb      	ldrb	r3, [r7, #11]
 800182a:	2bbf      	cmp	r3, #191	; 0xbf
 800182c:	d10e      	bne.n	800184c <ST7565_DrawChar+0x1d4>
				// 167 эллемент ( символ ї )
				b = Font->data[167 * Font->FontHeight + i];
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	785b      	ldrb	r3, [r3, #1]
 8001838:	4619      	mov	r1, r3
 800183a:	23a7      	movs	r3, #167	; 0xa7
 800183c:	fb03 f101 	mul.w	r1, r3, r1
 8001840:	8bfb      	ldrh	r3, [r7, #30]
 8001842:	440b      	add	r3, r1
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	837b      	strh	r3, [r7, #26]
			}
			//-----------------------------------------------------------------------------
			
			for (j = 0; j < Font->FontWidth; j++) {
 800184c:	2300      	movs	r3, #0
 800184e:	83bb      	strh	r3, [r7, #28]
 8001850:	e071      	b.n	8001936 <ST7565_DrawChar+0x2be>
				if ((b << j) & 0x8000) {
 8001852:	8b7a      	ldrh	r2, [r7, #26]
 8001854:	8bbb      	ldrh	r3, [r7, #28]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d02d      	beq.n	80018be <ST7565_DrawChar+0x246>
					for (yy = 0; yy < multiplier; yy++){
 8001862:	2300      	movs	r3, #0
 8001864:	827b      	strh	r3, [r7, #18]
 8001866:	e023      	b.n	80018b0 <ST7565_DrawChar+0x238>
						for (xx = 0; xx < multiplier; xx++){
 8001868:	2300      	movs	r3, #0
 800186a:	82bb      	strh	r3, [r7, #20]
 800186c:	e014      	b.n	8001898 <ST7565_DrawChar+0x220>
							ST7565_Draw_pixel(X + xx, Y + yy, color);
 800186e:	8b3a      	ldrh	r2, [r7, #24]
 8001870:	8abb      	ldrh	r3, [r7, #20]
 8001872:	4413      	add	r3, r2
 8001874:	b29b      	uxth	r3, r3
 8001876:	b218      	sxth	r0, r3
 8001878:	8afa      	ldrh	r2, [r7, #22]
 800187a:	8a7b      	ldrh	r3, [r7, #18]
 800187c:	4413      	add	r3, r2
 800187e:	b29b      	uxth	r3, r3
 8001880:	b21b      	sxth	r3, r3
 8001882:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001886:	4619      	mov	r1, r3
 8001888:	f7ff fe60 	bl	800154c <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 800188c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001890:	b29b      	uxth	r3, r3
 8001892:	3301      	adds	r3, #1
 8001894:	b29b      	uxth	r3, r3
 8001896:	82bb      	strh	r3, [r7, #20]
 8001898:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800189c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018a0:	429a      	cmp	r2, r3
 80018a2:	dbe4      	blt.n	800186e <ST7565_DrawChar+0x1f6>
					for (yy = 0; yy < multiplier; yy++){
 80018a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	3301      	adds	r3, #1
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	827b      	strh	r3, [r7, #18]
 80018b0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80018b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018b8:	429a      	cmp	r2, r3
 80018ba:	dbd5      	blt.n	8001868 <ST7565_DrawChar+0x1f0>
 80018bc:	e031      	b.n	8001922 <ST7565_DrawChar+0x2aa>
						}
					}
				} else {// если фон очищать то оставляем если чтоб фон оставался старый то коментируем эту часть -------------
					for (yy = 0; yy < multiplier; yy++){
 80018be:	2300      	movs	r3, #0
 80018c0:	827b      	strh	r3, [r7, #18]
 80018c2:	e028      	b.n	8001916 <ST7565_DrawChar+0x29e>
						for (xx = 0; xx < multiplier; xx++){
 80018c4:	2300      	movs	r3, #0
 80018c6:	82bb      	strh	r3, [r7, #20]
 80018c8:	e019      	b.n	80018fe <ST7565_DrawChar+0x286>
							ST7565_Draw_pixel(X + xx, Y + yy, !color);
 80018ca:	8b3a      	ldrh	r2, [r7, #24]
 80018cc:	8abb      	ldrh	r3, [r7, #20]
 80018ce:	4413      	add	r3, r2
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	b218      	sxth	r0, r3
 80018d4:	8afa      	ldrh	r2, [r7, #22]
 80018d6:	8a7b      	ldrh	r3, [r7, #18]
 80018d8:	4413      	add	r3, r2
 80018da:	b29b      	uxth	r3, r3
 80018dc:	b219      	sxth	r1, r3
 80018de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bf0c      	ite	eq
 80018e6:	2301      	moveq	r3, #1
 80018e8:	2300      	movne	r3, #0
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	f7ff fe2d 	bl	800154c <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 80018f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	3301      	adds	r3, #1
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	82bb      	strh	r3, [r7, #20]
 80018fe:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001902:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001906:	429a      	cmp	r2, r3
 8001908:	dbdf      	blt.n	80018ca <ST7565_DrawChar+0x252>
					for (yy = 0; yy < multiplier; yy++){
 800190a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800190e:	b29b      	uxth	r3, r3
 8001910:	3301      	adds	r3, #1
 8001912:	b29b      	uxth	r3, r3
 8001914:	827b      	strh	r3, [r7, #18]
 8001916:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800191a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800191e:	429a      	cmp	r2, r3
 8001920:	dbd0      	blt.n	80018c4 <ST7565_DrawChar+0x24c>
						}
					}
				}
				//----------------------------------------------------------------------------------------------------
				X += multiplier;
 8001922:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001926:	b29a      	uxth	r2, r3
 8001928:	8b3b      	ldrh	r3, [r7, #24]
 800192a:	4413      	add	r3, r2
 800192c:	b29b      	uxth	r3, r3
 800192e:	833b      	strh	r3, [r7, #24]
			for (j = 0; j < Font->FontWidth; j++) {
 8001930:	8bbb      	ldrh	r3, [r7, #28]
 8001932:	3301      	adds	r3, #1
 8001934:	83bb      	strh	r3, [r7, #28]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b29b      	uxth	r3, r3
 800193c:	8bba      	ldrh	r2, [r7, #28]
 800193e:	429a      	cmp	r2, r3
 8001940:	d387      	bcc.n	8001852 <ST7565_DrawChar+0x1da>
			}
			X = x;
 8001942:	89fb      	ldrh	r3, [r7, #14]
 8001944:	833b      	strh	r3, [r7, #24]
			Y += multiplier;
 8001946:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800194a:	b29a      	uxth	r2, r3
 800194c:	8afb      	ldrh	r3, [r7, #22]
 800194e:	4413      	add	r3, r2
 8001950:	b29b      	uxth	r3, r3
 8001952:	82fb      	strh	r3, [r7, #22]
		for (i = 0; i < Font->FontHeight; i++) {
 8001954:	8bfb      	ldrh	r3, [r7, #30]
 8001956:	3301      	adds	r3, #1
 8001958:	83fb      	strh	r3, [r7, #30]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	785b      	ldrb	r3, [r3, #1]
 800195e:	b29b      	uxth	r3, r3
 8001960:	8bfa      	ldrh	r2, [r7, #30]
 8001962:	429a      	cmp	r2, r3
 8001964:	f4ff aeaf 	bcc.w	80016c6 <ST7565_DrawChar+0x4e>
		}
		
	}
}
 8001968:	bf00      	nop
 800196a:	3720      	adds	r7, #32
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <ST7565_Print>:
 * @brief	 ( описание ):  функция записывает строку в буфер кадра ( поддерживает кириллицу ( в том числе и Укр. язык) и латиницу
 * @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
 * @return  ( возвращает ):
*******************************************************************************/
void ST7565_Print(int16_t x, int16_t y, char *str, FontDef_t *Font, uint8_t multiplier, uint8_t color)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af02      	add	r7, sp, #8
 8001976:	60ba      	str	r2, [r7, #8]
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	4603      	mov	r3, r0
 800197c:	81fb      	strh	r3, [r7, #14]
 800197e:	460b      	mov	r3, r1
 8001980:	81bb      	strh	r3, [r7, #12]
unsigned char buff_char;
uint16_t len = strlen(str);
 8001982:	68b8      	ldr	r0, [r7, #8]
 8001984:	f7fe fc24 	bl	80001d0 <strlen>
 8001988:	4603      	mov	r3, r0
 800198a:	82bb      	strh	r3, [r7, #20]

	if (multiplier < 1) multiplier = 1;
 800198c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001990:	2b00      	cmp	r3, #0
 8001992:	f040 809c 	bne.w	8001ace <ST7565_Print+0x15e>
 8001996:	2301      	movs	r3, #1
 8001998:	f887 3020 	strb.w	r3, [r7, #32]
	
	while (len--) {
 800199c:	e097      	b.n	8001ace <ST7565_Print+0x15e>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ) {	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2bbf      	cmp	r3, #191	; 0xbf
 80019a4:	d974      	bls.n	8001a90 <ST7565_Print+0x120>
			// проверяем какой именно байт первый 0xD0 либо 0xD1
			switch ((uint8_t)*str) {
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2bd0      	cmp	r3, #208	; 0xd0
 80019ac:	d002      	beq.n	80019b4 <ST7565_Print+0x44>
 80019ae:	2bd1      	cmp	r3, #209	; 0xd1
 80019b0:	d02c      	beq.n	8001a0c <ST7565_Print+0x9c>
 80019b2:	e05b      	b.n	8001a6c <ST7565_Print+0xfc>
				case 0xD0:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	3301      	adds	r3, #1
 80019b8:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b81      	cmp	r3, #129	; 0x81
 80019c0:	d102      	bne.n	80019c8 <ST7565_Print+0x58>
 80019c2:	23a8      	movs	r3, #168	; 0xa8
 80019c4:	75fb      	strb	r3, [r7, #23]
 80019c6:	e051      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF) { buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b8f      	cmp	r3, #143	; 0x8f
 80019ce:	d908      	bls.n	80019e2 <ST7565_Print+0x72>
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2bbf      	cmp	r3, #191	; 0xbf
 80019d6:	d804      	bhi.n	80019e2 <ST7565_Print+0x72>
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	3330      	adds	r3, #48	; 0x30
 80019de:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 80019e0:	e041      	b.n	8001a66 <ST7565_Print+0xf6>
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b84      	cmp	r3, #132	; 0x84
 80019e8:	d102      	bne.n	80019f0 <ST7565_Print+0x80>
 80019ea:	23aa      	movs	r3, #170	; 0xaa
 80019ec:	75fb      	strb	r3, [r7, #23]
 80019ee:	e03d      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b86      	cmp	r3, #134	; 0x86
 80019f6:	d102      	bne.n	80019fe <ST7565_Print+0x8e>
 80019f8:	23b2      	movs	r3, #178	; 0xb2
 80019fa:	75fb      	strb	r3, [r7, #23]
 80019fc:	e036      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b87      	cmp	r3, #135	; 0x87
 8001a04:	d12f      	bne.n	8001a66 <ST7565_Print+0xf6>
 8001a06:	23af      	movs	r3, #175	; 0xaf
 8001a08:	75fb      	strb	r3, [r7, #23]
 8001a0a:	e02f      	b.n	8001a6c <ST7565_Print+0xfc>
				//}
				case 0xD1:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b91      	cmp	r3, #145	; 0x91
 8001a18:	d102      	bne.n	8001a20 <ST7565_Print+0xb0>
 8001a1a:	23b8      	movs	r3, #184	; 0xb8
 8001a1c:	75fb      	strb	r3, [r7, #23]
 8001a1e:	e025      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F) { buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b25b      	sxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	da08      	bge.n	8001a3c <ST7565_Print+0xcc>
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b8f      	cmp	r3, #143	; 0x8f
 8001a30:	d804      	bhi.n	8001a3c <ST7565_Print+0xcc>
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	3370      	adds	r3, #112	; 0x70
 8001a38:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 8001a3a:	e016      	b.n	8001a6a <ST7565_Print+0xfa>
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b94      	cmp	r3, #148	; 0x94
 8001a42:	d102      	bne.n	8001a4a <ST7565_Print+0xda>
 8001a44:	23ba      	movs	r3, #186	; 0xba
 8001a46:	75fb      	strb	r3, [r7, #23]
 8001a48:	e010      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b96      	cmp	r3, #150	; 0x96
 8001a50:	d102      	bne.n	8001a58 <ST7565_Print+0xe8>
 8001a52:	23b3      	movs	r3, #179	; 0xb3
 8001a54:	75fb      	strb	r3, [r7, #23]
 8001a56:	e009      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b97      	cmp	r3, #151	; 0x97
 8001a5e:	d104      	bne.n	8001a6a <ST7565_Print+0xfa>
 8001a60:	23bf      	movs	r3, #191	; 0xbf
 8001a62:	75fb      	strb	r3, [r7, #23]
 8001a64:	e002      	b.n	8001a6c <ST7565_Print+0xfc>
				break;
 8001a66:	bf00      	nop
 8001a68:	e000      	b.n	8001a6c <ST7565_Print+0xfc>
				break;
 8001a6a:	bf00      	nop
				//}
			}
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 8001a6c:	8abb      	ldrh	r3, [r7, #20]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	82bb      	strh	r3, [r7, #20]
			ST7565_DrawChar(x, y, buff_char, Font, multiplier, color);
 8001a72:	7dfa      	ldrb	r2, [r7, #23]
 8001a74:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001a78:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001a7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f7ff fdf5 	bl	8001678 <ST7565_DrawChar>
 8001a8e:	e00e      	b.n	8001aae <ST7565_Print+0x13e>
		} else {
			ST7565_DrawChar(x, y, *str, Font, multiplier, color);
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	781a      	ldrb	r2, [r3, #0]
 8001a94:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001a98:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001a9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f7ff fde5 	bl	8001678 <ST7565_DrawChar>
		}
		
		x += (Font->FontWidth * multiplier);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	fb12 f303 	smulbb	r3, r2, r3
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	89fb      	ldrh	r3, [r7, #14]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	81fb      	strh	r3, [r7, #14]
		str++;
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	3301      	adds	r3, #1
 8001acc:	60bb      	str	r3, [r7, #8]
	while (len--) {
 8001ace:	8abb      	ldrh	r3, [r7, #20]
 8001ad0:	1e5a      	subs	r2, r3, #1
 8001ad2:	82ba      	strh	r2, [r7, #20]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f47f af62 	bne.w	800199e <ST7565_Print+0x2e>
	}
}
 8001ada:	bf00      	nop
 8001adc:	bf00      	nop
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <ST7565_DrawLine>:
	* @param	( параметры ):	координаты начальной точки и конечной и цвет 0 или 1
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint8_t c)
{
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4604      	mov	r4, r0
 8001aec:	4608      	mov	r0, r1
 8001aee:	4611      	mov	r1, r2
 8001af0:	461a      	mov	r2, r3
 8001af2:	4623      	mov	r3, r4
 8001af4:	80fb      	strh	r3, [r7, #6]
 8001af6:	4603      	mov	r3, r0
 8001af8:	80bb      	strh	r3, [r7, #4]
 8001afa:	460b      	mov	r3, r1
 8001afc:	807b      	strh	r3, [r7, #2]
 8001afe:	4613      	mov	r3, r2
 8001b00:	803b      	strh	r3, [r7, #0]
int16_t dx, dy, sx, sy, err, e2, i, tmp;
	
	/* Check for overflow */
	if (x0 >= SCREEN_WIDTH)  x0 = SCREEN_WIDTH  - 1;
 8001b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b06:	2b7f      	cmp	r3, #127	; 0x7f
 8001b08:	dd01      	ble.n	8001b0e <ST7565_DrawLine+0x2a>
 8001b0a:	237f      	movs	r3, #127	; 0x7f
 8001b0c:	80fb      	strh	r3, [r7, #6]
	if (x1 >= SCREEN_WIDTH)  x1 = SCREEN_WIDTH  - 1;
 8001b0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b12:	2b7f      	cmp	r3, #127	; 0x7f
 8001b14:	dd01      	ble.n	8001b1a <ST7565_DrawLine+0x36>
 8001b16:	237f      	movs	r3, #127	; 0x7f
 8001b18:	807b      	strh	r3, [r7, #2]
	if (y0 >= SCREEN_HEIGHT) y0 = SCREEN_HEIGHT - 1;
 8001b1a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b1e:	2b3f      	cmp	r3, #63	; 0x3f
 8001b20:	dd01      	ble.n	8001b26 <ST7565_DrawLine+0x42>
 8001b22:	233f      	movs	r3, #63	; 0x3f
 8001b24:	80bb      	strh	r3, [r7, #4]
	if (y1 >= SCREEN_HEIGHT) y1 = SCREEN_HEIGHT - 1;
 8001b26:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b2a:	2b3f      	cmp	r3, #63	; 0x3f
 8001b2c:	dd01      	ble.n	8001b32 <ST7565_DrawLine+0x4e>
 8001b2e:	233f      	movs	r3, #63	; 0x3f
 8001b30:	803b      	strh	r3, [r7, #0]
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001b32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	da05      	bge.n	8001b4a <ST7565_DrawLine+0x66>
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	b21b      	sxth	r3, r3
 8001b48:	e004      	b.n	8001b54 <ST7565_DrawLine+0x70>
 8001b4a:	88fa      	ldrh	r2, [r7, #6]
 8001b4c:	887b      	ldrh	r3, [r7, #2]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	b21b      	sxth	r3, r3
 8001b54:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001b56:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b5a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	da05      	bge.n	8001b6e <ST7565_DrawLine+0x8a>
 8001b62:	883a      	ldrh	r2, [r7, #0]
 8001b64:	88bb      	ldrh	r3, [r7, #4]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	e004      	b.n	8001b78 <ST7565_DrawLine+0x94>
 8001b6e:	88ba      	ldrh	r2, [r7, #4]
 8001b70:	883b      	ldrh	r3, [r7, #0]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001b7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	da01      	bge.n	8001b8a <ST7565_DrawLine+0xa6>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e001      	b.n	8001b8e <ST7565_DrawLine+0xaa>
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b8e:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001b90:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b94:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	da01      	bge.n	8001ba0 <ST7565_DrawLine+0xbc>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e001      	b.n	8001ba4 <ST7565_DrawLine+0xc0>
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ba4:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001ba6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001baa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	dd06      	ble.n	8001bc0 <ST7565_DrawLine+0xdc>
 8001bb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bb6:	0fda      	lsrs	r2, r3, #31
 8001bb8:	4413      	add	r3, r2
 8001bba:	105b      	asrs	r3, r3, #1
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	e006      	b.n	8001bce <ST7565_DrawLine+0xea>
 8001bc0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bc4:	0fda      	lsrs	r2, r3, #31
 8001bc6:	4413      	add	r3, r2
 8001bc8:	105b      	asrs	r3, r3, #1
 8001bca:	425b      	negs	r3, r3
 8001bcc:	b21b      	sxth	r3, r3
 8001bce:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001bd0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d130      	bne.n	8001c3a <ST7565_DrawLine+0x156>
		if (y1 < y0) {
 8001bd8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001bdc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	da05      	bge.n	8001bf0 <ST7565_DrawLine+0x10c>
			tmp = y1;
 8001be4:	883b      	ldrh	r3, [r7, #0]
 8001be6:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001be8:	88bb      	ldrh	r3, [r7, #4]
 8001bea:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001bec:	893b      	ldrh	r3, [r7, #8]
 8001bee:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001bf0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001bf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	da05      	bge.n	8001c08 <ST7565_DrawLine+0x124>
			tmp = x1;
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001c04:	893b      	ldrh	r3, [r7, #8]
 8001c06:	80fb      	strh	r3, [r7, #6]
		}
		
		// Vertical line
		for (i = y0; i <= y1; i++) ST7565_Draw_pixel(x0, i, c);
 8001c08:	88bb      	ldrh	r3, [r7, #4]
 8001c0a:	82bb      	strh	r3, [r7, #20]
 8001c0c:	e00e      	b.n	8001c2c <ST7565_DrawLine+0x148>
 8001c0e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001c12:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8001c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fc96 	bl	800154c <ST7565_Draw_pixel>
 8001c20:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	3301      	adds	r3, #1
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	82bb      	strh	r3, [r7, #20]
 8001c2c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001c30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	ddea      	ble.n	8001c0e <ST7565_DrawLine+0x12a>
		
		return;
 8001c38:	e06e      	b.n	8001d18 <ST7565_DrawLine+0x234>
	}
	
	if (dy == 0) {
 8001c3a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d130      	bne.n	8001ca4 <ST7565_DrawLine+0x1c0>
		if (y1 < y0) {
 8001c42:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001c46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	da05      	bge.n	8001c5a <ST7565_DrawLine+0x176>
			tmp = y1;
 8001c4e:	883b      	ldrh	r3, [r7, #0]
 8001c50:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001c52:	88bb      	ldrh	r3, [r7, #4]
 8001c54:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001c56:	893b      	ldrh	r3, [r7, #8]
 8001c58:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001c5a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	da05      	bge.n	8001c72 <ST7565_DrawLine+0x18e>
			tmp = x1;
 8001c66:	887b      	ldrh	r3, [r7, #2]
 8001c68:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001c6e:	893b      	ldrh	r3, [r7, #8]
 8001c70:	80fb      	strh	r3, [r7, #6]
		}
		
		// Horizontal line
		for (i = x0; i <= x1; i++) ST7565_Draw_pixel(i, y0, c);
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	82bb      	strh	r3, [r7, #20]
 8001c76:	e00e      	b.n	8001c96 <ST7565_DrawLine+0x1b2>
 8001c78:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001c7c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001c80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fc61 	bl	800154c <ST7565_Draw_pixel>
 8001c8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	3301      	adds	r3, #1
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	82bb      	strh	r3, [r7, #20]
 8001c96:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001c9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	ddea      	ble.n	8001c78 <ST7565_DrawLine+0x194>
		
		return;
 8001ca2:	e039      	b.n	8001d18 <ST7565_DrawLine+0x234>
	}
	
	while (1) {
		ST7565_Draw_pixel(x0, y0, c);
 8001ca4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001ca8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001cac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fc4b 	bl	800154c <ST7565_Draw_pixel>
		if (x0 == x1 && y0 == y1) break;
 8001cb6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001cba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d105      	bne.n	8001cce <ST7565_DrawLine+0x1ea>
 8001cc2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001cc6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d023      	beq.n	8001d16 <ST7565_DrawLine+0x232>

		e2 = err; 
 8001cce:	8afb      	ldrh	r3, [r7, #22]
 8001cd0:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001cd2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001cd6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001cda:	425b      	negs	r3, r3
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	dd09      	ble.n	8001cf4 <ST7565_DrawLine+0x210>
			err -= dy;
 8001ce0:	8afa      	ldrh	r2, [r7, #22]
 8001ce2:	8a3b      	ldrh	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001cea:	88fa      	ldrh	r2, [r7, #6]
 8001cec:	89fb      	ldrh	r3, [r7, #14]
 8001cee:	4413      	add	r3, r2
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001cf4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001cf8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	dad1      	bge.n	8001ca4 <ST7565_DrawLine+0x1c0>
			err += dx;
 8001d00:	8afa      	ldrh	r2, [r7, #22]
 8001d02:	8a7b      	ldrh	r3, [r7, #18]
 8001d04:	4413      	add	r3, r2
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001d0a:	88ba      	ldrh	r2, [r7, #4]
 8001d0c:	89bb      	ldrh	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	80bb      	strh	r3, [r7, #4]
		ST7565_Draw_pixel(x0, y0, c);
 8001d14:	e7c6      	b.n	8001ca4 <ST7565_DrawLine+0x1c0>
		if (x0 == x1 && y0 == y1) break;
 8001d16:	bf00      	nop
		} 
	}
}
 8001d18:	371c      	adds	r7, #28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd90      	pop	{r4, r7, pc}

08001d1e <ST7565_DrawRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001d1e:	b590      	push	{r4, r7, lr}
 8001d20:	b085      	sub	sp, #20
 8001d22:	af02      	add	r7, sp, #8
 8001d24:	4604      	mov	r4, r0
 8001d26:	4608      	mov	r0, r1
 8001d28:	4611      	mov	r1, r2
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4623      	mov	r3, r4
 8001d2e:	80fb      	strh	r3, [r7, #6]
 8001d30:	4603      	mov	r3, r0
 8001d32:	80bb      	strh	r3, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	803b      	strh	r3, [r7, #0]
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001d3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d40:	2b7f      	cmp	r3, #127	; 0x7f
 8001d42:	dc6a      	bgt.n	8001e1a <ST7565_DrawRectangle+0xfc>
 8001d44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d48:	2b3f      	cmp	r3, #63	; 0x3f
 8001d4a:	dc66      	bgt.n	8001e1a <ST7565_DrawRectangle+0xfc>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001d4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d54:	4413      	add	r3, r2
 8001d56:	2b7f      	cmp	r3, #127	; 0x7f
 8001d58:	dd04      	ble.n	8001d64 <ST7565_DrawRectangle+0x46>
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001d64:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001d68:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	2b3f      	cmp	r3, #63	; 0x3f
 8001d70:	dd04      	ble.n	8001d7c <ST7565_DrawRectangle+0x5e>
 8001d72:	88bb      	ldrh	r3, [r7, #4]
 8001d74:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	803b      	strh	r3, [r7, #0]
	
	// Draw 4 lines
	ST7565_DrawLine(x, y, x + w, y, c);         // Top line
 8001d7c:	88fa      	ldrh	r2, [r7, #6]
 8001d7e:	887b      	ldrh	r3, [r7, #2]
 8001d80:	4413      	add	r3, r2
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	b21a      	sxth	r2, r3
 8001d86:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001d8a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001d8e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001d92:	7e3b      	ldrb	r3, [r7, #24]
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	4623      	mov	r3, r4
 8001d98:	f7ff fea4 	bl	8001ae4 <ST7565_DrawLine>
	ST7565_DrawLine(x, y + h, x + w, y + h, c); // Bottom line
 8001d9c:	88ba      	ldrh	r2, [r7, #4]
 8001d9e:	883b      	ldrh	r3, [r7, #0]
 8001da0:	4413      	add	r3, r2
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	b219      	sxth	r1, r3
 8001da6:	88fa      	ldrh	r2, [r7, #6]
 8001da8:	887b      	ldrh	r3, [r7, #2]
 8001daa:	4413      	add	r3, r2
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	b21c      	sxth	r4, r3
 8001db0:	88ba      	ldrh	r2, [r7, #4]
 8001db2:	883b      	ldrh	r3, [r7, #0]
 8001db4:	4413      	add	r3, r2
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001dbe:	7e3b      	ldrb	r3, [r7, #24]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	4622      	mov	r2, r4
 8001dc6:	f7ff fe8d 	bl	8001ae4 <ST7565_DrawLine>
	ST7565_DrawLine(x, y, x, y + h, c);         // Left line
 8001dca:	88ba      	ldrh	r2, [r7, #4]
 8001dcc:	883b      	ldrh	r3, [r7, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	b21c      	sxth	r4, r3
 8001dd4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001dd8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001ddc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001de0:	7e3b      	ldrb	r3, [r7, #24]
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	4623      	mov	r3, r4
 8001de6:	f7ff fe7d 	bl	8001ae4 <ST7565_DrawLine>
	ST7565_DrawLine(x + w, y, x + w, y + h, c); // Right line
 8001dea:	88fa      	ldrh	r2, [r7, #6]
 8001dec:	887b      	ldrh	r3, [r7, #2]
 8001dee:	4413      	add	r3, r2
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	b218      	sxth	r0, r3
 8001df4:	88fa      	ldrh	r2, [r7, #6]
 8001df6:	887b      	ldrh	r3, [r7, #2]
 8001df8:	4413      	add	r3, r2
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	b21c      	sxth	r4, r3
 8001dfe:	88ba      	ldrh	r2, [r7, #4]
 8001e00:	883b      	ldrh	r3, [r7, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b21a      	sxth	r2, r3
 8001e08:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001e0c:	7e3b      	ldrb	r3, [r7, #24]
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	4613      	mov	r3, r2
 8001e12:	4622      	mov	r2, r4
 8001e14:	f7ff fe66 	bl	8001ae4 <ST7565_DrawLine>
 8001e18:	e000      	b.n	8001e1c <ST7565_DrawRectangle+0xfe>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001e1a:	bf00      	nop
}
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd90      	pop	{r4, r7, pc}

08001e22 <ST7565_DrawFilledRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawFilledRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001e22:	b590      	push	{r4, r7, lr}
 8001e24:	b087      	sub	sp, #28
 8001e26:	af02      	add	r7, sp, #8
 8001e28:	4604      	mov	r4, r0
 8001e2a:	4608      	mov	r0, r1
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4623      	mov	r3, r4
 8001e32:	80fb      	strh	r3, [r7, #6]
 8001e34:	4603      	mov	r3, r0
 8001e36:	80bb      	strh	r3, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	803b      	strh	r3, [r7, #0]
uint8_t i;
	
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001e40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e44:	2b7f      	cmp	r3, #127	; 0x7f
 8001e46:	dc41      	bgt.n	8001ecc <ST7565_DrawFilledRectangle+0xaa>
 8001e48:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e4c:	2b3f      	cmp	r3, #63	; 0x3f
 8001e4e:	dc3d      	bgt.n	8001ecc <ST7565_DrawFilledRectangle+0xaa>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001e50:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e58:	4413      	add	r3, r2
 8001e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8001e5c:	dd04      	ble.n	8001e68 <ST7565_DrawFilledRectangle+0x46>
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001e68:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001e6c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001e70:	4413      	add	r3, r2
 8001e72:	2b3f      	cmp	r3, #63	; 0x3f
 8001e74:	dd04      	ble.n	8001e80 <ST7565_DrawFilledRectangle+0x5e>
 8001e76:	88bb      	ldrh	r3, [r7, #4]
 8001e78:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	803b      	strh	r3, [r7, #0]
	
	for (i = 0; i <= h; i++) ST7565_DrawLine(x, y + i, x + w, y + i, c);
 8001e80:	2300      	movs	r3, #0
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	e01c      	b.n	8001ec0 <ST7565_DrawFilledRectangle+0x9e>
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	88bb      	ldrh	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	b219      	sxth	r1, r3
 8001e92:	88fa      	ldrh	r2, [r7, #6]
 8001e94:	887b      	ldrh	r3, [r7, #2]
 8001e96:	4413      	add	r3, r2
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	b21c      	sxth	r4, r3
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	88bb      	ldrh	r3, [r7, #4]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	b21a      	sxth	r2, r3
 8001ea8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001eac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	4622      	mov	r2, r4
 8001eb6:	f7ff fe15 	bl	8001ae4 <ST7565_DrawLine>
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	dddd      	ble.n	8001e86 <ST7565_DrawFilledRectangle+0x64>
 8001eca:	e000      	b.n	8001ece <ST7565_DrawFilledRectangle+0xac>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001ecc:	bf00      	nop
}
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd90      	pop	{r4, r7, pc}

08001ed4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed8:	f3bf 8f4f 	dsb	sy
}
 8001edc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <__NVIC_SystemReset+0x24>)
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ee6:	4904      	ldr	r1, [pc, #16]	; (8001ef8 <__NVIC_SystemReset+0x24>)
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__NVIC_SystemReset+0x28>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eee:	f3bf 8f4f 	dsb	sy
}
 8001ef2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <__NVIC_SystemReset+0x20>
 8001ef8:	e000ed00 	.word	0xe000ed00
 8001efc:	05fa0004 	.word	0x05fa0004

08001f00 <showCfg>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//------------------------------------------------------------------------------------------
void showCfg()
{
 8001f00:	b5b0      	push	{r4, r5, r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af04      	add	r7, sp, #16
	*strf = '\0';
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <showCfg+0x88>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_LIST; i++) {
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	e02d      	b.n	8001f6e <showCfg+0x6e>
		sprintf(strf+strlen(strf), "%u:%.1f:%s\r\n", list[i].band, list[i].freq, list[i].name);
 8001f12:	481d      	ldr	r0, [pc, #116]	; (8001f88 <showCfg+0x88>)
 8001f14:	f7fe f95c 	bl	80001d0 <strlen>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4a1b      	ldr	r2, [pc, #108]	; (8001f88 <showCfg+0x88>)
 8001f1c:	189c      	adds	r4, r3, r2
 8001f1e:	491b      	ldr	r1, [pc, #108]	; (8001f8c <showCfg+0x8c>)
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	461d      	mov	r5, r3
 8001f30:	4916      	ldr	r1, [pc, #88]	; (8001f8c <showCfg+0x8c>)
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fb00 	bl	8000548 <__aeabi_f2d>
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4a0e      	ldr	r2, [pc, #56]	; (8001f8c <showCfg+0x8c>)
 8001f54:	4413      	add	r3, r2
 8001f56:	3305      	adds	r3, #5
 8001f58:	9302      	str	r3, [sp, #8]
 8001f5a:	e9cd 0100 	strd	r0, r1, [sp]
 8001f5e:	462a      	mov	r2, r5
 8001f60:	490b      	ldr	r1, [pc, #44]	; (8001f90 <showCfg+0x90>)
 8001f62:	4620      	mov	r0, r4
 8001f64:	f012 f8de 	bl	8014124 <siprintf>
	for (int i = 0; i < MAX_LIST; i++) {
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b18      	cmp	r3, #24
 8001f72:	ddce      	ble.n	8001f12 <showCfg+0x12>
	}
	Report(0, "%s", strf);
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <showCfg+0x88>)
 8001f76:	4907      	ldr	r1, [pc, #28]	; (8001f94 <showCfg+0x94>)
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f001 f955 	bl	8003228 <Report>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bdb0      	pop	{r4, r5, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20001708 	.word	0x20001708
 8001f8c:	20002f6c 	.word	0x20002f6c
 8001f90:	08017c64 	.word	0x08017c64
 8001f94:	08017c74 	.word	0x08017c74

08001f98 <bleWrite>:


#if defined(SET_BLE) || defined(SET_AUDIO)
//-------------------------------------------------------------------------------------------
void bleWrite(const char *str, bool prn)
{
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	70fb      	strb	r3, [r7, #3]
	if (sleep_mode) return;
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <bleWrite+0xac>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d147      	bne.n	800203c <bleWrite+0xa4>

	if (ble_withDMA) {
 8001fac:	4b26      	ldr	r3, [pc, #152]	; (8002048 <bleWrite+0xb0>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d023      	beq.n	8001ffc <bleWrite+0x64>
		while (!bleRdy) {};
 8001fb4:	bf00      	nop
 8001fb6:	4b25      	ldr	r3, [pc, #148]	; (800204c <bleWrite+0xb4>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0fb      	beq.n	8001fb6 <bleWrite+0x1e>
		bleRdy = 0;
 8001fbe:	4b23      	ldr	r3, [pc, #140]	; (800204c <bleWrite+0xb4>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(blePort, (uint8_t *)str, strlen(str)) != HAL_OK) devError |= devBLE;
 8001fc4:	4b22      	ldr	r3, [pc, #136]	; (8002050 <bleWrite+0xb8>)
 8001fc6:	681c      	ldr	r4, [r3, #0]
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7fe f901 	bl	80001d0 <strlen>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	f00c f840 	bl	800e05c <HAL_UART_Transmit_DMA>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d006      	beq.n	8001ff0 <bleWrite+0x58>
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <bleWrite+0xbc>)
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <bleWrite+0xbc>)
 8001fee:	801a      	strh	r2, [r3, #0]
		while (!bleRdy) {};
 8001ff0:	bf00      	nop
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <bleWrite+0xb4>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0fb      	beq.n	8001ff2 <bleWrite+0x5a>
 8001ffa:	e016      	b.n	800202a <bleWrite+0x92>
		/*while (HAL_UART_GetState(blePort) != HAL_UART_STATE_READY) {
			if (HAL_UART_GetState(blePort) == HAL_UART_STATE_BUSY_RX) break;
			//HAL_Delay(1);
		}*/
	} else {
		if (HAL_UART_Transmit(blePort, (uint8_t *)str, strlen(str), 1000) != HAL_OK) devError |= devBLE;
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <bleWrite+0xb8>)
 8001ffe:	681c      	ldr	r4, [r3, #0]
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7fe f8e5 	bl	80001d0 <strlen>
 8002006:	4603      	mov	r3, r0
 8002008:	b29a      	uxth	r2, r3
 800200a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4620      	mov	r0, r4
 8002012:	f00b ff39 	bl	800de88 <HAL_UART_Transmit>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d006      	beq.n	800202a <bleWrite+0x92>
 800201c:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <bleWrite+0xbc>)
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002024:	b29a      	uxth	r2, r3
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <bleWrite+0xbc>)
 8002028:	801a      	strh	r2, [r3, #0]
	}

	if (prn) Report(1, "[BLE_tx] %s", str);
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <bleWrite+0xa6>
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4909      	ldr	r1, [pc, #36]	; (8002058 <bleWrite+0xc0>)
 8002034:	2001      	movs	r0, #1
 8002036:	f001 f8f7 	bl	8003228 <Report>
 800203a:	e000      	b.n	800203e <bleWrite+0xa6>
	if (sleep_mode) return;
 800203c:	bf00      	nop

}
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	bd90      	pop	{r4, r7, pc}
 8002044:	20003600 	.word	0x20003600
 8002048:	2000012d 	.word	0x2000012d
 800204c:	2000012c 	.word	0x2000012c
 8002050:	20000128 	.word	0x20000128
 8002054:	20001b08 	.word	0x20001b08
 8002058:	08017c78 	.word	0x08017c78

0800205c <errName>:
//------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------
static char *errName(uint16_t err)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	80fb      	strh	r3, [r7, #6]

	switch (err) {
 8002066:	88fb      	ldrh	r3, [r7, #6]
 8002068:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800206c:	d07b      	beq.n	8002166 <errName+0x10a>
 800206e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002072:	dc7a      	bgt.n	800216a <errName+0x10e>
 8002074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002078:	d073      	beq.n	8002162 <errName+0x106>
 800207a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800207e:	dc74      	bgt.n	800216a <errName+0x10e>
 8002080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002084:	d06b      	beq.n	800215e <errName+0x102>
 8002086:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800208a:	dc6e      	bgt.n	800216a <errName+0x10e>
 800208c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002090:	d063      	beq.n	800215a <errName+0xfe>
 8002092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002096:	dc68      	bgt.n	800216a <errName+0x10e>
 8002098:	2b80      	cmp	r3, #128	; 0x80
 800209a:	d05c      	beq.n	8002156 <errName+0xfa>
 800209c:	2b80      	cmp	r3, #128	; 0x80
 800209e:	dc64      	bgt.n	800216a <errName+0x10e>
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	dc47      	bgt.n	8002134 <errName+0xd8>
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	dd60      	ble.n	800216a <errName+0x10e>
 80020a8:	3b01      	subs	r3, #1
 80020aa:	2b1f      	cmp	r3, #31
 80020ac:	d85d      	bhi.n	800216a <errName+0x10e>
 80020ae:	a201      	add	r2, pc, #4	; (adr r2, 80020b4 <errName+0x58>)
 80020b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b4:	0800213b 	.word	0x0800213b
 80020b8:	0800213f 	.word	0x0800213f
 80020bc:	0800216b 	.word	0x0800216b
 80020c0:	08002143 	.word	0x08002143
 80020c4:	0800216b 	.word	0x0800216b
 80020c8:	0800216b 	.word	0x0800216b
 80020cc:	0800216b 	.word	0x0800216b
 80020d0:	08002147 	.word	0x08002147
 80020d4:	0800216b 	.word	0x0800216b
 80020d8:	0800216b 	.word	0x0800216b
 80020dc:	0800216b 	.word	0x0800216b
 80020e0:	0800216b 	.word	0x0800216b
 80020e4:	0800216b 	.word	0x0800216b
 80020e8:	0800216b 	.word	0x0800216b
 80020ec:	0800216b 	.word	0x0800216b
 80020f0:	0800214b 	.word	0x0800214b
 80020f4:	0800216b 	.word	0x0800216b
 80020f8:	0800216b 	.word	0x0800216b
 80020fc:	0800216b 	.word	0x0800216b
 8002100:	0800216b 	.word	0x0800216b
 8002104:	0800216b 	.word	0x0800216b
 8002108:	0800216b 	.word	0x0800216b
 800210c:	0800216b 	.word	0x0800216b
 8002110:	0800216b 	.word	0x0800216b
 8002114:	0800216b 	.word	0x0800216b
 8002118:	0800216b 	.word	0x0800216b
 800211c:	0800216b 	.word	0x0800216b
 8002120:	0800216b 	.word	0x0800216b
 8002124:	0800216b 	.word	0x0800216b
 8002128:	0800216b 	.word	0x0800216b
 800212c:	0800216b 	.word	0x0800216b
 8002130:	0800214f 	.word	0x0800214f
 8002134:	2b40      	cmp	r3, #64	; 0x40
 8002136:	d00c      	beq.n	8002152 <errName+0xf6>
 8002138:	e017      	b.n	800216a <errName+0x10e>
		case devTIK:// = 1,
			return "devTIK";
 800213a:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <errName+0x11c>)
 800213c:	e016      	b.n	800216c <errName+0x110>
		case devUART:// = 2,
			return "devUART";
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <errName+0x120>)
 8002140:	e014      	b.n	800216c <errName+0x110>
		case devMEM://= 4,
			return "devMEM";
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <errName+0x124>)
 8002144:	e012      	b.n	800216c <errName+0x110>
		case devRTC:// = 8,
			return "devRTC";
 8002146:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <errName+0x128>)
 8002148:	e010      	b.n	800216c <errName+0x110>
		case devEVT:// = 0x10,
			return "devEVT";
 800214a:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <errName+0x12c>)
 800214c:	e00e      	b.n	800216c <errName+0x110>
		case devSYS:// = 0x20,
			return "devSYS";
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <errName+0x130>)
 8002150:	e00c      	b.n	800216c <errName+0x110>
		case devSPI:// = 0x40,
			return "devSPI";
 8002152:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <errName+0x134>)
 8002154:	e00a      	b.n	800216c <errName+0x110>
		case devLCD:// = 0x80,
			return "devLCD";
 8002156:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <errName+0x138>)
 8002158:	e008      	b.n	800216c <errName+0x110>
		case devRDA:// = 0x100,
			return "devRDA";
 800215a:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <errName+0x13c>)
 800215c:	e006      	b.n	800216c <errName+0x110>
		case devFS:// = 0x200
			return "devFS";
 800215e:	4b0f      	ldr	r3, [pc, #60]	; (800219c <errName+0x140>)
 8002160:	e004      	b.n	800216c <errName+0x110>
#if defined(SET_BLE) || defined(SET_AUDIO)
		case devBLE:// = 0x400,
			return "devBLE";
 8002162:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <errName+0x144>)
 8002164:	e002      	b.n	800216c <errName+0x110>
		case devQUE:// = 0x800
			return "devQUE";
 8002166:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <errName+0x148>)
 8002168:	e000      	b.n	800216c <errName+0x110>
#endif
	}

	return "???";
 800216a:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <errName+0x14c>)
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	08017c84 	.word	0x08017c84
 800217c:	08017c8c 	.word	0x08017c8c
 8002180:	08017c94 	.word	0x08017c94
 8002184:	08017c9c 	.word	0x08017c9c
 8002188:	08017ca4 	.word	0x08017ca4
 800218c:	08017cac 	.word	0x08017cac
 8002190:	08017cb4 	.word	0x08017cb4
 8002194:	08017cbc 	.word	0x08017cbc
 8002198:	08017cc4 	.word	0x08017cc4
 800219c:	08017ccc 	.word	0x08017ccc
 80021a0:	08017cd4 	.word	0x08017cd4
 80021a4:	08017cdc 	.word	0x08017cdc
 80021a8:	08017c14 	.word	0x08017c14

080021ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021b2:	f005 fc0e 	bl	80079d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021b6:	f000 f8c5 	bl	8002344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021ba:	f000 fb6b 	bl	8002894 <MX_GPIO_Init>
  MX_TIM4_Init();
 80021be:	f000 fa2b 	bl	8002618 <MX_TIM4_Init>
  MX_DMA_Init();
 80021c2:	f000 fb0d 	bl	80027e0 <MX_DMA_Init>
  MX_RTC_Init();
 80021c6:	f000 f94f 	bl	8002468 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80021ca:	f000 faa9 	bl	8002720 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80021ce:	f000 f9e5 	bl	800259c <MX_SPI2_Init>
  MX_SPI1_Init();
 80021d2:	f000 f9a5 	bl	8002520 <MX_SPI1_Init>
  MX_I2C1_Init();
 80021d6:	f000 f907 	bl	80023e8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80021da:	f000 fad1 	bl	8002780 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80021de:	f000 fa69 	bl	80026b4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */


    if (HAL_TIM_Base_Start_IT(tikPort) != HAL_OK) devError |= devTIK;
 80021e2:	4b43      	ldr	r3, [pc, #268]	; (80022f0 <main+0x144>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f00b f9a6 	bl	800d538 <HAL_TIM_Base_Start_IT>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d006      	beq.n	8002200 <main+0x54>
 80021f2:	4b40      	ldr	r3, [pc, #256]	; (80022f4 <main+0x148>)
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	4b3d      	ldr	r3, [pc, #244]	; (80022f4 <main+0x148>)
 80021fe:	801a      	strh	r2, [r3, #0]

    for (int8_t i = 0; i < 4; i++) {
 8002200:	2300      	movs	r3, #0
 8002202:	71fb      	strb	r3, [r7, #7]
 8002204:	e011      	b.n	800222a <main+0x7e>
    	errLedOn(true);
 8002206:	2001      	movs	r0, #1
 8002208:	f000 fe6a 	bl	8002ee0 <errLedOn>
    	HAL_Delay(100);
 800220c:	2064      	movs	r0, #100	; 0x64
 800220e:	f005 fc19 	bl	8007a44 <HAL_Delay>
    	errLedOn(false);
 8002212:	2000      	movs	r0, #0
 8002214:	f000 fe64 	bl	8002ee0 <errLedOn>
    	HAL_Delay(100);
 8002218:	2064      	movs	r0, #100	; 0x64
 800221a:	f005 fc13 	bl	8007a44 <HAL_Delay>
    for (int8_t i = 0; i < 4; i++) {
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	3301      	adds	r3, #1
 8002226:	b2db      	uxtb	r3, r3
 8002228:	71fb      	strb	r3, [r7, #7]
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	2b03      	cmp	r3, #3
 8002230:	dde9      	ble.n	8002206 <main+0x5a>
    }

    if (HAL_UART_Receive_IT(cmdPort, &rxByte, 1) != HAL_OK) devError |= devUART;
 8002232:	4b31      	ldr	r3, [pc, #196]	; (80022f8 <main+0x14c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2201      	movs	r2, #1
 8002238:	4930      	ldr	r1, [pc, #192]	; (80022fc <main+0x150>)
 800223a:	4618      	mov	r0, r3
 800223c:	f00b feb8 	bl	800dfb0 <HAL_UART_Receive_IT>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d006      	beq.n	8002254 <main+0xa8>
 8002246:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <main+0x148>)
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	f043 0302 	orr.w	r3, r3, #2
 800224e:	b29a      	uxth	r2, r3
 8002250:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <main+0x148>)
 8002252:	801a      	strh	r2, [r3, #0]
#if defined(SET_BLE) || defined(SET_AUDIO)
    if (HAL_UART_Receive_IT(blePort, &rxbByte, 1) != HAL_OK) devError |= devBLE;
 8002254:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <main+0x154>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2201      	movs	r2, #1
 800225a:	492a      	ldr	r1, [pc, #168]	; (8002304 <main+0x158>)
 800225c:	4618      	mov	r0, r3
 800225e:	f00b fea7 	bl	800dfb0 <HAL_UART_Receive_IT>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d006      	beq.n	8002276 <main+0xca>
 8002268:	4b22      	ldr	r3, [pc, #136]	; (80022f4 <main+0x148>)
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002270:	b29a      	uxth	r2, r3
 8002272:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <main+0x148>)
 8002274:	801a      	strh	r2, [r3, #0]
#endif

    set_Date(epoch);
 8002276:	4b24      	ldr	r3, [pc, #144]	; (8002308 <main+0x15c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f000 feda 	bl	8003034 <set_Date>
    //putEvt(evt_Freq);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002280:	f00d fab6 	bl	800f7f0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of itSem */
  itSemHandle = osSemaphoreNew(1, 1, &itSem_attributes);
 8002284:	4a21      	ldr	r2, [pc, #132]	; (800230c <main+0x160>)
 8002286:	2101      	movs	r1, #1
 8002288:	2001      	movs	r0, #1
 800228a:	f00d fb95 	bl	800f9b8 <osSemaphoreNew>
 800228e:	4603      	mov	r3, r0
 8002290:	4a1f      	ldr	r2, [pc, #124]	; (8002310 <main+0x164>)
 8002292:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of evtQue */
  evtQueHandle = osMessageQueueNew (8, sizeof(rec_evt_t), &evtQue_attributes);
 8002294:	4a1f      	ldr	r2, [pc, #124]	; (8002314 <main+0x168>)
 8002296:	2108      	movs	r1, #8
 8002298:	2008      	movs	r0, #8
 800229a:	f00d fcad 	bl	800fbf8 <osMessageQueueNew>
 800229e:	4603      	mov	r3, r0
 80022a0:	4a1d      	ldr	r2, [pc, #116]	; (8002318 <main+0x16c>)
 80022a2:	6013      	str	r3, [r2, #0]

  /* creation of cmdQue */
  cmdQueHandle = osMessageQueueNew (8, sizeof(rec_msg_t), &cmdQue_attributes);
 80022a4:	4a1d      	ldr	r2, [pc, #116]	; (800231c <main+0x170>)
 80022a6:	2104      	movs	r1, #4
 80022a8:	2008      	movs	r0, #8
 80022aa:	f00d fca5 	bl	800fbf8 <osMessageQueueNew>
 80022ae:	4603      	mov	r3, r0
 80022b0:	4a1b      	ldr	r2, [pc, #108]	; (8002320 <main+0x174>)
 80022b2:	6013      	str	r3, [r2, #0]

  /* creation of ackQue */
  ackQueHandle = osMessageQueueNew (8, sizeof(rec_msg_t), &ackQue_attributes);
 80022b4:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <main+0x178>)
 80022b6:	2104      	movs	r1, #4
 80022b8:	2008      	movs	r0, #8
 80022ba:	f00d fc9d 	bl	800fbf8 <osMessageQueueNew>
 80022be:	4603      	mov	r3, r0
 80022c0:	4a19      	ldr	r2, [pc, #100]	; (8002328 <main+0x17c>)
 80022c2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(StartTask, NULL, &defTask_attributes);
 80022c4:	4a19      	ldr	r2, [pc, #100]	; (800232c <main+0x180>)
 80022c6:	2100      	movs	r1, #0
 80022c8:	4819      	ldr	r0, [pc, #100]	; (8002330 <main+0x184>)
 80022ca:	f00d fadd 	bl	800f888 <osThreadNew>
 80022ce:	4603      	mov	r3, r0
 80022d0:	4a18      	ldr	r2, [pc, #96]	; (8002334 <main+0x188>)
 80022d2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_Delay(250);
 80022d4:	20fa      	movs	r0, #250	; 0xfa
 80022d6:	f005 fbb5 	bl	8007a44 <HAL_Delay>
  irdTaskHandle = osThreadNew(irdTask, NULL, &irdTask_attributes);
 80022da:	4a17      	ldr	r2, [pc, #92]	; (8002338 <main+0x18c>)
 80022dc:	2100      	movs	r1, #0
 80022de:	4817      	ldr	r0, [pc, #92]	; (800233c <main+0x190>)
 80022e0:	f00d fad2 	bl	800f888 <osThreadNew>
 80022e4:	4603      	mov	r3, r0
 80022e6:	4a16      	ldr	r2, [pc, #88]	; (8002340 <main+0x194>)
 80022e8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80022ea:	f00d faa7 	bl	800f83c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80022ee:	e7fe      	b.n	80022ee <main+0x142>
 80022f0:	2000000c 	.word	0x2000000c
 80022f4:	20001b08 	.word	0x20001b08
 80022f8:	20000014 	.word	0x20000014
 80022fc:	20001b18 	.word	0x20001b18
 8002300:	20000128 	.word	0x20000128
 8002304:	200032f2 	.word	0x200032f2
 8002308:	2000001c 	.word	0x2000001c
 800230c:	08018eb8 	.word	0x08018eb8
 8002310:	20000e80 	.word	0x20000e80
 8002314:	08018e70 	.word	0x08018e70
 8002318:	20000e74 	.word	0x20000e74
 800231c:	08018e88 	.word	0x08018e88
 8002320:	20000e78 	.word	0x20000e78
 8002324:	08018ea0 	.word	0x08018ea0
 8002328:	20000e7c 	.word	0x20000e7c
 800232c:	08018e4c 	.word	0x08018e4c
 8002330:	080040ed 	.word	0x080040ed
 8002334:	20000e70 	.word	0x20000e70
 8002338:	08018ec8 	.word	0x08018ec8
 800233c:	08003c8d 	.word	0x08003c8d
 8002340:	20000e84 	.word	0x20000e84

08002344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b096      	sub	sp, #88	; 0x58
 8002348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800234a:	f107 0314 	add.w	r3, r7, #20
 800234e:	2244      	movs	r2, #68	; 0x44
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f011 f904 	bl	8013560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002358:	463b      	mov	r3, r7
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	60da      	str	r2, [r3, #12]
 8002364:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002366:	f44f 7000 	mov.w	r0, #512	; 0x200
 800236a:	f007 fddd 	bl	8009f28 <HAL_PWREx_ControlVoltageScaling>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002374:	f003 fb4c 	bl	8005a10 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002378:	2309      	movs	r3, #9
 800237a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800237c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002380:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002382:	2301      	movs	r3, #1
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002386:	2302      	movs	r3, #2
 8002388:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800238a:	2303      	movs	r3, #3
 800238c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800238e:	2301      	movs	r3, #1
 8002390:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8002392:	2314      	movs	r3, #20
 8002394:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002396:	2307      	movs	r3, #7
 8002398:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800239a:	2302      	movs	r3, #2
 800239c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800239e:	2302      	movs	r3, #2
 80023a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	4618      	mov	r0, r3
 80023a8:	f007 fe5c 	bl	800a064 <HAL_RCC_OscConfig>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80023b2:	f003 fb2d 	bl	8005a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023b6:	230f      	movs	r3, #15
 80023b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023ba:	2303      	movs	r3, #3
 80023bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023be:	2300      	movs	r3, #0
 80023c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80023ca:	463b      	mov	r3, r7
 80023cc:	2104      	movs	r1, #4
 80023ce:	4618      	mov	r0, r3
 80023d0:	f008 fa24 	bl	800a81c <HAL_RCC_ClockConfig>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80023da:	f003 fb19 	bl	8005a10 <Error_Handler>
  }
}
 80023de:	bf00      	nop
 80023e0:	3758      	adds	r7, #88	; 0x58
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <MX_I2C1_Init+0x74>)
 80023ee:	4a1c      	ldr	r2, [pc, #112]	; (8002460 <MX_I2C1_Init+0x78>)
 80023f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702D95;
 80023f2:	4b1a      	ldr	r3, [pc, #104]	; (800245c <MX_I2C1_Init+0x74>)
 80023f4:	4a1b      	ldr	r2, [pc, #108]	; (8002464 <MX_I2C1_Init+0x7c>)
 80023f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80023f8:	4b18      	ldr	r3, [pc, #96]	; (800245c <MX_I2C1_Init+0x74>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023fe:	4b17      	ldr	r3, [pc, #92]	; (800245c <MX_I2C1_Init+0x74>)
 8002400:	2201      	movs	r2, #1
 8002402:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002404:	4b15      	ldr	r3, [pc, #84]	; (800245c <MX_I2C1_Init+0x74>)
 8002406:	2200      	movs	r2, #0
 8002408:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800240a:	4b14      	ldr	r3, [pc, #80]	; (800245c <MX_I2C1_Init+0x74>)
 800240c:	2200      	movs	r2, #0
 800240e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002410:	4b12      	ldr	r3, [pc, #72]	; (800245c <MX_I2C1_Init+0x74>)
 8002412:	2200      	movs	r2, #0
 8002414:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <MX_I2C1_Init+0x74>)
 8002418:	2200      	movs	r2, #0
 800241a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <MX_I2C1_Init+0x74>)
 800241e:	2200      	movs	r2, #0
 8002420:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002422:	480e      	ldr	r0, [pc, #56]	; (800245c <MX_I2C1_Init+0x74>)
 8002424:	f006 f8a4 	bl	8008570 <HAL_I2C_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800242e:	f003 faef 	bl	8005a10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8002432:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002436:	4809      	ldr	r0, [pc, #36]	; (800245c <MX_I2C1_Init+0x74>)
 8002438:	f007 fc5c 	bl	8009cf4 <HAL_I2CEx_ConfigAnalogFilter>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002442:	f003 fae5 	bl	8005a10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002446:	2100      	movs	r1, #0
 8002448:	4804      	ldr	r0, [pc, #16]	; (800245c <MX_I2C1_Init+0x74>)
 800244a:	f007 fc9e 	bl	8009d8a <HAL_I2CEx_ConfigDigitalFilter>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002454:	f003 fadc 	bl	8005a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20000998 	.word	0x20000998
 8002460:	40005400 	.word	0x40005400
 8002464:	00702d95 	.word	0x00702d95

08002468 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800247c:	2300      	movs	r3, #0
 800247e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002480:	4b25      	ldr	r3, [pc, #148]	; (8002518 <MX_RTC_Init+0xb0>)
 8002482:	4a26      	ldr	r2, [pc, #152]	; (800251c <MX_RTC_Init+0xb4>)
 8002484:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002486:	4b24      	ldr	r3, [pc, #144]	; (8002518 <MX_RTC_Init+0xb0>)
 8002488:	2200      	movs	r2, #0
 800248a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800248c:	4b22      	ldr	r3, [pc, #136]	; (8002518 <MX_RTC_Init+0xb0>)
 800248e:	227f      	movs	r2, #127	; 0x7f
 8002490:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002492:	4b21      	ldr	r3, [pc, #132]	; (8002518 <MX_RTC_Init+0xb0>)
 8002494:	22ff      	movs	r2, #255	; 0xff
 8002496:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002498:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <MX_RTC_Init+0xb0>)
 800249a:	2200      	movs	r2, #0
 800249c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800249e:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <MX_RTC_Init+0xb0>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80024a4:	4b1c      	ldr	r3, [pc, #112]	; (8002518 <MX_RTC_Init+0xb0>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80024aa:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <MX_RTC_Init+0xb0>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80024b0:	4819      	ldr	r0, [pc, #100]	; (8002518 <MX_RTC_Init+0xb0>)
 80024b2:	f009 f8c5 	bl	800b640 <HAL_RTC_Init>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80024bc:	f003 faa8 	bl	8005a10 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	2201      	movs	r2, #1
 80024d8:	4619      	mov	r1, r3
 80024da:	480f      	ldr	r0, [pc, #60]	; (8002518 <MX_RTC_Init+0xb0>)
 80024dc:	f009 f92b 	bl	800b736 <HAL_RTC_SetTime>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80024e6:	f003 fa93 	bl	8005a10 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80024ea:	2303      	movs	r3, #3
 80024ec:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 80024ee:	2307      	movs	r3, #7
 80024f0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 80024f2:	2306      	movs	r3, #6
 80024f4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 80024f6:	2322      	movs	r3, #34	; 0x22
 80024f8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80024fa:	463b      	mov	r3, r7
 80024fc:	2201      	movs	r2, #1
 80024fe:	4619      	mov	r1, r3
 8002500:	4805      	ldr	r0, [pc, #20]	; (8002518 <MX_RTC_Init+0xb0>)
 8002502:	f009 fa11 	bl	800b928 <HAL_RTC_SetDate>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800250c:	f003 fa80 	bl	8005a10 <Error_Handler>

  //set_Date(epoch);

  /* USER CODE END RTC_Init 2 */

}
 8002510:	bf00      	nop
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000a7c 	.word	0x20000a7c
 800251c:	40002800 	.word	0x40002800

08002520 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002524:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <MX_SPI1_Init+0x74>)
 8002526:	4a1c      	ldr	r2, [pc, #112]	; (8002598 <MX_SPI1_Init+0x78>)
 8002528:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800252a:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <MX_SPI1_Init+0x74>)
 800252c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002530:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002532:	4b18      	ldr	r3, [pc, #96]	; (8002594 <MX_SPI1_Init+0x74>)
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002538:	4b16      	ldr	r3, [pc, #88]	; (8002594 <MX_SPI1_Init+0x74>)
 800253a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800253e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002540:	4b14      	ldr	r3, [pc, #80]	; (8002594 <MX_SPI1_Init+0x74>)
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002546:	4b13      	ldr	r3, [pc, #76]	; (8002594 <MX_SPI1_Init+0x74>)
 8002548:	2200      	movs	r2, #0
 800254a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <MX_SPI1_Init+0x74>)
 800254e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002552:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002554:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <MX_SPI1_Init+0x74>)
 8002556:	2208      	movs	r2, #8
 8002558:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800255a:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <MX_SPI1_Init+0x74>)
 800255c:	2200      	movs	r2, #0
 800255e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <MX_SPI1_Init+0x74>)
 8002562:	2200      	movs	r2, #0
 8002564:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <MX_SPI1_Init+0x74>)
 8002568:	2200      	movs	r2, #0
 800256a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800256c:	4b09      	ldr	r3, [pc, #36]	; (8002594 <MX_SPI1_Init+0x74>)
 800256e:	2207      	movs	r2, #7
 8002570:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002572:	4b08      	ldr	r3, [pc, #32]	; (8002594 <MX_SPI1_Init+0x74>)
 8002574:	2200      	movs	r2, #0
 8002576:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <MX_SPI1_Init+0x74>)
 800257a:	2200      	movs	r2, #0
 800257c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800257e:	4805      	ldr	r0, [pc, #20]	; (8002594 <MX_SPI1_Init+0x74>)
 8002580:	f009 fb78 	bl	800bc74 <HAL_SPI_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800258a:	f003 fa41 	bl	8005a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000aa0 	.word	0x20000aa0
 8002598:	40013000 	.word	0x40013000

0800259c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80025a0:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <MX_SPI2_Init+0x74>)
 80025a2:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <MX_SPI2_Init+0x78>)
 80025a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80025a6:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <MX_SPI2_Init+0x74>)
 80025a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80025ae:	4b18      	ldr	r3, [pc, #96]	; (8002610 <MX_SPI2_Init+0x74>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80025b4:	4b16      	ldr	r3, [pc, #88]	; (8002610 <MX_SPI2_Init+0x74>)
 80025b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025ba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025bc:	4b14      	ldr	r3, [pc, #80]	; (8002610 <MX_SPI2_Init+0x74>)
 80025be:	2200      	movs	r2, #0
 80025c0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025c2:	4b13      	ldr	r3, [pc, #76]	; (8002610 <MX_SPI2_Init+0x74>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <MX_SPI2_Init+0x74>)
 80025ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025d0:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <MX_SPI2_Init+0x74>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025d6:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <MX_SPI2_Init+0x74>)
 80025d8:	2200      	movs	r2, #0
 80025da:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <MX_SPI2_Init+0x74>)
 80025de:	2200      	movs	r2, #0
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <MX_SPI2_Init+0x74>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80025e8:	4b09      	ldr	r3, [pc, #36]	; (8002610 <MX_SPI2_Init+0x74>)
 80025ea:	2207      	movs	r2, #7
 80025ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025ee:	4b08      	ldr	r3, [pc, #32]	; (8002610 <MX_SPI2_Init+0x74>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <MX_SPI2_Init+0x74>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025fa:	4805      	ldr	r0, [pc, #20]	; (8002610 <MX_SPI2_Init+0x74>)
 80025fc:	f009 fb3a 	bl	800bc74 <HAL_SPI_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002606:	f003 fa03 	bl	8005a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000b04 	.word	0x20000b04
 8002614:	40003800 	.word	0x40003800

08002618 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800261e:	f107 0310 	add.w	r3, r7, #16
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	609a      	str	r2, [r3, #8]
 800262a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	605a      	str	r2, [r3, #4]
 8002634:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN TIM4_Init 1 */

  // interupt every 10 ms

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002636:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <MX_TIM4_Init+0x94>)
 8002638:	4a1d      	ldr	r2, [pc, #116]	; (80026b0 <MX_TIM4_Init+0x98>)
 800263a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 800263c:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <MX_TIM4_Init+0x94>)
 800263e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002642:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <MX_TIM4_Init+0x94>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800264a:	4b18      	ldr	r3, [pc, #96]	; (80026ac <MX_TIM4_Init+0x94>)
 800264c:	2263      	movs	r2, #99	; 0x63
 800264e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002650:	4b16      	ldr	r3, [pc, #88]	; (80026ac <MX_TIM4_Init+0x94>)
 8002652:	2200      	movs	r2, #0
 8002654:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <MX_TIM4_Init+0x94>)
 8002658:	2280      	movs	r2, #128	; 0x80
 800265a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800265c:	4813      	ldr	r0, [pc, #76]	; (80026ac <MX_TIM4_Init+0x94>)
 800265e:	f00a ff13 	bl	800d488 <HAL_TIM_Base_Init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002668:	f003 f9d2 	bl	8005a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800266c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002670:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002672:	f107 0310 	add.w	r3, r7, #16
 8002676:	4619      	mov	r1, r3
 8002678:	480c      	ldr	r0, [pc, #48]	; (80026ac <MX_TIM4_Init+0x94>)
 800267a:	f00b f8ec 	bl	800d856 <HAL_TIM_ConfigClockSource>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002684:	f003 f9c4 	bl	8005a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002688:	2300      	movs	r3, #0
 800268a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800268c:	2300      	movs	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	4619      	mov	r1, r3
 8002694:	4805      	ldr	r0, [pc, #20]	; (80026ac <MX_TIM4_Init+0x94>)
 8002696:	f00b fb03 	bl	800dca0 <HAL_TIMEx_MasterConfigSynchronization>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80026a0:	f003 f9b6 	bl	8005a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80026a4:	bf00      	nop
 80026a6:	3720      	adds	r7, #32
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20000c40 	.word	0x20000c40
 80026b0:	40000800 	.word	0x40000800

080026b4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80026c4:	4b14      	ldr	r3, [pc, #80]	; (8002718 <MX_TIM6_Init+0x64>)
 80026c6:	4a15      	ldr	r2, [pc, #84]	; (800271c <MX_TIM6_Init+0x68>)
 80026c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 399;
 80026ca:	4b13      	ldr	r3, [pc, #76]	; (8002718 <MX_TIM6_Init+0x64>)
 80026cc:	f240 128f 	movw	r2, #399	; 0x18f
 80026d0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d2:	4b11      	ldr	r3, [pc, #68]	; (8002718 <MX_TIM6_Init+0x64>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4;
 80026d8:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <MX_TIM6_Init+0x64>)
 80026da:	2204      	movs	r2, #4
 80026dc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026de:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <MX_TIM6_Init+0x64>)
 80026e0:	2280      	movs	r2, #128	; 0x80
 80026e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80026e4:	480c      	ldr	r0, [pc, #48]	; (8002718 <MX_TIM6_Init+0x64>)
 80026e6:	f00a fecf 	bl	800d488 <HAL_TIM_Base_Init>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80026f0:	f003 f98e 	bl	8005a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026f4:	2300      	movs	r3, #0
 80026f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80026fc:	1d3b      	adds	r3, r7, #4
 80026fe:	4619      	mov	r1, r3
 8002700:	4805      	ldr	r0, [pc, #20]	; (8002718 <MX_TIM6_Init+0x64>)
 8002702:	f00b facd 	bl	800dca0 <HAL_TIMEx_MasterConfigSynchronization>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800270c:	f003 f980 	bl	8005a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002710:	bf00      	nop
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	20000c8c 	.word	0x20000c8c
 800271c:	40001000 	.word	0x40001000

08002720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002724:	4b14      	ldr	r3, [pc, #80]	; (8002778 <MX_USART2_UART_Init+0x58>)
 8002726:	4a15      	ldr	r2, [pc, #84]	; (800277c <MX_USART2_UART_Init+0x5c>)
 8002728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 800272a:	4b13      	ldr	r3, [pc, #76]	; (8002778 <MX_USART2_UART_Init+0x58>)
 800272c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8002730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <MX_USART2_UART_Init+0x58>)
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002738:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <MX_USART2_UART_Init+0x58>)
 800273a:	2200      	movs	r2, #0
 800273c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800273e:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <MX_USART2_UART_Init+0x58>)
 8002740:	2200      	movs	r2, #0
 8002742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <MX_USART2_UART_Init+0x58>)
 8002746:	220c      	movs	r2, #12
 8002748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <MX_USART2_UART_Init+0x58>)
 800274c:	2200      	movs	r2, #0
 800274e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002750:	4b09      	ldr	r3, [pc, #36]	; (8002778 <MX_USART2_UART_Init+0x58>)
 8002752:	2200      	movs	r2, #0
 8002754:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002756:	4b08      	ldr	r3, [pc, #32]	; (8002778 <MX_USART2_UART_Init+0x58>)
 8002758:	2200      	movs	r2, #0
 800275a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <MX_USART2_UART_Init+0x58>)
 800275e:	2200      	movs	r2, #0
 8002760:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002762:	4805      	ldr	r0, [pc, #20]	; (8002778 <MX_USART2_UART_Init+0x58>)
 8002764:	f00b fb42 	bl	800ddec <HAL_UART_Init>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800276e:	f003 f94f 	bl	8005a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000cd8 	.word	0x20000cd8
 800277c:	40004400 	.word	0x40004400

08002780 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002784:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <MX_USART3_UART_Init+0x58>)
 8002786:	4a15      	ldr	r2, [pc, #84]	; (80027dc <MX_USART3_UART_Init+0x5c>)
 8002788:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800278a:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <MX_USART3_UART_Init+0x58>)
 800278c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002790:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002792:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <MX_USART3_UART_Init+0x58>)
 8002794:	2200      	movs	r2, #0
 8002796:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <MX_USART3_UART_Init+0x58>)
 800279a:	2200      	movs	r2, #0
 800279c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800279e:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <MX_USART3_UART_Init+0x58>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <MX_USART3_UART_Init+0x58>)
 80027a6:	220c      	movs	r2, #12
 80027a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <MX_USART3_UART_Init+0x58>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <MX_USART3_UART_Init+0x58>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <MX_USART3_UART_Init+0x58>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <MX_USART3_UART_Init+0x58>)
 80027be:	2200      	movs	r2, #0
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027c2:	4805      	ldr	r0, [pc, #20]	; (80027d8 <MX_USART3_UART_Init+0x58>)
 80027c4:	f00b fb12 	bl	800ddec <HAL_UART_Init>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80027ce:	f003 f91f 	bl	8005a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000d5c 	.word	0x20000d5c
 80027dc:	40004800 	.word	0x40004800

080027e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027e6:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <MX_DMA_Init+0xb0>)
 80027e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ea:	4a29      	ldr	r2, [pc, #164]	; (8002890 <MX_DMA_Init+0xb0>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	6493      	str	r3, [r2, #72]	; 0x48
 80027f2:	4b27      	ldr	r3, [pc, #156]	; (8002890 <MX_DMA_Init+0xb0>)
 80027f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	607b      	str	r3, [r7, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027fe:	4b24      	ldr	r3, [pc, #144]	; (8002890 <MX_DMA_Init+0xb0>)
 8002800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002802:	4a23      	ldr	r2, [pc, #140]	; (8002890 <MX_DMA_Init+0xb0>)
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	6493      	str	r3, [r2, #72]	; 0x48
 800280a:	4b21      	ldr	r3, [pc, #132]	; (8002890 <MX_DMA_Init+0xb0>)
 800280c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8002816:	2200      	movs	r2, #0
 8002818:	2105      	movs	r1, #5
 800281a:	200c      	movs	r0, #12
 800281c:	f005 f9ee 	bl	8007bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002820:	200c      	movs	r0, #12
 8002822:	f005 fa07 	bl	8007c34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8002826:	2200      	movs	r2, #0
 8002828:	2105      	movs	r1, #5
 800282a:	200e      	movs	r0, #14
 800282c:	f005 f9e6 	bl	8007bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002830:	200e      	movs	r0, #14
 8002832:	f005 f9ff 	bl	8007c34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8002836:	2200      	movs	r2, #0
 8002838:	2105      	movs	r1, #5
 800283a:	200f      	movs	r0, #15
 800283c:	f005 f9de 	bl	8007bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002840:	200f      	movs	r0, #15
 8002842:	f005 f9f7 	bl	8007c34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8002846:	2200      	movs	r2, #0
 8002848:	2105      	movs	r1, #5
 800284a:	2010      	movs	r0, #16
 800284c:	f005 f9d6 	bl	8007bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002850:	2010      	movs	r0, #16
 8002852:	f005 f9ef 	bl	8007c34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	2105      	movs	r1, #5
 800285a:	2011      	movs	r0, #17
 800285c:	f005 f9ce 	bl	8007bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002860:	2011      	movs	r0, #17
 8002862:	f005 f9e7 	bl	8007c34 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	2105      	movs	r1, #5
 800286a:	203b      	movs	r0, #59	; 0x3b
 800286c:	f005 f9c6 	bl	8007bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002870:	203b      	movs	r0, #59	; 0x3b
 8002872:	f005 f9df 	bl	8007c34 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 5, 0);
 8002876:	2200      	movs	r2, #0
 8002878:	2105      	movs	r1, #5
 800287a:	2044      	movs	r0, #68	; 0x44
 800287c:	f005 f9be 	bl	8007bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8002880:	2044      	movs	r0, #68	; 0x44
 8002882:	f005 f9d7 	bl	8007c34 <HAL_NVIC_EnableIRQ>

}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000

08002894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289a:	f107 0314 	add.w	r3, r7, #20
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	60da      	str	r2, [r3, #12]
 80028a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028aa:	4b80      	ldr	r3, [pc, #512]	; (8002aac <MX_GPIO_Init+0x218>)
 80028ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ae:	4a7f      	ldr	r2, [pc, #508]	; (8002aac <MX_GPIO_Init+0x218>)
 80028b0:	f043 0304 	orr.w	r3, r3, #4
 80028b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028b6:	4b7d      	ldr	r3, [pc, #500]	; (8002aac <MX_GPIO_Init+0x218>)
 80028b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028c2:	4b7a      	ldr	r3, [pc, #488]	; (8002aac <MX_GPIO_Init+0x218>)
 80028c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c6:	4a79      	ldr	r2, [pc, #484]	; (8002aac <MX_GPIO_Init+0x218>)
 80028c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ce:	4b77      	ldr	r3, [pc, #476]	; (8002aac <MX_GPIO_Init+0x218>)
 80028d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028da:	4b74      	ldr	r3, [pc, #464]	; (8002aac <MX_GPIO_Init+0x218>)
 80028dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028de:	4a73      	ldr	r2, [pc, #460]	; (8002aac <MX_GPIO_Init+0x218>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028e6:	4b71      	ldr	r3, [pc, #452]	; (8002aac <MX_GPIO_Init+0x218>)
 80028e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f2:	4b6e      	ldr	r3, [pc, #440]	; (8002aac <MX_GPIO_Init+0x218>)
 80028f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f6:	4a6d      	ldr	r2, [pc, #436]	; (8002aac <MX_GPIO_Init+0x218>)
 80028f8:	f043 0302 	orr.w	r3, r3, #2
 80028fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028fe:	4b6b      	ldr	r3, [pc, #428]	; (8002aac <MX_GPIO_Init+0x218>)
 8002900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	607b      	str	r3, [r7, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800290a:	4b68      	ldr	r3, [pc, #416]	; (8002aac <MX_GPIO_Init+0x218>)
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	4a67      	ldr	r2, [pc, #412]	; (8002aac <MX_GPIO_Init+0x218>)
 8002910:	f043 0308 	orr.w	r3, r3, #8
 8002914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002916:	4b65      	ldr	r3, [pc, #404]	; (8002aac <MX_GPIO_Init+0x218>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISPLAY_ON_Pin|ERR_LED_Pin, GPIO_PIN_RESET);
 8002922:	2200      	movs	r2, #0
 8002924:	2109      	movs	r1, #9
 8002926:	4862      	ldr	r0, [pc, #392]	; (8002ab0 <MX_GPIO_Init+0x21c>)
 8002928:	f005 fdd8 	bl	80084dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIK_LED_GPIO_Port, TIK_LED_Pin, GPIO_PIN_RESET);
 800292c:	2200      	movs	r2, #0
 800292e:	2102      	movs	r1, #2
 8002930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002934:	f005 fdd2 	bl	80084dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002938:	2201      	movs	r2, #1
 800293a:	2110      	movs	r1, #16
 800293c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002940:	f005 fdcc 	bl	80084dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|SPI1_DC_Pin, GPIO_PIN_SET);
 8002944:	2201      	movs	r2, #1
 8002946:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 800294a:	485a      	ldr	r0, [pc, #360]	; (8002ab4 <MX_GPIO_Init+0x220>)
 800294c:	f005 fdc6 	bl	80084dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8002950:	2201      	movs	r2, #1
 8002952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002956:	4856      	ldr	r0, [pc, #344]	; (8002ab0 <MX_GPIO_Init+0x21c>)
 8002958:	f005 fdc0 	bl	80084dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_SET);
 800295c:	2201      	movs	r2, #1
 800295e:	2104      	movs	r1, #4
 8002960:	4855      	ldr	r0, [pc, #340]	; (8002ab8 <MX_GPIO_Init+0x224>)
 8002962:	f005 fdbb 	bl	80084dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DISPLAY_ON_Pin */
  GPIO_InitStruct.Pin = DISPLAY_ON_Pin;
 8002966:	2301      	movs	r3, #1
 8002968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800296a:	2301      	movs	r3, #1
 800296c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800296e:	2302      	movs	r3, #2
 8002970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002972:	2300      	movs	r3, #0
 8002974:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPLAY_ON_GPIO_Port, &GPIO_InitStruct);
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	4619      	mov	r1, r3
 800297c:	484c      	ldr	r0, [pc, #304]	; (8002ab0 <MX_GPIO_Init+0x21c>)
 800297e:	f005 fbeb 	bl	8008158 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 8002982:	2306      	movs	r3, #6
 8002984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002986:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800298a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800298c:	2301      	movs	r3, #1
 800298e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	4619      	mov	r1, r3
 8002996:	4846      	ldr	r0, [pc, #280]	; (8002ab0 <MX_GPIO_Init+0x21c>)
 8002998:	f005 fbde 	bl	8008158 <HAL_GPIO_Init>

  /*Configure GPIO pin : ERR_LED_Pin */
  GPIO_InitStruct.Pin = ERR_LED_Pin;
 800299c:	2308      	movs	r3, #8
 800299e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a0:	2301      	movs	r3, #1
 80029a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80029a8:	2301      	movs	r3, #1
 80029aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERR_LED_GPIO_Port, &GPIO_InitStruct);
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	4619      	mov	r1, r3
 80029b2:	483f      	ldr	r0, [pc, #252]	; (8002ab0 <MX_GPIO_Init+0x21c>)
 80029b4:	f005 fbd0 	bl	8008158 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIK_LED_Pin */
  GPIO_InitStruct.Pin = TIK_LED_Pin;
 80029b8:	2302      	movs	r3, #2
 80029ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029bc:	2301      	movs	r3, #1
 80029be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c4:	2300      	movs	r3, #0
 80029c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIK_LED_GPIO_Port, &GPIO_InitStruct);
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	4619      	mov	r1, r3
 80029ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029d2:	f005 fbc1 	bl	8008158 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80029d6:	2310      	movs	r3, #16
 80029d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029da:	2301      	movs	r3, #1
 80029dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029e2:	2302      	movs	r3, #2
 80029e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80029e6:	f107 0314 	add.w	r3, r7, #20
 80029ea:	4619      	mov	r1, r3
 80029ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029f0:	f005 fbb2 	bl	8008158 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80029f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029fa:	2301      	movs	r3, #1
 80029fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029fe:	2301      	movs	r3, #1
 8002a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a02:	2302      	movs	r3, #2
 8002a04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002a06:	f107 0314 	add.w	r3, r7, #20
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4829      	ldr	r0, [pc, #164]	; (8002ab4 <MX_GPIO_Init+0x220>)
 8002a0e:	f005 fba3 	bl	8008158 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRED_Pin */
  GPIO_InitStruct.Pin = IRED_Pin;
 8002a12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRED_GPIO_Port, &GPIO_InitStruct);
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	4619      	mov	r1, r3
 8002a26:	4822      	ldr	r0, [pc, #136]	; (8002ab0 <MX_GPIO_Init+0x21c>)
 8002a28:	f005 fb96 	bl	8008158 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8002a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a32:	2301      	movs	r3, #1
 8002a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a36:	2301      	movs	r3, #1
 8002a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8002a3e:	f107 0314 	add.w	r3, r7, #20
 8002a42:	4619      	mov	r1, r3
 8002a44:	481a      	ldr	r0, [pc, #104]	; (8002ab0 <MX_GPIO_Init+0x21c>)
 8002a46:	f005 fb87 	bl	8008158 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_RST_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin;
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a52:	2301      	movs	r3, #1
 8002a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a56:	2302      	movs	r3, #2
 8002a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_RST_GPIO_Port, &GPIO_InitStruct);
 8002a5a:	f107 0314 	add.w	r3, r7, #20
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4815      	ldr	r0, [pc, #84]	; (8002ab8 <MX_GPIO_Init+0x224>)
 8002a62:	f005 fb79 	bl	8008158 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_DC_Pin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin;
 8002a66:	2320      	movs	r3, #32
 8002a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a72:	2302      	movs	r3, #2
 8002a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_DC_GPIO_Port, &GPIO_InitStruct);
 8002a76:	f107 0314 	add.w	r3, r7, #20
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	480d      	ldr	r0, [pc, #52]	; (8002ab4 <MX_GPIO_Init+0x220>)
 8002a7e:	f005 fb6b 	bl	8008158 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002a82:	2200      	movs	r2, #0
 8002a84:	2105      	movs	r1, #5
 8002a86:	2007      	movs	r0, #7
 8002a88:	f005 f8b8 	bl	8007bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002a8c:	2007      	movs	r0, #7
 8002a8e:	f005 f8d1 	bl	8007c34 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002a92:	2200      	movs	r2, #0
 8002a94:	2105      	movs	r1, #5
 8002a96:	2008      	movs	r0, #8
 8002a98:	f005 f8b0 	bl	8007bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002a9c:	2008      	movs	r0, #8
 8002a9e:	f005 f8c9 	bl	8007c34 <HAL_NVIC_EnableIRQ>

}
 8002aa2:	bf00      	nop
 8002aa4:	3728      	adds	r7, #40	; 0x28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	48000800 	.word	0x48000800
 8002ab4:	48000400 	.word	0x48000400
 8002ab8:	48000c00 	.word	0x48000c00

08002abc <hexToBin>:

//-------------------------------------------------------------------------------------------
//      Преобразует два символа строки из hex-формата в двоичный
//
uint8_t hexToBin(char *sc)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
char st = 0, ml = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	73fb      	strb	r3, [r7, #15]
 8002ac8:	2300      	movs	r3, #0
 8002aca:	73bb      	strb	r3, [r7, #14]

	if ((sc[0] >= '0') && (sc[0] <= '9')) st = (sc[0] - 0x30);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b2f      	cmp	r3, #47	; 0x2f
 8002ad2:	d908      	bls.n	8002ae6 <hexToBin+0x2a>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b39      	cmp	r3, #57	; 0x39
 8002ada:	d804      	bhi.n	8002ae6 <hexToBin+0x2a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	3b30      	subs	r3, #48	; 0x30
 8002ae2:	73fb      	strb	r3, [r7, #15]
 8002ae4:	e018      	b.n	8002b18 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'A') && (sc[0] <= 'F')) st = (sc[0] - 0x37);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d908      	bls.n	8002b00 <hexToBin+0x44>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b46      	cmp	r3, #70	; 0x46
 8002af4:	d804      	bhi.n	8002b00 <hexToBin+0x44>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	3b37      	subs	r3, #55	; 0x37
 8002afc:	73fb      	strb	r3, [r7, #15]
 8002afe:	e00b      	b.n	8002b18 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'a') && (sc[0] <= 'f')) st = (sc[0] - 0x57);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b60      	cmp	r3, #96	; 0x60
 8002b06:	d907      	bls.n	8002b18 <hexToBin+0x5c>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b66      	cmp	r3, #102	; 0x66
 8002b0e:	d803      	bhi.n	8002b18 <hexToBin+0x5c>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	3b57      	subs	r3, #87	; 0x57
 8002b16:	73fb      	strb	r3, [r7, #15]

	if ((sc[1] >= '0') && (sc[1] <= '9')) ml = (sc[1] - 0x30);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b2f      	cmp	r3, #47	; 0x2f
 8002b20:	d90a      	bls.n	8002b38 <hexToBin+0x7c>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3301      	adds	r3, #1
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b39      	cmp	r3, #57	; 0x39
 8002b2a:	d805      	bhi.n	8002b38 <hexToBin+0x7c>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	3b30      	subs	r3, #48	; 0x30
 8002b34:	73bb      	strb	r3, [r7, #14]
 8002b36:	e01e      	b.n	8002b76 <hexToBin+0xba>
	else
	if ((sc[1] >= 'A') && (sc[1] <= 'F')) ml = (sc[1] - 0x37);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b40      	cmp	r3, #64	; 0x40
 8002b40:	d90a      	bls.n	8002b58 <hexToBin+0x9c>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3301      	adds	r3, #1
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b46      	cmp	r3, #70	; 0x46
 8002b4a:	d805      	bhi.n	8002b58 <hexToBin+0x9c>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	3b37      	subs	r3, #55	; 0x37
 8002b54:	73bb      	strb	r3, [r7, #14]
 8002b56:	e00e      	b.n	8002b76 <hexToBin+0xba>
	else
	if ((sc[1] >= 'a') && (sc[1] <= 'f')) ml = (sc[1] - 0x57);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b60      	cmp	r3, #96	; 0x60
 8002b60:	d909      	bls.n	8002b76 <hexToBin+0xba>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3301      	adds	r3, #1
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b66      	cmp	r3, #102	; 0x66
 8002b6a:	d804      	bhi.n	8002b76 <hexToBin+0xba>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	3b57      	subs	r3, #87	; 0x57
 8002b74:	73bb      	strb	r3, [r7, #14]

	return ((st << 4) | (ml & 0x0f));
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	b25a      	sxtb	r2, r3
 8002b7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	b25b      	sxtb	r3, r3
 8002b86:	4313      	orrs	r3, r2
 8002b88:	b25b      	sxtb	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3

}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <getQueCount>:
//-------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------
uint32_t getQueCount(osMessageQueueId_t que)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
	return osMessageQueueGetCount(que);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f00d f95b 	bl	800fe5c <osMessageQueueGetCount>
 8002ba6:	4603      	mov	r3, r0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <nameStation>:
//-------------------------------------------------------------------------------------------
#ifdef SET_DISPLAY

//-------------------------------------------------------------------------------------------
const char *nameStation(float fr)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	ed87 0a01 	vstr	s0, [r7, #4]
int8_t ik = -1;
 8002bba:	23ff      	movs	r3, #255	; 0xff
 8002bbc:	73fb      	strb	r3, [r7, #15]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	73bb      	strb	r3, [r7, #14]
 8002bc2:	e01b      	b.n	8002bfc <nameStation+0x4c>
		if (list[i].freq == fr) {
 8002bc4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002bc8:	491a      	ldr	r1, [pc, #104]	; (8002c34 <nameStation+0x84>)
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002bd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bdc:	ee07 3a10 	vmov	s14, r3
 8002be0:	eef4 7a47 	vcmp.f32	s15, s14
 8002be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be8:	d102      	bne.n	8002bf0 <nameStation+0x40>
			ik = i;
 8002bea:	7bbb      	ldrb	r3, [r7, #14]
 8002bec:	73fb      	strb	r3, [r7, #15]
			break;
 8002bee:	e009      	b.n	8002c04 <nameStation+0x54>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 8002bf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	73bb      	strb	r3, [r7, #14]
 8002bfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c00:	2b18      	cmp	r3, #24
 8002c02:	dddf      	ble.n	8002bc4 <nameStation+0x14>
		}
	}

	if (ik != -1) return list[ik].name;
 8002c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c0c:	d009      	beq.n	8002c22 <nameStation+0x72>
 8002c0e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4a06      	ldr	r2, [pc, #24]	; (8002c34 <nameStation+0x84>)
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3305      	adds	r3, #5
 8002c20:	e001      	b.n	8002c26 <nameStation+0x76>
			 else return noneStation;
 8002c22:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <nameStation+0x88>)
 8002c24:	681b      	ldr	r3, [r3, #0]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20002f6c 	.word	0x20002f6c
 8002c38:	20000114 	.word	0x20000114

08002c3c <getNextList>:
//-------------------------------------------------------------------------------------------
float getNextList(float fr, uint8_t up, uint8_t *band)
{
 8002c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c40:	b08e      	sub	sp, #56	; 0x38
 8002c42:	af08      	add	r7, sp, #32
 8002c44:	ed87 0a03 	vstr	s0, [r7, #12]
 8002c48:	4603      	mov	r3, r0
 8002c4a:	6079      	str	r1, [r7, #4]
 8002c4c:	72fb      	strb	r3, [r7, #11]
float ret = fr;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	613b      	str	r3, [r7, #16]
int8_t ik = -1;
 8002c52:	23ff      	movs	r3, #255	; 0xff
 8002c54:	75fb      	strb	r3, [r7, #23]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 8002c56:	2300      	movs	r3, #0
 8002c58:	75bb      	strb	r3, [r7, #22]
 8002c5a:	e01b      	b.n	8002c94 <getNextList+0x58>
		if (list[i].freq == fr) {
 8002c5c:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8002c60:	4965      	ldr	r1, [pc, #404]	; (8002df8 <getNextList+0x1bc>)
 8002c62:	4613      	mov	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002c70:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c74:	ee07 3a10 	vmov	s14, r3
 8002c78:	eef4 7a47 	vcmp.f32	s15, s14
 8002c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c80:	d102      	bne.n	8002c88 <getNextList+0x4c>
			ik = i;
 8002c82:	7dbb      	ldrb	r3, [r7, #22]
 8002c84:	75fb      	strb	r3, [r7, #23]
			break;
 8002c86:	e009      	b.n	8002c9c <getNextList+0x60>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 8002c88:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	3301      	adds	r3, #1
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	75bb      	strb	r3, [r7, #22]
 8002c94:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002c98:	2b18      	cmp	r3, #24
 8002c9a:	dddf      	ble.n	8002c5c <getNextList+0x20>
		}
	}
	if (ik != -1) {
 8002c9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ca4:	d01b      	beq.n	8002cde <getNextList+0xa2>
		if (up) {
 8002ca6:	7afb      	ldrb	r3, [r7, #11]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <getNextList+0x86>
			if (++ik == MAX_LIST) ik = 0;
 8002cac:	7dfb      	ldrb	r3, [r7, #23]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	75fb      	strb	r3, [r7, #23]
 8002cb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cb8:	2b19      	cmp	r3, #25
 8002cba:	d161      	bne.n	8002d80 <getNextList+0x144>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	75fb      	strb	r3, [r7, #23]
 8002cc0:	e05e      	b.n	8002d80 <getNextList+0x144>
		} else {
			if (ik != 0) ik--; else ik = MAX_LIST - 1;
 8002cc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d006      	beq.n	8002cd8 <getNextList+0x9c>
 8002cca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	75fb      	strb	r3, [r7, #23]
 8002cd6:	e053      	b.n	8002d80 <getNextList+0x144>
 8002cd8:	2318      	movs	r3, #24
 8002cda:	75fb      	strb	r3, [r7, #23]
 8002cdc:	e050      	b.n	8002d80 <getNextList+0x144>
		}
	} else {
		if (up) {// seek_up
 8002cde:	7afb      	ldrb	r3, [r7, #11]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d023      	beq.n	8002d2c <getNextList+0xf0>
			for (int8_t i = ik; i < MAX_LIST; i++) {
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
 8002ce6:	757b      	strb	r3, [r7, #21]
 8002ce8:	e01b      	b.n	8002d22 <getNextList+0xe6>
				if (list[i].freq > fr) {
 8002cea:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002cee:	4942      	ldr	r1, [pc, #264]	; (8002df8 <getNextList+0x1bc>)
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002cfe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d02:	ee07 3a10 	vmov	s14, r3
 8002d06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d0e:	d502      	bpl.n	8002d16 <getNextList+0xda>
					ik = i;
 8002d10:	7d7b      	ldrb	r3, [r7, #21]
 8002d12:	75fb      	strb	r3, [r7, #23]
					break;
 8002d14:	e02d      	b.n	8002d72 <getNextList+0x136>
			for (int8_t i = ik; i < MAX_LIST; i++) {
 8002d16:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	757b      	strb	r3, [r7, #21]
 8002d22:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002d26:	2b18      	cmp	r3, #24
 8002d28:	dddf      	ble.n	8002cea <getNextList+0xae>
 8002d2a:	e022      	b.n	8002d72 <getNextList+0x136>
				}
			}
		} else {// seek_down
			for (int8_t i = ik; i <= 0; i--) {
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	753b      	strb	r3, [r7, #20]
 8002d30:	e01b      	b.n	8002d6a <getNextList+0x12e>
				if (list[i].freq < fr) {
 8002d32:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002d36:	4930      	ldr	r1, [pc, #192]	; (8002df8 <getNextList+0x1bc>)
 8002d38:	4613      	mov	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002d46:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d4a:	ee07 3a10 	vmov	s14, r3
 8002d4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d56:	dd02      	ble.n	8002d5e <getNextList+0x122>
					ik = i;
 8002d58:	7d3b      	ldrb	r3, [r7, #20]
 8002d5a:	75fb      	strb	r3, [r7, #23]
					break;
 8002d5c:	e009      	b.n	8002d72 <getNextList+0x136>
			for (int8_t i = ik; i <= 0; i--) {
 8002d5e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	753b      	strb	r3, [r7, #20]
 8002d6a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	dddf      	ble.n	8002d32 <getNextList+0xf6>
				}
			}
		}
		if (ik == -1) ik = 0;
 8002d72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d7a:	d101      	bne.n	8002d80 <getNextList+0x144>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	75fb      	strb	r3, [r7, #23]
	}
	ret = list[ik].freq;
 8002d80:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002d84:	491c      	ldr	r1, [pc, #112]	; (8002df8 <getNextList+0x1bc>)
 8002d86:	4613      	mov	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002d94:	613b      	str	r3, [r7, #16]
	*band = list[ik].band;
 8002d96:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002d9a:	4917      	ldr	r1, [pc, #92]	; (8002df8 <getNextList+0x1bc>)
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	781a      	ldrb	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	701a      	strb	r2, [r3, #0]
	Report(1, "[%s] up=%u ik=%d, fr=%.1f ret=%.1f band=%u\r\n", __func__, up, ik, fr, ret, *band);
 8002dac:	f897 800b 	ldrb.w	r8, [r7, #11]
 8002db0:	f997 6017 	ldrsb.w	r6, [r7, #23]
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f7fd fbc7 	bl	8000548 <__aeabi_f2d>
 8002dba:	4604      	mov	r4, r0
 8002dbc:	460d      	mov	r5, r1
 8002dbe:	6938      	ldr	r0, [r7, #16]
 8002dc0:	f7fd fbc2 	bl	8000548 <__aeabi_f2d>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	7809      	ldrb	r1, [r1, #0]
 8002dcc:	9106      	str	r1, [sp, #24]
 8002dce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002dd2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002dd6:	9600      	str	r6, [sp, #0]
 8002dd8:	4643      	mov	r3, r8
 8002dda:	4a08      	ldr	r2, [pc, #32]	; (8002dfc <getNextList+0x1c0>)
 8002ddc:	4908      	ldr	r1, [pc, #32]	; (8002e00 <getNextList+0x1c4>)
 8002dde:	2001      	movs	r0, #1
 8002de0:	f000 fa22 	bl	8003228 <Report>

	return ret;
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	ee07 3a90 	vmov	s15, r3
}
 8002dea:	eeb0 0a67 	vmov.f32	s0, s15
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002df6:	bf00      	nop
 8002df8:	20002f6c 	.word	0x20002f6c
 8002dfc:	08019384 	.word	0x08019384
 8002e00:	08017ce4 	.word	0x08017ce4

08002e04 <showLine>:
//-------------------------------------------------------------------------------------------
void showLine(char *msg, uint16_t lin, int *last_len, bool update)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	; 0x28
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	607a      	str	r2, [r7, #4]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	460b      	mov	r3, r1
 8002e12:	817b      	strh	r3, [r7, #10]
 8002e14:	4613      	mov	r3, r2
 8002e16:	727b      	strb	r3, [r7, #9]
int il = strlen(msg);
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f7fd f9d9 	bl	80001d0 <strlen>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	617b      	str	r3, [r7, #20]
int xf = ( (SCREEN_WIDTH - (lfnt->FontWidth * il) ) >> 1);// & 0x7f;
 8002e22:	4b2e      	ldr	r3, [pc, #184]	; (8002edc <showLine+0xd8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	fb02 f303 	mul.w	r3, r2, r3
 8002e30:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002e34:	105b      	asrs	r3, r3, #1
 8002e36:	61fb      	str	r3, [r7, #28]
bool yes = false;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	76fb      	strb	r3, [r7, #27]

	if (*last_len > il) {
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	da0d      	bge.n	8002e62 <showLine+0x5e>
		ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 8002e46:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002e4a:	4b24      	ldr	r3, [pc, #144]	; (8002edc <showLine+0xd8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	785b      	ldrb	r3, [r3, #1]
 8002e50:	b21b      	sxth	r3, r3
 8002e52:	2200      	movs	r2, #0
 8002e54:	9200      	str	r2, [sp, #0]
 8002e56:	227c      	movs	r2, #124	; 0x7c
 8002e58:	2002      	movs	r0, #2
 8002e5a:	f7fe ffe2 	bl	8001e22 <ST7565_DrawFilledRectangle>
		yes = true;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	76fb      	strb	r3, [r7, #27]
	}
	*last_len = il;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	601a      	str	r2, [r3, #0]
	if (*msg > 0x7f) {
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	b25b      	sxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	da03      	bge.n	8002e7a <showLine+0x76>
		xf += il;
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	4413      	add	r3, r2
 8002e78:	61fb      	str	r3, [r7, #28]
	}
	if (!yes) ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 8002e7a:	7efb      	ldrb	r3, [r7, #27]
 8002e7c:	f083 0301 	eor.w	r3, r3, #1
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00b      	beq.n	8002e9e <showLine+0x9a>
 8002e86:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002e8a:	4b14      	ldr	r3, [pc, #80]	; (8002edc <showLine+0xd8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	785b      	ldrb	r3, [r3, #1]
 8002e90:	b21b      	sxth	r3, r3
 8002e92:	2200      	movs	r2, #0
 8002e94:	9200      	str	r2, [sp, #0]
 8002e96:	227c      	movs	r2, #124	; 0x7c
 8002e98:	2002      	movs	r0, #2
 8002e9a:	f7fe ffc2 	bl	8001e22 <ST7565_DrawFilledRectangle>

	if ((!xf) || (xf > (SCREEN_WIDTH - 4))) xf = 1;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <showLine+0xa6>
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	2b7c      	cmp	r3, #124	; 0x7c
 8002ea8:	dd01      	ble.n	8002eae <showLine+0xaa>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	61fb      	str	r3, [r7, #28]
	ST7565_Print(xf, lin, msg, lfnt, 1, PIX_ON);
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	b218      	sxth	r0, r3
 8002eb2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <showLine+0xd8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	9201      	str	r2, [sp, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	9200      	str	r2, [sp, #0]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	f7fe fd54 	bl	8001970 <ST7565_Print>
	if (update) ST7565_Update();
 8002ec8:	7a7b      	ldrb	r3, [r7, #9]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <showLine+0xce>
 8002ece:	f7fe fb9f 	bl	8001610 <ST7565_Update>
}
 8002ed2:	bf00      	nop
 8002ed4:	3720      	adds	r7, #32
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20002f48 	.word	0x20002f48

08002ee0 <errLedOn>:
#endif
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	71fb      	strb	r3, [r7, #7]
	if (on)
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <errLedOn+0x1c>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_SET);//LED ON
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	2108      	movs	r1, #8
 8002ef4:	4806      	ldr	r0, [pc, #24]	; (8002f10 <errLedOn+0x30>)
 8002ef6:	f005 faf1 	bl	80084dc <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
}
 8002efa:	e004      	b.n	8002f06 <errLedOn+0x26>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
 8002efc:	2200      	movs	r2, #0
 8002efe:	2108      	movs	r1, #8
 8002f00:	4803      	ldr	r0, [pc, #12]	; (8002f10 <errLedOn+0x30>)
 8002f02:	f005 faeb 	bl	80084dc <HAL_GPIO_WritePin>
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	48000800 	.word	0x48000800

08002f14 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
	return secCounter;
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <get_secCounter+0x14>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20001b0c 	.word	0x20001b0c

08002f2c <get_msCounter>:
{
	secCounter++;
}
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
	return msCounter;
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <get_msCounter+0x18>)
 8002f32:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20001b10 	.word	0x20001b10

08002f48 <get_tmr>:
{
	msCounter++;
}
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 8002f50:	f7ff ffe0 	bl	8002f14 <get_secCounter>
 8002f54:	4602      	mov	r2, r0
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4413      	add	r3, r2
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 8002f6a:	f7ff ffd3 	bl	8002f14 <get_secCounter>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4293      	cmp	r3, r2
 8002f74:	bf94      	ite	ls
 8002f76:	2301      	movls	r3, #1
 8002f78:	2300      	movhi	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <get_mstmr>:
//------------------------------------------------------------------------------------------
uint64_t get_mstmr(uint64_t hs)
{
 8002f84:	b5b0      	push	{r4, r5, r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	e9c7 0100 	strd	r0, r1, [r7]
	return (get_msCounter() + hs);
 8002f8e:	f7ff ffcd 	bl	8002f2c <get_msCounter>
 8002f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f96:	1884      	adds	r4, r0, r2
 8002f98:	eb41 0503 	adc.w	r5, r1, r3
 8002f9c:	4622      	mov	r2, r4
 8002f9e:	462b      	mov	r3, r5
}
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bdb0      	pop	{r4, r5, r7, pc}

08002faa <check_mstmr>:
//------------------------------------------------------------------------------------------
bool check_mstmr(uint64_t hs)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	e9c7 0100 	strd	r0, r1, [r7]
	return (get_msCounter() >= hs ? true : false);
 8002fb4:	f7ff ffba 	bl	8002f2c <get_msCounter>
 8002fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fbc:	4290      	cmp	r0, r2
 8002fbe:	eb71 0303 	sbcs.w	r3, r1, r3
 8002fc2:	bf2c      	ite	cs
 8002fc4:	2301      	movcs	r3, #1
 8002fc6:	2300      	movcc	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <toUppers>:
//------------------------------------------------------------------------------------------
void toUppers(char *st)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
int i;

    for (i = 0; i < strlen(st); i++) *(st + i) = toupper(*(st + i));
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	e019      	b.n	8003016 <toUppers+0x42>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	72fb      	strb	r3, [r7, #11]
 8002fec:	7afb      	ldrb	r3, [r7, #11]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	4a0f      	ldr	r2, [pc, #60]	; (8003030 <toUppers+0x5c>)
 8002ff2:	4413      	add	r3, r2
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d102      	bne.n	8003004 <toUppers+0x30>
 8002ffe:	7afb      	ldrb	r3, [r7, #11]
 8003000:	3b20      	subs	r3, #32
 8003002:	e000      	b.n	8003006 <toUppers+0x32>
 8003004:	7afb      	ldrb	r3, [r7, #11]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	440a      	add	r2, r1
 800300c:	b2db      	uxtb	r3, r3
 800300e:	7013      	strb	r3, [r2, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	3301      	adds	r3, #1
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fd f8da 	bl	80001d0 <strlen>
 800301c:	4602      	mov	r2, r0
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	429a      	cmp	r2, r3
 8003022:	d8de      	bhi.n	8002fe2 <toUppers+0xe>
}
 8003024:	bf00      	nop
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	08019404 	.word	0x08019404

08003034 <set_Date>:
//------------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b094      	sub	sp, #80	; 0x50
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	2000      	movs	r0, #0
 8003040:	460a      	mov	r2, r1
 8003042:	4603      	mov	r3, r0
 8003044:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 8003048:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800304c:	f107 0320 	add.w	r3, r7, #32
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f010 f992 	bl	801337c <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 8003058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800305a:	b2db      	uxtb	r3, r3
 800305c:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 800305e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003060:	b2db      	uxtb	r3, r3
 8003062:	3301      	adds	r3, #1
 8003064:	b2db      	uxtb	r3, r3
 8003066:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 8003068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306a:	b2db      	uxtb	r3, r3
 800306c:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 800306e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003070:	b2db      	uxtb	r3, r3
 8003072:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 8003074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003076:	b2da      	uxtb	r2, r3
 8003078:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <set_Date+0xb0>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	4413      	add	r3, r2
 800307e:	b2db      	uxtb	r3, r3
 8003080:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	b2db      	uxtb	r3, r3
 8003086:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 8003088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308a:	b2db      	uxtb	r3, r3
 800308c:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 800308e:	f107 030c 	add.w	r3, r7, #12
 8003092:	2200      	movs	r2, #0
 8003094:	4619      	mov	r1, r3
 8003096:	4814      	ldr	r0, [pc, #80]	; (80030e8 <set_Date+0xb4>)
 8003098:	f008 fb4d 	bl	800b736 <HAL_RTC_SetTime>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d007      	beq.n	80030b2 <set_Date+0x7e>
 80030a2:	4b12      	ldr	r3, [pc, #72]	; (80030ec <set_Date+0xb8>)
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	f043 0308 	orr.w	r3, r3, #8
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	4b0f      	ldr	r3, [pc, #60]	; (80030ec <set_Date+0xb8>)
 80030ae:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 80030b0:	e014      	b.n	80030dc <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 80030b2:	f107 0308 	add.w	r3, r7, #8
 80030b6:	2200      	movs	r2, #0
 80030b8:	4619      	mov	r1, r3
 80030ba:	480b      	ldr	r0, [pc, #44]	; (80030e8 <set_Date+0xb4>)
 80030bc:	f008 fc34 	bl	800b928 <HAL_RTC_SetDate>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d007      	beq.n	80030d6 <set_Date+0xa2>
 80030c6:	4b09      	ldr	r3, [pc, #36]	; (80030ec <set_Date+0xb8>)
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	f043 0308 	orr.w	r3, r3, #8
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	4b06      	ldr	r3, [pc, #24]	; (80030ec <set_Date+0xb8>)
 80030d2:	801a      	strh	r2, [r3, #0]
}
 80030d4:	e002      	b.n	80030dc <set_Date+0xa8>
			setDate = true;
 80030d6:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <set_Date+0xbc>)
 80030d8:	2201      	movs	r2, #1
 80030da:	701a      	strb	r2, [r3, #0]
}
 80030dc:	bf00      	nop
 80030de:	3750      	adds	r7, #80	; 0x50
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20001f1e 	.word	0x20001f1e
 80030e8:	20000a7c 	.word	0x20000a7c
 80030ec:	20001b08 	.word	0x20001b08
 80030f0:	20001f1d 	.word	0x20001f1d

080030f4 <sec2str>:

	return ep;
}
//------------------------------------------------------------------------------------------
int sec2str(char *st)
{
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b093      	sub	sp, #76	; 0x4c
 80030f8:	af04      	add	r7, sp, #16
 80030fa:	6078      	str	r0, [r7, #4]
int ret = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8003100:	4b40      	ldr	r3, [pc, #256]	; (8003204 <sec2str+0x110>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	f083 0301 	eor.w	r3, r3, #1
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d040      	beq.n	8003190 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 800310e:	f7ff ff01 	bl	8002f14 <get_secCounter>
 8003112:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	4a3c      	ldr	r2, [pc, #240]	; (8003208 <sec2str+0x114>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	0c1b      	lsrs	r3, r3, #16
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8003120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003122:	4a39      	ldr	r2, [pc, #228]	; (8003208 <sec2str+0x114>)
 8003124:	fba2 1203 	umull	r1, r2, r2, r3
 8003128:	0c12      	lsrs	r2, r2, #16
 800312a:	4938      	ldr	r1, [pc, #224]	; (800320c <sec2str+0x118>)
 800312c:	fb01 f202 	mul.w	r2, r1, r2
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 8003134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003136:	4a36      	ldr	r2, [pc, #216]	; (8003210 <sec2str+0x11c>)
 8003138:	fba2 2303 	umull	r2, r3, r2, r3
 800313c:	0adb      	lsrs	r3, r3, #11
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 8003140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003142:	4a33      	ldr	r2, [pc, #204]	; (8003210 <sec2str+0x11c>)
 8003144:	fba2 1203 	umull	r1, r2, r2, r3
 8003148:	0ad2      	lsrs	r2, r2, #11
 800314a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800314e:	fb01 f202 	mul.w	r2, r1, r2
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	4a2e      	ldr	r2, [pc, #184]	; (8003214 <sec2str+0x120>)
 800315a:	fba2 2303 	umull	r2, r3, r2, r3
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 8003162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003164:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <sec2str+0x120>)
 8003166:	fba3 1302 	umull	r1, r3, r3, r2
 800316a:	0959      	lsrs	r1, r3, #5
 800316c:	460b      	mov	r3, r1
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	1a5b      	subs	r3, r3, r1
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 8003178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317a:	9301      	str	r3, [sp, #4]
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003184:	4924      	ldr	r1, [pc, #144]	; (8003218 <sec2str+0x124>)
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f010 ffcc 	bl	8014124 <siprintf>
 800318c:	6378      	str	r0, [r7, #52]	; 0x34
 800318e:	e034      	b.n	80031fa <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8003190:	f107 030c 	add.w	r3, r7, #12
 8003194:	2200      	movs	r2, #0
 8003196:	4619      	mov	r1, r3
 8003198:	4820      	ldr	r0, [pc, #128]	; (800321c <sec2str+0x128>)
 800319a:	f008 fc4c 	bl	800ba36 <HAL_RTC_GetDate>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d007      	beq.n	80031b4 <sec2str+0xc0>
 80031a4:	4b1e      	ldr	r3, [pc, #120]	; (8003220 <sec2str+0x12c>)
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	f043 0308 	orr.w	r3, r3, #8
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	4b1c      	ldr	r3, [pc, #112]	; (8003220 <sec2str+0x12c>)
 80031b0:	801a      	strh	r2, [r3, #0]
 80031b2:	e022      	b.n	80031fa <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 80031b4:	f107 0310 	add.w	r3, r7, #16
 80031b8:	2200      	movs	r2, #0
 80031ba:	4619      	mov	r1, r3
 80031bc:	4817      	ldr	r0, [pc, #92]	; (800321c <sec2str+0x128>)
 80031be:	f008 fb57 	bl	800b870 <HAL_RTC_GetTime>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d007      	beq.n	80031d8 <sec2str+0xe4>
 80031c8:	4b15      	ldr	r3, [pc, #84]	; (8003220 <sec2str+0x12c>)
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	f043 0308 	orr.w	r3, r3, #8
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	4b13      	ldr	r3, [pc, #76]	; (8003220 <sec2str+0x12c>)
 80031d4:	801a      	strh	r2, [r3, #0]
 80031d6:	e010      	b.n	80031fa <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 80031d8:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80031da:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 80031dc:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80031de:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 80031e0:	7c3b      	ldrb	r3, [r7, #16]
 80031e2:	7c7a      	ldrb	r2, [r7, #17]
 80031e4:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80031e6:	9102      	str	r1, [sp, #8]
 80031e8:	9201      	str	r2, [sp, #4]
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	4623      	mov	r3, r4
 80031ee:	4602      	mov	r2, r0
 80031f0:	490c      	ldr	r1, [pc, #48]	; (8003224 <sec2str+0x130>)
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f010 ff96 	bl	8014124 <siprintf>
 80031f8:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 80031fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	373c      	adds	r7, #60	; 0x3c
 8003200:	46bd      	mov	sp, r7
 8003202:	bd90      	pop	{r4, r7, pc}
 8003204:	20001f1d 	.word	0x20001f1d
 8003208:	c22e4507 	.word	0xc22e4507
 800320c:	00015180 	.word	0x00015180
 8003210:	91a2b3c5 	.word	0x91a2b3c5
 8003214:	88888889 	.word	0x88888889
 8003218:	08017d14 	.word	0x08017d14
 800321c:	20000a7c 	.word	0x20000a7c
 8003220:	20001b08 	.word	0x20001b08
 8003224:	08017d2c 	.word	0x08017d2c

08003228 <Report>:
//--------------------------------------------------------------------------------------------
void Report(const uint8_t addTime, const char *fmt, ...)
{
 8003228:	b40e      	push	{r1, r2, r3}
 800322a:	b590      	push	{r4, r7, lr}
 800322c:	b08a      	sub	sp, #40	; 0x28
 800322e:	af00      	add	r7, sp, #0
 8003230:	4603      	mov	r3, r0
 8003232:	71fb      	strb	r3, [r7, #7]
#if defined(SET_BLE) || defined(SET_AUDIO)
	if(sleep_mode) return;
 8003234:	4b41      	ldr	r3, [pc, #260]	; (800333c <Report+0x114>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d178      	bne.n	800332e <Report+0x106>
#endif

	size_t len = MAX_UART_BUF;
 800323c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003240:	61bb      	str	r3, [r7, #24]
	char *buf = &cmdBuf[0];
 8003242:	4b3f      	ldr	r3, [pc, #252]	; (8003340 <Report+0x118>)
 8003244:	617b      	str	r3, [r7, #20]

	uint8_t cnt = 32;
 8003246:	2320      	movs	r3, #32
 8003248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t stim = HAL_GetTick();
 800324c:	f004 fbee 	bl	8007a2c <HAL_GetTick>
 8003250:	6238      	str	r0, [r7, #32]
	uint32_t etim = stim;
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	613b      	str	r3, [r7, #16]
	while (!uartRdy && cnt) {
 8003256:	e00e      	b.n	8003276 <Report+0x4e>
		etim = HAL_GetTick();
 8003258:	f004 fbe8 	bl	8007a2c <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]
		if (etim - stim) {
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	429a      	cmp	r2, r3
 8003264:	d007      	beq.n	8003276 <Report+0x4e>
			stim = HAL_GetTick();
 8003266:	f004 fbe1 	bl	8007a2c <HAL_GetTick>
 800326a:	6238      	str	r0, [r7, #32]
			cnt--;
 800326c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003270:	3b01      	subs	r3, #1
 8003272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (!uartRdy && cnt) {
 8003276:	4b33      	ldr	r3, [pc, #204]	; (8003344 <Report+0x11c>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d103      	bne.n	8003286 <Report+0x5e>
 800327e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1e8      	bne.n	8003258 <Report+0x30>
		}
	}

	//if (buf) {
		*buf = '\0';
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
		int dl = 0;
 800328c:	2300      	movs	r3, #0
 800328e:	61fb      	str	r3, [r7, #28]
		if (addTime) {
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d010      	beq.n	80032b8 <Report+0x90>
			dl = sec2str(buf);
 8003296:	6978      	ldr	r0, [r7, #20]
 8003298:	f7ff ff2c 	bl	80030f4 <sec2str>
 800329c:	61f8      	str	r0, [r7, #28]
			strcat(buf, " | ");
 800329e:	6978      	ldr	r0, [r7, #20]
 80032a0:	f7fc ff96 	bl	80001d0 <strlen>
 80032a4:	4603      	mov	r3, r0
 80032a6:	461a      	mov	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	4413      	add	r3, r2
 80032ac:	4a26      	ldr	r2, [pc, #152]	; (8003348 <Report+0x120>)
 80032ae:	6810      	ldr	r0, [r2, #0]
 80032b0:	6018      	str	r0, [r3, #0]
			dl += 3;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	3303      	adds	r3, #3
 80032b6:	61fb      	str	r3, [r7, #28]
		}

		va_list args;
		va_start(args, fmt);
 80032b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80032bc:	60fb      	str	r3, [r7, #12]
		vsnprintf(buf + dl, len - dl, fmt, args);
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	18d0      	adds	r0, r2, r3
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	1ad1      	subs	r1, r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032ce:	f011 fec5 	bl	801505c <vsniprintf>

		//if (itSemHandle != NULL) {
			if (osSemaphoreAcquire(itSemHandle, 2000) == osOK) {
 80032d2:	4b1e      	ldr	r3, [pc, #120]	; (800334c <Report+0x124>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80032da:	4618      	mov	r0, r3
 80032dc:	f00c fbf6 	bl	800facc <osSemaphoreAcquire>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d124      	bne.n	8003330 <Report+0x108>
		//}
				uartRdy = false;
 80032e6:	4b17      	ldr	r3, [pc, #92]	; (8003344 <Report+0x11c>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	701a      	strb	r2, [r3, #0]
				if (HAL_UART_Transmit_DMA(cmdPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 80032ec:	4b18      	ldr	r3, [pc, #96]	; (8003350 <Report+0x128>)
 80032ee:	681c      	ldr	r4, [r3, #0]
 80032f0:	6978      	ldr	r0, [r7, #20]
 80032f2:	f7fc ff6d 	bl	80001d0 <strlen>
 80032f6:	4603      	mov	r3, r0
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	461a      	mov	r2, r3
 80032fc:	6979      	ldr	r1, [r7, #20]
 80032fe:	4620      	mov	r0, r4
 8003300:	f00a feac 	bl	800e05c <HAL_UART_Transmit_DMA>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d006      	beq.n	8003318 <Report+0xf0>
 800330a:	4b12      	ldr	r3, [pc, #72]	; (8003354 <Report+0x12c>)
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	f043 0302 	orr.w	r3, r3, #2
 8003312:	b29a      	uxth	r2, r3
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <Report+0x12c>)
 8003316:	801a      	strh	r2, [r3, #0]
				while (!uartRdy) {} //HAL_Delay(1)
 8003318:	bf00      	nop
 800331a:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <Report+0x11c>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0fb      	beq.n	800331a <Report+0xf2>

		//if (itSemHandle) {
				osSemaphoreRelease(itSemHandle);
 8003322:	4b0a      	ldr	r3, [pc, #40]	; (800334c <Report+0x124>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f00c fc22 	bl	800fb70 <osSemaphoreRelease>
 800332c:	e000      	b.n	8003330 <Report+0x108>
	if(sleep_mode) return;
 800332e:	bf00      	nop
	//	free(buf);
	//} else {
	//	devError |= devMEM;
	//}

}
 8003330:	3728      	adds	r7, #40	; 0x28
 8003332:	46bd      	mov	sp, r7
 8003334:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003338:	b003      	add	sp, #12
 800333a:	4770      	bx	lr
 800333c:	20003600 	.word	0x20003600
 8003340:	20001308 	.word	0x20001308
 8003344:	20000018 	.word	0x20000018
 8003348:	08017d48 	.word	0x08017d48
 800334c:	20000e80 	.word	0x20000e80
 8003350:	20000014 	.word	0x20000014
 8003354:	20001b08 	.word	0x20001b08

08003358 <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <HAL_UART_TxCpltCallback+0x38>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d103      	bne.n	8003372 <HAL_UART_TxCpltCallback+0x1a>
		uartRdy = 1;
 800336a:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <HAL_UART_TxCpltCallback+0x3c>)
 800336c:	2201      	movs	r2, #1
 800336e:	701a      	strb	r2, [r3, #0]
	else
	if (huart->Instance == USART3) {
		bleRdy = 1;
	}
#endif
}
 8003370:	e007      	b.n	8003382 <HAL_UART_TxCpltCallback+0x2a>
	if (huart->Instance == USART3) {
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a08      	ldr	r2, [pc, #32]	; (8003398 <HAL_UART_TxCpltCallback+0x40>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d102      	bne.n	8003382 <HAL_UART_TxCpltCallback+0x2a>
		bleRdy = 1;
 800337c:	4b07      	ldr	r3, [pc, #28]	; (800339c <HAL_UART_TxCpltCallback+0x44>)
 800337e:	2201      	movs	r2, #1
 8003380:	701a      	strb	r2, [r3, #0]
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40004400 	.word	0x40004400
 8003394:	20000018 	.word	0x20000018
 8003398:	40004800 	.word	0x40004800
 800339c:	2000012c 	.word	0x2000012c

080033a0 <HAL_UART_ErrorCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0e      	ldr	r2, [pc, #56]	; (80033e8 <HAL_UART_ErrorCallback+0x48>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d107      	bne.n	80033c2 <HAL_UART_ErrorCallback+0x22>
		devError |= devUART;
 80033b2:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <HAL_UART_ErrorCallback+0x4c>)
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	f043 0302 	orr.w	r3, r3, #2
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_UART_ErrorCallback+0x4c>)
 80033be:	801a      	strh	r2, [r3, #0]
	else
	if (huart->Instance == USART3) {
		devError |= devBLE;
	}
#endif
}
 80033c0:	e00b      	b.n	80033da <HAL_UART_ErrorCallback+0x3a>
	if (huart->Instance == USART3) {
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a0a      	ldr	r2, [pc, #40]	; (80033f0 <HAL_UART_ErrorCallback+0x50>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d106      	bne.n	80033da <HAL_UART_ErrorCallback+0x3a>
		devError |= devBLE;
 80033cc:	4b07      	ldr	r3, [pc, #28]	; (80033ec <HAL_UART_ErrorCallback+0x4c>)
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	4b05      	ldr	r3, [pc, #20]	; (80033ec <HAL_UART_ErrorCallback+0x4c>)
 80033d8:	801a      	strh	r2, [r3, #0]
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40004400 	.word	0x40004400
 80033ec:	20001b08 	.word	0x20001b08
 80033f0:	40004800 	.word	0x40004800

080033f4 <HAL_UART_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033f4:	b590      	push	{r4, r7, lr}
 80033f6:	b093      	sub	sp, #76	; 0x4c
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
#if defined(SET_BLE) || defined(SET_AUDIO)
	if (huart->Instance == USART3) {
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4aac      	ldr	r2, [pc, #688]	; (80036b4 <HAL_UART_RxCpltCallback+0x2c0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d178      	bne.n	80034f8 <HAL_UART_RxCpltCallback+0x104>
		rxbBuf[rxbInd++] = (char)rxbByte;
 8003406:	4bac      	ldr	r3, [pc, #688]	; (80036b8 <HAL_UART_RxCpltCallback+0x2c4>)
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	b291      	uxth	r1, r2
 800340e:	4aaa      	ldr	r2, [pc, #680]	; (80036b8 <HAL_UART_RxCpltCallback+0x2c4>)
 8003410:	8011      	strh	r1, [r2, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	4ba9      	ldr	r3, [pc, #676]	; (80036bc <HAL_UART_RxCpltCallback+0x2c8>)
 8003416:	7819      	ldrb	r1, [r3, #0]
 8003418:	4ba9      	ldr	r3, [pc, #676]	; (80036c0 <HAL_UART_RxCpltCallback+0x2cc>)
 800341a:	5499      	strb	r1, [r3, r2]
		if (rxbByte == 0x0a) {// '\n'
 800341c:	4ba7      	ldr	r3, [pc, #668]	; (80036bc <HAL_UART_RxCpltCallback+0x2c8>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b0a      	cmp	r3, #10
 8003422:	d158      	bne.n	80034d6 <HAL_UART_RxCpltCallback+0xe2>
			rxbBuf[--rxbInd] = '\0';
 8003424:	4ba4      	ldr	r3, [pc, #656]	; (80036b8 <HAL_UART_RxCpltCallback+0x2c4>)
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	4ba2      	ldr	r3, [pc, #648]	; (80036b8 <HAL_UART_RxCpltCallback+0x2c4>)
 800342e:	801a      	strh	r2, [r3, #0]
 8003430:	4ba1      	ldr	r3, [pc, #644]	; (80036b8 <HAL_UART_RxCpltCallback+0x2c4>)
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	461a      	mov	r2, r3
 8003436:	4ba2      	ldr	r3, [pc, #648]	; (80036c0 <HAL_UART_RxCpltCallback+0x2cc>)
 8003438:	2100      	movs	r1, #0
 800343a:	5499      	strb	r1, [r3, r2]
			int len = strlen(rxbBuf);
 800343c:	48a0      	ldr	r0, [pc, #640]	; (80036c0 <HAL_UART_RxCpltCallback+0x2cc>)
 800343e:	f7fc fec7 	bl	80001d0 <strlen>
 8003442:	4603      	mov	r3, r0
 8003444:	61fb      	str	r3, [r7, #28]
			// Блок помещает в очередь ответов на команду очередное сообщение от модуля BLE
			if (len > 1) {
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	2b01      	cmp	r3, #1
 800344a:	dd3b      	ble.n	80034c4 <HAL_UART_RxCpltCallback+0xd0>
				char *from_audio = (char *)calloc(1, MAX_BLE_BUF);//len + 1);
 800344c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003450:	2001      	movs	r0, #1
 8003452:	f00f fe8f 	bl	8013174 <calloc>
 8003456:	4603      	mov	r3, r0
 8003458:	61bb      	str	r3, [r7, #24]
				//char *from_audio = (char *)pvPortMalloc(256);
				if (from_audio) {
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d02a      	beq.n	80034b6 <HAL_UART_RxCpltCallback+0xc2>
					strncpy(from_audio, rxbBuf, MAX_BLE_BUF - 1);
 8003460:	22ff      	movs	r2, #255	; 0xff
 8003462:	4997      	ldr	r1, [pc, #604]	; (80036c0 <HAL_UART_RxCpltCallback+0x2cc>)
 8003464:	69b8      	ldr	r0, [r7, #24]
 8003466:	f010 fee9 	bl	801423c <strncpy>
					rec_msg_t ac;
					ac.msg = from_audio;
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	617b      	str	r3, [r7, #20]
					if (osMessageQueuePut(ackQueHandle, (const void *)&ac, 0, 0) != osOK) {
 800346e:	4b95      	ldr	r3, [pc, #596]	; (80036c4 <HAL_UART_RxCpltCallback+0x2d0>)
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	f107 0114 	add.w	r1, r7, #20
 8003476:	2300      	movs	r3, #0
 8003478:	2200      	movs	r2, #0
 800347a:	f00c fc31 	bl	800fce0 <osMessageQueuePut>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <HAL_UART_RxCpltCallback+0xa6>
						devError |= devQUE;
 8003484:	4b90      	ldr	r3, [pc, #576]	; (80036c8 <HAL_UART_RxCpltCallback+0x2d4>)
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800348c:	b29a      	uxth	r2, r3
 800348e:	4b8e      	ldr	r3, [pc, #568]	; (80036c8 <HAL_UART_RxCpltCallback+0x2d4>)
 8003490:	801a      	strh	r2, [r3, #0]
						free(from_audio);
 8003492:	69b8      	ldr	r0, [r7, #24]
 8003494:	f010 f84e 	bl	8013534 <free>
 8003498:	e014      	b.n	80034c4 <HAL_UART_RxCpltCallback+0xd0>
						//vPortFree(from_audio);
					} else {
						if (devError & devQUE) devError &= ~devQUE;
 800349a:	4b8b      	ldr	r3, [pc, #556]	; (80036c8 <HAL_UART_RxCpltCallback+0x2d4>)
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00e      	beq.n	80034c4 <HAL_UART_RxCpltCallback+0xd0>
 80034a6:	4b88      	ldr	r3, [pc, #544]	; (80036c8 <HAL_UART_RxCpltCallback+0x2d4>)
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	4b85      	ldr	r3, [pc, #532]	; (80036c8 <HAL_UART_RxCpltCallback+0x2d4>)
 80034b2:	801a      	strh	r2, [r3, #0]
 80034b4:	e006      	b.n	80034c4 <HAL_UART_RxCpltCallback+0xd0>
					}
				} else {
					devError |= devMEM;
 80034b6:	4b84      	ldr	r3, [pc, #528]	; (80036c8 <HAL_UART_RxCpltCallback+0x2d4>)
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	f043 0304 	orr.w	r3, r3, #4
 80034be:	b29a      	uxth	r2, r3
 80034c0:	4b81      	ldr	r3, [pc, #516]	; (80036c8 <HAL_UART_RxCpltCallback+0x2d4>)
 80034c2:	801a      	strh	r2, [r3, #0]
				}
			}
			//-----------------------------------------------------------------------------
			rxbInd = 0;
 80034c4:	4b7c      	ldr	r3, [pc, #496]	; (80036b8 <HAL_UART_RxCpltCallback+0x2c4>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	801a      	strh	r2, [r3, #0]
			memset(rxbBuf, 0, sizeof(rxbBuf));
 80034ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034ce:	2100      	movs	r1, #0
 80034d0:	487b      	ldr	r0, [pc, #492]	; (80036c0 <HAL_UART_RxCpltCallback+0x2cc>)
 80034d2:	f010 f845 	bl	8013560 <memset>
		}
		//
		if (HAL_UART_Receive_IT(huart, &rxbByte, 1) != HAL_OK) devError |= devBLE;
 80034d6:	2201      	movs	r2, #1
 80034d8:	4978      	ldr	r1, [pc, #480]	; (80036bc <HAL_UART_RxCpltCallback+0x2c8>)
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f00a fd68 	bl	800dfb0 <HAL_UART_Receive_IT>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 82e1 	beq.w	8003aaa <HAL_UART_RxCpltCallback+0x6b6>
 80034e8:	4b77      	ldr	r3, [pc, #476]	; (80036c8 <HAL_UART_RxCpltCallback+0x2d4>)
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	4b75      	ldr	r3, [pc, #468]	; (80036c8 <HAL_UART_RxCpltCallback+0x2d4>)
 80034f4:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
		}

		if (HAL_UART_Receive_IT(huart, &rxByte, 1) != HAL_OK) devError |= devUART;
	}
}
 80034f6:	e2d8      	b.n	8003aaa <HAL_UART_RxCpltCallback+0x6b6>
	if (huart->Instance == USART2) {
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a73      	ldr	r2, [pc, #460]	; (80036cc <HAL_UART_RxCpltCallback+0x2d8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	f040 82d3 	bne.w	8003aaa <HAL_UART_RxCpltCallback+0x6b6>
		rxBuf[rxInd++] = (char)rxByte;
 8003504:	4b72      	ldr	r3, [pc, #456]	; (80036d0 <HAL_UART_RxCpltCallback+0x2dc>)
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	b291      	uxth	r1, r2
 800350c:	4a70      	ldr	r2, [pc, #448]	; (80036d0 <HAL_UART_RxCpltCallback+0x2dc>)
 800350e:	8011      	strh	r1, [r2, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	4b70      	ldr	r3, [pc, #448]	; (80036d4 <HAL_UART_RxCpltCallback+0x2e0>)
 8003514:	7819      	ldrb	r1, [r3, #0]
 8003516:	4b70      	ldr	r3, [pc, #448]	; (80036d8 <HAL_UART_RxCpltCallback+0x2e4>)
 8003518:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 800351a:	4b6e      	ldr	r3, [pc, #440]	; (80036d4 <HAL_UART_RxCpltCallback+0x2e0>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b0a      	cmp	r3, #10
 8003520:	f040 82b4 	bne.w	8003a8c <HAL_UART_RxCpltCallback+0x698>
			rxBuf[--rxInd] = '\0';
 8003524:	4b6a      	ldr	r3, [pc, #424]	; (80036d0 <HAL_UART_RxCpltCallback+0x2dc>)
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	4b68      	ldr	r3, [pc, #416]	; (80036d0 <HAL_UART_RxCpltCallback+0x2dc>)
 800352e:	801a      	strh	r2, [r3, #0]
 8003530:	4b67      	ldr	r3, [pc, #412]	; (80036d0 <HAL_UART_RxCpltCallback+0x2dc>)
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	461a      	mov	r2, r3
 8003536:	4b68      	ldr	r3, [pc, #416]	; (80036d8 <HAL_UART_RxCpltCallback+0x2e4>)
 8003538:	2100      	movs	r1, #0
 800353a:	5499      	strb	r1, [r3, r2]
			int i, ev = -1;
 800353c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003540:	613b      	str	r3, [r7, #16]
			if (strlen(rxBuf) > 2) {
 8003542:	4865      	ldr	r0, [pc, #404]	; (80036d8 <HAL_UART_RxCpltCallback+0x2e4>)
 8003544:	f7fc fe44 	bl	80001d0 <strlen>
 8003548:	4603      	mov	r3, r0
 800354a:	2b02      	cmp	r3, #2
 800354c:	f240 8298 	bls.w	8003a80 <HAL_UART_RxCpltCallback+0x68c>
				if ( (strstr(rxBuf, "at+")) || (strstr(rxBuf, "AT+")) ) {
 8003550:	4962      	ldr	r1, [pc, #392]	; (80036dc <HAL_UART_RxCpltCallback+0x2e8>)
 8003552:	4861      	ldr	r0, [pc, #388]	; (80036d8 <HAL_UART_RxCpltCallback+0x2e4>)
 8003554:	f010 fe85 	bl	8014262 <strstr>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_UART_RxCpltCallback+0x178>
 800355e:	4960      	ldr	r1, [pc, #384]	; (80036e0 <HAL_UART_RxCpltCallback+0x2ec>)
 8003560:	485d      	ldr	r0, [pc, #372]	; (80036d8 <HAL_UART_RxCpltCallback+0x2e4>)
 8003562:	f010 fe7e 	bl	8014262 <strstr>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d042      	beq.n	80035f2 <HAL_UART_RxCpltCallback+0x1fe>
					char *to_audio = (char *)calloc(1, MAX_BLE_BUF);
 800356c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003570:	2001      	movs	r0, #1
 8003572:	f00f fdff 	bl	8013174 <calloc>
 8003576:	4603      	mov	r3, r0
 8003578:	623b      	str	r3, [r7, #32]
					if (to_audio) {
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d02d      	beq.n	80035dc <HAL_UART_RxCpltCallback+0x1e8>
						strncpy(to_audio, rxBuf, MAX_BLE_BUF - 1);
 8003580:	22ff      	movs	r2, #255	; 0xff
 8003582:	4955      	ldr	r1, [pc, #340]	; (80036d8 <HAL_UART_RxCpltCallback+0x2e4>)
 8003584:	6a38      	ldr	r0, [r7, #32]
 8003586:	f010 fe59 	bl	801423c <strncpy>
						toUppers(to_audio);
 800358a:	6a38      	ldr	r0, [r7, #32]
 800358c:	f7ff fd22 	bl	8002fd4 <toUppers>
						cd.msg = to_audio;
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	60fb      	str	r3, [r7, #12]
						if (osMessageQueuePut(cmdQueHandle, (const void *)&cd, 0, 0) != osOK) {
 8003594:	4b53      	ldr	r3, [pc, #332]	; (80036e4 <HAL_UART_RxCpltCallback+0x2f0>)
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	f107 010c 	add.w	r1, r7, #12
 800359c:	2300      	movs	r3, #0
 800359e:	2200      	movs	r2, #0
 80035a0:	f00c fb9e 	bl	800fce0 <osMessageQueuePut>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_UART_RxCpltCallback+0x1cc>
							devError |= devQUE;
 80035aa:	4b47      	ldr	r3, [pc, #284]	; (80036c8 <HAL_UART_RxCpltCallback+0x2d4>)
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	4b44      	ldr	r3, [pc, #272]	; (80036c8 <HAL_UART_RxCpltCallback+0x2d4>)
 80035b6:	801a      	strh	r2, [r3, #0]
							free(to_audio);
 80035b8:	6a38      	ldr	r0, [r7, #32]
 80035ba:	f00f ffbb 	bl	8013534 <free>
 80035be:	e014      	b.n	80035ea <HAL_UART_RxCpltCallback+0x1f6>
							if (devError & devQUE) devError &= ~devQUE;
 80035c0:	4b41      	ldr	r3, [pc, #260]	; (80036c8 <HAL_UART_RxCpltCallback+0x2d4>)
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00e      	beq.n	80035ea <HAL_UART_RxCpltCallback+0x1f6>
 80035cc:	4b3e      	ldr	r3, [pc, #248]	; (80036c8 <HAL_UART_RxCpltCallback+0x2d4>)
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	4b3c      	ldr	r3, [pc, #240]	; (80036c8 <HAL_UART_RxCpltCallback+0x2d4>)
 80035d8:	801a      	strh	r2, [r3, #0]
 80035da:	e006      	b.n	80035ea <HAL_UART_RxCpltCallback+0x1f6>
						devError |= devMEM;
 80035dc:	4b3a      	ldr	r3, [pc, #232]	; (80036c8 <HAL_UART_RxCpltCallback+0x2d4>)
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	f043 0304 	orr.w	r3, r3, #4
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	4b38      	ldr	r3, [pc, #224]	; (80036c8 <HAL_UART_RxCpltCallback+0x2d4>)
 80035e8:	801a      	strh	r2, [r3, #0]
					ev = -2;
 80035ea:	f06f 0301 	mvn.w	r3, #1
 80035ee:	613b      	str	r3, [r7, #16]
				if ( (strstr(rxBuf, "at+")) || (strstr(rxBuf, "AT+")) ) {
 80035f0:	e22a      	b.n	8003a48 <HAL_UART_RxCpltCallback+0x654>
					for (i = 0; i < MAX_CMDS; i++) {
 80035f2:	2300      	movs	r3, #0
 80035f4:	647b      	str	r3, [r7, #68]	; 0x44
 80035f6:	e221      	b.n	8003a3c <HAL_UART_RxCpltCallback+0x648>
						if (!strncmp(rxBuf, s_cmds[i], strlen(s_cmds[i]))) {
 80035f8:	4a3b      	ldr	r2, [pc, #236]	; (80036e8 <HAL_UART_RxCpltCallback+0x2f4>)
 80035fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003600:	4a39      	ldr	r2, [pc, #228]	; (80036e8 <HAL_UART_RxCpltCallback+0x2f4>)
 8003602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003608:	4618      	mov	r0, r3
 800360a:	f7fc fde1 	bl	80001d0 <strlen>
 800360e:	4603      	mov	r3, r0
 8003610:	461a      	mov	r2, r3
 8003612:	4621      	mov	r1, r4
 8003614:	4830      	ldr	r0, [pc, #192]	; (80036d8 <HAL_UART_RxCpltCallback+0x2e4>)
 8003616:	f010 fdfd 	bl	8014214 <strncmp>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	f040 820a 	bne.w	8003a36 <HAL_UART_RxCpltCallback+0x642>
							char *uk = rxBuf + strlen(s_cmds[i]);
 8003622:	4a31      	ldr	r2, [pc, #196]	; (80036e8 <HAL_UART_RxCpltCallback+0x2f4>)
 8003624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fc fdd0 	bl	80001d0 <strlen>
 8003630:	4603      	mov	r3, r0
 8003632:	4a29      	ldr	r2, [pc, #164]	; (80036d8 <HAL_UART_RxCpltCallback+0x2e4>)
 8003634:	4413      	add	r3, r2
 8003636:	63fb      	str	r3, [r7, #60]	; 0x3c
							ev = -1;
 8003638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800363c:	613b      	str	r3, [r7, #16]
							switch (i) {
 800363e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003640:	2b19      	cmp	r3, #25
 8003642:	f200 8200 	bhi.w	8003a46 <HAL_UART_RxCpltCallback+0x652>
 8003646:	a201      	add	r2, pc, #4	; (adr r2, 800364c <HAL_UART_RxCpltCallback+0x258>)
 8003648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364c:	08003827 	.word	0x08003827
 8003650:	08003827 	.word	0x08003827
 8003654:	0800382d 	.word	0x0800382d
 8003658:	08003a47 	.word	0x08003a47
 800365c:	0800387f 	.word	0x0800387f
 8003660:	0800387f 	.word	0x0800387f
 8003664:	080039d9 	.word	0x080039d9
 8003668:	080038f1 	.word	0x080038f1
 800366c:	08003a47 	.word	0x08003a47
 8003670:	08003827 	.word	0x08003827
 8003674:	08003827 	.word	0x08003827
 8003678:	080037e5 	.word	0x080037e5
 800367c:	080037a1 	.word	0x080037a1
 8003680:	08003719 	.word	0x08003719
 8003684:	08003827 	.word	0x08003827
 8003688:	08003783 	.word	0x08003783
 800368c:	080037e5 	.word	0x080037e5
 8003690:	080036ed 	.word	0x080036ed
 8003694:	08003827 	.word	0x08003827
 8003698:	08003a47 	.word	0x08003a47
 800369c:	08003827 	.word	0x08003827
 80036a0:	08003a47 	.word	0x08003a47
 80036a4:	08003827 	.word	0x08003827
 80036a8:	08003827 	.word	0x08003827
 80036ac:	08003827 	.word	0x08003827
 80036b0:	08003827 	.word	0x08003827
 80036b4:	40004800 	.word	0x40004800
 80036b8:	200032f4 	.word	0x200032f4
 80036bc:	200032f2 	.word	0x200032f2
 80036c0:	200032f8 	.word	0x200032f8
 80036c4:	20000e7c 	.word	0x20000e7c
 80036c8:	20001b08 	.word	0x20001b08
 80036cc:	40004400 	.word	0x40004400
 80036d0:	20001b1a 	.word	0x20001b1a
 80036d4:	20001b18 	.word	0x20001b18
 80036d8:	20001b1c 	.word	0x20001b1c
 80036dc:	08017d4c 	.word	0x08017d4c
 80036e0:	08017d50 	.word	0x08017d50
 80036e4:	20000e78 	.word	0x20000e78
 80036e8:	20000020 	.word	0x20000020
									if (strlen(uk) >= 1) {
 80036ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 818e 	beq.w	8003a12 <HAL_UART_RxCpltCallback+0x61e>
										newBand = atol(uk);
 80036f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80036f8:	f00f fd37 	bl	801316a <atol>
 80036fc:	4603      	mov	r3, r0
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	4ba4      	ldr	r3, [pc, #656]	; (8003994 <HAL_UART_RxCpltCallback+0x5a0>)
 8003702:	701a      	strb	r2, [r3, #0]
										if (newBand != Band) {
 8003704:	4ba3      	ldr	r3, [pc, #652]	; (8003994 <HAL_UART_RxCpltCallback+0x5a0>)
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	4ba3      	ldr	r3, [pc, #652]	; (8003998 <HAL_UART_RxCpltCallback+0x5a4>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	f000 8180 	beq.w	8003a12 <HAL_UART_RxCpltCallback+0x61e>
											ev = i;
 8003712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003714:	613b      	str	r3, [r7, #16]
								break;
 8003716:	e17c      	b.n	8003a12 <HAL_UART_RxCpltCallback+0x61e>
									if (strlen(uk) >= 1) {
 8003718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 817a 	beq.w	8003a16 <HAL_UART_RxCpltCallback+0x622>
										uint8_t nv = Volume;
 8003722:	4b9e      	ldr	r3, [pc, #632]	; (800399c <HAL_UART_RxCpltCallback+0x5a8>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
										if (strstr(uk, "up")) {
 800372a:	499d      	ldr	r1, [pc, #628]	; (80039a0 <HAL_UART_RxCpltCallback+0x5ac>)
 800372c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800372e:	f010 fd98 	bl	8014262 <strstr>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_UART_RxCpltCallback+0x350>
											nv++;
 8003738:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800373c:	3301      	adds	r3, #1
 800373e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003742:	e012      	b.n	800376a <HAL_UART_RxCpltCallback+0x376>
										} else if (strstr(uk, "down")) {
 8003744:	4997      	ldr	r1, [pc, #604]	; (80039a4 <HAL_UART_RxCpltCallback+0x5b0>)
 8003746:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003748:	f010 fd8b 	bl	8014262 <strstr>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_UART_RxCpltCallback+0x36a>
											nv--;
 8003752:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003756:	3b01      	subs	r3, #1
 8003758:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800375c:	e005      	b.n	800376a <HAL_UART_RxCpltCallback+0x376>
											nv = (uint8_t)atol(uk);
 800375e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003760:	f00f fd03 	bl	801316a <atol>
 8003764:	4603      	mov	r3, r0
 8003766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
										if ((nv >= 0) && (nv <= 15)) {
 800376a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800376e:	2b0f      	cmp	r3, #15
 8003770:	f200 8151 	bhi.w	8003a16 <HAL_UART_RxCpltCallback+0x622>
											newVolume = nv;
 8003774:	4a8c      	ldr	r2, [pc, #560]	; (80039a8 <HAL_UART_RxCpltCallback+0x5b4>)
 8003776:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800377a:	7013      	strb	r3, [r2, #0]
											ev = i;
 800377c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800377e:	613b      	str	r3, [r7, #16]
								break;
 8003780:	e149      	b.n	8003a16 <HAL_UART_RxCpltCallback+0x622>
									if (strlen(uk) >= 1) {
 8003782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 8147 	beq.w	8003a1a <HAL_UART_RxCpltCallback+0x626>
										newBassBoost = (uint8_t)atol(uk);
 800378c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800378e:	f00f fcec 	bl	801316a <atol>
 8003792:	4603      	mov	r3, r0
 8003794:	b2da      	uxtb	r2, r3
 8003796:	4b85      	ldr	r3, [pc, #532]	; (80039ac <HAL_UART_RxCpltCallback+0x5b8>)
 8003798:	701a      	strb	r2, [r3, #0]
										ev = i;
 800379a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800379c:	613b      	str	r3, [r7, #16]
								break;
 800379e:	e13c      	b.n	8003a1a <HAL_UART_RxCpltCallback+0x626>
									if (strlen(uk) >= 2) {
 80037a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037a2:	f7fc fd15 	bl	80001d0 <strlen>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	f240 8138 	bls.w	8003a1e <HAL_UART_RxCpltCallback+0x62a>
										newFreq = (float)atof(uk);
 80037ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037b0:	f00f fcd4 	bl	801315c <atof>
 80037b4:	ec53 2b10 	vmov	r2, r3, d0
 80037b8:	4610      	mov	r0, r2
 80037ba:	4619      	mov	r1, r3
 80037bc:	f7fd fa14 	bl	8000be8 <__aeabi_d2f>
 80037c0:	4603      	mov	r3, r0
 80037c2:	4a7b      	ldr	r2, [pc, #492]	; (80039b0 <HAL_UART_RxCpltCallback+0x5bc>)
 80037c4:	6013      	str	r3, [r2, #0]
										if (newFreq != Freq) {
 80037c6:	4b7a      	ldr	r3, [pc, #488]	; (80039b0 <HAL_UART_RxCpltCallback+0x5bc>)
 80037c8:	ed93 7a00 	vldr	s14, [r3]
 80037cc:	4b79      	ldr	r3, [pc, #484]	; (80039b4 <HAL_UART_RxCpltCallback+0x5c0>)
 80037ce:	edd3 7a00 	vldr	s15, [r3]
 80037d2:	eeb4 7a67 	vcmp.f32	s14, s15
 80037d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037da:	f000 8120 	beq.w	8003a1e <HAL_UART_RxCpltCallback+0x62a>
											ev = i;
 80037de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037e0:	613b      	str	r3, [r7, #16]
								break;
 80037e2:	e11c      	b.n	8003a1e <HAL_UART_RxCpltCallback+0x62a>
									seek_up = 1;
 80037e4:	4b74      	ldr	r3, [pc, #464]	; (80039b8 <HAL_UART_RxCpltCallback+0x5c4>)
 80037e6:	2201      	movs	r2, #1
 80037e8:	701a      	strb	r2, [r3, #0]
									ev = i;
 80037ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ec:	613b      	str	r3, [r7, #16]
									char *uki = strchr(uk, ':');
 80037ee:	213a      	movs	r1, #58	; 0x3a
 80037f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037f2:	f010 fcfa 	bl	80141ea <strchr>
 80037f6:	63b8      	str	r0, [r7, #56]	; 0x38
									if (uki) {
 80037f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 8111 	beq.w	8003a22 <HAL_UART_RxCpltCallback+0x62e>
										if ((*(char *)(uki + 1) == '0') || strstr(uki + 1, "down")) seek_up = 0;
 8003800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003802:	3301      	adds	r3, #1
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b30      	cmp	r3, #48	; 0x30
 8003808:	d009      	beq.n	800381e <HAL_UART_RxCpltCallback+0x42a>
 800380a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380c:	3301      	adds	r3, #1
 800380e:	4965      	ldr	r1, [pc, #404]	; (80039a4 <HAL_UART_RxCpltCallback+0x5b0>)
 8003810:	4618      	mov	r0, r3
 8003812:	f010 fd26 	bl	8014262 <strstr>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 8102 	beq.w	8003a22 <HAL_UART_RxCpltCallback+0x62e>
 800381e:	4b66      	ldr	r3, [pc, #408]	; (80039b8 <HAL_UART_RxCpltCallback+0x5c4>)
 8003820:	2200      	movs	r2, #0
 8003822:	701a      	strb	r2, [r3, #0]
								break;
 8003824:	e0fd      	b.n	8003a22 <HAL_UART_RxCpltCallback+0x62e>
									ev = i;
 8003826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003828:	613b      	str	r3, [r7, #16]
								break;
 800382a:	e103      	b.n	8003a34 <HAL_UART_RxCpltCallback+0x640>
									if (strlen(uk) >= 10) {
 800382c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800382e:	f7fc fccf 	bl	80001d0 <strlen>
 8003832:	4603      	mov	r3, r0
 8003834:	2b09      	cmp	r3, #9
 8003836:	f240 80f6 	bls.w	8003a26 <HAL_UART_RxCpltCallback+0x632>
										char *uki = strchr(uk, ':');
 800383a:	213a      	movs	r1, #58	; 0x3a
 800383c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800383e:	f010 fcd4 	bl	80141ea <strchr>
 8003842:	6278      	str	r0, [r7, #36]	; 0x24
										if (uki) {
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00c      	beq.n	8003864 <HAL_UART_RxCpltCallback+0x470>
											tZone = (uint8_t)atol(uki + 1);
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	3301      	adds	r3, #1
 800384e:	4618      	mov	r0, r3
 8003850:	f00f fc8b 	bl	801316a <atol>
 8003854:	4603      	mov	r3, r0
 8003856:	b2da      	uxtb	r2, r3
 8003858:	4b58      	ldr	r3, [pc, #352]	; (80039bc <HAL_UART_RxCpltCallback+0x5c8>)
 800385a:	701a      	strb	r2, [r3, #0]
											*uki = '\0';
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	2200      	movs	r2, #0
 8003860:	701a      	strb	r2, [r3, #0]
 8003862:	e002      	b.n	800386a <HAL_UART_RxCpltCallback+0x476>
											tZone = 0;
 8003864:	4b55      	ldr	r3, [pc, #340]	; (80039bc <HAL_UART_RxCpltCallback+0x5c8>)
 8003866:	2200      	movs	r2, #0
 8003868:	701a      	strb	r2, [r3, #0]
										epoch = (uint32_t)atol(uk);
 800386a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800386c:	f00f fc7d 	bl	801316a <atol>
 8003870:	4603      	mov	r3, r0
 8003872:	461a      	mov	r2, r3
 8003874:	4b52      	ldr	r3, [pc, #328]	; (80039c0 <HAL_UART_RxCpltCallback+0x5cc>)
 8003876:	601a      	str	r2, [r3, #0]
										ev = i;
 8003878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800387a:	613b      	str	r3, [r7, #16]
								break;
 800387c:	e0d3      	b.n	8003a26 <HAL_UART_RxCpltCallback+0x632>
									if (i == cmdsRead) cmd_sector = cmdsRead;
 800387e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003880:	2b04      	cmp	r3, #4
 8003882:	d103      	bne.n	800388c <HAL_UART_RxCpltCallback+0x498>
 8003884:	4b4f      	ldr	r3, [pc, #316]	; (80039c4 <HAL_UART_RxCpltCallback+0x5d0>)
 8003886:	2204      	movs	r2, #4
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	e002      	b.n	8003892 <HAL_UART_RxCpltCallback+0x49e>
												  else cmd_sector = cmdsErase;
 800388c:	4b4d      	ldr	r3, [pc, #308]	; (80039c4 <HAL_UART_RxCpltCallback+0x5d0>)
 800388e:	2205      	movs	r2, #5
 8003890:	601a      	str	r2, [r3, #0]
									if (*uk == ':') {
 8003892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b3a      	cmp	r3, #58	; 0x3a
 8003898:	f040 80c7 	bne.w	8003a2a <HAL_UART_RxCpltCallback+0x636>
										int sek = atoi(++uk);
 800389c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800389e:	3301      	adds	r3, #1
 80038a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80038a4:	f00f fc5d 	bl	8013162 <atoi>
 80038a8:	62b8      	str	r0, [r7, #40]	; 0x28
										if ( ((sek >= 0) && (sek < W25qxx_getSectorCount())) || (sek == -1) ) {
 80038aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	db05      	blt.n	80038bc <HAL_UART_RxCpltCallback+0x4c8>
 80038b0:	f003 fcdc 	bl	800726c <W25qxx_getSectorCount>
 80038b4:	4602      	mov	r2, r0
 80038b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d804      	bhi.n	80038c6 <HAL_UART_RxCpltCallback+0x4d2>
 80038bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038c2:	f040 80b2 	bne.w	8003a2a <HAL_UART_RxCpltCallback+0x636>
											adr_sector = sek;
 80038c6:	4a40      	ldr	r2, [pc, #256]	; (80039c8 <HAL_UART_RxCpltCallback+0x5d4>)
 80038c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ca:	6013      	str	r3, [r2, #0]
											offset_sector = 0;
 80038cc:	4b3f      	ldr	r3, [pc, #252]	; (80039cc <HAL_UART_RxCpltCallback+0x5d8>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]
											if (sek == -1) {
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038d8:	d107      	bne.n	80038ea <HAL_UART_RxCpltCallback+0x4f6>
												if (cmd_sector == cmdsErase) ev = i;
 80038da:	4b3a      	ldr	r3, [pc, #232]	; (80039c4 <HAL_UART_RxCpltCallback+0x5d0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b05      	cmp	r3, #5
 80038e0:	f040 80a3 	bne.w	8003a2a <HAL_UART_RxCpltCallback+0x636>
 80038e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038e6:	613b      	str	r3, [r7, #16]
								break;
 80038e8:	e09f      	b.n	8003a2a <HAL_UART_RxCpltCallback+0x636>
												ev = i;
 80038ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ec:	613b      	str	r3, [r7, #16]
								break;
 80038ee:	e09c      	b.n	8003a2a <HAL_UART_RxCpltCallback+0x636>
									if (*uk == ':') {
 80038f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b3a      	cmp	r3, #58	; 0x3a
 80038f6:	f040 809a 	bne.w	8003a2e <HAL_UART_RxCpltCallback+0x63a>
										uk++;
 80038fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038fc:	3301      	adds	r3, #1
 80038fe:	63fb      	str	r3, [r7, #60]	; 0x3c
										int sek = atoi(uk);
 8003900:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003902:	f00f fc2e 	bl	8013162 <atoi>
 8003906:	6378      	str	r0, [r7, #52]	; 0x34
										if ((sek >= 0) && (sek < W25qxx_getSectorCount())) {
 8003908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390a:	2b00      	cmp	r3, #0
 800390c:	f2c0 808f 	blt.w	8003a2e <HAL_UART_RxCpltCallback+0x63a>
 8003910:	f003 fcac 	bl	800726c <W25qxx_getSectorCount>
 8003914:	4602      	mov	r2, r0
 8003916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003918:	429a      	cmp	r2, r3
 800391a:	f240 8088 	bls.w	8003a2e <HAL_UART_RxCpltCallback+0x63a>
											char *ukn = strchr(uk, ':');
 800391e:	213a      	movs	r1, #58	; 0x3a
 8003920:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003922:	f010 fc62 	bl	80141ea <strchr>
 8003926:	6338      	str	r0, [r7, #48]	; 0x30
											if (ukn) {
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	2b00      	cmp	r3, #0
 800392c:	d07f      	beq.n	8003a2e <HAL_UART_RxCpltCallback+0x63a>
												len_write = -1;
 800392e:	4b28      	ldr	r3, [pc, #160]	; (80039d0 <HAL_UART_RxCpltCallback+0x5dc>)
 8003930:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003934:	601a      	str	r2, [r3, #0]
												ukn++;
 8003936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003938:	3301      	adds	r3, #1
 800393a:	633b      	str	r3, [r7, #48]	; 0x30
												byte_write = hexToBin(ukn);
 800393c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800393e:	f7ff f8bd 	bl	8002abc <hexToBin>
 8003942:	4603      	mov	r3, r0
 8003944:	461a      	mov	r2, r3
 8003946:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <HAL_UART_RxCpltCallback+0x5e0>)
 8003948:	701a      	strb	r2, [r3, #0]
												uk = strchr(ukn, ':');
 800394a:	213a      	movs	r1, #58	; 0x3a
 800394c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800394e:	f010 fc4c 	bl	80141ea <strchr>
 8003952:	63f8      	str	r0, [r7, #60]	; 0x3c
												if (uk) {
 8003954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003956:	2b00      	cmp	r3, #0
 8003958:	d012      	beq.n	8003980 <HAL_UART_RxCpltCallback+0x58c>
													int l = atoi(++uk);
 800395a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800395c:	3301      	adds	r3, #1
 800395e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003960:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003962:	f00f fbfe 	bl	8013162 <atoi>
 8003966:	62f8      	str	r0, [r7, #44]	; 0x2c
													if ((l > 0) && (l < W25qxx_getSectorSize())) len_write = l;
 8003968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396a:	2b00      	cmp	r3, #0
 800396c:	dd08      	ble.n	8003980 <HAL_UART_RxCpltCallback+0x58c>
 800396e:	f003 fc89 	bl	8007284 <W25qxx_getSectorSize>
 8003972:	4602      	mov	r2, r0
 8003974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003976:	429a      	cmp	r2, r3
 8003978:	d902      	bls.n	8003980 <HAL_UART_RxCpltCallback+0x58c>
 800397a:	4a15      	ldr	r2, [pc, #84]	; (80039d0 <HAL_UART_RxCpltCallback+0x5dc>)
 800397c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397e:	6013      	str	r3, [r2, #0]
												adr_sector = sek;
 8003980:	4a11      	ldr	r2, [pc, #68]	; (80039c8 <HAL_UART_RxCpltCallback+0x5d4>)
 8003982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003984:	6013      	str	r3, [r2, #0]
												offset_sector = 0;
 8003986:	4b11      	ldr	r3, [pc, #68]	; (80039cc <HAL_UART_RxCpltCallback+0x5d8>)
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
												ev = i;//flag_sector = true;
 800398c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800398e:	613b      	str	r3, [r7, #16]
								break;
 8003990:	e04d      	b.n	8003a2e <HAL_UART_RxCpltCallback+0x63a>
 8003992:	bf00      	nop
 8003994:	2000010d 	.word	0x2000010d
 8003998:	2000010c 	.word	0x2000010c
 800399c:	2000010f 	.word	0x2000010f
 80039a0:	08017d54 	.word	0x08017d54
 80039a4:	08017d58 	.word	0x08017d58
 80039a8:	20000110 	.word	0x20000110
 80039ac:	20002f5b 	.word	0x20002f5b
 80039b0:	20000108 	.word	0x20000108
 80039b4:	20000104 	.word	0x20000104
 80039b8:	2000010e 	.word	0x2000010e
 80039bc:	20001f1e 	.word	0x20001f1e
 80039c0:	2000001c 	.word	0x2000001c
 80039c4:	200000f8 	.word	0x200000f8
 80039c8:	20001f20 	.word	0x20001f20
 80039cc:	20001f24 	.word	0x20001f24
 80039d0:	20001f2c 	.word	0x20001f2c
 80039d4:	20000100 	.word	0x20000100
									if ((last_cmd_sector == cmdsRead) || (last_cmd_sector == cmdsNext)) {
 80039d8:	4b36      	ldr	r3, [pc, #216]	; (8003ab4 <HAL_UART_RxCpltCallback+0x6c0>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d003      	beq.n	80039e8 <HAL_UART_RxCpltCallback+0x5f4>
 80039e0:	4b34      	ldr	r3, [pc, #208]	; (8003ab4 <HAL_UART_RxCpltCallback+0x6c0>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b06      	cmp	r3, #6
 80039e6:	d124      	bne.n	8003a32 <HAL_UART_RxCpltCallback+0x63e>
										if ((offset_sector + list_sector) < W25qxx_getSectorSize()) {
 80039e8:	4b33      	ldr	r3, [pc, #204]	; (8003ab8 <HAL_UART_RxCpltCallback+0x6c4>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4b33      	ldr	r3, [pc, #204]	; (8003abc <HAL_UART_RxCpltCallback+0x6c8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4413      	add	r3, r2
 80039f2:	461c      	mov	r4, r3
 80039f4:	f003 fc46 	bl	8007284 <W25qxx_getSectorSize>
 80039f8:	4603      	mov	r3, r0
 80039fa:	429c      	cmp	r4, r3
 80039fc:	d219      	bcs.n	8003a32 <HAL_UART_RxCpltCallback+0x63e>
											offset_sector += list_sector;
 80039fe:	4b2e      	ldr	r3, [pc, #184]	; (8003ab8 <HAL_UART_RxCpltCallback+0x6c4>)
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	4b2e      	ldr	r3, [pc, #184]	; (8003abc <HAL_UART_RxCpltCallback+0x6c8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4413      	add	r3, r2
 8003a08:	4a2b      	ldr	r2, [pc, #172]	; (8003ab8 <HAL_UART_RxCpltCallback+0x6c4>)
 8003a0a:	6013      	str	r3, [r2, #0]
											ev = i;//flag_sector = true;
 8003a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0e:	613b      	str	r3, [r7, #16]
								break;
 8003a10:	e00f      	b.n	8003a32 <HAL_UART_RxCpltCallback+0x63e>
								break;
 8003a12:	bf00      	nop
 8003a14:	e017      	b.n	8003a46 <HAL_UART_RxCpltCallback+0x652>
								break;
 8003a16:	bf00      	nop
 8003a18:	e015      	b.n	8003a46 <HAL_UART_RxCpltCallback+0x652>
								break;
 8003a1a:	bf00      	nop
 8003a1c:	e013      	b.n	8003a46 <HAL_UART_RxCpltCallback+0x652>
								break;
 8003a1e:	bf00      	nop
 8003a20:	e011      	b.n	8003a46 <HAL_UART_RxCpltCallback+0x652>
								break;
 8003a22:	bf00      	nop
 8003a24:	e00f      	b.n	8003a46 <HAL_UART_RxCpltCallback+0x652>
								break;
 8003a26:	bf00      	nop
 8003a28:	e00d      	b.n	8003a46 <HAL_UART_RxCpltCallback+0x652>
								break;
 8003a2a:	bf00      	nop
 8003a2c:	e00b      	b.n	8003a46 <HAL_UART_RxCpltCallback+0x652>
								break;
 8003a2e:	bf00      	nop
 8003a30:	e009      	b.n	8003a46 <HAL_UART_RxCpltCallback+0x652>
								break;
 8003a32:	bf00      	nop
							break;
 8003a34:	e007      	b.n	8003a46 <HAL_UART_RxCpltCallback+0x652>
					for (i = 0; i < MAX_CMDS; i++) {
 8003a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a38:	3301      	adds	r3, #1
 8003a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a3e:	2b19      	cmp	r3, #25
 8003a40:	f77f adda 	ble.w	80035f8 <HAL_UART_RxCpltCallback+0x204>
 8003a44:	e000      	b.n	8003a48 <HAL_UART_RxCpltCallback+0x654>
							break;
 8003a46:	bf00      	nop
				if (ev != -2) {
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f113 0f02 	cmn.w	r3, #2
 8003a4e:	d017      	beq.n	8003a80 <HAL_UART_RxCpltCallback+0x68c>
					if (ev == -1) ev = cmdErr;
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a56:	d101      	bne.n	8003a5c <HAL_UART_RxCpltCallback+0x668>
 8003a58:	2303      	movs	r3, #3
 8003a5a:	613b      	str	r3, [r7, #16]
					if (osMessageQueuePut(evtQueHandle, (const void *)&ev, 0, 0) != osOK) devError |= devEVT;
 8003a5c:	4b18      	ldr	r3, [pc, #96]	; (8003ac0 <HAL_UART_RxCpltCallback+0x6cc>)
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	f107 0110 	add.w	r1, r7, #16
 8003a64:	2300      	movs	r3, #0
 8003a66:	2200      	movs	r2, #0
 8003a68:	f00c f93a 	bl	800fce0 <osMessageQueuePut>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d006      	beq.n	8003a80 <HAL_UART_RxCpltCallback+0x68c>
 8003a72:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <HAL_UART_RxCpltCallback+0x6d0>)
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	f043 0310 	orr.w	r3, r3, #16
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <HAL_UART_RxCpltCallback+0x6d0>)
 8003a7e:	801a      	strh	r2, [r3, #0]
			rxInd = 0;
 8003a80:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <HAL_UART_RxCpltCallback+0x6d4>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 8003a86:	4b11      	ldr	r3, [pc, #68]	; (8003acc <HAL_UART_RxCpltCallback+0x6d8>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Receive_IT(huart, &rxByte, 1) != HAL_OK) devError |= devUART;
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	4910      	ldr	r1, [pc, #64]	; (8003ad0 <HAL_UART_RxCpltCallback+0x6dc>)
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f00a fa8d 	bl	800dfb0 <HAL_UART_Receive_IT>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d006      	beq.n	8003aaa <HAL_UART_RxCpltCallback+0x6b6>
 8003a9c:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <HAL_UART_RxCpltCallback+0x6d0>)
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	f043 0302 	orr.w	r3, r3, #2
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	4b07      	ldr	r3, [pc, #28]	; (8003ac4 <HAL_UART_RxCpltCallback+0x6d0>)
 8003aa8:	801a      	strh	r2, [r3, #0]
}
 8003aaa:	bf00      	nop
 8003aac:	374c      	adds	r7, #76	; 0x4c
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd90      	pop	{r4, r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	200000fc 	.word	0x200000fc
 8003ab8:	20001f24 	.word	0x20001f24
 8003abc:	20001f28 	.word	0x20001f28
 8003ac0:	20000e74 	.word	0x20000e74
 8003ac4:	20001b08 	.word	0x20001b08
 8003ac8:	20001b1a 	.word	0x20001b1a
 8003acc:	20001b1c 	.word	0x20001b1c
 8003ad0:	20001b18 	.word	0x20001b18

08003ad4 <spiDone>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//    Функция устанавливает в начальное состояние 'готов' служебные параметры порта SPI1:
//
void spiDone(SPI_HandleTypeDef *hspi)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
#ifdef SET_W25FLASH
	if (hspi->Instance == SPI2) {
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <spiDone+0x38>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d105      	bne.n	8003af2 <spiDone+0x1e>
		W25_UNSELECT();
 8003ae6:	f003 f9e5 	bl	8006eb4 <W25_UNSELECT>
		spiRdy = 1;
 8003aea:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <spiDone+0x3c>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	701a      	strb	r2, [r3, #0]
	else
	if (hspi->Instance == SPI1) {
		lcdRdy = 1;
	}
#endif
}
 8003af0:	e007      	b.n	8003b02 <spiDone+0x2e>
	if (hspi->Instance == SPI1) {
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a07      	ldr	r2, [pc, #28]	; (8003b14 <spiDone+0x40>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d102      	bne.n	8003b02 <spiDone+0x2e>
		lcdRdy = 1;
 8003afc:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <spiDone+0x44>)
 8003afe:	2201      	movs	r2, #1
 8003b00:	701a      	strb	r2, [r3, #0]
}
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40003800 	.word	0x40003800
 8003b10:	200000f4 	.word	0x200000f4
 8003b14:	40013000 	.word	0x40013000
 8003b18:	20000000 	.word	0x20000000

08003b1c <HAL_SPI_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема данных от порта SPI
//
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff ffd5 	bl	8003ad4 <spiDone>
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении передачи данных в порт SPI
//
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff ffca 	bl	8003ad4 <spiDone>
}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_SPI_TxRxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема/передачи данных порта SPI
//
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff ffbf 	bl	8003ad4 <spiDone>
}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <HAL_SPI_ErrorCallback>:
//--------------------------------------------------------------------------------------------
//    CallBack функция, вызывается при возникновении ошибки у модуля SPI
//
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff ffb3 	bl	8003ad4 <spiDone>
	devError |= devSPI;
 8003b6e:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <HAL_SPI_ErrorCallback+0x24>)
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	4b02      	ldr	r3, [pc, #8]	; (8003b84 <HAL_SPI_ErrorCallback+0x24>)
 8003b7a:	801a      	strh	r2, [r3, #0]
}
 8003b7c:	bf00      	nop
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20001b08 	.word	0x20001b08

08003b88 <HAL_I2C_ErrorCallback>:
	}
#endif
}
//--------------------------------------------------------------------------------------------
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
#ifdef SET_RDA_CHIP
	if (hi2c->Instance == I2C1) {
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a07      	ldr	r2, [pc, #28]	; (8003bb4 <HAL_I2C_ErrorCallback+0x2c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d106      	bne.n	8003ba8 <HAL_I2C_ErrorCallback+0x20>
		devError |= devRDA;
 8003b9a:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <HAL_I2C_ErrorCallback+0x30>)
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <HAL_I2C_ErrorCallback+0x30>)
 8003ba6:	801a      	strh	r2, [r3, #0]
	}
#endif
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	40005400 	.word	0x40005400
 8003bb8:	20001b08 	.word	0x20001b08

08003bbc <HAL_GPIO_EXTI_Callback>:
//--------------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	80fb      	strh	r3, [r7, #6]
#ifdef SET_SLEEP
	if (sleep_mode) {
 8003bc6:	4b2c      	ldr	r3, [pc, #176]	; (8003c78 <HAL_GPIO_EXTI_Callback+0xbc>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d027      	beq.n	8003c1e <HAL_GPIO_EXTI_Callback+0x62>
		if ((HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_SET) ||
 8003bce:	2102      	movs	r1, #2
 8003bd0:	482a      	ldr	r0, [pc, #168]	; (8003c7c <HAL_GPIO_EXTI_Callback+0xc0>)
 8003bd2:	f004 fc6b 	bl	80084ac <HAL_GPIO_ReadPin>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d006      	beq.n	8003bea <HAL_GPIO_EXTI_Callback+0x2e>
				(HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_SET)) {
 8003bdc:	2104      	movs	r1, #4
 8003bde:	4827      	ldr	r0, [pc, #156]	; (8003c7c <HAL_GPIO_EXTI_Callback+0xc0>)
 8003be0:	f004 fc64 	bl	80084ac <HAL_GPIO_ReadPin>
 8003be4:	4603      	mov	r3, r0
		if ((HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_SET) ||
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d141      	bne.n	8003c6e <HAL_GPIO_EXTI_Callback+0xb2>
			sleep_mode = false;
 8003bea:	4b23      	ldr	r3, [pc, #140]	; (8003c78 <HAL_GPIO_EXTI_Callback+0xbc>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
			HAL_PWR_DisableSleepOnExit();
 8003bf0:	f006 f97c 	bl	8009eec <HAL_PWR_DisableSleepOnExit>
			int ev = cmdExitSleep;
 8003bf4:	2313      	movs	r3, #19
 8003bf6:	60fb      	str	r3, [r7, #12]
			if (osMessageQueuePut(evtQueHandle, (const void *)&ev, 0, 0)) devError |= devEVT;
 8003bf8:	4b21      	ldr	r3, [pc, #132]	; (8003c80 <HAL_GPIO_EXTI_Callback+0xc4>)
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	f107 010c 	add.w	r1, r7, #12
 8003c00:	2300      	movs	r3, #0
 8003c02:	2200      	movs	r2, #0
 8003c04:	f00c f86c 	bl	800fce0 <osMessageQueuePut>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d02f      	beq.n	8003c6e <HAL_GPIO_EXTI_Callback+0xb2>
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <HAL_GPIO_EXTI_Callback+0xc8>)
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	f043 0310 	orr.w	r3, r3, #16
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	4b1a      	ldr	r3, [pc, #104]	; (8003c84 <HAL_GPIO_EXTI_Callback+0xc8>)
 8003c1a:	801a      	strh	r2, [r3, #0]
		}
		return;
 8003c1c:	e027      	b.n	8003c6e <HAL_GPIO_EXTI_Callback+0xb2>
	}
#endif
	if ((GPIO_Pin == KEY0_Pin) || (GPIO_Pin == KEY1_Pin)) {
 8003c1e:	88fb      	ldrh	r3, [r7, #6]
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d002      	beq.n	8003c2a <HAL_GPIO_EXTI_Callback+0x6e>
 8003c24:	88fb      	ldrh	r3, [r7, #6]
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d122      	bne.n	8003c70 <HAL_GPIO_EXTI_Callback+0xb4>
		if (GPIO_Pin == KEY0_Pin) seek_up = 1;
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d103      	bne.n	8003c38 <HAL_GPIO_EXTI_Callback+0x7c>
 8003c30:	4b15      	ldr	r3, [pc, #84]	; (8003c88 <HAL_GPIO_EXTI_Callback+0xcc>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	701a      	strb	r2, [r3, #0]
 8003c36:	e005      	b.n	8003c44 <HAL_GPIO_EXTI_Callback+0x88>
		else
		if (GPIO_Pin == KEY1_Pin) seek_up = 0;
 8003c38:	88fb      	ldrh	r3, [r7, #6]
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d102      	bne.n	8003c44 <HAL_GPIO_EXTI_Callback+0x88>
 8003c3e:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <HAL_GPIO_EXTI_Callback+0xcc>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	701a      	strb	r2, [r3, #0]
		int ev = cmdScan;
 8003c44:	230b      	movs	r3, #11
 8003c46:	60bb      	str	r3, [r7, #8]
		if (osMessageQueuePut(evtQueHandle, (const void *)&ev, 0, 0)) devError |= devEVT;
 8003c48:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <HAL_GPIO_EXTI_Callback+0xc4>)
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	f107 0108 	add.w	r1, r7, #8
 8003c50:	2300      	movs	r3, #0
 8003c52:	2200      	movs	r2, #0
 8003c54:	f00c f844 	bl	800fce0 <osMessageQueuePut>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d008      	beq.n	8003c70 <HAL_GPIO_EXTI_Callback+0xb4>
 8003c5e:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <HAL_GPIO_EXTI_Callback+0xc8>)
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	f043 0310 	orr.w	r3, r3, #16
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <HAL_GPIO_EXTI_Callback+0xc8>)
 8003c6a:	801a      	strh	r2, [r3, #0]
 8003c6c:	e000      	b.n	8003c70 <HAL_GPIO_EXTI_Callback+0xb4>
		return;
 8003c6e:	bf00      	nop
	}
}
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20003600 	.word	0x20003600
 8003c7c:	48000800 	.word	0x48000800
 8003c80:	20000e74 	.word	0x20000e74
 8003c84:	20001b08 	.word	0x20001b08
 8003c88:	2000010e 	.word	0x2000010e

08003c8c <irdTask>:
//--------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------
void irdTask(void *argument)
{
 8003c8c:	b5b0      	push	{r4, r5, r7, lr}
 8003c8e:	b08e      	sub	sp, #56	; 0x38
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	6078      	str	r0, [r7, #4]
#ifdef SET_IRED

	ird_exit = 0;
 8003c94:	4bac      	ldr	r3, [pc, #688]	; (8003f48 <irdTask+0x2bc>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	701a      	strb	r2, [r3, #0]

	bool ep_start = false;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	char ep_str[16] = {0};
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	613b      	str	r3, [r7, #16]
 8003ca4:	f107 0314 	add.w	r3, r7, #20
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	605a      	str	r2, [r3, #4]
 8003cae:	609a      	str	r2, [r3, #8]
	uint32_t ep_tmr = 0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t tmr_ired = 0;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24


	if (waitBit);

	enIntIRED();
 8003cb8:	f7fd fa24 	bl	8001104 <enIntIRED>


  while (!restart) {
 8003cbc:	e1f8      	b.n	80040b0 <irdTask+0x424>

	if (!tmr_ired) {
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f040 81cf 	bne.w	8004064 <irdTask+0x3d8>
		if (decodeIRED(&results)) {
 8003cc6:	48a1      	ldr	r0, [pc, #644]	; (8003f4c <irdTask+0x2c0>)
 8003cc8:	f7fd f9e6 	bl	8001098 <decodeIRED>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 81c8 	beq.w	8004064 <irdTask+0x3d8>

			tmr_ired = get_mstmr(_300ms);
 8003cd4:	f04f 001e 	mov.w	r0, #30
 8003cd8:	f04f 0100 	mov.w	r1, #0
 8003cdc:	f7ff f952 	bl	8002f84 <get_mstmr>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cee:	4898      	ldr	r0, [pc, #608]	; (8003f50 <irdTask+0x2c4>)
 8003cf0:	f004 fbf4 	bl	80084dc <HAL_GPIO_WritePin>
			int8_t kid = -1;
 8003cf4:	23ff      	movs	r3, #255	; 0xff
 8003cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			for (int8_t i = 0; i < MAX_IRED_KEY; i++) {
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d00:	e019      	b.n	8003d36 <irdTask+0xaa>
				if (results.value == keyAll[i].code) {
 8003d02:	4b92      	ldr	r3, [pc, #584]	; (8003f4c <irdTask+0x2c0>)
 8003d04:	6819      	ldr	r1, [r3, #0]
 8003d06:	f997 2022 	ldrsb.w	r2, [r7, #34]	; 0x22
 8003d0a:	4892      	ldr	r0, [pc, #584]	; (8003f54 <irdTask+0x2c8>)
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4403      	add	r3, r0
 8003d16:	3308      	adds	r3, #8
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4299      	cmp	r1, r3
 8003d1c:	d104      	bne.n	8003d28 <irdTask+0x9c>
					kid = i;
 8003d1e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					break;
 8003d26:	e00a      	b.n	8003d3e <irdTask+0xb2>
			for (int8_t i = 0; i < MAX_IRED_KEY; i++) {
 8003d28:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	3301      	adds	r3, #1
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d36:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003d3a:	2b14      	cmp	r3, #20
 8003d3c:	dde1      	ble.n	8003d02 <irdTask+0x76>
				}
			}
			//
			if (kid == -1) sprintf(stline, "CODE:%08lX", results.value);
 8003d3e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d46:	d107      	bne.n	8003d58 <irdTask+0xcc>
 8003d48:	4b80      	ldr	r3, [pc, #512]	; (8003f4c <irdTask+0x2c0>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4982      	ldr	r1, [pc, #520]	; (8003f58 <irdTask+0x2cc>)
 8003d50:	4882      	ldr	r0, [pc, #520]	; (8003f5c <irdTask+0x2d0>)
 8003d52:	f010 f9e7 	bl	8014124 <siprintf>
 8003d56:	e00c      	b.n	8003d72 <irdTask+0xe6>
					  else sprintf(stline, "irKEY: %s", keyAll[kid].name);
 8003d58:	f997 2023 	ldrsb.w	r2, [r7, #35]	; 0x23
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	4413      	add	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4a7b      	ldr	r2, [pc, #492]	; (8003f54 <irdTask+0x2c8>)
 8003d66:	4413      	add	r3, r2
 8003d68:	461a      	mov	r2, r3
 8003d6a:	497d      	ldr	r1, [pc, #500]	; (8003f60 <irdTask+0x2d4>)
 8003d6c:	487b      	ldr	r0, [pc, #492]	; (8003f5c <irdTask+0x2d0>)
 8003d6e:	f010 f9d9 	bl	8014124 <siprintf>
			Report(1, "[que:%u] %s\r\n", cntEvt, stline);
 8003d72:	4b7c      	ldr	r3, [pc, #496]	; (8003f64 <irdTask+0x2d8>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4b78      	ldr	r3, [pc, #480]	; (8003f5c <irdTask+0x2d0>)
 8003d7c:	497a      	ldr	r1, [pc, #488]	; (8003f68 <irdTask+0x2dc>)
 8003d7e:	2001      	movs	r0, #1
 8003d80:	f7ff fa52 	bl	8003228 <Report>
			//
			if (kid != -1) {
 8003d84:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d8c:	f000 816a 	beq.w	8004064 <irdTask+0x3d8>
				int ird = evt_None;
 8003d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d94:	60fb      	str	r3, [r7, #12]
				switch (kid) {
 8003d96:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003d9a:	2b14      	cmp	r3, #20
 8003d9c:	f200 814c 	bhi.w	8004038 <irdTask+0x3ac>
 8003da0:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <irdTask+0x11c>)
 8003da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da6:	bf00      	nop
 8003da8:	08003e0f 	.word	0x08003e0f
 8003dac:	08003dfd 	.word	0x08003dfd
 8003db0:	08003e03 	.word	0x08003e03
 8003db4:	08003e53 	.word	0x08003e53
 8003db8:	08003e5f 	.word	0x08003e5f
 8003dbc:	08003e71 	.word	0x08003e71
 8003dc0:	08003e1b 	.word	0x08003e1b
 8003dc4:	08003e37 	.word	0x08003e37
 8003dc8:	08003e6b 	.word	0x08003e6b
 8003dcc:	08003f13 	.word	0x08003f13
 8003dd0:	08003f2f 	.word	0x08003f2f
 8003dd4:	08003f91 	.word	0x08003f91
 8003dd8:	08003f91 	.word	0x08003f91
 8003ddc:	08003f91 	.word	0x08003f91
 8003de0:	08003f91 	.word	0x08003f91
 8003de4:	08003f91 	.word	0x08003f91
 8003de8:	08003f91 	.word	0x08003f91
 8003dec:	08003f91 	.word	0x08003f91
 8003df0:	08003f91 	.word	0x08003f91
 8003df4:	08003f91 	.word	0x08003f91
 8003df8:	08003f91 	.word	0x08003f91
					case key_ch:
						ird = evt_Restart;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	60fb      	str	r3, [r7, #12]
					break;
 8003e00:	e11a      	b.n	8004038 <irdTask+0x3ac>
					case key_ch_plus:
						seek_up = 1;
 8003e02:	4b5a      	ldr	r3, [pc, #360]	; (8003f6c <irdTask+0x2e0>)
 8003e04:	2201      	movs	r2, #1
 8003e06:	701a      	strb	r2, [r3, #0]
						ird = evt_Scan;
 8003e08:	230b      	movs	r3, #11
 8003e0a:	60fb      	str	r3, [r7, #12]
					break;
 8003e0c:	e114      	b.n	8004038 <irdTask+0x3ac>
					case key_ch_minus:
						seek_up = 0;
 8003e0e:	4b57      	ldr	r3, [pc, #348]	; (8003f6c <irdTask+0x2e0>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	701a      	strb	r2, [r3, #0]
						ird = evt_Scan;
 8003e14:	230b      	movs	r3, #11
 8003e16:	60fb      	str	r3, [r7, #12]
					break;
 8003e18:	e10e      	b.n	8004038 <irdTask+0x3ac>
					case key_minus:
						if (Volume) {
 8003e1a:	4b55      	ldr	r3, [pc, #340]	; (8003f70 <irdTask+0x2e4>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 8101 	beq.w	8004026 <irdTask+0x39a>
							newVolume = Volume - 1;
 8003e24:	4b52      	ldr	r3, [pc, #328]	; (8003f70 <irdTask+0x2e4>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	4b51      	ldr	r3, [pc, #324]	; (8003f74 <irdTask+0x2e8>)
 8003e2e:	701a      	strb	r2, [r3, #0]
							ird = evt_Vol;
 8003e30:	230d      	movs	r3, #13
 8003e32:	60fb      	str	r3, [r7, #12]
						}
					break;
 8003e34:	e0f7      	b.n	8004026 <irdTask+0x39a>
					case key_plus:
						if (Volume < 15) {
 8003e36:	4b4e      	ldr	r3, [pc, #312]	; (8003f70 <irdTask+0x2e4>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b0e      	cmp	r3, #14
 8003e3c:	f200 80f5 	bhi.w	800402a <irdTask+0x39e>
							newVolume = Volume + 1;
 8003e40:	4b4b      	ldr	r3, [pc, #300]	; (8003f70 <irdTask+0x2e4>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	3301      	adds	r3, #1
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	4b4a      	ldr	r3, [pc, #296]	; (8003f74 <irdTask+0x2e8>)
 8003e4a:	701a      	strb	r2, [r3, #0]
							ird = evt_Vol;
 8003e4c:	230d      	movs	r3, #13
 8003e4e:	60fb      	str	r3, [r7, #12]
						}
					break;
 8003e50:	e0eb      	b.n	800402a <irdTask+0x39e>
					case key_left:
						seek_up = 0;
 8003e52:	4b46      	ldr	r3, [pc, #280]	; (8003f6c <irdTask+0x2e0>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	701a      	strb	r2, [r3, #0]
						ird = evt_List;
 8003e58:	2310      	movs	r3, #16
 8003e5a:	60fb      	str	r3, [r7, #12]
					break;
 8003e5c:	e0ec      	b.n	8004038 <irdTask+0x3ac>
					case key_right:
						seek_up = 1;
 8003e5e:	4b43      	ldr	r3, [pc, #268]	; (8003f6c <irdTask+0x2e0>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	701a      	strb	r2, [r3, #0]
						ird = evt_List;
 8003e64:	2310      	movs	r3, #16
 8003e66:	60fb      	str	r3, [r7, #12]
					break;
 8003e68:	e0e6      	b.n	8004038 <irdTask+0x3ac>
					case key_eq:// enable/disable print via uart
						ird = evt_Mute;//evt_Sleep);
 8003e6a:	230e      	movs	r3, #14
 8003e6c:	60fb      	str	r3, [r7, #12]
					break;
 8003e6e:	e0e3      	b.n	8004038 <irdTask+0x3ac>
					case key_sp:
						if (!ep_start) {
 8003e70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e74:	f083 0301 	eor.w	r3, r3, #1
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d038      	beq.n	8003ef0 <irdTask+0x264>
							ep_start = true;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							memset(ep_str, 0, sizeof(ep_str));
 8003e84:	f107 0310 	add.w	r3, r7, #16
 8003e88:	2210      	movs	r2, #16
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f00f fb67 	bl	8013560 <memset>
							ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - lfnt->FontHeight, SCREEN_WIDTH - 1, lfnt->FontHeight, PIX_OFF);
 8003e92:	4b39      	ldr	r3, [pc, #228]	; (8003f78 <irdTask+0x2ec>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	785b      	ldrb	r3, [r3, #1]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	b219      	sxth	r1, r3
 8003ea2:	4b35      	ldr	r3, [pc, #212]	; (8003f78 <irdTask+0x2ec>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	785b      	ldrb	r3, [r3, #1]
 8003ea8:	b21b      	sxth	r3, r3
 8003eaa:	2200      	movs	r2, #0
 8003eac:	9200      	str	r2, [sp, #0]
 8003eae:	227f      	movs	r2, #127	; 0x7f
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	f7fd ffb6 	bl	8001e22 <ST7565_DrawFilledRectangle>
							sprintf(tmp, "Time:");
 8003eb6:	4931      	ldr	r1, [pc, #196]	; (8003f7c <irdTask+0x2f0>)
 8003eb8:	4831      	ldr	r0, [pc, #196]	; (8003f80 <irdTask+0x2f4>)
 8003eba:	f010 f933 	bl	8014124 <siprintf>
							ST7565_Print(0, SCREEN_HEIGHT - lfnt->FontHeight, tmp, lfnt, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8003ebe:	4b2e      	ldr	r3, [pc, #184]	; (8003f78 <irdTask+0x2ec>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	785b      	ldrb	r3, [r3, #1]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	b219      	sxth	r1, r3
 8003ece:	4b2a      	ldr	r3, [pc, #168]	; (8003f78 <irdTask+0x2ec>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	9201      	str	r2, [sp, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	9200      	str	r2, [sp, #0]
 8003eda:	4a29      	ldr	r2, [pc, #164]	; (8003f80 <irdTask+0x2f4>)
 8003edc:	2000      	movs	r0, #0
 8003ede:	f7fd fd47 	bl	8001970 <ST7565_Print>
							ST7565_Update();
 8003ee2:	f7fd fb95 	bl	8001610 <ST7565_Update>
							ep_tmr = get_tmr(20);
 8003ee6:	2014      	movs	r0, #20
 8003ee8:	f7ff f82e 	bl	8002f48 <get_tmr>
 8003eec:	62b8      	str	r0, [r7, #40]	; 0x28
							ep_start = false;
							ep_tmr = 0;
							epoch = atoi(ep_str);
							ird = evt_Epoch;
						}
					break;
 8003eee:	e0a3      	b.n	8004038 <irdTask+0x3ac>
							ep_start = false;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							ep_tmr = 0;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	62bb      	str	r3, [r7, #40]	; 0x28
							epoch = atoi(ep_str);
 8003efa:	f107 0310 	add.w	r3, r7, #16
 8003efe:	4618      	mov	r0, r3
 8003f00:	f00f f92f 	bl	8013162 <atoi>
 8003f04:	4603      	mov	r3, r0
 8003f06:	461a      	mov	r2, r3
 8003f08:	4b1e      	ldr	r3, [pc, #120]	; (8003f84 <irdTask+0x2f8>)
 8003f0a:	601a      	str	r2, [r3, #0]
							ird = evt_Epoch;
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	60fb      	str	r3, [r7, #12]
					break;
 8003f10:	e092      	b.n	8004038 <irdTask+0x3ac>
					case key_100://bandUp();
						if (Band < MAX_BAND) {
 8003f12:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <irdTask+0x2fc>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	f200 8089 	bhi.w	800402e <irdTask+0x3a2>
							newBand = Band + 1;
 8003f1c:	4b1a      	ldr	r3, [pc, #104]	; (8003f88 <irdTask+0x2fc>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	3301      	adds	r3, #1
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	4b19      	ldr	r3, [pc, #100]	; (8003f8c <irdTask+0x300>)
 8003f26:	701a      	strb	r2, [r3, #0]
							ird = evt_Band;
 8003f28:	2311      	movs	r3, #17
 8003f2a:	60fb      	str	r3, [r7, #12]
						}
					break;
 8003f2c:	e07f      	b.n	800402e <irdTask+0x3a2>
					case key_200://bandDown();
						if (Band) {
 8003f2e:	4b16      	ldr	r3, [pc, #88]	; (8003f88 <irdTask+0x2fc>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d07d      	beq.n	8004032 <irdTask+0x3a6>
							newBand = Band - 1;
 8003f36:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <irdTask+0x2fc>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	4b13      	ldr	r3, [pc, #76]	; (8003f8c <irdTask+0x300>)
 8003f40:	701a      	strb	r2, [r3, #0]
							ird = evt_Band;
 8003f42:	2311      	movs	r3, #17
 8003f44:	60fb      	str	r3, [r7, #12]
						}
					break;
 8003f46:	e074      	b.n	8004032 <irdTask+0x3a6>
 8003f48:	20000134 	.word	0x20000134
 8003f4c:	20000584 	.word	0x20000584
 8003f50:	48000800 	.word	0x48000800
 8003f54:	08019288 	.word	0x08019288
 8003f58:	08017d60 	.word	0x08017d60
 8003f5c:	20003604 	.word	0x20003604
 8003f60:	08017d6c 	.word	0x08017d6c
 8003f64:	20001f1f 	.word	0x20001f1f
 8003f68:	08017d78 	.word	0x08017d78
 8003f6c:	2000010e 	.word	0x2000010e
 8003f70:	2000010f 	.word	0x2000010f
 8003f74:	20000110 	.word	0x20000110
 8003f78:	20002f48 	.word	0x20002f48
 8003f7c:	08017d88 	.word	0x08017d88
 8003f80:	20001288 	.word	0x20001288
 8003f84:	2000001c 	.word	0x2000001c
 8003f88:	2000010c 	.word	0x2000010c
 8003f8c:	2000010d 	.word	0x2000010d
					case key_5:
					case key_6:
					case key_7:
					case key_8:
					case key_9:
						if (ep_start) {
 8003f90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d035      	beq.n	8004004 <irdTask+0x378>
							if (strlen(ep_str) < 10) {
 8003f98:	f107 0310 	add.w	r3, r7, #16
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fc f917 	bl	80001d0 <strlen>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b09      	cmp	r3, #9
 8003fa6:	d846      	bhi.n	8004036 <irdTask+0x3aa>
								char ch = (kid - key_0) + 0x30;
 8003fa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fac:	3325      	adds	r3, #37	; 0x25
 8003fae:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
								sprintf(ep_str+strlen(ep_str), "%c", ch);
 8003fb2:	f107 0310 	add.w	r3, r7, #16
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fc f90a 	bl	80001d0 <strlen>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	f107 0310 	add.w	r3, r7, #16
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8003fc8:	493f      	ldr	r1, [pc, #252]	; (80040c8 <irdTask+0x43c>)
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f010 f8aa 	bl	8014124 <siprintf>
								ST7565_Print(32, SCREEN_HEIGHT - lfnt->FontHeight, ep_str, lfnt, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8003fd0:	4b3e      	ldr	r3, [pc, #248]	; (80040cc <irdTask+0x440>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	785b      	ldrb	r3, [r3, #1]
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	b219      	sxth	r1, r3
 8003fe0:	4b3a      	ldr	r3, [pc, #232]	; (80040cc <irdTask+0x440>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f107 0210 	add.w	r2, r7, #16
 8003fe8:	2001      	movs	r0, #1
 8003fea:	9001      	str	r0, [sp, #4]
 8003fec:	2001      	movs	r0, #1
 8003fee:	9000      	str	r0, [sp, #0]
 8003ff0:	2020      	movs	r0, #32
 8003ff2:	f7fd fcbd 	bl	8001970 <ST7565_Print>
								ST7565_Update();
 8003ff6:	f7fd fb0b 	bl	8001610 <ST7565_Update>
								ep_tmr = get_tmr(20);
 8003ffa:	2014      	movs	r0, #20
 8003ffc:	f7fe ffa4 	bl	8002f48 <get_tmr>
 8004000:	62b8      	str	r0, [r7, #40]	; 0x28
							}
						} else {
							newFreq = list[kid - key_0 + 2].freq;//for band=2 only !!!
							ird = evt_Freq;
						}
					break;
 8004002:	e018      	b.n	8004036 <irdTask+0x3aa>
							newFreq = list[kid - key_0 + 2].freq;//for band=2 only !!!
 8004004:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8004008:	f1a3 0209 	sub.w	r2, r3, #9
 800400c:	4930      	ldr	r1, [pc, #192]	; (80040d0 <irdTask+0x444>)
 800400e:	4613      	mov	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	4413      	add	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800401c:	4a2d      	ldr	r2, [pc, #180]	; (80040d4 <irdTask+0x448>)
 800401e:	6013      	str	r3, [r2, #0]
							ird = evt_Freq;
 8004020:	230c      	movs	r3, #12
 8004022:	60fb      	str	r3, [r7, #12]
					break;
 8004024:	e007      	b.n	8004036 <irdTask+0x3aa>
					break;
 8004026:	bf00      	nop
 8004028:	e006      	b.n	8004038 <irdTask+0x3ac>
					break;
 800402a:	bf00      	nop
 800402c:	e004      	b.n	8004038 <irdTask+0x3ac>
					break;
 800402e:	bf00      	nop
 8004030:	e002      	b.n	8004038 <irdTask+0x3ac>
					break;
 8004032:	bf00      	nop
 8004034:	e000      	b.n	8004038 <irdTask+0x3ac>
					break;
 8004036:	bf00      	nop
				}//switch (kid)
				if (ird != evt_None) {
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800403e:	d011      	beq.n	8004064 <irdTask+0x3d8>
					if (osMessageQueuePut(evtQueHandle, (const void *)&ird, 0, 0) != osOK) devError |= devEVT;
 8004040:	4b25      	ldr	r3, [pc, #148]	; (80040d8 <irdTask+0x44c>)
 8004042:	6818      	ldr	r0, [r3, #0]
 8004044:	f107 010c 	add.w	r1, r7, #12
 8004048:	2300      	movs	r3, #0
 800404a:	2200      	movs	r2, #0
 800404c:	f00b fe48 	bl	800fce0 <osMessageQueuePut>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d006      	beq.n	8004064 <irdTask+0x3d8>
 8004056:	4b21      	ldr	r3, [pc, #132]	; (80040dc <irdTask+0x450>)
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	f043 0310 	orr.w	r3, r3, #16
 800405e:	b29a      	uxth	r2, r3
 8004060:	4b1e      	ldr	r3, [pc, #120]	; (80040dc <irdTask+0x450>)
 8004062:	801a      	strh	r2, [r3, #0]
				}
			}//if (kid != -1)
		}//if (decodeIRED(&results))
	}
	if (ep_tmr) {
 8004064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <irdTask+0x3f4>
		if (check_tmr(ep_tmr)) {
 800406a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800406c:	f7fe ff79 	bl	8002f62 <check_tmr>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d004      	beq.n	8004080 <irdTask+0x3f4>
			ep_tmr = 0;
 8004076:	2300      	movs	r3, #0
 8004078:	62bb      	str	r3, [r7, #40]	; 0x28
			ep_start = false;
 800407a:	2300      	movs	r3, #0
 800407c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
	}
	if (tmr_ired) {
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	2b00      	cmp	r3, #0
 8004084:	d014      	beq.n	80040b0 <irdTask+0x424>
		if (check_mstmr(tmr_ired)) {
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	2200      	movs	r2, #0
 800408a:	461c      	mov	r4, r3
 800408c:	4615      	mov	r5, r2
 800408e:	4620      	mov	r0, r4
 8004090:	4629      	mov	r1, r5
 8004092:	f7fe ff8a 	bl	8002faa <check_mstmr>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d009      	beq.n	80040b0 <irdTask+0x424>
			tmr_ired = 0;
 800409c:	2300      	movs	r3, #0
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
			resumeIRED();
 80040a0:	f7fd f848 	bl	8001134 <resumeIRED>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 80040a4:	2201      	movs	r2, #1
 80040a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040aa:	480d      	ldr	r0, [pc, #52]	; (80040e0 <irdTask+0x454>)
 80040ac:	f004 fa16 	bl	80084dc <HAL_GPIO_WritePin>
  while (!restart) {
 80040b0:	4b0c      	ldr	r3, [pc, #48]	; (80040e4 <irdTask+0x458>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f43f ae01 	beq.w	8003cbe <irdTask+0x32>
		}
	}

  }

  ird_exit = 1;
 80040bc:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <irdTask+0x45c>)
 80040be:	2201      	movs	r2, #1
 80040c0:	701a      	strb	r2, [r3, #0]

  osThreadExit();
 80040c2:	f00b fc73 	bl	800f9ac <osThreadExit>
 80040c6:	bf00      	nop
 80040c8:	08017d90 	.word	0x08017d90
 80040cc:	20002f48 	.word	0x20002f48
 80040d0:	20002f6c 	.word	0x20002f6c
 80040d4:	20000108 	.word	0x20000108
 80040d8:	20000e74 	.word	0x20000e74
 80040dc:	20001b08 	.word	0x20001b08
 80040e0:	48000800 	.word	0x48000800
 80040e4:	20001f1c 	.word	0x20001f1c
 80040e8:	20000134 	.word	0x20000134

080040ec <StartTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask */
void StartTask(void *argument)
{
 80040ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040f0:	b0c8      	sub	sp, #288	; 0x120
 80040f2:	af08      	add	r7, sp, #32
 80040f4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */


    Report(1, "[que:%u] Start application ver.%s\r\n", getQueCount(evtQueHandle), ver);
 80040f6:	4b3c      	ldr	r3, [pc, #240]	; (80041e8 <StartTask+0xfc>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fe fd4c 	bl	8002b98 <getQueCount>
 8004100:	4602      	mov	r2, r0
 8004102:	4b3a      	ldr	r3, [pc, #232]	; (80041ec <StartTask+0x100>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	493a      	ldr	r1, [pc, #232]	; (80041f0 <StartTask+0x104>)
 8004108:	2001      	movs	r0, #1
 800410a:	f7ff f88d 	bl	8003228 <Report>

#ifdef SET_W25FLASH
    chipPresent = W25qxx_Init();
 800410e:	f002 ffe7 	bl	80070e0 <W25qxx_Init>
 8004112:	4603      	mov	r3, r0
 8004114:	461a      	mov	r2, r3
 8004116:	4b37      	ldr	r3, [pc, #220]	; (80041f4 <StartTask+0x108>)
 8004118:	701a      	strb	r2, [r3, #0]
    uint32_t cid = W25qxx_getChipID();
 800411a:	f003 f89b 	bl	8007254 <W25qxx_getChipID>
 800411e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if ( chipPresent && ((cid >= W25Q10) && (cid <= W25Q128)) ) validChipID = true;
 8004122:	4b34      	ldr	r3, [pc, #208]	; (80041f4 <StartTask+0x108>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <StartTask+0x54>
 800412a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d006      	beq.n	8004140 <StartTask+0x54>
 8004132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004136:	2b08      	cmp	r3, #8
 8004138:	d802      	bhi.n	8004140 <StartTask+0x54>
 800413a:	4b2f      	ldr	r3, [pc, #188]	; (80041f8 <StartTask+0x10c>)
 800413c:	2201      	movs	r2, #1
 800413e:	701a      	strb	r2, [r3, #0]
    list_sector = W25qxx_getPageSize() << 1;
 8004140:	f003 f8ac 	bl	800729c <W25qxx_getPageSize>
 8004144:	4603      	mov	r3, r0
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	461a      	mov	r2, r3
 800414a:	4b2c      	ldr	r3, [pc, #176]	; (80041fc <StartTask+0x110>)
 800414c:	601a      	str	r2, [r3, #0]
    //
    listSize = sizeof(rec_t) * MAX_LIST;
 800414e:	4b2c      	ldr	r3, [pc, #176]	; (8004200 <StartTask+0x114>)
 8004150:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004154:	801a      	strh	r2, [r3, #0]
    memset((uint8_t *)&list[0].band, 0, listSize);
 8004156:	4b2a      	ldr	r3, [pc, #168]	; (8004200 <StartTask+0x114>)
 8004158:	881b      	ldrh	r3, [r3, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	2100      	movs	r1, #0
 800415e:	4829      	ldr	r0, [pc, #164]	; (8004204 <StartTask+0x118>)
 8004160:	f00f f9fe 	bl	8013560 <memset>
    //
    cfgSector = W25qxx_getSectorCount() - 1;
 8004164:	f003 f882 	bl	800726c <W25qxx_getSectorCount>
 8004168:	4603      	mov	r3, r0
 800416a:	3b01      	subs	r3, #1
 800416c:	4a26      	ldr	r2, [pc, #152]	; (8004208 <StartTask+0x11c>)
 800416e:	6013      	str	r3, [r2, #0]
    if (W25qxx_IsEmptySector(cfgSector, 0, listSize)) {//sector is empty -> need write data to sector
 8004170:	4b25      	ldr	r3, [pc, #148]	; (8004208 <StartTask+0x11c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a22      	ldr	r2, [pc, #136]	; (8004200 <StartTask+0x114>)
 8004176:	8812      	ldrh	r2, [r2, #0]
 8004178:	2100      	movs	r1, #0
 800417a:	4618      	mov	r0, r3
 800417c:	f003 f8f8 	bl	8007370 <W25qxx_IsEmptySector>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d017      	beq.n	80041b6 <StartTask+0xca>
    	if (!(devError & devSPI)) {
 8004186:	4b21      	ldr	r3, [pc, #132]	; (800420c <StartTask+0x120>)
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	d14b      	bne.n	800422a <StartTask+0x13e>
    		W25qxx_WriteSector((uint8_t *)&def_list[0].band, cfgSector, 0, listSize);
 8004192:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <StartTask+0x11c>)
 8004194:	6819      	ldr	r1, [r3, #0]
 8004196:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <StartTask+0x114>)
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	2200      	movs	r2, #0
 800419c:	481c      	ldr	r0, [pc, #112]	; (8004210 <StartTask+0x124>)
 800419e:	f003 fa5b 	bl	8007658 <W25qxx_WriteSector>
    		Report(1, "Writen cfg_stations_data (%lu bytes) to cfgSector #%lu\r\n", listSize, cfgSector);
 80041a2:	4b17      	ldr	r3, [pc, #92]	; (8004200 <StartTask+0x114>)
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	4b17      	ldr	r3, [pc, #92]	; (8004208 <StartTask+0x11c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4919      	ldr	r1, [pc, #100]	; (8004214 <StartTask+0x128>)
 80041ae:	2001      	movs	r0, #1
 80041b0:	f7ff f83a 	bl	8003228 <Report>
 80041b4:	e039      	b.n	800422a <StartTask+0x13e>
      	}
    } else {//in sector	present any data
    	if (!(devError & devSPI)) {
 80041b6:	4b15      	ldr	r3, [pc, #84]	; (800420c <StartTask+0x120>)
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d12c      	bne.n	800421c <StartTask+0x130>
    		W25qxx_ReadSector((uint8_t *)&list[0].band, cfgSector, 0, listSize);
 80041c2:	4b11      	ldr	r3, [pc, #68]	; (8004208 <StartTask+0x11c>)
 80041c4:	6819      	ldr	r1, [r3, #0]
 80041c6:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <StartTask+0x114>)
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	2200      	movs	r2, #0
 80041cc:	480d      	ldr	r0, [pc, #52]	; (8004204 <StartTask+0x118>)
 80041ce:	f003 fb6b 	bl	80078a8 <W25qxx_ReadSector>
    		Report(1, "Readed cfg_stations_data (%lu bytes) from cfgSector #%lu\r\n", listSize, cfgSector);
 80041d2:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <StartTask+0x114>)
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <StartTask+0x11c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	490e      	ldr	r1, [pc, #56]	; (8004218 <StartTask+0x12c>)
 80041de:	2001      	movs	r0, #1
 80041e0:	f7ff f822 	bl	8003228 <Report>
 80041e4:	e021      	b.n	800422a <StartTask+0x13e>
 80041e6:	bf00      	nop
 80041e8:	20000e74 	.word	0x20000e74
 80041ec:	20000004 	.word	0x20000004
 80041f0:	08017d94 	.word	0x08017d94
 80041f4:	20002f34 	.word	0x20002f34
 80041f8:	20002f35 	.word	0x20002f35
 80041fc:	20001f28 	.word	0x20001f28
 8004200:	200032f0 	.word	0x200032f0
 8004204:	20002f6c 	.word	0x20002f6c
 8004208:	20002f40 	.word	0x20002f40
 800420c:	20001b08 	.word	0x20001b08
 8004210:	08018f04 	.word	0x08018f04
 8004214:	08017db8 	.word	0x08017db8
 8004218:	08017df4 	.word	0x08017df4
      	} else {
      		memcpy((uint8_t *)&list[0].band, (uint8_t *)&def_list[0].band, listSize);
 800421c:	4ba9      	ldr	r3, [pc, #676]	; (80044c4 <StartTask+0x3d8>)
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	49a9      	ldr	r1, [pc, #676]	; (80044c8 <StartTask+0x3dc>)
 8004224:	48a9      	ldr	r0, [pc, #676]	; (80044cc <StartTask+0x3e0>)
 8004226:	f00f f98d 	bl	8013544 <memcpy>
    }
#endif


#ifdef SET_RDA_CHIP
    rdaID = rda5807_init(&Freq);
 800422a:	48a9      	ldr	r0, [pc, #676]	; (80044d0 <StartTask+0x3e4>)
 800422c:	f001 fc02 	bl	8005a34 <rda5807_init>
 8004230:	4603      	mov	r3, r0
 8004232:	461a      	mov	r2, r3
 8004234:	4ba7      	ldr	r3, [pc, #668]	; (80044d4 <StartTask+0x3e8>)
 8004236:	701a      	strb	r2, [r3, #0]
    RSSI = rda5807_rssi();
 8004238:	f001 fc6a 	bl	8005b10 <rda5807_rssi>
 800423c:	4603      	mov	r3, r0
 800423e:	461a      	mov	r2, r3
 8004240:	4ba5      	ldr	r3, [pc, #660]	; (80044d8 <StartTask+0x3ec>)
 8004242:	801a      	strh	r2, [r3, #0]
    rda5807_SetVolume(Volume);
 8004244:	4ba5      	ldr	r3, [pc, #660]	; (80044dc <StartTask+0x3f0>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f001 fe3f 	bl	8005ecc <rda5807_SetVolume>
    rda5807_SetBassBoost(BassBoost);
 800424e:	4ba4      	ldr	r3, [pc, #656]	; (80044e0 <StartTask+0x3f4>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f001 fe82 	bl	8005f5c <rda5807_SetBassBoost>
    stereo = rda5807_Get_StereoMonoFlag();
 8004258:	f001 ff96 	bl	8006188 <rda5807_Get_StereoMonoFlag>
 800425c:	4603      	mov	r3, r0
 800425e:	461a      	mov	r2, r3
 8004260:	4ba0      	ldr	r3, [pc, #640]	; (80044e4 <StartTask+0x3f8>)
 8004262:	701a      	strb	r2, [r3, #0]
    Chan = rda5807_Get_Channel();
 8004264:	f001 ffa8 	bl	80061b8 <rda5807_Get_Channel>
 8004268:	4603      	mov	r3, r0
 800426a:	461a      	mov	r2, r3
 800426c:	4b9e      	ldr	r3, [pc, #632]	; (80044e8 <StartTask+0x3fc>)
 800426e:	801a      	strh	r2, [r3, #0]


#ifdef SET_DISPLAY

	#ifdef FONT_6x8
  		FontDef_t Font_6x8 = { 6, 8, Font6x8 };
 8004270:	4a9e      	ldr	r2, [pc, #632]	; (80044ec <StartTask+0x400>)
 8004272:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004276:	e892 0003 	ldmia.w	r2, {r0, r1}
 800427a:	6018      	str	r0, [r3, #0]
 800427c:	3304      	adds	r3, #4
 800427e:	8019      	strh	r1, [r3, #0]
  		lfnt = &Font_6x8;
 8004280:	4a9b      	ldr	r2, [pc, #620]	; (80044f0 <StartTask+0x404>)
 8004282:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004286:	6013      	str	r3, [r2, #0]
	#endif

  	uint16_t lin1 = 1;
 8004288:	2301      	movs	r3, #1
 800428a:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
  	uint16_t lin2 = lin1 + Font_6x8.FontHeight;//chipID...
 800428e:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8004292:	b29a      	uxth	r2, r3
 8004294:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8004298:	4413      	add	r3, r2
 800429a:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
  	uint16_t lin3 = lin2 + Font_6x8.FontHeight + 1;//Band...
 800429e:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80042a8:	4413      	add	r3, r2
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3301      	adds	r3, #1
 80042ae:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
  	uint16_t lin4 = lin3 + Font_6x8.FontHeight + 1;//Volume...//Freq...
 80042b2:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80042bc:	4413      	add	r3, r2
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3301      	adds	r3, #1
 80042c2:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
  	uint16_t lin5 = lin4 + Font_6x8.FontHeight + 1;//Freq...//Volume...
 80042c6:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 80042d0:	4413      	add	r3, r2
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3301      	adds	r3, #1
 80042d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
  	uint16_t lin6 = lin5 + Font_6x8.FontHeight + 1;//Station
 80042da:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042e4:	4413      	add	r3, r2
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3301      	adds	r3, #1
 80042ea:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
  	char st[64];
  	char sta[32];
  	char stb[32];

  	ST7565_Reset();
 80042ee:	f7fc ffdf 	bl	80012b0 <ST7565_Reset>
  	ST7565_Init();
 80042f2:	f7fd f8f5 	bl	80014e0 <ST7565_Init>

    int dl = sprintf(tmp, "Ver.%s", ver);
 80042f6:	4b7f      	ldr	r3, [pc, #508]	; (80044f4 <StartTask+0x408>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	497e      	ldr	r1, [pc, #504]	; (80044f8 <StartTask+0x40c>)
 80042fe:	487f      	ldr	r0, [pc, #508]	; (80044fc <StartTask+0x410>)
 8004300:	f00f ff10 	bl	8014124 <siprintf>
 8004304:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    uint16_t x = ((SCREEN_WIDTH - (lfnt->FontWidth * dl)) >> 1) & 0x7f;
 8004308:	4b79      	ldr	r3, [pc, #484]	; (80044f0 <StartTask+0x404>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004314:	fb02 f303 	mul.w	r3, r2, r3
 8004318:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800431c:	105b      	asrs	r3, r3, #1
 800431e:	b29b      	uxth	r3, r3
 8004320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004324:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
    ST7565_Print(x, SCREEN_HEIGHT - lfnt->FontHeight, tmp, lfnt, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8004328:	f9b7 00ca 	ldrsh.w	r0, [r7, #202]	; 0xca
 800432c:	4b70      	ldr	r3, [pc, #448]	; (80044f0 <StartTask+0x404>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	785b      	ldrb	r3, [r3, #1]
 8004332:	b29b      	uxth	r3, r3
 8004334:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004338:	b29b      	uxth	r3, r3
 800433a:	b219      	sxth	r1, r3
 800433c:	4b6c      	ldr	r3, [pc, #432]	; (80044f0 <StartTask+0x404>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2201      	movs	r2, #1
 8004342:	9201      	str	r2, [sp, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	9200      	str	r2, [sp, #0]
 8004348:	4a6c      	ldr	r2, [pc, #432]	; (80044fc <StartTask+0x410>)
 800434a:	f7fd fb11 	bl	8001970 <ST7565_Print>

	#ifdef SET_RDA_CHIP
    	int il = sprintf(st, "RDA5807 chipID:0x%x", rdaID);
 800434e:	4b61      	ldr	r3, [pc, #388]	; (80044d4 <StartTask+0x3e8>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004358:	4969      	ldr	r1, [pc, #420]	; (8004500 <StartTask+0x414>)
 800435a:	4618      	mov	r0, r3
 800435c:	f00f fee2 	bl	8014124 <siprintf>
 8004360:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
    	uint16_t xf = ((SCREEN_WIDTH - (lfnt->FontWidth * il)) >> 1) & 0x7f;
 8004364:	4b62      	ldr	r3, [pc, #392]	; (80044f0 <StartTask+0x404>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004370:	fb02 f303 	mul.w	r3, r2, r3
 8004374:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004378:	105b      	asrs	r3, r3, #1
 800437a:	b29b      	uxth	r3, r3
 800437c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004380:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    	if (!xf) xf = 1;
 8004384:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004388:	2b00      	cmp	r3, #0
 800438a:	d102      	bne.n	8004392 <StartTask+0x2a6>
 800438c:	2301      	movs	r3, #1
 800438e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    	ST7565_Print(xf, lin2, st, lfnt, 1, PIX_ON);
 8004392:	f9b7 00f6 	ldrsh.w	r0, [r7, #246]	; 0xf6
 8004396:	f9b7 10d4 	ldrsh.w	r1, [r7, #212]	; 0xd4
 800439a:	4b55      	ldr	r3, [pc, #340]	; (80044f0 <StartTask+0x404>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80043a2:	2401      	movs	r4, #1
 80043a4:	9401      	str	r4, [sp, #4]
 80043a6:	2401      	movs	r4, #1
 80043a8:	9400      	str	r4, [sp, #0]
 80043aa:	f7fd fae1 	bl	8001970 <ST7565_Print>

    	int it = sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 80043ae:	4b55      	ldr	r3, [pc, #340]	; (8004504 <StartTask+0x418>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	4b54      	ldr	r3, [pc, #336]	; (8004508 <StartTask+0x41c>)
 80043b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80043ba:	f107 0320 	add.w	r3, r7, #32
 80043be:	4953      	ldr	r1, [pc, #332]	; (800450c <StartTask+0x420>)
 80043c0:	4618      	mov	r0, r3
 80043c2:	f00f feaf 	bl	8014124 <siprintf>
 80043c6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    	int lit = it;
 80043ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043ce:	61fb      	str	r3, [r7, #28]
    	xf = ((SCREEN_WIDTH - (lfnt->FontWidth * it)) >> 1) & 0x7f;
 80043d0:	4b47      	ldr	r3, [pc, #284]	; (80044f0 <StartTask+0x404>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	461a      	mov	r2, r3
 80043d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043dc:	fb02 f303 	mul.w	r3, r2, r3
 80043e0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80043e4:	105b      	asrs	r3, r3, #1
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043ec:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 80043f0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <StartTask+0x314>
 80043f8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80043fc:	2b7d      	cmp	r3, #125	; 0x7d
 80043fe:	d902      	bls.n	8004406 <StartTask+0x31a>
 8004400:	2301      	movs	r3, #1
 8004402:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    	ST7565_Print(xf, lin3, stb, lfnt, 1, PIX_ON);
 8004406:	f9b7 00f6 	ldrsh.w	r0, [r7, #246]	; 0xf6
 800440a:	f9b7 10d2 	ldrsh.w	r1, [r7, #210]	; 0xd2
 800440e:	4b38      	ldr	r3, [pc, #224]	; (80044f0 <StartTask+0x404>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f107 0220 	add.w	r2, r7, #32
 8004416:	2401      	movs	r4, #1
 8004418:	9401      	str	r4, [sp, #4]
 800441a:	2401      	movs	r4, #1
 800441c:	9400      	str	r4, [sp, #0]
 800441e:	f7fd faa7 	bl	8001970 <ST7565_Print>

    	int im = sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8004422:	4b2f      	ldr	r3, [pc, #188]	; (80044e0 <StartTask+0x3f4>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	4b2c      	ldr	r3, [pc, #176]	; (80044dc <StartTask+0x3f0>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004430:	4937      	ldr	r1, [pc, #220]	; (8004510 <StartTask+0x424>)
 8004432:	f00f fe77 	bl	8014124 <siprintf>
 8004436:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
    	int lim = im;
 800443a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800443e:	61bb      	str	r3, [r7, #24]
    	xf = ((SCREEN_WIDTH - (lfnt->FontWidth * im)) >> 1) & 0x7f;
 8004440:	4b2b      	ldr	r3, [pc, #172]	; (80044f0 <StartTask+0x404>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800444c:	fb02 f303 	mul.w	r3, r2, r3
 8004450:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004454:	105b      	asrs	r3, r3, #1
 8004456:	b29b      	uxth	r3, r3
 8004458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800445c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8004460:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <StartTask+0x384>
 8004468:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800446c:	2b7d      	cmp	r3, #125	; 0x7d
 800446e:	d902      	bls.n	8004476 <StartTask+0x38a>
 8004470:	2301      	movs	r3, #1
 8004472:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    	ST7565_Print(xf, lin4, st, lfnt, 1, PIX_ON);
 8004476:	f9b7 00f6 	ldrsh.w	r0, [r7, #246]	; 0xf6
 800447a:	f9b7 10d0 	ldrsh.w	r1, [r7, #208]	; 0xd0
 800447e:	4b1c      	ldr	r3, [pc, #112]	; (80044f0 <StartTask+0x404>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004486:	2401      	movs	r4, #1
 8004488:	9401      	str	r4, [sp, #4]
 800448a:	2401      	movs	r4, #1
 800448c:	9400      	str	r4, [sp, #0]
 800448e:	f7fd fa6f 	bl	8001970 <ST7565_Print>

    	if (stereo)
 8004492:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <StartTask+0x3f8>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d03e      	beq.n	8004518 <StartTask+0x42c>
    		il = sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 800449a:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <StartTask+0x3ec>)
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	461c      	mov	r4, r3
 80044a0:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <StartTask+0x3e4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fc f84f 	bl	8000548 <__aeabi_f2d>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80044b2:	e9cd 2300 	strd	r2, r3, [sp]
 80044b6:	4622      	mov	r2, r4
 80044b8:	4916      	ldr	r1, [pc, #88]	; (8004514 <StartTask+0x428>)
 80044ba:	f00f fe33 	bl	8014124 <siprintf>
 80044be:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 80044c2:	e03d      	b.n	8004540 <StartTask+0x454>
 80044c4:	200032f0 	.word	0x200032f0
 80044c8:	08018f04 	.word	0x08018f04
 80044cc:	20002f6c 	.word	0x20002f6c
 80044d0:	20000104 	.word	0x20000104
 80044d4:	20002f58 	.word	0x20002f58
 80044d8:	20002f56 	.word	0x20002f56
 80044dc:	2000010f 	.word	0x2000010f
 80044e0:	20002f5a 	.word	0x20002f5a
 80044e4:	20002f5c 	.word	0x20002f5c
 80044e8:	20002f54 	.word	0x20002f54
 80044ec:	08018260 	.word	0x08018260
 80044f0:	20002f48 	.word	0x20002f48
 80044f4:	20000004 	.word	0x20000004
 80044f8:	08017e30 	.word	0x08017e30
 80044fc:	20001288 	.word	0x20001288
 8004500:	08017e38 	.word	0x08017e38
 8004504:	2000010c 	.word	0x2000010c
 8004508:	20000118 	.word	0x20000118
 800450c:	08017e4c 	.word	0x08017e4c
 8004510:	08017e58 	.word	0x08017e58
 8004514:	08017e68 	.word	0x08017e68
    	else
    		il = sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8004518:	4b73      	ldr	r3, [pc, #460]	; (80046e8 <StartTask+0x5fc>)
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	461c      	mov	r4, r3
 800451e:	4b73      	ldr	r3, [pc, #460]	; (80046ec <StartTask+0x600>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f7fc f810 	bl	8000548 <__aeabi_f2d>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004530:	e9cd 2300 	strd	r2, r3, [sp]
 8004534:	4622      	mov	r2, r4
 8004536:	496e      	ldr	r1, [pc, #440]	; (80046f0 <StartTask+0x604>)
 8004538:	f00f fdf4 	bl	8014124 <siprintf>
 800453c:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
    	int lil = il;
 8004540:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004544:	617b      	str	r3, [r7, #20]
    	xf = ((SCREEN_WIDTH - (lfnt->FontWidth * il)) >> 1) & 0x7f;
 8004546:	4b6b      	ldr	r3, [pc, #428]	; (80046f4 <StartTask+0x608>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	461a      	mov	r2, r3
 800454e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004552:	fb02 f303 	mul.w	r3, r2, r3
 8004556:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800455a:	105b      	asrs	r3, r3, #1
 800455c:	b29b      	uxth	r3, r3
 800455e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004562:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8004566:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <StartTask+0x48a>
 800456e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004572:	2b7d      	cmp	r3, #125	; 0x7d
 8004574:	d902      	bls.n	800457c <StartTask+0x490>
 8004576:	2301      	movs	r3, #1
 8004578:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    	ST7565_Print(xf, lin5, st, lfnt, 1, PIX_ON);
 800457c:	f9b7 00f6 	ldrsh.w	r0, [r7, #246]	; 0xf6
 8004580:	f9b7 10ce 	ldrsh.w	r1, [r7, #206]	; 0xce
 8004584:	4b5b      	ldr	r3, [pc, #364]	; (80046f4 <StartTask+0x608>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800458c:	2401      	movs	r4, #1
 800458e:	9401      	str	r4, [sp, #4]
 8004590:	2401      	movs	r4, #1
 8004592:	9400      	str	r4, [sp, #0]
 8004594:	f7fd f9ec 	bl	8001970 <ST7565_Print>

    	int ia = sprintf(sta, "%s", nameStation(Freq));
 8004598:	4b54      	ldr	r3, [pc, #336]	; (80046ec <StartTask+0x600>)
 800459a:	edd3 7a00 	vldr	s15, [r3]
 800459e:	eeb0 0a67 	vmov.f32	s0, s15
 80045a2:	f7fe fb05 	bl	8002bb0 <nameStation>
 80045a6:	4602      	mov	r2, r0
 80045a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80045ac:	4952      	ldr	r1, [pc, #328]	; (80046f8 <StartTask+0x60c>)
 80045ae:	4618      	mov	r0, r3
 80045b0:	f00f fdb8 	bl	8014124 <siprintf>
 80045b4:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
    	int lia = ia;
 80045b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80045bc:	613b      	str	r3, [r7, #16]
    	xf = ((SCREEN_WIDTH - (lfnt->FontWidth * ia)) >> 1) & 0x7f;
 80045be:	4b4d      	ldr	r3, [pc, #308]	; (80046f4 <StartTask+0x608>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80045ca:	fb02 f303 	mul.w	r3, r2, r3
 80045ce:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80045d2:	105b      	asrs	r3, r3, #1
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045da:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 80045de:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <StartTask+0x502>
 80045e6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80045ea:	2b7d      	cmp	r3, #125	; 0x7d
 80045ec:	d902      	bls.n	80045f4 <StartTask+0x508>
 80045ee:	2301      	movs	r3, #1
 80045f0:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    	ST7565_Print(xf, lin6, sta, lfnt, 1, PIX_ON);
 80045f4:	f9b7 00f6 	ldrsh.w	r0, [r7, #246]	; 0xf6
 80045f8:	f9b7 10cc 	ldrsh.w	r1, [r7, #204]	; 0xcc
 80045fc:	4b3d      	ldr	r3, [pc, #244]	; (80046f4 <StartTask+0x608>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004604:	2401      	movs	r4, #1
 8004606:	9401      	str	r4, [sp, #4]
 8004608:	2401      	movs	r4, #1
 800460a:	9400      	str	r4, [sp, #0]
 800460c:	f7fd f9b0 	bl	8001970 <ST7565_Print>

    	Report(1, "ChipID:0x%x Chan:%u Freq:%.2f %s RSSI:%u Band:%s Vol:%u BassEn:%u\r\n",
 8004610:	4b3a      	ldr	r3, [pc, #232]	; (80046fc <StartTask+0x610>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	461e      	mov	r6, r3
 8004616:	4b3a      	ldr	r3, [pc, #232]	; (8004700 <StartTask+0x614>)
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	4698      	mov	r8, r3
 800461c:	4b33      	ldr	r3, [pc, #204]	; (80046ec <StartTask+0x600>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f7fb ff91 	bl	8000548 <__aeabi_f2d>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	492f      	ldr	r1, [pc, #188]	; (80046e8 <StartTask+0x5fc>)
 800462c:	8809      	ldrh	r1, [r1, #0]
 800462e:	460c      	mov	r4, r1
 8004630:	4934      	ldr	r1, [pc, #208]	; (8004704 <StartTask+0x618>)
 8004632:	7809      	ldrb	r1, [r1, #0]
 8004634:	4608      	mov	r0, r1
 8004636:	4934      	ldr	r1, [pc, #208]	; (8004708 <StartTask+0x61c>)
 8004638:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800463c:	4833      	ldr	r0, [pc, #204]	; (800470c <StartTask+0x620>)
 800463e:	7800      	ldrb	r0, [r0, #0]
 8004640:	4605      	mov	r5, r0
 8004642:	4833      	ldr	r0, [pc, #204]	; (8004710 <StartTask+0x624>)
 8004644:	7800      	ldrb	r0, [r0, #0]
 8004646:	9006      	str	r0, [sp, #24]
 8004648:	9505      	str	r5, [sp, #20]
 800464a:	9104      	str	r1, [sp, #16]
 800464c:	9403      	str	r4, [sp, #12]
 800464e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004652:	9102      	str	r1, [sp, #8]
 8004654:	e9cd 2300 	strd	r2, r3, [sp]
 8004658:	4643      	mov	r3, r8
 800465a:	4632      	mov	r2, r6
 800465c:	492d      	ldr	r1, [pc, #180]	; (8004714 <StartTask+0x628>)
 800465e:	2001      	movs	r0, #1
 8004660:	f7fe fde2 	bl	8003228 <Report>
    			rdaID, Chan, Freq, sta, RSSI, allBands[Band], Volume, BassBoost);
	#endif

    ST7565_DrawRectangle(0, lfnt->FontHeight, SCREEN_WIDTH - 1, SCREEN_HEIGHT - (lfnt->FontHeight << 1) - 2, PIX_ON);
 8004664:	4b23      	ldr	r3, [pc, #140]	; (80046f4 <StartTask+0x608>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	785b      	ldrb	r3, [r3, #1]
 800466a:	b219      	sxth	r1, r3
 800466c:	4b21      	ldr	r3, [pc, #132]	; (80046f4 <StartTask+0x608>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	785b      	ldrb	r3, [r3, #1]
 8004672:	b29b      	uxth	r3, r3
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	b29b      	uxth	r3, r3
 8004678:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 800467c:	b29b      	uxth	r3, r3
 800467e:	b21b      	sxth	r3, r3
 8004680:	2201      	movs	r2, #1
 8004682:	9200      	str	r2, [sp, #0]
 8004684:	227f      	movs	r2, #127	; 0x7f
 8004686:	2000      	movs	r0, #0
 8004688:	f7fd fb49 	bl	8001d1e <ST7565_DrawRectangle>
    ST7565_DrawFilledRectangle(0, 0, SCREEN_WIDTH - 1, lfnt->FontHeight, PIX_ON);
 800468c:	4b19      	ldr	r3, [pc, #100]	; (80046f4 <StartTask+0x608>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	785b      	ldrb	r3, [r3, #1]
 8004692:	b21b      	sxth	r3, r3
 8004694:	2201      	movs	r2, #1
 8004696:	9200      	str	r2, [sp, #0]
 8004698:	227f      	movs	r2, #127	; 0x7f
 800469a:	2100      	movs	r1, #0
 800469c:	2000      	movs	r0, #0
 800469e:	f7fd fbc0 	bl	8001e22 <ST7565_DrawFilledRectangle>
    ST7565_Update();
 80046a2:	f7fc ffb5 	bl	8001610 <ST7565_Update>

    startSec = true;
 80046a6:	4b1c      	ldr	r3, [pc, #112]	; (8004718 <StartTask+0x62c>)
 80046a8:	2201      	movs	r2, #1
 80046aa:	701a      	strb	r2, [r3, #0]

#endif


#ifdef SET_IRED
    waitBit = false;
 80046ac:	4b1b      	ldr	r3, [pc, #108]	; (800471c <StartTask+0x630>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	701a      	strb	r2, [r3, #0]
#endif

	uint16_t lastErr = devOK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4

	int evt, ev = evt_Freq;
 80046b8:	230c      	movs	r3, #12
 80046ba:	60bb      	str	r3, [r7, #8]
	if (osMessageQueuePut(evtQueHandle, (const void *)&ev, prio, 20) != osOK) devError |= devEVT;
 80046bc:	4b18      	ldr	r3, [pc, #96]	; (8004720 <StartTask+0x634>)
 80046be:	6818      	ldr	r0, [r3, #0]
 80046c0:	4b18      	ldr	r3, [pc, #96]	; (8004724 <StartTask+0x638>)
 80046c2:	781a      	ldrb	r2, [r3, #0]
 80046c4:	f107 0108 	add.w	r1, r7, #8
 80046c8:	2314      	movs	r3, #20
 80046ca:	f00b fb09 	bl	800fce0 <osMessageQueuePut>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f001 803c 	beq.w	800574e <StartTask+0x1662>
 80046d6:	4b14      	ldr	r3, [pc, #80]	; (8004728 <StartTask+0x63c>)
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	f043 0310 	orr.w	r3, r3, #16
 80046de:	b29a      	uxth	r2, r3
 80046e0:	4b11      	ldr	r3, [pc, #68]	; (8004728 <StartTask+0x63c>)
 80046e2:	801a      	strh	r2, [r3, #0]

    while (!restart) {
 80046e4:	f001 b833 	b.w	800574e <StartTask+0x1662>
 80046e8:	20002f56 	.word	0x20002f56
 80046ec:	20000104 	.word	0x20000104
 80046f0:	08017e7c 	.word	0x08017e7c
 80046f4:	20002f48 	.word	0x20002f48
 80046f8:	08017c74 	.word	0x08017c74
 80046fc:	20002f58 	.word	0x20002f58
 8004700:	20002f54 	.word	0x20002f54
 8004704:	2000010c 	.word	0x2000010c
 8004708:	20000118 	.word	0x20000118
 800470c:	2000010f 	.word	0x2000010f
 8004710:	20002f5a 	.word	0x20002f5a
 8004714:	08017e90 	.word	0x08017e90
 8004718:	20002f44 	.word	0x20002f44
 800471c:	20000008 	.word	0x20000008
 8004720:	20000e74 	.word	0x20000e74
 8004724:	2000362c 	.word	0x2000362c
 8004728:	20001b08 	.word	0x20001b08

		evt = evt_None;
 800472c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004730:	60fb      	str	r3, [r7, #12]
		if (osMessageQueueGet(evtQueHandle, &evt, NULL, 1) == osOK) {
 8004732:	4bb6      	ldr	r3, [pc, #728]	; (8004a0c <StartTask+0x920>)
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	f107 010c 	add.w	r1, r7, #12
 800473a:	2301      	movs	r3, #1
 800473c:	2200      	movs	r2, #0
 800473e:	f00b fb2f 	bl	800fda0 <osMessageQueueGet>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	f040 871f 	bne.w	8005588 <StartTask+0x149c>
    		cntEvt = getQueCount(evtQueHandle);
 800474a:	4bb0      	ldr	r3, [pc, #704]	; (8004a0c <StartTask+0x920>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f7fe fa22 	bl	8002b98 <getQueCount>
 8004754:	4603      	mov	r3, r0
 8004756:	b2da      	uxtb	r2, r3
 8004758:	4bad      	ldr	r3, [pc, #692]	; (8004a10 <StartTask+0x924>)
 800475a:	701a      	strb	r2, [r3, #0]
    		if (evt != evt_Sec) {
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b08      	cmp	r3, #8
 8004760:	d045      	beq.n	80047ee <StartTask+0x702>
    			//Report(1, "[que:%u] get event '%s'\r\n", cntEvt, str_cmds[evt]);
	#ifdef SET_DISPLAY
    			ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - lfnt->FontHeight, SCREEN_WIDTH - 1, lfnt->FontHeight, PIX_OFF);
 8004762:	4bac      	ldr	r3, [pc, #688]	; (8004a14 <StartTask+0x928>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	785b      	ldrb	r3, [r3, #1]
 8004768:	b29b      	uxth	r3, r3
 800476a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800476e:	b29b      	uxth	r3, r3
 8004770:	b219      	sxth	r1, r3
 8004772:	4ba8      	ldr	r3, [pc, #672]	; (8004a14 <StartTask+0x928>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	785b      	ldrb	r3, [r3, #1]
 8004778:	b21b      	sxth	r3, r3
 800477a:	2200      	movs	r2, #0
 800477c:	9200      	str	r2, [sp, #0]
 800477e:	227f      	movs	r2, #127	; 0x7f
 8004780:	2000      	movs	r0, #0
 8004782:	f7fd fb4e 	bl	8001e22 <ST7565_DrawFilledRectangle>
    			int dl = sprintf(tmp, "evt(%u) : %s", cntEvt, str_cmds[evt]);
 8004786:	4ba2      	ldr	r3, [pc, #648]	; (8004a10 <StartTask+0x924>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	b2db      	uxtb	r3, r3
 800478c:	4619      	mov	r1, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4aa1      	ldr	r2, [pc, #644]	; (8004a18 <StartTask+0x92c>)
 8004792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004796:	460a      	mov	r2, r1
 8004798:	49a0      	ldr	r1, [pc, #640]	; (8004a1c <StartTask+0x930>)
 800479a:	48a1      	ldr	r0, [pc, #644]	; (8004a20 <StartTask+0x934>)
 800479c:	f00f fcc2 	bl	8014124 <siprintf>
 80047a0:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    			int x = ((SCREEN_WIDTH - (lfnt->FontWidth * dl)) >> 1) & 0x7f;
 80047a4:	4b9b      	ldr	r3, [pc, #620]	; (8004a14 <StartTask+0x928>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80047b0:	fb02 f303 	mul.w	r3, r2, r3
 80047b4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80047b8:	105b      	asrs	r3, r3, #1
 80047ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    			ST7565_Print(x, SCREEN_HEIGHT - lfnt->FontHeight, tmp, lfnt, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 80047c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80047c6:	b218      	sxth	r0, r3
 80047c8:	4b92      	ldr	r3, [pc, #584]	; (8004a14 <StartTask+0x928>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	785b      	ldrb	r3, [r3, #1]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	b219      	sxth	r1, r3
 80047d8:	4b8e      	ldr	r3, [pc, #568]	; (8004a14 <StartTask+0x928>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2201      	movs	r2, #1
 80047de:	9201      	str	r2, [sp, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	9200      	str	r2, [sp, #0]
 80047e4:	4a8e      	ldr	r2, [pc, #568]	; (8004a20 <StartTask+0x934>)
 80047e6:	f7fd f8c3 	bl	8001970 <ST7565_Print>
    			ST7565_Update();
 80047ea:	f7fc ff11 	bl	8001610 <ST7565_Update>
	#endif
    		}
    		switch (evt) {
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b19      	cmp	r3, #25
 80047f2:	f200 86bc 	bhi.w	800556e <StartTask+0x1482>
 80047f6:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <StartTask+0x710>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	08005211 	.word	0x08005211
 8004800:	080052c1 	.word	0x080052c1
 8004804:	080052d9 	.word	0x080052d9
 8004808:	080052f9 	.word	0x080052f9
 800480c:	0800530b 	.word	0x0800530b
 8004810:	080054af 	.word	0x080054af
 8004814:	0800530b 	.word	0x0800530b
 8004818:	0800542d 	.word	0x0800542d
 800481c:	08004f65 	.word	0x08004f65
 8004820:	08004eff 	.word	0x08004eff
 8004824:	080051f9 	.word	0x080051f9
 8004828:	08004edf 	.word	0x08004edf
 800482c:	08004d8f 	.word	0x08004d8f
 8004830:	08004c31 	.word	0x08004c31
 8004834:	08004cad 	.word	0x08004cad
 8004838:	08004bb5 	.word	0x08004bb5
 800483c:	08004aef 	.word	0x08004aef
 8004840:	08004965 	.word	0x08004965
 8004844:	08004ae7 	.word	0x08004ae7
 8004848:	08004947 	.word	0x08004947
 800484c:	080048f7 	.word	0x080048f7
 8004850:	080048d9 	.word	0x080048d9
 8004854:	08004865 	.word	0x08004865
 8004858:	080051b1 	.word	0x080051b1
 800485c:	080051c9 	.word	0x080051c9
 8004860:	080051e1 	.word	0x080051e1
    			case evt_Rds:
    				memset(dataRDS, 0, sizeof(dataRDS));
 8004864:	2208      	movs	r2, #8
 8004866:	2100      	movs	r1, #0
 8004868:	486e      	ldr	r0, [pc, #440]	; (8004a24 <StartTask+0x938>)
 800486a:	f00e fe79 	bl	8013560 <memset>
    				readyRds = rda5807_Get_RDSData(dataRDS, &syncRds);
 800486e:	496e      	ldr	r1, [pc, #440]	; (8004a28 <StartTask+0x93c>)
 8004870:	486c      	ldr	r0, [pc, #432]	; (8004a24 <StartTask+0x938>)
 8004872:	f001 fd3d 	bl	80062f0 <rda5807_Get_RDSData>
 8004876:	4603      	mov	r3, r0
 8004878:	461a      	mov	r2, r3
 800487a:	4b6c      	ldr	r3, [pc, #432]	; (8004a2c <StartTask+0x940>)
 800487c:	701a      	strb	r2, [r3, #0]
    				sprintf(tmp, "[RDS] ready=%d sync=%d :", readyRds, syncRds);
 800487e:	4b6b      	ldr	r3, [pc, #428]	; (8004a2c <StartTask+0x940>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	4b68      	ldr	r3, [pc, #416]	; (8004a28 <StartTask+0x93c>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	4969      	ldr	r1, [pc, #420]	; (8004a30 <StartTask+0x944>)
 800488a:	4865      	ldr	r0, [pc, #404]	; (8004a20 <StartTask+0x934>)
 800488c:	f00f fc4a 	bl	8014124 <siprintf>
    				for (int8_t i = 0; i < sizeof(dataRDS); i++)
 8004890:	2300      	movs	r3, #0
 8004892:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 8004896:	e014      	b.n	80048c2 <StartTask+0x7d6>
    					sprintf(tmp+strlen(tmp), " %02X", dataRDS[i]);
 8004898:	4861      	ldr	r0, [pc, #388]	; (8004a20 <StartTask+0x934>)
 800489a:	f7fb fc99 	bl	80001d0 <strlen>
 800489e:	4603      	mov	r3, r0
 80048a0:	4a5f      	ldr	r2, [pc, #380]	; (8004a20 <StartTask+0x934>)
 80048a2:	1898      	adds	r0, r3, r2
 80048a4:	f997 30f3 	ldrsb.w	r3, [r7, #243]	; 0xf3
 80048a8:	4a5e      	ldr	r2, [pc, #376]	; (8004a24 <StartTask+0x938>)
 80048aa:	5cd3      	ldrb	r3, [r2, r3]
 80048ac:	461a      	mov	r2, r3
 80048ae:	4961      	ldr	r1, [pc, #388]	; (8004a34 <StartTask+0x948>)
 80048b0:	f00f fc38 	bl	8014124 <siprintf>
    				for (int8_t i = 0; i < sizeof(dataRDS); i++)
 80048b4:	f997 30f3 	ldrsb.w	r3, [r7, #243]	; 0xf3
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	3301      	adds	r3, #1
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 80048c2:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80048c6:	2b07      	cmp	r3, #7
 80048c8:	d9e6      	bls.n	8004898 <StartTask+0x7ac>
    				Report(1, "%s\r\n", tmp);
 80048ca:	4a55      	ldr	r2, [pc, #340]	; (8004a20 <StartTask+0x934>)
 80048cc:	495a      	ldr	r1, [pc, #360]	; (8004a38 <StartTask+0x94c>)
 80048ce:	2001      	movs	r0, #1
 80048d0:	f7fe fcaa 	bl	8003228 <Report>
    			break;
 80048d4:	f000 be4b 	b.w	800556e <StartTask+0x1482>
    			case evt_SleepCont:
    				sleep_mode = true;
 80048d8:	4b58      	ldr	r3, [pc, #352]	; (8004a3c <StartTask+0x950>)
 80048da:	2201      	movs	r2, #1
 80048dc:	701a      	strb	r2, [r3, #0]
    				//
    				HAL_SuspendTick();
 80048de:	f002 f91d 	bl	8006b1c <HAL_SuspendTick>
    				HAL_PWR_EnableSleepOnExit();
 80048e2:	f005 faf3 	bl	8009ecc <HAL_PWR_EnableSleepOnExit>
    				HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80048e6:	2101      	movs	r1, #1
 80048e8:	2000      	movs	r0, #0
 80048ea:	f005 fabb 	bl	8009e64 <HAL_PWR_EnterSLEEPMode>
    				HAL_ResumeTick();
 80048ee:	f002 f927 	bl	8006b40 <HAL_ResumeTick>
    			break;
 80048f2:	f000 be3c 	b.w	800556e <StartTask+0x1482>
    			case evt_Sleep:
    				Report(1, "Going into SLEEP MODE...\r\n");// in 1 second\r\n");
 80048f6:	4952      	ldr	r1, [pc, #328]	; (8004a40 <StartTask+0x954>)
 80048f8:	2001      	movs	r0, #1
 80048fa:	f7fe fc95 	bl	8003228 <Report>
	#ifdef SET_BLE
    				bleWrite("AT+SLEEP1\r\n", 1);
	#endif
	#ifdef SET_DISPLAY
    				ST7565_CMD_DISPLAY(CMD_DISPLAY_OFF);
 80048fe:	20ae      	movs	r0, #174	; 0xae
 8004900:	f7fc fe08 	bl	8001514 <ST7565_CMD_DISPLAY>
	#endif
    				HAL_Delay(250);
 8004904:	20fa      	movs	r0, #250	; 0xfa
 8004906:	f003 f89d 	bl	8007a44 <HAL_Delay>
    				HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800490a:	2200      	movs	r2, #0
 800490c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004910:	484c      	ldr	r0, [pc, #304]	; (8004a44 <StartTask+0x958>)
 8004912:	f003 fde3 	bl	80084dc <HAL_GPIO_WritePin>
    				ev = evt_SleepCont;
 8004916:	2315      	movs	r3, #21
 8004918:	60bb      	str	r3, [r7, #8]
    				if (osMessageQueuePut(evtQueHandle, (const void *)&ev, prio, 10) != osOK) devError |= devEVT;
 800491a:	4b3c      	ldr	r3, [pc, #240]	; (8004a0c <StartTask+0x920>)
 800491c:	6818      	ldr	r0, [r3, #0]
 800491e:	4b4a      	ldr	r3, [pc, #296]	; (8004a48 <StartTask+0x95c>)
 8004920:	781a      	ldrb	r2, [r3, #0]
 8004922:	f107 0108 	add.w	r1, r7, #8
 8004926:	230a      	movs	r3, #10
 8004928:	f00b f9da 	bl	800fce0 <osMessageQueuePut>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 85dc 	beq.w	80054ec <StartTask+0x1400>
 8004934:	4b45      	ldr	r3, [pc, #276]	; (8004a4c <StartTask+0x960>)
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	f043 0310 	orr.w	r3, r3, #16
 800493c:	b29a      	uxth	r2, r3
 800493e:	4b43      	ldr	r3, [pc, #268]	; (8004a4c <StartTask+0x960>)
 8004940:	801a      	strh	r2, [r3, #0]
    			break;
 8004942:	f000 bdd3 	b.w	80054ec <StartTask+0x1400>
    			case evt_ExitSleep:
    				HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8004946:	2201      	movs	r2, #1
 8004948:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800494c:	483d      	ldr	r0, [pc, #244]	; (8004a44 <StartTask+0x958>)
 800494e:	f003 fdc5 	bl	80084dc <HAL_GPIO_WritePin>
	#ifdef SET_DISPLAY
    				ST7565_CMD_DISPLAY(CMD_DISPLAY_ON);
 8004952:	20af      	movs	r0, #175	; 0xaf
 8004954:	f7fc fdde 	bl	8001514 <ST7565_CMD_DISPLAY>
	#endif
	#ifdef SET_BLE
    				bleWakeUp();
	#endif
    				Report(1, "Exit from SLEEP MODE\r\n");
 8004958:	493d      	ldr	r1, [pc, #244]	; (8004a50 <StartTask+0x964>)
 800495a:	2001      	movs	r0, #1
 800495c:	f7fe fc64 	bl	8003228 <Report>
    			break;
 8004960:	f000 be05 	b.w	800556e <StartTask+0x1482>
    			case evt_WakeUp:
    				bleWakeUp();
    			break;
	#endif
    			case evt_Band:
    				Band = newBand;
 8004964:	4b3b      	ldr	r3, [pc, #236]	; (8004a54 <StartTask+0x968>)
 8004966:	781a      	ldrb	r2, [r3, #0]
 8004968:	4b3b      	ldr	r3, [pc, #236]	; (8004a58 <StartTask+0x96c>)
 800496a:	701a      	strb	r2, [r3, #0]
    				if (!rda5807_Set_Band(Band)) {
 800496c:	4b3a      	ldr	r3, [pc, #232]	; (8004a58 <StartTask+0x96c>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	4618      	mov	r0, r3
 8004972:	f001 fc33 	bl	80061dc <rda5807_Set_Band>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	f040 85b9 	bne.w	80054f0 <StartTask+0x1404>
    					sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 800497e:	4b36      	ldr	r3, [pc, #216]	; (8004a58 <StartTask+0x96c>)
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	4b35      	ldr	r3, [pc, #212]	; (8004a5c <StartTask+0x970>)
 8004986:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800498a:	f107 0320 	add.w	r3, r7, #32
 800498e:	4934      	ldr	r1, [pc, #208]	; (8004a60 <StartTask+0x974>)
 8004990:	4618      	mov	r0, r3
 8004992:	f00f fbc7 	bl	8014124 <siprintf>
    					showLine(stb, lin3, &lit, true);
 8004996:	f107 021c 	add.w	r2, r7, #28
 800499a:	f8b7 10d2 	ldrh.w	r1, [r7, #210]	; 0xd2
 800499e:	f107 0020 	add.w	r0, r7, #32
 80049a2:	2301      	movs	r3, #1
 80049a4:	f7fe fa2e 	bl	8002e04 <showLine>
    					Report(1, "[que:%u] set new band=%u '%s'\r\n", cntEvt, Band, allBands[Band]);
 80049a8:	4b19      	ldr	r3, [pc, #100]	; (8004a10 <StartTask+0x924>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	4619      	mov	r1, r3
 80049b0:	4b29      	ldr	r3, [pc, #164]	; (8004a58 <StartTask+0x96c>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	4618      	mov	r0, r3
 80049b6:	4b28      	ldr	r3, [pc, #160]	; (8004a58 <StartTask+0x96c>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	4b27      	ldr	r3, [pc, #156]	; (8004a5c <StartTask+0x970>)
 80049be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	4603      	mov	r3, r0
 80049c6:	460a      	mov	r2, r1
 80049c8:	4926      	ldr	r1, [pc, #152]	; (8004a64 <StartTask+0x978>)
 80049ca:	2001      	movs	r0, #1
 80049cc:	f7fe fc2c 	bl	8003228 <Report>
    					if (next_evt == evt) {
 80049d0:	4b25      	ldr	r3, [pc, #148]	; (8004a68 <StartTask+0x97c>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d16a      	bne.n	8004ab0 <StartTask+0x9c4>
    						if ((Freq < lBand) || (Freq > rBand)) {
 80049da:	4b24      	ldr	r3, [pc, #144]	; (8004a6c <StartTask+0x980>)
 80049dc:	ed93 7a00 	vldr	s14, [r3]
 80049e0:	4b23      	ldr	r3, [pc, #140]	; (8004a70 <StartTask+0x984>)
 80049e2:	edd3 7a00 	vldr	s15, [r3]
 80049e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ee:	d443      	bmi.n	8004a78 <StartTask+0x98c>
 80049f0:	4b1e      	ldr	r3, [pc, #120]	; (8004a6c <StartTask+0x980>)
 80049f2:	ed93 7a00 	vldr	s14, [r3]
 80049f6:	4b1f      	ldr	r3, [pc, #124]	; (8004a74 <StartTask+0x988>)
 80049f8:	edd3 7a00 	vldr	s15, [r3]
 80049fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a04:	dc38      	bgt.n	8004a78 <StartTask+0x98c>
    						next_evt = evt;
    						ev = evt_Freq;
    						if (osMessageQueuePut(evtQueHandle, (const void *)&ev, prio, 10) != osOK) devError |= devEVT;
    					}
    				}
    			break;
 8004a06:	f000 bd73 	b.w	80054f0 <StartTask+0x1404>
 8004a0a:	bf00      	nop
 8004a0c:	20000e74 	.word	0x20000e74
 8004a10:	20001f1f 	.word	0x20001f1f
 8004a14:	20002f48 	.word	0x20002f48
 8004a18:	20000088 	.word	0x20000088
 8004a1c:	08017ed4 	.word	0x08017ed4
 8004a20:	20001288 	.word	0x20001288
 8004a24:	20002f60 	.word	0x20002f60
 8004a28:	20002f68 	.word	0x20002f68
 8004a2c:	20002f69 	.word	0x20002f69
 8004a30:	08017ee4 	.word	0x08017ee4
 8004a34:	08017f00 	.word	0x08017f00
 8004a38:	08017f08 	.word	0x08017f08
 8004a3c:	20003600 	.word	0x20003600
 8004a40:	08017f10 	.word	0x08017f10
 8004a44:	48000800 	.word	0x48000800
 8004a48:	2000362c 	.word	0x2000362c
 8004a4c:	20001b08 	.word	0x20001b08
 8004a50:	08017f2c 	.word	0x08017f2c
 8004a54:	2000010d 	.word	0x2000010d
 8004a58:	2000010c 	.word	0x2000010c
 8004a5c:	20000118 	.word	0x20000118
 8004a60:	08017e4c 	.word	0x08017e4c
 8004a64:	08017f44 	.word	0x08017f44
 8004a68:	200000f0 	.word	0x200000f0
 8004a6c:	20000104 	.word	0x20000104
 8004a70:	20002f4c 	.word	0x20002f4c
 8004a74:	20002f50 	.word	0x20002f50
    							newFreq = lBand;
 8004a78:	4b9c      	ldr	r3, [pc, #624]	; (8004cec <StartTask+0xc00>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a9c      	ldr	r2, [pc, #624]	; (8004cf0 <StartTask+0xc04>)
 8004a7e:	6013      	str	r3, [r2, #0]
    							ev = evt_Freq;
 8004a80:	230c      	movs	r3, #12
 8004a82:	60bb      	str	r3, [r7, #8]
    							if (osMessageQueuePut(evtQueHandle, (const void *)&ev, prio, 10) != osOK) devError |= devEVT;
 8004a84:	4b9b      	ldr	r3, [pc, #620]	; (8004cf4 <StartTask+0xc08>)
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	4b9b      	ldr	r3, [pc, #620]	; (8004cf8 <StartTask+0xc0c>)
 8004a8a:	781a      	ldrb	r2, [r3, #0]
 8004a8c:	f107 0108 	add.w	r1, r7, #8
 8004a90:	230a      	movs	r3, #10
 8004a92:	f00b f925 	bl	800fce0 <osMessageQueuePut>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8529 	beq.w	80054f0 <StartTask+0x1404>
 8004a9e:	4b97      	ldr	r3, [pc, #604]	; (8004cfc <StartTask+0xc10>)
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	f043 0310 	orr.w	r3, r3, #16
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	4b94      	ldr	r3, [pc, #592]	; (8004cfc <StartTask+0xc10>)
 8004aaa:	801a      	strh	r2, [r3, #0]
    			break;
 8004aac:	f000 bd20 	b.w	80054f0 <StartTask+0x1404>
    						next_evt = evt;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4a93      	ldr	r2, [pc, #588]	; (8004d00 <StartTask+0xc14>)
 8004ab4:	6013      	str	r3, [r2, #0]
    						ev = evt_Freq;
 8004ab6:	230c      	movs	r3, #12
 8004ab8:	60bb      	str	r3, [r7, #8]
    						if (osMessageQueuePut(evtQueHandle, (const void *)&ev, prio, 10) != osOK) devError |= devEVT;
 8004aba:	4b8e      	ldr	r3, [pc, #568]	; (8004cf4 <StartTask+0xc08>)
 8004abc:	6818      	ldr	r0, [r3, #0]
 8004abe:	4b8e      	ldr	r3, [pc, #568]	; (8004cf8 <StartTask+0xc0c>)
 8004ac0:	781a      	ldrb	r2, [r3, #0]
 8004ac2:	f107 0108 	add.w	r1, r7, #8
 8004ac6:	230a      	movs	r3, #10
 8004ac8:	f00b f90a 	bl	800fce0 <osMessageQueuePut>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 850e 	beq.w	80054f0 <StartTask+0x1404>
 8004ad4:	4b89      	ldr	r3, [pc, #548]	; (8004cfc <StartTask+0xc10>)
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	f043 0310 	orr.w	r3, r3, #16
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	4b87      	ldr	r3, [pc, #540]	; (8004cfc <StartTask+0xc10>)
 8004ae0:	801a      	strh	r2, [r3, #0]
    			break;
 8004ae2:	f000 bd05 	b.w	80054f0 <StartTask+0x1404>
    			case evt_Cfg:
    				showCfg();
 8004ae6:	f7fd fa0b 	bl	8001f00 <showCfg>
    			break;
 8004aea:	f000 bd40 	b.w	800556e <StartTask+0x1482>
    			case evt_List:
    				next_evt = evt_Freq;
 8004aee:	4b84      	ldr	r3, [pc, #528]	; (8004d00 <StartTask+0xc14>)
 8004af0:	220c      	movs	r2, #12
 8004af2:	601a      	str	r2, [r3, #0]
    				newFreq = getNextList(Freq, seek_up, &newBand);
 8004af4:	4b83      	ldr	r3, [pc, #524]	; (8004d04 <StartTask+0xc18>)
 8004af6:	edd3 7a00 	vldr	s15, [r3]
 8004afa:	4b83      	ldr	r3, [pc, #524]	; (8004d08 <StartTask+0xc1c>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	4982      	ldr	r1, [pc, #520]	; (8004d0c <StartTask+0xc20>)
 8004b02:	4618      	mov	r0, r3
 8004b04:	eeb0 0a67 	vmov.f32	s0, s15
 8004b08:	f7fe f898 	bl	8002c3c <getNextList>
 8004b0c:	eef0 7a40 	vmov.f32	s15, s0
 8004b10:	4b77      	ldr	r3, [pc, #476]	; (8004cf0 <StartTask+0xc04>)
 8004b12:	edc3 7a00 	vstr	s15, [r3]
					if (newBand == Band) {
 8004b16:	4b7d      	ldr	r3, [pc, #500]	; (8004d0c <StartTask+0xc20>)
 8004b18:	781a      	ldrb	r2, [r3, #0]
 8004b1a:	4b7d      	ldr	r3, [pc, #500]	; (8004d10 <StartTask+0xc24>)
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d117      	bne.n	8004b52 <StartTask+0xa66>
						Report(1, "Band = newBand = %u -> goto set newFreq to %.1f (up = %u)\r\n", newBand, newFreq, seek_up);
 8004b22:	4b7a      	ldr	r3, [pc, #488]	; (8004d0c <StartTask+0xc20>)
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	461c      	mov	r4, r3
 8004b28:	4b71      	ldr	r3, [pc, #452]	; (8004cf0 <StartTask+0xc04>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fb fd0b 	bl	8000548 <__aeabi_f2d>
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	4974      	ldr	r1, [pc, #464]	; (8004d08 <StartTask+0xc1c>)
 8004b38:	7809      	ldrb	r1, [r1, #0]
 8004b3a:	b2c9      	uxtb	r1, r1
 8004b3c:	9102      	str	r1, [sp, #8]
 8004b3e:	e9cd 2300 	strd	r2, r3, [sp]
 8004b42:	4622      	mov	r2, r4
 8004b44:	4973      	ldr	r1, [pc, #460]	; (8004d14 <StartTask+0xc28>)
 8004b46:	2001      	movs	r0, #1
 8004b48:	f7fe fb6e 	bl	8003228 <Report>
						ev = evt_Freq;
 8004b4c:	230c      	movs	r3, #12
 8004b4e:	60bb      	str	r3, [r7, #8]
 8004b50:	e01a      	b.n	8004b88 <StartTask+0xa9c>
					} else {
						Report(1, "Band = %u -> goto set newBand to %u (newFreq to %.1f up = %u)\r\n", Band, newBand, newFreq, seek_up);
 8004b52:	4b6f      	ldr	r3, [pc, #444]	; (8004d10 <StartTask+0xc24>)
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	461c      	mov	r4, r3
 8004b58:	4b6c      	ldr	r3, [pc, #432]	; (8004d0c <StartTask+0xc20>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	461d      	mov	r5, r3
 8004b5e:	4b64      	ldr	r3, [pc, #400]	; (8004cf0 <StartTask+0xc04>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fb fcf0 	bl	8000548 <__aeabi_f2d>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4966      	ldr	r1, [pc, #408]	; (8004d08 <StartTask+0xc1c>)
 8004b6e:	7809      	ldrb	r1, [r1, #0]
 8004b70:	b2c9      	uxtb	r1, r1
 8004b72:	9102      	str	r1, [sp, #8]
 8004b74:	e9cd 2300 	strd	r2, r3, [sp]
 8004b78:	462b      	mov	r3, r5
 8004b7a:	4622      	mov	r2, r4
 8004b7c:	4966      	ldr	r1, [pc, #408]	; (8004d18 <StartTask+0xc2c>)
 8004b7e:	2001      	movs	r0, #1
 8004b80:	f7fe fb52 	bl	8003228 <Report>
						ev = evt_Band;
 8004b84:	2311      	movs	r3, #17
 8004b86:	60bb      	str	r3, [r7, #8]
					}
					if (osMessageQueuePut(evtQueHandle, (const void *)&ev, prio, 10) != osOK) devError |= devEVT;
 8004b88:	4b5a      	ldr	r3, [pc, #360]	; (8004cf4 <StartTask+0xc08>)
 8004b8a:	6818      	ldr	r0, [r3, #0]
 8004b8c:	4b5a      	ldr	r3, [pc, #360]	; (8004cf8 <StartTask+0xc0c>)
 8004b8e:	781a      	ldrb	r2, [r3, #0]
 8004b90:	f107 0108 	add.w	r1, r7, #8
 8004b94:	230a      	movs	r3, #10
 8004b96:	f00b f8a3 	bl	800fce0 <osMessageQueuePut>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 84a9 	beq.w	80054f4 <StartTask+0x1408>
 8004ba2:	4b56      	ldr	r3, [pc, #344]	; (8004cfc <StartTask+0xc10>)
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	f043 0310 	orr.w	r3, r3, #16
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	4b53      	ldr	r3, [pc, #332]	; (8004cfc <StartTask+0xc10>)
 8004bae:	801a      	strh	r2, [r3, #0]
    			break;
 8004bb0:	f000 bca0 	b.w	80054f4 <StartTask+0x1408>
    			case evt_Bass:
    				if (newBassBoost != BassBoost) {
 8004bb4:	4b59      	ldr	r3, [pc, #356]	; (8004d1c <StartTask+0xc30>)
 8004bb6:	781a      	ldrb	r2, [r3, #0]
 8004bb8:	4b59      	ldr	r3, [pc, #356]	; (8004d20 <StartTask+0xc34>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	f000 849b 	beq.w	80054f8 <StartTask+0x140c>
    					BassBoost = newBassBoost;
 8004bc2:	4b56      	ldr	r3, [pc, #344]	; (8004d1c <StartTask+0xc30>)
 8004bc4:	781a      	ldrb	r2, [r3, #0]
 8004bc6:	4b56      	ldr	r3, [pc, #344]	; (8004d20 <StartTask+0xc34>)
 8004bc8:	701a      	strb	r2, [r3, #0]
    					rda5807_SetBassBoost(BassBoost);
 8004bca:	4b55      	ldr	r3, [pc, #340]	; (8004d20 <StartTask+0xc34>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f001 f9c4 	bl	8005f5c <rda5807_SetBassBoost>
    					//
    					if (noMute)
 8004bd4:	4b53      	ldr	r3, [pc, #332]	; (8004d24 <StartTask+0xc38>)
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <StartTask+0xb06>
    						sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8004bdc:	4b50      	ldr	r3, [pc, #320]	; (8004d20 <StartTask+0xc34>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	461a      	mov	r2, r3
 8004be2:	4b51      	ldr	r3, [pc, #324]	; (8004d28 <StartTask+0xc3c>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004bea:	4950      	ldr	r1, [pc, #320]	; (8004d2c <StartTask+0xc40>)
 8004bec:	f00f fa9a 	bl	8014124 <siprintf>
 8004bf0:	e009      	b.n	8004c06 <StartTask+0xb1a>
    					else
    						sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 8004bf2:	4b4b      	ldr	r3, [pc, #300]	; (8004d20 <StartTask+0xc34>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	4b4b      	ldr	r3, [pc, #300]	; (8004d28 <StartTask+0xc3c>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004c00:	494b      	ldr	r1, [pc, #300]	; (8004d30 <StartTask+0xc44>)
 8004c02:	f00f fa8f 	bl	8014124 <siprintf>
    					showLine(st, lin4, &lim, true);
 8004c06:	f107 0218 	add.w	r2, r7, #24
 8004c0a:	f8b7 10d0 	ldrh.w	r1, [r7, #208]	; 0xd0
 8004c0e:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004c12:	2301      	movs	r3, #1
 8004c14:	f7fe f8f6 	bl	8002e04 <showLine>
    					Report(1, "[que:%u] set new BassBoost to %u\r\n", cntEvt, BassBoost);
 8004c18:	4b46      	ldr	r3, [pc, #280]	; (8004d34 <StartTask+0xc48>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	461a      	mov	r2, r3
 8004c20:	4b3f      	ldr	r3, [pc, #252]	; (8004d20 <StartTask+0xc34>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	4944      	ldr	r1, [pc, #272]	; (8004d38 <StartTask+0xc4c>)
 8004c26:	2001      	movs	r0, #1
 8004c28:	f7fe fafe 	bl	8003228 <Report>
    				}
    			break;
 8004c2c:	f000 bc64 	b.w	80054f8 <StartTask+0x140c>
    			case evt_Vol:
    				if (newVolume != Volume) {
 8004c30:	4b42      	ldr	r3, [pc, #264]	; (8004d3c <StartTask+0xc50>)
 8004c32:	781a      	ldrb	r2, [r3, #0]
 8004c34:	4b3c      	ldr	r3, [pc, #240]	; (8004d28 <StartTask+0xc3c>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	f000 845f 	beq.w	80054fc <StartTask+0x1410>
    					Volume = newVolume;
 8004c3e:	4b3f      	ldr	r3, [pc, #252]	; (8004d3c <StartTask+0xc50>)
 8004c40:	781a      	ldrb	r2, [r3, #0]
 8004c42:	4b39      	ldr	r3, [pc, #228]	; (8004d28 <StartTask+0xc3c>)
 8004c44:	701a      	strb	r2, [r3, #0]
    					rda5807_SetVolume(Volume);
 8004c46:	4b38      	ldr	r3, [pc, #224]	; (8004d28 <StartTask+0xc3c>)
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f001 f93e 	bl	8005ecc <rda5807_SetVolume>
    					//
    					if (noMute)
 8004c50:	4b34      	ldr	r3, [pc, #208]	; (8004d24 <StartTask+0xc38>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <StartTask+0xb82>
    						sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8004c58:	4b31      	ldr	r3, [pc, #196]	; (8004d20 <StartTask+0xc34>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4b32      	ldr	r3, [pc, #200]	; (8004d28 <StartTask+0xc3c>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004c66:	4931      	ldr	r1, [pc, #196]	; (8004d2c <StartTask+0xc40>)
 8004c68:	f00f fa5c 	bl	8014124 <siprintf>
 8004c6c:	e009      	b.n	8004c82 <StartTask+0xb96>
    					else
    						sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 8004c6e:	4b2c      	ldr	r3, [pc, #176]	; (8004d20 <StartTask+0xc34>)
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	4b2c      	ldr	r3, [pc, #176]	; (8004d28 <StartTask+0xc3c>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004c7c:	492c      	ldr	r1, [pc, #176]	; (8004d30 <StartTask+0xc44>)
 8004c7e:	f00f fa51 	bl	8014124 <siprintf>
    					showLine(st, lin4, &lim, true);
 8004c82:	f107 0218 	add.w	r2, r7, #24
 8004c86:	f8b7 10d0 	ldrh.w	r1, [r7, #208]	; 0xd0
 8004c8a:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004c8e:	2301      	movs	r3, #1
 8004c90:	f7fe f8b8 	bl	8002e04 <showLine>
    					Report(1, "[que:%u] set new Volume to %u\r\n", cntEvt, Volume);
 8004c94:	4b27      	ldr	r3, [pc, #156]	; (8004d34 <StartTask+0xc48>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	4b22      	ldr	r3, [pc, #136]	; (8004d28 <StartTask+0xc3c>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	4927      	ldr	r1, [pc, #156]	; (8004d40 <StartTask+0xc54>)
 8004ca2:	2001      	movs	r0, #1
 8004ca4:	f7fe fac0 	bl	8003228 <Report>
    				}
    			break;
 8004ca8:	f000 bc28 	b.w	80054fc <StartTask+0x1410>
    			case evt_Mute:
    				noMute = (~noMute) & 1;
 8004cac:	4b1d      	ldr	r3, [pc, #116]	; (8004d24 <StartTask+0xc38>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	bf0c      	ite	eq
 8004cb8:	2301      	moveq	r3, #1
 8004cba:	2300      	movne	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	4b18      	ldr	r3, [pc, #96]	; (8004d24 <StartTask+0xc38>)
 8004cc2:	701a      	strb	r2, [r3, #0]
    				rda5807_Set_Mute(noMute);
 8004cc4:	4b17      	ldr	r3, [pc, #92]	; (8004d24 <StartTask+0xc38>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f001 faf3 	bl	80062b4 <rda5807_Set_Mute>
    				//
    				if (noMute)
 8004cce:	4b15      	ldr	r3, [pc, #84]	; (8004d24 <StartTask+0xc38>)
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d036      	beq.n	8004d44 <StartTask+0xc58>
    					sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8004cd6:	4b12      	ldr	r3, [pc, #72]	; (8004d20 <StartTask+0xc34>)
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <StartTask+0xc3c>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004ce4:	4911      	ldr	r1, [pc, #68]	; (8004d2c <StartTask+0xc40>)
 8004ce6:	f00f fa1d 	bl	8014124 <siprintf>
 8004cea:	e035      	b.n	8004d58 <StartTask+0xc6c>
 8004cec:	20002f4c 	.word	0x20002f4c
 8004cf0:	20000108 	.word	0x20000108
 8004cf4:	20000e74 	.word	0x20000e74
 8004cf8:	2000362c 	.word	0x2000362c
 8004cfc:	20001b08 	.word	0x20001b08
 8004d00:	200000f0 	.word	0x200000f0
 8004d04:	20000104 	.word	0x20000104
 8004d08:	2000010e 	.word	0x2000010e
 8004d0c:	2000010d 	.word	0x2000010d
 8004d10:	2000010c 	.word	0x2000010c
 8004d14:	08017f64 	.word	0x08017f64
 8004d18:	08017fa0 	.word	0x08017fa0
 8004d1c:	20002f5b 	.word	0x20002f5b
 8004d20:	20002f5a 	.word	0x20002f5a
 8004d24:	20000111 	.word	0x20000111
 8004d28:	2000010f 	.word	0x2000010f
 8004d2c:	08017e58 	.word	0x08017e58
 8004d30:	08017fe0 	.word	0x08017fe0
 8004d34:	20001f1f 	.word	0x20001f1f
 8004d38:	08017ff4 	.word	0x08017ff4
 8004d3c:	20000110 	.word	0x20000110
 8004d40:	08018018 	.word	0x08018018
    				else
    					sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 8004d44:	4b72      	ldr	r3, [pc, #456]	; (8004f10 <StartTask+0xe24>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	4b72      	ldr	r3, [pc, #456]	; (8004f14 <StartTask+0xe28>)
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004d52:	4971      	ldr	r1, [pc, #452]	; (8004f18 <StartTask+0xe2c>)
 8004d54:	f00f f9e6 	bl	8014124 <siprintf>
    				showLine(st, lin4, &lim, true);
 8004d58:	f107 0218 	add.w	r2, r7, #24
 8004d5c:	f8b7 10d0 	ldrh.w	r1, [r7, #208]	; 0xd0
 8004d60:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004d64:	2301      	movs	r3, #1
 8004d66:	f7fe f84d 	bl	8002e04 <showLine>
    				Report(1, "[que:%u] set Mute to %u\r\n", cntEvt, (~noMute) & 1);
 8004d6a:	4b6c      	ldr	r3, [pc, #432]	; (8004f1c <StartTask+0xe30>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	461a      	mov	r2, r3
 8004d72:	4b6b      	ldr	r3, [pc, #428]	; (8004f20 <StartTask+0xe34>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	bf0c      	ite	eq
 8004d7e:	2301      	moveq	r3, #1
 8004d80:	2300      	movne	r3, #0
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	4967      	ldr	r1, [pc, #412]	; (8004f24 <StartTask+0xe38>)
 8004d86:	2001      	movs	r0, #1
 8004d88:	f7fe fa4e 	bl	8003228 <Report>
    			break;
 8004d8c:	e3ef      	b.n	800556e <StartTask+0x1482>
    			case evt_Freq:
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 8004d8e:	4b66      	ldr	r3, [pc, #408]	; (8004f28 <StartTask+0xe3c>)
 8004d90:	ed93 7a00 	vldr	s14, [r3]
 8004d94:	4b65      	ldr	r3, [pc, #404]	; (8004f2c <StartTask+0xe40>)
 8004d96:	edd3 7a00 	vldr	s15, [r3]
 8004d9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da2:	da00      	bge.n	8004da6 <StartTask+0xcba>
    						sprintf(sta, "%s", nameStation(Freq));
    						showLine(sta, lin6, &lia, true);
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
    					}
    				}
				break;
 8004da4:	e3ac      	b.n	8005500 <StartTask+0x1414>
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 8004da6:	4b60      	ldr	r3, [pc, #384]	; (8004f28 <StartTask+0xe3c>)
 8004da8:	ed93 7a00 	vldr	s14, [r3]
 8004dac:	4b60      	ldr	r3, [pc, #384]	; (8004f30 <StartTask+0xe44>)
 8004dae:	edd3 7a00 	vldr	s15, [r3]
 8004db2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dba:	d900      	bls.n	8004dbe <StartTask+0xcd2>
				break;
 8004dbc:	e3a0      	b.n	8005500 <StartTask+0x1414>
    					if (newFreq != Freq) {
 8004dbe:	4b5a      	ldr	r3, [pc, #360]	; (8004f28 <StartTask+0xe3c>)
 8004dc0:	ed93 7a00 	vldr	s14, [r3]
 8004dc4:	4b5b      	ldr	r3, [pc, #364]	; (8004f34 <StartTask+0xe48>)
 8004dc6:	edd3 7a00 	vldr	s15, [r3]
 8004dca:	eeb4 7a67 	vcmp.f32	s14, s15
 8004dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd2:	f000 8395 	beq.w	8005500 <StartTask+0x1414>
    						Freq = newFreq;
 8004dd6:	4b54      	ldr	r3, [pc, #336]	; (8004f28 <StartTask+0xe3c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a56      	ldr	r2, [pc, #344]	; (8004f34 <StartTask+0xe48>)
 8004ddc:	6013      	str	r3, [r2, #0]
    						uint16_t fr = (uint16_t)(Freq * 10);
 8004dde:	4b55      	ldr	r3, [pc, #340]	; (8004f34 <StartTask+0xe48>)
 8004de0:	edd3 7a00 	vldr	s15, [r3]
 8004de4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004de8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004df0:	ee17 3a90 	vmov	r3, s15
 8004df4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
    						rda5807_SetFreq_In100Khz(fr);
 8004df8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f001 f8cd 	bl	8005f9c <rda5807_SetFreq_In100Khz>
    						stereo = rda5807_Get_StereoMonoFlag();
 8004e02:	f001 f9c1 	bl	8006188 <rda5807_Get_StereoMonoFlag>
 8004e06:	4603      	mov	r3, r0
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4b4b      	ldr	r3, [pc, #300]	; (8004f38 <StartTask+0xe4c>)
 8004e0c:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 8004e0e:	f001 f9d3 	bl	80061b8 <rda5807_Get_Channel>
 8004e12:	4603      	mov	r3, r0
 8004e14:	461a      	mov	r2, r3
 8004e16:	4b49      	ldr	r3, [pc, #292]	; (8004f3c <StartTask+0xe50>)
 8004e18:	801a      	strh	r2, [r3, #0]
    						if (stereo)
 8004e1a:	4b47      	ldr	r3, [pc, #284]	; (8004f38 <StartTask+0xe4c>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d012      	beq.n	8004e48 <StartTask+0xd5c>
    							sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 8004e22:	4b47      	ldr	r3, [pc, #284]	; (8004f40 <StartTask+0xe54>)
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	461c      	mov	r4, r3
 8004e28:	4b42      	ldr	r3, [pc, #264]	; (8004f34 <StartTask+0xe48>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7fb fb8b 	bl	8000548 <__aeabi_f2d>
 8004e32:	4602      	mov	r2, r0
 8004e34:	460b      	mov	r3, r1
 8004e36:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004e3a:	e9cd 2300 	strd	r2, r3, [sp]
 8004e3e:	4622      	mov	r2, r4
 8004e40:	4940      	ldr	r1, [pc, #256]	; (8004f44 <StartTask+0xe58>)
 8004e42:	f00f f96f 	bl	8014124 <siprintf>
 8004e46:	e011      	b.n	8004e6c <StartTask+0xd80>
    							sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8004e48:	4b3d      	ldr	r3, [pc, #244]	; (8004f40 <StartTask+0xe54>)
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	461c      	mov	r4, r3
 8004e4e:	4b39      	ldr	r3, [pc, #228]	; (8004f34 <StartTask+0xe48>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fb fb78 	bl	8000548 <__aeabi_f2d>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004e60:	e9cd 2300 	strd	r2, r3, [sp]
 8004e64:	4622      	mov	r2, r4
 8004e66:	4938      	ldr	r1, [pc, #224]	; (8004f48 <StartTask+0xe5c>)
 8004e68:	f00f f95c 	bl	8014124 <siprintf>
    						showLine(st, lin5, &lil, false);
 8004e6c:	f107 0214 	add.w	r2, r7, #20
 8004e70:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 8004e74:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f7fd ffc3 	bl	8002e04 <showLine>
    						sprintf(sta, "%s", nameStation(Freq));
 8004e7e:	4b2d      	ldr	r3, [pc, #180]	; (8004f34 <StartTask+0xe48>)
 8004e80:	edd3 7a00 	vldr	s15, [r3]
 8004e84:	eeb0 0a67 	vmov.f32	s0, s15
 8004e88:	f7fd fe92 	bl	8002bb0 <nameStation>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e92:	492e      	ldr	r1, [pc, #184]	; (8004f4c <StartTask+0xe60>)
 8004e94:	4618      	mov	r0, r3
 8004e96:	f00f f945 	bl	8014124 <siprintf>
    						showLine(sta, lin6, &lia, true);
 8004e9a:	f107 0210 	add.w	r2, r7, #16
 8004e9e:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	; 0xcc
 8004ea2:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f7fd ffac 	bl	8002e04 <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 8004eac:	4b1b      	ldr	r3, [pc, #108]	; (8004f1c <StartTask+0xe30>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	461c      	mov	r4, r3
 8004eb4:	4b1f      	ldr	r3, [pc, #124]	; (8004f34 <StartTask+0xe48>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fb fb45 	bl	8000548 <__aeabi_f2d>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	491e      	ldr	r1, [pc, #120]	; (8004f3c <StartTask+0xe50>)
 8004ec4:	8809      	ldrh	r1, [r1, #0]
 8004ec6:	9103      	str	r1, [sp, #12]
 8004ec8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004ecc:	9102      	str	r1, [sp, #8]
 8004ece:	e9cd 2300 	strd	r2, r3, [sp]
 8004ed2:	4622      	mov	r2, r4
 8004ed4:	491e      	ldr	r1, [pc, #120]	; (8004f50 <StartTask+0xe64>)
 8004ed6:	2001      	movs	r0, #1
 8004ed8:	f7fe f9a6 	bl	8003228 <Report>
				break;
 8004edc:	e310      	b.n	8005500 <StartTask+0x1414>
    			case evt_Scan:
    				if (!scan) {
 8004ede:	4b1d      	ldr	r3, [pc, #116]	; (8004f54 <StartTask+0xe68>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f040 8341 	bne.w	800556c <StartTask+0x1480>
    					scan = 1;
 8004eea:	4b1a      	ldr	r3, [pc, #104]	; (8004f54 <StartTask+0xe68>)
 8004eec:	2201      	movs	r2, #1
 8004eee:	701a      	strb	r2, [r3, #0]
    					rda5807_StartSeek(seek_up);
 8004ef0:	4b19      	ldr	r3, [pc, #100]	; (8004f58 <StartTask+0xe6c>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f001 f90a 	bl	8006110 <rda5807_StartSeek>
    				}
    			break;
 8004efc:	e336      	b.n	800556c <StartTask+0x1480>
    			case evt_Ver:
    				Report(1, "Ver.%s\r\n", ver);
 8004efe:	4b17      	ldr	r3, [pc, #92]	; (8004f5c <StartTask+0xe70>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	4916      	ldr	r1, [pc, #88]	; (8004f60 <StartTask+0xe74>)
 8004f06:	2001      	movs	r0, #1
 8004f08:	f7fe f98e 	bl	8003228 <Report>
    			break;
 8004f0c:	e32f      	b.n	800556e <StartTask+0x1482>
 8004f0e:	bf00      	nop
 8004f10:	20002f5a 	.word	0x20002f5a
 8004f14:	2000010f 	.word	0x2000010f
 8004f18:	08017fe0 	.word	0x08017fe0
 8004f1c:	20001f1f 	.word	0x20001f1f
 8004f20:	20000111 	.word	0x20000111
 8004f24:	08018038 	.word	0x08018038
 8004f28:	20000108 	.word	0x20000108
 8004f2c:	20002f4c 	.word	0x20002f4c
 8004f30:	20002f50 	.word	0x20002f50
 8004f34:	20000104 	.word	0x20000104
 8004f38:	20002f5c 	.word	0x20002f5c
 8004f3c:	20002f54 	.word	0x20002f54
 8004f40:	20002f56 	.word	0x20002f56
 8004f44:	08017e68 	.word	0x08017e68
 8004f48:	08017e7c 	.word	0x08017e7c
 8004f4c:	08017c74 	.word	0x08017c74
 8004f50:	08018054 	.word	0x08018054
 8004f54:	20002f59 	.word	0x20002f59
 8004f58:	2000010e 	.word	0x2000010e
 8004f5c:	20000004 	.word	0x20000004
 8004f60:	08018084 	.word	0x08018084
    			case evt_Sec:
    			{
	#ifdef SET_DISPLAY
    				dl = sec2str(st);
 8004f64:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fe f8c3 	bl	80030f4 <sec2str>
 8004f6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    				x = ((SCREEN_WIDTH - (lfnt->FontWidth * dl)) >> 1) & 0x7f;
 8004f72:	4bab      	ldr	r3, [pc, #684]	; (8005220 <StartTask+0x1134>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f7e:	fb02 f303 	mul.w	r3, r2, r3
 8004f82:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004f86:	105b      	asrs	r3, r3, #1
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f8e:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
    				ST7565_Print(x, lin1, st, lfnt, 0, PIX_OFF);
 8004f92:	f9b7 00ca 	ldrsh.w	r0, [r7, #202]	; 0xca
 8004f96:	f9b7 10d6 	ldrsh.w	r1, [r7, #214]	; 0xd6
 8004f9a:	4ba1      	ldr	r3, [pc, #644]	; (8005220 <StartTask+0x1134>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004fa2:	2400      	movs	r4, #0
 8004fa4:	9401      	str	r4, [sp, #4]
 8004fa6:	2400      	movs	r4, #0
 8004fa8:	9400      	str	r4, [sp, #0]
 8004faa:	f7fc fce1 	bl	8001970 <ST7565_Print>
	#endif
    				//
    				if (scan) {
 8004fae:	4b9d      	ldr	r3, [pc, #628]	; (8005224 <StartTask+0x1138>)
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d050      	beq.n	800505a <StartTask+0xf6e>
    					if (rda5807_Get_SeekTuneReadyFlag()) {
 8004fb8:	f001 f8d4 	bl	8006164 <rda5807_Get_SeekTuneReadyFlag>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d04b      	beq.n	800505a <StartTask+0xf6e>
    						Freq = (float)rda5807_GetFreq_In100Khz();
 8004fc2:	f001 f865 	bl	8006090 <rda5807_GetFreq_In100Khz>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	ee07 3a90 	vmov	s15, r3
 8004fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd0:	4b95      	ldr	r3, [pc, #596]	; (8005228 <StartTask+0x113c>)
 8004fd2:	edc3 7a00 	vstr	s15, [r3]
    						Freq /= 10;
 8004fd6:	4b94      	ldr	r3, [pc, #592]	; (8005228 <StartTask+0x113c>)
 8004fd8:	ed93 7a00 	vldr	s14, [r3]
 8004fdc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004fe0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fe4:	4b90      	ldr	r3, [pc, #576]	; (8005228 <StartTask+0x113c>)
 8004fe6:	edc3 7a00 	vstr	s15, [r3]
    						scan = 0;
 8004fea:	4b8e      	ldr	r3, [pc, #568]	; (8005224 <StartTask+0x1138>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 8004ff0:	f001 f8e2 	bl	80061b8 <rda5807_Get_Channel>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	4b8c      	ldr	r3, [pc, #560]	; (800522c <StartTask+0x1140>)
 8004ffa:	801a      	strh	r2, [r3, #0]
    						sprintf(sta, "%s", nameStation(Freq));
 8004ffc:	4b8a      	ldr	r3, [pc, #552]	; (8005228 <StartTask+0x113c>)
 8004ffe:	edd3 7a00 	vldr	s15, [r3]
 8005002:	eeb0 0a67 	vmov.f32	s0, s15
 8005006:	f7fd fdd3 	bl	8002bb0 <nameStation>
 800500a:	4602      	mov	r2, r0
 800500c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005010:	4987      	ldr	r1, [pc, #540]	; (8005230 <StartTask+0x1144>)
 8005012:	4618      	mov	r0, r3
 8005014:	f00f f886 	bl	8014124 <siprintf>
    						showLine(sta, lin6, &lia, true);
 8005018:	f107 0210 	add.w	r2, r7, #16
 800501c:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	; 0xcc
 8005020:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8005024:	2301      	movs	r3, #1
 8005026:	f7fd feed 	bl	8002e04 <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 800502a:	4b82      	ldr	r3, [pc, #520]	; (8005234 <StartTask+0x1148>)
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	b2db      	uxtb	r3, r3
 8005030:	461c      	mov	r4, r3
 8005032:	4b7d      	ldr	r3, [pc, #500]	; (8005228 <StartTask+0x113c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f7fb fa86 	bl	8000548 <__aeabi_f2d>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	497a      	ldr	r1, [pc, #488]	; (800522c <StartTask+0x1140>)
 8005042:	8809      	ldrh	r1, [r1, #0]
 8005044:	9103      	str	r1, [sp, #12]
 8005046:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800504a:	9102      	str	r1, [sp, #8]
 800504c:	e9cd 2300 	strd	r2, r3, [sp]
 8005050:	4622      	mov	r2, r4
 8005052:	4979      	ldr	r1, [pc, #484]	; (8005238 <StartTask+0x114c>)
 8005054:	2001      	movs	r0, #1
 8005056:	f7fe f8e7 	bl	8003228 <Report>
    					}
    				}
    				//
    				uint16_t rssi = rda5807_rssi();
 800505a:	f000 fd59 	bl	8005b10 <rda5807_rssi>
 800505e:	4603      	mov	r3, r0
 8005060:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
    				if (rssi != RSSI) {
 8005064:	4b75      	ldr	r3, [pc, #468]	; (800523c <StartTask+0x1150>)
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 800506c:	429a      	cmp	r2, r3
 800506e:	d03b      	beq.n	80050e8 <StartTask+0xffc>
    					RSSI = rssi;
 8005070:	4a72      	ldr	r2, [pc, #456]	; (800523c <StartTask+0x1150>)
 8005072:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8005076:	8013      	strh	r3, [r2, #0]
    					stereo = rda5807_Get_StereoMonoFlag();
 8005078:	f001 f886 	bl	8006188 <rda5807_Get_StereoMonoFlag>
 800507c:	4603      	mov	r3, r0
 800507e:	461a      	mov	r2, r3
 8005080:	4b6f      	ldr	r3, [pc, #444]	; (8005240 <StartTask+0x1154>)
 8005082:	701a      	strb	r2, [r3, #0]
	#ifdef SET_DISPLAY
    					if (stereo)
 8005084:	4b6e      	ldr	r3, [pc, #440]	; (8005240 <StartTask+0x1154>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d012      	beq.n	80050b2 <StartTask+0xfc6>
    						sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 800508c:	4b6b      	ldr	r3, [pc, #428]	; (800523c <StartTask+0x1150>)
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	461c      	mov	r4, r3
 8005092:	4b65      	ldr	r3, [pc, #404]	; (8005228 <StartTask+0x113c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f7fb fa56 	bl	8000548 <__aeabi_f2d>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80050a4:	e9cd 2300 	strd	r2, r3, [sp]
 80050a8:	4622      	mov	r2, r4
 80050aa:	4966      	ldr	r1, [pc, #408]	; (8005244 <StartTask+0x1158>)
 80050ac:	f00f f83a 	bl	8014124 <siprintf>
 80050b0:	e011      	b.n	80050d6 <StartTask+0xfea>
    					else
    						sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 80050b2:	4b62      	ldr	r3, [pc, #392]	; (800523c <StartTask+0x1150>)
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	461c      	mov	r4, r3
 80050b8:	4b5b      	ldr	r3, [pc, #364]	; (8005228 <StartTask+0x113c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7fb fa43 	bl	8000548 <__aeabi_f2d>
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80050ca:	e9cd 2300 	strd	r2, r3, [sp]
 80050ce:	4622      	mov	r2, r4
 80050d0:	495d      	ldr	r1, [pc, #372]	; (8005248 <StartTask+0x115c>)
 80050d2:	f00f f827 	bl	8014124 <siprintf>
    					showLine(st, lin5, &lil, false);
 80050d6:	f107 0214 	add.w	r2, r7, #20
 80050da:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 80050de:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80050e2:	2300      	movs	r3, #0
 80050e4:	f7fd fe8e 	bl	8002e04 <showLine>
    					//showLine(sta, lin6, &lia, true);
    					////Report(1, "ChipID:0x%x Chan:%u Freq:%.2f RSSI:%u\r\n", rdaID, Chan, Freq, RSSI);
	#endif
    				}
    				//
    				if (devError) {
 80050e8:	4b58      	ldr	r3, [pc, #352]	; (800524c <StartTask+0x1160>)
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00d      	beq.n	800510c <StartTask+0x1020>
    					dl = sprintf(tmp, "devError : 0x%04X", devError);
 80050f0:	4b56      	ldr	r3, [pc, #344]	; (800524c <StartTask+0x1160>)
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	4956      	ldr	r1, [pc, #344]	; (8005250 <StartTask+0x1164>)
 80050f8:	4856      	ldr	r0, [pc, #344]	; (8005254 <StartTask+0x1168>)
 80050fa:	f00f f813 	bl	8014124 <siprintf>
 80050fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    					lastErr = devError;
 8005102:	4b52      	ldr	r3, [pc, #328]	; (800524c <StartTask+0x1160>)
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 800510a:	e013      	b.n	8005134 <StartTask+0x1048>
    				} else {
    					if (lastErr) {
 800510c:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00c      	beq.n	800512e <StartTask+0x1042>
    						dl = sprintf(tmp, "Ver.%s", ver);
 8005114:	4b50      	ldr	r3, [pc, #320]	; (8005258 <StartTask+0x116c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	461a      	mov	r2, r3
 800511a:	4950      	ldr	r1, [pc, #320]	; (800525c <StartTask+0x1170>)
 800511c:	484d      	ldr	r0, [pc, #308]	; (8005254 <StartTask+0x1168>)
 800511e:	f00f f801 	bl	8014124 <siprintf>
 8005122:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    						lastErr = devOK;
 8005126:	2300      	movs	r3, #0
 8005128:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 800512c:	e002      	b.n	8005134 <StartTask+0x1048>
    					} else dl = 0;
 800512e:	2300      	movs	r3, #0
 8005130:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    				}
	#ifdef SET_DISPLAY
    				if (dl) {
 8005134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005138:	2b00      	cmp	r3, #0
 800513a:	d036      	beq.n	80051aa <StartTask+0x10be>
    					ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - lfnt->FontHeight, SCREEN_WIDTH - 1, lfnt->FontHeight, PIX_OFF);
 800513c:	4b38      	ldr	r3, [pc, #224]	; (8005220 <StartTask+0x1134>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	785b      	ldrb	r3, [r3, #1]
 8005142:	b29b      	uxth	r3, r3
 8005144:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005148:	b29b      	uxth	r3, r3
 800514a:	b219      	sxth	r1, r3
 800514c:	4b34      	ldr	r3, [pc, #208]	; (8005220 <StartTask+0x1134>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	785b      	ldrb	r3, [r3, #1]
 8005152:	b21b      	sxth	r3, r3
 8005154:	2200      	movs	r2, #0
 8005156:	9200      	str	r2, [sp, #0]
 8005158:	227f      	movs	r2, #127	; 0x7f
 800515a:	2000      	movs	r0, #0
 800515c:	f7fc fe61 	bl	8001e22 <ST7565_DrawFilledRectangle>
    					x = ((SCREEN_WIDTH - (lfnt->FontWidth * dl)) >> 1) & 0x7f;
 8005160:	4b2f      	ldr	r3, [pc, #188]	; (8005220 <StartTask+0x1134>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800516c:	fb02 f303 	mul.w	r3, r2, r3
 8005170:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8005174:	105b      	asrs	r3, r3, #1
 8005176:	b29b      	uxth	r3, r3
 8005178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800517c:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
    					ST7565_Print(x, SCREEN_HEIGHT - lfnt->FontHeight, tmp, lfnt, 1, PIX_ON);
 8005180:	f9b7 00ca 	ldrsh.w	r0, [r7, #202]	; 0xca
 8005184:	4b26      	ldr	r3, [pc, #152]	; (8005220 <StartTask+0x1134>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	785b      	ldrb	r3, [r3, #1]
 800518a:	b29b      	uxth	r3, r3
 800518c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005190:	b29b      	uxth	r3, r3
 8005192:	b219      	sxth	r1, r3
 8005194:	4b22      	ldr	r3, [pc, #136]	; (8005220 <StartTask+0x1134>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2201      	movs	r2, #1
 800519a:	9201      	str	r2, [sp, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	9200      	str	r2, [sp, #0]
 80051a0:	4a2c      	ldr	r2, [pc, #176]	; (8005254 <StartTask+0x1168>)
 80051a2:	f7fc fbe5 	bl	8001970 <ST7565_Print>
    					ST7565_Update();
 80051a6:	f7fc fa33 	bl	8001610 <ST7565_Update>
    				}
    				//
    				ST7565_Update();
 80051aa:	f7fc fa31 	bl	8001610 <ST7565_Update>
	#endif
    			}
    			break;
 80051ae:	e1de      	b.n	800556e <StartTask+0x1482>
    			case evt_Evt:
    				Report(1, "evtQueue counter : %u\r\n", getQueCount(evtQueHandle));
 80051b0:	4b2b      	ldr	r3, [pc, #172]	; (8005260 <StartTask+0x1174>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fd fcef 	bl	8002b98 <getQueCount>
 80051ba:	4603      	mov	r3, r0
 80051bc:	461a      	mov	r2, r3
 80051be:	4929      	ldr	r1, [pc, #164]	; (8005264 <StartTask+0x1178>)
 80051c0:	2001      	movs	r0, #1
 80051c2:	f7fe f831 	bl	8003228 <Report>
    			break;
 80051c6:	e1d2      	b.n	800556e <StartTask+0x1482>
    			case evt_Ack:
    				Report(1, "ackQueue counter : %u\r\n", getQueCount(ackQueHandle));
 80051c8:	4b27      	ldr	r3, [pc, #156]	; (8005268 <StartTask+0x117c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7fd fce3 	bl	8002b98 <getQueCount>
 80051d2:	4603      	mov	r3, r0
 80051d4:	461a      	mov	r2, r3
 80051d6:	4925      	ldr	r1, [pc, #148]	; (800526c <StartTask+0x1180>)
 80051d8:	2001      	movs	r0, #1
 80051da:	f7fe f825 	bl	8003228 <Report>
    			break;
 80051de:	e1c6      	b.n	800556e <StartTask+0x1482>
    			case evt_Cmd:
    				Report(1, "cmdQueue counter : %u\r\n", getQueCount(cmdQueHandle));
 80051e0:	4b23      	ldr	r3, [pc, #140]	; (8005270 <StartTask+0x1184>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fd fcd7 	bl	8002b98 <getQueCount>
 80051ea:	4603      	mov	r3, r0
 80051ec:	461a      	mov	r2, r3
 80051ee:	4921      	ldr	r1, [pc, #132]	; (8005274 <StartTask+0x1188>)
 80051f0:	2001      	movs	r0, #1
 80051f2:	f7fe f819 	bl	8003228 <Report>
    			break;
 80051f6:	e1ba      	b.n	800556e <StartTask+0x1482>
    			case evt_Clr:
    				devError = devOK;
 80051f8:	4b14      	ldr	r3, [pc, #80]	; (800524c <StartTask+0x1160>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	801a      	strh	r2, [r3, #0]
    				Report(1, "[que:%u] Clear all Errors...\r\n", cntEvt);
 80051fe:	4b0d      	ldr	r3, [pc, #52]	; (8005234 <StartTask+0x1148>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	461a      	mov	r2, r3
 8005206:	491c      	ldr	r1, [pc, #112]	; (8005278 <StartTask+0x118c>)
 8005208:	2001      	movs	r0, #1
 800520a:	f7fe f80d 	bl	8003228 <Report>
    			break;
 800520e:	e1ae      	b.n	800556e <StartTask+0x1482>
    			case evt_Help:
    				stx[0] = '\0';
 8005210:	4b1a      	ldr	r3, [pc, #104]	; (800527c <StartTask+0x1190>)
 8005212:	2200      	movs	r2, #0
 8005214:	701a      	strb	r2, [r3, #0]
    				for (int8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t%s\r\n", s_cmds[i]);
 8005216:	2300      	movs	r3, #0
 8005218:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 800521c:	e046      	b.n	80052ac <StartTask+0x11c0>
 800521e:	bf00      	nop
 8005220:	20002f48 	.word	0x20002f48
 8005224:	20002f59 	.word	0x20002f59
 8005228:	20000104 	.word	0x20000104
 800522c:	20002f54 	.word	0x20002f54
 8005230:	08017c74 	.word	0x08017c74
 8005234:	20001f1f 	.word	0x20001f1f
 8005238:	08018054 	.word	0x08018054
 800523c:	20002f56 	.word	0x20002f56
 8005240:	20002f5c 	.word	0x20002f5c
 8005244:	08017e68 	.word	0x08017e68
 8005248:	08017e7c 	.word	0x08017e7c
 800524c:	20001b08 	.word	0x20001b08
 8005250:	08018090 	.word	0x08018090
 8005254:	20001288 	.word	0x20001288
 8005258:	20000004 	.word	0x20000004
 800525c:	08017e30 	.word	0x08017e30
 8005260:	20000e74 	.word	0x20000e74
 8005264:	080180a4 	.word	0x080180a4
 8005268:	20000e7c 	.word	0x20000e7c
 800526c:	080180bc 	.word	0x080180bc
 8005270:	20000e78 	.word	0x20000e78
 8005274:	080180d4 	.word	0x080180d4
 8005278:	080180ec 	.word	0x080180ec
 800527c:	20000e88 	.word	0x20000e88
 8005280:	48a0      	ldr	r0, [pc, #640]	; (8005504 <StartTask+0x1418>)
 8005282:	f7fa ffa5 	bl	80001d0 <strlen>
 8005286:	4603      	mov	r3, r0
 8005288:	4a9e      	ldr	r2, [pc, #632]	; (8005504 <StartTask+0x1418>)
 800528a:	1898      	adds	r0, r3, r2
 800528c:	f997 30f2 	ldrsb.w	r3, [r7, #242]	; 0xf2
 8005290:	4a9d      	ldr	r2, [pc, #628]	; (8005508 <StartTask+0x141c>)
 8005292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005296:	461a      	mov	r2, r3
 8005298:	499c      	ldr	r1, [pc, #624]	; (800550c <StartTask+0x1420>)
 800529a:	f00e ff43 	bl	8014124 <siprintf>
 800529e:	f997 30f2 	ldrsb.w	r3, [r7, #242]	; 0xf2
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	3301      	adds	r3, #1
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 80052ac:	f997 30f2 	ldrsb.w	r3, [r7, #242]	; 0xf2
 80052b0:	2b19      	cmp	r3, #25
 80052b2:	dde5      	ble.n	8005280 <StartTask+0x1194>
    				Report(0, "%s", stx);
 80052b4:	4a93      	ldr	r2, [pc, #588]	; (8005504 <StartTask+0x1418>)
 80052b6:	4996      	ldr	r1, [pc, #600]	; (8005510 <StartTask+0x1424>)
 80052b8:	2000      	movs	r0, #0
 80052ba:	f7fd ffb5 	bl	8003228 <Report>
    			break;
 80052be:	e156      	b.n	800556e <StartTask+0x1482>
    			case evt_Restart:
    				restart = 1;
 80052c0:	4b94      	ldr	r3, [pc, #592]	; (8005514 <StartTask+0x1428>)
 80052c2:	2201      	movs	r2, #1
 80052c4:	701a      	strb	r2, [r3, #0]
    				Report(1, "[que:%u] Restart system...\r\n", cntEvt);
 80052c6:	4b94      	ldr	r3, [pc, #592]	; (8005518 <StartTask+0x142c>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	461a      	mov	r2, r3
 80052ce:	4993      	ldr	r1, [pc, #588]	; (800551c <StartTask+0x1430>)
 80052d0:	2001      	movs	r0, #1
 80052d2:	f7fd ffa9 	bl	8003228 <Report>
    			break;
 80052d6:	e14a      	b.n	800556e <StartTask+0x1482>
    			case evt_Epoch:
    				set_Date(epoch);
 80052d8:	4b91      	ldr	r3, [pc, #580]	; (8005520 <StartTask+0x1434>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fd fea9 	bl	8003034 <set_Date>
    				Report(1, "[que:%u] Set Unix TimeStamp to %lu\r\n", cntEvt, epoch);
 80052e2:	4b8d      	ldr	r3, [pc, #564]	; (8005518 <StartTask+0x142c>)
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	4b8d      	ldr	r3, [pc, #564]	; (8005520 <StartTask+0x1434>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	498d      	ldr	r1, [pc, #564]	; (8005524 <StartTask+0x1438>)
 80052f0:	2001      	movs	r0, #1
 80052f2:	f7fd ff99 	bl	8003228 <Report>
    			break;
 80052f6:	e13a      	b.n	800556e <StartTask+0x1482>
    			case evt_Err:
    				Report(1, "[que:%u] Error input from uart\r\n", cntEvt);
 80052f8:	4b87      	ldr	r3, [pc, #540]	; (8005518 <StartTask+0x142c>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	461a      	mov	r2, r3
 8005300:	4989      	ldr	r1, [pc, #548]	; (8005528 <StartTask+0x143c>)
 8005302:	2001      	movs	r0, #1
 8005304:	f7fd ff90 	bl	8003228 <Report>
    			break;
 8005308:	e131      	b.n	800556e <StartTask+0x1482>
	#ifdef SET_W25FLASH
    			case evt_sRead:
    			case evt_sNext:
    			{
    				uint32_t w25_adr = (adr_sector * W25qxx_getSectorSize()) + offset_sector;
 800530a:	f001 ffbb 	bl	8007284 <W25qxx_getSectorSize>
 800530e:	4603      	mov	r3, r0
 8005310:	4a86      	ldr	r2, [pc, #536]	; (800552c <StartTask+0x1440>)
 8005312:	6812      	ldr	r2, [r2, #0]
 8005314:	fb02 f303 	mul.w	r3, r2, r3
 8005318:	4a85      	ldr	r2, [pc, #532]	; (8005530 <StartTask+0x1444>)
 800531a:	6812      	ldr	r2, [r2, #0]
 800531c:	4413      	add	r3, r2
 800531e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    				uint32_t dlin = list_sector;
 8005322:	4b84      	ldr	r3, [pc, #528]	; (8005534 <StartTask+0x1448>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    				int step = 32;
 800532a:	2320      	movs	r3, #32
 800532c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    				uint32_t ind = 0;
 8005330:	2300      	movs	r3, #0
 8005332:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    				W25qxx_ReadSector(fs_work, adr_sector, offset_sector, dlin);
 8005336:	4b7d      	ldr	r3, [pc, #500]	; (800552c <StartTask+0x1440>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4619      	mov	r1, r3
 800533c:	4b7c      	ldr	r3, [pc, #496]	; (8005530 <StartTask+0x1444>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	461a      	mov	r2, r3
 8005342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005346:	487c      	ldr	r0, [pc, #496]	; (8005538 <StartTask+0x144c>)
 8005348:	f002 faae 	bl	80078a8 <W25qxx_ReadSector>
    				Report(0, "Read sector:%d offset:%d len:%u\r\n", adr_sector, offset_sector, dlin);
 800534c:	4b77      	ldr	r3, [pc, #476]	; (800552c <StartTask+0x1440>)
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	4b77      	ldr	r3, [pc, #476]	; (8005530 <StartTask+0x1444>)
 8005352:	6819      	ldr	r1, [r3, #0]
 8005354:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	460b      	mov	r3, r1
 800535c:	4977      	ldr	r1, [pc, #476]	; (800553c <StartTask+0x1450>)
 800535e:	2000      	movs	r0, #0
 8005360:	f7fd ff62 	bl	8003228 <Report>
    				while (ind < dlin) {
 8005364:	e05b      	b.n	800541e <StartTask+0x1332>
    					strf[0] = '\0';
 8005366:	4b76      	ldr	r3, [pc, #472]	; (8005540 <StartTask+0x1454>)
 8005368:	2200      	movs	r2, #0
 800536a:	701a      	strb	r2, [r3, #0]
    					while (1) {
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 800536c:	4874      	ldr	r0, [pc, #464]	; (8005540 <StartTask+0x1454>)
 800536e:	f7fa ff2f 	bl	80001d0 <strlen>
 8005372:	4603      	mov	r3, r0
 8005374:	4a72      	ldr	r2, [pc, #456]	; (8005540 <StartTask+0x1454>)
 8005376:	4413      	add	r3, r2
 8005378:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800537c:	4971      	ldr	r1, [pc, #452]	; (8005544 <StartTask+0x1458>)
 800537e:	4618      	mov	r0, r3
 8005380:	f00e fed0 	bl	8014124 <siprintf>
    						for (int i = 0; i < step; i++) sprintf(strf+strlen(strf), " %02X", fs_work[i + ind]);
 8005384:	2300      	movs	r3, #0
 8005386:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800538a:	e015      	b.n	80053b8 <StartTask+0x12cc>
 800538c:	486c      	ldr	r0, [pc, #432]	; (8005540 <StartTask+0x1454>)
 800538e:	f7fa ff1f 	bl	80001d0 <strlen>
 8005392:	4603      	mov	r3, r0
 8005394:	4a6a      	ldr	r2, [pc, #424]	; (8005540 <StartTask+0x1454>)
 8005396:	1898      	adds	r0, r3, r2
 8005398:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800539c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80053a0:	4413      	add	r3, r2
 80053a2:	4a65      	ldr	r2, [pc, #404]	; (8005538 <StartTask+0x144c>)
 80053a4:	5cd3      	ldrb	r3, [r2, r3]
 80053a6:	461a      	mov	r2, r3
 80053a8:	4967      	ldr	r1, [pc, #412]	; (8005548 <StartTask+0x145c>)
 80053aa:	f00e febb 	bl	8014124 <siprintf>
 80053ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b2:	3301      	adds	r3, #1
 80053b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053b8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80053bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053c0:	429a      	cmp	r2, r3
 80053c2:	dbe3      	blt.n	800538c <StartTask+0x12a0>
    						strcat(strf, "\r\n");
 80053c4:	485e      	ldr	r0, [pc, #376]	; (8005540 <StartTask+0x1454>)
 80053c6:	f7fa ff03 	bl	80001d0 <strlen>
 80053ca:	4603      	mov	r3, r0
 80053cc:	461a      	mov	r2, r3
 80053ce:	4b5c      	ldr	r3, [pc, #368]	; (8005540 <StartTask+0x1454>)
 80053d0:	4413      	add	r3, r2
 80053d2:	4a5e      	ldr	r2, [pc, #376]	; (800554c <StartTask+0x1460>)
 80053d4:	8811      	ldrh	r1, [r2, #0]
 80053d6:	7892      	ldrb	r2, [r2, #2]
 80053d8:	8019      	strh	r1, [r3, #0]
 80053da:	709a      	strb	r2, [r3, #2]
    						w25_adr += step;
 80053dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053e0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80053e4:	4413      	add	r3, r2
 80053e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    						ind += step;
 80053ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053ee:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80053f2:	4413      	add	r3, r2
 80053f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    						if (!(ind % W25qxx_getPageSize())) break;
 80053f8:	f001 ff50 	bl	800729c <W25qxx_getPageSize>
 80053fc:	4602      	mov	r2, r0
 80053fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005402:	fbb3 f1f2 	udiv	r1, r3, r2
 8005406:	fb01 f202 	mul.w	r2, r1, r2
 800540a:	1a9b      	subs	r3, r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d000      	beq.n	8005412 <StartTask+0x1326>
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 8005410:	e7ac      	b.n	800536c <StartTask+0x1280>
    						if (!(ind % W25qxx_getPageSize())) break;
 8005412:	bf00      	nop
    					}
    					Report(0, "%s", strf);
 8005414:	4a4a      	ldr	r2, [pc, #296]	; (8005540 <StartTask+0x1454>)
 8005416:	493e      	ldr	r1, [pc, #248]	; (8005510 <StartTask+0x1424>)
 8005418:	2000      	movs	r0, #0
 800541a:	f7fd ff05 	bl	8003228 <Report>
    				while (ind < dlin) {
 800541e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005422:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005426:	429a      	cmp	r2, r3
 8005428:	d39d      	bcc.n	8005366 <StartTask+0x127a>
    				}
    			}
    			break;
 800542a:	e0a0      	b.n	800556e <StartTask+0x1482>
    			case evt_sWrite:
    			{
    				uint32_t ss = W25qxx_getSectorSize();
 800542c:	f001 ff2a 	bl	8007284 <W25qxx_getSectorSize>
 8005430:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    				if (!W25qxx_IsEmptySector(adr_sector, 0, ss)) W25qxx_EraseSector(adr_sector);
 8005434:	4b3d      	ldr	r3, [pc, #244]	; (800552c <StartTask+0x1440>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800543c:	2100      	movs	r1, #0
 800543e:	4618      	mov	r0, r3
 8005440:	f001 ff96 	bl	8007370 <W25qxx_IsEmptySector>
 8005444:	4603      	mov	r3, r0
 8005446:	f083 0301 	eor.w	r3, r3, #1
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d004      	beq.n	800545a <StartTask+0x136e>
 8005450:	4b36      	ldr	r3, [pc, #216]	; (800552c <StartTask+0x1440>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4618      	mov	r0, r3
 8005456:	f001 ff2f 	bl	80072b8 <W25qxx_EraseSector>
    				memset(fs_work, byte_write, ss);
 800545a:	4b3d      	ldr	r3, [pc, #244]	; (8005550 <StartTask+0x1464>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005462:	4619      	mov	r1, r3
 8005464:	4834      	ldr	r0, [pc, #208]	; (8005538 <StartTask+0x144c>)
 8005466:	f00e f87b 	bl	8013560 <memset>
    				if (len_write != -1) ss = len_write;
 800546a:	4b3a      	ldr	r3, [pc, #232]	; (8005554 <StartTask+0x1468>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005472:	d003      	beq.n	800547c <StartTask+0x1390>
 8005474:	4b37      	ldr	r3, [pc, #220]	; (8005554 <StartTask+0x1468>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    				W25qxx_WriteSector(fs_work, adr_sector, offset_sector, ss);
 800547c:	4b2b      	ldr	r3, [pc, #172]	; (800552c <StartTask+0x1440>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4619      	mov	r1, r3
 8005482:	4b2b      	ldr	r3, [pc, #172]	; (8005530 <StartTask+0x1444>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	461a      	mov	r2, r3
 8005488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800548c:	482a      	ldr	r0, [pc, #168]	; (8005538 <StartTask+0x144c>)
 800548e:	f002 f8e3 	bl	8007658 <W25qxx_WriteSector>
    				Report(0, "Fill sector:%d byte:%02X len:%d done\r\n", adr_sector, byte_write, ss);
 8005492:	4b26      	ldr	r3, [pc, #152]	; (800552c <StartTask+0x1440>)
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	4b2e      	ldr	r3, [pc, #184]	; (8005550 <StartTask+0x1464>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	4619      	mov	r1, r3
 800549c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	460b      	mov	r3, r1
 80054a4:	492c      	ldr	r1, [pc, #176]	; (8005558 <StartTask+0x146c>)
 80054a6:	2000      	movs	r0, #0
 80054a8:	f7fd febe 	bl	8003228 <Report>
    			}
    			break;
 80054ac:	e05f      	b.n	800556e <StartTask+0x1482>
    			case evt_sErase:
    				if (adr_sector == -1) {
 80054ae:	4b1f      	ldr	r3, [pc, #124]	; (800552c <StartTask+0x1440>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b6:	d10c      	bne.n	80054d2 <StartTask+0x13e6>
    					Report(1, "Erase flash");
 80054b8:	4928      	ldr	r1, [pc, #160]	; (800555c <StartTask+0x1470>)
 80054ba:	2001      	movs	r0, #1
 80054bc:	f7fd feb4 	bl	8003228 <Report>
    					flag_sector = true;
 80054c0:	4b27      	ldr	r3, [pc, #156]	; (8005560 <StartTask+0x1474>)
 80054c2:	2201      	movs	r2, #1
 80054c4:	701a      	strb	r2, [r3, #0]
    					btime = HAL_GetTick();
 80054c6:	f002 fab1 	bl	8007a2c <HAL_GetTick>
 80054ca:	4603      	mov	r3, r0
 80054cc:	4a25      	ldr	r2, [pc, #148]	; (8005564 <StartTask+0x1478>)
 80054ce:	6013      	str	r3, [r2, #0]
    				} else {
    					W25qxx_EraseSector(adr_sector);
    					Report(1, "Erase sector:%d done\r\n", adr_sector);
    				}
    			break;
 80054d0:	e04d      	b.n	800556e <StartTask+0x1482>
    					W25qxx_EraseSector(adr_sector);
 80054d2:	4b16      	ldr	r3, [pc, #88]	; (800552c <StartTask+0x1440>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f001 feee 	bl	80072b8 <W25qxx_EraseSector>
    					Report(1, "Erase sector:%d done\r\n", adr_sector);
 80054dc:	4b13      	ldr	r3, [pc, #76]	; (800552c <StartTask+0x1440>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	461a      	mov	r2, r3
 80054e2:	4921      	ldr	r1, [pc, #132]	; (8005568 <StartTask+0x147c>)
 80054e4:	2001      	movs	r0, #1
 80054e6:	f7fd fe9f 	bl	8003228 <Report>
    			break;
 80054ea:	e040      	b.n	800556e <StartTask+0x1482>
    			break;
 80054ec:	bf00      	nop
 80054ee:	e03e      	b.n	800556e <StartTask+0x1482>
    			break;
 80054f0:	bf00      	nop
 80054f2:	e03c      	b.n	800556e <StartTask+0x1482>
    			break;
 80054f4:	bf00      	nop
 80054f6:	e03a      	b.n	800556e <StartTask+0x1482>
    			break;
 80054f8:	bf00      	nop
 80054fa:	e038      	b.n	800556e <StartTask+0x1482>
    			break;
 80054fc:	bf00      	nop
 80054fe:	e036      	b.n	800556e <StartTask+0x1482>
				break;
 8005500:	bf00      	nop
 8005502:	e034      	b.n	800556e <StartTask+0x1482>
 8005504:	20000e88 	.word	0x20000e88
 8005508:	20000020 	.word	0x20000020
 800550c:	0801810c 	.word	0x0801810c
 8005510:	08017c74 	.word	0x08017c74
 8005514:	20001f1c 	.word	0x20001f1c
 8005518:	20001f1f 	.word	0x20001f1f
 800551c:	08018114 	.word	0x08018114
 8005520:	2000001c 	.word	0x2000001c
 8005524:	08018134 	.word	0x08018134
 8005528:	0801815c 	.word	0x0801815c
 800552c:	20001f20 	.word	0x20001f20
 8005530:	20001f24 	.word	0x20001f24
 8005534:	20001f28 	.word	0x20001f28
 8005538:	20001f34 	.word	0x20001f34
 800553c:	08018180 	.word	0x08018180
 8005540:	20001708 	.word	0x20001708
 8005544:	080181a4 	.word	0x080181a4
 8005548:	08017f00 	.word	0x08017f00
 800554c:	080181ac 	.word	0x080181ac
 8005550:	20000100 	.word	0x20000100
 8005554:	20001f2c 	.word	0x20001f2c
 8005558:	080181b0 	.word	0x080181b0
 800555c:	080181d8 	.word	0x080181d8
 8005560:	20001f30 	.word	0x20001f30
 8005564:	20002f38 	.word	0x20002f38
 8005568:	080181e4 	.word	0x080181e4
    			break;
 800556c:	bf00      	nop
	#endif
    		}
    		if ((evt >= evt_sRead) && (evt <= evt_sWrite)) {
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b03      	cmp	r3, #3
 8005572:	dd09      	ble.n	8005588 <StartTask+0x149c>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b07      	cmp	r3, #7
 8005578:	dc06      	bgt.n	8005588 <StartTask+0x149c>
    			last_cmd_sector =  evt;//cmd_sector;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4a81      	ldr	r2, [pc, #516]	; (8005784 <StartTask+0x1698>)
 800557e:	6013      	str	r3, [r2, #0]
    			cmd_sector = sNone;
 8005580:	4b81      	ldr	r3, [pc, #516]	; (8005788 <StartTask+0x169c>)
 8005582:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005586:	601a      	str	r2, [r3, #0]
    		}
    	}//evtQueueGet(....)


#ifdef SET_W25FLASH
    	if (flag_sector) {
 8005588:	4b80      	ldr	r3, [pc, #512]	; (800578c <StartTask+0x16a0>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d031      	beq.n	80055f4 <StartTask+0x1508>
    		adr_sector++;
 8005590:	4b7f      	ldr	r3, [pc, #508]	; (8005790 <StartTask+0x16a4>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3301      	adds	r3, #1
 8005596:	4a7e      	ldr	r2, [pc, #504]	; (8005790 <StartTask+0x16a4>)
 8005598:	6013      	str	r3, [r2, #0]
    		if (adr_sector >= W25qxx_getSectorCount()) {
 800559a:	f001 fe67 	bl	800726c <W25qxx_getSectorCount>
 800559e:	4603      	mov	r3, r0
 80055a0:	4a7b      	ldr	r2, [pc, #492]	; (8005790 <StartTask+0x16a4>)
 80055a2:	6812      	ldr	r2, [r2, #0]
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d816      	bhi.n	80055d6 <StartTask+0x14ea>
    			flag_sector = false;
 80055a8:	4b78      	ldr	r3, [pc, #480]	; (800578c <StartTask+0x16a0>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	701a      	strb	r2, [r3, #0]
    			etime = HAL_GetTick();
 80055ae:	f002 fa3d 	bl	8007a2c <HAL_GetTick>
 80055b2:	4603      	mov	r3, r0
 80055b4:	4a77      	ldr	r2, [pc, #476]	; (8005794 <StartTask+0x16a8>)
 80055b6:	6013      	str	r3, [r2, #0]
    			Report(0, " done (%lu sec)\r\n", (etime - btime) / 1000);
 80055b8:	4b76      	ldr	r3, [pc, #472]	; (8005794 <StartTask+0x16a8>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	4b76      	ldr	r3, [pc, #472]	; (8005798 <StartTask+0x16ac>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	4a76      	ldr	r2, [pc, #472]	; (800579c <StartTask+0x16b0>)
 80055c4:	fba2 2303 	umull	r2, r3, r2, r3
 80055c8:	099b      	lsrs	r3, r3, #6
 80055ca:	461a      	mov	r2, r3
 80055cc:	4974      	ldr	r1, [pc, #464]	; (80057a0 <StartTask+0x16b4>)
 80055ce:	2000      	movs	r0, #0
 80055d0:	f7fd fe2a 	bl	8003228 <Report>
 80055d4:	e00e      	b.n	80055f4 <StartTask+0x1508>
    		} else {
    			W25qxx_EraseSector(adr_sector);
 80055d6:	4b6e      	ldr	r3, [pc, #440]	; (8005790 <StartTask+0x16a4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4618      	mov	r0, r3
 80055dc:	f001 fe6c 	bl	80072b8 <W25qxx_EraseSector>
    			if (!(adr_sector % 8)) Report(0, ".");
 80055e0:	4b6b      	ldr	r3, [pc, #428]	; (8005790 <StartTask+0x16a4>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d103      	bne.n	80055f4 <StartTask+0x1508>
 80055ec:	496d      	ldr	r1, [pc, #436]	; (80057a4 <StartTask+0x16b8>)
 80055ee:	2000      	movs	r0, #0
 80055f0:	f7fd fe1a 	bl	8003228 <Report>
    	}
#endif


#if defined(SET_BLE) || defined(SET_AUDIO)
    	if (ackQueHandle) {
 80055f4:	4b6c      	ldr	r3, [pc, #432]	; (80057a8 <StartTask+0x16bc>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d01d      	beq.n	8005638 <StartTask+0x154c>
    		if (!osMessageQueueGet(ackQueHandle, (void *)&_ack, NULL, 1)) {
 80055fc:	4b6a      	ldr	r3, [pc, #424]	; (80057a8 <StartTask+0x16bc>)
 80055fe:	6818      	ldr	r0, [r3, #0]
 8005600:	2301      	movs	r3, #1
 8005602:	2200      	movs	r2, #0
 8005604:	4969      	ldr	r1, [pc, #420]	; (80057ac <StartTask+0x16c0>)
 8005606:	f00a fbcb 	bl	800fda0 <osMessageQueueGet>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d113      	bne.n	8005638 <StartTask+0x154c>
    			if (_ack.msg) {
 8005610:	4b66      	ldr	r3, [pc, #408]	; (80057ac <StartTask+0x16c0>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00f      	beq.n	8005638 <StartTask+0x154c>
    				strcpy(bleRxBuf, _ack.msg);
 8005618:	4b64      	ldr	r3, [pc, #400]	; (80057ac <StartTask+0x16c0>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4619      	mov	r1, r3
 800561e:	4864      	ldr	r0, [pc, #400]	; (80057b0 <StartTask+0x16c4>)
 8005620:	f00e fdf0 	bl	8014204 <strcpy>
    				free(_ack.msg);//vPortFree(_ack.msg);
 8005624:	4b61      	ldr	r3, [pc, #388]	; (80057ac <StartTask+0x16c0>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4618      	mov	r0, r3
 800562a:	f00d ff83 	bl	8013534 <free>
    				Report(1, "[BLE_rx] %s\r\n", bleRxBuf);
 800562e:	4a60      	ldr	r2, [pc, #384]	; (80057b0 <StartTask+0x16c4>)
 8005630:	4960      	ldr	r1, [pc, #384]	; (80057b4 <StartTask+0x16c8>)
 8005632:	2001      	movs	r0, #1
 8005634:	f7fd fdf8 	bl	8003228 <Report>
    			}
    		}
    	}
    	if (cmdQueHandle) {
 8005638:	4b5f      	ldr	r3, [pc, #380]	; (80057b8 <StartTask+0x16cc>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d028      	beq.n	8005692 <StartTask+0x15a6>
    		if (!osMessageQueueGet(cmdQueHandle, (void *)&_cmd, NULL, 1)) {
 8005640:	4b5d      	ldr	r3, [pc, #372]	; (80057b8 <StartTask+0x16cc>)
 8005642:	6818      	ldr	r0, [r3, #0]
 8005644:	2301      	movs	r3, #1
 8005646:	2200      	movs	r2, #0
 8005648:	495c      	ldr	r1, [pc, #368]	; (80057bc <StartTask+0x16d0>)
 800564a:	f00a fba9 	bl	800fda0 <osMessageQueueGet>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d11e      	bne.n	8005692 <StartTask+0x15a6>
    			if (_cmd.msg) {
 8005654:	4b59      	ldr	r3, [pc, #356]	; (80057bc <StartTask+0x16d0>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d01a      	beq.n	8005692 <StartTask+0x15a6>
    				strcpy(bleBuf, _cmd.msg);
 800565c:	4b57      	ldr	r3, [pc, #348]	; (80057bc <StartTask+0x16d0>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4619      	mov	r1, r3
 8005662:	4857      	ldr	r0, [pc, #348]	; (80057c0 <StartTask+0x16d4>)
 8005664:	f00e fdce 	bl	8014204 <strcpy>
    				free(_cmd.msg);
 8005668:	4b54      	ldr	r3, [pc, #336]	; (80057bc <StartTask+0x16d0>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4618      	mov	r0, r3
 800566e:	f00d ff61 	bl	8013534 <free>
    				strcat(bleBuf, "\r\n");
 8005672:	4853      	ldr	r0, [pc, #332]	; (80057c0 <StartTask+0x16d4>)
 8005674:	f7fa fdac 	bl	80001d0 <strlen>
 8005678:	4603      	mov	r3, r0
 800567a:	461a      	mov	r2, r3
 800567c:	4b50      	ldr	r3, [pc, #320]	; (80057c0 <StartTask+0x16d4>)
 800567e:	4413      	add	r3, r2
 8005680:	4a50      	ldr	r2, [pc, #320]	; (80057c4 <StartTask+0x16d8>)
 8005682:	8811      	ldrh	r1, [r2, #0]
 8005684:	7892      	ldrb	r2, [r2, #2]
 8005686:	8019      	strh	r1, [r3, #0]
 8005688:	709a      	strb	r2, [r3, #2]
    				bleWrite(bleBuf, 1);
 800568a:	2101      	movs	r1, #1
 800568c:	484c      	ldr	r0, [pc, #304]	; (80057c0 <StartTask+0x16d4>)
 800568e:	f7fc fc83 	bl	8001f98 <bleWrite>
    	}
#endif
    	//
    	//
    	//
    	if (devError) {
 8005692:	4b4d      	ldr	r3, [pc, #308]	; (80057c8 <StartTask+0x16dc>)
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d04f      	beq.n	800573a <StartTask+0x164e>
    		errLedOn(true);
 800569a:	2001      	movs	r0, #1
 800569c:	f7fd fc20 	bl	8002ee0 <errLedOn>
    		HAL_Delay(50);
 80056a0:	2032      	movs	r0, #50	; 0x32
 80056a2:	f002 f9cf 	bl	8007a44 <HAL_Delay>
    		errLedOn(false);
 80056a6:	2000      	movs	r0, #0
 80056a8:	f7fd fc1a 	bl	8002ee0 <errLedOn>
    		if (last_devError != devError) {
 80056ac:	4b47      	ldr	r3, [pc, #284]	; (80057cc <StartTask+0x16e0>)
 80056ae:	881a      	ldrh	r2, [r3, #0]
 80056b0:	4b45      	ldr	r3, [pc, #276]	; (80057c8 <StartTask+0x16dc>)
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d04a      	beq.n	800574e <StartTask+0x1662>
    			last_devError = devError;
 80056b8:	4b43      	ldr	r3, [pc, #268]	; (80057c8 <StartTask+0x16dc>)
 80056ba:	881a      	ldrh	r2, [r3, #0]
 80056bc:	4b43      	ldr	r3, [pc, #268]	; (80057cc <StartTask+0x16e0>)
 80056be:	801a      	strh	r2, [r3, #0]
    			tmp[0] = '\0';
 80056c0:	4b43      	ldr	r3, [pc, #268]	; (80057d0 <StartTask+0x16e4>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	701a      	strb	r2, [r3, #0]
    			uint16_t er = 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    			for (int8_t i = 0; i < MAX_ERR_CODE; i++) {
 80056cc:	2300      	movs	r3, #0
 80056ce:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80056d2:	e025      	b.n	8005720 <StartTask+0x1634>
    				er = devError & all_devErr[i];
 80056d4:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80056d8:	4a3e      	ldr	r2, [pc, #248]	; (80057d4 <StartTask+0x16e8>)
 80056da:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80056de:	4b3a      	ldr	r3, [pc, #232]	; (80057c8 <StartTask+0x16dc>)
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	4013      	ands	r3, r2
 80056e4:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    				if (er) sprintf(tmp+strlen(tmp), " '%s'", errName(er));
 80056e8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d010      	beq.n	8005712 <StartTask+0x1626>
 80056f0:	4837      	ldr	r0, [pc, #220]	; (80057d0 <StartTask+0x16e4>)
 80056f2:	f7fa fd6d 	bl	80001d0 <strlen>
 80056f6:	4603      	mov	r3, r0
 80056f8:	4a35      	ldr	r2, [pc, #212]	; (80057d0 <StartTask+0x16e4>)
 80056fa:	189c      	adds	r4, r3, r2
 80056fc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8005700:	4618      	mov	r0, r3
 8005702:	f7fc fcab 	bl	800205c <errName>
 8005706:	4603      	mov	r3, r0
 8005708:	461a      	mov	r2, r3
 800570a:	4933      	ldr	r1, [pc, #204]	; (80057d8 <StartTask+0x16ec>)
 800570c:	4620      	mov	r0, r4
 800570e:	f00e fd09 	bl	8014124 <siprintf>
    			for (int8_t i = 0; i < MAX_ERR_CODE; i++) {
 8005712:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8005716:	b2db      	uxtb	r3, r3
 8005718:	3301      	adds	r3, #1
 800571a:	b2db      	uxtb	r3, r3
 800571c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005720:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8005724:	2b0b      	cmp	r3, #11
 8005726:	ddd5      	ble.n	80056d4 <StartTask+0x15e8>
    			}
    			Report(1, "Error 0x%04X %s\r\n", devError, tmp);
 8005728:	4b27      	ldr	r3, [pc, #156]	; (80057c8 <StartTask+0x16dc>)
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	461a      	mov	r2, r3
 800572e:	4b28      	ldr	r3, [pc, #160]	; (80057d0 <StartTask+0x16e4>)
 8005730:	492a      	ldr	r1, [pc, #168]	; (80057dc <StartTask+0x16f0>)
 8005732:	2001      	movs	r0, #1
 8005734:	f7fd fd78 	bl	8003228 <Report>
 8005738:	e009      	b.n	800574e <StartTask+0x1662>
    		}
    	} else {
    		if (HAL_GPIO_ReadPin(ERR_LED_GPIO_Port, ERR_LED_Pin)) errLedOn(false);
 800573a:	2108      	movs	r1, #8
 800573c:	4828      	ldr	r0, [pc, #160]	; (80057e0 <StartTask+0x16f4>)
 800573e:	f002 feb5 	bl	80084ac <HAL_GPIO_ReadPin>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d002      	beq.n	800574e <StartTask+0x1662>
 8005748:	2000      	movs	r0, #0
 800574a:	f7fd fbc9 	bl	8002ee0 <errLedOn>
    while (!restart) {
 800574e:	4b25      	ldr	r3, [pc, #148]	; (80057e4 <StartTask+0x16f8>)
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b00      	cmp	r3, #0
 8005756:	f43e afe9 	beq.w	800472c <StartTask+0x640>
    	//
    	//
    	//
    }//while (!restart)

    while (!ird_exit);
 800575a:	bf00      	nop
 800575c:	4b22      	ldr	r3, [pc, #136]	; (80057e8 <StartTask+0x16fc>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	f083 0301 	eor.w	r3, r3, #1
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1f8      	bne.n	800575c <StartTask+0x1670>

    Report(1, "[que:%u] Stop application...\r\n", cntEvt);
 800576a:	4b20      	ldr	r3, [pc, #128]	; (80057ec <StartTask+0x1700>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	b2db      	uxtb	r3, r3
 8005770:	461a      	mov	r2, r3
 8005772:	491f      	ldr	r1, [pc, #124]	; (80057f0 <StartTask+0x1704>)
 8005774:	2001      	movs	r0, #1
 8005776:	f7fd fd57 	bl	8003228 <Report>

    HAL_Delay(250);
 800577a:	20fa      	movs	r0, #250	; 0xfa
 800577c:	f002 f962 	bl	8007a44 <HAL_Delay>


    NVIC_SystemReset();
 8005780:	f7fc fba8 	bl	8001ed4 <__NVIC_SystemReset>
 8005784:	200000fc 	.word	0x200000fc
 8005788:	200000f8 	.word	0x200000f8
 800578c:	20001f30 	.word	0x20001f30
 8005790:	20001f20 	.word	0x20001f20
 8005794:	20002f3c 	.word	0x20002f3c
 8005798:	20002f38 	.word	0x20002f38
 800579c:	10624dd3 	.word	0x10624dd3
 80057a0:	080181fc 	.word	0x080181fc
 80057a4:	08018210 	.word	0x08018210
 80057a8:	20000e7c 	.word	0x20000e7c
 80057ac:	200035f8 	.word	0x200035f8
 80057b0:	200034f8 	.word	0x200034f8
 80057b4:	08018214 	.word	0x08018214
 80057b8:	20000e78 	.word	0x20000e78
 80057bc:	200035fc 	.word	0x200035fc
 80057c0:	200033f8 	.word	0x200033f8
 80057c4:	080181ac 	.word	0x080181ac
 80057c8:	20001b08 	.word	0x20001b08
 80057cc:	20001b0a 	.word	0x20001b0a
 80057d0:	20001288 	.word	0x20001288
 80057d4:	08018eec 	.word	0x08018eec
 80057d8:	08018224 	.word	0x08018224
 80057dc:	0801822c 	.word	0x0801822c
 80057e0:	48000800 	.word	0x48000800
 80057e4:	20001f1c 	.word	0x20001f1c
 80057e8:	20000134 	.word	0x20000134
 80057ec:	20001f1f 	.word	0x20001f1f
 80057f0:	08018240 	.word	0x08018240

080057f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057f4:	b5b0      	push	{r4, r5, r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a79      	ldr	r2, [pc, #484]	; (80059e8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d102      	bne.n	800580c <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8005806:	f002 f8fd 	bl	8007a04 <HAL_IncTick>
		}
		//
	}
#endif
  /* USER CODE END Callback 1 */
}
 800580a:	e0e8      	b.n	80059de <HAL_TIM_PeriodElapsedCallback+0x1ea>
	if (htim->Instance == TIM4) {
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a76      	ldr	r2, [pc, #472]	; (80059ec <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d13a      	bne.n	800588c <HAL_TIM_PeriodElapsedCallback+0x98>
		msCounter++;//inc_msCounter();
 8005816:	4b76      	ldr	r3, [pc, #472]	; (80059f0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	1c54      	adds	r4, r2, #1
 800581e:	f143 0500 	adc.w	r5, r3, #0
 8005822:	4b73      	ldr	r3, [pc, #460]	; (80059f0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8005824:	e9c3 4500 	strd	r4, r5, [r3]
		if (!(msCounter % _1s)) {// 1 seconda
 8005828:	4b71      	ldr	r3, [pc, #452]	; (80059f0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800582a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800582e:	f04f 0264 	mov.w	r2, #100	; 0x64
 8005832:	f04f 0300 	mov.w	r3, #0
 8005836:	f7fb fa77 	bl	8000d28 <__aeabi_uldivmod>
 800583a:	4313      	orrs	r3, r2
 800583c:	f040 80cf 	bne.w	80059de <HAL_TIM_PeriodElapsedCallback+0x1ea>
			secCounter++;
 8005840:	4b6c      	ldr	r3, [pc, #432]	; (80059f4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3301      	adds	r3, #1
 8005846:	4a6b      	ldr	r2, [pc, #428]	; (80059f4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8005848:	6013      	str	r3, [r2, #0]
		  	HAL_GPIO_TogglePin(TIK_LED_GPIO_Port, TIK_LED_Pin);
 800584a:	2102      	movs	r1, #2
 800584c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005850:	f002 fe5c 	bl	800850c <HAL_GPIO_TogglePin>
		  	if (startSec) {
 8005854:	4b68      	ldr	r3, [pc, #416]	; (80059f8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 80bf 	beq.w	80059de <HAL_TIM_PeriodElapsedCallback+0x1ea>
		  		int ev = evt_Sec;
 8005860:	2308      	movs	r3, #8
 8005862:	60bb      	str	r3, [r7, #8]
		  		if (osMessageQueuePut(evtQueHandle, (const void *)&ev, 0, 0) != osOK) devError |= devEVT;
 8005864:	4b65      	ldr	r3, [pc, #404]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8005866:	6818      	ldr	r0, [r3, #0]
 8005868:	f107 0108 	add.w	r1, r7, #8
 800586c:	2300      	movs	r3, #0
 800586e:	2200      	movs	r2, #0
 8005870:	f00a fa36 	bl	800fce0 <osMessageQueuePut>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 80b1 	beq.w	80059de <HAL_TIM_PeriodElapsedCallback+0x1ea>
 800587c:	4b60      	ldr	r3, [pc, #384]	; (8005a00 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	f043 0310 	orr.w	r3, r3, #16
 8005884:	b29a      	uxth	r2, r3
 8005886:	4b5e      	ldr	r3, [pc, #376]	; (8005a00 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8005888:	801a      	strh	r2, [r3, #0]
}
 800588a:	e0a8      	b.n	80059de <HAL_TIM_PeriodElapsedCallback+0x1ea>
	if (htim->Instance == TIM6) {
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a5c      	ldr	r2, [pc, #368]	; (8005a04 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8005892:	4293      	cmp	r3, r2
 8005894:	f040 809a 	bne.w	80059cc <HAL_TIM_PeriodElapsedCallback+0x1d8>
		uint8_t irdata = RECIV_PIN; // пин для приёма
 8005898:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800589c:	485a      	ldr	r0, [pc, #360]	; (8005a08 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800589e:	f002 fe05 	bl	80084ac <HAL_GPIO_ReadPin>
 80058a2:	4603      	mov	r3, r0
 80058a4:	73fb      	strb	r3, [r7, #15]
		irparams.timer++;  // One more 50uS tick
 80058a6:	4b59      	ldr	r3, [pc, #356]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80058a8:	885b      	ldrh	r3, [r3, #2]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3301      	adds	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	4b56      	ldr	r3, [pc, #344]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80058b2:	805a      	strh	r2, [r3, #2]
		if (irparams.rawlen >= RAWBUF) irparams.rcvstate = STATE_OVERFLOW;  // Buffer overflow
 80058b4:	4b55      	ldr	r3, [pc, #340]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80058b6:	785b      	ldrb	r3, [r3, #1]
		switch (irparams.rcvstate) {
 80058b8:	4b54      	ldr	r3, [pc, #336]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	3b02      	subs	r3, #2
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	f200 808c 	bhi.w	80059de <HAL_TIM_PeriodElapsedCallback+0x1ea>
 80058c6:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80058c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058cc:	080058e1 	.word	0x080058e1
 80058d0:	08005935 	.word	0x08005935
 80058d4:	08005969 	.word	0x08005969
 80058d8:	080059af 	.word	0x080059af
 80058dc:	080059bd 	.word	0x080059bd
				if (irdata == MARK) {
 80058e0:	7bfb      	ldrb	r3, [r7, #15]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d174      	bne.n	80059d0 <HAL_TIM_PeriodElapsedCallback+0x1dc>
					if (irparams.timer < GAP_TICKS) { // Not big enough to be a gap.
 80058e6:	4b49      	ldr	r3, [pc, #292]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80058e8:	885b      	ldrh	r3, [r3, #2]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	2b63      	cmp	r3, #99	; 0x63
 80058ee:	d803      	bhi.n	80058f8 <HAL_TIM_PeriodElapsedCallback+0x104>
						irparams.timer = 0;
 80058f0:	4b46      	ldr	r3, [pc, #280]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	805a      	strh	r2, [r3, #2]
			break;
 80058f6:	e06b      	b.n	80059d0 <HAL_TIM_PeriodElapsedCallback+0x1dc>
						irparams.overflow = 0;
 80058f8:	4b44      	ldr	r3, [pc, #272]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						irparams.rawlen  = 0;
 8005900:	4b42      	ldr	r3, [pc, #264]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005902:	2200      	movs	r2, #0
 8005904:	705a      	strb	r2, [r3, #1]
						irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8005906:	4b41      	ldr	r3, [pc, #260]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005908:	785b      	ldrb	r3, [r3, #1]
 800590a:	b2db      	uxtb	r3, r3
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	b2d1      	uxtb	r1, r2
 8005910:	4a3e      	ldr	r2, [pc, #248]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005912:	7051      	strb	r1, [r2, #1]
 8005914:	4618      	mov	r0, r3
 8005916:	4b3d      	ldr	r3, [pc, #244]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005918:	885b      	ldrh	r3, [r3, #2]
 800591a:	b299      	uxth	r1, r3
 800591c:	4a3b      	ldr	r2, [pc, #236]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 800591e:	0043      	lsls	r3, r0, #1
 8005920:	4413      	add	r3, r2
 8005922:	460a      	mov	r2, r1
 8005924:	809a      	strh	r2, [r3, #4]
						irparams.timer = 0;
 8005926:	4b39      	ldr	r3, [pc, #228]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005928:	2200      	movs	r2, #0
 800592a:	805a      	strh	r2, [r3, #2]
						irparams.rcvstate = STATE_MARK;
 800592c:	4b37      	ldr	r3, [pc, #220]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 800592e:	2203      	movs	r2, #3
 8005930:	701a      	strb	r2, [r3, #0]
			break;
 8005932:	e04d      	b.n	80059d0 <HAL_TIM_PeriodElapsedCallback+0x1dc>
				if (irdata == SPACE) {// Mark ended; Record time
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d14c      	bne.n	80059d4 <HAL_TIM_PeriodElapsedCallback+0x1e0>
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 800593a:	4b34      	ldr	r3, [pc, #208]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 800593c:	785b      	ldrb	r3, [r3, #1]
 800593e:	b2db      	uxtb	r3, r3
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	b2d1      	uxtb	r1, r2
 8005944:	4a31      	ldr	r2, [pc, #196]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005946:	7051      	strb	r1, [r2, #1]
 8005948:	4618      	mov	r0, r3
 800594a:	4b30      	ldr	r3, [pc, #192]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 800594c:	885b      	ldrh	r3, [r3, #2]
 800594e:	b299      	uxth	r1, r3
 8005950:	4a2e      	ldr	r2, [pc, #184]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005952:	0043      	lsls	r3, r0, #1
 8005954:	4413      	add	r3, r2
 8005956:	460a      	mov	r2, r1
 8005958:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 800595a:	4b2c      	ldr	r3, [pc, #176]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 800595c:	2200      	movs	r2, #0
 800595e:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_SPACE;
 8005960:	4b2a      	ldr	r3, [pc, #168]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005962:	2204      	movs	r2, #4
 8005964:	701a      	strb	r2, [r3, #0]
			break;
 8005966:	e035      	b.n	80059d4 <HAL_TIM_PeriodElapsedCallback+0x1e0>
				if (irdata == MARK) {// Space just ended; Record time
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d116      	bne.n	800599c <HAL_TIM_PeriodElapsedCallback+0x1a8>
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 800596e:	4b27      	ldr	r3, [pc, #156]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005970:	785b      	ldrb	r3, [r3, #1]
 8005972:	b2db      	uxtb	r3, r3
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	b2d1      	uxtb	r1, r2
 8005978:	4a24      	ldr	r2, [pc, #144]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 800597a:	7051      	strb	r1, [r2, #1]
 800597c:	4618      	mov	r0, r3
 800597e:	4b23      	ldr	r3, [pc, #140]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005980:	885b      	ldrh	r3, [r3, #2]
 8005982:	b299      	uxth	r1, r3
 8005984:	4a21      	ldr	r2, [pc, #132]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005986:	0043      	lsls	r3, r0, #1
 8005988:	4413      	add	r3, r2
 800598a:	460a      	mov	r2, r1
 800598c:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 800598e:	4b1f      	ldr	r3, [pc, #124]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005990:	2200      	movs	r2, #0
 8005992:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_MARK;
 8005994:	4b1d      	ldr	r3, [pc, #116]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005996:	2203      	movs	r2, #3
 8005998:	701a      	strb	r2, [r3, #0]
			break;
 800599a:	e01d      	b.n	80059d8 <HAL_TIM_PeriodElapsedCallback+0x1e4>
				} else if (irparams.timer > GAP_TICKS) {// Space
 800599c:	4b1b      	ldr	r3, [pc, #108]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 800599e:	885b      	ldrh	r3, [r3, #2]
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2b64      	cmp	r3, #100	; 0x64
 80059a4:	d918      	bls.n	80059d8 <HAL_TIM_PeriodElapsedCallback+0x1e4>
					irparams.rcvstate = STATE_STOP;
 80059a6:	4b19      	ldr	r3, [pc, #100]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80059a8:	2205      	movs	r2, #5
 80059aa:	701a      	strb	r2, [r3, #0]
			break;
 80059ac:	e014      	b.n	80059d8 <HAL_TIM_PeriodElapsedCallback+0x1e4>
			 	if (irdata == MARK) irparams.timer = 0;  // Reset gap timer
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d113      	bne.n	80059dc <HAL_TIM_PeriodElapsedCallback+0x1e8>
 80059b4:	4b15      	ldr	r3, [pc, #84]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	805a      	strh	r2, [r3, #2]
			break;
 80059ba:	e00f      	b.n	80059dc <HAL_TIM_PeriodElapsedCallback+0x1e8>
				irparams.overflow = 1;
 80059bc:	4b13      	ldr	r3, [pc, #76]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				irparams.rcvstate = STATE_STOP;
 80059c4:	4b11      	ldr	r3, [pc, #68]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80059c6:	2205      	movs	r2, #5
 80059c8:	701a      	strb	r2, [r3, #0]
			break;
 80059ca:	e008      	b.n	80059de <HAL_TIM_PeriodElapsedCallback+0x1ea>
	}
 80059cc:	bf00      	nop
 80059ce:	e006      	b.n	80059de <HAL_TIM_PeriodElapsedCallback+0x1ea>
			break;
 80059d0:	bf00      	nop
 80059d2:	e004      	b.n	80059de <HAL_TIM_PeriodElapsedCallback+0x1ea>
			break;
 80059d4:	bf00      	nop
 80059d6:	e002      	b.n	80059de <HAL_TIM_PeriodElapsedCallback+0x1ea>
			break;
 80059d8:	bf00      	nop
 80059da:	e000      	b.n	80059de <HAL_TIM_PeriodElapsedCallback+0x1ea>
			break;
 80059dc:	bf00      	nop
}
 80059de:	bf00      	nop
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bdb0      	pop	{r4, r5, r7, pc}
 80059e6:	bf00      	nop
 80059e8:	40012c00 	.word	0x40012c00
 80059ec:	40000800 	.word	0x40000800
 80059f0:	20001b10 	.word	0x20001b10
 80059f4:	20001b0c 	.word	0x20001b0c
 80059f8:	20002f44 	.word	0x20002f44
 80059fc:	20000e74 	.word	0x20000e74
 8005a00:	20001b08 	.word	0x20001b08
 8005a04:	40001000 	.word	0x40001000
 8005a08:	48000800 	.word	0x48000800
 8005a0c:	2000037c 	.word	0x2000037c

08005a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005a14:	b672      	cpsid	i
}
 8005a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  devError |= devSYS;
 8005a18:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <Error_Handler+0x20>)
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	f043 0320 	orr.w	r3, r3, #32
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	4b03      	ldr	r3, [pc, #12]	; (8005a30 <Error_Handler+0x20>)
 8005a24:	801a      	strh	r2, [r3, #0]
	  errLedOn(true);
 8005a26:	2001      	movs	r0, #1
 8005a28:	f7fd fa5a 	bl	8002ee0 <errLedOn>
	  devError |= devSYS;
 8005a2c:	e7f4      	b.n	8005a18 <Error_Handler+0x8>
 8005a2e:	bf00      	nop
 8005a30:	20001b08 	.word	0x20001b08

08005a34 <rda5807_init>:

//==============================================================================
// Инициализация rda5807
//==============================================================================
uint8_t rda5807_init(float *freq)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b088      	sub	sp, #32
 8005a38:	af04      	add	r7, sp, #16
 8005a3a:	6078      	str	r0, [r7, #4]
uint8_t buf[2] = {0, 0};
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	813b      	strh	r3, [r7, #8]
uint8_t *id = &buf[0];
 8005a40:	f107 0308 	add.w	r3, r7, #8
 8005a44:	60fb      	str	r3, [r7, #12]

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr, 0, I2C_MEMADD_SIZE_8BIT, buf, 2, RDA5807_TO) != HAL_OK) {
 8005a46:	4b30      	ldr	r3, [pc, #192]	; (8005b08 <rda5807_init+0xd4>)
 8005a48:	6818      	ldr	r0, [r3, #0]
 8005a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a4e:	9302      	str	r3, [sp, #8]
 8005a50:	2302      	movs	r3, #2
 8005a52:	9301      	str	r3, [sp, #4]
 8005a54:	f107 0308 	add.w	r3, r7, #8
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2122      	movs	r1, #34	; 0x22
 8005a60:	f003 f81e 	bl	8008aa0 <HAL_I2C_Mem_Read>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d13c      	bne.n	8005ae4 <rda5807_init+0xb0>
    stx[0] = '\0';
    for (int i = 0; i < 64; i++) sprintf(stx+strlen(stx)," %02x", buf11[i]);
    Report(1, "[%s] %s\r\n", __func__, stx);
#endif

    rda5807_SoftReset();
 8005a6a:	f000 f927 	bl	8005cbc <rda5807_SoftReset>
    if (devError & devRDA) goto err_out;
 8005a6e:	4b27      	ldr	r3, [pc, #156]	; (8005b0c <rda5807_init+0xd8>)
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d136      	bne.n	8005ae8 <rda5807_init+0xb4>

    rda5807_SetupDefault();
 8005a7a:	f000 f949 	bl	8005d10 <rda5807_SetupDefault>
    if (devError & devRDA) goto err_out;
 8005a7e:	4b23      	ldr	r3, [pc, #140]	; (8005b0c <rda5807_init+0xd8>)
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d130      	bne.n	8005aec <rda5807_init+0xb8>

    uint16_t fr = (uint16_t)(*freq * 10);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	edd3 7a00 	vldr	s15, [r3]
 8005a90:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a9c:	ee17 3a90 	vmov	r3, s15
 8005aa0:	817b      	strh	r3, [r7, #10]
    rda5807_SetFreq_In100Khz(fr);
 8005aa2:	897b      	ldrh	r3, [r7, #10]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 fa79 	bl	8005f9c <rda5807_SetFreq_In100Khz>
    //
    HAL_Delay(200);
 8005aaa:	20c8      	movs	r0, #200	; 0xc8
 8005aac:	f001 ffca 	bl	8007a44 <HAL_Delay>
    //
    *freq = (float)rda5807_GetFreq_In100Khz();
 8005ab0:	f000 faee 	bl	8006090 <rda5807_GetFreq_In100Khz>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	ee07 3a90 	vmov	s15, r3
 8005aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	edc3 7a00 	vstr	s15, [r3]
    *freq /= 10;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	ed93 7a00 	vldr	s14, [r3]
 8005aca:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005ace:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	edc3 7a00 	vstr	s15, [r3]
#ifdef SET_RDA_DEBUG
    Report(1, "[%s] Freq: %.2f\r\n", __func__, *freq);//rda5807_GetFreq_In100Khz());
#endif

    HAL_Delay(100);
 8005ad8:	2064      	movs	r0, #100	; 0x64
 8005ada:	f001 ffb3 	bl	8007a44 <HAL_Delay>

    return *id;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	e00d      	b.n	8005b00 <rda5807_init+0xcc>
    	goto err_out;
 8005ae4:	bf00      	nop
 8005ae6:	e002      	b.n	8005aee <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 8005ae8:	bf00      	nop
 8005aea:	e000      	b.n	8005aee <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 8005aec:	bf00      	nop

err_out:
	devError |= devRDA;
 8005aee:	4b07      	ldr	r3, [pc, #28]	; (8005b0c <rda5807_init+0xd8>)
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	4b04      	ldr	r3, [pc, #16]	; (8005b0c <rda5807_init+0xd8>)
 8005afa:	801a      	strh	r2, [r3, #0]
    return *id;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	781b      	ldrb	r3, [r3, #0]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	20000138 	.word	0x20000138
 8005b0c:	20001b08 	.word	0x20001b08

08005b10 <rda5807_rssi>:
//==============================================================================
uint16_t rda5807_rssi()
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
uint16_t word = 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	80fb      	strh	r3, [r7, #6]

    rda5807_read(0x0B, &word, 1);
 8005b1a:	1dbb      	adds	r3, r7, #6
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	4619      	mov	r1, r3
 8005b20:	200b      	movs	r0, #11
 8005b22:	f000 f85d 	bl	8005be0 <rda5807_read>

    return (word >> 9);
 8005b26:	88fb      	ldrh	r3, [r7, #6]
 8005b28:	0a5b      	lsrs	r3, r3, #9
 8005b2a:	b29b      	uxth	r3, r3
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <rda5807_bytes_change>:

//==============================================================================
// Процедура меняет местами байты попарно в буфере pBuff 
//==============================================================================
void rda5807_bytes_change(uint8_t *pBuff, uint8_t count)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 8005b40:	e010      	b.n	8005b64 <rda5807_bytes_change+0x30>
        uint8_t Temp = *(pBuff + 1);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	785b      	ldrb	r3, [r3, #1]
 8005b46:	73fb      	strb	r3, [r7, #15]
        *(pBuff + 1) = *pBuff;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	7812      	ldrb	r2, [r2, #0]
 8005b50:	701a      	strb	r2, [r3, #0]
        *pBuff = Temp;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	7bfa      	ldrb	r2, [r7, #15]
 8005b56:	701a      	strb	r2, [r3, #0]
        pBuff += 2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3302      	adds	r3, #2
 8005b5c:	607b      	str	r3, [r7, #4]
        count -= 2;
 8005b5e:	78fb      	ldrb	r3, [r7, #3]
 8005b60:	3b02      	subs	r3, #2
 8005b62:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 8005b64:	78fb      	ldrb	r3, [r7, #3]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d8eb      	bhi.n	8005b42 <rda5807_bytes_change+0xe>
    }
}
 8005b6a:	bf00      	nop
 8005b6c:	bf00      	nop
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <rda5807_write_regfile>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с 0x02
// Используется I2C-адрес RDA5807_SeqAccess_Addr
//==============================================================================
void rda5807_write_regfile(uint16_t *pBuff, uint8_t RegNum)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af02      	add	r7, sp, #8
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	70fb      	strb	r3, [r7, #3]
    err = i2cm_Start(I2Cx, RDA5807_SeqAccess_Addr, 0, RDA5807_TO);
    if (err) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005b84:	78fb      	ldrb	r3, [r7, #3]
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7ff ffd1 	bl	8005b34 <rda5807_bytes_change>

//    err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
//    i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Master_Transmit(i2cRDA, (uint16_t)RDA5807_SeqAccess_Addr, (uint8_t *)pBuff, RegNum << 1, RDA5807_TO) != HAL_OK) {
 8005b92:	4b11      	ldr	r3, [pc, #68]	; (8005bd8 <rda5807_write_regfile+0x60>)
 8005b94:	6818      	ldr	r0, [r3, #0]
 8005b96:	78fb      	ldrb	r3, [r7, #3]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ba2:	9200      	str	r2, [sp, #0]
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	2120      	movs	r1, #32
 8005ba8:	f002 fd72 	bl	8008690 <HAL_I2C_Master_Transmit>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d006      	beq.n	8005bc0 <rda5807_write_regfile+0x48>
    	devError |= devRDA;
 8005bb2:	4b0a      	ldr	r3, [pc, #40]	; (8005bdc <rda5807_write_regfile+0x64>)
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	4b07      	ldr	r3, [pc, #28]	; (8005bdc <rda5807_write_regfile+0x64>)
 8005bbe:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005bc0:	78fb      	ldrb	r3, [r7, #3]
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff ffb3 	bl	8005b34 <rda5807_bytes_change>
}
 8005bce:	bf00      	nop
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20000138 	.word	0x20000138
 8005bdc:	20001b08 	.word	0x20001b08

08005be0 <rda5807_read>:
//==============================================================================
// Процедура читает из rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_read(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af04      	add	r7, sp, #16
 8005be6:	4603      	mov	r3, r0
 8005be8:	6039      	str	r1, [r7, #0]
 8005bea:	71fb      	strb	r3, [r7, #7]
 8005bec:	4613      	mov	r3, r2
 8005bee:	71bb      	strb	r3, [r7, #6]
        Error_Handler();
    }
    // Читаем
    i2cm_ReadBuffAndStop(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO); //*/

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr,
 8005bf0:	4b13      	ldr	r3, [pc, #76]	; (8005c40 <rda5807_read+0x60>)
 8005bf2:	6818      	ldr	r0, [r3, #0]
 8005bf4:	79fb      	ldrb	r3, [r7, #7]
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	79bb      	ldrb	r3, [r7, #6]
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c04:	9102      	str	r1, [sp, #8]
 8005c06:	9301      	str	r3, [sp, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	2122      	movs	r1, #34	; 0x22
 8005c10:	f002 ff46 	bl	8008aa0 <HAL_I2C_Mem_Read>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d006      	beq.n	8005c28 <rda5807_read+0x48>
    				     RegAddr, I2C_MEMADD_SIZE_8BIT,
						 (uint8_t *)pBuff, RegNum << 1,
						 RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 8005c1a:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <rda5807_read+0x64>)
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	4b07      	ldr	r3, [pc, #28]	; (8005c44 <rda5807_read+0x64>)
 8005c26:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005c28:	79bb      	ldrb	r3, [r7, #6]
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	4619      	mov	r1, r3
 8005c30:	6838      	ldr	r0, [r7, #0]
 8005c32:	f7ff ff7f 	bl	8005b34 <rda5807_bytes_change>
}
 8005c36:	bf00      	nop
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000138 	.word	0x20000138
 8005c44:	20001b08 	.word	0x20001b08

08005c48 <rda5807_write>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_write(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af04      	add	r7, sp, #16
 8005c4e:	4603      	mov	r3, r0
 8005c50:	6039      	str	r1, [r7, #0]
 8005c52:	71fb      	strb	r3, [r7, #7]
 8005c54:	4613      	mov	r3, r2
 8005c56:	71bb      	strb	r3, [r7, #6]

    if (i2cm_WriteBuff(I2Cx, &RegAddr, 1, RDA5807_TO)) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005c58:	79bb      	ldrb	r3, [r7, #6]
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	4619      	mov	r1, r3
 8005c60:	6838      	ldr	r0, [r7, #0]
 8005c62:	f7ff ff67 	bl	8005b34 <rda5807_bytes_change>

    //err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
    //i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Mem_Write(i2cRDA,
 8005c66:	4b13      	ldr	r3, [pc, #76]	; (8005cb4 <rda5807_write+0x6c>)
 8005c68:	6818      	ldr	r0, [r3, #0]
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	79bb      	ldrb	r3, [r7, #6]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c7a:	9102      	str	r1, [sp, #8]
 8005c7c:	9301      	str	r3, [sp, #4]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	2301      	movs	r3, #1
 8005c84:	2122      	movs	r1, #34	; 0x22
 8005c86:	f002 fdf7 	bl	8008878 <HAL_I2C_Mem_Write>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d006      	beq.n	8005c9e <rda5807_write+0x56>
    					  RDA5807_RandAccess_Addr,
						  RegAddr, I2C_MEMADD_SIZE_8BIT,
						  (uint8_t *)pBuff, RegNum << 1,
						  RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 8005c90:	4b09      	ldr	r3, [pc, #36]	; (8005cb8 <rda5807_write+0x70>)
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	4b07      	ldr	r3, [pc, #28]	; (8005cb8 <rda5807_write+0x70>)
 8005c9c:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005c9e:	79bb      	ldrb	r3, [r7, #6]
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	6838      	ldr	r0, [r7, #0]
 8005ca8:	f7ff ff44 	bl	8005b34 <rda5807_bytes_change>
}
 8005cac:	bf00      	nop
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	20000138 	.word	0x20000138
 8005cb8:	20001b08 	.word	0x20001b08

08005cbc <rda5807_SoftReset>:

//==============================================================================
// Процедура делает программный сброс rda5807
//==============================================================================
void rda5807_SoftReset()
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
tReg02h reg02;

    rda5807_read(2, (uint16_t *)&reg02, 1);
 8005cc2:	1d3b      	adds	r3, r7, #4
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	2002      	movs	r0, #2
 8005cca:	f7ff ff89 	bl	8005be0 <rda5807_read>

	reg02.bENABLE = 1;
 8005cce:	793b      	ldrb	r3, [r7, #4]
 8005cd0:	f043 0301 	orr.w	r3, r3, #1
 8005cd4:	713b      	strb	r3, [r7, #4]
	reg02.bSOFT_RESET = 1;
 8005cd6:	793b      	ldrb	r3, [r7, #4]
 8005cd8:	f043 0302 	orr.w	r3, r3, #2
 8005cdc:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 8005cde:	1d3b      	adds	r3, r7, #4
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	2002      	movs	r0, #2
 8005ce6:	f7ff ffaf 	bl	8005c48 <rda5807_write>

    reg02.bENABLE = 1;
 8005cea:	793b      	ldrb	r3, [r7, #4]
 8005cec:	f043 0301 	orr.w	r3, r3, #1
 8005cf0:	713b      	strb	r3, [r7, #4]
    reg02.bSOFT_RESET = 0;
 8005cf2:	793b      	ldrb	r3, [r7, #4]
 8005cf4:	f36f 0341 	bfc	r3, #1, #1
 8005cf8:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 8005cfa:	1d3b      	adds	r3, r7, #4
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	4619      	mov	r1, r3
 8005d00:	2002      	movs	r0, #2
 8005d02:	f7ff ffa1 	bl	8005c48 <rda5807_write>
}
 8005d06:	bf00      	nop
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
	...

08005d10 <rda5807_SetupDefault>:

//==============================================================================
// Процедура производит начальную настройку rda5807
//==============================================================================
void rda5807_SetupDefault()
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	af00      	add	r7, sp, #0
	tReg06h Reg06;
	tReg07h Reg07;
} Buffs;*/

    // Регистр 0x02
    Buffs.Reg02.bENABLE = 1;
 8005d14:	4a6b      	ldr	r2, [pc, #428]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005d16:	7813      	ldrb	r3, [r2, #0]
 8005d18:	f043 0301 	orr.w	r3, r3, #1
 8005d1c:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSOFT_RESET = 0;
 8005d1e:	4a69      	ldr	r2, [pc, #420]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005d20:	7813      	ldrb	r3, [r2, #0]
 8005d22:	f36f 0341 	bfc	r3, #1, #1
 8005d26:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bNEW_METHOD = 1;
 8005d28:	4a66      	ldr	r2, [pc, #408]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005d2a:	7813      	ldrb	r3, [r2, #0]
 8005d2c:	f043 0304 	orr.w	r3, r3, #4
 8005d30:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bRDS_EN = 1;
 8005d32:	4a64      	ldr	r2, [pc, #400]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005d34:	7813      	ldrb	r3, [r2, #0]
 8005d36:	f043 0308 	orr.w	r3, r3, #8
 8005d3a:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bCLK_MODE = 0;        // 32.768
 8005d3c:	4a61      	ldr	r2, [pc, #388]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005d3e:	7813      	ldrb	r3, [r2, #0]
 8005d40:	f36f 1306 	bfc	r3, #4, #3
 8005d44:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSKMODE = 0;
 8005d46:	4a5f      	ldr	r2, [pc, #380]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005d48:	7813      	ldrb	r3, [r2, #0]
 8005d4a:	f36f 13c7 	bfc	r3, #7, #1
 8005d4e:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 0;
 8005d50:	4a5c      	ldr	r2, [pc, #368]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005d52:	7853      	ldrb	r3, [r2, #1]
 8005d54:	f36f 0300 	bfc	r3, #0, #1
 8005d58:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = 1;
 8005d5a:	4a5a      	ldr	r2, [pc, #360]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005d5c:	7853      	ldrb	r3, [r2, #1]
 8005d5e:	f043 0302 	orr.w	r3, r3, #2
 8005d62:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_DirectInput = 0;
 8005d64:	4a57      	ldr	r2, [pc, #348]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005d66:	7853      	ldrb	r3, [r2, #1]
 8005d68:	f36f 0382 	bfc	r3, #2, #1
 8005d6c:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_NonCalibMode = 0;
 8005d6e:	4a55      	ldr	r2, [pc, #340]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005d70:	7853      	ldrb	r3, [r2, #1]
 8005d72:	f36f 03c3 	bfc	r3, #3, #1
 8005d76:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bBASS = 0;
 8005d78:	4a52      	ldr	r2, [pc, #328]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005d7a:	7853      	ldrb	r3, [r2, #1]
 8005d7c:	f36f 1304 	bfc	r3, #4, #1
 8005d80:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bMONO = 0;
 8005d82:	4a50      	ldr	r2, [pc, #320]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005d84:	7853      	ldrb	r3, [r2, #1]
 8005d86:	f36f 1345 	bfc	r3, #5, #1
 8005d8a:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDMUTE = 1;
 8005d8c:	4a4d      	ldr	r2, [pc, #308]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005d8e:	7853      	ldrb	r3, [r2, #1]
 8005d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d94:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDHIZ = 1;
 8005d96:	4a4b      	ldr	r2, [pc, #300]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005d98:	7853      	ldrb	r3, [r2, #1]
 8005d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d9e:	7053      	strb	r3, [r2, #1]
    // Регистр 0x03
    Buffs.Reg03.bSPACE = 0;//Step;//0;   // Шаг настройки - 0 = 100 КГц
 8005da0:	4a48      	ldr	r2, [pc, #288]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005da2:	7893      	ldrb	r3, [r2, #2]
 8005da4:	f36f 0301 	bfc	r3, #0, #2
 8005da8:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bBAND = Band;//2;//0;    // Диапазон 2 - 76–108 MHz
 8005daa:	4b47      	ldr	r3, [pc, #284]	; (8005ec8 <rda5807_SetupDefault+0x1b8>)
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	f003 0303 	and.w	r3, r3, #3
 8005db2:	b2d9      	uxtb	r1, r3
 8005db4:	4a43      	ldr	r2, [pc, #268]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005db6:	7893      	ldrb	r3, [r2, #2]
 8005db8:	f361 0383 	bfi	r3, r1, #2, #2
 8005dbc:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bTUNE = 1;
 8005dbe:	4a41      	ldr	r2, [pc, #260]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005dc0:	7893      	ldrb	r3, [r2, #2]
 8005dc2:	f043 0310 	orr.w	r3, r3, #16
 8005dc6:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bDIRECT_MODE = 0;
 8005dc8:	4a3e      	ldr	r2, [pc, #248]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005dca:	7893      	ldrb	r3, [r2, #2]
 8005dcc:	f36f 1345 	bfc	r3, #5, #1
 8005dd0:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bCHAN = 0;
 8005dd2:	4a3c      	ldr	r2, [pc, #240]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005dd4:	8853      	ldrh	r3, [r2, #2]
 8005dd6:	f36f 138f 	bfc	r3, #6, #10
 8005dda:	8053      	strh	r3, [r2, #2]
    // Регистр 0x04
    Buffs.Reg04.bRSVD1 = 0;
 8005ddc:	4b39      	ldr	r3, [pc, #228]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	711a      	strb	r2, [r3, #4]
    Buffs.Reg04.bAFCD = 0;
 8005de2:	4a38      	ldr	r2, [pc, #224]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005de4:	7953      	ldrb	r3, [r2, #5]
 8005de6:	f36f 0300 	bfc	r3, #0, #1
 8005dea:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bSOFTMUTE_EN = 1;
 8005dec:	4a35      	ldr	r2, [pc, #212]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005dee:	7953      	ldrb	r3, [r2, #5]
 8005df0:	f043 0302 	orr.w	r3, r3, #2
 8005df4:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD2 = 0;
 8005df6:	4a33      	ldr	r2, [pc, #204]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005df8:	7953      	ldrb	r3, [r2, #5]
 8005dfa:	f36f 0382 	bfc	r3, #2, #1
 8005dfe:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bDE = 0;
 8005e00:	4a30      	ldr	r2, [pc, #192]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005e02:	7953      	ldrb	r3, [r2, #5]
 8005e04:	f36f 03c3 	bfc	r3, #3, #1
 8005e08:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD3 = 0;
 8005e0a:	4a2e      	ldr	r2, [pc, #184]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005e0c:	7953      	ldrb	r3, [r2, #5]
 8005e0e:	f36f 1307 	bfc	r3, #4, #4
 8005e12:	7153      	strb	r3, [r2, #5]
    // Регистр 0x05
    Buffs.Reg05.bVOLUME = 0;
 8005e14:	4a2b      	ldr	r2, [pc, #172]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005e16:	7993      	ldrb	r3, [r2, #6]
 8005e18:	f36f 0303 	bfc	r3, #0, #4
 8005e1c:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_GAIN = 0;
 8005e1e:	4a29      	ldr	r2, [pc, #164]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005e20:	7993      	ldrb	r3, [r2, #6]
 8005e22:	f36f 1305 	bfc	r3, #4, #2
 8005e26:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_TYPE = ANT_TYPE_Both;//ANT_TYPE_External;//ANT_TYPE_Headphones;//ANT_TYPE_Both;
 8005e28:	4a26      	ldr	r2, [pc, #152]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005e2a:	7993      	ldrb	r3, [r2, #6]
 8005e2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e30:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bSEEKTH = 8;
 8005e32:	4a24      	ldr	r2, [pc, #144]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005e34:	79d3      	ldrb	r3, [r2, #7]
 8005e36:	2108      	movs	r1, #8
 8005e38:	f361 0303 	bfi	r3, r1, #0, #4
 8005e3c:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bRSVD3 = 0;
 8005e3e:	4a21      	ldr	r2, [pc, #132]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005e40:	79d3      	ldrb	r3, [r2, #7]
 8005e42:	f36f 1306 	bfc	r3, #4, #3
 8005e46:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bINT_MODE = 1;
 8005e48:	4a1e      	ldr	r2, [pc, #120]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005e4a:	79d3      	ldrb	r3, [r2, #7]
 8005e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e50:	71d3      	strb	r3, [r2, #7]
    // Регистр 0x06
    Buffs.Reg06.bRSVD1 = 0;
 8005e52:	4a1c      	ldr	r2, [pc, #112]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005e54:	8913      	ldrh	r3, [r2, #8]
 8005e56:	f36f 030c 	bfc	r3, #0, #13
 8005e5a:	8113      	strh	r3, [r2, #8]
    Buffs.Reg06.bOPEN_MODE = 0;
 8005e5c:	4a19      	ldr	r2, [pc, #100]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005e5e:	7a53      	ldrb	r3, [r2, #9]
 8005e60:	f36f 1346 	bfc	r3, #5, #2
 8005e64:	7253      	strb	r3, [r2, #9]
    Buffs.Reg06.bRSVD2 = 0;
 8005e66:	4a17      	ldr	r2, [pc, #92]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005e68:	7a53      	ldrb	r3, [r2, #9]
 8005e6a:	f36f 13c7 	bfc	r3, #7, #1
 8005e6e:	7253      	strb	r3, [r2, #9]
    // Регистр 0x07
    Buffs.Reg07.bFREQ_MODE = 0;
 8005e70:	4a14      	ldr	r2, [pc, #80]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005e72:	7a93      	ldrb	r3, [r2, #10]
 8005e74:	f36f 0300 	bfc	r3, #0, #1
 8005e78:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSOFTBLEND_EN = 1;
 8005e7a:	4a12      	ldr	r2, [pc, #72]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005e7c:	7a93      	ldrb	r3, [r2, #10]
 8005e7e:	f043 0302 	orr.w	r3, r3, #2
 8005e82:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSEEK_TH_OLD = 0;
 8005e84:	4a0f      	ldr	r2, [pc, #60]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005e86:	7a93      	ldrb	r3, [r2, #10]
 8005e88:	f36f 0387 	bfc	r3, #2, #6
 8005e8c:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bRSVD1 = 0;
 8005e8e:	4a0d      	ldr	r2, [pc, #52]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005e90:	7ad3      	ldrb	r3, [r2, #11]
 8005e92:	f36f 0300 	bfc	r3, #0, #1
 8005e96:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.b65M_50M_MODE = 1;
 8005e98:	4a0a      	ldr	r2, [pc, #40]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005e9a:	7ad3      	ldrb	r3, [r2, #11]
 8005e9c:	f043 0302 	orr.w	r3, r3, #2
 8005ea0:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bTH_SOFRBLEND = 16;
 8005ea2:	4a08      	ldr	r2, [pc, #32]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005ea4:	7ad3      	ldrb	r3, [r2, #11]
 8005ea6:	2110      	movs	r1, #16
 8005ea8:	f361 0386 	bfi	r3, r1, #2, #5
 8005eac:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bRSVD2 = 0;
 8005eae:	4a05      	ldr	r2, [pc, #20]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005eb0:	7ad3      	ldrb	r3, [r2, #11]
 8005eb2:	f36f 13c7 	bfc	r3, #7, #1
 8005eb6:	72d3      	strb	r3, [r2, #11]

    // Пишем регистры функцией записи регистрового файла
    rda5807_write_regfile((uint16_t *)&(Buffs.Reg02), 6);
 8005eb8:	2106      	movs	r1, #6
 8005eba:	4802      	ldr	r0, [pc, #8]	; (8005ec4 <rda5807_SetupDefault+0x1b4>)
 8005ebc:	f7ff fe5c 	bl	8005b78 <rda5807_write_regfile>
}
 8005ec0:	bf00      	nop
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	20003630 	.word	0x20003630
 8005ec8:	2000010c 	.word	0x2000010c

08005ecc <rda5807_SetVolume>:

//==============================================================================
// Процедура устанавливает уровень громкости (0..16) выхода rda5807. При Value=0 включает MUTE
//==============================================================================
void rda5807_SetVolume(uint8_t Value)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;
//tReg05h Reg05;
uint8_t Mute = Value ? 0 : 1;
 8005ed6:	79fb      	ldrb	r3, [r7, #7]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	bf0c      	ite	eq
 8005edc:	2301      	moveq	r3, #1
 8005ede:	2300      	movne	r3, #0
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	73fb      	strb	r3, [r7, #15]

    if (Value > 16) Value = 16;
 8005ee4:	79fb      	ldrb	r3, [r7, #7]
 8005ee6:	2b10      	cmp	r3, #16
 8005ee8:	d901      	bls.n	8005eee <rda5807_SetVolume+0x22>
 8005eea:	2310      	movs	r3, #16
 8005eec:	71fb      	strb	r3, [r7, #7]

    Value--;    // Значение для поля Volume на 1 меньше, чем входной параметр функции
 8005eee:	79fb      	ldrb	r3, [r7, #7]
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	71fb      	strb	r3, [r7, #7]

    if (!Mute) {
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d112      	bne.n	8005f20 <rda5807_SetVolume+0x54>
        // Читаем регистр 0x05
        rda5807_read(5, (uint16_t *)&Buffs.Reg05, 1);
 8005efa:	2201      	movs	r2, #1
 8005efc:	4915      	ldr	r1, [pc, #84]	; (8005f54 <rda5807_SetVolume+0x88>)
 8005efe:	2005      	movs	r0, #5
 8005f00:	f7ff fe6e 	bl	8005be0 <rda5807_read>
        // Меняем значение поля VOLUME
        Buffs.Reg05.bVOLUME = Value;
 8005f04:	79fb      	ldrb	r3, [r7, #7]
 8005f06:	f003 030f 	and.w	r3, r3, #15
 8005f0a:	b2d9      	uxtb	r1, r3
 8005f0c:	4a12      	ldr	r2, [pc, #72]	; (8005f58 <rda5807_SetVolume+0x8c>)
 8005f0e:	7993      	ldrb	r3, [r2, #6]
 8005f10:	f361 0303 	bfi	r3, r1, #0, #4
 8005f14:	7193      	strb	r3, [r2, #6]
        // Пишем регистр 0x05
        rda5807_write(5, (uint16_t *)&Buffs.Reg05, 1);
 8005f16:	2201      	movs	r2, #1
 8005f18:	490e      	ldr	r1, [pc, #56]	; (8005f54 <rda5807_SetVolume+0x88>)
 8005f1a:	2005      	movs	r0, #5
 8005f1c:	f7ff fe94 	bl	8005c48 <rda5807_write>
    }

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8005f20:	2201      	movs	r2, #1
 8005f22:	490d      	ldr	r1, [pc, #52]	; (8005f58 <rda5807_SetVolume+0x8c>)
 8005f24:	2002      	movs	r0, #2
 8005f26:	f7ff fe5b 	bl	8005be0 <rda5807_read>
    // Меняем значение поля VOLUME
    Buffs.Reg02.bDMUTE = Mute ? 0 : 1;
 8005f2a:	7bfb      	ldrb	r3, [r7, #15]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	bf0c      	ite	eq
 8005f30:	2301      	moveq	r3, #1
 8005f32:	2300      	movne	r3, #0
 8005f34:	b2d9      	uxtb	r1, r3
 8005f36:	4a08      	ldr	r2, [pc, #32]	; (8005f58 <rda5807_SetVolume+0x8c>)
 8005f38:	7853      	ldrb	r3, [r2, #1]
 8005f3a:	f361 1386 	bfi	r3, r1, #6, #1
 8005f3e:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8005f40:	2201      	movs	r2, #1
 8005f42:	4905      	ldr	r1, [pc, #20]	; (8005f58 <rda5807_SetVolume+0x8c>)
 8005f44:	2002      	movs	r0, #2
 8005f46:	f7ff fe7f 	bl	8005c48 <rda5807_write>
}
 8005f4a:	bf00      	nop
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20003636 	.word	0x20003636
 8005f58:	20003630 	.word	0x20003630

08005f5c <rda5807_SetBassBoost>:

//==============================================================================
// Процедура включает/выключает BassBoost
//==============================================================================
void rda5807_SetBassBoost(uint8_t Value)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	4603      	mov	r3, r0
 8005f64:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8005f66:	2201      	movs	r2, #1
 8005f68:	490b      	ldr	r1, [pc, #44]	; (8005f98 <rda5807_SetBassBoost+0x3c>)
 8005f6a:	2002      	movs	r0, #2
 8005f6c:	f7ff fe38 	bl	8005be0 <rda5807_read>
    // Меняем значение поля BASS
    Buffs.Reg02.bBASS = (Value) ? 1 : 0;
 8005f70:	79fb      	ldrb	r3, [r7, #7]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	bf14      	ite	ne
 8005f76:	2301      	movne	r3, #1
 8005f78:	2300      	moveq	r3, #0
 8005f7a:	b2d9      	uxtb	r1, r3
 8005f7c:	4a06      	ldr	r2, [pc, #24]	; (8005f98 <rda5807_SetBassBoost+0x3c>)
 8005f7e:	7853      	ldrb	r3, [r2, #1]
 8005f80:	f361 1304 	bfi	r3, r1, #4, #1
 8005f84:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8005f86:	2201      	movs	r2, #1
 8005f88:	4903      	ldr	r1, [pc, #12]	; (8005f98 <rda5807_SetBassBoost+0x3c>)
 8005f8a:	2002      	movs	r0, #2
 8005f8c:	f7ff fe5c 	bl	8005c48 <rda5807_write>
}
 8005f90:	bf00      	nop
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	20003630 	.word	0x20003630

08005f9c <rda5807_SetFreq_In100Khz>:
//==============================================================================
// Процедура устанавливает текущую частоту Freq100kHz и стартует перенастройку rda5807 на эту частоту.
// Окончание процесса можно установки можно проконтроллировать по обнулению бита STR в регистре 0x0A (функцией rda5807_Get_SeekTuneReadyFlag)
//==============================================================================
void rda5807_SetFreq_In100Khz(uint16_t Freq100kHz)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	80fb      	strh	r3, [r7, #6]
//tReg03h Reg03;
uint16_t l = 870, r = 1080;
 8005fa6:	f240 3366 	movw	r3, #870	; 0x366
 8005faa:	81fb      	strh	r3, [r7, #14]
 8005fac:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8005fb0:	81bb      	strh	r3, [r7, #12]

    // Проверка входного параметра для диапазона Buffs.Reg03.bBAND
	switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8005fb2:	4b33      	ldr	r3, [pc, #204]	; (8006080 <rda5807_SetFreq_In100Khz+0xe4>)
 8005fb4:	789b      	ldrb	r3, [r3, #2]
 8005fb6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b03      	cmp	r3, #3
 8005fbe:	d011      	beq.n	8005fe4 <rda5807_SetFreq_In100Khz+0x48>
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	dc16      	bgt.n	8005ff2 <rda5807_SetFreq_In100Khz+0x56>
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d002      	beq.n	8005fce <rda5807_SetFreq_In100Khz+0x32>
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d007      	beq.n	8005fdc <rda5807_SetFreq_In100Khz+0x40>
 8005fcc:	e011      	b.n	8005ff2 <rda5807_SetFreq_In100Khz+0x56>
		//case 0:// 00 = 87–108 MHz (US/Europe)
		//break;
		case 1:// 01 = 76–91 MHz (Japan)
			l = 760;
 8005fce:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005fd2:	81fb      	strh	r3, [r7, #14]
			r = 910;
 8005fd4:	f240 338e 	movw	r3, #910	; 0x38e
 8005fd8:	81bb      	strh	r3, [r7, #12]
		break;
 8005fda:	e00a      	b.n	8005ff2 <rda5807_SetFreq_In100Khz+0x56>
		case 2:// 10 = 76–108 MHz (world wide)
			l = 760;
 8005fdc:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005fe0:	81fb      	strh	r3, [r7, #14]
		break;
 8005fe2:	e006      	b.n	8005ff2 <rda5807_SetFreq_In100Khz+0x56>
		case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
			l = 650;
 8005fe4:	f240 238a 	movw	r3, #650	; 0x28a
 8005fe8:	81fb      	strh	r3, [r7, #14]
			r = 760;
 8005fea:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005fee:	81bb      	strh	r3, [r7, #12]
		break;
 8005ff0:	bf00      	nop
	}
	lBand = ((float)l) / 10;
 8005ff2:	89fb      	ldrh	r3, [r7, #14]
 8005ff4:	ee07 3a90 	vmov	s15, r3
 8005ff8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ffc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006000:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006004:	4b1f      	ldr	r3, [pc, #124]	; (8006084 <rda5807_SetFreq_In100Khz+0xe8>)
 8006006:	edc3 7a00 	vstr	s15, [r3]
	rBand = ((float)r) / 10;
 800600a:	89bb      	ldrh	r3, [r7, #12]
 800600c:	ee07 3a90 	vmov	s15, r3
 8006010:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006014:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006018:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800601c:	4b1a      	ldr	r3, [pc, #104]	; (8006088 <rda5807_SetFreq_In100Khz+0xec>)
 800601e:	edc3 7a00 	vstr	s15, [r3]

    if (Freq100kHz < l)  Freq100kHz = l;
 8006022:	88fa      	ldrh	r2, [r7, #6]
 8006024:	89fb      	ldrh	r3, [r7, #14]
 8006026:	429a      	cmp	r2, r3
 8006028:	d201      	bcs.n	800602e <rda5807_SetFreq_In100Khz+0x92>
 800602a:	89fb      	ldrh	r3, [r7, #14]
 800602c:	80fb      	strh	r3, [r7, #6]
    if (Freq100kHz > r) Freq100kHz = r;
 800602e:	88fa      	ldrh	r2, [r7, #6]
 8006030:	89bb      	ldrh	r3, [r7, #12]
 8006032:	429a      	cmp	r2, r3
 8006034:	d901      	bls.n	800603a <rda5807_SetFreq_In100Khz+0x9e>
 8006036:	89bb      	ldrh	r3, [r7, #12]
 8006038:	80fb      	strh	r3, [r7, #6]

    // Вычитаем начало диапазона (left)
    Freq100kHz -= l;
 800603a:	88fa      	ldrh	r2, [r7, #6]
 800603c:	89fb      	ldrh	r3, [r7, #14]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	80fb      	strh	r3, [r7, #6]

    // Читаем регистр 0x03
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 8006042:	2201      	movs	r2, #1
 8006044:	4911      	ldr	r1, [pc, #68]	; (800608c <rda5807_SetFreq_In100Khz+0xf0>)
 8006046:	2003      	movs	r0, #3
 8006048:	f7ff fdca 	bl	8005be0 <rda5807_read>
    // Меняем значение поля CHAN
    Buffs.Reg03.bCHAN = Freq100kHz;
 800604c:	88fb      	ldrh	r3, [r7, #6]
 800604e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006052:	b299      	uxth	r1, r3
 8006054:	4a0a      	ldr	r2, [pc, #40]	; (8006080 <rda5807_SetFreq_In100Khz+0xe4>)
 8006056:	8853      	ldrh	r3, [r2, #2]
 8006058:	f361 138f 	bfi	r3, r1, #6, #10
 800605c:	8053      	strh	r3, [r2, #2]
    // Выставляем флаг начала перенастройки на канал
    Buffs.Reg03.bTUNE = 1;
 800605e:	4a08      	ldr	r2, [pc, #32]	; (8006080 <rda5807_SetFreq_In100Khz+0xe4>)
 8006060:	7893      	ldrb	r3, [r2, #2]
 8006062:	f043 0310 	orr.w	r3, r3, #16
 8006066:	7093      	strb	r3, [r2, #2]
    // Пишем регистр 0x03
    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 8006068:	2201      	movs	r2, #1
 800606a:	4908      	ldr	r1, [pc, #32]	; (800608c <rda5807_SetFreq_In100Khz+0xf0>)
 800606c:	2003      	movs	r0, #3
 800606e:	f7ff fdeb 	bl	8005c48 <rda5807_write>

    HAL_Delay(50);
 8006072:	2032      	movs	r0, #50	; 0x32
 8006074:	f001 fce6 	bl	8007a44 <HAL_Delay>
}
 8006078:	bf00      	nop
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	20003630 	.word	0x20003630
 8006084:	20002f4c 	.word	0x20002f4c
 8006088:	20002f50 	.word	0x20002f50
 800608c:	20003632 	.word	0x20003632

08006090 <rda5807_GetFreq_In100Khz>:

//==============================================================================
// Функция читает текущую частоту, на которую настроен rda5807
//==============================================================================
uint16_t rda5807_GetFreq_In100Khz()
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8006096:	2201      	movs	r2, #1
 8006098:	491b      	ldr	r1, [pc, #108]	; (8006108 <rda5807_GetFreq_In100Khz+0x78>)
 800609a:	200a      	movs	r0, #10
 800609c:	f7ff fda0 	bl	8005be0 <rda5807_read>

    uint16_t Freq100kHz = Buffs.Reg0A.bREADCHAN;
 80060a0:	4b1a      	ldr	r3, [pc, #104]	; (800610c <rda5807_GetFreq_In100Khz+0x7c>)
 80060a2:	8a1b      	ldrh	r3, [r3, #16]
 80060a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	80bb      	strh	r3, [r7, #4]

    if (Freq100kHz == 319) return 0;
 80060ac:	88bb      	ldrh	r3, [r7, #4]
 80060ae:	f240 123f 	movw	r2, #319	; 0x13f
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d101      	bne.n	80060ba <rda5807_GetFreq_In100Khz+0x2a>
 80060b6:	2300      	movs	r3, #0
 80060b8:	e021      	b.n	80060fe <rda5807_GetFreq_In100Khz+0x6e>

    // Прибавляем начало диапазона (87 МГц)
    uint16_t left = 870;
 80060ba:	f240 3366 	movw	r3, #870	; 0x366
 80060be:	80fb      	strh	r3, [r7, #6]
    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 80060c0:	4b12      	ldr	r3, [pc, #72]	; (800610c <rda5807_GetFreq_In100Khz+0x7c>)
 80060c2:	789b      	ldrb	r3, [r3, #2]
 80060c4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d00e      	beq.n	80060ec <rda5807_GetFreq_In100Khz+0x5c>
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	dc10      	bgt.n	80060f4 <rda5807_GetFreq_In100Khz+0x64>
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d002      	beq.n	80060dc <rda5807_GetFreq_In100Khz+0x4c>
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d004      	beq.n	80060e4 <rda5807_GetFreq_In100Khz+0x54>
 80060da:	e00b      	b.n	80060f4 <rda5807_GetFreq_In100Khz+0x64>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		left = 760;
 80060dc:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80060e0:	80fb      	strh	r3, [r7, #6]
    	break;
 80060e2:	e007      	b.n	80060f4 <rda5807_GetFreq_In100Khz+0x64>
    	case 2:// 10 = 76–108 MHz (world wide)
    		left = 760;
 80060e4:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80060e8:	80fb      	strh	r3, [r7, #6]
    	break;
 80060ea:	e003      	b.n	80060f4 <rda5807_GetFreq_In100Khz+0x64>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		left = 650;
 80060ec:	f240 238a 	movw	r3, #650	; 0x28a
 80060f0:	80fb      	strh	r3, [r7, #6]
    	break;
 80060f2:	bf00      	nop
    }
    Freq100kHz += left;
 80060f4:	88ba      	ldrh	r2, [r7, #4]
 80060f6:	88fb      	ldrh	r3, [r7, #6]
 80060f8:	4413      	add	r3, r2
 80060fa:	80bb      	strh	r3, [r7, #4]

    return Freq100kHz;
 80060fc:	88bb      	ldrh	r3, [r7, #4]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20003640 	.word	0x20003640
 800610c:	20003630 	.word	0x20003630

08006110 <rda5807_StartSeek>:

//==============================================================================
// Процедура стартует поиск радиостанции вверх/вниз
//==============================================================================
void rda5807_StartSeek(uint8_t Up)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	4603      	mov	r3, r0
 8006118:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 800611a:	2201      	movs	r2, #1
 800611c:	4910      	ldr	r1, [pc, #64]	; (8006160 <rda5807_StartSeek+0x50>)
 800611e:	2002      	movs	r0, #2
 8006120:	f7ff fd5e 	bl	8005be0 <rda5807_read>

    Buffs.Reg02.bSKMODE = 1;          // 07 Seek Mode (0 = wrap at the upper or lower band limit and continue seeking; 1 = stop seeking at the upper or lower band limit)
 8006124:	4a0e      	ldr	r2, [pc, #56]	; (8006160 <rda5807_StartSeek+0x50>)
 8006126:	7813      	ldrb	r3, [r2, #0]
 8006128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612c:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 1;            // 08 Seek (0 = Disable stop seek; 1 = Enable)
 800612e:	4a0c      	ldr	r2, [pc, #48]	; (8006160 <rda5807_StartSeek+0x50>)
 8006130:	7853      	ldrb	r3, [r2, #1]
 8006132:	f043 0301 	orr.w	r3, r3, #1
 8006136:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = Up ? 1 : 0; // 09 Seek Up (0 = Seek down; 1 = Seek up)
 8006138:	79fb      	ldrb	r3, [r7, #7]
 800613a:	2b00      	cmp	r3, #0
 800613c:	bf14      	ite	ne
 800613e:	2301      	movne	r3, #1
 8006140:	2300      	moveq	r3, #0
 8006142:	b2d9      	uxtb	r1, r3
 8006144:	4a06      	ldr	r2, [pc, #24]	; (8006160 <rda5807_StartSeek+0x50>)
 8006146:	7853      	ldrb	r3, [r2, #1]
 8006148:	f361 0341 	bfi	r3, r1, #1, #1
 800614c:	7053      	strb	r3, [r2, #1]

    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 800614e:	2201      	movs	r2, #1
 8006150:	4903      	ldr	r1, [pc, #12]	; (8006160 <rda5807_StartSeek+0x50>)
 8006152:	2002      	movs	r0, #2
 8006154:	f7ff fd78 	bl	8005c48 <rda5807_write>
}
 8006158:	bf00      	nop
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	20003630 	.word	0x20003630

08006164 <rda5807_Get_SeekTuneReadyFlag>:
//==============================================================================
// Функция возвращает состояние бита STR (SeekTuneReadyFlag)
// SeekTuneReadyFlag=1 пока идёт процесс настройки на частоту или поиск радиостанции.
//==============================================================================
uint8_t rda5807_Get_SeekTuneReadyFlag()
{
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8006168:	2201      	movs	r2, #1
 800616a:	4905      	ldr	r1, [pc, #20]	; (8006180 <rda5807_Get_SeekTuneReadyFlag+0x1c>)
 800616c:	200a      	movs	r0, #10
 800616e:	f7ff fd37 	bl	8005be0 <rda5807_read>

    return Buffs.Reg0A.bSTC;
 8006172:	4b04      	ldr	r3, [pc, #16]	; (8006184 <rda5807_Get_SeekTuneReadyFlag+0x20>)
 8006174:	7c5b      	ldrb	r3, [r3, #17]
 8006176:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800617a:	b2db      	uxtb	r3, r3
}
 800617c:	4618      	mov	r0, r3
 800617e:	bd80      	pop	{r7, pc}
 8006180:	20003640 	.word	0x20003640
 8006184:	20003630 	.word	0x20003630

08006188 <rda5807_Get_StereoMonoFlag>:
//==============================================================================
//==============================================================================
bool rda5807_Get_StereoMonoFlag()
{
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 800618c:	2201      	movs	r2, #1
 800618e:	4908      	ldr	r1, [pc, #32]	; (80061b0 <rda5807_Get_StereoMonoFlag+0x28>)
 8006190:	200a      	movs	r0, #10
 8006192:	f7ff fd25 	bl	8005be0 <rda5807_read>

    return Buffs.Reg0A.bST;     // Stereo Indicator (0 = Mono; 1 = Stereo)
 8006196:	4b07      	ldr	r3, [pc, #28]	; (80061b4 <rda5807_Get_StereoMonoFlag+0x2c>)
 8006198:	7c5b      	ldrb	r3, [r3, #17]
 800619a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	bf14      	ite	ne
 80061a4:	2301      	movne	r3, #1
 80061a6:	2300      	moveq	r3, #0
 80061a8:	b2db      	uxtb	r3, r3
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20003640 	.word	0x20003640
 80061b4:	20003630 	.word	0x20003630

080061b8 <rda5807_Get_Channel>:
//==============================================================================
uint16_t rda5807_Get_Channel()
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 80061bc:	2201      	movs	r2, #1
 80061be:	4905      	ldr	r1, [pc, #20]	; (80061d4 <rda5807_Get_Channel+0x1c>)
 80061c0:	200a      	movs	r0, #10
 80061c2:	f7ff fd0d 	bl	8005be0 <rda5807_read>

    return Buffs.Reg0A.bREADCHAN;    // 0-9 Read Channel.
 80061c6:	4b04      	ldr	r3, [pc, #16]	; (80061d8 <rda5807_Get_Channel+0x20>)
 80061c8:	8a1b      	ldrh	r3, [r3, #16]
 80061ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061ce:	b29b      	uxth	r3, r3
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	20003640 	.word	0x20003640
 80061d8:	20003630 	.word	0x20003630

080061dc <rda5807_Set_Band>:
//==============================================================================
uint8_t rda5807_Set_Band(uint8_t band)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	4603      	mov	r3, r0
 80061e4:	71fb      	strb	r3, [r7, #7]
	if (band > 3) return 1;
 80061e6:	79fb      	ldrb	r3, [r7, #7]
 80061e8:	2b03      	cmp	r3, #3
 80061ea:	d901      	bls.n	80061f0 <rda5807_Set_Band+0x14>
 80061ec:	2301      	movs	r3, #1
 80061ee:	e054      	b.n	800629a <rda5807_Set_Band+0xbe>

    // Читаем регистр 3
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 80061f0:	2201      	movs	r2, #1
 80061f2:	492c      	ldr	r1, [pc, #176]	; (80062a4 <rda5807_Set_Band+0xc8>)
 80061f4:	2003      	movs	r0, #3
 80061f6:	f7ff fcf3 	bl	8005be0 <rda5807_read>

    Buffs.Reg03.bBAND = band;
 80061fa:	79fb      	ldrb	r3, [r7, #7]
 80061fc:	f003 0303 	and.w	r3, r3, #3
 8006200:	b2d9      	uxtb	r1, r3
 8006202:	4a29      	ldr	r2, [pc, #164]	; (80062a8 <rda5807_Set_Band+0xcc>)
 8006204:	7893      	ldrb	r3, [r2, #2]
 8006206:	f361 0383 	bfi	r3, r1, #2, #2
 800620a:	7093      	strb	r3, [r2, #2]

    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 800620c:	2201      	movs	r2, #1
 800620e:	4925      	ldr	r1, [pc, #148]	; (80062a4 <rda5807_Set_Band+0xc8>)
 8006210:	2003      	movs	r0, #3
 8006212:	f7ff fd19 	bl	8005c48 <rda5807_write>

    uint16_t l = 870, r = 1080;
 8006216:	f240 3366 	movw	r3, #870	; 0x366
 800621a:	81fb      	strh	r3, [r7, #14]
 800621c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8006220:	81bb      	strh	r3, [r7, #12]

    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8006222:	4b21      	ldr	r3, [pc, #132]	; (80062a8 <rda5807_Set_Band+0xcc>)
 8006224:	789b      	ldrb	r3, [r3, #2]
 8006226:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b03      	cmp	r3, #3
 800622e:	d011      	beq.n	8006254 <rda5807_Set_Band+0x78>
 8006230:	2b03      	cmp	r3, #3
 8006232:	dc16      	bgt.n	8006262 <rda5807_Set_Band+0x86>
 8006234:	2b01      	cmp	r3, #1
 8006236:	d002      	beq.n	800623e <rda5807_Set_Band+0x62>
 8006238:	2b02      	cmp	r3, #2
 800623a:	d007      	beq.n	800624c <rda5807_Set_Band+0x70>
 800623c:	e011      	b.n	8006262 <rda5807_Set_Band+0x86>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		l = 760;
 800623e:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8006242:	81fb      	strh	r3, [r7, #14]
    		r = 910;
 8006244:	f240 338e 	movw	r3, #910	; 0x38e
 8006248:	81bb      	strh	r3, [r7, #12]
    	break;
 800624a:	e00a      	b.n	8006262 <rda5807_Set_Band+0x86>
    	case 2:// 10 = 76–108 MHz (world wide)
    		l = 760;
 800624c:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8006250:	81fb      	strh	r3, [r7, #14]
    	break;
 8006252:	e006      	b.n	8006262 <rda5807_Set_Band+0x86>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		l = 650;
 8006254:	f240 238a 	movw	r3, #650	; 0x28a
 8006258:	81fb      	strh	r3, [r7, #14]
    		r = 760;
 800625a:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 800625e:	81bb      	strh	r3, [r7, #12]
    	break;
 8006260:	bf00      	nop
    }
    lBand = ((float)l) / 10;
 8006262:	89fb      	ldrh	r3, [r7, #14]
 8006264:	ee07 3a90 	vmov	s15, r3
 8006268:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800626c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006270:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006274:	4b0d      	ldr	r3, [pc, #52]	; (80062ac <rda5807_Set_Band+0xd0>)
 8006276:	edc3 7a00 	vstr	s15, [r3]
    rBand = ((float)r) / 10;
 800627a:	89bb      	ldrh	r3, [r7, #12]
 800627c:	ee07 3a90 	vmov	s15, r3
 8006280:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006284:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006288:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800628c:	4b08      	ldr	r3, [pc, #32]	; (80062b0 <rda5807_Set_Band+0xd4>)
 800628e:	edc3 7a00 	vstr	s15, [r3]

    HAL_Delay(50);
 8006292:	2032      	movs	r0, #50	; 0x32
 8006294:	f001 fbd6 	bl	8007a44 <HAL_Delay>

    return 0;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	20003632 	.word	0x20003632
 80062a8:	20003630 	.word	0x20003630
 80062ac:	20002f4c 	.word	0x20002f4c
 80062b0:	20002f50 	.word	0x20002f50

080062b4 <rda5807_Set_Mute>:
//==============================================================================
void rda5807_Set_Mute(uint8_t mute)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	4603      	mov	r3, r0
 80062bc:	71fb      	strb	r3, [r7, #7]
	// Читаем регистр 2
	rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 80062be:	2201      	movs	r2, #1
 80062c0:	490a      	ldr	r1, [pc, #40]	; (80062ec <rda5807_Set_Mute+0x38>)
 80062c2:	2002      	movs	r0, #2
 80062c4:	f7ff fc8c 	bl	8005be0 <rda5807_read>

	Buffs.Reg02.bDMUTE = mute & 1;
 80062c8:	79fb      	ldrb	r3, [r7, #7]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	b2d9      	uxtb	r1, r3
 80062d0:	4a06      	ldr	r2, [pc, #24]	; (80062ec <rda5807_Set_Mute+0x38>)
 80062d2:	7853      	ldrb	r3, [r2, #1]
 80062d4:	f361 1386 	bfi	r3, r1, #6, #1
 80062d8:	7053      	strb	r3, [r2, #1]

	rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 80062da:	2201      	movs	r2, #1
 80062dc:	4903      	ldr	r1, [pc, #12]	; (80062ec <rda5807_Set_Mute+0x38>)
 80062de:	2002      	movs	r0, #2
 80062e0:	f7ff fcb2 	bl	8005c48 <rda5807_write>
}
 80062e4:	bf00      	nop
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	20003630 	.word	0x20003630

080062f0 <rda5807_Get_RDSData>:
	return Buffs.Reg0A.bRDSR;
}
*/
//==============================================================================
bool rda5807_Get_RDSData(uint8_t *data, bool *sync)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
	rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 80062fa:	2201      	movs	r2, #1
 80062fc:	4914      	ldr	r1, [pc, #80]	; (8006350 <rda5807_Get_RDSData+0x60>)
 80062fe:	200a      	movs	r0, #10
 8006300:	f7ff fc6e 	bl	8005be0 <rda5807_read>

	*sync = Buffs.Reg0A.bRDSS;
 8006304:	4b13      	ldr	r3, [pc, #76]	; (8006354 <rda5807_Get_RDSData+0x64>)
 8006306:	7c5b      	ldrb	r3, [r3, #17]
 8006308:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	bf14      	ite	ne
 8006312:	2301      	movne	r3, #1
 8006314:	2300      	moveq	r3, #0
 8006316:	b2da      	uxtb	r2, r3
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	701a      	strb	r2, [r3, #0]

	if (Buffs.Reg0A.bRDSR) rda5807_read(0x0C, (uint16_t *)data, 4);
 800631c:	4b0d      	ldr	r3, [pc, #52]	; (8006354 <rda5807_Get_RDSData+0x64>)
 800631e:	7c5b      	ldrb	r3, [r3, #17]
 8006320:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d004      	beq.n	8006334 <rda5807_Get_RDSData+0x44>
 800632a:	2204      	movs	r2, #4
 800632c:	6879      	ldr	r1, [r7, #4]
 800632e:	200c      	movs	r0, #12
 8006330:	f7ff fc56 	bl	8005be0 <rda5807_read>

	return Buffs.Reg0A.bRDSR;
 8006334:	4b07      	ldr	r3, [pc, #28]	; (8006354 <rda5807_Get_RDSData+0x64>)
 8006336:	7c5b      	ldrb	r3, [r3, #17]
 8006338:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	bf14      	ite	ne
 8006342:	2301      	movne	r3, #1
 8006344:	2300      	moveq	r3, #0
 8006346:	b2db      	uxtb	r3, r3
}
 8006348:	4618      	mov	r0, r3
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	20003640 	.word	0x20003640
 8006354:	20003630 	.word	0x20003630

08006358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800635e:	4b11      	ldr	r3, [pc, #68]	; (80063a4 <HAL_MspInit+0x4c>)
 8006360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006362:	4a10      	ldr	r2, [pc, #64]	; (80063a4 <HAL_MspInit+0x4c>)
 8006364:	f043 0301 	orr.w	r3, r3, #1
 8006368:	6613      	str	r3, [r2, #96]	; 0x60
 800636a:	4b0e      	ldr	r3, [pc, #56]	; (80063a4 <HAL_MspInit+0x4c>)
 800636c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	607b      	str	r3, [r7, #4]
 8006374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006376:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <HAL_MspInit+0x4c>)
 8006378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637a:	4a0a      	ldr	r2, [pc, #40]	; (80063a4 <HAL_MspInit+0x4c>)
 800637c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006380:	6593      	str	r3, [r2, #88]	; 0x58
 8006382:	4b08      	ldr	r3, [pc, #32]	; (80063a4 <HAL_MspInit+0x4c>)
 8006384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800638e:	2200      	movs	r2, #0
 8006390:	210f      	movs	r1, #15
 8006392:	f06f 0001 	mvn.w	r0, #1
 8006396:	f001 fc31 	bl	8007bfc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800639a:	bf00      	nop
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	40021000 	.word	0x40021000

080063a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b0ac      	sub	sp, #176	; 0xb0
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	605a      	str	r2, [r3, #4]
 80063ba:	609a      	str	r2, [r3, #8]
 80063bc:	60da      	str	r2, [r3, #12]
 80063be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80063c0:	f107 0314 	add.w	r3, r7, #20
 80063c4:	2288      	movs	r2, #136	; 0x88
 80063c6:	2100      	movs	r1, #0
 80063c8:	4618      	mov	r0, r3
 80063ca:	f00d f8c9 	bl	8013560 <memset>
  if(hi2c->Instance==I2C1)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a57      	ldr	r2, [pc, #348]	; (8006530 <HAL_I2C_MspInit+0x188>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	f040 80a7 	bne.w	8006528 <HAL_I2C_MspInit+0x180>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80063da:	2340      	movs	r3, #64	; 0x40
 80063dc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80063de:	2300      	movs	r3, #0
 80063e0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80063e2:	f107 0314 	add.w	r3, r7, #20
 80063e6:	4618      	mov	r0, r3
 80063e8:	f004 fc6e 	bl	800acc8 <HAL_RCCEx_PeriphCLKConfig>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80063f2:	f7ff fb0d 	bl	8005a10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063f6:	4b4f      	ldr	r3, [pc, #316]	; (8006534 <HAL_I2C_MspInit+0x18c>)
 80063f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063fa:	4a4e      	ldr	r2, [pc, #312]	; (8006534 <HAL_I2C_MspInit+0x18c>)
 80063fc:	f043 0302 	orr.w	r3, r3, #2
 8006400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006402:	4b4c      	ldr	r3, [pc, #304]	; (8006534 <HAL_I2C_MspInit+0x18c>)
 8006404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	613b      	str	r3, [r7, #16]
 800640c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800640e:	23c0      	movs	r3, #192	; 0xc0
 8006410:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006414:	2312      	movs	r3, #18
 8006416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800641a:	2300      	movs	r3, #0
 800641c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006420:	2302      	movs	r3, #2
 8006422:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006426:	2304      	movs	r3, #4
 8006428:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800642c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006430:	4619      	mov	r1, r3
 8006432:	4841      	ldr	r0, [pc, #260]	; (8006538 <HAL_I2C_MspInit+0x190>)
 8006434:	f001 fe90 	bl	8008158 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB6);
 8006438:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800643c:	f003 fcf2 	bl	8009e24 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 8006440:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006444:	f003 fcee 	bl	8009e24 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006448:	4b3a      	ldr	r3, [pc, #232]	; (8006534 <HAL_I2C_MspInit+0x18c>)
 800644a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800644c:	4a39      	ldr	r2, [pc, #228]	; (8006534 <HAL_I2C_MspInit+0x18c>)
 800644e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006452:	6593      	str	r3, [r2, #88]	; 0x58
 8006454:	4b37      	ldr	r3, [pc, #220]	; (8006534 <HAL_I2C_MspInit+0x18c>)
 8006456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA2_Channel6;
 8006460:	4b36      	ldr	r3, [pc, #216]	; (800653c <HAL_I2C_MspInit+0x194>)
 8006462:	4a37      	ldr	r2, [pc, #220]	; (8006540 <HAL_I2C_MspInit+0x198>)
 8006464:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_5;
 8006466:	4b35      	ldr	r3, [pc, #212]	; (800653c <HAL_I2C_MspInit+0x194>)
 8006468:	2205      	movs	r2, #5
 800646a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800646c:	4b33      	ldr	r3, [pc, #204]	; (800653c <HAL_I2C_MspInit+0x194>)
 800646e:	2200      	movs	r2, #0
 8006470:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006472:	4b32      	ldr	r3, [pc, #200]	; (800653c <HAL_I2C_MspInit+0x194>)
 8006474:	2200      	movs	r2, #0
 8006476:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006478:	4b30      	ldr	r3, [pc, #192]	; (800653c <HAL_I2C_MspInit+0x194>)
 800647a:	2280      	movs	r2, #128	; 0x80
 800647c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800647e:	4b2f      	ldr	r3, [pc, #188]	; (800653c <HAL_I2C_MspInit+0x194>)
 8006480:	2200      	movs	r2, #0
 8006482:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006484:	4b2d      	ldr	r3, [pc, #180]	; (800653c <HAL_I2C_MspInit+0x194>)
 8006486:	2200      	movs	r2, #0
 8006488:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800648a:	4b2c      	ldr	r3, [pc, #176]	; (800653c <HAL_I2C_MspInit+0x194>)
 800648c:	2200      	movs	r2, #0
 800648e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006490:	4b2a      	ldr	r3, [pc, #168]	; (800653c <HAL_I2C_MspInit+0x194>)
 8006492:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006496:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8006498:	4828      	ldr	r0, [pc, #160]	; (800653c <HAL_I2C_MspInit+0x194>)
 800649a:	f001 fbd9 	bl	8007c50 <HAL_DMA_Init>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <HAL_I2C_MspInit+0x100>
    {
      Error_Handler();
 80064a4:	f7ff fab4 	bl	8005a10 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a24      	ldr	r2, [pc, #144]	; (800653c <HAL_I2C_MspInit+0x194>)
 80064ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80064ae:	4a23      	ldr	r2, [pc, #140]	; (800653c <HAL_I2C_MspInit+0x194>)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80064b4:	4b23      	ldr	r3, [pc, #140]	; (8006544 <HAL_I2C_MspInit+0x19c>)
 80064b6:	4a24      	ldr	r2, [pc, #144]	; (8006548 <HAL_I2C_MspInit+0x1a0>)
 80064b8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 80064ba:	4b22      	ldr	r3, [pc, #136]	; (8006544 <HAL_I2C_MspInit+0x19c>)
 80064bc:	2203      	movs	r2, #3
 80064be:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064c0:	4b20      	ldr	r3, [pc, #128]	; (8006544 <HAL_I2C_MspInit+0x19c>)
 80064c2:	2210      	movs	r2, #16
 80064c4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064c6:	4b1f      	ldr	r3, [pc, #124]	; (8006544 <HAL_I2C_MspInit+0x19c>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80064cc:	4b1d      	ldr	r3, [pc, #116]	; (8006544 <HAL_I2C_MspInit+0x19c>)
 80064ce:	2280      	movs	r2, #128	; 0x80
 80064d0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064d2:	4b1c      	ldr	r3, [pc, #112]	; (8006544 <HAL_I2C_MspInit+0x19c>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064d8:	4b1a      	ldr	r3, [pc, #104]	; (8006544 <HAL_I2C_MspInit+0x19c>)
 80064da:	2200      	movs	r2, #0
 80064dc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80064de:	4b19      	ldr	r3, [pc, #100]	; (8006544 <HAL_I2C_MspInit+0x19c>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80064e4:	4b17      	ldr	r3, [pc, #92]	; (8006544 <HAL_I2C_MspInit+0x19c>)
 80064e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80064ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80064ec:	4815      	ldr	r0, [pc, #84]	; (8006544 <HAL_I2C_MspInit+0x19c>)
 80064ee:	f001 fbaf 	bl	8007c50 <HAL_DMA_Init>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <HAL_I2C_MspInit+0x154>
    {
      Error_Handler();
 80064f8:	f7ff fa8a 	bl	8005a10 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a11      	ldr	r2, [pc, #68]	; (8006544 <HAL_I2C_MspInit+0x19c>)
 8006500:	639a      	str	r2, [r3, #56]	; 0x38
 8006502:	4a10      	ldr	r2, [pc, #64]	; (8006544 <HAL_I2C_MspInit+0x19c>)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8006508:	2200      	movs	r2, #0
 800650a:	2105      	movs	r1, #5
 800650c:	201f      	movs	r0, #31
 800650e:	f001 fb75 	bl	8007bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006512:	201f      	movs	r0, #31
 8006514:	f001 fb8e 	bl	8007c34 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8006518:	2200      	movs	r2, #0
 800651a:	2105      	movs	r1, #5
 800651c:	2020      	movs	r0, #32
 800651e:	f001 fb6d 	bl	8007bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8006522:	2020      	movs	r0, #32
 8006524:	f001 fb86 	bl	8007c34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006528:	bf00      	nop
 800652a:	37b0      	adds	r7, #176	; 0xb0
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	40005400 	.word	0x40005400
 8006534:	40021000 	.word	0x40021000
 8006538:	48000400 	.word	0x48000400
 800653c:	200009ec 	.word	0x200009ec
 8006540:	4002046c 	.word	0x4002046c
 8006544:	20000a34 	.word	0x20000a34
 8006548:	4002006c 	.word	0x4002006c

0800654c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b0a4      	sub	sp, #144	; 0x90
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006554:	f107 0308 	add.w	r3, r7, #8
 8006558:	2288      	movs	r2, #136	; 0x88
 800655a:	2100      	movs	r1, #0
 800655c:	4618      	mov	r0, r3
 800655e:	f00c ffff 	bl	8013560 <memset>
  if(hrtc->Instance==RTC)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a10      	ldr	r2, [pc, #64]	; (80065a8 <HAL_RTC_MspInit+0x5c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d118      	bne.n	800659e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800656c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006570:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006572:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006576:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800657a:	f107 0308 	add.w	r3, r7, #8
 800657e:	4618      	mov	r0, r3
 8006580:	f004 fba2 	bl	800acc8 <HAL_RCCEx_PeriphCLKConfig>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800658a:	f7ff fa41 	bl	8005a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800658e:	4b07      	ldr	r3, [pc, #28]	; (80065ac <HAL_RTC_MspInit+0x60>)
 8006590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006594:	4a05      	ldr	r2, [pc, #20]	; (80065ac <HAL_RTC_MspInit+0x60>)
 8006596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800659a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800659e:	bf00      	nop
 80065a0:	3790      	adds	r7, #144	; 0x90
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	40002800 	.word	0x40002800
 80065ac:	40021000 	.word	0x40021000

080065b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08c      	sub	sp, #48	; 0x30
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065b8:	f107 031c 	add.w	r3, r7, #28
 80065bc:	2200      	movs	r2, #0
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	605a      	str	r2, [r3, #4]
 80065c2:	609a      	str	r2, [r3, #8]
 80065c4:	60da      	str	r2, [r3, #12]
 80065c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a76      	ldr	r2, [pc, #472]	; (80067a8 <HAL_SPI_MspInit+0x1f8>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d15b      	bne.n	800668a <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80065d2:	4b76      	ldr	r3, [pc, #472]	; (80067ac <HAL_SPI_MspInit+0x1fc>)
 80065d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065d6:	4a75      	ldr	r2, [pc, #468]	; (80067ac <HAL_SPI_MspInit+0x1fc>)
 80065d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065dc:	6613      	str	r3, [r2, #96]	; 0x60
 80065de:	4b73      	ldr	r3, [pc, #460]	; (80067ac <HAL_SPI_MspInit+0x1fc>)
 80065e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065ea:	4b70      	ldr	r3, [pc, #448]	; (80067ac <HAL_SPI_MspInit+0x1fc>)
 80065ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ee:	4a6f      	ldr	r2, [pc, #444]	; (80067ac <HAL_SPI_MspInit+0x1fc>)
 80065f0:	f043 0301 	orr.w	r3, r3, #1
 80065f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065f6:	4b6d      	ldr	r3, [pc, #436]	; (80067ac <HAL_SPI_MspInit+0x1fc>)
 80065f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	617b      	str	r3, [r7, #20]
 8006600:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8006602:	23a0      	movs	r3, #160	; 0xa0
 8006604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006606:	2302      	movs	r3, #2
 8006608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800660a:	2300      	movs	r3, #0
 800660c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800660e:	2303      	movs	r3, #3
 8006610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006612:	2305      	movs	r3, #5
 8006614:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006616:	f107 031c 	add.w	r3, r7, #28
 800661a:	4619      	mov	r1, r3
 800661c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006620:	f001 fd9a 	bl	8008158 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Channel4;
 8006624:	4b62      	ldr	r3, [pc, #392]	; (80067b0 <HAL_SPI_MspInit+0x200>)
 8006626:	4a63      	ldr	r2, [pc, #396]	; (80067b4 <HAL_SPI_MspInit+0x204>)
 8006628:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_4;
 800662a:	4b61      	ldr	r3, [pc, #388]	; (80067b0 <HAL_SPI_MspInit+0x200>)
 800662c:	2204      	movs	r2, #4
 800662e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006630:	4b5f      	ldr	r3, [pc, #380]	; (80067b0 <HAL_SPI_MspInit+0x200>)
 8006632:	2210      	movs	r2, #16
 8006634:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006636:	4b5e      	ldr	r3, [pc, #376]	; (80067b0 <HAL_SPI_MspInit+0x200>)
 8006638:	2200      	movs	r2, #0
 800663a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800663c:	4b5c      	ldr	r3, [pc, #368]	; (80067b0 <HAL_SPI_MspInit+0x200>)
 800663e:	2280      	movs	r2, #128	; 0x80
 8006640:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006642:	4b5b      	ldr	r3, [pc, #364]	; (80067b0 <HAL_SPI_MspInit+0x200>)
 8006644:	2200      	movs	r2, #0
 8006646:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006648:	4b59      	ldr	r3, [pc, #356]	; (80067b0 <HAL_SPI_MspInit+0x200>)
 800664a:	2200      	movs	r2, #0
 800664c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800664e:	4b58      	ldr	r3, [pc, #352]	; (80067b0 <HAL_SPI_MspInit+0x200>)
 8006650:	2200      	movs	r2, #0
 8006652:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006654:	4b56      	ldr	r3, [pc, #344]	; (80067b0 <HAL_SPI_MspInit+0x200>)
 8006656:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800665a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800665c:	4854      	ldr	r0, [pc, #336]	; (80067b0 <HAL_SPI_MspInit+0x200>)
 800665e:	f001 faf7 	bl	8007c50 <HAL_DMA_Init>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8006668:	f7ff f9d2 	bl	8005a10 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a50      	ldr	r2, [pc, #320]	; (80067b0 <HAL_SPI_MspInit+0x200>)
 8006670:	655a      	str	r2, [r3, #84]	; 0x54
 8006672:	4a4f      	ldr	r2, [pc, #316]	; (80067b0 <HAL_SPI_MspInit+0x200>)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8006678:	2200      	movs	r2, #0
 800667a:	2105      	movs	r1, #5
 800667c:	2023      	movs	r0, #35	; 0x23
 800667e:	f001 fabd 	bl	8007bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8006682:	2023      	movs	r0, #35	; 0x23
 8006684:	f001 fad6 	bl	8007c34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006688:	e08a      	b.n	80067a0 <HAL_SPI_MspInit+0x1f0>
  else if(hspi->Instance==SPI2)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a4a      	ldr	r2, [pc, #296]	; (80067b8 <HAL_SPI_MspInit+0x208>)
 8006690:	4293      	cmp	r3, r2
 8006692:	f040 8085 	bne.w	80067a0 <HAL_SPI_MspInit+0x1f0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006696:	4b45      	ldr	r3, [pc, #276]	; (80067ac <HAL_SPI_MspInit+0x1fc>)
 8006698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800669a:	4a44      	ldr	r2, [pc, #272]	; (80067ac <HAL_SPI_MspInit+0x1fc>)
 800669c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066a0:	6593      	str	r3, [r2, #88]	; 0x58
 80066a2:	4b42      	ldr	r3, [pc, #264]	; (80067ac <HAL_SPI_MspInit+0x1fc>)
 80066a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066aa:	613b      	str	r3, [r7, #16]
 80066ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066ae:	4b3f      	ldr	r3, [pc, #252]	; (80067ac <HAL_SPI_MspInit+0x1fc>)
 80066b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066b2:	4a3e      	ldr	r2, [pc, #248]	; (80067ac <HAL_SPI_MspInit+0x1fc>)
 80066b4:	f043 0302 	orr.w	r3, r3, #2
 80066b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066ba:	4b3c      	ldr	r3, [pc, #240]	; (80067ac <HAL_SPI_MspInit+0x1fc>)
 80066bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80066c6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80066ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066cc:	2302      	movs	r3, #2
 80066ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066d0:	2300      	movs	r3, #0
 80066d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066d4:	2303      	movs	r3, #3
 80066d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80066d8:	2305      	movs	r3, #5
 80066da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066dc:	f107 031c 	add.w	r3, r7, #28
 80066e0:	4619      	mov	r1, r3
 80066e2:	4836      	ldr	r0, [pc, #216]	; (80067bc <HAL_SPI_MspInit+0x20c>)
 80066e4:	f001 fd38 	bl	8008158 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80066e8:	4b35      	ldr	r3, [pc, #212]	; (80067c0 <HAL_SPI_MspInit+0x210>)
 80066ea:	4a36      	ldr	r2, [pc, #216]	; (80067c4 <HAL_SPI_MspInit+0x214>)
 80066ec:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 80066ee:	4b34      	ldr	r3, [pc, #208]	; (80067c0 <HAL_SPI_MspInit+0x210>)
 80066f0:	2201      	movs	r2, #1
 80066f2:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066f4:	4b32      	ldr	r3, [pc, #200]	; (80067c0 <HAL_SPI_MspInit+0x210>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80066fa:	4b31      	ldr	r3, [pc, #196]	; (80067c0 <HAL_SPI_MspInit+0x210>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006700:	4b2f      	ldr	r3, [pc, #188]	; (80067c0 <HAL_SPI_MspInit+0x210>)
 8006702:	2280      	movs	r2, #128	; 0x80
 8006704:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006706:	4b2e      	ldr	r3, [pc, #184]	; (80067c0 <HAL_SPI_MspInit+0x210>)
 8006708:	2200      	movs	r2, #0
 800670a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800670c:	4b2c      	ldr	r3, [pc, #176]	; (80067c0 <HAL_SPI_MspInit+0x210>)
 800670e:	2200      	movs	r2, #0
 8006710:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8006712:	4b2b      	ldr	r3, [pc, #172]	; (80067c0 <HAL_SPI_MspInit+0x210>)
 8006714:	2200      	movs	r2, #0
 8006716:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006718:	4b29      	ldr	r3, [pc, #164]	; (80067c0 <HAL_SPI_MspInit+0x210>)
 800671a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800671e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8006720:	4827      	ldr	r0, [pc, #156]	; (80067c0 <HAL_SPI_MspInit+0x210>)
 8006722:	f001 fa95 	bl	8007c50 <HAL_DMA_Init>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <HAL_SPI_MspInit+0x180>
      Error_Handler();
 800672c:	f7ff f970 	bl	8005a10 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a23      	ldr	r2, [pc, #140]	; (80067c0 <HAL_SPI_MspInit+0x210>)
 8006734:	659a      	str	r2, [r3, #88]	; 0x58
 8006736:	4a22      	ldr	r2, [pc, #136]	; (80067c0 <HAL_SPI_MspInit+0x210>)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800673c:	4b22      	ldr	r3, [pc, #136]	; (80067c8 <HAL_SPI_MspInit+0x218>)
 800673e:	4a23      	ldr	r2, [pc, #140]	; (80067cc <HAL_SPI_MspInit+0x21c>)
 8006740:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8006742:	4b21      	ldr	r3, [pc, #132]	; (80067c8 <HAL_SPI_MspInit+0x218>)
 8006744:	2201      	movs	r2, #1
 8006746:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006748:	4b1f      	ldr	r3, [pc, #124]	; (80067c8 <HAL_SPI_MspInit+0x218>)
 800674a:	2210      	movs	r2, #16
 800674c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800674e:	4b1e      	ldr	r3, [pc, #120]	; (80067c8 <HAL_SPI_MspInit+0x218>)
 8006750:	2200      	movs	r2, #0
 8006752:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006754:	4b1c      	ldr	r3, [pc, #112]	; (80067c8 <HAL_SPI_MspInit+0x218>)
 8006756:	2280      	movs	r2, #128	; 0x80
 8006758:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800675a:	4b1b      	ldr	r3, [pc, #108]	; (80067c8 <HAL_SPI_MspInit+0x218>)
 800675c:	2200      	movs	r2, #0
 800675e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006760:	4b19      	ldr	r3, [pc, #100]	; (80067c8 <HAL_SPI_MspInit+0x218>)
 8006762:	2200      	movs	r2, #0
 8006764:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8006766:	4b18      	ldr	r3, [pc, #96]	; (80067c8 <HAL_SPI_MspInit+0x218>)
 8006768:	2200      	movs	r2, #0
 800676a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800676c:	4b16      	ldr	r3, [pc, #88]	; (80067c8 <HAL_SPI_MspInit+0x218>)
 800676e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006772:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8006774:	4814      	ldr	r0, [pc, #80]	; (80067c8 <HAL_SPI_MspInit+0x218>)
 8006776:	f001 fa6b 	bl	8007c50 <HAL_DMA_Init>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <HAL_SPI_MspInit+0x1d4>
      Error_Handler();
 8006780:	f7ff f946 	bl	8005a10 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a10      	ldr	r2, [pc, #64]	; (80067c8 <HAL_SPI_MspInit+0x218>)
 8006788:	655a      	str	r2, [r3, #84]	; 0x54
 800678a:	4a0f      	ldr	r2, [pc, #60]	; (80067c8 <HAL_SPI_MspInit+0x218>)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8006790:	2200      	movs	r2, #0
 8006792:	2105      	movs	r1, #5
 8006794:	2024      	movs	r0, #36	; 0x24
 8006796:	f001 fa31 	bl	8007bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800679a:	2024      	movs	r0, #36	; 0x24
 800679c:	f001 fa4a 	bl	8007c34 <HAL_NVIC_EnableIRQ>
}
 80067a0:	bf00      	nop
 80067a2:	3730      	adds	r7, #48	; 0x30
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	40013000 	.word	0x40013000
 80067ac:	40021000 	.word	0x40021000
 80067b0:	20000b68 	.word	0x20000b68
 80067b4:	40020444 	.word	0x40020444
 80067b8:	40003800 	.word	0x40003800
 80067bc:	48000400 	.word	0x48000400
 80067c0:	20000bb0 	.word	0x20000bb0
 80067c4:	40020044 	.word	0x40020044
 80067c8:	20000bf8 	.word	0x20000bf8
 80067cc:	40020058 	.word	0x40020058

080067d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a1a      	ldr	r2, [pc, #104]	; (8006848 <HAL_TIM_Base_MspInit+0x78>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d114      	bne.n	800680c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80067e2:	4b1a      	ldr	r3, [pc, #104]	; (800684c <HAL_TIM_Base_MspInit+0x7c>)
 80067e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e6:	4a19      	ldr	r2, [pc, #100]	; (800684c <HAL_TIM_Base_MspInit+0x7c>)
 80067e8:	f043 0304 	orr.w	r3, r3, #4
 80067ec:	6593      	str	r3, [r2, #88]	; 0x58
 80067ee:	4b17      	ldr	r3, [pc, #92]	; (800684c <HAL_TIM_Base_MspInit+0x7c>)
 80067f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f2:	f003 0304 	and.w	r3, r3, #4
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80067fa:	2200      	movs	r2, #0
 80067fc:	2105      	movs	r1, #5
 80067fe:	201e      	movs	r0, #30
 8006800:	f001 f9fc 	bl	8007bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006804:	201e      	movs	r0, #30
 8006806:	f001 fa15 	bl	8007c34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800680a:	e018      	b.n	800683e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a0f      	ldr	r2, [pc, #60]	; (8006850 <HAL_TIM_Base_MspInit+0x80>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d113      	bne.n	800683e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006816:	4b0d      	ldr	r3, [pc, #52]	; (800684c <HAL_TIM_Base_MspInit+0x7c>)
 8006818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800681a:	4a0c      	ldr	r2, [pc, #48]	; (800684c <HAL_TIM_Base_MspInit+0x7c>)
 800681c:	f043 0310 	orr.w	r3, r3, #16
 8006820:	6593      	str	r3, [r2, #88]	; 0x58
 8006822:	4b0a      	ldr	r3, [pc, #40]	; (800684c <HAL_TIM_Base_MspInit+0x7c>)
 8006824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006826:	f003 0310 	and.w	r3, r3, #16
 800682a:	60bb      	str	r3, [r7, #8]
 800682c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 7, 0);
 800682e:	2200      	movs	r2, #0
 8006830:	2107      	movs	r1, #7
 8006832:	2036      	movs	r0, #54	; 0x36
 8006834:	f001 f9e2 	bl	8007bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006838:	2036      	movs	r0, #54	; 0x36
 800683a:	f001 f9fb 	bl	8007c34 <HAL_NVIC_EnableIRQ>
}
 800683e:	bf00      	nop
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	40000800 	.word	0x40000800
 800684c:	40021000 	.word	0x40021000
 8006850:	40001000 	.word	0x40001000

08006854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b0ae      	sub	sp, #184	; 0xb8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800685c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006860:	2200      	movs	r2, #0
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	605a      	str	r2, [r3, #4]
 8006866:	609a      	str	r2, [r3, #8]
 8006868:	60da      	str	r2, [r3, #12]
 800686a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800686c:	f107 031c 	add.w	r3, r7, #28
 8006870:	2288      	movs	r2, #136	; 0x88
 8006872:	2100      	movs	r1, #0
 8006874:	4618      	mov	r0, r3
 8006876:	f00c fe73 	bl	8013560 <memset>
  if(huart->Instance==USART2)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a74      	ldr	r2, [pc, #464]	; (8006a50 <HAL_UART_MspInit+0x1fc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d16e      	bne.n	8006962 <HAL_UART_MspInit+0x10e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006884:	2302      	movs	r3, #2
 8006886:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006888:	2300      	movs	r3, #0
 800688a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800688c:	f107 031c 	add.w	r3, r7, #28
 8006890:	4618      	mov	r0, r3
 8006892:	f004 fa19 	bl	800acc8 <HAL_RCCEx_PeriphCLKConfig>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800689c:	f7ff f8b8 	bl	8005a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80068a0:	4b6c      	ldr	r3, [pc, #432]	; (8006a54 <HAL_UART_MspInit+0x200>)
 80068a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a4:	4a6b      	ldr	r2, [pc, #428]	; (8006a54 <HAL_UART_MspInit+0x200>)
 80068a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068aa:	6593      	str	r3, [r2, #88]	; 0x58
 80068ac:	4b69      	ldr	r3, [pc, #420]	; (8006a54 <HAL_UART_MspInit+0x200>)
 80068ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b4:	61bb      	str	r3, [r7, #24]
 80068b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068b8:	4b66      	ldr	r3, [pc, #408]	; (8006a54 <HAL_UART_MspInit+0x200>)
 80068ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068bc:	4a65      	ldr	r2, [pc, #404]	; (8006a54 <HAL_UART_MspInit+0x200>)
 80068be:	f043 0301 	orr.w	r3, r3, #1
 80068c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068c4:	4b63      	ldr	r3, [pc, #396]	; (8006a54 <HAL_UART_MspInit+0x200>)
 80068c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	617b      	str	r3, [r7, #20]
 80068ce:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOG_TX_Pin|LOG_RX_Pin;
 80068d0:	230c      	movs	r3, #12
 80068d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068d6:	2302      	movs	r3, #2
 80068d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068dc:	2300      	movs	r3, #0
 80068de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068e2:	2303      	movs	r3, #3
 80068e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80068e8:	2307      	movs	r3, #7
 80068ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80068f2:	4619      	mov	r1, r3
 80068f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80068f8:	f001 fc2e 	bl	8008158 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80068fc:	4b56      	ldr	r3, [pc, #344]	; (8006a58 <HAL_UART_MspInit+0x204>)
 80068fe:	4a57      	ldr	r2, [pc, #348]	; (8006a5c <HAL_UART_MspInit+0x208>)
 8006900:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8006902:	4b55      	ldr	r3, [pc, #340]	; (8006a58 <HAL_UART_MspInit+0x204>)
 8006904:	2202      	movs	r2, #2
 8006906:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006908:	4b53      	ldr	r3, [pc, #332]	; (8006a58 <HAL_UART_MspInit+0x204>)
 800690a:	2210      	movs	r2, #16
 800690c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800690e:	4b52      	ldr	r3, [pc, #328]	; (8006a58 <HAL_UART_MspInit+0x204>)
 8006910:	2200      	movs	r2, #0
 8006912:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006914:	4b50      	ldr	r3, [pc, #320]	; (8006a58 <HAL_UART_MspInit+0x204>)
 8006916:	2280      	movs	r2, #128	; 0x80
 8006918:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800691a:	4b4f      	ldr	r3, [pc, #316]	; (8006a58 <HAL_UART_MspInit+0x204>)
 800691c:	2200      	movs	r2, #0
 800691e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006920:	4b4d      	ldr	r3, [pc, #308]	; (8006a58 <HAL_UART_MspInit+0x204>)
 8006922:	2200      	movs	r2, #0
 8006924:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006926:	4b4c      	ldr	r3, [pc, #304]	; (8006a58 <HAL_UART_MspInit+0x204>)
 8006928:	2200      	movs	r2, #0
 800692a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800692c:	4b4a      	ldr	r3, [pc, #296]	; (8006a58 <HAL_UART_MspInit+0x204>)
 800692e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006932:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006934:	4848      	ldr	r0, [pc, #288]	; (8006a58 <HAL_UART_MspInit+0x204>)
 8006936:	f001 f98b 	bl	8007c50 <HAL_DMA_Init>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8006940:	f7ff f866 	bl	8005a10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a44      	ldr	r2, [pc, #272]	; (8006a58 <HAL_UART_MspInit+0x204>)
 8006948:	66da      	str	r2, [r3, #108]	; 0x6c
 800694a:	4a43      	ldr	r2, [pc, #268]	; (8006a58 <HAL_UART_MspInit+0x204>)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8006950:	2200      	movs	r2, #0
 8006952:	2105      	movs	r1, #5
 8006954:	2026      	movs	r0, #38	; 0x26
 8006956:	f001 f951 	bl	8007bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800695a:	2026      	movs	r0, #38	; 0x26
 800695c:	f001 f96a 	bl	8007c34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006960:	e071      	b.n	8006a46 <HAL_UART_MspInit+0x1f2>
  else if(huart->Instance==USART3)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a3e      	ldr	r2, [pc, #248]	; (8006a60 <HAL_UART_MspInit+0x20c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d16c      	bne.n	8006a46 <HAL_UART_MspInit+0x1f2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800696c:	2304      	movs	r3, #4
 800696e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006970:	2300      	movs	r3, #0
 8006972:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006974:	f107 031c 	add.w	r3, r7, #28
 8006978:	4618      	mov	r0, r3
 800697a:	f004 f9a5 	bl	800acc8 <HAL_RCCEx_PeriphCLKConfig>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8006984:	f7ff f844 	bl	8005a10 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006988:	4b32      	ldr	r3, [pc, #200]	; (8006a54 <HAL_UART_MspInit+0x200>)
 800698a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800698c:	4a31      	ldr	r2, [pc, #196]	; (8006a54 <HAL_UART_MspInit+0x200>)
 800698e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006992:	6593      	str	r3, [r2, #88]	; 0x58
 8006994:	4b2f      	ldr	r3, [pc, #188]	; (8006a54 <HAL_UART_MspInit+0x200>)
 8006996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80069a0:	4b2c      	ldr	r3, [pc, #176]	; (8006a54 <HAL_UART_MspInit+0x200>)
 80069a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a4:	4a2b      	ldr	r2, [pc, #172]	; (8006a54 <HAL_UART_MspInit+0x200>)
 80069a6:	f043 0304 	orr.w	r3, r3, #4
 80069aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80069ac:	4b29      	ldr	r3, [pc, #164]	; (8006a54 <HAL_UART_MspInit+0x200>)
 80069ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	60fb      	str	r3, [r7, #12]
 80069b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80069b8:	2330      	movs	r3, #48	; 0x30
 80069ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069be:	2302      	movs	r3, #2
 80069c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c4:	2300      	movs	r3, #0
 80069c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069ca:	2303      	movs	r3, #3
 80069cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80069d0:	2307      	movs	r3, #7
 80069d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80069da:	4619      	mov	r1, r3
 80069dc:	4821      	ldr	r0, [pc, #132]	; (8006a64 <HAL_UART_MspInit+0x210>)
 80069de:	f001 fbbb 	bl	8008158 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80069e2:	4b21      	ldr	r3, [pc, #132]	; (8006a68 <HAL_UART_MspInit+0x214>)
 80069e4:	4a21      	ldr	r2, [pc, #132]	; (8006a6c <HAL_UART_MspInit+0x218>)
 80069e6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 80069e8:	4b1f      	ldr	r3, [pc, #124]	; (8006a68 <HAL_UART_MspInit+0x214>)
 80069ea:	2202      	movs	r2, #2
 80069ec:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80069ee:	4b1e      	ldr	r3, [pc, #120]	; (8006a68 <HAL_UART_MspInit+0x214>)
 80069f0:	2210      	movs	r2, #16
 80069f2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069f4:	4b1c      	ldr	r3, [pc, #112]	; (8006a68 <HAL_UART_MspInit+0x214>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80069fa:	4b1b      	ldr	r3, [pc, #108]	; (8006a68 <HAL_UART_MspInit+0x214>)
 80069fc:	2280      	movs	r2, #128	; 0x80
 80069fe:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a00:	4b19      	ldr	r3, [pc, #100]	; (8006a68 <HAL_UART_MspInit+0x214>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a06:	4b18      	ldr	r3, [pc, #96]	; (8006a68 <HAL_UART_MspInit+0x214>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006a0c:	4b16      	ldr	r3, [pc, #88]	; (8006a68 <HAL_UART_MspInit+0x214>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006a12:	4b15      	ldr	r3, [pc, #84]	; (8006a68 <HAL_UART_MspInit+0x214>)
 8006a14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006a1a:	4813      	ldr	r0, [pc, #76]	; (8006a68 <HAL_UART_MspInit+0x214>)
 8006a1c:	f001 f918 	bl	8007c50 <HAL_DMA_Init>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 8006a26:	f7fe fff3 	bl	8005a10 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a0e      	ldr	r2, [pc, #56]	; (8006a68 <HAL_UART_MspInit+0x214>)
 8006a2e:	66da      	str	r2, [r3, #108]	; 0x6c
 8006a30:	4a0d      	ldr	r2, [pc, #52]	; (8006a68 <HAL_UART_MspInit+0x214>)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006a36:	2200      	movs	r2, #0
 8006a38:	2105      	movs	r1, #5
 8006a3a:	2027      	movs	r0, #39	; 0x27
 8006a3c:	f001 f8de 	bl	8007bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006a40:	2027      	movs	r0, #39	; 0x27
 8006a42:	f001 f8f7 	bl	8007c34 <HAL_NVIC_EnableIRQ>
}
 8006a46:	bf00      	nop
 8006a48:	37b8      	adds	r7, #184	; 0xb8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	40004400 	.word	0x40004400
 8006a54:	40021000 	.word	0x40021000
 8006a58:	20000de0 	.word	0x20000de0
 8006a5c:	40020080 	.word	0x40020080
 8006a60:	40004800 	.word	0x40004800
 8006a64:	48000800 	.word	0x48000800
 8006a68:	20000e28 	.word	0x20000e28
 8006a6c:	4002001c 	.word	0x4002001c

08006a70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08c      	sub	sp, #48	; 0x30
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8006a80:	2200      	movs	r2, #0
 8006a82:	6879      	ldr	r1, [r7, #4]
 8006a84:	2019      	movs	r0, #25
 8006a86:	f001 f8b9 	bl	8007bfc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006a8a:	2019      	movs	r0, #25
 8006a8c:	f001 f8d2 	bl	8007c34 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006a90:	4b1e      	ldr	r3, [pc, #120]	; (8006b0c <HAL_InitTick+0x9c>)
 8006a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a94:	4a1d      	ldr	r2, [pc, #116]	; (8006b0c <HAL_InitTick+0x9c>)
 8006a96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006a9a:	6613      	str	r3, [r2, #96]	; 0x60
 8006a9c:	4b1b      	ldr	r3, [pc, #108]	; (8006b0c <HAL_InitTick+0x9c>)
 8006a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aa4:	60fb      	str	r3, [r7, #12]
 8006aa6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006aa8:	f107 0210 	add.w	r2, r7, #16
 8006aac:	f107 0314 	add.w	r3, r7, #20
 8006ab0:	4611      	mov	r1, r2
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f004 f876 	bl	800aba4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006ab8:	f004 f85e 	bl	800ab78 <HAL_RCC_GetPCLK2Freq>
 8006abc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac0:	4a13      	ldr	r2, [pc, #76]	; (8006b10 <HAL_InitTick+0xa0>)
 8006ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac6:	0c9b      	lsrs	r3, r3, #18
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8006acc:	4b11      	ldr	r3, [pc, #68]	; (8006b14 <HAL_InitTick+0xa4>)
 8006ace:	4a12      	ldr	r2, [pc, #72]	; (8006b18 <HAL_InitTick+0xa8>)
 8006ad0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8006ad2:	4b10      	ldr	r3, [pc, #64]	; (8006b14 <HAL_InitTick+0xa4>)
 8006ad4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006ad8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8006ada:	4a0e      	ldr	r2, [pc, #56]	; (8006b14 <HAL_InitTick+0xa4>)
 8006adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ade:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8006ae0:	4b0c      	ldr	r3, [pc, #48]	; (8006b14 <HAL_InitTick+0xa4>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ae6:	4b0b      	ldr	r3, [pc, #44]	; (8006b14 <HAL_InitTick+0xa4>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8006aec:	4809      	ldr	r0, [pc, #36]	; (8006b14 <HAL_InitTick+0xa4>)
 8006aee:	f006 fccb 	bl	800d488 <HAL_TIM_Base_Init>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d104      	bne.n	8006b02 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8006af8:	4806      	ldr	r0, [pc, #24]	; (8006b14 <HAL_InitTick+0xa4>)
 8006afa:	f006 fd1d 	bl	800d538 <HAL_TIM_Base_Start_IT>
 8006afe:	4603      	mov	r3, r0
 8006b00:	e000      	b.n	8006b04 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3730      	adds	r7, #48	; 0x30
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	40021000 	.word	0x40021000
 8006b10:	431bde83 	.word	0x431bde83
 8006b14:	20003644 	.word	0x20003644
 8006b18:	40012c00 	.word	0x40012c00

08006b1c <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	af00      	add	r7, sp, #0
  /* Disable TIM1 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE);
 8006b20:	4b06      	ldr	r3, [pc, #24]	; (8006b3c <HAL_SuspendTick+0x20>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68da      	ldr	r2, [r3, #12]
 8006b26:	4b05      	ldr	r3, [pc, #20]	; (8006b3c <HAL_SuspendTick+0x20>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 0201 	bic.w	r2, r2, #1
 8006b2e:	60da      	str	r2, [r3, #12]
}
 8006b30:	bf00      	nop
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	20003644 	.word	0x20003644

08006b40 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8006b40:	b480      	push	{r7}
 8006b42:	af00      	add	r7, sp, #0
  /* Enable TIM1 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8006b44:	4b06      	ldr	r3, [pc, #24]	; (8006b60 <HAL_ResumeTick+0x20>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	4b05      	ldr	r3, [pc, #20]	; (8006b60 <HAL_ResumeTick+0x20>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f042 0201 	orr.w	r2, r2, #1
 8006b52:	60da      	str	r2, [r3, #12]
}
 8006b54:	bf00      	nop
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	20003644 	.word	0x20003644

08006b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006b64:	b480      	push	{r7}
 8006b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006b68:	e7fe      	b.n	8006b68 <NMI_Handler+0x4>

08006b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006b6e:	e7fe      	b.n	8006b6e <HardFault_Handler+0x4>

08006b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006b74:	e7fe      	b.n	8006b74 <MemManage_Handler+0x4>

08006b76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006b76:	b480      	push	{r7}
 8006b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006b7a:	e7fe      	b.n	8006b7a <BusFault_Handler+0x4>

08006b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006b80:	e7fe      	b.n	8006b80 <UsageFault_Handler+0x4>

08006b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006b82:	b480      	push	{r7}
 8006b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006b86:	bf00      	nop
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8006b94:	2002      	movs	r0, #2
 8006b96:	f001 fcd3 	bl	8008540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8006b9a:	bf00      	nop
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 8006ba2:	2004      	movs	r0, #4
 8006ba4:	f001 fccc 	bl	8008540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8006ba8:	bf00      	nop
 8006baa:	bd80      	pop	{r7, pc}

08006bac <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006bb0:	4802      	ldr	r0, [pc, #8]	; (8006bbc <DMA1_Channel2_IRQHandler+0x10>)
 8006bb2:	f001 f9e4 	bl	8007f7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8006bb6:	bf00      	nop
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	20000e28 	.word	0x20000e28

08006bc0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8006bc4:	4802      	ldr	r0, [pc, #8]	; (8006bd0 <DMA1_Channel4_IRQHandler+0x10>)
 8006bc6:	f001 f9da 	bl	8007f7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006bca:	bf00      	nop
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20000bb0 	.word	0x20000bb0

08006bd4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006bd8:	4802      	ldr	r0, [pc, #8]	; (8006be4 <DMA1_Channel5_IRQHandler+0x10>)
 8006bda:	f001 f9d0 	bl	8007f7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8006bde:	bf00      	nop
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	20000bf8 	.word	0x20000bf8

08006be8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8006bec:	4802      	ldr	r0, [pc, #8]	; (8006bf8 <DMA1_Channel6_IRQHandler+0x10>)
 8006bee:	f001 f9c6 	bl	8007f7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8006bf2:	bf00      	nop
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20000a34 	.word	0x20000a34

08006bfc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006c00:	4802      	ldr	r0, [pc, #8]	; (8006c0c <DMA1_Channel7_IRQHandler+0x10>)
 8006c02:	f001 f9bc 	bl	8007f7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8006c06:	bf00      	nop
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20000de0 	.word	0x20000de0

08006c10 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006c14:	4802      	ldr	r0, [pc, #8]	; (8006c20 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8006c16:	f006 fcff 	bl	800d618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006c1a:	bf00      	nop
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	20003644 	.word	0x20003644

08006c24 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006c28:	4802      	ldr	r0, [pc, #8]	; (8006c34 <TIM4_IRQHandler+0x10>)
 8006c2a:	f006 fcf5 	bl	800d618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006c2e:	bf00      	nop
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20000c40 	.word	0x20000c40

08006c38 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006c3c:	4802      	ldr	r0, [pc, #8]	; (8006c48 <I2C1_EV_IRQHandler+0x10>)
 8006c3e:	f002 f849 	bl	8008cd4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8006c42:	bf00      	nop
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20000998 	.word	0x20000998

08006c4c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8006c50:	4802      	ldr	r0, [pc, #8]	; (8006c5c <I2C1_ER_IRQHandler+0x10>)
 8006c52:	f002 f859 	bl	8008d08 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8006c56:	bf00      	nop
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20000998 	.word	0x20000998

08006c60 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8006c64:	4802      	ldr	r0, [pc, #8]	; (8006c70 <SPI1_IRQHandler+0x10>)
 8006c66:	f005 ffd9 	bl	800cc1c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8006c6a:	bf00      	nop
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	20000aa0 	.word	0x20000aa0

08006c74 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8006c78:	4802      	ldr	r0, [pc, #8]	; (8006c84 <SPI2_IRQHandler+0x10>)
 8006c7a:	f005 ffcf 	bl	800cc1c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8006c7e:	bf00      	nop
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20000b04 	.word	0x20000b04

08006c88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006c8c:	4802      	ldr	r0, [pc, #8]	; (8006c98 <USART2_IRQHandler+0x10>)
 8006c8e:	f007 fa75 	bl	800e17c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006c92:	bf00      	nop
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20000cd8 	.word	0x20000cd8

08006c9c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006ca0:	4802      	ldr	r0, [pc, #8]	; (8006cac <USART3_IRQHandler+0x10>)
 8006ca2:	f007 fa6b 	bl	800e17c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006ca6:	bf00      	nop
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	20000d5c 	.word	0x20000d5c

08006cb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006cb4:	4802      	ldr	r0, [pc, #8]	; (8006cc0 <TIM6_DAC_IRQHandler+0x10>)
 8006cb6:	f006 fcaf 	bl	800d618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006cba:	bf00      	nop
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	20000c8c 	.word	0x20000c8c

08006cc4 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006cc8:	4802      	ldr	r0, [pc, #8]	; (8006cd4 <DMA2_Channel4_IRQHandler+0x10>)
 8006cca:	f001 f958 	bl	8007f7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8006cce:	bf00      	nop
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20000b68 	.word	0x20000b68

08006cd8 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8006cdc:	4802      	ldr	r0, [pc, #8]	; (8006ce8 <DMA2_Channel6_IRQHandler+0x10>)
 8006cde:	f001 f94e 	bl	8007f7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8006ce2:	bf00      	nop
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	200009ec 	.word	0x200009ec

08006cec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006cec:	b480      	push	{r7}
 8006cee:	af00      	add	r7, sp, #0
	return 1;
 8006cf0:	2301      	movs	r3, #1
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <_kill>:

int _kill(int pid, int sig)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006d06:	f00c fa3d 	bl	8013184 <__errno>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2216      	movs	r2, #22
 8006d0e:	601a      	str	r2, [r3, #0]
	return -1;
 8006d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <_exit>:

void _exit (int status)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006d24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7ff ffe7 	bl	8006cfc <_kill>
	while (1) {}		/* Make sure we hang here */
 8006d2e:	e7fe      	b.n	8006d2e <_exit+0x12>

08006d30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	617b      	str	r3, [r7, #20]
 8006d40:	e00a      	b.n	8006d58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006d42:	f3af 8000 	nop.w
 8006d46:	4601      	mov	r1, r0
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	1c5a      	adds	r2, r3, #1
 8006d4c:	60ba      	str	r2, [r7, #8]
 8006d4e:	b2ca      	uxtb	r2, r1
 8006d50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	3301      	adds	r3, #1
 8006d56:	617b      	str	r3, [r7, #20]
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	dbf0      	blt.n	8006d42 <_read+0x12>
	}

return len;
 8006d60:	687b      	ldr	r3, [r7, #4]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3718      	adds	r7, #24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b086      	sub	sp, #24
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	60b9      	str	r1, [r7, #8]
 8006d74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d76:	2300      	movs	r3, #0
 8006d78:	617b      	str	r3, [r7, #20]
 8006d7a:	e009      	b.n	8006d90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	1c5a      	adds	r2, r3, #1
 8006d80:	60ba      	str	r2, [r7, #8]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	617b      	str	r3, [r7, #20]
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	dbf1      	blt.n	8006d7c <_write+0x12>
	}
	return len;
 8006d98:	687b      	ldr	r3, [r7, #4]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3718      	adds	r7, #24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <_close>:

int _close(int file)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
	return -1;
 8006daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006dca:	605a      	str	r2, [r3, #4]
	return 0;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <_isatty>:

int _isatty(int file)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
	return 1;
 8006de2:	2301      	movs	r3, #1
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
	return 0;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
	...

08006e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006e14:	4a14      	ldr	r2, [pc, #80]	; (8006e68 <_sbrk+0x5c>)
 8006e16:	4b15      	ldr	r3, [pc, #84]	; (8006e6c <_sbrk+0x60>)
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006e20:	4b13      	ldr	r3, [pc, #76]	; (8006e70 <_sbrk+0x64>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d102      	bne.n	8006e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006e28:	4b11      	ldr	r3, [pc, #68]	; (8006e70 <_sbrk+0x64>)
 8006e2a:	4a12      	ldr	r2, [pc, #72]	; (8006e74 <_sbrk+0x68>)
 8006e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006e2e:	4b10      	ldr	r3, [pc, #64]	; (8006e70 <_sbrk+0x64>)
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4413      	add	r3, r2
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d207      	bcs.n	8006e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006e3c:	f00c f9a2 	bl	8013184 <__errno>
 8006e40:	4603      	mov	r3, r0
 8006e42:	220c      	movs	r2, #12
 8006e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e4a:	e009      	b.n	8006e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006e4c:	4b08      	ldr	r3, [pc, #32]	; (8006e70 <_sbrk+0x64>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006e52:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <_sbrk+0x64>)
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4413      	add	r3, r2
 8006e5a:	4a05      	ldr	r2, [pc, #20]	; (8006e70 <_sbrk+0x64>)
 8006e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3718      	adds	r7, #24
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	20018000 	.word	0x20018000
 8006e6c:	00000c00 	.word	0x00000c00
 8006e70:	20003690 	.word	0x20003690
 8006e74:	200085e8 	.word	0x200085e8

08006e78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8006e7c:	4b06      	ldr	r3, [pc, #24]	; (8006e98 <SystemInit+0x20>)
 8006e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e82:	4a05      	ldr	r2, [pc, #20]	; (8006e98 <SystemInit+0x20>)
 8006e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8006e8c:	bf00      	nop
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	e000ed00 	.word	0xe000ed00

08006e9c <W25_SELECT>:

extern void Report(const uint8_t addTime, const char *fmt, ...);

//------------------------------------------------------------------------------------------

void W25_SELECT()   { W25_SEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET);//set to 0
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ea6:	4802      	ldr	r0, [pc, #8]	; (8006eb0 <W25_SELECT+0x14>)
 8006ea8:	f001 fb18 	bl	80084dc <HAL_GPIO_WritePin>
 8006eac:	bf00      	nop
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	48000400 	.word	0x48000400

08006eb4 <W25_UNSELECT>:
void W25_UNSELECT() { W25_UNSEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET);//set to 1
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ebe:	4802      	ldr	r0, [pc, #8]	; (8006ec8 <W25_UNSELECT+0x14>)
 8006ec0:	f001 fb0c 	bl	80084dc <HAL_GPIO_WritePin>
 8006ec4:	bf00      	nop
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	48000400 	.word	0x48000400

08006ecc <W25qxx_Spi>:
//void W25_SELECT()   { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET); }//set to 0
//void W25_UNSELECT() { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET); }//set to 1

//------------------------------------------------------------------------------------------
uint8_t W25qxx_Spi(uint8_t Data)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af02      	add	r7, sp, #8
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	71fb      	strb	r3, [r7, #7]
uint8_t ret;

    if (HAL_SPI_TransmitReceive(portFLASH, &Data, &ret, 1, min_wait_ms) != HAL_OK) devError |= devSPI;
 8006ed6:	4b0c      	ldr	r3, [pc, #48]	; (8006f08 <W25qxx_Spi+0x3c>)
 8006ed8:	6818      	ldr	r0, [r3, #0]
 8006eda:	23fa      	movs	r3, #250	; 0xfa
 8006edc:	f107 020f 	add.w	r2, r7, #15
 8006ee0:	1df9      	adds	r1, r7, #7
 8006ee2:	9300      	str	r3, [sp, #0]
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	f005 fa06 	bl	800c2f6 <HAL_SPI_TransmitReceive>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d006      	beq.n	8006efe <W25qxx_Spi+0x32>
 8006ef0:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <W25qxx_Spi+0x40>)
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	4b04      	ldr	r3, [pc, #16]	; (8006f0c <W25qxx_Spi+0x40>)
 8006efc:	801a      	strh	r2, [r3, #0]

    return ret;
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	20000010 	.word	0x20000010
 8006f0c:	20001b08 	.word	0x20001b08

08006f10 <W25qxx_Reset>:
//------------------------------------------------------------------------------------------
void W25qxx_Reset(void)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	af00      	add	r7, sp, #0
	W25qxx_Delay(100);
 8006f14:	2064      	movs	r0, #100	; 0x64
 8006f16:	f000 fd95 	bl	8007a44 <HAL_Delay>

	W25_SELECT();
 8006f1a:	f7ff ffbf 	bl	8006e9c <W25_SELECT>
		W25qxx_Spi(EN_RESET);
 8006f1e:	2066      	movs	r0, #102	; 0x66
 8006f20:	f7ff ffd4 	bl	8006ecc <W25qxx_Spi>
		W25qxx_Spi(CHIP_RESET);
 8006f24:	2099      	movs	r0, #153	; 0x99
 8006f26:	f7ff ffd1 	bl	8006ecc <W25qxx_Spi>
	W25_UNSELECT();
 8006f2a:	f7ff ffc3 	bl	8006eb4 <W25_UNSELECT>

	W25qxx_Delay(100);
 8006f2e:	2064      	movs	r0, #100	; 0x64
 8006f30:	f000 fd88 	bl	8007a44 <HAL_Delay>
}
 8006f34:	bf00      	nop
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <W25qxx_ReadID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_ReadID(void)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
uint32_t Temp[3] = {0};
 8006f3e:	1d3b      	adds	r3, r7, #4
 8006f40:	2200      	movs	r2, #0
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	605a      	str	r2, [r3, #4]
 8006f46:	609a      	str	r2, [r3, #8]

    W25_SELECT();//set to 0
 8006f48:	f7ff ffa8 	bl	8006e9c <W25_SELECT>

    W25qxx_Spi(JEDEC_ID);
 8006f4c:	209f      	movs	r0, #159	; 0x9f
 8006f4e:	f7ff ffbd 	bl	8006ecc <W25qxx_Spi>
    Temp[0] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006f52:	20a5      	movs	r0, #165	; 0xa5
 8006f54:	f7ff ffba 	bl	8006ecc <W25qxx_Spi>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	607b      	str	r3, [r7, #4]
    Temp[1] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006f5c:	20a5      	movs	r0, #165	; 0xa5
 8006f5e:	f7ff ffb5 	bl	8006ecc <W25qxx_Spi>
 8006f62:	4603      	mov	r3, r0
 8006f64:	60bb      	str	r3, [r7, #8]
    Temp[2] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006f66:	20a5      	movs	r0, #165	; 0xa5
 8006f68:	f7ff ffb0 	bl	8006ecc <W25qxx_Spi>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	60fb      	str	r3, [r7, #12]

    W25_UNSELECT();//set to 1
 8006f70:	f7ff ffa0 	bl	8006eb4 <W25_UNSELECT>

    return ((Temp[0] << 16) | (Temp[1] << 8) | Temp[2]);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	041a      	lsls	r2, r3, #16
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	021b      	lsls	r3, r3, #8
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	4313      	orrs	r3, r2
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
	...

08006f8c <W25qxx_ReadUniqID>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadUniqID(void)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
	uint8_t dat[] = {READ_UID, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE};
 8006f92:	4a18      	ldr	r2, [pc, #96]	; (8006ff4 <W25qxx_ReadUniqID+0x68>)
 8006f94:	463b      	mov	r3, r7
 8006f96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006f9a:	6018      	str	r0, [r3, #0]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	7019      	strb	r1, [r3, #0]
    W25_SELECT();
 8006fa0:	f7ff ff7c 	bl	8006e9c <W25_SELECT>

    //W25qxx_Spi(READ_UID);
    //for (uint8_t i = 0; i < 4; i++) W25qxx_Spi(W25QXX_DUMMY_BYTE);
    //for (uint8_t i = 0; i < 8; i++) w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
    if (HAL_SPI_Transmit(portFLASH, dat, sizeof(dat), min_wait_ms) != HAL_OK) devError |= devSPI;
 8006fa4:	4b14      	ldr	r3, [pc, #80]	; (8006ff8 <W25qxx_ReadUniqID+0x6c>)
 8006fa6:	6818      	ldr	r0, [r3, #0]
 8006fa8:	23fa      	movs	r3, #250	; 0xfa
 8006faa:	4639      	mov	r1, r7
 8006fac:	2205      	movs	r2, #5
 8006fae:	f004 ff04 	bl	800bdba <HAL_SPI_Transmit>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d006      	beq.n	8006fc6 <W25qxx_ReadUniqID+0x3a>
 8006fb8:	4b10      	ldr	r3, [pc, #64]	; (8006ffc <W25qxx_ReadUniqID+0x70>)
 8006fba:	881b      	ldrh	r3, [r3, #0]
 8006fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	4b0e      	ldr	r3, [pc, #56]	; (8006ffc <W25qxx_ReadUniqID+0x70>)
 8006fc4:	801a      	strh	r2, [r3, #0]
    if (HAL_SPI_Receive(portFLASH, w25qxx.UniqID, 8, min_wait_ms) != HAL_OK) devError |= devSPI;
 8006fc6:	4b0c      	ldr	r3, [pc, #48]	; (8006ff8 <W25qxx_ReadUniqID+0x6c>)
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	23fa      	movs	r3, #250	; 0xfa
 8006fcc:	2208      	movs	r2, #8
 8006fce:	490c      	ldr	r1, [pc, #48]	; (8007000 <W25qxx_ReadUniqID+0x74>)
 8006fd0:	f005 f861 	bl	800c096 <HAL_SPI_Receive>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d006      	beq.n	8006fe8 <W25qxx_ReadUniqID+0x5c>
 8006fda:	4b08      	ldr	r3, [pc, #32]	; (8006ffc <W25qxx_ReadUniqID+0x70>)
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <W25qxx_ReadUniqID+0x70>)
 8006fe6:	801a      	strh	r2, [r3, #0]

    W25_UNSELECT();
 8006fe8:	f7ff ff64 	bl	8006eb4 <W25_UNSELECT>
}
 8006fec:	bf00      	nop
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	080182bc 	.word	0x080182bc
 8006ff8:	20000010 	.word	0x20000010
 8006ffc:	20001b08 	.word	0x20001b08
 8007000:	20003695 	.word	0x20003695

08007004 <W25qxx_WriteEnable>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteEnable(void)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	af00      	add	r7, sp, #0
    W25_SELECT();
 8007008:	f7ff ff48 	bl	8006e9c <W25_SELECT>

    W25qxx_Spi(WRITE_ENABLE);
 800700c:	2006      	movs	r0, #6
 800700e:	f7ff ff5d 	bl	8006ecc <W25qxx_Spi>

    W25_UNSELECT();
 8007012:	f7ff ff4f 	bl	8006eb4 <W25_UNSELECT>

    W25qxx_Delay(1);
 8007016:	2001      	movs	r0, #1
 8007018:	f000 fd14 	bl	8007a44 <HAL_Delay>
}
 800701c:	bf00      	nop
 800701e:	bd80      	pop	{r7, pc}

08007020 <W25qxx_ReadStatusRegister>:

    W25qxx_Delay(1);
}
//------------------------------------------------------------------------------------------
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusReg)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	4603      	mov	r3, r0
 8007028:	71fb      	strb	r3, [r7, #7]
uint8_t status = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	73fb      	strb	r3, [r7, #15]

    W25_SELECT();
 800702e:	f7ff ff35 	bl	8006e9c <W25_SELECT>

    switch (SelectStatusReg) {
 8007032:	79fb      	ldrb	r3, [r7, #7]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d002      	beq.n	800703e <W25qxx_ReadStatusRegister+0x1e>
 8007038:	2b02      	cmp	r3, #2
 800703a:	d00d      	beq.n	8007058 <W25qxx_ReadStatusRegister+0x38>
 800703c:	e019      	b.n	8007072 <W25qxx_ReadStatusRegister+0x52>
        case 1:
            W25qxx_Spi(READ_STAT_REG1);
 800703e:	2005      	movs	r0, #5
 8007040:	f7ff ff44 	bl	8006ecc <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8007044:	20a5      	movs	r0, #165	; 0xa5
 8007046:	f7ff ff41 	bl	8006ecc <W25qxx_Spi>
 800704a:	4603      	mov	r3, r0
 800704c:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister1 = status;
 800704e:	4a12      	ldr	r2, [pc, #72]	; (8007098 <W25qxx_ReadStatusRegister+0x78>)
 8007050:	7bfb      	ldrb	r3, [r7, #15]
 8007052:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
        break;
 8007056:	e018      	b.n	800708a <W25qxx_ReadStatusRegister+0x6a>
        case 2:
            W25qxx_Spi(READ_STAT_REG2);
 8007058:	2035      	movs	r0, #53	; 0x35
 800705a:	f7ff ff37 	bl	8006ecc <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800705e:	20a5      	movs	r0, #165	; 0xa5
 8007060:	f7ff ff34 	bl	8006ecc <W25qxx_Spi>
 8007064:	4603      	mov	r3, r0
 8007066:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister2 = status;
 8007068:	4a0b      	ldr	r2, [pc, #44]	; (8007098 <W25qxx_ReadStatusRegister+0x78>)
 800706a:	7bfb      	ldrb	r3, [r7, #15]
 800706c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        break;
 8007070:	e00b      	b.n	800708a <W25qxx_ReadStatusRegister+0x6a>
        default : {
            W25qxx_Spi(READ_STAT_REG3);
 8007072:	2015      	movs	r0, #21
 8007074:	f7ff ff2a 	bl	8006ecc <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8007078:	20a5      	movs	r0, #165	; 0xa5
 800707a:	f7ff ff27 	bl	8006ecc <W25qxx_Spi>
 800707e:	4603      	mov	r3, r0
 8007080:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister3 = status;
 8007082:	4a05      	ldr	r2, [pc, #20]	; (8007098 <W25qxx_ReadStatusRegister+0x78>)
 8007084:	7bfb      	ldrb	r3, [r7, #15]
 8007086:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        }
    }

    W25_UNSELECT();
 800708a:	f7ff ff13 	bl	8006eb4 <W25_UNSELECT>

    return status;
 800708e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	20003694 	.word	0x20003694

0800709c <W25qxx_WaitForWriteEnd>:

    W25_UNSELECT();
}
//------------------------------------------------------------------------------------------
void W25qxx_WaitForWriteEnd(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0
    W25qxx_Delay(1);
 80070a0:	2001      	movs	r0, #1
 80070a2:	f000 fccf 	bl	8007a44 <HAL_Delay>

    W25_SELECT();
 80070a6:	f7ff fef9 	bl	8006e9c <W25_SELECT>

    W25qxx_Spi(READ_STAT_REG1);
 80070aa:	2005      	movs	r0, #5
 80070ac:	f7ff ff0e 	bl	8006ecc <W25qxx_Spi>
    do
    {
        w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80070b0:	20a5      	movs	r0, #165	; 0xa5
 80070b2:	f7ff ff0b 	bl	8006ecc <W25qxx_Spi>
 80070b6:	4603      	mov	r3, r0
 80070b8:	461a      	mov	r2, r3
 80070ba:	4b08      	ldr	r3, [pc, #32]	; (80070dc <W25qxx_WaitForWriteEnd+0x40>)
 80070bc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        W25qxx_Delay(1);
 80070c0:	2001      	movs	r0, #1
 80070c2:	f000 fcbf 	bl	8007a44 <HAL_Delay>
    } while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80070c6:	4b05      	ldr	r3, [pc, #20]	; (80070dc <W25qxx_WaitForWriteEnd+0x40>)
 80070c8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1ed      	bne.n	80070b0 <W25qxx_WaitForWriteEnd+0x14>

    W25_UNSELECT();
 80070d4:	f7ff feee 	bl	8006eb4 <W25_UNSELECT>
}
 80070d8:	bf00      	nop
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	20003694 	.word	0x20003694

080070e0 <W25qxx_Init>:
//------------------------------------------------------------------------------------------
bool W25qxx_Init(void)
{
 80070e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070e2:	b089      	sub	sp, #36	; 0x24
 80070e4:	af06      	add	r7, sp, #24

	W25qxx_Reset();
 80070e6:	f7ff ff13 	bl	8006f10 <W25qxx_Reset>


    w25qxx.Lock = 1;
 80070ea:	4b54      	ldr	r3, [pc, #336]	; (800723c <W25qxx_Init+0x15c>)
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    bool ret = false;
 80070f2:	2300      	movs	r3, #0
 80070f4:	71fb      	strb	r3, [r7, #7]

    W25_UNSELECT();
 80070f6:	f7ff fedd 	bl	8006eb4 <W25_UNSELECT>

    uint32_t id = W25qxx_ReadID() & 0xffff;
 80070fa:	f7ff ff1d 	bl	8006f38 <W25qxx_ReadID>
 80070fe:	4603      	mov	r3, r0
 8007100:	b29b      	uxth	r3, r3
 8007102:	603b      	str	r3, [r7, #0]
//#ifdef W25QXX_DEBUG
    Report(1, "w25qxx Init Begin... Chip ID:0x%X\r\n", id);
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	494e      	ldr	r1, [pc, #312]	; (8007240 <W25qxx_Init+0x160>)
 8007108:	2001      	movs	r0, #1
 800710a:	f7fc f88d 	bl	8003228 <Report>
//#endif
    id &= 0xff;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	b2db      	uxtb	r3, r3
 8007112:	603b      	str	r3, [r7, #0]
    id -= 0x10;//0x4010;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	3b10      	subs	r3, #16
 8007118:	603b      	str	r3, [r7, #0]
    if (id > 0x0a) id = 0;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2b0a      	cmp	r3, #10
 800711e:	d901      	bls.n	8007124 <W25qxx_Init+0x44>
 8007120:	2300      	movs	r3, #0
 8007122:	603b      	str	r3, [r7, #0]
    w25qxx.ID         = id;              //W25Q10..W25Q512
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	b2da      	uxtb	r2, r3
 8007128:	4b44      	ldr	r3, [pc, #272]	; (800723c <W25qxx_Init+0x15c>)
 800712a:	701a      	strb	r2, [r3, #0]
    w25qxx.BlockCount = all_chipBLK[id]; //0..1024;
 800712c:	4a45      	ldr	r2, [pc, #276]	; (8007244 <W25qxx_Init+0x164>)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007134:	4a41      	ldr	r2, [pc, #260]	; (800723c <W25qxx_Init+0x15c>)
 8007136:	f8c2 301b 	str.w	r3, [r2, #27]
//#ifdef W25QXX_DEBUG
    Report(1, "Chip %s\r\n", all_chipID[id]);
 800713a:	4a43      	ldr	r2, [pc, #268]	; (8007248 <W25qxx_Init+0x168>)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007142:	461a      	mov	r2, r3
 8007144:	4941      	ldr	r1, [pc, #260]	; (800724c <W25qxx_Init+0x16c>)
 8007146:	2001      	movs	r0, #1
 8007148:	f7fc f86e 	bl	8003228 <Report>
//#endif

    if (id) {
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d06b      	beq.n	800722a <W25qxx_Init+0x14a>
    	w25qxx.PageSize = 256;
 8007152:	4b3a      	ldr	r3, [pc, #232]	; (800723c <W25qxx_Init+0x15c>)
 8007154:	2200      	movs	r2, #0
 8007156:	725a      	strb	r2, [r3, #9]
 8007158:	2200      	movs	r2, #0
 800715a:	f042 0201 	orr.w	r2, r2, #1
 800715e:	729a      	strb	r2, [r3, #10]
    	w25qxx.SectorSize = 0x1000;
 8007160:	4b36      	ldr	r3, [pc, #216]	; (800723c <W25qxx_Init+0x15c>)
 8007162:	2200      	movs	r2, #0
 8007164:	73da      	strb	r2, [r3, #15]
 8007166:	2200      	movs	r2, #0
 8007168:	f042 0210 	orr.w	r2, r2, #16
 800716c:	741a      	strb	r2, [r3, #16]
 800716e:	2200      	movs	r2, #0
 8007170:	745a      	strb	r2, [r3, #17]
 8007172:	2200      	movs	r2, #0
 8007174:	749a      	strb	r2, [r3, #18]
    	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8007176:	4b31      	ldr	r3, [pc, #196]	; (800723c <W25qxx_Init+0x15c>)
 8007178:	f8d3 301b 	ldr.w	r3, [r3, #27]
 800717c:	011b      	lsls	r3, r3, #4
 800717e:	4a2f      	ldr	r2, [pc, #188]	; (800723c <W25qxx_Init+0x15c>)
 8007180:	f8c2 3013 	str.w	r3, [r2, #19]
    	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8007184:	4b2d      	ldr	r3, [pc, #180]	; (800723c <W25qxx_Init+0x15c>)
 8007186:	f8d3 3013 	ldr.w	r3, [r3, #19]
 800718a:	4a2c      	ldr	r2, [pc, #176]	; (800723c <W25qxx_Init+0x15c>)
 800718c:	f8d2 200f 	ldr.w	r2, [r2, #15]
 8007190:	fb02 f303 	mul.w	r3, r2, r3
 8007194:	4a29      	ldr	r2, [pc, #164]	; (800723c <W25qxx_Init+0x15c>)
 8007196:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800719a:	b292      	uxth	r2, r2
 800719c:	fbb3 f3f2 	udiv	r3, r3, r2
 80071a0:	4a26      	ldr	r2, [pc, #152]	; (800723c <W25qxx_Init+0x15c>)
 80071a2:	f8c2 300b 	str.w	r3, [r2, #11]
    	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80071a6:	4b25      	ldr	r3, [pc, #148]	; (800723c <W25qxx_Init+0x15c>)
 80071a8:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80071ac:	011b      	lsls	r3, r3, #4
 80071ae:	4a23      	ldr	r2, [pc, #140]	; (800723c <W25qxx_Init+0x15c>)
 80071b0:	f8c2 3017 	str.w	r3, [r2, #23]
    	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80071b4:	4b21      	ldr	r3, [pc, #132]	; (800723c <W25qxx_Init+0x15c>)
 80071b6:	f8d3 3013 	ldr.w	r3, [r3, #19]
 80071ba:	4a20      	ldr	r2, [pc, #128]	; (800723c <W25qxx_Init+0x15c>)
 80071bc:	f8d2 200f 	ldr.w	r2, [r2, #15]
 80071c0:	fb02 f303 	mul.w	r3, r2, r3
 80071c4:	0a9b      	lsrs	r3, r3, #10
 80071c6:	4a1d      	ldr	r2, [pc, #116]	; (800723c <W25qxx_Init+0x15c>)
 80071c8:	f8c2 301f 	str.w	r3, [r2, #31]
    	W25qxx_ReadUniqID();
 80071cc:	f7ff fede 	bl	8006f8c <W25qxx_ReadUniqID>
    	W25qxx_ReadStatusRegister(1);
 80071d0:	2001      	movs	r0, #1
 80071d2:	f7ff ff25 	bl	8007020 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(2);
 80071d6:	2002      	movs	r0, #2
 80071d8:	f7ff ff22 	bl	8007020 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(3);
 80071dc:	2003      	movs	r0, #3
 80071de:	f7ff ff1f 	bl	8007020 <W25qxx_ReadStatusRegister>
    	ret = true;
 80071e2:	2301      	movs	r3, #1
 80071e4:	71fb      	strb	r3, [r7, #7]
                 "\tSector Size:\t%u bytes\r\n"
                 "\tSector Count:\t%u\r\n"
                 "\tBlock Size:\t%u bytes\r\n"
                 "\tBlock Count:\t%u\r\n"
                 "\tCapacity:\t%u KBytes\r\n",
                 w25qxx.PageSize,
 80071e6:	4b15      	ldr	r3, [pc, #84]	; (800723c <W25qxx_Init+0x15c>)
 80071e8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80071ec:	b29b      	uxth	r3, r3
    	Report(0,"\tPage Size:\t%u bytes\r\n"
 80071ee:	461e      	mov	r6, r3
 80071f0:	4b12      	ldr	r3, [pc, #72]	; (800723c <W25qxx_Init+0x15c>)
 80071f2:	f8d3 500b 	ldr.w	r5, [r3, #11]
 80071f6:	4b11      	ldr	r3, [pc, #68]	; (800723c <W25qxx_Init+0x15c>)
 80071f8:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80071fc:	4a0f      	ldr	r2, [pc, #60]	; (800723c <W25qxx_Init+0x15c>)
 80071fe:	f8d2 2013 	ldr.w	r2, [r2, #19]
 8007202:	490e      	ldr	r1, [pc, #56]	; (800723c <W25qxx_Init+0x15c>)
 8007204:	f8d1 1017 	ldr.w	r1, [r1, #23]
 8007208:	480c      	ldr	r0, [pc, #48]	; (800723c <W25qxx_Init+0x15c>)
 800720a:	f8d0 001b 	ldr.w	r0, [r0, #27]
 800720e:	4c0b      	ldr	r4, [pc, #44]	; (800723c <W25qxx_Init+0x15c>)
 8007210:	f8d4 401f 	ldr.w	r4, [r4, #31]
 8007214:	9404      	str	r4, [sp, #16]
 8007216:	9003      	str	r0, [sp, #12]
 8007218:	9102      	str	r1, [sp, #8]
 800721a:	9201      	str	r2, [sp, #4]
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	462b      	mov	r3, r5
 8007220:	4632      	mov	r2, r6
 8007222:	490b      	ldr	r1, [pc, #44]	; (8007250 <W25qxx_Init+0x170>)
 8007224:	2000      	movs	r0, #0
 8007226:	f7fb ffff 	bl	8003228 <Report>
                 w25qxx.BlockCount,
                 w25qxx.CapacityInKiloByte);
//#endif
    }

    w25qxx.Lock = 0;
 800722a:	4b04      	ldr	r3, [pc, #16]	; (800723c <W25qxx_Init+0x15c>)
 800722c:	2200      	movs	r2, #0
 800722e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return ret;
 8007232:	79fb      	ldrb	r3, [r7, #7]
}
 8007234:	4618      	mov	r0, r3
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800723c:	20003694 	.word	0x20003694
 8007240:	080182c4 	.word	0x080182c4
 8007244:	080193d8 	.word	0x080193d8
 8007248:	20000140 	.word	0x20000140
 800724c:	080182e8 	.word	0x080182e8
 8007250:	080182f4 	.word	0x080182f4

08007254 <W25qxx_getChipID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_getChipID()
{
 8007254:	b480      	push	{r7}
 8007256:	af00      	add	r7, sp, #0
	return (uint32_t)w25qxx.ID;
 8007258:	4b03      	ldr	r3, [pc, #12]	; (8007268 <W25qxx_getChipID+0x14>)
 800725a:	781b      	ldrb	r3, [r3, #0]
}
 800725c:	4618      	mov	r0, r3
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	20003694 	.word	0x20003694

0800726c <W25qxx_getSectorCount>:
uint32_t W25qxx_getSectorCount()
{
 800726c:	b480      	push	{r7}
 800726e:	af00      	add	r7, sp, #0
	return w25qxx.SectorCount;
 8007270:	4b03      	ldr	r3, [pc, #12]	; (8007280 <W25qxx_getSectorCount+0x14>)
 8007272:	f8d3 3013 	ldr.w	r3, [r3, #19]
}
 8007276:	4618      	mov	r0, r3
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr
 8007280:	20003694 	.word	0x20003694

08007284 <W25qxx_getSectorSize>:
uint32_t W25qxx_getSectorSize()
{
 8007284:	b480      	push	{r7}
 8007286:	af00      	add	r7, sp, #0
	return w25qxx.SectorSize;
 8007288:	4b03      	ldr	r3, [pc, #12]	; (8007298 <W25qxx_getSectorSize+0x14>)
 800728a:	f8d3 300f 	ldr.w	r3, [r3, #15]
}
 800728e:	4618      	mov	r0, r3
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	20003694 	.word	0x20003694

0800729c <W25qxx_getPageSize>:
uint32_t W25qxx_getPageCount()
{
	return w25qxx.PageCount;
}
uint32_t W25qxx_getPageSize()
{
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
	return w25qxx.PageSize;
 80072a0:	4b04      	ldr	r3, [pc, #16]	; (80072b4 <W25qxx_getPageSize+0x18>)
 80072a2:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80072a6:	b29b      	uxth	r3, r3
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	20003694 	.word	0x20003694

080072b8 <W25qxx_EraseSector>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 80072c0:	e002      	b.n	80072c8 <W25qxx_EraseSector+0x10>
 80072c2:	2001      	movs	r0, #1
 80072c4:	f000 fbbe 	bl	8007a44 <HAL_Delay>
 80072c8:	4b1c      	ldr	r3, [pc, #112]	; (800733c <W25qxx_EraseSector+0x84>)
 80072ca:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1f7      	bne.n	80072c2 <W25qxx_EraseSector+0xa>

    w25qxx.Lock = 1;
 80072d2:	4b1a      	ldr	r3, [pc, #104]	; (800733c <W25qxx_EraseSector+0x84>)
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#ifdef W25QXX_DEBUG
    uint32_t StartTime = HAL_GetTick();
    Report(1, "%u Begin...", SectorAddr);
#endif

    W25qxx_WaitForWriteEnd();
 80072da:	f7ff fedf 	bl	800709c <W25qxx_WaitForWriteEnd>
    SectorAddr = SectorAddr * w25qxx.SectorSize;
 80072de:	4b17      	ldr	r3, [pc, #92]	; (800733c <W25qxx_EraseSector+0x84>)
 80072e0:	f8d3 200f 	ldr.w	r2, [r3, #15]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	fb02 f303 	mul.w	r3, r2, r3
 80072ea:	607b      	str	r3, [r7, #4]
    W25qxx_WriteEnable();
 80072ec:	f7ff fe8a 	bl	8007004 <W25qxx_WriteEnable>

    W25_SELECT();
 80072f0:	f7ff fdd4 	bl	8006e9c <W25_SELECT>
    W25qxx_Spi(SECTOR_ERASE);
 80072f4:	2020      	movs	r0, #32
 80072f6:	f7ff fde9 	bl	8006ecc <W25qxx_Spi>
    //if (w25qxx.ID >= W25Q256) W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
    W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	0c1b      	lsrs	r3, r3, #16
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	4618      	mov	r0, r3
 8007302:	f7ff fde3 	bl	8006ecc <W25qxx_Spi>
    W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	0a1b      	lsrs	r3, r3, #8
 800730a:	b2db      	uxtb	r3, r3
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff fddd 	bl	8006ecc <W25qxx_Spi>
    W25qxx_Spi(SectorAddr & 0xFF);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	b2db      	uxtb	r3, r3
 8007316:	4618      	mov	r0, r3
 8007318:	f7ff fdd8 	bl	8006ecc <W25qxx_Spi>
    W25_UNSELECT();
 800731c:	f7ff fdca 	bl	8006eb4 <W25_UNSELECT>

    W25qxx_WaitForWriteEnd();
 8007320:	f7ff febc 	bl	800709c <W25qxx_WaitForWriteEnd>

#ifdef W25QXX_DEBUG
    uint32_t dur = HAL_GetTick() - StartTime;
    Report(0, " done after %u ms (%u sec)!\r\n", dur, dur / 1000);
#endif
    W25qxx_Delay(1);
 8007324:	2001      	movs	r0, #1
 8007326:	f000 fb8d 	bl	8007a44 <HAL_Delay>

    w25qxx.Lock = 0;
 800732a:	4b04      	ldr	r3, [pc, #16]	; (800733c <W25qxx_EraseSector+0x84>)
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8007332:	bf00      	nop
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	20003694 	.word	0x20003694

08007340 <W25qxx_SectorToPage>:
{
    return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//------------------------------------------------------------------------------------------
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
    return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8007348:	4b08      	ldr	r3, [pc, #32]	; (800736c <W25qxx_SectorToPage+0x2c>)
 800734a:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	fb02 f303 	mul.w	r3, r2, r3
 8007354:	4a05      	ldr	r2, [pc, #20]	; (800736c <W25qxx_SectorToPage+0x2c>)
 8007356:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800735a:	b292      	uxth	r2, r2
 800735c:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	20003694 	.word	0x20003694

08007370 <W25qxx_IsEmptySector>:

    return false;
}
//------------------------------------------------------------------------------------------
bool W25qxx_IsEmptySector(uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToCheck_up_to_SectorSize)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b090      	sub	sp, #64	; 0x40
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 800737c:	e002      	b.n	8007384 <W25qxx_IsEmptySector+0x14>
 800737e:	2001      	movs	r0, #1
 8007380:	f000 fb60 	bl	8007a44 <HAL_Delay>
 8007384:	4b59      	ldr	r3, [pc, #356]	; (80074ec <W25qxx_IsEmptySector+0x17c>)
 8007386:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1f7      	bne.n	800737e <W25qxx_IsEmptySector+0xe>

    w25qxx.Lock = 1;
 800738e:	4b57      	ldr	r3, [pc, #348]	; (80074ec <W25qxx_IsEmptySector+0x17c>)
 8007390:	2201      	movs	r2, #1
 8007392:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( (NumByteToCheck_up_to_SectorSize > w25qxx.SectorSize) || (!NumByteToCheck_up_to_SectorSize) )
 8007396:	4b55      	ldr	r3, [pc, #340]	; (80074ec <W25qxx_IsEmptySector+0x17c>)
 8007398:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d802      	bhi.n	80073a8 <W25qxx_IsEmptySector+0x38>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d103      	bne.n	80073b0 <W25qxx_IsEmptySector+0x40>
                NumByteToCheck_up_to_SectorSize = w25qxx.SectorSize;
 80073a8:	4b50      	ldr	r3, [pc, #320]	; (80074ec <W25qxx_IsEmptySector+0x17c>)
 80073aa:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80073ae:	607b      	str	r3, [r7, #4]
    uint32_t StartTime = HAL_GetTick();
#endif

    uint8_t pBuffer[32];
    uint32_t i, WorkAddress;
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073b4:	e040      	b.n	8007438 <W25qxx_IsEmptySector+0xc8>

    	W25_SELECT();
 80073b6:	f7ff fd71 	bl	8006e9c <W25_SELECT>
        WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 80073ba:	4b4c      	ldr	r3, [pc, #304]	; (80074ec <W25qxx_IsEmptySector+0x17c>)
 80073bc:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	fb02 f303 	mul.w	r3, r2, r3
 80073c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073c8:	4413      	add	r3, r2
 80073ca:	637b      	str	r3, [r7, #52]	; 0x34
        W25qxx_Spi(DATA_READ);//FAST_READ);
 80073cc:	2003      	movs	r0, #3
 80073ce:	f7ff fd7d 	bl	8006ecc <W25qxx_Spi>
        //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
        W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80073d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d4:	0c1b      	lsrs	r3, r3, #16
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	4618      	mov	r0, r3
 80073da:	f7ff fd77 	bl	8006ecc <W25qxx_Spi>
        W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 80073de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e0:	0a1b      	lsrs	r3, r3, #8
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7ff fd71 	bl	8006ecc <W25qxx_Spi>
        W25qxx_Spi(WorkAddress & 0xFF);
 80073ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7ff fd6c 	bl	8006ecc <W25qxx_Spi>
        //W25qxx_Spi(0);
        HAL_SPI_Receive(portFLASH, pBuffer, sizeof(pBuffer), min_wait_ms);
 80073f4:	4b3e      	ldr	r3, [pc, #248]	; (80074f0 <W25qxx_IsEmptySector+0x180>)
 80073f6:	6818      	ldr	r0, [r3, #0]
 80073f8:	23fa      	movs	r3, #250	; 0xfa
 80073fa:	f107 0114 	add.w	r1, r7, #20
 80073fe:	2220      	movs	r2, #32
 8007400:	f004 fe49 	bl	800c096 <HAL_SPI_Receive>
        W25_UNSELECT();
 8007404:	f7ff fd56 	bl	8006eb4 <W25_UNSELECT>

        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 8007408:	2300      	movs	r3, #0
 800740a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800740e:	e00c      	b.n	800742a <W25qxx_IsEmptySector+0xba>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 8007410:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007414:	3340      	adds	r3, #64	; 0x40
 8007416:	443b      	add	r3, r7
 8007418:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800741c:	2bff      	cmp	r3, #255	; 0xff
 800741e:	d159      	bne.n	80074d4 <W25qxx_IsEmptySector+0x164>
        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 8007420:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007424:	3301      	adds	r3, #1
 8007426:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800742a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800742e:	2b1f      	cmp	r3, #31
 8007430:	d9ee      	bls.n	8007410 <W25qxx_IsEmptySector+0xa0>
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 8007432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007434:	3320      	adds	r3, #32
 8007436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007438:	4b2c      	ldr	r3, [pc, #176]	; (80074ec <W25qxx_IsEmptySector+0x17c>)
 800743a:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800743e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007440:	429a      	cmp	r2, r3
 8007442:	d3b8      	bcc.n	80073b6 <W25qxx_IsEmptySector+0x46>
        }
    }
    if ((w25qxx.SectorSize + OffsetInByte) % sizeof(pBuffer) != 0) {
 8007444:	4b29      	ldr	r3, [pc, #164]	; (80074ec <W25qxx_IsEmptySector+0x17c>)
 8007446:	f8d3 200f 	ldr.w	r2, [r3, #15]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	4413      	add	r3, r2
 800744e:	f003 031f 	and.w	r3, r3, #31
 8007452:	2b00      	cmp	r3, #0
 8007454:	d038      	beq.n	80074c8 <W25qxx_IsEmptySector+0x158>
        i -= sizeof(pBuffer);
 8007456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007458:	3b20      	subs	r3, #32
 800745a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for( ; i < w25qxx.SectorSize; i++) {
 800745c:	e02e      	b.n	80074bc <W25qxx_IsEmptySector+0x14c>

            W25_SELECT();
 800745e:	f7ff fd1d 	bl	8006e9c <W25_SELECT>
            WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 8007462:	4b22      	ldr	r3, [pc, #136]	; (80074ec <W25qxx_IsEmptySector+0x17c>)
 8007464:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	fb02 f303 	mul.w	r3, r2, r3
 800746e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007470:	4413      	add	r3, r2
 8007472:	637b      	str	r3, [r7, #52]	; 0x34
            W25qxx_Spi(DATA_READ);//FAST_READ);
 8007474:	2003      	movs	r0, #3
 8007476:	f7ff fd29 	bl	8006ecc <W25qxx_Spi>
            //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
            W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 800747a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747c:	0c1b      	lsrs	r3, r3, #16
 800747e:	b2db      	uxtb	r3, r3
 8007480:	4618      	mov	r0, r3
 8007482:	f7ff fd23 	bl	8006ecc <W25qxx_Spi>
            W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8007486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007488:	0a1b      	lsrs	r3, r3, #8
 800748a:	b2db      	uxtb	r3, r3
 800748c:	4618      	mov	r0, r3
 800748e:	f7ff fd1d 	bl	8006ecc <W25qxx_Spi>
            W25qxx_Spi(WorkAddress & 0xFF);
 8007492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007494:	b2db      	uxtb	r3, r3
 8007496:	4618      	mov	r0, r3
 8007498:	f7ff fd18 	bl	8006ecc <W25qxx_Spi>
            //W25qxx_Spi(0);
            HAL_SPI_Receive(portFLASH, pBuffer, 1, min_wait_ms);
 800749c:	4b14      	ldr	r3, [pc, #80]	; (80074f0 <W25qxx_IsEmptySector+0x180>)
 800749e:	6818      	ldr	r0, [r3, #0]
 80074a0:	23fa      	movs	r3, #250	; 0xfa
 80074a2:	f107 0114 	add.w	r1, r7, #20
 80074a6:	2201      	movs	r2, #1
 80074a8:	f004 fdf5 	bl	800c096 <HAL_SPI_Receive>
            W25_UNSELECT();
 80074ac:	f7ff fd02 	bl	8006eb4 <W25_UNSELECT>

            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 80074b0:	7d3b      	ldrb	r3, [r7, #20]
 80074b2:	2bff      	cmp	r3, #255	; 0xff
 80074b4:	d110      	bne.n	80074d8 <W25qxx_IsEmptySector+0x168>
        for( ; i < w25qxx.SectorSize; i++) {
 80074b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b8:	3301      	adds	r3, #1
 80074ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074bc:	4b0b      	ldr	r3, [pc, #44]	; (80074ec <W25qxx_IsEmptySector+0x17c>)
 80074be:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80074c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d3ca      	bcc.n	800745e <W25qxx_IsEmptySector+0xee>
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 80074c8:	4b08      	ldr	r3, [pc, #32]	; (80074ec <W25qxx_IsEmptySector+0x17c>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return true;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e007      	b.n	80074e4 <W25qxx_IsEmptySector+0x174>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 80074d4:	bf00      	nop
 80074d6:	e000      	b.n	80074da <W25qxx_IsEmptySector+0x16a>
            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 80074d8:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Not Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 80074da:	4b04      	ldr	r3, [pc, #16]	; (80074ec <W25qxx_IsEmptySector+0x17c>)
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return false;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3740      	adds	r7, #64	; 0x40
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	20003694 	.word	0x20003694
 80074f0:	20000010 	.word	0x20000010

080074f4 <W25qxx_WritePage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8007502:	e002      	b.n	800750a <W25qxx_WritePage+0x16>
 8007504:	2001      	movs	r0, #1
 8007506:	f000 fa9d 	bl	8007a44 <HAL_Delay>
 800750a:	4b4d      	ldr	r3, [pc, #308]	; (8007640 <W25qxx_WritePage+0x14c>)
 800750c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1f7      	bne.n	8007504 <W25qxx_WritePage+0x10>

    w25qxx.Lock = 1;
 8007514:	4b4a      	ldr	r3, [pc, #296]	; (8007640 <W25qxx_WritePage+0x14c>)
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( ((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || !NumByteToWrite_up_to_PageSize )
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4413      	add	r3, r2
 8007522:	4a47      	ldr	r2, [pc, #284]	; (8007640 <W25qxx_WritePage+0x14c>)
 8007524:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8007528:	b292      	uxth	r2, r2
 800752a:	4293      	cmp	r3, r2
 800752c:	d802      	bhi.n	8007534 <W25qxx_WritePage+0x40>
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d107      	bne.n	8007544 <W25qxx_WritePage+0x50>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8007534:	4b42      	ldr	r3, [pc, #264]	; (8007640 <W25qxx_WritePage+0x14c>)
 8007536:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800753a:	b29b      	uxth	r3, r3
 800753c:	461a      	mov	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	603b      	str	r3, [r7, #0]
    if ( (OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize )
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	4413      	add	r3, r2
 800754a:	4a3d      	ldr	r2, [pc, #244]	; (8007640 <W25qxx_WritePage+0x14c>)
 800754c:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8007550:	b292      	uxth	r2, r2
 8007552:	4293      	cmp	r3, r2
 8007554:	d907      	bls.n	8007566 <W25qxx_WritePage+0x72>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8007556:	4b3a      	ldr	r3, [pc, #232]	; (8007640 <W25qxx_WritePage+0x14c>)
 8007558:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800755c:	b29b      	uxth	r3, r3
 800755e:	461a      	mov	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	603b      	str	r3, [r7, #0]
    Report(1, "%s WritePage:0x%X(%u), Offset:%u ,Writes %u Bytes, begin...\r\n",
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
    uint32_t StartTime = HAL_GetTick();
#endif

    W25qxx_WaitForWriteEnd();
 8007566:	f7ff fd99 	bl	800709c <W25qxx_WaitForWriteEnd>
    W25qxx_WriteEnable();
 800756a:	f7ff fd4b 	bl	8007004 <W25qxx_WriteEnable>

    Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 800756e:	4b34      	ldr	r3, [pc, #208]	; (8007640 <W25qxx_WritePage+0x14c>)
 8007570:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007574:	b29b      	uxth	r3, r3
 8007576:	461a      	mov	r2, r3
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	fb02 f303 	mul.w	r3, r2, r3
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	4413      	add	r3, r2
 8007582:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi((Page_Address & 0xFF00) >> 8);
    W25qxx_Spi(Page_Address&0xFF);
    HAL_SPI_Transmit(portFLASH, pBuffer, NumByteToWrite_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();*/

    uint16_t lens = NumByteToWrite_up_to_PageSize + PAGE_HDR_BYTES;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	b29b      	uxth	r3, r3
 8007588:	3304      	adds	r3, #4
 800758a:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 800758c:	2300      	movs	r3, #0
 800758e:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = PAGE_PROG;
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	1c5a      	adds	r2, r3, #1
 8007594:	613a      	str	r2, [r7, #16]
 8007596:	4a2b      	ldr	r2, [pc, #172]	; (8007644 <W25qxx_WritePage+0x150>)
 8007598:	2102      	movs	r1, #2
 800759a:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	0c19      	lsrs	r1, r3, #16
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	1c5a      	adds	r2, r3, #1
 80075a4:	613a      	str	r2, [r7, #16]
 80075a6:	b2c9      	uxtb	r1, r1
 80075a8:	4a26      	ldr	r2, [pc, #152]	; (8007644 <W25qxx_WritePage+0x150>)
 80075aa:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	0a19      	lsrs	r1, r3, #8
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	613a      	str	r2, [r7, #16]
 80075b6:	b2c9      	uxtb	r1, r1
 80075b8:	4a22      	ldr	r2, [pc, #136]	; (8007644 <W25qxx_WritePage+0x150>)
 80075ba:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	613a      	str	r2, [r7, #16]
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	b2d1      	uxtb	r1, r2
 80075c6:	4a1f      	ldr	r2, [pc, #124]	; (8007644 <W25qxx_WritePage+0x150>)
 80075c8:	54d1      	strb	r1, [r2, r3]
    memcpy(&pageTmp[PAGE_HDR_BYTES], pBuffer, NumByteToWrite_up_to_PageSize);//w25qxx.PageSize);
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	68f9      	ldr	r1, [r7, #12]
 80075ce:	481e      	ldr	r0, [pc, #120]	; (8007648 <W25qxx_WritePage+0x154>)
 80075d0:	f00b ffb8 	bl	8013544 <memcpy>

    spiRdy = 0;
 80075d4:	4b1d      	ldr	r3, [pc, #116]	; (800764c <W25qxx_WritePage+0x158>)
 80075d6:	2200      	movs	r2, #0
 80075d8:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 80075da:	4b1d      	ldr	r3, [pc, #116]	; (8007650 <W25qxx_WritePage+0x15c>)
 80075dc:	2201      	movs	r2, #1
 80075de:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 80075e0:	f7ff fc5c 	bl	8006e9c <W25_SELECT>
    if (w25_withDMA) {
 80075e4:	4b1a      	ldr	r3, [pc, #104]	; (8007650 <W25qxx_WritePage+0x15c>)
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d012      	beq.n	8007612 <W25qxx_WritePage+0x11e>
    	HAL_SPI_Transmit_DMA(portFLASH, pageTmp, lens);
 80075ec:	4b19      	ldr	r3, [pc, #100]	; (8007654 <W25qxx_WritePage+0x160>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	8afa      	ldrh	r2, [r7, #22]
 80075f2:	4914      	ldr	r1, [pc, #80]	; (8007644 <W25qxx_WritePage+0x150>)
 80075f4:	4618      	mov	r0, r3
 80075f6:	f005 f891 	bl	800c71c <HAL_SPI_Transmit_DMA>
    	while (!spiRdy) {
 80075fa:	e002      	b.n	8007602 <W25qxx_WritePage+0x10e>
    		W25qxx_Delay(1);
 80075fc:	2001      	movs	r0, #1
 80075fe:	f000 fa21 	bl	8007a44 <HAL_Delay>
    	while (!spiRdy) {
 8007602:	4b12      	ldr	r3, [pc, #72]	; (800764c <W25qxx_WritePage+0x158>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d0f8      	beq.n	80075fc <W25qxx_WritePage+0x108>
    	}
w25_withDMA = 0;
 800760a:	4b11      	ldr	r3, [pc, #68]	; (8007650 <W25qxx_WritePage+0x15c>)
 800760c:	2200      	movs	r2, #0
 800760e:	701a      	strb	r2, [r3, #0]
 8007610:	e00d      	b.n	800762e <W25qxx_WritePage+0x13a>
    } else {
    	HAL_SPI_Transmit(portFLASH, pageTmp, lens, min_wait_ms);
 8007612:	4b10      	ldr	r3, [pc, #64]	; (8007654 <W25qxx_WritePage+0x160>)
 8007614:	6818      	ldr	r0, [r3, #0]
 8007616:	23fa      	movs	r3, #250	; 0xfa
 8007618:	8afa      	ldrh	r2, [r7, #22]
 800761a:	490a      	ldr	r1, [pc, #40]	; (8007644 <W25qxx_WritePage+0x150>)
 800761c:	f004 fbcd 	bl	800bdba <HAL_SPI_Transmit>

    	W25_UNSELECT();
 8007620:	f7ff fc48 	bl	8006eb4 <W25_UNSELECT>

    	W25qxx_WaitForWriteEnd();
 8007624:	f7ff fd3a 	bl	800709c <W25qxx_WaitForWriteEnd>

    	spiRdy = 1;
 8007628:	4b08      	ldr	r3, [pc, #32]	; (800764c <W25qxx_WritePage+0x158>)
 800762a:	2201      	movs	r2, #1
 800762c:	701a      	strb	r2, [r3, #0]
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif
    }

    w25qxx.Lock = 0;
 800762e:	4b04      	ldr	r3, [pc, #16]	; (8007640 <W25qxx_WritePage+0x14c>)
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8007636:	bf00      	nop
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20003694 	.word	0x20003694
 8007644:	200036bc 	.word	0x200036bc
 8007648:	200036c0 	.word	0x200036c0
 800764c:	200000f4 	.word	0x200000f4
 8007650:	200037c1 	.word	0x200037c1
 8007654:	20000010 	.word	0x20000010

08007658 <W25qxx_WriteSector>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b088      	sub	sp, #32
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
 8007664:	603b      	str	r3, [r7, #0]
    if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToWrite_up_to_SectorSize)
 8007666:	4b31      	ldr	r3, [pc, #196]	; (800772c <W25qxx_WriteSector+0xd4>)
 8007668:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	429a      	cmp	r2, r3
 8007670:	d802      	bhi.n	8007678 <W25qxx_WriteSector+0x20>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d103      	bne.n	8007680 <W25qxx_WriteSector+0x28>
                NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8007678:	4b2c      	ldr	r3, [pc, #176]	; (800772c <W25qxx_WriteSector+0xd4>)
 800767a:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800767e:	603b      	str	r3, [r7, #0]
    Report(1, "%s WriteSector:0x%X(%u), Offset:%u ,Write %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 8007680:	4b2a      	ldr	r3, [pc, #168]	; (800772c <W25qxx_WriteSector+0xd4>)
 8007682:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	429a      	cmp	r2, r3
 800768a:	d24b      	bcs.n	8007724 <W25qxx_WriteSector+0xcc>
        return;
    }

    int32_t BytesToWrite;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	441a      	add	r2, r3
 8007692:	4b26      	ldr	r3, [pc, #152]	; (800772c <W25qxx_WriteSector+0xd4>)
 8007694:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007698:	429a      	cmp	r2, r3
 800769a:	d906      	bls.n	80076aa <W25qxx_WriteSector+0x52>
        BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 800769c:	4b23      	ldr	r3, [pc, #140]	; (800772c <W25qxx_WriteSector+0xd4>)
 800769e:	f8d3 200f 	ldr.w	r2, [r3, #15]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	61fb      	str	r3, [r7, #28]
 80076a8:	e001      	b.n	80076ae <W25qxx_WriteSector+0x56>
    else
        BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80076ae:	68b8      	ldr	r0, [r7, #8]
 80076b0:	f7ff fe46 	bl	8007340 <W25qxx_SectorToPage>
 80076b4:	4602      	mov	r2, r0
 80076b6:	4b1d      	ldr	r3, [pc, #116]	; (800772c <W25qxx_WriteSector+0xd4>)
 80076b8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80076bc:	b29b      	uxth	r3, r3
 80076be:	4619      	mov	r1, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80076c6:	4413      	add	r3, r2
 80076c8:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 80076ca:	4b18      	ldr	r3, [pc, #96]	; (800772c <W25qxx_WriteSector+0xd4>)
 80076cc:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	461a      	mov	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80076da:	fb01 f202 	mul.w	r2, r1, r2
 80076de:	1a9b      	subs	r3, r3, r2
 80076e0:	61bb      	str	r3, [r7, #24]

    do
    {
        W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	69ba      	ldr	r2, [r7, #24]
 80076e6:	6979      	ldr	r1, [r7, #20]
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f7ff ff03 	bl	80074f4 <W25qxx_WritePage>
        StartPage++;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	3301      	adds	r3, #1
 80076f2:	617b      	str	r3, [r7, #20]
        BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80076f4:	4b0d      	ldr	r3, [pc, #52]	; (800772c <W25qxx_WriteSector+0xd4>)
 80076f6:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	461a      	mov	r2, r3
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	1a9a      	subs	r2, r3, r2
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	4413      	add	r3, r2
 8007706:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 8007708:	4b08      	ldr	r3, [pc, #32]	; (800772c <W25qxx_WriteSector+0xd4>)
 800770a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800770e:	b29b      	uxth	r3, r3
 8007710:	461a      	mov	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4413      	add	r3, r2
 8007716:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 8007718:	2300      	movs	r3, #0
 800771a:	61bb      	str	r3, [r7, #24]
    } while(BytesToWrite > 0);
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	2b00      	cmp	r3, #0
 8007720:	dcdf      	bgt.n	80076e2 <W25qxx_WriteSector+0x8a>
 8007722:	e000      	b.n	8007726 <W25qxx_WriteSector+0xce>
        return;
 8007724:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s Done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 8007726:	3720      	adds	r7, #32
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	20003694 	.word	0x20003694

08007730 <W25qxx_ReadPage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b088      	sub	sp, #32
 8007734:	af02      	add	r7, sp, #8
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
 800773c:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 800773e:	e002      	b.n	8007746 <W25qxx_ReadPage+0x16>
 8007740:	2001      	movs	r0, #1
 8007742:	f000 f97f 	bl	8007a44 <HAL_Delay>
 8007746:	4b51      	ldr	r3, [pc, #324]	; (800788c <W25qxx_ReadPage+0x15c>)
 8007748:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1f7      	bne.n	8007740 <W25qxx_ReadPage+0x10>

    w25qxx.Lock = 1;
 8007750:	4b4e      	ldr	r3, [pc, #312]	; (800788c <W25qxx_ReadPage+0x15c>)
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || !NumByteToRead_up_to_PageSize)
 8007758:	4b4c      	ldr	r3, [pc, #304]	; (800788c <W25qxx_ReadPage+0x15c>)
 800775a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800775e:	b29b      	uxth	r3, r3
 8007760:	461a      	mov	r2, r3
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	4293      	cmp	r3, r2
 8007766:	d802      	bhi.n	800776e <W25qxx_ReadPage+0x3e>
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d104      	bne.n	8007778 <W25qxx_ReadPage+0x48>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800776e:	4b47      	ldr	r3, [pc, #284]	; (800788c <W25qxx_ReadPage+0x15c>)
 8007770:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007774:	b29b      	uxth	r3, r3
 8007776:	603b      	str	r3, [r7, #0]
    if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	4413      	add	r3, r2
 800777e:	4a43      	ldr	r2, [pc, #268]	; (800788c <W25qxx_ReadPage+0x15c>)
 8007780:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8007784:	b292      	uxth	r2, r2
 8007786:	4293      	cmp	r3, r2
 8007788:	d907      	bls.n	800779a <W25qxx_ReadPage+0x6a>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800778a:	4b40      	ldr	r3, [pc, #256]	; (800788c <W25qxx_ReadPage+0x15c>)
 800778c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007790:	b29b      	uxth	r3, r3
 8007792:	461a      	mov	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	603b      	str	r3, [r7, #0]
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
    //W25qxx_Delay(100);
    uint32_t StartTime = HAL_GetTick();
#endif

    Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800779a:	4b3c      	ldr	r3, [pc, #240]	; (800788c <W25qxx_ReadPage+0x15c>)
 800779c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	461a      	mov	r2, r3
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	fb02 f303 	mul.w	r3, r2, r3
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	4413      	add	r3, r2
 80077ae:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi(Page_Address & 0xFF);
    //W25qxx_Spi(0);
    HAL_SPI_Receive(portFLASH, pBuffer, NumByteToRead_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();
    */
    memset(pageTmp, 0, sizeof(pageTmp));
 80077b0:	f240 1205 	movw	r2, #261	; 0x105
 80077b4:	2100      	movs	r1, #0
 80077b6:	4836      	ldr	r0, [pc, #216]	; (8007890 <W25qxx_ReadPage+0x160>)
 80077b8:	f00b fed2 	bl	8013560 <memset>
    uint16_t lens = NumByteToRead_up_to_PageSize + PAGE_HDR_BYTES;// + 1;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	b29b      	uxth	r3, r3
 80077c0:	3304      	adds	r3, #4
 80077c2:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 80077c4:	2300      	movs	r3, #0
 80077c6:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = DATA_READ;//FAST_READ;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	613a      	str	r2, [r7, #16]
 80077ce:	4a30      	ldr	r2, [pc, #192]	; (8007890 <W25qxx_ReadPage+0x160>)
 80077d0:	2103      	movs	r1, #3
 80077d2:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	0c19      	lsrs	r1, r3, #16
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	613a      	str	r2, [r7, #16]
 80077de:	b2c9      	uxtb	r1, r1
 80077e0:	4a2b      	ldr	r2, [pc, #172]	; (8007890 <W25qxx_ReadPage+0x160>)
 80077e2:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	0a19      	lsrs	r1, r3, #8
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	613a      	str	r2, [r7, #16]
 80077ee:	b2c9      	uxtb	r1, r1
 80077f0:	4a27      	ldr	r2, [pc, #156]	; (8007890 <W25qxx_ReadPage+0x160>)
 80077f2:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	1c5a      	adds	r2, r3, #1
 80077f8:	613a      	str	r2, [r7, #16]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	b2d1      	uxtb	r1, r2
 80077fe:	4a24      	ldr	r2, [pc, #144]	; (8007890 <W25qxx_ReadPage+0x160>)
 8007800:	54d1      	strb	r1, [r2, r3]
    //pageTmp[idx++] = 0;
    spiRdy = 0;
 8007802:	4b24      	ldr	r3, [pc, #144]	; (8007894 <W25qxx_ReadPage+0x164>)
 8007804:	2200      	movs	r2, #0
 8007806:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 8007808:	4b23      	ldr	r3, [pc, #140]	; (8007898 <W25qxx_ReadPage+0x168>)
 800780a:	2201      	movs	r2, #1
 800780c:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 800780e:	f7ff fb45 	bl	8006e9c <W25_SELECT>
    if (w25_withDMA) {
 8007812:	4b21      	ldr	r3, [pc, #132]	; (8007898 <W25qxx_ReadPage+0x168>)
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d012      	beq.n	8007840 <W25qxx_ReadPage+0x110>
    	HAL_SPI_TransmitReceive_DMA(portFLASH, pageTmp, pageTmp, lens);
 800781a:	4b20      	ldr	r3, [pc, #128]	; (800789c <W25qxx_ReadPage+0x16c>)
 800781c:	6818      	ldr	r0, [r3, #0]
 800781e:	8afb      	ldrh	r3, [r7, #22]
 8007820:	4a1b      	ldr	r2, [pc, #108]	; (8007890 <W25qxx_ReadPage+0x160>)
 8007822:	491b      	ldr	r1, [pc, #108]	; (8007890 <W25qxx_ReadPage+0x160>)
 8007824:	f005 f86e 	bl	800c904 <HAL_SPI_TransmitReceive_DMA>
    	while (!spiRdy) {
 8007828:	e002      	b.n	8007830 <W25qxx_ReadPage+0x100>
    		W25qxx_Delay(1);
 800782a:	2001      	movs	r0, #1
 800782c:	f000 f90a 	bl	8007a44 <HAL_Delay>
    	while (!spiRdy) {
 8007830:	4b18      	ldr	r3, [pc, #96]	; (8007894 <W25qxx_ReadPage+0x164>)
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d0f8      	beq.n	800782a <W25qxx_ReadPage+0xfa>
    	}
w25_withDMA = 0;
 8007838:	4b17      	ldr	r3, [pc, #92]	; (8007898 <W25qxx_ReadPage+0x168>)
 800783a:	2200      	movs	r2, #0
 800783c:	701a      	strb	r2, [r3, #0]
 800783e:	e017      	b.n	8007870 <W25qxx_ReadPage+0x140>
    } else {
    	if (HAL_SPI_TransmitReceive(portFLASH, pageTmp, pageTmp, lens, min_wait_ms) != HAL_OK) devError |= devSPI;
 8007840:	4b16      	ldr	r3, [pc, #88]	; (800789c <W25qxx_ReadPage+0x16c>)
 8007842:	6818      	ldr	r0, [r3, #0]
 8007844:	22fa      	movs	r2, #250	; 0xfa
 8007846:	8afb      	ldrh	r3, [r7, #22]
 8007848:	9200      	str	r2, [sp, #0]
 800784a:	4a11      	ldr	r2, [pc, #68]	; (8007890 <W25qxx_ReadPage+0x160>)
 800784c:	4910      	ldr	r1, [pc, #64]	; (8007890 <W25qxx_ReadPage+0x160>)
 800784e:	f004 fd52 	bl	800c2f6 <HAL_SPI_TransmitReceive>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d006      	beq.n	8007866 <W25qxx_ReadPage+0x136>
 8007858:	4b11      	ldr	r3, [pc, #68]	; (80078a0 <W25qxx_ReadPage+0x170>)
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007860:	b29a      	uxth	r2, r3
 8007862:	4b0f      	ldr	r3, [pc, #60]	; (80078a0 <W25qxx_ReadPage+0x170>)
 8007864:	801a      	strh	r2, [r3, #0]
    	W25_UNSELECT();
 8007866:	f7ff fb25 	bl	8006eb4 <W25_UNSELECT>

    	spiRdy = 1;
 800786a:	4b0a      	ldr	r3, [pc, #40]	; (8007894 <W25qxx_ReadPage+0x164>)
 800786c:	2201      	movs	r2, #1
 800786e:	701a      	strb	r2, [r3, #0]
    }
	memcpy(pBuffer, &pageTmp[PAGE_HDR_BYTES], NumByteToRead_up_to_PageSize);//w25qxx.PageSize);
 8007870:	683a      	ldr	r2, [r7, #0]
 8007872:	490c      	ldr	r1, [pc, #48]	; (80078a4 <W25qxx_ReadPage+0x174>)
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f00b fe65 	bl	8013544 <memcpy>
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif


    w25qxx.Lock = 0;
 800787a:	4b04      	ldr	r3, [pc, #16]	; (800788c <W25qxx_ReadPage+0x15c>)
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8007882:	bf00      	nop
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	20003694 	.word	0x20003694
 8007890:	200036bc 	.word	0x200036bc
 8007894:	200000f4 	.word	0x200000f4
 8007898:	200037c1 	.word	0x200037c1
 800789c:	20000010 	.word	0x20000010
 80078a0:	20001b08 	.word	0x20001b08
 80078a4:	200036c0 	.word	0x200036c0

080078a8 <W25qxx_ReadSector>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b088      	sub	sp, #32
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
 80078b4:	603b      	str	r3, [r7, #0]
    if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToRead_up_to_SectorSize)
 80078b6:	4b31      	ldr	r3, [pc, #196]	; (800797c <W25qxx_ReadSector+0xd4>)
 80078b8:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80078bc:	683a      	ldr	r2, [r7, #0]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d802      	bhi.n	80078c8 <W25qxx_ReadSector+0x20>
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d103      	bne.n	80078d0 <W25qxx_ReadSector+0x28>
                NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80078c8:	4b2c      	ldr	r3, [pc, #176]	; (800797c <W25qxx_ReadSector+0xd4>)
 80078ca:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80078ce:	603b      	str	r3, [r7, #0]
    Report(1, "%s:0x%X(%u), Offset:%u ,Read %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 80078d0:	4b2a      	ldr	r3, [pc, #168]	; (800797c <W25qxx_ReadSector+0xd4>)
 80078d2:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d24b      	bcs.n	8007974 <W25qxx_ReadSector+0xcc>
        return;
    }

    int32_t BytesToRead;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	441a      	add	r2, r3
 80078e2:	4b26      	ldr	r3, [pc, #152]	; (800797c <W25qxx_ReadSector+0xd4>)
 80078e4:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d906      	bls.n	80078fa <W25qxx_ReadSector+0x52>
        BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80078ec:	4b23      	ldr	r3, [pc, #140]	; (800797c <W25qxx_ReadSector+0xd4>)
 80078ee:	f8d3 200f 	ldr.w	r2, [r3, #15]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	61fb      	str	r3, [r7, #28]
 80078f8:	e001      	b.n	80078fe <W25qxx_ReadSector+0x56>
    else
        BytesToRead = NumByteToRead_up_to_SectorSize;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80078fe:	68b8      	ldr	r0, [r7, #8]
 8007900:	f7ff fd1e 	bl	8007340 <W25qxx_SectorToPage>
 8007904:	4602      	mov	r2, r0
 8007906:	4b1d      	ldr	r3, [pc, #116]	; (800797c <W25qxx_ReadSector+0xd4>)
 8007908:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800790c:	b29b      	uxth	r3, r3
 800790e:	4619      	mov	r1, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	fbb3 f3f1 	udiv	r3, r3, r1
 8007916:	4413      	add	r3, r2
 8007918:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 800791a:	4b18      	ldr	r3, [pc, #96]	; (800797c <W25qxx_ReadSector+0xd4>)
 800791c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007920:	b29b      	uxth	r3, r3
 8007922:	461a      	mov	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	fbb3 f1f2 	udiv	r1, r3, r2
 800792a:	fb01 f202 	mul.w	r2, r1, r2
 800792e:	1a9b      	subs	r3, r3, r2
 8007930:	61bb      	str	r3, [r7, #24]
    do {
        W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	69ba      	ldr	r2, [r7, #24]
 8007936:	6979      	ldr	r1, [r7, #20]
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f7ff fef9 	bl	8007730 <W25qxx_ReadPage>
        StartPage++;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	3301      	adds	r3, #1
 8007942:	617b      	str	r3, [r7, #20]
        BytesToRead -= w25qxx.PageSize - LocalOffset;
 8007944:	4b0d      	ldr	r3, [pc, #52]	; (800797c <W25qxx_ReadSector+0xd4>)
 8007946:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800794a:	b29b      	uxth	r3, r3
 800794c:	461a      	mov	r2, r3
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	1a9a      	subs	r2, r3, r2
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	4413      	add	r3, r2
 8007956:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 8007958:	4b08      	ldr	r3, [pc, #32]	; (800797c <W25qxx_ReadSector+0xd4>)
 800795a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800795e:	b29b      	uxth	r3, r3
 8007960:	461a      	mov	r2, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	4413      	add	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 8007968:	2300      	movs	r3, #0
 800796a:	61bb      	str	r3, [r7, #24]
    } while(BytesToRead > 0);
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	2b00      	cmp	r3, #0
 8007970:	dcdf      	bgt.n	8007932 <W25qxx_ReadSector+0x8a>
 8007972:	e000      	b.n	8007976 <W25qxx_ReadSector+0xce>
        return;
 8007974:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 8007976:	3720      	adds	r7, #32
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	20003694 	.word	0x20003694

08007980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80079b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007984:	f7ff fa78 	bl	8006e78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007988:	480c      	ldr	r0, [pc, #48]	; (80079bc <LoopForever+0x6>)
  ldr r1, =_edata
 800798a:	490d      	ldr	r1, [pc, #52]	; (80079c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800798c:	4a0d      	ldr	r2, [pc, #52]	; (80079c4 <LoopForever+0xe>)
  movs r3, #0
 800798e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007990:	e002      	b.n	8007998 <LoopCopyDataInit>

08007992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007996:	3304      	adds	r3, #4

08007998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800799a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800799c:	d3f9      	bcc.n	8007992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800799e:	4a0a      	ldr	r2, [pc, #40]	; (80079c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80079a0:	4c0a      	ldr	r4, [pc, #40]	; (80079cc <LoopForever+0x16>)
  movs r3, #0
 80079a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80079a4:	e001      	b.n	80079aa <LoopFillZerobss>

080079a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80079a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80079a8:	3204      	adds	r2, #4

080079aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80079aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80079ac:	d3fb      	bcc.n	80079a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80079ae:	f00b fd91 	bl	80134d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80079b2:	f7fa fbfb 	bl	80021ac <main>

080079b6 <LoopForever>:

LoopForever:
    b LoopForever
 80079b6:	e7fe      	b.n	80079b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80079b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80079bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80079c0:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 80079c4:	080198b4 	.word	0x080198b4
  ldr r2, =_sbss
 80079c8:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 80079cc:	200085e8 	.word	0x200085e8

080079d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80079d0:	e7fe      	b.n	80079d0 <ADC1_2_IRQHandler>

080079d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b082      	sub	sp, #8
 80079d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80079dc:	2003      	movs	r0, #3
 80079de:	f000 f902 	bl	8007be6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80079e2:	200f      	movs	r0, #15
 80079e4:	f7ff f844 	bl	8006a70 <HAL_InitTick>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d002      	beq.n	80079f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	71fb      	strb	r3, [r7, #7]
 80079f2:	e001      	b.n	80079f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80079f4:	f7fe fcb0 	bl	8006358 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80079f8:	79fb      	ldrb	r3, [r7, #7]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
	...

08007a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007a04:	b480      	push	{r7}
 8007a06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007a08:	4b06      	ldr	r3, [pc, #24]	; (8007a24 <HAL_IncTick+0x20>)
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	4b06      	ldr	r3, [pc, #24]	; (8007a28 <HAL_IncTick+0x24>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4413      	add	r3, r2
 8007a14:	4a04      	ldr	r2, [pc, #16]	; (8007a28 <HAL_IncTick+0x24>)
 8007a16:	6013      	str	r3, [r2, #0]
}
 8007a18:	bf00      	nop
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	20000170 	.word	0x20000170
 8007a28:	200037c4 	.word	0x200037c4

08007a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8007a30:	4b03      	ldr	r3, [pc, #12]	; (8007a40 <HAL_GetTick+0x14>)
 8007a32:	681b      	ldr	r3, [r3, #0]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	200037c4 	.word	0x200037c4

08007a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007a4c:	f7ff ffee 	bl	8007a2c <HAL_GetTick>
 8007a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a5c:	d005      	beq.n	8007a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8007a5e:	4b0a      	ldr	r3, [pc, #40]	; (8007a88 <HAL_Delay+0x44>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	461a      	mov	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	4413      	add	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007a6a:	bf00      	nop
 8007a6c:	f7ff ffde 	bl	8007a2c <HAL_GetTick>
 8007a70:	4602      	mov	r2, r0
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d8f7      	bhi.n	8007a6c <HAL_Delay+0x28>
  {
  }
}
 8007a7c:	bf00      	nop
 8007a7e:	bf00      	nop
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	20000170 	.word	0x20000170

08007a8c <__NVIC_SetPriorityGrouping>:
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f003 0307 	and.w	r3, r3, #7
 8007a9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007a9c:	4b0c      	ldr	r3, [pc, #48]	; (8007ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007abe:	4a04      	ldr	r2, [pc, #16]	; (8007ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	60d3      	str	r3, [r2, #12]
}
 8007ac4:	bf00      	nop
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	e000ed00 	.word	0xe000ed00

08007ad4 <__NVIC_GetPriorityGrouping>:
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ad8:	4b04      	ldr	r3, [pc, #16]	; (8007aec <__NVIC_GetPriorityGrouping+0x18>)
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	0a1b      	lsrs	r3, r3, #8
 8007ade:	f003 0307 	and.w	r3, r3, #7
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	e000ed00 	.word	0xe000ed00

08007af0 <__NVIC_EnableIRQ>:
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	db0b      	blt.n	8007b1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b02:	79fb      	ldrb	r3, [r7, #7]
 8007b04:	f003 021f 	and.w	r2, r3, #31
 8007b08:	4907      	ldr	r1, [pc, #28]	; (8007b28 <__NVIC_EnableIRQ+0x38>)
 8007b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b0e:	095b      	lsrs	r3, r3, #5
 8007b10:	2001      	movs	r0, #1
 8007b12:	fa00 f202 	lsl.w	r2, r0, r2
 8007b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007b1a:	bf00      	nop
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	e000e100 	.word	0xe000e100

08007b2c <__NVIC_SetPriority>:
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	4603      	mov	r3, r0
 8007b34:	6039      	str	r1, [r7, #0]
 8007b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	db0a      	blt.n	8007b56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	b2da      	uxtb	r2, r3
 8007b44:	490c      	ldr	r1, [pc, #48]	; (8007b78 <__NVIC_SetPriority+0x4c>)
 8007b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b4a:	0112      	lsls	r2, r2, #4
 8007b4c:	b2d2      	uxtb	r2, r2
 8007b4e:	440b      	add	r3, r1
 8007b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007b54:	e00a      	b.n	8007b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	4908      	ldr	r1, [pc, #32]	; (8007b7c <__NVIC_SetPriority+0x50>)
 8007b5c:	79fb      	ldrb	r3, [r7, #7]
 8007b5e:	f003 030f 	and.w	r3, r3, #15
 8007b62:	3b04      	subs	r3, #4
 8007b64:	0112      	lsls	r2, r2, #4
 8007b66:	b2d2      	uxtb	r2, r2
 8007b68:	440b      	add	r3, r1
 8007b6a:	761a      	strb	r2, [r3, #24]
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	e000e100 	.word	0xe000e100
 8007b7c:	e000ed00 	.word	0xe000ed00

08007b80 <NVIC_EncodePriority>:
{
 8007b80:	b480      	push	{r7}
 8007b82:	b089      	sub	sp, #36	; 0x24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f003 0307 	and.w	r3, r3, #7
 8007b92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	f1c3 0307 	rsb	r3, r3, #7
 8007b9a:	2b04      	cmp	r3, #4
 8007b9c:	bf28      	it	cs
 8007b9e:	2304      	movcs	r3, #4
 8007ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	2b06      	cmp	r3, #6
 8007ba8:	d902      	bls.n	8007bb0 <NVIC_EncodePriority+0x30>
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	3b03      	subs	r3, #3
 8007bae:	e000      	b.n	8007bb2 <NVIC_EncodePriority+0x32>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	fa02 f303 	lsl.w	r3, r2, r3
 8007bbe:	43da      	mvns	r2, r3
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	401a      	ands	r2, r3
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007bc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd2:	43d9      	mvns	r1, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bd8:	4313      	orrs	r3, r2
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3724      	adds	r7, #36	; 0x24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b082      	sub	sp, #8
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f7ff ff4c 	bl	8007a8c <__NVIC_SetPriorityGrouping>
}
 8007bf4:	bf00      	nop
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	4603      	mov	r3, r0
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007c0e:	f7ff ff61 	bl	8007ad4 <__NVIC_GetPriorityGrouping>
 8007c12:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	68b9      	ldr	r1, [r7, #8]
 8007c18:	6978      	ldr	r0, [r7, #20]
 8007c1a:	f7ff ffb1 	bl	8007b80 <NVIC_EncodePriority>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c24:	4611      	mov	r1, r2
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7ff ff80 	bl	8007b2c <__NVIC_SetPriority>
}
 8007c2c:	bf00      	nop
 8007c2e:	3718      	adds	r7, #24
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7ff ff54 	bl	8007af0 <__NVIC_EnableIRQ>
}
 8007c48:	bf00      	nop
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e098      	b.n	8007d94 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	461a      	mov	r2, r3
 8007c68:	4b4d      	ldr	r3, [pc, #308]	; (8007da0 <HAL_DMA_Init+0x150>)
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d80f      	bhi.n	8007c8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	4b4b      	ldr	r3, [pc, #300]	; (8007da4 <HAL_DMA_Init+0x154>)
 8007c76:	4413      	add	r3, r2
 8007c78:	4a4b      	ldr	r2, [pc, #300]	; (8007da8 <HAL_DMA_Init+0x158>)
 8007c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c7e:	091b      	lsrs	r3, r3, #4
 8007c80:	009a      	lsls	r2, r3, #2
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a48      	ldr	r2, [pc, #288]	; (8007dac <HAL_DMA_Init+0x15c>)
 8007c8a:	641a      	str	r2, [r3, #64]	; 0x40
 8007c8c:	e00e      	b.n	8007cac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	461a      	mov	r2, r3
 8007c94:	4b46      	ldr	r3, [pc, #280]	; (8007db0 <HAL_DMA_Init+0x160>)
 8007c96:	4413      	add	r3, r2
 8007c98:	4a43      	ldr	r2, [pc, #268]	; (8007da8 <HAL_DMA_Init+0x158>)
 8007c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c9e:	091b      	lsrs	r3, r3, #4
 8007ca0:	009a      	lsls	r2, r3, #2
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a42      	ldr	r2, [pc, #264]	; (8007db4 <HAL_DMA_Init+0x164>)
 8007caa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2202      	movs	r2, #2
 8007cb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007cd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ce8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d06:	d039      	beq.n	8007d7c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0c:	4a27      	ldr	r2, [pc, #156]	; (8007dac <HAL_DMA_Init+0x15c>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d11a      	bne.n	8007d48 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007d12:	4b29      	ldr	r3, [pc, #164]	; (8007db8 <HAL_DMA_Init+0x168>)
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d1a:	f003 031c 	and.w	r3, r3, #28
 8007d1e:	210f      	movs	r1, #15
 8007d20:	fa01 f303 	lsl.w	r3, r1, r3
 8007d24:	43db      	mvns	r3, r3
 8007d26:	4924      	ldr	r1, [pc, #144]	; (8007db8 <HAL_DMA_Init+0x168>)
 8007d28:	4013      	ands	r3, r2
 8007d2a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007d2c:	4b22      	ldr	r3, [pc, #136]	; (8007db8 <HAL_DMA_Init+0x168>)
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6859      	ldr	r1, [r3, #4]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d38:	f003 031c 	and.w	r3, r3, #28
 8007d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d40:	491d      	ldr	r1, [pc, #116]	; (8007db8 <HAL_DMA_Init+0x168>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	600b      	str	r3, [r1, #0]
 8007d46:	e019      	b.n	8007d7c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007d48:	4b1c      	ldr	r3, [pc, #112]	; (8007dbc <HAL_DMA_Init+0x16c>)
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d50:	f003 031c 	and.w	r3, r3, #28
 8007d54:	210f      	movs	r1, #15
 8007d56:	fa01 f303 	lsl.w	r3, r1, r3
 8007d5a:	43db      	mvns	r3, r3
 8007d5c:	4917      	ldr	r1, [pc, #92]	; (8007dbc <HAL_DMA_Init+0x16c>)
 8007d5e:	4013      	ands	r3, r2
 8007d60:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007d62:	4b16      	ldr	r3, [pc, #88]	; (8007dbc <HAL_DMA_Init+0x16c>)
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6859      	ldr	r1, [r3, #4]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d6e:	f003 031c 	and.w	r3, r3, #28
 8007d72:	fa01 f303 	lsl.w	r3, r1, r3
 8007d76:	4911      	ldr	r1, [pc, #68]	; (8007dbc <HAL_DMA_Init+0x16c>)
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	40020407 	.word	0x40020407
 8007da4:	bffdfff8 	.word	0xbffdfff8
 8007da8:	cccccccd 	.word	0xcccccccd
 8007dac:	40020000 	.word	0x40020000
 8007db0:	bffdfbf8 	.word	0xbffdfbf8
 8007db4:	40020400 	.word	0x40020400
 8007db8:	400200a8 	.word	0x400200a8
 8007dbc:	400204a8 	.word	0x400204a8

08007dc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]
 8007dcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d101      	bne.n	8007de0 <HAL_DMA_Start_IT+0x20>
 8007ddc:	2302      	movs	r3, #2
 8007dde:	e04b      	b.n	8007e78 <HAL_DMA_Start_IT+0xb8>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d13a      	bne.n	8007e6a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2202      	movs	r2, #2
 8007df8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f022 0201 	bic.w	r2, r2, #1
 8007e10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	68b9      	ldr	r1, [r7, #8]
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 f96d 	bl	80080f8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d008      	beq.n	8007e38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f042 020e 	orr.w	r2, r2, #14
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	e00f      	b.n	8007e58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f022 0204 	bic.w	r2, r2, #4
 8007e46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f042 020a 	orr.w	r2, r2, #10
 8007e56:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f042 0201 	orr.w	r2, r2, #1
 8007e66:	601a      	str	r2, [r3, #0]
 8007e68:	e005      	b.n	8007e76 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007e72:	2302      	movs	r3, #2
 8007e74:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3718      	adds	r7, #24
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d008      	beq.n	8007eaa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2204      	movs	r2, #4
 8007e9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e022      	b.n	8007ef0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f022 020e 	bic.w	r2, r2, #14
 8007eb8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f022 0201 	bic.w	r2, r2, #1
 8007ec8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ece:	f003 021c 	and.w	r2, r3, #28
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed6:	2101      	movs	r1, #1
 8007ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8007edc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d005      	beq.n	8007f20 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2204      	movs	r2, #4
 8007f18:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	73fb      	strb	r3, [r7, #15]
 8007f1e:	e029      	b.n	8007f74 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 020e 	bic.w	r2, r2, #14
 8007f2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f022 0201 	bic.w	r2, r2, #1
 8007f3e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f44:	f003 021c 	and.w	r2, r3, #28
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8007f52:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d003      	beq.n	8007f74 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	4798      	blx	r3
    }
  }
  return status;
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b084      	sub	sp, #16
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f9a:	f003 031c 	and.w	r3, r3, #28
 8007f9e:	2204      	movs	r2, #4
 8007fa0:	409a      	lsls	r2, r3
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d026      	beq.n	8007ff8 <HAL_DMA_IRQHandler+0x7a>
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	f003 0304 	and.w	r3, r3, #4
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d021      	beq.n	8007ff8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0320 	and.w	r3, r3, #32
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d107      	bne.n	8007fd2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 0204 	bic.w	r2, r2, #4
 8007fd0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd6:	f003 021c 	and.w	r2, r3, #28
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fde:	2104      	movs	r1, #4
 8007fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8007fe4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d071      	beq.n	80080d2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8007ff6:	e06c      	b.n	80080d2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ffc:	f003 031c 	and.w	r3, r3, #28
 8008000:	2202      	movs	r2, #2
 8008002:	409a      	lsls	r2, r3
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	4013      	ands	r3, r2
 8008008:	2b00      	cmp	r3, #0
 800800a:	d02e      	beq.n	800806a <HAL_DMA_IRQHandler+0xec>
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	f003 0302 	and.w	r3, r3, #2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d029      	beq.n	800806a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0320 	and.w	r3, r3, #32
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10b      	bne.n	800803c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 020a 	bic.w	r2, r2, #10
 8008032:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008040:	f003 021c 	and.w	r2, r3, #28
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008048:	2102      	movs	r1, #2
 800804a:	fa01 f202 	lsl.w	r2, r1, r2
 800804e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805c:	2b00      	cmp	r3, #0
 800805e:	d038      	beq.n	80080d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008068:	e033      	b.n	80080d2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800806e:	f003 031c 	and.w	r3, r3, #28
 8008072:	2208      	movs	r2, #8
 8008074:	409a      	lsls	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	4013      	ands	r3, r2
 800807a:	2b00      	cmp	r3, #0
 800807c:	d02a      	beq.n	80080d4 <HAL_DMA_IRQHandler+0x156>
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	f003 0308 	and.w	r3, r3, #8
 8008084:	2b00      	cmp	r3, #0
 8008086:	d025      	beq.n	80080d4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f022 020e 	bic.w	r2, r2, #14
 8008096:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800809c:	f003 021c 	and.w	r2, r3, #28
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a4:	2101      	movs	r1, #1
 80080a6:	fa01 f202 	lsl.w	r2, r1, r2
 80080aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d004      	beq.n	80080d4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80080d2:	bf00      	nop
 80080d4:	bf00      	nop
}
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80080ea:	b2db      	uxtb	r3, r3
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
 8008104:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810a:	f003 021c 	and.w	r2, r3, #28
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008112:	2101      	movs	r1, #1
 8008114:	fa01 f202 	lsl.w	r2, r1, r2
 8008118:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	2b10      	cmp	r3, #16
 8008128:	d108      	bne.n	800813c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800813a:	e007      	b.n	800814c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	60da      	str	r2, [r3, #12]
}
 800814c:	bf00      	nop
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008158:	b480      	push	{r7}
 800815a:	b087      	sub	sp, #28
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008162:	2300      	movs	r3, #0
 8008164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008166:	e17f      	b.n	8008468 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	2101      	movs	r1, #1
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	fa01 f303 	lsl.w	r3, r1, r3
 8008174:	4013      	ands	r3, r2
 8008176:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 8171 	beq.w	8008462 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	f003 0303 	and.w	r3, r3, #3
 8008188:	2b01      	cmp	r3, #1
 800818a:	d005      	beq.n	8008198 <HAL_GPIO_Init+0x40>
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f003 0303 	and.w	r3, r3, #3
 8008194:	2b02      	cmp	r3, #2
 8008196:	d130      	bne.n	80081fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	005b      	lsls	r3, r3, #1
 80081a2:	2203      	movs	r2, #3
 80081a4:	fa02 f303 	lsl.w	r3, r2, r3
 80081a8:	43db      	mvns	r3, r3
 80081aa:	693a      	ldr	r2, [r7, #16]
 80081ac:	4013      	ands	r3, r2
 80081ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	68da      	ldr	r2, [r3, #12]
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	005b      	lsls	r3, r3, #1
 80081b8:	fa02 f303 	lsl.w	r3, r2, r3
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	4313      	orrs	r3, r2
 80081c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80081ce:	2201      	movs	r2, #1
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	fa02 f303 	lsl.w	r3, r2, r3
 80081d6:	43db      	mvns	r3, r3
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	4013      	ands	r3, r2
 80081dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	091b      	lsrs	r3, r3, #4
 80081e4:	f003 0201 	and.w	r2, r3, #1
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	fa02 f303 	lsl.w	r3, r2, r3
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f003 0303 	and.w	r3, r3, #3
 8008202:	2b03      	cmp	r3, #3
 8008204:	d118      	bne.n	8008238 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800820c:	2201      	movs	r2, #1
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	fa02 f303 	lsl.w	r3, r2, r3
 8008214:	43db      	mvns	r3, r3
 8008216:	693a      	ldr	r2, [r7, #16]
 8008218:	4013      	ands	r3, r2
 800821a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	08db      	lsrs	r3, r3, #3
 8008222:	f003 0201 	and.w	r2, r3, #1
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	fa02 f303 	lsl.w	r3, r2, r3
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	4313      	orrs	r3, r2
 8008230:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	f003 0303 	and.w	r3, r3, #3
 8008240:	2b03      	cmp	r3, #3
 8008242:	d017      	beq.n	8008274 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	005b      	lsls	r3, r3, #1
 800824e:	2203      	movs	r2, #3
 8008250:	fa02 f303 	lsl.w	r3, r2, r3
 8008254:	43db      	mvns	r3, r3
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	4013      	ands	r3, r2
 800825a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	689a      	ldr	r2, [r3, #8]
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	005b      	lsls	r3, r3, #1
 8008264:	fa02 f303 	lsl.w	r3, r2, r3
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	4313      	orrs	r3, r2
 800826c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	f003 0303 	and.w	r3, r3, #3
 800827c:	2b02      	cmp	r3, #2
 800827e:	d123      	bne.n	80082c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	08da      	lsrs	r2, r3, #3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	3208      	adds	r2, #8
 8008288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800828c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	f003 0307 	and.w	r3, r3, #7
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	220f      	movs	r2, #15
 8008298:	fa02 f303 	lsl.w	r3, r2, r3
 800829c:	43db      	mvns	r3, r3
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	4013      	ands	r3, r2
 80082a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	691a      	ldr	r2, [r3, #16]
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	f003 0307 	and.w	r3, r3, #7
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	fa02 f303 	lsl.w	r3, r2, r3
 80082b4:	693a      	ldr	r2, [r7, #16]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	08da      	lsrs	r2, r3, #3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	3208      	adds	r2, #8
 80082c2:	6939      	ldr	r1, [r7, #16]
 80082c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	005b      	lsls	r3, r3, #1
 80082d2:	2203      	movs	r2, #3
 80082d4:	fa02 f303 	lsl.w	r3, r2, r3
 80082d8:	43db      	mvns	r3, r3
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	4013      	ands	r3, r2
 80082de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f003 0203 	and.w	r2, r3, #3
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	005b      	lsls	r3, r3, #1
 80082ec:	fa02 f303 	lsl.w	r3, r2, r3
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008304:	2b00      	cmp	r3, #0
 8008306:	f000 80ac 	beq.w	8008462 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800830a:	4b5f      	ldr	r3, [pc, #380]	; (8008488 <HAL_GPIO_Init+0x330>)
 800830c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800830e:	4a5e      	ldr	r2, [pc, #376]	; (8008488 <HAL_GPIO_Init+0x330>)
 8008310:	f043 0301 	orr.w	r3, r3, #1
 8008314:	6613      	str	r3, [r2, #96]	; 0x60
 8008316:	4b5c      	ldr	r3, [pc, #368]	; (8008488 <HAL_GPIO_Init+0x330>)
 8008318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	60bb      	str	r3, [r7, #8]
 8008320:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008322:	4a5a      	ldr	r2, [pc, #360]	; (800848c <HAL_GPIO_Init+0x334>)
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	089b      	lsrs	r3, r3, #2
 8008328:	3302      	adds	r3, #2
 800832a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800832e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	f003 0303 	and.w	r3, r3, #3
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	220f      	movs	r2, #15
 800833a:	fa02 f303 	lsl.w	r3, r2, r3
 800833e:	43db      	mvns	r3, r3
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	4013      	ands	r3, r2
 8008344:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800834c:	d025      	beq.n	800839a <HAL_GPIO_Init+0x242>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a4f      	ldr	r2, [pc, #316]	; (8008490 <HAL_GPIO_Init+0x338>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d01f      	beq.n	8008396 <HAL_GPIO_Init+0x23e>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a4e      	ldr	r2, [pc, #312]	; (8008494 <HAL_GPIO_Init+0x33c>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d019      	beq.n	8008392 <HAL_GPIO_Init+0x23a>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a4d      	ldr	r2, [pc, #308]	; (8008498 <HAL_GPIO_Init+0x340>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d013      	beq.n	800838e <HAL_GPIO_Init+0x236>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a4c      	ldr	r2, [pc, #304]	; (800849c <HAL_GPIO_Init+0x344>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d00d      	beq.n	800838a <HAL_GPIO_Init+0x232>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a4b      	ldr	r2, [pc, #300]	; (80084a0 <HAL_GPIO_Init+0x348>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d007      	beq.n	8008386 <HAL_GPIO_Init+0x22e>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a4a      	ldr	r2, [pc, #296]	; (80084a4 <HAL_GPIO_Init+0x34c>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d101      	bne.n	8008382 <HAL_GPIO_Init+0x22a>
 800837e:	2306      	movs	r3, #6
 8008380:	e00c      	b.n	800839c <HAL_GPIO_Init+0x244>
 8008382:	2307      	movs	r3, #7
 8008384:	e00a      	b.n	800839c <HAL_GPIO_Init+0x244>
 8008386:	2305      	movs	r3, #5
 8008388:	e008      	b.n	800839c <HAL_GPIO_Init+0x244>
 800838a:	2304      	movs	r3, #4
 800838c:	e006      	b.n	800839c <HAL_GPIO_Init+0x244>
 800838e:	2303      	movs	r3, #3
 8008390:	e004      	b.n	800839c <HAL_GPIO_Init+0x244>
 8008392:	2302      	movs	r3, #2
 8008394:	e002      	b.n	800839c <HAL_GPIO_Init+0x244>
 8008396:	2301      	movs	r3, #1
 8008398:	e000      	b.n	800839c <HAL_GPIO_Init+0x244>
 800839a:	2300      	movs	r3, #0
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	f002 0203 	and.w	r2, r2, #3
 80083a2:	0092      	lsls	r2, r2, #2
 80083a4:	4093      	lsls	r3, r2
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80083ac:	4937      	ldr	r1, [pc, #220]	; (800848c <HAL_GPIO_Init+0x334>)
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	089b      	lsrs	r3, r3, #2
 80083b2:	3302      	adds	r3, #2
 80083b4:	693a      	ldr	r2, [r7, #16]
 80083b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80083ba:	4b3b      	ldr	r3, [pc, #236]	; (80084a8 <HAL_GPIO_Init+0x350>)
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	43db      	mvns	r3, r3
 80083c4:	693a      	ldr	r2, [r7, #16]
 80083c6:	4013      	ands	r3, r2
 80083c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	4313      	orrs	r3, r2
 80083dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80083de:	4a32      	ldr	r2, [pc, #200]	; (80084a8 <HAL_GPIO_Init+0x350>)
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80083e4:	4b30      	ldr	r3, [pc, #192]	; (80084a8 <HAL_GPIO_Init+0x350>)
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	43db      	mvns	r3, r3
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	4013      	ands	r3, r2
 80083f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d003      	beq.n	8008408 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	4313      	orrs	r3, r2
 8008406:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008408:	4a27      	ldr	r2, [pc, #156]	; (80084a8 <HAL_GPIO_Init+0x350>)
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800840e:	4b26      	ldr	r3, [pc, #152]	; (80084a8 <HAL_GPIO_Init+0x350>)
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	43db      	mvns	r3, r3
 8008418:	693a      	ldr	r2, [r7, #16]
 800841a:	4013      	ands	r3, r2
 800841c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	4313      	orrs	r3, r2
 8008430:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008432:	4a1d      	ldr	r2, [pc, #116]	; (80084a8 <HAL_GPIO_Init+0x350>)
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008438:	4b1b      	ldr	r3, [pc, #108]	; (80084a8 <HAL_GPIO_Init+0x350>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	43db      	mvns	r3, r3
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	4013      	ands	r3, r2
 8008446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d003      	beq.n	800845c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	4313      	orrs	r3, r2
 800845a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800845c:	4a12      	ldr	r2, [pc, #72]	; (80084a8 <HAL_GPIO_Init+0x350>)
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	3301      	adds	r3, #1
 8008466:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	fa22 f303 	lsr.w	r3, r2, r3
 8008472:	2b00      	cmp	r3, #0
 8008474:	f47f ae78 	bne.w	8008168 <HAL_GPIO_Init+0x10>
  }
}
 8008478:	bf00      	nop
 800847a:	bf00      	nop
 800847c:	371c      	adds	r7, #28
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	40021000 	.word	0x40021000
 800848c:	40010000 	.word	0x40010000
 8008490:	48000400 	.word	0x48000400
 8008494:	48000800 	.word	0x48000800
 8008498:	48000c00 	.word	0x48000c00
 800849c:	48001000 	.word	0x48001000
 80084a0:	48001400 	.word	0x48001400
 80084a4:	48001800 	.word	0x48001800
 80084a8:	40010400 	.word	0x40010400

080084ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	460b      	mov	r3, r1
 80084b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	691a      	ldr	r2, [r3, #16]
 80084bc:	887b      	ldrh	r3, [r7, #2]
 80084be:	4013      	ands	r3, r2
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80084c4:	2301      	movs	r3, #1
 80084c6:	73fb      	strb	r3, [r7, #15]
 80084c8:	e001      	b.n	80084ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80084ca:	2300      	movs	r3, #0
 80084cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3714      	adds	r7, #20
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	460b      	mov	r3, r1
 80084e6:	807b      	strh	r3, [r7, #2]
 80084e8:	4613      	mov	r3, r2
 80084ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80084ec:	787b      	ldrb	r3, [r7, #1]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d003      	beq.n	80084fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80084f2:	887a      	ldrh	r2, [r7, #2]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80084f8:	e002      	b.n	8008500 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80084fa:	887a      	ldrh	r2, [r7, #2]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	460b      	mov	r3, r1
 8008516:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	695b      	ldr	r3, [r3, #20]
 800851c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800851e:	887a      	ldrh	r2, [r7, #2]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	4013      	ands	r3, r2
 8008524:	041a      	lsls	r2, r3, #16
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	43d9      	mvns	r1, r3
 800852a:	887b      	ldrh	r3, [r7, #2]
 800852c:	400b      	ands	r3, r1
 800852e:	431a      	orrs	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	619a      	str	r2, [r3, #24]
}
 8008534:	bf00      	nop
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	4603      	mov	r3, r0
 8008548:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800854a:	4b08      	ldr	r3, [pc, #32]	; (800856c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800854c:	695a      	ldr	r2, [r3, #20]
 800854e:	88fb      	ldrh	r3, [r7, #6]
 8008550:	4013      	ands	r3, r2
 8008552:	2b00      	cmp	r3, #0
 8008554:	d006      	beq.n	8008564 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008556:	4a05      	ldr	r2, [pc, #20]	; (800856c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008558:	88fb      	ldrh	r3, [r7, #6]
 800855a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800855c:	88fb      	ldrh	r3, [r7, #6]
 800855e:	4618      	mov	r0, r3
 8008560:	f7fb fb2c 	bl	8003bbc <HAL_GPIO_EXTI_Callback>
  }
}
 8008564:	bf00      	nop
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	40010400 	.word	0x40010400

08008570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e081      	b.n	8008686 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d106      	bne.n	800859c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7fd ff06 	bl	80063a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2224      	movs	r2, #36	; 0x24
 80085a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f022 0201 	bic.w	r2, r2, #1
 80085b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685a      	ldr	r2, [r3, #4]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80085c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	689a      	ldr	r2, [r3, #8]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80085d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d107      	bne.n	80085ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	689a      	ldr	r2, [r3, #8]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085e6:	609a      	str	r2, [r3, #8]
 80085e8:	e006      	b.n	80085f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	689a      	ldr	r2, [r3, #8]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80085f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d104      	bne.n	800860a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008608:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	6812      	ldr	r2, [r2, #0]
 8008614:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800861c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68da      	ldr	r2, [r3, #12]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800862c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	691a      	ldr	r2, [r3, #16]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	430a      	orrs	r2, r1
 8008646:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	69d9      	ldr	r1, [r3, #28]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a1a      	ldr	r2, [r3, #32]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	430a      	orrs	r2, r1
 8008656:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f042 0201 	orr.w	r2, r2, #1
 8008666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2220      	movs	r2, #32
 8008672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
	...

08008690 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af02      	add	r7, sp, #8
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	607a      	str	r2, [r7, #4]
 800869a:	461a      	mov	r2, r3
 800869c:	460b      	mov	r3, r1
 800869e:	817b      	strh	r3, [r7, #10]
 80086a0:	4613      	mov	r3, r2
 80086a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	2b20      	cmp	r3, #32
 80086ae:	f040 80da 	bne.w	8008866 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d101      	bne.n	80086c0 <HAL_I2C_Master_Transmit+0x30>
 80086bc:	2302      	movs	r3, #2
 80086be:	e0d3      	b.n	8008868 <HAL_I2C_Master_Transmit+0x1d8>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80086c8:	f7ff f9b0 	bl	8007a2c <HAL_GetTick>
 80086cc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	2319      	movs	r3, #25
 80086d4:	2201      	movs	r2, #1
 80086d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f001 f8d1 	bl	8009882 <I2C_WaitOnFlagUntilTimeout>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d001      	beq.n	80086ea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	e0be      	b.n	8008868 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2221      	movs	r2, #33	; 0x21
 80086ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2210      	movs	r2, #16
 80086f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	893a      	ldrh	r2, [r7, #8]
 800870a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008716:	b29b      	uxth	r3, r3
 8008718:	2bff      	cmp	r3, #255	; 0xff
 800871a:	d90e      	bls.n	800873a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	22ff      	movs	r2, #255	; 0xff
 8008720:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008726:	b2da      	uxtb	r2, r3
 8008728:	8979      	ldrh	r1, [r7, #10]
 800872a:	4b51      	ldr	r3, [pc, #324]	; (8008870 <HAL_I2C_Master_Transmit+0x1e0>)
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f001 fa4e 	bl	8009bd4 <I2C_TransferConfig>
 8008738:	e06c      	b.n	8008814 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800873e:	b29a      	uxth	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008748:	b2da      	uxtb	r2, r3
 800874a:	8979      	ldrh	r1, [r7, #10]
 800874c:	4b48      	ldr	r3, [pc, #288]	; (8008870 <HAL_I2C_Master_Transmit+0x1e0>)
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f001 fa3d 	bl	8009bd4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800875a:	e05b      	b.n	8008814 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800875c:	697a      	ldr	r2, [r7, #20]
 800875e:	6a39      	ldr	r1, [r7, #32]
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f001 f8ce 	bl	8009902 <I2C_WaitOnTXISFlagUntilTimeout>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d001      	beq.n	8008770 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	e07b      	b.n	8008868 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008774:	781a      	ldrb	r2, [r3, #0]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008780:	1c5a      	adds	r2, r3, #1
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800878a:	b29b      	uxth	r3, r3
 800878c:	3b01      	subs	r3, #1
 800878e:	b29a      	uxth	r2, r3
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008798:	3b01      	subs	r3, #1
 800879a:	b29a      	uxth	r2, r3
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d034      	beq.n	8008814 <HAL_I2C_Master_Transmit+0x184>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d130      	bne.n	8008814 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	2200      	movs	r2, #0
 80087ba:	2180      	movs	r1, #128	; 0x80
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f001 f860 	bl	8009882 <I2C_WaitOnFlagUntilTimeout>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d001      	beq.n	80087cc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e04d      	b.n	8008868 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	2bff      	cmp	r3, #255	; 0xff
 80087d4:	d90e      	bls.n	80087f4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	22ff      	movs	r2, #255	; 0xff
 80087da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087e0:	b2da      	uxtb	r2, r3
 80087e2:	8979      	ldrh	r1, [r7, #10]
 80087e4:	2300      	movs	r3, #0
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f001 f9f1 	bl	8009bd4 <I2C_TransferConfig>
 80087f2:	e00f      	b.n	8008814 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008802:	b2da      	uxtb	r2, r3
 8008804:	8979      	ldrh	r1, [r7, #10]
 8008806:	2300      	movs	r3, #0
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f001 f9e0 	bl	8009bd4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008818:	b29b      	uxth	r3, r3
 800881a:	2b00      	cmp	r3, #0
 800881c:	d19e      	bne.n	800875c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	6a39      	ldr	r1, [r7, #32]
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f001 f8ad 	bl	8009982 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d001      	beq.n	8008832 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e01a      	b.n	8008868 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2220      	movs	r2, #32
 8008838:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6859      	ldr	r1, [r3, #4]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	4b0b      	ldr	r3, [pc, #44]	; (8008874 <HAL_I2C_Master_Transmit+0x1e4>)
 8008846:	400b      	ands	r3, r1
 8008848:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2220      	movs	r2, #32
 800884e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008862:	2300      	movs	r3, #0
 8008864:	e000      	b.n	8008868 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8008866:	2302      	movs	r3, #2
  }
}
 8008868:	4618      	mov	r0, r3
 800886a:	3718      	adds	r7, #24
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	80002000 	.word	0x80002000
 8008874:	fe00e800 	.word	0xfe00e800

08008878 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b088      	sub	sp, #32
 800887c:	af02      	add	r7, sp, #8
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	4608      	mov	r0, r1
 8008882:	4611      	mov	r1, r2
 8008884:	461a      	mov	r2, r3
 8008886:	4603      	mov	r3, r0
 8008888:	817b      	strh	r3, [r7, #10]
 800888a:	460b      	mov	r3, r1
 800888c:	813b      	strh	r3, [r7, #8]
 800888e:	4613      	mov	r3, r2
 8008890:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b20      	cmp	r3, #32
 800889c:	f040 80f9 	bne.w	8008a92 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80088a0:	6a3b      	ldr	r3, [r7, #32]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d002      	beq.n	80088ac <HAL_I2C_Mem_Write+0x34>
 80088a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d105      	bne.n	80088b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e0ed      	b.n	8008a94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d101      	bne.n	80088c6 <HAL_I2C_Mem_Write+0x4e>
 80088c2:	2302      	movs	r3, #2
 80088c4:	e0e6      	b.n	8008a94 <HAL_I2C_Mem_Write+0x21c>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80088ce:	f7ff f8ad 	bl	8007a2c <HAL_GetTick>
 80088d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	2319      	movs	r3, #25
 80088da:	2201      	movs	r2, #1
 80088dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f000 ffce 	bl	8009882 <I2C_WaitOnFlagUntilTimeout>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d001      	beq.n	80088f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e0d1      	b.n	8008a94 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2221      	movs	r2, #33	; 0x21
 80088f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2240      	movs	r2, #64	; 0x40
 80088fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6a3a      	ldr	r2, [r7, #32]
 800890a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008910:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008918:	88f8      	ldrh	r0, [r7, #6]
 800891a:	893a      	ldrh	r2, [r7, #8]
 800891c:	8979      	ldrh	r1, [r7, #10]
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	9301      	str	r3, [sp, #4]
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	4603      	mov	r3, r0
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f000 fb87 	bl	800903c <I2C_RequestMemoryWrite>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d005      	beq.n	8008940 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e0a9      	b.n	8008a94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008944:	b29b      	uxth	r3, r3
 8008946:	2bff      	cmp	r3, #255	; 0xff
 8008948:	d90e      	bls.n	8008968 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	22ff      	movs	r2, #255	; 0xff
 800894e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008954:	b2da      	uxtb	r2, r3
 8008956:	8979      	ldrh	r1, [r7, #10]
 8008958:	2300      	movs	r3, #0
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f001 f937 	bl	8009bd4 <I2C_TransferConfig>
 8008966:	e00f      	b.n	8008988 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800896c:	b29a      	uxth	r2, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008976:	b2da      	uxtb	r2, r3
 8008978:	8979      	ldrh	r1, [r7, #10]
 800897a:	2300      	movs	r3, #0
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f001 f926 	bl	8009bd4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f000 ffb8 	bl	8009902 <I2C_WaitOnTXISFlagUntilTimeout>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d001      	beq.n	800899c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e07b      	b.n	8008a94 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a0:	781a      	ldrb	r2, [r3, #0]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ac:	1c5a      	adds	r2, r3, #1
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	3b01      	subs	r3, #1
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089c4:	3b01      	subs	r3, #1
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d034      	beq.n	8008a40 <HAL_I2C_Mem_Write+0x1c8>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d130      	bne.n	8008a40 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	9300      	str	r3, [sp, #0]
 80089e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e4:	2200      	movs	r2, #0
 80089e6:	2180      	movs	r1, #128	; 0x80
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f000 ff4a 	bl	8009882 <I2C_WaitOnFlagUntilTimeout>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d001      	beq.n	80089f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	e04d      	b.n	8008a94 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	2bff      	cmp	r3, #255	; 0xff
 8008a00:	d90e      	bls.n	8008a20 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	22ff      	movs	r2, #255	; 0xff
 8008a06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a0c:	b2da      	uxtb	r2, r3
 8008a0e:	8979      	ldrh	r1, [r7, #10]
 8008a10:	2300      	movs	r3, #0
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f001 f8db 	bl	8009bd4 <I2C_TransferConfig>
 8008a1e:	e00f      	b.n	8008a40 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	8979      	ldrh	r1, [r7, #10]
 8008a32:	2300      	movs	r3, #0
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f001 f8ca 	bl	8009bd4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d19e      	bne.n	8008988 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f000 ff97 	bl	8009982 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d001      	beq.n	8008a5e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e01a      	b.n	8008a94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2220      	movs	r2, #32
 8008a64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6859      	ldr	r1, [r3, #4]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	4b0a      	ldr	r3, [pc, #40]	; (8008a9c <HAL_I2C_Mem_Write+0x224>)
 8008a72:	400b      	ands	r3, r1
 8008a74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2220      	movs	r2, #32
 8008a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	e000      	b.n	8008a94 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008a92:	2302      	movs	r3, #2
  }
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3718      	adds	r7, #24
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	fe00e800 	.word	0xfe00e800

08008aa0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b088      	sub	sp, #32
 8008aa4:	af02      	add	r7, sp, #8
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	4608      	mov	r0, r1
 8008aaa:	4611      	mov	r1, r2
 8008aac:	461a      	mov	r2, r3
 8008aae:	4603      	mov	r3, r0
 8008ab0:	817b      	strh	r3, [r7, #10]
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	813b      	strh	r3, [r7, #8]
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b20      	cmp	r3, #32
 8008ac4:	f040 80fd 	bne.w	8008cc2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ac8:	6a3b      	ldr	r3, [r7, #32]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d002      	beq.n	8008ad4 <HAL_I2C_Mem_Read+0x34>
 8008ace:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d105      	bne.n	8008ae0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ada:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e0f1      	b.n	8008cc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d101      	bne.n	8008aee <HAL_I2C_Mem_Read+0x4e>
 8008aea:	2302      	movs	r3, #2
 8008aec:	e0ea      	b.n	8008cc4 <HAL_I2C_Mem_Read+0x224>
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008af6:	f7fe ff99 	bl	8007a2c <HAL_GetTick>
 8008afa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	2319      	movs	r3, #25
 8008b02:	2201      	movs	r2, #1
 8008b04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 feba 	bl	8009882 <I2C_WaitOnFlagUntilTimeout>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d001      	beq.n	8008b18 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e0d5      	b.n	8008cc4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2222      	movs	r2, #34	; 0x22
 8008b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2240      	movs	r2, #64	; 0x40
 8008b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6a3a      	ldr	r2, [r7, #32]
 8008b32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008b38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008b40:	88f8      	ldrh	r0, [r7, #6]
 8008b42:	893a      	ldrh	r2, [r7, #8]
 8008b44:	8979      	ldrh	r1, [r7, #10]
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	9301      	str	r3, [sp, #4]
 8008b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	4603      	mov	r3, r0
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f000 fac7 	bl	80090e4 <I2C_RequestMemoryRead>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d005      	beq.n	8008b68 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	e0ad      	b.n	8008cc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	2bff      	cmp	r3, #255	; 0xff
 8008b70:	d90e      	bls.n	8008b90 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	22ff      	movs	r2, #255	; 0xff
 8008b76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b7c:	b2da      	uxtb	r2, r3
 8008b7e:	8979      	ldrh	r1, [r7, #10]
 8008b80:	4b52      	ldr	r3, [pc, #328]	; (8008ccc <HAL_I2C_Mem_Read+0x22c>)
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f001 f823 	bl	8009bd4 <I2C_TransferConfig>
 8008b8e:	e00f      	b.n	8008bb0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	8979      	ldrh	r1, [r7, #10]
 8008ba2:	4b4a      	ldr	r3, [pc, #296]	; (8008ccc <HAL_I2C_Mem_Read+0x22c>)
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f001 f812 	bl	8009bd4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	2104      	movs	r1, #4
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f000 fe61 	bl	8009882 <I2C_WaitOnFlagUntilTimeout>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e07c      	b.n	8008cc4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd4:	b2d2      	uxtb	r2, r2
 8008bd6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bdc:	1c5a      	adds	r2, r3, #1
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008be6:	3b01      	subs	r3, #1
 8008be8:	b29a      	uxth	r2, r3
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d034      	beq.n	8008c70 <HAL_I2C_Mem_Read+0x1d0>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d130      	bne.n	8008c70 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c14:	2200      	movs	r2, #0
 8008c16:	2180      	movs	r1, #128	; 0x80
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f000 fe32 	bl	8009882 <I2C_WaitOnFlagUntilTimeout>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d001      	beq.n	8008c28 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e04d      	b.n	8008cc4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	2bff      	cmp	r3, #255	; 0xff
 8008c30:	d90e      	bls.n	8008c50 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	22ff      	movs	r2, #255	; 0xff
 8008c36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	8979      	ldrh	r1, [r7, #10]
 8008c40:	2300      	movs	r3, #0
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f000 ffc3 	bl	8009bd4 <I2C_TransferConfig>
 8008c4e:	e00f      	b.n	8008c70 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c5e:	b2da      	uxtb	r2, r3
 8008c60:	8979      	ldrh	r1, [r7, #10]
 8008c62:	2300      	movs	r3, #0
 8008c64:	9300      	str	r3, [sp, #0]
 8008c66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	f000 ffb2 	bl	8009bd4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d19a      	bne.n	8008bb0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f000 fe7f 	bl	8009982 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e01a      	b.n	8008cc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2220      	movs	r2, #32
 8008c94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	6859      	ldr	r1, [r3, #4]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	4b0b      	ldr	r3, [pc, #44]	; (8008cd0 <HAL_I2C_Mem_Read+0x230>)
 8008ca2:	400b      	ands	r3, r1
 8008ca4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2220      	movs	r2, #32
 8008caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	e000      	b.n	8008cc4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008cc2:	2302      	movs	r3, #2
  }
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3718      	adds	r7, #24
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	80002400 	.word	0x80002400
 8008cd0:	fe00e800 	.word	0xfe00e800

08008cd4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d005      	beq.n	8008d00 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	68f9      	ldr	r1, [r7, #12]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	4798      	blx	r3
  }
}
 8008d00:	bf00      	nop
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	699b      	ldr	r3, [r3, #24]
 8008d16:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	0a1b      	lsrs	r3, r3, #8
 8008d24:	f003 0301 	and.w	r3, r3, #1
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d010      	beq.n	8008d4e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	09db      	lsrs	r3, r3, #7
 8008d30:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00a      	beq.n	8008d4e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d3c:	f043 0201 	orr.w	r2, r3, #1
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d4c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	0a9b      	lsrs	r3, r3, #10
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d010      	beq.n	8008d7c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	09db      	lsrs	r3, r3, #7
 8008d5e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00a      	beq.n	8008d7c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d6a:	f043 0208 	orr.w	r2, r3, #8
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008d7a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	0a5b      	lsrs	r3, r3, #9
 8008d80:	f003 0301 	and.w	r3, r3, #1
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d010      	beq.n	8008daa <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	09db      	lsrs	r3, r3, #7
 8008d8c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00a      	beq.n	8008daa <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d98:	f043 0202 	orr.w	r2, r3, #2
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008da8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dae:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f003 030b 	and.w	r3, r3, #11
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d003      	beq.n	8008dc2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8008dba:	68f9      	ldr	r1, [r7, #12]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fc27 	bl	8009610 <I2C_ITError>
  }
}
 8008dc2:	bf00      	nop
 8008dc4:	3718      	adds	r7, #24
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b083      	sub	sp, #12
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008dd2:	bf00      	nop
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008dde:	b480      	push	{r7}
 8008de0:	b083      	sub	sp, #12
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008de6:	bf00      	nop
 8008de8:	370c      	adds	r7, #12
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008df2:	b480      	push	{r7}
 8008df4:	b083      	sub	sp, #12
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	70fb      	strb	r3, [r7, #3]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008e02:	bf00      	nop
 8008e04:	370c      	adds	r7, #12
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b083      	sub	sp, #12
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008e16:	bf00      	nop
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr

08008e22 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e22:	b480      	push	{r7}
 8008e24:	b083      	sub	sp, #12
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008e2a:	bf00      	nop
 8008e2c:	370c      	adds	r7, #12
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr

08008e36 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b086      	sub	sp, #24
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	60f8      	str	r0, [r7, #12]
 8008e3e:	60b9      	str	r1, [r7, #8]
 8008e40:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e46:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d101      	bne.n	8008e5a <I2C_Slave_ISR_IT+0x24>
 8008e56:	2302      	movs	r3, #2
 8008e58:	e0ec      	b.n	8009034 <I2C_Slave_ISR_IT+0x1fe>
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	095b      	lsrs	r3, r3, #5
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d009      	beq.n	8008e82 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	095b      	lsrs	r3, r3, #5
 8008e72:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008e7a:	6939      	ldr	r1, [r7, #16]
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f000 fa67 	bl	8009350 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	091b      	lsrs	r3, r3, #4
 8008e86:	f003 0301 	and.w	r3, r3, #1
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d04d      	beq.n	8008f2a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	091b      	lsrs	r3, r3, #4
 8008e92:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d047      	beq.n	8008f2a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d128      	bne.n	8008ef6 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	2b28      	cmp	r3, #40	; 0x28
 8008eae:	d108      	bne.n	8008ec2 <I2C_Slave_ISR_IT+0x8c>
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008eb6:	d104      	bne.n	8008ec2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008eb8:	6939      	ldr	r1, [r7, #16]
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f000 fb52 	bl	8009564 <I2C_ITListenCplt>
 8008ec0:	e032      	b.n	8008f28 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b29      	cmp	r3, #41	; 0x29
 8008ecc:	d10e      	bne.n	8008eec <I2C_Slave_ISR_IT+0xb6>
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008ed4:	d00a      	beq.n	8008eec <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2210      	movs	r2, #16
 8008edc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f000 fc8d 	bl	80097fe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f000 f9d5 	bl	8009294 <I2C_ITSlaveSeqCplt>
 8008eea:	e01d      	b.n	8008f28 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2210      	movs	r2, #16
 8008ef2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008ef4:	e096      	b.n	8009024 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2210      	movs	r2, #16
 8008efc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f02:	f043 0204 	orr.w	r2, r3, #4
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d004      	beq.n	8008f1a <I2C_Slave_ISR_IT+0xe4>
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f16:	f040 8085 	bne.w	8009024 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f1e:	4619      	mov	r1, r3
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f000 fb75 	bl	8009610 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008f26:	e07d      	b.n	8009024 <I2C_Slave_ISR_IT+0x1ee>
 8008f28:	e07c      	b.n	8009024 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	089b      	lsrs	r3, r3, #2
 8008f2e:	f003 0301 	and.w	r3, r3, #1
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d030      	beq.n	8008f98 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	089b      	lsrs	r3, r3, #2
 8008f3a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d02a      	beq.n	8008f98 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d018      	beq.n	8008f7e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f56:	b2d2      	uxtb	r2, r2
 8008f58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5e:	1c5a      	adds	r2, r3, #1
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	3b01      	subs	r3, #1
 8008f78:	b29a      	uxth	r2, r3
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d14f      	bne.n	8009028 <I2C_Slave_ISR_IT+0x1f2>
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f8e:	d04b      	beq.n	8009028 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f000 f97f 	bl	8009294 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008f96:	e047      	b.n	8009028 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	08db      	lsrs	r3, r3, #3
 8008f9c:	f003 0301 	and.w	r3, r3, #1
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00a      	beq.n	8008fba <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	08db      	lsrs	r3, r3, #3
 8008fa8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d004      	beq.n	8008fba <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008fb0:	6939      	ldr	r1, [r7, #16]
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f000 f8ea 	bl	800918c <I2C_ITAddrCplt>
 8008fb8:	e037      	b.n	800902a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	085b      	lsrs	r3, r3, #1
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d031      	beq.n	800902a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	085b      	lsrs	r3, r3, #1
 8008fca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d02b      	beq.n	800902a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d018      	beq.n	800900e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe0:	781a      	ldrb	r2, [r3, #0]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fec:	1c5a      	adds	r2, r3, #1
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009004:	3b01      	subs	r3, #1
 8009006:	b29a      	uxth	r2, r3
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	851a      	strh	r2, [r3, #40]	; 0x28
 800900c:	e00d      	b.n	800902a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009014:	d002      	beq.n	800901c <I2C_Slave_ISR_IT+0x1e6>
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d106      	bne.n	800902a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 f939 	bl	8009294 <I2C_ITSlaveSeqCplt>
 8009022:	e002      	b.n	800902a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8009024:	bf00      	nop
 8009026:	e000      	b.n	800902a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8009028:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3718      	adds	r7, #24
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af02      	add	r7, sp, #8
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	4608      	mov	r0, r1
 8009046:	4611      	mov	r1, r2
 8009048:	461a      	mov	r2, r3
 800904a:	4603      	mov	r3, r0
 800904c:	817b      	strh	r3, [r7, #10]
 800904e:	460b      	mov	r3, r1
 8009050:	813b      	strh	r3, [r7, #8]
 8009052:	4613      	mov	r3, r2
 8009054:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009056:	88fb      	ldrh	r3, [r7, #6]
 8009058:	b2da      	uxtb	r2, r3
 800905a:	8979      	ldrh	r1, [r7, #10]
 800905c:	4b20      	ldr	r3, [pc, #128]	; (80090e0 <I2C_RequestMemoryWrite+0xa4>)
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f000 fdb5 	bl	8009bd4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800906a:	69fa      	ldr	r2, [r7, #28]
 800906c:	69b9      	ldr	r1, [r7, #24]
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f000 fc47 	bl	8009902 <I2C_WaitOnTXISFlagUntilTimeout>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e02c      	b.n	80090d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800907e:	88fb      	ldrh	r3, [r7, #6]
 8009080:	2b01      	cmp	r3, #1
 8009082:	d105      	bne.n	8009090 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009084:	893b      	ldrh	r3, [r7, #8]
 8009086:	b2da      	uxtb	r2, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	629a      	str	r2, [r3, #40]	; 0x28
 800908e:	e015      	b.n	80090bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009090:	893b      	ldrh	r3, [r7, #8]
 8009092:	0a1b      	lsrs	r3, r3, #8
 8009094:	b29b      	uxth	r3, r3
 8009096:	b2da      	uxtb	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800909e:	69fa      	ldr	r2, [r7, #28]
 80090a0:	69b9      	ldr	r1, [r7, #24]
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f000 fc2d 	bl	8009902 <I2C_WaitOnTXISFlagUntilTimeout>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e012      	b.n	80090d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80090b2:	893b      	ldrh	r3, [r7, #8]
 80090b4:	b2da      	uxtb	r2, r3
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	2200      	movs	r2, #0
 80090c4:	2180      	movs	r1, #128	; 0x80
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f000 fbdb 	bl	8009882 <I2C_WaitOnFlagUntilTimeout>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d001      	beq.n	80090d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	e000      	b.n	80090d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	80002000 	.word	0x80002000

080090e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af02      	add	r7, sp, #8
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	4608      	mov	r0, r1
 80090ee:	4611      	mov	r1, r2
 80090f0:	461a      	mov	r2, r3
 80090f2:	4603      	mov	r3, r0
 80090f4:	817b      	strh	r3, [r7, #10]
 80090f6:	460b      	mov	r3, r1
 80090f8:	813b      	strh	r3, [r7, #8]
 80090fa:	4613      	mov	r3, r2
 80090fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80090fe:	88fb      	ldrh	r3, [r7, #6]
 8009100:	b2da      	uxtb	r2, r3
 8009102:	8979      	ldrh	r1, [r7, #10]
 8009104:	4b20      	ldr	r3, [pc, #128]	; (8009188 <I2C_RequestMemoryRead+0xa4>)
 8009106:	9300      	str	r3, [sp, #0]
 8009108:	2300      	movs	r3, #0
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f000 fd62 	bl	8009bd4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009110:	69fa      	ldr	r2, [r7, #28]
 8009112:	69b9      	ldr	r1, [r7, #24]
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 fbf4 	bl	8009902 <I2C_WaitOnTXISFlagUntilTimeout>
 800911a:	4603      	mov	r3, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d001      	beq.n	8009124 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e02c      	b.n	800917e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009124:	88fb      	ldrh	r3, [r7, #6]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d105      	bne.n	8009136 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800912a:	893b      	ldrh	r3, [r7, #8]
 800912c:	b2da      	uxtb	r2, r3
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	629a      	str	r2, [r3, #40]	; 0x28
 8009134:	e015      	b.n	8009162 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009136:	893b      	ldrh	r3, [r7, #8]
 8009138:	0a1b      	lsrs	r3, r3, #8
 800913a:	b29b      	uxth	r3, r3
 800913c:	b2da      	uxtb	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009144:	69fa      	ldr	r2, [r7, #28]
 8009146:	69b9      	ldr	r1, [r7, #24]
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f000 fbda 	bl	8009902 <I2C_WaitOnTXISFlagUntilTimeout>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d001      	beq.n	8009158 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e012      	b.n	800917e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009158:	893b      	ldrh	r3, [r7, #8]
 800915a:	b2da      	uxtb	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	9300      	str	r3, [sp, #0]
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	2200      	movs	r2, #0
 800916a:	2140      	movs	r1, #64	; 0x40
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f000 fb88 	bl	8009882 <I2C_WaitOnFlagUntilTimeout>
 8009172:	4603      	mov	r3, r0
 8009174:	2b00      	cmp	r3, #0
 8009176:	d001      	beq.n	800917c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	e000      	b.n	800917e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	80002000 	.word	0x80002000

0800918c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800919c:	b2db      	uxtb	r3, r3
 800919e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80091a2:	2b28      	cmp	r3, #40	; 0x28
 80091a4:	d16a      	bne.n	800927c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	699b      	ldr	r3, [r3, #24]
 80091ac:	0c1b      	lsrs	r3, r3, #16
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	f003 0301 	and.w	r3, r3, #1
 80091b4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	0c1b      	lsrs	r3, r3, #16
 80091be:	b29b      	uxth	r3, r3
 80091c0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80091c4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091d2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	b29b      	uxth	r3, r3
 80091dc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80091e0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d138      	bne.n	800925c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80091ea:	897b      	ldrh	r3, [r7, #10]
 80091ec:	09db      	lsrs	r3, r3, #7
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	89bb      	ldrh	r3, [r7, #12]
 80091f2:	4053      	eors	r3, r2
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	f003 0306 	and.w	r3, r3, #6
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d11c      	bne.n	8009238 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80091fe:	897b      	ldrh	r3, [r7, #10]
 8009200:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009206:	1c5a      	adds	r2, r3, #1
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009210:	2b02      	cmp	r3, #2
 8009212:	d13b      	bne.n	800928c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2208      	movs	r2, #8
 8009220:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800922a:	89ba      	ldrh	r2, [r7, #12]
 800922c:	7bfb      	ldrb	r3, [r7, #15]
 800922e:	4619      	mov	r1, r3
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f7ff fdde 	bl	8008df2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009236:	e029      	b.n	800928c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8009238:	893b      	ldrh	r3, [r7, #8]
 800923a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800923c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 fcf9 	bl	8009c38 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800924e:	89ba      	ldrh	r2, [r7, #12]
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	4619      	mov	r1, r3
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f7ff fdcc 	bl	8008df2 <HAL_I2C_AddrCallback>
}
 800925a:	e017      	b.n	800928c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800925c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 fce9 	bl	8009c38 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800926e:	89ba      	ldrh	r2, [r7, #12]
 8009270:	7bfb      	ldrb	r3, [r7, #15]
 8009272:	4619      	mov	r1, r3
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f7ff fdbc 	bl	8008df2 <HAL_I2C_AddrCallback>
}
 800927a:	e007      	b.n	800928c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2208      	movs	r2, #8
 8009282:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800928c:	bf00      	nop
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	0b9b      	lsrs	r3, r3, #14
 80092b0:	f003 0301 	and.w	r3, r3, #1
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d008      	beq.n	80092ca <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80092c6:	601a      	str	r2, [r3, #0]
 80092c8:	e00d      	b.n	80092e6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	0bdb      	lsrs	r3, r3, #15
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d007      	beq.n	80092e6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80092e4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b29      	cmp	r3, #41	; 0x29
 80092f0:	d112      	bne.n	8009318 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2228      	movs	r2, #40	; 0x28
 80092f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2221      	movs	r2, #33	; 0x21
 80092fe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009300:	2101      	movs	r1, #1
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fc98 	bl	8009c38 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f7ff fd5a 	bl	8008dca <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009316:	e017      	b.n	8009348 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800931e:	b2db      	uxtb	r3, r3
 8009320:	2b2a      	cmp	r3, #42	; 0x2a
 8009322:	d111      	bne.n	8009348 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2228      	movs	r2, #40	; 0x28
 8009328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2222      	movs	r2, #34	; 0x22
 8009330:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009332:	2102      	movs	r1, #2
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fc7f 	bl	8009c38 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7ff fd4b 	bl	8008dde <HAL_I2C_SlaveRxCpltCallback>
}
 8009348:	bf00      	nop
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800936c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2220      	movs	r2, #32
 8009374:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009376:	7bfb      	ldrb	r3, [r7, #15]
 8009378:	2b21      	cmp	r3, #33	; 0x21
 800937a:	d002      	beq.n	8009382 <I2C_ITSlaveCplt+0x32>
 800937c:	7bfb      	ldrb	r3, [r7, #15]
 800937e:	2b29      	cmp	r3, #41	; 0x29
 8009380:	d108      	bne.n	8009394 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009382:	f248 0101 	movw	r1, #32769	; 0x8001
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 fc56 	bl	8009c38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2221      	movs	r2, #33	; 0x21
 8009390:	631a      	str	r2, [r3, #48]	; 0x30
 8009392:	e00d      	b.n	80093b0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009394:	7bfb      	ldrb	r3, [r7, #15]
 8009396:	2b22      	cmp	r3, #34	; 0x22
 8009398:	d002      	beq.n	80093a0 <I2C_ITSlaveCplt+0x50>
 800939a:	7bfb      	ldrb	r3, [r7, #15]
 800939c:	2b2a      	cmp	r3, #42	; 0x2a
 800939e:	d107      	bne.n	80093b0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80093a0:	f248 0102 	movw	r1, #32770	; 0x8002
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fc47 	bl	8009c38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2222      	movs	r2, #34	; 0x22
 80093ae:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	685a      	ldr	r2, [r3, #4]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093be:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	6859      	ldr	r1, [r3, #4]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	4b64      	ldr	r3, [pc, #400]	; (800955c <I2C_ITSlaveCplt+0x20c>)
 80093cc:	400b      	ands	r3, r1
 80093ce:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fa14 	bl	80097fe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	0b9b      	lsrs	r3, r3, #14
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d013      	beq.n	800940a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80093f0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d020      	beq.n	800943c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	b29a      	uxth	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009408:	e018      	b.n	800943c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	0bdb      	lsrs	r3, r3, #15
 800940e:	f003 0301 	and.w	r3, r3, #1
 8009412:	2b00      	cmp	r3, #0
 8009414:	d012      	beq.n	800943c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009424:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800942a:	2b00      	cmp	r3, #0
 800942c:	d006      	beq.n	800943c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	b29a      	uxth	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	089b      	lsrs	r3, r3, #2
 8009440:	f003 0301 	and.w	r3, r3, #1
 8009444:	2b00      	cmp	r3, #0
 8009446:	d020      	beq.n	800948a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	f023 0304 	bic.w	r3, r3, #4
 800944e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945a:	b2d2      	uxtb	r2, r2
 800945c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009462:	1c5a      	adds	r2, r3, #1
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00c      	beq.n	800948a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009474:	3b01      	subs	r3, #1
 8009476:	b29a      	uxth	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009480:	b29b      	uxth	r3, r3
 8009482:	3b01      	subs	r3, #1
 8009484:	b29a      	uxth	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800948e:	b29b      	uxth	r3, r3
 8009490:	2b00      	cmp	r3, #0
 8009492:	d005      	beq.n	80094a0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009498:	f043 0204 	orr.w	r2, r3, #4
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d010      	beq.n	80094d8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ba:	4619      	mov	r1, r3
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 f8a7 	bl	8009610 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	2b28      	cmp	r3, #40	; 0x28
 80094cc:	d141      	bne.n	8009552 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80094ce:	6979      	ldr	r1, [r7, #20]
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f847 	bl	8009564 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80094d6:	e03c      	b.n	8009552 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80094e0:	d014      	beq.n	800950c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f7ff fed6 	bl	8009294 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a1d      	ldr	r2, [pc, #116]	; (8009560 <I2C_ITSlaveCplt+0x210>)
 80094ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2220      	movs	r2, #32
 80094f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7ff fc82 	bl	8008e0e <HAL_I2C_ListenCpltCallback>
}
 800950a:	e022      	b.n	8009552 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009512:	b2db      	uxtb	r3, r3
 8009514:	2b22      	cmp	r3, #34	; 0x22
 8009516:	d10e      	bne.n	8009536 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2220      	movs	r2, #32
 800951c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f7ff fc55 	bl	8008dde <HAL_I2C_SlaveRxCpltCallback>
}
 8009534:	e00d      	b.n	8009552 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2220      	movs	r2, #32
 800953a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f7ff fc3c 	bl	8008dca <HAL_I2C_SlaveTxCpltCallback>
}
 8009552:	bf00      	nop
 8009554:	3718      	adds	r7, #24
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	fe00e800 	.word	0xfe00e800
 8009560:	ffff0000 	.word	0xffff0000

08009564 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a26      	ldr	r2, [pc, #152]	; (800960c <I2C_ITListenCplt+0xa8>)
 8009572:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2220      	movs	r2, #32
 800957e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	089b      	lsrs	r3, r3, #2
 8009594:	f003 0301 	and.w	r3, r3, #1
 8009598:	2b00      	cmp	r3, #0
 800959a:	d022      	beq.n	80095e2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a6:	b2d2      	uxtb	r2, r2
 80095a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ae:	1c5a      	adds	r2, r3, #1
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d012      	beq.n	80095e2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095c0:	3b01      	subs	r3, #1
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	3b01      	subs	r3, #1
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095da:	f043 0204 	orr.w	r2, r3, #4
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80095e2:	f248 0103 	movw	r1, #32771	; 0x8003
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fb26 	bl	8009c38 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2210      	movs	r2, #16
 80095f2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7ff fc06 	bl	8008e0e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009602:	bf00      	nop
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	ffff0000 	.word	0xffff0000

08009610 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009620:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a5d      	ldr	r2, [pc, #372]	; (80097a4 <I2C_ITError+0x194>)
 800962e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	431a      	orrs	r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009642:	7bfb      	ldrb	r3, [r7, #15]
 8009644:	2b28      	cmp	r3, #40	; 0x28
 8009646:	d005      	beq.n	8009654 <I2C_ITError+0x44>
 8009648:	7bfb      	ldrb	r3, [r7, #15]
 800964a:	2b29      	cmp	r3, #41	; 0x29
 800964c:	d002      	beq.n	8009654 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800964e:	7bfb      	ldrb	r3, [r7, #15]
 8009650:	2b2a      	cmp	r3, #42	; 0x2a
 8009652:	d10b      	bne.n	800966c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009654:	2103      	movs	r1, #3
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 faee 	bl	8009c38 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2228      	movs	r2, #40	; 0x28
 8009660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a50      	ldr	r2, [pc, #320]	; (80097a8 <I2C_ITError+0x198>)
 8009668:	635a      	str	r2, [r3, #52]	; 0x34
 800966a:	e011      	b.n	8009690 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800966c:	f248 0103 	movw	r1, #32771	; 0x8003
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fae1 	bl	8009c38 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800967c:	b2db      	uxtb	r3, r3
 800967e:	2b60      	cmp	r3, #96	; 0x60
 8009680:	d003      	beq.n	800968a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2220      	movs	r2, #32
 8009686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009694:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969a:	2b00      	cmp	r3, #0
 800969c:	d039      	beq.n	8009712 <I2C_ITError+0x102>
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	2b11      	cmp	r3, #17
 80096a2:	d002      	beq.n	80096aa <I2C_ITError+0x9a>
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	2b21      	cmp	r3, #33	; 0x21
 80096a8:	d133      	bne.n	8009712 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096b8:	d107      	bne.n	80096ca <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80096c8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7fe fd04 	bl	80080dc <HAL_DMA_GetState>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d017      	beq.n	800970a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096de:	4a33      	ldr	r2, [pc, #204]	; (80097ac <I2C_ITError+0x19c>)
 80096e0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fe fc04 	bl	8007efc <HAL_DMA_Abort_IT>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d04d      	beq.n	8009796 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009704:	4610      	mov	r0, r2
 8009706:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009708:	e045      	b.n	8009796 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 f850 	bl	80097b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009710:	e041      	b.n	8009796 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009716:	2b00      	cmp	r3, #0
 8009718:	d039      	beq.n	800978e <I2C_ITError+0x17e>
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2b12      	cmp	r3, #18
 800971e:	d002      	beq.n	8009726 <I2C_ITError+0x116>
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	2b22      	cmp	r3, #34	; 0x22
 8009724:	d133      	bne.n	800978e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009734:	d107      	bne.n	8009746 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009744:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800974a:	4618      	mov	r0, r3
 800974c:	f7fe fcc6 	bl	80080dc <HAL_DMA_GetState>
 8009750:	4603      	mov	r3, r0
 8009752:	2b01      	cmp	r3, #1
 8009754:	d017      	beq.n	8009786 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800975a:	4a14      	ldr	r2, [pc, #80]	; (80097ac <I2C_ITError+0x19c>)
 800975c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800976a:	4618      	mov	r0, r3
 800976c:	f7fe fbc6 	bl	8007efc <HAL_DMA_Abort_IT>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d011      	beq.n	800979a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800977a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009780:	4610      	mov	r0, r2
 8009782:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009784:	e009      	b.n	800979a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f812 	bl	80097b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800978c:	e005      	b.n	800979a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f80e 	bl	80097b0 <I2C_TreatErrorCallback>
  }
}
 8009794:	e002      	b.n	800979c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009796:	bf00      	nop
 8009798:	e000      	b.n	800979c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800979a:	bf00      	nop
}
 800979c:	bf00      	nop
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	ffff0000 	.word	0xffff0000
 80097a8:	08008e37 	.word	0x08008e37
 80097ac:	08009847 	.word	0x08009847

080097b0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	2b60      	cmp	r3, #96	; 0x60
 80097c2:	d10e      	bne.n	80097e2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2220      	movs	r2, #32
 80097c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f7ff fb21 	bl	8008e22 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80097e0:	e009      	b.n	80097f6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f7fa f9c9 	bl	8003b88 <HAL_I2C_ErrorCallback>
}
 80097f6:	bf00      	nop
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80097fe:	b480      	push	{r7}
 8009800:	b083      	sub	sp, #12
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	699b      	ldr	r3, [r3, #24]
 800980c:	f003 0302 	and.w	r3, r3, #2
 8009810:	2b02      	cmp	r3, #2
 8009812:	d103      	bne.n	800981c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2200      	movs	r2, #0
 800981a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	699b      	ldr	r3, [r3, #24]
 8009822:	f003 0301 	and.w	r3, r3, #1
 8009826:	2b01      	cmp	r3, #1
 8009828:	d007      	beq.n	800983a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	699a      	ldr	r2, [r3, #24]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f042 0201 	orr.w	r2, r2, #1
 8009838:	619a      	str	r2, [r3, #24]
  }
}
 800983a:	bf00      	nop
 800983c:	370c      	adds	r7, #12
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b084      	sub	sp, #16
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009852:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009858:	2b00      	cmp	r3, #0
 800985a:	d003      	beq.n	8009864 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009860:	2200      	movs	r2, #0
 8009862:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009868:	2b00      	cmp	r3, #0
 800986a:	d003      	beq.n	8009874 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009870:	2200      	movs	r2, #0
 8009872:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8009874:	68f8      	ldr	r0, [r7, #12]
 8009876:	f7ff ff9b 	bl	80097b0 <I2C_TreatErrorCallback>
}
 800987a:	bf00      	nop
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b084      	sub	sp, #16
 8009886:	af00      	add	r7, sp, #0
 8009888:	60f8      	str	r0, [r7, #12]
 800988a:	60b9      	str	r1, [r7, #8]
 800988c:	603b      	str	r3, [r7, #0]
 800988e:	4613      	mov	r3, r2
 8009890:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009892:	e022      	b.n	80098da <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800989a:	d01e      	beq.n	80098da <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800989c:	f7fe f8c6 	bl	8007a2c <HAL_GetTick>
 80098a0:	4602      	mov	r2, r0
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	683a      	ldr	r2, [r7, #0]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d302      	bcc.n	80098b2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d113      	bne.n	80098da <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098b6:	f043 0220 	orr.w	r2, r3, #32
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2220      	movs	r2, #32
 80098c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	e00f      	b.n	80098fa <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	699a      	ldr	r2, [r3, #24]
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	4013      	ands	r3, r2
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	bf0c      	ite	eq
 80098ea:	2301      	moveq	r3, #1
 80098ec:	2300      	movne	r3, #0
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	461a      	mov	r2, r3
 80098f2:	79fb      	ldrb	r3, [r7, #7]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d0cd      	beq.n	8009894 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b084      	sub	sp, #16
 8009906:	af00      	add	r7, sp, #0
 8009908:	60f8      	str	r0, [r7, #12]
 800990a:	60b9      	str	r1, [r7, #8]
 800990c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800990e:	e02c      	b.n	800996a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	68b9      	ldr	r1, [r7, #8]
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f000 f871 	bl	80099fc <I2C_IsErrorOccurred>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d001      	beq.n	8009924 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	e02a      	b.n	800997a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800992a:	d01e      	beq.n	800996a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800992c:	f7fe f87e 	bl	8007a2c <HAL_GetTick>
 8009930:	4602      	mov	r2, r0
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	68ba      	ldr	r2, [r7, #8]
 8009938:	429a      	cmp	r2, r3
 800993a:	d302      	bcc.n	8009942 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d113      	bne.n	800996a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009946:	f043 0220 	orr.w	r2, r3, #32
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2220      	movs	r2, #32
 8009952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e007      	b.n	800997a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	699b      	ldr	r3, [r3, #24]
 8009970:	f003 0302 	and.w	r3, r3, #2
 8009974:	2b02      	cmp	r3, #2
 8009976:	d1cb      	bne.n	8009910 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b084      	sub	sp, #16
 8009986:	af00      	add	r7, sp, #0
 8009988:	60f8      	str	r0, [r7, #12]
 800998a:	60b9      	str	r1, [r7, #8]
 800998c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800998e:	e028      	b.n	80099e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	68b9      	ldr	r1, [r7, #8]
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f000 f831 	bl	80099fc <I2C_IsErrorOccurred>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d001      	beq.n	80099a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	e026      	b.n	80099f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099a4:	f7fe f842 	bl	8007a2c <HAL_GetTick>
 80099a8:	4602      	mov	r2, r0
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	1ad3      	subs	r3, r2, r3
 80099ae:	68ba      	ldr	r2, [r7, #8]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d302      	bcc.n	80099ba <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d113      	bne.n	80099e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099be:	f043 0220 	orr.w	r2, r3, #32
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2220      	movs	r2, #32
 80099ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e007      	b.n	80099f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	f003 0320 	and.w	r3, r3, #32
 80099ec:	2b20      	cmp	r3, #32
 80099ee:	d1cf      	bne.n	8009990 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
	...

080099fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b08a      	sub	sp, #40	; 0x28
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	699b      	ldr	r3, [r3, #24]
 8009a14:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009a16:	2300      	movs	r3, #0
 8009a18:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	f003 0310 	and.w	r3, r3, #16
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d075      	beq.n	8009b14 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2210      	movs	r2, #16
 8009a2e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a30:	e056      	b.n	8009ae0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a38:	d052      	beq.n	8009ae0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009a3a:	f7fd fff7 	bl	8007a2c <HAL_GetTick>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	1ad3      	subs	r3, r2, r3
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d302      	bcc.n	8009a50 <I2C_IsErrorOccurred+0x54>
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d147      	bne.n	8009ae0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a5a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a62:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a72:	d12e      	bne.n	8009ad2 <I2C_IsErrorOccurred+0xd6>
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a7a:	d02a      	beq.n	8009ad2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8009a7c:	7cfb      	ldrb	r3, [r7, #19]
 8009a7e:	2b20      	cmp	r3, #32
 8009a80:	d027      	beq.n	8009ad2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	685a      	ldr	r2, [r3, #4]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a90:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009a92:	f7fd ffcb 	bl	8007a2c <HAL_GetTick>
 8009a96:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a98:	e01b      	b.n	8009ad2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009a9a:	f7fd ffc7 	bl	8007a2c <HAL_GetTick>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	2b19      	cmp	r3, #25
 8009aa6:	d914      	bls.n	8009ad2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aac:	f043 0220 	orr.w	r2, r3, #32
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2220      	movs	r2, #32
 8009ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	699b      	ldr	r3, [r3, #24]
 8009ad8:	f003 0320 	and.w	r3, r3, #32
 8009adc:	2b20      	cmp	r3, #32
 8009ade:	d1dc      	bne.n	8009a9a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	699b      	ldr	r3, [r3, #24]
 8009ae6:	f003 0320 	and.w	r3, r3, #32
 8009aea:	2b20      	cmp	r3, #32
 8009aec:	d003      	beq.n	8009af6 <I2C_IsErrorOccurred+0xfa>
 8009aee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d09d      	beq.n	8009a32 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009af6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d103      	bne.n	8009b06 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2220      	movs	r2, #32
 8009b04:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009b06:	6a3b      	ldr	r3, [r7, #32]
 8009b08:	f043 0304 	orr.w	r3, r3, #4
 8009b0c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	699b      	ldr	r3, [r3, #24]
 8009b1a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00b      	beq.n	8009b3e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009b26:	6a3b      	ldr	r3, [r7, #32]
 8009b28:	f043 0301 	orr.w	r3, r3, #1
 8009b2c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00b      	beq.n	8009b60 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009b48:	6a3b      	ldr	r3, [r7, #32]
 8009b4a:	f043 0308 	orr.w	r3, r3, #8
 8009b4e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009b58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00b      	beq.n	8009b82 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	f043 0302 	orr.w	r3, r3, #2
 8009b70:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009b82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d01c      	beq.n	8009bc4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	f7ff fe37 	bl	80097fe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	6859      	ldr	r1, [r3, #4]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	4b0d      	ldr	r3, [pc, #52]	; (8009bd0 <I2C_IsErrorOccurred+0x1d4>)
 8009b9c:	400b      	ands	r3, r1
 8009b9e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ba4:	6a3b      	ldr	r3, [r7, #32]
 8009ba6:	431a      	orrs	r2, r3
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2220      	movs	r2, #32
 8009bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3728      	adds	r7, #40	; 0x28
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	fe00e800 	.word	0xfe00e800

08009bd4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b087      	sub	sp, #28
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	607b      	str	r3, [r7, #4]
 8009bde:	460b      	mov	r3, r1
 8009be0:	817b      	strh	r3, [r7, #10]
 8009be2:	4613      	mov	r3, r2
 8009be4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009be6:	897b      	ldrh	r3, [r7, #10]
 8009be8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009bec:	7a7b      	ldrb	r3, [r7, #9]
 8009bee:	041b      	lsls	r3, r3, #16
 8009bf0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009bf4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009bfa:	6a3b      	ldr	r3, [r7, #32]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c02:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	685a      	ldr	r2, [r3, #4]
 8009c0a:	6a3b      	ldr	r3, [r7, #32]
 8009c0c:	0d5b      	lsrs	r3, r3, #21
 8009c0e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009c12:	4b08      	ldr	r3, [pc, #32]	; (8009c34 <I2C_TransferConfig+0x60>)
 8009c14:	430b      	orrs	r3, r1
 8009c16:	43db      	mvns	r3, r3
 8009c18:	ea02 0103 	and.w	r1, r2, r3
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	697a      	ldr	r2, [r7, #20]
 8009c22:	430a      	orrs	r2, r1
 8009c24:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009c26:	bf00      	nop
 8009c28:	371c      	adds	r7, #28
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
 8009c34:	03ff63ff 	.word	0x03ff63ff

08009c38 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	460b      	mov	r3, r1
 8009c42:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009c44:	2300      	movs	r3, #0
 8009c46:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009c48:	887b      	ldrh	r3, [r7, #2]
 8009c4a:	f003 0301 	and.w	r3, r3, #1
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00f      	beq.n	8009c72 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8009c58:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009c66:	2b28      	cmp	r3, #40	; 0x28
 8009c68:	d003      	beq.n	8009c72 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009c70:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009c72:	887b      	ldrh	r3, [r7, #2]
 8009c74:	f003 0302 	and.w	r3, r3, #2
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00f      	beq.n	8009c9c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8009c82:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009c90:	2b28      	cmp	r3, #40	; 0x28
 8009c92:	d003      	beq.n	8009c9c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009c9a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009c9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	da03      	bge.n	8009cac <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009caa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009cac:	887b      	ldrh	r3, [r7, #2]
 8009cae:	2b10      	cmp	r3, #16
 8009cb0:	d103      	bne.n	8009cba <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009cb8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009cba:	887b      	ldrh	r3, [r7, #2]
 8009cbc:	2b20      	cmp	r3, #32
 8009cbe:	d103      	bne.n	8009cc8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f043 0320 	orr.w	r3, r3, #32
 8009cc6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009cc8:	887b      	ldrh	r3, [r7, #2]
 8009cca:	2b40      	cmp	r3, #64	; 0x40
 8009ccc:	d103      	bne.n	8009cd6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cd4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	6819      	ldr	r1, [r3, #0]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	43da      	mvns	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	400a      	ands	r2, r1
 8009ce6:	601a      	str	r2, [r3, #0]
}
 8009ce8:	bf00      	nop
 8009cea:	3714      	adds	r7, #20
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	2b20      	cmp	r3, #32
 8009d08:	d138      	bne.n	8009d7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d101      	bne.n	8009d18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009d14:	2302      	movs	r3, #2
 8009d16:	e032      	b.n	8009d7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2224      	movs	r2, #36	; 0x24
 8009d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f022 0201 	bic.w	r2, r2, #1
 8009d36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009d46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	6819      	ldr	r1, [r3, #0]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	683a      	ldr	r2, [r7, #0]
 8009d54:	430a      	orrs	r2, r1
 8009d56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f042 0201 	orr.w	r2, r2, #1
 8009d66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2220      	movs	r2, #32
 8009d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	e000      	b.n	8009d7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009d7c:	2302      	movs	r3, #2
  }
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	370c      	adds	r7, #12
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009d8a:	b480      	push	{r7}
 8009d8c:	b085      	sub	sp, #20
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
 8009d92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	2b20      	cmp	r3, #32
 8009d9e:	d139      	bne.n	8009e14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d101      	bne.n	8009dae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009daa:	2302      	movs	r3, #2
 8009dac:	e033      	b.n	8009e16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2201      	movs	r2, #1
 8009db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2224      	movs	r2, #36	; 0x24
 8009dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f022 0201 	bic.w	r2, r2, #1
 8009dcc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009ddc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	021b      	lsls	r3, r3, #8
 8009de2:	68fa      	ldr	r2, [r7, #12]
 8009de4:	4313      	orrs	r3, r2
 8009de6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f042 0201 	orr.w	r2, r2, #1
 8009dfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2220      	movs	r2, #32
 8009e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e10:	2300      	movs	r3, #0
 8009e12:	e000      	b.n	8009e16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009e14:	2302      	movs	r3, #2
  }
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3714      	adds	r7, #20
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
	...

08009e24 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e2c:	4b0b      	ldr	r3, [pc, #44]	; (8009e5c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e30:	4a0a      	ldr	r2, [pc, #40]	; (8009e5c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009e32:	f043 0301 	orr.w	r3, r3, #1
 8009e36:	6613      	str	r3, [r2, #96]	; 0x60
 8009e38:	4b08      	ldr	r3, [pc, #32]	; (8009e5c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e3c:	f003 0301 	and.w	r3, r3, #1
 8009e40:	60fb      	str	r3, [r7, #12]
 8009e42:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8009e44:	4b06      	ldr	r3, [pc, #24]	; (8009e60 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009e46:	685a      	ldr	r2, [r3, #4]
 8009e48:	4905      	ldr	r1, [pc, #20]	; (8009e60 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	604b      	str	r3, [r1, #4]
}
 8009e50:	bf00      	nop
 8009e52:	3714      	adds	r7, #20
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	40021000 	.word	0x40021000
 8009e60:	40010000 	.word	0x40010000

08009e64 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d10c      	bne.n	8009e90 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8009e76:	4b13      	ldr	r3, [pc, #76]	; (8009ec4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8009e78:	695b      	ldr	r3, [r3, #20]
 8009e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e82:	d10e      	bne.n	8009ea2 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8009e84:	f000 f8b6 	bl	8009ff4 <HAL_PWREx_DisableLowPowerRunMode>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d009      	beq.n	8009ea2 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8009e8e:	e016      	b.n	8009ebe <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8009e90:	4b0c      	ldr	r3, [pc, #48]	; (8009ec4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8009e92:	695b      	ldr	r3, [r3, #20]
 8009e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e9c:	d001      	beq.n	8009ea2 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8009e9e:	f000 f899 	bl	8009fd4 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009ea2:	4b09      	ldr	r3, [pc, #36]	; (8009ec8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	4a08      	ldr	r2, [pc, #32]	; (8009ec8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8009ea8:	f023 0304 	bic.w	r3, r3, #4
 8009eac:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8009eae:	78fb      	ldrb	r3, [r7, #3]
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d101      	bne.n	8009eb8 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8009eb4:	bf30      	wfi
 8009eb6:	e002      	b.n	8009ebe <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8009eb8:	bf40      	sev
    __WFE();
 8009eba:	bf20      	wfe
    __WFE();
 8009ebc:	bf20      	wfe
  }

}
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	40007000 	.word	0x40007000
 8009ec8:	e000ed00 	.word	0xe000ed00

08009ecc <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8009ed0:	4b05      	ldr	r3, [pc, #20]	; (8009ee8 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	4a04      	ldr	r2, [pc, #16]	; (8009ee8 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8009ed6:	f043 0302 	orr.w	r3, r3, #2
 8009eda:	6113      	str	r3, [r2, #16]
}
 8009edc:	bf00      	nop
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	e000ed00 	.word	0xe000ed00

08009eec <HAL_PWR_DisableSleepOnExit>:
  * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8009eec:	b480      	push	{r7}
 8009eee:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8009ef0:	4b05      	ldr	r3, [pc, #20]	; (8009f08 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8009ef2:	691b      	ldr	r3, [r3, #16]
 8009ef4:	4a04      	ldr	r2, [pc, #16]	; (8009f08 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8009ef6:	f023 0302 	bic.w	r3, r3, #2
 8009efa:	6113      	str	r3, [r2, #16]
}
 8009efc:	bf00      	nop
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	e000ed00 	.word	0xe000ed00

08009f0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009f10:	4b04      	ldr	r3, [pc, #16]	; (8009f24 <HAL_PWREx_GetVoltageRange+0x18>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr
 8009f22:	bf00      	nop
 8009f24:	40007000 	.word	0x40007000

08009f28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f36:	d130      	bne.n	8009f9a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009f38:	4b23      	ldr	r3, [pc, #140]	; (8009fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f44:	d038      	beq.n	8009fb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009f46:	4b20      	ldr	r3, [pc, #128]	; (8009fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009f4e:	4a1e      	ldr	r2, [pc, #120]	; (8009fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009f50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f54:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009f56:	4b1d      	ldr	r3, [pc, #116]	; (8009fcc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2232      	movs	r2, #50	; 0x32
 8009f5c:	fb02 f303 	mul.w	r3, r2, r3
 8009f60:	4a1b      	ldr	r2, [pc, #108]	; (8009fd0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8009f62:	fba2 2303 	umull	r2, r3, r2, r3
 8009f66:	0c9b      	lsrs	r3, r3, #18
 8009f68:	3301      	adds	r3, #1
 8009f6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009f6c:	e002      	b.n	8009f74 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	3b01      	subs	r3, #1
 8009f72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009f74:	4b14      	ldr	r3, [pc, #80]	; (8009fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009f76:	695b      	ldr	r3, [r3, #20]
 8009f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f80:	d102      	bne.n	8009f88 <HAL_PWREx_ControlVoltageScaling+0x60>
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1f2      	bne.n	8009f6e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009f88:	4b0f      	ldr	r3, [pc, #60]	; (8009fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009f8a:	695b      	ldr	r3, [r3, #20]
 8009f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f94:	d110      	bne.n	8009fb8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8009f96:	2303      	movs	r3, #3
 8009f98:	e00f      	b.n	8009fba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8009f9a:	4b0b      	ldr	r3, [pc, #44]	; (8009fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fa6:	d007      	beq.n	8009fb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009fa8:	4b07      	ldr	r3, [pc, #28]	; (8009fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009fb0:	4a05      	ldr	r2, [pc, #20]	; (8009fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009fb6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3714      	adds	r7, #20
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	40007000 	.word	0x40007000
 8009fcc:	2000013c 	.word	0x2000013c
 8009fd0:	431bde83 	.word	0x431bde83

08009fd4 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8009fd8:	4b05      	ldr	r3, [pc, #20]	; (8009ff0 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a04      	ldr	r2, [pc, #16]	; (8009ff0 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8009fde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009fe2:	6013      	str	r3, [r2, #0]
}
 8009fe4:	bf00      	nop
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	40007000 	.word	0x40007000

08009ff4 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8009ffa:	4b17      	ldr	r3, [pc, #92]	; (800a058 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a16      	ldr	r2, [pc, #88]	; (800a058 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a000:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a004:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a006:	4b15      	ldr	r3, [pc, #84]	; (800a05c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2232      	movs	r2, #50	; 0x32
 800a00c:	fb02 f303 	mul.w	r3, r2, r3
 800a010:	4a13      	ldr	r2, [pc, #76]	; (800a060 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 800a012:	fba2 2303 	umull	r2, r3, r2, r3
 800a016:	0c9b      	lsrs	r3, r3, #18
 800a018:	3301      	adds	r3, #1
 800a01a:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a01c:	e002      	b.n	800a024 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	3b01      	subs	r3, #1
 800a022:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a024:	4b0c      	ldr	r3, [pc, #48]	; (800a058 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a026:	695b      	ldr	r3, [r3, #20]
 800a028:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a02c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a030:	d102      	bne.n	800a038 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d1f2      	bne.n	800a01e <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800a038:	4b07      	ldr	r3, [pc, #28]	; (800a058 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a03a:	695b      	ldr	r3, [r3, #20]
 800a03c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a044:	d101      	bne.n	800a04a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800a046:	2303      	movs	r3, #3
 800a048:	e000      	b.n	800a04c <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	40007000 	.word	0x40007000
 800a05c:	2000013c 	.word	0x2000013c
 800a060:	431bde83 	.word	0x431bde83

0800a064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b088      	sub	sp, #32
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d101      	bne.n	800a076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e3ca      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a076:	4b97      	ldr	r3, [pc, #604]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	f003 030c 	and.w	r3, r3, #12
 800a07e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a080:	4b94      	ldr	r3, [pc, #592]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	f003 0303 	and.w	r3, r3, #3
 800a088:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f003 0310 	and.w	r3, r3, #16
 800a092:	2b00      	cmp	r3, #0
 800a094:	f000 80e4 	beq.w	800a260 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a098:	69bb      	ldr	r3, [r7, #24]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d007      	beq.n	800a0ae <HAL_RCC_OscConfig+0x4a>
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	2b0c      	cmp	r3, #12
 800a0a2:	f040 808b 	bne.w	800a1bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	f040 8087 	bne.w	800a1bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a0ae:	4b89      	ldr	r3, [pc, #548]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 0302 	and.w	r3, r3, #2
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d005      	beq.n	800a0c6 <HAL_RCC_OscConfig+0x62>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	699b      	ldr	r3, [r3, #24]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d101      	bne.n	800a0c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e3a2      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a1a      	ldr	r2, [r3, #32]
 800a0ca:	4b82      	ldr	r3, [pc, #520]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f003 0308 	and.w	r3, r3, #8
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d004      	beq.n	800a0e0 <HAL_RCC_OscConfig+0x7c>
 800a0d6:	4b7f      	ldr	r3, [pc, #508]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0de:	e005      	b.n	800a0ec <HAL_RCC_OscConfig+0x88>
 800a0e0:	4b7c      	ldr	r3, [pc, #496]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a0e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0e6:	091b      	lsrs	r3, r3, #4
 800a0e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d223      	bcs.n	800a138 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a1b      	ldr	r3, [r3, #32]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f000 fd87 	bl	800ac08 <RCC_SetFlashLatencyFromMSIRange>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	e383      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a104:	4b73      	ldr	r3, [pc, #460]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a72      	ldr	r2, [pc, #456]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a10a:	f043 0308 	orr.w	r3, r3, #8
 800a10e:	6013      	str	r3, [r2, #0]
 800a110:	4b70      	ldr	r3, [pc, #448]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a1b      	ldr	r3, [r3, #32]
 800a11c:	496d      	ldr	r1, [pc, #436]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a11e:	4313      	orrs	r3, r2
 800a120:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a122:	4b6c      	ldr	r3, [pc, #432]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	69db      	ldr	r3, [r3, #28]
 800a12e:	021b      	lsls	r3, r3, #8
 800a130:	4968      	ldr	r1, [pc, #416]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a132:	4313      	orrs	r3, r2
 800a134:	604b      	str	r3, [r1, #4]
 800a136:	e025      	b.n	800a184 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a138:	4b66      	ldr	r3, [pc, #408]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a65      	ldr	r2, [pc, #404]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a13e:	f043 0308 	orr.w	r3, r3, #8
 800a142:	6013      	str	r3, [r2, #0]
 800a144:	4b63      	ldr	r3, [pc, #396]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6a1b      	ldr	r3, [r3, #32]
 800a150:	4960      	ldr	r1, [pc, #384]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a152:	4313      	orrs	r3, r2
 800a154:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a156:	4b5f      	ldr	r3, [pc, #380]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	69db      	ldr	r3, [r3, #28]
 800a162:	021b      	lsls	r3, r3, #8
 800a164:	495b      	ldr	r1, [pc, #364]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a166:	4313      	orrs	r3, r2
 800a168:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d109      	bne.n	800a184 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6a1b      	ldr	r3, [r3, #32]
 800a174:	4618      	mov	r0, r3
 800a176:	f000 fd47 	bl	800ac08 <RCC_SetFlashLatencyFromMSIRange>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	e343      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a184:	f000 fc4a 	bl	800aa1c <HAL_RCC_GetSysClockFreq>
 800a188:	4602      	mov	r2, r0
 800a18a:	4b52      	ldr	r3, [pc, #328]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	091b      	lsrs	r3, r3, #4
 800a190:	f003 030f 	and.w	r3, r3, #15
 800a194:	4950      	ldr	r1, [pc, #320]	; (800a2d8 <HAL_RCC_OscConfig+0x274>)
 800a196:	5ccb      	ldrb	r3, [r1, r3]
 800a198:	f003 031f 	and.w	r3, r3, #31
 800a19c:	fa22 f303 	lsr.w	r3, r2, r3
 800a1a0:	4a4e      	ldr	r2, [pc, #312]	; (800a2dc <HAL_RCC_OscConfig+0x278>)
 800a1a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a1a4:	4b4e      	ldr	r3, [pc, #312]	; (800a2e0 <HAL_RCC_OscConfig+0x27c>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7fc fc61 	bl	8006a70 <HAL_InitTick>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a1b2:	7bfb      	ldrb	r3, [r7, #15]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d052      	beq.n	800a25e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800a1b8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ba:	e327      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d032      	beq.n	800a22a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a1c4:	4b43      	ldr	r3, [pc, #268]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a42      	ldr	r2, [pc, #264]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a1ca:	f043 0301 	orr.w	r3, r3, #1
 800a1ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a1d0:	f7fd fc2c 	bl	8007a2c <HAL_GetTick>
 800a1d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a1d6:	e008      	b.n	800a1ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a1d8:	f7fd fc28 	bl	8007a2c <HAL_GetTick>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	1ad3      	subs	r3, r2, r3
 800a1e2:	2b02      	cmp	r3, #2
 800a1e4:	d901      	bls.n	800a1ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800a1e6:	2303      	movs	r3, #3
 800a1e8:	e310      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a1ea:	4b3a      	ldr	r3, [pc, #232]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f003 0302 	and.w	r3, r3, #2
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d0f0      	beq.n	800a1d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a1f6:	4b37      	ldr	r3, [pc, #220]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a36      	ldr	r2, [pc, #216]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a1fc:	f043 0308 	orr.w	r3, r3, #8
 800a200:	6013      	str	r3, [r2, #0]
 800a202:	4b34      	ldr	r3, [pc, #208]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	4931      	ldr	r1, [pc, #196]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a210:	4313      	orrs	r3, r2
 800a212:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a214:	4b2f      	ldr	r3, [pc, #188]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	69db      	ldr	r3, [r3, #28]
 800a220:	021b      	lsls	r3, r3, #8
 800a222:	492c      	ldr	r1, [pc, #176]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a224:	4313      	orrs	r3, r2
 800a226:	604b      	str	r3, [r1, #4]
 800a228:	e01a      	b.n	800a260 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a22a:	4b2a      	ldr	r3, [pc, #168]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a29      	ldr	r2, [pc, #164]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a230:	f023 0301 	bic.w	r3, r3, #1
 800a234:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a236:	f7fd fbf9 	bl	8007a2c <HAL_GetTick>
 800a23a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a23c:	e008      	b.n	800a250 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a23e:	f7fd fbf5 	bl	8007a2c <HAL_GetTick>
 800a242:	4602      	mov	r2, r0
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	1ad3      	subs	r3, r2, r3
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d901      	bls.n	800a250 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800a24c:	2303      	movs	r3, #3
 800a24e:	e2dd      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a250:	4b20      	ldr	r3, [pc, #128]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f003 0302 	and.w	r3, r3, #2
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d1f0      	bne.n	800a23e <HAL_RCC_OscConfig+0x1da>
 800a25c:	e000      	b.n	800a260 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a25e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f003 0301 	and.w	r3, r3, #1
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d074      	beq.n	800a356 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	2b08      	cmp	r3, #8
 800a270:	d005      	beq.n	800a27e <HAL_RCC_OscConfig+0x21a>
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	2b0c      	cmp	r3, #12
 800a276:	d10e      	bne.n	800a296 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	2b03      	cmp	r3, #3
 800a27c:	d10b      	bne.n	800a296 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a27e:	4b15      	ldr	r3, [pc, #84]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a286:	2b00      	cmp	r3, #0
 800a288:	d064      	beq.n	800a354 <HAL_RCC_OscConfig+0x2f0>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d160      	bne.n	800a354 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e2ba      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a29e:	d106      	bne.n	800a2ae <HAL_RCC_OscConfig+0x24a>
 800a2a0:	4b0c      	ldr	r3, [pc, #48]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a0b      	ldr	r2, [pc, #44]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a2a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2aa:	6013      	str	r3, [r2, #0]
 800a2ac:	e026      	b.n	800a2fc <HAL_RCC_OscConfig+0x298>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a2b6:	d115      	bne.n	800a2e4 <HAL_RCC_OscConfig+0x280>
 800a2b8:	4b06      	ldr	r3, [pc, #24]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a05      	ldr	r2, [pc, #20]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a2be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a2c2:	6013      	str	r3, [r2, #0]
 800a2c4:	4b03      	ldr	r3, [pc, #12]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a02      	ldr	r2, [pc, #8]	; (800a2d4 <HAL_RCC_OscConfig+0x270>)
 800a2ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2ce:	6013      	str	r3, [r2, #0]
 800a2d0:	e014      	b.n	800a2fc <HAL_RCC_OscConfig+0x298>
 800a2d2:	bf00      	nop
 800a2d4:	40021000 	.word	0x40021000
 800a2d8:	08019390 	.word	0x08019390
 800a2dc:	2000013c 	.word	0x2000013c
 800a2e0:	2000016c 	.word	0x2000016c
 800a2e4:	4ba0      	ldr	r3, [pc, #640]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a9f      	ldr	r2, [pc, #636]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a2ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2ee:	6013      	str	r3, [r2, #0]
 800a2f0:	4b9d      	ldr	r3, [pc, #628]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a9c      	ldr	r2, [pc, #624]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a2f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a2fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d013      	beq.n	800a32c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a304:	f7fd fb92 	bl	8007a2c <HAL_GetTick>
 800a308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a30a:	e008      	b.n	800a31e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a30c:	f7fd fb8e 	bl	8007a2c <HAL_GetTick>
 800a310:	4602      	mov	r2, r0
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	1ad3      	subs	r3, r2, r3
 800a316:	2b64      	cmp	r3, #100	; 0x64
 800a318:	d901      	bls.n	800a31e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a31a:	2303      	movs	r3, #3
 800a31c:	e276      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a31e:	4b92      	ldr	r3, [pc, #584]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a326:	2b00      	cmp	r3, #0
 800a328:	d0f0      	beq.n	800a30c <HAL_RCC_OscConfig+0x2a8>
 800a32a:	e014      	b.n	800a356 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a32c:	f7fd fb7e 	bl	8007a2c <HAL_GetTick>
 800a330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a332:	e008      	b.n	800a346 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a334:	f7fd fb7a 	bl	8007a2c <HAL_GetTick>
 800a338:	4602      	mov	r2, r0
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	1ad3      	subs	r3, r2, r3
 800a33e:	2b64      	cmp	r3, #100	; 0x64
 800a340:	d901      	bls.n	800a346 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a342:	2303      	movs	r3, #3
 800a344:	e262      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a346:	4b88      	ldr	r3, [pc, #544]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1f0      	bne.n	800a334 <HAL_RCC_OscConfig+0x2d0>
 800a352:	e000      	b.n	800a356 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f003 0302 	and.w	r3, r3, #2
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d060      	beq.n	800a424 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	2b04      	cmp	r3, #4
 800a366:	d005      	beq.n	800a374 <HAL_RCC_OscConfig+0x310>
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	2b0c      	cmp	r3, #12
 800a36c:	d119      	bne.n	800a3a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	2b02      	cmp	r3, #2
 800a372:	d116      	bne.n	800a3a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a374:	4b7c      	ldr	r3, [pc, #496]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d005      	beq.n	800a38c <HAL_RCC_OscConfig+0x328>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d101      	bne.n	800a38c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	e23f      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a38c:	4b76      	ldr	r3, [pc, #472]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	061b      	lsls	r3, r3, #24
 800a39a:	4973      	ldr	r1, [pc, #460]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a39c:	4313      	orrs	r3, r2
 800a39e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a3a0:	e040      	b.n	800a424 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	68db      	ldr	r3, [r3, #12]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d023      	beq.n	800a3f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a3aa:	4b6f      	ldr	r3, [pc, #444]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a6e      	ldr	r2, [pc, #440]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a3b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3b6:	f7fd fb39 	bl	8007a2c <HAL_GetTick>
 800a3ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a3bc:	e008      	b.n	800a3d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3be:	f7fd fb35 	bl	8007a2c <HAL_GetTick>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d901      	bls.n	800a3d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a3cc:	2303      	movs	r3, #3
 800a3ce:	e21d      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a3d0:	4b65      	ldr	r3, [pc, #404]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d0f0      	beq.n	800a3be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3dc:	4b62      	ldr	r3, [pc, #392]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	061b      	lsls	r3, r3, #24
 800a3ea:	495f      	ldr	r1, [pc, #380]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	604b      	str	r3, [r1, #4]
 800a3f0:	e018      	b.n	800a424 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a3f2:	4b5d      	ldr	r3, [pc, #372]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a5c      	ldr	r2, [pc, #368]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a3f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3fe:	f7fd fb15 	bl	8007a2c <HAL_GetTick>
 800a402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a404:	e008      	b.n	800a418 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a406:	f7fd fb11 	bl	8007a2c <HAL_GetTick>
 800a40a:	4602      	mov	r2, r0
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	2b02      	cmp	r3, #2
 800a412:	d901      	bls.n	800a418 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a414:	2303      	movs	r3, #3
 800a416:	e1f9      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a418:	4b53      	ldr	r3, [pc, #332]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a420:	2b00      	cmp	r3, #0
 800a422:	d1f0      	bne.n	800a406 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f003 0308 	and.w	r3, r3, #8
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d03c      	beq.n	800a4aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	695b      	ldr	r3, [r3, #20]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d01c      	beq.n	800a472 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a438:	4b4b      	ldr	r3, [pc, #300]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a43a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a43e:	4a4a      	ldr	r2, [pc, #296]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a440:	f043 0301 	orr.w	r3, r3, #1
 800a444:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a448:	f7fd faf0 	bl	8007a2c <HAL_GetTick>
 800a44c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a44e:	e008      	b.n	800a462 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a450:	f7fd faec 	bl	8007a2c <HAL_GetTick>
 800a454:	4602      	mov	r2, r0
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	2b02      	cmp	r3, #2
 800a45c:	d901      	bls.n	800a462 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a45e:	2303      	movs	r3, #3
 800a460:	e1d4      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a462:	4b41      	ldr	r3, [pc, #260]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a464:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a468:	f003 0302 	and.w	r3, r3, #2
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d0ef      	beq.n	800a450 <HAL_RCC_OscConfig+0x3ec>
 800a470:	e01b      	b.n	800a4aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a472:	4b3d      	ldr	r3, [pc, #244]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a478:	4a3b      	ldr	r2, [pc, #236]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a47a:	f023 0301 	bic.w	r3, r3, #1
 800a47e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a482:	f7fd fad3 	bl	8007a2c <HAL_GetTick>
 800a486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a488:	e008      	b.n	800a49c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a48a:	f7fd facf 	bl	8007a2c <HAL_GetTick>
 800a48e:	4602      	mov	r2, r0
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	1ad3      	subs	r3, r2, r3
 800a494:	2b02      	cmp	r3, #2
 800a496:	d901      	bls.n	800a49c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a498:	2303      	movs	r3, #3
 800a49a:	e1b7      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a49c:	4b32      	ldr	r3, [pc, #200]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a49e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4a2:	f003 0302 	and.w	r3, r3, #2
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1ef      	bne.n	800a48a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f003 0304 	and.w	r3, r3, #4
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f000 80a6 	beq.w	800a604 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a4bc:	4b2a      	ldr	r3, [pc, #168]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a4be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10d      	bne.n	800a4e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a4c8:	4b27      	ldr	r3, [pc, #156]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a4ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4cc:	4a26      	ldr	r2, [pc, #152]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a4ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4d2:	6593      	str	r3, [r2, #88]	; 0x58
 800a4d4:	4b24      	ldr	r3, [pc, #144]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a4d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4dc:	60bb      	str	r3, [r7, #8]
 800a4de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a4e4:	4b21      	ldr	r3, [pc, #132]	; (800a56c <HAL_RCC_OscConfig+0x508>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d118      	bne.n	800a522 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a4f0:	4b1e      	ldr	r3, [pc, #120]	; (800a56c <HAL_RCC_OscConfig+0x508>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a1d      	ldr	r2, [pc, #116]	; (800a56c <HAL_RCC_OscConfig+0x508>)
 800a4f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a4fc:	f7fd fa96 	bl	8007a2c <HAL_GetTick>
 800a500:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a502:	e008      	b.n	800a516 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a504:	f7fd fa92 	bl	8007a2c <HAL_GetTick>
 800a508:	4602      	mov	r2, r0
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	2b02      	cmp	r3, #2
 800a510:	d901      	bls.n	800a516 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a512:	2303      	movs	r3, #3
 800a514:	e17a      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a516:	4b15      	ldr	r3, [pc, #84]	; (800a56c <HAL_RCC_OscConfig+0x508>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d0f0      	beq.n	800a504 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	2b01      	cmp	r3, #1
 800a528:	d108      	bne.n	800a53c <HAL_RCC_OscConfig+0x4d8>
 800a52a:	4b0f      	ldr	r3, [pc, #60]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a530:	4a0d      	ldr	r2, [pc, #52]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a532:	f043 0301 	orr.w	r3, r3, #1
 800a536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a53a:	e029      	b.n	800a590 <HAL_RCC_OscConfig+0x52c>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	2b05      	cmp	r3, #5
 800a542:	d115      	bne.n	800a570 <HAL_RCC_OscConfig+0x50c>
 800a544:	4b08      	ldr	r3, [pc, #32]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a54a:	4a07      	ldr	r2, [pc, #28]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a54c:	f043 0304 	orr.w	r3, r3, #4
 800a550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a554:	4b04      	ldr	r3, [pc, #16]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a55a:	4a03      	ldr	r2, [pc, #12]	; (800a568 <HAL_RCC_OscConfig+0x504>)
 800a55c:	f043 0301 	orr.w	r3, r3, #1
 800a560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a564:	e014      	b.n	800a590 <HAL_RCC_OscConfig+0x52c>
 800a566:	bf00      	nop
 800a568:	40021000 	.word	0x40021000
 800a56c:	40007000 	.word	0x40007000
 800a570:	4b9c      	ldr	r3, [pc, #624]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a576:	4a9b      	ldr	r2, [pc, #620]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a578:	f023 0301 	bic.w	r3, r3, #1
 800a57c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a580:	4b98      	ldr	r3, [pc, #608]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a586:	4a97      	ldr	r2, [pc, #604]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a588:	f023 0304 	bic.w	r3, r3, #4
 800a58c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d016      	beq.n	800a5c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a598:	f7fd fa48 	bl	8007a2c <HAL_GetTick>
 800a59c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a59e:	e00a      	b.n	800a5b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5a0:	f7fd fa44 	bl	8007a2c <HAL_GetTick>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	1ad3      	subs	r3, r2, r3
 800a5aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d901      	bls.n	800a5b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800a5b2:	2303      	movs	r3, #3
 800a5b4:	e12a      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5b6:	4b8b      	ldr	r3, [pc, #556]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a5b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5bc:	f003 0302 	and.w	r3, r3, #2
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d0ed      	beq.n	800a5a0 <HAL_RCC_OscConfig+0x53c>
 800a5c4:	e015      	b.n	800a5f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5c6:	f7fd fa31 	bl	8007a2c <HAL_GetTick>
 800a5ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a5cc:	e00a      	b.n	800a5e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5ce:	f7fd fa2d 	bl	8007a2c <HAL_GetTick>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	1ad3      	subs	r3, r2, r3
 800a5d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d901      	bls.n	800a5e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a5e0:	2303      	movs	r3, #3
 800a5e2:	e113      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a5e4:	4b7f      	ldr	r3, [pc, #508]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a5e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5ea:	f003 0302 	and.w	r3, r3, #2
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1ed      	bne.n	800a5ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a5f2:	7ffb      	ldrb	r3, [r7, #31]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d105      	bne.n	800a604 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a5f8:	4b7a      	ldr	r3, [pc, #488]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a5fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5fc:	4a79      	ldr	r2, [pc, #484]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a5fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a602:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f000 80fe 	beq.w	800a80a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a612:	2b02      	cmp	r3, #2
 800a614:	f040 80d0 	bne.w	800a7b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a618:	4b72      	ldr	r3, [pc, #456]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	f003 0203 	and.w	r2, r3, #3
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a628:	429a      	cmp	r2, r3
 800a62a:	d130      	bne.n	800a68e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a636:	3b01      	subs	r3, #1
 800a638:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d127      	bne.n	800a68e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a648:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d11f      	bne.n	800a68e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a658:	2a07      	cmp	r2, #7
 800a65a:	bf14      	ite	ne
 800a65c:	2201      	movne	r2, #1
 800a65e:	2200      	moveq	r2, #0
 800a660:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a662:	4293      	cmp	r3, r2
 800a664:	d113      	bne.n	800a68e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a670:	085b      	lsrs	r3, r3, #1
 800a672:	3b01      	subs	r3, #1
 800a674:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800a676:	429a      	cmp	r2, r3
 800a678:	d109      	bne.n	800a68e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a684:	085b      	lsrs	r3, r3, #1
 800a686:	3b01      	subs	r3, #1
 800a688:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d06e      	beq.n	800a76c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	2b0c      	cmp	r3, #12
 800a692:	d069      	beq.n	800a768 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a694:	4b53      	ldr	r3, [pc, #332]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d105      	bne.n	800a6ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a6a0:	4b50      	ldr	r3, [pc, #320]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d001      	beq.n	800a6b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e0ad      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a6b0:	4b4c      	ldr	r3, [pc, #304]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a4b      	ldr	r2, [pc, #300]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a6b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a6bc:	f7fd f9b6 	bl	8007a2c <HAL_GetTick>
 800a6c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a6c2:	e008      	b.n	800a6d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6c4:	f7fd f9b2 	bl	8007a2c <HAL_GetTick>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	1ad3      	subs	r3, r2, r3
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	d901      	bls.n	800a6d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	e09a      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a6d6:	4b43      	ldr	r3, [pc, #268]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d1f0      	bne.n	800a6c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a6e2:	4b40      	ldr	r3, [pc, #256]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a6e4:	68da      	ldr	r2, [r3, #12]
 800a6e6:	4b40      	ldr	r3, [pc, #256]	; (800a7e8 <HAL_RCC_OscConfig+0x784>)
 800a6e8:	4013      	ands	r3, r2
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a6f2:	3a01      	subs	r2, #1
 800a6f4:	0112      	lsls	r2, r2, #4
 800a6f6:	4311      	orrs	r1, r2
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a6fc:	0212      	lsls	r2, r2, #8
 800a6fe:	4311      	orrs	r1, r2
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a704:	0852      	lsrs	r2, r2, #1
 800a706:	3a01      	subs	r2, #1
 800a708:	0552      	lsls	r2, r2, #21
 800a70a:	4311      	orrs	r1, r2
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a710:	0852      	lsrs	r2, r2, #1
 800a712:	3a01      	subs	r2, #1
 800a714:	0652      	lsls	r2, r2, #25
 800a716:	4311      	orrs	r1, r2
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a71c:	0912      	lsrs	r2, r2, #4
 800a71e:	0452      	lsls	r2, r2, #17
 800a720:	430a      	orrs	r2, r1
 800a722:	4930      	ldr	r1, [pc, #192]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a724:	4313      	orrs	r3, r2
 800a726:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a728:	4b2e      	ldr	r3, [pc, #184]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a2d      	ldr	r2, [pc, #180]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a72e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a732:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a734:	4b2b      	ldr	r3, [pc, #172]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	4a2a      	ldr	r2, [pc, #168]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a73a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a73e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a740:	f7fd f974 	bl	8007a2c <HAL_GetTick>
 800a744:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a746:	e008      	b.n	800a75a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a748:	f7fd f970 	bl	8007a2c <HAL_GetTick>
 800a74c:	4602      	mov	r2, r0
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	1ad3      	subs	r3, r2, r3
 800a752:	2b02      	cmp	r3, #2
 800a754:	d901      	bls.n	800a75a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800a756:	2303      	movs	r3, #3
 800a758:	e058      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a75a:	4b22      	ldr	r3, [pc, #136]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a762:	2b00      	cmp	r3, #0
 800a764:	d0f0      	beq.n	800a748 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a766:	e050      	b.n	800a80a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	e04f      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a76c:	4b1d      	ldr	r3, [pc, #116]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a774:	2b00      	cmp	r3, #0
 800a776:	d148      	bne.n	800a80a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a778:	4b1a      	ldr	r3, [pc, #104]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a19      	ldr	r2, [pc, #100]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a77e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a782:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a784:	4b17      	ldr	r3, [pc, #92]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	4a16      	ldr	r2, [pc, #88]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a78a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a78e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a790:	f7fd f94c 	bl	8007a2c <HAL_GetTick>
 800a794:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a796:	e008      	b.n	800a7aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a798:	f7fd f948 	bl	8007a2c <HAL_GetTick>
 800a79c:	4602      	mov	r2, r0
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	2b02      	cmp	r3, #2
 800a7a4:	d901      	bls.n	800a7aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800a7a6:	2303      	movs	r3, #3
 800a7a8:	e030      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a7aa:	4b0e      	ldr	r3, [pc, #56]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d0f0      	beq.n	800a798 <HAL_RCC_OscConfig+0x734>
 800a7b6:	e028      	b.n	800a80a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	2b0c      	cmp	r3, #12
 800a7bc:	d023      	beq.n	800a806 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7be:	4b09      	ldr	r3, [pc, #36]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a08      	ldr	r2, [pc, #32]	; (800a7e4 <HAL_RCC_OscConfig+0x780>)
 800a7c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a7c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7ca:	f7fd f92f 	bl	8007a2c <HAL_GetTick>
 800a7ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a7d0:	e00c      	b.n	800a7ec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7d2:	f7fd f92b 	bl	8007a2c <HAL_GetTick>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	1ad3      	subs	r3, r2, r3
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d905      	bls.n	800a7ec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800a7e0:	2303      	movs	r3, #3
 800a7e2:	e013      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
 800a7e4:	40021000 	.word	0x40021000
 800a7e8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a7ec:	4b09      	ldr	r3, [pc, #36]	; (800a814 <HAL_RCC_OscConfig+0x7b0>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d1ec      	bne.n	800a7d2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a7f8:	4b06      	ldr	r3, [pc, #24]	; (800a814 <HAL_RCC_OscConfig+0x7b0>)
 800a7fa:	68da      	ldr	r2, [r3, #12]
 800a7fc:	4905      	ldr	r1, [pc, #20]	; (800a814 <HAL_RCC_OscConfig+0x7b0>)
 800a7fe:	4b06      	ldr	r3, [pc, #24]	; (800a818 <HAL_RCC_OscConfig+0x7b4>)
 800a800:	4013      	ands	r3, r2
 800a802:	60cb      	str	r3, [r1, #12]
 800a804:	e001      	b.n	800a80a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a806:	2301      	movs	r3, #1
 800a808:	e000      	b.n	800a80c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3720      	adds	r7, #32
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	40021000 	.word	0x40021000
 800a818:	feeefffc 	.word	0xfeeefffc

0800a81c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d101      	bne.n	800a830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e0e7      	b.n	800aa00 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a830:	4b75      	ldr	r3, [pc, #468]	; (800aa08 <HAL_RCC_ClockConfig+0x1ec>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 0307 	and.w	r3, r3, #7
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d910      	bls.n	800a860 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a83e:	4b72      	ldr	r3, [pc, #456]	; (800aa08 <HAL_RCC_ClockConfig+0x1ec>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f023 0207 	bic.w	r2, r3, #7
 800a846:	4970      	ldr	r1, [pc, #448]	; (800aa08 <HAL_RCC_ClockConfig+0x1ec>)
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	4313      	orrs	r3, r2
 800a84c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a84e:	4b6e      	ldr	r3, [pc, #440]	; (800aa08 <HAL_RCC_ClockConfig+0x1ec>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f003 0307 	and.w	r3, r3, #7
 800a856:	683a      	ldr	r2, [r7, #0]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d001      	beq.n	800a860 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	e0cf      	b.n	800aa00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 0302 	and.w	r3, r3, #2
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d010      	beq.n	800a88e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	689a      	ldr	r2, [r3, #8]
 800a870:	4b66      	ldr	r3, [pc, #408]	; (800aa0c <HAL_RCC_ClockConfig+0x1f0>)
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a878:	429a      	cmp	r2, r3
 800a87a:	d908      	bls.n	800a88e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a87c:	4b63      	ldr	r3, [pc, #396]	; (800aa0c <HAL_RCC_ClockConfig+0x1f0>)
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	4960      	ldr	r1, [pc, #384]	; (800aa0c <HAL_RCC_ClockConfig+0x1f0>)
 800a88a:	4313      	orrs	r3, r2
 800a88c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f003 0301 	and.w	r3, r3, #1
 800a896:	2b00      	cmp	r3, #0
 800a898:	d04c      	beq.n	800a934 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	2b03      	cmp	r3, #3
 800a8a0:	d107      	bne.n	800a8b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a8a2:	4b5a      	ldr	r3, [pc, #360]	; (800aa0c <HAL_RCC_ClockConfig+0x1f0>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d121      	bne.n	800a8f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e0a6      	b.n	800aa00 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d107      	bne.n	800a8ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a8ba:	4b54      	ldr	r3, [pc, #336]	; (800aa0c <HAL_RCC_ClockConfig+0x1f0>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d115      	bne.n	800a8f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e09a      	b.n	800aa00 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d107      	bne.n	800a8e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a8d2:	4b4e      	ldr	r3, [pc, #312]	; (800aa0c <HAL_RCC_ClockConfig+0x1f0>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f003 0302 	and.w	r3, r3, #2
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d109      	bne.n	800a8f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e08e      	b.n	800aa00 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a8e2:	4b4a      	ldr	r3, [pc, #296]	; (800aa0c <HAL_RCC_ClockConfig+0x1f0>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d101      	bne.n	800a8f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e086      	b.n	800aa00 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a8f2:	4b46      	ldr	r3, [pc, #280]	; (800aa0c <HAL_RCC_ClockConfig+0x1f0>)
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	f023 0203 	bic.w	r2, r3, #3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	4943      	ldr	r1, [pc, #268]	; (800aa0c <HAL_RCC_ClockConfig+0x1f0>)
 800a900:	4313      	orrs	r3, r2
 800a902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a904:	f7fd f892 	bl	8007a2c <HAL_GetTick>
 800a908:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a90a:	e00a      	b.n	800a922 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a90c:	f7fd f88e 	bl	8007a2c <HAL_GetTick>
 800a910:	4602      	mov	r2, r0
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	f241 3288 	movw	r2, #5000	; 0x1388
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d901      	bls.n	800a922 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800a91e:	2303      	movs	r3, #3
 800a920:	e06e      	b.n	800aa00 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a922:	4b3a      	ldr	r3, [pc, #232]	; (800aa0c <HAL_RCC_ClockConfig+0x1f0>)
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	f003 020c 	and.w	r2, r3, #12
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	429a      	cmp	r2, r3
 800a932:	d1eb      	bne.n	800a90c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f003 0302 	and.w	r3, r3, #2
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d010      	beq.n	800a962 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	689a      	ldr	r2, [r3, #8]
 800a944:	4b31      	ldr	r3, [pc, #196]	; (800aa0c <HAL_RCC_ClockConfig+0x1f0>)
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d208      	bcs.n	800a962 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a950:	4b2e      	ldr	r3, [pc, #184]	; (800aa0c <HAL_RCC_ClockConfig+0x1f0>)
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	492b      	ldr	r1, [pc, #172]	; (800aa0c <HAL_RCC_ClockConfig+0x1f0>)
 800a95e:	4313      	orrs	r3, r2
 800a960:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a962:	4b29      	ldr	r3, [pc, #164]	; (800aa08 <HAL_RCC_ClockConfig+0x1ec>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f003 0307 	and.w	r3, r3, #7
 800a96a:	683a      	ldr	r2, [r7, #0]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d210      	bcs.n	800a992 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a970:	4b25      	ldr	r3, [pc, #148]	; (800aa08 <HAL_RCC_ClockConfig+0x1ec>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f023 0207 	bic.w	r2, r3, #7
 800a978:	4923      	ldr	r1, [pc, #140]	; (800aa08 <HAL_RCC_ClockConfig+0x1ec>)
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a980:	4b21      	ldr	r3, [pc, #132]	; (800aa08 <HAL_RCC_ClockConfig+0x1ec>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f003 0307 	and.w	r3, r3, #7
 800a988:	683a      	ldr	r2, [r7, #0]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d001      	beq.n	800a992 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	e036      	b.n	800aa00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f003 0304 	and.w	r3, r3, #4
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d008      	beq.n	800a9b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a99e:	4b1b      	ldr	r3, [pc, #108]	; (800aa0c <HAL_RCC_ClockConfig+0x1f0>)
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	4918      	ldr	r1, [pc, #96]	; (800aa0c <HAL_RCC_ClockConfig+0x1f0>)
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f003 0308 	and.w	r3, r3, #8
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d009      	beq.n	800a9d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a9bc:	4b13      	ldr	r3, [pc, #76]	; (800aa0c <HAL_RCC_ClockConfig+0x1f0>)
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	00db      	lsls	r3, r3, #3
 800a9ca:	4910      	ldr	r1, [pc, #64]	; (800aa0c <HAL_RCC_ClockConfig+0x1f0>)
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a9d0:	f000 f824 	bl	800aa1c <HAL_RCC_GetSysClockFreq>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	4b0d      	ldr	r3, [pc, #52]	; (800aa0c <HAL_RCC_ClockConfig+0x1f0>)
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	091b      	lsrs	r3, r3, #4
 800a9dc:	f003 030f 	and.w	r3, r3, #15
 800a9e0:	490b      	ldr	r1, [pc, #44]	; (800aa10 <HAL_RCC_ClockConfig+0x1f4>)
 800a9e2:	5ccb      	ldrb	r3, [r1, r3]
 800a9e4:	f003 031f 	and.w	r3, r3, #31
 800a9e8:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ec:	4a09      	ldr	r2, [pc, #36]	; (800aa14 <HAL_RCC_ClockConfig+0x1f8>)
 800a9ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a9f0:	4b09      	ldr	r3, [pc, #36]	; (800aa18 <HAL_RCC_ClockConfig+0x1fc>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7fc f83b 	bl	8006a70 <HAL_InitTick>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	72fb      	strb	r3, [r7, #11]

  return status;
 800a9fe:	7afb      	ldrb	r3, [r7, #11]
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	40022000 	.word	0x40022000
 800aa0c:	40021000 	.word	0x40021000
 800aa10:	08019390 	.word	0x08019390
 800aa14:	2000013c 	.word	0x2000013c
 800aa18:	2000016c 	.word	0x2000016c

0800aa1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b089      	sub	sp, #36	; 0x24
 800aa20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800aa22:	2300      	movs	r3, #0
 800aa24:	61fb      	str	r3, [r7, #28]
 800aa26:	2300      	movs	r3, #0
 800aa28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa2a:	4b3e      	ldr	r3, [pc, #248]	; (800ab24 <HAL_RCC_GetSysClockFreq+0x108>)
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	f003 030c 	and.w	r3, r3, #12
 800aa32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aa34:	4b3b      	ldr	r3, [pc, #236]	; (800ab24 <HAL_RCC_GetSysClockFreq+0x108>)
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	f003 0303 	and.w	r3, r3, #3
 800aa3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d005      	beq.n	800aa50 <HAL_RCC_GetSysClockFreq+0x34>
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	2b0c      	cmp	r3, #12
 800aa48:	d121      	bne.n	800aa8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d11e      	bne.n	800aa8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800aa50:	4b34      	ldr	r3, [pc, #208]	; (800ab24 <HAL_RCC_GetSysClockFreq+0x108>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f003 0308 	and.w	r3, r3, #8
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d107      	bne.n	800aa6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800aa5c:	4b31      	ldr	r3, [pc, #196]	; (800ab24 <HAL_RCC_GetSysClockFreq+0x108>)
 800aa5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa62:	0a1b      	lsrs	r3, r3, #8
 800aa64:	f003 030f 	and.w	r3, r3, #15
 800aa68:	61fb      	str	r3, [r7, #28]
 800aa6a:	e005      	b.n	800aa78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800aa6c:	4b2d      	ldr	r3, [pc, #180]	; (800ab24 <HAL_RCC_GetSysClockFreq+0x108>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	091b      	lsrs	r3, r3, #4
 800aa72:	f003 030f 	and.w	r3, r3, #15
 800aa76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800aa78:	4a2b      	ldr	r2, [pc, #172]	; (800ab28 <HAL_RCC_GetSysClockFreq+0x10c>)
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10d      	bne.n	800aaa4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800aa8c:	e00a      	b.n	800aaa4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	2b04      	cmp	r3, #4
 800aa92:	d102      	bne.n	800aa9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800aa94:	4b25      	ldr	r3, [pc, #148]	; (800ab2c <HAL_RCC_GetSysClockFreq+0x110>)
 800aa96:	61bb      	str	r3, [r7, #24]
 800aa98:	e004      	b.n	800aaa4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	2b08      	cmp	r3, #8
 800aa9e:	d101      	bne.n	800aaa4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800aaa0:	4b23      	ldr	r3, [pc, #140]	; (800ab30 <HAL_RCC_GetSysClockFreq+0x114>)
 800aaa2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	2b0c      	cmp	r3, #12
 800aaa8:	d134      	bne.n	800ab14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800aaaa:	4b1e      	ldr	r3, [pc, #120]	; (800ab24 <HAL_RCC_GetSysClockFreq+0x108>)
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	f003 0303 	and.w	r3, r3, #3
 800aab2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	d003      	beq.n	800aac2 <HAL_RCC_GetSysClockFreq+0xa6>
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	2b03      	cmp	r3, #3
 800aabe:	d003      	beq.n	800aac8 <HAL_RCC_GetSysClockFreq+0xac>
 800aac0:	e005      	b.n	800aace <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800aac2:	4b1a      	ldr	r3, [pc, #104]	; (800ab2c <HAL_RCC_GetSysClockFreq+0x110>)
 800aac4:	617b      	str	r3, [r7, #20]
      break;
 800aac6:	e005      	b.n	800aad4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800aac8:	4b19      	ldr	r3, [pc, #100]	; (800ab30 <HAL_RCC_GetSysClockFreq+0x114>)
 800aaca:	617b      	str	r3, [r7, #20]
      break;
 800aacc:	e002      	b.n	800aad4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800aace:	69fb      	ldr	r3, [r7, #28]
 800aad0:	617b      	str	r3, [r7, #20]
      break;
 800aad2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800aad4:	4b13      	ldr	r3, [pc, #76]	; (800ab24 <HAL_RCC_GetSysClockFreq+0x108>)
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	091b      	lsrs	r3, r3, #4
 800aada:	f003 0307 	and.w	r3, r3, #7
 800aade:	3301      	adds	r3, #1
 800aae0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800aae2:	4b10      	ldr	r3, [pc, #64]	; (800ab24 <HAL_RCC_GetSysClockFreq+0x108>)
 800aae4:	68db      	ldr	r3, [r3, #12]
 800aae6:	0a1b      	lsrs	r3, r3, #8
 800aae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaec:	697a      	ldr	r2, [r7, #20]
 800aaee:	fb03 f202 	mul.w	r2, r3, r2
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaf8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800aafa:	4b0a      	ldr	r3, [pc, #40]	; (800ab24 <HAL_RCC_GetSysClockFreq+0x108>)
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	0e5b      	lsrs	r3, r3, #25
 800ab00:	f003 0303 	and.w	r3, r3, #3
 800ab04:	3301      	adds	r3, #1
 800ab06:	005b      	lsls	r3, r3, #1
 800ab08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800ab0a:	697a      	ldr	r2, [r7, #20]
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800ab14:	69bb      	ldr	r3, [r7, #24]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3724      	adds	r7, #36	; 0x24
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	40021000 	.word	0x40021000
 800ab28:	080193a8 	.word	0x080193a8
 800ab2c:	00f42400 	.word	0x00f42400
 800ab30:	007a1200 	.word	0x007a1200

0800ab34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab34:	b480      	push	{r7}
 800ab36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ab38:	4b03      	ldr	r3, [pc, #12]	; (800ab48 <HAL_RCC_GetHCLKFreq+0x14>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop
 800ab48:	2000013c 	.word	0x2000013c

0800ab4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800ab50:	f7ff fff0 	bl	800ab34 <HAL_RCC_GetHCLKFreq>
 800ab54:	4602      	mov	r2, r0
 800ab56:	4b06      	ldr	r3, [pc, #24]	; (800ab70 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	0a1b      	lsrs	r3, r3, #8
 800ab5c:	f003 0307 	and.w	r3, r3, #7
 800ab60:	4904      	ldr	r1, [pc, #16]	; (800ab74 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ab62:	5ccb      	ldrb	r3, [r1, r3]
 800ab64:	f003 031f 	and.w	r3, r3, #31
 800ab68:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	40021000 	.word	0x40021000
 800ab74:	080193a0 	.word	0x080193a0

0800ab78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800ab7c:	f7ff ffda 	bl	800ab34 <HAL_RCC_GetHCLKFreq>
 800ab80:	4602      	mov	r2, r0
 800ab82:	4b06      	ldr	r3, [pc, #24]	; (800ab9c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ab84:	689b      	ldr	r3, [r3, #8]
 800ab86:	0adb      	lsrs	r3, r3, #11
 800ab88:	f003 0307 	and.w	r3, r3, #7
 800ab8c:	4904      	ldr	r1, [pc, #16]	; (800aba0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ab8e:	5ccb      	ldrb	r3, [r1, r3]
 800ab90:	f003 031f 	and.w	r3, r3, #31
 800ab94:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	bd80      	pop	{r7, pc}
 800ab9c:	40021000 	.word	0x40021000
 800aba0:	080193a0 	.word	0x080193a0

0800aba4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	220f      	movs	r2, #15
 800abb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800abb4:	4b12      	ldr	r3, [pc, #72]	; (800ac00 <HAL_RCC_GetClockConfig+0x5c>)
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	f003 0203 	and.w	r2, r3, #3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800abc0:	4b0f      	ldr	r3, [pc, #60]	; (800ac00 <HAL_RCC_GetClockConfig+0x5c>)
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800abcc:	4b0c      	ldr	r3, [pc, #48]	; (800ac00 <HAL_RCC_GetClockConfig+0x5c>)
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800abd8:	4b09      	ldr	r3, [pc, #36]	; (800ac00 <HAL_RCC_GetClockConfig+0x5c>)
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	08db      	lsrs	r3, r3, #3
 800abde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800abe6:	4b07      	ldr	r3, [pc, #28]	; (800ac04 <HAL_RCC_GetClockConfig+0x60>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f003 0207 	and.w	r2, r3, #7
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	601a      	str	r2, [r3, #0]
}
 800abf2:	bf00      	nop
 800abf4:	370c      	adds	r7, #12
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop
 800ac00:	40021000 	.word	0x40021000
 800ac04:	40022000 	.word	0x40022000

0800ac08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b086      	sub	sp, #24
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800ac10:	2300      	movs	r3, #0
 800ac12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ac14:	4b2a      	ldr	r3, [pc, #168]	; (800acc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ac16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d003      	beq.n	800ac28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800ac20:	f7ff f974 	bl	8009f0c <HAL_PWREx_GetVoltageRange>
 800ac24:	6178      	str	r0, [r7, #20]
 800ac26:	e014      	b.n	800ac52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ac28:	4b25      	ldr	r3, [pc, #148]	; (800acc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ac2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac2c:	4a24      	ldr	r2, [pc, #144]	; (800acc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ac2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac32:	6593      	str	r3, [r2, #88]	; 0x58
 800ac34:	4b22      	ldr	r3, [pc, #136]	; (800acc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ac36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac3c:	60fb      	str	r3, [r7, #12]
 800ac3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800ac40:	f7ff f964 	bl	8009f0c <HAL_PWREx_GetVoltageRange>
 800ac44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ac46:	4b1e      	ldr	r3, [pc, #120]	; (800acc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ac48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac4a:	4a1d      	ldr	r2, [pc, #116]	; (800acc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ac4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac58:	d10b      	bne.n	800ac72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2b80      	cmp	r3, #128	; 0x80
 800ac5e:	d919      	bls.n	800ac94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2ba0      	cmp	r3, #160	; 0xa0
 800ac64:	d902      	bls.n	800ac6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ac66:	2302      	movs	r3, #2
 800ac68:	613b      	str	r3, [r7, #16]
 800ac6a:	e013      	b.n	800ac94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	613b      	str	r3, [r7, #16]
 800ac70:	e010      	b.n	800ac94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2b80      	cmp	r3, #128	; 0x80
 800ac76:	d902      	bls.n	800ac7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800ac78:	2303      	movs	r3, #3
 800ac7a:	613b      	str	r3, [r7, #16]
 800ac7c:	e00a      	b.n	800ac94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2b80      	cmp	r3, #128	; 0x80
 800ac82:	d102      	bne.n	800ac8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ac84:	2302      	movs	r3, #2
 800ac86:	613b      	str	r3, [r7, #16]
 800ac88:	e004      	b.n	800ac94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2b70      	cmp	r3, #112	; 0x70
 800ac8e:	d101      	bne.n	800ac94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ac90:	2301      	movs	r3, #1
 800ac92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800ac94:	4b0b      	ldr	r3, [pc, #44]	; (800acc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f023 0207 	bic.w	r2, r3, #7
 800ac9c:	4909      	ldr	r1, [pc, #36]	; (800acc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	4313      	orrs	r3, r2
 800aca2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800aca4:	4b07      	ldr	r3, [pc, #28]	; (800acc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f003 0307 	and.w	r3, r3, #7
 800acac:	693a      	ldr	r2, [r7, #16]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d001      	beq.n	800acb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800acb2:	2301      	movs	r3, #1
 800acb4:	e000      	b.n	800acb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3718      	adds	r7, #24
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	40021000 	.word	0x40021000
 800acc4:	40022000 	.word	0x40022000

0800acc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b086      	sub	sp, #24
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800acd0:	2300      	movs	r3, #0
 800acd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800acd4:	2300      	movs	r3, #0
 800acd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d041      	beq.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ace8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800acec:	d02a      	beq.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800acee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800acf2:	d824      	bhi.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800acf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800acf8:	d008      	beq.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800acfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800acfe:	d81e      	bhi.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00a      	beq.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800ad04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad08:	d010      	beq.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ad0a:	e018      	b.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ad0c:	4b86      	ldr	r3, [pc, #536]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	4a85      	ldr	r2, [pc, #532]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ad12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ad18:	e015      	b.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	3304      	adds	r3, #4
 800ad1e:	2100      	movs	r1, #0
 800ad20:	4618      	mov	r0, r3
 800ad22:	f000 fabb 	bl	800b29c <RCCEx_PLLSAI1_Config>
 800ad26:	4603      	mov	r3, r0
 800ad28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ad2a:	e00c      	b.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	3320      	adds	r3, #32
 800ad30:	2100      	movs	r1, #0
 800ad32:	4618      	mov	r0, r3
 800ad34:	f000 fba6 	bl	800b484 <RCCEx_PLLSAI2_Config>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ad3c:	e003      	b.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	74fb      	strb	r3, [r7, #19]
      break;
 800ad42:	e000      	b.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800ad44:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad46:	7cfb      	ldrb	r3, [r7, #19]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d10b      	bne.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ad4c:	4b76      	ldr	r3, [pc, #472]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ad4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad5a:	4973      	ldr	r1, [pc, #460]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ad62:	e001      	b.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad64:	7cfb      	ldrb	r3, [r7, #19]
 800ad66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d041      	beq.n	800adf8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad7c:	d02a      	beq.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800ad7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad82:	d824      	bhi.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x106>
 800ad84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad88:	d008      	beq.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800ad8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad8e:	d81e      	bhi.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x106>
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00a      	beq.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800ad94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad98:	d010      	beq.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800ad9a:	e018      	b.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ad9c:	4b62      	ldr	r3, [pc, #392]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	4a61      	ldr	r2, [pc, #388]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ada2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ada6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ada8:	e015      	b.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	3304      	adds	r3, #4
 800adae:	2100      	movs	r1, #0
 800adb0:	4618      	mov	r0, r3
 800adb2:	f000 fa73 	bl	800b29c <RCCEx_PLLSAI1_Config>
 800adb6:	4603      	mov	r3, r0
 800adb8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800adba:	e00c      	b.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	3320      	adds	r3, #32
 800adc0:	2100      	movs	r1, #0
 800adc2:	4618      	mov	r0, r3
 800adc4:	f000 fb5e 	bl	800b484 <RCCEx_PLLSAI2_Config>
 800adc8:	4603      	mov	r3, r0
 800adca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800adcc:	e003      	b.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	74fb      	strb	r3, [r7, #19]
      break;
 800add2:	e000      	b.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800add4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800add6:	7cfb      	ldrb	r3, [r7, #19]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d10b      	bne.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800addc:	4b52      	ldr	r3, [pc, #328]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800adde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ade2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adea:	494f      	ldr	r1, [pc, #316]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800adec:	4313      	orrs	r3, r2
 800adee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800adf2:	e001      	b.n	800adf8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adf4:	7cfb      	ldrb	r3, [r7, #19]
 800adf6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f000 80a0 	beq.w	800af46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ae06:	2300      	movs	r3, #0
 800ae08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ae0a:	4b47      	ldr	r3, [pc, #284]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d101      	bne.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x152>
 800ae16:	2301      	movs	r3, #1
 800ae18:	e000      	b.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d00d      	beq.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae20:	4b41      	ldr	r3, [pc, #260]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae24:	4a40      	ldr	r2, [pc, #256]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae2a:	6593      	str	r3, [r2, #88]	; 0x58
 800ae2c:	4b3e      	ldr	r3, [pc, #248]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae34:	60bb      	str	r3, [r7, #8]
 800ae36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae3c:	4b3b      	ldr	r3, [pc, #236]	; (800af2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a3a      	ldr	r2, [pc, #232]	; (800af2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800ae42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae48:	f7fc fdf0 	bl	8007a2c <HAL_GetTick>
 800ae4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ae4e:	e009      	b.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae50:	f7fc fdec 	bl	8007a2c <HAL_GetTick>
 800ae54:	4602      	mov	r2, r0
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	1ad3      	subs	r3, r2, r3
 800ae5a:	2b02      	cmp	r3, #2
 800ae5c:	d902      	bls.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800ae5e:	2303      	movs	r3, #3
 800ae60:	74fb      	strb	r3, [r7, #19]
        break;
 800ae62:	e005      	b.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ae64:	4b31      	ldr	r3, [pc, #196]	; (800af2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d0ef      	beq.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800ae70:	7cfb      	ldrb	r3, [r7, #19]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d15c      	bne.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ae76:	4b2c      	ldr	r3, [pc, #176]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d01f      	beq.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae8e:	697a      	ldr	r2, [r7, #20]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d019      	beq.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ae94:	4b24      	ldr	r3, [pc, #144]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aea0:	4b21      	ldr	r3, [pc, #132]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aea6:	4a20      	ldr	r2, [pc, #128]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aeac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aeb0:	4b1d      	ldr	r3, [pc, #116]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aeb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeb6:	4a1c      	ldr	r2, [pc, #112]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aeb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800aec0:	4a19      	ldr	r2, [pc, #100]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	f003 0301 	and.w	r3, r3, #1
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d016      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aed2:	f7fc fdab 	bl	8007a2c <HAL_GetTick>
 800aed6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aed8:	e00b      	b.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aeda:	f7fc fda7 	bl	8007a2c <HAL_GetTick>
 800aede:	4602      	mov	r2, r0
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	1ad3      	subs	r3, r2, r3
 800aee4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d902      	bls.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800aeec:	2303      	movs	r3, #3
 800aeee:	74fb      	strb	r3, [r7, #19]
            break;
 800aef0:	e006      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aef2:	4b0d      	ldr	r3, [pc, #52]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aef8:	f003 0302 	and.w	r3, r3, #2
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d0ec      	beq.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800af00:	7cfb      	ldrb	r3, [r7, #19]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d10c      	bne.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af06:	4b08      	ldr	r3, [pc, #32]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800af08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af16:	4904      	ldr	r1, [pc, #16]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800af18:	4313      	orrs	r3, r2
 800af1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800af1e:	e009      	b.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800af20:	7cfb      	ldrb	r3, [r7, #19]
 800af22:	74bb      	strb	r3, [r7, #18]
 800af24:	e006      	b.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800af26:	bf00      	nop
 800af28:	40021000 	.word	0x40021000
 800af2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af30:	7cfb      	ldrb	r3, [r7, #19]
 800af32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800af34:	7c7b      	ldrb	r3, [r7, #17]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d105      	bne.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af3a:	4b9e      	ldr	r3, [pc, #632]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800af3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af3e:	4a9d      	ldr	r2, [pc, #628]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800af40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f003 0301 	and.w	r3, r3, #1
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00a      	beq.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800af52:	4b98      	ldr	r3, [pc, #608]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800af54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af58:	f023 0203 	bic.w	r2, r3, #3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af60:	4994      	ldr	r1, [pc, #592]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800af62:	4313      	orrs	r3, r2
 800af64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f003 0302 	and.w	r3, r3, #2
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00a      	beq.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800af74:	4b8f      	ldr	r3, [pc, #572]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800af76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af7a:	f023 020c 	bic.w	r2, r3, #12
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af82:	498c      	ldr	r1, [pc, #560]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800af84:	4313      	orrs	r3, r2
 800af86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f003 0304 	and.w	r3, r3, #4
 800af92:	2b00      	cmp	r3, #0
 800af94:	d00a      	beq.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800af96:	4b87      	ldr	r3, [pc, #540]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800af98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa4:	4983      	ldr	r1, [pc, #524]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800afa6:	4313      	orrs	r3, r2
 800afa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f003 0308 	and.w	r3, r3, #8
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00a      	beq.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800afb8:	4b7e      	ldr	r3, [pc, #504]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800afba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afc6:	497b      	ldr	r1, [pc, #492]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800afc8:	4313      	orrs	r3, r2
 800afca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f003 0310 	and.w	r3, r3, #16
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00a      	beq.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800afda:	4b76      	ldr	r3, [pc, #472]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800afdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afe8:	4972      	ldr	r1, [pc, #456]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800afea:	4313      	orrs	r3, r2
 800afec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f003 0320 	and.w	r3, r3, #32
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00a      	beq.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800affc:	4b6d      	ldr	r3, [pc, #436]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800affe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b002:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b00a:	496a      	ldr	r1, [pc, #424]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b00c:	4313      	orrs	r3, r2
 800b00e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00a      	beq.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b01e:	4b65      	ldr	r3, [pc, #404]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b024:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b02c:	4961      	ldr	r1, [pc, #388]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b02e:	4313      	orrs	r3, r2
 800b030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d00a      	beq.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b040:	4b5c      	ldr	r3, [pc, #368]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b046:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b04e:	4959      	ldr	r1, [pc, #356]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b050:	4313      	orrs	r3, r2
 800b052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d00a      	beq.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b062:	4b54      	ldr	r3, [pc, #336]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b068:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b070:	4950      	ldr	r1, [pc, #320]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b072:	4313      	orrs	r3, r2
 800b074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b080:	2b00      	cmp	r3, #0
 800b082:	d00a      	beq.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b084:	4b4b      	ldr	r3, [pc, #300]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b08a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b092:	4948      	ldr	r1, [pc, #288]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b094:	4313      	orrs	r3, r2
 800b096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00a      	beq.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b0a6:	4b43      	ldr	r3, [pc, #268]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b0a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0b4:	493f      	ldr	r1, [pc, #252]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d028      	beq.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b0c8:	4b3a      	ldr	r3, [pc, #232]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0d6:	4937      	ldr	r1, [pc, #220]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0e6:	d106      	bne.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b0e8:	4b32      	ldr	r3, [pc, #200]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b0ea:	68db      	ldr	r3, [r3, #12]
 800b0ec:	4a31      	ldr	r2, [pc, #196]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b0ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0f2:	60d3      	str	r3, [r2, #12]
 800b0f4:	e011      	b.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0fe:	d10c      	bne.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	3304      	adds	r3, #4
 800b104:	2101      	movs	r1, #1
 800b106:	4618      	mov	r0, r3
 800b108:	f000 f8c8 	bl	800b29c <RCCEx_PLLSAI1_Config>
 800b10c:	4603      	mov	r3, r0
 800b10e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b110:	7cfb      	ldrb	r3, [r7, #19]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d001      	beq.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800b116:	7cfb      	ldrb	r3, [r7, #19]
 800b118:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b122:	2b00      	cmp	r3, #0
 800b124:	d028      	beq.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b126:	4b23      	ldr	r3, [pc, #140]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b12c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b134:	491f      	ldr	r1, [pc, #124]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b136:	4313      	orrs	r3, r2
 800b138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b140:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b144:	d106      	bne.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b146:	4b1b      	ldr	r3, [pc, #108]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b148:	68db      	ldr	r3, [r3, #12]
 800b14a:	4a1a      	ldr	r2, [pc, #104]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b14c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b150:	60d3      	str	r3, [r2, #12]
 800b152:	e011      	b.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b158:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b15c:	d10c      	bne.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	3304      	adds	r3, #4
 800b162:	2101      	movs	r1, #1
 800b164:	4618      	mov	r0, r3
 800b166:	f000 f899 	bl	800b29c <RCCEx_PLLSAI1_Config>
 800b16a:	4603      	mov	r3, r0
 800b16c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b16e:	7cfb      	ldrb	r3, [r7, #19]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d001      	beq.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800b174:	7cfb      	ldrb	r3, [r7, #19]
 800b176:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b180:	2b00      	cmp	r3, #0
 800b182:	d02b      	beq.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b184:	4b0b      	ldr	r3, [pc, #44]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b18a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b192:	4908      	ldr	r1, [pc, #32]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b194:	4313      	orrs	r3, r2
 800b196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b19e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1a2:	d109      	bne.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b1a4:	4b03      	ldr	r3, [pc, #12]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	4a02      	ldr	r2, [pc, #8]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b1aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1ae:	60d3      	str	r3, [r2, #12]
 800b1b0:	e014      	b.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 800b1b2:	bf00      	nop
 800b1b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b1c0:	d10c      	bne.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	3304      	adds	r3, #4
 800b1c6:	2101      	movs	r1, #1
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f000 f867 	bl	800b29c <RCCEx_PLLSAI1_Config>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b1d2:	7cfb      	ldrb	r3, [r7, #19]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d001      	beq.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800b1d8:	7cfb      	ldrb	r3, [r7, #19]
 800b1da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d02f      	beq.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b1e8:	4b2b      	ldr	r3, [pc, #172]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b1ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1f6:	4928      	ldr	r1, [pc, #160]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b202:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b206:	d10d      	bne.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	3304      	adds	r3, #4
 800b20c:	2102      	movs	r1, #2
 800b20e:	4618      	mov	r0, r3
 800b210:	f000 f844 	bl	800b29c <RCCEx_PLLSAI1_Config>
 800b214:	4603      	mov	r3, r0
 800b216:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b218:	7cfb      	ldrb	r3, [r7, #19]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d014      	beq.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800b21e:	7cfb      	ldrb	r3, [r7, #19]
 800b220:	74bb      	strb	r3, [r7, #18]
 800b222:	e011      	b.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b22c:	d10c      	bne.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	3320      	adds	r3, #32
 800b232:	2102      	movs	r1, #2
 800b234:	4618      	mov	r0, r3
 800b236:	f000 f925 	bl	800b484 <RCCEx_PLLSAI2_Config>
 800b23a:	4603      	mov	r3, r0
 800b23c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b23e:	7cfb      	ldrb	r3, [r7, #19]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d001      	beq.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800b244:	7cfb      	ldrb	r3, [r7, #19]
 800b246:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b250:	2b00      	cmp	r3, #0
 800b252:	d00a      	beq.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b254:	4b10      	ldr	r3, [pc, #64]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b25a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b262:	490d      	ldr	r1, [pc, #52]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b264:	4313      	orrs	r3, r2
 800b266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00b      	beq.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b276:	4b08      	ldr	r3, [pc, #32]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b27c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b286:	4904      	ldr	r1, [pc, #16]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b288:	4313      	orrs	r3, r2
 800b28a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b28e:	7cbb      	ldrb	r3, [r7, #18]
}
 800b290:	4618      	mov	r0, r3
 800b292:	3718      	adds	r7, #24
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	40021000 	.word	0x40021000

0800b29c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b2aa:	4b75      	ldr	r3, [pc, #468]	; (800b480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	f003 0303 	and.w	r3, r3, #3
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d018      	beq.n	800b2e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b2b6:	4b72      	ldr	r3, [pc, #456]	; (800b480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b2b8:	68db      	ldr	r3, [r3, #12]
 800b2ba:	f003 0203 	and.w	r2, r3, #3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d10d      	bne.n	800b2e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
       ||
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d009      	beq.n	800b2e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b2ce:	4b6c      	ldr	r3, [pc, #432]	; (800b480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b2d0:	68db      	ldr	r3, [r3, #12]
 800b2d2:	091b      	lsrs	r3, r3, #4
 800b2d4:	f003 0307 	and.w	r3, r3, #7
 800b2d8:	1c5a      	adds	r2, r3, #1
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	685b      	ldr	r3, [r3, #4]
       ||
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d047      	beq.n	800b372 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	73fb      	strb	r3, [r7, #15]
 800b2e6:	e044      	b.n	800b372 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	2b03      	cmp	r3, #3
 800b2ee:	d018      	beq.n	800b322 <RCCEx_PLLSAI1_Config+0x86>
 800b2f0:	2b03      	cmp	r3, #3
 800b2f2:	d825      	bhi.n	800b340 <RCCEx_PLLSAI1_Config+0xa4>
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d002      	beq.n	800b2fe <RCCEx_PLLSAI1_Config+0x62>
 800b2f8:	2b02      	cmp	r3, #2
 800b2fa:	d009      	beq.n	800b310 <RCCEx_PLLSAI1_Config+0x74>
 800b2fc:	e020      	b.n	800b340 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b2fe:	4b60      	ldr	r3, [pc, #384]	; (800b480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f003 0302 	and.w	r3, r3, #2
 800b306:	2b00      	cmp	r3, #0
 800b308:	d11d      	bne.n	800b346 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800b30a:	2301      	movs	r3, #1
 800b30c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b30e:	e01a      	b.n	800b346 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b310:	4b5b      	ldr	r3, [pc, #364]	; (800b480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d116      	bne.n	800b34a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800b31c:	2301      	movs	r3, #1
 800b31e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b320:	e013      	b.n	800b34a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b322:	4b57      	ldr	r3, [pc, #348]	; (800b480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d10f      	bne.n	800b34e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b32e:	4b54      	ldr	r3, [pc, #336]	; (800b480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b336:	2b00      	cmp	r3, #0
 800b338:	d109      	bne.n	800b34e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800b33a:	2301      	movs	r3, #1
 800b33c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b33e:	e006      	b.n	800b34e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b340:	2301      	movs	r3, #1
 800b342:	73fb      	strb	r3, [r7, #15]
      break;
 800b344:	e004      	b.n	800b350 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b346:	bf00      	nop
 800b348:	e002      	b.n	800b350 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b34a:	bf00      	nop
 800b34c:	e000      	b.n	800b350 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b34e:	bf00      	nop
    }

    if(status == HAL_OK)
 800b350:	7bfb      	ldrb	r3, [r7, #15]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d10d      	bne.n	800b372 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b356:	4b4a      	ldr	r3, [pc, #296]	; (800b480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b358:	68db      	ldr	r3, [r3, #12]
 800b35a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6819      	ldr	r1, [r3, #0]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	3b01      	subs	r3, #1
 800b368:	011b      	lsls	r3, r3, #4
 800b36a:	430b      	orrs	r3, r1
 800b36c:	4944      	ldr	r1, [pc, #272]	; (800b480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b36e:	4313      	orrs	r3, r2
 800b370:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b372:	7bfb      	ldrb	r3, [r7, #15]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d17d      	bne.n	800b474 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b378:	4b41      	ldr	r3, [pc, #260]	; (800b480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a40      	ldr	r2, [pc, #256]	; (800b480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b37e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b382:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b384:	f7fc fb52 	bl	8007a2c <HAL_GetTick>
 800b388:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b38a:	e009      	b.n	800b3a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b38c:	f7fc fb4e 	bl	8007a2c <HAL_GetTick>
 800b390:	4602      	mov	r2, r0
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	2b02      	cmp	r3, #2
 800b398:	d902      	bls.n	800b3a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b39a:	2303      	movs	r3, #3
 800b39c:	73fb      	strb	r3, [r7, #15]
        break;
 800b39e:	e005      	b.n	800b3ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b3a0:	4b37      	ldr	r3, [pc, #220]	; (800b480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d1ef      	bne.n	800b38c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b3ac:	7bfb      	ldrb	r3, [r7, #15]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d160      	bne.n	800b474 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d111      	bne.n	800b3dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b3b8:	4b31      	ldr	r3, [pc, #196]	; (800b480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b3ba:	691b      	ldr	r3, [r3, #16]
 800b3bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800b3c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	6892      	ldr	r2, [r2, #8]
 800b3c8:	0211      	lsls	r1, r2, #8
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	68d2      	ldr	r2, [r2, #12]
 800b3ce:	0912      	lsrs	r2, r2, #4
 800b3d0:	0452      	lsls	r2, r2, #17
 800b3d2:	430a      	orrs	r2, r1
 800b3d4:	492a      	ldr	r1, [pc, #168]	; (800b480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	610b      	str	r3, [r1, #16]
 800b3da:	e027      	b.n	800b42c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d112      	bne.n	800b408 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b3e2:	4b27      	ldr	r3, [pc, #156]	; (800b480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b3e4:	691b      	ldr	r3, [r3, #16]
 800b3e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800b3ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	6892      	ldr	r2, [r2, #8]
 800b3f2:	0211      	lsls	r1, r2, #8
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	6912      	ldr	r2, [r2, #16]
 800b3f8:	0852      	lsrs	r2, r2, #1
 800b3fa:	3a01      	subs	r2, #1
 800b3fc:	0552      	lsls	r2, r2, #21
 800b3fe:	430a      	orrs	r2, r1
 800b400:	491f      	ldr	r1, [pc, #124]	; (800b480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b402:	4313      	orrs	r3, r2
 800b404:	610b      	str	r3, [r1, #16]
 800b406:	e011      	b.n	800b42c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b408:	4b1d      	ldr	r3, [pc, #116]	; (800b480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b40a:	691b      	ldr	r3, [r3, #16]
 800b40c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b410:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	6892      	ldr	r2, [r2, #8]
 800b418:	0211      	lsls	r1, r2, #8
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	6952      	ldr	r2, [r2, #20]
 800b41e:	0852      	lsrs	r2, r2, #1
 800b420:	3a01      	subs	r2, #1
 800b422:	0652      	lsls	r2, r2, #25
 800b424:	430a      	orrs	r2, r1
 800b426:	4916      	ldr	r1, [pc, #88]	; (800b480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b428:	4313      	orrs	r3, r2
 800b42a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b42c:	4b14      	ldr	r3, [pc, #80]	; (800b480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a13      	ldr	r2, [pc, #76]	; (800b480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b432:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b436:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b438:	f7fc faf8 	bl	8007a2c <HAL_GetTick>
 800b43c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b43e:	e009      	b.n	800b454 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b440:	f7fc faf4 	bl	8007a2c <HAL_GetTick>
 800b444:	4602      	mov	r2, r0
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	2b02      	cmp	r3, #2
 800b44c:	d902      	bls.n	800b454 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800b44e:	2303      	movs	r3, #3
 800b450:	73fb      	strb	r3, [r7, #15]
          break;
 800b452:	e005      	b.n	800b460 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b454:	4b0a      	ldr	r3, [pc, #40]	; (800b480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d0ef      	beq.n	800b440 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800b460:	7bfb      	ldrb	r3, [r7, #15]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d106      	bne.n	800b474 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b466:	4b06      	ldr	r3, [pc, #24]	; (800b480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b468:	691a      	ldr	r2, [r3, #16]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	699b      	ldr	r3, [r3, #24]
 800b46e:	4904      	ldr	r1, [pc, #16]	; (800b480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b470:	4313      	orrs	r3, r2
 800b472:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b474:	7bfb      	ldrb	r3, [r7, #15]
}
 800b476:	4618      	mov	r0, r3
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	40021000 	.word	0x40021000

0800b484 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b48e:	2300      	movs	r3, #0
 800b490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b492:	4b6a      	ldr	r3, [pc, #424]	; (800b63c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b494:	68db      	ldr	r3, [r3, #12]
 800b496:	f003 0303 	and.w	r3, r3, #3
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d018      	beq.n	800b4d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b49e:	4b67      	ldr	r3, [pc, #412]	; (800b63c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	f003 0203 	and.w	r2, r3, #3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d10d      	bne.n	800b4ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
       ||
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d009      	beq.n	800b4ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800b4b6:	4b61      	ldr	r3, [pc, #388]	; (800b63c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b4b8:	68db      	ldr	r3, [r3, #12]
 800b4ba:	091b      	lsrs	r3, r3, #4
 800b4bc:	f003 0307 	and.w	r3, r3, #7
 800b4c0:	1c5a      	adds	r2, r3, #1
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	685b      	ldr	r3, [r3, #4]
       ||
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d047      	beq.n	800b55a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	73fb      	strb	r3, [r7, #15]
 800b4ce:	e044      	b.n	800b55a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2b03      	cmp	r3, #3
 800b4d6:	d018      	beq.n	800b50a <RCCEx_PLLSAI2_Config+0x86>
 800b4d8:	2b03      	cmp	r3, #3
 800b4da:	d825      	bhi.n	800b528 <RCCEx_PLLSAI2_Config+0xa4>
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d002      	beq.n	800b4e6 <RCCEx_PLLSAI2_Config+0x62>
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	d009      	beq.n	800b4f8 <RCCEx_PLLSAI2_Config+0x74>
 800b4e4:	e020      	b.n	800b528 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b4e6:	4b55      	ldr	r3, [pc, #340]	; (800b63c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f003 0302 	and.w	r3, r3, #2
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d11d      	bne.n	800b52e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b4f6:	e01a      	b.n	800b52e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b4f8:	4b50      	ldr	r3, [pc, #320]	; (800b63c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b500:	2b00      	cmp	r3, #0
 800b502:	d116      	bne.n	800b532 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800b504:	2301      	movs	r3, #1
 800b506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b508:	e013      	b.n	800b532 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b50a:	4b4c      	ldr	r3, [pc, #304]	; (800b63c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b512:	2b00      	cmp	r3, #0
 800b514:	d10f      	bne.n	800b536 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b516:	4b49      	ldr	r3, [pc, #292]	; (800b63c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d109      	bne.n	800b536 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b526:	e006      	b.n	800b536 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	73fb      	strb	r3, [r7, #15]
      break;
 800b52c:	e004      	b.n	800b538 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b52e:	bf00      	nop
 800b530:	e002      	b.n	800b538 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b532:	bf00      	nop
 800b534:	e000      	b.n	800b538 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b536:	bf00      	nop
    }

    if(status == HAL_OK)
 800b538:	7bfb      	ldrb	r3, [r7, #15]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d10d      	bne.n	800b55a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b53e:	4b3f      	ldr	r3, [pc, #252]	; (800b63c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6819      	ldr	r1, [r3, #0]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	3b01      	subs	r3, #1
 800b550:	011b      	lsls	r3, r3, #4
 800b552:	430b      	orrs	r3, r1
 800b554:	4939      	ldr	r1, [pc, #228]	; (800b63c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b556:	4313      	orrs	r3, r2
 800b558:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b55a:	7bfb      	ldrb	r3, [r7, #15]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d167      	bne.n	800b630 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b560:	4b36      	ldr	r3, [pc, #216]	; (800b63c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a35      	ldr	r2, [pc, #212]	; (800b63c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b56a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b56c:	f7fc fa5e 	bl	8007a2c <HAL_GetTick>
 800b570:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b572:	e009      	b.n	800b588 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b574:	f7fc fa5a 	bl	8007a2c <HAL_GetTick>
 800b578:	4602      	mov	r2, r0
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	1ad3      	subs	r3, r2, r3
 800b57e:	2b02      	cmp	r3, #2
 800b580:	d902      	bls.n	800b588 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b582:	2303      	movs	r3, #3
 800b584:	73fb      	strb	r3, [r7, #15]
        break;
 800b586:	e005      	b.n	800b594 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b588:	4b2c      	ldr	r3, [pc, #176]	; (800b63c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1ef      	bne.n	800b574 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b594:	7bfb      	ldrb	r3, [r7, #15]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d14a      	bne.n	800b630 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d111      	bne.n	800b5c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b5a0:	4b26      	ldr	r3, [pc, #152]	; (800b63c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b5a2:	695b      	ldr	r3, [r3, #20]
 800b5a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800b5a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5ac:	687a      	ldr	r2, [r7, #4]
 800b5ae:	6892      	ldr	r2, [r2, #8]
 800b5b0:	0211      	lsls	r1, r2, #8
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	68d2      	ldr	r2, [r2, #12]
 800b5b6:	0912      	lsrs	r2, r2, #4
 800b5b8:	0452      	lsls	r2, r2, #17
 800b5ba:	430a      	orrs	r2, r1
 800b5bc:	491f      	ldr	r1, [pc, #124]	; (800b63c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	614b      	str	r3, [r1, #20]
 800b5c2:	e011      	b.n	800b5e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b5c4:	4b1d      	ldr	r3, [pc, #116]	; (800b63c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b5c6:	695b      	ldr	r3, [r3, #20]
 800b5c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b5cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	6892      	ldr	r2, [r2, #8]
 800b5d4:	0211      	lsls	r1, r2, #8
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	6912      	ldr	r2, [r2, #16]
 800b5da:	0852      	lsrs	r2, r2, #1
 800b5dc:	3a01      	subs	r2, #1
 800b5de:	0652      	lsls	r2, r2, #25
 800b5e0:	430a      	orrs	r2, r1
 800b5e2:	4916      	ldr	r1, [pc, #88]	; (800b63c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b5e8:	4b14      	ldr	r3, [pc, #80]	; (800b63c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a13      	ldr	r2, [pc, #76]	; (800b63c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b5ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5f4:	f7fc fa1a 	bl	8007a2c <HAL_GetTick>
 800b5f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b5fa:	e009      	b.n	800b610 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b5fc:	f7fc fa16 	bl	8007a2c <HAL_GetTick>
 800b600:	4602      	mov	r2, r0
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	1ad3      	subs	r3, r2, r3
 800b606:	2b02      	cmp	r3, #2
 800b608:	d902      	bls.n	800b610 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800b60a:	2303      	movs	r3, #3
 800b60c:	73fb      	strb	r3, [r7, #15]
          break;
 800b60e:	e005      	b.n	800b61c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b610:	4b0a      	ldr	r3, [pc, #40]	; (800b63c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d0ef      	beq.n	800b5fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800b61c:	7bfb      	ldrb	r3, [r7, #15]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d106      	bne.n	800b630 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b622:	4b06      	ldr	r3, [pc, #24]	; (800b63c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b624:	695a      	ldr	r2, [r3, #20]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	695b      	ldr	r3, [r3, #20]
 800b62a:	4904      	ldr	r1, [pc, #16]	; (800b63c <RCCEx_PLLSAI2_Config+0x1b8>)
 800b62c:	4313      	orrs	r3, r2
 800b62e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b630:	7bfb      	ldrb	r3, [r7, #15]
}
 800b632:	4618      	mov	r0, r3
 800b634:	3710      	adds	r7, #16
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	40021000 	.word	0x40021000

0800b640 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b648:	2301      	movs	r3, #1
 800b64a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d06c      	beq.n	800b72c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d106      	bne.n	800b66c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2200      	movs	r2, #0
 800b662:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f7fa ff70 	bl	800654c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2202      	movs	r2, #2
 800b670:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	22ca      	movs	r2, #202	; 0xca
 800b67a:	625a      	str	r2, [r3, #36]	; 0x24
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2253      	movs	r2, #83	; 0x53
 800b682:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 fa49 	bl	800bb1c <RTC_EnterInitMode>
 800b68a:	4603      	mov	r3, r0
 800b68c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b68e:	7bfb      	ldrb	r3, [r7, #15]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d14b      	bne.n	800b72c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	6812      	ldr	r2, [r2, #0]
 800b69e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b6a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6a6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	6899      	ldr	r1, [r3, #8]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	685a      	ldr	r2, [r3, #4]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	691b      	ldr	r3, [r3, #16]
 800b6b6:	431a      	orrs	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	699b      	ldr	r3, [r3, #24]
 800b6bc:	431a      	orrs	r2, r3
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	430a      	orrs	r2, r1
 800b6c4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	68d2      	ldr	r2, [r2, #12]
 800b6ce:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	6919      	ldr	r1, [r3, #16]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	689b      	ldr	r3, [r3, #8]
 800b6da:	041a      	lsls	r2, r3, #16
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	430a      	orrs	r2, r1
 800b6e2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f000 fa4d 	bl	800bb84 <RTC_ExitInitMode>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800b6ee:	7bfb      	ldrb	r3, [r7, #15]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d11b      	bne.n	800b72c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f022 0203 	bic.w	r2, r2, #3
 800b702:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	69da      	ldr	r2, [r3, #28]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	695b      	ldr	r3, [r3, #20]
 800b712:	431a      	orrs	r2, r3
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	430a      	orrs	r2, r1
 800b71a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	22ff      	movs	r2, #255	; 0xff
 800b722:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2201      	movs	r2, #1
 800b728:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800b72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b736:	b590      	push	{r4, r7, lr}
 800b738:	b087      	sub	sp, #28
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	60f8      	str	r0, [r7, #12]
 800b73e:	60b9      	str	r1, [r7, #8]
 800b740:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d101      	bne.n	800b750 <HAL_RTC_SetTime+0x1a>
 800b74c:	2302      	movs	r3, #2
 800b74e:	e08b      	b.n	800b868 <HAL_RTC_SetTime+0x132>
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2201      	movs	r2, #1
 800b754:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2202      	movs	r2, #2
 800b75c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	22ca      	movs	r2, #202	; 0xca
 800b766:	625a      	str	r2, [r3, #36]	; 0x24
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2253      	movs	r2, #83	; 0x53
 800b76e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f000 f9d3 	bl	800bb1c <RTC_EnterInitMode>
 800b776:	4603      	mov	r3, r0
 800b778:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b77a:	7cfb      	ldrb	r3, [r7, #19]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d163      	bne.n	800b848 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d126      	bne.n	800b7d4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b790:	2b00      	cmp	r3, #0
 800b792:	d102      	bne.n	800b79a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	2200      	movs	r2, #0
 800b798:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f000 fa2e 	bl	800bc00 <RTC_ByteToBcd2>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	785b      	ldrb	r3, [r3, #1]
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f000 fa27 	bl	800bc00 <RTC_ByteToBcd2>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b7b6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	789b      	ldrb	r3, [r3, #2]
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f000 fa1f 	bl	800bc00 <RTC_ByteToBcd2>
 800b7c2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b7c4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	78db      	ldrb	r3, [r3, #3]
 800b7cc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	617b      	str	r3, [r7, #20]
 800b7d2:	e018      	b.n	800b806 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d102      	bne.n	800b7e8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	785b      	ldrb	r3, [r3, #1]
 800b7f2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b7f4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b7f6:	68ba      	ldr	r2, [r7, #8]
 800b7f8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b7fa:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	78db      	ldrb	r3, [r3, #3]
 800b800:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b802:	4313      	orrs	r3, r2
 800b804:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b810:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b814:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	689a      	ldr	r2, [r3, #8]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b824:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	6899      	ldr	r1, [r3, #8]
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	68da      	ldr	r2, [r3, #12]
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	691b      	ldr	r3, [r3, #16]
 800b834:	431a      	orrs	r2, r3
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	430a      	orrs	r2, r1
 800b83c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f000 f9a0 	bl	800bb84 <RTC_ExitInitMode>
 800b844:	4603      	mov	r3, r0
 800b846:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	22ff      	movs	r2, #255	; 0xff
 800b84e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b850:	7cfb      	ldrb	r3, [r7, #19]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d103      	bne.n	800b85e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2201      	movs	r2, #1
 800b85a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2200      	movs	r2, #0
 800b862:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b866:	7cfb      	ldrb	r3, [r7, #19]
}
 800b868:	4618      	mov	r0, r3
 800b86a:	371c      	adds	r7, #28
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd90      	pop	{r4, r7, pc}

0800b870 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b086      	sub	sp, #24
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	691b      	ldr	r3, [r3, #16]
 800b88c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b89e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b8a2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	0c1b      	lsrs	r3, r3, #16
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8ae:	b2da      	uxtb	r2, r3
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	0a1b      	lsrs	r3, r3, #8
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8be:	b2da      	uxtb	r2, r3
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8cc:	b2da      	uxtb	r2, r3
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	0d9b      	lsrs	r3, r3, #22
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	f003 0301 	and.w	r3, r3, #1
 800b8dc:	b2da      	uxtb	r2, r3
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d11a      	bne.n	800b91e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f000 f9a7 	bl	800bc40 <RTC_Bcd2ToByte>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	785b      	ldrb	r3, [r3, #1]
 800b8fe:	4618      	mov	r0, r3
 800b900:	f000 f99e 	bl	800bc40 <RTC_Bcd2ToByte>
 800b904:	4603      	mov	r3, r0
 800b906:	461a      	mov	r2, r3
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	789b      	ldrb	r3, [r3, #2]
 800b910:	4618      	mov	r0, r3
 800b912:	f000 f995 	bl	800bc40 <RTC_Bcd2ToByte>
 800b916:	4603      	mov	r3, r0
 800b918:	461a      	mov	r2, r3
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3718      	adds	r7, #24
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b928:	b590      	push	{r4, r7, lr}
 800b92a:	b087      	sub	sp, #28
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d101      	bne.n	800b942 <HAL_RTC_SetDate+0x1a>
 800b93e:	2302      	movs	r3, #2
 800b940:	e075      	b.n	800ba2e <HAL_RTC_SetDate+0x106>
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2201      	movs	r2, #1
 800b946:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2202      	movs	r2, #2
 800b94e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d10e      	bne.n	800b976 <HAL_RTC_SetDate+0x4e>
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	785b      	ldrb	r3, [r3, #1]
 800b95c:	f003 0310 	and.w	r3, r3, #16
 800b960:	2b00      	cmp	r3, #0
 800b962:	d008      	beq.n	800b976 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	785b      	ldrb	r3, [r3, #1]
 800b968:	f023 0310 	bic.w	r3, r3, #16
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	330a      	adds	r3, #10
 800b970:	b2da      	uxtb	r2, r3
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d11c      	bne.n	800b9b6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	78db      	ldrb	r3, [r3, #3]
 800b980:	4618      	mov	r0, r3
 800b982:	f000 f93d 	bl	800bc00 <RTC_ByteToBcd2>
 800b986:	4603      	mov	r3, r0
 800b988:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	785b      	ldrb	r3, [r3, #1]
 800b98e:	4618      	mov	r0, r3
 800b990:	f000 f936 	bl	800bc00 <RTC_ByteToBcd2>
 800b994:	4603      	mov	r3, r0
 800b996:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b998:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	789b      	ldrb	r3, [r3, #2]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f000 f92e 	bl	800bc00 <RTC_ByteToBcd2>
 800b9a4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b9a6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	617b      	str	r3, [r7, #20]
 800b9b4:	e00e      	b.n	800b9d4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	78db      	ldrb	r3, [r3, #3]
 800b9ba:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	785b      	ldrb	r3, [r3, #1]
 800b9c0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b9c2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800b9c4:	68ba      	ldr	r2, [r7, #8]
 800b9c6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b9c8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	22ca      	movs	r2, #202	; 0xca
 800b9da:	625a      	str	r2, [r3, #36]	; 0x24
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2253      	movs	r2, #83	; 0x53
 800b9e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f000 f899 	bl	800bb1c <RTC_EnterInitMode>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b9ee:	7cfb      	ldrb	r3, [r7, #19]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d10c      	bne.n	800ba0e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b9fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ba02:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f000 f8bd 	bl	800bb84 <RTC_ExitInitMode>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	22ff      	movs	r2, #255	; 0xff
 800ba14:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800ba16:	7cfb      	ldrb	r3, [r7, #19]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d103      	bne.n	800ba24 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2200      	movs	r2, #0
 800ba28:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800ba2c:	7cfb      	ldrb	r3, [r7, #19]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	371c      	adds	r7, #28
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd90      	pop	{r4, r7, pc}

0800ba36 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b086      	sub	sp, #24
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	60f8      	str	r0, [r7, #12]
 800ba3e:	60b9      	str	r1, [r7, #8]
 800ba40:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ba4c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ba50:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	0c1b      	lsrs	r3, r3, #16
 800ba56:	b2da      	uxtb	r2, r3
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	0a1b      	lsrs	r3, r3, #8
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	f003 031f 	and.w	r3, r3, #31
 800ba66:	b2da      	uxtb	r2, r3
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba74:	b2da      	uxtb	r2, r3
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	0b5b      	lsrs	r3, r3, #13
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	f003 0307 	and.w	r3, r3, #7
 800ba84:	b2da      	uxtb	r2, r3
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d11a      	bne.n	800bac6 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	78db      	ldrb	r3, [r3, #3]
 800ba94:	4618      	mov	r0, r3
 800ba96:	f000 f8d3 	bl	800bc40 <RTC_Bcd2ToByte>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	785b      	ldrb	r3, [r3, #1]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f000 f8ca 	bl	800bc40 <RTC_Bcd2ToByte>
 800baac:	4603      	mov	r3, r0
 800baae:	461a      	mov	r2, r3
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	789b      	ldrb	r3, [r3, #2]
 800bab8:	4618      	mov	r0, r3
 800baba:	f000 f8c1 	bl	800bc40 <RTC_Bcd2ToByte>
 800babe:	4603      	mov	r3, r0
 800bac0:	461a      	mov	r2, r3
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800bac6:	2300      	movs	r3, #0
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3718      	adds	r7, #24
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	68da      	ldr	r2, [r3, #12]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bae6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800bae8:	f7fb ffa0 	bl	8007a2c <HAL_GetTick>
 800baec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800baee:	e009      	b.n	800bb04 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800baf0:	f7fb ff9c 	bl	8007a2c <HAL_GetTick>
 800baf4:	4602      	mov	r2, r0
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	1ad3      	subs	r3, r2, r3
 800bafa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bafe:	d901      	bls.n	800bb04 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800bb00:	2303      	movs	r3, #3
 800bb02:	e007      	b.n	800bb14 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	f003 0320 	and.w	r3, r3, #32
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d0ee      	beq.n	800baf0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800bb12:	2300      	movs	r3, #0
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3710      	adds	r7, #16
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb24:	2300      	movs	r3, #0
 800bb26:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d120      	bne.n	800bb78 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb3e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800bb40:	f7fb ff74 	bl	8007a2c <HAL_GetTick>
 800bb44:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800bb46:	e00d      	b.n	800bb64 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800bb48:	f7fb ff70 	bl	8007a2c <HAL_GetTick>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	1ad3      	subs	r3, r2, r3
 800bb52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb56:	d905      	bls.n	800bb64 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800bb58:	2303      	movs	r3, #3
 800bb5a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2203      	movs	r2, #3
 800bb60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d102      	bne.n	800bb78 <RTC_EnterInitMode+0x5c>
 800bb72:	7bfb      	ldrb	r3, [r7, #15]
 800bb74:	2b03      	cmp	r3, #3
 800bb76:	d1e7      	bne.n	800bb48 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800bb78:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3710      	adds	r7, #16
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
	...

0800bb84 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b084      	sub	sp, #16
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800bb90:	4b1a      	ldr	r3, [pc, #104]	; (800bbfc <RTC_ExitInitMode+0x78>)
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	4a19      	ldr	r2, [pc, #100]	; (800bbfc <RTC_ExitInitMode+0x78>)
 800bb96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb9a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800bb9c:	4b17      	ldr	r3, [pc, #92]	; (800bbfc <RTC_ExitInitMode+0x78>)
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	f003 0320 	and.w	r3, r3, #32
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d10c      	bne.n	800bbc2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f7ff ff91 	bl	800bad0 <HAL_RTC_WaitForSynchro>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d01e      	beq.n	800bbf2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2203      	movs	r2, #3
 800bbb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800bbbc:	2303      	movs	r3, #3
 800bbbe:	73fb      	strb	r3, [r7, #15]
 800bbc0:	e017      	b.n	800bbf2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bbc2:	4b0e      	ldr	r3, [pc, #56]	; (800bbfc <RTC_ExitInitMode+0x78>)
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	4a0d      	ldr	r2, [pc, #52]	; (800bbfc <RTC_ExitInitMode+0x78>)
 800bbc8:	f023 0320 	bic.w	r3, r3, #32
 800bbcc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f7ff ff7e 	bl	800bad0 <HAL_RTC_WaitForSynchro>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d005      	beq.n	800bbe6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2203      	movs	r2, #3
 800bbde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800bbe2:	2303      	movs	r3, #3
 800bbe4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bbe6:	4b05      	ldr	r3, [pc, #20]	; (800bbfc <RTC_ExitInitMode+0x78>)
 800bbe8:	689b      	ldr	r3, [r3, #8]
 800bbea:	4a04      	ldr	r2, [pc, #16]	; (800bbfc <RTC_ExitInitMode+0x78>)
 800bbec:	f043 0320 	orr.w	r3, r3, #32
 800bbf0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800bbf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	40002800 	.word	0x40002800

0800bc00 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b085      	sub	sp, #20
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	4603      	mov	r3, r0
 800bc08:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800bc0e:	79fb      	ldrb	r3, [r7, #7]
 800bc10:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800bc12:	e005      	b.n	800bc20 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	3301      	adds	r3, #1
 800bc18:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800bc1a:	7afb      	ldrb	r3, [r7, #11]
 800bc1c:	3b0a      	subs	r3, #10
 800bc1e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800bc20:	7afb      	ldrb	r3, [r7, #11]
 800bc22:	2b09      	cmp	r3, #9
 800bc24:	d8f6      	bhi.n	800bc14 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	011b      	lsls	r3, r3, #4
 800bc2c:	b2da      	uxtb	r2, r3
 800bc2e:	7afb      	ldrb	r3, [r7, #11]
 800bc30:	4313      	orrs	r3, r2
 800bc32:	b2db      	uxtb	r3, r3
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3714      	adds	r7, #20
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b085      	sub	sp, #20
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	4603      	mov	r3, r0
 800bc48:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800bc4a:	79fb      	ldrb	r3, [r7, #7]
 800bc4c:	091b      	lsrs	r3, r3, #4
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	461a      	mov	r2, r3
 800bc52:	0092      	lsls	r2, r2, #2
 800bc54:	4413      	add	r3, r2
 800bc56:	005b      	lsls	r3, r3, #1
 800bc58:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800bc5a:	79fb      	ldrb	r3, [r7, #7]
 800bc5c:	f003 030f 	and.w	r3, r3, #15
 800bc60:	b2da      	uxtb	r2, r3
 800bc62:	7bfb      	ldrb	r3, [r7, #15]
 800bc64:	4413      	add	r3, r2
 800bc66:	b2db      	uxtb	r3, r3
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3714      	adds	r7, #20
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d101      	bne.n	800bc86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bc82:	2301      	movs	r3, #1
 800bc84:	e095      	b.n	800bdb2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d108      	bne.n	800bca0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc96:	d009      	beq.n	800bcac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	61da      	str	r2, [r3, #28]
 800bc9e:	e005      	b.n	800bcac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2200      	movs	r2, #0
 800bca4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d106      	bne.n	800bccc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f7fa fc72 	bl	80065b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2202      	movs	r2, #2
 800bcd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bce2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bcec:	d902      	bls.n	800bcf4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	60fb      	str	r3, [r7, #12]
 800bcf2:	e002      	b.n	800bcfa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bcf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bcf8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	68db      	ldr	r3, [r3, #12]
 800bcfe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bd02:	d007      	beq.n	800bd14 <HAL_SPI_Init+0xa0>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bd0c:	d002      	beq.n	800bd14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bd24:	431a      	orrs	r2, r3
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	691b      	ldr	r3, [r3, #16]
 800bd2a:	f003 0302 	and.w	r3, r3, #2
 800bd2e:	431a      	orrs	r2, r3
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	695b      	ldr	r3, [r3, #20]
 800bd34:	f003 0301 	and.w	r3, r3, #1
 800bd38:	431a      	orrs	r2, r3
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	699b      	ldr	r3, [r3, #24]
 800bd3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd42:	431a      	orrs	r2, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	69db      	ldr	r3, [r3, #28]
 800bd48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd4c:	431a      	orrs	r2, r3
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6a1b      	ldr	r3, [r3, #32]
 800bd52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd56:	ea42 0103 	orr.w	r1, r2, r3
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd5e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	430a      	orrs	r2, r1
 800bd68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	699b      	ldr	r3, [r3, #24]
 800bd6e:	0c1b      	lsrs	r3, r3, #16
 800bd70:	f003 0204 	and.w	r2, r3, #4
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd78:	f003 0310 	and.w	r3, r3, #16
 800bd7c:	431a      	orrs	r2, r3
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd82:	f003 0308 	and.w	r3, r3, #8
 800bd86:	431a      	orrs	r2, r3
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800bd90:	ea42 0103 	orr.w	r1, r2, r3
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	430a      	orrs	r2, r1
 800bda0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2200      	movs	r2, #0
 800bda6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2201      	movs	r2, #1
 800bdac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bdb0:	2300      	movs	r3, #0
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3710      	adds	r7, #16
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b088      	sub	sp, #32
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	60f8      	str	r0, [r7, #12]
 800bdc2:	60b9      	str	r1, [r7, #8]
 800bdc4:	603b      	str	r3, [r7, #0]
 800bdc6:	4613      	mov	r3, r2
 800bdc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	d101      	bne.n	800bddc <HAL_SPI_Transmit+0x22>
 800bdd8:	2302      	movs	r3, #2
 800bdda:	e158      	b.n	800c08e <HAL_SPI_Transmit+0x2d4>
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2201      	movs	r2, #1
 800bde0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bde4:	f7fb fe22 	bl	8007a2c <HAL_GetTick>
 800bde8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bdea:	88fb      	ldrh	r3, [r7, #6]
 800bdec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d002      	beq.n	800be00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bdfa:	2302      	movs	r3, #2
 800bdfc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bdfe:	e13d      	b.n	800c07c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d002      	beq.n	800be0c <HAL_SPI_Transmit+0x52>
 800be06:	88fb      	ldrh	r3, [r7, #6]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d102      	bne.n	800be12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800be0c:	2301      	movs	r3, #1
 800be0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800be10:	e134      	b.n	800c07c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2203      	movs	r2, #3
 800be16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2200      	movs	r2, #0
 800be1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	68ba      	ldr	r2, [r7, #8]
 800be24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	88fa      	ldrh	r2, [r7, #6]
 800be2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	88fa      	ldrh	r2, [r7, #6]
 800be30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2200      	movs	r2, #0
 800be36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2200      	movs	r2, #0
 800be3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2200      	movs	r2, #0
 800be44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2200      	movs	r2, #0
 800be4c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2200      	movs	r2, #0
 800be52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be5c:	d10f      	bne.n	800be7e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	681a      	ldr	r2, [r3, #0]
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800be7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be88:	2b40      	cmp	r3, #64	; 0x40
 800be8a:	d007      	beq.n	800be9c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	681a      	ldr	r2, [r3, #0]
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bea4:	d94b      	bls.n	800bf3e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d002      	beq.n	800beb4 <HAL_SPI_Transmit+0xfa>
 800beae:	8afb      	ldrh	r3, [r7, #22]
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d13e      	bne.n	800bf32 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beb8:	881a      	ldrh	r2, [r3, #0]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bec4:	1c9a      	adds	r2, r3, #2
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bece:	b29b      	uxth	r3, r3
 800bed0:	3b01      	subs	r3, #1
 800bed2:	b29a      	uxth	r2, r3
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bed8:	e02b      	b.n	800bf32 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	f003 0302 	and.w	r3, r3, #2
 800bee4:	2b02      	cmp	r3, #2
 800bee6:	d112      	bne.n	800bf0e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beec:	881a      	ldrh	r2, [r3, #0]
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef8:	1c9a      	adds	r2, r3, #2
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	3b01      	subs	r3, #1
 800bf06:	b29a      	uxth	r2, r3
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bf0c:	e011      	b.n	800bf32 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf0e:	f7fb fd8d 	bl	8007a2c <HAL_GetTick>
 800bf12:	4602      	mov	r2, r0
 800bf14:	69bb      	ldr	r3, [r7, #24]
 800bf16:	1ad3      	subs	r3, r2, r3
 800bf18:	683a      	ldr	r2, [r7, #0]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d803      	bhi.n	800bf26 <HAL_SPI_Transmit+0x16c>
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf24:	d102      	bne.n	800bf2c <HAL_SPI_Transmit+0x172>
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d102      	bne.n	800bf32 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800bf2c:	2303      	movs	r3, #3
 800bf2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bf30:	e0a4      	b.n	800c07c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d1ce      	bne.n	800beda <HAL_SPI_Transmit+0x120>
 800bf3c:	e07c      	b.n	800c038 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d002      	beq.n	800bf4c <HAL_SPI_Transmit+0x192>
 800bf46:	8afb      	ldrh	r3, [r7, #22]
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d170      	bne.n	800c02e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d912      	bls.n	800bf7c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf5a:	881a      	ldrh	r2, [r3, #0]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf66:	1c9a      	adds	r2, r3, #2
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	3b02      	subs	r3, #2
 800bf74:	b29a      	uxth	r2, r3
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bf7a:	e058      	b.n	800c02e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	330c      	adds	r3, #12
 800bf86:	7812      	ldrb	r2, [r2, #0]
 800bf88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf8e:	1c5a      	adds	r2, r3, #1
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	b29a      	uxth	r2, r3
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800bfa2:	e044      	b.n	800c02e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	f003 0302 	and.w	r3, r3, #2
 800bfae:	2b02      	cmp	r3, #2
 800bfb0:	d12b      	bne.n	800c00a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d912      	bls.n	800bfe2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfc0:	881a      	ldrh	r2, [r3, #0]
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfcc:	1c9a      	adds	r2, r3, #2
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	3b02      	subs	r3, #2
 800bfda:	b29a      	uxth	r2, r3
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bfe0:	e025      	b.n	800c02e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	330c      	adds	r3, #12
 800bfec:	7812      	ldrb	r2, [r2, #0]
 800bfee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bff4:	1c5a      	adds	r2, r3, #1
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bffe:	b29b      	uxth	r3, r3
 800c000:	3b01      	subs	r3, #1
 800c002:	b29a      	uxth	r2, r3
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c008:	e011      	b.n	800c02e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c00a:	f7fb fd0f 	bl	8007a2c <HAL_GetTick>
 800c00e:	4602      	mov	r2, r0
 800c010:	69bb      	ldr	r3, [r7, #24]
 800c012:	1ad3      	subs	r3, r2, r3
 800c014:	683a      	ldr	r2, [r7, #0]
 800c016:	429a      	cmp	r2, r3
 800c018:	d803      	bhi.n	800c022 <HAL_SPI_Transmit+0x268>
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c020:	d102      	bne.n	800c028 <HAL_SPI_Transmit+0x26e>
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d102      	bne.n	800c02e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800c028:	2303      	movs	r3, #3
 800c02a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c02c:	e026      	b.n	800c07c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c032:	b29b      	uxth	r3, r3
 800c034:	2b00      	cmp	r3, #0
 800c036:	d1b5      	bne.n	800bfa4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c038:	69ba      	ldr	r2, [r7, #24]
 800c03a:	6839      	ldr	r1, [r7, #0]
 800c03c:	68f8      	ldr	r0, [r7, #12]
 800c03e:	f001 f9dd 	bl	800d3fc <SPI_EndRxTxTransaction>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d002      	beq.n	800c04e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2220      	movs	r2, #32
 800c04c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d10a      	bne.n	800c06c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c056:	2300      	movs	r3, #0
 800c058:	613b      	str	r3, [r7, #16]
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	68db      	ldr	r3, [r3, #12]
 800c060:	613b      	str	r3, [r7, #16]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	689b      	ldr	r3, [r3, #8]
 800c068:	613b      	str	r3, [r7, #16]
 800c06a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c070:	2b00      	cmp	r3, #0
 800c072:	d002      	beq.n	800c07a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800c074:	2301      	movs	r3, #1
 800c076:	77fb      	strb	r3, [r7, #31]
 800c078:	e000      	b.n	800c07c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800c07a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2201      	movs	r2, #1
 800c080:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2200      	movs	r2, #0
 800c088:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c08c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3720      	adds	r7, #32
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}

0800c096 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c096:	b580      	push	{r7, lr}
 800c098:	b088      	sub	sp, #32
 800c09a:	af02      	add	r7, sp, #8
 800c09c:	60f8      	str	r0, [r7, #12]
 800c09e:	60b9      	str	r1, [r7, #8]
 800c0a0:	603b      	str	r3, [r7, #0]
 800c0a2:	4613      	mov	r3, r2
 800c0a4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c0b2:	d112      	bne.n	800c0da <HAL_SPI_Receive+0x44>
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	689b      	ldr	r3, [r3, #8]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d10e      	bne.n	800c0da <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2204      	movs	r2, #4
 800c0c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c0c4:	88fa      	ldrh	r2, [r7, #6]
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	9300      	str	r3, [sp, #0]
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	68ba      	ldr	r2, [r7, #8]
 800c0ce:	68b9      	ldr	r1, [r7, #8]
 800c0d0:	68f8      	ldr	r0, [r7, #12]
 800c0d2:	f000 f910 	bl	800c2f6 <HAL_SPI_TransmitReceive>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	e109      	b.n	800c2ee <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d101      	bne.n	800c0e8 <HAL_SPI_Receive+0x52>
 800c0e4:	2302      	movs	r3, #2
 800c0e6:	e102      	b.n	800c2ee <HAL_SPI_Receive+0x258>
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c0f0:	f7fb fc9c 	bl	8007a2c <HAL_GetTick>
 800c0f4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c0fc:	b2db      	uxtb	r3, r3
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d002      	beq.n	800c108 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800c102:	2302      	movs	r3, #2
 800c104:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c106:	e0e9      	b.n	800c2dc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d002      	beq.n	800c114 <HAL_SPI_Receive+0x7e>
 800c10e:	88fb      	ldrh	r3, [r7, #6]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d102      	bne.n	800c11a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c114:	2301      	movs	r3, #1
 800c116:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c118:	e0e0      	b.n	800c2dc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2204      	movs	r2, #4
 800c11e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2200      	movs	r2, #0
 800c126:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	68ba      	ldr	r2, [r7, #8]
 800c12c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	88fa      	ldrh	r2, [r7, #6]
 800c132:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	88fa      	ldrh	r2, [r7, #6]
 800c13a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2200      	movs	r2, #0
 800c142:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2200      	movs	r2, #0
 800c148:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2200      	movs	r2, #0
 800c14e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2200      	movs	r2, #0
 800c154:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2200      	movs	r2, #0
 800c15a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c164:	d908      	bls.n	800c178 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	685a      	ldr	r2, [r3, #4]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c174:	605a      	str	r2, [r3, #4]
 800c176:	e007      	b.n	800c188 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	685a      	ldr	r2, [r3, #4]
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c186:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	689b      	ldr	r3, [r3, #8]
 800c18c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c190:	d10f      	bne.n	800c1b2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	681a      	ldr	r2, [r3, #0]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c1b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1bc:	2b40      	cmp	r3, #64	; 0x40
 800c1be:	d007      	beq.n	800c1d0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c1ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	68db      	ldr	r3, [r3, #12]
 800c1d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c1d8:	d867      	bhi.n	800c2aa <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c1da:	e030      	b.n	800c23e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	689b      	ldr	r3, [r3, #8]
 800c1e2:	f003 0301 	and.w	r3, r3, #1
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	d117      	bne.n	800c21a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f103 020c 	add.w	r2, r3, #12
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1f6:	7812      	ldrb	r2, [r2, #0]
 800c1f8:	b2d2      	uxtb	r2, r2
 800c1fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c200:	1c5a      	adds	r2, r3, #1
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c20c:	b29b      	uxth	r3, r3
 800c20e:	3b01      	subs	r3, #1
 800c210:	b29a      	uxth	r2, r3
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c218:	e011      	b.n	800c23e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c21a:	f7fb fc07 	bl	8007a2c <HAL_GetTick>
 800c21e:	4602      	mov	r2, r0
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	1ad3      	subs	r3, r2, r3
 800c224:	683a      	ldr	r2, [r7, #0]
 800c226:	429a      	cmp	r2, r3
 800c228:	d803      	bhi.n	800c232 <HAL_SPI_Receive+0x19c>
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c230:	d102      	bne.n	800c238 <HAL_SPI_Receive+0x1a2>
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d102      	bne.n	800c23e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800c238:	2303      	movs	r3, #3
 800c23a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c23c:	e04e      	b.n	800c2dc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c244:	b29b      	uxth	r3, r3
 800c246:	2b00      	cmp	r3, #0
 800c248:	d1c8      	bne.n	800c1dc <HAL_SPI_Receive+0x146>
 800c24a:	e034      	b.n	800c2b6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	f003 0301 	and.w	r3, r3, #1
 800c256:	2b01      	cmp	r3, #1
 800c258:	d115      	bne.n	800c286 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	68da      	ldr	r2, [r3, #12]
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c264:	b292      	uxth	r2, r2
 800c266:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c26c:	1c9a      	adds	r2, r3, #2
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c278:	b29b      	uxth	r3, r3
 800c27a:	3b01      	subs	r3, #1
 800c27c:	b29a      	uxth	r2, r3
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c284:	e011      	b.n	800c2aa <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c286:	f7fb fbd1 	bl	8007a2c <HAL_GetTick>
 800c28a:	4602      	mov	r2, r0
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	1ad3      	subs	r3, r2, r3
 800c290:	683a      	ldr	r2, [r7, #0]
 800c292:	429a      	cmp	r2, r3
 800c294:	d803      	bhi.n	800c29e <HAL_SPI_Receive+0x208>
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c29c:	d102      	bne.n	800c2a4 <HAL_SPI_Receive+0x20e>
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d102      	bne.n	800c2aa <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800c2a4:	2303      	movs	r3, #3
 800c2a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c2a8:	e018      	b.n	800c2dc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d1ca      	bne.n	800c24c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c2b6:	693a      	ldr	r2, [r7, #16]
 800c2b8:	6839      	ldr	r1, [r7, #0]
 800c2ba:	68f8      	ldr	r0, [r7, #12]
 800c2bc:	f001 f846 	bl	800d34c <SPI_EndRxTransaction>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d002      	beq.n	800c2cc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2220      	movs	r2, #32
 800c2ca:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d002      	beq.n	800c2da <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	75fb      	strb	r3, [r7, #23]
 800c2d8:	e000      	b.n	800c2dc <HAL_SPI_Receive+0x246>
  }

error :
 800c2da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2201      	movs	r2, #1
 800c2e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c2ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3718      	adds	r7, #24
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c2f6:	b580      	push	{r7, lr}
 800c2f8:	b08a      	sub	sp, #40	; 0x28
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	60f8      	str	r0, [r7, #12]
 800c2fe:	60b9      	str	r1, [r7, #8]
 800c300:	607a      	str	r2, [r7, #4]
 800c302:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c304:	2301      	movs	r3, #1
 800c306:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c308:	2300      	movs	r3, #0
 800c30a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c314:	2b01      	cmp	r3, #1
 800c316:	d101      	bne.n	800c31c <HAL_SPI_TransmitReceive+0x26>
 800c318:	2302      	movs	r3, #2
 800c31a:	e1fb      	b.n	800c714 <HAL_SPI_TransmitReceive+0x41e>
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2201      	movs	r2, #1
 800c320:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c324:	f7fb fb82 	bl	8007a2c <HAL_GetTick>
 800c328:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c330:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800c338:	887b      	ldrh	r3, [r7, #2]
 800c33a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800c33c:	887b      	ldrh	r3, [r7, #2]
 800c33e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c340:	7efb      	ldrb	r3, [r7, #27]
 800c342:	2b01      	cmp	r3, #1
 800c344:	d00e      	beq.n	800c364 <HAL_SPI_TransmitReceive+0x6e>
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c34c:	d106      	bne.n	800c35c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d102      	bne.n	800c35c <HAL_SPI_TransmitReceive+0x66>
 800c356:	7efb      	ldrb	r3, [r7, #27]
 800c358:	2b04      	cmp	r3, #4
 800c35a:	d003      	beq.n	800c364 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800c35c:	2302      	movs	r3, #2
 800c35e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800c362:	e1cd      	b.n	800c700 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d005      	beq.n	800c376 <HAL_SPI_TransmitReceive+0x80>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d002      	beq.n	800c376 <HAL_SPI_TransmitReceive+0x80>
 800c370:	887b      	ldrh	r3, [r7, #2]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d103      	bne.n	800c37e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800c376:	2301      	movs	r3, #1
 800c378:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800c37c:	e1c0      	b.n	800c700 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c384:	b2db      	uxtb	r3, r3
 800c386:	2b04      	cmp	r3, #4
 800c388:	d003      	beq.n	800c392 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2205      	movs	r2, #5
 800c38e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2200      	movs	r2, #0
 800c396:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	887a      	ldrh	r2, [r7, #2]
 800c3a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	887a      	ldrh	r2, [r7, #2]
 800c3aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	68ba      	ldr	r2, [r7, #8]
 800c3b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	887a      	ldrh	r2, [r7, #2]
 800c3b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	887a      	ldrh	r2, [r7, #2]
 800c3be:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c3d4:	d802      	bhi.n	800c3dc <HAL_SPI_TransmitReceive+0xe6>
 800c3d6:	8a3b      	ldrh	r3, [r7, #16]
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d908      	bls.n	800c3ee <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	685a      	ldr	r2, [r3, #4]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c3ea:	605a      	str	r2, [r3, #4]
 800c3ec:	e007      	b.n	800c3fe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	685a      	ldr	r2, [r3, #4]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c3fc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c408:	2b40      	cmp	r3, #64	; 0x40
 800c40a:	d007      	beq.n	800c41c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c41a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c424:	d97c      	bls.n	800c520 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d002      	beq.n	800c434 <HAL_SPI_TransmitReceive+0x13e>
 800c42e:	8a7b      	ldrh	r3, [r7, #18]
 800c430:	2b01      	cmp	r3, #1
 800c432:	d169      	bne.n	800c508 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c438:	881a      	ldrh	r2, [r3, #0]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c444:	1c9a      	adds	r2, r3, #2
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c44e:	b29b      	uxth	r3, r3
 800c450:	3b01      	subs	r3, #1
 800c452:	b29a      	uxth	r2, r3
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c458:	e056      	b.n	800c508 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	689b      	ldr	r3, [r3, #8]
 800c460:	f003 0302 	and.w	r3, r3, #2
 800c464:	2b02      	cmp	r3, #2
 800c466:	d11b      	bne.n	800c4a0 <HAL_SPI_TransmitReceive+0x1aa>
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c46c:	b29b      	uxth	r3, r3
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d016      	beq.n	800c4a0 <HAL_SPI_TransmitReceive+0x1aa>
 800c472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c474:	2b01      	cmp	r3, #1
 800c476:	d113      	bne.n	800c4a0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c47c:	881a      	ldrh	r2, [r3, #0]
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c488:	1c9a      	adds	r2, r3, #2
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c492:	b29b      	uxth	r3, r3
 800c494:	3b01      	subs	r3, #1
 800c496:	b29a      	uxth	r2, r3
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c49c:	2300      	movs	r3, #0
 800c49e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	f003 0301 	and.w	r3, r3, #1
 800c4aa:	2b01      	cmp	r3, #1
 800c4ac:	d11c      	bne.n	800c4e8 <HAL_SPI_TransmitReceive+0x1f2>
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c4b4:	b29b      	uxth	r3, r3
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d016      	beq.n	800c4e8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	68da      	ldr	r2, [r3, #12]
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4c4:	b292      	uxth	r2, r2
 800c4c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4cc:	1c9a      	adds	r2, r3, #2
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	b29a      	uxth	r2, r3
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c4e8:	f7fb faa0 	bl	8007a2c <HAL_GetTick>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	1ad3      	subs	r3, r2, r3
 800c4f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d807      	bhi.n	800c508 <HAL_SPI_TransmitReceive+0x212>
 800c4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4fe:	d003      	beq.n	800c508 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800c500:	2303      	movs	r3, #3
 800c502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c506:	e0fb      	b.n	800c700 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d1a3      	bne.n	800c45a <HAL_SPI_TransmitReceive+0x164>
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c518:	b29b      	uxth	r3, r3
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d19d      	bne.n	800c45a <HAL_SPI_TransmitReceive+0x164>
 800c51e:	e0df      	b.n	800c6e0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d003      	beq.n	800c530 <HAL_SPI_TransmitReceive+0x23a>
 800c528:	8a7b      	ldrh	r3, [r7, #18]
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	f040 80cb 	bne.w	800c6c6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c534:	b29b      	uxth	r3, r3
 800c536:	2b01      	cmp	r3, #1
 800c538:	d912      	bls.n	800c560 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c53e:	881a      	ldrh	r2, [r3, #0]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c54a:	1c9a      	adds	r2, r3, #2
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c554:	b29b      	uxth	r3, r3
 800c556:	3b02      	subs	r3, #2
 800c558:	b29a      	uxth	r2, r3
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c55e:	e0b2      	b.n	800c6c6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	330c      	adds	r3, #12
 800c56a:	7812      	ldrb	r2, [r2, #0]
 800c56c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c572:	1c5a      	adds	r2, r3, #1
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	3b01      	subs	r3, #1
 800c580:	b29a      	uxth	r2, r3
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c586:	e09e      	b.n	800c6c6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	f003 0302 	and.w	r3, r3, #2
 800c592:	2b02      	cmp	r3, #2
 800c594:	d134      	bne.n	800c600 <HAL_SPI_TransmitReceive+0x30a>
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d02f      	beq.n	800c600 <HAL_SPI_TransmitReceive+0x30a>
 800c5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d12c      	bne.n	800c600 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	2b01      	cmp	r3, #1
 800c5ae:	d912      	bls.n	800c5d6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5b4:	881a      	ldrh	r2, [r3, #0]
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5c0:	1c9a      	adds	r2, r3, #2
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5ca:	b29b      	uxth	r3, r3
 800c5cc:	3b02      	subs	r3, #2
 800c5ce:	b29a      	uxth	r2, r3
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c5d4:	e012      	b.n	800c5fc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	330c      	adds	r3, #12
 800c5e0:	7812      	ldrb	r2, [r2, #0]
 800c5e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5e8:	1c5a      	adds	r2, r3, #1
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	3b01      	subs	r3, #1
 800c5f6:	b29a      	uxth	r2, r3
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	689b      	ldr	r3, [r3, #8]
 800c606:	f003 0301 	and.w	r3, r3, #1
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d148      	bne.n	800c6a0 <HAL_SPI_TransmitReceive+0x3aa>
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c614:	b29b      	uxth	r3, r3
 800c616:	2b00      	cmp	r3, #0
 800c618:	d042      	beq.n	800c6a0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c620:	b29b      	uxth	r3, r3
 800c622:	2b01      	cmp	r3, #1
 800c624:	d923      	bls.n	800c66e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	68da      	ldr	r2, [r3, #12]
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c630:	b292      	uxth	r2, r2
 800c632:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c638:	1c9a      	adds	r2, r3, #2
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c644:	b29b      	uxth	r3, r3
 800c646:	3b02      	subs	r3, #2
 800c648:	b29a      	uxth	r2, r3
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c656:	b29b      	uxth	r3, r3
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d81f      	bhi.n	800c69c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	685a      	ldr	r2, [r3, #4]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c66a:	605a      	str	r2, [r3, #4]
 800c66c:	e016      	b.n	800c69c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f103 020c 	add.w	r2, r3, #12
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c67a:	7812      	ldrb	r2, [r2, #0]
 800c67c:	b2d2      	uxtb	r2, r2
 800c67e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c684:	1c5a      	adds	r2, r3, #1
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c690:	b29b      	uxth	r3, r3
 800c692:	3b01      	subs	r3, #1
 800c694:	b29a      	uxth	r2, r3
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c69c:	2301      	movs	r3, #1
 800c69e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c6a0:	f7fb f9c4 	bl	8007a2c <HAL_GetTick>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	69fb      	ldr	r3, [r7, #28]
 800c6a8:	1ad3      	subs	r3, r2, r3
 800c6aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d803      	bhi.n	800c6b8 <HAL_SPI_TransmitReceive+0x3c2>
 800c6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6b6:	d102      	bne.n	800c6be <HAL_SPI_TransmitReceive+0x3c8>
 800c6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d103      	bne.n	800c6c6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800c6be:	2303      	movs	r3, #3
 800c6c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c6c4:	e01c      	b.n	800c700 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6ca:	b29b      	uxth	r3, r3
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f47f af5b 	bne.w	800c588 <HAL_SPI_TransmitReceive+0x292>
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	f47f af54 	bne.w	800c588 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c6e0:	69fa      	ldr	r2, [r7, #28]
 800c6e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c6e4:	68f8      	ldr	r0, [r7, #12]
 800c6e6:	f000 fe89 	bl	800d3fc <SPI_EndRxTxTransaction>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d006      	beq.n	800c6fe <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2220      	movs	r2, #32
 800c6fa:	661a      	str	r2, [r3, #96]	; 0x60
 800c6fc:	e000      	b.n	800c700 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800c6fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2201      	movs	r2, #1
 800c704:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2200      	movs	r2, #0
 800c70c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800c714:	4618      	mov	r0, r3
 800c716:	3728      	adds	r7, #40	; 0x28
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b086      	sub	sp, #24
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	4613      	mov	r3, r2
 800c728:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c72a:	2300      	movs	r3, #0
 800c72c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c734:	2b01      	cmp	r3, #1
 800c736:	d101      	bne.n	800c73c <HAL_SPI_Transmit_DMA+0x20>
 800c738:	2302      	movs	r3, #2
 800c73a:	e0d8      	b.n	800c8ee <HAL_SPI_Transmit_DMA+0x1d2>
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	2201      	movs	r2, #1
 800c740:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c74a:	b2db      	uxtb	r3, r3
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d002      	beq.n	800c756 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800c750:	2302      	movs	r3, #2
 800c752:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c754:	e0c6      	b.n	800c8e4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d002      	beq.n	800c762 <HAL_SPI_Transmit_DMA+0x46>
 800c75c:	88fb      	ldrh	r3, [r7, #6]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d102      	bne.n	800c768 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800c762:	2301      	movs	r3, #1
 800c764:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c766:	e0bd      	b.n	800c8e4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2203      	movs	r2, #3
 800c76c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	2200      	movs	r2, #0
 800c774:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	68ba      	ldr	r2, [r7, #8]
 800c77a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	88fa      	ldrh	r2, [r7, #6]
 800c780:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	88fa      	ldrh	r2, [r7, #6]
 800c786:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	2200      	movs	r2, #0
 800c78c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2200      	movs	r2, #0
 800c792:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2200      	movs	r2, #0
 800c798:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2200      	movs	r2, #0
 800c79e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	689b      	ldr	r3, [r3, #8]
 800c7ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7b2:	d10f      	bne.n	800c7d4 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	681a      	ldr	r2, [r3, #0]
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	681a      	ldr	r2, [r3, #0]
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c7d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7d8:	4a47      	ldr	r2, [pc, #284]	; (800c8f8 <HAL_SPI_Transmit_DMA+0x1dc>)
 800c7da:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7e0:	4a46      	ldr	r2, [pc, #280]	; (800c8fc <HAL_SPI_Transmit_DMA+0x1e0>)
 800c7e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7e8:	4a45      	ldr	r2, [pc, #276]	; (800c900 <HAL_SPI_Transmit_DMA+0x1e4>)
 800c7ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	685a      	ldr	r2, [r3, #4]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c802:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c80c:	d82d      	bhi.n	800c86a <HAL_SPI_Transmit_DMA+0x14e>
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c812:	699b      	ldr	r3, [r3, #24]
 800c814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c818:	d127      	bne.n	800c86a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c81e:	b29b      	uxth	r3, r3
 800c820:	f003 0301 	and.w	r3, r3, #1
 800c824:	2b00      	cmp	r3, #0
 800c826:	d10f      	bne.n	800c848 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	685a      	ldr	r2, [r3, #4]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c836:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	085b      	lsrs	r3, r3, #1
 800c840:	b29a      	uxth	r2, r3
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c846:	e010      	b.n	800c86a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	685a      	ldr	r2, [r3, #4]
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c856:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	085b      	lsrs	r3, r3, #1
 800c860:	b29b      	uxth	r3, r3
 800c862:	3301      	adds	r3, #1
 800c864:	b29a      	uxth	r2, r3
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c872:	4619      	mov	r1, r3
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	330c      	adds	r3, #12
 800c87a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c880:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c882:	f7fb fa9d 	bl	8007dc0 <HAL_DMA_Start_IT>
 800c886:	4603      	mov	r3, r0
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d00c      	beq.n	800c8a6 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c890:	f043 0210 	orr.w	r2, r3, #16
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c898:	2301      	movs	r3, #1
 800c89a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800c8a4:	e01e      	b.n	800c8e4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8b0:	2b40      	cmp	r3, #64	; 0x40
 800c8b2:	d007      	beq.n	800c8c4 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c8c2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	685a      	ldr	r2, [r3, #4]
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f042 0220 	orr.w	r2, r2, #32
 800c8d2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	685a      	ldr	r2, [r3, #4]
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f042 0202 	orr.w	r2, r2, #2
 800c8e2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c8ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3718      	adds	r7, #24
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	0800d053 	.word	0x0800d053
 800c8fc:	0800ce75 	.word	0x0800ce75
 800c900:	0800d0a7 	.word	0x0800d0a7

0800c904 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b086      	sub	sp, #24
 800c908:	af00      	add	r7, sp, #0
 800c90a:	60f8      	str	r0, [r7, #12]
 800c90c:	60b9      	str	r1, [r7, #8]
 800c90e:	607a      	str	r2, [r7, #4]
 800c910:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c912:	2300      	movs	r3, #0
 800c914:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d101      	bne.n	800c924 <HAL_SPI_TransmitReceive_DMA+0x20>
 800c920:	2302      	movs	r3, #2
 800c922:	e16c      	b.n	800cbfe <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2201      	movs	r2, #1
 800c928:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c932:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800c93a:	7dbb      	ldrb	r3, [r7, #22]
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d00d      	beq.n	800c95c <HAL_SPI_TransmitReceive_DMA+0x58>
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c946:	d106      	bne.n	800c956 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	689b      	ldr	r3, [r3, #8]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d102      	bne.n	800c956 <HAL_SPI_TransmitReceive_DMA+0x52>
 800c950:	7dbb      	ldrb	r3, [r7, #22]
 800c952:	2b04      	cmp	r3, #4
 800c954:	d002      	beq.n	800c95c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800c956:	2302      	movs	r3, #2
 800c958:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c95a:	e14b      	b.n	800cbf4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d005      	beq.n	800c96e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d002      	beq.n	800c96e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c968:	887b      	ldrh	r3, [r7, #2]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d102      	bne.n	800c974 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800c96e:	2301      	movs	r3, #1
 800c970:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c972:	e13f      	b.n	800cbf4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	2b04      	cmp	r3, #4
 800c97e:	d003      	beq.n	800c988 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2205      	movs	r2, #5
 800c984:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2200      	movs	r2, #0
 800c98c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	68ba      	ldr	r2, [r7, #8]
 800c992:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	887a      	ldrh	r2, [r7, #2]
 800c998:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	887a      	ldrh	r2, [r7, #2]
 800c99e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	687a      	ldr	r2, [r7, #4]
 800c9a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	887a      	ldrh	r2, [r7, #2]
 800c9aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	887a      	ldrh	r2, [r7, #2]
 800c9b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	685a      	ldr	r2, [r3, #4]
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800c9d0:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	68db      	ldr	r3, [r3, #12]
 800c9d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c9da:	d908      	bls.n	800c9ee <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	685a      	ldr	r2, [r3, #4]
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c9ea:	605a      	str	r2, [r3, #4]
 800c9ec:	e06f      	b.n	800cace <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	685a      	ldr	r2, [r3, #4]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c9fc:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca02:	699b      	ldr	r3, [r3, #24]
 800ca04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca08:	d126      	bne.n	800ca58 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ca0e:	f003 0301 	and.w	r3, r3, #1
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d10f      	bne.n	800ca36 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	685a      	ldr	r2, [r3, #4]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ca24:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca2a:	b29b      	uxth	r3, r3
 800ca2c:	085b      	lsrs	r3, r3, #1
 800ca2e:	b29a      	uxth	r2, r3
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ca34:	e010      	b.n	800ca58 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	685a      	ldr	r2, [r3, #4]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ca44:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca4a:	b29b      	uxth	r3, r3
 800ca4c:	085b      	lsrs	r3, r3, #1
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	3301      	adds	r3, #1
 800ca52:	b29a      	uxth	r2, r3
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca5c:	699b      	ldr	r3, [r3, #24]
 800ca5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca62:	d134      	bne.n	800cace <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	685a      	ldr	r2, [r3, #4]
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ca72:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	f003 0301 	and.w	r3, r3, #1
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d111      	bne.n	800caa8 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	685a      	ldr	r2, [r3, #4]
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ca92:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ca9a:	b29b      	uxth	r3, r3
 800ca9c:	085b      	lsrs	r3, r3, #1
 800ca9e:	b29a      	uxth	r2, r3
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800caa6:	e012      	b.n	800cace <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	685a      	ldr	r2, [r3, #4]
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cab6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	085b      	lsrs	r3, r3, #1
 800cac2:	b29b      	uxth	r3, r3
 800cac4:	3301      	adds	r3, #1
 800cac6:	b29a      	uxth	r2, r3
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	2b04      	cmp	r3, #4
 800cad8:	d108      	bne.n	800caec <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cade:	4a4a      	ldr	r2, [pc, #296]	; (800cc08 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800cae0:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cae6:	4a49      	ldr	r2, [pc, #292]	; (800cc0c <HAL_SPI_TransmitReceive_DMA+0x308>)
 800cae8:	62da      	str	r2, [r3, #44]	; 0x2c
 800caea:	e007      	b.n	800cafc <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caf0:	4a47      	ldr	r2, [pc, #284]	; (800cc10 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800caf2:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caf8:	4a46      	ldr	r2, [pc, #280]	; (800cc14 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800cafa:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb00:	4a45      	ldr	r2, [pc, #276]	; (800cc18 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800cb02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb08:	2200      	movs	r2, #0
 800cb0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	330c      	adds	r3, #12
 800cb16:	4619      	mov	r1, r3
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb1c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cb24:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800cb26:	f7fb f94b 	bl	8007dc0 <HAL_DMA_Start_IT>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d00c      	beq.n	800cb4a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb34:	f043 0210 	orr.w	r2, r3, #16
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	2201      	movs	r2, #1
 800cb44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800cb48:	e054      	b.n	800cbf4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	685a      	ldr	r2, [r3, #4]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f042 0201 	orr.w	r2, r2, #1
 800cb58:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb5e:	2200      	movs	r2, #0
 800cb60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb66:	2200      	movs	r2, #0
 800cb68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb6e:	2200      	movs	r2, #0
 800cb70:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb76:	2200      	movs	r2, #0
 800cb78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb82:	4619      	mov	r1, r3
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	330c      	adds	r3, #12
 800cb8a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb90:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cb92:	f7fb f915 	bl	8007dc0 <HAL_DMA_Start_IT>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d00c      	beq.n	800cbb6 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cba0:	f043 0210 	orr.w	r2, r3, #16
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cba8:	2301      	movs	r3, #1
 800cbaa:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2201      	movs	r2, #1
 800cbb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800cbb4:	e01e      	b.n	800cbf4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbc0:	2b40      	cmp	r3, #64	; 0x40
 800cbc2:	d007      	beq.n	800cbd4 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cbd2:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	685a      	ldr	r2, [r3, #4]
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f042 0220 	orr.w	r2, r2, #32
 800cbe2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	685a      	ldr	r2, [r3, #4]
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f042 0202 	orr.w	r2, r2, #2
 800cbf2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cbfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3718      	adds	r7, #24
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	0800d06f 	.word	0x0800d06f
 800cc0c:	0800cf1b 	.word	0x0800cf1b
 800cc10:	0800d08b 	.word	0x0800d08b
 800cc14:	0800cfc3 	.word	0x0800cfc3
 800cc18:	0800d0a7 	.word	0x0800d0a7

0800cc1c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b088      	sub	sp, #32
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	689b      	ldr	r3, [r3, #8]
 800cc32:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800cc34:	69bb      	ldr	r3, [r7, #24]
 800cc36:	099b      	lsrs	r3, r3, #6
 800cc38:	f003 0301 	and.w	r3, r3, #1
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d10f      	bne.n	800cc60 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800cc40:	69bb      	ldr	r3, [r7, #24]
 800cc42:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d00a      	beq.n	800cc60 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800cc4a:	69fb      	ldr	r3, [r7, #28]
 800cc4c:	099b      	lsrs	r3, r3, #6
 800cc4e:	f003 0301 	and.w	r3, r3, #1
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d004      	beq.n	800cc60 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	4798      	blx	r3
    return;
 800cc5e:	e0d7      	b.n	800ce10 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800cc60:	69bb      	ldr	r3, [r7, #24]
 800cc62:	085b      	lsrs	r3, r3, #1
 800cc64:	f003 0301 	and.w	r3, r3, #1
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d00a      	beq.n	800cc82 <HAL_SPI_IRQHandler+0x66>
 800cc6c:	69fb      	ldr	r3, [r7, #28]
 800cc6e:	09db      	lsrs	r3, r3, #7
 800cc70:	f003 0301 	and.w	r3, r3, #1
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d004      	beq.n	800cc82 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	4798      	blx	r3
    return;
 800cc80:	e0c6      	b.n	800ce10 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800cc82:	69bb      	ldr	r3, [r7, #24]
 800cc84:	095b      	lsrs	r3, r3, #5
 800cc86:	f003 0301 	and.w	r3, r3, #1
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d10c      	bne.n	800cca8 <HAL_SPI_IRQHandler+0x8c>
 800cc8e:	69bb      	ldr	r3, [r7, #24]
 800cc90:	099b      	lsrs	r3, r3, #6
 800cc92:	f003 0301 	and.w	r3, r3, #1
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d106      	bne.n	800cca8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800cc9a:	69bb      	ldr	r3, [r7, #24]
 800cc9c:	0a1b      	lsrs	r3, r3, #8
 800cc9e:	f003 0301 	and.w	r3, r3, #1
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	f000 80b4 	beq.w	800ce10 <HAL_SPI_IRQHandler+0x1f4>
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	095b      	lsrs	r3, r3, #5
 800ccac:	f003 0301 	and.w	r3, r3, #1
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	f000 80ad 	beq.w	800ce10 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	099b      	lsrs	r3, r3, #6
 800ccba:	f003 0301 	and.w	r3, r3, #1
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d023      	beq.n	800cd0a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	2b03      	cmp	r3, #3
 800cccc:	d011      	beq.n	800ccf2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccd2:	f043 0204 	orr.w	r2, r3, #4
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ccda:	2300      	movs	r3, #0
 800ccdc:	617b      	str	r3, [r7, #20]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	617b      	str	r3, [r7, #20]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	689b      	ldr	r3, [r3, #8]
 800ccec:	617b      	str	r3, [r7, #20]
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	e00b      	b.n	800cd0a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	613b      	str	r3, [r7, #16]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	68db      	ldr	r3, [r3, #12]
 800ccfc:	613b      	str	r3, [r7, #16]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	689b      	ldr	r3, [r3, #8]
 800cd04:	613b      	str	r3, [r7, #16]
 800cd06:	693b      	ldr	r3, [r7, #16]
        return;
 800cd08:	e082      	b.n	800ce10 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800cd0a:	69bb      	ldr	r3, [r7, #24]
 800cd0c:	095b      	lsrs	r3, r3, #5
 800cd0e:	f003 0301 	and.w	r3, r3, #1
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d014      	beq.n	800cd40 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd1a:	f043 0201 	orr.w	r2, r3, #1
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cd22:	2300      	movs	r3, #0
 800cd24:	60fb      	str	r3, [r7, #12]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	689b      	ldr	r3, [r3, #8]
 800cd2c:	60fb      	str	r3, [r7, #12]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd3c:	601a      	str	r2, [r3, #0]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800cd40:	69bb      	ldr	r3, [r7, #24]
 800cd42:	0a1b      	lsrs	r3, r3, #8
 800cd44:	f003 0301 	and.w	r3, r3, #1
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d00c      	beq.n	800cd66 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd50:	f043 0208 	orr.w	r2, r3, #8
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cd58:	2300      	movs	r3, #0
 800cd5a:	60bb      	str	r3, [r7, #8]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	689b      	ldr	r3, [r3, #8]
 800cd62:	60bb      	str	r3, [r7, #8]
 800cd64:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d04f      	beq.n	800ce0e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	685a      	ldr	r2, [r3, #4]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cd7c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2201      	movs	r2, #1
 800cd82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800cd86:	69fb      	ldr	r3, [r7, #28]
 800cd88:	f003 0302 	and.w	r3, r3, #2
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d104      	bne.n	800cd9a <HAL_SPI_IRQHandler+0x17e>
 800cd90:	69fb      	ldr	r3, [r7, #28]
 800cd92:	f003 0301 	and.w	r3, r3, #1
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d034      	beq.n	800ce04 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	685a      	ldr	r2, [r3, #4]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f022 0203 	bic.w	r2, r2, #3
 800cda8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d011      	beq.n	800cdd6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdb6:	4a18      	ldr	r2, [pc, #96]	; (800ce18 <HAL_SPI_IRQHandler+0x1fc>)
 800cdb8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7fb f89c 	bl	8007efc <HAL_DMA_Abort_IT>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d005      	beq.n	800cdd6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d016      	beq.n	800ce0c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cde2:	4a0d      	ldr	r2, [pc, #52]	; (800ce18 <HAL_SPI_IRQHandler+0x1fc>)
 800cde4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7fb f886 	bl	8007efc <HAL_DMA_Abort_IT>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d00a      	beq.n	800ce0c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800ce02:	e003      	b.n	800ce0c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f7f6 feab 	bl	8003b60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ce0a:	e000      	b.n	800ce0e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800ce0c:	bf00      	nop
    return;
 800ce0e:	bf00      	nop
  }
}
 800ce10:	3720      	adds	r7, #32
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	0800d0e7 	.word	0x0800d0e7

0800ce1c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800ce24:	bf00      	nop
 800ce26:	370c      	adds	r7, #12
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr

0800ce30 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ce30:	b480      	push	{r7}
 800ce32:	b083      	sub	sp, #12
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800ce38:	bf00      	nop
 800ce3a:	370c      	adds	r7, #12
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce42:	4770      	bx	lr

0800ce44 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b083      	sub	sp, #12
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800ce4c:	bf00      	nop
 800ce4e:	370c      	adds	r7, #12
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr

0800ce58 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ce66:	b2db      	uxtb	r3, r3
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	370c      	adds	r7, #12
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr

0800ce74 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b086      	sub	sp, #24
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce80:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ce82:	f7fa fdd3 	bl	8007a2c <HAL_GetTick>
 800ce86:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f003 0320 	and.w	r3, r3, #32
 800ce92:	2b20      	cmp	r3, #32
 800ce94:	d03b      	beq.n	800cf0e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	685a      	ldr	r2, [r3, #4]
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f022 0220 	bic.w	r2, r2, #32
 800cea4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	685a      	ldr	r2, [r3, #4]
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f022 0202 	bic.w	r2, r2, #2
 800ceb4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ceb6:	693a      	ldr	r2, [r7, #16]
 800ceb8:	2164      	movs	r1, #100	; 0x64
 800ceba:	6978      	ldr	r0, [r7, #20]
 800cebc:	f000 fa9e 	bl	800d3fc <SPI_EndRxTxTransaction>
 800cec0:	4603      	mov	r3, r0
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d005      	beq.n	800ced2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ceca:	f043 0220 	orr.w	r2, r3, #32
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	689b      	ldr	r3, [r3, #8]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d10a      	bne.n	800cef0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ceda:	2300      	movs	r3, #0
 800cedc:	60fb      	str	r3, [r7, #12]
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	68db      	ldr	r3, [r3, #12]
 800cee4:	60fb      	str	r3, [r7, #12]
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	689b      	ldr	r3, [r3, #8]
 800ceec:	60fb      	str	r3, [r7, #12]
 800ceee:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800cef0:	697b      	ldr	r3, [r7, #20]
 800cef2:	2200      	movs	r2, #0
 800cef4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	2201      	movs	r2, #1
 800cefa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d003      	beq.n	800cf0e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cf06:	6978      	ldr	r0, [r7, #20]
 800cf08:	f7f6 fe2a 	bl	8003b60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cf0c:	e002      	b.n	800cf14 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800cf0e:	6978      	ldr	r0, [r7, #20]
 800cf10:	f7f6 fe0f 	bl	8003b32 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cf14:	3718      	adds	r7, #24
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}

0800cf1a <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b084      	sub	sp, #16
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf26:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cf28:	f7fa fd80 	bl	8007a2c <HAL_GetTick>
 800cf2c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f003 0320 	and.w	r3, r3, #32
 800cf38:	2b20      	cmp	r3, #32
 800cf3a:	d03c      	beq.n	800cfb6 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	685a      	ldr	r2, [r3, #4]
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f022 0220 	bic.w	r2, r2, #32
 800cf4a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d10d      	bne.n	800cf70 <SPI_DMAReceiveCplt+0x56>
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	685b      	ldr	r3, [r3, #4]
 800cf58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cf5c:	d108      	bne.n	800cf70 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	685a      	ldr	r2, [r3, #4]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f022 0203 	bic.w	r2, r2, #3
 800cf6c:	605a      	str	r2, [r3, #4]
 800cf6e:	e007      	b.n	800cf80 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	685a      	ldr	r2, [r3, #4]
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f022 0201 	bic.w	r2, r2, #1
 800cf7e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cf80:	68ba      	ldr	r2, [r7, #8]
 800cf82:	2164      	movs	r1, #100	; 0x64
 800cf84:	68f8      	ldr	r0, [r7, #12]
 800cf86:	f000 f9e1 	bl	800d34c <SPI_EndRxTransaction>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d002      	beq.n	800cf96 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2220      	movs	r2, #32
 800cf94:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d003      	beq.n	800cfb6 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cfae:	68f8      	ldr	r0, [r7, #12]
 800cfb0:	f7f6 fdd6 	bl	8003b60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cfb4:	e002      	b.n	800cfbc <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800cfb6:	68f8      	ldr	r0, [r7, #12]
 800cfb8:	f7f6 fdb0 	bl	8003b1c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cfbc:	3710      	adds	r7, #16
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}

0800cfc2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cfc2:	b580      	push	{r7, lr}
 800cfc4:	b084      	sub	sp, #16
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfce:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cfd0:	f7fa fd2c 	bl	8007a2c <HAL_GetTick>
 800cfd4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f003 0320 	and.w	r3, r3, #32
 800cfe0:	2b20      	cmp	r3, #32
 800cfe2:	d030      	beq.n	800d046 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	685a      	ldr	r2, [r3, #4]
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f022 0220 	bic.w	r2, r2, #32
 800cff2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cff4:	68ba      	ldr	r2, [r7, #8]
 800cff6:	2164      	movs	r1, #100	; 0x64
 800cff8:	68f8      	ldr	r0, [r7, #12]
 800cffa:	f000 f9ff 	bl	800d3fc <SPI_EndRxTxTransaction>
 800cffe:	4603      	mov	r3, r0
 800d000:	2b00      	cmp	r3, #0
 800d002:	d005      	beq.n	800d010 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d008:	f043 0220 	orr.w	r2, r3, #32
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	685a      	ldr	r2, [r3, #4]
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f022 0203 	bic.w	r2, r2, #3
 800d01e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2200      	movs	r2, #0
 800d024:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	2200      	movs	r2, #0
 800d02a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	2201      	movs	r2, #1
 800d032:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d003      	beq.n	800d046 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d03e:	68f8      	ldr	r0, [r7, #12]
 800d040:	f7f6 fd8e 	bl	8003b60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d044:	e002      	b.n	800d04c <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800d046:	68f8      	ldr	r0, [r7, #12]
 800d048:	f7f6 fd7e 	bl	8003b48 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d04c:	3710      	adds	r7, #16
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}

0800d052 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d052:	b580      	push	{r7, lr}
 800d054:	b084      	sub	sp, #16
 800d056:	af00      	add	r7, sp, #0
 800d058:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d05e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800d060:	68f8      	ldr	r0, [r7, #12]
 800d062:	f7ff fedb 	bl	800ce1c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d066:	bf00      	nop
 800d068:	3710      	adds	r7, #16
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}

0800d06e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d06e:	b580      	push	{r7, lr}
 800d070:	b084      	sub	sp, #16
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d07a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800d07c:	68f8      	ldr	r0, [r7, #12]
 800d07e:	f7ff fed7 	bl	800ce30 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d082:	bf00      	nop
 800d084:	3710      	adds	r7, #16
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}

0800d08a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d08a:	b580      	push	{r7, lr}
 800d08c:	b084      	sub	sp, #16
 800d08e:	af00      	add	r7, sp, #0
 800d090:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d096:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800d098:	68f8      	ldr	r0, [r7, #12]
 800d09a:	f7ff fed3 	bl	800ce44 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d09e:	bf00      	nop
 800d0a0:	3710      	adds	r7, #16
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d0a6:	b580      	push	{r7, lr}
 800d0a8:	b084      	sub	sp, #16
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0b2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	685a      	ldr	r2, [r3, #4]
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	f022 0203 	bic.w	r2, r2, #3
 800d0c2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d0c8:	f043 0210 	orr.w	r2, r3, #16
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d0d8:	68f8      	ldr	r0, [r7, #12]
 800d0da:	f7f6 fd41 	bl	8003b60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d0de:	bf00      	nop
 800d0e0:	3710      	adds	r7, #16
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d0e6:	b580      	push	{r7, lr}
 800d0e8:	b084      	sub	sp, #16
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0f2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2200      	movs	r2, #0
 800d100:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d102:	68f8      	ldr	r0, [r7, #12]
 800d104:	f7f6 fd2c 	bl	8003b60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d108:	bf00      	nop
 800d10a:	3710      	adds	r7, #16
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b088      	sub	sp, #32
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	603b      	str	r3, [r7, #0]
 800d11c:	4613      	mov	r3, r2
 800d11e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d120:	f7fa fc84 	bl	8007a2c <HAL_GetTick>
 800d124:	4602      	mov	r2, r0
 800d126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d128:	1a9b      	subs	r3, r3, r2
 800d12a:	683a      	ldr	r2, [r7, #0]
 800d12c:	4413      	add	r3, r2
 800d12e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d130:	f7fa fc7c 	bl	8007a2c <HAL_GetTick>
 800d134:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d136:	4b39      	ldr	r3, [pc, #228]	; (800d21c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	015b      	lsls	r3, r3, #5
 800d13c:	0d1b      	lsrs	r3, r3, #20
 800d13e:	69fa      	ldr	r2, [r7, #28]
 800d140:	fb02 f303 	mul.w	r3, r2, r3
 800d144:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d146:	e054      	b.n	800d1f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d14e:	d050      	beq.n	800d1f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d150:	f7fa fc6c 	bl	8007a2c <HAL_GetTick>
 800d154:	4602      	mov	r2, r0
 800d156:	69bb      	ldr	r3, [r7, #24]
 800d158:	1ad3      	subs	r3, r2, r3
 800d15a:	69fa      	ldr	r2, [r7, #28]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d902      	bls.n	800d166 <SPI_WaitFlagStateUntilTimeout+0x56>
 800d160:	69fb      	ldr	r3, [r7, #28]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d13d      	bne.n	800d1e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	685a      	ldr	r2, [r3, #4]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d174:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d17e:	d111      	bne.n	800d1a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	689b      	ldr	r3, [r3, #8]
 800d184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d188:	d004      	beq.n	800d194 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d192:	d107      	bne.n	800d1a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d1a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d1ac:	d10f      	bne.n	800d1ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	681a      	ldr	r2, [r3, #0]
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d1bc:	601a      	str	r2, [r3, #0]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	681a      	ldr	r2, [r3, #0]
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d1cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2200      	movs	r2, #0
 800d1da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d1de:	2303      	movs	r3, #3
 800d1e0:	e017      	b.n	800d212 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d101      	bne.n	800d1ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	3b01      	subs	r3, #1
 800d1f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	689a      	ldr	r2, [r3, #8]
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	4013      	ands	r3, r2
 800d1fc:	68ba      	ldr	r2, [r7, #8]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	bf0c      	ite	eq
 800d202:	2301      	moveq	r3, #1
 800d204:	2300      	movne	r3, #0
 800d206:	b2db      	uxtb	r3, r3
 800d208:	461a      	mov	r2, r3
 800d20a:	79fb      	ldrb	r3, [r7, #7]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d19b      	bne.n	800d148 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d210:	2300      	movs	r3, #0
}
 800d212:	4618      	mov	r0, r3
 800d214:	3720      	adds	r7, #32
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	2000013c 	.word	0x2000013c

0800d220 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b08a      	sub	sp, #40	; 0x28
 800d224:	af00      	add	r7, sp, #0
 800d226:	60f8      	str	r0, [r7, #12]
 800d228:	60b9      	str	r1, [r7, #8]
 800d22a:	607a      	str	r2, [r7, #4]
 800d22c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d22e:	2300      	movs	r3, #0
 800d230:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d232:	f7fa fbfb 	bl	8007a2c <HAL_GetTick>
 800d236:	4602      	mov	r2, r0
 800d238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23a:	1a9b      	subs	r3, r3, r2
 800d23c:	683a      	ldr	r2, [r7, #0]
 800d23e:	4413      	add	r3, r2
 800d240:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800d242:	f7fa fbf3 	bl	8007a2c <HAL_GetTick>
 800d246:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	330c      	adds	r3, #12
 800d24e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d250:	4b3d      	ldr	r3, [pc, #244]	; (800d348 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	4613      	mov	r3, r2
 800d256:	009b      	lsls	r3, r3, #2
 800d258:	4413      	add	r3, r2
 800d25a:	00da      	lsls	r2, r3, #3
 800d25c:	1ad3      	subs	r3, r2, r3
 800d25e:	0d1b      	lsrs	r3, r3, #20
 800d260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d262:	fb02 f303 	mul.w	r3, r2, r3
 800d266:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d268:	e060      	b.n	800d32c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d270:	d107      	bne.n	800d282 <SPI_WaitFifoStateUntilTimeout+0x62>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d104      	bne.n	800d282 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	b2db      	uxtb	r3, r3
 800d27e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d280:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d288:	d050      	beq.n	800d32c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d28a:	f7fa fbcf 	bl	8007a2c <HAL_GetTick>
 800d28e:	4602      	mov	r2, r0
 800d290:	6a3b      	ldr	r3, [r7, #32]
 800d292:	1ad3      	subs	r3, r2, r3
 800d294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d296:	429a      	cmp	r2, r3
 800d298:	d902      	bls.n	800d2a0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800d29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d13d      	bne.n	800d31c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	685a      	ldr	r2, [r3, #4]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d2ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d2b8:	d111      	bne.n	800d2de <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d2c2:	d004      	beq.n	800d2ce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	689b      	ldr	r3, [r3, #8]
 800d2c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2cc:	d107      	bne.n	800d2de <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d2dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d2e6:	d10f      	bne.n	800d308 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	681a      	ldr	r2, [r3, #0]
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d2f6:	601a      	str	r2, [r3, #0]
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	681a      	ldr	r2, [r3, #0]
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d306:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	2201      	movs	r2, #1
 800d30c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	2200      	movs	r2, #0
 800d314:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d318:	2303      	movs	r3, #3
 800d31a:	e010      	b.n	800d33e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d31c:	69bb      	ldr	r3, [r7, #24]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d101      	bne.n	800d326 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d322:	2300      	movs	r3, #0
 800d324:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800d326:	69bb      	ldr	r3, [r7, #24]
 800d328:	3b01      	subs	r3, #1
 800d32a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	689a      	ldr	r2, [r3, #8]
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	4013      	ands	r3, r2
 800d336:	687a      	ldr	r2, [r7, #4]
 800d338:	429a      	cmp	r2, r3
 800d33a:	d196      	bne.n	800d26a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d33c:	2300      	movs	r3, #0
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3728      	adds	r7, #40	; 0x28
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	bf00      	nop
 800d348:	2000013c 	.word	0x2000013c

0800d34c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b086      	sub	sp, #24
 800d350:	af02      	add	r7, sp, #8
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	685b      	ldr	r3, [r3, #4]
 800d35c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d360:	d111      	bne.n	800d386 <SPI_EndRxTransaction+0x3a>
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	689b      	ldr	r3, [r3, #8]
 800d366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d36a:	d004      	beq.n	800d376 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	689b      	ldr	r3, [r3, #8]
 800d370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d374:	d107      	bne.n	800d386 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	681a      	ldr	r2, [r3, #0]
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d384:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	9300      	str	r3, [sp, #0]
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	2200      	movs	r2, #0
 800d38e:	2180      	movs	r1, #128	; 0x80
 800d390:	68f8      	ldr	r0, [r7, #12]
 800d392:	f7ff febd 	bl	800d110 <SPI_WaitFlagStateUntilTimeout>
 800d396:	4603      	mov	r3, r0
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d007      	beq.n	800d3ac <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3a0:	f043 0220 	orr.w	r2, r3, #32
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d3a8:	2303      	movs	r3, #3
 800d3aa:	e023      	b.n	800d3f4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d3b4:	d11d      	bne.n	800d3f2 <SPI_EndRxTransaction+0xa6>
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3be:	d004      	beq.n	800d3ca <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	689b      	ldr	r3, [r3, #8]
 800d3c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d3c8:	d113      	bne.n	800d3f2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	9300      	str	r3, [sp, #0]
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d3d6:	68f8      	ldr	r0, [r7, #12]
 800d3d8:	f7ff ff22 	bl	800d220 <SPI_WaitFifoStateUntilTimeout>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d007      	beq.n	800d3f2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3e6:	f043 0220 	orr.w	r2, r3, #32
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800d3ee:	2303      	movs	r3, #3
 800d3f0:	e000      	b.n	800d3f4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800d3f2:	2300      	movs	r3, #0
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3710      	adds	r7, #16
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b086      	sub	sp, #24
 800d400:	af02      	add	r7, sp, #8
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	9300      	str	r3, [sp, #0]
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	2200      	movs	r2, #0
 800d410:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d414:	68f8      	ldr	r0, [r7, #12]
 800d416:	f7ff ff03 	bl	800d220 <SPI_WaitFifoStateUntilTimeout>
 800d41a:	4603      	mov	r3, r0
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d007      	beq.n	800d430 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d424:	f043 0220 	orr.w	r2, r3, #32
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d42c:	2303      	movs	r3, #3
 800d42e:	e027      	b.n	800d480 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	9300      	str	r3, [sp, #0]
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	2200      	movs	r2, #0
 800d438:	2180      	movs	r1, #128	; 0x80
 800d43a:	68f8      	ldr	r0, [r7, #12]
 800d43c:	f7ff fe68 	bl	800d110 <SPI_WaitFlagStateUntilTimeout>
 800d440:	4603      	mov	r3, r0
 800d442:	2b00      	cmp	r3, #0
 800d444:	d007      	beq.n	800d456 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d44a:	f043 0220 	orr.w	r2, r3, #32
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d452:	2303      	movs	r3, #3
 800d454:	e014      	b.n	800d480 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	9300      	str	r3, [sp, #0]
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	2200      	movs	r2, #0
 800d45e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d462:	68f8      	ldr	r0, [r7, #12]
 800d464:	f7ff fedc 	bl	800d220 <SPI_WaitFifoStateUntilTimeout>
 800d468:	4603      	mov	r3, r0
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d007      	beq.n	800d47e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d472:	f043 0220 	orr.w	r2, r3, #32
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d47a:	2303      	movs	r3, #3
 800d47c:	e000      	b.n	800d480 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d47e:	2300      	movs	r3, #0
}
 800d480:	4618      	mov	r0, r3
 800d482:	3710      	adds	r7, #16
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d101      	bne.n	800d49a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d496:	2301      	movs	r3, #1
 800d498:	e049      	b.n	800d52e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d106      	bne.n	800d4b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f7f9 f98e 	bl	80067d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2202      	movs	r2, #2
 800d4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681a      	ldr	r2, [r3, #0]
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	3304      	adds	r3, #4
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	4610      	mov	r0, r2
 800d4c8:	f000 fab6 	bl	800da38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2201      	movs	r2, #1
 800d500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2201      	movs	r2, #1
 800d508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2201      	movs	r2, #1
 800d510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2201      	movs	r2, #1
 800d518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2201      	movs	r2, #1
 800d520:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2201      	movs	r2, #1
 800d528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d52c:	2300      	movs	r3, #0
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3708      	adds	r7, #8
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
	...

0800d538 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d538:	b480      	push	{r7}
 800d53a:	b085      	sub	sp, #20
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d546:	b2db      	uxtb	r3, r3
 800d548:	2b01      	cmp	r3, #1
 800d54a:	d001      	beq.n	800d550 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d54c:	2301      	movs	r3, #1
 800d54e:	e04f      	b.n	800d5f0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2202      	movs	r2, #2
 800d554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	68da      	ldr	r2, [r3, #12]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f042 0201 	orr.w	r2, r2, #1
 800d566:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4a23      	ldr	r2, [pc, #140]	; (800d5fc <HAL_TIM_Base_Start_IT+0xc4>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d01d      	beq.n	800d5ae <HAL_TIM_Base_Start_IT+0x76>
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d57a:	d018      	beq.n	800d5ae <HAL_TIM_Base_Start_IT+0x76>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4a1f      	ldr	r2, [pc, #124]	; (800d600 <HAL_TIM_Base_Start_IT+0xc8>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d013      	beq.n	800d5ae <HAL_TIM_Base_Start_IT+0x76>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a1e      	ldr	r2, [pc, #120]	; (800d604 <HAL_TIM_Base_Start_IT+0xcc>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d00e      	beq.n	800d5ae <HAL_TIM_Base_Start_IT+0x76>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4a1c      	ldr	r2, [pc, #112]	; (800d608 <HAL_TIM_Base_Start_IT+0xd0>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d009      	beq.n	800d5ae <HAL_TIM_Base_Start_IT+0x76>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	4a1b      	ldr	r2, [pc, #108]	; (800d60c <HAL_TIM_Base_Start_IT+0xd4>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d004      	beq.n	800d5ae <HAL_TIM_Base_Start_IT+0x76>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4a19      	ldr	r2, [pc, #100]	; (800d610 <HAL_TIM_Base_Start_IT+0xd8>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d115      	bne.n	800d5da <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	689a      	ldr	r2, [r3, #8]
 800d5b4:	4b17      	ldr	r3, [pc, #92]	; (800d614 <HAL_TIM_Base_Start_IT+0xdc>)
 800d5b6:	4013      	ands	r3, r2
 800d5b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2b06      	cmp	r3, #6
 800d5be:	d015      	beq.n	800d5ec <HAL_TIM_Base_Start_IT+0xb4>
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5c6:	d011      	beq.n	800d5ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	681a      	ldr	r2, [r3, #0]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	f042 0201 	orr.w	r2, r2, #1
 800d5d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5d8:	e008      	b.n	800d5ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	681a      	ldr	r2, [r3, #0]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f042 0201 	orr.w	r2, r2, #1
 800d5e8:	601a      	str	r2, [r3, #0]
 800d5ea:	e000      	b.n	800d5ee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d5ee:	2300      	movs	r3, #0
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3714      	adds	r7, #20
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr
 800d5fc:	40012c00 	.word	0x40012c00
 800d600:	40000400 	.word	0x40000400
 800d604:	40000800 	.word	0x40000800
 800d608:	40000c00 	.word	0x40000c00
 800d60c:	40013400 	.word	0x40013400
 800d610:	40014000 	.word	0x40014000
 800d614:	00010007 	.word	0x00010007

0800d618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	691b      	ldr	r3, [r3, #16]
 800d626:	f003 0302 	and.w	r3, r3, #2
 800d62a:	2b02      	cmp	r3, #2
 800d62c:	d122      	bne.n	800d674 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	f003 0302 	and.w	r3, r3, #2
 800d638:	2b02      	cmp	r3, #2
 800d63a:	d11b      	bne.n	800d674 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f06f 0202 	mvn.w	r2, #2
 800d644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2201      	movs	r2, #1
 800d64a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	699b      	ldr	r3, [r3, #24]
 800d652:	f003 0303 	and.w	r3, r3, #3
 800d656:	2b00      	cmp	r3, #0
 800d658:	d003      	beq.n	800d662 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 f9ce 	bl	800d9fc <HAL_TIM_IC_CaptureCallback>
 800d660:	e005      	b.n	800d66e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f000 f9c0 	bl	800d9e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f000 f9d1 	bl	800da10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2200      	movs	r2, #0
 800d672:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	691b      	ldr	r3, [r3, #16]
 800d67a:	f003 0304 	and.w	r3, r3, #4
 800d67e:	2b04      	cmp	r3, #4
 800d680:	d122      	bne.n	800d6c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	68db      	ldr	r3, [r3, #12]
 800d688:	f003 0304 	and.w	r3, r3, #4
 800d68c:	2b04      	cmp	r3, #4
 800d68e:	d11b      	bne.n	800d6c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f06f 0204 	mvn.w	r2, #4
 800d698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2202      	movs	r2, #2
 800d69e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	699b      	ldr	r3, [r3, #24]
 800d6a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d003      	beq.n	800d6b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 f9a4 	bl	800d9fc <HAL_TIM_IC_CaptureCallback>
 800d6b4:	e005      	b.n	800d6c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f000 f996 	bl	800d9e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 f9a7 	bl	800da10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	691b      	ldr	r3, [r3, #16]
 800d6ce:	f003 0308 	and.w	r3, r3, #8
 800d6d2:	2b08      	cmp	r3, #8
 800d6d4:	d122      	bne.n	800d71c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	68db      	ldr	r3, [r3, #12]
 800d6dc:	f003 0308 	and.w	r3, r3, #8
 800d6e0:	2b08      	cmp	r3, #8
 800d6e2:	d11b      	bne.n	800d71c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f06f 0208 	mvn.w	r2, #8
 800d6ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2204      	movs	r2, #4
 800d6f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	69db      	ldr	r3, [r3, #28]
 800d6fa:	f003 0303 	and.w	r3, r3, #3
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d003      	beq.n	800d70a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f000 f97a 	bl	800d9fc <HAL_TIM_IC_CaptureCallback>
 800d708:	e005      	b.n	800d716 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f000 f96c 	bl	800d9e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 f97d 	bl	800da10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2200      	movs	r2, #0
 800d71a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	691b      	ldr	r3, [r3, #16]
 800d722:	f003 0310 	and.w	r3, r3, #16
 800d726:	2b10      	cmp	r3, #16
 800d728:	d122      	bne.n	800d770 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	68db      	ldr	r3, [r3, #12]
 800d730:	f003 0310 	and.w	r3, r3, #16
 800d734:	2b10      	cmp	r3, #16
 800d736:	d11b      	bne.n	800d770 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f06f 0210 	mvn.w	r2, #16
 800d740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2208      	movs	r2, #8
 800d746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	69db      	ldr	r3, [r3, #28]
 800d74e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d752:	2b00      	cmp	r3, #0
 800d754:	d003      	beq.n	800d75e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f000 f950 	bl	800d9fc <HAL_TIM_IC_CaptureCallback>
 800d75c:	e005      	b.n	800d76a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 f942 	bl	800d9e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f000 f953 	bl	800da10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2200      	movs	r2, #0
 800d76e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	691b      	ldr	r3, [r3, #16]
 800d776:	f003 0301 	and.w	r3, r3, #1
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d10e      	bne.n	800d79c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	68db      	ldr	r3, [r3, #12]
 800d784:	f003 0301 	and.w	r3, r3, #1
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d107      	bne.n	800d79c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	f06f 0201 	mvn.w	r2, #1
 800d794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f7f8 f82c 	bl	80057f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	691b      	ldr	r3, [r3, #16]
 800d7a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7a6:	2b80      	cmp	r3, #128	; 0x80
 800d7a8:	d10e      	bne.n	800d7c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	68db      	ldr	r3, [r3, #12]
 800d7b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7b4:	2b80      	cmp	r3, #128	; 0x80
 800d7b6:	d107      	bne.n	800d7c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d7c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f000 fafe 	bl	800ddc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	691b      	ldr	r3, [r3, #16]
 800d7ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7d6:	d10e      	bne.n	800d7f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	68db      	ldr	r3, [r3, #12]
 800d7de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7e2:	2b80      	cmp	r3, #128	; 0x80
 800d7e4:	d107      	bne.n	800d7f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d7ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f000 faf1 	bl	800ddd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	691b      	ldr	r3, [r3, #16]
 800d7fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d800:	2b40      	cmp	r3, #64	; 0x40
 800d802:	d10e      	bne.n	800d822 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	68db      	ldr	r3, [r3, #12]
 800d80a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d80e:	2b40      	cmp	r3, #64	; 0x40
 800d810:	d107      	bne.n	800d822 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d81a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f000 f901 	bl	800da24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	691b      	ldr	r3, [r3, #16]
 800d828:	f003 0320 	and.w	r3, r3, #32
 800d82c:	2b20      	cmp	r3, #32
 800d82e:	d10e      	bne.n	800d84e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	68db      	ldr	r3, [r3, #12]
 800d836:	f003 0320 	and.w	r3, r3, #32
 800d83a:	2b20      	cmp	r3, #32
 800d83c:	d107      	bne.n	800d84e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f06f 0220 	mvn.w	r2, #32
 800d846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 fab1 	bl	800ddb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d84e:	bf00      	nop
 800d850:	3708      	adds	r7, #8
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}

0800d856 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d856:	b580      	push	{r7, lr}
 800d858:	b084      	sub	sp, #16
 800d85a:	af00      	add	r7, sp, #0
 800d85c:	6078      	str	r0, [r7, #4]
 800d85e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d860:	2300      	movs	r3, #0
 800d862:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d86a:	2b01      	cmp	r3, #1
 800d86c:	d101      	bne.n	800d872 <HAL_TIM_ConfigClockSource+0x1c>
 800d86e:	2302      	movs	r3, #2
 800d870:	e0b6      	b.n	800d9e0 <HAL_TIM_ConfigClockSource+0x18a>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2201      	movs	r2, #1
 800d876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2202      	movs	r2, #2
 800d87e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	689b      	ldr	r3, [r3, #8]
 800d888:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d890:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d894:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d89c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	68ba      	ldr	r2, [r7, #8]
 800d8a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d8ae:	d03e      	beq.n	800d92e <HAL_TIM_ConfigClockSource+0xd8>
 800d8b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d8b4:	f200 8087 	bhi.w	800d9c6 <HAL_TIM_ConfigClockSource+0x170>
 800d8b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8bc:	f000 8086 	beq.w	800d9cc <HAL_TIM_ConfigClockSource+0x176>
 800d8c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8c4:	d87f      	bhi.n	800d9c6 <HAL_TIM_ConfigClockSource+0x170>
 800d8c6:	2b70      	cmp	r3, #112	; 0x70
 800d8c8:	d01a      	beq.n	800d900 <HAL_TIM_ConfigClockSource+0xaa>
 800d8ca:	2b70      	cmp	r3, #112	; 0x70
 800d8cc:	d87b      	bhi.n	800d9c6 <HAL_TIM_ConfigClockSource+0x170>
 800d8ce:	2b60      	cmp	r3, #96	; 0x60
 800d8d0:	d050      	beq.n	800d974 <HAL_TIM_ConfigClockSource+0x11e>
 800d8d2:	2b60      	cmp	r3, #96	; 0x60
 800d8d4:	d877      	bhi.n	800d9c6 <HAL_TIM_ConfigClockSource+0x170>
 800d8d6:	2b50      	cmp	r3, #80	; 0x50
 800d8d8:	d03c      	beq.n	800d954 <HAL_TIM_ConfigClockSource+0xfe>
 800d8da:	2b50      	cmp	r3, #80	; 0x50
 800d8dc:	d873      	bhi.n	800d9c6 <HAL_TIM_ConfigClockSource+0x170>
 800d8de:	2b40      	cmp	r3, #64	; 0x40
 800d8e0:	d058      	beq.n	800d994 <HAL_TIM_ConfigClockSource+0x13e>
 800d8e2:	2b40      	cmp	r3, #64	; 0x40
 800d8e4:	d86f      	bhi.n	800d9c6 <HAL_TIM_ConfigClockSource+0x170>
 800d8e6:	2b30      	cmp	r3, #48	; 0x30
 800d8e8:	d064      	beq.n	800d9b4 <HAL_TIM_ConfigClockSource+0x15e>
 800d8ea:	2b30      	cmp	r3, #48	; 0x30
 800d8ec:	d86b      	bhi.n	800d9c6 <HAL_TIM_ConfigClockSource+0x170>
 800d8ee:	2b20      	cmp	r3, #32
 800d8f0:	d060      	beq.n	800d9b4 <HAL_TIM_ConfigClockSource+0x15e>
 800d8f2:	2b20      	cmp	r3, #32
 800d8f4:	d867      	bhi.n	800d9c6 <HAL_TIM_ConfigClockSource+0x170>
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d05c      	beq.n	800d9b4 <HAL_TIM_ConfigClockSource+0x15e>
 800d8fa:	2b10      	cmp	r3, #16
 800d8fc:	d05a      	beq.n	800d9b4 <HAL_TIM_ConfigClockSource+0x15e>
 800d8fe:	e062      	b.n	800d9c6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6818      	ldr	r0, [r3, #0]
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	6899      	ldr	r1, [r3, #8]
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	685a      	ldr	r2, [r3, #4]
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	68db      	ldr	r3, [r3, #12]
 800d910:	f000 f9a6 	bl	800dc60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	689b      	ldr	r3, [r3, #8]
 800d91a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d922:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	68ba      	ldr	r2, [r7, #8]
 800d92a:	609a      	str	r2, [r3, #8]
      break;
 800d92c:	e04f      	b.n	800d9ce <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6818      	ldr	r0, [r3, #0]
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	6899      	ldr	r1, [r3, #8]
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	685a      	ldr	r2, [r3, #4]
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	f000 f98f 	bl	800dc60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	689a      	ldr	r2, [r3, #8]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d950:	609a      	str	r2, [r3, #8]
      break;
 800d952:	e03c      	b.n	800d9ce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6818      	ldr	r0, [r3, #0]
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	6859      	ldr	r1, [r3, #4]
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	68db      	ldr	r3, [r3, #12]
 800d960:	461a      	mov	r2, r3
 800d962:	f000 f903 	bl	800db6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	2150      	movs	r1, #80	; 0x50
 800d96c:	4618      	mov	r0, r3
 800d96e:	f000 f95c 	bl	800dc2a <TIM_ITRx_SetConfig>
      break;
 800d972:	e02c      	b.n	800d9ce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6818      	ldr	r0, [r3, #0]
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	6859      	ldr	r1, [r3, #4]
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	68db      	ldr	r3, [r3, #12]
 800d980:	461a      	mov	r2, r3
 800d982:	f000 f922 	bl	800dbca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	2160      	movs	r1, #96	; 0x60
 800d98c:	4618      	mov	r0, r3
 800d98e:	f000 f94c 	bl	800dc2a <TIM_ITRx_SetConfig>
      break;
 800d992:	e01c      	b.n	800d9ce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6818      	ldr	r0, [r3, #0]
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	6859      	ldr	r1, [r3, #4]
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	68db      	ldr	r3, [r3, #12]
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	f000 f8e3 	bl	800db6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	2140      	movs	r1, #64	; 0x40
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f000 f93c 	bl	800dc2a <TIM_ITRx_SetConfig>
      break;
 800d9b2:	e00c      	b.n	800d9ce <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681a      	ldr	r2, [r3, #0]
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4619      	mov	r1, r3
 800d9be:	4610      	mov	r0, r2
 800d9c0:	f000 f933 	bl	800dc2a <TIM_ITRx_SetConfig>
      break;
 800d9c4:	e003      	b.n	800d9ce <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	73fb      	strb	r3, [r7, #15]
      break;
 800d9ca:	e000      	b.n	800d9ce <HAL_TIM_ConfigClockSource+0x178>
      break;
 800d9cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d9de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3710      	adds	r7, #16
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}

0800d9e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b083      	sub	sp, #12
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d9f0:	bf00      	nop
 800d9f2:	370c      	adds	r7, #12
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr

0800d9fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b083      	sub	sp, #12
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800da04:	bf00      	nop
 800da06:	370c      	adds	r7, #12
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr

0800da10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800da10:	b480      	push	{r7}
 800da12:	b083      	sub	sp, #12
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800da18:	bf00      	nop
 800da1a:	370c      	adds	r7, #12
 800da1c:	46bd      	mov	sp, r7
 800da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da22:	4770      	bx	lr

0800da24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800da24:	b480      	push	{r7}
 800da26:	b083      	sub	sp, #12
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800da2c:	bf00      	nop
 800da2e:	370c      	adds	r7, #12
 800da30:	46bd      	mov	sp, r7
 800da32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da36:	4770      	bx	lr

0800da38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800da38:	b480      	push	{r7}
 800da3a:	b085      	sub	sp, #20
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
 800da40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	4a40      	ldr	r2, [pc, #256]	; (800db4c <TIM_Base_SetConfig+0x114>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d013      	beq.n	800da78 <TIM_Base_SetConfig+0x40>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da56:	d00f      	beq.n	800da78 <TIM_Base_SetConfig+0x40>
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	4a3d      	ldr	r2, [pc, #244]	; (800db50 <TIM_Base_SetConfig+0x118>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d00b      	beq.n	800da78 <TIM_Base_SetConfig+0x40>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	4a3c      	ldr	r2, [pc, #240]	; (800db54 <TIM_Base_SetConfig+0x11c>)
 800da64:	4293      	cmp	r3, r2
 800da66:	d007      	beq.n	800da78 <TIM_Base_SetConfig+0x40>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	4a3b      	ldr	r2, [pc, #236]	; (800db58 <TIM_Base_SetConfig+0x120>)
 800da6c:	4293      	cmp	r3, r2
 800da6e:	d003      	beq.n	800da78 <TIM_Base_SetConfig+0x40>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	4a3a      	ldr	r2, [pc, #232]	; (800db5c <TIM_Base_SetConfig+0x124>)
 800da74:	4293      	cmp	r3, r2
 800da76:	d108      	bne.n	800da8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	685b      	ldr	r3, [r3, #4]
 800da84:	68fa      	ldr	r2, [r7, #12]
 800da86:	4313      	orrs	r3, r2
 800da88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	4a2f      	ldr	r2, [pc, #188]	; (800db4c <TIM_Base_SetConfig+0x114>)
 800da8e:	4293      	cmp	r3, r2
 800da90:	d01f      	beq.n	800dad2 <TIM_Base_SetConfig+0x9a>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da98:	d01b      	beq.n	800dad2 <TIM_Base_SetConfig+0x9a>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	4a2c      	ldr	r2, [pc, #176]	; (800db50 <TIM_Base_SetConfig+0x118>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d017      	beq.n	800dad2 <TIM_Base_SetConfig+0x9a>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	4a2b      	ldr	r2, [pc, #172]	; (800db54 <TIM_Base_SetConfig+0x11c>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d013      	beq.n	800dad2 <TIM_Base_SetConfig+0x9a>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	4a2a      	ldr	r2, [pc, #168]	; (800db58 <TIM_Base_SetConfig+0x120>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d00f      	beq.n	800dad2 <TIM_Base_SetConfig+0x9a>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	4a29      	ldr	r2, [pc, #164]	; (800db5c <TIM_Base_SetConfig+0x124>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d00b      	beq.n	800dad2 <TIM_Base_SetConfig+0x9a>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	4a28      	ldr	r2, [pc, #160]	; (800db60 <TIM_Base_SetConfig+0x128>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d007      	beq.n	800dad2 <TIM_Base_SetConfig+0x9a>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	4a27      	ldr	r2, [pc, #156]	; (800db64 <TIM_Base_SetConfig+0x12c>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d003      	beq.n	800dad2 <TIM_Base_SetConfig+0x9a>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	4a26      	ldr	r2, [pc, #152]	; (800db68 <TIM_Base_SetConfig+0x130>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d108      	bne.n	800dae4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	68db      	ldr	r3, [r3, #12]
 800dade:	68fa      	ldr	r2, [r7, #12]
 800dae0:	4313      	orrs	r3, r2
 800dae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	695b      	ldr	r3, [r3, #20]
 800daee:	4313      	orrs	r3, r2
 800daf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	68fa      	ldr	r2, [r7, #12]
 800daf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	689a      	ldr	r2, [r3, #8]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	681a      	ldr	r2, [r3, #0]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	4a10      	ldr	r2, [pc, #64]	; (800db4c <TIM_Base_SetConfig+0x114>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d00f      	beq.n	800db30 <TIM_Base_SetConfig+0xf8>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	4a12      	ldr	r2, [pc, #72]	; (800db5c <TIM_Base_SetConfig+0x124>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d00b      	beq.n	800db30 <TIM_Base_SetConfig+0xf8>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	4a11      	ldr	r2, [pc, #68]	; (800db60 <TIM_Base_SetConfig+0x128>)
 800db1c:	4293      	cmp	r3, r2
 800db1e:	d007      	beq.n	800db30 <TIM_Base_SetConfig+0xf8>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	4a10      	ldr	r2, [pc, #64]	; (800db64 <TIM_Base_SetConfig+0x12c>)
 800db24:	4293      	cmp	r3, r2
 800db26:	d003      	beq.n	800db30 <TIM_Base_SetConfig+0xf8>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	4a0f      	ldr	r2, [pc, #60]	; (800db68 <TIM_Base_SetConfig+0x130>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d103      	bne.n	800db38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	691a      	ldr	r2, [r3, #16]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2201      	movs	r2, #1
 800db3c:	615a      	str	r2, [r3, #20]
}
 800db3e:	bf00      	nop
 800db40:	3714      	adds	r7, #20
 800db42:	46bd      	mov	sp, r7
 800db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db48:	4770      	bx	lr
 800db4a:	bf00      	nop
 800db4c:	40012c00 	.word	0x40012c00
 800db50:	40000400 	.word	0x40000400
 800db54:	40000800 	.word	0x40000800
 800db58:	40000c00 	.word	0x40000c00
 800db5c:	40013400 	.word	0x40013400
 800db60:	40014000 	.word	0x40014000
 800db64:	40014400 	.word	0x40014400
 800db68:	40014800 	.word	0x40014800

0800db6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b087      	sub	sp, #28
 800db70:	af00      	add	r7, sp, #0
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	60b9      	str	r1, [r7, #8]
 800db76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	6a1b      	ldr	r3, [r3, #32]
 800db7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	6a1b      	ldr	r3, [r3, #32]
 800db82:	f023 0201 	bic.w	r2, r3, #1
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	699b      	ldr	r3, [r3, #24]
 800db8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800db90:	693b      	ldr	r3, [r7, #16]
 800db92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800db96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	011b      	lsls	r3, r3, #4
 800db9c:	693a      	ldr	r2, [r7, #16]
 800db9e:	4313      	orrs	r3, r2
 800dba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	f023 030a 	bic.w	r3, r3, #10
 800dba8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dbaa:	697a      	ldr	r2, [r7, #20]
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	693a      	ldr	r2, [r7, #16]
 800dbb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	697a      	ldr	r2, [r7, #20]
 800dbbc:	621a      	str	r2, [r3, #32]
}
 800dbbe:	bf00      	nop
 800dbc0:	371c      	adds	r7, #28
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc8:	4770      	bx	lr

0800dbca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dbca:	b480      	push	{r7}
 800dbcc:	b087      	sub	sp, #28
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	60f8      	str	r0, [r7, #12]
 800dbd2:	60b9      	str	r1, [r7, #8]
 800dbd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	6a1b      	ldr	r3, [r3, #32]
 800dbda:	f023 0210 	bic.w	r2, r3, #16
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	699b      	ldr	r3, [r3, #24]
 800dbe6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	6a1b      	ldr	r3, [r3, #32]
 800dbec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dbf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	031b      	lsls	r3, r3, #12
 800dbfa:	697a      	ldr	r2, [r7, #20]
 800dbfc:	4313      	orrs	r3, r2
 800dbfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dc06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	011b      	lsls	r3, r3, #4
 800dc0c:	693a      	ldr	r2, [r7, #16]
 800dc0e:	4313      	orrs	r3, r2
 800dc10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	697a      	ldr	r2, [r7, #20]
 800dc16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	693a      	ldr	r2, [r7, #16]
 800dc1c:	621a      	str	r2, [r3, #32]
}
 800dc1e:	bf00      	nop
 800dc20:	371c      	adds	r7, #28
 800dc22:	46bd      	mov	sp, r7
 800dc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc28:	4770      	bx	lr

0800dc2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dc2a:	b480      	push	{r7}
 800dc2c:	b085      	sub	sp, #20
 800dc2e:	af00      	add	r7, sp, #0
 800dc30:	6078      	str	r0, [r7, #4]
 800dc32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	689b      	ldr	r3, [r3, #8]
 800dc38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dc42:	683a      	ldr	r2, [r7, #0]
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	4313      	orrs	r3, r2
 800dc48:	f043 0307 	orr.w	r3, r3, #7
 800dc4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	68fa      	ldr	r2, [r7, #12]
 800dc52:	609a      	str	r2, [r3, #8]
}
 800dc54:	bf00      	nop
 800dc56:	3714      	adds	r7, #20
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr

0800dc60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b087      	sub	sp, #28
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	60f8      	str	r0, [r7, #12]
 800dc68:	60b9      	str	r1, [r7, #8]
 800dc6a:	607a      	str	r2, [r7, #4]
 800dc6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	689b      	ldr	r3, [r3, #8]
 800dc72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dc7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	021a      	lsls	r2, r3, #8
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	431a      	orrs	r2, r3
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	4313      	orrs	r3, r2
 800dc88:	697a      	ldr	r2, [r7, #20]
 800dc8a:	4313      	orrs	r3, r2
 800dc8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	697a      	ldr	r2, [r7, #20]
 800dc92:	609a      	str	r2, [r3, #8]
}
 800dc94:	bf00      	nop
 800dc96:	371c      	adds	r7, #28
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9e:	4770      	bx	lr

0800dca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b085      	sub	sp, #20
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d101      	bne.n	800dcb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dcb4:	2302      	movs	r3, #2
 800dcb6:	e068      	b.n	800dd8a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2201      	movs	r2, #1
 800dcbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2202      	movs	r2, #2
 800dcc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	689b      	ldr	r3, [r3, #8]
 800dcd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	4a2e      	ldr	r2, [pc, #184]	; (800dd98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d004      	beq.n	800dcec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	4a2d      	ldr	r2, [pc, #180]	; (800dd9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d108      	bne.n	800dcfe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dcf2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	685b      	ldr	r3, [r3, #4]
 800dcf8:	68fa      	ldr	r2, [r7, #12]
 800dcfa:	4313      	orrs	r3, r2
 800dcfc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	68fa      	ldr	r2, [r7, #12]
 800dd0c:	4313      	orrs	r3, r2
 800dd0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	68fa      	ldr	r2, [r7, #12]
 800dd16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	4a1e      	ldr	r2, [pc, #120]	; (800dd98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d01d      	beq.n	800dd5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd2a:	d018      	beq.n	800dd5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4a1b      	ldr	r2, [pc, #108]	; (800dda0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dd32:	4293      	cmp	r3, r2
 800dd34:	d013      	beq.n	800dd5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4a1a      	ldr	r2, [pc, #104]	; (800dda4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d00e      	beq.n	800dd5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	4a18      	ldr	r2, [pc, #96]	; (800dda8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dd46:	4293      	cmp	r3, r2
 800dd48:	d009      	beq.n	800dd5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	4a13      	ldr	r2, [pc, #76]	; (800dd9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d004      	beq.n	800dd5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	4a14      	ldr	r2, [pc, #80]	; (800ddac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d10c      	bne.n	800dd78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	689b      	ldr	r3, [r3, #8]
 800dd6a:	68ba      	ldr	r2, [r7, #8]
 800dd6c:	4313      	orrs	r3, r2
 800dd6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	68ba      	ldr	r2, [r7, #8]
 800dd76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2200      	movs	r2, #0
 800dd84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd88:	2300      	movs	r3, #0
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3714      	adds	r7, #20
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd94:	4770      	bx	lr
 800dd96:	bf00      	nop
 800dd98:	40012c00 	.word	0x40012c00
 800dd9c:	40013400 	.word	0x40013400
 800dda0:	40000400 	.word	0x40000400
 800dda4:	40000800 	.word	0x40000800
 800dda8:	40000c00 	.word	0x40000c00
 800ddac:	40014000 	.word	0x40014000

0800ddb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b083      	sub	sp, #12
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ddb8:	bf00      	nop
 800ddba:	370c      	adds	r7, #12
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc2:	4770      	bx	lr

0800ddc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	b083      	sub	sp, #12
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ddcc:	bf00      	nop
 800ddce:	370c      	adds	r7, #12
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr

0800ddd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b083      	sub	sp, #12
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dde0:	bf00      	nop
 800dde2:	370c      	adds	r7, #12
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr

0800ddec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d101      	bne.n	800ddfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	e040      	b.n	800de80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de02:	2b00      	cmp	r3, #0
 800de04:	d106      	bne.n	800de14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2200      	movs	r2, #0
 800de0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f7f8 fd20 	bl	8006854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2224      	movs	r2, #36	; 0x24
 800de18:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	681a      	ldr	r2, [r3, #0]
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	f022 0201 	bic.w	r2, r2, #1
 800de28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f000 fc9e 	bl	800e76c <UART_SetConfig>
 800de30:	4603      	mov	r3, r0
 800de32:	2b01      	cmp	r3, #1
 800de34:	d101      	bne.n	800de3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800de36:	2301      	movs	r3, #1
 800de38:	e022      	b.n	800de80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d002      	beq.n	800de48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 ff4a 	bl	800ecdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	685a      	ldr	r2, [r3, #4]
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800de56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	689a      	ldr	r2, [r3, #8]
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800de66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	681a      	ldr	r2, [r3, #0]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f042 0201 	orr.w	r2, r2, #1
 800de76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f000 ffd1 	bl	800ee20 <UART_CheckIdleState>
 800de7e:	4603      	mov	r3, r0
}
 800de80:	4618      	mov	r0, r3
 800de82:	3708      	adds	r7, #8
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b08a      	sub	sp, #40	; 0x28
 800de8c:	af02      	add	r7, sp, #8
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	603b      	str	r3, [r7, #0]
 800de94:	4613      	mov	r3, r2
 800de96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de9c:	2b20      	cmp	r3, #32
 800de9e:	f040 8082 	bne.w	800dfa6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d002      	beq.n	800deae <HAL_UART_Transmit+0x26>
 800dea8:	88fb      	ldrh	r3, [r7, #6]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d101      	bne.n	800deb2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800deae:	2301      	movs	r3, #1
 800deb0:	e07a      	b.n	800dfa8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800deb8:	2b01      	cmp	r3, #1
 800deba:	d101      	bne.n	800dec0 <HAL_UART_Transmit+0x38>
 800debc:	2302      	movs	r3, #2
 800debe:	e073      	b.n	800dfa8 <HAL_UART_Transmit+0x120>
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	2201      	movs	r2, #1
 800dec4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2200      	movs	r2, #0
 800decc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2221      	movs	r2, #33	; 0x21
 800ded4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ded6:	f7f9 fda9 	bl	8007a2c <HAL_GetTick>
 800deda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	88fa      	ldrh	r2, [r7, #6]
 800dee0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	88fa      	ldrh	r2, [r7, #6]
 800dee8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	689b      	ldr	r3, [r3, #8]
 800def0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800def4:	d108      	bne.n	800df08 <HAL_UART_Transmit+0x80>
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	691b      	ldr	r3, [r3, #16]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d104      	bne.n	800df08 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800defe:	2300      	movs	r3, #0
 800df00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	61bb      	str	r3, [r7, #24]
 800df06:	e003      	b.n	800df10 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800df0c:	2300      	movs	r3, #0
 800df0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	2200      	movs	r2, #0
 800df14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800df18:	e02d      	b.n	800df76 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	9300      	str	r3, [sp, #0]
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	2200      	movs	r2, #0
 800df22:	2180      	movs	r1, #128	; 0x80
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f000 ffc4 	bl	800eeb2 <UART_WaitOnFlagUntilTimeout>
 800df2a:	4603      	mov	r3, r0
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d001      	beq.n	800df34 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800df30:	2303      	movs	r3, #3
 800df32:	e039      	b.n	800dfa8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800df34:	69fb      	ldr	r3, [r7, #28]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d10b      	bne.n	800df52 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800df3a:	69bb      	ldr	r3, [r7, #24]
 800df3c:	881a      	ldrh	r2, [r3, #0]
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800df46:	b292      	uxth	r2, r2
 800df48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800df4a:	69bb      	ldr	r3, [r7, #24]
 800df4c:	3302      	adds	r3, #2
 800df4e:	61bb      	str	r3, [r7, #24]
 800df50:	e008      	b.n	800df64 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800df52:	69fb      	ldr	r3, [r7, #28]
 800df54:	781a      	ldrb	r2, [r3, #0]
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	b292      	uxth	r2, r2
 800df5c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800df5e:	69fb      	ldr	r3, [r7, #28]
 800df60:	3301      	adds	r3, #1
 800df62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	3b01      	subs	r3, #1
 800df6e:	b29a      	uxth	r2, r3
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d1cb      	bne.n	800df1a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	9300      	str	r3, [sp, #0]
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	2200      	movs	r2, #0
 800df8a:	2140      	movs	r1, #64	; 0x40
 800df8c:	68f8      	ldr	r0, [r7, #12]
 800df8e:	f000 ff90 	bl	800eeb2 <UART_WaitOnFlagUntilTimeout>
 800df92:	4603      	mov	r3, r0
 800df94:	2b00      	cmp	r3, #0
 800df96:	d001      	beq.n	800df9c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800df98:	2303      	movs	r3, #3
 800df9a:	e005      	b.n	800dfa8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2220      	movs	r2, #32
 800dfa0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	e000      	b.n	800dfa8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800dfa6:	2302      	movs	r3, #2
  }
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3720      	adds	r7, #32
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}

0800dfb0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b08a      	sub	sp, #40	; 0x28
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	60f8      	str	r0, [r7, #12]
 800dfb8:	60b9      	str	r1, [r7, #8]
 800dfba:	4613      	mov	r3, r2
 800dfbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfc2:	2b20      	cmp	r3, #32
 800dfc4:	d142      	bne.n	800e04c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d002      	beq.n	800dfd2 <HAL_UART_Receive_IT+0x22>
 800dfcc:	88fb      	ldrh	r3, [r7, #6]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d101      	bne.n	800dfd6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	e03b      	b.n	800e04e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d101      	bne.n	800dfe4 <HAL_UART_Receive_IT+0x34>
 800dfe0:	2302      	movs	r3, #2
 800dfe2:	e034      	b.n	800e04e <HAL_UART_Receive_IT+0x9e>
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2201      	movs	r2, #1
 800dfe8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	2200      	movs	r2, #0
 800dff0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	4a18      	ldr	r2, [pc, #96]	; (800e058 <HAL_UART_Receive_IT+0xa8>)
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d01f      	beq.n	800e03c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	685b      	ldr	r3, [r3, #4]
 800e002:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e006:	2b00      	cmp	r3, #0
 800e008:	d018      	beq.n	800e03c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	e853 3f00 	ldrex	r3, [r3]
 800e016:	613b      	str	r3, [r7, #16]
   return(result);
 800e018:	693b      	ldr	r3, [r7, #16]
 800e01a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e01e:	627b      	str	r3, [r7, #36]	; 0x24
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	461a      	mov	r2, r3
 800e026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e028:	623b      	str	r3, [r7, #32]
 800e02a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e02c:	69f9      	ldr	r1, [r7, #28]
 800e02e:	6a3a      	ldr	r2, [r7, #32]
 800e030:	e841 2300 	strex	r3, r2, [r1]
 800e034:	61bb      	str	r3, [r7, #24]
   return(result);
 800e036:	69bb      	ldr	r3, [r7, #24]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d1e6      	bne.n	800e00a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e03c:	88fb      	ldrh	r3, [r7, #6]
 800e03e:	461a      	mov	r2, r3
 800e040:	68b9      	ldr	r1, [r7, #8]
 800e042:	68f8      	ldr	r0, [r7, #12]
 800e044:	f000 fffa 	bl	800f03c <UART_Start_Receive_IT>
 800e048:	4603      	mov	r3, r0
 800e04a:	e000      	b.n	800e04e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800e04c:	2302      	movs	r3, #2
  }
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3728      	adds	r7, #40	; 0x28
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	40008000 	.word	0x40008000

0800e05c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b08a      	sub	sp, #40	; 0x28
 800e060:	af00      	add	r7, sp, #0
 800e062:	60f8      	str	r0, [r7, #12]
 800e064:	60b9      	str	r1, [r7, #8]
 800e066:	4613      	mov	r3, r2
 800e068:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e06e:	2b20      	cmp	r3, #32
 800e070:	d178      	bne.n	800e164 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d002      	beq.n	800e07e <HAL_UART_Transmit_DMA+0x22>
 800e078:	88fb      	ldrh	r3, [r7, #6]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d101      	bne.n	800e082 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800e07e:	2301      	movs	r3, #1
 800e080:	e071      	b.n	800e166 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e088:	2b01      	cmp	r3, #1
 800e08a:	d101      	bne.n	800e090 <HAL_UART_Transmit_DMA+0x34>
 800e08c:	2302      	movs	r3, #2
 800e08e:	e06a      	b.n	800e166 <HAL_UART_Transmit_DMA+0x10a>
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	2201      	movs	r2, #1
 800e094:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	68ba      	ldr	r2, [r7, #8]
 800e09c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	88fa      	ldrh	r2, [r7, #6]
 800e0a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	88fa      	ldrh	r2, [r7, #6]
 800e0aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2221      	movs	r2, #33	; 0x21
 800e0ba:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d02b      	beq.n	800e11c <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0c8:	4a29      	ldr	r2, [pc, #164]	; (800e170 <HAL_UART_Transmit_DMA+0x114>)
 800e0ca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0d0:	4a28      	ldr	r2, [pc, #160]	; (800e174 <HAL_UART_Transmit_DMA+0x118>)
 800e0d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0d8:	4a27      	ldr	r2, [pc, #156]	; (800e178 <HAL_UART_Transmit_DMA+0x11c>)
 800e0da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	3328      	adds	r3, #40	; 0x28
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	88fb      	ldrh	r3, [r7, #6]
 800e0f8:	f7f9 fe62 	bl	8007dc0 <HAL_DMA_Start_IT>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d00c      	beq.n	800e11c <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2210      	movs	r2, #16
 800e106:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2200      	movs	r2, #0
 800e10e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	2220      	movs	r2, #32
 800e116:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800e118:	2301      	movs	r3, #1
 800e11a:	e024      	b.n	800e166 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	2240      	movs	r2, #64	; 0x40
 800e122:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	2200      	movs	r2, #0
 800e128:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	3308      	adds	r3, #8
 800e132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	e853 3f00 	ldrex	r3, [r3]
 800e13a:	613b      	str	r3, [r7, #16]
   return(result);
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e142:	627b      	str	r3, [r7, #36]	; 0x24
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	3308      	adds	r3, #8
 800e14a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e14c:	623a      	str	r2, [r7, #32]
 800e14e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e150:	69f9      	ldr	r1, [r7, #28]
 800e152:	6a3a      	ldr	r2, [r7, #32]
 800e154:	e841 2300 	strex	r3, r2, [r1]
 800e158:	61bb      	str	r3, [r7, #24]
   return(result);
 800e15a:	69bb      	ldr	r3, [r7, #24]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d1e5      	bne.n	800e12c <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800e160:	2300      	movs	r3, #0
 800e162:	e000      	b.n	800e166 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800e164:	2302      	movs	r3, #2
  }
}
 800e166:	4618      	mov	r0, r3
 800e168:	3728      	adds	r7, #40	; 0x28
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}
 800e16e:	bf00      	nop
 800e170:	0800f2e3 	.word	0x0800f2e3
 800e174:	0800f37d 	.word	0x0800f37d
 800e178:	0800f399 	.word	0x0800f399

0800e17c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b0ba      	sub	sp, #232	; 0xe8
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	69db      	ldr	r3, [r3, #28]
 800e18a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	689b      	ldr	r3, [r3, #8]
 800e19e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e1a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e1a6:	f640 030f 	movw	r3, #2063	; 0x80f
 800e1aa:	4013      	ands	r3, r2
 800e1ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e1b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d115      	bne.n	800e1e4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e1b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1bc:	f003 0320 	and.w	r3, r3, #32
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d00f      	beq.n	800e1e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e1c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1c8:	f003 0320 	and.w	r3, r3, #32
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d009      	beq.n	800e1e4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	f000 82a6 	beq.w	800e726 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	4798      	blx	r3
      }
      return;
 800e1e2:	e2a0      	b.n	800e726 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800e1e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	f000 8117 	beq.w	800e41c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e1ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1f2:	f003 0301 	and.w	r3, r3, #1
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d106      	bne.n	800e208 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e1fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e1fe:	4b85      	ldr	r3, [pc, #532]	; (800e414 <HAL_UART_IRQHandler+0x298>)
 800e200:	4013      	ands	r3, r2
 800e202:	2b00      	cmp	r3, #0
 800e204:	f000 810a 	beq.w	800e41c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e20c:	f003 0301 	and.w	r3, r3, #1
 800e210:	2b00      	cmp	r3, #0
 800e212:	d011      	beq.n	800e238 <HAL_UART_IRQHandler+0xbc>
 800e214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d00b      	beq.n	800e238 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	2201      	movs	r2, #1
 800e226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e22e:	f043 0201 	orr.w	r2, r3, #1
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e23c:	f003 0302 	and.w	r3, r3, #2
 800e240:	2b00      	cmp	r3, #0
 800e242:	d011      	beq.n	800e268 <HAL_UART_IRQHandler+0xec>
 800e244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e248:	f003 0301 	and.w	r3, r3, #1
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d00b      	beq.n	800e268 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	2202      	movs	r2, #2
 800e256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e25e:	f043 0204 	orr.w	r2, r3, #4
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e26c:	f003 0304 	and.w	r3, r3, #4
 800e270:	2b00      	cmp	r3, #0
 800e272:	d011      	beq.n	800e298 <HAL_UART_IRQHandler+0x11c>
 800e274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e278:	f003 0301 	and.w	r3, r3, #1
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d00b      	beq.n	800e298 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	2204      	movs	r2, #4
 800e286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e28e:	f043 0202 	orr.w	r2, r3, #2
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e29c:	f003 0308 	and.w	r3, r3, #8
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d017      	beq.n	800e2d4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e2a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2a8:	f003 0320 	and.w	r3, r3, #32
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d105      	bne.n	800e2bc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e2b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d00b      	beq.n	800e2d4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	2208      	movs	r2, #8
 800e2c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2ca:	f043 0208 	orr.w	r2, r3, #8
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e2d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d012      	beq.n	800e306 <HAL_UART_IRQHandler+0x18a>
 800e2e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d00c      	beq.n	800e306 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e2f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2fc:	f043 0220 	orr.w	r2, r3, #32
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	f000 820c 	beq.w	800e72a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e316:	f003 0320 	and.w	r3, r3, #32
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d00d      	beq.n	800e33a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e31e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e322:	f003 0320 	and.w	r3, r3, #32
 800e326:	2b00      	cmp	r3, #0
 800e328:	d007      	beq.n	800e33a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d003      	beq.n	800e33a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e340:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	689b      	ldr	r3, [r3, #8]
 800e34a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e34e:	2b40      	cmp	r3, #64	; 0x40
 800e350:	d005      	beq.n	800e35e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e352:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e356:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d04f      	beq.n	800e3fe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f000 ff5c 	bl	800f21c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	689b      	ldr	r3, [r3, #8]
 800e36a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e36e:	2b40      	cmp	r3, #64	; 0x40
 800e370:	d141      	bne.n	800e3f6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	3308      	adds	r3, #8
 800e378:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e37c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e380:	e853 3f00 	ldrex	r3, [r3]
 800e384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e388:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e38c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e390:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	3308      	adds	r3, #8
 800e39a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e39e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e3a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e3aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e3ae:	e841 2300 	strex	r3, r2, [r1]
 800e3b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e3b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d1d9      	bne.n	800e372 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d013      	beq.n	800e3ee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3ca:	4a13      	ldr	r2, [pc, #76]	; (800e418 <HAL_UART_IRQHandler+0x29c>)
 800e3cc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7f9 fd92 	bl	8007efc <HAL_DMA_Abort_IT>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d017      	beq.n	800e40e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3e4:	687a      	ldr	r2, [r7, #4]
 800e3e6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800e3e8:	4610      	mov	r0, r2
 800e3ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3ec:	e00f      	b.n	800e40e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f7f4 ffd6 	bl	80033a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3f4:	e00b      	b.n	800e40e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f7f4 ffd2 	bl	80033a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3fc:	e007      	b.n	800e40e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f7f4 ffce 	bl	80033a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2200      	movs	r2, #0
 800e408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800e40c:	e18d      	b.n	800e72a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e40e:	bf00      	nop
    return;
 800e410:	e18b      	b.n	800e72a <HAL_UART_IRQHandler+0x5ae>
 800e412:	bf00      	nop
 800e414:	04000120 	.word	0x04000120
 800e418:	0800f415 	.word	0x0800f415

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e420:	2b01      	cmp	r3, #1
 800e422:	f040 8146 	bne.w	800e6b2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e42a:	f003 0310 	and.w	r3, r3, #16
 800e42e:	2b00      	cmp	r3, #0
 800e430:	f000 813f 	beq.w	800e6b2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e438:	f003 0310 	and.w	r3, r3, #16
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	f000 8138 	beq.w	800e6b2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	2210      	movs	r2, #16
 800e448:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	689b      	ldr	r3, [r3, #8]
 800e450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e454:	2b40      	cmp	r3, #64	; 0x40
 800e456:	f040 80b4 	bne.w	800e5c2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	685b      	ldr	r3, [r3, #4]
 800e462:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e466:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	f000 815f 	beq.w	800e72e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e476:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e47a:	429a      	cmp	r2, r3
 800e47c:	f080 8157 	bcs.w	800e72e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e486:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f003 0320 	and.w	r3, r3, #32
 800e496:	2b00      	cmp	r3, #0
 800e498:	f040 8085 	bne.w	800e5a6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e4a8:	e853 3f00 	ldrex	r3, [r3]
 800e4ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e4b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e4b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e4b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	461a      	mov	r2, r3
 800e4c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e4c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e4ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e4d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e4d6:	e841 2300 	strex	r3, r2, [r1]
 800e4da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e4de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d1da      	bne.n	800e49c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	3308      	adds	r3, #8
 800e4ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4f0:	e853 3f00 	ldrex	r3, [r3]
 800e4f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e4f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e4f8:	f023 0301 	bic.w	r3, r3, #1
 800e4fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	3308      	adds	r3, #8
 800e506:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e50a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e50e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e510:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e512:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e516:	e841 2300 	strex	r3, r2, [r1]
 800e51a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e51c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d1e1      	bne.n	800e4e6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	3308      	adds	r3, #8
 800e528:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e52a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e52c:	e853 3f00 	ldrex	r3, [r3]
 800e530:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e538:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	3308      	adds	r3, #8
 800e542:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e546:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e548:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e54a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e54c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e54e:	e841 2300 	strex	r3, r2, [r1]
 800e552:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e556:	2b00      	cmp	r3, #0
 800e558:	d1e3      	bne.n	800e522 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2220      	movs	r2, #32
 800e55e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2200      	movs	r2, #0
 800e564:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e56c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e56e:	e853 3f00 	ldrex	r3, [r3]
 800e572:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e576:	f023 0310 	bic.w	r3, r3, #16
 800e57a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	461a      	mov	r2, r3
 800e584:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e588:	65bb      	str	r3, [r7, #88]	; 0x58
 800e58a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e58c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e58e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e590:	e841 2300 	strex	r3, r2, [r1]
 800e594:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d1e4      	bne.n	800e566 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7f9 fc6d 	bl	8007e80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e5b2:	b29b      	uxth	r3, r3
 800e5b4:	1ad3      	subs	r3, r2, r3
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f000 f8ca 	bl	800e754 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e5c0:	e0b5      	b.n	800e72e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	1ad3      	subs	r3, r2, r3
 800e5d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	f000 80a7 	beq.w	800e732 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800e5e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	f000 80a2 	beq.w	800e732 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f6:	e853 3f00 	ldrex	r3, [r3]
 800e5fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e5fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e602:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	461a      	mov	r2, r3
 800e60c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e610:	647b      	str	r3, [r7, #68]	; 0x44
 800e612:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e614:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e616:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e618:	e841 2300 	strex	r3, r2, [r1]
 800e61c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e61e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e620:	2b00      	cmp	r3, #0
 800e622:	d1e4      	bne.n	800e5ee <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	3308      	adds	r3, #8
 800e62a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62e:	e853 3f00 	ldrex	r3, [r3]
 800e632:	623b      	str	r3, [r7, #32]
   return(result);
 800e634:	6a3b      	ldr	r3, [r7, #32]
 800e636:	f023 0301 	bic.w	r3, r3, #1
 800e63a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	3308      	adds	r3, #8
 800e644:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e648:	633a      	str	r2, [r7, #48]	; 0x30
 800e64a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e64c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e64e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e650:	e841 2300 	strex	r3, r2, [r1]
 800e654:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d1e3      	bne.n	800e624 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2220      	movs	r2, #32
 800e660:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2200      	movs	r2, #0
 800e666:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2200      	movs	r2, #0
 800e66c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	e853 3f00 	ldrex	r3, [r3]
 800e67a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f023 0310 	bic.w	r3, r3, #16
 800e682:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	461a      	mov	r2, r3
 800e68c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e690:	61fb      	str	r3, [r7, #28]
 800e692:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e694:	69b9      	ldr	r1, [r7, #24]
 800e696:	69fa      	ldr	r2, [r7, #28]
 800e698:	e841 2300 	strex	r3, r2, [r1]
 800e69c:	617b      	str	r3, [r7, #20]
   return(result);
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d1e4      	bne.n	800e66e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e6a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e6a8:	4619      	mov	r1, r3
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 f852 	bl	800e754 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e6b0:	e03f      	b.n	800e732 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e6b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00e      	beq.n	800e6dc <HAL_UART_IRQHandler+0x560>
 800e6be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d008      	beq.n	800e6dc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e6d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f001 f83d 	bl	800f754 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e6da:	e02d      	b.n	800e738 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e6dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d00e      	beq.n	800e706 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e6e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d008      	beq.n	800e706 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d01c      	beq.n	800e736 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	4798      	blx	r3
    }
    return;
 800e704:	e017      	b.n	800e736 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e70a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d012      	beq.n	800e738 <HAL_UART_IRQHandler+0x5bc>
 800e712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d00c      	beq.n	800e738 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f000 fe8e 	bl	800f440 <UART_EndTransmit_IT>
    return;
 800e724:	e008      	b.n	800e738 <HAL_UART_IRQHandler+0x5bc>
      return;
 800e726:	bf00      	nop
 800e728:	e006      	b.n	800e738 <HAL_UART_IRQHandler+0x5bc>
    return;
 800e72a:	bf00      	nop
 800e72c:	e004      	b.n	800e738 <HAL_UART_IRQHandler+0x5bc>
      return;
 800e72e:	bf00      	nop
 800e730:	e002      	b.n	800e738 <HAL_UART_IRQHandler+0x5bc>
      return;
 800e732:	bf00      	nop
 800e734:	e000      	b.n	800e738 <HAL_UART_IRQHandler+0x5bc>
    return;
 800e736:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800e738:	37e8      	adds	r7, #232	; 0xe8
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}
 800e73e:	bf00      	nop

0800e740 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e740:	b480      	push	{r7}
 800e742:	b083      	sub	sp, #12
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e748:	bf00      	nop
 800e74a:	370c      	adds	r7, #12
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr

0800e754 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e754:	b480      	push	{r7}
 800e756:	b083      	sub	sp, #12
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	460b      	mov	r3, r1
 800e75e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e760:	bf00      	nop
 800e762:	370c      	adds	r7, #12
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr

0800e76c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e76c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e770:	b08a      	sub	sp, #40	; 0x28
 800e772:	af00      	add	r7, sp, #0
 800e774:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e776:	2300      	movs	r3, #0
 800e778:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	689a      	ldr	r2, [r3, #8]
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	691b      	ldr	r3, [r3, #16]
 800e784:	431a      	orrs	r2, r3
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	695b      	ldr	r3, [r3, #20]
 800e78a:	431a      	orrs	r2, r3
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	69db      	ldr	r3, [r3, #28]
 800e790:	4313      	orrs	r3, r2
 800e792:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	681a      	ldr	r2, [r3, #0]
 800e79a:	4ba4      	ldr	r3, [pc, #656]	; (800ea2c <UART_SetConfig+0x2c0>)
 800e79c:	4013      	ands	r3, r2
 800e79e:	68fa      	ldr	r2, [r7, #12]
 800e7a0:	6812      	ldr	r2, [r2, #0]
 800e7a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e7a4:	430b      	orrs	r3, r1
 800e7a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	68da      	ldr	r2, [r3, #12]
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	430a      	orrs	r2, r1
 800e7bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	699b      	ldr	r3, [r3, #24]
 800e7c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	4a99      	ldr	r2, [pc, #612]	; (800ea30 <UART_SetConfig+0x2c4>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d004      	beq.n	800e7d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	6a1b      	ldr	r3, [r3, #32]
 800e7d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7d4:	4313      	orrs	r3, r2
 800e7d6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	689b      	ldr	r3, [r3, #8]
 800e7de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7e8:	430a      	orrs	r2, r1
 800e7ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	4a90      	ldr	r2, [pc, #576]	; (800ea34 <UART_SetConfig+0x2c8>)
 800e7f2:	4293      	cmp	r3, r2
 800e7f4:	d126      	bne.n	800e844 <UART_SetConfig+0xd8>
 800e7f6:	4b90      	ldr	r3, [pc, #576]	; (800ea38 <UART_SetConfig+0x2cc>)
 800e7f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7fc:	f003 0303 	and.w	r3, r3, #3
 800e800:	2b03      	cmp	r3, #3
 800e802:	d81b      	bhi.n	800e83c <UART_SetConfig+0xd0>
 800e804:	a201      	add	r2, pc, #4	; (adr r2, 800e80c <UART_SetConfig+0xa0>)
 800e806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e80a:	bf00      	nop
 800e80c:	0800e81d 	.word	0x0800e81d
 800e810:	0800e82d 	.word	0x0800e82d
 800e814:	0800e825 	.word	0x0800e825
 800e818:	0800e835 	.word	0x0800e835
 800e81c:	2301      	movs	r3, #1
 800e81e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e822:	e116      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e824:	2302      	movs	r3, #2
 800e826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e82a:	e112      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e82c:	2304      	movs	r3, #4
 800e82e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e832:	e10e      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e834:	2308      	movs	r3, #8
 800e836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e83a:	e10a      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e83c:	2310      	movs	r3, #16
 800e83e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e842:	e106      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	4a7c      	ldr	r2, [pc, #496]	; (800ea3c <UART_SetConfig+0x2d0>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d138      	bne.n	800e8c0 <UART_SetConfig+0x154>
 800e84e:	4b7a      	ldr	r3, [pc, #488]	; (800ea38 <UART_SetConfig+0x2cc>)
 800e850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e854:	f003 030c 	and.w	r3, r3, #12
 800e858:	2b0c      	cmp	r3, #12
 800e85a:	d82d      	bhi.n	800e8b8 <UART_SetConfig+0x14c>
 800e85c:	a201      	add	r2, pc, #4	; (adr r2, 800e864 <UART_SetConfig+0xf8>)
 800e85e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e862:	bf00      	nop
 800e864:	0800e899 	.word	0x0800e899
 800e868:	0800e8b9 	.word	0x0800e8b9
 800e86c:	0800e8b9 	.word	0x0800e8b9
 800e870:	0800e8b9 	.word	0x0800e8b9
 800e874:	0800e8a9 	.word	0x0800e8a9
 800e878:	0800e8b9 	.word	0x0800e8b9
 800e87c:	0800e8b9 	.word	0x0800e8b9
 800e880:	0800e8b9 	.word	0x0800e8b9
 800e884:	0800e8a1 	.word	0x0800e8a1
 800e888:	0800e8b9 	.word	0x0800e8b9
 800e88c:	0800e8b9 	.word	0x0800e8b9
 800e890:	0800e8b9 	.word	0x0800e8b9
 800e894:	0800e8b1 	.word	0x0800e8b1
 800e898:	2300      	movs	r3, #0
 800e89a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e89e:	e0d8      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e8a0:	2302      	movs	r3, #2
 800e8a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8a6:	e0d4      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e8a8:	2304      	movs	r3, #4
 800e8aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8ae:	e0d0      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e8b0:	2308      	movs	r3, #8
 800e8b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8b6:	e0cc      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e8b8:	2310      	movs	r3, #16
 800e8ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8be:	e0c8      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	4a5e      	ldr	r2, [pc, #376]	; (800ea40 <UART_SetConfig+0x2d4>)
 800e8c6:	4293      	cmp	r3, r2
 800e8c8:	d125      	bne.n	800e916 <UART_SetConfig+0x1aa>
 800e8ca:	4b5b      	ldr	r3, [pc, #364]	; (800ea38 <UART_SetConfig+0x2cc>)
 800e8cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e8d4:	2b30      	cmp	r3, #48	; 0x30
 800e8d6:	d016      	beq.n	800e906 <UART_SetConfig+0x19a>
 800e8d8:	2b30      	cmp	r3, #48	; 0x30
 800e8da:	d818      	bhi.n	800e90e <UART_SetConfig+0x1a2>
 800e8dc:	2b20      	cmp	r3, #32
 800e8de:	d00a      	beq.n	800e8f6 <UART_SetConfig+0x18a>
 800e8e0:	2b20      	cmp	r3, #32
 800e8e2:	d814      	bhi.n	800e90e <UART_SetConfig+0x1a2>
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d002      	beq.n	800e8ee <UART_SetConfig+0x182>
 800e8e8:	2b10      	cmp	r3, #16
 800e8ea:	d008      	beq.n	800e8fe <UART_SetConfig+0x192>
 800e8ec:	e00f      	b.n	800e90e <UART_SetConfig+0x1a2>
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8f4:	e0ad      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e8f6:	2302      	movs	r3, #2
 800e8f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8fc:	e0a9      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e8fe:	2304      	movs	r3, #4
 800e900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e904:	e0a5      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e906:	2308      	movs	r3, #8
 800e908:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e90c:	e0a1      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e90e:	2310      	movs	r3, #16
 800e910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e914:	e09d      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	4a4a      	ldr	r2, [pc, #296]	; (800ea44 <UART_SetConfig+0x2d8>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d125      	bne.n	800e96c <UART_SetConfig+0x200>
 800e920:	4b45      	ldr	r3, [pc, #276]	; (800ea38 <UART_SetConfig+0x2cc>)
 800e922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e926:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e92a:	2bc0      	cmp	r3, #192	; 0xc0
 800e92c:	d016      	beq.n	800e95c <UART_SetConfig+0x1f0>
 800e92e:	2bc0      	cmp	r3, #192	; 0xc0
 800e930:	d818      	bhi.n	800e964 <UART_SetConfig+0x1f8>
 800e932:	2b80      	cmp	r3, #128	; 0x80
 800e934:	d00a      	beq.n	800e94c <UART_SetConfig+0x1e0>
 800e936:	2b80      	cmp	r3, #128	; 0x80
 800e938:	d814      	bhi.n	800e964 <UART_SetConfig+0x1f8>
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d002      	beq.n	800e944 <UART_SetConfig+0x1d8>
 800e93e:	2b40      	cmp	r3, #64	; 0x40
 800e940:	d008      	beq.n	800e954 <UART_SetConfig+0x1e8>
 800e942:	e00f      	b.n	800e964 <UART_SetConfig+0x1f8>
 800e944:	2300      	movs	r3, #0
 800e946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e94a:	e082      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e94c:	2302      	movs	r3, #2
 800e94e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e952:	e07e      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e954:	2304      	movs	r3, #4
 800e956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e95a:	e07a      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e95c:	2308      	movs	r3, #8
 800e95e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e962:	e076      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e964:	2310      	movs	r3, #16
 800e966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e96a:	e072      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	4a35      	ldr	r2, [pc, #212]	; (800ea48 <UART_SetConfig+0x2dc>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d12a      	bne.n	800e9cc <UART_SetConfig+0x260>
 800e976:	4b30      	ldr	r3, [pc, #192]	; (800ea38 <UART_SetConfig+0x2cc>)
 800e978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e97c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e980:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e984:	d01a      	beq.n	800e9bc <UART_SetConfig+0x250>
 800e986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e98a:	d81b      	bhi.n	800e9c4 <UART_SetConfig+0x258>
 800e98c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e990:	d00c      	beq.n	800e9ac <UART_SetConfig+0x240>
 800e992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e996:	d815      	bhi.n	800e9c4 <UART_SetConfig+0x258>
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d003      	beq.n	800e9a4 <UART_SetConfig+0x238>
 800e99c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9a0:	d008      	beq.n	800e9b4 <UART_SetConfig+0x248>
 800e9a2:	e00f      	b.n	800e9c4 <UART_SetConfig+0x258>
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9aa:	e052      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e9ac:	2302      	movs	r3, #2
 800e9ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9b2:	e04e      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e9b4:	2304      	movs	r3, #4
 800e9b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9ba:	e04a      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e9bc:	2308      	movs	r3, #8
 800e9be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9c2:	e046      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e9c4:	2310      	movs	r3, #16
 800e9c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9ca:	e042      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	4a17      	ldr	r2, [pc, #92]	; (800ea30 <UART_SetConfig+0x2c4>)
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	d13a      	bne.n	800ea4c <UART_SetConfig+0x2e0>
 800e9d6:	4b18      	ldr	r3, [pc, #96]	; (800ea38 <UART_SetConfig+0x2cc>)
 800e9d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e9e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e9e4:	d01a      	beq.n	800ea1c <UART_SetConfig+0x2b0>
 800e9e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e9ea:	d81b      	bhi.n	800ea24 <UART_SetConfig+0x2b8>
 800e9ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e9f0:	d00c      	beq.n	800ea0c <UART_SetConfig+0x2a0>
 800e9f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e9f6:	d815      	bhi.n	800ea24 <UART_SetConfig+0x2b8>
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d003      	beq.n	800ea04 <UART_SetConfig+0x298>
 800e9fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea00:	d008      	beq.n	800ea14 <UART_SetConfig+0x2a8>
 800ea02:	e00f      	b.n	800ea24 <UART_SetConfig+0x2b8>
 800ea04:	2300      	movs	r3, #0
 800ea06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea0a:	e022      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800ea0c:	2302      	movs	r3, #2
 800ea0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea12:	e01e      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800ea14:	2304      	movs	r3, #4
 800ea16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea1a:	e01a      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800ea1c:	2308      	movs	r3, #8
 800ea1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea22:	e016      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800ea24:	2310      	movs	r3, #16
 800ea26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea2a:	e012      	b.n	800ea52 <UART_SetConfig+0x2e6>
 800ea2c:	efff69f3 	.word	0xefff69f3
 800ea30:	40008000 	.word	0x40008000
 800ea34:	40013800 	.word	0x40013800
 800ea38:	40021000 	.word	0x40021000
 800ea3c:	40004400 	.word	0x40004400
 800ea40:	40004800 	.word	0x40004800
 800ea44:	40004c00 	.word	0x40004c00
 800ea48:	40005000 	.word	0x40005000
 800ea4c:	2310      	movs	r3, #16
 800ea4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	4a9f      	ldr	r2, [pc, #636]	; (800ecd4 <UART_SetConfig+0x568>)
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	d17a      	bne.n	800eb52 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ea5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ea60:	2b08      	cmp	r3, #8
 800ea62:	d824      	bhi.n	800eaae <UART_SetConfig+0x342>
 800ea64:	a201      	add	r2, pc, #4	; (adr r2, 800ea6c <UART_SetConfig+0x300>)
 800ea66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea6a:	bf00      	nop
 800ea6c:	0800ea91 	.word	0x0800ea91
 800ea70:	0800eaaf 	.word	0x0800eaaf
 800ea74:	0800ea99 	.word	0x0800ea99
 800ea78:	0800eaaf 	.word	0x0800eaaf
 800ea7c:	0800ea9f 	.word	0x0800ea9f
 800ea80:	0800eaaf 	.word	0x0800eaaf
 800ea84:	0800eaaf 	.word	0x0800eaaf
 800ea88:	0800eaaf 	.word	0x0800eaaf
 800ea8c:	0800eaa7 	.word	0x0800eaa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea90:	f7fc f85c 	bl	800ab4c <HAL_RCC_GetPCLK1Freq>
 800ea94:	61f8      	str	r0, [r7, #28]
        break;
 800ea96:	e010      	b.n	800eaba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ea98:	4b8f      	ldr	r3, [pc, #572]	; (800ecd8 <UART_SetConfig+0x56c>)
 800ea9a:	61fb      	str	r3, [r7, #28]
        break;
 800ea9c:	e00d      	b.n	800eaba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ea9e:	f7fb ffbd 	bl	800aa1c <HAL_RCC_GetSysClockFreq>
 800eaa2:	61f8      	str	r0, [r7, #28]
        break;
 800eaa4:	e009      	b.n	800eaba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eaa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eaaa:	61fb      	str	r3, [r7, #28]
        break;
 800eaac:	e005      	b.n	800eaba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800eaae:	2300      	movs	r3, #0
 800eab0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800eab2:	2301      	movs	r3, #1
 800eab4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800eab8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800eaba:	69fb      	ldr	r3, [r7, #28]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	f000 80fb 	beq.w	800ecb8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	685a      	ldr	r2, [r3, #4]
 800eac6:	4613      	mov	r3, r2
 800eac8:	005b      	lsls	r3, r3, #1
 800eaca:	4413      	add	r3, r2
 800eacc:	69fa      	ldr	r2, [r7, #28]
 800eace:	429a      	cmp	r2, r3
 800ead0:	d305      	bcc.n	800eade <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ead8:	69fa      	ldr	r2, [r7, #28]
 800eada:	429a      	cmp	r2, r3
 800eadc:	d903      	bls.n	800eae6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800eade:	2301      	movs	r3, #1
 800eae0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800eae4:	e0e8      	b.n	800ecb8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800eae6:	69fb      	ldr	r3, [r7, #28]
 800eae8:	2200      	movs	r2, #0
 800eaea:	461c      	mov	r4, r3
 800eaec:	4615      	mov	r5, r2
 800eaee:	f04f 0200 	mov.w	r2, #0
 800eaf2:	f04f 0300 	mov.w	r3, #0
 800eaf6:	022b      	lsls	r3, r5, #8
 800eaf8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800eafc:	0222      	lsls	r2, r4, #8
 800eafe:	68f9      	ldr	r1, [r7, #12]
 800eb00:	6849      	ldr	r1, [r1, #4]
 800eb02:	0849      	lsrs	r1, r1, #1
 800eb04:	2000      	movs	r0, #0
 800eb06:	4688      	mov	r8, r1
 800eb08:	4681      	mov	r9, r0
 800eb0a:	eb12 0a08 	adds.w	sl, r2, r8
 800eb0e:	eb43 0b09 	adc.w	fp, r3, r9
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	603b      	str	r3, [r7, #0]
 800eb1a:	607a      	str	r2, [r7, #4]
 800eb1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb20:	4650      	mov	r0, sl
 800eb22:	4659      	mov	r1, fp
 800eb24:	f7f2 f900 	bl	8000d28 <__aeabi_uldivmod>
 800eb28:	4602      	mov	r2, r0
 800eb2a:	460b      	mov	r3, r1
 800eb2c:	4613      	mov	r3, r2
 800eb2e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eb30:	69bb      	ldr	r3, [r7, #24]
 800eb32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eb36:	d308      	bcc.n	800eb4a <UART_SetConfig+0x3de>
 800eb38:	69bb      	ldr	r3, [r7, #24]
 800eb3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb3e:	d204      	bcs.n	800eb4a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	69ba      	ldr	r2, [r7, #24]
 800eb46:	60da      	str	r2, [r3, #12]
 800eb48:	e0b6      	b.n	800ecb8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800eb50:	e0b2      	b.n	800ecb8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	69db      	ldr	r3, [r3, #28]
 800eb56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb5a:	d15e      	bne.n	800ec1a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800eb5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb60:	2b08      	cmp	r3, #8
 800eb62:	d828      	bhi.n	800ebb6 <UART_SetConfig+0x44a>
 800eb64:	a201      	add	r2, pc, #4	; (adr r2, 800eb6c <UART_SetConfig+0x400>)
 800eb66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb6a:	bf00      	nop
 800eb6c:	0800eb91 	.word	0x0800eb91
 800eb70:	0800eb99 	.word	0x0800eb99
 800eb74:	0800eba1 	.word	0x0800eba1
 800eb78:	0800ebb7 	.word	0x0800ebb7
 800eb7c:	0800eba7 	.word	0x0800eba7
 800eb80:	0800ebb7 	.word	0x0800ebb7
 800eb84:	0800ebb7 	.word	0x0800ebb7
 800eb88:	0800ebb7 	.word	0x0800ebb7
 800eb8c:	0800ebaf 	.word	0x0800ebaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb90:	f7fb ffdc 	bl	800ab4c <HAL_RCC_GetPCLK1Freq>
 800eb94:	61f8      	str	r0, [r7, #28]
        break;
 800eb96:	e014      	b.n	800ebc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eb98:	f7fb ffee 	bl	800ab78 <HAL_RCC_GetPCLK2Freq>
 800eb9c:	61f8      	str	r0, [r7, #28]
        break;
 800eb9e:	e010      	b.n	800ebc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800eba0:	4b4d      	ldr	r3, [pc, #308]	; (800ecd8 <UART_SetConfig+0x56c>)
 800eba2:	61fb      	str	r3, [r7, #28]
        break;
 800eba4:	e00d      	b.n	800ebc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800eba6:	f7fb ff39 	bl	800aa1c <HAL_RCC_GetSysClockFreq>
 800ebaa:	61f8      	str	r0, [r7, #28]
        break;
 800ebac:	e009      	b.n	800ebc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ebae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebb2:	61fb      	str	r3, [r7, #28]
        break;
 800ebb4:	e005      	b.n	800ebc2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ebba:	2301      	movs	r3, #1
 800ebbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ebc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ebc2:	69fb      	ldr	r3, [r7, #28]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d077      	beq.n	800ecb8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ebc8:	69fb      	ldr	r3, [r7, #28]
 800ebca:	005a      	lsls	r2, r3, #1
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	085b      	lsrs	r3, r3, #1
 800ebd2:	441a      	add	r2, r3
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebdc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ebde:	69bb      	ldr	r3, [r7, #24]
 800ebe0:	2b0f      	cmp	r3, #15
 800ebe2:	d916      	bls.n	800ec12 <UART_SetConfig+0x4a6>
 800ebe4:	69bb      	ldr	r3, [r7, #24]
 800ebe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebea:	d212      	bcs.n	800ec12 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ebec:	69bb      	ldr	r3, [r7, #24]
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	f023 030f 	bic.w	r3, r3, #15
 800ebf4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ebf6:	69bb      	ldr	r3, [r7, #24]
 800ebf8:	085b      	lsrs	r3, r3, #1
 800ebfa:	b29b      	uxth	r3, r3
 800ebfc:	f003 0307 	and.w	r3, r3, #7
 800ec00:	b29a      	uxth	r2, r3
 800ec02:	8afb      	ldrh	r3, [r7, #22]
 800ec04:	4313      	orrs	r3, r2
 800ec06:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	8afa      	ldrh	r2, [r7, #22]
 800ec0e:	60da      	str	r2, [r3, #12]
 800ec10:	e052      	b.n	800ecb8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800ec12:	2301      	movs	r3, #1
 800ec14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ec18:	e04e      	b.n	800ecb8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ec1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec1e:	2b08      	cmp	r3, #8
 800ec20:	d827      	bhi.n	800ec72 <UART_SetConfig+0x506>
 800ec22:	a201      	add	r2, pc, #4	; (adr r2, 800ec28 <UART_SetConfig+0x4bc>)
 800ec24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec28:	0800ec4d 	.word	0x0800ec4d
 800ec2c:	0800ec55 	.word	0x0800ec55
 800ec30:	0800ec5d 	.word	0x0800ec5d
 800ec34:	0800ec73 	.word	0x0800ec73
 800ec38:	0800ec63 	.word	0x0800ec63
 800ec3c:	0800ec73 	.word	0x0800ec73
 800ec40:	0800ec73 	.word	0x0800ec73
 800ec44:	0800ec73 	.word	0x0800ec73
 800ec48:	0800ec6b 	.word	0x0800ec6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ec4c:	f7fb ff7e 	bl	800ab4c <HAL_RCC_GetPCLK1Freq>
 800ec50:	61f8      	str	r0, [r7, #28]
        break;
 800ec52:	e014      	b.n	800ec7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ec54:	f7fb ff90 	bl	800ab78 <HAL_RCC_GetPCLK2Freq>
 800ec58:	61f8      	str	r0, [r7, #28]
        break;
 800ec5a:	e010      	b.n	800ec7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ec5c:	4b1e      	ldr	r3, [pc, #120]	; (800ecd8 <UART_SetConfig+0x56c>)
 800ec5e:	61fb      	str	r3, [r7, #28]
        break;
 800ec60:	e00d      	b.n	800ec7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ec62:	f7fb fedb 	bl	800aa1c <HAL_RCC_GetSysClockFreq>
 800ec66:	61f8      	str	r0, [r7, #28]
        break;
 800ec68:	e009      	b.n	800ec7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec6e:	61fb      	str	r3, [r7, #28]
        break;
 800ec70:	e005      	b.n	800ec7e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800ec72:	2300      	movs	r3, #0
 800ec74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ec76:	2301      	movs	r3, #1
 800ec78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ec7c:	bf00      	nop
    }

    if (pclk != 0U)
 800ec7e:	69fb      	ldr	r3, [r7, #28]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d019      	beq.n	800ecb8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	085a      	lsrs	r2, r3, #1
 800ec8a:	69fb      	ldr	r3, [r7, #28]
 800ec8c:	441a      	add	r2, r3
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	685b      	ldr	r3, [r3, #4]
 800ec92:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec96:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec98:	69bb      	ldr	r3, [r7, #24]
 800ec9a:	2b0f      	cmp	r3, #15
 800ec9c:	d909      	bls.n	800ecb2 <UART_SetConfig+0x546>
 800ec9e:	69bb      	ldr	r3, [r7, #24]
 800eca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eca4:	d205      	bcs.n	800ecb2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eca6:	69bb      	ldr	r3, [r7, #24]
 800eca8:	b29a      	uxth	r2, r3
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	60da      	str	r2, [r3, #12]
 800ecb0:	e002      	b.n	800ecb8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ecc4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3728      	adds	r7, #40	; 0x28
 800eccc:	46bd      	mov	sp, r7
 800ecce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ecd2:	bf00      	nop
 800ecd4:	40008000 	.word	0x40008000
 800ecd8:	00f42400 	.word	0x00f42400

0800ecdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b083      	sub	sp, #12
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ece8:	f003 0301 	and.w	r3, r3, #1
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d00a      	beq.n	800ed06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	685b      	ldr	r3, [r3, #4]
 800ecf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	430a      	orrs	r2, r1
 800ed04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed0a:	f003 0302 	and.w	r3, r3, #2
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d00a      	beq.n	800ed28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	685b      	ldr	r3, [r3, #4]
 800ed18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	430a      	orrs	r2, r1
 800ed26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed2c:	f003 0304 	and.w	r3, r3, #4
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d00a      	beq.n	800ed4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	685b      	ldr	r3, [r3, #4]
 800ed3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	430a      	orrs	r2, r1
 800ed48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed4e:	f003 0308 	and.w	r3, r3, #8
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d00a      	beq.n	800ed6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	685b      	ldr	r3, [r3, #4]
 800ed5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	430a      	orrs	r2, r1
 800ed6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed70:	f003 0310 	and.w	r3, r3, #16
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d00a      	beq.n	800ed8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	689b      	ldr	r3, [r3, #8]
 800ed7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	430a      	orrs	r2, r1
 800ed8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed92:	f003 0320 	and.w	r3, r3, #32
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d00a      	beq.n	800edb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	689b      	ldr	r3, [r3, #8]
 800eda0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	430a      	orrs	r2, r1
 800edae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d01a      	beq.n	800edf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	685b      	ldr	r3, [r3, #4]
 800edc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	430a      	orrs	r2, r1
 800edd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800edda:	d10a      	bne.n	800edf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	685b      	ldr	r3, [r3, #4]
 800ede2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	430a      	orrs	r2, r1
 800edf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d00a      	beq.n	800ee14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	685b      	ldr	r3, [r3, #4]
 800ee04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	430a      	orrs	r2, r1
 800ee12:	605a      	str	r2, [r3, #4]
  }
}
 800ee14:	bf00      	nop
 800ee16:	370c      	adds	r7, #12
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1e:	4770      	bx	lr

0800ee20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b086      	sub	sp, #24
 800ee24:	af02      	add	r7, sp, #8
 800ee26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ee30:	f7f8 fdfc 	bl	8007a2c <HAL_GetTick>
 800ee34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	f003 0308 	and.w	r3, r3, #8
 800ee40:	2b08      	cmp	r3, #8
 800ee42:	d10e      	bne.n	800ee62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee48:	9300      	str	r3, [sp, #0]
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f000 f82d 	bl	800eeb2 <UART_WaitOnFlagUntilTimeout>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d001      	beq.n	800ee62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee5e:	2303      	movs	r3, #3
 800ee60:	e023      	b.n	800eeaa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f003 0304 	and.w	r3, r3, #4
 800ee6c:	2b04      	cmp	r3, #4
 800ee6e:	d10e      	bne.n	800ee8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee74:	9300      	str	r3, [sp, #0]
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f000 f817 	bl	800eeb2 <UART_WaitOnFlagUntilTimeout>
 800ee84:	4603      	mov	r3, r0
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d001      	beq.n	800ee8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee8a:	2303      	movs	r3, #3
 800ee8c:	e00d      	b.n	800eeaa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2220      	movs	r2, #32
 800ee92:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2220      	movs	r2, #32
 800ee98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2200      	movs	r2, #0
 800eea4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800eea8:	2300      	movs	r3, #0
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3710      	adds	r7, #16
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}

0800eeb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eeb2:	b580      	push	{r7, lr}
 800eeb4:	b09c      	sub	sp, #112	; 0x70
 800eeb6:	af00      	add	r7, sp, #0
 800eeb8:	60f8      	str	r0, [r7, #12]
 800eeba:	60b9      	str	r1, [r7, #8]
 800eebc:	603b      	str	r3, [r7, #0]
 800eebe:	4613      	mov	r3, r2
 800eec0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eec2:	e0a5      	b.n	800f010 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eeca:	f000 80a1 	beq.w	800f010 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eece:	f7f8 fdad 	bl	8007a2c <HAL_GetTick>
 800eed2:	4602      	mov	r2, r0
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	1ad3      	subs	r3, r2, r3
 800eed8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800eeda:	429a      	cmp	r2, r3
 800eedc:	d302      	bcc.n	800eee4 <UART_WaitOnFlagUntilTimeout+0x32>
 800eede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d13e      	bne.n	800ef62 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eeec:	e853 3f00 	ldrex	r3, [r3]
 800eef0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800eef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eef4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800eef8:	667b      	str	r3, [r7, #100]	; 0x64
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	461a      	mov	r2, r3
 800ef00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef02:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ef04:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ef0a:	e841 2300 	strex	r3, r2, [r1]
 800ef0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ef10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d1e6      	bne.n	800eee4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	3308      	adds	r3, #8
 800ef1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef20:	e853 3f00 	ldrex	r3, [r3]
 800ef24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ef26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef28:	f023 0301 	bic.w	r3, r3, #1
 800ef2c:	663b      	str	r3, [r7, #96]	; 0x60
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	3308      	adds	r3, #8
 800ef34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ef36:	64ba      	str	r2, [r7, #72]	; 0x48
 800ef38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef3e:	e841 2300 	strex	r3, r2, [r1]
 800ef42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ef44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d1e5      	bne.n	800ef16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	2220      	movs	r2, #32
 800ef4e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	2220      	movs	r2, #32
 800ef54:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ef5e:	2303      	movs	r3, #3
 800ef60:	e067      	b.n	800f032 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f003 0304 	and.w	r3, r3, #4
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d04f      	beq.n	800f010 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	69db      	ldr	r3, [r3, #28]
 800ef76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef7e:	d147      	bne.n	800f010 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ef88:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef92:	e853 3f00 	ldrex	r3, [r3]
 800ef96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ef98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ef9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	461a      	mov	r2, r3
 800efa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800efa8:	637b      	str	r3, [r7, #52]	; 0x34
 800efaa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800efae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efb0:	e841 2300 	strex	r3, r2, [r1]
 800efb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800efb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d1e6      	bne.n	800ef8a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	3308      	adds	r3, #8
 800efc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	e853 3f00 	ldrex	r3, [r3]
 800efca:	613b      	str	r3, [r7, #16]
   return(result);
 800efcc:	693b      	ldr	r3, [r7, #16]
 800efce:	f023 0301 	bic.w	r3, r3, #1
 800efd2:	66bb      	str	r3, [r7, #104]	; 0x68
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	3308      	adds	r3, #8
 800efda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800efdc:	623a      	str	r2, [r7, #32]
 800efde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efe0:	69f9      	ldr	r1, [r7, #28]
 800efe2:	6a3a      	ldr	r2, [r7, #32]
 800efe4:	e841 2300 	strex	r3, r2, [r1]
 800efe8:	61bb      	str	r3, [r7, #24]
   return(result);
 800efea:	69bb      	ldr	r3, [r7, #24]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d1e5      	bne.n	800efbc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	2220      	movs	r2, #32
 800eff4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	2220      	movs	r2, #32
 800effa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	2220      	movs	r2, #32
 800f000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2200      	movs	r2, #0
 800f008:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800f00c:	2303      	movs	r3, #3
 800f00e:	e010      	b.n	800f032 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	69da      	ldr	r2, [r3, #28]
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	4013      	ands	r3, r2
 800f01a:	68ba      	ldr	r2, [r7, #8]
 800f01c:	429a      	cmp	r2, r3
 800f01e:	bf0c      	ite	eq
 800f020:	2301      	moveq	r3, #1
 800f022:	2300      	movne	r3, #0
 800f024:	b2db      	uxtb	r3, r3
 800f026:	461a      	mov	r2, r3
 800f028:	79fb      	ldrb	r3, [r7, #7]
 800f02a:	429a      	cmp	r2, r3
 800f02c:	f43f af4a 	beq.w	800eec4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f030:	2300      	movs	r3, #0
}
 800f032:	4618      	mov	r0, r3
 800f034:	3770      	adds	r7, #112	; 0x70
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}
	...

0800f03c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f03c:	b480      	push	{r7}
 800f03e:	b097      	sub	sp, #92	; 0x5c
 800f040:	af00      	add	r7, sp, #0
 800f042:	60f8      	str	r0, [r7, #12]
 800f044:	60b9      	str	r1, [r7, #8]
 800f046:	4613      	mov	r3, r2
 800f048:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	68ba      	ldr	r2, [r7, #8]
 800f04e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	88fa      	ldrh	r2, [r7, #6]
 800f054:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	88fa      	ldrh	r2, [r7, #6]
 800f05c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	2200      	movs	r2, #0
 800f064:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	689b      	ldr	r3, [r3, #8]
 800f06a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f06e:	d10e      	bne.n	800f08e <UART_Start_Receive_IT+0x52>
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	691b      	ldr	r3, [r3, #16]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d105      	bne.n	800f084 <UART_Start_Receive_IT+0x48>
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f07e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f082:	e02d      	b.n	800f0e0 <UART_Start_Receive_IT+0xa4>
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	22ff      	movs	r2, #255	; 0xff
 800f088:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f08c:	e028      	b.n	800f0e0 <UART_Start_Receive_IT+0xa4>
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	689b      	ldr	r3, [r3, #8]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d10d      	bne.n	800f0b2 <UART_Start_Receive_IT+0x76>
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	691b      	ldr	r3, [r3, #16]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d104      	bne.n	800f0a8 <UART_Start_Receive_IT+0x6c>
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	22ff      	movs	r2, #255	; 0xff
 800f0a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f0a6:	e01b      	b.n	800f0e0 <UART_Start_Receive_IT+0xa4>
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	227f      	movs	r2, #127	; 0x7f
 800f0ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f0b0:	e016      	b.n	800f0e0 <UART_Start_Receive_IT+0xa4>
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	689b      	ldr	r3, [r3, #8]
 800f0b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f0ba:	d10d      	bne.n	800f0d8 <UART_Start_Receive_IT+0x9c>
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	691b      	ldr	r3, [r3, #16]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d104      	bne.n	800f0ce <UART_Start_Receive_IT+0x92>
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	227f      	movs	r2, #127	; 0x7f
 800f0c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f0cc:	e008      	b.n	800f0e0 <UART_Start_Receive_IT+0xa4>
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	223f      	movs	r2, #63	; 0x3f
 800f0d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f0d6:	e003      	b.n	800f0e0 <UART_Start_Receive_IT+0xa4>
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	2222      	movs	r2, #34	; 0x22
 800f0ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	3308      	adds	r3, #8
 800f0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0f8:	e853 3f00 	ldrex	r3, [r3]
 800f0fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f100:	f043 0301 	orr.w	r3, r3, #1
 800f104:	657b      	str	r3, [r7, #84]	; 0x54
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	3308      	adds	r3, #8
 800f10c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f10e:	64ba      	str	r2, [r7, #72]	; 0x48
 800f110:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f112:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f114:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f116:	e841 2300 	strex	r3, r2, [r1]
 800f11a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f11c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d1e5      	bne.n	800f0ee <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	689b      	ldr	r3, [r3, #8]
 800f126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f12a:	d107      	bne.n	800f13c <UART_Start_Receive_IT+0x100>
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	691b      	ldr	r3, [r3, #16]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d103      	bne.n	800f13c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	4a24      	ldr	r2, [pc, #144]	; (800f1c8 <UART_Start_Receive_IT+0x18c>)
 800f138:	665a      	str	r2, [r3, #100]	; 0x64
 800f13a:	e002      	b.n	800f142 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	4a23      	ldr	r2, [pc, #140]	; (800f1cc <UART_Start_Receive_IT+0x190>)
 800f140:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	2200      	movs	r2, #0
 800f146:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	691b      	ldr	r3, [r3, #16]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d019      	beq.n	800f186 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f15a:	e853 3f00 	ldrex	r3, [r3]
 800f15e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f162:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f166:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	461a      	mov	r2, r3
 800f16e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f170:	637b      	str	r3, [r7, #52]	; 0x34
 800f172:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f174:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f176:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f178:	e841 2300 	strex	r3, r2, [r1]
 800f17c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f180:	2b00      	cmp	r3, #0
 800f182:	d1e6      	bne.n	800f152 <UART_Start_Receive_IT+0x116>
 800f184:	e018      	b.n	800f1b8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	e853 3f00 	ldrex	r3, [r3]
 800f192:	613b      	str	r3, [r7, #16]
   return(result);
 800f194:	693b      	ldr	r3, [r7, #16]
 800f196:	f043 0320 	orr.w	r3, r3, #32
 800f19a:	653b      	str	r3, [r7, #80]	; 0x50
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	461a      	mov	r2, r3
 800f1a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1a4:	623b      	str	r3, [r7, #32]
 800f1a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1a8:	69f9      	ldr	r1, [r7, #28]
 800f1aa:	6a3a      	ldr	r2, [r7, #32]
 800f1ac:	e841 2300 	strex	r3, r2, [r1]
 800f1b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800f1b2:	69bb      	ldr	r3, [r7, #24]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d1e6      	bne.n	800f186 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800f1b8:	2300      	movs	r3, #0
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	375c      	adds	r7, #92	; 0x5c
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c4:	4770      	bx	lr
 800f1c6:	bf00      	nop
 800f1c8:	0800f5f5 	.word	0x0800f5f5
 800f1cc:	0800f495 	.word	0x0800f495

0800f1d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b089      	sub	sp, #36	; 0x24
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	e853 3f00 	ldrex	r3, [r3]
 800f1e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f1ec:	61fb      	str	r3, [r7, #28]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	461a      	mov	r2, r3
 800f1f4:	69fb      	ldr	r3, [r7, #28]
 800f1f6:	61bb      	str	r3, [r7, #24]
 800f1f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1fa:	6979      	ldr	r1, [r7, #20]
 800f1fc:	69ba      	ldr	r2, [r7, #24]
 800f1fe:	e841 2300 	strex	r3, r2, [r1]
 800f202:	613b      	str	r3, [r7, #16]
   return(result);
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d1e6      	bne.n	800f1d8 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	2220      	movs	r2, #32
 800f20e:	679a      	str	r2, [r3, #120]	; 0x78
}
 800f210:	bf00      	nop
 800f212:	3724      	adds	r7, #36	; 0x24
 800f214:	46bd      	mov	sp, r7
 800f216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21a:	4770      	bx	lr

0800f21c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f21c:	b480      	push	{r7}
 800f21e:	b095      	sub	sp, #84	; 0x54
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f22a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f22c:	e853 3f00 	ldrex	r3, [r3]
 800f230:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f234:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f238:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	461a      	mov	r2, r3
 800f240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f242:	643b      	str	r3, [r7, #64]	; 0x40
 800f244:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f246:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f248:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f24a:	e841 2300 	strex	r3, r2, [r1]
 800f24e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f252:	2b00      	cmp	r3, #0
 800f254:	d1e6      	bne.n	800f224 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	3308      	adds	r3, #8
 800f25c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f25e:	6a3b      	ldr	r3, [r7, #32]
 800f260:	e853 3f00 	ldrex	r3, [r3]
 800f264:	61fb      	str	r3, [r7, #28]
   return(result);
 800f266:	69fb      	ldr	r3, [r7, #28]
 800f268:	f023 0301 	bic.w	r3, r3, #1
 800f26c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	3308      	adds	r3, #8
 800f274:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f276:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f278:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f27a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f27c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f27e:	e841 2300 	strex	r3, r2, [r1]
 800f282:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f286:	2b00      	cmp	r3, #0
 800f288:	d1e5      	bne.n	800f256 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d118      	bne.n	800f2c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	e853 3f00 	ldrex	r3, [r3]
 800f29e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	f023 0310 	bic.w	r3, r3, #16
 800f2a6:	647b      	str	r3, [r7, #68]	; 0x44
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	461a      	mov	r2, r3
 800f2ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2b0:	61bb      	str	r3, [r7, #24]
 800f2b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2b4:	6979      	ldr	r1, [r7, #20]
 800f2b6:	69ba      	ldr	r2, [r7, #24]
 800f2b8:	e841 2300 	strex	r3, r2, [r1]
 800f2bc:	613b      	str	r3, [r7, #16]
   return(result);
 800f2be:	693b      	ldr	r3, [r7, #16]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d1e6      	bne.n	800f292 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2220      	movs	r2, #32
 800f2c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	665a      	str	r2, [r3, #100]	; 0x64
}
 800f2d6:	bf00      	nop
 800f2d8:	3754      	adds	r7, #84	; 0x54
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e0:	4770      	bx	lr

0800f2e2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f2e2:	b580      	push	{r7, lr}
 800f2e4:	b090      	sub	sp, #64	; 0x40
 800f2e6:	af00      	add	r7, sp, #0
 800f2e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2ee:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	f003 0320 	and.w	r3, r3, #32
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d137      	bne.n	800f36e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800f2fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f300:	2200      	movs	r2, #0
 800f302:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	3308      	adds	r3, #8
 800f30c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f310:	e853 3f00 	ldrex	r3, [r3]
 800f314:	623b      	str	r3, [r7, #32]
   return(result);
 800f316:	6a3b      	ldr	r3, [r7, #32]
 800f318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f31c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f31e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	3308      	adds	r3, #8
 800f324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f326:	633a      	str	r2, [r7, #48]	; 0x30
 800f328:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f32a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f32c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f32e:	e841 2300 	strex	r3, r2, [r1]
 800f332:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f336:	2b00      	cmp	r3, #0
 800f338:	d1e5      	bne.n	800f306 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f33a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f340:	693b      	ldr	r3, [r7, #16]
 800f342:	e853 3f00 	ldrex	r3, [r3]
 800f346:	60fb      	str	r3, [r7, #12]
   return(result);
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f34e:	637b      	str	r3, [r7, #52]	; 0x34
 800f350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	461a      	mov	r2, r3
 800f356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f358:	61fb      	str	r3, [r7, #28]
 800f35a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f35c:	69b9      	ldr	r1, [r7, #24]
 800f35e:	69fa      	ldr	r2, [r7, #28]
 800f360:	e841 2300 	strex	r3, r2, [r1]
 800f364:	617b      	str	r3, [r7, #20]
   return(result);
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d1e6      	bne.n	800f33a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f36c:	e002      	b.n	800f374 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800f36e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f370:	f7f3 fff2 	bl	8003358 <HAL_UART_TxCpltCallback>
}
 800f374:	bf00      	nop
 800f376:	3740      	adds	r7, #64	; 0x40
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b084      	sub	sp, #16
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f388:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f38a:	68f8      	ldr	r0, [r7, #12]
 800f38c:	f7ff f9d8 	bl	800e740 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f390:	bf00      	nop
 800f392:	3710      	adds	r7, #16
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}

0800f398 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b086      	sub	sp, #24
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3a4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3aa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3b0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	689b      	ldr	r3, [r3, #8]
 800f3b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3bc:	2b80      	cmp	r3, #128	; 0x80
 800f3be:	d109      	bne.n	800f3d4 <UART_DMAError+0x3c>
 800f3c0:	693b      	ldr	r3, [r7, #16]
 800f3c2:	2b21      	cmp	r3, #33	; 0x21
 800f3c4:	d106      	bne.n	800f3d4 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800f3ce:	6978      	ldr	r0, [r7, #20]
 800f3d0:	f7ff fefe 	bl	800f1d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f3d4:	697b      	ldr	r3, [r7, #20]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	689b      	ldr	r3, [r3, #8]
 800f3da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3de:	2b40      	cmp	r3, #64	; 0x40
 800f3e0:	d109      	bne.n	800f3f6 <UART_DMAError+0x5e>
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2b22      	cmp	r3, #34	; 0x22
 800f3e6:	d106      	bne.n	800f3f6 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800f3f0:	6978      	ldr	r0, [r7, #20]
 800f3f2:	f7ff ff13 	bl	800f21c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f3fc:	f043 0210 	orr.w	r2, r3, #16
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f406:	6978      	ldr	r0, [r7, #20]
 800f408:	f7f3 ffca 	bl	80033a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f40c:	bf00      	nop
 800f40e:	3718      	adds	r7, #24
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}

0800f414 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b084      	sub	sp, #16
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f420:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	2200      	movs	r2, #0
 800f426:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	2200      	movs	r2, #0
 800f42e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f432:	68f8      	ldr	r0, [r7, #12]
 800f434:	f7f3 ffb4 	bl	80033a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f438:	bf00      	nop
 800f43a:	3710      	adds	r7, #16
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}

0800f440 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b088      	sub	sp, #32
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	e853 3f00 	ldrex	r3, [r3]
 800f454:	60bb      	str	r3, [r7, #8]
   return(result);
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f45c:	61fb      	str	r3, [r7, #28]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	461a      	mov	r2, r3
 800f464:	69fb      	ldr	r3, [r7, #28]
 800f466:	61bb      	str	r3, [r7, #24]
 800f468:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f46a:	6979      	ldr	r1, [r7, #20]
 800f46c:	69ba      	ldr	r2, [r7, #24]
 800f46e:	e841 2300 	strex	r3, r2, [r1]
 800f472:	613b      	str	r3, [r7, #16]
   return(result);
 800f474:	693b      	ldr	r3, [r7, #16]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d1e6      	bne.n	800f448 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2220      	movs	r2, #32
 800f47e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2200      	movs	r2, #0
 800f484:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f7f3 ff66 	bl	8003358 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f48c:	bf00      	nop
 800f48e:	3720      	adds	r7, #32
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}

0800f494 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b096      	sub	sp, #88	; 0x58
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f4a2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4aa:	2b22      	cmp	r3, #34	; 0x22
 800f4ac:	f040 8094 	bne.w	800f5d8 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f4b6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f4ba:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f4be:	b2d9      	uxtb	r1, r3
 800f4c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f4c4:	b2da      	uxtb	r2, r3
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4ca:	400a      	ands	r2, r1
 800f4cc:	b2d2      	uxtb	r2, r2
 800f4ce:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4d4:	1c5a      	adds	r2, r3, #1
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f4e0:	b29b      	uxth	r3, r3
 800f4e2:	3b01      	subs	r3, #1
 800f4e4:	b29a      	uxth	r2, r3
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f4f2:	b29b      	uxth	r3, r3
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d179      	bne.n	800f5ec <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f500:	e853 3f00 	ldrex	r3, [r3]
 800f504:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f508:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f50c:	653b      	str	r3, [r7, #80]	; 0x50
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	461a      	mov	r2, r3
 800f514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f516:	647b      	str	r3, [r7, #68]	; 0x44
 800f518:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f51a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f51c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f51e:	e841 2300 	strex	r3, r2, [r1]
 800f522:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f526:	2b00      	cmp	r3, #0
 800f528:	d1e6      	bne.n	800f4f8 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	3308      	adds	r3, #8
 800f530:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f534:	e853 3f00 	ldrex	r3, [r3]
 800f538:	623b      	str	r3, [r7, #32]
   return(result);
 800f53a:	6a3b      	ldr	r3, [r7, #32]
 800f53c:	f023 0301 	bic.w	r3, r3, #1
 800f540:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	3308      	adds	r3, #8
 800f548:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f54a:	633a      	str	r2, [r7, #48]	; 0x30
 800f54c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f54e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f552:	e841 2300 	strex	r3, r2, [r1]
 800f556:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d1e5      	bne.n	800f52a <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2220      	movs	r2, #32
 800f562:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2200      	movs	r2, #0
 800f568:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f56e:	2b01      	cmp	r3, #1
 800f570:	d12e      	bne.n	800f5d0 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2200      	movs	r2, #0
 800f576:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	e853 3f00 	ldrex	r3, [r3]
 800f584:	60fb      	str	r3, [r7, #12]
   return(result);
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	f023 0310 	bic.w	r3, r3, #16
 800f58c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	461a      	mov	r2, r3
 800f594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f596:	61fb      	str	r3, [r7, #28]
 800f598:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f59a:	69b9      	ldr	r1, [r7, #24]
 800f59c:	69fa      	ldr	r2, [r7, #28]
 800f59e:	e841 2300 	strex	r3, r2, [r1]
 800f5a2:	617b      	str	r3, [r7, #20]
   return(result);
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d1e6      	bne.n	800f578 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	69db      	ldr	r3, [r3, #28]
 800f5b0:	f003 0310 	and.w	r3, r3, #16
 800f5b4:	2b10      	cmp	r3, #16
 800f5b6:	d103      	bne.n	800f5c0 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	2210      	movs	r2, #16
 800f5be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f5c6:	4619      	mov	r1, r3
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f7ff f8c3 	bl	800e754 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f5ce:	e00d      	b.n	800f5ec <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f7f3 ff0f 	bl	80033f4 <HAL_UART_RxCpltCallback>
}
 800f5d6:	e009      	b.n	800f5ec <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	8b1b      	ldrh	r3, [r3, #24]
 800f5de:	b29a      	uxth	r2, r3
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	f042 0208 	orr.w	r2, r2, #8
 800f5e8:	b292      	uxth	r2, r2
 800f5ea:	831a      	strh	r2, [r3, #24]
}
 800f5ec:	bf00      	nop
 800f5ee:	3758      	adds	r7, #88	; 0x58
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}

0800f5f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b096      	sub	sp, #88	; 0x58
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f602:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f60a:	2b22      	cmp	r3, #34	; 0x22
 800f60c:	f040 8094 	bne.w	800f738 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f616:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f61e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f620:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f624:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f628:	4013      	ands	r3, r2
 800f62a:	b29a      	uxth	r2, r3
 800f62c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f62e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f634:	1c9a      	adds	r2, r3, #2
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f640:	b29b      	uxth	r3, r3
 800f642:	3b01      	subs	r3, #1
 800f644:	b29a      	uxth	r2, r3
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f652:	b29b      	uxth	r3, r3
 800f654:	2b00      	cmp	r3, #0
 800f656:	d179      	bne.n	800f74c <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f660:	e853 3f00 	ldrex	r3, [r3]
 800f664:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f668:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f66c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	461a      	mov	r2, r3
 800f674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f676:	643b      	str	r3, [r7, #64]	; 0x40
 800f678:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f67a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f67c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f67e:	e841 2300 	strex	r3, r2, [r1]
 800f682:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f686:	2b00      	cmp	r3, #0
 800f688:	d1e6      	bne.n	800f658 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	3308      	adds	r3, #8
 800f690:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f692:	6a3b      	ldr	r3, [r7, #32]
 800f694:	e853 3f00 	ldrex	r3, [r3]
 800f698:	61fb      	str	r3, [r7, #28]
   return(result);
 800f69a:	69fb      	ldr	r3, [r7, #28]
 800f69c:	f023 0301 	bic.w	r3, r3, #1
 800f6a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	3308      	adds	r3, #8
 800f6a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f6aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f6ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f6b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6b2:	e841 2300 	strex	r3, r2, [r1]
 800f6b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d1e5      	bne.n	800f68a <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	2220      	movs	r2, #32
 800f6c2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f6ce:	2b01      	cmp	r3, #1
 800f6d0:	d12e      	bne.n	800f730 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	e853 3f00 	ldrex	r3, [r3]
 800f6e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	f023 0310 	bic.w	r3, r3, #16
 800f6ec:	647b      	str	r3, [r7, #68]	; 0x44
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6f6:	61bb      	str	r3, [r7, #24]
 800f6f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6fa:	6979      	ldr	r1, [r7, #20]
 800f6fc:	69ba      	ldr	r2, [r7, #24]
 800f6fe:	e841 2300 	strex	r3, r2, [r1]
 800f702:	613b      	str	r3, [r7, #16]
   return(result);
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d1e6      	bne.n	800f6d8 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	69db      	ldr	r3, [r3, #28]
 800f710:	f003 0310 	and.w	r3, r3, #16
 800f714:	2b10      	cmp	r3, #16
 800f716:	d103      	bne.n	800f720 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	2210      	movs	r2, #16
 800f71e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f726:	4619      	mov	r1, r3
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f7ff f813 	bl	800e754 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f72e:	e00d      	b.n	800f74c <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f7f3 fe5f 	bl	80033f4 <HAL_UART_RxCpltCallback>
}
 800f736:	e009      	b.n	800f74c <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	8b1b      	ldrh	r3, [r3, #24]
 800f73e:	b29a      	uxth	r2, r3
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	f042 0208 	orr.w	r2, r2, #8
 800f748:	b292      	uxth	r2, r2
 800f74a:	831a      	strh	r2, [r3, #24]
}
 800f74c:	bf00      	nop
 800f74e:	3758      	adds	r7, #88	; 0x58
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}

0800f754 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f754:	b480      	push	{r7}
 800f756:	b083      	sub	sp, #12
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f75c:	bf00      	nop
 800f75e:	370c      	adds	r7, #12
 800f760:	46bd      	mov	sp, r7
 800f762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f766:	4770      	bx	lr

0800f768 <__NVIC_SetPriority>:
{
 800f768:	b480      	push	{r7}
 800f76a:	b083      	sub	sp, #12
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	4603      	mov	r3, r0
 800f770:	6039      	str	r1, [r7, #0]
 800f772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	db0a      	blt.n	800f792 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	b2da      	uxtb	r2, r3
 800f780:	490c      	ldr	r1, [pc, #48]	; (800f7b4 <__NVIC_SetPriority+0x4c>)
 800f782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f786:	0112      	lsls	r2, r2, #4
 800f788:	b2d2      	uxtb	r2, r2
 800f78a:	440b      	add	r3, r1
 800f78c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f790:	e00a      	b.n	800f7a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	b2da      	uxtb	r2, r3
 800f796:	4908      	ldr	r1, [pc, #32]	; (800f7b8 <__NVIC_SetPriority+0x50>)
 800f798:	79fb      	ldrb	r3, [r7, #7]
 800f79a:	f003 030f 	and.w	r3, r3, #15
 800f79e:	3b04      	subs	r3, #4
 800f7a0:	0112      	lsls	r2, r2, #4
 800f7a2:	b2d2      	uxtb	r2, r2
 800f7a4:	440b      	add	r3, r1
 800f7a6:	761a      	strb	r2, [r3, #24]
}
 800f7a8:	bf00      	nop
 800f7aa:	370c      	adds	r7, #12
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b2:	4770      	bx	lr
 800f7b4:	e000e100 	.word	0xe000e100
 800f7b8:	e000ed00 	.word	0xe000ed00

0800f7bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f7c0:	4b05      	ldr	r3, [pc, #20]	; (800f7d8 <SysTick_Handler+0x1c>)
 800f7c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f7c4:	f002 fb22 	bl	8011e0c <xTaskGetSchedulerState>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	2b01      	cmp	r3, #1
 800f7cc:	d001      	beq.n	800f7d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f7ce:	f003 fa0b 	bl	8012be8 <xPortSysTickHandler>
  }
}
 800f7d2:	bf00      	nop
 800f7d4:	bd80      	pop	{r7, pc}
 800f7d6:	bf00      	nop
 800f7d8:	e000e010 	.word	0xe000e010

0800f7dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f7e0:	2100      	movs	r1, #0
 800f7e2:	f06f 0004 	mvn.w	r0, #4
 800f7e6:	f7ff ffbf 	bl	800f768 <__NVIC_SetPriority>
#endif
}
 800f7ea:	bf00      	nop
 800f7ec:	bd80      	pop	{r7, pc}
	...

0800f7f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b082      	sub	sp, #8
 800f7f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f7f6:	f3ef 8305 	mrs	r3, IPSR
 800f7fa:	603b      	str	r3, [r7, #0]
  return(result);
 800f7fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d003      	beq.n	800f80a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f802:	f06f 0305 	mvn.w	r3, #5
 800f806:	607b      	str	r3, [r7, #4]
 800f808:	e00f      	b.n	800f82a <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f80a:	4b0a      	ldr	r3, [pc, #40]	; (800f834 <osKernelInitialize+0x44>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d108      	bne.n	800f824 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 800f812:	4809      	ldr	r0, [pc, #36]	; (800f838 <osKernelInitialize+0x48>)
 800f814:	f003 fbd8 	bl	8012fc8 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 800f818:	4b06      	ldr	r3, [pc, #24]	; (800f834 <osKernelInitialize+0x44>)
 800f81a:	2201      	movs	r2, #1
 800f81c:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f81e:	2300      	movs	r3, #0
 800f820:	607b      	str	r3, [r7, #4]
 800f822:	e002      	b.n	800f82a <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 800f824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f828:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f82a:	687b      	ldr	r3, [r7, #4]
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3708      	adds	r7, #8
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}
 800f834:	200037c8 	.word	0x200037c8
 800f838:	20000174 	.word	0x20000174

0800f83c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b082      	sub	sp, #8
 800f840:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f842:	f3ef 8305 	mrs	r3, IPSR
 800f846:	603b      	str	r3, [r7, #0]
  return(result);
 800f848:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d003      	beq.n	800f856 <osKernelStart+0x1a>
    stat = osErrorISR;
 800f84e:	f06f 0305 	mvn.w	r3, #5
 800f852:	607b      	str	r3, [r7, #4]
 800f854:	e010      	b.n	800f878 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f856:	4b0b      	ldr	r3, [pc, #44]	; (800f884 <osKernelStart+0x48>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	2b01      	cmp	r3, #1
 800f85c:	d109      	bne.n	800f872 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f85e:	f7ff ffbd 	bl	800f7dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f862:	4b08      	ldr	r3, [pc, #32]	; (800f884 <osKernelStart+0x48>)
 800f864:	2202      	movs	r2, #2
 800f866:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f868:	f001 fe74 	bl	8011554 <vTaskStartScheduler>
      stat = osOK;
 800f86c:	2300      	movs	r3, #0
 800f86e:	607b      	str	r3, [r7, #4]
 800f870:	e002      	b.n	800f878 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f876:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f878:	687b      	ldr	r3, [r7, #4]
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3708      	adds	r7, #8
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	200037c8 	.word	0x200037c8

0800f888 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f888:	b580      	push	{r7, lr}
 800f88a:	b08e      	sub	sp, #56	; 0x38
 800f88c:	af04      	add	r7, sp, #16
 800f88e:	60f8      	str	r0, [r7, #12]
 800f890:	60b9      	str	r1, [r7, #8]
 800f892:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f894:	2300      	movs	r3, #0
 800f896:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f898:	f3ef 8305 	mrs	r3, IPSR
 800f89c:	617b      	str	r3, [r7, #20]
  return(result);
 800f89e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d17e      	bne.n	800f9a2 <osThreadNew+0x11a>
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d07b      	beq.n	800f9a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f8aa:	2380      	movs	r3, #128	; 0x80
 800f8ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f8ae:	2318      	movs	r3, #24
 800f8b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f8b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f8ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d045      	beq.n	800f94e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d002      	beq.n	800f8d0 <osThreadNew+0x48>
        name = attr->name;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	699b      	ldr	r3, [r3, #24]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d002      	beq.n	800f8de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	699b      	ldr	r3, [r3, #24]
 800f8dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f8de:	69fb      	ldr	r3, [r7, #28]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d008      	beq.n	800f8f6 <osThreadNew+0x6e>
 800f8e4:	69fb      	ldr	r3, [r7, #28]
 800f8e6:	2b38      	cmp	r3, #56	; 0x38
 800f8e8:	d805      	bhi.n	800f8f6 <osThreadNew+0x6e>
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	685b      	ldr	r3, [r3, #4]
 800f8ee:	f003 0301 	and.w	r3, r3, #1
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d001      	beq.n	800f8fa <osThreadNew+0x72>
        return (NULL);
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	e054      	b.n	800f9a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	695b      	ldr	r3, [r3, #20]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d003      	beq.n	800f90a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	695b      	ldr	r3, [r3, #20]
 800f906:	089b      	lsrs	r3, r3, #2
 800f908:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	689b      	ldr	r3, [r3, #8]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d00e      	beq.n	800f930 <osThreadNew+0xa8>
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	68db      	ldr	r3, [r3, #12]
 800f916:	2bbb      	cmp	r3, #187	; 0xbb
 800f918:	d90a      	bls.n	800f930 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d006      	beq.n	800f930 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	695b      	ldr	r3, [r3, #20]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d002      	beq.n	800f930 <osThreadNew+0xa8>
        mem = 1;
 800f92a:	2301      	movs	r3, #1
 800f92c:	61bb      	str	r3, [r7, #24]
 800f92e:	e010      	b.n	800f952 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	689b      	ldr	r3, [r3, #8]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d10c      	bne.n	800f952 <osThreadNew+0xca>
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	68db      	ldr	r3, [r3, #12]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d108      	bne.n	800f952 <osThreadNew+0xca>
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	691b      	ldr	r3, [r3, #16]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d104      	bne.n	800f952 <osThreadNew+0xca>
          mem = 0;
 800f948:	2300      	movs	r3, #0
 800f94a:	61bb      	str	r3, [r7, #24]
 800f94c:	e001      	b.n	800f952 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f94e:	2300      	movs	r3, #0
 800f950:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f952:	69bb      	ldr	r3, [r7, #24]
 800f954:	2b01      	cmp	r3, #1
 800f956:	d110      	bne.n	800f97a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f95c:	687a      	ldr	r2, [r7, #4]
 800f95e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f960:	9202      	str	r2, [sp, #8]
 800f962:	9301      	str	r3, [sp, #4]
 800f964:	69fb      	ldr	r3, [r7, #28]
 800f966:	9300      	str	r3, [sp, #0]
 800f968:	68bb      	ldr	r3, [r7, #8]
 800f96a:	6a3a      	ldr	r2, [r7, #32]
 800f96c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f96e:	68f8      	ldr	r0, [r7, #12]
 800f970:	f001 fbc6 	bl	8011100 <xTaskCreateStatic>
 800f974:	4603      	mov	r3, r0
 800f976:	613b      	str	r3, [r7, #16]
 800f978:	e013      	b.n	800f9a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f97a:	69bb      	ldr	r3, [r7, #24]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d110      	bne.n	800f9a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f980:	6a3b      	ldr	r3, [r7, #32]
 800f982:	b29a      	uxth	r2, r3
 800f984:	f107 0310 	add.w	r3, r7, #16
 800f988:	9301      	str	r3, [sp, #4]
 800f98a:	69fb      	ldr	r3, [r7, #28]
 800f98c:	9300      	str	r3, [sp, #0]
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f992:	68f8      	ldr	r0, [r7, #12]
 800f994:	f001 fc11 	bl	80111ba <xTaskCreate>
 800f998:	4603      	mov	r3, r0
 800f99a:	2b01      	cmp	r3, #1
 800f99c:	d001      	beq.n	800f9a2 <osThreadNew+0x11a>
            hTask = NULL;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f9a2:	693b      	ldr	r3, [r7, #16]
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3728      	adds	r7, #40	; 0x28
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}

0800f9ac <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800f9b0:	2000      	movs	r0, #0
 800f9b2:	f001 fd5d 	bl	8011470 <vTaskDelete>
#endif
  for (;;);
 800f9b6:	e7fe      	b.n	800f9b6 <osThreadExit+0xa>

0800f9b8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b08a      	sub	sp, #40	; 0x28
 800f9bc:	af02      	add	r7, sp, #8
 800f9be:	60f8      	str	r0, [r7, #12]
 800f9c0:	60b9      	str	r1, [r7, #8]
 800f9c2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9c8:	f3ef 8305 	mrs	r3, IPSR
 800f9cc:	613b      	str	r3, [r7, #16]
  return(result);
 800f9ce:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d175      	bne.n	800fac0 <osSemaphoreNew+0x108>
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d072      	beq.n	800fac0 <osSemaphoreNew+0x108>
 800f9da:	68ba      	ldr	r2, [r7, #8]
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d86e      	bhi.n	800fac0 <osSemaphoreNew+0x108>
    mem = -1;
 800f9e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f9e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d015      	beq.n	800fa1a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	689b      	ldr	r3, [r3, #8]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d006      	beq.n	800fa04 <osSemaphoreNew+0x4c>
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	68db      	ldr	r3, [r3, #12]
 800f9fa:	2b4f      	cmp	r3, #79	; 0x4f
 800f9fc:	d902      	bls.n	800fa04 <osSemaphoreNew+0x4c>
        mem = 1;
 800f9fe:	2301      	movs	r3, #1
 800fa00:	61bb      	str	r3, [r7, #24]
 800fa02:	e00c      	b.n	800fa1e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	689b      	ldr	r3, [r3, #8]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d108      	bne.n	800fa1e <osSemaphoreNew+0x66>
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	68db      	ldr	r3, [r3, #12]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d104      	bne.n	800fa1e <osSemaphoreNew+0x66>
          mem = 0;
 800fa14:	2300      	movs	r3, #0
 800fa16:	61bb      	str	r3, [r7, #24]
 800fa18:	e001      	b.n	800fa1e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800fa1e:	69bb      	ldr	r3, [r7, #24]
 800fa20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa24:	d04c      	beq.n	800fac0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d128      	bne.n	800fa7e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800fa2c:	69bb      	ldr	r3, [r7, #24]
 800fa2e:	2b01      	cmp	r3, #1
 800fa30:	d10a      	bne.n	800fa48 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	689b      	ldr	r3, [r3, #8]
 800fa36:	2203      	movs	r2, #3
 800fa38:	9200      	str	r2, [sp, #0]
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	2100      	movs	r1, #0
 800fa3e:	2001      	movs	r0, #1
 800fa40:	f000 fb7c 	bl	801013c <xQueueGenericCreateStatic>
 800fa44:	61f8      	str	r0, [r7, #28]
 800fa46:	e005      	b.n	800fa54 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800fa48:	2203      	movs	r2, #3
 800fa4a:	2100      	movs	r1, #0
 800fa4c:	2001      	movs	r0, #1
 800fa4e:	f000 fbed 	bl	801022c <xQueueGenericCreate>
 800fa52:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800fa54:	69fb      	ldr	r3, [r7, #28]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d022      	beq.n	800faa0 <osSemaphoreNew+0xe8>
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d01f      	beq.n	800faa0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800fa60:	2300      	movs	r3, #0
 800fa62:	2200      	movs	r2, #0
 800fa64:	2100      	movs	r1, #0
 800fa66:	69f8      	ldr	r0, [r7, #28]
 800fa68:	f000 fca8 	bl	80103bc <xQueueGenericSend>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	2b01      	cmp	r3, #1
 800fa70:	d016      	beq.n	800faa0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800fa72:	69f8      	ldr	r0, [r7, #28]
 800fa74:	f001 f970 	bl	8010d58 <vQueueDelete>
            hSemaphore = NULL;
 800fa78:	2300      	movs	r3, #0
 800fa7a:	61fb      	str	r3, [r7, #28]
 800fa7c:	e010      	b.n	800faa0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800fa7e:	69bb      	ldr	r3, [r7, #24]
 800fa80:	2b01      	cmp	r3, #1
 800fa82:	d108      	bne.n	800fa96 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	689b      	ldr	r3, [r3, #8]
 800fa88:	461a      	mov	r2, r3
 800fa8a:	68b9      	ldr	r1, [r7, #8]
 800fa8c:	68f8      	ldr	r0, [r7, #12]
 800fa8e:	f000 fc2a 	bl	80102e6 <xQueueCreateCountingSemaphoreStatic>
 800fa92:	61f8      	str	r0, [r7, #28]
 800fa94:	e004      	b.n	800faa0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800fa96:	68b9      	ldr	r1, [r7, #8]
 800fa98:	68f8      	ldr	r0, [r7, #12]
 800fa9a:	f000 fc5b 	bl	8010354 <xQueueCreateCountingSemaphore>
 800fa9e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800faa0:	69fb      	ldr	r3, [r7, #28]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d00c      	beq.n	800fac0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d003      	beq.n	800fab4 <osSemaphoreNew+0xfc>
          name = attr->name;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	617b      	str	r3, [r7, #20]
 800fab2:	e001      	b.n	800fab8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800fab4:	2300      	movs	r3, #0
 800fab6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800fab8:	6979      	ldr	r1, [r7, #20]
 800faba:	69f8      	ldr	r0, [r7, #28]
 800fabc:	f001 fa98 	bl	8010ff0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800fac0:	69fb      	ldr	r3, [r7, #28]
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3720      	adds	r7, #32
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}
	...

0800facc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800facc:	b580      	push	{r7, lr}
 800face:	b086      	sub	sp, #24
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800fada:	2300      	movs	r3, #0
 800fadc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d103      	bne.n	800faec <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800fae4:	f06f 0303 	mvn.w	r3, #3
 800fae8:	617b      	str	r3, [r7, #20]
 800faea:	e039      	b.n	800fb60 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800faec:	f3ef 8305 	mrs	r3, IPSR
 800faf0:	60fb      	str	r3, [r7, #12]
  return(result);
 800faf2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d022      	beq.n	800fb3e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d003      	beq.n	800fb06 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800fafe:	f06f 0303 	mvn.w	r3, #3
 800fb02:	617b      	str	r3, [r7, #20]
 800fb04:	e02c      	b.n	800fb60 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800fb06:	2300      	movs	r3, #0
 800fb08:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800fb0a:	f107 0308 	add.w	r3, r7, #8
 800fb0e:	461a      	mov	r2, r3
 800fb10:	2100      	movs	r1, #0
 800fb12:	6938      	ldr	r0, [r7, #16]
 800fb14:	f001 f864 	bl	8010be0 <xQueueReceiveFromISR>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d003      	beq.n	800fb26 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800fb1e:	f06f 0302 	mvn.w	r3, #2
 800fb22:	617b      	str	r3, [r7, #20]
 800fb24:	e01c      	b.n	800fb60 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d019      	beq.n	800fb60 <osSemaphoreAcquire+0x94>
 800fb2c:	4b0f      	ldr	r3, [pc, #60]	; (800fb6c <osSemaphoreAcquire+0xa0>)
 800fb2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb32:	601a      	str	r2, [r3, #0]
 800fb34:	f3bf 8f4f 	dsb	sy
 800fb38:	f3bf 8f6f 	isb	sy
 800fb3c:	e010      	b.n	800fb60 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800fb3e:	6839      	ldr	r1, [r7, #0]
 800fb40:	6938      	ldr	r0, [r7, #16]
 800fb42:	f000 ff41 	bl	80109c8 <xQueueSemaphoreTake>
 800fb46:	4603      	mov	r3, r0
 800fb48:	2b01      	cmp	r3, #1
 800fb4a:	d009      	beq.n	800fb60 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d003      	beq.n	800fb5a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800fb52:	f06f 0301 	mvn.w	r3, #1
 800fb56:	617b      	str	r3, [r7, #20]
 800fb58:	e002      	b.n	800fb60 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800fb5a:	f06f 0302 	mvn.w	r3, #2
 800fb5e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800fb60:	697b      	ldr	r3, [r7, #20]
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	3718      	adds	r7, #24
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}
 800fb6a:	bf00      	nop
 800fb6c:	e000ed04 	.word	0xe000ed04

0800fb70 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b086      	sub	sp, #24
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800fb80:	693b      	ldr	r3, [r7, #16]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d103      	bne.n	800fb8e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800fb86:	f06f 0303 	mvn.w	r3, #3
 800fb8a:	617b      	str	r3, [r7, #20]
 800fb8c:	e02c      	b.n	800fbe8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb8e:	f3ef 8305 	mrs	r3, IPSR
 800fb92:	60fb      	str	r3, [r7, #12]
  return(result);
 800fb94:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d01a      	beq.n	800fbd0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800fb9e:	f107 0308 	add.w	r3, r7, #8
 800fba2:	4619      	mov	r1, r3
 800fba4:	6938      	ldr	r0, [r7, #16]
 800fba6:	f000 fda2 	bl	80106ee <xQueueGiveFromISR>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	d003      	beq.n	800fbb8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800fbb0:	f06f 0302 	mvn.w	r3, #2
 800fbb4:	617b      	str	r3, [r7, #20]
 800fbb6:	e017      	b.n	800fbe8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800fbb8:	68bb      	ldr	r3, [r7, #8]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d014      	beq.n	800fbe8 <osSemaphoreRelease+0x78>
 800fbbe:	4b0d      	ldr	r3, [pc, #52]	; (800fbf4 <osSemaphoreRelease+0x84>)
 800fbc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbc4:	601a      	str	r2, [r3, #0]
 800fbc6:	f3bf 8f4f 	dsb	sy
 800fbca:	f3bf 8f6f 	isb	sy
 800fbce:	e00b      	b.n	800fbe8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	2100      	movs	r1, #0
 800fbd6:	6938      	ldr	r0, [r7, #16]
 800fbd8:	f000 fbf0 	bl	80103bc <xQueueGenericSend>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	d002      	beq.n	800fbe8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800fbe2:	f06f 0302 	mvn.w	r3, #2
 800fbe6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800fbe8:	697b      	ldr	r3, [r7, #20]
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3718      	adds	r7, #24
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}
 800fbf2:	bf00      	nop
 800fbf4:	e000ed04 	.word	0xe000ed04

0800fbf8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b08a      	sub	sp, #40	; 0x28
 800fbfc:	af02      	add	r7, sp, #8
 800fbfe:	60f8      	str	r0, [r7, #12]
 800fc00:	60b9      	str	r1, [r7, #8]
 800fc02:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800fc04:	2300      	movs	r3, #0
 800fc06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc08:	f3ef 8305 	mrs	r3, IPSR
 800fc0c:	613b      	str	r3, [r7, #16]
  return(result);
 800fc0e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d15f      	bne.n	800fcd4 <osMessageQueueNew+0xdc>
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d05c      	beq.n	800fcd4 <osMessageQueueNew+0xdc>
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d059      	beq.n	800fcd4 <osMessageQueueNew+0xdc>
    mem = -1;
 800fc20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc24:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d029      	beq.n	800fc80 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	689b      	ldr	r3, [r3, #8]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d012      	beq.n	800fc5a <osMessageQueueNew+0x62>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	68db      	ldr	r3, [r3, #12]
 800fc38:	2b4f      	cmp	r3, #79	; 0x4f
 800fc3a:	d90e      	bls.n	800fc5a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d00a      	beq.n	800fc5a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	695a      	ldr	r2, [r3, #20]
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	68b9      	ldr	r1, [r7, #8]
 800fc4c:	fb01 f303 	mul.w	r3, r1, r3
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d302      	bcc.n	800fc5a <osMessageQueueNew+0x62>
        mem = 1;
 800fc54:	2301      	movs	r3, #1
 800fc56:	61bb      	str	r3, [r7, #24]
 800fc58:	e014      	b.n	800fc84 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	689b      	ldr	r3, [r3, #8]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d110      	bne.n	800fc84 <osMessageQueueNew+0x8c>
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	68db      	ldr	r3, [r3, #12]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d10c      	bne.n	800fc84 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d108      	bne.n	800fc84 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	695b      	ldr	r3, [r3, #20]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d104      	bne.n	800fc84 <osMessageQueueNew+0x8c>
          mem = 0;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	61bb      	str	r3, [r7, #24]
 800fc7e:	e001      	b.n	800fc84 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800fc80:	2300      	movs	r3, #0
 800fc82:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fc84:	69bb      	ldr	r3, [r7, #24]
 800fc86:	2b01      	cmp	r3, #1
 800fc88:	d10b      	bne.n	800fca2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	691a      	ldr	r2, [r3, #16]
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	689b      	ldr	r3, [r3, #8]
 800fc92:	2100      	movs	r1, #0
 800fc94:	9100      	str	r1, [sp, #0]
 800fc96:	68b9      	ldr	r1, [r7, #8]
 800fc98:	68f8      	ldr	r0, [r7, #12]
 800fc9a:	f000 fa4f 	bl	801013c <xQueueGenericCreateStatic>
 800fc9e:	61f8      	str	r0, [r7, #28]
 800fca0:	e008      	b.n	800fcb4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800fca2:	69bb      	ldr	r3, [r7, #24]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d105      	bne.n	800fcb4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800fca8:	2200      	movs	r2, #0
 800fcaa:	68b9      	ldr	r1, [r7, #8]
 800fcac:	68f8      	ldr	r0, [r7, #12]
 800fcae:	f000 fabd 	bl	801022c <xQueueGenericCreate>
 800fcb2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800fcb4:	69fb      	ldr	r3, [r7, #28]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d00c      	beq.n	800fcd4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d003      	beq.n	800fcc8 <osMessageQueueNew+0xd0>
        name = attr->name;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	617b      	str	r3, [r7, #20]
 800fcc6:	e001      	b.n	800fccc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800fcc8:	2300      	movs	r3, #0
 800fcca:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800fccc:	6979      	ldr	r1, [r7, #20]
 800fcce:	69f8      	ldr	r0, [r7, #28]
 800fcd0:	f001 f98e 	bl	8010ff0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800fcd4:	69fb      	ldr	r3, [r7, #28]
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3720      	adds	r7, #32
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	bd80      	pop	{r7, pc}
	...

0800fce0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b088      	sub	sp, #32
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	60b9      	str	r1, [r7, #8]
 800fcea:	603b      	str	r3, [r7, #0]
 800fcec:	4613      	mov	r3, r2
 800fcee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fcf8:	f3ef 8305 	mrs	r3, IPSR
 800fcfc:	617b      	str	r3, [r7, #20]
  return(result);
 800fcfe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d028      	beq.n	800fd56 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fd04:	69bb      	ldr	r3, [r7, #24]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d005      	beq.n	800fd16 <osMessageQueuePut+0x36>
 800fd0a:	68bb      	ldr	r3, [r7, #8]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d002      	beq.n	800fd16 <osMessageQueuePut+0x36>
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d003      	beq.n	800fd1e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800fd16:	f06f 0303 	mvn.w	r3, #3
 800fd1a:	61fb      	str	r3, [r7, #28]
 800fd1c:	e038      	b.n	800fd90 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800fd22:	f107 0210 	add.w	r2, r7, #16
 800fd26:	2300      	movs	r3, #0
 800fd28:	68b9      	ldr	r1, [r7, #8]
 800fd2a:	69b8      	ldr	r0, [r7, #24]
 800fd2c:	f000 fc44 	bl	80105b8 <xQueueGenericSendFromISR>
 800fd30:	4603      	mov	r3, r0
 800fd32:	2b01      	cmp	r3, #1
 800fd34:	d003      	beq.n	800fd3e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800fd36:	f06f 0302 	mvn.w	r3, #2
 800fd3a:	61fb      	str	r3, [r7, #28]
 800fd3c:	e028      	b.n	800fd90 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800fd3e:	693b      	ldr	r3, [r7, #16]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d025      	beq.n	800fd90 <osMessageQueuePut+0xb0>
 800fd44:	4b15      	ldr	r3, [pc, #84]	; (800fd9c <osMessageQueuePut+0xbc>)
 800fd46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd4a:	601a      	str	r2, [r3, #0]
 800fd4c:	f3bf 8f4f 	dsb	sy
 800fd50:	f3bf 8f6f 	isb	sy
 800fd54:	e01c      	b.n	800fd90 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fd56:	69bb      	ldr	r3, [r7, #24]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d002      	beq.n	800fd62 <osMessageQueuePut+0x82>
 800fd5c:	68bb      	ldr	r3, [r7, #8]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d103      	bne.n	800fd6a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800fd62:	f06f 0303 	mvn.w	r3, #3
 800fd66:	61fb      	str	r3, [r7, #28]
 800fd68:	e012      	b.n	800fd90 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	683a      	ldr	r2, [r7, #0]
 800fd6e:	68b9      	ldr	r1, [r7, #8]
 800fd70:	69b8      	ldr	r0, [r7, #24]
 800fd72:	f000 fb23 	bl	80103bc <xQueueGenericSend>
 800fd76:	4603      	mov	r3, r0
 800fd78:	2b01      	cmp	r3, #1
 800fd7a:	d009      	beq.n	800fd90 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d003      	beq.n	800fd8a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800fd82:	f06f 0301 	mvn.w	r3, #1
 800fd86:	61fb      	str	r3, [r7, #28]
 800fd88:	e002      	b.n	800fd90 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800fd8a:	f06f 0302 	mvn.w	r3, #2
 800fd8e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800fd90:	69fb      	ldr	r3, [r7, #28]
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3720      	adds	r7, #32
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	bf00      	nop
 800fd9c:	e000ed04 	.word	0xe000ed04

0800fda0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b088      	sub	sp, #32
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	60f8      	str	r0, [r7, #12]
 800fda8:	60b9      	str	r1, [r7, #8]
 800fdaa:	607a      	str	r2, [r7, #4]
 800fdac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fdb6:	f3ef 8305 	mrs	r3, IPSR
 800fdba:	617b      	str	r3, [r7, #20]
  return(result);
 800fdbc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d028      	beq.n	800fe14 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fdc2:	69bb      	ldr	r3, [r7, #24]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d005      	beq.n	800fdd4 <osMessageQueueGet+0x34>
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d002      	beq.n	800fdd4 <osMessageQueueGet+0x34>
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d003      	beq.n	800fddc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800fdd4:	f06f 0303 	mvn.w	r3, #3
 800fdd8:	61fb      	str	r3, [r7, #28]
 800fdda:	e037      	b.n	800fe4c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800fddc:	2300      	movs	r3, #0
 800fdde:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800fde0:	f107 0310 	add.w	r3, r7, #16
 800fde4:	461a      	mov	r2, r3
 800fde6:	68b9      	ldr	r1, [r7, #8]
 800fde8:	69b8      	ldr	r0, [r7, #24]
 800fdea:	f000 fef9 	bl	8010be0 <xQueueReceiveFromISR>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	2b01      	cmp	r3, #1
 800fdf2:	d003      	beq.n	800fdfc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800fdf4:	f06f 0302 	mvn.w	r3, #2
 800fdf8:	61fb      	str	r3, [r7, #28]
 800fdfa:	e027      	b.n	800fe4c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800fdfc:	693b      	ldr	r3, [r7, #16]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d024      	beq.n	800fe4c <osMessageQueueGet+0xac>
 800fe02:	4b15      	ldr	r3, [pc, #84]	; (800fe58 <osMessageQueueGet+0xb8>)
 800fe04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe08:	601a      	str	r2, [r3, #0]
 800fe0a:	f3bf 8f4f 	dsb	sy
 800fe0e:	f3bf 8f6f 	isb	sy
 800fe12:	e01b      	b.n	800fe4c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fe14:	69bb      	ldr	r3, [r7, #24]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d002      	beq.n	800fe20 <osMessageQueueGet+0x80>
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d103      	bne.n	800fe28 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800fe20:	f06f 0303 	mvn.w	r3, #3
 800fe24:	61fb      	str	r3, [r7, #28]
 800fe26:	e011      	b.n	800fe4c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fe28:	683a      	ldr	r2, [r7, #0]
 800fe2a:	68b9      	ldr	r1, [r7, #8]
 800fe2c:	69b8      	ldr	r0, [r7, #24]
 800fe2e:	f000 fceb 	bl	8010808 <xQueueReceive>
 800fe32:	4603      	mov	r3, r0
 800fe34:	2b01      	cmp	r3, #1
 800fe36:	d009      	beq.n	800fe4c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d003      	beq.n	800fe46 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800fe3e:	f06f 0301 	mvn.w	r3, #1
 800fe42:	61fb      	str	r3, [r7, #28]
 800fe44:	e002      	b.n	800fe4c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800fe46:	f06f 0302 	mvn.w	r3, #2
 800fe4a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800fe4c:	69fb      	ldr	r3, [r7, #28]
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	3720      	adds	r7, #32
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}
 800fe56:	bf00      	nop
 800fe58:	e000ed04 	.word	0xe000ed04

0800fe5c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b086      	sub	sp, #24
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800fe68:	693b      	ldr	r3, [r7, #16]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d102      	bne.n	800fe74 <osMessageQueueGetCount+0x18>
    count = 0U;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	617b      	str	r3, [r7, #20]
 800fe72:	e00e      	b.n	800fe92 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe74:	f3ef 8305 	mrs	r3, IPSR
 800fe78:	60fb      	str	r3, [r7, #12]
  return(result);
 800fe7a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d004      	beq.n	800fe8a <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800fe80:	6938      	ldr	r0, [r7, #16]
 800fe82:	f000 ff4b 	bl	8010d1c <uxQueueMessagesWaitingFromISR>
 800fe86:	6178      	str	r0, [r7, #20]
 800fe88:	e003      	b.n	800fe92 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800fe8a:	6938      	ldr	r0, [r7, #16]
 800fe8c:	f000 ff28 	bl	8010ce0 <uxQueueMessagesWaiting>
 800fe90:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800fe92:	697b      	ldr	r3, [r7, #20]
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	3718      	adds	r7, #24
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}

0800fe9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fe9c:	b480      	push	{r7}
 800fe9e:	b085      	sub	sp, #20
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	60f8      	str	r0, [r7, #12]
 800fea4:	60b9      	str	r1, [r7, #8]
 800fea6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	4a07      	ldr	r2, [pc, #28]	; (800fec8 <vApplicationGetIdleTaskMemory+0x2c>)
 800feac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	4a06      	ldr	r2, [pc, #24]	; (800fecc <vApplicationGetIdleTaskMemory+0x30>)
 800feb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2280      	movs	r2, #128	; 0x80
 800feb8:	601a      	str	r2, [r3, #0]
}
 800feba:	bf00      	nop
 800febc:	3714      	adds	r7, #20
 800febe:	46bd      	mov	sp, r7
 800fec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec4:	4770      	bx	lr
 800fec6:	bf00      	nop
 800fec8:	200077cc 	.word	0x200077cc
 800fecc:	20007888 	.word	0x20007888

0800fed0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fed0:	b480      	push	{r7}
 800fed2:	b085      	sub	sp, #20
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	60f8      	str	r0, [r7, #12]
 800fed8:	60b9      	str	r1, [r7, #8]
 800feda:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	4a07      	ldr	r2, [pc, #28]	; (800fefc <vApplicationGetTimerTaskMemory+0x2c>)
 800fee0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	4a06      	ldr	r2, [pc, #24]	; (800ff00 <vApplicationGetTimerTaskMemory+0x30>)
 800fee6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800feee:	601a      	str	r2, [r3, #0]
}
 800fef0:	bf00      	nop
 800fef2:	3714      	adds	r7, #20
 800fef4:	46bd      	mov	sp, r7
 800fef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefa:	4770      	bx	lr
 800fefc:	20007a88 	.word	0x20007a88
 800ff00:	20007b44 	.word	0x20007b44

0800ff04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ff04:	b480      	push	{r7}
 800ff06:	b083      	sub	sp, #12
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f103 0208 	add.w	r2, r3, #8
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f103 0208 	add.w	r2, r3, #8
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f103 0208 	add.w	r2, r3, #8
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2200      	movs	r2, #0
 800ff36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ff38:	bf00      	nop
 800ff3a:	370c      	adds	r7, #12
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr

0800ff44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ff44:	b480      	push	{r7}
 800ff46:	b083      	sub	sp, #12
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2200      	movs	r2, #0
 800ff50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ff52:	bf00      	nop
 800ff54:	370c      	adds	r7, #12
 800ff56:	46bd      	mov	sp, r7
 800ff58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5c:	4770      	bx	lr

0800ff5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ff5e:	b480      	push	{r7}
 800ff60:	b085      	sub	sp, #20
 800ff62:	af00      	add	r7, sp, #0
 800ff64:	6078      	str	r0, [r7, #4]
 800ff66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	685b      	ldr	r3, [r3, #4]
 800ff6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	68fa      	ldr	r2, [r7, #12]
 800ff72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	689a      	ldr	r2, [r3, #8]
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	689b      	ldr	r3, [r3, #8]
 800ff80:	683a      	ldr	r2, [r7, #0]
 800ff82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	683a      	ldr	r2, [r7, #0]
 800ff88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	687a      	ldr	r2, [r7, #4]
 800ff8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	1c5a      	adds	r2, r3, #1
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	601a      	str	r2, [r3, #0]
}
 800ff9a:	bf00      	nop
 800ff9c:	3714      	adds	r7, #20
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa4:	4770      	bx	lr

0800ffa6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ffa6:	b480      	push	{r7}
 800ffa8:	b085      	sub	sp, #20
 800ffaa:	af00      	add	r7, sp, #0
 800ffac:	6078      	str	r0, [r7, #4]
 800ffae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ffbc:	d103      	bne.n	800ffc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	691b      	ldr	r3, [r3, #16]
 800ffc2:	60fb      	str	r3, [r7, #12]
 800ffc4:	e00c      	b.n	800ffe0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	3308      	adds	r3, #8
 800ffca:	60fb      	str	r3, [r7, #12]
 800ffcc:	e002      	b.n	800ffd4 <vListInsert+0x2e>
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	685b      	ldr	r3, [r3, #4]
 800ffd2:	60fb      	str	r3, [r7, #12]
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	685b      	ldr	r3, [r3, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	68ba      	ldr	r2, [r7, #8]
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d2f6      	bcs.n	800ffce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	685a      	ldr	r2, [r3, #4]
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	685b      	ldr	r3, [r3, #4]
 800ffec:	683a      	ldr	r2, [r7, #0]
 800ffee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	68fa      	ldr	r2, [r7, #12]
 800fff4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	683a      	ldr	r2, [r7, #0]
 800fffa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	687a      	ldr	r2, [r7, #4]
 8010000:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	1c5a      	adds	r2, r3, #1
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	601a      	str	r2, [r3, #0]
}
 801000c:	bf00      	nop
 801000e:	3714      	adds	r7, #20
 8010010:	46bd      	mov	sp, r7
 8010012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010016:	4770      	bx	lr

08010018 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010018:	b480      	push	{r7}
 801001a:	b085      	sub	sp, #20
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	691b      	ldr	r3, [r3, #16]
 8010024:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	6892      	ldr	r2, [r2, #8]
 801002e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	689b      	ldr	r3, [r3, #8]
 8010034:	687a      	ldr	r2, [r7, #4]
 8010036:	6852      	ldr	r2, [r2, #4]
 8010038:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	685b      	ldr	r3, [r3, #4]
 801003e:	687a      	ldr	r2, [r7, #4]
 8010040:	429a      	cmp	r2, r3
 8010042:	d103      	bne.n	801004c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	689a      	ldr	r2, [r3, #8]
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2200      	movs	r2, #0
 8010050:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	1e5a      	subs	r2, r3, #1
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	681b      	ldr	r3, [r3, #0]
}
 8010060:	4618      	mov	r0, r3
 8010062:	3714      	adds	r7, #20
 8010064:	46bd      	mov	sp, r7
 8010066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006a:	4770      	bx	lr

0801006c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b084      	sub	sp, #16
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
 8010074:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d10a      	bne.n	8010096 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010084:	f383 8811 	msr	BASEPRI, r3
 8010088:	f3bf 8f6f 	isb	sy
 801008c:	f3bf 8f4f 	dsb	sy
 8010090:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010092:	bf00      	nop
 8010094:	e7fe      	b.n	8010094 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010096:	f002 fd15 	bl	8012ac4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	681a      	ldr	r2, [r3, #0]
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100a2:	68f9      	ldr	r1, [r7, #12]
 80100a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80100a6:	fb01 f303 	mul.w	r3, r1, r3
 80100aa:	441a      	add	r2, r3
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	2200      	movs	r2, #0
 80100b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	681a      	ldr	r2, [r3, #0]
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100c6:	3b01      	subs	r3, #1
 80100c8:	68f9      	ldr	r1, [r7, #12]
 80100ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80100cc:	fb01 f303 	mul.w	r3, r1, r3
 80100d0:	441a      	add	r2, r3
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	22ff      	movs	r2, #255	; 0xff
 80100da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	22ff      	movs	r2, #255	; 0xff
 80100e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d114      	bne.n	8010116 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	691b      	ldr	r3, [r3, #16]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d01a      	beq.n	801012a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	3310      	adds	r3, #16
 80100f8:	4618      	mov	r0, r3
 80100fa:	f001 fcc5 	bl	8011a88 <xTaskRemoveFromEventList>
 80100fe:	4603      	mov	r3, r0
 8010100:	2b00      	cmp	r3, #0
 8010102:	d012      	beq.n	801012a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010104:	4b0c      	ldr	r3, [pc, #48]	; (8010138 <xQueueGenericReset+0xcc>)
 8010106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801010a:	601a      	str	r2, [r3, #0]
 801010c:	f3bf 8f4f 	dsb	sy
 8010110:	f3bf 8f6f 	isb	sy
 8010114:	e009      	b.n	801012a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	3310      	adds	r3, #16
 801011a:	4618      	mov	r0, r3
 801011c:	f7ff fef2 	bl	800ff04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	3324      	adds	r3, #36	; 0x24
 8010124:	4618      	mov	r0, r3
 8010126:	f7ff feed 	bl	800ff04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801012a:	f002 fcfb 	bl	8012b24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801012e:	2301      	movs	r3, #1
}
 8010130:	4618      	mov	r0, r3
 8010132:	3710      	adds	r7, #16
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}
 8010138:	e000ed04 	.word	0xe000ed04

0801013c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801013c:	b580      	push	{r7, lr}
 801013e:	b08e      	sub	sp, #56	; 0x38
 8010140:	af02      	add	r7, sp, #8
 8010142:	60f8      	str	r0, [r7, #12]
 8010144:	60b9      	str	r1, [r7, #8]
 8010146:	607a      	str	r2, [r7, #4]
 8010148:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d10a      	bne.n	8010166 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010154:	f383 8811 	msr	BASEPRI, r3
 8010158:	f3bf 8f6f 	isb	sy
 801015c:	f3bf 8f4f 	dsb	sy
 8010160:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010162:	bf00      	nop
 8010164:	e7fe      	b.n	8010164 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d10a      	bne.n	8010182 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801016c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010170:	f383 8811 	msr	BASEPRI, r3
 8010174:	f3bf 8f6f 	isb	sy
 8010178:	f3bf 8f4f 	dsb	sy
 801017c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801017e:	bf00      	nop
 8010180:	e7fe      	b.n	8010180 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d002      	beq.n	801018e <xQueueGenericCreateStatic+0x52>
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d001      	beq.n	8010192 <xQueueGenericCreateStatic+0x56>
 801018e:	2301      	movs	r3, #1
 8010190:	e000      	b.n	8010194 <xQueueGenericCreateStatic+0x58>
 8010192:	2300      	movs	r3, #0
 8010194:	2b00      	cmp	r3, #0
 8010196:	d10a      	bne.n	80101ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010198:	f04f 0350 	mov.w	r3, #80	; 0x50
 801019c:	f383 8811 	msr	BASEPRI, r3
 80101a0:	f3bf 8f6f 	isb	sy
 80101a4:	f3bf 8f4f 	dsb	sy
 80101a8:	623b      	str	r3, [r7, #32]
}
 80101aa:	bf00      	nop
 80101ac:	e7fe      	b.n	80101ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d102      	bne.n	80101ba <xQueueGenericCreateStatic+0x7e>
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d101      	bne.n	80101be <xQueueGenericCreateStatic+0x82>
 80101ba:	2301      	movs	r3, #1
 80101bc:	e000      	b.n	80101c0 <xQueueGenericCreateStatic+0x84>
 80101be:	2300      	movs	r3, #0
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d10a      	bne.n	80101da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80101c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c8:	f383 8811 	msr	BASEPRI, r3
 80101cc:	f3bf 8f6f 	isb	sy
 80101d0:	f3bf 8f4f 	dsb	sy
 80101d4:	61fb      	str	r3, [r7, #28]
}
 80101d6:	bf00      	nop
 80101d8:	e7fe      	b.n	80101d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80101da:	2350      	movs	r3, #80	; 0x50
 80101dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80101de:	697b      	ldr	r3, [r7, #20]
 80101e0:	2b50      	cmp	r3, #80	; 0x50
 80101e2:	d00a      	beq.n	80101fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80101e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101e8:	f383 8811 	msr	BASEPRI, r3
 80101ec:	f3bf 8f6f 	isb	sy
 80101f0:	f3bf 8f4f 	dsb	sy
 80101f4:	61bb      	str	r3, [r7, #24]
}
 80101f6:	bf00      	nop
 80101f8:	e7fe      	b.n	80101f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80101fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010202:	2b00      	cmp	r3, #0
 8010204:	d00d      	beq.n	8010222 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010208:	2201      	movs	r2, #1
 801020a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801020e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010214:	9300      	str	r3, [sp, #0]
 8010216:	4613      	mov	r3, r2
 8010218:	687a      	ldr	r2, [r7, #4]
 801021a:	68b9      	ldr	r1, [r7, #8]
 801021c:	68f8      	ldr	r0, [r7, #12]
 801021e:	f000 f83f 	bl	80102a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010224:	4618      	mov	r0, r3
 8010226:	3730      	adds	r7, #48	; 0x30
 8010228:	46bd      	mov	sp, r7
 801022a:	bd80      	pop	{r7, pc}

0801022c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801022c:	b580      	push	{r7, lr}
 801022e:	b08a      	sub	sp, #40	; 0x28
 8010230:	af02      	add	r7, sp, #8
 8010232:	60f8      	str	r0, [r7, #12]
 8010234:	60b9      	str	r1, [r7, #8]
 8010236:	4613      	mov	r3, r2
 8010238:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d10a      	bne.n	8010256 <xQueueGenericCreate+0x2a>
	__asm volatile
 8010240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010244:	f383 8811 	msr	BASEPRI, r3
 8010248:	f3bf 8f6f 	isb	sy
 801024c:	f3bf 8f4f 	dsb	sy
 8010250:	613b      	str	r3, [r7, #16]
}
 8010252:	bf00      	nop
 8010254:	e7fe      	b.n	8010254 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	68ba      	ldr	r2, [r7, #8]
 801025a:	fb02 f303 	mul.w	r3, r2, r3
 801025e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010260:	69fb      	ldr	r3, [r7, #28]
 8010262:	3350      	adds	r3, #80	; 0x50
 8010264:	4618      	mov	r0, r3
 8010266:	f002 fd4f 	bl	8012d08 <pvPortMalloc>
 801026a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801026c:	69bb      	ldr	r3, [r7, #24]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d011      	beq.n	8010296 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010272:	69bb      	ldr	r3, [r7, #24]
 8010274:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	3350      	adds	r3, #80	; 0x50
 801027a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801027c:	69bb      	ldr	r3, [r7, #24]
 801027e:	2200      	movs	r2, #0
 8010280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010284:	79fa      	ldrb	r2, [r7, #7]
 8010286:	69bb      	ldr	r3, [r7, #24]
 8010288:	9300      	str	r3, [sp, #0]
 801028a:	4613      	mov	r3, r2
 801028c:	697a      	ldr	r2, [r7, #20]
 801028e:	68b9      	ldr	r1, [r7, #8]
 8010290:	68f8      	ldr	r0, [r7, #12]
 8010292:	f000 f805 	bl	80102a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010296:	69bb      	ldr	r3, [r7, #24]
	}
 8010298:	4618      	mov	r0, r3
 801029a:	3720      	adds	r7, #32
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}

080102a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b084      	sub	sp, #16
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	60f8      	str	r0, [r7, #12]
 80102a8:	60b9      	str	r1, [r7, #8]
 80102aa:	607a      	str	r2, [r7, #4]
 80102ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d103      	bne.n	80102bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80102b4:	69bb      	ldr	r3, [r7, #24]
 80102b6:	69ba      	ldr	r2, [r7, #24]
 80102b8:	601a      	str	r2, [r3, #0]
 80102ba:	e002      	b.n	80102c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80102bc:	69bb      	ldr	r3, [r7, #24]
 80102be:	687a      	ldr	r2, [r7, #4]
 80102c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80102c2:	69bb      	ldr	r3, [r7, #24]
 80102c4:	68fa      	ldr	r2, [r7, #12]
 80102c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80102c8:	69bb      	ldr	r3, [r7, #24]
 80102ca:	68ba      	ldr	r2, [r7, #8]
 80102cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80102ce:	2101      	movs	r1, #1
 80102d0:	69b8      	ldr	r0, [r7, #24]
 80102d2:	f7ff fecb 	bl	801006c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80102d6:	69bb      	ldr	r3, [r7, #24]
 80102d8:	78fa      	ldrb	r2, [r7, #3]
 80102da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80102de:	bf00      	nop
 80102e0:	3710      	adds	r7, #16
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}

080102e6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80102e6:	b580      	push	{r7, lr}
 80102e8:	b08a      	sub	sp, #40	; 0x28
 80102ea:	af02      	add	r7, sp, #8
 80102ec:	60f8      	str	r0, [r7, #12]
 80102ee:	60b9      	str	r1, [r7, #8]
 80102f0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d10a      	bne.n	801030e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80102f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102fc:	f383 8811 	msr	BASEPRI, r3
 8010300:	f3bf 8f6f 	isb	sy
 8010304:	f3bf 8f4f 	dsb	sy
 8010308:	61bb      	str	r3, [r7, #24]
}
 801030a:	bf00      	nop
 801030c:	e7fe      	b.n	801030c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801030e:	68ba      	ldr	r2, [r7, #8]
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	429a      	cmp	r2, r3
 8010314:	d90a      	bls.n	801032c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8010316:	f04f 0350 	mov.w	r3, #80	; 0x50
 801031a:	f383 8811 	msr	BASEPRI, r3
 801031e:	f3bf 8f6f 	isb	sy
 8010322:	f3bf 8f4f 	dsb	sy
 8010326:	617b      	str	r3, [r7, #20]
}
 8010328:	bf00      	nop
 801032a:	e7fe      	b.n	801032a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801032c:	2302      	movs	r3, #2
 801032e:	9300      	str	r3, [sp, #0]
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2200      	movs	r2, #0
 8010334:	2100      	movs	r1, #0
 8010336:	68f8      	ldr	r0, [r7, #12]
 8010338:	f7ff ff00 	bl	801013c <xQueueGenericCreateStatic>
 801033c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801033e:	69fb      	ldr	r3, [r7, #28]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d002      	beq.n	801034a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010344:	69fb      	ldr	r3, [r7, #28]
 8010346:	68ba      	ldr	r2, [r7, #8]
 8010348:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801034a:	69fb      	ldr	r3, [r7, #28]
	}
 801034c:	4618      	mov	r0, r3
 801034e:	3720      	adds	r7, #32
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}

08010354 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010354:	b580      	push	{r7, lr}
 8010356:	b086      	sub	sp, #24
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
 801035c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d10a      	bne.n	801037a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8010364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010368:	f383 8811 	msr	BASEPRI, r3
 801036c:	f3bf 8f6f 	isb	sy
 8010370:	f3bf 8f4f 	dsb	sy
 8010374:	613b      	str	r3, [r7, #16]
}
 8010376:	bf00      	nop
 8010378:	e7fe      	b.n	8010378 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801037a:	683a      	ldr	r2, [r7, #0]
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	429a      	cmp	r2, r3
 8010380:	d90a      	bls.n	8010398 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8010382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010386:	f383 8811 	msr	BASEPRI, r3
 801038a:	f3bf 8f6f 	isb	sy
 801038e:	f3bf 8f4f 	dsb	sy
 8010392:	60fb      	str	r3, [r7, #12]
}
 8010394:	bf00      	nop
 8010396:	e7fe      	b.n	8010396 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010398:	2202      	movs	r2, #2
 801039a:	2100      	movs	r1, #0
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f7ff ff45 	bl	801022c <xQueueGenericCreate>
 80103a2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80103a4:	697b      	ldr	r3, [r7, #20]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d002      	beq.n	80103b0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	683a      	ldr	r2, [r7, #0]
 80103ae:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80103b0:	697b      	ldr	r3, [r7, #20]
	}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3718      	adds	r7, #24
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}
	...

080103bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b08e      	sub	sp, #56	; 0x38
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	60f8      	str	r0, [r7, #12]
 80103c4:	60b9      	str	r1, [r7, #8]
 80103c6:	607a      	str	r2, [r7, #4]
 80103c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80103ca:	2300      	movs	r3, #0
 80103cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80103d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d10a      	bne.n	80103ee <xQueueGenericSend+0x32>
	__asm volatile
 80103d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103dc:	f383 8811 	msr	BASEPRI, r3
 80103e0:	f3bf 8f6f 	isb	sy
 80103e4:	f3bf 8f4f 	dsb	sy
 80103e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80103ea:	bf00      	nop
 80103ec:	e7fe      	b.n	80103ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d103      	bne.n	80103fc <xQueueGenericSend+0x40>
 80103f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d101      	bne.n	8010400 <xQueueGenericSend+0x44>
 80103fc:	2301      	movs	r3, #1
 80103fe:	e000      	b.n	8010402 <xQueueGenericSend+0x46>
 8010400:	2300      	movs	r3, #0
 8010402:	2b00      	cmp	r3, #0
 8010404:	d10a      	bne.n	801041c <xQueueGenericSend+0x60>
	__asm volatile
 8010406:	f04f 0350 	mov.w	r3, #80	; 0x50
 801040a:	f383 8811 	msr	BASEPRI, r3
 801040e:	f3bf 8f6f 	isb	sy
 8010412:	f3bf 8f4f 	dsb	sy
 8010416:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010418:	bf00      	nop
 801041a:	e7fe      	b.n	801041a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	2b02      	cmp	r3, #2
 8010420:	d103      	bne.n	801042a <xQueueGenericSend+0x6e>
 8010422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010426:	2b01      	cmp	r3, #1
 8010428:	d101      	bne.n	801042e <xQueueGenericSend+0x72>
 801042a:	2301      	movs	r3, #1
 801042c:	e000      	b.n	8010430 <xQueueGenericSend+0x74>
 801042e:	2300      	movs	r3, #0
 8010430:	2b00      	cmp	r3, #0
 8010432:	d10a      	bne.n	801044a <xQueueGenericSend+0x8e>
	__asm volatile
 8010434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010438:	f383 8811 	msr	BASEPRI, r3
 801043c:	f3bf 8f6f 	isb	sy
 8010440:	f3bf 8f4f 	dsb	sy
 8010444:	623b      	str	r3, [r7, #32]
}
 8010446:	bf00      	nop
 8010448:	e7fe      	b.n	8010448 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801044a:	f001 fcdf 	bl	8011e0c <xTaskGetSchedulerState>
 801044e:	4603      	mov	r3, r0
 8010450:	2b00      	cmp	r3, #0
 8010452:	d102      	bne.n	801045a <xQueueGenericSend+0x9e>
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d101      	bne.n	801045e <xQueueGenericSend+0xa2>
 801045a:	2301      	movs	r3, #1
 801045c:	e000      	b.n	8010460 <xQueueGenericSend+0xa4>
 801045e:	2300      	movs	r3, #0
 8010460:	2b00      	cmp	r3, #0
 8010462:	d10a      	bne.n	801047a <xQueueGenericSend+0xbe>
	__asm volatile
 8010464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010468:	f383 8811 	msr	BASEPRI, r3
 801046c:	f3bf 8f6f 	isb	sy
 8010470:	f3bf 8f4f 	dsb	sy
 8010474:	61fb      	str	r3, [r7, #28]
}
 8010476:	bf00      	nop
 8010478:	e7fe      	b.n	8010478 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801047a:	f002 fb23 	bl	8012ac4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801047e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010486:	429a      	cmp	r2, r3
 8010488:	d302      	bcc.n	8010490 <xQueueGenericSend+0xd4>
 801048a:	683b      	ldr	r3, [r7, #0]
 801048c:	2b02      	cmp	r3, #2
 801048e:	d129      	bne.n	80104e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010490:	683a      	ldr	r2, [r7, #0]
 8010492:	68b9      	ldr	r1, [r7, #8]
 8010494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010496:	f000 fc9a 	bl	8010dce <prvCopyDataToQueue>
 801049a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801049c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801049e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d010      	beq.n	80104c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80104a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104a6:	3324      	adds	r3, #36	; 0x24
 80104a8:	4618      	mov	r0, r3
 80104aa:	f001 faed 	bl	8011a88 <xTaskRemoveFromEventList>
 80104ae:	4603      	mov	r3, r0
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d013      	beq.n	80104dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80104b4:	4b3f      	ldr	r3, [pc, #252]	; (80105b4 <xQueueGenericSend+0x1f8>)
 80104b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104ba:	601a      	str	r2, [r3, #0]
 80104bc:	f3bf 8f4f 	dsb	sy
 80104c0:	f3bf 8f6f 	isb	sy
 80104c4:	e00a      	b.n	80104dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80104c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d007      	beq.n	80104dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80104cc:	4b39      	ldr	r3, [pc, #228]	; (80105b4 <xQueueGenericSend+0x1f8>)
 80104ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104d2:	601a      	str	r2, [r3, #0]
 80104d4:	f3bf 8f4f 	dsb	sy
 80104d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80104dc:	f002 fb22 	bl	8012b24 <vPortExitCritical>
				return pdPASS;
 80104e0:	2301      	movs	r3, #1
 80104e2:	e063      	b.n	80105ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d103      	bne.n	80104f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80104ea:	f002 fb1b 	bl	8012b24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80104ee:	2300      	movs	r3, #0
 80104f0:	e05c      	b.n	80105ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80104f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d106      	bne.n	8010506 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80104f8:	f107 0314 	add.w	r3, r7, #20
 80104fc:	4618      	mov	r0, r3
 80104fe:	f001 fb27 	bl	8011b50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010502:	2301      	movs	r3, #1
 8010504:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010506:	f002 fb0d 	bl	8012b24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801050a:	f001 f893 	bl	8011634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801050e:	f002 fad9 	bl	8012ac4 <vPortEnterCritical>
 8010512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010514:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010518:	b25b      	sxtb	r3, r3
 801051a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801051e:	d103      	bne.n	8010528 <xQueueGenericSend+0x16c>
 8010520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010522:	2200      	movs	r2, #0
 8010524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801052a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801052e:	b25b      	sxtb	r3, r3
 8010530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010534:	d103      	bne.n	801053e <xQueueGenericSend+0x182>
 8010536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010538:	2200      	movs	r2, #0
 801053a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801053e:	f002 faf1 	bl	8012b24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010542:	1d3a      	adds	r2, r7, #4
 8010544:	f107 0314 	add.w	r3, r7, #20
 8010548:	4611      	mov	r1, r2
 801054a:	4618      	mov	r0, r3
 801054c:	f001 fb16 	bl	8011b7c <xTaskCheckForTimeOut>
 8010550:	4603      	mov	r3, r0
 8010552:	2b00      	cmp	r3, #0
 8010554:	d124      	bne.n	80105a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010556:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010558:	f000 fd31 	bl	8010fbe <prvIsQueueFull>
 801055c:	4603      	mov	r3, r0
 801055e:	2b00      	cmp	r3, #0
 8010560:	d018      	beq.n	8010594 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010564:	3310      	adds	r3, #16
 8010566:	687a      	ldr	r2, [r7, #4]
 8010568:	4611      	mov	r1, r2
 801056a:	4618      	mov	r0, r3
 801056c:	f001 fa3c 	bl	80119e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010572:	f000 fcbc 	bl	8010eee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010576:	f001 f86b 	bl	8011650 <xTaskResumeAll>
 801057a:	4603      	mov	r3, r0
 801057c:	2b00      	cmp	r3, #0
 801057e:	f47f af7c 	bne.w	801047a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010582:	4b0c      	ldr	r3, [pc, #48]	; (80105b4 <xQueueGenericSend+0x1f8>)
 8010584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010588:	601a      	str	r2, [r3, #0]
 801058a:	f3bf 8f4f 	dsb	sy
 801058e:	f3bf 8f6f 	isb	sy
 8010592:	e772      	b.n	801047a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010596:	f000 fcaa 	bl	8010eee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801059a:	f001 f859 	bl	8011650 <xTaskResumeAll>
 801059e:	e76c      	b.n	801047a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80105a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80105a2:	f000 fca4 	bl	8010eee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80105a6:	f001 f853 	bl	8011650 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80105aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3738      	adds	r7, #56	; 0x38
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}
 80105b4:	e000ed04 	.word	0xe000ed04

080105b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b090      	sub	sp, #64	; 0x40
 80105bc:	af00      	add	r7, sp, #0
 80105be:	60f8      	str	r0, [r7, #12]
 80105c0:	60b9      	str	r1, [r7, #8]
 80105c2:	607a      	str	r2, [r7, #4]
 80105c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80105ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d10a      	bne.n	80105e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80105d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105d4:	f383 8811 	msr	BASEPRI, r3
 80105d8:	f3bf 8f6f 	isb	sy
 80105dc:	f3bf 8f4f 	dsb	sy
 80105e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80105e2:	bf00      	nop
 80105e4:	e7fe      	b.n	80105e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80105e6:	68bb      	ldr	r3, [r7, #8]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d103      	bne.n	80105f4 <xQueueGenericSendFromISR+0x3c>
 80105ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d101      	bne.n	80105f8 <xQueueGenericSendFromISR+0x40>
 80105f4:	2301      	movs	r3, #1
 80105f6:	e000      	b.n	80105fa <xQueueGenericSendFromISR+0x42>
 80105f8:	2300      	movs	r3, #0
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d10a      	bne.n	8010614 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80105fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010602:	f383 8811 	msr	BASEPRI, r3
 8010606:	f3bf 8f6f 	isb	sy
 801060a:	f3bf 8f4f 	dsb	sy
 801060e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010610:	bf00      	nop
 8010612:	e7fe      	b.n	8010612 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	2b02      	cmp	r3, #2
 8010618:	d103      	bne.n	8010622 <xQueueGenericSendFromISR+0x6a>
 801061a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801061c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801061e:	2b01      	cmp	r3, #1
 8010620:	d101      	bne.n	8010626 <xQueueGenericSendFromISR+0x6e>
 8010622:	2301      	movs	r3, #1
 8010624:	e000      	b.n	8010628 <xQueueGenericSendFromISR+0x70>
 8010626:	2300      	movs	r3, #0
 8010628:	2b00      	cmp	r3, #0
 801062a:	d10a      	bne.n	8010642 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801062c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010630:	f383 8811 	msr	BASEPRI, r3
 8010634:	f3bf 8f6f 	isb	sy
 8010638:	f3bf 8f4f 	dsb	sy
 801063c:	623b      	str	r3, [r7, #32]
}
 801063e:	bf00      	nop
 8010640:	e7fe      	b.n	8010640 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010642:	f002 fb21 	bl	8012c88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010646:	f3ef 8211 	mrs	r2, BASEPRI
 801064a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801064e:	f383 8811 	msr	BASEPRI, r3
 8010652:	f3bf 8f6f 	isb	sy
 8010656:	f3bf 8f4f 	dsb	sy
 801065a:	61fa      	str	r2, [r7, #28]
 801065c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801065e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010660:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801066a:	429a      	cmp	r2, r3
 801066c:	d302      	bcc.n	8010674 <xQueueGenericSendFromISR+0xbc>
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	2b02      	cmp	r3, #2
 8010672:	d12f      	bne.n	80106d4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010676:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801067a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801067e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010682:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010684:	683a      	ldr	r2, [r7, #0]
 8010686:	68b9      	ldr	r1, [r7, #8]
 8010688:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801068a:	f000 fba0 	bl	8010dce <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801068e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010696:	d112      	bne.n	80106be <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801069c:	2b00      	cmp	r3, #0
 801069e:	d016      	beq.n	80106ce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80106a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106a2:	3324      	adds	r3, #36	; 0x24
 80106a4:	4618      	mov	r0, r3
 80106a6:	f001 f9ef 	bl	8011a88 <xTaskRemoveFromEventList>
 80106aa:	4603      	mov	r3, r0
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d00e      	beq.n	80106ce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d00b      	beq.n	80106ce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2201      	movs	r2, #1
 80106ba:	601a      	str	r2, [r3, #0]
 80106bc:	e007      	b.n	80106ce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80106be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80106c2:	3301      	adds	r3, #1
 80106c4:	b2db      	uxtb	r3, r3
 80106c6:	b25a      	sxtb	r2, r3
 80106c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80106ce:	2301      	movs	r3, #1
 80106d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80106d2:	e001      	b.n	80106d8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80106d4:	2300      	movs	r3, #0
 80106d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106da:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80106dc:	697b      	ldr	r3, [r7, #20]
 80106de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80106e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80106e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	3740      	adds	r7, #64	; 0x40
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}

080106ee <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80106ee:	b580      	push	{r7, lr}
 80106f0:	b08e      	sub	sp, #56	; 0x38
 80106f2:	af00      	add	r7, sp, #0
 80106f4:	6078      	str	r0, [r7, #4]
 80106f6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80106fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d10a      	bne.n	8010718 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8010702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010706:	f383 8811 	msr	BASEPRI, r3
 801070a:	f3bf 8f6f 	isb	sy
 801070e:	f3bf 8f4f 	dsb	sy
 8010712:	623b      	str	r3, [r7, #32]
}
 8010714:	bf00      	nop
 8010716:	e7fe      	b.n	8010716 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801071c:	2b00      	cmp	r3, #0
 801071e:	d00a      	beq.n	8010736 <xQueueGiveFromISR+0x48>
	__asm volatile
 8010720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010724:	f383 8811 	msr	BASEPRI, r3
 8010728:	f3bf 8f6f 	isb	sy
 801072c:	f3bf 8f4f 	dsb	sy
 8010730:	61fb      	str	r3, [r7, #28]
}
 8010732:	bf00      	nop
 8010734:	e7fe      	b.n	8010734 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d103      	bne.n	8010746 <xQueueGiveFromISR+0x58>
 801073e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010740:	689b      	ldr	r3, [r3, #8]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d101      	bne.n	801074a <xQueueGiveFromISR+0x5c>
 8010746:	2301      	movs	r3, #1
 8010748:	e000      	b.n	801074c <xQueueGiveFromISR+0x5e>
 801074a:	2300      	movs	r3, #0
 801074c:	2b00      	cmp	r3, #0
 801074e:	d10a      	bne.n	8010766 <xQueueGiveFromISR+0x78>
	__asm volatile
 8010750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010754:	f383 8811 	msr	BASEPRI, r3
 8010758:	f3bf 8f6f 	isb	sy
 801075c:	f3bf 8f4f 	dsb	sy
 8010760:	61bb      	str	r3, [r7, #24]
}
 8010762:	bf00      	nop
 8010764:	e7fe      	b.n	8010764 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010766:	f002 fa8f 	bl	8012c88 <vPortValidateInterruptPriority>
	__asm volatile
 801076a:	f3ef 8211 	mrs	r2, BASEPRI
 801076e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010772:	f383 8811 	msr	BASEPRI, r3
 8010776:	f3bf 8f6f 	isb	sy
 801077a:	f3bf 8f4f 	dsb	sy
 801077e:	617a      	str	r2, [r7, #20]
 8010780:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010782:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010784:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801078a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801078c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801078e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010792:	429a      	cmp	r2, r3
 8010794:	d22b      	bcs.n	80107ee <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010798:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801079c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80107a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a2:	1c5a      	adds	r2, r3, #1
 80107a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80107a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80107ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80107b0:	d112      	bne.n	80107d8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80107b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d016      	beq.n	80107e8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80107ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107bc:	3324      	adds	r3, #36	; 0x24
 80107be:	4618      	mov	r0, r3
 80107c0:	f001 f962 	bl	8011a88 <xTaskRemoveFromEventList>
 80107c4:	4603      	mov	r3, r0
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d00e      	beq.n	80107e8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d00b      	beq.n	80107e8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	2201      	movs	r2, #1
 80107d4:	601a      	str	r2, [r3, #0]
 80107d6:	e007      	b.n	80107e8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80107d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80107dc:	3301      	adds	r3, #1
 80107de:	b2db      	uxtb	r3, r3
 80107e0:	b25a      	sxtb	r2, r3
 80107e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80107e8:	2301      	movs	r3, #1
 80107ea:	637b      	str	r3, [r7, #52]	; 0x34
 80107ec:	e001      	b.n	80107f2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80107ee:	2300      	movs	r3, #0
 80107f0:	637b      	str	r3, [r7, #52]	; 0x34
 80107f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107f4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	f383 8811 	msr	BASEPRI, r3
}
 80107fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80107fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010800:	4618      	mov	r0, r3
 8010802:	3738      	adds	r7, #56	; 0x38
 8010804:	46bd      	mov	sp, r7
 8010806:	bd80      	pop	{r7, pc}

08010808 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b08c      	sub	sp, #48	; 0x30
 801080c:	af00      	add	r7, sp, #0
 801080e:	60f8      	str	r0, [r7, #12]
 8010810:	60b9      	str	r1, [r7, #8]
 8010812:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010814:	2300      	movs	r3, #0
 8010816:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801081c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801081e:	2b00      	cmp	r3, #0
 8010820:	d10a      	bne.n	8010838 <xQueueReceive+0x30>
	__asm volatile
 8010822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010826:	f383 8811 	msr	BASEPRI, r3
 801082a:	f3bf 8f6f 	isb	sy
 801082e:	f3bf 8f4f 	dsb	sy
 8010832:	623b      	str	r3, [r7, #32]
}
 8010834:	bf00      	nop
 8010836:	e7fe      	b.n	8010836 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010838:	68bb      	ldr	r3, [r7, #8]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d103      	bne.n	8010846 <xQueueReceive+0x3e>
 801083e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010842:	2b00      	cmp	r3, #0
 8010844:	d101      	bne.n	801084a <xQueueReceive+0x42>
 8010846:	2301      	movs	r3, #1
 8010848:	e000      	b.n	801084c <xQueueReceive+0x44>
 801084a:	2300      	movs	r3, #0
 801084c:	2b00      	cmp	r3, #0
 801084e:	d10a      	bne.n	8010866 <xQueueReceive+0x5e>
	__asm volatile
 8010850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010854:	f383 8811 	msr	BASEPRI, r3
 8010858:	f3bf 8f6f 	isb	sy
 801085c:	f3bf 8f4f 	dsb	sy
 8010860:	61fb      	str	r3, [r7, #28]
}
 8010862:	bf00      	nop
 8010864:	e7fe      	b.n	8010864 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010866:	f001 fad1 	bl	8011e0c <xTaskGetSchedulerState>
 801086a:	4603      	mov	r3, r0
 801086c:	2b00      	cmp	r3, #0
 801086e:	d102      	bne.n	8010876 <xQueueReceive+0x6e>
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d101      	bne.n	801087a <xQueueReceive+0x72>
 8010876:	2301      	movs	r3, #1
 8010878:	e000      	b.n	801087c <xQueueReceive+0x74>
 801087a:	2300      	movs	r3, #0
 801087c:	2b00      	cmp	r3, #0
 801087e:	d10a      	bne.n	8010896 <xQueueReceive+0x8e>
	__asm volatile
 8010880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010884:	f383 8811 	msr	BASEPRI, r3
 8010888:	f3bf 8f6f 	isb	sy
 801088c:	f3bf 8f4f 	dsb	sy
 8010890:	61bb      	str	r3, [r7, #24]
}
 8010892:	bf00      	nop
 8010894:	e7fe      	b.n	8010894 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010896:	f002 f915 	bl	8012ac4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801089a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801089c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801089e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80108a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d01f      	beq.n	80108e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80108a6:	68b9      	ldr	r1, [r7, #8]
 80108a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108aa:	f000 fafa 	bl	8010ea2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80108ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b0:	1e5a      	subs	r2, r3, #1
 80108b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80108b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108b8:	691b      	ldr	r3, [r3, #16]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d00f      	beq.n	80108de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80108be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c0:	3310      	adds	r3, #16
 80108c2:	4618      	mov	r0, r3
 80108c4:	f001 f8e0 	bl	8011a88 <xTaskRemoveFromEventList>
 80108c8:	4603      	mov	r3, r0
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d007      	beq.n	80108de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80108ce:	4b3d      	ldr	r3, [pc, #244]	; (80109c4 <xQueueReceive+0x1bc>)
 80108d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108d4:	601a      	str	r2, [r3, #0]
 80108d6:	f3bf 8f4f 	dsb	sy
 80108da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80108de:	f002 f921 	bl	8012b24 <vPortExitCritical>
				return pdPASS;
 80108e2:	2301      	movs	r3, #1
 80108e4:	e069      	b.n	80109ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d103      	bne.n	80108f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80108ec:	f002 f91a 	bl	8012b24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80108f0:	2300      	movs	r3, #0
 80108f2:	e062      	b.n	80109ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80108f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d106      	bne.n	8010908 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80108fa:	f107 0310 	add.w	r3, r7, #16
 80108fe:	4618      	mov	r0, r3
 8010900:	f001 f926 	bl	8011b50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010904:	2301      	movs	r3, #1
 8010906:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010908:	f002 f90c 	bl	8012b24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801090c:	f000 fe92 	bl	8011634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010910:	f002 f8d8 	bl	8012ac4 <vPortEnterCritical>
 8010914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010916:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801091a:	b25b      	sxtb	r3, r3
 801091c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010920:	d103      	bne.n	801092a <xQueueReceive+0x122>
 8010922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010924:	2200      	movs	r2, #0
 8010926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801092a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801092c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010930:	b25b      	sxtb	r3, r3
 8010932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010936:	d103      	bne.n	8010940 <xQueueReceive+0x138>
 8010938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801093a:	2200      	movs	r2, #0
 801093c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010940:	f002 f8f0 	bl	8012b24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010944:	1d3a      	adds	r2, r7, #4
 8010946:	f107 0310 	add.w	r3, r7, #16
 801094a:	4611      	mov	r1, r2
 801094c:	4618      	mov	r0, r3
 801094e:	f001 f915 	bl	8011b7c <xTaskCheckForTimeOut>
 8010952:	4603      	mov	r3, r0
 8010954:	2b00      	cmp	r3, #0
 8010956:	d123      	bne.n	80109a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801095a:	f000 fb1a 	bl	8010f92 <prvIsQueueEmpty>
 801095e:	4603      	mov	r3, r0
 8010960:	2b00      	cmp	r3, #0
 8010962:	d017      	beq.n	8010994 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010966:	3324      	adds	r3, #36	; 0x24
 8010968:	687a      	ldr	r2, [r7, #4]
 801096a:	4611      	mov	r1, r2
 801096c:	4618      	mov	r0, r3
 801096e:	f001 f83b 	bl	80119e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010974:	f000 fabb 	bl	8010eee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010978:	f000 fe6a 	bl	8011650 <xTaskResumeAll>
 801097c:	4603      	mov	r3, r0
 801097e:	2b00      	cmp	r3, #0
 8010980:	d189      	bne.n	8010896 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010982:	4b10      	ldr	r3, [pc, #64]	; (80109c4 <xQueueReceive+0x1bc>)
 8010984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010988:	601a      	str	r2, [r3, #0]
 801098a:	f3bf 8f4f 	dsb	sy
 801098e:	f3bf 8f6f 	isb	sy
 8010992:	e780      	b.n	8010896 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010996:	f000 faaa 	bl	8010eee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801099a:	f000 fe59 	bl	8011650 <xTaskResumeAll>
 801099e:	e77a      	b.n	8010896 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80109a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109a2:	f000 faa4 	bl	8010eee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80109a6:	f000 fe53 	bl	8011650 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80109aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109ac:	f000 faf1 	bl	8010f92 <prvIsQueueEmpty>
 80109b0:	4603      	mov	r3, r0
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	f43f af6f 	beq.w	8010896 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80109b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	3730      	adds	r7, #48	; 0x30
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd80      	pop	{r7, pc}
 80109c2:	bf00      	nop
 80109c4:	e000ed04 	.word	0xe000ed04

080109c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b08e      	sub	sp, #56	; 0x38
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80109d2:	2300      	movs	r3, #0
 80109d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80109da:	2300      	movs	r3, #0
 80109dc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80109de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d10a      	bne.n	80109fa <xQueueSemaphoreTake+0x32>
	__asm volatile
 80109e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109e8:	f383 8811 	msr	BASEPRI, r3
 80109ec:	f3bf 8f6f 	isb	sy
 80109f0:	f3bf 8f4f 	dsb	sy
 80109f4:	623b      	str	r3, [r7, #32]
}
 80109f6:	bf00      	nop
 80109f8:	e7fe      	b.n	80109f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80109fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d00a      	beq.n	8010a18 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8010a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a06:	f383 8811 	msr	BASEPRI, r3
 8010a0a:	f3bf 8f6f 	isb	sy
 8010a0e:	f3bf 8f4f 	dsb	sy
 8010a12:	61fb      	str	r3, [r7, #28]
}
 8010a14:	bf00      	nop
 8010a16:	e7fe      	b.n	8010a16 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010a18:	f001 f9f8 	bl	8011e0c <xTaskGetSchedulerState>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d102      	bne.n	8010a28 <xQueueSemaphoreTake+0x60>
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d101      	bne.n	8010a2c <xQueueSemaphoreTake+0x64>
 8010a28:	2301      	movs	r3, #1
 8010a2a:	e000      	b.n	8010a2e <xQueueSemaphoreTake+0x66>
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d10a      	bne.n	8010a48 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8010a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a36:	f383 8811 	msr	BASEPRI, r3
 8010a3a:	f3bf 8f6f 	isb	sy
 8010a3e:	f3bf 8f4f 	dsb	sy
 8010a42:	61bb      	str	r3, [r7, #24]
}
 8010a44:	bf00      	nop
 8010a46:	e7fe      	b.n	8010a46 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010a48:	f002 f83c 	bl	8012ac4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a50:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d024      	beq.n	8010aa2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a5a:	1e5a      	subs	r2, r3, #1
 8010a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a5e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d104      	bne.n	8010a72 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010a68:	f001 fb46 	bl	80120f8 <pvTaskIncrementMutexHeldCount>
 8010a6c:	4602      	mov	r2, r0
 8010a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a70:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a74:	691b      	ldr	r3, [r3, #16]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d00f      	beq.n	8010a9a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a7c:	3310      	adds	r3, #16
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f001 f802 	bl	8011a88 <xTaskRemoveFromEventList>
 8010a84:	4603      	mov	r3, r0
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d007      	beq.n	8010a9a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010a8a:	4b54      	ldr	r3, [pc, #336]	; (8010bdc <xQueueSemaphoreTake+0x214>)
 8010a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a90:	601a      	str	r2, [r3, #0]
 8010a92:	f3bf 8f4f 	dsb	sy
 8010a96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010a9a:	f002 f843 	bl	8012b24 <vPortExitCritical>
				return pdPASS;
 8010a9e:	2301      	movs	r3, #1
 8010aa0:	e097      	b.n	8010bd2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d111      	bne.n	8010acc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d00a      	beq.n	8010ac4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab2:	f383 8811 	msr	BASEPRI, r3
 8010ab6:	f3bf 8f6f 	isb	sy
 8010aba:	f3bf 8f4f 	dsb	sy
 8010abe:	617b      	str	r3, [r7, #20]
}
 8010ac0:	bf00      	nop
 8010ac2:	e7fe      	b.n	8010ac2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010ac4:	f002 f82e 	bl	8012b24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010ac8:	2300      	movs	r3, #0
 8010aca:	e082      	b.n	8010bd2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d106      	bne.n	8010ae0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010ad2:	f107 030c 	add.w	r3, r7, #12
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f001 f83a 	bl	8011b50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010adc:	2301      	movs	r3, #1
 8010ade:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010ae0:	f002 f820 	bl	8012b24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010ae4:	f000 fda6 	bl	8011634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010ae8:	f001 ffec 	bl	8012ac4 <vPortEnterCritical>
 8010aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010af2:	b25b      	sxtb	r3, r3
 8010af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010af8:	d103      	bne.n	8010b02 <xQueueSemaphoreTake+0x13a>
 8010afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010afc:	2200      	movs	r2, #0
 8010afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b08:	b25b      	sxtb	r3, r3
 8010b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b0e:	d103      	bne.n	8010b18 <xQueueSemaphoreTake+0x150>
 8010b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b12:	2200      	movs	r2, #0
 8010b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010b18:	f002 f804 	bl	8012b24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010b1c:	463a      	mov	r2, r7
 8010b1e:	f107 030c 	add.w	r3, r7, #12
 8010b22:	4611      	mov	r1, r2
 8010b24:	4618      	mov	r0, r3
 8010b26:	f001 f829 	bl	8011b7c <xTaskCheckForTimeOut>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d132      	bne.n	8010b96 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010b30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b32:	f000 fa2e 	bl	8010f92 <prvIsQueueEmpty>
 8010b36:	4603      	mov	r3, r0
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d026      	beq.n	8010b8a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d109      	bne.n	8010b58 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010b44:	f001 ffbe 	bl	8012ac4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b4a:	689b      	ldr	r3, [r3, #8]
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f001 f97b 	bl	8011e48 <xTaskPriorityInherit>
 8010b52:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010b54:	f001 ffe6 	bl	8012b24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b5a:	3324      	adds	r3, #36	; 0x24
 8010b5c:	683a      	ldr	r2, [r7, #0]
 8010b5e:	4611      	mov	r1, r2
 8010b60:	4618      	mov	r0, r3
 8010b62:	f000 ff41 	bl	80119e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010b66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b68:	f000 f9c1 	bl	8010eee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010b6c:	f000 fd70 	bl	8011650 <xTaskResumeAll>
 8010b70:	4603      	mov	r3, r0
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	f47f af68 	bne.w	8010a48 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010b78:	4b18      	ldr	r3, [pc, #96]	; (8010bdc <xQueueSemaphoreTake+0x214>)
 8010b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b7e:	601a      	str	r2, [r3, #0]
 8010b80:	f3bf 8f4f 	dsb	sy
 8010b84:	f3bf 8f6f 	isb	sy
 8010b88:	e75e      	b.n	8010a48 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010b8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b8c:	f000 f9af 	bl	8010eee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010b90:	f000 fd5e 	bl	8011650 <xTaskResumeAll>
 8010b94:	e758      	b.n	8010a48 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010b96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b98:	f000 f9a9 	bl	8010eee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010b9c:	f000 fd58 	bl	8011650 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010ba0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ba2:	f000 f9f6 	bl	8010f92 <prvIsQueueEmpty>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	f43f af4d 	beq.w	8010a48 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d00d      	beq.n	8010bd0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010bb4:	f001 ff86 	bl	8012ac4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010bb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010bba:	f000 f8f0 	bl	8010d9e <prvGetDisinheritPriorityAfterTimeout>
 8010bbe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bc2:	689b      	ldr	r3, [r3, #8]
 8010bc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f001 fa14 	bl	8011ff4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010bcc:	f001 ffaa 	bl	8012b24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010bd0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	3738      	adds	r7, #56	; 0x38
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	bd80      	pop	{r7, pc}
 8010bda:	bf00      	nop
 8010bdc:	e000ed04 	.word	0xe000ed04

08010be0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b08e      	sub	sp, #56	; 0x38
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	60f8      	str	r0, [r7, #12]
 8010be8:	60b9      	str	r1, [r7, #8]
 8010bea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d10a      	bne.n	8010c0c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bfa:	f383 8811 	msr	BASEPRI, r3
 8010bfe:	f3bf 8f6f 	isb	sy
 8010c02:	f3bf 8f4f 	dsb	sy
 8010c06:	623b      	str	r3, [r7, #32]
}
 8010c08:	bf00      	nop
 8010c0a:	e7fe      	b.n	8010c0a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c0c:	68bb      	ldr	r3, [r7, #8]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d103      	bne.n	8010c1a <xQueueReceiveFromISR+0x3a>
 8010c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d101      	bne.n	8010c1e <xQueueReceiveFromISR+0x3e>
 8010c1a:	2301      	movs	r3, #1
 8010c1c:	e000      	b.n	8010c20 <xQueueReceiveFromISR+0x40>
 8010c1e:	2300      	movs	r3, #0
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d10a      	bne.n	8010c3a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c28:	f383 8811 	msr	BASEPRI, r3
 8010c2c:	f3bf 8f6f 	isb	sy
 8010c30:	f3bf 8f4f 	dsb	sy
 8010c34:	61fb      	str	r3, [r7, #28]
}
 8010c36:	bf00      	nop
 8010c38:	e7fe      	b.n	8010c38 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010c3a:	f002 f825 	bl	8012c88 <vPortValidateInterruptPriority>
	__asm volatile
 8010c3e:	f3ef 8211 	mrs	r2, BASEPRI
 8010c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c46:	f383 8811 	msr	BASEPRI, r3
 8010c4a:	f3bf 8f6f 	isb	sy
 8010c4e:	f3bf 8f4f 	dsb	sy
 8010c52:	61ba      	str	r2, [r7, #24]
 8010c54:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010c56:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010c58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c5e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d02f      	beq.n	8010cc6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010c70:	68b9      	ldr	r1, [r7, #8]
 8010c72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c74:	f000 f915 	bl	8010ea2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c7a:	1e5a      	subs	r2, r3, #1
 8010c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c7e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010c80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c88:	d112      	bne.n	8010cb0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c8c:	691b      	ldr	r3, [r3, #16]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d016      	beq.n	8010cc0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c94:	3310      	adds	r3, #16
 8010c96:	4618      	mov	r0, r3
 8010c98:	f000 fef6 	bl	8011a88 <xTaskRemoveFromEventList>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d00e      	beq.n	8010cc0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d00b      	beq.n	8010cc0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2201      	movs	r2, #1
 8010cac:	601a      	str	r2, [r3, #0]
 8010cae:	e007      	b.n	8010cc0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010cb4:	3301      	adds	r3, #1
 8010cb6:	b2db      	uxtb	r3, r3
 8010cb8:	b25a      	sxtb	r2, r3
 8010cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010cc0:	2301      	movs	r3, #1
 8010cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8010cc4:	e001      	b.n	8010cca <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8010cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ccc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010cce:	693b      	ldr	r3, [r7, #16]
 8010cd0:	f383 8811 	msr	BASEPRI, r3
}
 8010cd4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3738      	adds	r7, #56	; 0x38
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}

08010ce0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b084      	sub	sp, #16
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d10a      	bne.n	8010d04 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8010cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cf2:	f383 8811 	msr	BASEPRI, r3
 8010cf6:	f3bf 8f6f 	isb	sy
 8010cfa:	f3bf 8f4f 	dsb	sy
 8010cfe:	60bb      	str	r3, [r7, #8]
}
 8010d00:	bf00      	nop
 8010d02:	e7fe      	b.n	8010d02 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8010d04:	f001 fede 	bl	8012ac4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d0c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8010d0e:	f001 ff09 	bl	8012b24 <vPortExitCritical>

	return uxReturn;
 8010d12:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010d14:	4618      	mov	r0, r3
 8010d16:	3710      	adds	r7, #16
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}

08010d1c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8010d1c:	b480      	push	{r7}
 8010d1e:	b087      	sub	sp, #28
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d10a      	bne.n	8010d44 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8010d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d32:	f383 8811 	msr	BASEPRI, r3
 8010d36:	f3bf 8f6f 	isb	sy
 8010d3a:	f3bf 8f4f 	dsb	sy
 8010d3e:	60fb      	str	r3, [r7, #12]
}
 8010d40:	bf00      	nop
 8010d42:	e7fe      	b.n	8010d42 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8010d44:	697b      	ldr	r3, [r7, #20]
 8010d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d48:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8010d4a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	371c      	adds	r7, #28
 8010d50:	46bd      	mov	sp, r7
 8010d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d56:	4770      	bx	lr

08010d58 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b084      	sub	sp, #16
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d10a      	bne.n	8010d80 <vQueueDelete+0x28>
	__asm volatile
 8010d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d6e:	f383 8811 	msr	BASEPRI, r3
 8010d72:	f3bf 8f6f 	isb	sy
 8010d76:	f3bf 8f4f 	dsb	sy
 8010d7a:	60bb      	str	r3, [r7, #8]
}
 8010d7c:	bf00      	nop
 8010d7e:	e7fe      	b.n	8010d7e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010d80:	68f8      	ldr	r0, [r7, #12]
 8010d82:	f000 f95f 	bl	8011044 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d102      	bne.n	8010d96 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010d90:	68f8      	ldr	r0, [r7, #12]
 8010d92:	f002 f85d 	bl	8012e50 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010d96:	bf00      	nop
 8010d98:	3710      	adds	r7, #16
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}

08010d9e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010d9e:	b480      	push	{r7}
 8010da0:	b085      	sub	sp, #20
 8010da2:	af00      	add	r7, sp, #0
 8010da4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d006      	beq.n	8010dbc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8010db8:	60fb      	str	r3, [r7, #12]
 8010dba:	e001      	b.n	8010dc0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010dc0:	68fb      	ldr	r3, [r7, #12]
	}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	3714      	adds	r7, #20
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dcc:	4770      	bx	lr

08010dce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010dce:	b580      	push	{r7, lr}
 8010dd0:	b086      	sub	sp, #24
 8010dd2:	af00      	add	r7, sp, #0
 8010dd4:	60f8      	str	r0, [r7, #12]
 8010dd6:	60b9      	str	r1, [r7, #8]
 8010dd8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010de2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d10d      	bne.n	8010e08 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d14d      	bne.n	8010e90 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	689b      	ldr	r3, [r3, #8]
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f001 f88d 	bl	8011f18 <xTaskPriorityDisinherit>
 8010dfe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	2200      	movs	r2, #0
 8010e04:	609a      	str	r2, [r3, #8]
 8010e06:	e043      	b.n	8010e90 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d119      	bne.n	8010e42 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	6858      	ldr	r0, [r3, #4]
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e16:	461a      	mov	r2, r3
 8010e18:	68b9      	ldr	r1, [r7, #8]
 8010e1a:	f002 fb93 	bl	8013544 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	685a      	ldr	r2, [r3, #4]
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e26:	441a      	add	r2, r3
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	685a      	ldr	r2, [r3, #4]
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	689b      	ldr	r3, [r3, #8]
 8010e34:	429a      	cmp	r2, r3
 8010e36:	d32b      	bcc.n	8010e90 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	681a      	ldr	r2, [r3, #0]
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	605a      	str	r2, [r3, #4]
 8010e40:	e026      	b.n	8010e90 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	68d8      	ldr	r0, [r3, #12]
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e4a:	461a      	mov	r2, r3
 8010e4c:	68b9      	ldr	r1, [r7, #8]
 8010e4e:	f002 fb79 	bl	8013544 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	68da      	ldr	r2, [r3, #12]
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e5a:	425b      	negs	r3, r3
 8010e5c:	441a      	add	r2, r3
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	68da      	ldr	r2, [r3, #12]
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d207      	bcs.n	8010e7e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	689a      	ldr	r2, [r3, #8]
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e76:	425b      	negs	r3, r3
 8010e78:	441a      	add	r2, r3
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	2b02      	cmp	r3, #2
 8010e82:	d105      	bne.n	8010e90 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010e84:	693b      	ldr	r3, [r7, #16]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d002      	beq.n	8010e90 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010e8a:	693b      	ldr	r3, [r7, #16]
 8010e8c:	3b01      	subs	r3, #1
 8010e8e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010e90:	693b      	ldr	r3, [r7, #16]
 8010e92:	1c5a      	adds	r2, r3, #1
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010e98:	697b      	ldr	r3, [r7, #20]
}
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	3718      	adds	r7, #24
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	bd80      	pop	{r7, pc}

08010ea2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010ea2:	b580      	push	{r7, lr}
 8010ea4:	b082      	sub	sp, #8
 8010ea6:	af00      	add	r7, sp, #0
 8010ea8:	6078      	str	r0, [r7, #4]
 8010eaa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d018      	beq.n	8010ee6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	68da      	ldr	r2, [r3, #12]
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ebc:	441a      	add	r2, r3
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	68da      	ldr	r2, [r3, #12]
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	689b      	ldr	r3, [r3, #8]
 8010eca:	429a      	cmp	r2, r3
 8010ecc:	d303      	bcc.n	8010ed6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681a      	ldr	r2, [r3, #0]
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	68d9      	ldr	r1, [r3, #12]
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ede:	461a      	mov	r2, r3
 8010ee0:	6838      	ldr	r0, [r7, #0]
 8010ee2:	f002 fb2f 	bl	8013544 <memcpy>
	}
}
 8010ee6:	bf00      	nop
 8010ee8:	3708      	adds	r7, #8
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bd80      	pop	{r7, pc}

08010eee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010eee:	b580      	push	{r7, lr}
 8010ef0:	b084      	sub	sp, #16
 8010ef2:	af00      	add	r7, sp, #0
 8010ef4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010ef6:	f001 fde5 	bl	8012ac4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010f00:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010f02:	e011      	b.n	8010f28 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d012      	beq.n	8010f32 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	3324      	adds	r3, #36	; 0x24
 8010f10:	4618      	mov	r0, r3
 8010f12:	f000 fdb9 	bl	8011a88 <xTaskRemoveFromEventList>
 8010f16:	4603      	mov	r3, r0
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d001      	beq.n	8010f20 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010f1c:	f000 fe90 	bl	8011c40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010f20:	7bfb      	ldrb	r3, [r7, #15]
 8010f22:	3b01      	subs	r3, #1
 8010f24:	b2db      	uxtb	r3, r3
 8010f26:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	dce9      	bgt.n	8010f04 <prvUnlockQueue+0x16>
 8010f30:	e000      	b.n	8010f34 <prvUnlockQueue+0x46>
					break;
 8010f32:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	22ff      	movs	r2, #255	; 0xff
 8010f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010f3c:	f001 fdf2 	bl	8012b24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010f40:	f001 fdc0 	bl	8012ac4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010f4a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010f4c:	e011      	b.n	8010f72 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	691b      	ldr	r3, [r3, #16]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d012      	beq.n	8010f7c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	3310      	adds	r3, #16
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f000 fd94 	bl	8011a88 <xTaskRemoveFromEventList>
 8010f60:	4603      	mov	r3, r0
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d001      	beq.n	8010f6a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010f66:	f000 fe6b 	bl	8011c40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010f6a:	7bbb      	ldrb	r3, [r7, #14]
 8010f6c:	3b01      	subs	r3, #1
 8010f6e:	b2db      	uxtb	r3, r3
 8010f70:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010f72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	dce9      	bgt.n	8010f4e <prvUnlockQueue+0x60>
 8010f7a:	e000      	b.n	8010f7e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010f7c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	22ff      	movs	r2, #255	; 0xff
 8010f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010f86:	f001 fdcd 	bl	8012b24 <vPortExitCritical>
}
 8010f8a:	bf00      	nop
 8010f8c:	3710      	adds	r7, #16
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}

08010f92 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010f92:	b580      	push	{r7, lr}
 8010f94:	b084      	sub	sp, #16
 8010f96:	af00      	add	r7, sp, #0
 8010f98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010f9a:	f001 fd93 	bl	8012ac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d102      	bne.n	8010fac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	60fb      	str	r3, [r7, #12]
 8010faa:	e001      	b.n	8010fb0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010fac:	2300      	movs	r3, #0
 8010fae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010fb0:	f001 fdb8 	bl	8012b24 <vPortExitCritical>

	return xReturn;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
}
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	3710      	adds	r7, #16
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	bd80      	pop	{r7, pc}

08010fbe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010fbe:	b580      	push	{r7, lr}
 8010fc0:	b084      	sub	sp, #16
 8010fc2:	af00      	add	r7, sp, #0
 8010fc4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010fc6:	f001 fd7d 	bl	8012ac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fd2:	429a      	cmp	r2, r3
 8010fd4:	d102      	bne.n	8010fdc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	60fb      	str	r3, [r7, #12]
 8010fda:	e001      	b.n	8010fe0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010fdc:	2300      	movs	r3, #0
 8010fde:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010fe0:	f001 fda0 	bl	8012b24 <vPortExitCritical>

	return xReturn;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
}
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	3710      	adds	r7, #16
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}
	...

08010ff0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010ff0:	b480      	push	{r7}
 8010ff2:	b085      	sub	sp, #20
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
 8010ff8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	60fb      	str	r3, [r7, #12]
 8010ffe:	e014      	b.n	801102a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011000:	4a0f      	ldr	r2, [pc, #60]	; (8011040 <vQueueAddToRegistry+0x50>)
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d10b      	bne.n	8011024 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801100c:	490c      	ldr	r1, [pc, #48]	; (8011040 <vQueueAddToRegistry+0x50>)
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	683a      	ldr	r2, [r7, #0]
 8011012:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011016:	4a0a      	ldr	r2, [pc, #40]	; (8011040 <vQueueAddToRegistry+0x50>)
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	00db      	lsls	r3, r3, #3
 801101c:	4413      	add	r3, r2
 801101e:	687a      	ldr	r2, [r7, #4]
 8011020:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011022:	e006      	b.n	8011032 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	3301      	adds	r3, #1
 8011028:	60fb      	str	r3, [r7, #12]
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	2b07      	cmp	r3, #7
 801102e:	d9e7      	bls.n	8011000 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011030:	bf00      	nop
 8011032:	bf00      	nop
 8011034:	3714      	adds	r7, #20
 8011036:	46bd      	mov	sp, r7
 8011038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103c:	4770      	bx	lr
 801103e:	bf00      	nop
 8011040:	20007f44 	.word	0x20007f44

08011044 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011044:	b480      	push	{r7}
 8011046:	b085      	sub	sp, #20
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801104c:	2300      	movs	r3, #0
 801104e:	60fb      	str	r3, [r7, #12]
 8011050:	e016      	b.n	8011080 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011052:	4a10      	ldr	r2, [pc, #64]	; (8011094 <vQueueUnregisterQueue+0x50>)
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	00db      	lsls	r3, r3, #3
 8011058:	4413      	add	r3, r2
 801105a:	685b      	ldr	r3, [r3, #4]
 801105c:	687a      	ldr	r2, [r7, #4]
 801105e:	429a      	cmp	r2, r3
 8011060:	d10b      	bne.n	801107a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011062:	4a0c      	ldr	r2, [pc, #48]	; (8011094 <vQueueUnregisterQueue+0x50>)
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	2100      	movs	r1, #0
 8011068:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801106c:	4a09      	ldr	r2, [pc, #36]	; (8011094 <vQueueUnregisterQueue+0x50>)
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	00db      	lsls	r3, r3, #3
 8011072:	4413      	add	r3, r2
 8011074:	2200      	movs	r2, #0
 8011076:	605a      	str	r2, [r3, #4]
				break;
 8011078:	e006      	b.n	8011088 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	3301      	adds	r3, #1
 801107e:	60fb      	str	r3, [r7, #12]
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	2b07      	cmp	r3, #7
 8011084:	d9e5      	bls.n	8011052 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011086:	bf00      	nop
 8011088:	bf00      	nop
 801108a:	3714      	adds	r7, #20
 801108c:	46bd      	mov	sp, r7
 801108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011092:	4770      	bx	lr
 8011094:	20007f44 	.word	0x20007f44

08011098 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011098:	b580      	push	{r7, lr}
 801109a:	b086      	sub	sp, #24
 801109c:	af00      	add	r7, sp, #0
 801109e:	60f8      	str	r0, [r7, #12]
 80110a0:	60b9      	str	r1, [r7, #8]
 80110a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80110a8:	f001 fd0c 	bl	8012ac4 <vPortEnterCritical>
 80110ac:	697b      	ldr	r3, [r7, #20]
 80110ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80110b2:	b25b      	sxtb	r3, r3
 80110b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110b8:	d103      	bne.n	80110c2 <vQueueWaitForMessageRestricted+0x2a>
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	2200      	movs	r2, #0
 80110be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80110c2:	697b      	ldr	r3, [r7, #20]
 80110c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80110c8:	b25b      	sxtb	r3, r3
 80110ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110ce:	d103      	bne.n	80110d8 <vQueueWaitForMessageRestricted+0x40>
 80110d0:	697b      	ldr	r3, [r7, #20]
 80110d2:	2200      	movs	r2, #0
 80110d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80110d8:	f001 fd24 	bl	8012b24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80110dc:	697b      	ldr	r3, [r7, #20]
 80110de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d106      	bne.n	80110f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	3324      	adds	r3, #36	; 0x24
 80110e8:	687a      	ldr	r2, [r7, #4]
 80110ea:	68b9      	ldr	r1, [r7, #8]
 80110ec:	4618      	mov	r0, r3
 80110ee:	f000 fc9f 	bl	8011a30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80110f2:	6978      	ldr	r0, [r7, #20]
 80110f4:	f7ff fefb 	bl	8010eee <prvUnlockQueue>
	}
 80110f8:	bf00      	nop
 80110fa:	3718      	adds	r7, #24
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd80      	pop	{r7, pc}

08011100 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011100:	b580      	push	{r7, lr}
 8011102:	b08e      	sub	sp, #56	; 0x38
 8011104:	af04      	add	r7, sp, #16
 8011106:	60f8      	str	r0, [r7, #12]
 8011108:	60b9      	str	r1, [r7, #8]
 801110a:	607a      	str	r2, [r7, #4]
 801110c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801110e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011110:	2b00      	cmp	r3, #0
 8011112:	d10a      	bne.n	801112a <xTaskCreateStatic+0x2a>
	__asm volatile
 8011114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011118:	f383 8811 	msr	BASEPRI, r3
 801111c:	f3bf 8f6f 	isb	sy
 8011120:	f3bf 8f4f 	dsb	sy
 8011124:	623b      	str	r3, [r7, #32]
}
 8011126:	bf00      	nop
 8011128:	e7fe      	b.n	8011128 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801112a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801112c:	2b00      	cmp	r3, #0
 801112e:	d10a      	bne.n	8011146 <xTaskCreateStatic+0x46>
	__asm volatile
 8011130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011134:	f383 8811 	msr	BASEPRI, r3
 8011138:	f3bf 8f6f 	isb	sy
 801113c:	f3bf 8f4f 	dsb	sy
 8011140:	61fb      	str	r3, [r7, #28]
}
 8011142:	bf00      	nop
 8011144:	e7fe      	b.n	8011144 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011146:	23bc      	movs	r3, #188	; 0xbc
 8011148:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801114a:	693b      	ldr	r3, [r7, #16]
 801114c:	2bbc      	cmp	r3, #188	; 0xbc
 801114e:	d00a      	beq.n	8011166 <xTaskCreateStatic+0x66>
	__asm volatile
 8011150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011154:	f383 8811 	msr	BASEPRI, r3
 8011158:	f3bf 8f6f 	isb	sy
 801115c:	f3bf 8f4f 	dsb	sy
 8011160:	61bb      	str	r3, [r7, #24]
}
 8011162:	bf00      	nop
 8011164:	e7fe      	b.n	8011164 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011166:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801116a:	2b00      	cmp	r3, #0
 801116c:	d01e      	beq.n	80111ac <xTaskCreateStatic+0xac>
 801116e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011170:	2b00      	cmp	r3, #0
 8011172:	d01b      	beq.n	80111ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011176:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801117a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801117c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011180:	2202      	movs	r2, #2
 8011182:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011186:	2300      	movs	r3, #0
 8011188:	9303      	str	r3, [sp, #12]
 801118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801118c:	9302      	str	r3, [sp, #8]
 801118e:	f107 0314 	add.w	r3, r7, #20
 8011192:	9301      	str	r3, [sp, #4]
 8011194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011196:	9300      	str	r3, [sp, #0]
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	687a      	ldr	r2, [r7, #4]
 801119c:	68b9      	ldr	r1, [r7, #8]
 801119e:	68f8      	ldr	r0, [r7, #12]
 80111a0:	f000 f850 	bl	8011244 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80111a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111a6:	f000 f8f3 	bl	8011390 <prvAddNewTaskToReadyList>
 80111aa:	e001      	b.n	80111b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80111ac:	2300      	movs	r3, #0
 80111ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80111b0:	697b      	ldr	r3, [r7, #20]
	}
 80111b2:	4618      	mov	r0, r3
 80111b4:	3728      	adds	r7, #40	; 0x28
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}

080111ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80111ba:	b580      	push	{r7, lr}
 80111bc:	b08c      	sub	sp, #48	; 0x30
 80111be:	af04      	add	r7, sp, #16
 80111c0:	60f8      	str	r0, [r7, #12]
 80111c2:	60b9      	str	r1, [r7, #8]
 80111c4:	603b      	str	r3, [r7, #0]
 80111c6:	4613      	mov	r3, r2
 80111c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80111ca:	88fb      	ldrh	r3, [r7, #6]
 80111cc:	009b      	lsls	r3, r3, #2
 80111ce:	4618      	mov	r0, r3
 80111d0:	f001 fd9a 	bl	8012d08 <pvPortMalloc>
 80111d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80111d6:	697b      	ldr	r3, [r7, #20]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d00e      	beq.n	80111fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80111dc:	20bc      	movs	r0, #188	; 0xbc
 80111de:	f001 fd93 	bl	8012d08 <pvPortMalloc>
 80111e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80111e4:	69fb      	ldr	r3, [r7, #28]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d003      	beq.n	80111f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80111ea:	69fb      	ldr	r3, [r7, #28]
 80111ec:	697a      	ldr	r2, [r7, #20]
 80111ee:	631a      	str	r2, [r3, #48]	; 0x30
 80111f0:	e005      	b.n	80111fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80111f2:	6978      	ldr	r0, [r7, #20]
 80111f4:	f001 fe2c 	bl	8012e50 <vPortFree>
 80111f8:	e001      	b.n	80111fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80111fa:	2300      	movs	r3, #0
 80111fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80111fe:	69fb      	ldr	r3, [r7, #28]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d017      	beq.n	8011234 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011204:	69fb      	ldr	r3, [r7, #28]
 8011206:	2200      	movs	r2, #0
 8011208:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801120c:	88fa      	ldrh	r2, [r7, #6]
 801120e:	2300      	movs	r3, #0
 8011210:	9303      	str	r3, [sp, #12]
 8011212:	69fb      	ldr	r3, [r7, #28]
 8011214:	9302      	str	r3, [sp, #8]
 8011216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011218:	9301      	str	r3, [sp, #4]
 801121a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801121c:	9300      	str	r3, [sp, #0]
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	68b9      	ldr	r1, [r7, #8]
 8011222:	68f8      	ldr	r0, [r7, #12]
 8011224:	f000 f80e 	bl	8011244 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011228:	69f8      	ldr	r0, [r7, #28]
 801122a:	f000 f8b1 	bl	8011390 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801122e:	2301      	movs	r3, #1
 8011230:	61bb      	str	r3, [r7, #24]
 8011232:	e002      	b.n	801123a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011238:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801123a:	69bb      	ldr	r3, [r7, #24]
	}
 801123c:	4618      	mov	r0, r3
 801123e:	3720      	adds	r7, #32
 8011240:	46bd      	mov	sp, r7
 8011242:	bd80      	pop	{r7, pc}

08011244 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b088      	sub	sp, #32
 8011248:	af00      	add	r7, sp, #0
 801124a:	60f8      	str	r0, [r7, #12]
 801124c:	60b9      	str	r1, [r7, #8]
 801124e:	607a      	str	r2, [r7, #4]
 8011250:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011254:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	009b      	lsls	r3, r3, #2
 801125a:	461a      	mov	r2, r3
 801125c:	21a5      	movs	r1, #165	; 0xa5
 801125e:	f002 f97f 	bl	8013560 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801126c:	3b01      	subs	r3, #1
 801126e:	009b      	lsls	r3, r3, #2
 8011270:	4413      	add	r3, r2
 8011272:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011274:	69bb      	ldr	r3, [r7, #24]
 8011276:	f023 0307 	bic.w	r3, r3, #7
 801127a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801127c:	69bb      	ldr	r3, [r7, #24]
 801127e:	f003 0307 	and.w	r3, r3, #7
 8011282:	2b00      	cmp	r3, #0
 8011284:	d00a      	beq.n	801129c <prvInitialiseNewTask+0x58>
	__asm volatile
 8011286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801128a:	f383 8811 	msr	BASEPRI, r3
 801128e:	f3bf 8f6f 	isb	sy
 8011292:	f3bf 8f4f 	dsb	sy
 8011296:	617b      	str	r3, [r7, #20]
}
 8011298:	bf00      	nop
 801129a:	e7fe      	b.n	801129a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801129c:	68bb      	ldr	r3, [r7, #8]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d01f      	beq.n	80112e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80112a2:	2300      	movs	r3, #0
 80112a4:	61fb      	str	r3, [r7, #28]
 80112a6:	e012      	b.n	80112ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80112a8:	68ba      	ldr	r2, [r7, #8]
 80112aa:	69fb      	ldr	r3, [r7, #28]
 80112ac:	4413      	add	r3, r2
 80112ae:	7819      	ldrb	r1, [r3, #0]
 80112b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112b2:	69fb      	ldr	r3, [r7, #28]
 80112b4:	4413      	add	r3, r2
 80112b6:	3334      	adds	r3, #52	; 0x34
 80112b8:	460a      	mov	r2, r1
 80112ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80112bc:	68ba      	ldr	r2, [r7, #8]
 80112be:	69fb      	ldr	r3, [r7, #28]
 80112c0:	4413      	add	r3, r2
 80112c2:	781b      	ldrb	r3, [r3, #0]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d006      	beq.n	80112d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80112c8:	69fb      	ldr	r3, [r7, #28]
 80112ca:	3301      	adds	r3, #1
 80112cc:	61fb      	str	r3, [r7, #28]
 80112ce:	69fb      	ldr	r3, [r7, #28]
 80112d0:	2b0f      	cmp	r3, #15
 80112d2:	d9e9      	bls.n	80112a8 <prvInitialiseNewTask+0x64>
 80112d4:	e000      	b.n	80112d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80112d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80112d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112da:	2200      	movs	r2, #0
 80112dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80112e0:	e003      	b.n	80112ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80112e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e4:	2200      	movs	r2, #0
 80112e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80112ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ec:	2b37      	cmp	r3, #55	; 0x37
 80112ee:	d901      	bls.n	80112f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80112f0:	2337      	movs	r3, #55	; 0x37
 80112f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80112f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80112fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011302:	2200      	movs	r2, #0
 8011304:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011308:	3304      	adds	r3, #4
 801130a:	4618      	mov	r0, r3
 801130c:	f7fe fe1a 	bl	800ff44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011312:	3318      	adds	r3, #24
 8011314:	4618      	mov	r0, r3
 8011316:	f7fe fe15 	bl	800ff44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801131a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801131c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801131e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011322:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011328:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801132a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801132c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801132e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011332:	2200      	movs	r2, #0
 8011334:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801133a:	2200      	movs	r2, #0
 801133c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011342:	3354      	adds	r3, #84	; 0x54
 8011344:	2260      	movs	r2, #96	; 0x60
 8011346:	2100      	movs	r1, #0
 8011348:	4618      	mov	r0, r3
 801134a:	f002 f909 	bl	8013560 <memset>
 801134e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011350:	4a0c      	ldr	r2, [pc, #48]	; (8011384 <prvInitialiseNewTask+0x140>)
 8011352:	659a      	str	r2, [r3, #88]	; 0x58
 8011354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011356:	4a0c      	ldr	r2, [pc, #48]	; (8011388 <prvInitialiseNewTask+0x144>)
 8011358:	65da      	str	r2, [r3, #92]	; 0x5c
 801135a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801135c:	4a0b      	ldr	r2, [pc, #44]	; (801138c <prvInitialiseNewTask+0x148>)
 801135e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011360:	683a      	ldr	r2, [r7, #0]
 8011362:	68f9      	ldr	r1, [r7, #12]
 8011364:	69b8      	ldr	r0, [r7, #24]
 8011366:	f001 fa7d 	bl	8012864 <pxPortInitialiseStack>
 801136a:	4602      	mov	r2, r0
 801136c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801136e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011372:	2b00      	cmp	r3, #0
 8011374:	d002      	beq.n	801137c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801137a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801137c:	bf00      	nop
 801137e:	3720      	adds	r7, #32
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}
 8011384:	08019528 	.word	0x08019528
 8011388:	08019548 	.word	0x08019548
 801138c:	08019508 	.word	0x08019508

08011390 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b082      	sub	sp, #8
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011398:	f001 fb94 	bl	8012ac4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801139c:	4b2d      	ldr	r3, [pc, #180]	; (8011454 <prvAddNewTaskToReadyList+0xc4>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	3301      	adds	r3, #1
 80113a2:	4a2c      	ldr	r2, [pc, #176]	; (8011454 <prvAddNewTaskToReadyList+0xc4>)
 80113a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80113a6:	4b2c      	ldr	r3, [pc, #176]	; (8011458 <prvAddNewTaskToReadyList+0xc8>)
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d109      	bne.n	80113c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80113ae:	4a2a      	ldr	r2, [pc, #168]	; (8011458 <prvAddNewTaskToReadyList+0xc8>)
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80113b4:	4b27      	ldr	r3, [pc, #156]	; (8011454 <prvAddNewTaskToReadyList+0xc4>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	2b01      	cmp	r3, #1
 80113ba:	d110      	bne.n	80113de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80113bc:	f000 fc64 	bl	8011c88 <prvInitialiseTaskLists>
 80113c0:	e00d      	b.n	80113de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80113c2:	4b26      	ldr	r3, [pc, #152]	; (801145c <prvAddNewTaskToReadyList+0xcc>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d109      	bne.n	80113de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80113ca:	4b23      	ldr	r3, [pc, #140]	; (8011458 <prvAddNewTaskToReadyList+0xc8>)
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113d4:	429a      	cmp	r2, r3
 80113d6:	d802      	bhi.n	80113de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80113d8:	4a1f      	ldr	r2, [pc, #124]	; (8011458 <prvAddNewTaskToReadyList+0xc8>)
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80113de:	4b20      	ldr	r3, [pc, #128]	; (8011460 <prvAddNewTaskToReadyList+0xd0>)
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	3301      	adds	r3, #1
 80113e4:	4a1e      	ldr	r2, [pc, #120]	; (8011460 <prvAddNewTaskToReadyList+0xd0>)
 80113e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80113e8:	4b1d      	ldr	r3, [pc, #116]	; (8011460 <prvAddNewTaskToReadyList+0xd0>)
 80113ea:	681a      	ldr	r2, [r3, #0]
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113f4:	4b1b      	ldr	r3, [pc, #108]	; (8011464 <prvAddNewTaskToReadyList+0xd4>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	429a      	cmp	r2, r3
 80113fa:	d903      	bls.n	8011404 <prvAddNewTaskToReadyList+0x74>
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011400:	4a18      	ldr	r2, [pc, #96]	; (8011464 <prvAddNewTaskToReadyList+0xd4>)
 8011402:	6013      	str	r3, [r2, #0]
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011408:	4613      	mov	r3, r2
 801140a:	009b      	lsls	r3, r3, #2
 801140c:	4413      	add	r3, r2
 801140e:	009b      	lsls	r3, r3, #2
 8011410:	4a15      	ldr	r2, [pc, #84]	; (8011468 <prvAddNewTaskToReadyList+0xd8>)
 8011412:	441a      	add	r2, r3
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	3304      	adds	r3, #4
 8011418:	4619      	mov	r1, r3
 801141a:	4610      	mov	r0, r2
 801141c:	f7fe fd9f 	bl	800ff5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011420:	f001 fb80 	bl	8012b24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011424:	4b0d      	ldr	r3, [pc, #52]	; (801145c <prvAddNewTaskToReadyList+0xcc>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d00e      	beq.n	801144a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801142c:	4b0a      	ldr	r3, [pc, #40]	; (8011458 <prvAddNewTaskToReadyList+0xc8>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011436:	429a      	cmp	r2, r3
 8011438:	d207      	bcs.n	801144a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801143a:	4b0c      	ldr	r3, [pc, #48]	; (801146c <prvAddNewTaskToReadyList+0xdc>)
 801143c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011440:	601a      	str	r2, [r3, #0]
 8011442:	f3bf 8f4f 	dsb	sy
 8011446:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801144a:	bf00      	nop
 801144c:	3708      	adds	r7, #8
 801144e:	46bd      	mov	sp, r7
 8011450:	bd80      	pop	{r7, pc}
 8011452:	bf00      	nop
 8011454:	20008458 	.word	0x20008458
 8011458:	20007f84 	.word	0x20007f84
 801145c:	20008464 	.word	0x20008464
 8011460:	20008474 	.word	0x20008474
 8011464:	20008460 	.word	0x20008460
 8011468:	20007f88 	.word	0x20007f88
 801146c:	e000ed04 	.word	0xe000ed04

08011470 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8011470:	b580      	push	{r7, lr}
 8011472:	b084      	sub	sp, #16
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8011478:	f001 fb24 	bl	8012ac4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d102      	bne.n	8011488 <vTaskDelete+0x18>
 8011482:	4b2c      	ldr	r3, [pc, #176]	; (8011534 <vTaskDelete+0xc4>)
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	e000      	b.n	801148a <vTaskDelete+0x1a>
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	3304      	adds	r3, #4
 8011490:	4618      	mov	r0, r3
 8011492:	f7fe fdc1 	bl	8010018 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801149a:	2b00      	cmp	r3, #0
 801149c:	d004      	beq.n	80114a8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	3318      	adds	r3, #24
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7fe fdb8 	bl	8010018 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80114a8:	4b23      	ldr	r3, [pc, #140]	; (8011538 <vTaskDelete+0xc8>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	3301      	adds	r3, #1
 80114ae:	4a22      	ldr	r2, [pc, #136]	; (8011538 <vTaskDelete+0xc8>)
 80114b0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80114b2:	4b20      	ldr	r3, [pc, #128]	; (8011534 <vTaskDelete+0xc4>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	68fa      	ldr	r2, [r7, #12]
 80114b8:	429a      	cmp	r2, r3
 80114ba:	d10b      	bne.n	80114d4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	3304      	adds	r3, #4
 80114c0:	4619      	mov	r1, r3
 80114c2:	481e      	ldr	r0, [pc, #120]	; (801153c <vTaskDelete+0xcc>)
 80114c4:	f7fe fd4b 	bl	800ff5e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80114c8:	4b1d      	ldr	r3, [pc, #116]	; (8011540 <vTaskDelete+0xd0>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	3301      	adds	r3, #1
 80114ce:	4a1c      	ldr	r2, [pc, #112]	; (8011540 <vTaskDelete+0xd0>)
 80114d0:	6013      	str	r3, [r2, #0]
 80114d2:	e009      	b.n	80114e8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80114d4:	4b1b      	ldr	r3, [pc, #108]	; (8011544 <vTaskDelete+0xd4>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	3b01      	subs	r3, #1
 80114da:	4a1a      	ldr	r2, [pc, #104]	; (8011544 <vTaskDelete+0xd4>)
 80114dc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80114de:	68f8      	ldr	r0, [r7, #12]
 80114e0:	f000 fc40 	bl	8011d64 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80114e4:	f000 fc72 	bl	8011dcc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80114e8:	f001 fb1c 	bl	8012b24 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80114ec:	4b16      	ldr	r3, [pc, #88]	; (8011548 <vTaskDelete+0xd8>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d01b      	beq.n	801152c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80114f4:	4b0f      	ldr	r3, [pc, #60]	; (8011534 <vTaskDelete+0xc4>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	68fa      	ldr	r2, [r7, #12]
 80114fa:	429a      	cmp	r2, r3
 80114fc:	d116      	bne.n	801152c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80114fe:	4b13      	ldr	r3, [pc, #76]	; (801154c <vTaskDelete+0xdc>)
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d00a      	beq.n	801151c <vTaskDelete+0xac>
	__asm volatile
 8011506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801150a:	f383 8811 	msr	BASEPRI, r3
 801150e:	f3bf 8f6f 	isb	sy
 8011512:	f3bf 8f4f 	dsb	sy
 8011516:	60bb      	str	r3, [r7, #8]
}
 8011518:	bf00      	nop
 801151a:	e7fe      	b.n	801151a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 801151c:	4b0c      	ldr	r3, [pc, #48]	; (8011550 <vTaskDelete+0xe0>)
 801151e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011522:	601a      	str	r2, [r3, #0]
 8011524:	f3bf 8f4f 	dsb	sy
 8011528:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801152c:	bf00      	nop
 801152e:	3710      	adds	r7, #16
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}
 8011534:	20007f84 	.word	0x20007f84
 8011538:	20008474 	.word	0x20008474
 801153c:	2000842c 	.word	0x2000842c
 8011540:	20008440 	.word	0x20008440
 8011544:	20008458 	.word	0x20008458
 8011548:	20008464 	.word	0x20008464
 801154c:	20008480 	.word	0x20008480
 8011550:	e000ed04 	.word	0xe000ed04

08011554 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b08a      	sub	sp, #40	; 0x28
 8011558:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801155a:	2300      	movs	r3, #0
 801155c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801155e:	2300      	movs	r3, #0
 8011560:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011562:	463a      	mov	r2, r7
 8011564:	1d39      	adds	r1, r7, #4
 8011566:	f107 0308 	add.w	r3, r7, #8
 801156a:	4618      	mov	r0, r3
 801156c:	f7fe fc96 	bl	800fe9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011570:	6839      	ldr	r1, [r7, #0]
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	68ba      	ldr	r2, [r7, #8]
 8011576:	9202      	str	r2, [sp, #8]
 8011578:	9301      	str	r3, [sp, #4]
 801157a:	2300      	movs	r3, #0
 801157c:	9300      	str	r3, [sp, #0]
 801157e:	2300      	movs	r3, #0
 8011580:	460a      	mov	r2, r1
 8011582:	4924      	ldr	r1, [pc, #144]	; (8011614 <vTaskStartScheduler+0xc0>)
 8011584:	4824      	ldr	r0, [pc, #144]	; (8011618 <vTaskStartScheduler+0xc4>)
 8011586:	f7ff fdbb 	bl	8011100 <xTaskCreateStatic>
 801158a:	4603      	mov	r3, r0
 801158c:	4a23      	ldr	r2, [pc, #140]	; (801161c <vTaskStartScheduler+0xc8>)
 801158e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011590:	4b22      	ldr	r3, [pc, #136]	; (801161c <vTaskStartScheduler+0xc8>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d002      	beq.n	801159e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011598:	2301      	movs	r3, #1
 801159a:	617b      	str	r3, [r7, #20]
 801159c:	e001      	b.n	80115a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801159e:	2300      	movs	r3, #0
 80115a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80115a2:	697b      	ldr	r3, [r7, #20]
 80115a4:	2b01      	cmp	r3, #1
 80115a6:	d102      	bne.n	80115ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80115a8:	f000 fe0e 	bl	80121c8 <xTimerCreateTimerTask>
 80115ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80115ae:	697b      	ldr	r3, [r7, #20]
 80115b0:	2b01      	cmp	r3, #1
 80115b2:	d11b      	bne.n	80115ec <vTaskStartScheduler+0x98>
	__asm volatile
 80115b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115b8:	f383 8811 	msr	BASEPRI, r3
 80115bc:	f3bf 8f6f 	isb	sy
 80115c0:	f3bf 8f4f 	dsb	sy
 80115c4:	613b      	str	r3, [r7, #16]
}
 80115c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80115c8:	4b15      	ldr	r3, [pc, #84]	; (8011620 <vTaskStartScheduler+0xcc>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	3354      	adds	r3, #84	; 0x54
 80115ce:	4a15      	ldr	r2, [pc, #84]	; (8011624 <vTaskStartScheduler+0xd0>)
 80115d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80115d2:	4b15      	ldr	r3, [pc, #84]	; (8011628 <vTaskStartScheduler+0xd4>)
 80115d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80115d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80115da:	4b14      	ldr	r3, [pc, #80]	; (801162c <vTaskStartScheduler+0xd8>)
 80115dc:	2201      	movs	r2, #1
 80115de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80115e0:	4b13      	ldr	r3, [pc, #76]	; (8011630 <vTaskStartScheduler+0xdc>)
 80115e2:	2200      	movs	r2, #0
 80115e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80115e6:	f001 f9cb 	bl	8012980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80115ea:	e00e      	b.n	801160a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80115ec:	697b      	ldr	r3, [r7, #20]
 80115ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80115f2:	d10a      	bne.n	801160a <vTaskStartScheduler+0xb6>
	__asm volatile
 80115f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115f8:	f383 8811 	msr	BASEPRI, r3
 80115fc:	f3bf 8f6f 	isb	sy
 8011600:	f3bf 8f4f 	dsb	sy
 8011604:	60fb      	str	r3, [r7, #12]
}
 8011606:	bf00      	nop
 8011608:	e7fe      	b.n	8011608 <vTaskStartScheduler+0xb4>
}
 801160a:	bf00      	nop
 801160c:	3718      	adds	r7, #24
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}
 8011612:	bf00      	nop
 8011614:	080183b4 	.word	0x080183b4
 8011618:	08011c59 	.word	0x08011c59
 801161c:	2000847c 	.word	0x2000847c
 8011620:	20007f84 	.word	0x20007f84
 8011624:	20000188 	.word	0x20000188
 8011628:	20008478 	.word	0x20008478
 801162c:	20008464 	.word	0x20008464
 8011630:	2000845c 	.word	0x2000845c

08011634 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011634:	b480      	push	{r7}
 8011636:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011638:	4b04      	ldr	r3, [pc, #16]	; (801164c <vTaskSuspendAll+0x18>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	3301      	adds	r3, #1
 801163e:	4a03      	ldr	r2, [pc, #12]	; (801164c <vTaskSuspendAll+0x18>)
 8011640:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011642:	bf00      	nop
 8011644:	46bd      	mov	sp, r7
 8011646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164a:	4770      	bx	lr
 801164c:	20008480 	.word	0x20008480

08011650 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b084      	sub	sp, #16
 8011654:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011656:	2300      	movs	r3, #0
 8011658:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801165a:	2300      	movs	r3, #0
 801165c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801165e:	4b42      	ldr	r3, [pc, #264]	; (8011768 <xTaskResumeAll+0x118>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d10a      	bne.n	801167c <xTaskResumeAll+0x2c>
	__asm volatile
 8011666:	f04f 0350 	mov.w	r3, #80	; 0x50
 801166a:	f383 8811 	msr	BASEPRI, r3
 801166e:	f3bf 8f6f 	isb	sy
 8011672:	f3bf 8f4f 	dsb	sy
 8011676:	603b      	str	r3, [r7, #0]
}
 8011678:	bf00      	nop
 801167a:	e7fe      	b.n	801167a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801167c:	f001 fa22 	bl	8012ac4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011680:	4b39      	ldr	r3, [pc, #228]	; (8011768 <xTaskResumeAll+0x118>)
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	3b01      	subs	r3, #1
 8011686:	4a38      	ldr	r2, [pc, #224]	; (8011768 <xTaskResumeAll+0x118>)
 8011688:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801168a:	4b37      	ldr	r3, [pc, #220]	; (8011768 <xTaskResumeAll+0x118>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d162      	bne.n	8011758 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011692:	4b36      	ldr	r3, [pc, #216]	; (801176c <xTaskResumeAll+0x11c>)
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d05e      	beq.n	8011758 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801169a:	e02f      	b.n	80116fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801169c:	4b34      	ldr	r3, [pc, #208]	; (8011770 <xTaskResumeAll+0x120>)
 801169e:	68db      	ldr	r3, [r3, #12]
 80116a0:	68db      	ldr	r3, [r3, #12]
 80116a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	3318      	adds	r3, #24
 80116a8:	4618      	mov	r0, r3
 80116aa:	f7fe fcb5 	bl	8010018 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	3304      	adds	r3, #4
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7fe fcb0 	bl	8010018 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116bc:	4b2d      	ldr	r3, [pc, #180]	; (8011774 <xTaskResumeAll+0x124>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	429a      	cmp	r2, r3
 80116c2:	d903      	bls.n	80116cc <xTaskResumeAll+0x7c>
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116c8:	4a2a      	ldr	r2, [pc, #168]	; (8011774 <xTaskResumeAll+0x124>)
 80116ca:	6013      	str	r3, [r2, #0]
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116d0:	4613      	mov	r3, r2
 80116d2:	009b      	lsls	r3, r3, #2
 80116d4:	4413      	add	r3, r2
 80116d6:	009b      	lsls	r3, r3, #2
 80116d8:	4a27      	ldr	r2, [pc, #156]	; (8011778 <xTaskResumeAll+0x128>)
 80116da:	441a      	add	r2, r3
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	3304      	adds	r3, #4
 80116e0:	4619      	mov	r1, r3
 80116e2:	4610      	mov	r0, r2
 80116e4:	f7fe fc3b 	bl	800ff5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116ec:	4b23      	ldr	r3, [pc, #140]	; (801177c <xTaskResumeAll+0x12c>)
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d302      	bcc.n	80116fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80116f6:	4b22      	ldr	r3, [pc, #136]	; (8011780 <xTaskResumeAll+0x130>)
 80116f8:	2201      	movs	r2, #1
 80116fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80116fc:	4b1c      	ldr	r3, [pc, #112]	; (8011770 <xTaskResumeAll+0x120>)
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d1cb      	bne.n	801169c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d001      	beq.n	801170e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801170a:	f000 fb5f 	bl	8011dcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801170e:	4b1d      	ldr	r3, [pc, #116]	; (8011784 <xTaskResumeAll+0x134>)
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d010      	beq.n	801173c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801171a:	f000 f847 	bl	80117ac <xTaskIncrementTick>
 801171e:	4603      	mov	r3, r0
 8011720:	2b00      	cmp	r3, #0
 8011722:	d002      	beq.n	801172a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011724:	4b16      	ldr	r3, [pc, #88]	; (8011780 <xTaskResumeAll+0x130>)
 8011726:	2201      	movs	r2, #1
 8011728:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	3b01      	subs	r3, #1
 801172e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d1f1      	bne.n	801171a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011736:	4b13      	ldr	r3, [pc, #76]	; (8011784 <xTaskResumeAll+0x134>)
 8011738:	2200      	movs	r2, #0
 801173a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801173c:	4b10      	ldr	r3, [pc, #64]	; (8011780 <xTaskResumeAll+0x130>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d009      	beq.n	8011758 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011744:	2301      	movs	r3, #1
 8011746:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011748:	4b0f      	ldr	r3, [pc, #60]	; (8011788 <xTaskResumeAll+0x138>)
 801174a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801174e:	601a      	str	r2, [r3, #0]
 8011750:	f3bf 8f4f 	dsb	sy
 8011754:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011758:	f001 f9e4 	bl	8012b24 <vPortExitCritical>

	return xAlreadyYielded;
 801175c:	68bb      	ldr	r3, [r7, #8]
}
 801175e:	4618      	mov	r0, r3
 8011760:	3710      	adds	r7, #16
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	20008480 	.word	0x20008480
 801176c:	20008458 	.word	0x20008458
 8011770:	20008418 	.word	0x20008418
 8011774:	20008460 	.word	0x20008460
 8011778:	20007f88 	.word	0x20007f88
 801177c:	20007f84 	.word	0x20007f84
 8011780:	2000846c 	.word	0x2000846c
 8011784:	20008468 	.word	0x20008468
 8011788:	e000ed04 	.word	0xe000ed04

0801178c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801178c:	b480      	push	{r7}
 801178e:	b083      	sub	sp, #12
 8011790:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011792:	4b05      	ldr	r3, [pc, #20]	; (80117a8 <xTaskGetTickCount+0x1c>)
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011798:	687b      	ldr	r3, [r7, #4]
}
 801179a:	4618      	mov	r0, r3
 801179c:	370c      	adds	r7, #12
 801179e:	46bd      	mov	sp, r7
 80117a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a4:	4770      	bx	lr
 80117a6:	bf00      	nop
 80117a8:	2000845c 	.word	0x2000845c

080117ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b086      	sub	sp, #24
 80117b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80117b2:	2300      	movs	r3, #0
 80117b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80117b6:	4b4f      	ldr	r3, [pc, #316]	; (80118f4 <xTaskIncrementTick+0x148>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	f040 808f 	bne.w	80118de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80117c0:	4b4d      	ldr	r3, [pc, #308]	; (80118f8 <xTaskIncrementTick+0x14c>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	3301      	adds	r3, #1
 80117c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80117c8:	4a4b      	ldr	r2, [pc, #300]	; (80118f8 <xTaskIncrementTick+0x14c>)
 80117ca:	693b      	ldr	r3, [r7, #16]
 80117cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80117ce:	693b      	ldr	r3, [r7, #16]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d120      	bne.n	8011816 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80117d4:	4b49      	ldr	r3, [pc, #292]	; (80118fc <xTaskIncrementTick+0x150>)
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d00a      	beq.n	80117f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80117de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117e2:	f383 8811 	msr	BASEPRI, r3
 80117e6:	f3bf 8f6f 	isb	sy
 80117ea:	f3bf 8f4f 	dsb	sy
 80117ee:	603b      	str	r3, [r7, #0]
}
 80117f0:	bf00      	nop
 80117f2:	e7fe      	b.n	80117f2 <xTaskIncrementTick+0x46>
 80117f4:	4b41      	ldr	r3, [pc, #260]	; (80118fc <xTaskIncrementTick+0x150>)
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	60fb      	str	r3, [r7, #12]
 80117fa:	4b41      	ldr	r3, [pc, #260]	; (8011900 <xTaskIncrementTick+0x154>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	4a3f      	ldr	r2, [pc, #252]	; (80118fc <xTaskIncrementTick+0x150>)
 8011800:	6013      	str	r3, [r2, #0]
 8011802:	4a3f      	ldr	r2, [pc, #252]	; (8011900 <xTaskIncrementTick+0x154>)
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	6013      	str	r3, [r2, #0]
 8011808:	4b3e      	ldr	r3, [pc, #248]	; (8011904 <xTaskIncrementTick+0x158>)
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	3301      	adds	r3, #1
 801180e:	4a3d      	ldr	r2, [pc, #244]	; (8011904 <xTaskIncrementTick+0x158>)
 8011810:	6013      	str	r3, [r2, #0]
 8011812:	f000 fadb 	bl	8011dcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011816:	4b3c      	ldr	r3, [pc, #240]	; (8011908 <xTaskIncrementTick+0x15c>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	693a      	ldr	r2, [r7, #16]
 801181c:	429a      	cmp	r2, r3
 801181e:	d349      	bcc.n	80118b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011820:	4b36      	ldr	r3, [pc, #216]	; (80118fc <xTaskIncrementTick+0x150>)
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d104      	bne.n	8011834 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801182a:	4b37      	ldr	r3, [pc, #220]	; (8011908 <xTaskIncrementTick+0x15c>)
 801182c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011830:	601a      	str	r2, [r3, #0]
					break;
 8011832:	e03f      	b.n	80118b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011834:	4b31      	ldr	r3, [pc, #196]	; (80118fc <xTaskIncrementTick+0x150>)
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	68db      	ldr	r3, [r3, #12]
 801183a:	68db      	ldr	r3, [r3, #12]
 801183c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801183e:	68bb      	ldr	r3, [r7, #8]
 8011840:	685b      	ldr	r3, [r3, #4]
 8011842:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011844:	693a      	ldr	r2, [r7, #16]
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	429a      	cmp	r2, r3
 801184a:	d203      	bcs.n	8011854 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801184c:	4a2e      	ldr	r2, [pc, #184]	; (8011908 <xTaskIncrementTick+0x15c>)
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011852:	e02f      	b.n	80118b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	3304      	adds	r3, #4
 8011858:	4618      	mov	r0, r3
 801185a:	f7fe fbdd 	bl	8010018 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801185e:	68bb      	ldr	r3, [r7, #8]
 8011860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011862:	2b00      	cmp	r3, #0
 8011864:	d004      	beq.n	8011870 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011866:	68bb      	ldr	r3, [r7, #8]
 8011868:	3318      	adds	r3, #24
 801186a:	4618      	mov	r0, r3
 801186c:	f7fe fbd4 	bl	8010018 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011874:	4b25      	ldr	r3, [pc, #148]	; (801190c <xTaskIncrementTick+0x160>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	429a      	cmp	r2, r3
 801187a:	d903      	bls.n	8011884 <xTaskIncrementTick+0xd8>
 801187c:	68bb      	ldr	r3, [r7, #8]
 801187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011880:	4a22      	ldr	r2, [pc, #136]	; (801190c <xTaskIncrementTick+0x160>)
 8011882:	6013      	str	r3, [r2, #0]
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011888:	4613      	mov	r3, r2
 801188a:	009b      	lsls	r3, r3, #2
 801188c:	4413      	add	r3, r2
 801188e:	009b      	lsls	r3, r3, #2
 8011890:	4a1f      	ldr	r2, [pc, #124]	; (8011910 <xTaskIncrementTick+0x164>)
 8011892:	441a      	add	r2, r3
 8011894:	68bb      	ldr	r3, [r7, #8]
 8011896:	3304      	adds	r3, #4
 8011898:	4619      	mov	r1, r3
 801189a:	4610      	mov	r0, r2
 801189c:	f7fe fb5f 	bl	800ff5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118a4:	4b1b      	ldr	r3, [pc, #108]	; (8011914 <xTaskIncrementTick+0x168>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d3b8      	bcc.n	8011820 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80118ae:	2301      	movs	r3, #1
 80118b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80118b2:	e7b5      	b.n	8011820 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80118b4:	4b17      	ldr	r3, [pc, #92]	; (8011914 <xTaskIncrementTick+0x168>)
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118ba:	4915      	ldr	r1, [pc, #84]	; (8011910 <xTaskIncrementTick+0x164>)
 80118bc:	4613      	mov	r3, r2
 80118be:	009b      	lsls	r3, r3, #2
 80118c0:	4413      	add	r3, r2
 80118c2:	009b      	lsls	r3, r3, #2
 80118c4:	440b      	add	r3, r1
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	2b01      	cmp	r3, #1
 80118ca:	d901      	bls.n	80118d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80118cc:	2301      	movs	r3, #1
 80118ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80118d0:	4b11      	ldr	r3, [pc, #68]	; (8011918 <xTaskIncrementTick+0x16c>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d007      	beq.n	80118e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80118d8:	2301      	movs	r3, #1
 80118da:	617b      	str	r3, [r7, #20]
 80118dc:	e004      	b.n	80118e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80118de:	4b0f      	ldr	r3, [pc, #60]	; (801191c <xTaskIncrementTick+0x170>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	3301      	adds	r3, #1
 80118e4:	4a0d      	ldr	r2, [pc, #52]	; (801191c <xTaskIncrementTick+0x170>)
 80118e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80118e8:	697b      	ldr	r3, [r7, #20]
}
 80118ea:	4618      	mov	r0, r3
 80118ec:	3718      	adds	r7, #24
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}
 80118f2:	bf00      	nop
 80118f4:	20008480 	.word	0x20008480
 80118f8:	2000845c 	.word	0x2000845c
 80118fc:	20008410 	.word	0x20008410
 8011900:	20008414 	.word	0x20008414
 8011904:	20008470 	.word	0x20008470
 8011908:	20008478 	.word	0x20008478
 801190c:	20008460 	.word	0x20008460
 8011910:	20007f88 	.word	0x20007f88
 8011914:	20007f84 	.word	0x20007f84
 8011918:	2000846c 	.word	0x2000846c
 801191c:	20008468 	.word	0x20008468

08011920 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011920:	b480      	push	{r7}
 8011922:	b085      	sub	sp, #20
 8011924:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011926:	4b2a      	ldr	r3, [pc, #168]	; (80119d0 <vTaskSwitchContext+0xb0>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d003      	beq.n	8011936 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801192e:	4b29      	ldr	r3, [pc, #164]	; (80119d4 <vTaskSwitchContext+0xb4>)
 8011930:	2201      	movs	r2, #1
 8011932:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011934:	e046      	b.n	80119c4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8011936:	4b27      	ldr	r3, [pc, #156]	; (80119d4 <vTaskSwitchContext+0xb4>)
 8011938:	2200      	movs	r2, #0
 801193a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801193c:	4b26      	ldr	r3, [pc, #152]	; (80119d8 <vTaskSwitchContext+0xb8>)
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	60fb      	str	r3, [r7, #12]
 8011942:	e010      	b.n	8011966 <vTaskSwitchContext+0x46>
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d10a      	bne.n	8011960 <vTaskSwitchContext+0x40>
	__asm volatile
 801194a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801194e:	f383 8811 	msr	BASEPRI, r3
 8011952:	f3bf 8f6f 	isb	sy
 8011956:	f3bf 8f4f 	dsb	sy
 801195a:	607b      	str	r3, [r7, #4]
}
 801195c:	bf00      	nop
 801195e:	e7fe      	b.n	801195e <vTaskSwitchContext+0x3e>
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	3b01      	subs	r3, #1
 8011964:	60fb      	str	r3, [r7, #12]
 8011966:	491d      	ldr	r1, [pc, #116]	; (80119dc <vTaskSwitchContext+0xbc>)
 8011968:	68fa      	ldr	r2, [r7, #12]
 801196a:	4613      	mov	r3, r2
 801196c:	009b      	lsls	r3, r3, #2
 801196e:	4413      	add	r3, r2
 8011970:	009b      	lsls	r3, r3, #2
 8011972:	440b      	add	r3, r1
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d0e4      	beq.n	8011944 <vTaskSwitchContext+0x24>
 801197a:	68fa      	ldr	r2, [r7, #12]
 801197c:	4613      	mov	r3, r2
 801197e:	009b      	lsls	r3, r3, #2
 8011980:	4413      	add	r3, r2
 8011982:	009b      	lsls	r3, r3, #2
 8011984:	4a15      	ldr	r2, [pc, #84]	; (80119dc <vTaskSwitchContext+0xbc>)
 8011986:	4413      	add	r3, r2
 8011988:	60bb      	str	r3, [r7, #8]
 801198a:	68bb      	ldr	r3, [r7, #8]
 801198c:	685b      	ldr	r3, [r3, #4]
 801198e:	685a      	ldr	r2, [r3, #4]
 8011990:	68bb      	ldr	r3, [r7, #8]
 8011992:	605a      	str	r2, [r3, #4]
 8011994:	68bb      	ldr	r3, [r7, #8]
 8011996:	685a      	ldr	r2, [r3, #4]
 8011998:	68bb      	ldr	r3, [r7, #8]
 801199a:	3308      	adds	r3, #8
 801199c:	429a      	cmp	r2, r3
 801199e:	d104      	bne.n	80119aa <vTaskSwitchContext+0x8a>
 80119a0:	68bb      	ldr	r3, [r7, #8]
 80119a2:	685b      	ldr	r3, [r3, #4]
 80119a4:	685a      	ldr	r2, [r3, #4]
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	605a      	str	r2, [r3, #4]
 80119aa:	68bb      	ldr	r3, [r7, #8]
 80119ac:	685b      	ldr	r3, [r3, #4]
 80119ae:	68db      	ldr	r3, [r3, #12]
 80119b0:	4a0b      	ldr	r2, [pc, #44]	; (80119e0 <vTaskSwitchContext+0xc0>)
 80119b2:	6013      	str	r3, [r2, #0]
 80119b4:	4a08      	ldr	r2, [pc, #32]	; (80119d8 <vTaskSwitchContext+0xb8>)
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80119ba:	4b09      	ldr	r3, [pc, #36]	; (80119e0 <vTaskSwitchContext+0xc0>)
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	3354      	adds	r3, #84	; 0x54
 80119c0:	4a08      	ldr	r2, [pc, #32]	; (80119e4 <vTaskSwitchContext+0xc4>)
 80119c2:	6013      	str	r3, [r2, #0]
}
 80119c4:	bf00      	nop
 80119c6:	3714      	adds	r7, #20
 80119c8:	46bd      	mov	sp, r7
 80119ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ce:	4770      	bx	lr
 80119d0:	20008480 	.word	0x20008480
 80119d4:	2000846c 	.word	0x2000846c
 80119d8:	20008460 	.word	0x20008460
 80119dc:	20007f88 	.word	0x20007f88
 80119e0:	20007f84 	.word	0x20007f84
 80119e4:	20000188 	.word	0x20000188

080119e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b084      	sub	sp, #16
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
 80119f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d10a      	bne.n	8011a0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80119f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119fc:	f383 8811 	msr	BASEPRI, r3
 8011a00:	f3bf 8f6f 	isb	sy
 8011a04:	f3bf 8f4f 	dsb	sy
 8011a08:	60fb      	str	r3, [r7, #12]
}
 8011a0a:	bf00      	nop
 8011a0c:	e7fe      	b.n	8011a0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011a0e:	4b07      	ldr	r3, [pc, #28]	; (8011a2c <vTaskPlaceOnEventList+0x44>)
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	3318      	adds	r3, #24
 8011a14:	4619      	mov	r1, r3
 8011a16:	6878      	ldr	r0, [r7, #4]
 8011a18:	f7fe fac5 	bl	800ffa6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011a1c:	2101      	movs	r1, #1
 8011a1e:	6838      	ldr	r0, [r7, #0]
 8011a20:	f000 fb7e 	bl	8012120 <prvAddCurrentTaskToDelayedList>
}
 8011a24:	bf00      	nop
 8011a26:	3710      	adds	r7, #16
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}
 8011a2c:	20007f84 	.word	0x20007f84

08011a30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b086      	sub	sp, #24
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	60f8      	str	r0, [r7, #12]
 8011a38:	60b9      	str	r1, [r7, #8]
 8011a3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d10a      	bne.n	8011a58 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a46:	f383 8811 	msr	BASEPRI, r3
 8011a4a:	f3bf 8f6f 	isb	sy
 8011a4e:	f3bf 8f4f 	dsb	sy
 8011a52:	617b      	str	r3, [r7, #20]
}
 8011a54:	bf00      	nop
 8011a56:	e7fe      	b.n	8011a56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011a58:	4b0a      	ldr	r3, [pc, #40]	; (8011a84 <vTaskPlaceOnEventListRestricted+0x54>)
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	3318      	adds	r3, #24
 8011a5e:	4619      	mov	r1, r3
 8011a60:	68f8      	ldr	r0, [r7, #12]
 8011a62:	f7fe fa7c 	bl	800ff5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d002      	beq.n	8011a72 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011a6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011a72:	6879      	ldr	r1, [r7, #4]
 8011a74:	68b8      	ldr	r0, [r7, #8]
 8011a76:	f000 fb53 	bl	8012120 <prvAddCurrentTaskToDelayedList>
	}
 8011a7a:	bf00      	nop
 8011a7c:	3718      	adds	r7, #24
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}
 8011a82:	bf00      	nop
 8011a84:	20007f84 	.word	0x20007f84

08011a88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b086      	sub	sp, #24
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	68db      	ldr	r3, [r3, #12]
 8011a94:	68db      	ldr	r3, [r3, #12]
 8011a96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d10a      	bne.n	8011ab4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aa2:	f383 8811 	msr	BASEPRI, r3
 8011aa6:	f3bf 8f6f 	isb	sy
 8011aaa:	f3bf 8f4f 	dsb	sy
 8011aae:	60fb      	str	r3, [r7, #12]
}
 8011ab0:	bf00      	nop
 8011ab2:	e7fe      	b.n	8011ab2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011ab4:	693b      	ldr	r3, [r7, #16]
 8011ab6:	3318      	adds	r3, #24
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f7fe faad 	bl	8010018 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011abe:	4b1e      	ldr	r3, [pc, #120]	; (8011b38 <xTaskRemoveFromEventList+0xb0>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d11d      	bne.n	8011b02 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011ac6:	693b      	ldr	r3, [r7, #16]
 8011ac8:	3304      	adds	r3, #4
 8011aca:	4618      	mov	r0, r3
 8011acc:	f7fe faa4 	bl	8010018 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011ad0:	693b      	ldr	r3, [r7, #16]
 8011ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ad4:	4b19      	ldr	r3, [pc, #100]	; (8011b3c <xTaskRemoveFromEventList+0xb4>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	429a      	cmp	r2, r3
 8011ada:	d903      	bls.n	8011ae4 <xTaskRemoveFromEventList+0x5c>
 8011adc:	693b      	ldr	r3, [r7, #16]
 8011ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ae0:	4a16      	ldr	r2, [pc, #88]	; (8011b3c <xTaskRemoveFromEventList+0xb4>)
 8011ae2:	6013      	str	r3, [r2, #0]
 8011ae4:	693b      	ldr	r3, [r7, #16]
 8011ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ae8:	4613      	mov	r3, r2
 8011aea:	009b      	lsls	r3, r3, #2
 8011aec:	4413      	add	r3, r2
 8011aee:	009b      	lsls	r3, r3, #2
 8011af0:	4a13      	ldr	r2, [pc, #76]	; (8011b40 <xTaskRemoveFromEventList+0xb8>)
 8011af2:	441a      	add	r2, r3
 8011af4:	693b      	ldr	r3, [r7, #16]
 8011af6:	3304      	adds	r3, #4
 8011af8:	4619      	mov	r1, r3
 8011afa:	4610      	mov	r0, r2
 8011afc:	f7fe fa2f 	bl	800ff5e <vListInsertEnd>
 8011b00:	e005      	b.n	8011b0e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011b02:	693b      	ldr	r3, [r7, #16]
 8011b04:	3318      	adds	r3, #24
 8011b06:	4619      	mov	r1, r3
 8011b08:	480e      	ldr	r0, [pc, #56]	; (8011b44 <xTaskRemoveFromEventList+0xbc>)
 8011b0a:	f7fe fa28 	bl	800ff5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011b0e:	693b      	ldr	r3, [r7, #16]
 8011b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b12:	4b0d      	ldr	r3, [pc, #52]	; (8011b48 <xTaskRemoveFromEventList+0xc0>)
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b18:	429a      	cmp	r2, r3
 8011b1a:	d905      	bls.n	8011b28 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011b20:	4b0a      	ldr	r3, [pc, #40]	; (8011b4c <xTaskRemoveFromEventList+0xc4>)
 8011b22:	2201      	movs	r2, #1
 8011b24:	601a      	str	r2, [r3, #0]
 8011b26:	e001      	b.n	8011b2c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011b28:	2300      	movs	r3, #0
 8011b2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011b2c:	697b      	ldr	r3, [r7, #20]
}
 8011b2e:	4618      	mov	r0, r3
 8011b30:	3718      	adds	r7, #24
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd80      	pop	{r7, pc}
 8011b36:	bf00      	nop
 8011b38:	20008480 	.word	0x20008480
 8011b3c:	20008460 	.word	0x20008460
 8011b40:	20007f88 	.word	0x20007f88
 8011b44:	20008418 	.word	0x20008418
 8011b48:	20007f84 	.word	0x20007f84
 8011b4c:	2000846c 	.word	0x2000846c

08011b50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011b50:	b480      	push	{r7}
 8011b52:	b083      	sub	sp, #12
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011b58:	4b06      	ldr	r3, [pc, #24]	; (8011b74 <vTaskInternalSetTimeOutState+0x24>)
 8011b5a:	681a      	ldr	r2, [r3, #0]
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011b60:	4b05      	ldr	r3, [pc, #20]	; (8011b78 <vTaskInternalSetTimeOutState+0x28>)
 8011b62:	681a      	ldr	r2, [r3, #0]
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	605a      	str	r2, [r3, #4]
}
 8011b68:	bf00      	nop
 8011b6a:	370c      	adds	r7, #12
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b72:	4770      	bx	lr
 8011b74:	20008470 	.word	0x20008470
 8011b78:	2000845c 	.word	0x2000845c

08011b7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b088      	sub	sp, #32
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
 8011b84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d10a      	bne.n	8011ba2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b90:	f383 8811 	msr	BASEPRI, r3
 8011b94:	f3bf 8f6f 	isb	sy
 8011b98:	f3bf 8f4f 	dsb	sy
 8011b9c:	613b      	str	r3, [r7, #16]
}
 8011b9e:	bf00      	nop
 8011ba0:	e7fe      	b.n	8011ba0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d10a      	bne.n	8011bbe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bac:	f383 8811 	msr	BASEPRI, r3
 8011bb0:	f3bf 8f6f 	isb	sy
 8011bb4:	f3bf 8f4f 	dsb	sy
 8011bb8:	60fb      	str	r3, [r7, #12]
}
 8011bba:	bf00      	nop
 8011bbc:	e7fe      	b.n	8011bbc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011bbe:	f000 ff81 	bl	8012ac4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011bc2:	4b1d      	ldr	r3, [pc, #116]	; (8011c38 <xTaskCheckForTimeOut+0xbc>)
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	685b      	ldr	r3, [r3, #4]
 8011bcc:	69ba      	ldr	r2, [r7, #24]
 8011bce:	1ad3      	subs	r3, r2, r3
 8011bd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011bda:	d102      	bne.n	8011be2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011bdc:	2300      	movs	r3, #0
 8011bde:	61fb      	str	r3, [r7, #28]
 8011be0:	e023      	b.n	8011c2a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681a      	ldr	r2, [r3, #0]
 8011be6:	4b15      	ldr	r3, [pc, #84]	; (8011c3c <xTaskCheckForTimeOut+0xc0>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d007      	beq.n	8011bfe <xTaskCheckForTimeOut+0x82>
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	685b      	ldr	r3, [r3, #4]
 8011bf2:	69ba      	ldr	r2, [r7, #24]
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d302      	bcc.n	8011bfe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011bf8:	2301      	movs	r3, #1
 8011bfa:	61fb      	str	r3, [r7, #28]
 8011bfc:	e015      	b.n	8011c2a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	697a      	ldr	r2, [r7, #20]
 8011c04:	429a      	cmp	r2, r3
 8011c06:	d20b      	bcs.n	8011c20 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	681a      	ldr	r2, [r3, #0]
 8011c0c:	697b      	ldr	r3, [r7, #20]
 8011c0e:	1ad2      	subs	r2, r2, r3
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	f7ff ff9b 	bl	8011b50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	61fb      	str	r3, [r7, #28]
 8011c1e:	e004      	b.n	8011c2a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	2200      	movs	r2, #0
 8011c24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011c26:	2301      	movs	r3, #1
 8011c28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011c2a:	f000 ff7b 	bl	8012b24 <vPortExitCritical>

	return xReturn;
 8011c2e:	69fb      	ldr	r3, [r7, #28]
}
 8011c30:	4618      	mov	r0, r3
 8011c32:	3720      	adds	r7, #32
 8011c34:	46bd      	mov	sp, r7
 8011c36:	bd80      	pop	{r7, pc}
 8011c38:	2000845c 	.word	0x2000845c
 8011c3c:	20008470 	.word	0x20008470

08011c40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011c40:	b480      	push	{r7}
 8011c42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011c44:	4b03      	ldr	r3, [pc, #12]	; (8011c54 <vTaskMissedYield+0x14>)
 8011c46:	2201      	movs	r2, #1
 8011c48:	601a      	str	r2, [r3, #0]
}
 8011c4a:	bf00      	nop
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c52:	4770      	bx	lr
 8011c54:	2000846c 	.word	0x2000846c

08011c58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b082      	sub	sp, #8
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011c60:	f000 f852 	bl	8011d08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011c64:	4b06      	ldr	r3, [pc, #24]	; (8011c80 <prvIdleTask+0x28>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	2b01      	cmp	r3, #1
 8011c6a:	d9f9      	bls.n	8011c60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011c6c:	4b05      	ldr	r3, [pc, #20]	; (8011c84 <prvIdleTask+0x2c>)
 8011c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c72:	601a      	str	r2, [r3, #0]
 8011c74:	f3bf 8f4f 	dsb	sy
 8011c78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011c7c:	e7f0      	b.n	8011c60 <prvIdleTask+0x8>
 8011c7e:	bf00      	nop
 8011c80:	20007f88 	.word	0x20007f88
 8011c84:	e000ed04 	.word	0xe000ed04

08011c88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b082      	sub	sp, #8
 8011c8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011c8e:	2300      	movs	r3, #0
 8011c90:	607b      	str	r3, [r7, #4]
 8011c92:	e00c      	b.n	8011cae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011c94:	687a      	ldr	r2, [r7, #4]
 8011c96:	4613      	mov	r3, r2
 8011c98:	009b      	lsls	r3, r3, #2
 8011c9a:	4413      	add	r3, r2
 8011c9c:	009b      	lsls	r3, r3, #2
 8011c9e:	4a12      	ldr	r2, [pc, #72]	; (8011ce8 <prvInitialiseTaskLists+0x60>)
 8011ca0:	4413      	add	r3, r2
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f7fe f92e 	bl	800ff04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	3301      	adds	r3, #1
 8011cac:	607b      	str	r3, [r7, #4]
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	2b37      	cmp	r3, #55	; 0x37
 8011cb2:	d9ef      	bls.n	8011c94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011cb4:	480d      	ldr	r0, [pc, #52]	; (8011cec <prvInitialiseTaskLists+0x64>)
 8011cb6:	f7fe f925 	bl	800ff04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011cba:	480d      	ldr	r0, [pc, #52]	; (8011cf0 <prvInitialiseTaskLists+0x68>)
 8011cbc:	f7fe f922 	bl	800ff04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011cc0:	480c      	ldr	r0, [pc, #48]	; (8011cf4 <prvInitialiseTaskLists+0x6c>)
 8011cc2:	f7fe f91f 	bl	800ff04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011cc6:	480c      	ldr	r0, [pc, #48]	; (8011cf8 <prvInitialiseTaskLists+0x70>)
 8011cc8:	f7fe f91c 	bl	800ff04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011ccc:	480b      	ldr	r0, [pc, #44]	; (8011cfc <prvInitialiseTaskLists+0x74>)
 8011cce:	f7fe f919 	bl	800ff04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011cd2:	4b0b      	ldr	r3, [pc, #44]	; (8011d00 <prvInitialiseTaskLists+0x78>)
 8011cd4:	4a05      	ldr	r2, [pc, #20]	; (8011cec <prvInitialiseTaskLists+0x64>)
 8011cd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011cd8:	4b0a      	ldr	r3, [pc, #40]	; (8011d04 <prvInitialiseTaskLists+0x7c>)
 8011cda:	4a05      	ldr	r2, [pc, #20]	; (8011cf0 <prvInitialiseTaskLists+0x68>)
 8011cdc:	601a      	str	r2, [r3, #0]
}
 8011cde:	bf00      	nop
 8011ce0:	3708      	adds	r7, #8
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd80      	pop	{r7, pc}
 8011ce6:	bf00      	nop
 8011ce8:	20007f88 	.word	0x20007f88
 8011cec:	200083e8 	.word	0x200083e8
 8011cf0:	200083fc 	.word	0x200083fc
 8011cf4:	20008418 	.word	0x20008418
 8011cf8:	2000842c 	.word	0x2000842c
 8011cfc:	20008444 	.word	0x20008444
 8011d00:	20008410 	.word	0x20008410
 8011d04:	20008414 	.word	0x20008414

08011d08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b082      	sub	sp, #8
 8011d0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011d0e:	e019      	b.n	8011d44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011d10:	f000 fed8 	bl	8012ac4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d14:	4b10      	ldr	r3, [pc, #64]	; (8011d58 <prvCheckTasksWaitingTermination+0x50>)
 8011d16:	68db      	ldr	r3, [r3, #12]
 8011d18:	68db      	ldr	r3, [r3, #12]
 8011d1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	3304      	adds	r3, #4
 8011d20:	4618      	mov	r0, r3
 8011d22:	f7fe f979 	bl	8010018 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011d26:	4b0d      	ldr	r3, [pc, #52]	; (8011d5c <prvCheckTasksWaitingTermination+0x54>)
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	3b01      	subs	r3, #1
 8011d2c:	4a0b      	ldr	r2, [pc, #44]	; (8011d5c <prvCheckTasksWaitingTermination+0x54>)
 8011d2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011d30:	4b0b      	ldr	r3, [pc, #44]	; (8011d60 <prvCheckTasksWaitingTermination+0x58>)
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	3b01      	subs	r3, #1
 8011d36:	4a0a      	ldr	r2, [pc, #40]	; (8011d60 <prvCheckTasksWaitingTermination+0x58>)
 8011d38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011d3a:	f000 fef3 	bl	8012b24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011d3e:	6878      	ldr	r0, [r7, #4]
 8011d40:	f000 f810 	bl	8011d64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011d44:	4b06      	ldr	r3, [pc, #24]	; (8011d60 <prvCheckTasksWaitingTermination+0x58>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d1e1      	bne.n	8011d10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011d4c:	bf00      	nop
 8011d4e:	bf00      	nop
 8011d50:	3708      	adds	r7, #8
 8011d52:	46bd      	mov	sp, r7
 8011d54:	bd80      	pop	{r7, pc}
 8011d56:	bf00      	nop
 8011d58:	2000842c 	.word	0x2000842c
 8011d5c:	20008458 	.word	0x20008458
 8011d60:	20008440 	.word	0x20008440

08011d64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b084      	sub	sp, #16
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	3354      	adds	r3, #84	; 0x54
 8011d70:	4618      	mov	r0, r3
 8011d72:	f002 f96b 	bl	801404c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d108      	bne.n	8011d92 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d84:	4618      	mov	r0, r3
 8011d86:	f001 f863 	bl	8012e50 <vPortFree>
				vPortFree( pxTCB );
 8011d8a:	6878      	ldr	r0, [r7, #4]
 8011d8c:	f001 f860 	bl	8012e50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011d90:	e018      	b.n	8011dc4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011d98:	2b01      	cmp	r3, #1
 8011d9a:	d103      	bne.n	8011da4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011d9c:	6878      	ldr	r0, [r7, #4]
 8011d9e:	f001 f857 	bl	8012e50 <vPortFree>
	}
 8011da2:	e00f      	b.n	8011dc4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011daa:	2b02      	cmp	r3, #2
 8011dac:	d00a      	beq.n	8011dc4 <prvDeleteTCB+0x60>
	__asm volatile
 8011dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011db2:	f383 8811 	msr	BASEPRI, r3
 8011db6:	f3bf 8f6f 	isb	sy
 8011dba:	f3bf 8f4f 	dsb	sy
 8011dbe:	60fb      	str	r3, [r7, #12]
}
 8011dc0:	bf00      	nop
 8011dc2:	e7fe      	b.n	8011dc2 <prvDeleteTCB+0x5e>
	}
 8011dc4:	bf00      	nop
 8011dc6:	3710      	adds	r7, #16
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}

08011dcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011dcc:	b480      	push	{r7}
 8011dce:	b083      	sub	sp, #12
 8011dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011dd2:	4b0c      	ldr	r3, [pc, #48]	; (8011e04 <prvResetNextTaskUnblockTime+0x38>)
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d104      	bne.n	8011de6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011ddc:	4b0a      	ldr	r3, [pc, #40]	; (8011e08 <prvResetNextTaskUnblockTime+0x3c>)
 8011dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011de2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011de4:	e008      	b.n	8011df8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011de6:	4b07      	ldr	r3, [pc, #28]	; (8011e04 <prvResetNextTaskUnblockTime+0x38>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	68db      	ldr	r3, [r3, #12]
 8011dec:	68db      	ldr	r3, [r3, #12]
 8011dee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	685b      	ldr	r3, [r3, #4]
 8011df4:	4a04      	ldr	r2, [pc, #16]	; (8011e08 <prvResetNextTaskUnblockTime+0x3c>)
 8011df6:	6013      	str	r3, [r2, #0]
}
 8011df8:	bf00      	nop
 8011dfa:	370c      	adds	r7, #12
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e02:	4770      	bx	lr
 8011e04:	20008410 	.word	0x20008410
 8011e08:	20008478 	.word	0x20008478

08011e0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011e0c:	b480      	push	{r7}
 8011e0e:	b083      	sub	sp, #12
 8011e10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011e12:	4b0b      	ldr	r3, [pc, #44]	; (8011e40 <xTaskGetSchedulerState+0x34>)
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d102      	bne.n	8011e20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011e1a:	2301      	movs	r3, #1
 8011e1c:	607b      	str	r3, [r7, #4]
 8011e1e:	e008      	b.n	8011e32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e20:	4b08      	ldr	r3, [pc, #32]	; (8011e44 <xTaskGetSchedulerState+0x38>)
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d102      	bne.n	8011e2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011e28:	2302      	movs	r3, #2
 8011e2a:	607b      	str	r3, [r7, #4]
 8011e2c:	e001      	b.n	8011e32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011e2e:	2300      	movs	r3, #0
 8011e30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011e32:	687b      	ldr	r3, [r7, #4]
	}
 8011e34:	4618      	mov	r0, r3
 8011e36:	370c      	adds	r7, #12
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3e:	4770      	bx	lr
 8011e40:	20008464 	.word	0x20008464
 8011e44:	20008480 	.word	0x20008480

08011e48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b084      	sub	sp, #16
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011e54:	2300      	movs	r3, #0
 8011e56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d051      	beq.n	8011f02 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011e5e:	68bb      	ldr	r3, [r7, #8]
 8011e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e62:	4b2a      	ldr	r3, [pc, #168]	; (8011f0c <xTaskPriorityInherit+0xc4>)
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	d241      	bcs.n	8011ef0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	699b      	ldr	r3, [r3, #24]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	db06      	blt.n	8011e82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e74:	4b25      	ldr	r3, [pc, #148]	; (8011f0c <xTaskPriorityInherit+0xc4>)
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011e7e:	68bb      	ldr	r3, [r7, #8]
 8011e80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	6959      	ldr	r1, [r3, #20]
 8011e86:	68bb      	ldr	r3, [r7, #8]
 8011e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e8a:	4613      	mov	r3, r2
 8011e8c:	009b      	lsls	r3, r3, #2
 8011e8e:	4413      	add	r3, r2
 8011e90:	009b      	lsls	r3, r3, #2
 8011e92:	4a1f      	ldr	r2, [pc, #124]	; (8011f10 <xTaskPriorityInherit+0xc8>)
 8011e94:	4413      	add	r3, r2
 8011e96:	4299      	cmp	r1, r3
 8011e98:	d122      	bne.n	8011ee0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e9a:	68bb      	ldr	r3, [r7, #8]
 8011e9c:	3304      	adds	r3, #4
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f7fe f8ba 	bl	8010018 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011ea4:	4b19      	ldr	r3, [pc, #100]	; (8011f0c <xTaskPriorityInherit+0xc4>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011eaa:	68bb      	ldr	r3, [r7, #8]
 8011eac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011eae:	68bb      	ldr	r3, [r7, #8]
 8011eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011eb2:	4b18      	ldr	r3, [pc, #96]	; (8011f14 <xTaskPriorityInherit+0xcc>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	429a      	cmp	r2, r3
 8011eb8:	d903      	bls.n	8011ec2 <xTaskPriorityInherit+0x7a>
 8011eba:	68bb      	ldr	r3, [r7, #8]
 8011ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ebe:	4a15      	ldr	r2, [pc, #84]	; (8011f14 <xTaskPriorityInherit+0xcc>)
 8011ec0:	6013      	str	r3, [r2, #0]
 8011ec2:	68bb      	ldr	r3, [r7, #8]
 8011ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ec6:	4613      	mov	r3, r2
 8011ec8:	009b      	lsls	r3, r3, #2
 8011eca:	4413      	add	r3, r2
 8011ecc:	009b      	lsls	r3, r3, #2
 8011ece:	4a10      	ldr	r2, [pc, #64]	; (8011f10 <xTaskPriorityInherit+0xc8>)
 8011ed0:	441a      	add	r2, r3
 8011ed2:	68bb      	ldr	r3, [r7, #8]
 8011ed4:	3304      	adds	r3, #4
 8011ed6:	4619      	mov	r1, r3
 8011ed8:	4610      	mov	r0, r2
 8011eda:	f7fe f840 	bl	800ff5e <vListInsertEnd>
 8011ede:	e004      	b.n	8011eea <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011ee0:	4b0a      	ldr	r3, [pc, #40]	; (8011f0c <xTaskPriorityInherit+0xc4>)
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ee6:	68bb      	ldr	r3, [r7, #8]
 8011ee8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011eea:	2301      	movs	r3, #1
 8011eec:	60fb      	str	r3, [r7, #12]
 8011eee:	e008      	b.n	8011f02 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011ef0:	68bb      	ldr	r3, [r7, #8]
 8011ef2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011ef4:	4b05      	ldr	r3, [pc, #20]	; (8011f0c <xTaskPriorityInherit+0xc4>)
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011efa:	429a      	cmp	r2, r3
 8011efc:	d201      	bcs.n	8011f02 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011efe:	2301      	movs	r3, #1
 8011f00:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011f02:	68fb      	ldr	r3, [r7, #12]
	}
 8011f04:	4618      	mov	r0, r3
 8011f06:	3710      	adds	r7, #16
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	bd80      	pop	{r7, pc}
 8011f0c:	20007f84 	.word	0x20007f84
 8011f10:	20007f88 	.word	0x20007f88
 8011f14:	20008460 	.word	0x20008460

08011f18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b086      	sub	sp, #24
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011f24:	2300      	movs	r3, #0
 8011f26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d056      	beq.n	8011fdc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011f2e:	4b2e      	ldr	r3, [pc, #184]	; (8011fe8 <xTaskPriorityDisinherit+0xd0>)
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	693a      	ldr	r2, [r7, #16]
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d00a      	beq.n	8011f4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f3c:	f383 8811 	msr	BASEPRI, r3
 8011f40:	f3bf 8f6f 	isb	sy
 8011f44:	f3bf 8f4f 	dsb	sy
 8011f48:	60fb      	str	r3, [r7, #12]
}
 8011f4a:	bf00      	nop
 8011f4c:	e7fe      	b.n	8011f4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011f4e:	693b      	ldr	r3, [r7, #16]
 8011f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d10a      	bne.n	8011f6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f5a:	f383 8811 	msr	BASEPRI, r3
 8011f5e:	f3bf 8f6f 	isb	sy
 8011f62:	f3bf 8f4f 	dsb	sy
 8011f66:	60bb      	str	r3, [r7, #8]
}
 8011f68:	bf00      	nop
 8011f6a:	e7fe      	b.n	8011f6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011f6c:	693b      	ldr	r3, [r7, #16]
 8011f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f70:	1e5a      	subs	r2, r3, #1
 8011f72:	693b      	ldr	r3, [r7, #16]
 8011f74:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011f76:	693b      	ldr	r3, [r7, #16]
 8011f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d02c      	beq.n	8011fdc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011f82:	693b      	ldr	r3, [r7, #16]
 8011f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d128      	bne.n	8011fdc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	3304      	adds	r3, #4
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f7fe f842 	bl	8010018 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011f94:	693b      	ldr	r3, [r7, #16]
 8011f96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011f98:	693b      	ldr	r3, [r7, #16]
 8011f9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f9c:	693b      	ldr	r3, [r7, #16]
 8011f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fa0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011fa4:	693b      	ldr	r3, [r7, #16]
 8011fa6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011fa8:	693b      	ldr	r3, [r7, #16]
 8011faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fac:	4b0f      	ldr	r3, [pc, #60]	; (8011fec <xTaskPriorityDisinherit+0xd4>)
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d903      	bls.n	8011fbc <xTaskPriorityDisinherit+0xa4>
 8011fb4:	693b      	ldr	r3, [r7, #16]
 8011fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fb8:	4a0c      	ldr	r2, [pc, #48]	; (8011fec <xTaskPriorityDisinherit+0xd4>)
 8011fba:	6013      	str	r3, [r2, #0]
 8011fbc:	693b      	ldr	r3, [r7, #16]
 8011fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fc0:	4613      	mov	r3, r2
 8011fc2:	009b      	lsls	r3, r3, #2
 8011fc4:	4413      	add	r3, r2
 8011fc6:	009b      	lsls	r3, r3, #2
 8011fc8:	4a09      	ldr	r2, [pc, #36]	; (8011ff0 <xTaskPriorityDisinherit+0xd8>)
 8011fca:	441a      	add	r2, r3
 8011fcc:	693b      	ldr	r3, [r7, #16]
 8011fce:	3304      	adds	r3, #4
 8011fd0:	4619      	mov	r1, r3
 8011fd2:	4610      	mov	r0, r2
 8011fd4:	f7fd ffc3 	bl	800ff5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011fd8:	2301      	movs	r3, #1
 8011fda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011fdc:	697b      	ldr	r3, [r7, #20]
	}
 8011fde:	4618      	mov	r0, r3
 8011fe0:	3718      	adds	r7, #24
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	bd80      	pop	{r7, pc}
 8011fe6:	bf00      	nop
 8011fe8:	20007f84 	.word	0x20007f84
 8011fec:	20008460 	.word	0x20008460
 8011ff0:	20007f88 	.word	0x20007f88

08011ff4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b088      	sub	sp, #32
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
 8011ffc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012002:	2301      	movs	r3, #1
 8012004:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d06a      	beq.n	80120e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801200c:	69bb      	ldr	r3, [r7, #24]
 801200e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012010:	2b00      	cmp	r3, #0
 8012012:	d10a      	bne.n	801202a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8012014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012018:	f383 8811 	msr	BASEPRI, r3
 801201c:	f3bf 8f6f 	isb	sy
 8012020:	f3bf 8f4f 	dsb	sy
 8012024:	60fb      	str	r3, [r7, #12]
}
 8012026:	bf00      	nop
 8012028:	e7fe      	b.n	8012028 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801202a:	69bb      	ldr	r3, [r7, #24]
 801202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801202e:	683a      	ldr	r2, [r7, #0]
 8012030:	429a      	cmp	r2, r3
 8012032:	d902      	bls.n	801203a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012034:	683b      	ldr	r3, [r7, #0]
 8012036:	61fb      	str	r3, [r7, #28]
 8012038:	e002      	b.n	8012040 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801203a:	69bb      	ldr	r3, [r7, #24]
 801203c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801203e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012040:	69bb      	ldr	r3, [r7, #24]
 8012042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012044:	69fa      	ldr	r2, [r7, #28]
 8012046:	429a      	cmp	r2, r3
 8012048:	d04b      	beq.n	80120e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801204a:	69bb      	ldr	r3, [r7, #24]
 801204c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801204e:	697a      	ldr	r2, [r7, #20]
 8012050:	429a      	cmp	r2, r3
 8012052:	d146      	bne.n	80120e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012054:	4b25      	ldr	r3, [pc, #148]	; (80120ec <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	69ba      	ldr	r2, [r7, #24]
 801205a:	429a      	cmp	r2, r3
 801205c:	d10a      	bne.n	8012074 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801205e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012062:	f383 8811 	msr	BASEPRI, r3
 8012066:	f3bf 8f6f 	isb	sy
 801206a:	f3bf 8f4f 	dsb	sy
 801206e:	60bb      	str	r3, [r7, #8]
}
 8012070:	bf00      	nop
 8012072:	e7fe      	b.n	8012072 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012074:	69bb      	ldr	r3, [r7, #24]
 8012076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012078:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801207a:	69bb      	ldr	r3, [r7, #24]
 801207c:	69fa      	ldr	r2, [r7, #28]
 801207e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012080:	69bb      	ldr	r3, [r7, #24]
 8012082:	699b      	ldr	r3, [r3, #24]
 8012084:	2b00      	cmp	r3, #0
 8012086:	db04      	blt.n	8012092 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012088:	69fb      	ldr	r3, [r7, #28]
 801208a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801208e:	69bb      	ldr	r3, [r7, #24]
 8012090:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012092:	69bb      	ldr	r3, [r7, #24]
 8012094:	6959      	ldr	r1, [r3, #20]
 8012096:	693a      	ldr	r2, [r7, #16]
 8012098:	4613      	mov	r3, r2
 801209a:	009b      	lsls	r3, r3, #2
 801209c:	4413      	add	r3, r2
 801209e:	009b      	lsls	r3, r3, #2
 80120a0:	4a13      	ldr	r2, [pc, #76]	; (80120f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80120a2:	4413      	add	r3, r2
 80120a4:	4299      	cmp	r1, r3
 80120a6:	d11c      	bne.n	80120e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80120a8:	69bb      	ldr	r3, [r7, #24]
 80120aa:	3304      	adds	r3, #4
 80120ac:	4618      	mov	r0, r3
 80120ae:	f7fd ffb3 	bl	8010018 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80120b2:	69bb      	ldr	r3, [r7, #24]
 80120b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120b6:	4b0f      	ldr	r3, [pc, #60]	; (80120f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	429a      	cmp	r2, r3
 80120bc:	d903      	bls.n	80120c6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80120be:	69bb      	ldr	r3, [r7, #24]
 80120c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120c2:	4a0c      	ldr	r2, [pc, #48]	; (80120f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80120c4:	6013      	str	r3, [r2, #0]
 80120c6:	69bb      	ldr	r3, [r7, #24]
 80120c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120ca:	4613      	mov	r3, r2
 80120cc:	009b      	lsls	r3, r3, #2
 80120ce:	4413      	add	r3, r2
 80120d0:	009b      	lsls	r3, r3, #2
 80120d2:	4a07      	ldr	r2, [pc, #28]	; (80120f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80120d4:	441a      	add	r2, r3
 80120d6:	69bb      	ldr	r3, [r7, #24]
 80120d8:	3304      	adds	r3, #4
 80120da:	4619      	mov	r1, r3
 80120dc:	4610      	mov	r0, r2
 80120de:	f7fd ff3e 	bl	800ff5e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80120e2:	bf00      	nop
 80120e4:	3720      	adds	r7, #32
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}
 80120ea:	bf00      	nop
 80120ec:	20007f84 	.word	0x20007f84
 80120f0:	20007f88 	.word	0x20007f88
 80120f4:	20008460 	.word	0x20008460

080120f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80120f8:	b480      	push	{r7}
 80120fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80120fc:	4b07      	ldr	r3, [pc, #28]	; (801211c <pvTaskIncrementMutexHeldCount+0x24>)
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d004      	beq.n	801210e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012104:	4b05      	ldr	r3, [pc, #20]	; (801211c <pvTaskIncrementMutexHeldCount+0x24>)
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801210a:	3201      	adds	r2, #1
 801210c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801210e:	4b03      	ldr	r3, [pc, #12]	; (801211c <pvTaskIncrementMutexHeldCount+0x24>)
 8012110:	681b      	ldr	r3, [r3, #0]
	}
 8012112:	4618      	mov	r0, r3
 8012114:	46bd      	mov	sp, r7
 8012116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211a:	4770      	bx	lr
 801211c:	20007f84 	.word	0x20007f84

08012120 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b084      	sub	sp, #16
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
 8012128:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801212a:	4b21      	ldr	r3, [pc, #132]	; (80121b0 <prvAddCurrentTaskToDelayedList+0x90>)
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012130:	4b20      	ldr	r3, [pc, #128]	; (80121b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	3304      	adds	r3, #4
 8012136:	4618      	mov	r0, r3
 8012138:	f7fd ff6e 	bl	8010018 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012142:	d10a      	bne.n	801215a <prvAddCurrentTaskToDelayedList+0x3a>
 8012144:	683b      	ldr	r3, [r7, #0]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d007      	beq.n	801215a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801214a:	4b1a      	ldr	r3, [pc, #104]	; (80121b4 <prvAddCurrentTaskToDelayedList+0x94>)
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	3304      	adds	r3, #4
 8012150:	4619      	mov	r1, r3
 8012152:	4819      	ldr	r0, [pc, #100]	; (80121b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8012154:	f7fd ff03 	bl	800ff5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012158:	e026      	b.n	80121a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801215a:	68fa      	ldr	r2, [r7, #12]
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	4413      	add	r3, r2
 8012160:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012162:	4b14      	ldr	r3, [pc, #80]	; (80121b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	68ba      	ldr	r2, [r7, #8]
 8012168:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801216a:	68ba      	ldr	r2, [r7, #8]
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	429a      	cmp	r2, r3
 8012170:	d209      	bcs.n	8012186 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012172:	4b12      	ldr	r3, [pc, #72]	; (80121bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8012174:	681a      	ldr	r2, [r3, #0]
 8012176:	4b0f      	ldr	r3, [pc, #60]	; (80121b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	3304      	adds	r3, #4
 801217c:	4619      	mov	r1, r3
 801217e:	4610      	mov	r0, r2
 8012180:	f7fd ff11 	bl	800ffa6 <vListInsert>
}
 8012184:	e010      	b.n	80121a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012186:	4b0e      	ldr	r3, [pc, #56]	; (80121c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012188:	681a      	ldr	r2, [r3, #0]
 801218a:	4b0a      	ldr	r3, [pc, #40]	; (80121b4 <prvAddCurrentTaskToDelayedList+0x94>)
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	3304      	adds	r3, #4
 8012190:	4619      	mov	r1, r3
 8012192:	4610      	mov	r0, r2
 8012194:	f7fd ff07 	bl	800ffa6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012198:	4b0a      	ldr	r3, [pc, #40]	; (80121c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	68ba      	ldr	r2, [r7, #8]
 801219e:	429a      	cmp	r2, r3
 80121a0:	d202      	bcs.n	80121a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80121a2:	4a08      	ldr	r2, [pc, #32]	; (80121c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80121a4:	68bb      	ldr	r3, [r7, #8]
 80121a6:	6013      	str	r3, [r2, #0]
}
 80121a8:	bf00      	nop
 80121aa:	3710      	adds	r7, #16
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}
 80121b0:	2000845c 	.word	0x2000845c
 80121b4:	20007f84 	.word	0x20007f84
 80121b8:	20008444 	.word	0x20008444
 80121bc:	20008414 	.word	0x20008414
 80121c0:	20008410 	.word	0x20008410
 80121c4:	20008478 	.word	0x20008478

080121c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b08a      	sub	sp, #40	; 0x28
 80121cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80121ce:	2300      	movs	r3, #0
 80121d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80121d2:	f000 fb07 	bl	80127e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80121d6:	4b1c      	ldr	r3, [pc, #112]	; (8012248 <xTimerCreateTimerTask+0x80>)
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d021      	beq.n	8012222 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80121de:	2300      	movs	r3, #0
 80121e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80121e2:	2300      	movs	r3, #0
 80121e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80121e6:	1d3a      	adds	r2, r7, #4
 80121e8:	f107 0108 	add.w	r1, r7, #8
 80121ec:	f107 030c 	add.w	r3, r7, #12
 80121f0:	4618      	mov	r0, r3
 80121f2:	f7fd fe6d 	bl	800fed0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80121f6:	6879      	ldr	r1, [r7, #4]
 80121f8:	68bb      	ldr	r3, [r7, #8]
 80121fa:	68fa      	ldr	r2, [r7, #12]
 80121fc:	9202      	str	r2, [sp, #8]
 80121fe:	9301      	str	r3, [sp, #4]
 8012200:	2302      	movs	r3, #2
 8012202:	9300      	str	r3, [sp, #0]
 8012204:	2300      	movs	r3, #0
 8012206:	460a      	mov	r2, r1
 8012208:	4910      	ldr	r1, [pc, #64]	; (801224c <xTimerCreateTimerTask+0x84>)
 801220a:	4811      	ldr	r0, [pc, #68]	; (8012250 <xTimerCreateTimerTask+0x88>)
 801220c:	f7fe ff78 	bl	8011100 <xTaskCreateStatic>
 8012210:	4603      	mov	r3, r0
 8012212:	4a10      	ldr	r2, [pc, #64]	; (8012254 <xTimerCreateTimerTask+0x8c>)
 8012214:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012216:	4b0f      	ldr	r3, [pc, #60]	; (8012254 <xTimerCreateTimerTask+0x8c>)
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d001      	beq.n	8012222 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801221e:	2301      	movs	r3, #1
 8012220:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012222:	697b      	ldr	r3, [r7, #20]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d10a      	bne.n	801223e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8012228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801222c:	f383 8811 	msr	BASEPRI, r3
 8012230:	f3bf 8f6f 	isb	sy
 8012234:	f3bf 8f4f 	dsb	sy
 8012238:	613b      	str	r3, [r7, #16]
}
 801223a:	bf00      	nop
 801223c:	e7fe      	b.n	801223c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801223e:	697b      	ldr	r3, [r7, #20]
}
 8012240:	4618      	mov	r0, r3
 8012242:	3718      	adds	r7, #24
 8012244:	46bd      	mov	sp, r7
 8012246:	bd80      	pop	{r7, pc}
 8012248:	200084b4 	.word	0x200084b4
 801224c:	080183bc 	.word	0x080183bc
 8012250:	0801238d 	.word	0x0801238d
 8012254:	200084b8 	.word	0x200084b8

08012258 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b08a      	sub	sp, #40	; 0x28
 801225c:	af00      	add	r7, sp, #0
 801225e:	60f8      	str	r0, [r7, #12]
 8012260:	60b9      	str	r1, [r7, #8]
 8012262:	607a      	str	r2, [r7, #4]
 8012264:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012266:	2300      	movs	r3, #0
 8012268:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d10a      	bne.n	8012286 <xTimerGenericCommand+0x2e>
	__asm volatile
 8012270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012274:	f383 8811 	msr	BASEPRI, r3
 8012278:	f3bf 8f6f 	isb	sy
 801227c:	f3bf 8f4f 	dsb	sy
 8012280:	623b      	str	r3, [r7, #32]
}
 8012282:	bf00      	nop
 8012284:	e7fe      	b.n	8012284 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012286:	4b1a      	ldr	r3, [pc, #104]	; (80122f0 <xTimerGenericCommand+0x98>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d02a      	beq.n	80122e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801228e:	68bb      	ldr	r3, [r7, #8]
 8012290:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801229a:	68bb      	ldr	r3, [r7, #8]
 801229c:	2b05      	cmp	r3, #5
 801229e:	dc18      	bgt.n	80122d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80122a0:	f7ff fdb4 	bl	8011e0c <xTaskGetSchedulerState>
 80122a4:	4603      	mov	r3, r0
 80122a6:	2b02      	cmp	r3, #2
 80122a8:	d109      	bne.n	80122be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80122aa:	4b11      	ldr	r3, [pc, #68]	; (80122f0 <xTimerGenericCommand+0x98>)
 80122ac:	6818      	ldr	r0, [r3, #0]
 80122ae:	f107 0110 	add.w	r1, r7, #16
 80122b2:	2300      	movs	r3, #0
 80122b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122b6:	f7fe f881 	bl	80103bc <xQueueGenericSend>
 80122ba:	6278      	str	r0, [r7, #36]	; 0x24
 80122bc:	e012      	b.n	80122e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80122be:	4b0c      	ldr	r3, [pc, #48]	; (80122f0 <xTimerGenericCommand+0x98>)
 80122c0:	6818      	ldr	r0, [r3, #0]
 80122c2:	f107 0110 	add.w	r1, r7, #16
 80122c6:	2300      	movs	r3, #0
 80122c8:	2200      	movs	r2, #0
 80122ca:	f7fe f877 	bl	80103bc <xQueueGenericSend>
 80122ce:	6278      	str	r0, [r7, #36]	; 0x24
 80122d0:	e008      	b.n	80122e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80122d2:	4b07      	ldr	r3, [pc, #28]	; (80122f0 <xTimerGenericCommand+0x98>)
 80122d4:	6818      	ldr	r0, [r3, #0]
 80122d6:	f107 0110 	add.w	r1, r7, #16
 80122da:	2300      	movs	r3, #0
 80122dc:	683a      	ldr	r2, [r7, #0]
 80122de:	f7fe f96b 	bl	80105b8 <xQueueGenericSendFromISR>
 80122e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80122e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80122e6:	4618      	mov	r0, r3
 80122e8:	3728      	adds	r7, #40	; 0x28
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}
 80122ee:	bf00      	nop
 80122f0:	200084b4 	.word	0x200084b4

080122f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b088      	sub	sp, #32
 80122f8:	af02      	add	r7, sp, #8
 80122fa:	6078      	str	r0, [r7, #4]
 80122fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80122fe:	4b22      	ldr	r3, [pc, #136]	; (8012388 <prvProcessExpiredTimer+0x94>)
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	68db      	ldr	r3, [r3, #12]
 8012304:	68db      	ldr	r3, [r3, #12]
 8012306:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012308:	697b      	ldr	r3, [r7, #20]
 801230a:	3304      	adds	r3, #4
 801230c:	4618      	mov	r0, r3
 801230e:	f7fd fe83 	bl	8010018 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012312:	697b      	ldr	r3, [r7, #20]
 8012314:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012318:	f003 0304 	and.w	r3, r3, #4
 801231c:	2b00      	cmp	r3, #0
 801231e:	d022      	beq.n	8012366 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012320:	697b      	ldr	r3, [r7, #20]
 8012322:	699a      	ldr	r2, [r3, #24]
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	18d1      	adds	r1, r2, r3
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	683a      	ldr	r2, [r7, #0]
 801232c:	6978      	ldr	r0, [r7, #20]
 801232e:	f000 f8d1 	bl	80124d4 <prvInsertTimerInActiveList>
 8012332:	4603      	mov	r3, r0
 8012334:	2b00      	cmp	r3, #0
 8012336:	d01f      	beq.n	8012378 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012338:	2300      	movs	r3, #0
 801233a:	9300      	str	r3, [sp, #0]
 801233c:	2300      	movs	r3, #0
 801233e:	687a      	ldr	r2, [r7, #4]
 8012340:	2100      	movs	r1, #0
 8012342:	6978      	ldr	r0, [r7, #20]
 8012344:	f7ff ff88 	bl	8012258 <xTimerGenericCommand>
 8012348:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801234a:	693b      	ldr	r3, [r7, #16]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d113      	bne.n	8012378 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012354:	f383 8811 	msr	BASEPRI, r3
 8012358:	f3bf 8f6f 	isb	sy
 801235c:	f3bf 8f4f 	dsb	sy
 8012360:	60fb      	str	r3, [r7, #12]
}
 8012362:	bf00      	nop
 8012364:	e7fe      	b.n	8012364 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012366:	697b      	ldr	r3, [r7, #20]
 8012368:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801236c:	f023 0301 	bic.w	r3, r3, #1
 8012370:	b2da      	uxtb	r2, r3
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012378:	697b      	ldr	r3, [r7, #20]
 801237a:	6a1b      	ldr	r3, [r3, #32]
 801237c:	6978      	ldr	r0, [r7, #20]
 801237e:	4798      	blx	r3
}
 8012380:	bf00      	nop
 8012382:	3718      	adds	r7, #24
 8012384:	46bd      	mov	sp, r7
 8012386:	bd80      	pop	{r7, pc}
 8012388:	200084ac 	.word	0x200084ac

0801238c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b084      	sub	sp, #16
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012394:	f107 0308 	add.w	r3, r7, #8
 8012398:	4618      	mov	r0, r3
 801239a:	f000 f857 	bl	801244c <prvGetNextExpireTime>
 801239e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80123a0:	68bb      	ldr	r3, [r7, #8]
 80123a2:	4619      	mov	r1, r3
 80123a4:	68f8      	ldr	r0, [r7, #12]
 80123a6:	f000 f803 	bl	80123b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80123aa:	f000 f8d5 	bl	8012558 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80123ae:	e7f1      	b.n	8012394 <prvTimerTask+0x8>

080123b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b084      	sub	sp, #16
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
 80123b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80123ba:	f7ff f93b 	bl	8011634 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80123be:	f107 0308 	add.w	r3, r7, #8
 80123c2:	4618      	mov	r0, r3
 80123c4:	f000 f866 	bl	8012494 <prvSampleTimeNow>
 80123c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80123ca:	68bb      	ldr	r3, [r7, #8]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d130      	bne.n	8012432 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d10a      	bne.n	80123ec <prvProcessTimerOrBlockTask+0x3c>
 80123d6:	687a      	ldr	r2, [r7, #4]
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	429a      	cmp	r2, r3
 80123dc:	d806      	bhi.n	80123ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80123de:	f7ff f937 	bl	8011650 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80123e2:	68f9      	ldr	r1, [r7, #12]
 80123e4:	6878      	ldr	r0, [r7, #4]
 80123e6:	f7ff ff85 	bl	80122f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80123ea:	e024      	b.n	8012436 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d008      	beq.n	8012404 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80123f2:	4b13      	ldr	r3, [pc, #76]	; (8012440 <prvProcessTimerOrBlockTask+0x90>)
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d101      	bne.n	8012400 <prvProcessTimerOrBlockTask+0x50>
 80123fc:	2301      	movs	r3, #1
 80123fe:	e000      	b.n	8012402 <prvProcessTimerOrBlockTask+0x52>
 8012400:	2300      	movs	r3, #0
 8012402:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012404:	4b0f      	ldr	r3, [pc, #60]	; (8012444 <prvProcessTimerOrBlockTask+0x94>)
 8012406:	6818      	ldr	r0, [r3, #0]
 8012408:	687a      	ldr	r2, [r7, #4]
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	1ad3      	subs	r3, r2, r3
 801240e:	683a      	ldr	r2, [r7, #0]
 8012410:	4619      	mov	r1, r3
 8012412:	f7fe fe41 	bl	8011098 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012416:	f7ff f91b 	bl	8011650 <xTaskResumeAll>
 801241a:	4603      	mov	r3, r0
 801241c:	2b00      	cmp	r3, #0
 801241e:	d10a      	bne.n	8012436 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012420:	4b09      	ldr	r3, [pc, #36]	; (8012448 <prvProcessTimerOrBlockTask+0x98>)
 8012422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012426:	601a      	str	r2, [r3, #0]
 8012428:	f3bf 8f4f 	dsb	sy
 801242c:	f3bf 8f6f 	isb	sy
}
 8012430:	e001      	b.n	8012436 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012432:	f7ff f90d 	bl	8011650 <xTaskResumeAll>
}
 8012436:	bf00      	nop
 8012438:	3710      	adds	r7, #16
 801243a:	46bd      	mov	sp, r7
 801243c:	bd80      	pop	{r7, pc}
 801243e:	bf00      	nop
 8012440:	200084b0 	.word	0x200084b0
 8012444:	200084b4 	.word	0x200084b4
 8012448:	e000ed04 	.word	0xe000ed04

0801244c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801244c:	b480      	push	{r7}
 801244e:	b085      	sub	sp, #20
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012454:	4b0e      	ldr	r3, [pc, #56]	; (8012490 <prvGetNextExpireTime+0x44>)
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d101      	bne.n	8012462 <prvGetNextExpireTime+0x16>
 801245e:	2201      	movs	r2, #1
 8012460:	e000      	b.n	8012464 <prvGetNextExpireTime+0x18>
 8012462:	2200      	movs	r2, #0
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d105      	bne.n	801247c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012470:	4b07      	ldr	r3, [pc, #28]	; (8012490 <prvGetNextExpireTime+0x44>)
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	68db      	ldr	r3, [r3, #12]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	60fb      	str	r3, [r7, #12]
 801247a:	e001      	b.n	8012480 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801247c:	2300      	movs	r3, #0
 801247e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012480:	68fb      	ldr	r3, [r7, #12]
}
 8012482:	4618      	mov	r0, r3
 8012484:	3714      	adds	r7, #20
 8012486:	46bd      	mov	sp, r7
 8012488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248c:	4770      	bx	lr
 801248e:	bf00      	nop
 8012490:	200084ac 	.word	0x200084ac

08012494 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b084      	sub	sp, #16
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801249c:	f7ff f976 	bl	801178c <xTaskGetTickCount>
 80124a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80124a2:	4b0b      	ldr	r3, [pc, #44]	; (80124d0 <prvSampleTimeNow+0x3c>)
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	68fa      	ldr	r2, [r7, #12]
 80124a8:	429a      	cmp	r2, r3
 80124aa:	d205      	bcs.n	80124b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80124ac:	f000 f936 	bl	801271c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2201      	movs	r2, #1
 80124b4:	601a      	str	r2, [r3, #0]
 80124b6:	e002      	b.n	80124be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2200      	movs	r2, #0
 80124bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80124be:	4a04      	ldr	r2, [pc, #16]	; (80124d0 <prvSampleTimeNow+0x3c>)
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80124c4:	68fb      	ldr	r3, [r7, #12]
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	3710      	adds	r7, #16
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd80      	pop	{r7, pc}
 80124ce:	bf00      	nop
 80124d0:	200084bc 	.word	0x200084bc

080124d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b086      	sub	sp, #24
 80124d8:	af00      	add	r7, sp, #0
 80124da:	60f8      	str	r0, [r7, #12]
 80124dc:	60b9      	str	r1, [r7, #8]
 80124de:	607a      	str	r2, [r7, #4]
 80124e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80124e2:	2300      	movs	r3, #0
 80124e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	68ba      	ldr	r2, [r7, #8]
 80124ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	68fa      	ldr	r2, [r7, #12]
 80124f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80124f2:	68ba      	ldr	r2, [r7, #8]
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	429a      	cmp	r2, r3
 80124f8:	d812      	bhi.n	8012520 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80124fa:	687a      	ldr	r2, [r7, #4]
 80124fc:	683b      	ldr	r3, [r7, #0]
 80124fe:	1ad2      	subs	r2, r2, r3
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	699b      	ldr	r3, [r3, #24]
 8012504:	429a      	cmp	r2, r3
 8012506:	d302      	bcc.n	801250e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012508:	2301      	movs	r3, #1
 801250a:	617b      	str	r3, [r7, #20]
 801250c:	e01b      	b.n	8012546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801250e:	4b10      	ldr	r3, [pc, #64]	; (8012550 <prvInsertTimerInActiveList+0x7c>)
 8012510:	681a      	ldr	r2, [r3, #0]
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	3304      	adds	r3, #4
 8012516:	4619      	mov	r1, r3
 8012518:	4610      	mov	r0, r2
 801251a:	f7fd fd44 	bl	800ffa6 <vListInsert>
 801251e:	e012      	b.n	8012546 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012520:	687a      	ldr	r2, [r7, #4]
 8012522:	683b      	ldr	r3, [r7, #0]
 8012524:	429a      	cmp	r2, r3
 8012526:	d206      	bcs.n	8012536 <prvInsertTimerInActiveList+0x62>
 8012528:	68ba      	ldr	r2, [r7, #8]
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	429a      	cmp	r2, r3
 801252e:	d302      	bcc.n	8012536 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012530:	2301      	movs	r3, #1
 8012532:	617b      	str	r3, [r7, #20]
 8012534:	e007      	b.n	8012546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012536:	4b07      	ldr	r3, [pc, #28]	; (8012554 <prvInsertTimerInActiveList+0x80>)
 8012538:	681a      	ldr	r2, [r3, #0]
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	3304      	adds	r3, #4
 801253e:	4619      	mov	r1, r3
 8012540:	4610      	mov	r0, r2
 8012542:	f7fd fd30 	bl	800ffa6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012546:	697b      	ldr	r3, [r7, #20]
}
 8012548:	4618      	mov	r0, r3
 801254a:	3718      	adds	r7, #24
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}
 8012550:	200084b0 	.word	0x200084b0
 8012554:	200084ac 	.word	0x200084ac

08012558 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012558:	b580      	push	{r7, lr}
 801255a:	b08e      	sub	sp, #56	; 0x38
 801255c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801255e:	e0ca      	b.n	80126f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	2b00      	cmp	r3, #0
 8012564:	da18      	bge.n	8012598 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012566:	1d3b      	adds	r3, r7, #4
 8012568:	3304      	adds	r3, #4
 801256a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801256e:	2b00      	cmp	r3, #0
 8012570:	d10a      	bne.n	8012588 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8012572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012576:	f383 8811 	msr	BASEPRI, r3
 801257a:	f3bf 8f6f 	isb	sy
 801257e:	f3bf 8f4f 	dsb	sy
 8012582:	61fb      	str	r3, [r7, #28]
}
 8012584:	bf00      	nop
 8012586:	e7fe      	b.n	8012586 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801258e:	6850      	ldr	r0, [r2, #4]
 8012590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012592:	6892      	ldr	r2, [r2, #8]
 8012594:	4611      	mov	r1, r2
 8012596:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	2b00      	cmp	r3, #0
 801259c:	f2c0 80aa 	blt.w	80126f4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80125a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125a6:	695b      	ldr	r3, [r3, #20]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d004      	beq.n	80125b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80125ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125ae:	3304      	adds	r3, #4
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7fd fd31 	bl	8010018 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80125b6:	463b      	mov	r3, r7
 80125b8:	4618      	mov	r0, r3
 80125ba:	f7ff ff6b 	bl	8012494 <prvSampleTimeNow>
 80125be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	2b09      	cmp	r3, #9
 80125c4:	f200 8097 	bhi.w	80126f6 <prvProcessReceivedCommands+0x19e>
 80125c8:	a201      	add	r2, pc, #4	; (adr r2, 80125d0 <prvProcessReceivedCommands+0x78>)
 80125ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125ce:	bf00      	nop
 80125d0:	080125f9 	.word	0x080125f9
 80125d4:	080125f9 	.word	0x080125f9
 80125d8:	080125f9 	.word	0x080125f9
 80125dc:	0801266d 	.word	0x0801266d
 80125e0:	08012681 	.word	0x08012681
 80125e4:	080126cb 	.word	0x080126cb
 80125e8:	080125f9 	.word	0x080125f9
 80125ec:	080125f9 	.word	0x080125f9
 80125f0:	0801266d 	.word	0x0801266d
 80125f4:	08012681 	.word	0x08012681
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80125f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80125fe:	f043 0301 	orr.w	r3, r3, #1
 8012602:	b2da      	uxtb	r2, r3
 8012604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012606:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801260a:	68ba      	ldr	r2, [r7, #8]
 801260c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801260e:	699b      	ldr	r3, [r3, #24]
 8012610:	18d1      	adds	r1, r2, r3
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012618:	f7ff ff5c 	bl	80124d4 <prvInsertTimerInActiveList>
 801261c:	4603      	mov	r3, r0
 801261e:	2b00      	cmp	r3, #0
 8012620:	d069      	beq.n	80126f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012624:	6a1b      	ldr	r3, [r3, #32]
 8012626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012628:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801262c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012630:	f003 0304 	and.w	r3, r3, #4
 8012634:	2b00      	cmp	r3, #0
 8012636:	d05e      	beq.n	80126f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012638:	68ba      	ldr	r2, [r7, #8]
 801263a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801263c:	699b      	ldr	r3, [r3, #24]
 801263e:	441a      	add	r2, r3
 8012640:	2300      	movs	r3, #0
 8012642:	9300      	str	r3, [sp, #0]
 8012644:	2300      	movs	r3, #0
 8012646:	2100      	movs	r1, #0
 8012648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801264a:	f7ff fe05 	bl	8012258 <xTimerGenericCommand>
 801264e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012650:	6a3b      	ldr	r3, [r7, #32]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d14f      	bne.n	80126f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8012656:	f04f 0350 	mov.w	r3, #80	; 0x50
 801265a:	f383 8811 	msr	BASEPRI, r3
 801265e:	f3bf 8f6f 	isb	sy
 8012662:	f3bf 8f4f 	dsb	sy
 8012666:	61bb      	str	r3, [r7, #24]
}
 8012668:	bf00      	nop
 801266a:	e7fe      	b.n	801266a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801266c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801266e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012672:	f023 0301 	bic.w	r3, r3, #1
 8012676:	b2da      	uxtb	r2, r3
 8012678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801267a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801267e:	e03a      	b.n	80126f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012686:	f043 0301 	orr.w	r3, r3, #1
 801268a:	b2da      	uxtb	r2, r3
 801268c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801268e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012692:	68ba      	ldr	r2, [r7, #8]
 8012694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012696:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801269a:	699b      	ldr	r3, [r3, #24]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d10a      	bne.n	80126b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80126a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126a4:	f383 8811 	msr	BASEPRI, r3
 80126a8:	f3bf 8f6f 	isb	sy
 80126ac:	f3bf 8f4f 	dsb	sy
 80126b0:	617b      	str	r3, [r7, #20]
}
 80126b2:	bf00      	nop
 80126b4:	e7fe      	b.n	80126b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80126b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126b8:	699a      	ldr	r2, [r3, #24]
 80126ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126bc:	18d1      	adds	r1, r2, r3
 80126be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126c4:	f7ff ff06 	bl	80124d4 <prvInsertTimerInActiveList>
					break;
 80126c8:	e015      	b.n	80126f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80126ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126d0:	f003 0302 	and.w	r3, r3, #2
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d103      	bne.n	80126e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80126d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126da:	f000 fbb9 	bl	8012e50 <vPortFree>
 80126de:	e00a      	b.n	80126f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80126e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126e6:	f023 0301 	bic.w	r3, r3, #1
 80126ea:	b2da      	uxtb	r2, r3
 80126ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80126f2:	e000      	b.n	80126f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80126f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80126f6:	4b08      	ldr	r3, [pc, #32]	; (8012718 <prvProcessReceivedCommands+0x1c0>)
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	1d39      	adds	r1, r7, #4
 80126fc:	2200      	movs	r2, #0
 80126fe:	4618      	mov	r0, r3
 8012700:	f7fe f882 	bl	8010808 <xQueueReceive>
 8012704:	4603      	mov	r3, r0
 8012706:	2b00      	cmp	r3, #0
 8012708:	f47f af2a 	bne.w	8012560 <prvProcessReceivedCommands+0x8>
	}
}
 801270c:	bf00      	nop
 801270e:	bf00      	nop
 8012710:	3730      	adds	r7, #48	; 0x30
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}
 8012716:	bf00      	nop
 8012718:	200084b4 	.word	0x200084b4

0801271c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801271c:	b580      	push	{r7, lr}
 801271e:	b088      	sub	sp, #32
 8012720:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012722:	e048      	b.n	80127b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012724:	4b2d      	ldr	r3, [pc, #180]	; (80127dc <prvSwitchTimerLists+0xc0>)
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	68db      	ldr	r3, [r3, #12]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801272e:	4b2b      	ldr	r3, [pc, #172]	; (80127dc <prvSwitchTimerLists+0xc0>)
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	68db      	ldr	r3, [r3, #12]
 8012734:	68db      	ldr	r3, [r3, #12]
 8012736:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	3304      	adds	r3, #4
 801273c:	4618      	mov	r0, r3
 801273e:	f7fd fc6b 	bl	8010018 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	6a1b      	ldr	r3, [r3, #32]
 8012746:	68f8      	ldr	r0, [r7, #12]
 8012748:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012750:	f003 0304 	and.w	r3, r3, #4
 8012754:	2b00      	cmp	r3, #0
 8012756:	d02e      	beq.n	80127b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	699b      	ldr	r3, [r3, #24]
 801275c:	693a      	ldr	r2, [r7, #16]
 801275e:	4413      	add	r3, r2
 8012760:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012762:	68ba      	ldr	r2, [r7, #8]
 8012764:	693b      	ldr	r3, [r7, #16]
 8012766:	429a      	cmp	r2, r3
 8012768:	d90e      	bls.n	8012788 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	68ba      	ldr	r2, [r7, #8]
 801276e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	68fa      	ldr	r2, [r7, #12]
 8012774:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012776:	4b19      	ldr	r3, [pc, #100]	; (80127dc <prvSwitchTimerLists+0xc0>)
 8012778:	681a      	ldr	r2, [r3, #0]
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	3304      	adds	r3, #4
 801277e:	4619      	mov	r1, r3
 8012780:	4610      	mov	r0, r2
 8012782:	f7fd fc10 	bl	800ffa6 <vListInsert>
 8012786:	e016      	b.n	80127b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012788:	2300      	movs	r3, #0
 801278a:	9300      	str	r3, [sp, #0]
 801278c:	2300      	movs	r3, #0
 801278e:	693a      	ldr	r2, [r7, #16]
 8012790:	2100      	movs	r1, #0
 8012792:	68f8      	ldr	r0, [r7, #12]
 8012794:	f7ff fd60 	bl	8012258 <xTimerGenericCommand>
 8012798:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d10a      	bne.n	80127b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80127a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127a4:	f383 8811 	msr	BASEPRI, r3
 80127a8:	f3bf 8f6f 	isb	sy
 80127ac:	f3bf 8f4f 	dsb	sy
 80127b0:	603b      	str	r3, [r7, #0]
}
 80127b2:	bf00      	nop
 80127b4:	e7fe      	b.n	80127b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80127b6:	4b09      	ldr	r3, [pc, #36]	; (80127dc <prvSwitchTimerLists+0xc0>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d1b1      	bne.n	8012724 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80127c0:	4b06      	ldr	r3, [pc, #24]	; (80127dc <prvSwitchTimerLists+0xc0>)
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80127c6:	4b06      	ldr	r3, [pc, #24]	; (80127e0 <prvSwitchTimerLists+0xc4>)
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	4a04      	ldr	r2, [pc, #16]	; (80127dc <prvSwitchTimerLists+0xc0>)
 80127cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80127ce:	4a04      	ldr	r2, [pc, #16]	; (80127e0 <prvSwitchTimerLists+0xc4>)
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	6013      	str	r3, [r2, #0]
}
 80127d4:	bf00      	nop
 80127d6:	3718      	adds	r7, #24
 80127d8:	46bd      	mov	sp, r7
 80127da:	bd80      	pop	{r7, pc}
 80127dc:	200084ac 	.word	0x200084ac
 80127e0:	200084b0 	.word	0x200084b0

080127e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b082      	sub	sp, #8
 80127e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80127ea:	f000 f96b 	bl	8012ac4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80127ee:	4b15      	ldr	r3, [pc, #84]	; (8012844 <prvCheckForValidListAndQueue+0x60>)
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d120      	bne.n	8012838 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80127f6:	4814      	ldr	r0, [pc, #80]	; (8012848 <prvCheckForValidListAndQueue+0x64>)
 80127f8:	f7fd fb84 	bl	800ff04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80127fc:	4813      	ldr	r0, [pc, #76]	; (801284c <prvCheckForValidListAndQueue+0x68>)
 80127fe:	f7fd fb81 	bl	800ff04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012802:	4b13      	ldr	r3, [pc, #76]	; (8012850 <prvCheckForValidListAndQueue+0x6c>)
 8012804:	4a10      	ldr	r2, [pc, #64]	; (8012848 <prvCheckForValidListAndQueue+0x64>)
 8012806:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012808:	4b12      	ldr	r3, [pc, #72]	; (8012854 <prvCheckForValidListAndQueue+0x70>)
 801280a:	4a10      	ldr	r2, [pc, #64]	; (801284c <prvCheckForValidListAndQueue+0x68>)
 801280c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801280e:	2300      	movs	r3, #0
 8012810:	9300      	str	r3, [sp, #0]
 8012812:	4b11      	ldr	r3, [pc, #68]	; (8012858 <prvCheckForValidListAndQueue+0x74>)
 8012814:	4a11      	ldr	r2, [pc, #68]	; (801285c <prvCheckForValidListAndQueue+0x78>)
 8012816:	2110      	movs	r1, #16
 8012818:	200a      	movs	r0, #10
 801281a:	f7fd fc8f 	bl	801013c <xQueueGenericCreateStatic>
 801281e:	4603      	mov	r3, r0
 8012820:	4a08      	ldr	r2, [pc, #32]	; (8012844 <prvCheckForValidListAndQueue+0x60>)
 8012822:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012824:	4b07      	ldr	r3, [pc, #28]	; (8012844 <prvCheckForValidListAndQueue+0x60>)
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d005      	beq.n	8012838 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801282c:	4b05      	ldr	r3, [pc, #20]	; (8012844 <prvCheckForValidListAndQueue+0x60>)
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	490b      	ldr	r1, [pc, #44]	; (8012860 <prvCheckForValidListAndQueue+0x7c>)
 8012832:	4618      	mov	r0, r3
 8012834:	f7fe fbdc 	bl	8010ff0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012838:	f000 f974 	bl	8012b24 <vPortExitCritical>
}
 801283c:	bf00      	nop
 801283e:	46bd      	mov	sp, r7
 8012840:	bd80      	pop	{r7, pc}
 8012842:	bf00      	nop
 8012844:	200084b4 	.word	0x200084b4
 8012848:	20008484 	.word	0x20008484
 801284c:	20008498 	.word	0x20008498
 8012850:	200084ac 	.word	0x200084ac
 8012854:	200084b0 	.word	0x200084b0
 8012858:	20008560 	.word	0x20008560
 801285c:	200084c0 	.word	0x200084c0
 8012860:	080183c4 	.word	0x080183c4

08012864 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012864:	b480      	push	{r7}
 8012866:	b085      	sub	sp, #20
 8012868:	af00      	add	r7, sp, #0
 801286a:	60f8      	str	r0, [r7, #12]
 801286c:	60b9      	str	r1, [r7, #8]
 801286e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	3b04      	subs	r3, #4
 8012874:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801287c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	3b04      	subs	r3, #4
 8012882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	f023 0201 	bic.w	r2, r3, #1
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	3b04      	subs	r3, #4
 8012892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012894:	4a0c      	ldr	r2, [pc, #48]	; (80128c8 <pxPortInitialiseStack+0x64>)
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	3b14      	subs	r3, #20
 801289e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80128a0:	687a      	ldr	r2, [r7, #4]
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	3b04      	subs	r3, #4
 80128aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	f06f 0202 	mvn.w	r2, #2
 80128b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	3b20      	subs	r3, #32
 80128b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80128ba:	68fb      	ldr	r3, [r7, #12]
}
 80128bc:	4618      	mov	r0, r3
 80128be:	3714      	adds	r7, #20
 80128c0:	46bd      	mov	sp, r7
 80128c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c6:	4770      	bx	lr
 80128c8:	080128cd 	.word	0x080128cd

080128cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80128cc:	b480      	push	{r7}
 80128ce:	b085      	sub	sp, #20
 80128d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80128d2:	2300      	movs	r3, #0
 80128d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80128d6:	4b12      	ldr	r3, [pc, #72]	; (8012920 <prvTaskExitError+0x54>)
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80128de:	d00a      	beq.n	80128f6 <prvTaskExitError+0x2a>
	__asm volatile
 80128e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128e4:	f383 8811 	msr	BASEPRI, r3
 80128e8:	f3bf 8f6f 	isb	sy
 80128ec:	f3bf 8f4f 	dsb	sy
 80128f0:	60fb      	str	r3, [r7, #12]
}
 80128f2:	bf00      	nop
 80128f4:	e7fe      	b.n	80128f4 <prvTaskExitError+0x28>
	__asm volatile
 80128f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128fa:	f383 8811 	msr	BASEPRI, r3
 80128fe:	f3bf 8f6f 	isb	sy
 8012902:	f3bf 8f4f 	dsb	sy
 8012906:	60bb      	str	r3, [r7, #8]
}
 8012908:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801290a:	bf00      	nop
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d0fc      	beq.n	801290c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012912:	bf00      	nop
 8012914:	bf00      	nop
 8012916:	3714      	adds	r7, #20
 8012918:	46bd      	mov	sp, r7
 801291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291e:	4770      	bx	lr
 8012920:	20000184 	.word	0x20000184
	...

08012930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012930:	4b07      	ldr	r3, [pc, #28]	; (8012950 <pxCurrentTCBConst2>)
 8012932:	6819      	ldr	r1, [r3, #0]
 8012934:	6808      	ldr	r0, [r1, #0]
 8012936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801293a:	f380 8809 	msr	PSP, r0
 801293e:	f3bf 8f6f 	isb	sy
 8012942:	f04f 0000 	mov.w	r0, #0
 8012946:	f380 8811 	msr	BASEPRI, r0
 801294a:	4770      	bx	lr
 801294c:	f3af 8000 	nop.w

08012950 <pxCurrentTCBConst2>:
 8012950:	20007f84 	.word	0x20007f84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012954:	bf00      	nop
 8012956:	bf00      	nop

08012958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012958:	4808      	ldr	r0, [pc, #32]	; (801297c <prvPortStartFirstTask+0x24>)
 801295a:	6800      	ldr	r0, [r0, #0]
 801295c:	6800      	ldr	r0, [r0, #0]
 801295e:	f380 8808 	msr	MSP, r0
 8012962:	f04f 0000 	mov.w	r0, #0
 8012966:	f380 8814 	msr	CONTROL, r0
 801296a:	b662      	cpsie	i
 801296c:	b661      	cpsie	f
 801296e:	f3bf 8f4f 	dsb	sy
 8012972:	f3bf 8f6f 	isb	sy
 8012976:	df00      	svc	0
 8012978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801297a:	bf00      	nop
 801297c:	e000ed08 	.word	0xe000ed08

08012980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b086      	sub	sp, #24
 8012984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012986:	4b46      	ldr	r3, [pc, #280]	; (8012aa0 <xPortStartScheduler+0x120>)
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	4a46      	ldr	r2, [pc, #280]	; (8012aa4 <xPortStartScheduler+0x124>)
 801298c:	4293      	cmp	r3, r2
 801298e:	d10a      	bne.n	80129a6 <xPortStartScheduler+0x26>
	__asm volatile
 8012990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012994:	f383 8811 	msr	BASEPRI, r3
 8012998:	f3bf 8f6f 	isb	sy
 801299c:	f3bf 8f4f 	dsb	sy
 80129a0:	613b      	str	r3, [r7, #16]
}
 80129a2:	bf00      	nop
 80129a4:	e7fe      	b.n	80129a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80129a6:	4b3e      	ldr	r3, [pc, #248]	; (8012aa0 <xPortStartScheduler+0x120>)
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	4a3f      	ldr	r2, [pc, #252]	; (8012aa8 <xPortStartScheduler+0x128>)
 80129ac:	4293      	cmp	r3, r2
 80129ae:	d10a      	bne.n	80129c6 <xPortStartScheduler+0x46>
	__asm volatile
 80129b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129b4:	f383 8811 	msr	BASEPRI, r3
 80129b8:	f3bf 8f6f 	isb	sy
 80129bc:	f3bf 8f4f 	dsb	sy
 80129c0:	60fb      	str	r3, [r7, #12]
}
 80129c2:	bf00      	nop
 80129c4:	e7fe      	b.n	80129c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80129c6:	4b39      	ldr	r3, [pc, #228]	; (8012aac <xPortStartScheduler+0x12c>)
 80129c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80129ca:	697b      	ldr	r3, [r7, #20]
 80129cc:	781b      	ldrb	r3, [r3, #0]
 80129ce:	b2db      	uxtb	r3, r3
 80129d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80129d2:	697b      	ldr	r3, [r7, #20]
 80129d4:	22ff      	movs	r2, #255	; 0xff
 80129d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80129d8:	697b      	ldr	r3, [r7, #20]
 80129da:	781b      	ldrb	r3, [r3, #0]
 80129dc:	b2db      	uxtb	r3, r3
 80129de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80129e0:	78fb      	ldrb	r3, [r7, #3]
 80129e2:	b2db      	uxtb	r3, r3
 80129e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80129e8:	b2da      	uxtb	r2, r3
 80129ea:	4b31      	ldr	r3, [pc, #196]	; (8012ab0 <xPortStartScheduler+0x130>)
 80129ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80129ee:	4b31      	ldr	r3, [pc, #196]	; (8012ab4 <xPortStartScheduler+0x134>)
 80129f0:	2207      	movs	r2, #7
 80129f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80129f4:	e009      	b.n	8012a0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80129f6:	4b2f      	ldr	r3, [pc, #188]	; (8012ab4 <xPortStartScheduler+0x134>)
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	3b01      	subs	r3, #1
 80129fc:	4a2d      	ldr	r2, [pc, #180]	; (8012ab4 <xPortStartScheduler+0x134>)
 80129fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012a00:	78fb      	ldrb	r3, [r7, #3]
 8012a02:	b2db      	uxtb	r3, r3
 8012a04:	005b      	lsls	r3, r3, #1
 8012a06:	b2db      	uxtb	r3, r3
 8012a08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012a0a:	78fb      	ldrb	r3, [r7, #3]
 8012a0c:	b2db      	uxtb	r3, r3
 8012a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a12:	2b80      	cmp	r3, #128	; 0x80
 8012a14:	d0ef      	beq.n	80129f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012a16:	4b27      	ldr	r3, [pc, #156]	; (8012ab4 <xPortStartScheduler+0x134>)
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	f1c3 0307 	rsb	r3, r3, #7
 8012a1e:	2b04      	cmp	r3, #4
 8012a20:	d00a      	beq.n	8012a38 <xPortStartScheduler+0xb8>
	__asm volatile
 8012a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a26:	f383 8811 	msr	BASEPRI, r3
 8012a2a:	f3bf 8f6f 	isb	sy
 8012a2e:	f3bf 8f4f 	dsb	sy
 8012a32:	60bb      	str	r3, [r7, #8]
}
 8012a34:	bf00      	nop
 8012a36:	e7fe      	b.n	8012a36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012a38:	4b1e      	ldr	r3, [pc, #120]	; (8012ab4 <xPortStartScheduler+0x134>)
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	021b      	lsls	r3, r3, #8
 8012a3e:	4a1d      	ldr	r2, [pc, #116]	; (8012ab4 <xPortStartScheduler+0x134>)
 8012a40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012a42:	4b1c      	ldr	r3, [pc, #112]	; (8012ab4 <xPortStartScheduler+0x134>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012a4a:	4a1a      	ldr	r2, [pc, #104]	; (8012ab4 <xPortStartScheduler+0x134>)
 8012a4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	b2da      	uxtb	r2, r3
 8012a52:	697b      	ldr	r3, [r7, #20]
 8012a54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012a56:	4b18      	ldr	r3, [pc, #96]	; (8012ab8 <xPortStartScheduler+0x138>)
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	4a17      	ldr	r2, [pc, #92]	; (8012ab8 <xPortStartScheduler+0x138>)
 8012a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012a60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012a62:	4b15      	ldr	r3, [pc, #84]	; (8012ab8 <xPortStartScheduler+0x138>)
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	4a14      	ldr	r2, [pc, #80]	; (8012ab8 <xPortStartScheduler+0x138>)
 8012a68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012a6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012a6e:	f000 f8dd 	bl	8012c2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012a72:	4b12      	ldr	r3, [pc, #72]	; (8012abc <xPortStartScheduler+0x13c>)
 8012a74:	2200      	movs	r2, #0
 8012a76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012a78:	f000 f8fc 	bl	8012c74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012a7c:	4b10      	ldr	r3, [pc, #64]	; (8012ac0 <xPortStartScheduler+0x140>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	4a0f      	ldr	r2, [pc, #60]	; (8012ac0 <xPortStartScheduler+0x140>)
 8012a82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012a86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012a88:	f7ff ff66 	bl	8012958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012a8c:	f7fe ff48 	bl	8011920 <vTaskSwitchContext>
	prvTaskExitError();
 8012a90:	f7ff ff1c 	bl	80128cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012a94:	2300      	movs	r3, #0
}
 8012a96:	4618      	mov	r0, r3
 8012a98:	3718      	adds	r7, #24
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}
 8012a9e:	bf00      	nop
 8012aa0:	e000ed00 	.word	0xe000ed00
 8012aa4:	410fc271 	.word	0x410fc271
 8012aa8:	410fc270 	.word	0x410fc270
 8012aac:	e000e400 	.word	0xe000e400
 8012ab0:	200085b0 	.word	0x200085b0
 8012ab4:	200085b4 	.word	0x200085b4
 8012ab8:	e000ed20 	.word	0xe000ed20
 8012abc:	20000184 	.word	0x20000184
 8012ac0:	e000ef34 	.word	0xe000ef34

08012ac4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012ac4:	b480      	push	{r7}
 8012ac6:	b083      	sub	sp, #12
 8012ac8:	af00      	add	r7, sp, #0
	__asm volatile
 8012aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ace:	f383 8811 	msr	BASEPRI, r3
 8012ad2:	f3bf 8f6f 	isb	sy
 8012ad6:	f3bf 8f4f 	dsb	sy
 8012ada:	607b      	str	r3, [r7, #4]
}
 8012adc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012ade:	4b0f      	ldr	r3, [pc, #60]	; (8012b1c <vPortEnterCritical+0x58>)
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	3301      	adds	r3, #1
 8012ae4:	4a0d      	ldr	r2, [pc, #52]	; (8012b1c <vPortEnterCritical+0x58>)
 8012ae6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012ae8:	4b0c      	ldr	r3, [pc, #48]	; (8012b1c <vPortEnterCritical+0x58>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	2b01      	cmp	r3, #1
 8012aee:	d10f      	bne.n	8012b10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012af0:	4b0b      	ldr	r3, [pc, #44]	; (8012b20 <vPortEnterCritical+0x5c>)
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	b2db      	uxtb	r3, r3
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d00a      	beq.n	8012b10 <vPortEnterCritical+0x4c>
	__asm volatile
 8012afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012afe:	f383 8811 	msr	BASEPRI, r3
 8012b02:	f3bf 8f6f 	isb	sy
 8012b06:	f3bf 8f4f 	dsb	sy
 8012b0a:	603b      	str	r3, [r7, #0]
}
 8012b0c:	bf00      	nop
 8012b0e:	e7fe      	b.n	8012b0e <vPortEnterCritical+0x4a>
	}
}
 8012b10:	bf00      	nop
 8012b12:	370c      	adds	r7, #12
 8012b14:	46bd      	mov	sp, r7
 8012b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1a:	4770      	bx	lr
 8012b1c:	20000184 	.word	0x20000184
 8012b20:	e000ed04 	.word	0xe000ed04

08012b24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012b24:	b480      	push	{r7}
 8012b26:	b083      	sub	sp, #12
 8012b28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012b2a:	4b12      	ldr	r3, [pc, #72]	; (8012b74 <vPortExitCritical+0x50>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d10a      	bne.n	8012b48 <vPortExitCritical+0x24>
	__asm volatile
 8012b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b36:	f383 8811 	msr	BASEPRI, r3
 8012b3a:	f3bf 8f6f 	isb	sy
 8012b3e:	f3bf 8f4f 	dsb	sy
 8012b42:	607b      	str	r3, [r7, #4]
}
 8012b44:	bf00      	nop
 8012b46:	e7fe      	b.n	8012b46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012b48:	4b0a      	ldr	r3, [pc, #40]	; (8012b74 <vPortExitCritical+0x50>)
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	3b01      	subs	r3, #1
 8012b4e:	4a09      	ldr	r2, [pc, #36]	; (8012b74 <vPortExitCritical+0x50>)
 8012b50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012b52:	4b08      	ldr	r3, [pc, #32]	; (8012b74 <vPortExitCritical+0x50>)
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d105      	bne.n	8012b66 <vPortExitCritical+0x42>
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012b5e:	683b      	ldr	r3, [r7, #0]
 8012b60:	f383 8811 	msr	BASEPRI, r3
}
 8012b64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012b66:	bf00      	nop
 8012b68:	370c      	adds	r7, #12
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b70:	4770      	bx	lr
 8012b72:	bf00      	nop
 8012b74:	20000184 	.word	0x20000184
	...

08012b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012b80:	f3ef 8009 	mrs	r0, PSP
 8012b84:	f3bf 8f6f 	isb	sy
 8012b88:	4b15      	ldr	r3, [pc, #84]	; (8012be0 <pxCurrentTCBConst>)
 8012b8a:	681a      	ldr	r2, [r3, #0]
 8012b8c:	f01e 0f10 	tst.w	lr, #16
 8012b90:	bf08      	it	eq
 8012b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b9a:	6010      	str	r0, [r2, #0]
 8012b9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012ba0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012ba4:	f380 8811 	msr	BASEPRI, r0
 8012ba8:	f3bf 8f4f 	dsb	sy
 8012bac:	f3bf 8f6f 	isb	sy
 8012bb0:	f7fe feb6 	bl	8011920 <vTaskSwitchContext>
 8012bb4:	f04f 0000 	mov.w	r0, #0
 8012bb8:	f380 8811 	msr	BASEPRI, r0
 8012bbc:	bc09      	pop	{r0, r3}
 8012bbe:	6819      	ldr	r1, [r3, #0]
 8012bc0:	6808      	ldr	r0, [r1, #0]
 8012bc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bc6:	f01e 0f10 	tst.w	lr, #16
 8012bca:	bf08      	it	eq
 8012bcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012bd0:	f380 8809 	msr	PSP, r0
 8012bd4:	f3bf 8f6f 	isb	sy
 8012bd8:	4770      	bx	lr
 8012bda:	bf00      	nop
 8012bdc:	f3af 8000 	nop.w

08012be0 <pxCurrentTCBConst>:
 8012be0:	20007f84 	.word	0x20007f84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012be4:	bf00      	nop
 8012be6:	bf00      	nop

08012be8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b082      	sub	sp, #8
 8012bec:	af00      	add	r7, sp, #0
	__asm volatile
 8012bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bf2:	f383 8811 	msr	BASEPRI, r3
 8012bf6:	f3bf 8f6f 	isb	sy
 8012bfa:	f3bf 8f4f 	dsb	sy
 8012bfe:	607b      	str	r3, [r7, #4]
}
 8012c00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012c02:	f7fe fdd3 	bl	80117ac <xTaskIncrementTick>
 8012c06:	4603      	mov	r3, r0
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d003      	beq.n	8012c14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012c0c:	4b06      	ldr	r3, [pc, #24]	; (8012c28 <xPortSysTickHandler+0x40>)
 8012c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c12:	601a      	str	r2, [r3, #0]
 8012c14:	2300      	movs	r3, #0
 8012c16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012c18:	683b      	ldr	r3, [r7, #0]
 8012c1a:	f383 8811 	msr	BASEPRI, r3
}
 8012c1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012c20:	bf00      	nop
 8012c22:	3708      	adds	r7, #8
 8012c24:	46bd      	mov	sp, r7
 8012c26:	bd80      	pop	{r7, pc}
 8012c28:	e000ed04 	.word	0xe000ed04

08012c2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012c2c:	b480      	push	{r7}
 8012c2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012c30:	4b0b      	ldr	r3, [pc, #44]	; (8012c60 <vPortSetupTimerInterrupt+0x34>)
 8012c32:	2200      	movs	r2, #0
 8012c34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012c36:	4b0b      	ldr	r3, [pc, #44]	; (8012c64 <vPortSetupTimerInterrupt+0x38>)
 8012c38:	2200      	movs	r2, #0
 8012c3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012c3c:	4b0a      	ldr	r3, [pc, #40]	; (8012c68 <vPortSetupTimerInterrupt+0x3c>)
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	4a0a      	ldr	r2, [pc, #40]	; (8012c6c <vPortSetupTimerInterrupt+0x40>)
 8012c42:	fba2 2303 	umull	r2, r3, r2, r3
 8012c46:	099b      	lsrs	r3, r3, #6
 8012c48:	4a09      	ldr	r2, [pc, #36]	; (8012c70 <vPortSetupTimerInterrupt+0x44>)
 8012c4a:	3b01      	subs	r3, #1
 8012c4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012c4e:	4b04      	ldr	r3, [pc, #16]	; (8012c60 <vPortSetupTimerInterrupt+0x34>)
 8012c50:	2207      	movs	r2, #7
 8012c52:	601a      	str	r2, [r3, #0]
}
 8012c54:	bf00      	nop
 8012c56:	46bd      	mov	sp, r7
 8012c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5c:	4770      	bx	lr
 8012c5e:	bf00      	nop
 8012c60:	e000e010 	.word	0xe000e010
 8012c64:	e000e018 	.word	0xe000e018
 8012c68:	2000013c 	.word	0x2000013c
 8012c6c:	10624dd3 	.word	0x10624dd3
 8012c70:	e000e014 	.word	0xe000e014

08012c74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012c74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012c84 <vPortEnableVFP+0x10>
 8012c78:	6801      	ldr	r1, [r0, #0]
 8012c7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012c7e:	6001      	str	r1, [r0, #0]
 8012c80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012c82:	bf00      	nop
 8012c84:	e000ed88 	.word	0xe000ed88

08012c88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012c88:	b480      	push	{r7}
 8012c8a:	b085      	sub	sp, #20
 8012c8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012c8e:	f3ef 8305 	mrs	r3, IPSR
 8012c92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	2b0f      	cmp	r3, #15
 8012c98:	d914      	bls.n	8012cc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012c9a:	4a17      	ldr	r2, [pc, #92]	; (8012cf8 <vPortValidateInterruptPriority+0x70>)
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	4413      	add	r3, r2
 8012ca0:	781b      	ldrb	r3, [r3, #0]
 8012ca2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012ca4:	4b15      	ldr	r3, [pc, #84]	; (8012cfc <vPortValidateInterruptPriority+0x74>)
 8012ca6:	781b      	ldrb	r3, [r3, #0]
 8012ca8:	7afa      	ldrb	r2, [r7, #11]
 8012caa:	429a      	cmp	r2, r3
 8012cac:	d20a      	bcs.n	8012cc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cb2:	f383 8811 	msr	BASEPRI, r3
 8012cb6:	f3bf 8f6f 	isb	sy
 8012cba:	f3bf 8f4f 	dsb	sy
 8012cbe:	607b      	str	r3, [r7, #4]
}
 8012cc0:	bf00      	nop
 8012cc2:	e7fe      	b.n	8012cc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012cc4:	4b0e      	ldr	r3, [pc, #56]	; (8012d00 <vPortValidateInterruptPriority+0x78>)
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012ccc:	4b0d      	ldr	r3, [pc, #52]	; (8012d04 <vPortValidateInterruptPriority+0x7c>)
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	d90a      	bls.n	8012cea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cd8:	f383 8811 	msr	BASEPRI, r3
 8012cdc:	f3bf 8f6f 	isb	sy
 8012ce0:	f3bf 8f4f 	dsb	sy
 8012ce4:	603b      	str	r3, [r7, #0]
}
 8012ce6:	bf00      	nop
 8012ce8:	e7fe      	b.n	8012ce8 <vPortValidateInterruptPriority+0x60>
	}
 8012cea:	bf00      	nop
 8012cec:	3714      	adds	r7, #20
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf4:	4770      	bx	lr
 8012cf6:	bf00      	nop
 8012cf8:	e000e3f0 	.word	0xe000e3f0
 8012cfc:	200085b0 	.word	0x200085b0
 8012d00:	e000ed0c 	.word	0xe000ed0c
 8012d04:	200085b4 	.word	0x200085b4

08012d08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b088      	sub	sp, #32
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012d10:	2300      	movs	r3, #0
 8012d12:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 8012d14:	4b48      	ldr	r3, [pc, #288]	; (8012e38 <pvPortMalloc+0x130>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d10a      	bne.n	8012d32 <pvPortMalloc+0x2a>
	__asm volatile
 8012d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d20:	f383 8811 	msr	BASEPRI, r3
 8012d24:	f3bf 8f6f 	isb	sy
 8012d28:	f3bf 8f4f 	dsb	sy
 8012d2c:	60fb      	str	r3, [r7, #12]
}
 8012d2e:	bf00      	nop
 8012d30:	e7fe      	b.n	8012d30 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 8012d32:	f7fe fc7f 	bl	8011634 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012d36:	4b41      	ldr	r3, [pc, #260]	; (8012e3c <pvPortMalloc+0x134>)
 8012d38:	681a      	ldr	r2, [r3, #0]
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	4013      	ands	r3, r2
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d172      	bne.n	8012e28 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d00d      	beq.n	8012d64 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8012d48:	2208      	movs	r2, #8
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	4413      	add	r3, r2
 8012d4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	f003 0307 	and.w	r3, r3, #7
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d004      	beq.n	8012d64 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	f023 0307 	bic.w	r3, r3, #7
 8012d60:	3308      	adds	r3, #8
 8012d62:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d05e      	beq.n	8012e28 <pvPortMalloc+0x120>
 8012d6a:	4b35      	ldr	r3, [pc, #212]	; (8012e40 <pvPortMalloc+0x138>)
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	687a      	ldr	r2, [r7, #4]
 8012d70:	429a      	cmp	r2, r3
 8012d72:	d859      	bhi.n	8012e28 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012d74:	4b33      	ldr	r3, [pc, #204]	; (8012e44 <pvPortMalloc+0x13c>)
 8012d76:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 8012d78:	4b32      	ldr	r3, [pc, #200]	; (8012e44 <pvPortMalloc+0x13c>)
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012d7e:	e004      	b.n	8012d8a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8012d80:	69fb      	ldr	r3, [r7, #28]
 8012d82:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012d84:	69fb      	ldr	r3, [r7, #28]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012d8a:	69fb      	ldr	r3, [r7, #28]
 8012d8c:	685b      	ldr	r3, [r3, #4]
 8012d8e:	687a      	ldr	r2, [r7, #4]
 8012d90:	429a      	cmp	r2, r3
 8012d92:	d903      	bls.n	8012d9c <pvPortMalloc+0x94>
 8012d94:	69fb      	ldr	r3, [r7, #28]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d1f1      	bne.n	8012d80 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012d9c:	4b26      	ldr	r3, [pc, #152]	; (8012e38 <pvPortMalloc+0x130>)
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	69fa      	ldr	r2, [r7, #28]
 8012da2:	429a      	cmp	r2, r3
 8012da4:	d040      	beq.n	8012e28 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012da6:	69bb      	ldr	r3, [r7, #24]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	2208      	movs	r2, #8
 8012dac:	4413      	add	r3, r2
 8012dae:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012db0:	69fb      	ldr	r3, [r7, #28]
 8012db2:	681a      	ldr	r2, [r3, #0]
 8012db4:	69bb      	ldr	r3, [r7, #24]
 8012db6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012db8:	69fb      	ldr	r3, [r7, #28]
 8012dba:	685a      	ldr	r2, [r3, #4]
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	1ad2      	subs	r2, r2, r3
 8012dc0:	2308      	movs	r3, #8
 8012dc2:	005b      	lsls	r3, r3, #1
 8012dc4:	429a      	cmp	r2, r3
 8012dc6:	d90f      	bls.n	8012de8 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012dc8:	69fa      	ldr	r2, [r7, #28]
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	4413      	add	r3, r2
 8012dce:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012dd0:	69fb      	ldr	r3, [r7, #28]
 8012dd2:	685a      	ldr	r2, [r3, #4]
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	1ad2      	subs	r2, r2, r3
 8012dd8:	693b      	ldr	r3, [r7, #16]
 8012dda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012ddc:	69fb      	ldr	r3, [r7, #28]
 8012dde:	687a      	ldr	r2, [r7, #4]
 8012de0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8012de2:	6938      	ldr	r0, [r7, #16]
 8012de4:	f000 f896 	bl	8012f14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012de8:	4b15      	ldr	r3, [pc, #84]	; (8012e40 <pvPortMalloc+0x138>)
 8012dea:	681a      	ldr	r2, [r3, #0]
 8012dec:	69fb      	ldr	r3, [r7, #28]
 8012dee:	685b      	ldr	r3, [r3, #4]
 8012df0:	1ad3      	subs	r3, r2, r3
 8012df2:	4a13      	ldr	r2, [pc, #76]	; (8012e40 <pvPortMalloc+0x138>)
 8012df4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012df6:	4b12      	ldr	r3, [pc, #72]	; (8012e40 <pvPortMalloc+0x138>)
 8012df8:	681a      	ldr	r2, [r3, #0]
 8012dfa:	4b13      	ldr	r3, [pc, #76]	; (8012e48 <pvPortMalloc+0x140>)
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	429a      	cmp	r2, r3
 8012e00:	d203      	bcs.n	8012e0a <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012e02:	4b0f      	ldr	r3, [pc, #60]	; (8012e40 <pvPortMalloc+0x138>)
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	4a10      	ldr	r2, [pc, #64]	; (8012e48 <pvPortMalloc+0x140>)
 8012e08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012e0a:	69fb      	ldr	r3, [r7, #28]
 8012e0c:	685a      	ldr	r2, [r3, #4]
 8012e0e:	4b0b      	ldr	r3, [pc, #44]	; (8012e3c <pvPortMalloc+0x134>)
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	431a      	orrs	r2, r3
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012e18:	69fb      	ldr	r3, [r7, #28]
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012e1e:	4b0b      	ldr	r3, [pc, #44]	; (8012e4c <pvPortMalloc+0x144>)
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	3301      	adds	r3, #1
 8012e24:	4a09      	ldr	r2, [pc, #36]	; (8012e4c <pvPortMalloc+0x144>)
 8012e26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012e28:	f7fe fc12 	bl	8011650 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 8012e2c:	697b      	ldr	r3, [r7, #20]
}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3720      	adds	r7, #32
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}
 8012e36:	bf00      	nop
 8012e38:	200085c0 	.word	0x200085c0
 8012e3c:	200085d4 	.word	0x200085d4
 8012e40:	200085c4 	.word	0x200085c4
 8012e44:	200085b8 	.word	0x200085b8
 8012e48:	200085c8 	.word	0x200085c8
 8012e4c:	200085cc 	.word	0x200085cc

08012e50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b086      	sub	sp, #24
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d04d      	beq.n	8012efe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012e62:	2308      	movs	r3, #8
 8012e64:	425b      	negs	r3, r3
 8012e66:	697a      	ldr	r2, [r7, #20]
 8012e68:	4413      	add	r3, r2
 8012e6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012e6c:	697b      	ldr	r3, [r7, #20]
 8012e6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012e70:	693b      	ldr	r3, [r7, #16]
 8012e72:	685a      	ldr	r2, [r3, #4]
 8012e74:	4b24      	ldr	r3, [pc, #144]	; (8012f08 <vPortFree+0xb8>)
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	4013      	ands	r3, r2
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d10a      	bne.n	8012e94 <vPortFree+0x44>
	__asm volatile
 8012e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e82:	f383 8811 	msr	BASEPRI, r3
 8012e86:	f3bf 8f6f 	isb	sy
 8012e8a:	f3bf 8f4f 	dsb	sy
 8012e8e:	60fb      	str	r3, [r7, #12]
}
 8012e90:	bf00      	nop
 8012e92:	e7fe      	b.n	8012e92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012e94:	693b      	ldr	r3, [r7, #16]
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d00a      	beq.n	8012eb2 <vPortFree+0x62>
	__asm volatile
 8012e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ea0:	f383 8811 	msr	BASEPRI, r3
 8012ea4:	f3bf 8f6f 	isb	sy
 8012ea8:	f3bf 8f4f 	dsb	sy
 8012eac:	60bb      	str	r3, [r7, #8]
}
 8012eae:	bf00      	nop
 8012eb0:	e7fe      	b.n	8012eb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012eb2:	693b      	ldr	r3, [r7, #16]
 8012eb4:	685a      	ldr	r2, [r3, #4]
 8012eb6:	4b14      	ldr	r3, [pc, #80]	; (8012f08 <vPortFree+0xb8>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	4013      	ands	r3, r2
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d01e      	beq.n	8012efe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012ec0:	693b      	ldr	r3, [r7, #16]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d11a      	bne.n	8012efe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012ec8:	693b      	ldr	r3, [r7, #16]
 8012eca:	685a      	ldr	r2, [r3, #4]
 8012ecc:	4b0e      	ldr	r3, [pc, #56]	; (8012f08 <vPortFree+0xb8>)
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	43db      	mvns	r3, r3
 8012ed2:	401a      	ands	r2, r3
 8012ed4:	693b      	ldr	r3, [r7, #16]
 8012ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012ed8:	f7fe fbac 	bl	8011634 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012edc:	693b      	ldr	r3, [r7, #16]
 8012ede:	685a      	ldr	r2, [r3, #4]
 8012ee0:	4b0a      	ldr	r3, [pc, #40]	; (8012f0c <vPortFree+0xbc>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	4413      	add	r3, r2
 8012ee6:	4a09      	ldr	r2, [pc, #36]	; (8012f0c <vPortFree+0xbc>)
 8012ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012eea:	6938      	ldr	r0, [r7, #16]
 8012eec:	f000 f812 	bl	8012f14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012ef0:	4b07      	ldr	r3, [pc, #28]	; (8012f10 <vPortFree+0xc0>)
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	3301      	adds	r3, #1
 8012ef6:	4a06      	ldr	r2, [pc, #24]	; (8012f10 <vPortFree+0xc0>)
 8012ef8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012efa:	f7fe fba9 	bl	8011650 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012efe:	bf00      	nop
 8012f00:	3718      	adds	r7, #24
 8012f02:	46bd      	mov	sp, r7
 8012f04:	bd80      	pop	{r7, pc}
 8012f06:	bf00      	nop
 8012f08:	200085d4 	.word	0x200085d4
 8012f0c:	200085c4 	.word	0x200085c4
 8012f10:	200085d0 	.word	0x200085d0

08012f14 <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012f14:	b480      	push	{r7}
 8012f16:	b085      	sub	sp, #20
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012f1c:	4b28      	ldr	r3, [pc, #160]	; (8012fc0 <prvInsertBlockIntoFreeList+0xac>)
 8012f1e:	60fb      	str	r3, [r7, #12]
 8012f20:	e002      	b.n	8012f28 <prvInsertBlockIntoFreeList+0x14>
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	60fb      	str	r3, [r7, #12]
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	687a      	ldr	r2, [r7, #4]
 8012f2e:	429a      	cmp	r2, r3
 8012f30:	d8f7      	bhi.n	8012f22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	685b      	ldr	r3, [r3, #4]
 8012f3a:	68ba      	ldr	r2, [r7, #8]
 8012f3c:	4413      	add	r3, r2
 8012f3e:	687a      	ldr	r2, [r7, #4]
 8012f40:	429a      	cmp	r2, r3
 8012f42:	d108      	bne.n	8012f56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	685a      	ldr	r2, [r3, #4]
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	685b      	ldr	r3, [r3, #4]
 8012f4c:	441a      	add	r2, r3
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	685b      	ldr	r3, [r3, #4]
 8012f5e:	68ba      	ldr	r2, [r7, #8]
 8012f60:	441a      	add	r2, r3
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	429a      	cmp	r2, r3
 8012f68:	d118      	bne.n	8012f9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	681a      	ldr	r2, [r3, #0]
 8012f6e:	4b15      	ldr	r3, [pc, #84]	; (8012fc4 <prvInsertBlockIntoFreeList+0xb0>)
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	429a      	cmp	r2, r3
 8012f74:	d00d      	beq.n	8012f92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	685a      	ldr	r2, [r3, #4]
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	685b      	ldr	r3, [r3, #4]
 8012f80:	441a      	add	r2, r3
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	681a      	ldr	r2, [r3, #0]
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	601a      	str	r2, [r3, #0]
 8012f90:	e008      	b.n	8012fa4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012f92:	4b0c      	ldr	r3, [pc, #48]	; (8012fc4 <prvInsertBlockIntoFreeList+0xb0>)
 8012f94:	681a      	ldr	r2, [r3, #0]
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	601a      	str	r2, [r3, #0]
 8012f9a:	e003      	b.n	8012fa4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	681a      	ldr	r2, [r3, #0]
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012fa4:	68fa      	ldr	r2, [r7, #12]
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	d002      	beq.n	8012fb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	687a      	ldr	r2, [r7, #4]
 8012fb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012fb2:	bf00      	nop
 8012fb4:	3714      	adds	r7, #20
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbc:	4770      	bx	lr
 8012fbe:	bf00      	nop
 8012fc0:	200085b8 	.word	0x200085b8
 8012fc4:	200085c0 	.word	0x200085c0

08012fc8 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 8012fc8:	b480      	push	{r7}
 8012fca:	b08f      	sub	sp, #60	; 0x3c
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 8012fd8:	2300      	movs	r3, #0
 8012fda:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 8012fdc:	4b5a      	ldr	r3, [pc, #360]	; (8013148 <vPortDefineHeapRegions+0x180>)
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d00a      	beq.n	8012ffa <vPortDefineHeapRegions+0x32>
	__asm volatile
 8012fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fe8:	f383 8811 	msr	BASEPRI, r3
 8012fec:	f3bf 8f6f 	isb	sy
 8012ff0:	f3bf 8f4f 	dsb	sy
 8012ff4:	617b      	str	r3, [r7, #20]
}
 8012ff6:	bf00      	nop
 8012ff8:	e7fe      	b.n	8012ff8 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8012ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ffc:	00db      	lsls	r3, r3, #3
 8012ffe:	687a      	ldr	r2, [r7, #4]
 8013000:	4413      	add	r3, r2
 8013002:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 8013004:	e07d      	b.n	8013102 <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 8013006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013008:	685b      	ldr	r3, [r3, #4]
 801300a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 801300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013014:	f003 0307 	and.w	r3, r3, #7
 8013018:	2b00      	cmp	r3, #0
 801301a:	d00e      	beq.n	801303a <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 801301c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801301e:	3307      	adds	r3, #7
 8013020:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8013022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013024:	f023 0307 	bic.w	r3, r3, #7
 8013028:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 801302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	461a      	mov	r2, r3
 8013030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013032:	1ad3      	subs	r3, r2, r3
 8013034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013036:	4413      	add	r3, r2
 8013038:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 801303a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801303c:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 801303e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013040:	2b00      	cmp	r3, #0
 8013042:	d106      	bne.n	8013052 <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 8013044:	69fb      	ldr	r3, [r7, #28]
 8013046:	4a41      	ldr	r2, [pc, #260]	; (801314c <vPortDefineHeapRegions+0x184>)
 8013048:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 801304a:	4b40      	ldr	r3, [pc, #256]	; (801314c <vPortDefineHeapRegions+0x184>)
 801304c:	2200      	movs	r2, #0
 801304e:	605a      	str	r2, [r3, #4]
 8013050:	e01f      	b.n	8013092 <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 8013052:	4b3d      	ldr	r3, [pc, #244]	; (8013148 <vPortDefineHeapRegions+0x180>)
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d10a      	bne.n	8013070 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 801305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801305e:	f383 8811 	msr	BASEPRI, r3
 8013062:	f3bf 8f6f 	isb	sy
 8013066:	f3bf 8f4f 	dsb	sy
 801306a:	613b      	str	r3, [r7, #16]
}
 801306c:	bf00      	nop
 801306e:	e7fe      	b.n	801306e <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 8013070:	4b35      	ldr	r3, [pc, #212]	; (8013148 <vPortDefineHeapRegions+0x180>)
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	461a      	mov	r2, r3
 8013076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013078:	4293      	cmp	r3, r2
 801307a:	d80a      	bhi.n	8013092 <vPortDefineHeapRegions+0xca>
	__asm volatile
 801307c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013080:	f383 8811 	msr	BASEPRI, r3
 8013084:	f3bf 8f6f 	isb	sy
 8013088:	f3bf 8f4f 	dsb	sy
 801308c:	60fb      	str	r3, [r7, #12]
}
 801308e:	bf00      	nop
 8013090:	e7fe      	b.n	8013090 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 8013092:	4b2d      	ldr	r3, [pc, #180]	; (8013148 <vPortDefineHeapRegions+0x180>)
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 8013098:	69fa      	ldr	r2, [r7, #28]
 801309a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801309c:	4413      	add	r3, r2
 801309e:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 80130a0:	2208      	movs	r2, #8
 80130a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130a4:	1a9b      	subs	r3, r3, r2
 80130a6:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 80130a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130aa:	f023 0307 	bic.w	r3, r3, #7
 80130ae:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 80130b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130b2:	4a25      	ldr	r2, [pc, #148]	; (8013148 <vPortDefineHeapRegions+0x180>)
 80130b4:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 80130b6:	4b24      	ldr	r3, [pc, #144]	; (8013148 <vPortDefineHeapRegions+0x180>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	2200      	movs	r2, #0
 80130bc:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 80130be:	4b22      	ldr	r3, [pc, #136]	; (8013148 <vPortDefineHeapRegions+0x180>)
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	2200      	movs	r2, #0
 80130c4:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 80130c6:	69fb      	ldr	r3, [r7, #28]
 80130c8:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 80130ca:	6a3b      	ldr	r3, [r7, #32]
 80130cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80130ce:	1ad2      	subs	r2, r2, r3
 80130d0:	6a3b      	ldr	r3, [r7, #32]
 80130d2:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 80130d4:	4b1c      	ldr	r3, [pc, #112]	; (8013148 <vPortDefineHeapRegions+0x180>)
 80130d6:	681a      	ldr	r2, [r3, #0]
 80130d8:	6a3b      	ldr	r3, [r7, #32]
 80130da:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 80130dc:	69bb      	ldr	r3, [r7, #24]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d002      	beq.n	80130e8 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 80130e2:	69bb      	ldr	r3, [r7, #24]
 80130e4:	6a3a      	ldr	r2, [r7, #32]
 80130e6:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 80130e8:	6a3b      	ldr	r3, [r7, #32]
 80130ea:	685b      	ldr	r3, [r3, #4]
 80130ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80130ee:	4413      	add	r3, r2
 80130f0:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 80130f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130f4:	3301      	adds	r3, #1
 80130f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 80130f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130fa:	00db      	lsls	r3, r3, #3
 80130fc:	687a      	ldr	r2, [r7, #4]
 80130fe:	4413      	add	r3, r2
 8013100:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 8013102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013104:	685b      	ldr	r3, [r3, #4]
 8013106:	2b00      	cmp	r3, #0
 8013108:	f47f af7d 	bne.w	8013006 <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 801310c:	4a10      	ldr	r2, [pc, #64]	; (8013150 <vPortDefineHeapRegions+0x188>)
 801310e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013110:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 8013112:	4a10      	ldr	r2, [pc, #64]	; (8013154 <vPortDefineHeapRegions+0x18c>)
 8013114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013116:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 8013118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801311a:	2b00      	cmp	r3, #0
 801311c:	d10a      	bne.n	8013134 <vPortDefineHeapRegions+0x16c>
	__asm volatile
 801311e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013122:	f383 8811 	msr	BASEPRI, r3
 8013126:	f3bf 8f6f 	isb	sy
 801312a:	f3bf 8f4f 	dsb	sy
 801312e:	60bb      	str	r3, [r7, #8]
}
 8013130:	bf00      	nop
 8013132:	e7fe      	b.n	8013132 <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013134:	4b08      	ldr	r3, [pc, #32]	; (8013158 <vPortDefineHeapRegions+0x190>)
 8013136:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801313a:	601a      	str	r2, [r3, #0]
}
 801313c:	bf00      	nop
 801313e:	373c      	adds	r7, #60	; 0x3c
 8013140:	46bd      	mov	sp, r7
 8013142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013146:	4770      	bx	lr
 8013148:	200085c0 	.word	0x200085c0
 801314c:	200085b8 	.word	0x200085b8
 8013150:	200085c8 	.word	0x200085c8
 8013154:	200085c4 	.word	0x200085c4
 8013158:	200085d4 	.word	0x200085d4

0801315c <atof>:
 801315c:	2100      	movs	r1, #0
 801315e:	f001 beb9 	b.w	8014ed4 <strtod>

08013162 <atoi>:
 8013162:	220a      	movs	r2, #10
 8013164:	2100      	movs	r1, #0
 8013166:	f001 bf43 	b.w	8014ff0 <strtol>

0801316a <atol>:
 801316a:	220a      	movs	r2, #10
 801316c:	2100      	movs	r1, #0
 801316e:	f001 bf3f 	b.w	8014ff0 <strtol>
	...

08013174 <calloc>:
 8013174:	4b02      	ldr	r3, [pc, #8]	; (8013180 <calloc+0xc>)
 8013176:	460a      	mov	r2, r1
 8013178:	4601      	mov	r1, r0
 801317a:	6818      	ldr	r0, [r3, #0]
 801317c:	f000 b9f8 	b.w	8013570 <_calloc_r>
 8013180:	20000188 	.word	0x20000188

08013184 <__errno>:
 8013184:	4b01      	ldr	r3, [pc, #4]	; (801318c <__errno+0x8>)
 8013186:	6818      	ldr	r0, [r3, #0]
 8013188:	4770      	bx	lr
 801318a:	bf00      	nop
 801318c:	20000188 	.word	0x20000188

08013190 <std>:
 8013190:	2300      	movs	r3, #0
 8013192:	b510      	push	{r4, lr}
 8013194:	4604      	mov	r4, r0
 8013196:	e9c0 3300 	strd	r3, r3, [r0]
 801319a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801319e:	6083      	str	r3, [r0, #8]
 80131a0:	8181      	strh	r1, [r0, #12]
 80131a2:	6643      	str	r3, [r0, #100]	; 0x64
 80131a4:	81c2      	strh	r2, [r0, #14]
 80131a6:	6183      	str	r3, [r0, #24]
 80131a8:	4619      	mov	r1, r3
 80131aa:	2208      	movs	r2, #8
 80131ac:	305c      	adds	r0, #92	; 0x5c
 80131ae:	f000 f9d7 	bl	8013560 <memset>
 80131b2:	4b05      	ldr	r3, [pc, #20]	; (80131c8 <std+0x38>)
 80131b4:	6263      	str	r3, [r4, #36]	; 0x24
 80131b6:	4b05      	ldr	r3, [pc, #20]	; (80131cc <std+0x3c>)
 80131b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80131ba:	4b05      	ldr	r3, [pc, #20]	; (80131d0 <std+0x40>)
 80131bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80131be:	4b05      	ldr	r3, [pc, #20]	; (80131d4 <std+0x44>)
 80131c0:	6224      	str	r4, [r4, #32]
 80131c2:	6323      	str	r3, [r4, #48]	; 0x30
 80131c4:	bd10      	pop	{r4, pc}
 80131c6:	bf00      	nop
 80131c8:	08014165 	.word	0x08014165
 80131cc:	08014187 	.word	0x08014187
 80131d0:	080141bf 	.word	0x080141bf
 80131d4:	080141e3 	.word	0x080141e3

080131d8 <_cleanup_r>:
 80131d8:	4901      	ldr	r1, [pc, #4]	; (80131e0 <_cleanup_r+0x8>)
 80131da:	f000 b8af 	b.w	801333c <_fwalk_reent>
 80131de:	bf00      	nop
 80131e0:	08015ec1 	.word	0x08015ec1

080131e4 <__sfmoreglue>:
 80131e4:	b570      	push	{r4, r5, r6, lr}
 80131e6:	2268      	movs	r2, #104	; 0x68
 80131e8:	1e4d      	subs	r5, r1, #1
 80131ea:	4355      	muls	r5, r2
 80131ec:	460e      	mov	r6, r1
 80131ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80131f2:	f000 fa3f 	bl	8013674 <_malloc_r>
 80131f6:	4604      	mov	r4, r0
 80131f8:	b140      	cbz	r0, 801320c <__sfmoreglue+0x28>
 80131fa:	2100      	movs	r1, #0
 80131fc:	e9c0 1600 	strd	r1, r6, [r0]
 8013200:	300c      	adds	r0, #12
 8013202:	60a0      	str	r0, [r4, #8]
 8013204:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013208:	f000 f9aa 	bl	8013560 <memset>
 801320c:	4620      	mov	r0, r4
 801320e:	bd70      	pop	{r4, r5, r6, pc}

08013210 <__sfp_lock_acquire>:
 8013210:	4801      	ldr	r0, [pc, #4]	; (8013218 <__sfp_lock_acquire+0x8>)
 8013212:	f000 b984 	b.w	801351e <__retarget_lock_acquire_recursive>
 8013216:	bf00      	nop
 8013218:	200085d9 	.word	0x200085d9

0801321c <__sfp_lock_release>:
 801321c:	4801      	ldr	r0, [pc, #4]	; (8013224 <__sfp_lock_release+0x8>)
 801321e:	f000 b97f 	b.w	8013520 <__retarget_lock_release_recursive>
 8013222:	bf00      	nop
 8013224:	200085d9 	.word	0x200085d9

08013228 <__sinit_lock_acquire>:
 8013228:	4801      	ldr	r0, [pc, #4]	; (8013230 <__sinit_lock_acquire+0x8>)
 801322a:	f000 b978 	b.w	801351e <__retarget_lock_acquire_recursive>
 801322e:	bf00      	nop
 8013230:	200085da 	.word	0x200085da

08013234 <__sinit_lock_release>:
 8013234:	4801      	ldr	r0, [pc, #4]	; (801323c <__sinit_lock_release+0x8>)
 8013236:	f000 b973 	b.w	8013520 <__retarget_lock_release_recursive>
 801323a:	bf00      	nop
 801323c:	200085da 	.word	0x200085da

08013240 <__sinit>:
 8013240:	b510      	push	{r4, lr}
 8013242:	4604      	mov	r4, r0
 8013244:	f7ff fff0 	bl	8013228 <__sinit_lock_acquire>
 8013248:	69a3      	ldr	r3, [r4, #24]
 801324a:	b11b      	cbz	r3, 8013254 <__sinit+0x14>
 801324c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013250:	f7ff bff0 	b.w	8013234 <__sinit_lock_release>
 8013254:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013258:	6523      	str	r3, [r4, #80]	; 0x50
 801325a:	4b13      	ldr	r3, [pc, #76]	; (80132a8 <__sinit+0x68>)
 801325c:	4a13      	ldr	r2, [pc, #76]	; (80132ac <__sinit+0x6c>)
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	62a2      	str	r2, [r4, #40]	; 0x28
 8013262:	42a3      	cmp	r3, r4
 8013264:	bf04      	itt	eq
 8013266:	2301      	moveq	r3, #1
 8013268:	61a3      	streq	r3, [r4, #24]
 801326a:	4620      	mov	r0, r4
 801326c:	f000 f820 	bl	80132b0 <__sfp>
 8013270:	6060      	str	r0, [r4, #4]
 8013272:	4620      	mov	r0, r4
 8013274:	f000 f81c 	bl	80132b0 <__sfp>
 8013278:	60a0      	str	r0, [r4, #8]
 801327a:	4620      	mov	r0, r4
 801327c:	f000 f818 	bl	80132b0 <__sfp>
 8013280:	2200      	movs	r2, #0
 8013282:	60e0      	str	r0, [r4, #12]
 8013284:	2104      	movs	r1, #4
 8013286:	6860      	ldr	r0, [r4, #4]
 8013288:	f7ff ff82 	bl	8013190 <std>
 801328c:	68a0      	ldr	r0, [r4, #8]
 801328e:	2201      	movs	r2, #1
 8013290:	2109      	movs	r1, #9
 8013292:	f7ff ff7d 	bl	8013190 <std>
 8013296:	68e0      	ldr	r0, [r4, #12]
 8013298:	2202      	movs	r2, #2
 801329a:	2112      	movs	r1, #18
 801329c:	f7ff ff78 	bl	8013190 <std>
 80132a0:	2301      	movs	r3, #1
 80132a2:	61a3      	str	r3, [r4, #24]
 80132a4:	e7d2      	b.n	801324c <__sinit+0xc>
 80132a6:	bf00      	nop
 80132a8:	08019568 	.word	0x08019568
 80132ac:	080131d9 	.word	0x080131d9

080132b0 <__sfp>:
 80132b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132b2:	4607      	mov	r7, r0
 80132b4:	f7ff ffac 	bl	8013210 <__sfp_lock_acquire>
 80132b8:	4b1e      	ldr	r3, [pc, #120]	; (8013334 <__sfp+0x84>)
 80132ba:	681e      	ldr	r6, [r3, #0]
 80132bc:	69b3      	ldr	r3, [r6, #24]
 80132be:	b913      	cbnz	r3, 80132c6 <__sfp+0x16>
 80132c0:	4630      	mov	r0, r6
 80132c2:	f7ff ffbd 	bl	8013240 <__sinit>
 80132c6:	3648      	adds	r6, #72	; 0x48
 80132c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80132cc:	3b01      	subs	r3, #1
 80132ce:	d503      	bpl.n	80132d8 <__sfp+0x28>
 80132d0:	6833      	ldr	r3, [r6, #0]
 80132d2:	b30b      	cbz	r3, 8013318 <__sfp+0x68>
 80132d4:	6836      	ldr	r6, [r6, #0]
 80132d6:	e7f7      	b.n	80132c8 <__sfp+0x18>
 80132d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80132dc:	b9d5      	cbnz	r5, 8013314 <__sfp+0x64>
 80132de:	4b16      	ldr	r3, [pc, #88]	; (8013338 <__sfp+0x88>)
 80132e0:	60e3      	str	r3, [r4, #12]
 80132e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80132e6:	6665      	str	r5, [r4, #100]	; 0x64
 80132e8:	f000 f918 	bl	801351c <__retarget_lock_init_recursive>
 80132ec:	f7ff ff96 	bl	801321c <__sfp_lock_release>
 80132f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80132f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80132f8:	6025      	str	r5, [r4, #0]
 80132fa:	61a5      	str	r5, [r4, #24]
 80132fc:	2208      	movs	r2, #8
 80132fe:	4629      	mov	r1, r5
 8013300:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013304:	f000 f92c 	bl	8013560 <memset>
 8013308:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801330c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013310:	4620      	mov	r0, r4
 8013312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013314:	3468      	adds	r4, #104	; 0x68
 8013316:	e7d9      	b.n	80132cc <__sfp+0x1c>
 8013318:	2104      	movs	r1, #4
 801331a:	4638      	mov	r0, r7
 801331c:	f7ff ff62 	bl	80131e4 <__sfmoreglue>
 8013320:	4604      	mov	r4, r0
 8013322:	6030      	str	r0, [r6, #0]
 8013324:	2800      	cmp	r0, #0
 8013326:	d1d5      	bne.n	80132d4 <__sfp+0x24>
 8013328:	f7ff ff78 	bl	801321c <__sfp_lock_release>
 801332c:	230c      	movs	r3, #12
 801332e:	603b      	str	r3, [r7, #0]
 8013330:	e7ee      	b.n	8013310 <__sfp+0x60>
 8013332:	bf00      	nop
 8013334:	08019568 	.word	0x08019568
 8013338:	ffff0001 	.word	0xffff0001

0801333c <_fwalk_reent>:
 801333c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013340:	4606      	mov	r6, r0
 8013342:	4688      	mov	r8, r1
 8013344:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013348:	2700      	movs	r7, #0
 801334a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801334e:	f1b9 0901 	subs.w	r9, r9, #1
 8013352:	d505      	bpl.n	8013360 <_fwalk_reent+0x24>
 8013354:	6824      	ldr	r4, [r4, #0]
 8013356:	2c00      	cmp	r4, #0
 8013358:	d1f7      	bne.n	801334a <_fwalk_reent+0xe>
 801335a:	4638      	mov	r0, r7
 801335c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013360:	89ab      	ldrh	r3, [r5, #12]
 8013362:	2b01      	cmp	r3, #1
 8013364:	d907      	bls.n	8013376 <_fwalk_reent+0x3a>
 8013366:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801336a:	3301      	adds	r3, #1
 801336c:	d003      	beq.n	8013376 <_fwalk_reent+0x3a>
 801336e:	4629      	mov	r1, r5
 8013370:	4630      	mov	r0, r6
 8013372:	47c0      	blx	r8
 8013374:	4307      	orrs	r7, r0
 8013376:	3568      	adds	r5, #104	; 0x68
 8013378:	e7e9      	b.n	801334e <_fwalk_reent+0x12>
	...

0801337c <gmtime_r>:
 801337c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013380:	e9d0 6700 	ldrd	r6, r7, [r0]
 8013384:	460c      	mov	r4, r1
 8013386:	4a4f      	ldr	r2, [pc, #316]	; (80134c4 <gmtime_r+0x148>)
 8013388:	2300      	movs	r3, #0
 801338a:	4630      	mov	r0, r6
 801338c:	4639      	mov	r1, r7
 801338e:	f7ed fc7b 	bl	8000c88 <__aeabi_ldivmod>
 8013392:	4639      	mov	r1, r7
 8013394:	4605      	mov	r5, r0
 8013396:	4a4b      	ldr	r2, [pc, #300]	; (80134c4 <gmtime_r+0x148>)
 8013398:	4630      	mov	r0, r6
 801339a:	2300      	movs	r3, #0
 801339c:	f7ed fc74 	bl	8000c88 <__aeabi_ldivmod>
 80133a0:	2a00      	cmp	r2, #0
 80133a2:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80133a6:	bfb7      	itett	lt
 80133a8:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80133ac:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 80133b0:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 80133b4:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80133b8:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80133bc:	fbb2 f1f0 	udiv	r1, r2, r0
 80133c0:	fb00 2211 	mls	r2, r0, r1, r2
 80133c4:	203c      	movs	r0, #60	; 0x3c
 80133c6:	60a1      	str	r1, [r4, #8]
 80133c8:	fbb2 f1f0 	udiv	r1, r2, r0
 80133cc:	fb00 2211 	mls	r2, r0, r1, r2
 80133d0:	6061      	str	r1, [r4, #4]
 80133d2:	6022      	str	r2, [r4, #0]
 80133d4:	2107      	movs	r1, #7
 80133d6:	1cda      	adds	r2, r3, #3
 80133d8:	fb92 f1f1 	sdiv	r1, r2, r1
 80133dc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80133e0:	1a52      	subs	r2, r2, r1
 80133e2:	bf48      	it	mi
 80133e4:	3207      	addmi	r2, #7
 80133e6:	4d38      	ldr	r5, [pc, #224]	; (80134c8 <gmtime_r+0x14c>)
 80133e8:	4838      	ldr	r0, [pc, #224]	; (80134cc <gmtime_r+0x150>)
 80133ea:	61a2      	str	r2, [r4, #24]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	bfb7      	itett	lt
 80133f0:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 80133f4:	fb93 f5f5 	sdivge	r5, r3, r5
 80133f8:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 80133fc:	fb92 f5f5 	sdivlt	r5, r2, r5
 8013400:	fb00 3005 	mla	r0, r0, r5, r3
 8013404:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8013408:	fbb0 f2f2 	udiv	r2, r0, r2
 801340c:	4402      	add	r2, r0
 801340e:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8013412:	fbb0 f1f3 	udiv	r1, r0, r3
 8013416:	1a52      	subs	r2, r2, r1
 8013418:	f240 1c6d 	movw	ip, #365	; 0x16d
 801341c:	492c      	ldr	r1, [pc, #176]	; (80134d0 <gmtime_r+0x154>)
 801341e:	fbb0 f1f1 	udiv	r1, r0, r1
 8013422:	2764      	movs	r7, #100	; 0x64
 8013424:	1a52      	subs	r2, r2, r1
 8013426:	fbb2 f1fc 	udiv	r1, r2, ip
 801342a:	fbb2 f3f3 	udiv	r3, r2, r3
 801342e:	fbb1 f6f7 	udiv	r6, r1, r7
 8013432:	1af3      	subs	r3, r6, r3
 8013434:	4403      	add	r3, r0
 8013436:	fb0c 3311 	mls	r3, ip, r1, r3
 801343a:	2299      	movs	r2, #153	; 0x99
 801343c:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8013440:	f10e 0e02 	add.w	lr, lr, #2
 8013444:	f103 0c01 	add.w	ip, r3, #1
 8013448:	fbbe f0f2 	udiv	r0, lr, r2
 801344c:	4342      	muls	r2, r0
 801344e:	3202      	adds	r2, #2
 8013450:	f04f 0805 	mov.w	r8, #5
 8013454:	fbb2 f2f8 	udiv	r2, r2, r8
 8013458:	ebac 0c02 	sub.w	ip, ip, r2
 801345c:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8013460:	4596      	cmp	lr, r2
 8013462:	bf94      	ite	ls
 8013464:	2202      	movls	r2, #2
 8013466:	f06f 0209 	mvnhi.w	r2, #9
 801346a:	4410      	add	r0, r2
 801346c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8013470:	fb02 1505 	mla	r5, r2, r5, r1
 8013474:	2801      	cmp	r0, #1
 8013476:	bf98      	it	ls
 8013478:	3501      	addls	r5, #1
 801347a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801347e:	d30d      	bcc.n	801349c <gmtime_r+0x120>
 8013480:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8013484:	61e3      	str	r3, [r4, #28]
 8013486:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 801348a:	2300      	movs	r3, #0
 801348c:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8013490:	f8c4 c00c 	str.w	ip, [r4, #12]
 8013494:	6223      	str	r3, [r4, #32]
 8013496:	4620      	mov	r0, r4
 8013498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801349c:	078a      	lsls	r2, r1, #30
 801349e:	d102      	bne.n	80134a6 <gmtime_r+0x12a>
 80134a0:	fb07 1616 	mls	r6, r7, r6, r1
 80134a4:	b95e      	cbnz	r6, 80134be <gmtime_r+0x142>
 80134a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80134aa:	fbb1 f6f2 	udiv	r6, r1, r2
 80134ae:	fb02 1216 	mls	r2, r2, r6, r1
 80134b2:	fab2 f282 	clz	r2, r2
 80134b6:	0952      	lsrs	r2, r2, #5
 80134b8:	333b      	adds	r3, #59	; 0x3b
 80134ba:	4413      	add	r3, r2
 80134bc:	e7e2      	b.n	8013484 <gmtime_r+0x108>
 80134be:	2201      	movs	r2, #1
 80134c0:	e7fa      	b.n	80134b8 <gmtime_r+0x13c>
 80134c2:	bf00      	nop
 80134c4:	00015180 	.word	0x00015180
 80134c8:	00023ab1 	.word	0x00023ab1
 80134cc:	fffdc54f 	.word	0xfffdc54f
 80134d0:	00023ab0 	.word	0x00023ab0

080134d4 <__libc_init_array>:
 80134d4:	b570      	push	{r4, r5, r6, lr}
 80134d6:	4d0d      	ldr	r5, [pc, #52]	; (801350c <__libc_init_array+0x38>)
 80134d8:	4c0d      	ldr	r4, [pc, #52]	; (8013510 <__libc_init_array+0x3c>)
 80134da:	1b64      	subs	r4, r4, r5
 80134dc:	10a4      	asrs	r4, r4, #2
 80134de:	2600      	movs	r6, #0
 80134e0:	42a6      	cmp	r6, r4
 80134e2:	d109      	bne.n	80134f8 <__libc_init_array+0x24>
 80134e4:	4d0b      	ldr	r5, [pc, #44]	; (8013514 <__libc_init_array+0x40>)
 80134e6:	4c0c      	ldr	r4, [pc, #48]	; (8013518 <__libc_init_array+0x44>)
 80134e8:	f004 fa7c 	bl	80179e4 <_init>
 80134ec:	1b64      	subs	r4, r4, r5
 80134ee:	10a4      	asrs	r4, r4, #2
 80134f0:	2600      	movs	r6, #0
 80134f2:	42a6      	cmp	r6, r4
 80134f4:	d105      	bne.n	8013502 <__libc_init_array+0x2e>
 80134f6:	bd70      	pop	{r4, r5, r6, pc}
 80134f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80134fc:	4798      	blx	r3
 80134fe:	3601      	adds	r6, #1
 8013500:	e7ee      	b.n	80134e0 <__libc_init_array+0xc>
 8013502:	f855 3b04 	ldr.w	r3, [r5], #4
 8013506:	4798      	blx	r3
 8013508:	3601      	adds	r6, #1
 801350a:	e7f2      	b.n	80134f2 <__libc_init_array+0x1e>
 801350c:	080198ac 	.word	0x080198ac
 8013510:	080198ac 	.word	0x080198ac
 8013514:	080198ac 	.word	0x080198ac
 8013518:	080198b0 	.word	0x080198b0

0801351c <__retarget_lock_init_recursive>:
 801351c:	4770      	bx	lr

0801351e <__retarget_lock_acquire_recursive>:
 801351e:	4770      	bx	lr

08013520 <__retarget_lock_release_recursive>:
 8013520:	4770      	bx	lr
	...

08013524 <malloc>:
 8013524:	4b02      	ldr	r3, [pc, #8]	; (8013530 <malloc+0xc>)
 8013526:	4601      	mov	r1, r0
 8013528:	6818      	ldr	r0, [r3, #0]
 801352a:	f000 b8a3 	b.w	8013674 <_malloc_r>
 801352e:	bf00      	nop
 8013530:	20000188 	.word	0x20000188

08013534 <free>:
 8013534:	4b02      	ldr	r3, [pc, #8]	; (8013540 <free+0xc>)
 8013536:	4601      	mov	r1, r0
 8013538:	6818      	ldr	r0, [r3, #0]
 801353a:	f000 b82f 	b.w	801359c <_free_r>
 801353e:	bf00      	nop
 8013540:	20000188 	.word	0x20000188

08013544 <memcpy>:
 8013544:	440a      	add	r2, r1
 8013546:	4291      	cmp	r1, r2
 8013548:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801354c:	d100      	bne.n	8013550 <memcpy+0xc>
 801354e:	4770      	bx	lr
 8013550:	b510      	push	{r4, lr}
 8013552:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013556:	f803 4f01 	strb.w	r4, [r3, #1]!
 801355a:	4291      	cmp	r1, r2
 801355c:	d1f9      	bne.n	8013552 <memcpy+0xe>
 801355e:	bd10      	pop	{r4, pc}

08013560 <memset>:
 8013560:	4402      	add	r2, r0
 8013562:	4603      	mov	r3, r0
 8013564:	4293      	cmp	r3, r2
 8013566:	d100      	bne.n	801356a <memset+0xa>
 8013568:	4770      	bx	lr
 801356a:	f803 1b01 	strb.w	r1, [r3], #1
 801356e:	e7f9      	b.n	8013564 <memset+0x4>

08013570 <_calloc_r>:
 8013570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013572:	fba1 2402 	umull	r2, r4, r1, r2
 8013576:	b94c      	cbnz	r4, 801358c <_calloc_r+0x1c>
 8013578:	4611      	mov	r1, r2
 801357a:	9201      	str	r2, [sp, #4]
 801357c:	f000 f87a 	bl	8013674 <_malloc_r>
 8013580:	9a01      	ldr	r2, [sp, #4]
 8013582:	4605      	mov	r5, r0
 8013584:	b930      	cbnz	r0, 8013594 <_calloc_r+0x24>
 8013586:	4628      	mov	r0, r5
 8013588:	b003      	add	sp, #12
 801358a:	bd30      	pop	{r4, r5, pc}
 801358c:	220c      	movs	r2, #12
 801358e:	6002      	str	r2, [r0, #0]
 8013590:	2500      	movs	r5, #0
 8013592:	e7f8      	b.n	8013586 <_calloc_r+0x16>
 8013594:	4621      	mov	r1, r4
 8013596:	f7ff ffe3 	bl	8013560 <memset>
 801359a:	e7f4      	b.n	8013586 <_calloc_r+0x16>

0801359c <_free_r>:
 801359c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801359e:	2900      	cmp	r1, #0
 80135a0:	d044      	beq.n	801362c <_free_r+0x90>
 80135a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135a6:	9001      	str	r0, [sp, #4]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	f1a1 0404 	sub.w	r4, r1, #4
 80135ae:	bfb8      	it	lt
 80135b0:	18e4      	addlt	r4, r4, r3
 80135b2:	f003 f859 	bl	8016668 <__malloc_lock>
 80135b6:	4a1e      	ldr	r2, [pc, #120]	; (8013630 <_free_r+0x94>)
 80135b8:	9801      	ldr	r0, [sp, #4]
 80135ba:	6813      	ldr	r3, [r2, #0]
 80135bc:	b933      	cbnz	r3, 80135cc <_free_r+0x30>
 80135be:	6063      	str	r3, [r4, #4]
 80135c0:	6014      	str	r4, [r2, #0]
 80135c2:	b003      	add	sp, #12
 80135c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80135c8:	f003 b854 	b.w	8016674 <__malloc_unlock>
 80135cc:	42a3      	cmp	r3, r4
 80135ce:	d908      	bls.n	80135e2 <_free_r+0x46>
 80135d0:	6825      	ldr	r5, [r4, #0]
 80135d2:	1961      	adds	r1, r4, r5
 80135d4:	428b      	cmp	r3, r1
 80135d6:	bf01      	itttt	eq
 80135d8:	6819      	ldreq	r1, [r3, #0]
 80135da:	685b      	ldreq	r3, [r3, #4]
 80135dc:	1949      	addeq	r1, r1, r5
 80135de:	6021      	streq	r1, [r4, #0]
 80135e0:	e7ed      	b.n	80135be <_free_r+0x22>
 80135e2:	461a      	mov	r2, r3
 80135e4:	685b      	ldr	r3, [r3, #4]
 80135e6:	b10b      	cbz	r3, 80135ec <_free_r+0x50>
 80135e8:	42a3      	cmp	r3, r4
 80135ea:	d9fa      	bls.n	80135e2 <_free_r+0x46>
 80135ec:	6811      	ldr	r1, [r2, #0]
 80135ee:	1855      	adds	r5, r2, r1
 80135f0:	42a5      	cmp	r5, r4
 80135f2:	d10b      	bne.n	801360c <_free_r+0x70>
 80135f4:	6824      	ldr	r4, [r4, #0]
 80135f6:	4421      	add	r1, r4
 80135f8:	1854      	adds	r4, r2, r1
 80135fa:	42a3      	cmp	r3, r4
 80135fc:	6011      	str	r1, [r2, #0]
 80135fe:	d1e0      	bne.n	80135c2 <_free_r+0x26>
 8013600:	681c      	ldr	r4, [r3, #0]
 8013602:	685b      	ldr	r3, [r3, #4]
 8013604:	6053      	str	r3, [r2, #4]
 8013606:	4421      	add	r1, r4
 8013608:	6011      	str	r1, [r2, #0]
 801360a:	e7da      	b.n	80135c2 <_free_r+0x26>
 801360c:	d902      	bls.n	8013614 <_free_r+0x78>
 801360e:	230c      	movs	r3, #12
 8013610:	6003      	str	r3, [r0, #0]
 8013612:	e7d6      	b.n	80135c2 <_free_r+0x26>
 8013614:	6825      	ldr	r5, [r4, #0]
 8013616:	1961      	adds	r1, r4, r5
 8013618:	428b      	cmp	r3, r1
 801361a:	bf04      	itt	eq
 801361c:	6819      	ldreq	r1, [r3, #0]
 801361e:	685b      	ldreq	r3, [r3, #4]
 8013620:	6063      	str	r3, [r4, #4]
 8013622:	bf04      	itt	eq
 8013624:	1949      	addeq	r1, r1, r5
 8013626:	6021      	streq	r1, [r4, #0]
 8013628:	6054      	str	r4, [r2, #4]
 801362a:	e7ca      	b.n	80135c2 <_free_r+0x26>
 801362c:	b003      	add	sp, #12
 801362e:	bd30      	pop	{r4, r5, pc}
 8013630:	200085dc 	.word	0x200085dc

08013634 <sbrk_aligned>:
 8013634:	b570      	push	{r4, r5, r6, lr}
 8013636:	4e0e      	ldr	r6, [pc, #56]	; (8013670 <sbrk_aligned+0x3c>)
 8013638:	460c      	mov	r4, r1
 801363a:	6831      	ldr	r1, [r6, #0]
 801363c:	4605      	mov	r5, r0
 801363e:	b911      	cbnz	r1, 8013646 <sbrk_aligned+0x12>
 8013640:	f000 fd60 	bl	8014104 <_sbrk_r>
 8013644:	6030      	str	r0, [r6, #0]
 8013646:	4621      	mov	r1, r4
 8013648:	4628      	mov	r0, r5
 801364a:	f000 fd5b 	bl	8014104 <_sbrk_r>
 801364e:	1c43      	adds	r3, r0, #1
 8013650:	d00a      	beq.n	8013668 <sbrk_aligned+0x34>
 8013652:	1cc4      	adds	r4, r0, #3
 8013654:	f024 0403 	bic.w	r4, r4, #3
 8013658:	42a0      	cmp	r0, r4
 801365a:	d007      	beq.n	801366c <sbrk_aligned+0x38>
 801365c:	1a21      	subs	r1, r4, r0
 801365e:	4628      	mov	r0, r5
 8013660:	f000 fd50 	bl	8014104 <_sbrk_r>
 8013664:	3001      	adds	r0, #1
 8013666:	d101      	bne.n	801366c <sbrk_aligned+0x38>
 8013668:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801366c:	4620      	mov	r0, r4
 801366e:	bd70      	pop	{r4, r5, r6, pc}
 8013670:	200085e0 	.word	0x200085e0

08013674 <_malloc_r>:
 8013674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013678:	1ccd      	adds	r5, r1, #3
 801367a:	f025 0503 	bic.w	r5, r5, #3
 801367e:	3508      	adds	r5, #8
 8013680:	2d0c      	cmp	r5, #12
 8013682:	bf38      	it	cc
 8013684:	250c      	movcc	r5, #12
 8013686:	2d00      	cmp	r5, #0
 8013688:	4607      	mov	r7, r0
 801368a:	db01      	blt.n	8013690 <_malloc_r+0x1c>
 801368c:	42a9      	cmp	r1, r5
 801368e:	d905      	bls.n	801369c <_malloc_r+0x28>
 8013690:	230c      	movs	r3, #12
 8013692:	603b      	str	r3, [r7, #0]
 8013694:	2600      	movs	r6, #0
 8013696:	4630      	mov	r0, r6
 8013698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801369c:	4e2e      	ldr	r6, [pc, #184]	; (8013758 <_malloc_r+0xe4>)
 801369e:	f002 ffe3 	bl	8016668 <__malloc_lock>
 80136a2:	6833      	ldr	r3, [r6, #0]
 80136a4:	461c      	mov	r4, r3
 80136a6:	bb34      	cbnz	r4, 80136f6 <_malloc_r+0x82>
 80136a8:	4629      	mov	r1, r5
 80136aa:	4638      	mov	r0, r7
 80136ac:	f7ff ffc2 	bl	8013634 <sbrk_aligned>
 80136b0:	1c43      	adds	r3, r0, #1
 80136b2:	4604      	mov	r4, r0
 80136b4:	d14d      	bne.n	8013752 <_malloc_r+0xde>
 80136b6:	6834      	ldr	r4, [r6, #0]
 80136b8:	4626      	mov	r6, r4
 80136ba:	2e00      	cmp	r6, #0
 80136bc:	d140      	bne.n	8013740 <_malloc_r+0xcc>
 80136be:	6823      	ldr	r3, [r4, #0]
 80136c0:	4631      	mov	r1, r6
 80136c2:	4638      	mov	r0, r7
 80136c4:	eb04 0803 	add.w	r8, r4, r3
 80136c8:	f000 fd1c 	bl	8014104 <_sbrk_r>
 80136cc:	4580      	cmp	r8, r0
 80136ce:	d13a      	bne.n	8013746 <_malloc_r+0xd2>
 80136d0:	6821      	ldr	r1, [r4, #0]
 80136d2:	3503      	adds	r5, #3
 80136d4:	1a6d      	subs	r5, r5, r1
 80136d6:	f025 0503 	bic.w	r5, r5, #3
 80136da:	3508      	adds	r5, #8
 80136dc:	2d0c      	cmp	r5, #12
 80136de:	bf38      	it	cc
 80136e0:	250c      	movcc	r5, #12
 80136e2:	4629      	mov	r1, r5
 80136e4:	4638      	mov	r0, r7
 80136e6:	f7ff ffa5 	bl	8013634 <sbrk_aligned>
 80136ea:	3001      	adds	r0, #1
 80136ec:	d02b      	beq.n	8013746 <_malloc_r+0xd2>
 80136ee:	6823      	ldr	r3, [r4, #0]
 80136f0:	442b      	add	r3, r5
 80136f2:	6023      	str	r3, [r4, #0]
 80136f4:	e00e      	b.n	8013714 <_malloc_r+0xa0>
 80136f6:	6822      	ldr	r2, [r4, #0]
 80136f8:	1b52      	subs	r2, r2, r5
 80136fa:	d41e      	bmi.n	801373a <_malloc_r+0xc6>
 80136fc:	2a0b      	cmp	r2, #11
 80136fe:	d916      	bls.n	801372e <_malloc_r+0xba>
 8013700:	1961      	adds	r1, r4, r5
 8013702:	42a3      	cmp	r3, r4
 8013704:	6025      	str	r5, [r4, #0]
 8013706:	bf18      	it	ne
 8013708:	6059      	strne	r1, [r3, #4]
 801370a:	6863      	ldr	r3, [r4, #4]
 801370c:	bf08      	it	eq
 801370e:	6031      	streq	r1, [r6, #0]
 8013710:	5162      	str	r2, [r4, r5]
 8013712:	604b      	str	r3, [r1, #4]
 8013714:	4638      	mov	r0, r7
 8013716:	f104 060b 	add.w	r6, r4, #11
 801371a:	f002 ffab 	bl	8016674 <__malloc_unlock>
 801371e:	f026 0607 	bic.w	r6, r6, #7
 8013722:	1d23      	adds	r3, r4, #4
 8013724:	1af2      	subs	r2, r6, r3
 8013726:	d0b6      	beq.n	8013696 <_malloc_r+0x22>
 8013728:	1b9b      	subs	r3, r3, r6
 801372a:	50a3      	str	r3, [r4, r2]
 801372c:	e7b3      	b.n	8013696 <_malloc_r+0x22>
 801372e:	6862      	ldr	r2, [r4, #4]
 8013730:	42a3      	cmp	r3, r4
 8013732:	bf0c      	ite	eq
 8013734:	6032      	streq	r2, [r6, #0]
 8013736:	605a      	strne	r2, [r3, #4]
 8013738:	e7ec      	b.n	8013714 <_malloc_r+0xa0>
 801373a:	4623      	mov	r3, r4
 801373c:	6864      	ldr	r4, [r4, #4]
 801373e:	e7b2      	b.n	80136a6 <_malloc_r+0x32>
 8013740:	4634      	mov	r4, r6
 8013742:	6876      	ldr	r6, [r6, #4]
 8013744:	e7b9      	b.n	80136ba <_malloc_r+0x46>
 8013746:	230c      	movs	r3, #12
 8013748:	603b      	str	r3, [r7, #0]
 801374a:	4638      	mov	r0, r7
 801374c:	f002 ff92 	bl	8016674 <__malloc_unlock>
 8013750:	e7a1      	b.n	8013696 <_malloc_r+0x22>
 8013752:	6025      	str	r5, [r4, #0]
 8013754:	e7de      	b.n	8013714 <_malloc_r+0xa0>
 8013756:	bf00      	nop
 8013758:	200085dc 	.word	0x200085dc

0801375c <__cvt>:
 801375c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013760:	ec55 4b10 	vmov	r4, r5, d0
 8013764:	2d00      	cmp	r5, #0
 8013766:	460e      	mov	r6, r1
 8013768:	4619      	mov	r1, r3
 801376a:	462b      	mov	r3, r5
 801376c:	bfbb      	ittet	lt
 801376e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013772:	461d      	movlt	r5, r3
 8013774:	2300      	movge	r3, #0
 8013776:	232d      	movlt	r3, #45	; 0x2d
 8013778:	700b      	strb	r3, [r1, #0]
 801377a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801377c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013780:	4691      	mov	r9, r2
 8013782:	f023 0820 	bic.w	r8, r3, #32
 8013786:	bfbc      	itt	lt
 8013788:	4622      	movlt	r2, r4
 801378a:	4614      	movlt	r4, r2
 801378c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013790:	d005      	beq.n	801379e <__cvt+0x42>
 8013792:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013796:	d100      	bne.n	801379a <__cvt+0x3e>
 8013798:	3601      	adds	r6, #1
 801379a:	2102      	movs	r1, #2
 801379c:	e000      	b.n	80137a0 <__cvt+0x44>
 801379e:	2103      	movs	r1, #3
 80137a0:	ab03      	add	r3, sp, #12
 80137a2:	9301      	str	r3, [sp, #4]
 80137a4:	ab02      	add	r3, sp, #8
 80137a6:	9300      	str	r3, [sp, #0]
 80137a8:	ec45 4b10 	vmov	d0, r4, r5
 80137ac:	4653      	mov	r3, sl
 80137ae:	4632      	mov	r2, r6
 80137b0:	f001 fd12 	bl	80151d8 <_dtoa_r>
 80137b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80137b8:	4607      	mov	r7, r0
 80137ba:	d102      	bne.n	80137c2 <__cvt+0x66>
 80137bc:	f019 0f01 	tst.w	r9, #1
 80137c0:	d022      	beq.n	8013808 <__cvt+0xac>
 80137c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80137c6:	eb07 0906 	add.w	r9, r7, r6
 80137ca:	d110      	bne.n	80137ee <__cvt+0x92>
 80137cc:	783b      	ldrb	r3, [r7, #0]
 80137ce:	2b30      	cmp	r3, #48	; 0x30
 80137d0:	d10a      	bne.n	80137e8 <__cvt+0x8c>
 80137d2:	2200      	movs	r2, #0
 80137d4:	2300      	movs	r3, #0
 80137d6:	4620      	mov	r0, r4
 80137d8:	4629      	mov	r1, r5
 80137da:	f7ed f975 	bl	8000ac8 <__aeabi_dcmpeq>
 80137de:	b918      	cbnz	r0, 80137e8 <__cvt+0x8c>
 80137e0:	f1c6 0601 	rsb	r6, r6, #1
 80137e4:	f8ca 6000 	str.w	r6, [sl]
 80137e8:	f8da 3000 	ldr.w	r3, [sl]
 80137ec:	4499      	add	r9, r3
 80137ee:	2200      	movs	r2, #0
 80137f0:	2300      	movs	r3, #0
 80137f2:	4620      	mov	r0, r4
 80137f4:	4629      	mov	r1, r5
 80137f6:	f7ed f967 	bl	8000ac8 <__aeabi_dcmpeq>
 80137fa:	b108      	cbz	r0, 8013800 <__cvt+0xa4>
 80137fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8013800:	2230      	movs	r2, #48	; 0x30
 8013802:	9b03      	ldr	r3, [sp, #12]
 8013804:	454b      	cmp	r3, r9
 8013806:	d307      	bcc.n	8013818 <__cvt+0xbc>
 8013808:	9b03      	ldr	r3, [sp, #12]
 801380a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801380c:	1bdb      	subs	r3, r3, r7
 801380e:	4638      	mov	r0, r7
 8013810:	6013      	str	r3, [r2, #0]
 8013812:	b004      	add	sp, #16
 8013814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013818:	1c59      	adds	r1, r3, #1
 801381a:	9103      	str	r1, [sp, #12]
 801381c:	701a      	strb	r2, [r3, #0]
 801381e:	e7f0      	b.n	8013802 <__cvt+0xa6>

08013820 <__exponent>:
 8013820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013822:	4603      	mov	r3, r0
 8013824:	2900      	cmp	r1, #0
 8013826:	bfb8      	it	lt
 8013828:	4249      	neglt	r1, r1
 801382a:	f803 2b02 	strb.w	r2, [r3], #2
 801382e:	bfb4      	ite	lt
 8013830:	222d      	movlt	r2, #45	; 0x2d
 8013832:	222b      	movge	r2, #43	; 0x2b
 8013834:	2909      	cmp	r1, #9
 8013836:	7042      	strb	r2, [r0, #1]
 8013838:	dd2a      	ble.n	8013890 <__exponent+0x70>
 801383a:	f10d 0407 	add.w	r4, sp, #7
 801383e:	46a4      	mov	ip, r4
 8013840:	270a      	movs	r7, #10
 8013842:	46a6      	mov	lr, r4
 8013844:	460a      	mov	r2, r1
 8013846:	fb91 f6f7 	sdiv	r6, r1, r7
 801384a:	fb07 1516 	mls	r5, r7, r6, r1
 801384e:	3530      	adds	r5, #48	; 0x30
 8013850:	2a63      	cmp	r2, #99	; 0x63
 8013852:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8013856:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801385a:	4631      	mov	r1, r6
 801385c:	dcf1      	bgt.n	8013842 <__exponent+0x22>
 801385e:	3130      	adds	r1, #48	; 0x30
 8013860:	f1ae 0502 	sub.w	r5, lr, #2
 8013864:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013868:	1c44      	adds	r4, r0, #1
 801386a:	4629      	mov	r1, r5
 801386c:	4561      	cmp	r1, ip
 801386e:	d30a      	bcc.n	8013886 <__exponent+0x66>
 8013870:	f10d 0209 	add.w	r2, sp, #9
 8013874:	eba2 020e 	sub.w	r2, r2, lr
 8013878:	4565      	cmp	r5, ip
 801387a:	bf88      	it	hi
 801387c:	2200      	movhi	r2, #0
 801387e:	4413      	add	r3, r2
 8013880:	1a18      	subs	r0, r3, r0
 8013882:	b003      	add	sp, #12
 8013884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013886:	f811 2b01 	ldrb.w	r2, [r1], #1
 801388a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801388e:	e7ed      	b.n	801386c <__exponent+0x4c>
 8013890:	2330      	movs	r3, #48	; 0x30
 8013892:	3130      	adds	r1, #48	; 0x30
 8013894:	7083      	strb	r3, [r0, #2]
 8013896:	70c1      	strb	r1, [r0, #3]
 8013898:	1d03      	adds	r3, r0, #4
 801389a:	e7f1      	b.n	8013880 <__exponent+0x60>

0801389c <_printf_float>:
 801389c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138a0:	ed2d 8b02 	vpush	{d8}
 80138a4:	b08d      	sub	sp, #52	; 0x34
 80138a6:	460c      	mov	r4, r1
 80138a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80138ac:	4616      	mov	r6, r2
 80138ae:	461f      	mov	r7, r3
 80138b0:	4605      	mov	r5, r0
 80138b2:	f002 feb1 	bl	8016618 <_localeconv_r>
 80138b6:	f8d0 a000 	ldr.w	sl, [r0]
 80138ba:	4650      	mov	r0, sl
 80138bc:	f7ec fc88 	bl	80001d0 <strlen>
 80138c0:	2300      	movs	r3, #0
 80138c2:	930a      	str	r3, [sp, #40]	; 0x28
 80138c4:	6823      	ldr	r3, [r4, #0]
 80138c6:	9305      	str	r3, [sp, #20]
 80138c8:	f8d8 3000 	ldr.w	r3, [r8]
 80138cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80138d0:	3307      	adds	r3, #7
 80138d2:	f023 0307 	bic.w	r3, r3, #7
 80138d6:	f103 0208 	add.w	r2, r3, #8
 80138da:	f8c8 2000 	str.w	r2, [r8]
 80138de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80138e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80138ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80138ee:	9307      	str	r3, [sp, #28]
 80138f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80138f4:	ee08 0a10 	vmov	s16, r0
 80138f8:	4b9f      	ldr	r3, [pc, #636]	; (8013b78 <_printf_float+0x2dc>)
 80138fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80138fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013902:	f7ed f913 	bl	8000b2c <__aeabi_dcmpun>
 8013906:	bb88      	cbnz	r0, 801396c <_printf_float+0xd0>
 8013908:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801390c:	4b9a      	ldr	r3, [pc, #616]	; (8013b78 <_printf_float+0x2dc>)
 801390e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013912:	f7ed f8ed 	bl	8000af0 <__aeabi_dcmple>
 8013916:	bb48      	cbnz	r0, 801396c <_printf_float+0xd0>
 8013918:	2200      	movs	r2, #0
 801391a:	2300      	movs	r3, #0
 801391c:	4640      	mov	r0, r8
 801391e:	4649      	mov	r1, r9
 8013920:	f7ed f8dc 	bl	8000adc <__aeabi_dcmplt>
 8013924:	b110      	cbz	r0, 801392c <_printf_float+0x90>
 8013926:	232d      	movs	r3, #45	; 0x2d
 8013928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801392c:	4b93      	ldr	r3, [pc, #588]	; (8013b7c <_printf_float+0x2e0>)
 801392e:	4894      	ldr	r0, [pc, #592]	; (8013b80 <_printf_float+0x2e4>)
 8013930:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013934:	bf94      	ite	ls
 8013936:	4698      	movls	r8, r3
 8013938:	4680      	movhi	r8, r0
 801393a:	2303      	movs	r3, #3
 801393c:	6123      	str	r3, [r4, #16]
 801393e:	9b05      	ldr	r3, [sp, #20]
 8013940:	f023 0204 	bic.w	r2, r3, #4
 8013944:	6022      	str	r2, [r4, #0]
 8013946:	f04f 0900 	mov.w	r9, #0
 801394a:	9700      	str	r7, [sp, #0]
 801394c:	4633      	mov	r3, r6
 801394e:	aa0b      	add	r2, sp, #44	; 0x2c
 8013950:	4621      	mov	r1, r4
 8013952:	4628      	mov	r0, r5
 8013954:	f000 f9d8 	bl	8013d08 <_printf_common>
 8013958:	3001      	adds	r0, #1
 801395a:	f040 8090 	bne.w	8013a7e <_printf_float+0x1e2>
 801395e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013962:	b00d      	add	sp, #52	; 0x34
 8013964:	ecbd 8b02 	vpop	{d8}
 8013968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801396c:	4642      	mov	r2, r8
 801396e:	464b      	mov	r3, r9
 8013970:	4640      	mov	r0, r8
 8013972:	4649      	mov	r1, r9
 8013974:	f7ed f8da 	bl	8000b2c <__aeabi_dcmpun>
 8013978:	b140      	cbz	r0, 801398c <_printf_float+0xf0>
 801397a:	464b      	mov	r3, r9
 801397c:	2b00      	cmp	r3, #0
 801397e:	bfbc      	itt	lt
 8013980:	232d      	movlt	r3, #45	; 0x2d
 8013982:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013986:	487f      	ldr	r0, [pc, #508]	; (8013b84 <_printf_float+0x2e8>)
 8013988:	4b7f      	ldr	r3, [pc, #508]	; (8013b88 <_printf_float+0x2ec>)
 801398a:	e7d1      	b.n	8013930 <_printf_float+0x94>
 801398c:	6863      	ldr	r3, [r4, #4]
 801398e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013992:	9206      	str	r2, [sp, #24]
 8013994:	1c5a      	adds	r2, r3, #1
 8013996:	d13f      	bne.n	8013a18 <_printf_float+0x17c>
 8013998:	2306      	movs	r3, #6
 801399a:	6063      	str	r3, [r4, #4]
 801399c:	9b05      	ldr	r3, [sp, #20]
 801399e:	6861      	ldr	r1, [r4, #4]
 80139a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80139a4:	2300      	movs	r3, #0
 80139a6:	9303      	str	r3, [sp, #12]
 80139a8:	ab0a      	add	r3, sp, #40	; 0x28
 80139aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80139ae:	ab09      	add	r3, sp, #36	; 0x24
 80139b0:	ec49 8b10 	vmov	d0, r8, r9
 80139b4:	9300      	str	r3, [sp, #0]
 80139b6:	6022      	str	r2, [r4, #0]
 80139b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80139bc:	4628      	mov	r0, r5
 80139be:	f7ff fecd 	bl	801375c <__cvt>
 80139c2:	9b06      	ldr	r3, [sp, #24]
 80139c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80139c6:	2b47      	cmp	r3, #71	; 0x47
 80139c8:	4680      	mov	r8, r0
 80139ca:	d108      	bne.n	80139de <_printf_float+0x142>
 80139cc:	1cc8      	adds	r0, r1, #3
 80139ce:	db02      	blt.n	80139d6 <_printf_float+0x13a>
 80139d0:	6863      	ldr	r3, [r4, #4]
 80139d2:	4299      	cmp	r1, r3
 80139d4:	dd41      	ble.n	8013a5a <_printf_float+0x1be>
 80139d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80139da:	fa5f fb8b 	uxtb.w	fp, fp
 80139de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80139e2:	d820      	bhi.n	8013a26 <_printf_float+0x18a>
 80139e4:	3901      	subs	r1, #1
 80139e6:	465a      	mov	r2, fp
 80139e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80139ec:	9109      	str	r1, [sp, #36]	; 0x24
 80139ee:	f7ff ff17 	bl	8013820 <__exponent>
 80139f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80139f4:	1813      	adds	r3, r2, r0
 80139f6:	2a01      	cmp	r2, #1
 80139f8:	4681      	mov	r9, r0
 80139fa:	6123      	str	r3, [r4, #16]
 80139fc:	dc02      	bgt.n	8013a04 <_printf_float+0x168>
 80139fe:	6822      	ldr	r2, [r4, #0]
 8013a00:	07d2      	lsls	r2, r2, #31
 8013a02:	d501      	bpl.n	8013a08 <_printf_float+0x16c>
 8013a04:	3301      	adds	r3, #1
 8013a06:	6123      	str	r3, [r4, #16]
 8013a08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d09c      	beq.n	801394a <_printf_float+0xae>
 8013a10:	232d      	movs	r3, #45	; 0x2d
 8013a12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a16:	e798      	b.n	801394a <_printf_float+0xae>
 8013a18:	9a06      	ldr	r2, [sp, #24]
 8013a1a:	2a47      	cmp	r2, #71	; 0x47
 8013a1c:	d1be      	bne.n	801399c <_printf_float+0x100>
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d1bc      	bne.n	801399c <_printf_float+0x100>
 8013a22:	2301      	movs	r3, #1
 8013a24:	e7b9      	b.n	801399a <_printf_float+0xfe>
 8013a26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013a2a:	d118      	bne.n	8013a5e <_printf_float+0x1c2>
 8013a2c:	2900      	cmp	r1, #0
 8013a2e:	6863      	ldr	r3, [r4, #4]
 8013a30:	dd0b      	ble.n	8013a4a <_printf_float+0x1ae>
 8013a32:	6121      	str	r1, [r4, #16]
 8013a34:	b913      	cbnz	r3, 8013a3c <_printf_float+0x1a0>
 8013a36:	6822      	ldr	r2, [r4, #0]
 8013a38:	07d0      	lsls	r0, r2, #31
 8013a3a:	d502      	bpl.n	8013a42 <_printf_float+0x1a6>
 8013a3c:	3301      	adds	r3, #1
 8013a3e:	440b      	add	r3, r1
 8013a40:	6123      	str	r3, [r4, #16]
 8013a42:	65a1      	str	r1, [r4, #88]	; 0x58
 8013a44:	f04f 0900 	mov.w	r9, #0
 8013a48:	e7de      	b.n	8013a08 <_printf_float+0x16c>
 8013a4a:	b913      	cbnz	r3, 8013a52 <_printf_float+0x1b6>
 8013a4c:	6822      	ldr	r2, [r4, #0]
 8013a4e:	07d2      	lsls	r2, r2, #31
 8013a50:	d501      	bpl.n	8013a56 <_printf_float+0x1ba>
 8013a52:	3302      	adds	r3, #2
 8013a54:	e7f4      	b.n	8013a40 <_printf_float+0x1a4>
 8013a56:	2301      	movs	r3, #1
 8013a58:	e7f2      	b.n	8013a40 <_printf_float+0x1a4>
 8013a5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a60:	4299      	cmp	r1, r3
 8013a62:	db05      	blt.n	8013a70 <_printf_float+0x1d4>
 8013a64:	6823      	ldr	r3, [r4, #0]
 8013a66:	6121      	str	r1, [r4, #16]
 8013a68:	07d8      	lsls	r0, r3, #31
 8013a6a:	d5ea      	bpl.n	8013a42 <_printf_float+0x1a6>
 8013a6c:	1c4b      	adds	r3, r1, #1
 8013a6e:	e7e7      	b.n	8013a40 <_printf_float+0x1a4>
 8013a70:	2900      	cmp	r1, #0
 8013a72:	bfd4      	ite	le
 8013a74:	f1c1 0202 	rsble	r2, r1, #2
 8013a78:	2201      	movgt	r2, #1
 8013a7a:	4413      	add	r3, r2
 8013a7c:	e7e0      	b.n	8013a40 <_printf_float+0x1a4>
 8013a7e:	6823      	ldr	r3, [r4, #0]
 8013a80:	055a      	lsls	r2, r3, #21
 8013a82:	d407      	bmi.n	8013a94 <_printf_float+0x1f8>
 8013a84:	6923      	ldr	r3, [r4, #16]
 8013a86:	4642      	mov	r2, r8
 8013a88:	4631      	mov	r1, r6
 8013a8a:	4628      	mov	r0, r5
 8013a8c:	47b8      	blx	r7
 8013a8e:	3001      	adds	r0, #1
 8013a90:	d12c      	bne.n	8013aec <_printf_float+0x250>
 8013a92:	e764      	b.n	801395e <_printf_float+0xc2>
 8013a94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013a98:	f240 80e0 	bls.w	8013c5c <_printf_float+0x3c0>
 8013a9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	f7ed f810 	bl	8000ac8 <__aeabi_dcmpeq>
 8013aa8:	2800      	cmp	r0, #0
 8013aaa:	d034      	beq.n	8013b16 <_printf_float+0x27a>
 8013aac:	4a37      	ldr	r2, [pc, #220]	; (8013b8c <_printf_float+0x2f0>)
 8013aae:	2301      	movs	r3, #1
 8013ab0:	4631      	mov	r1, r6
 8013ab2:	4628      	mov	r0, r5
 8013ab4:	47b8      	blx	r7
 8013ab6:	3001      	adds	r0, #1
 8013ab8:	f43f af51 	beq.w	801395e <_printf_float+0xc2>
 8013abc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013ac0:	429a      	cmp	r2, r3
 8013ac2:	db02      	blt.n	8013aca <_printf_float+0x22e>
 8013ac4:	6823      	ldr	r3, [r4, #0]
 8013ac6:	07d8      	lsls	r0, r3, #31
 8013ac8:	d510      	bpl.n	8013aec <_printf_float+0x250>
 8013aca:	ee18 3a10 	vmov	r3, s16
 8013ace:	4652      	mov	r2, sl
 8013ad0:	4631      	mov	r1, r6
 8013ad2:	4628      	mov	r0, r5
 8013ad4:	47b8      	blx	r7
 8013ad6:	3001      	adds	r0, #1
 8013ad8:	f43f af41 	beq.w	801395e <_printf_float+0xc2>
 8013adc:	f04f 0800 	mov.w	r8, #0
 8013ae0:	f104 091a 	add.w	r9, r4, #26
 8013ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ae6:	3b01      	subs	r3, #1
 8013ae8:	4543      	cmp	r3, r8
 8013aea:	dc09      	bgt.n	8013b00 <_printf_float+0x264>
 8013aec:	6823      	ldr	r3, [r4, #0]
 8013aee:	079b      	lsls	r3, r3, #30
 8013af0:	f100 8105 	bmi.w	8013cfe <_printf_float+0x462>
 8013af4:	68e0      	ldr	r0, [r4, #12]
 8013af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013af8:	4298      	cmp	r0, r3
 8013afa:	bfb8      	it	lt
 8013afc:	4618      	movlt	r0, r3
 8013afe:	e730      	b.n	8013962 <_printf_float+0xc6>
 8013b00:	2301      	movs	r3, #1
 8013b02:	464a      	mov	r2, r9
 8013b04:	4631      	mov	r1, r6
 8013b06:	4628      	mov	r0, r5
 8013b08:	47b8      	blx	r7
 8013b0a:	3001      	adds	r0, #1
 8013b0c:	f43f af27 	beq.w	801395e <_printf_float+0xc2>
 8013b10:	f108 0801 	add.w	r8, r8, #1
 8013b14:	e7e6      	b.n	8013ae4 <_printf_float+0x248>
 8013b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	dc39      	bgt.n	8013b90 <_printf_float+0x2f4>
 8013b1c:	4a1b      	ldr	r2, [pc, #108]	; (8013b8c <_printf_float+0x2f0>)
 8013b1e:	2301      	movs	r3, #1
 8013b20:	4631      	mov	r1, r6
 8013b22:	4628      	mov	r0, r5
 8013b24:	47b8      	blx	r7
 8013b26:	3001      	adds	r0, #1
 8013b28:	f43f af19 	beq.w	801395e <_printf_float+0xc2>
 8013b2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013b30:	4313      	orrs	r3, r2
 8013b32:	d102      	bne.n	8013b3a <_printf_float+0x29e>
 8013b34:	6823      	ldr	r3, [r4, #0]
 8013b36:	07d9      	lsls	r1, r3, #31
 8013b38:	d5d8      	bpl.n	8013aec <_printf_float+0x250>
 8013b3a:	ee18 3a10 	vmov	r3, s16
 8013b3e:	4652      	mov	r2, sl
 8013b40:	4631      	mov	r1, r6
 8013b42:	4628      	mov	r0, r5
 8013b44:	47b8      	blx	r7
 8013b46:	3001      	adds	r0, #1
 8013b48:	f43f af09 	beq.w	801395e <_printf_float+0xc2>
 8013b4c:	f04f 0900 	mov.w	r9, #0
 8013b50:	f104 0a1a 	add.w	sl, r4, #26
 8013b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b56:	425b      	negs	r3, r3
 8013b58:	454b      	cmp	r3, r9
 8013b5a:	dc01      	bgt.n	8013b60 <_printf_float+0x2c4>
 8013b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b5e:	e792      	b.n	8013a86 <_printf_float+0x1ea>
 8013b60:	2301      	movs	r3, #1
 8013b62:	4652      	mov	r2, sl
 8013b64:	4631      	mov	r1, r6
 8013b66:	4628      	mov	r0, r5
 8013b68:	47b8      	blx	r7
 8013b6a:	3001      	adds	r0, #1
 8013b6c:	f43f aef7 	beq.w	801395e <_printf_float+0xc2>
 8013b70:	f109 0901 	add.w	r9, r9, #1
 8013b74:	e7ee      	b.n	8013b54 <_printf_float+0x2b8>
 8013b76:	bf00      	nop
 8013b78:	7fefffff 	.word	0x7fefffff
 8013b7c:	0801956c 	.word	0x0801956c
 8013b80:	08019570 	.word	0x08019570
 8013b84:	08019578 	.word	0x08019578
 8013b88:	08019574 	.word	0x08019574
 8013b8c:	0801957c 	.word	0x0801957c
 8013b90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013b92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013b94:	429a      	cmp	r2, r3
 8013b96:	bfa8      	it	ge
 8013b98:	461a      	movge	r2, r3
 8013b9a:	2a00      	cmp	r2, #0
 8013b9c:	4691      	mov	r9, r2
 8013b9e:	dc37      	bgt.n	8013c10 <_printf_float+0x374>
 8013ba0:	f04f 0b00 	mov.w	fp, #0
 8013ba4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013ba8:	f104 021a 	add.w	r2, r4, #26
 8013bac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013bae:	9305      	str	r3, [sp, #20]
 8013bb0:	eba3 0309 	sub.w	r3, r3, r9
 8013bb4:	455b      	cmp	r3, fp
 8013bb6:	dc33      	bgt.n	8013c20 <_printf_float+0x384>
 8013bb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013bbc:	429a      	cmp	r2, r3
 8013bbe:	db3b      	blt.n	8013c38 <_printf_float+0x39c>
 8013bc0:	6823      	ldr	r3, [r4, #0]
 8013bc2:	07da      	lsls	r2, r3, #31
 8013bc4:	d438      	bmi.n	8013c38 <_printf_float+0x39c>
 8013bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013bc8:	9a05      	ldr	r2, [sp, #20]
 8013bca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013bcc:	1a9a      	subs	r2, r3, r2
 8013bce:	eba3 0901 	sub.w	r9, r3, r1
 8013bd2:	4591      	cmp	r9, r2
 8013bd4:	bfa8      	it	ge
 8013bd6:	4691      	movge	r9, r2
 8013bd8:	f1b9 0f00 	cmp.w	r9, #0
 8013bdc:	dc35      	bgt.n	8013c4a <_printf_float+0x3ae>
 8013bde:	f04f 0800 	mov.w	r8, #0
 8013be2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013be6:	f104 0a1a 	add.w	sl, r4, #26
 8013bea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013bee:	1a9b      	subs	r3, r3, r2
 8013bf0:	eba3 0309 	sub.w	r3, r3, r9
 8013bf4:	4543      	cmp	r3, r8
 8013bf6:	f77f af79 	ble.w	8013aec <_printf_float+0x250>
 8013bfa:	2301      	movs	r3, #1
 8013bfc:	4652      	mov	r2, sl
 8013bfe:	4631      	mov	r1, r6
 8013c00:	4628      	mov	r0, r5
 8013c02:	47b8      	blx	r7
 8013c04:	3001      	adds	r0, #1
 8013c06:	f43f aeaa 	beq.w	801395e <_printf_float+0xc2>
 8013c0a:	f108 0801 	add.w	r8, r8, #1
 8013c0e:	e7ec      	b.n	8013bea <_printf_float+0x34e>
 8013c10:	4613      	mov	r3, r2
 8013c12:	4631      	mov	r1, r6
 8013c14:	4642      	mov	r2, r8
 8013c16:	4628      	mov	r0, r5
 8013c18:	47b8      	blx	r7
 8013c1a:	3001      	adds	r0, #1
 8013c1c:	d1c0      	bne.n	8013ba0 <_printf_float+0x304>
 8013c1e:	e69e      	b.n	801395e <_printf_float+0xc2>
 8013c20:	2301      	movs	r3, #1
 8013c22:	4631      	mov	r1, r6
 8013c24:	4628      	mov	r0, r5
 8013c26:	9205      	str	r2, [sp, #20]
 8013c28:	47b8      	blx	r7
 8013c2a:	3001      	adds	r0, #1
 8013c2c:	f43f ae97 	beq.w	801395e <_printf_float+0xc2>
 8013c30:	9a05      	ldr	r2, [sp, #20]
 8013c32:	f10b 0b01 	add.w	fp, fp, #1
 8013c36:	e7b9      	b.n	8013bac <_printf_float+0x310>
 8013c38:	ee18 3a10 	vmov	r3, s16
 8013c3c:	4652      	mov	r2, sl
 8013c3e:	4631      	mov	r1, r6
 8013c40:	4628      	mov	r0, r5
 8013c42:	47b8      	blx	r7
 8013c44:	3001      	adds	r0, #1
 8013c46:	d1be      	bne.n	8013bc6 <_printf_float+0x32a>
 8013c48:	e689      	b.n	801395e <_printf_float+0xc2>
 8013c4a:	9a05      	ldr	r2, [sp, #20]
 8013c4c:	464b      	mov	r3, r9
 8013c4e:	4442      	add	r2, r8
 8013c50:	4631      	mov	r1, r6
 8013c52:	4628      	mov	r0, r5
 8013c54:	47b8      	blx	r7
 8013c56:	3001      	adds	r0, #1
 8013c58:	d1c1      	bne.n	8013bde <_printf_float+0x342>
 8013c5a:	e680      	b.n	801395e <_printf_float+0xc2>
 8013c5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013c5e:	2a01      	cmp	r2, #1
 8013c60:	dc01      	bgt.n	8013c66 <_printf_float+0x3ca>
 8013c62:	07db      	lsls	r3, r3, #31
 8013c64:	d538      	bpl.n	8013cd8 <_printf_float+0x43c>
 8013c66:	2301      	movs	r3, #1
 8013c68:	4642      	mov	r2, r8
 8013c6a:	4631      	mov	r1, r6
 8013c6c:	4628      	mov	r0, r5
 8013c6e:	47b8      	blx	r7
 8013c70:	3001      	adds	r0, #1
 8013c72:	f43f ae74 	beq.w	801395e <_printf_float+0xc2>
 8013c76:	ee18 3a10 	vmov	r3, s16
 8013c7a:	4652      	mov	r2, sl
 8013c7c:	4631      	mov	r1, r6
 8013c7e:	4628      	mov	r0, r5
 8013c80:	47b8      	blx	r7
 8013c82:	3001      	adds	r0, #1
 8013c84:	f43f ae6b 	beq.w	801395e <_printf_float+0xc2>
 8013c88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	2300      	movs	r3, #0
 8013c90:	f7ec ff1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8013c94:	b9d8      	cbnz	r0, 8013cce <_printf_float+0x432>
 8013c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c98:	f108 0201 	add.w	r2, r8, #1
 8013c9c:	3b01      	subs	r3, #1
 8013c9e:	4631      	mov	r1, r6
 8013ca0:	4628      	mov	r0, r5
 8013ca2:	47b8      	blx	r7
 8013ca4:	3001      	adds	r0, #1
 8013ca6:	d10e      	bne.n	8013cc6 <_printf_float+0x42a>
 8013ca8:	e659      	b.n	801395e <_printf_float+0xc2>
 8013caa:	2301      	movs	r3, #1
 8013cac:	4652      	mov	r2, sl
 8013cae:	4631      	mov	r1, r6
 8013cb0:	4628      	mov	r0, r5
 8013cb2:	47b8      	blx	r7
 8013cb4:	3001      	adds	r0, #1
 8013cb6:	f43f ae52 	beq.w	801395e <_printf_float+0xc2>
 8013cba:	f108 0801 	add.w	r8, r8, #1
 8013cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013cc0:	3b01      	subs	r3, #1
 8013cc2:	4543      	cmp	r3, r8
 8013cc4:	dcf1      	bgt.n	8013caa <_printf_float+0x40e>
 8013cc6:	464b      	mov	r3, r9
 8013cc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013ccc:	e6dc      	b.n	8013a88 <_printf_float+0x1ec>
 8013cce:	f04f 0800 	mov.w	r8, #0
 8013cd2:	f104 0a1a 	add.w	sl, r4, #26
 8013cd6:	e7f2      	b.n	8013cbe <_printf_float+0x422>
 8013cd8:	2301      	movs	r3, #1
 8013cda:	4642      	mov	r2, r8
 8013cdc:	e7df      	b.n	8013c9e <_printf_float+0x402>
 8013cde:	2301      	movs	r3, #1
 8013ce0:	464a      	mov	r2, r9
 8013ce2:	4631      	mov	r1, r6
 8013ce4:	4628      	mov	r0, r5
 8013ce6:	47b8      	blx	r7
 8013ce8:	3001      	adds	r0, #1
 8013cea:	f43f ae38 	beq.w	801395e <_printf_float+0xc2>
 8013cee:	f108 0801 	add.w	r8, r8, #1
 8013cf2:	68e3      	ldr	r3, [r4, #12]
 8013cf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013cf6:	1a5b      	subs	r3, r3, r1
 8013cf8:	4543      	cmp	r3, r8
 8013cfa:	dcf0      	bgt.n	8013cde <_printf_float+0x442>
 8013cfc:	e6fa      	b.n	8013af4 <_printf_float+0x258>
 8013cfe:	f04f 0800 	mov.w	r8, #0
 8013d02:	f104 0919 	add.w	r9, r4, #25
 8013d06:	e7f4      	b.n	8013cf2 <_printf_float+0x456>

08013d08 <_printf_common>:
 8013d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d0c:	4616      	mov	r6, r2
 8013d0e:	4699      	mov	r9, r3
 8013d10:	688a      	ldr	r2, [r1, #8]
 8013d12:	690b      	ldr	r3, [r1, #16]
 8013d14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013d18:	4293      	cmp	r3, r2
 8013d1a:	bfb8      	it	lt
 8013d1c:	4613      	movlt	r3, r2
 8013d1e:	6033      	str	r3, [r6, #0]
 8013d20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013d24:	4607      	mov	r7, r0
 8013d26:	460c      	mov	r4, r1
 8013d28:	b10a      	cbz	r2, 8013d2e <_printf_common+0x26>
 8013d2a:	3301      	adds	r3, #1
 8013d2c:	6033      	str	r3, [r6, #0]
 8013d2e:	6823      	ldr	r3, [r4, #0]
 8013d30:	0699      	lsls	r1, r3, #26
 8013d32:	bf42      	ittt	mi
 8013d34:	6833      	ldrmi	r3, [r6, #0]
 8013d36:	3302      	addmi	r3, #2
 8013d38:	6033      	strmi	r3, [r6, #0]
 8013d3a:	6825      	ldr	r5, [r4, #0]
 8013d3c:	f015 0506 	ands.w	r5, r5, #6
 8013d40:	d106      	bne.n	8013d50 <_printf_common+0x48>
 8013d42:	f104 0a19 	add.w	sl, r4, #25
 8013d46:	68e3      	ldr	r3, [r4, #12]
 8013d48:	6832      	ldr	r2, [r6, #0]
 8013d4a:	1a9b      	subs	r3, r3, r2
 8013d4c:	42ab      	cmp	r3, r5
 8013d4e:	dc26      	bgt.n	8013d9e <_printf_common+0x96>
 8013d50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013d54:	1e13      	subs	r3, r2, #0
 8013d56:	6822      	ldr	r2, [r4, #0]
 8013d58:	bf18      	it	ne
 8013d5a:	2301      	movne	r3, #1
 8013d5c:	0692      	lsls	r2, r2, #26
 8013d5e:	d42b      	bmi.n	8013db8 <_printf_common+0xb0>
 8013d60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013d64:	4649      	mov	r1, r9
 8013d66:	4638      	mov	r0, r7
 8013d68:	47c0      	blx	r8
 8013d6a:	3001      	adds	r0, #1
 8013d6c:	d01e      	beq.n	8013dac <_printf_common+0xa4>
 8013d6e:	6823      	ldr	r3, [r4, #0]
 8013d70:	68e5      	ldr	r5, [r4, #12]
 8013d72:	6832      	ldr	r2, [r6, #0]
 8013d74:	f003 0306 	and.w	r3, r3, #6
 8013d78:	2b04      	cmp	r3, #4
 8013d7a:	bf08      	it	eq
 8013d7c:	1aad      	subeq	r5, r5, r2
 8013d7e:	68a3      	ldr	r3, [r4, #8]
 8013d80:	6922      	ldr	r2, [r4, #16]
 8013d82:	bf0c      	ite	eq
 8013d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013d88:	2500      	movne	r5, #0
 8013d8a:	4293      	cmp	r3, r2
 8013d8c:	bfc4      	itt	gt
 8013d8e:	1a9b      	subgt	r3, r3, r2
 8013d90:	18ed      	addgt	r5, r5, r3
 8013d92:	2600      	movs	r6, #0
 8013d94:	341a      	adds	r4, #26
 8013d96:	42b5      	cmp	r5, r6
 8013d98:	d11a      	bne.n	8013dd0 <_printf_common+0xc8>
 8013d9a:	2000      	movs	r0, #0
 8013d9c:	e008      	b.n	8013db0 <_printf_common+0xa8>
 8013d9e:	2301      	movs	r3, #1
 8013da0:	4652      	mov	r2, sl
 8013da2:	4649      	mov	r1, r9
 8013da4:	4638      	mov	r0, r7
 8013da6:	47c0      	blx	r8
 8013da8:	3001      	adds	r0, #1
 8013daa:	d103      	bne.n	8013db4 <_printf_common+0xac>
 8013dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013db4:	3501      	adds	r5, #1
 8013db6:	e7c6      	b.n	8013d46 <_printf_common+0x3e>
 8013db8:	18e1      	adds	r1, r4, r3
 8013dba:	1c5a      	adds	r2, r3, #1
 8013dbc:	2030      	movs	r0, #48	; 0x30
 8013dbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013dc2:	4422      	add	r2, r4
 8013dc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013dc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013dcc:	3302      	adds	r3, #2
 8013dce:	e7c7      	b.n	8013d60 <_printf_common+0x58>
 8013dd0:	2301      	movs	r3, #1
 8013dd2:	4622      	mov	r2, r4
 8013dd4:	4649      	mov	r1, r9
 8013dd6:	4638      	mov	r0, r7
 8013dd8:	47c0      	blx	r8
 8013dda:	3001      	adds	r0, #1
 8013ddc:	d0e6      	beq.n	8013dac <_printf_common+0xa4>
 8013dde:	3601      	adds	r6, #1
 8013de0:	e7d9      	b.n	8013d96 <_printf_common+0x8e>
	...

08013de4 <_printf_i>:
 8013de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013de8:	7e0f      	ldrb	r7, [r1, #24]
 8013dea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013dec:	2f78      	cmp	r7, #120	; 0x78
 8013dee:	4691      	mov	r9, r2
 8013df0:	4680      	mov	r8, r0
 8013df2:	460c      	mov	r4, r1
 8013df4:	469a      	mov	sl, r3
 8013df6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013dfa:	d807      	bhi.n	8013e0c <_printf_i+0x28>
 8013dfc:	2f62      	cmp	r7, #98	; 0x62
 8013dfe:	d80a      	bhi.n	8013e16 <_printf_i+0x32>
 8013e00:	2f00      	cmp	r7, #0
 8013e02:	f000 80d8 	beq.w	8013fb6 <_printf_i+0x1d2>
 8013e06:	2f58      	cmp	r7, #88	; 0x58
 8013e08:	f000 80a3 	beq.w	8013f52 <_printf_i+0x16e>
 8013e0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013e10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013e14:	e03a      	b.n	8013e8c <_printf_i+0xa8>
 8013e16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013e1a:	2b15      	cmp	r3, #21
 8013e1c:	d8f6      	bhi.n	8013e0c <_printf_i+0x28>
 8013e1e:	a101      	add	r1, pc, #4	; (adr r1, 8013e24 <_printf_i+0x40>)
 8013e20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013e24:	08013e7d 	.word	0x08013e7d
 8013e28:	08013e91 	.word	0x08013e91
 8013e2c:	08013e0d 	.word	0x08013e0d
 8013e30:	08013e0d 	.word	0x08013e0d
 8013e34:	08013e0d 	.word	0x08013e0d
 8013e38:	08013e0d 	.word	0x08013e0d
 8013e3c:	08013e91 	.word	0x08013e91
 8013e40:	08013e0d 	.word	0x08013e0d
 8013e44:	08013e0d 	.word	0x08013e0d
 8013e48:	08013e0d 	.word	0x08013e0d
 8013e4c:	08013e0d 	.word	0x08013e0d
 8013e50:	08013f9d 	.word	0x08013f9d
 8013e54:	08013ec1 	.word	0x08013ec1
 8013e58:	08013f7f 	.word	0x08013f7f
 8013e5c:	08013e0d 	.word	0x08013e0d
 8013e60:	08013e0d 	.word	0x08013e0d
 8013e64:	08013fbf 	.word	0x08013fbf
 8013e68:	08013e0d 	.word	0x08013e0d
 8013e6c:	08013ec1 	.word	0x08013ec1
 8013e70:	08013e0d 	.word	0x08013e0d
 8013e74:	08013e0d 	.word	0x08013e0d
 8013e78:	08013f87 	.word	0x08013f87
 8013e7c:	682b      	ldr	r3, [r5, #0]
 8013e7e:	1d1a      	adds	r2, r3, #4
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	602a      	str	r2, [r5, #0]
 8013e84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013e88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013e8c:	2301      	movs	r3, #1
 8013e8e:	e0a3      	b.n	8013fd8 <_printf_i+0x1f4>
 8013e90:	6820      	ldr	r0, [r4, #0]
 8013e92:	6829      	ldr	r1, [r5, #0]
 8013e94:	0606      	lsls	r6, r0, #24
 8013e96:	f101 0304 	add.w	r3, r1, #4
 8013e9a:	d50a      	bpl.n	8013eb2 <_printf_i+0xce>
 8013e9c:	680e      	ldr	r6, [r1, #0]
 8013e9e:	602b      	str	r3, [r5, #0]
 8013ea0:	2e00      	cmp	r6, #0
 8013ea2:	da03      	bge.n	8013eac <_printf_i+0xc8>
 8013ea4:	232d      	movs	r3, #45	; 0x2d
 8013ea6:	4276      	negs	r6, r6
 8013ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013eac:	485e      	ldr	r0, [pc, #376]	; (8014028 <_printf_i+0x244>)
 8013eae:	230a      	movs	r3, #10
 8013eb0:	e019      	b.n	8013ee6 <_printf_i+0x102>
 8013eb2:	680e      	ldr	r6, [r1, #0]
 8013eb4:	602b      	str	r3, [r5, #0]
 8013eb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013eba:	bf18      	it	ne
 8013ebc:	b236      	sxthne	r6, r6
 8013ebe:	e7ef      	b.n	8013ea0 <_printf_i+0xbc>
 8013ec0:	682b      	ldr	r3, [r5, #0]
 8013ec2:	6820      	ldr	r0, [r4, #0]
 8013ec4:	1d19      	adds	r1, r3, #4
 8013ec6:	6029      	str	r1, [r5, #0]
 8013ec8:	0601      	lsls	r1, r0, #24
 8013eca:	d501      	bpl.n	8013ed0 <_printf_i+0xec>
 8013ecc:	681e      	ldr	r6, [r3, #0]
 8013ece:	e002      	b.n	8013ed6 <_printf_i+0xf2>
 8013ed0:	0646      	lsls	r6, r0, #25
 8013ed2:	d5fb      	bpl.n	8013ecc <_printf_i+0xe8>
 8013ed4:	881e      	ldrh	r6, [r3, #0]
 8013ed6:	4854      	ldr	r0, [pc, #336]	; (8014028 <_printf_i+0x244>)
 8013ed8:	2f6f      	cmp	r7, #111	; 0x6f
 8013eda:	bf0c      	ite	eq
 8013edc:	2308      	moveq	r3, #8
 8013ede:	230a      	movne	r3, #10
 8013ee0:	2100      	movs	r1, #0
 8013ee2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013ee6:	6865      	ldr	r5, [r4, #4]
 8013ee8:	60a5      	str	r5, [r4, #8]
 8013eea:	2d00      	cmp	r5, #0
 8013eec:	bfa2      	ittt	ge
 8013eee:	6821      	ldrge	r1, [r4, #0]
 8013ef0:	f021 0104 	bicge.w	r1, r1, #4
 8013ef4:	6021      	strge	r1, [r4, #0]
 8013ef6:	b90e      	cbnz	r6, 8013efc <_printf_i+0x118>
 8013ef8:	2d00      	cmp	r5, #0
 8013efa:	d04d      	beq.n	8013f98 <_printf_i+0x1b4>
 8013efc:	4615      	mov	r5, r2
 8013efe:	fbb6 f1f3 	udiv	r1, r6, r3
 8013f02:	fb03 6711 	mls	r7, r3, r1, r6
 8013f06:	5dc7      	ldrb	r7, [r0, r7]
 8013f08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013f0c:	4637      	mov	r7, r6
 8013f0e:	42bb      	cmp	r3, r7
 8013f10:	460e      	mov	r6, r1
 8013f12:	d9f4      	bls.n	8013efe <_printf_i+0x11a>
 8013f14:	2b08      	cmp	r3, #8
 8013f16:	d10b      	bne.n	8013f30 <_printf_i+0x14c>
 8013f18:	6823      	ldr	r3, [r4, #0]
 8013f1a:	07de      	lsls	r6, r3, #31
 8013f1c:	d508      	bpl.n	8013f30 <_printf_i+0x14c>
 8013f1e:	6923      	ldr	r3, [r4, #16]
 8013f20:	6861      	ldr	r1, [r4, #4]
 8013f22:	4299      	cmp	r1, r3
 8013f24:	bfde      	ittt	le
 8013f26:	2330      	movle	r3, #48	; 0x30
 8013f28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013f2c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013f30:	1b52      	subs	r2, r2, r5
 8013f32:	6122      	str	r2, [r4, #16]
 8013f34:	f8cd a000 	str.w	sl, [sp]
 8013f38:	464b      	mov	r3, r9
 8013f3a:	aa03      	add	r2, sp, #12
 8013f3c:	4621      	mov	r1, r4
 8013f3e:	4640      	mov	r0, r8
 8013f40:	f7ff fee2 	bl	8013d08 <_printf_common>
 8013f44:	3001      	adds	r0, #1
 8013f46:	d14c      	bne.n	8013fe2 <_printf_i+0x1fe>
 8013f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f4c:	b004      	add	sp, #16
 8013f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f52:	4835      	ldr	r0, [pc, #212]	; (8014028 <_printf_i+0x244>)
 8013f54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013f58:	6829      	ldr	r1, [r5, #0]
 8013f5a:	6823      	ldr	r3, [r4, #0]
 8013f5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8013f60:	6029      	str	r1, [r5, #0]
 8013f62:	061d      	lsls	r5, r3, #24
 8013f64:	d514      	bpl.n	8013f90 <_printf_i+0x1ac>
 8013f66:	07df      	lsls	r7, r3, #31
 8013f68:	bf44      	itt	mi
 8013f6a:	f043 0320 	orrmi.w	r3, r3, #32
 8013f6e:	6023      	strmi	r3, [r4, #0]
 8013f70:	b91e      	cbnz	r6, 8013f7a <_printf_i+0x196>
 8013f72:	6823      	ldr	r3, [r4, #0]
 8013f74:	f023 0320 	bic.w	r3, r3, #32
 8013f78:	6023      	str	r3, [r4, #0]
 8013f7a:	2310      	movs	r3, #16
 8013f7c:	e7b0      	b.n	8013ee0 <_printf_i+0xfc>
 8013f7e:	6823      	ldr	r3, [r4, #0]
 8013f80:	f043 0320 	orr.w	r3, r3, #32
 8013f84:	6023      	str	r3, [r4, #0]
 8013f86:	2378      	movs	r3, #120	; 0x78
 8013f88:	4828      	ldr	r0, [pc, #160]	; (801402c <_printf_i+0x248>)
 8013f8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013f8e:	e7e3      	b.n	8013f58 <_printf_i+0x174>
 8013f90:	0659      	lsls	r1, r3, #25
 8013f92:	bf48      	it	mi
 8013f94:	b2b6      	uxthmi	r6, r6
 8013f96:	e7e6      	b.n	8013f66 <_printf_i+0x182>
 8013f98:	4615      	mov	r5, r2
 8013f9a:	e7bb      	b.n	8013f14 <_printf_i+0x130>
 8013f9c:	682b      	ldr	r3, [r5, #0]
 8013f9e:	6826      	ldr	r6, [r4, #0]
 8013fa0:	6961      	ldr	r1, [r4, #20]
 8013fa2:	1d18      	adds	r0, r3, #4
 8013fa4:	6028      	str	r0, [r5, #0]
 8013fa6:	0635      	lsls	r5, r6, #24
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	d501      	bpl.n	8013fb0 <_printf_i+0x1cc>
 8013fac:	6019      	str	r1, [r3, #0]
 8013fae:	e002      	b.n	8013fb6 <_printf_i+0x1d2>
 8013fb0:	0670      	lsls	r0, r6, #25
 8013fb2:	d5fb      	bpl.n	8013fac <_printf_i+0x1c8>
 8013fb4:	8019      	strh	r1, [r3, #0]
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	6123      	str	r3, [r4, #16]
 8013fba:	4615      	mov	r5, r2
 8013fbc:	e7ba      	b.n	8013f34 <_printf_i+0x150>
 8013fbe:	682b      	ldr	r3, [r5, #0]
 8013fc0:	1d1a      	adds	r2, r3, #4
 8013fc2:	602a      	str	r2, [r5, #0]
 8013fc4:	681d      	ldr	r5, [r3, #0]
 8013fc6:	6862      	ldr	r2, [r4, #4]
 8013fc8:	2100      	movs	r1, #0
 8013fca:	4628      	mov	r0, r5
 8013fcc:	f7ec f908 	bl	80001e0 <memchr>
 8013fd0:	b108      	cbz	r0, 8013fd6 <_printf_i+0x1f2>
 8013fd2:	1b40      	subs	r0, r0, r5
 8013fd4:	6060      	str	r0, [r4, #4]
 8013fd6:	6863      	ldr	r3, [r4, #4]
 8013fd8:	6123      	str	r3, [r4, #16]
 8013fda:	2300      	movs	r3, #0
 8013fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013fe0:	e7a8      	b.n	8013f34 <_printf_i+0x150>
 8013fe2:	6923      	ldr	r3, [r4, #16]
 8013fe4:	462a      	mov	r2, r5
 8013fe6:	4649      	mov	r1, r9
 8013fe8:	4640      	mov	r0, r8
 8013fea:	47d0      	blx	sl
 8013fec:	3001      	adds	r0, #1
 8013fee:	d0ab      	beq.n	8013f48 <_printf_i+0x164>
 8013ff0:	6823      	ldr	r3, [r4, #0]
 8013ff2:	079b      	lsls	r3, r3, #30
 8013ff4:	d413      	bmi.n	801401e <_printf_i+0x23a>
 8013ff6:	68e0      	ldr	r0, [r4, #12]
 8013ff8:	9b03      	ldr	r3, [sp, #12]
 8013ffa:	4298      	cmp	r0, r3
 8013ffc:	bfb8      	it	lt
 8013ffe:	4618      	movlt	r0, r3
 8014000:	e7a4      	b.n	8013f4c <_printf_i+0x168>
 8014002:	2301      	movs	r3, #1
 8014004:	4632      	mov	r2, r6
 8014006:	4649      	mov	r1, r9
 8014008:	4640      	mov	r0, r8
 801400a:	47d0      	blx	sl
 801400c:	3001      	adds	r0, #1
 801400e:	d09b      	beq.n	8013f48 <_printf_i+0x164>
 8014010:	3501      	adds	r5, #1
 8014012:	68e3      	ldr	r3, [r4, #12]
 8014014:	9903      	ldr	r1, [sp, #12]
 8014016:	1a5b      	subs	r3, r3, r1
 8014018:	42ab      	cmp	r3, r5
 801401a:	dcf2      	bgt.n	8014002 <_printf_i+0x21e>
 801401c:	e7eb      	b.n	8013ff6 <_printf_i+0x212>
 801401e:	2500      	movs	r5, #0
 8014020:	f104 0619 	add.w	r6, r4, #25
 8014024:	e7f5      	b.n	8014012 <_printf_i+0x22e>
 8014026:	bf00      	nop
 8014028:	0801957e 	.word	0x0801957e
 801402c:	0801958f 	.word	0x0801958f

08014030 <cleanup_glue>:
 8014030:	b538      	push	{r3, r4, r5, lr}
 8014032:	460c      	mov	r4, r1
 8014034:	6809      	ldr	r1, [r1, #0]
 8014036:	4605      	mov	r5, r0
 8014038:	b109      	cbz	r1, 801403e <cleanup_glue+0xe>
 801403a:	f7ff fff9 	bl	8014030 <cleanup_glue>
 801403e:	4621      	mov	r1, r4
 8014040:	4628      	mov	r0, r5
 8014042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014046:	f7ff baa9 	b.w	801359c <_free_r>
	...

0801404c <_reclaim_reent>:
 801404c:	4b2c      	ldr	r3, [pc, #176]	; (8014100 <_reclaim_reent+0xb4>)
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	4283      	cmp	r3, r0
 8014052:	b570      	push	{r4, r5, r6, lr}
 8014054:	4604      	mov	r4, r0
 8014056:	d051      	beq.n	80140fc <_reclaim_reent+0xb0>
 8014058:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801405a:	b143      	cbz	r3, 801406e <_reclaim_reent+0x22>
 801405c:	68db      	ldr	r3, [r3, #12]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d14a      	bne.n	80140f8 <_reclaim_reent+0xac>
 8014062:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014064:	6819      	ldr	r1, [r3, #0]
 8014066:	b111      	cbz	r1, 801406e <_reclaim_reent+0x22>
 8014068:	4620      	mov	r0, r4
 801406a:	f7ff fa97 	bl	801359c <_free_r>
 801406e:	6961      	ldr	r1, [r4, #20]
 8014070:	b111      	cbz	r1, 8014078 <_reclaim_reent+0x2c>
 8014072:	4620      	mov	r0, r4
 8014074:	f7ff fa92 	bl	801359c <_free_r>
 8014078:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801407a:	b111      	cbz	r1, 8014082 <_reclaim_reent+0x36>
 801407c:	4620      	mov	r0, r4
 801407e:	f7ff fa8d 	bl	801359c <_free_r>
 8014082:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014084:	b111      	cbz	r1, 801408c <_reclaim_reent+0x40>
 8014086:	4620      	mov	r0, r4
 8014088:	f7ff fa88 	bl	801359c <_free_r>
 801408c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801408e:	b111      	cbz	r1, 8014096 <_reclaim_reent+0x4a>
 8014090:	4620      	mov	r0, r4
 8014092:	f7ff fa83 	bl	801359c <_free_r>
 8014096:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014098:	b111      	cbz	r1, 80140a0 <_reclaim_reent+0x54>
 801409a:	4620      	mov	r0, r4
 801409c:	f7ff fa7e 	bl	801359c <_free_r>
 80140a0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80140a2:	b111      	cbz	r1, 80140aa <_reclaim_reent+0x5e>
 80140a4:	4620      	mov	r0, r4
 80140a6:	f7ff fa79 	bl	801359c <_free_r>
 80140aa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80140ac:	b111      	cbz	r1, 80140b4 <_reclaim_reent+0x68>
 80140ae:	4620      	mov	r0, r4
 80140b0:	f7ff fa74 	bl	801359c <_free_r>
 80140b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80140b6:	b111      	cbz	r1, 80140be <_reclaim_reent+0x72>
 80140b8:	4620      	mov	r0, r4
 80140ba:	f7ff fa6f 	bl	801359c <_free_r>
 80140be:	69a3      	ldr	r3, [r4, #24]
 80140c0:	b1e3      	cbz	r3, 80140fc <_reclaim_reent+0xb0>
 80140c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80140c4:	4620      	mov	r0, r4
 80140c6:	4798      	blx	r3
 80140c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80140ca:	b1b9      	cbz	r1, 80140fc <_reclaim_reent+0xb0>
 80140cc:	4620      	mov	r0, r4
 80140ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140d2:	f7ff bfad 	b.w	8014030 <cleanup_glue>
 80140d6:	5949      	ldr	r1, [r1, r5]
 80140d8:	b941      	cbnz	r1, 80140ec <_reclaim_reent+0xa0>
 80140da:	3504      	adds	r5, #4
 80140dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80140de:	2d80      	cmp	r5, #128	; 0x80
 80140e0:	68d9      	ldr	r1, [r3, #12]
 80140e2:	d1f8      	bne.n	80140d6 <_reclaim_reent+0x8a>
 80140e4:	4620      	mov	r0, r4
 80140e6:	f7ff fa59 	bl	801359c <_free_r>
 80140ea:	e7ba      	b.n	8014062 <_reclaim_reent+0x16>
 80140ec:	680e      	ldr	r6, [r1, #0]
 80140ee:	4620      	mov	r0, r4
 80140f0:	f7ff fa54 	bl	801359c <_free_r>
 80140f4:	4631      	mov	r1, r6
 80140f6:	e7ef      	b.n	80140d8 <_reclaim_reent+0x8c>
 80140f8:	2500      	movs	r5, #0
 80140fa:	e7ef      	b.n	80140dc <_reclaim_reent+0x90>
 80140fc:	bd70      	pop	{r4, r5, r6, pc}
 80140fe:	bf00      	nop
 8014100:	20000188 	.word	0x20000188

08014104 <_sbrk_r>:
 8014104:	b538      	push	{r3, r4, r5, lr}
 8014106:	4d06      	ldr	r5, [pc, #24]	; (8014120 <_sbrk_r+0x1c>)
 8014108:	2300      	movs	r3, #0
 801410a:	4604      	mov	r4, r0
 801410c:	4608      	mov	r0, r1
 801410e:	602b      	str	r3, [r5, #0]
 8014110:	f7f2 fe7c 	bl	8006e0c <_sbrk>
 8014114:	1c43      	adds	r3, r0, #1
 8014116:	d102      	bne.n	801411e <_sbrk_r+0x1a>
 8014118:	682b      	ldr	r3, [r5, #0]
 801411a:	b103      	cbz	r3, 801411e <_sbrk_r+0x1a>
 801411c:	6023      	str	r3, [r4, #0]
 801411e:	bd38      	pop	{r3, r4, r5, pc}
 8014120:	200085e4 	.word	0x200085e4

08014124 <siprintf>:
 8014124:	b40e      	push	{r1, r2, r3}
 8014126:	b500      	push	{lr}
 8014128:	b09c      	sub	sp, #112	; 0x70
 801412a:	ab1d      	add	r3, sp, #116	; 0x74
 801412c:	9002      	str	r0, [sp, #8]
 801412e:	9006      	str	r0, [sp, #24]
 8014130:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014134:	4809      	ldr	r0, [pc, #36]	; (801415c <siprintf+0x38>)
 8014136:	9107      	str	r1, [sp, #28]
 8014138:	9104      	str	r1, [sp, #16]
 801413a:	4909      	ldr	r1, [pc, #36]	; (8014160 <siprintf+0x3c>)
 801413c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014140:	9105      	str	r1, [sp, #20]
 8014142:	6800      	ldr	r0, [r0, #0]
 8014144:	9301      	str	r3, [sp, #4]
 8014146:	a902      	add	r1, sp, #8
 8014148:	f002 ffb6 	bl	80170b8 <_svfiprintf_r>
 801414c:	9b02      	ldr	r3, [sp, #8]
 801414e:	2200      	movs	r2, #0
 8014150:	701a      	strb	r2, [r3, #0]
 8014152:	b01c      	add	sp, #112	; 0x70
 8014154:	f85d eb04 	ldr.w	lr, [sp], #4
 8014158:	b003      	add	sp, #12
 801415a:	4770      	bx	lr
 801415c:	20000188 	.word	0x20000188
 8014160:	ffff0208 	.word	0xffff0208

08014164 <__sread>:
 8014164:	b510      	push	{r4, lr}
 8014166:	460c      	mov	r4, r1
 8014168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801416c:	f003 f8a4 	bl	80172b8 <_read_r>
 8014170:	2800      	cmp	r0, #0
 8014172:	bfab      	itete	ge
 8014174:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014176:	89a3      	ldrhlt	r3, [r4, #12]
 8014178:	181b      	addge	r3, r3, r0
 801417a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801417e:	bfac      	ite	ge
 8014180:	6563      	strge	r3, [r4, #84]	; 0x54
 8014182:	81a3      	strhlt	r3, [r4, #12]
 8014184:	bd10      	pop	{r4, pc}

08014186 <__swrite>:
 8014186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801418a:	461f      	mov	r7, r3
 801418c:	898b      	ldrh	r3, [r1, #12]
 801418e:	05db      	lsls	r3, r3, #23
 8014190:	4605      	mov	r5, r0
 8014192:	460c      	mov	r4, r1
 8014194:	4616      	mov	r6, r2
 8014196:	d505      	bpl.n	80141a4 <__swrite+0x1e>
 8014198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801419c:	2302      	movs	r3, #2
 801419e:	2200      	movs	r2, #0
 80141a0:	f002 fa3e 	bl	8016620 <_lseek_r>
 80141a4:	89a3      	ldrh	r3, [r4, #12]
 80141a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80141aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80141ae:	81a3      	strh	r3, [r4, #12]
 80141b0:	4632      	mov	r2, r6
 80141b2:	463b      	mov	r3, r7
 80141b4:	4628      	mov	r0, r5
 80141b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80141ba:	f000 bf5d 	b.w	8015078 <_write_r>

080141be <__sseek>:
 80141be:	b510      	push	{r4, lr}
 80141c0:	460c      	mov	r4, r1
 80141c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141c6:	f002 fa2b 	bl	8016620 <_lseek_r>
 80141ca:	1c43      	adds	r3, r0, #1
 80141cc:	89a3      	ldrh	r3, [r4, #12]
 80141ce:	bf15      	itete	ne
 80141d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80141d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80141d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80141da:	81a3      	strheq	r3, [r4, #12]
 80141dc:	bf18      	it	ne
 80141de:	81a3      	strhne	r3, [r4, #12]
 80141e0:	bd10      	pop	{r4, pc}

080141e2 <__sclose>:
 80141e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141e6:	f000 bf59 	b.w	801509c <_close_r>

080141ea <strchr>:
 80141ea:	b2c9      	uxtb	r1, r1
 80141ec:	4603      	mov	r3, r0
 80141ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80141f2:	b11a      	cbz	r2, 80141fc <strchr+0x12>
 80141f4:	428a      	cmp	r2, r1
 80141f6:	d1f9      	bne.n	80141ec <strchr+0x2>
 80141f8:	4618      	mov	r0, r3
 80141fa:	4770      	bx	lr
 80141fc:	2900      	cmp	r1, #0
 80141fe:	bf18      	it	ne
 8014200:	2300      	movne	r3, #0
 8014202:	e7f9      	b.n	80141f8 <strchr+0xe>

08014204 <strcpy>:
 8014204:	4603      	mov	r3, r0
 8014206:	f811 2b01 	ldrb.w	r2, [r1], #1
 801420a:	f803 2b01 	strb.w	r2, [r3], #1
 801420e:	2a00      	cmp	r2, #0
 8014210:	d1f9      	bne.n	8014206 <strcpy+0x2>
 8014212:	4770      	bx	lr

08014214 <strncmp>:
 8014214:	b510      	push	{r4, lr}
 8014216:	b17a      	cbz	r2, 8014238 <strncmp+0x24>
 8014218:	4603      	mov	r3, r0
 801421a:	3901      	subs	r1, #1
 801421c:	1884      	adds	r4, r0, r2
 801421e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014222:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014226:	4290      	cmp	r0, r2
 8014228:	d101      	bne.n	801422e <strncmp+0x1a>
 801422a:	42a3      	cmp	r3, r4
 801422c:	d101      	bne.n	8014232 <strncmp+0x1e>
 801422e:	1a80      	subs	r0, r0, r2
 8014230:	bd10      	pop	{r4, pc}
 8014232:	2800      	cmp	r0, #0
 8014234:	d1f3      	bne.n	801421e <strncmp+0xa>
 8014236:	e7fa      	b.n	801422e <strncmp+0x1a>
 8014238:	4610      	mov	r0, r2
 801423a:	e7f9      	b.n	8014230 <strncmp+0x1c>

0801423c <strncpy>:
 801423c:	b510      	push	{r4, lr}
 801423e:	3901      	subs	r1, #1
 8014240:	4603      	mov	r3, r0
 8014242:	b132      	cbz	r2, 8014252 <strncpy+0x16>
 8014244:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014248:	f803 4b01 	strb.w	r4, [r3], #1
 801424c:	3a01      	subs	r2, #1
 801424e:	2c00      	cmp	r4, #0
 8014250:	d1f7      	bne.n	8014242 <strncpy+0x6>
 8014252:	441a      	add	r2, r3
 8014254:	2100      	movs	r1, #0
 8014256:	4293      	cmp	r3, r2
 8014258:	d100      	bne.n	801425c <strncpy+0x20>
 801425a:	bd10      	pop	{r4, pc}
 801425c:	f803 1b01 	strb.w	r1, [r3], #1
 8014260:	e7f9      	b.n	8014256 <strncpy+0x1a>

08014262 <strstr>:
 8014262:	780a      	ldrb	r2, [r1, #0]
 8014264:	b570      	push	{r4, r5, r6, lr}
 8014266:	b96a      	cbnz	r2, 8014284 <strstr+0x22>
 8014268:	bd70      	pop	{r4, r5, r6, pc}
 801426a:	429a      	cmp	r2, r3
 801426c:	d109      	bne.n	8014282 <strstr+0x20>
 801426e:	460c      	mov	r4, r1
 8014270:	4605      	mov	r5, r0
 8014272:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8014276:	2b00      	cmp	r3, #0
 8014278:	d0f6      	beq.n	8014268 <strstr+0x6>
 801427a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801427e:	429e      	cmp	r6, r3
 8014280:	d0f7      	beq.n	8014272 <strstr+0x10>
 8014282:	3001      	adds	r0, #1
 8014284:	7803      	ldrb	r3, [r0, #0]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d1ef      	bne.n	801426a <strstr+0x8>
 801428a:	4618      	mov	r0, r3
 801428c:	e7ec      	b.n	8014268 <strstr+0x6>

0801428e <sulp>:
 801428e:	b570      	push	{r4, r5, r6, lr}
 8014290:	4604      	mov	r4, r0
 8014292:	460d      	mov	r5, r1
 8014294:	ec45 4b10 	vmov	d0, r4, r5
 8014298:	4616      	mov	r6, r2
 801429a:	f002 fd63 	bl	8016d64 <__ulp>
 801429e:	ec51 0b10 	vmov	r0, r1, d0
 80142a2:	b17e      	cbz	r6, 80142c4 <sulp+0x36>
 80142a4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80142a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	dd09      	ble.n	80142c4 <sulp+0x36>
 80142b0:	051b      	lsls	r3, r3, #20
 80142b2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80142b6:	2400      	movs	r4, #0
 80142b8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80142bc:	4622      	mov	r2, r4
 80142be:	462b      	mov	r3, r5
 80142c0:	f7ec f99a 	bl	80005f8 <__aeabi_dmul>
 80142c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080142c8 <_strtod_l>:
 80142c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142cc:	ed2d 8b02 	vpush	{d8}
 80142d0:	b09d      	sub	sp, #116	; 0x74
 80142d2:	461f      	mov	r7, r3
 80142d4:	2300      	movs	r3, #0
 80142d6:	9318      	str	r3, [sp, #96]	; 0x60
 80142d8:	4ba2      	ldr	r3, [pc, #648]	; (8014564 <_strtod_l+0x29c>)
 80142da:	9213      	str	r2, [sp, #76]	; 0x4c
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	9305      	str	r3, [sp, #20]
 80142e0:	4604      	mov	r4, r0
 80142e2:	4618      	mov	r0, r3
 80142e4:	4688      	mov	r8, r1
 80142e6:	f7eb ff73 	bl	80001d0 <strlen>
 80142ea:	f04f 0a00 	mov.w	sl, #0
 80142ee:	4605      	mov	r5, r0
 80142f0:	f04f 0b00 	mov.w	fp, #0
 80142f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80142f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80142fa:	781a      	ldrb	r2, [r3, #0]
 80142fc:	2a2b      	cmp	r2, #43	; 0x2b
 80142fe:	d04e      	beq.n	801439e <_strtod_l+0xd6>
 8014300:	d83b      	bhi.n	801437a <_strtod_l+0xb2>
 8014302:	2a0d      	cmp	r2, #13
 8014304:	d834      	bhi.n	8014370 <_strtod_l+0xa8>
 8014306:	2a08      	cmp	r2, #8
 8014308:	d834      	bhi.n	8014374 <_strtod_l+0xac>
 801430a:	2a00      	cmp	r2, #0
 801430c:	d03e      	beq.n	801438c <_strtod_l+0xc4>
 801430e:	2300      	movs	r3, #0
 8014310:	930a      	str	r3, [sp, #40]	; 0x28
 8014312:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8014314:	7833      	ldrb	r3, [r6, #0]
 8014316:	2b30      	cmp	r3, #48	; 0x30
 8014318:	f040 80b0 	bne.w	801447c <_strtod_l+0x1b4>
 801431c:	7873      	ldrb	r3, [r6, #1]
 801431e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014322:	2b58      	cmp	r3, #88	; 0x58
 8014324:	d168      	bne.n	80143f8 <_strtod_l+0x130>
 8014326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014328:	9301      	str	r3, [sp, #4]
 801432a:	ab18      	add	r3, sp, #96	; 0x60
 801432c:	9702      	str	r7, [sp, #8]
 801432e:	9300      	str	r3, [sp, #0]
 8014330:	4a8d      	ldr	r2, [pc, #564]	; (8014568 <_strtod_l+0x2a0>)
 8014332:	ab19      	add	r3, sp, #100	; 0x64
 8014334:	a917      	add	r1, sp, #92	; 0x5c
 8014336:	4620      	mov	r0, r4
 8014338:	f001 fe66 	bl	8016008 <__gethex>
 801433c:	f010 0707 	ands.w	r7, r0, #7
 8014340:	4605      	mov	r5, r0
 8014342:	d005      	beq.n	8014350 <_strtod_l+0x88>
 8014344:	2f06      	cmp	r7, #6
 8014346:	d12c      	bne.n	80143a2 <_strtod_l+0xda>
 8014348:	3601      	adds	r6, #1
 801434a:	2300      	movs	r3, #0
 801434c:	9617      	str	r6, [sp, #92]	; 0x5c
 801434e:	930a      	str	r3, [sp, #40]	; 0x28
 8014350:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014352:	2b00      	cmp	r3, #0
 8014354:	f040 8590 	bne.w	8014e78 <_strtod_l+0xbb0>
 8014358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801435a:	b1eb      	cbz	r3, 8014398 <_strtod_l+0xd0>
 801435c:	4652      	mov	r2, sl
 801435e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014362:	ec43 2b10 	vmov	d0, r2, r3
 8014366:	b01d      	add	sp, #116	; 0x74
 8014368:	ecbd 8b02 	vpop	{d8}
 801436c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014370:	2a20      	cmp	r2, #32
 8014372:	d1cc      	bne.n	801430e <_strtod_l+0x46>
 8014374:	3301      	adds	r3, #1
 8014376:	9317      	str	r3, [sp, #92]	; 0x5c
 8014378:	e7be      	b.n	80142f8 <_strtod_l+0x30>
 801437a:	2a2d      	cmp	r2, #45	; 0x2d
 801437c:	d1c7      	bne.n	801430e <_strtod_l+0x46>
 801437e:	2201      	movs	r2, #1
 8014380:	920a      	str	r2, [sp, #40]	; 0x28
 8014382:	1c5a      	adds	r2, r3, #1
 8014384:	9217      	str	r2, [sp, #92]	; 0x5c
 8014386:	785b      	ldrb	r3, [r3, #1]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d1c2      	bne.n	8014312 <_strtod_l+0x4a>
 801438c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801438e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014392:	2b00      	cmp	r3, #0
 8014394:	f040 856e 	bne.w	8014e74 <_strtod_l+0xbac>
 8014398:	4652      	mov	r2, sl
 801439a:	465b      	mov	r3, fp
 801439c:	e7e1      	b.n	8014362 <_strtod_l+0x9a>
 801439e:	2200      	movs	r2, #0
 80143a0:	e7ee      	b.n	8014380 <_strtod_l+0xb8>
 80143a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80143a4:	b13a      	cbz	r2, 80143b6 <_strtod_l+0xee>
 80143a6:	2135      	movs	r1, #53	; 0x35
 80143a8:	a81a      	add	r0, sp, #104	; 0x68
 80143aa:	f002 fde6 	bl	8016f7a <__copybits>
 80143ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80143b0:	4620      	mov	r0, r4
 80143b2:	f002 f9a5 	bl	8016700 <_Bfree>
 80143b6:	3f01      	subs	r7, #1
 80143b8:	2f04      	cmp	r7, #4
 80143ba:	d806      	bhi.n	80143ca <_strtod_l+0x102>
 80143bc:	e8df f007 	tbb	[pc, r7]
 80143c0:	1714030a 	.word	0x1714030a
 80143c4:	0a          	.byte	0x0a
 80143c5:	00          	.byte	0x00
 80143c6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80143ca:	0728      	lsls	r0, r5, #28
 80143cc:	d5c0      	bpl.n	8014350 <_strtod_l+0x88>
 80143ce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80143d2:	e7bd      	b.n	8014350 <_strtod_l+0x88>
 80143d4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80143d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80143da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80143de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80143e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80143e6:	e7f0      	b.n	80143ca <_strtod_l+0x102>
 80143e8:	f8df b180 	ldr.w	fp, [pc, #384]	; 801456c <_strtod_l+0x2a4>
 80143ec:	e7ed      	b.n	80143ca <_strtod_l+0x102>
 80143ee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80143f2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80143f6:	e7e8      	b.n	80143ca <_strtod_l+0x102>
 80143f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80143fa:	1c5a      	adds	r2, r3, #1
 80143fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80143fe:	785b      	ldrb	r3, [r3, #1]
 8014400:	2b30      	cmp	r3, #48	; 0x30
 8014402:	d0f9      	beq.n	80143f8 <_strtod_l+0x130>
 8014404:	2b00      	cmp	r3, #0
 8014406:	d0a3      	beq.n	8014350 <_strtod_l+0x88>
 8014408:	2301      	movs	r3, #1
 801440a:	f04f 0900 	mov.w	r9, #0
 801440e:	9304      	str	r3, [sp, #16]
 8014410:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014412:	9308      	str	r3, [sp, #32]
 8014414:	f8cd 901c 	str.w	r9, [sp, #28]
 8014418:	464f      	mov	r7, r9
 801441a:	220a      	movs	r2, #10
 801441c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801441e:	7806      	ldrb	r6, [r0, #0]
 8014420:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014424:	b2d9      	uxtb	r1, r3
 8014426:	2909      	cmp	r1, #9
 8014428:	d92a      	bls.n	8014480 <_strtod_l+0x1b8>
 801442a:	9905      	ldr	r1, [sp, #20]
 801442c:	462a      	mov	r2, r5
 801442e:	f7ff fef1 	bl	8014214 <strncmp>
 8014432:	b398      	cbz	r0, 801449c <_strtod_l+0x1d4>
 8014434:	2000      	movs	r0, #0
 8014436:	4632      	mov	r2, r6
 8014438:	463d      	mov	r5, r7
 801443a:	9005      	str	r0, [sp, #20]
 801443c:	4603      	mov	r3, r0
 801443e:	2a65      	cmp	r2, #101	; 0x65
 8014440:	d001      	beq.n	8014446 <_strtod_l+0x17e>
 8014442:	2a45      	cmp	r2, #69	; 0x45
 8014444:	d118      	bne.n	8014478 <_strtod_l+0x1b0>
 8014446:	b91d      	cbnz	r5, 8014450 <_strtod_l+0x188>
 8014448:	9a04      	ldr	r2, [sp, #16]
 801444a:	4302      	orrs	r2, r0
 801444c:	d09e      	beq.n	801438c <_strtod_l+0xc4>
 801444e:	2500      	movs	r5, #0
 8014450:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8014454:	f108 0201 	add.w	r2, r8, #1
 8014458:	9217      	str	r2, [sp, #92]	; 0x5c
 801445a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801445e:	2a2b      	cmp	r2, #43	; 0x2b
 8014460:	d075      	beq.n	801454e <_strtod_l+0x286>
 8014462:	2a2d      	cmp	r2, #45	; 0x2d
 8014464:	d07b      	beq.n	801455e <_strtod_l+0x296>
 8014466:	f04f 0c00 	mov.w	ip, #0
 801446a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801446e:	2909      	cmp	r1, #9
 8014470:	f240 8082 	bls.w	8014578 <_strtod_l+0x2b0>
 8014474:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014478:	2600      	movs	r6, #0
 801447a:	e09d      	b.n	80145b8 <_strtod_l+0x2f0>
 801447c:	2300      	movs	r3, #0
 801447e:	e7c4      	b.n	801440a <_strtod_l+0x142>
 8014480:	2f08      	cmp	r7, #8
 8014482:	bfd8      	it	le
 8014484:	9907      	ldrle	r1, [sp, #28]
 8014486:	f100 0001 	add.w	r0, r0, #1
 801448a:	bfda      	itte	le
 801448c:	fb02 3301 	mlale	r3, r2, r1, r3
 8014490:	9307      	strle	r3, [sp, #28]
 8014492:	fb02 3909 	mlagt	r9, r2, r9, r3
 8014496:	3701      	adds	r7, #1
 8014498:	9017      	str	r0, [sp, #92]	; 0x5c
 801449a:	e7bf      	b.n	801441c <_strtod_l+0x154>
 801449c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801449e:	195a      	adds	r2, r3, r5
 80144a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80144a2:	5d5a      	ldrb	r2, [r3, r5]
 80144a4:	2f00      	cmp	r7, #0
 80144a6:	d037      	beq.n	8014518 <_strtod_l+0x250>
 80144a8:	9005      	str	r0, [sp, #20]
 80144aa:	463d      	mov	r5, r7
 80144ac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80144b0:	2b09      	cmp	r3, #9
 80144b2:	d912      	bls.n	80144da <_strtod_l+0x212>
 80144b4:	2301      	movs	r3, #1
 80144b6:	e7c2      	b.n	801443e <_strtod_l+0x176>
 80144b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80144ba:	1c5a      	adds	r2, r3, #1
 80144bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80144be:	785a      	ldrb	r2, [r3, #1]
 80144c0:	3001      	adds	r0, #1
 80144c2:	2a30      	cmp	r2, #48	; 0x30
 80144c4:	d0f8      	beq.n	80144b8 <_strtod_l+0x1f0>
 80144c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80144ca:	2b08      	cmp	r3, #8
 80144cc:	f200 84d9 	bhi.w	8014e82 <_strtod_l+0xbba>
 80144d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80144d2:	9005      	str	r0, [sp, #20]
 80144d4:	2000      	movs	r0, #0
 80144d6:	9308      	str	r3, [sp, #32]
 80144d8:	4605      	mov	r5, r0
 80144da:	3a30      	subs	r2, #48	; 0x30
 80144dc:	f100 0301 	add.w	r3, r0, #1
 80144e0:	d014      	beq.n	801450c <_strtod_l+0x244>
 80144e2:	9905      	ldr	r1, [sp, #20]
 80144e4:	4419      	add	r1, r3
 80144e6:	9105      	str	r1, [sp, #20]
 80144e8:	462b      	mov	r3, r5
 80144ea:	eb00 0e05 	add.w	lr, r0, r5
 80144ee:	210a      	movs	r1, #10
 80144f0:	4573      	cmp	r3, lr
 80144f2:	d113      	bne.n	801451c <_strtod_l+0x254>
 80144f4:	182b      	adds	r3, r5, r0
 80144f6:	2b08      	cmp	r3, #8
 80144f8:	f105 0501 	add.w	r5, r5, #1
 80144fc:	4405      	add	r5, r0
 80144fe:	dc1c      	bgt.n	801453a <_strtod_l+0x272>
 8014500:	9907      	ldr	r1, [sp, #28]
 8014502:	230a      	movs	r3, #10
 8014504:	fb03 2301 	mla	r3, r3, r1, r2
 8014508:	9307      	str	r3, [sp, #28]
 801450a:	2300      	movs	r3, #0
 801450c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801450e:	1c51      	adds	r1, r2, #1
 8014510:	9117      	str	r1, [sp, #92]	; 0x5c
 8014512:	7852      	ldrb	r2, [r2, #1]
 8014514:	4618      	mov	r0, r3
 8014516:	e7c9      	b.n	80144ac <_strtod_l+0x1e4>
 8014518:	4638      	mov	r0, r7
 801451a:	e7d2      	b.n	80144c2 <_strtod_l+0x1fa>
 801451c:	2b08      	cmp	r3, #8
 801451e:	dc04      	bgt.n	801452a <_strtod_l+0x262>
 8014520:	9e07      	ldr	r6, [sp, #28]
 8014522:	434e      	muls	r6, r1
 8014524:	9607      	str	r6, [sp, #28]
 8014526:	3301      	adds	r3, #1
 8014528:	e7e2      	b.n	80144f0 <_strtod_l+0x228>
 801452a:	f103 0c01 	add.w	ip, r3, #1
 801452e:	f1bc 0f10 	cmp.w	ip, #16
 8014532:	bfd8      	it	le
 8014534:	fb01 f909 	mulle.w	r9, r1, r9
 8014538:	e7f5      	b.n	8014526 <_strtod_l+0x25e>
 801453a:	2d10      	cmp	r5, #16
 801453c:	bfdc      	itt	le
 801453e:	230a      	movle	r3, #10
 8014540:	fb03 2909 	mlale	r9, r3, r9, r2
 8014544:	e7e1      	b.n	801450a <_strtod_l+0x242>
 8014546:	2300      	movs	r3, #0
 8014548:	9305      	str	r3, [sp, #20]
 801454a:	2301      	movs	r3, #1
 801454c:	e77c      	b.n	8014448 <_strtod_l+0x180>
 801454e:	f04f 0c00 	mov.w	ip, #0
 8014552:	f108 0202 	add.w	r2, r8, #2
 8014556:	9217      	str	r2, [sp, #92]	; 0x5c
 8014558:	f898 2002 	ldrb.w	r2, [r8, #2]
 801455c:	e785      	b.n	801446a <_strtod_l+0x1a2>
 801455e:	f04f 0c01 	mov.w	ip, #1
 8014562:	e7f6      	b.n	8014552 <_strtod_l+0x28a>
 8014564:	080196e8 	.word	0x080196e8
 8014568:	080195a0 	.word	0x080195a0
 801456c:	7ff00000 	.word	0x7ff00000
 8014570:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014572:	1c51      	adds	r1, r2, #1
 8014574:	9117      	str	r1, [sp, #92]	; 0x5c
 8014576:	7852      	ldrb	r2, [r2, #1]
 8014578:	2a30      	cmp	r2, #48	; 0x30
 801457a:	d0f9      	beq.n	8014570 <_strtod_l+0x2a8>
 801457c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8014580:	2908      	cmp	r1, #8
 8014582:	f63f af79 	bhi.w	8014478 <_strtod_l+0x1b0>
 8014586:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801458a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801458c:	9206      	str	r2, [sp, #24]
 801458e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014590:	1c51      	adds	r1, r2, #1
 8014592:	9117      	str	r1, [sp, #92]	; 0x5c
 8014594:	7852      	ldrb	r2, [r2, #1]
 8014596:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801459a:	2e09      	cmp	r6, #9
 801459c:	d937      	bls.n	801460e <_strtod_l+0x346>
 801459e:	9e06      	ldr	r6, [sp, #24]
 80145a0:	1b89      	subs	r1, r1, r6
 80145a2:	2908      	cmp	r1, #8
 80145a4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80145a8:	dc02      	bgt.n	80145b0 <_strtod_l+0x2e8>
 80145aa:	4576      	cmp	r6, lr
 80145ac:	bfa8      	it	ge
 80145ae:	4676      	movge	r6, lr
 80145b0:	f1bc 0f00 	cmp.w	ip, #0
 80145b4:	d000      	beq.n	80145b8 <_strtod_l+0x2f0>
 80145b6:	4276      	negs	r6, r6
 80145b8:	2d00      	cmp	r5, #0
 80145ba:	d14d      	bne.n	8014658 <_strtod_l+0x390>
 80145bc:	9904      	ldr	r1, [sp, #16]
 80145be:	4301      	orrs	r1, r0
 80145c0:	f47f aec6 	bne.w	8014350 <_strtod_l+0x88>
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	f47f aee1 	bne.w	801438c <_strtod_l+0xc4>
 80145ca:	2a69      	cmp	r2, #105	; 0x69
 80145cc:	d027      	beq.n	801461e <_strtod_l+0x356>
 80145ce:	dc24      	bgt.n	801461a <_strtod_l+0x352>
 80145d0:	2a49      	cmp	r2, #73	; 0x49
 80145d2:	d024      	beq.n	801461e <_strtod_l+0x356>
 80145d4:	2a4e      	cmp	r2, #78	; 0x4e
 80145d6:	f47f aed9 	bne.w	801438c <_strtod_l+0xc4>
 80145da:	499f      	ldr	r1, [pc, #636]	; (8014858 <_strtod_l+0x590>)
 80145dc:	a817      	add	r0, sp, #92	; 0x5c
 80145de:	f001 ff6b 	bl	80164b8 <__match>
 80145e2:	2800      	cmp	r0, #0
 80145e4:	f43f aed2 	beq.w	801438c <_strtod_l+0xc4>
 80145e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80145ea:	781b      	ldrb	r3, [r3, #0]
 80145ec:	2b28      	cmp	r3, #40	; 0x28
 80145ee:	d12d      	bne.n	801464c <_strtod_l+0x384>
 80145f0:	499a      	ldr	r1, [pc, #616]	; (801485c <_strtod_l+0x594>)
 80145f2:	aa1a      	add	r2, sp, #104	; 0x68
 80145f4:	a817      	add	r0, sp, #92	; 0x5c
 80145f6:	f001 ff73 	bl	80164e0 <__hexnan>
 80145fa:	2805      	cmp	r0, #5
 80145fc:	d126      	bne.n	801464c <_strtod_l+0x384>
 80145fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014600:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8014604:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014608:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801460c:	e6a0      	b.n	8014350 <_strtod_l+0x88>
 801460e:	210a      	movs	r1, #10
 8014610:	fb01 2e0e 	mla	lr, r1, lr, r2
 8014614:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8014618:	e7b9      	b.n	801458e <_strtod_l+0x2c6>
 801461a:	2a6e      	cmp	r2, #110	; 0x6e
 801461c:	e7db      	b.n	80145d6 <_strtod_l+0x30e>
 801461e:	4990      	ldr	r1, [pc, #576]	; (8014860 <_strtod_l+0x598>)
 8014620:	a817      	add	r0, sp, #92	; 0x5c
 8014622:	f001 ff49 	bl	80164b8 <__match>
 8014626:	2800      	cmp	r0, #0
 8014628:	f43f aeb0 	beq.w	801438c <_strtod_l+0xc4>
 801462c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801462e:	498d      	ldr	r1, [pc, #564]	; (8014864 <_strtod_l+0x59c>)
 8014630:	3b01      	subs	r3, #1
 8014632:	a817      	add	r0, sp, #92	; 0x5c
 8014634:	9317      	str	r3, [sp, #92]	; 0x5c
 8014636:	f001 ff3f 	bl	80164b8 <__match>
 801463a:	b910      	cbnz	r0, 8014642 <_strtod_l+0x37a>
 801463c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801463e:	3301      	adds	r3, #1
 8014640:	9317      	str	r3, [sp, #92]	; 0x5c
 8014642:	f8df b230 	ldr.w	fp, [pc, #560]	; 8014874 <_strtod_l+0x5ac>
 8014646:	f04f 0a00 	mov.w	sl, #0
 801464a:	e681      	b.n	8014350 <_strtod_l+0x88>
 801464c:	4886      	ldr	r0, [pc, #536]	; (8014868 <_strtod_l+0x5a0>)
 801464e:	f002 fe47 	bl	80172e0 <nan>
 8014652:	ec5b ab10 	vmov	sl, fp, d0
 8014656:	e67b      	b.n	8014350 <_strtod_l+0x88>
 8014658:	9b05      	ldr	r3, [sp, #20]
 801465a:	9807      	ldr	r0, [sp, #28]
 801465c:	1af3      	subs	r3, r6, r3
 801465e:	2f00      	cmp	r7, #0
 8014660:	bf08      	it	eq
 8014662:	462f      	moveq	r7, r5
 8014664:	2d10      	cmp	r5, #16
 8014666:	9306      	str	r3, [sp, #24]
 8014668:	46a8      	mov	r8, r5
 801466a:	bfa8      	it	ge
 801466c:	f04f 0810 	movge.w	r8, #16
 8014670:	f7eb ff48 	bl	8000504 <__aeabi_ui2d>
 8014674:	2d09      	cmp	r5, #9
 8014676:	4682      	mov	sl, r0
 8014678:	468b      	mov	fp, r1
 801467a:	dd13      	ble.n	80146a4 <_strtod_l+0x3dc>
 801467c:	4b7b      	ldr	r3, [pc, #492]	; (801486c <_strtod_l+0x5a4>)
 801467e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014682:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014686:	f7eb ffb7 	bl	80005f8 <__aeabi_dmul>
 801468a:	4682      	mov	sl, r0
 801468c:	4648      	mov	r0, r9
 801468e:	468b      	mov	fp, r1
 8014690:	f7eb ff38 	bl	8000504 <__aeabi_ui2d>
 8014694:	4602      	mov	r2, r0
 8014696:	460b      	mov	r3, r1
 8014698:	4650      	mov	r0, sl
 801469a:	4659      	mov	r1, fp
 801469c:	f7eb fdf6 	bl	800028c <__adddf3>
 80146a0:	4682      	mov	sl, r0
 80146a2:	468b      	mov	fp, r1
 80146a4:	2d0f      	cmp	r5, #15
 80146a6:	dc38      	bgt.n	801471a <_strtod_l+0x452>
 80146a8:	9b06      	ldr	r3, [sp, #24]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	f43f ae50 	beq.w	8014350 <_strtod_l+0x88>
 80146b0:	dd24      	ble.n	80146fc <_strtod_l+0x434>
 80146b2:	2b16      	cmp	r3, #22
 80146b4:	dc0b      	bgt.n	80146ce <_strtod_l+0x406>
 80146b6:	496d      	ldr	r1, [pc, #436]	; (801486c <_strtod_l+0x5a4>)
 80146b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80146bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80146c0:	4652      	mov	r2, sl
 80146c2:	465b      	mov	r3, fp
 80146c4:	f7eb ff98 	bl	80005f8 <__aeabi_dmul>
 80146c8:	4682      	mov	sl, r0
 80146ca:	468b      	mov	fp, r1
 80146cc:	e640      	b.n	8014350 <_strtod_l+0x88>
 80146ce:	9a06      	ldr	r2, [sp, #24]
 80146d0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80146d4:	4293      	cmp	r3, r2
 80146d6:	db20      	blt.n	801471a <_strtod_l+0x452>
 80146d8:	4c64      	ldr	r4, [pc, #400]	; (801486c <_strtod_l+0x5a4>)
 80146da:	f1c5 050f 	rsb	r5, r5, #15
 80146de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80146e2:	4652      	mov	r2, sl
 80146e4:	465b      	mov	r3, fp
 80146e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80146ea:	f7eb ff85 	bl	80005f8 <__aeabi_dmul>
 80146ee:	9b06      	ldr	r3, [sp, #24]
 80146f0:	1b5d      	subs	r5, r3, r5
 80146f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80146f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80146fa:	e7e3      	b.n	80146c4 <_strtod_l+0x3fc>
 80146fc:	9b06      	ldr	r3, [sp, #24]
 80146fe:	3316      	adds	r3, #22
 8014700:	db0b      	blt.n	801471a <_strtod_l+0x452>
 8014702:	9b05      	ldr	r3, [sp, #20]
 8014704:	1b9e      	subs	r6, r3, r6
 8014706:	4b59      	ldr	r3, [pc, #356]	; (801486c <_strtod_l+0x5a4>)
 8014708:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801470c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014710:	4650      	mov	r0, sl
 8014712:	4659      	mov	r1, fp
 8014714:	f7ec f89a 	bl	800084c <__aeabi_ddiv>
 8014718:	e7d6      	b.n	80146c8 <_strtod_l+0x400>
 801471a:	9b06      	ldr	r3, [sp, #24]
 801471c:	eba5 0808 	sub.w	r8, r5, r8
 8014720:	4498      	add	r8, r3
 8014722:	f1b8 0f00 	cmp.w	r8, #0
 8014726:	dd74      	ble.n	8014812 <_strtod_l+0x54a>
 8014728:	f018 030f 	ands.w	r3, r8, #15
 801472c:	d00a      	beq.n	8014744 <_strtod_l+0x47c>
 801472e:	494f      	ldr	r1, [pc, #316]	; (801486c <_strtod_l+0x5a4>)
 8014730:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014734:	4652      	mov	r2, sl
 8014736:	465b      	mov	r3, fp
 8014738:	e9d1 0100 	ldrd	r0, r1, [r1]
 801473c:	f7eb ff5c 	bl	80005f8 <__aeabi_dmul>
 8014740:	4682      	mov	sl, r0
 8014742:	468b      	mov	fp, r1
 8014744:	f038 080f 	bics.w	r8, r8, #15
 8014748:	d04f      	beq.n	80147ea <_strtod_l+0x522>
 801474a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801474e:	dd22      	ble.n	8014796 <_strtod_l+0x4ce>
 8014750:	2500      	movs	r5, #0
 8014752:	462e      	mov	r6, r5
 8014754:	9507      	str	r5, [sp, #28]
 8014756:	9505      	str	r5, [sp, #20]
 8014758:	2322      	movs	r3, #34	; 0x22
 801475a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8014874 <_strtod_l+0x5ac>
 801475e:	6023      	str	r3, [r4, #0]
 8014760:	f04f 0a00 	mov.w	sl, #0
 8014764:	9b07      	ldr	r3, [sp, #28]
 8014766:	2b00      	cmp	r3, #0
 8014768:	f43f adf2 	beq.w	8014350 <_strtod_l+0x88>
 801476c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801476e:	4620      	mov	r0, r4
 8014770:	f001 ffc6 	bl	8016700 <_Bfree>
 8014774:	9905      	ldr	r1, [sp, #20]
 8014776:	4620      	mov	r0, r4
 8014778:	f001 ffc2 	bl	8016700 <_Bfree>
 801477c:	4631      	mov	r1, r6
 801477e:	4620      	mov	r0, r4
 8014780:	f001 ffbe 	bl	8016700 <_Bfree>
 8014784:	9907      	ldr	r1, [sp, #28]
 8014786:	4620      	mov	r0, r4
 8014788:	f001 ffba 	bl	8016700 <_Bfree>
 801478c:	4629      	mov	r1, r5
 801478e:	4620      	mov	r0, r4
 8014790:	f001 ffb6 	bl	8016700 <_Bfree>
 8014794:	e5dc      	b.n	8014350 <_strtod_l+0x88>
 8014796:	4b36      	ldr	r3, [pc, #216]	; (8014870 <_strtod_l+0x5a8>)
 8014798:	9304      	str	r3, [sp, #16]
 801479a:	2300      	movs	r3, #0
 801479c:	ea4f 1828 	mov.w	r8, r8, asr #4
 80147a0:	4650      	mov	r0, sl
 80147a2:	4659      	mov	r1, fp
 80147a4:	4699      	mov	r9, r3
 80147a6:	f1b8 0f01 	cmp.w	r8, #1
 80147aa:	dc21      	bgt.n	80147f0 <_strtod_l+0x528>
 80147ac:	b10b      	cbz	r3, 80147b2 <_strtod_l+0x4ea>
 80147ae:	4682      	mov	sl, r0
 80147b0:	468b      	mov	fp, r1
 80147b2:	4b2f      	ldr	r3, [pc, #188]	; (8014870 <_strtod_l+0x5a8>)
 80147b4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80147b8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80147bc:	4652      	mov	r2, sl
 80147be:	465b      	mov	r3, fp
 80147c0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80147c4:	f7eb ff18 	bl	80005f8 <__aeabi_dmul>
 80147c8:	4b2a      	ldr	r3, [pc, #168]	; (8014874 <_strtod_l+0x5ac>)
 80147ca:	460a      	mov	r2, r1
 80147cc:	400b      	ands	r3, r1
 80147ce:	492a      	ldr	r1, [pc, #168]	; (8014878 <_strtod_l+0x5b0>)
 80147d0:	428b      	cmp	r3, r1
 80147d2:	4682      	mov	sl, r0
 80147d4:	d8bc      	bhi.n	8014750 <_strtod_l+0x488>
 80147d6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80147da:	428b      	cmp	r3, r1
 80147dc:	bf86      	itte	hi
 80147de:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801487c <_strtod_l+0x5b4>
 80147e2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80147e6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80147ea:	2300      	movs	r3, #0
 80147ec:	9304      	str	r3, [sp, #16]
 80147ee:	e084      	b.n	80148fa <_strtod_l+0x632>
 80147f0:	f018 0f01 	tst.w	r8, #1
 80147f4:	d005      	beq.n	8014802 <_strtod_l+0x53a>
 80147f6:	9b04      	ldr	r3, [sp, #16]
 80147f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147fc:	f7eb fefc 	bl	80005f8 <__aeabi_dmul>
 8014800:	2301      	movs	r3, #1
 8014802:	9a04      	ldr	r2, [sp, #16]
 8014804:	3208      	adds	r2, #8
 8014806:	f109 0901 	add.w	r9, r9, #1
 801480a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801480e:	9204      	str	r2, [sp, #16]
 8014810:	e7c9      	b.n	80147a6 <_strtod_l+0x4de>
 8014812:	d0ea      	beq.n	80147ea <_strtod_l+0x522>
 8014814:	f1c8 0800 	rsb	r8, r8, #0
 8014818:	f018 020f 	ands.w	r2, r8, #15
 801481c:	d00a      	beq.n	8014834 <_strtod_l+0x56c>
 801481e:	4b13      	ldr	r3, [pc, #76]	; (801486c <_strtod_l+0x5a4>)
 8014820:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014824:	4650      	mov	r0, sl
 8014826:	4659      	mov	r1, fp
 8014828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801482c:	f7ec f80e 	bl	800084c <__aeabi_ddiv>
 8014830:	4682      	mov	sl, r0
 8014832:	468b      	mov	fp, r1
 8014834:	ea5f 1828 	movs.w	r8, r8, asr #4
 8014838:	d0d7      	beq.n	80147ea <_strtod_l+0x522>
 801483a:	f1b8 0f1f 	cmp.w	r8, #31
 801483e:	dd1f      	ble.n	8014880 <_strtod_l+0x5b8>
 8014840:	2500      	movs	r5, #0
 8014842:	462e      	mov	r6, r5
 8014844:	9507      	str	r5, [sp, #28]
 8014846:	9505      	str	r5, [sp, #20]
 8014848:	2322      	movs	r3, #34	; 0x22
 801484a:	f04f 0a00 	mov.w	sl, #0
 801484e:	f04f 0b00 	mov.w	fp, #0
 8014852:	6023      	str	r3, [r4, #0]
 8014854:	e786      	b.n	8014764 <_strtod_l+0x49c>
 8014856:	bf00      	nop
 8014858:	08019579 	.word	0x08019579
 801485c:	080195b4 	.word	0x080195b4
 8014860:	08019571 	.word	0x08019571
 8014864:	080195f3 	.word	0x080195f3
 8014868:	080198a0 	.word	0x080198a0
 801486c:	08019780 	.word	0x08019780
 8014870:	08019758 	.word	0x08019758
 8014874:	7ff00000 	.word	0x7ff00000
 8014878:	7ca00000 	.word	0x7ca00000
 801487c:	7fefffff 	.word	0x7fefffff
 8014880:	f018 0310 	ands.w	r3, r8, #16
 8014884:	bf18      	it	ne
 8014886:	236a      	movne	r3, #106	; 0x6a
 8014888:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8014c38 <_strtod_l+0x970>
 801488c:	9304      	str	r3, [sp, #16]
 801488e:	4650      	mov	r0, sl
 8014890:	4659      	mov	r1, fp
 8014892:	2300      	movs	r3, #0
 8014894:	f018 0f01 	tst.w	r8, #1
 8014898:	d004      	beq.n	80148a4 <_strtod_l+0x5dc>
 801489a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801489e:	f7eb feab 	bl	80005f8 <__aeabi_dmul>
 80148a2:	2301      	movs	r3, #1
 80148a4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80148a8:	f109 0908 	add.w	r9, r9, #8
 80148ac:	d1f2      	bne.n	8014894 <_strtod_l+0x5cc>
 80148ae:	b10b      	cbz	r3, 80148b4 <_strtod_l+0x5ec>
 80148b0:	4682      	mov	sl, r0
 80148b2:	468b      	mov	fp, r1
 80148b4:	9b04      	ldr	r3, [sp, #16]
 80148b6:	b1c3      	cbz	r3, 80148ea <_strtod_l+0x622>
 80148b8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80148bc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	4659      	mov	r1, fp
 80148c4:	dd11      	ble.n	80148ea <_strtod_l+0x622>
 80148c6:	2b1f      	cmp	r3, #31
 80148c8:	f340 8124 	ble.w	8014b14 <_strtod_l+0x84c>
 80148cc:	2b34      	cmp	r3, #52	; 0x34
 80148ce:	bfde      	ittt	le
 80148d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80148d4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80148d8:	fa03 f202 	lslle.w	r2, r3, r2
 80148dc:	f04f 0a00 	mov.w	sl, #0
 80148e0:	bfcc      	ite	gt
 80148e2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80148e6:	ea02 0b01 	andle.w	fp, r2, r1
 80148ea:	2200      	movs	r2, #0
 80148ec:	2300      	movs	r3, #0
 80148ee:	4650      	mov	r0, sl
 80148f0:	4659      	mov	r1, fp
 80148f2:	f7ec f8e9 	bl	8000ac8 <__aeabi_dcmpeq>
 80148f6:	2800      	cmp	r0, #0
 80148f8:	d1a2      	bne.n	8014840 <_strtod_l+0x578>
 80148fa:	9b07      	ldr	r3, [sp, #28]
 80148fc:	9300      	str	r3, [sp, #0]
 80148fe:	9908      	ldr	r1, [sp, #32]
 8014900:	462b      	mov	r3, r5
 8014902:	463a      	mov	r2, r7
 8014904:	4620      	mov	r0, r4
 8014906:	f001 ff63 	bl	80167d0 <__s2b>
 801490a:	9007      	str	r0, [sp, #28]
 801490c:	2800      	cmp	r0, #0
 801490e:	f43f af1f 	beq.w	8014750 <_strtod_l+0x488>
 8014912:	9b05      	ldr	r3, [sp, #20]
 8014914:	1b9e      	subs	r6, r3, r6
 8014916:	9b06      	ldr	r3, [sp, #24]
 8014918:	2b00      	cmp	r3, #0
 801491a:	bfb4      	ite	lt
 801491c:	4633      	movlt	r3, r6
 801491e:	2300      	movge	r3, #0
 8014920:	930c      	str	r3, [sp, #48]	; 0x30
 8014922:	9b06      	ldr	r3, [sp, #24]
 8014924:	2500      	movs	r5, #0
 8014926:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801492a:	9312      	str	r3, [sp, #72]	; 0x48
 801492c:	462e      	mov	r6, r5
 801492e:	9b07      	ldr	r3, [sp, #28]
 8014930:	4620      	mov	r0, r4
 8014932:	6859      	ldr	r1, [r3, #4]
 8014934:	f001 fea4 	bl	8016680 <_Balloc>
 8014938:	9005      	str	r0, [sp, #20]
 801493a:	2800      	cmp	r0, #0
 801493c:	f43f af0c 	beq.w	8014758 <_strtod_l+0x490>
 8014940:	9b07      	ldr	r3, [sp, #28]
 8014942:	691a      	ldr	r2, [r3, #16]
 8014944:	3202      	adds	r2, #2
 8014946:	f103 010c 	add.w	r1, r3, #12
 801494a:	0092      	lsls	r2, r2, #2
 801494c:	300c      	adds	r0, #12
 801494e:	f7fe fdf9 	bl	8013544 <memcpy>
 8014952:	ec4b ab10 	vmov	d0, sl, fp
 8014956:	aa1a      	add	r2, sp, #104	; 0x68
 8014958:	a919      	add	r1, sp, #100	; 0x64
 801495a:	4620      	mov	r0, r4
 801495c:	f002 fa7e 	bl	8016e5c <__d2b>
 8014960:	ec4b ab18 	vmov	d8, sl, fp
 8014964:	9018      	str	r0, [sp, #96]	; 0x60
 8014966:	2800      	cmp	r0, #0
 8014968:	f43f aef6 	beq.w	8014758 <_strtod_l+0x490>
 801496c:	2101      	movs	r1, #1
 801496e:	4620      	mov	r0, r4
 8014970:	f001 ffc8 	bl	8016904 <__i2b>
 8014974:	4606      	mov	r6, r0
 8014976:	2800      	cmp	r0, #0
 8014978:	f43f aeee 	beq.w	8014758 <_strtod_l+0x490>
 801497c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801497e:	9904      	ldr	r1, [sp, #16]
 8014980:	2b00      	cmp	r3, #0
 8014982:	bfab      	itete	ge
 8014984:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8014986:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8014988:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801498a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801498e:	bfac      	ite	ge
 8014990:	eb03 0902 	addge.w	r9, r3, r2
 8014994:	1ad7      	sublt	r7, r2, r3
 8014996:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014998:	eba3 0801 	sub.w	r8, r3, r1
 801499c:	4490      	add	r8, r2
 801499e:	4ba1      	ldr	r3, [pc, #644]	; (8014c24 <_strtod_l+0x95c>)
 80149a0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80149a4:	4598      	cmp	r8, r3
 80149a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80149aa:	f280 80c7 	bge.w	8014b3c <_strtod_l+0x874>
 80149ae:	eba3 0308 	sub.w	r3, r3, r8
 80149b2:	2b1f      	cmp	r3, #31
 80149b4:	eba2 0203 	sub.w	r2, r2, r3
 80149b8:	f04f 0101 	mov.w	r1, #1
 80149bc:	f300 80b1 	bgt.w	8014b22 <_strtod_l+0x85a>
 80149c0:	fa01 f303 	lsl.w	r3, r1, r3
 80149c4:	930d      	str	r3, [sp, #52]	; 0x34
 80149c6:	2300      	movs	r3, #0
 80149c8:	9308      	str	r3, [sp, #32]
 80149ca:	eb09 0802 	add.w	r8, r9, r2
 80149ce:	9b04      	ldr	r3, [sp, #16]
 80149d0:	45c1      	cmp	r9, r8
 80149d2:	4417      	add	r7, r2
 80149d4:	441f      	add	r7, r3
 80149d6:	464b      	mov	r3, r9
 80149d8:	bfa8      	it	ge
 80149da:	4643      	movge	r3, r8
 80149dc:	42bb      	cmp	r3, r7
 80149de:	bfa8      	it	ge
 80149e0:	463b      	movge	r3, r7
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	bfc2      	ittt	gt
 80149e6:	eba8 0803 	subgt.w	r8, r8, r3
 80149ea:	1aff      	subgt	r7, r7, r3
 80149ec:	eba9 0903 	subgt.w	r9, r9, r3
 80149f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	dd17      	ble.n	8014a26 <_strtod_l+0x75e>
 80149f6:	4631      	mov	r1, r6
 80149f8:	461a      	mov	r2, r3
 80149fa:	4620      	mov	r0, r4
 80149fc:	f002 f842 	bl	8016a84 <__pow5mult>
 8014a00:	4606      	mov	r6, r0
 8014a02:	2800      	cmp	r0, #0
 8014a04:	f43f aea8 	beq.w	8014758 <_strtod_l+0x490>
 8014a08:	4601      	mov	r1, r0
 8014a0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014a0c:	4620      	mov	r0, r4
 8014a0e:	f001 ff8f 	bl	8016930 <__multiply>
 8014a12:	900b      	str	r0, [sp, #44]	; 0x2c
 8014a14:	2800      	cmp	r0, #0
 8014a16:	f43f ae9f 	beq.w	8014758 <_strtod_l+0x490>
 8014a1a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014a1c:	4620      	mov	r0, r4
 8014a1e:	f001 fe6f 	bl	8016700 <_Bfree>
 8014a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a24:	9318      	str	r3, [sp, #96]	; 0x60
 8014a26:	f1b8 0f00 	cmp.w	r8, #0
 8014a2a:	f300 808c 	bgt.w	8014b46 <_strtod_l+0x87e>
 8014a2e:	9b06      	ldr	r3, [sp, #24]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	dd08      	ble.n	8014a46 <_strtod_l+0x77e>
 8014a34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014a36:	9905      	ldr	r1, [sp, #20]
 8014a38:	4620      	mov	r0, r4
 8014a3a:	f002 f823 	bl	8016a84 <__pow5mult>
 8014a3e:	9005      	str	r0, [sp, #20]
 8014a40:	2800      	cmp	r0, #0
 8014a42:	f43f ae89 	beq.w	8014758 <_strtod_l+0x490>
 8014a46:	2f00      	cmp	r7, #0
 8014a48:	dd08      	ble.n	8014a5c <_strtod_l+0x794>
 8014a4a:	9905      	ldr	r1, [sp, #20]
 8014a4c:	463a      	mov	r2, r7
 8014a4e:	4620      	mov	r0, r4
 8014a50:	f002 f872 	bl	8016b38 <__lshift>
 8014a54:	9005      	str	r0, [sp, #20]
 8014a56:	2800      	cmp	r0, #0
 8014a58:	f43f ae7e 	beq.w	8014758 <_strtod_l+0x490>
 8014a5c:	f1b9 0f00 	cmp.w	r9, #0
 8014a60:	dd08      	ble.n	8014a74 <_strtod_l+0x7ac>
 8014a62:	4631      	mov	r1, r6
 8014a64:	464a      	mov	r2, r9
 8014a66:	4620      	mov	r0, r4
 8014a68:	f002 f866 	bl	8016b38 <__lshift>
 8014a6c:	4606      	mov	r6, r0
 8014a6e:	2800      	cmp	r0, #0
 8014a70:	f43f ae72 	beq.w	8014758 <_strtod_l+0x490>
 8014a74:	9a05      	ldr	r2, [sp, #20]
 8014a76:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014a78:	4620      	mov	r0, r4
 8014a7a:	f002 f8e9 	bl	8016c50 <__mdiff>
 8014a7e:	4605      	mov	r5, r0
 8014a80:	2800      	cmp	r0, #0
 8014a82:	f43f ae69 	beq.w	8014758 <_strtod_l+0x490>
 8014a86:	68c3      	ldr	r3, [r0, #12]
 8014a88:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	60c3      	str	r3, [r0, #12]
 8014a8e:	4631      	mov	r1, r6
 8014a90:	f002 f8c2 	bl	8016c18 <__mcmp>
 8014a94:	2800      	cmp	r0, #0
 8014a96:	da60      	bge.n	8014b5a <_strtod_l+0x892>
 8014a98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a9a:	ea53 030a 	orrs.w	r3, r3, sl
 8014a9e:	f040 8082 	bne.w	8014ba6 <_strtod_l+0x8de>
 8014aa2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d17d      	bne.n	8014ba6 <_strtod_l+0x8de>
 8014aaa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014aae:	0d1b      	lsrs	r3, r3, #20
 8014ab0:	051b      	lsls	r3, r3, #20
 8014ab2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014ab6:	d976      	bls.n	8014ba6 <_strtod_l+0x8de>
 8014ab8:	696b      	ldr	r3, [r5, #20]
 8014aba:	b913      	cbnz	r3, 8014ac2 <_strtod_l+0x7fa>
 8014abc:	692b      	ldr	r3, [r5, #16]
 8014abe:	2b01      	cmp	r3, #1
 8014ac0:	dd71      	ble.n	8014ba6 <_strtod_l+0x8de>
 8014ac2:	4629      	mov	r1, r5
 8014ac4:	2201      	movs	r2, #1
 8014ac6:	4620      	mov	r0, r4
 8014ac8:	f002 f836 	bl	8016b38 <__lshift>
 8014acc:	4631      	mov	r1, r6
 8014ace:	4605      	mov	r5, r0
 8014ad0:	f002 f8a2 	bl	8016c18 <__mcmp>
 8014ad4:	2800      	cmp	r0, #0
 8014ad6:	dd66      	ble.n	8014ba6 <_strtod_l+0x8de>
 8014ad8:	9904      	ldr	r1, [sp, #16]
 8014ada:	4a53      	ldr	r2, [pc, #332]	; (8014c28 <_strtod_l+0x960>)
 8014adc:	465b      	mov	r3, fp
 8014ade:	2900      	cmp	r1, #0
 8014ae0:	f000 8081 	beq.w	8014be6 <_strtod_l+0x91e>
 8014ae4:	ea02 010b 	and.w	r1, r2, fp
 8014ae8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014aec:	dc7b      	bgt.n	8014be6 <_strtod_l+0x91e>
 8014aee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014af2:	f77f aea9 	ble.w	8014848 <_strtod_l+0x580>
 8014af6:	4b4d      	ldr	r3, [pc, #308]	; (8014c2c <_strtod_l+0x964>)
 8014af8:	4650      	mov	r0, sl
 8014afa:	4659      	mov	r1, fp
 8014afc:	2200      	movs	r2, #0
 8014afe:	f7eb fd7b 	bl	80005f8 <__aeabi_dmul>
 8014b02:	460b      	mov	r3, r1
 8014b04:	4303      	orrs	r3, r0
 8014b06:	bf08      	it	eq
 8014b08:	2322      	moveq	r3, #34	; 0x22
 8014b0a:	4682      	mov	sl, r0
 8014b0c:	468b      	mov	fp, r1
 8014b0e:	bf08      	it	eq
 8014b10:	6023      	streq	r3, [r4, #0]
 8014b12:	e62b      	b.n	801476c <_strtod_l+0x4a4>
 8014b14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014b18:	fa02 f303 	lsl.w	r3, r2, r3
 8014b1c:	ea03 0a0a 	and.w	sl, r3, sl
 8014b20:	e6e3      	b.n	80148ea <_strtod_l+0x622>
 8014b22:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8014b26:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8014b2a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8014b2e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8014b32:	fa01 f308 	lsl.w	r3, r1, r8
 8014b36:	9308      	str	r3, [sp, #32]
 8014b38:	910d      	str	r1, [sp, #52]	; 0x34
 8014b3a:	e746      	b.n	80149ca <_strtod_l+0x702>
 8014b3c:	2300      	movs	r3, #0
 8014b3e:	9308      	str	r3, [sp, #32]
 8014b40:	2301      	movs	r3, #1
 8014b42:	930d      	str	r3, [sp, #52]	; 0x34
 8014b44:	e741      	b.n	80149ca <_strtod_l+0x702>
 8014b46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014b48:	4642      	mov	r2, r8
 8014b4a:	4620      	mov	r0, r4
 8014b4c:	f001 fff4 	bl	8016b38 <__lshift>
 8014b50:	9018      	str	r0, [sp, #96]	; 0x60
 8014b52:	2800      	cmp	r0, #0
 8014b54:	f47f af6b 	bne.w	8014a2e <_strtod_l+0x766>
 8014b58:	e5fe      	b.n	8014758 <_strtod_l+0x490>
 8014b5a:	465f      	mov	r7, fp
 8014b5c:	d16e      	bne.n	8014c3c <_strtod_l+0x974>
 8014b5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014b60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014b64:	b342      	cbz	r2, 8014bb8 <_strtod_l+0x8f0>
 8014b66:	4a32      	ldr	r2, [pc, #200]	; (8014c30 <_strtod_l+0x968>)
 8014b68:	4293      	cmp	r3, r2
 8014b6a:	d128      	bne.n	8014bbe <_strtod_l+0x8f6>
 8014b6c:	9b04      	ldr	r3, [sp, #16]
 8014b6e:	4651      	mov	r1, sl
 8014b70:	b1eb      	cbz	r3, 8014bae <_strtod_l+0x8e6>
 8014b72:	4b2d      	ldr	r3, [pc, #180]	; (8014c28 <_strtod_l+0x960>)
 8014b74:	403b      	ands	r3, r7
 8014b76:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014b7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014b7e:	d819      	bhi.n	8014bb4 <_strtod_l+0x8ec>
 8014b80:	0d1b      	lsrs	r3, r3, #20
 8014b82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014b86:	fa02 f303 	lsl.w	r3, r2, r3
 8014b8a:	4299      	cmp	r1, r3
 8014b8c:	d117      	bne.n	8014bbe <_strtod_l+0x8f6>
 8014b8e:	4b29      	ldr	r3, [pc, #164]	; (8014c34 <_strtod_l+0x96c>)
 8014b90:	429f      	cmp	r7, r3
 8014b92:	d102      	bne.n	8014b9a <_strtod_l+0x8d2>
 8014b94:	3101      	adds	r1, #1
 8014b96:	f43f addf 	beq.w	8014758 <_strtod_l+0x490>
 8014b9a:	4b23      	ldr	r3, [pc, #140]	; (8014c28 <_strtod_l+0x960>)
 8014b9c:	403b      	ands	r3, r7
 8014b9e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014ba2:	f04f 0a00 	mov.w	sl, #0
 8014ba6:	9b04      	ldr	r3, [sp, #16]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d1a4      	bne.n	8014af6 <_strtod_l+0x82e>
 8014bac:	e5de      	b.n	801476c <_strtod_l+0x4a4>
 8014bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014bb2:	e7ea      	b.n	8014b8a <_strtod_l+0x8c2>
 8014bb4:	4613      	mov	r3, r2
 8014bb6:	e7e8      	b.n	8014b8a <_strtod_l+0x8c2>
 8014bb8:	ea53 030a 	orrs.w	r3, r3, sl
 8014bbc:	d08c      	beq.n	8014ad8 <_strtod_l+0x810>
 8014bbe:	9b08      	ldr	r3, [sp, #32]
 8014bc0:	b1db      	cbz	r3, 8014bfa <_strtod_l+0x932>
 8014bc2:	423b      	tst	r3, r7
 8014bc4:	d0ef      	beq.n	8014ba6 <_strtod_l+0x8de>
 8014bc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014bc8:	9a04      	ldr	r2, [sp, #16]
 8014bca:	4650      	mov	r0, sl
 8014bcc:	4659      	mov	r1, fp
 8014bce:	b1c3      	cbz	r3, 8014c02 <_strtod_l+0x93a>
 8014bd0:	f7ff fb5d 	bl	801428e <sulp>
 8014bd4:	4602      	mov	r2, r0
 8014bd6:	460b      	mov	r3, r1
 8014bd8:	ec51 0b18 	vmov	r0, r1, d8
 8014bdc:	f7eb fb56 	bl	800028c <__adddf3>
 8014be0:	4682      	mov	sl, r0
 8014be2:	468b      	mov	fp, r1
 8014be4:	e7df      	b.n	8014ba6 <_strtod_l+0x8de>
 8014be6:	4013      	ands	r3, r2
 8014be8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014bec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014bf0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014bf4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8014bf8:	e7d5      	b.n	8014ba6 <_strtod_l+0x8de>
 8014bfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014bfc:	ea13 0f0a 	tst.w	r3, sl
 8014c00:	e7e0      	b.n	8014bc4 <_strtod_l+0x8fc>
 8014c02:	f7ff fb44 	bl	801428e <sulp>
 8014c06:	4602      	mov	r2, r0
 8014c08:	460b      	mov	r3, r1
 8014c0a:	ec51 0b18 	vmov	r0, r1, d8
 8014c0e:	f7eb fb3b 	bl	8000288 <__aeabi_dsub>
 8014c12:	2200      	movs	r2, #0
 8014c14:	2300      	movs	r3, #0
 8014c16:	4682      	mov	sl, r0
 8014c18:	468b      	mov	fp, r1
 8014c1a:	f7eb ff55 	bl	8000ac8 <__aeabi_dcmpeq>
 8014c1e:	2800      	cmp	r0, #0
 8014c20:	d0c1      	beq.n	8014ba6 <_strtod_l+0x8de>
 8014c22:	e611      	b.n	8014848 <_strtod_l+0x580>
 8014c24:	fffffc02 	.word	0xfffffc02
 8014c28:	7ff00000 	.word	0x7ff00000
 8014c2c:	39500000 	.word	0x39500000
 8014c30:	000fffff 	.word	0x000fffff
 8014c34:	7fefffff 	.word	0x7fefffff
 8014c38:	080195c8 	.word	0x080195c8
 8014c3c:	4631      	mov	r1, r6
 8014c3e:	4628      	mov	r0, r5
 8014c40:	f002 f968 	bl	8016f14 <__ratio>
 8014c44:	ec59 8b10 	vmov	r8, r9, d0
 8014c48:	ee10 0a10 	vmov	r0, s0
 8014c4c:	2200      	movs	r2, #0
 8014c4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014c52:	4649      	mov	r1, r9
 8014c54:	f7eb ff4c 	bl	8000af0 <__aeabi_dcmple>
 8014c58:	2800      	cmp	r0, #0
 8014c5a:	d07a      	beq.n	8014d52 <_strtod_l+0xa8a>
 8014c5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d04a      	beq.n	8014cf8 <_strtod_l+0xa30>
 8014c62:	4b95      	ldr	r3, [pc, #596]	; (8014eb8 <_strtod_l+0xbf0>)
 8014c64:	2200      	movs	r2, #0
 8014c66:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014c6a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014eb8 <_strtod_l+0xbf0>
 8014c6e:	f04f 0800 	mov.w	r8, #0
 8014c72:	4b92      	ldr	r3, [pc, #584]	; (8014ebc <_strtod_l+0xbf4>)
 8014c74:	403b      	ands	r3, r7
 8014c76:	930d      	str	r3, [sp, #52]	; 0x34
 8014c78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014c7a:	4b91      	ldr	r3, [pc, #580]	; (8014ec0 <_strtod_l+0xbf8>)
 8014c7c:	429a      	cmp	r2, r3
 8014c7e:	f040 80b0 	bne.w	8014de2 <_strtod_l+0xb1a>
 8014c82:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014c86:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8014c8a:	ec4b ab10 	vmov	d0, sl, fp
 8014c8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014c92:	f002 f867 	bl	8016d64 <__ulp>
 8014c96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014c9a:	ec53 2b10 	vmov	r2, r3, d0
 8014c9e:	f7eb fcab 	bl	80005f8 <__aeabi_dmul>
 8014ca2:	4652      	mov	r2, sl
 8014ca4:	465b      	mov	r3, fp
 8014ca6:	f7eb faf1 	bl	800028c <__adddf3>
 8014caa:	460b      	mov	r3, r1
 8014cac:	4983      	ldr	r1, [pc, #524]	; (8014ebc <_strtod_l+0xbf4>)
 8014cae:	4a85      	ldr	r2, [pc, #532]	; (8014ec4 <_strtod_l+0xbfc>)
 8014cb0:	4019      	ands	r1, r3
 8014cb2:	4291      	cmp	r1, r2
 8014cb4:	4682      	mov	sl, r0
 8014cb6:	d960      	bls.n	8014d7a <_strtod_l+0xab2>
 8014cb8:	ee18 3a90 	vmov	r3, s17
 8014cbc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014cc0:	4293      	cmp	r3, r2
 8014cc2:	d104      	bne.n	8014cce <_strtod_l+0xa06>
 8014cc4:	ee18 3a10 	vmov	r3, s16
 8014cc8:	3301      	adds	r3, #1
 8014cca:	f43f ad45 	beq.w	8014758 <_strtod_l+0x490>
 8014cce:	f8df b200 	ldr.w	fp, [pc, #512]	; 8014ed0 <_strtod_l+0xc08>
 8014cd2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8014cd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014cd8:	4620      	mov	r0, r4
 8014cda:	f001 fd11 	bl	8016700 <_Bfree>
 8014cde:	9905      	ldr	r1, [sp, #20]
 8014ce0:	4620      	mov	r0, r4
 8014ce2:	f001 fd0d 	bl	8016700 <_Bfree>
 8014ce6:	4631      	mov	r1, r6
 8014ce8:	4620      	mov	r0, r4
 8014cea:	f001 fd09 	bl	8016700 <_Bfree>
 8014cee:	4629      	mov	r1, r5
 8014cf0:	4620      	mov	r0, r4
 8014cf2:	f001 fd05 	bl	8016700 <_Bfree>
 8014cf6:	e61a      	b.n	801492e <_strtod_l+0x666>
 8014cf8:	f1ba 0f00 	cmp.w	sl, #0
 8014cfc:	d11b      	bne.n	8014d36 <_strtod_l+0xa6e>
 8014cfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014d02:	b9f3      	cbnz	r3, 8014d42 <_strtod_l+0xa7a>
 8014d04:	4b6c      	ldr	r3, [pc, #432]	; (8014eb8 <_strtod_l+0xbf0>)
 8014d06:	2200      	movs	r2, #0
 8014d08:	4640      	mov	r0, r8
 8014d0a:	4649      	mov	r1, r9
 8014d0c:	f7eb fee6 	bl	8000adc <__aeabi_dcmplt>
 8014d10:	b9d0      	cbnz	r0, 8014d48 <_strtod_l+0xa80>
 8014d12:	4640      	mov	r0, r8
 8014d14:	4649      	mov	r1, r9
 8014d16:	4b6c      	ldr	r3, [pc, #432]	; (8014ec8 <_strtod_l+0xc00>)
 8014d18:	2200      	movs	r2, #0
 8014d1a:	f7eb fc6d 	bl	80005f8 <__aeabi_dmul>
 8014d1e:	4680      	mov	r8, r0
 8014d20:	4689      	mov	r9, r1
 8014d22:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014d26:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8014d2a:	9315      	str	r3, [sp, #84]	; 0x54
 8014d2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014d30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014d34:	e79d      	b.n	8014c72 <_strtod_l+0x9aa>
 8014d36:	f1ba 0f01 	cmp.w	sl, #1
 8014d3a:	d102      	bne.n	8014d42 <_strtod_l+0xa7a>
 8014d3c:	2f00      	cmp	r7, #0
 8014d3e:	f43f ad83 	beq.w	8014848 <_strtod_l+0x580>
 8014d42:	4b62      	ldr	r3, [pc, #392]	; (8014ecc <_strtod_l+0xc04>)
 8014d44:	2200      	movs	r2, #0
 8014d46:	e78e      	b.n	8014c66 <_strtod_l+0x99e>
 8014d48:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8014ec8 <_strtod_l+0xc00>
 8014d4c:	f04f 0800 	mov.w	r8, #0
 8014d50:	e7e7      	b.n	8014d22 <_strtod_l+0xa5a>
 8014d52:	4b5d      	ldr	r3, [pc, #372]	; (8014ec8 <_strtod_l+0xc00>)
 8014d54:	4640      	mov	r0, r8
 8014d56:	4649      	mov	r1, r9
 8014d58:	2200      	movs	r2, #0
 8014d5a:	f7eb fc4d 	bl	80005f8 <__aeabi_dmul>
 8014d5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d60:	4680      	mov	r8, r0
 8014d62:	4689      	mov	r9, r1
 8014d64:	b933      	cbnz	r3, 8014d74 <_strtod_l+0xaac>
 8014d66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d6a:	900e      	str	r0, [sp, #56]	; 0x38
 8014d6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d6e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014d72:	e7dd      	b.n	8014d30 <_strtod_l+0xa68>
 8014d74:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8014d78:	e7f9      	b.n	8014d6e <_strtod_l+0xaa6>
 8014d7a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014d7e:	9b04      	ldr	r3, [sp, #16]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d1a8      	bne.n	8014cd6 <_strtod_l+0xa0e>
 8014d84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014d88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014d8a:	0d1b      	lsrs	r3, r3, #20
 8014d8c:	051b      	lsls	r3, r3, #20
 8014d8e:	429a      	cmp	r2, r3
 8014d90:	d1a1      	bne.n	8014cd6 <_strtod_l+0xa0e>
 8014d92:	4640      	mov	r0, r8
 8014d94:	4649      	mov	r1, r9
 8014d96:	f7eb ffdf 	bl	8000d58 <__aeabi_d2lz>
 8014d9a:	f7eb fbff 	bl	800059c <__aeabi_l2d>
 8014d9e:	4602      	mov	r2, r0
 8014da0:	460b      	mov	r3, r1
 8014da2:	4640      	mov	r0, r8
 8014da4:	4649      	mov	r1, r9
 8014da6:	f7eb fa6f 	bl	8000288 <__aeabi_dsub>
 8014daa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014dac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014db0:	ea43 030a 	orr.w	r3, r3, sl
 8014db4:	4313      	orrs	r3, r2
 8014db6:	4680      	mov	r8, r0
 8014db8:	4689      	mov	r9, r1
 8014dba:	d055      	beq.n	8014e68 <_strtod_l+0xba0>
 8014dbc:	a336      	add	r3, pc, #216	; (adr r3, 8014e98 <_strtod_l+0xbd0>)
 8014dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dc2:	f7eb fe8b 	bl	8000adc <__aeabi_dcmplt>
 8014dc6:	2800      	cmp	r0, #0
 8014dc8:	f47f acd0 	bne.w	801476c <_strtod_l+0x4a4>
 8014dcc:	a334      	add	r3, pc, #208	; (adr r3, 8014ea0 <_strtod_l+0xbd8>)
 8014dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dd2:	4640      	mov	r0, r8
 8014dd4:	4649      	mov	r1, r9
 8014dd6:	f7eb fe9f 	bl	8000b18 <__aeabi_dcmpgt>
 8014dda:	2800      	cmp	r0, #0
 8014ddc:	f43f af7b 	beq.w	8014cd6 <_strtod_l+0xa0e>
 8014de0:	e4c4      	b.n	801476c <_strtod_l+0x4a4>
 8014de2:	9b04      	ldr	r3, [sp, #16]
 8014de4:	b333      	cbz	r3, 8014e34 <_strtod_l+0xb6c>
 8014de6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014de8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014dec:	d822      	bhi.n	8014e34 <_strtod_l+0xb6c>
 8014dee:	a32e      	add	r3, pc, #184	; (adr r3, 8014ea8 <_strtod_l+0xbe0>)
 8014df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014df4:	4640      	mov	r0, r8
 8014df6:	4649      	mov	r1, r9
 8014df8:	f7eb fe7a 	bl	8000af0 <__aeabi_dcmple>
 8014dfc:	b1a0      	cbz	r0, 8014e28 <_strtod_l+0xb60>
 8014dfe:	4649      	mov	r1, r9
 8014e00:	4640      	mov	r0, r8
 8014e02:	f7eb fed1 	bl	8000ba8 <__aeabi_d2uiz>
 8014e06:	2801      	cmp	r0, #1
 8014e08:	bf38      	it	cc
 8014e0a:	2001      	movcc	r0, #1
 8014e0c:	f7eb fb7a 	bl	8000504 <__aeabi_ui2d>
 8014e10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e12:	4680      	mov	r8, r0
 8014e14:	4689      	mov	r9, r1
 8014e16:	bb23      	cbnz	r3, 8014e62 <_strtod_l+0xb9a>
 8014e18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014e1c:	9010      	str	r0, [sp, #64]	; 0x40
 8014e1e:	9311      	str	r3, [sp, #68]	; 0x44
 8014e20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014e24:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014e2c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014e30:	1a9b      	subs	r3, r3, r2
 8014e32:	9309      	str	r3, [sp, #36]	; 0x24
 8014e34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014e38:	eeb0 0a48 	vmov.f32	s0, s16
 8014e3c:	eef0 0a68 	vmov.f32	s1, s17
 8014e40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014e44:	f001 ff8e 	bl	8016d64 <__ulp>
 8014e48:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014e4c:	ec53 2b10 	vmov	r2, r3, d0
 8014e50:	f7eb fbd2 	bl	80005f8 <__aeabi_dmul>
 8014e54:	ec53 2b18 	vmov	r2, r3, d8
 8014e58:	f7eb fa18 	bl	800028c <__adddf3>
 8014e5c:	4682      	mov	sl, r0
 8014e5e:	468b      	mov	fp, r1
 8014e60:	e78d      	b.n	8014d7e <_strtod_l+0xab6>
 8014e62:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8014e66:	e7db      	b.n	8014e20 <_strtod_l+0xb58>
 8014e68:	a311      	add	r3, pc, #68	; (adr r3, 8014eb0 <_strtod_l+0xbe8>)
 8014e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e6e:	f7eb fe35 	bl	8000adc <__aeabi_dcmplt>
 8014e72:	e7b2      	b.n	8014dda <_strtod_l+0xb12>
 8014e74:	2300      	movs	r3, #0
 8014e76:	930a      	str	r3, [sp, #40]	; 0x28
 8014e78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014e7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014e7c:	6013      	str	r3, [r2, #0]
 8014e7e:	f7ff ba6b 	b.w	8014358 <_strtod_l+0x90>
 8014e82:	2a65      	cmp	r2, #101	; 0x65
 8014e84:	f43f ab5f 	beq.w	8014546 <_strtod_l+0x27e>
 8014e88:	2a45      	cmp	r2, #69	; 0x45
 8014e8a:	f43f ab5c 	beq.w	8014546 <_strtod_l+0x27e>
 8014e8e:	2301      	movs	r3, #1
 8014e90:	f7ff bb94 	b.w	80145bc <_strtod_l+0x2f4>
 8014e94:	f3af 8000 	nop.w
 8014e98:	94a03595 	.word	0x94a03595
 8014e9c:	3fdfffff 	.word	0x3fdfffff
 8014ea0:	35afe535 	.word	0x35afe535
 8014ea4:	3fe00000 	.word	0x3fe00000
 8014ea8:	ffc00000 	.word	0xffc00000
 8014eac:	41dfffff 	.word	0x41dfffff
 8014eb0:	94a03595 	.word	0x94a03595
 8014eb4:	3fcfffff 	.word	0x3fcfffff
 8014eb8:	3ff00000 	.word	0x3ff00000
 8014ebc:	7ff00000 	.word	0x7ff00000
 8014ec0:	7fe00000 	.word	0x7fe00000
 8014ec4:	7c9fffff 	.word	0x7c9fffff
 8014ec8:	3fe00000 	.word	0x3fe00000
 8014ecc:	bff00000 	.word	0xbff00000
 8014ed0:	7fefffff 	.word	0x7fefffff

08014ed4 <strtod>:
 8014ed4:	460a      	mov	r2, r1
 8014ed6:	4601      	mov	r1, r0
 8014ed8:	4802      	ldr	r0, [pc, #8]	; (8014ee4 <strtod+0x10>)
 8014eda:	4b03      	ldr	r3, [pc, #12]	; (8014ee8 <strtod+0x14>)
 8014edc:	6800      	ldr	r0, [r0, #0]
 8014ede:	f7ff b9f3 	b.w	80142c8 <_strtod_l>
 8014ee2:	bf00      	nop
 8014ee4:	20000188 	.word	0x20000188
 8014ee8:	200001f0 	.word	0x200001f0

08014eec <_strtol_l.constprop.0>:
 8014eec:	2b01      	cmp	r3, #1
 8014eee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ef2:	d001      	beq.n	8014ef8 <_strtol_l.constprop.0+0xc>
 8014ef4:	2b24      	cmp	r3, #36	; 0x24
 8014ef6:	d906      	bls.n	8014f06 <_strtol_l.constprop.0+0x1a>
 8014ef8:	f7fe f944 	bl	8013184 <__errno>
 8014efc:	2316      	movs	r3, #22
 8014efe:	6003      	str	r3, [r0, #0]
 8014f00:	2000      	movs	r0, #0
 8014f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f06:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014fec <_strtol_l.constprop.0+0x100>
 8014f0a:	460d      	mov	r5, r1
 8014f0c:	462e      	mov	r6, r5
 8014f0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f12:	f814 700c 	ldrb.w	r7, [r4, ip]
 8014f16:	f017 0708 	ands.w	r7, r7, #8
 8014f1a:	d1f7      	bne.n	8014f0c <_strtol_l.constprop.0+0x20>
 8014f1c:	2c2d      	cmp	r4, #45	; 0x2d
 8014f1e:	d132      	bne.n	8014f86 <_strtol_l.constprop.0+0x9a>
 8014f20:	782c      	ldrb	r4, [r5, #0]
 8014f22:	2701      	movs	r7, #1
 8014f24:	1cb5      	adds	r5, r6, #2
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d05b      	beq.n	8014fe2 <_strtol_l.constprop.0+0xf6>
 8014f2a:	2b10      	cmp	r3, #16
 8014f2c:	d109      	bne.n	8014f42 <_strtol_l.constprop.0+0x56>
 8014f2e:	2c30      	cmp	r4, #48	; 0x30
 8014f30:	d107      	bne.n	8014f42 <_strtol_l.constprop.0+0x56>
 8014f32:	782c      	ldrb	r4, [r5, #0]
 8014f34:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014f38:	2c58      	cmp	r4, #88	; 0x58
 8014f3a:	d14d      	bne.n	8014fd8 <_strtol_l.constprop.0+0xec>
 8014f3c:	786c      	ldrb	r4, [r5, #1]
 8014f3e:	2310      	movs	r3, #16
 8014f40:	3502      	adds	r5, #2
 8014f42:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014f46:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8014f4a:	f04f 0c00 	mov.w	ip, #0
 8014f4e:	fbb8 f9f3 	udiv	r9, r8, r3
 8014f52:	4666      	mov	r6, ip
 8014f54:	fb03 8a19 	mls	sl, r3, r9, r8
 8014f58:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014f5c:	f1be 0f09 	cmp.w	lr, #9
 8014f60:	d816      	bhi.n	8014f90 <_strtol_l.constprop.0+0xa4>
 8014f62:	4674      	mov	r4, lr
 8014f64:	42a3      	cmp	r3, r4
 8014f66:	dd24      	ble.n	8014fb2 <_strtol_l.constprop.0+0xc6>
 8014f68:	f1bc 0f00 	cmp.w	ip, #0
 8014f6c:	db1e      	blt.n	8014fac <_strtol_l.constprop.0+0xc0>
 8014f6e:	45b1      	cmp	r9, r6
 8014f70:	d31c      	bcc.n	8014fac <_strtol_l.constprop.0+0xc0>
 8014f72:	d101      	bne.n	8014f78 <_strtol_l.constprop.0+0x8c>
 8014f74:	45a2      	cmp	sl, r4
 8014f76:	db19      	blt.n	8014fac <_strtol_l.constprop.0+0xc0>
 8014f78:	fb06 4603 	mla	r6, r6, r3, r4
 8014f7c:	f04f 0c01 	mov.w	ip, #1
 8014f80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f84:	e7e8      	b.n	8014f58 <_strtol_l.constprop.0+0x6c>
 8014f86:	2c2b      	cmp	r4, #43	; 0x2b
 8014f88:	bf04      	itt	eq
 8014f8a:	782c      	ldrbeq	r4, [r5, #0]
 8014f8c:	1cb5      	addeq	r5, r6, #2
 8014f8e:	e7ca      	b.n	8014f26 <_strtol_l.constprop.0+0x3a>
 8014f90:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014f94:	f1be 0f19 	cmp.w	lr, #25
 8014f98:	d801      	bhi.n	8014f9e <_strtol_l.constprop.0+0xb2>
 8014f9a:	3c37      	subs	r4, #55	; 0x37
 8014f9c:	e7e2      	b.n	8014f64 <_strtol_l.constprop.0+0x78>
 8014f9e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8014fa2:	f1be 0f19 	cmp.w	lr, #25
 8014fa6:	d804      	bhi.n	8014fb2 <_strtol_l.constprop.0+0xc6>
 8014fa8:	3c57      	subs	r4, #87	; 0x57
 8014faa:	e7db      	b.n	8014f64 <_strtol_l.constprop.0+0x78>
 8014fac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8014fb0:	e7e6      	b.n	8014f80 <_strtol_l.constprop.0+0x94>
 8014fb2:	f1bc 0f00 	cmp.w	ip, #0
 8014fb6:	da05      	bge.n	8014fc4 <_strtol_l.constprop.0+0xd8>
 8014fb8:	2322      	movs	r3, #34	; 0x22
 8014fba:	6003      	str	r3, [r0, #0]
 8014fbc:	4646      	mov	r6, r8
 8014fbe:	b942      	cbnz	r2, 8014fd2 <_strtol_l.constprop.0+0xe6>
 8014fc0:	4630      	mov	r0, r6
 8014fc2:	e79e      	b.n	8014f02 <_strtol_l.constprop.0+0x16>
 8014fc4:	b107      	cbz	r7, 8014fc8 <_strtol_l.constprop.0+0xdc>
 8014fc6:	4276      	negs	r6, r6
 8014fc8:	2a00      	cmp	r2, #0
 8014fca:	d0f9      	beq.n	8014fc0 <_strtol_l.constprop.0+0xd4>
 8014fcc:	f1bc 0f00 	cmp.w	ip, #0
 8014fd0:	d000      	beq.n	8014fd4 <_strtol_l.constprop.0+0xe8>
 8014fd2:	1e69      	subs	r1, r5, #1
 8014fd4:	6011      	str	r1, [r2, #0]
 8014fd6:	e7f3      	b.n	8014fc0 <_strtol_l.constprop.0+0xd4>
 8014fd8:	2430      	movs	r4, #48	; 0x30
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d1b1      	bne.n	8014f42 <_strtol_l.constprop.0+0x56>
 8014fde:	2308      	movs	r3, #8
 8014fe0:	e7af      	b.n	8014f42 <_strtol_l.constprop.0+0x56>
 8014fe2:	2c30      	cmp	r4, #48	; 0x30
 8014fe4:	d0a5      	beq.n	8014f32 <_strtol_l.constprop.0+0x46>
 8014fe6:	230a      	movs	r3, #10
 8014fe8:	e7ab      	b.n	8014f42 <_strtol_l.constprop.0+0x56>
 8014fea:	bf00      	nop
 8014fec:	08019405 	.word	0x08019405

08014ff0 <strtol>:
 8014ff0:	4613      	mov	r3, r2
 8014ff2:	460a      	mov	r2, r1
 8014ff4:	4601      	mov	r1, r0
 8014ff6:	4802      	ldr	r0, [pc, #8]	; (8015000 <strtol+0x10>)
 8014ff8:	6800      	ldr	r0, [r0, #0]
 8014ffa:	f7ff bf77 	b.w	8014eec <_strtol_l.constprop.0>
 8014ffe:	bf00      	nop
 8015000:	20000188 	.word	0x20000188

08015004 <_vsniprintf_r>:
 8015004:	b530      	push	{r4, r5, lr}
 8015006:	4614      	mov	r4, r2
 8015008:	2c00      	cmp	r4, #0
 801500a:	b09b      	sub	sp, #108	; 0x6c
 801500c:	4605      	mov	r5, r0
 801500e:	461a      	mov	r2, r3
 8015010:	da05      	bge.n	801501e <_vsniprintf_r+0x1a>
 8015012:	238b      	movs	r3, #139	; 0x8b
 8015014:	6003      	str	r3, [r0, #0]
 8015016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801501a:	b01b      	add	sp, #108	; 0x6c
 801501c:	bd30      	pop	{r4, r5, pc}
 801501e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015022:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015026:	bf14      	ite	ne
 8015028:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801502c:	4623      	moveq	r3, r4
 801502e:	9302      	str	r3, [sp, #8]
 8015030:	9305      	str	r3, [sp, #20]
 8015032:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015036:	9100      	str	r1, [sp, #0]
 8015038:	9104      	str	r1, [sp, #16]
 801503a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801503e:	4669      	mov	r1, sp
 8015040:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015042:	f002 f839 	bl	80170b8 <_svfiprintf_r>
 8015046:	1c43      	adds	r3, r0, #1
 8015048:	bfbc      	itt	lt
 801504a:	238b      	movlt	r3, #139	; 0x8b
 801504c:	602b      	strlt	r3, [r5, #0]
 801504e:	2c00      	cmp	r4, #0
 8015050:	d0e3      	beq.n	801501a <_vsniprintf_r+0x16>
 8015052:	9b00      	ldr	r3, [sp, #0]
 8015054:	2200      	movs	r2, #0
 8015056:	701a      	strb	r2, [r3, #0]
 8015058:	e7df      	b.n	801501a <_vsniprintf_r+0x16>
	...

0801505c <vsniprintf>:
 801505c:	b507      	push	{r0, r1, r2, lr}
 801505e:	9300      	str	r3, [sp, #0]
 8015060:	4613      	mov	r3, r2
 8015062:	460a      	mov	r2, r1
 8015064:	4601      	mov	r1, r0
 8015066:	4803      	ldr	r0, [pc, #12]	; (8015074 <vsniprintf+0x18>)
 8015068:	6800      	ldr	r0, [r0, #0]
 801506a:	f7ff ffcb 	bl	8015004 <_vsniprintf_r>
 801506e:	b003      	add	sp, #12
 8015070:	f85d fb04 	ldr.w	pc, [sp], #4
 8015074:	20000188 	.word	0x20000188

08015078 <_write_r>:
 8015078:	b538      	push	{r3, r4, r5, lr}
 801507a:	4d07      	ldr	r5, [pc, #28]	; (8015098 <_write_r+0x20>)
 801507c:	4604      	mov	r4, r0
 801507e:	4608      	mov	r0, r1
 8015080:	4611      	mov	r1, r2
 8015082:	2200      	movs	r2, #0
 8015084:	602a      	str	r2, [r5, #0]
 8015086:	461a      	mov	r2, r3
 8015088:	f7f1 fe6f 	bl	8006d6a <_write>
 801508c:	1c43      	adds	r3, r0, #1
 801508e:	d102      	bne.n	8015096 <_write_r+0x1e>
 8015090:	682b      	ldr	r3, [r5, #0]
 8015092:	b103      	cbz	r3, 8015096 <_write_r+0x1e>
 8015094:	6023      	str	r3, [r4, #0]
 8015096:	bd38      	pop	{r3, r4, r5, pc}
 8015098:	200085e4 	.word	0x200085e4

0801509c <_close_r>:
 801509c:	b538      	push	{r3, r4, r5, lr}
 801509e:	4d06      	ldr	r5, [pc, #24]	; (80150b8 <_close_r+0x1c>)
 80150a0:	2300      	movs	r3, #0
 80150a2:	4604      	mov	r4, r0
 80150a4:	4608      	mov	r0, r1
 80150a6:	602b      	str	r3, [r5, #0]
 80150a8:	f7f1 fe7b 	bl	8006da2 <_close>
 80150ac:	1c43      	adds	r3, r0, #1
 80150ae:	d102      	bne.n	80150b6 <_close_r+0x1a>
 80150b0:	682b      	ldr	r3, [r5, #0]
 80150b2:	b103      	cbz	r3, 80150b6 <_close_r+0x1a>
 80150b4:	6023      	str	r3, [r4, #0]
 80150b6:	bd38      	pop	{r3, r4, r5, pc}
 80150b8:	200085e4 	.word	0x200085e4

080150bc <quorem>:
 80150bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150c0:	6903      	ldr	r3, [r0, #16]
 80150c2:	690c      	ldr	r4, [r1, #16]
 80150c4:	42a3      	cmp	r3, r4
 80150c6:	4607      	mov	r7, r0
 80150c8:	f2c0 8081 	blt.w	80151ce <quorem+0x112>
 80150cc:	3c01      	subs	r4, #1
 80150ce:	f101 0814 	add.w	r8, r1, #20
 80150d2:	f100 0514 	add.w	r5, r0, #20
 80150d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80150da:	9301      	str	r3, [sp, #4]
 80150dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80150e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80150e4:	3301      	adds	r3, #1
 80150e6:	429a      	cmp	r2, r3
 80150e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80150ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80150f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80150f4:	d331      	bcc.n	801515a <quorem+0x9e>
 80150f6:	f04f 0e00 	mov.w	lr, #0
 80150fa:	4640      	mov	r0, r8
 80150fc:	46ac      	mov	ip, r5
 80150fe:	46f2      	mov	sl, lr
 8015100:	f850 2b04 	ldr.w	r2, [r0], #4
 8015104:	b293      	uxth	r3, r2
 8015106:	fb06 e303 	mla	r3, r6, r3, lr
 801510a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801510e:	b29b      	uxth	r3, r3
 8015110:	ebaa 0303 	sub.w	r3, sl, r3
 8015114:	f8dc a000 	ldr.w	sl, [ip]
 8015118:	0c12      	lsrs	r2, r2, #16
 801511a:	fa13 f38a 	uxtah	r3, r3, sl
 801511e:	fb06 e202 	mla	r2, r6, r2, lr
 8015122:	9300      	str	r3, [sp, #0]
 8015124:	9b00      	ldr	r3, [sp, #0]
 8015126:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801512a:	b292      	uxth	r2, r2
 801512c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015130:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015134:	f8bd 3000 	ldrh.w	r3, [sp]
 8015138:	4581      	cmp	r9, r0
 801513a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801513e:	f84c 3b04 	str.w	r3, [ip], #4
 8015142:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015146:	d2db      	bcs.n	8015100 <quorem+0x44>
 8015148:	f855 300b 	ldr.w	r3, [r5, fp]
 801514c:	b92b      	cbnz	r3, 801515a <quorem+0x9e>
 801514e:	9b01      	ldr	r3, [sp, #4]
 8015150:	3b04      	subs	r3, #4
 8015152:	429d      	cmp	r5, r3
 8015154:	461a      	mov	r2, r3
 8015156:	d32e      	bcc.n	80151b6 <quorem+0xfa>
 8015158:	613c      	str	r4, [r7, #16]
 801515a:	4638      	mov	r0, r7
 801515c:	f001 fd5c 	bl	8016c18 <__mcmp>
 8015160:	2800      	cmp	r0, #0
 8015162:	db24      	blt.n	80151ae <quorem+0xf2>
 8015164:	3601      	adds	r6, #1
 8015166:	4628      	mov	r0, r5
 8015168:	f04f 0c00 	mov.w	ip, #0
 801516c:	f858 2b04 	ldr.w	r2, [r8], #4
 8015170:	f8d0 e000 	ldr.w	lr, [r0]
 8015174:	b293      	uxth	r3, r2
 8015176:	ebac 0303 	sub.w	r3, ip, r3
 801517a:	0c12      	lsrs	r2, r2, #16
 801517c:	fa13 f38e 	uxtah	r3, r3, lr
 8015180:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015184:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015188:	b29b      	uxth	r3, r3
 801518a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801518e:	45c1      	cmp	r9, r8
 8015190:	f840 3b04 	str.w	r3, [r0], #4
 8015194:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015198:	d2e8      	bcs.n	801516c <quorem+0xb0>
 801519a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801519e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80151a2:	b922      	cbnz	r2, 80151ae <quorem+0xf2>
 80151a4:	3b04      	subs	r3, #4
 80151a6:	429d      	cmp	r5, r3
 80151a8:	461a      	mov	r2, r3
 80151aa:	d30a      	bcc.n	80151c2 <quorem+0x106>
 80151ac:	613c      	str	r4, [r7, #16]
 80151ae:	4630      	mov	r0, r6
 80151b0:	b003      	add	sp, #12
 80151b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151b6:	6812      	ldr	r2, [r2, #0]
 80151b8:	3b04      	subs	r3, #4
 80151ba:	2a00      	cmp	r2, #0
 80151bc:	d1cc      	bne.n	8015158 <quorem+0x9c>
 80151be:	3c01      	subs	r4, #1
 80151c0:	e7c7      	b.n	8015152 <quorem+0x96>
 80151c2:	6812      	ldr	r2, [r2, #0]
 80151c4:	3b04      	subs	r3, #4
 80151c6:	2a00      	cmp	r2, #0
 80151c8:	d1f0      	bne.n	80151ac <quorem+0xf0>
 80151ca:	3c01      	subs	r4, #1
 80151cc:	e7eb      	b.n	80151a6 <quorem+0xea>
 80151ce:	2000      	movs	r0, #0
 80151d0:	e7ee      	b.n	80151b0 <quorem+0xf4>
 80151d2:	0000      	movs	r0, r0
 80151d4:	0000      	movs	r0, r0
	...

080151d8 <_dtoa_r>:
 80151d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151dc:	ed2d 8b04 	vpush	{d8-d9}
 80151e0:	ec57 6b10 	vmov	r6, r7, d0
 80151e4:	b093      	sub	sp, #76	; 0x4c
 80151e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80151e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80151ec:	9106      	str	r1, [sp, #24]
 80151ee:	ee10 aa10 	vmov	sl, s0
 80151f2:	4604      	mov	r4, r0
 80151f4:	9209      	str	r2, [sp, #36]	; 0x24
 80151f6:	930c      	str	r3, [sp, #48]	; 0x30
 80151f8:	46bb      	mov	fp, r7
 80151fa:	b975      	cbnz	r5, 801521a <_dtoa_r+0x42>
 80151fc:	2010      	movs	r0, #16
 80151fe:	f7fe f991 	bl	8013524 <malloc>
 8015202:	4602      	mov	r2, r0
 8015204:	6260      	str	r0, [r4, #36]	; 0x24
 8015206:	b920      	cbnz	r0, 8015212 <_dtoa_r+0x3a>
 8015208:	4ba7      	ldr	r3, [pc, #668]	; (80154a8 <_dtoa_r+0x2d0>)
 801520a:	21ea      	movs	r1, #234	; 0xea
 801520c:	48a7      	ldr	r0, [pc, #668]	; (80154ac <_dtoa_r+0x2d4>)
 801520e:	f002 f87d 	bl	801730c <__assert_func>
 8015212:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015216:	6005      	str	r5, [r0, #0]
 8015218:	60c5      	str	r5, [r0, #12]
 801521a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801521c:	6819      	ldr	r1, [r3, #0]
 801521e:	b151      	cbz	r1, 8015236 <_dtoa_r+0x5e>
 8015220:	685a      	ldr	r2, [r3, #4]
 8015222:	604a      	str	r2, [r1, #4]
 8015224:	2301      	movs	r3, #1
 8015226:	4093      	lsls	r3, r2
 8015228:	608b      	str	r3, [r1, #8]
 801522a:	4620      	mov	r0, r4
 801522c:	f001 fa68 	bl	8016700 <_Bfree>
 8015230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015232:	2200      	movs	r2, #0
 8015234:	601a      	str	r2, [r3, #0]
 8015236:	1e3b      	subs	r3, r7, #0
 8015238:	bfaa      	itet	ge
 801523a:	2300      	movge	r3, #0
 801523c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8015240:	f8c8 3000 	strge.w	r3, [r8]
 8015244:	4b9a      	ldr	r3, [pc, #616]	; (80154b0 <_dtoa_r+0x2d8>)
 8015246:	bfbc      	itt	lt
 8015248:	2201      	movlt	r2, #1
 801524a:	f8c8 2000 	strlt.w	r2, [r8]
 801524e:	ea33 030b 	bics.w	r3, r3, fp
 8015252:	d11b      	bne.n	801528c <_dtoa_r+0xb4>
 8015254:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015256:	f242 730f 	movw	r3, #9999	; 0x270f
 801525a:	6013      	str	r3, [r2, #0]
 801525c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015260:	4333      	orrs	r3, r6
 8015262:	f000 8592 	beq.w	8015d8a <_dtoa_r+0xbb2>
 8015266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015268:	b963      	cbnz	r3, 8015284 <_dtoa_r+0xac>
 801526a:	4b92      	ldr	r3, [pc, #584]	; (80154b4 <_dtoa_r+0x2dc>)
 801526c:	e022      	b.n	80152b4 <_dtoa_r+0xdc>
 801526e:	4b92      	ldr	r3, [pc, #584]	; (80154b8 <_dtoa_r+0x2e0>)
 8015270:	9301      	str	r3, [sp, #4]
 8015272:	3308      	adds	r3, #8
 8015274:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015276:	6013      	str	r3, [r2, #0]
 8015278:	9801      	ldr	r0, [sp, #4]
 801527a:	b013      	add	sp, #76	; 0x4c
 801527c:	ecbd 8b04 	vpop	{d8-d9}
 8015280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015284:	4b8b      	ldr	r3, [pc, #556]	; (80154b4 <_dtoa_r+0x2dc>)
 8015286:	9301      	str	r3, [sp, #4]
 8015288:	3303      	adds	r3, #3
 801528a:	e7f3      	b.n	8015274 <_dtoa_r+0x9c>
 801528c:	2200      	movs	r2, #0
 801528e:	2300      	movs	r3, #0
 8015290:	4650      	mov	r0, sl
 8015292:	4659      	mov	r1, fp
 8015294:	f7eb fc18 	bl	8000ac8 <__aeabi_dcmpeq>
 8015298:	ec4b ab19 	vmov	d9, sl, fp
 801529c:	4680      	mov	r8, r0
 801529e:	b158      	cbz	r0, 80152b8 <_dtoa_r+0xe0>
 80152a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80152a2:	2301      	movs	r3, #1
 80152a4:	6013      	str	r3, [r2, #0]
 80152a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	f000 856b 	beq.w	8015d84 <_dtoa_r+0xbac>
 80152ae:	4883      	ldr	r0, [pc, #524]	; (80154bc <_dtoa_r+0x2e4>)
 80152b0:	6018      	str	r0, [r3, #0]
 80152b2:	1e43      	subs	r3, r0, #1
 80152b4:	9301      	str	r3, [sp, #4]
 80152b6:	e7df      	b.n	8015278 <_dtoa_r+0xa0>
 80152b8:	ec4b ab10 	vmov	d0, sl, fp
 80152bc:	aa10      	add	r2, sp, #64	; 0x40
 80152be:	a911      	add	r1, sp, #68	; 0x44
 80152c0:	4620      	mov	r0, r4
 80152c2:	f001 fdcb 	bl	8016e5c <__d2b>
 80152c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80152ca:	ee08 0a10 	vmov	s16, r0
 80152ce:	2d00      	cmp	r5, #0
 80152d0:	f000 8084 	beq.w	80153dc <_dtoa_r+0x204>
 80152d4:	ee19 3a90 	vmov	r3, s19
 80152d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80152dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80152e0:	4656      	mov	r6, sl
 80152e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80152e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80152ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80152ee:	4b74      	ldr	r3, [pc, #464]	; (80154c0 <_dtoa_r+0x2e8>)
 80152f0:	2200      	movs	r2, #0
 80152f2:	4630      	mov	r0, r6
 80152f4:	4639      	mov	r1, r7
 80152f6:	f7ea ffc7 	bl	8000288 <__aeabi_dsub>
 80152fa:	a365      	add	r3, pc, #404	; (adr r3, 8015490 <_dtoa_r+0x2b8>)
 80152fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015300:	f7eb f97a 	bl	80005f8 <__aeabi_dmul>
 8015304:	a364      	add	r3, pc, #400	; (adr r3, 8015498 <_dtoa_r+0x2c0>)
 8015306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801530a:	f7ea ffbf 	bl	800028c <__adddf3>
 801530e:	4606      	mov	r6, r0
 8015310:	4628      	mov	r0, r5
 8015312:	460f      	mov	r7, r1
 8015314:	f7eb f906 	bl	8000524 <__aeabi_i2d>
 8015318:	a361      	add	r3, pc, #388	; (adr r3, 80154a0 <_dtoa_r+0x2c8>)
 801531a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801531e:	f7eb f96b 	bl	80005f8 <__aeabi_dmul>
 8015322:	4602      	mov	r2, r0
 8015324:	460b      	mov	r3, r1
 8015326:	4630      	mov	r0, r6
 8015328:	4639      	mov	r1, r7
 801532a:	f7ea ffaf 	bl	800028c <__adddf3>
 801532e:	4606      	mov	r6, r0
 8015330:	460f      	mov	r7, r1
 8015332:	f7eb fc11 	bl	8000b58 <__aeabi_d2iz>
 8015336:	2200      	movs	r2, #0
 8015338:	9000      	str	r0, [sp, #0]
 801533a:	2300      	movs	r3, #0
 801533c:	4630      	mov	r0, r6
 801533e:	4639      	mov	r1, r7
 8015340:	f7eb fbcc 	bl	8000adc <__aeabi_dcmplt>
 8015344:	b150      	cbz	r0, 801535c <_dtoa_r+0x184>
 8015346:	9800      	ldr	r0, [sp, #0]
 8015348:	f7eb f8ec 	bl	8000524 <__aeabi_i2d>
 801534c:	4632      	mov	r2, r6
 801534e:	463b      	mov	r3, r7
 8015350:	f7eb fbba 	bl	8000ac8 <__aeabi_dcmpeq>
 8015354:	b910      	cbnz	r0, 801535c <_dtoa_r+0x184>
 8015356:	9b00      	ldr	r3, [sp, #0]
 8015358:	3b01      	subs	r3, #1
 801535a:	9300      	str	r3, [sp, #0]
 801535c:	9b00      	ldr	r3, [sp, #0]
 801535e:	2b16      	cmp	r3, #22
 8015360:	d85a      	bhi.n	8015418 <_dtoa_r+0x240>
 8015362:	9a00      	ldr	r2, [sp, #0]
 8015364:	4b57      	ldr	r3, [pc, #348]	; (80154c4 <_dtoa_r+0x2ec>)
 8015366:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801536e:	ec51 0b19 	vmov	r0, r1, d9
 8015372:	f7eb fbb3 	bl	8000adc <__aeabi_dcmplt>
 8015376:	2800      	cmp	r0, #0
 8015378:	d050      	beq.n	801541c <_dtoa_r+0x244>
 801537a:	9b00      	ldr	r3, [sp, #0]
 801537c:	3b01      	subs	r3, #1
 801537e:	9300      	str	r3, [sp, #0]
 8015380:	2300      	movs	r3, #0
 8015382:	930b      	str	r3, [sp, #44]	; 0x2c
 8015384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015386:	1b5d      	subs	r5, r3, r5
 8015388:	1e6b      	subs	r3, r5, #1
 801538a:	9305      	str	r3, [sp, #20]
 801538c:	bf45      	ittet	mi
 801538e:	f1c5 0301 	rsbmi	r3, r5, #1
 8015392:	9304      	strmi	r3, [sp, #16]
 8015394:	2300      	movpl	r3, #0
 8015396:	2300      	movmi	r3, #0
 8015398:	bf4c      	ite	mi
 801539a:	9305      	strmi	r3, [sp, #20]
 801539c:	9304      	strpl	r3, [sp, #16]
 801539e:	9b00      	ldr	r3, [sp, #0]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	db3d      	blt.n	8015420 <_dtoa_r+0x248>
 80153a4:	9b05      	ldr	r3, [sp, #20]
 80153a6:	9a00      	ldr	r2, [sp, #0]
 80153a8:	920a      	str	r2, [sp, #40]	; 0x28
 80153aa:	4413      	add	r3, r2
 80153ac:	9305      	str	r3, [sp, #20]
 80153ae:	2300      	movs	r3, #0
 80153b0:	9307      	str	r3, [sp, #28]
 80153b2:	9b06      	ldr	r3, [sp, #24]
 80153b4:	2b09      	cmp	r3, #9
 80153b6:	f200 8089 	bhi.w	80154cc <_dtoa_r+0x2f4>
 80153ba:	2b05      	cmp	r3, #5
 80153bc:	bfc4      	itt	gt
 80153be:	3b04      	subgt	r3, #4
 80153c0:	9306      	strgt	r3, [sp, #24]
 80153c2:	9b06      	ldr	r3, [sp, #24]
 80153c4:	f1a3 0302 	sub.w	r3, r3, #2
 80153c8:	bfcc      	ite	gt
 80153ca:	2500      	movgt	r5, #0
 80153cc:	2501      	movle	r5, #1
 80153ce:	2b03      	cmp	r3, #3
 80153d0:	f200 8087 	bhi.w	80154e2 <_dtoa_r+0x30a>
 80153d4:	e8df f003 	tbb	[pc, r3]
 80153d8:	59383a2d 	.word	0x59383a2d
 80153dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80153e0:	441d      	add	r5, r3
 80153e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80153e6:	2b20      	cmp	r3, #32
 80153e8:	bfc1      	itttt	gt
 80153ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80153ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80153f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80153f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80153fa:	bfda      	itte	le
 80153fc:	f1c3 0320 	rsble	r3, r3, #32
 8015400:	fa06 f003 	lslle.w	r0, r6, r3
 8015404:	4318      	orrgt	r0, r3
 8015406:	f7eb f87d 	bl	8000504 <__aeabi_ui2d>
 801540a:	2301      	movs	r3, #1
 801540c:	4606      	mov	r6, r0
 801540e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015412:	3d01      	subs	r5, #1
 8015414:	930e      	str	r3, [sp, #56]	; 0x38
 8015416:	e76a      	b.n	80152ee <_dtoa_r+0x116>
 8015418:	2301      	movs	r3, #1
 801541a:	e7b2      	b.n	8015382 <_dtoa_r+0x1aa>
 801541c:	900b      	str	r0, [sp, #44]	; 0x2c
 801541e:	e7b1      	b.n	8015384 <_dtoa_r+0x1ac>
 8015420:	9b04      	ldr	r3, [sp, #16]
 8015422:	9a00      	ldr	r2, [sp, #0]
 8015424:	1a9b      	subs	r3, r3, r2
 8015426:	9304      	str	r3, [sp, #16]
 8015428:	4253      	negs	r3, r2
 801542a:	9307      	str	r3, [sp, #28]
 801542c:	2300      	movs	r3, #0
 801542e:	930a      	str	r3, [sp, #40]	; 0x28
 8015430:	e7bf      	b.n	80153b2 <_dtoa_r+0x1da>
 8015432:	2300      	movs	r3, #0
 8015434:	9308      	str	r3, [sp, #32]
 8015436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015438:	2b00      	cmp	r3, #0
 801543a:	dc55      	bgt.n	80154e8 <_dtoa_r+0x310>
 801543c:	2301      	movs	r3, #1
 801543e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015442:	461a      	mov	r2, r3
 8015444:	9209      	str	r2, [sp, #36]	; 0x24
 8015446:	e00c      	b.n	8015462 <_dtoa_r+0x28a>
 8015448:	2301      	movs	r3, #1
 801544a:	e7f3      	b.n	8015434 <_dtoa_r+0x25c>
 801544c:	2300      	movs	r3, #0
 801544e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015450:	9308      	str	r3, [sp, #32]
 8015452:	9b00      	ldr	r3, [sp, #0]
 8015454:	4413      	add	r3, r2
 8015456:	9302      	str	r3, [sp, #8]
 8015458:	3301      	adds	r3, #1
 801545a:	2b01      	cmp	r3, #1
 801545c:	9303      	str	r3, [sp, #12]
 801545e:	bfb8      	it	lt
 8015460:	2301      	movlt	r3, #1
 8015462:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015464:	2200      	movs	r2, #0
 8015466:	6042      	str	r2, [r0, #4]
 8015468:	2204      	movs	r2, #4
 801546a:	f102 0614 	add.w	r6, r2, #20
 801546e:	429e      	cmp	r6, r3
 8015470:	6841      	ldr	r1, [r0, #4]
 8015472:	d93d      	bls.n	80154f0 <_dtoa_r+0x318>
 8015474:	4620      	mov	r0, r4
 8015476:	f001 f903 	bl	8016680 <_Balloc>
 801547a:	9001      	str	r0, [sp, #4]
 801547c:	2800      	cmp	r0, #0
 801547e:	d13b      	bne.n	80154f8 <_dtoa_r+0x320>
 8015480:	4b11      	ldr	r3, [pc, #68]	; (80154c8 <_dtoa_r+0x2f0>)
 8015482:	4602      	mov	r2, r0
 8015484:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015488:	e6c0      	b.n	801520c <_dtoa_r+0x34>
 801548a:	2301      	movs	r3, #1
 801548c:	e7df      	b.n	801544e <_dtoa_r+0x276>
 801548e:	bf00      	nop
 8015490:	636f4361 	.word	0x636f4361
 8015494:	3fd287a7 	.word	0x3fd287a7
 8015498:	8b60c8b3 	.word	0x8b60c8b3
 801549c:	3fc68a28 	.word	0x3fc68a28
 80154a0:	509f79fb 	.word	0x509f79fb
 80154a4:	3fd34413 	.word	0x3fd34413
 80154a8:	080195fd 	.word	0x080195fd
 80154ac:	08019614 	.word	0x08019614
 80154b0:	7ff00000 	.word	0x7ff00000
 80154b4:	080195f9 	.word	0x080195f9
 80154b8:	080195f0 	.word	0x080195f0
 80154bc:	0801957d 	.word	0x0801957d
 80154c0:	3ff80000 	.word	0x3ff80000
 80154c4:	08019780 	.word	0x08019780
 80154c8:	0801966f 	.word	0x0801966f
 80154cc:	2501      	movs	r5, #1
 80154ce:	2300      	movs	r3, #0
 80154d0:	9306      	str	r3, [sp, #24]
 80154d2:	9508      	str	r5, [sp, #32]
 80154d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80154d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80154dc:	2200      	movs	r2, #0
 80154de:	2312      	movs	r3, #18
 80154e0:	e7b0      	b.n	8015444 <_dtoa_r+0x26c>
 80154e2:	2301      	movs	r3, #1
 80154e4:	9308      	str	r3, [sp, #32]
 80154e6:	e7f5      	b.n	80154d4 <_dtoa_r+0x2fc>
 80154e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80154ee:	e7b8      	b.n	8015462 <_dtoa_r+0x28a>
 80154f0:	3101      	adds	r1, #1
 80154f2:	6041      	str	r1, [r0, #4]
 80154f4:	0052      	lsls	r2, r2, #1
 80154f6:	e7b8      	b.n	801546a <_dtoa_r+0x292>
 80154f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80154fa:	9a01      	ldr	r2, [sp, #4]
 80154fc:	601a      	str	r2, [r3, #0]
 80154fe:	9b03      	ldr	r3, [sp, #12]
 8015500:	2b0e      	cmp	r3, #14
 8015502:	f200 809d 	bhi.w	8015640 <_dtoa_r+0x468>
 8015506:	2d00      	cmp	r5, #0
 8015508:	f000 809a 	beq.w	8015640 <_dtoa_r+0x468>
 801550c:	9b00      	ldr	r3, [sp, #0]
 801550e:	2b00      	cmp	r3, #0
 8015510:	dd32      	ble.n	8015578 <_dtoa_r+0x3a0>
 8015512:	4ab7      	ldr	r2, [pc, #732]	; (80157f0 <_dtoa_r+0x618>)
 8015514:	f003 030f 	and.w	r3, r3, #15
 8015518:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801551c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015520:	9b00      	ldr	r3, [sp, #0]
 8015522:	05d8      	lsls	r0, r3, #23
 8015524:	ea4f 1723 	mov.w	r7, r3, asr #4
 8015528:	d516      	bpl.n	8015558 <_dtoa_r+0x380>
 801552a:	4bb2      	ldr	r3, [pc, #712]	; (80157f4 <_dtoa_r+0x61c>)
 801552c:	ec51 0b19 	vmov	r0, r1, d9
 8015530:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015534:	f7eb f98a 	bl	800084c <__aeabi_ddiv>
 8015538:	f007 070f 	and.w	r7, r7, #15
 801553c:	4682      	mov	sl, r0
 801553e:	468b      	mov	fp, r1
 8015540:	2503      	movs	r5, #3
 8015542:	4eac      	ldr	r6, [pc, #688]	; (80157f4 <_dtoa_r+0x61c>)
 8015544:	b957      	cbnz	r7, 801555c <_dtoa_r+0x384>
 8015546:	4642      	mov	r2, r8
 8015548:	464b      	mov	r3, r9
 801554a:	4650      	mov	r0, sl
 801554c:	4659      	mov	r1, fp
 801554e:	f7eb f97d 	bl	800084c <__aeabi_ddiv>
 8015552:	4682      	mov	sl, r0
 8015554:	468b      	mov	fp, r1
 8015556:	e028      	b.n	80155aa <_dtoa_r+0x3d2>
 8015558:	2502      	movs	r5, #2
 801555a:	e7f2      	b.n	8015542 <_dtoa_r+0x36a>
 801555c:	07f9      	lsls	r1, r7, #31
 801555e:	d508      	bpl.n	8015572 <_dtoa_r+0x39a>
 8015560:	4640      	mov	r0, r8
 8015562:	4649      	mov	r1, r9
 8015564:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015568:	f7eb f846 	bl	80005f8 <__aeabi_dmul>
 801556c:	3501      	adds	r5, #1
 801556e:	4680      	mov	r8, r0
 8015570:	4689      	mov	r9, r1
 8015572:	107f      	asrs	r7, r7, #1
 8015574:	3608      	adds	r6, #8
 8015576:	e7e5      	b.n	8015544 <_dtoa_r+0x36c>
 8015578:	f000 809b 	beq.w	80156b2 <_dtoa_r+0x4da>
 801557c:	9b00      	ldr	r3, [sp, #0]
 801557e:	4f9d      	ldr	r7, [pc, #628]	; (80157f4 <_dtoa_r+0x61c>)
 8015580:	425e      	negs	r6, r3
 8015582:	4b9b      	ldr	r3, [pc, #620]	; (80157f0 <_dtoa_r+0x618>)
 8015584:	f006 020f 	and.w	r2, r6, #15
 8015588:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015590:	ec51 0b19 	vmov	r0, r1, d9
 8015594:	f7eb f830 	bl	80005f8 <__aeabi_dmul>
 8015598:	1136      	asrs	r6, r6, #4
 801559a:	4682      	mov	sl, r0
 801559c:	468b      	mov	fp, r1
 801559e:	2300      	movs	r3, #0
 80155a0:	2502      	movs	r5, #2
 80155a2:	2e00      	cmp	r6, #0
 80155a4:	d17a      	bne.n	801569c <_dtoa_r+0x4c4>
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d1d3      	bne.n	8015552 <_dtoa_r+0x37a>
 80155aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	f000 8082 	beq.w	80156b6 <_dtoa_r+0x4de>
 80155b2:	4b91      	ldr	r3, [pc, #580]	; (80157f8 <_dtoa_r+0x620>)
 80155b4:	2200      	movs	r2, #0
 80155b6:	4650      	mov	r0, sl
 80155b8:	4659      	mov	r1, fp
 80155ba:	f7eb fa8f 	bl	8000adc <__aeabi_dcmplt>
 80155be:	2800      	cmp	r0, #0
 80155c0:	d079      	beq.n	80156b6 <_dtoa_r+0x4de>
 80155c2:	9b03      	ldr	r3, [sp, #12]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d076      	beq.n	80156b6 <_dtoa_r+0x4de>
 80155c8:	9b02      	ldr	r3, [sp, #8]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	dd36      	ble.n	801563c <_dtoa_r+0x464>
 80155ce:	9b00      	ldr	r3, [sp, #0]
 80155d0:	4650      	mov	r0, sl
 80155d2:	4659      	mov	r1, fp
 80155d4:	1e5f      	subs	r7, r3, #1
 80155d6:	2200      	movs	r2, #0
 80155d8:	4b88      	ldr	r3, [pc, #544]	; (80157fc <_dtoa_r+0x624>)
 80155da:	f7eb f80d 	bl	80005f8 <__aeabi_dmul>
 80155de:	9e02      	ldr	r6, [sp, #8]
 80155e0:	4682      	mov	sl, r0
 80155e2:	468b      	mov	fp, r1
 80155e4:	3501      	adds	r5, #1
 80155e6:	4628      	mov	r0, r5
 80155e8:	f7ea ff9c 	bl	8000524 <__aeabi_i2d>
 80155ec:	4652      	mov	r2, sl
 80155ee:	465b      	mov	r3, fp
 80155f0:	f7eb f802 	bl	80005f8 <__aeabi_dmul>
 80155f4:	4b82      	ldr	r3, [pc, #520]	; (8015800 <_dtoa_r+0x628>)
 80155f6:	2200      	movs	r2, #0
 80155f8:	f7ea fe48 	bl	800028c <__adddf3>
 80155fc:	46d0      	mov	r8, sl
 80155fe:	46d9      	mov	r9, fp
 8015600:	4682      	mov	sl, r0
 8015602:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8015606:	2e00      	cmp	r6, #0
 8015608:	d158      	bne.n	80156bc <_dtoa_r+0x4e4>
 801560a:	4b7e      	ldr	r3, [pc, #504]	; (8015804 <_dtoa_r+0x62c>)
 801560c:	2200      	movs	r2, #0
 801560e:	4640      	mov	r0, r8
 8015610:	4649      	mov	r1, r9
 8015612:	f7ea fe39 	bl	8000288 <__aeabi_dsub>
 8015616:	4652      	mov	r2, sl
 8015618:	465b      	mov	r3, fp
 801561a:	4680      	mov	r8, r0
 801561c:	4689      	mov	r9, r1
 801561e:	f7eb fa7b 	bl	8000b18 <__aeabi_dcmpgt>
 8015622:	2800      	cmp	r0, #0
 8015624:	f040 8295 	bne.w	8015b52 <_dtoa_r+0x97a>
 8015628:	4652      	mov	r2, sl
 801562a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801562e:	4640      	mov	r0, r8
 8015630:	4649      	mov	r1, r9
 8015632:	f7eb fa53 	bl	8000adc <__aeabi_dcmplt>
 8015636:	2800      	cmp	r0, #0
 8015638:	f040 8289 	bne.w	8015b4e <_dtoa_r+0x976>
 801563c:	ec5b ab19 	vmov	sl, fp, d9
 8015640:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015642:	2b00      	cmp	r3, #0
 8015644:	f2c0 8148 	blt.w	80158d8 <_dtoa_r+0x700>
 8015648:	9a00      	ldr	r2, [sp, #0]
 801564a:	2a0e      	cmp	r2, #14
 801564c:	f300 8144 	bgt.w	80158d8 <_dtoa_r+0x700>
 8015650:	4b67      	ldr	r3, [pc, #412]	; (80157f0 <_dtoa_r+0x618>)
 8015652:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015656:	e9d3 8900 	ldrd	r8, r9, [r3]
 801565a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801565c:	2b00      	cmp	r3, #0
 801565e:	f280 80d5 	bge.w	801580c <_dtoa_r+0x634>
 8015662:	9b03      	ldr	r3, [sp, #12]
 8015664:	2b00      	cmp	r3, #0
 8015666:	f300 80d1 	bgt.w	801580c <_dtoa_r+0x634>
 801566a:	f040 826f 	bne.w	8015b4c <_dtoa_r+0x974>
 801566e:	4b65      	ldr	r3, [pc, #404]	; (8015804 <_dtoa_r+0x62c>)
 8015670:	2200      	movs	r2, #0
 8015672:	4640      	mov	r0, r8
 8015674:	4649      	mov	r1, r9
 8015676:	f7ea ffbf 	bl	80005f8 <__aeabi_dmul>
 801567a:	4652      	mov	r2, sl
 801567c:	465b      	mov	r3, fp
 801567e:	f7eb fa41 	bl	8000b04 <__aeabi_dcmpge>
 8015682:	9e03      	ldr	r6, [sp, #12]
 8015684:	4637      	mov	r7, r6
 8015686:	2800      	cmp	r0, #0
 8015688:	f040 8245 	bne.w	8015b16 <_dtoa_r+0x93e>
 801568c:	9d01      	ldr	r5, [sp, #4]
 801568e:	2331      	movs	r3, #49	; 0x31
 8015690:	f805 3b01 	strb.w	r3, [r5], #1
 8015694:	9b00      	ldr	r3, [sp, #0]
 8015696:	3301      	adds	r3, #1
 8015698:	9300      	str	r3, [sp, #0]
 801569a:	e240      	b.n	8015b1e <_dtoa_r+0x946>
 801569c:	07f2      	lsls	r2, r6, #31
 801569e:	d505      	bpl.n	80156ac <_dtoa_r+0x4d4>
 80156a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80156a4:	f7ea ffa8 	bl	80005f8 <__aeabi_dmul>
 80156a8:	3501      	adds	r5, #1
 80156aa:	2301      	movs	r3, #1
 80156ac:	1076      	asrs	r6, r6, #1
 80156ae:	3708      	adds	r7, #8
 80156b0:	e777      	b.n	80155a2 <_dtoa_r+0x3ca>
 80156b2:	2502      	movs	r5, #2
 80156b4:	e779      	b.n	80155aa <_dtoa_r+0x3d2>
 80156b6:	9f00      	ldr	r7, [sp, #0]
 80156b8:	9e03      	ldr	r6, [sp, #12]
 80156ba:	e794      	b.n	80155e6 <_dtoa_r+0x40e>
 80156bc:	9901      	ldr	r1, [sp, #4]
 80156be:	4b4c      	ldr	r3, [pc, #304]	; (80157f0 <_dtoa_r+0x618>)
 80156c0:	4431      	add	r1, r6
 80156c2:	910d      	str	r1, [sp, #52]	; 0x34
 80156c4:	9908      	ldr	r1, [sp, #32]
 80156c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80156ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80156ce:	2900      	cmp	r1, #0
 80156d0:	d043      	beq.n	801575a <_dtoa_r+0x582>
 80156d2:	494d      	ldr	r1, [pc, #308]	; (8015808 <_dtoa_r+0x630>)
 80156d4:	2000      	movs	r0, #0
 80156d6:	f7eb f8b9 	bl	800084c <__aeabi_ddiv>
 80156da:	4652      	mov	r2, sl
 80156dc:	465b      	mov	r3, fp
 80156de:	f7ea fdd3 	bl	8000288 <__aeabi_dsub>
 80156e2:	9d01      	ldr	r5, [sp, #4]
 80156e4:	4682      	mov	sl, r0
 80156e6:	468b      	mov	fp, r1
 80156e8:	4649      	mov	r1, r9
 80156ea:	4640      	mov	r0, r8
 80156ec:	f7eb fa34 	bl	8000b58 <__aeabi_d2iz>
 80156f0:	4606      	mov	r6, r0
 80156f2:	f7ea ff17 	bl	8000524 <__aeabi_i2d>
 80156f6:	4602      	mov	r2, r0
 80156f8:	460b      	mov	r3, r1
 80156fa:	4640      	mov	r0, r8
 80156fc:	4649      	mov	r1, r9
 80156fe:	f7ea fdc3 	bl	8000288 <__aeabi_dsub>
 8015702:	3630      	adds	r6, #48	; 0x30
 8015704:	f805 6b01 	strb.w	r6, [r5], #1
 8015708:	4652      	mov	r2, sl
 801570a:	465b      	mov	r3, fp
 801570c:	4680      	mov	r8, r0
 801570e:	4689      	mov	r9, r1
 8015710:	f7eb f9e4 	bl	8000adc <__aeabi_dcmplt>
 8015714:	2800      	cmp	r0, #0
 8015716:	d163      	bne.n	80157e0 <_dtoa_r+0x608>
 8015718:	4642      	mov	r2, r8
 801571a:	464b      	mov	r3, r9
 801571c:	4936      	ldr	r1, [pc, #216]	; (80157f8 <_dtoa_r+0x620>)
 801571e:	2000      	movs	r0, #0
 8015720:	f7ea fdb2 	bl	8000288 <__aeabi_dsub>
 8015724:	4652      	mov	r2, sl
 8015726:	465b      	mov	r3, fp
 8015728:	f7eb f9d8 	bl	8000adc <__aeabi_dcmplt>
 801572c:	2800      	cmp	r0, #0
 801572e:	f040 80b5 	bne.w	801589c <_dtoa_r+0x6c4>
 8015732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015734:	429d      	cmp	r5, r3
 8015736:	d081      	beq.n	801563c <_dtoa_r+0x464>
 8015738:	4b30      	ldr	r3, [pc, #192]	; (80157fc <_dtoa_r+0x624>)
 801573a:	2200      	movs	r2, #0
 801573c:	4650      	mov	r0, sl
 801573e:	4659      	mov	r1, fp
 8015740:	f7ea ff5a 	bl	80005f8 <__aeabi_dmul>
 8015744:	4b2d      	ldr	r3, [pc, #180]	; (80157fc <_dtoa_r+0x624>)
 8015746:	4682      	mov	sl, r0
 8015748:	468b      	mov	fp, r1
 801574a:	4640      	mov	r0, r8
 801574c:	4649      	mov	r1, r9
 801574e:	2200      	movs	r2, #0
 8015750:	f7ea ff52 	bl	80005f8 <__aeabi_dmul>
 8015754:	4680      	mov	r8, r0
 8015756:	4689      	mov	r9, r1
 8015758:	e7c6      	b.n	80156e8 <_dtoa_r+0x510>
 801575a:	4650      	mov	r0, sl
 801575c:	4659      	mov	r1, fp
 801575e:	f7ea ff4b 	bl	80005f8 <__aeabi_dmul>
 8015762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015764:	9d01      	ldr	r5, [sp, #4]
 8015766:	930f      	str	r3, [sp, #60]	; 0x3c
 8015768:	4682      	mov	sl, r0
 801576a:	468b      	mov	fp, r1
 801576c:	4649      	mov	r1, r9
 801576e:	4640      	mov	r0, r8
 8015770:	f7eb f9f2 	bl	8000b58 <__aeabi_d2iz>
 8015774:	4606      	mov	r6, r0
 8015776:	f7ea fed5 	bl	8000524 <__aeabi_i2d>
 801577a:	3630      	adds	r6, #48	; 0x30
 801577c:	4602      	mov	r2, r0
 801577e:	460b      	mov	r3, r1
 8015780:	4640      	mov	r0, r8
 8015782:	4649      	mov	r1, r9
 8015784:	f7ea fd80 	bl	8000288 <__aeabi_dsub>
 8015788:	f805 6b01 	strb.w	r6, [r5], #1
 801578c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801578e:	429d      	cmp	r5, r3
 8015790:	4680      	mov	r8, r0
 8015792:	4689      	mov	r9, r1
 8015794:	f04f 0200 	mov.w	r2, #0
 8015798:	d124      	bne.n	80157e4 <_dtoa_r+0x60c>
 801579a:	4b1b      	ldr	r3, [pc, #108]	; (8015808 <_dtoa_r+0x630>)
 801579c:	4650      	mov	r0, sl
 801579e:	4659      	mov	r1, fp
 80157a0:	f7ea fd74 	bl	800028c <__adddf3>
 80157a4:	4602      	mov	r2, r0
 80157a6:	460b      	mov	r3, r1
 80157a8:	4640      	mov	r0, r8
 80157aa:	4649      	mov	r1, r9
 80157ac:	f7eb f9b4 	bl	8000b18 <__aeabi_dcmpgt>
 80157b0:	2800      	cmp	r0, #0
 80157b2:	d173      	bne.n	801589c <_dtoa_r+0x6c4>
 80157b4:	4652      	mov	r2, sl
 80157b6:	465b      	mov	r3, fp
 80157b8:	4913      	ldr	r1, [pc, #76]	; (8015808 <_dtoa_r+0x630>)
 80157ba:	2000      	movs	r0, #0
 80157bc:	f7ea fd64 	bl	8000288 <__aeabi_dsub>
 80157c0:	4602      	mov	r2, r0
 80157c2:	460b      	mov	r3, r1
 80157c4:	4640      	mov	r0, r8
 80157c6:	4649      	mov	r1, r9
 80157c8:	f7eb f988 	bl	8000adc <__aeabi_dcmplt>
 80157cc:	2800      	cmp	r0, #0
 80157ce:	f43f af35 	beq.w	801563c <_dtoa_r+0x464>
 80157d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80157d4:	1e6b      	subs	r3, r5, #1
 80157d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80157d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80157dc:	2b30      	cmp	r3, #48	; 0x30
 80157de:	d0f8      	beq.n	80157d2 <_dtoa_r+0x5fa>
 80157e0:	9700      	str	r7, [sp, #0]
 80157e2:	e049      	b.n	8015878 <_dtoa_r+0x6a0>
 80157e4:	4b05      	ldr	r3, [pc, #20]	; (80157fc <_dtoa_r+0x624>)
 80157e6:	f7ea ff07 	bl	80005f8 <__aeabi_dmul>
 80157ea:	4680      	mov	r8, r0
 80157ec:	4689      	mov	r9, r1
 80157ee:	e7bd      	b.n	801576c <_dtoa_r+0x594>
 80157f0:	08019780 	.word	0x08019780
 80157f4:	08019758 	.word	0x08019758
 80157f8:	3ff00000 	.word	0x3ff00000
 80157fc:	40240000 	.word	0x40240000
 8015800:	401c0000 	.word	0x401c0000
 8015804:	40140000 	.word	0x40140000
 8015808:	3fe00000 	.word	0x3fe00000
 801580c:	9d01      	ldr	r5, [sp, #4]
 801580e:	4656      	mov	r6, sl
 8015810:	465f      	mov	r7, fp
 8015812:	4642      	mov	r2, r8
 8015814:	464b      	mov	r3, r9
 8015816:	4630      	mov	r0, r6
 8015818:	4639      	mov	r1, r7
 801581a:	f7eb f817 	bl	800084c <__aeabi_ddiv>
 801581e:	f7eb f99b 	bl	8000b58 <__aeabi_d2iz>
 8015822:	4682      	mov	sl, r0
 8015824:	f7ea fe7e 	bl	8000524 <__aeabi_i2d>
 8015828:	4642      	mov	r2, r8
 801582a:	464b      	mov	r3, r9
 801582c:	f7ea fee4 	bl	80005f8 <__aeabi_dmul>
 8015830:	4602      	mov	r2, r0
 8015832:	460b      	mov	r3, r1
 8015834:	4630      	mov	r0, r6
 8015836:	4639      	mov	r1, r7
 8015838:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801583c:	f7ea fd24 	bl	8000288 <__aeabi_dsub>
 8015840:	f805 6b01 	strb.w	r6, [r5], #1
 8015844:	9e01      	ldr	r6, [sp, #4]
 8015846:	9f03      	ldr	r7, [sp, #12]
 8015848:	1bae      	subs	r6, r5, r6
 801584a:	42b7      	cmp	r7, r6
 801584c:	4602      	mov	r2, r0
 801584e:	460b      	mov	r3, r1
 8015850:	d135      	bne.n	80158be <_dtoa_r+0x6e6>
 8015852:	f7ea fd1b 	bl	800028c <__adddf3>
 8015856:	4642      	mov	r2, r8
 8015858:	464b      	mov	r3, r9
 801585a:	4606      	mov	r6, r0
 801585c:	460f      	mov	r7, r1
 801585e:	f7eb f95b 	bl	8000b18 <__aeabi_dcmpgt>
 8015862:	b9d0      	cbnz	r0, 801589a <_dtoa_r+0x6c2>
 8015864:	4642      	mov	r2, r8
 8015866:	464b      	mov	r3, r9
 8015868:	4630      	mov	r0, r6
 801586a:	4639      	mov	r1, r7
 801586c:	f7eb f92c 	bl	8000ac8 <__aeabi_dcmpeq>
 8015870:	b110      	cbz	r0, 8015878 <_dtoa_r+0x6a0>
 8015872:	f01a 0f01 	tst.w	sl, #1
 8015876:	d110      	bne.n	801589a <_dtoa_r+0x6c2>
 8015878:	4620      	mov	r0, r4
 801587a:	ee18 1a10 	vmov	r1, s16
 801587e:	f000 ff3f 	bl	8016700 <_Bfree>
 8015882:	2300      	movs	r3, #0
 8015884:	9800      	ldr	r0, [sp, #0]
 8015886:	702b      	strb	r3, [r5, #0]
 8015888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801588a:	3001      	adds	r0, #1
 801588c:	6018      	str	r0, [r3, #0]
 801588e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015890:	2b00      	cmp	r3, #0
 8015892:	f43f acf1 	beq.w	8015278 <_dtoa_r+0xa0>
 8015896:	601d      	str	r5, [r3, #0]
 8015898:	e4ee      	b.n	8015278 <_dtoa_r+0xa0>
 801589a:	9f00      	ldr	r7, [sp, #0]
 801589c:	462b      	mov	r3, r5
 801589e:	461d      	mov	r5, r3
 80158a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80158a4:	2a39      	cmp	r2, #57	; 0x39
 80158a6:	d106      	bne.n	80158b6 <_dtoa_r+0x6de>
 80158a8:	9a01      	ldr	r2, [sp, #4]
 80158aa:	429a      	cmp	r2, r3
 80158ac:	d1f7      	bne.n	801589e <_dtoa_r+0x6c6>
 80158ae:	9901      	ldr	r1, [sp, #4]
 80158b0:	2230      	movs	r2, #48	; 0x30
 80158b2:	3701      	adds	r7, #1
 80158b4:	700a      	strb	r2, [r1, #0]
 80158b6:	781a      	ldrb	r2, [r3, #0]
 80158b8:	3201      	adds	r2, #1
 80158ba:	701a      	strb	r2, [r3, #0]
 80158bc:	e790      	b.n	80157e0 <_dtoa_r+0x608>
 80158be:	4ba6      	ldr	r3, [pc, #664]	; (8015b58 <_dtoa_r+0x980>)
 80158c0:	2200      	movs	r2, #0
 80158c2:	f7ea fe99 	bl	80005f8 <__aeabi_dmul>
 80158c6:	2200      	movs	r2, #0
 80158c8:	2300      	movs	r3, #0
 80158ca:	4606      	mov	r6, r0
 80158cc:	460f      	mov	r7, r1
 80158ce:	f7eb f8fb 	bl	8000ac8 <__aeabi_dcmpeq>
 80158d2:	2800      	cmp	r0, #0
 80158d4:	d09d      	beq.n	8015812 <_dtoa_r+0x63a>
 80158d6:	e7cf      	b.n	8015878 <_dtoa_r+0x6a0>
 80158d8:	9a08      	ldr	r2, [sp, #32]
 80158da:	2a00      	cmp	r2, #0
 80158dc:	f000 80d7 	beq.w	8015a8e <_dtoa_r+0x8b6>
 80158e0:	9a06      	ldr	r2, [sp, #24]
 80158e2:	2a01      	cmp	r2, #1
 80158e4:	f300 80ba 	bgt.w	8015a5c <_dtoa_r+0x884>
 80158e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80158ea:	2a00      	cmp	r2, #0
 80158ec:	f000 80b2 	beq.w	8015a54 <_dtoa_r+0x87c>
 80158f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80158f4:	9e07      	ldr	r6, [sp, #28]
 80158f6:	9d04      	ldr	r5, [sp, #16]
 80158f8:	9a04      	ldr	r2, [sp, #16]
 80158fa:	441a      	add	r2, r3
 80158fc:	9204      	str	r2, [sp, #16]
 80158fe:	9a05      	ldr	r2, [sp, #20]
 8015900:	2101      	movs	r1, #1
 8015902:	441a      	add	r2, r3
 8015904:	4620      	mov	r0, r4
 8015906:	9205      	str	r2, [sp, #20]
 8015908:	f000 fffc 	bl	8016904 <__i2b>
 801590c:	4607      	mov	r7, r0
 801590e:	2d00      	cmp	r5, #0
 8015910:	dd0c      	ble.n	801592c <_dtoa_r+0x754>
 8015912:	9b05      	ldr	r3, [sp, #20]
 8015914:	2b00      	cmp	r3, #0
 8015916:	dd09      	ble.n	801592c <_dtoa_r+0x754>
 8015918:	42ab      	cmp	r3, r5
 801591a:	9a04      	ldr	r2, [sp, #16]
 801591c:	bfa8      	it	ge
 801591e:	462b      	movge	r3, r5
 8015920:	1ad2      	subs	r2, r2, r3
 8015922:	9204      	str	r2, [sp, #16]
 8015924:	9a05      	ldr	r2, [sp, #20]
 8015926:	1aed      	subs	r5, r5, r3
 8015928:	1ad3      	subs	r3, r2, r3
 801592a:	9305      	str	r3, [sp, #20]
 801592c:	9b07      	ldr	r3, [sp, #28]
 801592e:	b31b      	cbz	r3, 8015978 <_dtoa_r+0x7a0>
 8015930:	9b08      	ldr	r3, [sp, #32]
 8015932:	2b00      	cmp	r3, #0
 8015934:	f000 80af 	beq.w	8015a96 <_dtoa_r+0x8be>
 8015938:	2e00      	cmp	r6, #0
 801593a:	dd13      	ble.n	8015964 <_dtoa_r+0x78c>
 801593c:	4639      	mov	r1, r7
 801593e:	4632      	mov	r2, r6
 8015940:	4620      	mov	r0, r4
 8015942:	f001 f89f 	bl	8016a84 <__pow5mult>
 8015946:	ee18 2a10 	vmov	r2, s16
 801594a:	4601      	mov	r1, r0
 801594c:	4607      	mov	r7, r0
 801594e:	4620      	mov	r0, r4
 8015950:	f000 ffee 	bl	8016930 <__multiply>
 8015954:	ee18 1a10 	vmov	r1, s16
 8015958:	4680      	mov	r8, r0
 801595a:	4620      	mov	r0, r4
 801595c:	f000 fed0 	bl	8016700 <_Bfree>
 8015960:	ee08 8a10 	vmov	s16, r8
 8015964:	9b07      	ldr	r3, [sp, #28]
 8015966:	1b9a      	subs	r2, r3, r6
 8015968:	d006      	beq.n	8015978 <_dtoa_r+0x7a0>
 801596a:	ee18 1a10 	vmov	r1, s16
 801596e:	4620      	mov	r0, r4
 8015970:	f001 f888 	bl	8016a84 <__pow5mult>
 8015974:	ee08 0a10 	vmov	s16, r0
 8015978:	2101      	movs	r1, #1
 801597a:	4620      	mov	r0, r4
 801597c:	f000 ffc2 	bl	8016904 <__i2b>
 8015980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015982:	2b00      	cmp	r3, #0
 8015984:	4606      	mov	r6, r0
 8015986:	f340 8088 	ble.w	8015a9a <_dtoa_r+0x8c2>
 801598a:	461a      	mov	r2, r3
 801598c:	4601      	mov	r1, r0
 801598e:	4620      	mov	r0, r4
 8015990:	f001 f878 	bl	8016a84 <__pow5mult>
 8015994:	9b06      	ldr	r3, [sp, #24]
 8015996:	2b01      	cmp	r3, #1
 8015998:	4606      	mov	r6, r0
 801599a:	f340 8081 	ble.w	8015aa0 <_dtoa_r+0x8c8>
 801599e:	f04f 0800 	mov.w	r8, #0
 80159a2:	6933      	ldr	r3, [r6, #16]
 80159a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80159a8:	6918      	ldr	r0, [r3, #16]
 80159aa:	f000 ff5b 	bl	8016864 <__hi0bits>
 80159ae:	f1c0 0020 	rsb	r0, r0, #32
 80159b2:	9b05      	ldr	r3, [sp, #20]
 80159b4:	4418      	add	r0, r3
 80159b6:	f010 001f 	ands.w	r0, r0, #31
 80159ba:	f000 8092 	beq.w	8015ae2 <_dtoa_r+0x90a>
 80159be:	f1c0 0320 	rsb	r3, r0, #32
 80159c2:	2b04      	cmp	r3, #4
 80159c4:	f340 808a 	ble.w	8015adc <_dtoa_r+0x904>
 80159c8:	f1c0 001c 	rsb	r0, r0, #28
 80159cc:	9b04      	ldr	r3, [sp, #16]
 80159ce:	4403      	add	r3, r0
 80159d0:	9304      	str	r3, [sp, #16]
 80159d2:	9b05      	ldr	r3, [sp, #20]
 80159d4:	4403      	add	r3, r0
 80159d6:	4405      	add	r5, r0
 80159d8:	9305      	str	r3, [sp, #20]
 80159da:	9b04      	ldr	r3, [sp, #16]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	dd07      	ble.n	80159f0 <_dtoa_r+0x818>
 80159e0:	ee18 1a10 	vmov	r1, s16
 80159e4:	461a      	mov	r2, r3
 80159e6:	4620      	mov	r0, r4
 80159e8:	f001 f8a6 	bl	8016b38 <__lshift>
 80159ec:	ee08 0a10 	vmov	s16, r0
 80159f0:	9b05      	ldr	r3, [sp, #20]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	dd05      	ble.n	8015a02 <_dtoa_r+0x82a>
 80159f6:	4631      	mov	r1, r6
 80159f8:	461a      	mov	r2, r3
 80159fa:	4620      	mov	r0, r4
 80159fc:	f001 f89c 	bl	8016b38 <__lshift>
 8015a00:	4606      	mov	r6, r0
 8015a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d06e      	beq.n	8015ae6 <_dtoa_r+0x90e>
 8015a08:	ee18 0a10 	vmov	r0, s16
 8015a0c:	4631      	mov	r1, r6
 8015a0e:	f001 f903 	bl	8016c18 <__mcmp>
 8015a12:	2800      	cmp	r0, #0
 8015a14:	da67      	bge.n	8015ae6 <_dtoa_r+0x90e>
 8015a16:	9b00      	ldr	r3, [sp, #0]
 8015a18:	3b01      	subs	r3, #1
 8015a1a:	ee18 1a10 	vmov	r1, s16
 8015a1e:	9300      	str	r3, [sp, #0]
 8015a20:	220a      	movs	r2, #10
 8015a22:	2300      	movs	r3, #0
 8015a24:	4620      	mov	r0, r4
 8015a26:	f000 fe8d 	bl	8016744 <__multadd>
 8015a2a:	9b08      	ldr	r3, [sp, #32]
 8015a2c:	ee08 0a10 	vmov	s16, r0
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	f000 81b1 	beq.w	8015d98 <_dtoa_r+0xbc0>
 8015a36:	2300      	movs	r3, #0
 8015a38:	4639      	mov	r1, r7
 8015a3a:	220a      	movs	r2, #10
 8015a3c:	4620      	mov	r0, r4
 8015a3e:	f000 fe81 	bl	8016744 <__multadd>
 8015a42:	9b02      	ldr	r3, [sp, #8]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	4607      	mov	r7, r0
 8015a48:	f300 808e 	bgt.w	8015b68 <_dtoa_r+0x990>
 8015a4c:	9b06      	ldr	r3, [sp, #24]
 8015a4e:	2b02      	cmp	r3, #2
 8015a50:	dc51      	bgt.n	8015af6 <_dtoa_r+0x91e>
 8015a52:	e089      	b.n	8015b68 <_dtoa_r+0x990>
 8015a54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015a5a:	e74b      	b.n	80158f4 <_dtoa_r+0x71c>
 8015a5c:	9b03      	ldr	r3, [sp, #12]
 8015a5e:	1e5e      	subs	r6, r3, #1
 8015a60:	9b07      	ldr	r3, [sp, #28]
 8015a62:	42b3      	cmp	r3, r6
 8015a64:	bfbf      	itttt	lt
 8015a66:	9b07      	ldrlt	r3, [sp, #28]
 8015a68:	9607      	strlt	r6, [sp, #28]
 8015a6a:	1af2      	sublt	r2, r6, r3
 8015a6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8015a6e:	bfb6      	itet	lt
 8015a70:	189b      	addlt	r3, r3, r2
 8015a72:	1b9e      	subge	r6, r3, r6
 8015a74:	930a      	strlt	r3, [sp, #40]	; 0x28
 8015a76:	9b03      	ldr	r3, [sp, #12]
 8015a78:	bfb8      	it	lt
 8015a7a:	2600      	movlt	r6, #0
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	bfb7      	itett	lt
 8015a80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8015a84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8015a88:	1a9d      	sublt	r5, r3, r2
 8015a8a:	2300      	movlt	r3, #0
 8015a8c:	e734      	b.n	80158f8 <_dtoa_r+0x720>
 8015a8e:	9e07      	ldr	r6, [sp, #28]
 8015a90:	9d04      	ldr	r5, [sp, #16]
 8015a92:	9f08      	ldr	r7, [sp, #32]
 8015a94:	e73b      	b.n	801590e <_dtoa_r+0x736>
 8015a96:	9a07      	ldr	r2, [sp, #28]
 8015a98:	e767      	b.n	801596a <_dtoa_r+0x792>
 8015a9a:	9b06      	ldr	r3, [sp, #24]
 8015a9c:	2b01      	cmp	r3, #1
 8015a9e:	dc18      	bgt.n	8015ad2 <_dtoa_r+0x8fa>
 8015aa0:	f1ba 0f00 	cmp.w	sl, #0
 8015aa4:	d115      	bne.n	8015ad2 <_dtoa_r+0x8fa>
 8015aa6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015aaa:	b993      	cbnz	r3, 8015ad2 <_dtoa_r+0x8fa>
 8015aac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015ab0:	0d1b      	lsrs	r3, r3, #20
 8015ab2:	051b      	lsls	r3, r3, #20
 8015ab4:	b183      	cbz	r3, 8015ad8 <_dtoa_r+0x900>
 8015ab6:	9b04      	ldr	r3, [sp, #16]
 8015ab8:	3301      	adds	r3, #1
 8015aba:	9304      	str	r3, [sp, #16]
 8015abc:	9b05      	ldr	r3, [sp, #20]
 8015abe:	3301      	adds	r3, #1
 8015ac0:	9305      	str	r3, [sp, #20]
 8015ac2:	f04f 0801 	mov.w	r8, #1
 8015ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	f47f af6a 	bne.w	80159a2 <_dtoa_r+0x7ca>
 8015ace:	2001      	movs	r0, #1
 8015ad0:	e76f      	b.n	80159b2 <_dtoa_r+0x7da>
 8015ad2:	f04f 0800 	mov.w	r8, #0
 8015ad6:	e7f6      	b.n	8015ac6 <_dtoa_r+0x8ee>
 8015ad8:	4698      	mov	r8, r3
 8015ada:	e7f4      	b.n	8015ac6 <_dtoa_r+0x8ee>
 8015adc:	f43f af7d 	beq.w	80159da <_dtoa_r+0x802>
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	301c      	adds	r0, #28
 8015ae4:	e772      	b.n	80159cc <_dtoa_r+0x7f4>
 8015ae6:	9b03      	ldr	r3, [sp, #12]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	dc37      	bgt.n	8015b5c <_dtoa_r+0x984>
 8015aec:	9b06      	ldr	r3, [sp, #24]
 8015aee:	2b02      	cmp	r3, #2
 8015af0:	dd34      	ble.n	8015b5c <_dtoa_r+0x984>
 8015af2:	9b03      	ldr	r3, [sp, #12]
 8015af4:	9302      	str	r3, [sp, #8]
 8015af6:	9b02      	ldr	r3, [sp, #8]
 8015af8:	b96b      	cbnz	r3, 8015b16 <_dtoa_r+0x93e>
 8015afa:	4631      	mov	r1, r6
 8015afc:	2205      	movs	r2, #5
 8015afe:	4620      	mov	r0, r4
 8015b00:	f000 fe20 	bl	8016744 <__multadd>
 8015b04:	4601      	mov	r1, r0
 8015b06:	4606      	mov	r6, r0
 8015b08:	ee18 0a10 	vmov	r0, s16
 8015b0c:	f001 f884 	bl	8016c18 <__mcmp>
 8015b10:	2800      	cmp	r0, #0
 8015b12:	f73f adbb 	bgt.w	801568c <_dtoa_r+0x4b4>
 8015b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b18:	9d01      	ldr	r5, [sp, #4]
 8015b1a:	43db      	mvns	r3, r3
 8015b1c:	9300      	str	r3, [sp, #0]
 8015b1e:	f04f 0800 	mov.w	r8, #0
 8015b22:	4631      	mov	r1, r6
 8015b24:	4620      	mov	r0, r4
 8015b26:	f000 fdeb 	bl	8016700 <_Bfree>
 8015b2a:	2f00      	cmp	r7, #0
 8015b2c:	f43f aea4 	beq.w	8015878 <_dtoa_r+0x6a0>
 8015b30:	f1b8 0f00 	cmp.w	r8, #0
 8015b34:	d005      	beq.n	8015b42 <_dtoa_r+0x96a>
 8015b36:	45b8      	cmp	r8, r7
 8015b38:	d003      	beq.n	8015b42 <_dtoa_r+0x96a>
 8015b3a:	4641      	mov	r1, r8
 8015b3c:	4620      	mov	r0, r4
 8015b3e:	f000 fddf 	bl	8016700 <_Bfree>
 8015b42:	4639      	mov	r1, r7
 8015b44:	4620      	mov	r0, r4
 8015b46:	f000 fddb 	bl	8016700 <_Bfree>
 8015b4a:	e695      	b.n	8015878 <_dtoa_r+0x6a0>
 8015b4c:	2600      	movs	r6, #0
 8015b4e:	4637      	mov	r7, r6
 8015b50:	e7e1      	b.n	8015b16 <_dtoa_r+0x93e>
 8015b52:	9700      	str	r7, [sp, #0]
 8015b54:	4637      	mov	r7, r6
 8015b56:	e599      	b.n	801568c <_dtoa_r+0x4b4>
 8015b58:	40240000 	.word	0x40240000
 8015b5c:	9b08      	ldr	r3, [sp, #32]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	f000 80ca 	beq.w	8015cf8 <_dtoa_r+0xb20>
 8015b64:	9b03      	ldr	r3, [sp, #12]
 8015b66:	9302      	str	r3, [sp, #8]
 8015b68:	2d00      	cmp	r5, #0
 8015b6a:	dd05      	ble.n	8015b78 <_dtoa_r+0x9a0>
 8015b6c:	4639      	mov	r1, r7
 8015b6e:	462a      	mov	r2, r5
 8015b70:	4620      	mov	r0, r4
 8015b72:	f000 ffe1 	bl	8016b38 <__lshift>
 8015b76:	4607      	mov	r7, r0
 8015b78:	f1b8 0f00 	cmp.w	r8, #0
 8015b7c:	d05b      	beq.n	8015c36 <_dtoa_r+0xa5e>
 8015b7e:	6879      	ldr	r1, [r7, #4]
 8015b80:	4620      	mov	r0, r4
 8015b82:	f000 fd7d 	bl	8016680 <_Balloc>
 8015b86:	4605      	mov	r5, r0
 8015b88:	b928      	cbnz	r0, 8015b96 <_dtoa_r+0x9be>
 8015b8a:	4b87      	ldr	r3, [pc, #540]	; (8015da8 <_dtoa_r+0xbd0>)
 8015b8c:	4602      	mov	r2, r0
 8015b8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015b92:	f7ff bb3b 	b.w	801520c <_dtoa_r+0x34>
 8015b96:	693a      	ldr	r2, [r7, #16]
 8015b98:	3202      	adds	r2, #2
 8015b9a:	0092      	lsls	r2, r2, #2
 8015b9c:	f107 010c 	add.w	r1, r7, #12
 8015ba0:	300c      	adds	r0, #12
 8015ba2:	f7fd fccf 	bl	8013544 <memcpy>
 8015ba6:	2201      	movs	r2, #1
 8015ba8:	4629      	mov	r1, r5
 8015baa:	4620      	mov	r0, r4
 8015bac:	f000 ffc4 	bl	8016b38 <__lshift>
 8015bb0:	9b01      	ldr	r3, [sp, #4]
 8015bb2:	f103 0901 	add.w	r9, r3, #1
 8015bb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8015bba:	4413      	add	r3, r2
 8015bbc:	9305      	str	r3, [sp, #20]
 8015bbe:	f00a 0301 	and.w	r3, sl, #1
 8015bc2:	46b8      	mov	r8, r7
 8015bc4:	9304      	str	r3, [sp, #16]
 8015bc6:	4607      	mov	r7, r0
 8015bc8:	4631      	mov	r1, r6
 8015bca:	ee18 0a10 	vmov	r0, s16
 8015bce:	f7ff fa75 	bl	80150bc <quorem>
 8015bd2:	4641      	mov	r1, r8
 8015bd4:	9002      	str	r0, [sp, #8]
 8015bd6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015bda:	ee18 0a10 	vmov	r0, s16
 8015bde:	f001 f81b 	bl	8016c18 <__mcmp>
 8015be2:	463a      	mov	r2, r7
 8015be4:	9003      	str	r0, [sp, #12]
 8015be6:	4631      	mov	r1, r6
 8015be8:	4620      	mov	r0, r4
 8015bea:	f001 f831 	bl	8016c50 <__mdiff>
 8015bee:	68c2      	ldr	r2, [r0, #12]
 8015bf0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8015bf4:	4605      	mov	r5, r0
 8015bf6:	bb02      	cbnz	r2, 8015c3a <_dtoa_r+0xa62>
 8015bf8:	4601      	mov	r1, r0
 8015bfa:	ee18 0a10 	vmov	r0, s16
 8015bfe:	f001 f80b 	bl	8016c18 <__mcmp>
 8015c02:	4602      	mov	r2, r0
 8015c04:	4629      	mov	r1, r5
 8015c06:	4620      	mov	r0, r4
 8015c08:	9207      	str	r2, [sp, #28]
 8015c0a:	f000 fd79 	bl	8016700 <_Bfree>
 8015c0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015c12:	ea43 0102 	orr.w	r1, r3, r2
 8015c16:	9b04      	ldr	r3, [sp, #16]
 8015c18:	430b      	orrs	r3, r1
 8015c1a:	464d      	mov	r5, r9
 8015c1c:	d10f      	bne.n	8015c3e <_dtoa_r+0xa66>
 8015c1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015c22:	d02a      	beq.n	8015c7a <_dtoa_r+0xaa2>
 8015c24:	9b03      	ldr	r3, [sp, #12]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	dd02      	ble.n	8015c30 <_dtoa_r+0xa58>
 8015c2a:	9b02      	ldr	r3, [sp, #8]
 8015c2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8015c30:	f88b a000 	strb.w	sl, [fp]
 8015c34:	e775      	b.n	8015b22 <_dtoa_r+0x94a>
 8015c36:	4638      	mov	r0, r7
 8015c38:	e7ba      	b.n	8015bb0 <_dtoa_r+0x9d8>
 8015c3a:	2201      	movs	r2, #1
 8015c3c:	e7e2      	b.n	8015c04 <_dtoa_r+0xa2c>
 8015c3e:	9b03      	ldr	r3, [sp, #12]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	db04      	blt.n	8015c4e <_dtoa_r+0xa76>
 8015c44:	9906      	ldr	r1, [sp, #24]
 8015c46:	430b      	orrs	r3, r1
 8015c48:	9904      	ldr	r1, [sp, #16]
 8015c4a:	430b      	orrs	r3, r1
 8015c4c:	d122      	bne.n	8015c94 <_dtoa_r+0xabc>
 8015c4e:	2a00      	cmp	r2, #0
 8015c50:	ddee      	ble.n	8015c30 <_dtoa_r+0xa58>
 8015c52:	ee18 1a10 	vmov	r1, s16
 8015c56:	2201      	movs	r2, #1
 8015c58:	4620      	mov	r0, r4
 8015c5a:	f000 ff6d 	bl	8016b38 <__lshift>
 8015c5e:	4631      	mov	r1, r6
 8015c60:	ee08 0a10 	vmov	s16, r0
 8015c64:	f000 ffd8 	bl	8016c18 <__mcmp>
 8015c68:	2800      	cmp	r0, #0
 8015c6a:	dc03      	bgt.n	8015c74 <_dtoa_r+0xa9c>
 8015c6c:	d1e0      	bne.n	8015c30 <_dtoa_r+0xa58>
 8015c6e:	f01a 0f01 	tst.w	sl, #1
 8015c72:	d0dd      	beq.n	8015c30 <_dtoa_r+0xa58>
 8015c74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015c78:	d1d7      	bne.n	8015c2a <_dtoa_r+0xa52>
 8015c7a:	2339      	movs	r3, #57	; 0x39
 8015c7c:	f88b 3000 	strb.w	r3, [fp]
 8015c80:	462b      	mov	r3, r5
 8015c82:	461d      	mov	r5, r3
 8015c84:	3b01      	subs	r3, #1
 8015c86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015c8a:	2a39      	cmp	r2, #57	; 0x39
 8015c8c:	d071      	beq.n	8015d72 <_dtoa_r+0xb9a>
 8015c8e:	3201      	adds	r2, #1
 8015c90:	701a      	strb	r2, [r3, #0]
 8015c92:	e746      	b.n	8015b22 <_dtoa_r+0x94a>
 8015c94:	2a00      	cmp	r2, #0
 8015c96:	dd07      	ble.n	8015ca8 <_dtoa_r+0xad0>
 8015c98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015c9c:	d0ed      	beq.n	8015c7a <_dtoa_r+0xaa2>
 8015c9e:	f10a 0301 	add.w	r3, sl, #1
 8015ca2:	f88b 3000 	strb.w	r3, [fp]
 8015ca6:	e73c      	b.n	8015b22 <_dtoa_r+0x94a>
 8015ca8:	9b05      	ldr	r3, [sp, #20]
 8015caa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8015cae:	4599      	cmp	r9, r3
 8015cb0:	d047      	beq.n	8015d42 <_dtoa_r+0xb6a>
 8015cb2:	ee18 1a10 	vmov	r1, s16
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	220a      	movs	r2, #10
 8015cba:	4620      	mov	r0, r4
 8015cbc:	f000 fd42 	bl	8016744 <__multadd>
 8015cc0:	45b8      	cmp	r8, r7
 8015cc2:	ee08 0a10 	vmov	s16, r0
 8015cc6:	f04f 0300 	mov.w	r3, #0
 8015cca:	f04f 020a 	mov.w	r2, #10
 8015cce:	4641      	mov	r1, r8
 8015cd0:	4620      	mov	r0, r4
 8015cd2:	d106      	bne.n	8015ce2 <_dtoa_r+0xb0a>
 8015cd4:	f000 fd36 	bl	8016744 <__multadd>
 8015cd8:	4680      	mov	r8, r0
 8015cda:	4607      	mov	r7, r0
 8015cdc:	f109 0901 	add.w	r9, r9, #1
 8015ce0:	e772      	b.n	8015bc8 <_dtoa_r+0x9f0>
 8015ce2:	f000 fd2f 	bl	8016744 <__multadd>
 8015ce6:	4639      	mov	r1, r7
 8015ce8:	4680      	mov	r8, r0
 8015cea:	2300      	movs	r3, #0
 8015cec:	220a      	movs	r2, #10
 8015cee:	4620      	mov	r0, r4
 8015cf0:	f000 fd28 	bl	8016744 <__multadd>
 8015cf4:	4607      	mov	r7, r0
 8015cf6:	e7f1      	b.n	8015cdc <_dtoa_r+0xb04>
 8015cf8:	9b03      	ldr	r3, [sp, #12]
 8015cfa:	9302      	str	r3, [sp, #8]
 8015cfc:	9d01      	ldr	r5, [sp, #4]
 8015cfe:	ee18 0a10 	vmov	r0, s16
 8015d02:	4631      	mov	r1, r6
 8015d04:	f7ff f9da 	bl	80150bc <quorem>
 8015d08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015d0c:	9b01      	ldr	r3, [sp, #4]
 8015d0e:	f805 ab01 	strb.w	sl, [r5], #1
 8015d12:	1aea      	subs	r2, r5, r3
 8015d14:	9b02      	ldr	r3, [sp, #8]
 8015d16:	4293      	cmp	r3, r2
 8015d18:	dd09      	ble.n	8015d2e <_dtoa_r+0xb56>
 8015d1a:	ee18 1a10 	vmov	r1, s16
 8015d1e:	2300      	movs	r3, #0
 8015d20:	220a      	movs	r2, #10
 8015d22:	4620      	mov	r0, r4
 8015d24:	f000 fd0e 	bl	8016744 <__multadd>
 8015d28:	ee08 0a10 	vmov	s16, r0
 8015d2c:	e7e7      	b.n	8015cfe <_dtoa_r+0xb26>
 8015d2e:	9b02      	ldr	r3, [sp, #8]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	bfc8      	it	gt
 8015d34:	461d      	movgt	r5, r3
 8015d36:	9b01      	ldr	r3, [sp, #4]
 8015d38:	bfd8      	it	le
 8015d3a:	2501      	movle	r5, #1
 8015d3c:	441d      	add	r5, r3
 8015d3e:	f04f 0800 	mov.w	r8, #0
 8015d42:	ee18 1a10 	vmov	r1, s16
 8015d46:	2201      	movs	r2, #1
 8015d48:	4620      	mov	r0, r4
 8015d4a:	f000 fef5 	bl	8016b38 <__lshift>
 8015d4e:	4631      	mov	r1, r6
 8015d50:	ee08 0a10 	vmov	s16, r0
 8015d54:	f000 ff60 	bl	8016c18 <__mcmp>
 8015d58:	2800      	cmp	r0, #0
 8015d5a:	dc91      	bgt.n	8015c80 <_dtoa_r+0xaa8>
 8015d5c:	d102      	bne.n	8015d64 <_dtoa_r+0xb8c>
 8015d5e:	f01a 0f01 	tst.w	sl, #1
 8015d62:	d18d      	bne.n	8015c80 <_dtoa_r+0xaa8>
 8015d64:	462b      	mov	r3, r5
 8015d66:	461d      	mov	r5, r3
 8015d68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015d6c:	2a30      	cmp	r2, #48	; 0x30
 8015d6e:	d0fa      	beq.n	8015d66 <_dtoa_r+0xb8e>
 8015d70:	e6d7      	b.n	8015b22 <_dtoa_r+0x94a>
 8015d72:	9a01      	ldr	r2, [sp, #4]
 8015d74:	429a      	cmp	r2, r3
 8015d76:	d184      	bne.n	8015c82 <_dtoa_r+0xaaa>
 8015d78:	9b00      	ldr	r3, [sp, #0]
 8015d7a:	3301      	adds	r3, #1
 8015d7c:	9300      	str	r3, [sp, #0]
 8015d7e:	2331      	movs	r3, #49	; 0x31
 8015d80:	7013      	strb	r3, [r2, #0]
 8015d82:	e6ce      	b.n	8015b22 <_dtoa_r+0x94a>
 8015d84:	4b09      	ldr	r3, [pc, #36]	; (8015dac <_dtoa_r+0xbd4>)
 8015d86:	f7ff ba95 	b.w	80152b4 <_dtoa_r+0xdc>
 8015d8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	f47f aa6e 	bne.w	801526e <_dtoa_r+0x96>
 8015d92:	4b07      	ldr	r3, [pc, #28]	; (8015db0 <_dtoa_r+0xbd8>)
 8015d94:	f7ff ba8e 	b.w	80152b4 <_dtoa_r+0xdc>
 8015d98:	9b02      	ldr	r3, [sp, #8]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	dcae      	bgt.n	8015cfc <_dtoa_r+0xb24>
 8015d9e:	9b06      	ldr	r3, [sp, #24]
 8015da0:	2b02      	cmp	r3, #2
 8015da2:	f73f aea8 	bgt.w	8015af6 <_dtoa_r+0x91e>
 8015da6:	e7a9      	b.n	8015cfc <_dtoa_r+0xb24>
 8015da8:	0801966f 	.word	0x0801966f
 8015dac:	0801957c 	.word	0x0801957c
 8015db0:	080195f0 	.word	0x080195f0

08015db4 <__sflush_r>:
 8015db4:	898a      	ldrh	r2, [r1, #12]
 8015db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dba:	4605      	mov	r5, r0
 8015dbc:	0710      	lsls	r0, r2, #28
 8015dbe:	460c      	mov	r4, r1
 8015dc0:	d458      	bmi.n	8015e74 <__sflush_r+0xc0>
 8015dc2:	684b      	ldr	r3, [r1, #4]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	dc05      	bgt.n	8015dd4 <__sflush_r+0x20>
 8015dc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	dc02      	bgt.n	8015dd4 <__sflush_r+0x20>
 8015dce:	2000      	movs	r0, #0
 8015dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015dd6:	2e00      	cmp	r6, #0
 8015dd8:	d0f9      	beq.n	8015dce <__sflush_r+0x1a>
 8015dda:	2300      	movs	r3, #0
 8015ddc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015de0:	682f      	ldr	r7, [r5, #0]
 8015de2:	602b      	str	r3, [r5, #0]
 8015de4:	d032      	beq.n	8015e4c <__sflush_r+0x98>
 8015de6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015de8:	89a3      	ldrh	r3, [r4, #12]
 8015dea:	075a      	lsls	r2, r3, #29
 8015dec:	d505      	bpl.n	8015dfa <__sflush_r+0x46>
 8015dee:	6863      	ldr	r3, [r4, #4]
 8015df0:	1ac0      	subs	r0, r0, r3
 8015df2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015df4:	b10b      	cbz	r3, 8015dfa <__sflush_r+0x46>
 8015df6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015df8:	1ac0      	subs	r0, r0, r3
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	4602      	mov	r2, r0
 8015dfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015e00:	6a21      	ldr	r1, [r4, #32]
 8015e02:	4628      	mov	r0, r5
 8015e04:	47b0      	blx	r6
 8015e06:	1c43      	adds	r3, r0, #1
 8015e08:	89a3      	ldrh	r3, [r4, #12]
 8015e0a:	d106      	bne.n	8015e1a <__sflush_r+0x66>
 8015e0c:	6829      	ldr	r1, [r5, #0]
 8015e0e:	291d      	cmp	r1, #29
 8015e10:	d82c      	bhi.n	8015e6c <__sflush_r+0xb8>
 8015e12:	4a2a      	ldr	r2, [pc, #168]	; (8015ebc <__sflush_r+0x108>)
 8015e14:	40ca      	lsrs	r2, r1
 8015e16:	07d6      	lsls	r6, r2, #31
 8015e18:	d528      	bpl.n	8015e6c <__sflush_r+0xb8>
 8015e1a:	2200      	movs	r2, #0
 8015e1c:	6062      	str	r2, [r4, #4]
 8015e1e:	04d9      	lsls	r1, r3, #19
 8015e20:	6922      	ldr	r2, [r4, #16]
 8015e22:	6022      	str	r2, [r4, #0]
 8015e24:	d504      	bpl.n	8015e30 <__sflush_r+0x7c>
 8015e26:	1c42      	adds	r2, r0, #1
 8015e28:	d101      	bne.n	8015e2e <__sflush_r+0x7a>
 8015e2a:	682b      	ldr	r3, [r5, #0]
 8015e2c:	b903      	cbnz	r3, 8015e30 <__sflush_r+0x7c>
 8015e2e:	6560      	str	r0, [r4, #84]	; 0x54
 8015e30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e32:	602f      	str	r7, [r5, #0]
 8015e34:	2900      	cmp	r1, #0
 8015e36:	d0ca      	beq.n	8015dce <__sflush_r+0x1a>
 8015e38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e3c:	4299      	cmp	r1, r3
 8015e3e:	d002      	beq.n	8015e46 <__sflush_r+0x92>
 8015e40:	4628      	mov	r0, r5
 8015e42:	f7fd fbab 	bl	801359c <_free_r>
 8015e46:	2000      	movs	r0, #0
 8015e48:	6360      	str	r0, [r4, #52]	; 0x34
 8015e4a:	e7c1      	b.n	8015dd0 <__sflush_r+0x1c>
 8015e4c:	6a21      	ldr	r1, [r4, #32]
 8015e4e:	2301      	movs	r3, #1
 8015e50:	4628      	mov	r0, r5
 8015e52:	47b0      	blx	r6
 8015e54:	1c41      	adds	r1, r0, #1
 8015e56:	d1c7      	bne.n	8015de8 <__sflush_r+0x34>
 8015e58:	682b      	ldr	r3, [r5, #0]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d0c4      	beq.n	8015de8 <__sflush_r+0x34>
 8015e5e:	2b1d      	cmp	r3, #29
 8015e60:	d001      	beq.n	8015e66 <__sflush_r+0xb2>
 8015e62:	2b16      	cmp	r3, #22
 8015e64:	d101      	bne.n	8015e6a <__sflush_r+0xb6>
 8015e66:	602f      	str	r7, [r5, #0]
 8015e68:	e7b1      	b.n	8015dce <__sflush_r+0x1a>
 8015e6a:	89a3      	ldrh	r3, [r4, #12]
 8015e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e70:	81a3      	strh	r3, [r4, #12]
 8015e72:	e7ad      	b.n	8015dd0 <__sflush_r+0x1c>
 8015e74:	690f      	ldr	r7, [r1, #16]
 8015e76:	2f00      	cmp	r7, #0
 8015e78:	d0a9      	beq.n	8015dce <__sflush_r+0x1a>
 8015e7a:	0793      	lsls	r3, r2, #30
 8015e7c:	680e      	ldr	r6, [r1, #0]
 8015e7e:	bf08      	it	eq
 8015e80:	694b      	ldreq	r3, [r1, #20]
 8015e82:	600f      	str	r7, [r1, #0]
 8015e84:	bf18      	it	ne
 8015e86:	2300      	movne	r3, #0
 8015e88:	eba6 0807 	sub.w	r8, r6, r7
 8015e8c:	608b      	str	r3, [r1, #8]
 8015e8e:	f1b8 0f00 	cmp.w	r8, #0
 8015e92:	dd9c      	ble.n	8015dce <__sflush_r+0x1a>
 8015e94:	6a21      	ldr	r1, [r4, #32]
 8015e96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015e98:	4643      	mov	r3, r8
 8015e9a:	463a      	mov	r2, r7
 8015e9c:	4628      	mov	r0, r5
 8015e9e:	47b0      	blx	r6
 8015ea0:	2800      	cmp	r0, #0
 8015ea2:	dc06      	bgt.n	8015eb2 <__sflush_r+0xfe>
 8015ea4:	89a3      	ldrh	r3, [r4, #12]
 8015ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015eaa:	81a3      	strh	r3, [r4, #12]
 8015eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015eb0:	e78e      	b.n	8015dd0 <__sflush_r+0x1c>
 8015eb2:	4407      	add	r7, r0
 8015eb4:	eba8 0800 	sub.w	r8, r8, r0
 8015eb8:	e7e9      	b.n	8015e8e <__sflush_r+0xda>
 8015eba:	bf00      	nop
 8015ebc:	20400001 	.word	0x20400001

08015ec0 <_fflush_r>:
 8015ec0:	b538      	push	{r3, r4, r5, lr}
 8015ec2:	690b      	ldr	r3, [r1, #16]
 8015ec4:	4605      	mov	r5, r0
 8015ec6:	460c      	mov	r4, r1
 8015ec8:	b913      	cbnz	r3, 8015ed0 <_fflush_r+0x10>
 8015eca:	2500      	movs	r5, #0
 8015ecc:	4628      	mov	r0, r5
 8015ece:	bd38      	pop	{r3, r4, r5, pc}
 8015ed0:	b118      	cbz	r0, 8015eda <_fflush_r+0x1a>
 8015ed2:	6983      	ldr	r3, [r0, #24]
 8015ed4:	b90b      	cbnz	r3, 8015eda <_fflush_r+0x1a>
 8015ed6:	f7fd f9b3 	bl	8013240 <__sinit>
 8015eda:	4b14      	ldr	r3, [pc, #80]	; (8015f2c <_fflush_r+0x6c>)
 8015edc:	429c      	cmp	r4, r3
 8015ede:	d11b      	bne.n	8015f18 <_fflush_r+0x58>
 8015ee0:	686c      	ldr	r4, [r5, #4]
 8015ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d0ef      	beq.n	8015eca <_fflush_r+0xa>
 8015eea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015eec:	07d0      	lsls	r0, r2, #31
 8015eee:	d404      	bmi.n	8015efa <_fflush_r+0x3a>
 8015ef0:	0599      	lsls	r1, r3, #22
 8015ef2:	d402      	bmi.n	8015efa <_fflush_r+0x3a>
 8015ef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ef6:	f7fd fb12 	bl	801351e <__retarget_lock_acquire_recursive>
 8015efa:	4628      	mov	r0, r5
 8015efc:	4621      	mov	r1, r4
 8015efe:	f7ff ff59 	bl	8015db4 <__sflush_r>
 8015f02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015f04:	07da      	lsls	r2, r3, #31
 8015f06:	4605      	mov	r5, r0
 8015f08:	d4e0      	bmi.n	8015ecc <_fflush_r+0xc>
 8015f0a:	89a3      	ldrh	r3, [r4, #12]
 8015f0c:	059b      	lsls	r3, r3, #22
 8015f0e:	d4dd      	bmi.n	8015ecc <_fflush_r+0xc>
 8015f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015f12:	f7fd fb05 	bl	8013520 <__retarget_lock_release_recursive>
 8015f16:	e7d9      	b.n	8015ecc <_fflush_r+0xc>
 8015f18:	4b05      	ldr	r3, [pc, #20]	; (8015f30 <_fflush_r+0x70>)
 8015f1a:	429c      	cmp	r4, r3
 8015f1c:	d101      	bne.n	8015f22 <_fflush_r+0x62>
 8015f1e:	68ac      	ldr	r4, [r5, #8]
 8015f20:	e7df      	b.n	8015ee2 <_fflush_r+0x22>
 8015f22:	4b04      	ldr	r3, [pc, #16]	; (8015f34 <_fflush_r+0x74>)
 8015f24:	429c      	cmp	r4, r3
 8015f26:	bf08      	it	eq
 8015f28:	68ec      	ldreq	r4, [r5, #12]
 8015f2a:	e7da      	b.n	8015ee2 <_fflush_r+0x22>
 8015f2c:	08019528 	.word	0x08019528
 8015f30:	08019548 	.word	0x08019548
 8015f34:	08019508 	.word	0x08019508

08015f38 <rshift>:
 8015f38:	6903      	ldr	r3, [r0, #16]
 8015f3a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015f3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f42:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015f46:	f100 0414 	add.w	r4, r0, #20
 8015f4a:	dd45      	ble.n	8015fd8 <rshift+0xa0>
 8015f4c:	f011 011f 	ands.w	r1, r1, #31
 8015f50:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015f54:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015f58:	d10c      	bne.n	8015f74 <rshift+0x3c>
 8015f5a:	f100 0710 	add.w	r7, r0, #16
 8015f5e:	4629      	mov	r1, r5
 8015f60:	42b1      	cmp	r1, r6
 8015f62:	d334      	bcc.n	8015fce <rshift+0x96>
 8015f64:	1a9b      	subs	r3, r3, r2
 8015f66:	009b      	lsls	r3, r3, #2
 8015f68:	1eea      	subs	r2, r5, #3
 8015f6a:	4296      	cmp	r6, r2
 8015f6c:	bf38      	it	cc
 8015f6e:	2300      	movcc	r3, #0
 8015f70:	4423      	add	r3, r4
 8015f72:	e015      	b.n	8015fa0 <rshift+0x68>
 8015f74:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015f78:	f1c1 0820 	rsb	r8, r1, #32
 8015f7c:	40cf      	lsrs	r7, r1
 8015f7e:	f105 0e04 	add.w	lr, r5, #4
 8015f82:	46a1      	mov	r9, r4
 8015f84:	4576      	cmp	r6, lr
 8015f86:	46f4      	mov	ip, lr
 8015f88:	d815      	bhi.n	8015fb6 <rshift+0x7e>
 8015f8a:	1a9a      	subs	r2, r3, r2
 8015f8c:	0092      	lsls	r2, r2, #2
 8015f8e:	3a04      	subs	r2, #4
 8015f90:	3501      	adds	r5, #1
 8015f92:	42ae      	cmp	r6, r5
 8015f94:	bf38      	it	cc
 8015f96:	2200      	movcc	r2, #0
 8015f98:	18a3      	adds	r3, r4, r2
 8015f9a:	50a7      	str	r7, [r4, r2]
 8015f9c:	b107      	cbz	r7, 8015fa0 <rshift+0x68>
 8015f9e:	3304      	adds	r3, #4
 8015fa0:	1b1a      	subs	r2, r3, r4
 8015fa2:	42a3      	cmp	r3, r4
 8015fa4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015fa8:	bf08      	it	eq
 8015faa:	2300      	moveq	r3, #0
 8015fac:	6102      	str	r2, [r0, #16]
 8015fae:	bf08      	it	eq
 8015fb0:	6143      	streq	r3, [r0, #20]
 8015fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fb6:	f8dc c000 	ldr.w	ip, [ip]
 8015fba:	fa0c fc08 	lsl.w	ip, ip, r8
 8015fbe:	ea4c 0707 	orr.w	r7, ip, r7
 8015fc2:	f849 7b04 	str.w	r7, [r9], #4
 8015fc6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015fca:	40cf      	lsrs	r7, r1
 8015fcc:	e7da      	b.n	8015f84 <rshift+0x4c>
 8015fce:	f851 cb04 	ldr.w	ip, [r1], #4
 8015fd2:	f847 cf04 	str.w	ip, [r7, #4]!
 8015fd6:	e7c3      	b.n	8015f60 <rshift+0x28>
 8015fd8:	4623      	mov	r3, r4
 8015fda:	e7e1      	b.n	8015fa0 <rshift+0x68>

08015fdc <__hexdig_fun>:
 8015fdc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015fe0:	2b09      	cmp	r3, #9
 8015fe2:	d802      	bhi.n	8015fea <__hexdig_fun+0xe>
 8015fe4:	3820      	subs	r0, #32
 8015fe6:	b2c0      	uxtb	r0, r0
 8015fe8:	4770      	bx	lr
 8015fea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015fee:	2b05      	cmp	r3, #5
 8015ff0:	d801      	bhi.n	8015ff6 <__hexdig_fun+0x1a>
 8015ff2:	3847      	subs	r0, #71	; 0x47
 8015ff4:	e7f7      	b.n	8015fe6 <__hexdig_fun+0xa>
 8015ff6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015ffa:	2b05      	cmp	r3, #5
 8015ffc:	d801      	bhi.n	8016002 <__hexdig_fun+0x26>
 8015ffe:	3827      	subs	r0, #39	; 0x27
 8016000:	e7f1      	b.n	8015fe6 <__hexdig_fun+0xa>
 8016002:	2000      	movs	r0, #0
 8016004:	4770      	bx	lr
	...

08016008 <__gethex>:
 8016008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801600c:	ed2d 8b02 	vpush	{d8}
 8016010:	b089      	sub	sp, #36	; 0x24
 8016012:	ee08 0a10 	vmov	s16, r0
 8016016:	9304      	str	r3, [sp, #16]
 8016018:	4bb4      	ldr	r3, [pc, #720]	; (80162ec <__gethex+0x2e4>)
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	9301      	str	r3, [sp, #4]
 801601e:	4618      	mov	r0, r3
 8016020:	468b      	mov	fp, r1
 8016022:	4690      	mov	r8, r2
 8016024:	f7ea f8d4 	bl	80001d0 <strlen>
 8016028:	9b01      	ldr	r3, [sp, #4]
 801602a:	f8db 2000 	ldr.w	r2, [fp]
 801602e:	4403      	add	r3, r0
 8016030:	4682      	mov	sl, r0
 8016032:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016036:	9305      	str	r3, [sp, #20]
 8016038:	1c93      	adds	r3, r2, #2
 801603a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801603e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016042:	32fe      	adds	r2, #254	; 0xfe
 8016044:	18d1      	adds	r1, r2, r3
 8016046:	461f      	mov	r7, r3
 8016048:	f813 0b01 	ldrb.w	r0, [r3], #1
 801604c:	9100      	str	r1, [sp, #0]
 801604e:	2830      	cmp	r0, #48	; 0x30
 8016050:	d0f8      	beq.n	8016044 <__gethex+0x3c>
 8016052:	f7ff ffc3 	bl	8015fdc <__hexdig_fun>
 8016056:	4604      	mov	r4, r0
 8016058:	2800      	cmp	r0, #0
 801605a:	d13a      	bne.n	80160d2 <__gethex+0xca>
 801605c:	9901      	ldr	r1, [sp, #4]
 801605e:	4652      	mov	r2, sl
 8016060:	4638      	mov	r0, r7
 8016062:	f7fe f8d7 	bl	8014214 <strncmp>
 8016066:	4605      	mov	r5, r0
 8016068:	2800      	cmp	r0, #0
 801606a:	d168      	bne.n	801613e <__gethex+0x136>
 801606c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8016070:	eb07 060a 	add.w	r6, r7, sl
 8016074:	f7ff ffb2 	bl	8015fdc <__hexdig_fun>
 8016078:	2800      	cmp	r0, #0
 801607a:	d062      	beq.n	8016142 <__gethex+0x13a>
 801607c:	4633      	mov	r3, r6
 801607e:	7818      	ldrb	r0, [r3, #0]
 8016080:	2830      	cmp	r0, #48	; 0x30
 8016082:	461f      	mov	r7, r3
 8016084:	f103 0301 	add.w	r3, r3, #1
 8016088:	d0f9      	beq.n	801607e <__gethex+0x76>
 801608a:	f7ff ffa7 	bl	8015fdc <__hexdig_fun>
 801608e:	2301      	movs	r3, #1
 8016090:	fab0 f480 	clz	r4, r0
 8016094:	0964      	lsrs	r4, r4, #5
 8016096:	4635      	mov	r5, r6
 8016098:	9300      	str	r3, [sp, #0]
 801609a:	463a      	mov	r2, r7
 801609c:	4616      	mov	r6, r2
 801609e:	3201      	adds	r2, #1
 80160a0:	7830      	ldrb	r0, [r6, #0]
 80160a2:	f7ff ff9b 	bl	8015fdc <__hexdig_fun>
 80160a6:	2800      	cmp	r0, #0
 80160a8:	d1f8      	bne.n	801609c <__gethex+0x94>
 80160aa:	9901      	ldr	r1, [sp, #4]
 80160ac:	4652      	mov	r2, sl
 80160ae:	4630      	mov	r0, r6
 80160b0:	f7fe f8b0 	bl	8014214 <strncmp>
 80160b4:	b980      	cbnz	r0, 80160d8 <__gethex+0xd0>
 80160b6:	b94d      	cbnz	r5, 80160cc <__gethex+0xc4>
 80160b8:	eb06 050a 	add.w	r5, r6, sl
 80160bc:	462a      	mov	r2, r5
 80160be:	4616      	mov	r6, r2
 80160c0:	3201      	adds	r2, #1
 80160c2:	7830      	ldrb	r0, [r6, #0]
 80160c4:	f7ff ff8a 	bl	8015fdc <__hexdig_fun>
 80160c8:	2800      	cmp	r0, #0
 80160ca:	d1f8      	bne.n	80160be <__gethex+0xb6>
 80160cc:	1bad      	subs	r5, r5, r6
 80160ce:	00ad      	lsls	r5, r5, #2
 80160d0:	e004      	b.n	80160dc <__gethex+0xd4>
 80160d2:	2400      	movs	r4, #0
 80160d4:	4625      	mov	r5, r4
 80160d6:	e7e0      	b.n	801609a <__gethex+0x92>
 80160d8:	2d00      	cmp	r5, #0
 80160da:	d1f7      	bne.n	80160cc <__gethex+0xc4>
 80160dc:	7833      	ldrb	r3, [r6, #0]
 80160de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80160e2:	2b50      	cmp	r3, #80	; 0x50
 80160e4:	d13b      	bne.n	801615e <__gethex+0x156>
 80160e6:	7873      	ldrb	r3, [r6, #1]
 80160e8:	2b2b      	cmp	r3, #43	; 0x2b
 80160ea:	d02c      	beq.n	8016146 <__gethex+0x13e>
 80160ec:	2b2d      	cmp	r3, #45	; 0x2d
 80160ee:	d02e      	beq.n	801614e <__gethex+0x146>
 80160f0:	1c71      	adds	r1, r6, #1
 80160f2:	f04f 0900 	mov.w	r9, #0
 80160f6:	7808      	ldrb	r0, [r1, #0]
 80160f8:	f7ff ff70 	bl	8015fdc <__hexdig_fun>
 80160fc:	1e43      	subs	r3, r0, #1
 80160fe:	b2db      	uxtb	r3, r3
 8016100:	2b18      	cmp	r3, #24
 8016102:	d82c      	bhi.n	801615e <__gethex+0x156>
 8016104:	f1a0 0210 	sub.w	r2, r0, #16
 8016108:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801610c:	f7ff ff66 	bl	8015fdc <__hexdig_fun>
 8016110:	1e43      	subs	r3, r0, #1
 8016112:	b2db      	uxtb	r3, r3
 8016114:	2b18      	cmp	r3, #24
 8016116:	d91d      	bls.n	8016154 <__gethex+0x14c>
 8016118:	f1b9 0f00 	cmp.w	r9, #0
 801611c:	d000      	beq.n	8016120 <__gethex+0x118>
 801611e:	4252      	negs	r2, r2
 8016120:	4415      	add	r5, r2
 8016122:	f8cb 1000 	str.w	r1, [fp]
 8016126:	b1e4      	cbz	r4, 8016162 <__gethex+0x15a>
 8016128:	9b00      	ldr	r3, [sp, #0]
 801612a:	2b00      	cmp	r3, #0
 801612c:	bf14      	ite	ne
 801612e:	2700      	movne	r7, #0
 8016130:	2706      	moveq	r7, #6
 8016132:	4638      	mov	r0, r7
 8016134:	b009      	add	sp, #36	; 0x24
 8016136:	ecbd 8b02 	vpop	{d8}
 801613a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801613e:	463e      	mov	r6, r7
 8016140:	4625      	mov	r5, r4
 8016142:	2401      	movs	r4, #1
 8016144:	e7ca      	b.n	80160dc <__gethex+0xd4>
 8016146:	f04f 0900 	mov.w	r9, #0
 801614a:	1cb1      	adds	r1, r6, #2
 801614c:	e7d3      	b.n	80160f6 <__gethex+0xee>
 801614e:	f04f 0901 	mov.w	r9, #1
 8016152:	e7fa      	b.n	801614a <__gethex+0x142>
 8016154:	230a      	movs	r3, #10
 8016156:	fb03 0202 	mla	r2, r3, r2, r0
 801615a:	3a10      	subs	r2, #16
 801615c:	e7d4      	b.n	8016108 <__gethex+0x100>
 801615e:	4631      	mov	r1, r6
 8016160:	e7df      	b.n	8016122 <__gethex+0x11a>
 8016162:	1bf3      	subs	r3, r6, r7
 8016164:	3b01      	subs	r3, #1
 8016166:	4621      	mov	r1, r4
 8016168:	2b07      	cmp	r3, #7
 801616a:	dc0b      	bgt.n	8016184 <__gethex+0x17c>
 801616c:	ee18 0a10 	vmov	r0, s16
 8016170:	f000 fa86 	bl	8016680 <_Balloc>
 8016174:	4604      	mov	r4, r0
 8016176:	b940      	cbnz	r0, 801618a <__gethex+0x182>
 8016178:	4b5d      	ldr	r3, [pc, #372]	; (80162f0 <__gethex+0x2e8>)
 801617a:	4602      	mov	r2, r0
 801617c:	21de      	movs	r1, #222	; 0xde
 801617e:	485d      	ldr	r0, [pc, #372]	; (80162f4 <__gethex+0x2ec>)
 8016180:	f001 f8c4 	bl	801730c <__assert_func>
 8016184:	3101      	adds	r1, #1
 8016186:	105b      	asrs	r3, r3, #1
 8016188:	e7ee      	b.n	8016168 <__gethex+0x160>
 801618a:	f100 0914 	add.w	r9, r0, #20
 801618e:	f04f 0b00 	mov.w	fp, #0
 8016192:	f1ca 0301 	rsb	r3, sl, #1
 8016196:	f8cd 9008 	str.w	r9, [sp, #8]
 801619a:	f8cd b000 	str.w	fp, [sp]
 801619e:	9306      	str	r3, [sp, #24]
 80161a0:	42b7      	cmp	r7, r6
 80161a2:	d340      	bcc.n	8016226 <__gethex+0x21e>
 80161a4:	9802      	ldr	r0, [sp, #8]
 80161a6:	9b00      	ldr	r3, [sp, #0]
 80161a8:	f840 3b04 	str.w	r3, [r0], #4
 80161ac:	eba0 0009 	sub.w	r0, r0, r9
 80161b0:	1080      	asrs	r0, r0, #2
 80161b2:	0146      	lsls	r6, r0, #5
 80161b4:	6120      	str	r0, [r4, #16]
 80161b6:	4618      	mov	r0, r3
 80161b8:	f000 fb54 	bl	8016864 <__hi0bits>
 80161bc:	1a30      	subs	r0, r6, r0
 80161be:	f8d8 6000 	ldr.w	r6, [r8]
 80161c2:	42b0      	cmp	r0, r6
 80161c4:	dd63      	ble.n	801628e <__gethex+0x286>
 80161c6:	1b87      	subs	r7, r0, r6
 80161c8:	4639      	mov	r1, r7
 80161ca:	4620      	mov	r0, r4
 80161cc:	f000 fef8 	bl	8016fc0 <__any_on>
 80161d0:	4682      	mov	sl, r0
 80161d2:	b1a8      	cbz	r0, 8016200 <__gethex+0x1f8>
 80161d4:	1e7b      	subs	r3, r7, #1
 80161d6:	1159      	asrs	r1, r3, #5
 80161d8:	f003 021f 	and.w	r2, r3, #31
 80161dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80161e0:	f04f 0a01 	mov.w	sl, #1
 80161e4:	fa0a f202 	lsl.w	r2, sl, r2
 80161e8:	420a      	tst	r2, r1
 80161ea:	d009      	beq.n	8016200 <__gethex+0x1f8>
 80161ec:	4553      	cmp	r3, sl
 80161ee:	dd05      	ble.n	80161fc <__gethex+0x1f4>
 80161f0:	1eb9      	subs	r1, r7, #2
 80161f2:	4620      	mov	r0, r4
 80161f4:	f000 fee4 	bl	8016fc0 <__any_on>
 80161f8:	2800      	cmp	r0, #0
 80161fa:	d145      	bne.n	8016288 <__gethex+0x280>
 80161fc:	f04f 0a02 	mov.w	sl, #2
 8016200:	4639      	mov	r1, r7
 8016202:	4620      	mov	r0, r4
 8016204:	f7ff fe98 	bl	8015f38 <rshift>
 8016208:	443d      	add	r5, r7
 801620a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801620e:	42ab      	cmp	r3, r5
 8016210:	da4c      	bge.n	80162ac <__gethex+0x2a4>
 8016212:	ee18 0a10 	vmov	r0, s16
 8016216:	4621      	mov	r1, r4
 8016218:	f000 fa72 	bl	8016700 <_Bfree>
 801621c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801621e:	2300      	movs	r3, #0
 8016220:	6013      	str	r3, [r2, #0]
 8016222:	27a3      	movs	r7, #163	; 0xa3
 8016224:	e785      	b.n	8016132 <__gethex+0x12a>
 8016226:	1e73      	subs	r3, r6, #1
 8016228:	9a05      	ldr	r2, [sp, #20]
 801622a:	9303      	str	r3, [sp, #12]
 801622c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016230:	4293      	cmp	r3, r2
 8016232:	d019      	beq.n	8016268 <__gethex+0x260>
 8016234:	f1bb 0f20 	cmp.w	fp, #32
 8016238:	d107      	bne.n	801624a <__gethex+0x242>
 801623a:	9b02      	ldr	r3, [sp, #8]
 801623c:	9a00      	ldr	r2, [sp, #0]
 801623e:	f843 2b04 	str.w	r2, [r3], #4
 8016242:	9302      	str	r3, [sp, #8]
 8016244:	2300      	movs	r3, #0
 8016246:	9300      	str	r3, [sp, #0]
 8016248:	469b      	mov	fp, r3
 801624a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801624e:	f7ff fec5 	bl	8015fdc <__hexdig_fun>
 8016252:	9b00      	ldr	r3, [sp, #0]
 8016254:	f000 000f 	and.w	r0, r0, #15
 8016258:	fa00 f00b 	lsl.w	r0, r0, fp
 801625c:	4303      	orrs	r3, r0
 801625e:	9300      	str	r3, [sp, #0]
 8016260:	f10b 0b04 	add.w	fp, fp, #4
 8016264:	9b03      	ldr	r3, [sp, #12]
 8016266:	e00d      	b.n	8016284 <__gethex+0x27c>
 8016268:	9b03      	ldr	r3, [sp, #12]
 801626a:	9a06      	ldr	r2, [sp, #24]
 801626c:	4413      	add	r3, r2
 801626e:	42bb      	cmp	r3, r7
 8016270:	d3e0      	bcc.n	8016234 <__gethex+0x22c>
 8016272:	4618      	mov	r0, r3
 8016274:	9901      	ldr	r1, [sp, #4]
 8016276:	9307      	str	r3, [sp, #28]
 8016278:	4652      	mov	r2, sl
 801627a:	f7fd ffcb 	bl	8014214 <strncmp>
 801627e:	9b07      	ldr	r3, [sp, #28]
 8016280:	2800      	cmp	r0, #0
 8016282:	d1d7      	bne.n	8016234 <__gethex+0x22c>
 8016284:	461e      	mov	r6, r3
 8016286:	e78b      	b.n	80161a0 <__gethex+0x198>
 8016288:	f04f 0a03 	mov.w	sl, #3
 801628c:	e7b8      	b.n	8016200 <__gethex+0x1f8>
 801628e:	da0a      	bge.n	80162a6 <__gethex+0x29e>
 8016290:	1a37      	subs	r7, r6, r0
 8016292:	4621      	mov	r1, r4
 8016294:	ee18 0a10 	vmov	r0, s16
 8016298:	463a      	mov	r2, r7
 801629a:	f000 fc4d 	bl	8016b38 <__lshift>
 801629e:	1bed      	subs	r5, r5, r7
 80162a0:	4604      	mov	r4, r0
 80162a2:	f100 0914 	add.w	r9, r0, #20
 80162a6:	f04f 0a00 	mov.w	sl, #0
 80162aa:	e7ae      	b.n	801620a <__gethex+0x202>
 80162ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80162b0:	42a8      	cmp	r0, r5
 80162b2:	dd72      	ble.n	801639a <__gethex+0x392>
 80162b4:	1b45      	subs	r5, r0, r5
 80162b6:	42ae      	cmp	r6, r5
 80162b8:	dc36      	bgt.n	8016328 <__gethex+0x320>
 80162ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80162be:	2b02      	cmp	r3, #2
 80162c0:	d02a      	beq.n	8016318 <__gethex+0x310>
 80162c2:	2b03      	cmp	r3, #3
 80162c4:	d02c      	beq.n	8016320 <__gethex+0x318>
 80162c6:	2b01      	cmp	r3, #1
 80162c8:	d11c      	bne.n	8016304 <__gethex+0x2fc>
 80162ca:	42ae      	cmp	r6, r5
 80162cc:	d11a      	bne.n	8016304 <__gethex+0x2fc>
 80162ce:	2e01      	cmp	r6, #1
 80162d0:	d112      	bne.n	80162f8 <__gethex+0x2f0>
 80162d2:	9a04      	ldr	r2, [sp, #16]
 80162d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80162d8:	6013      	str	r3, [r2, #0]
 80162da:	2301      	movs	r3, #1
 80162dc:	6123      	str	r3, [r4, #16]
 80162de:	f8c9 3000 	str.w	r3, [r9]
 80162e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80162e4:	2762      	movs	r7, #98	; 0x62
 80162e6:	601c      	str	r4, [r3, #0]
 80162e8:	e723      	b.n	8016132 <__gethex+0x12a>
 80162ea:	bf00      	nop
 80162ec:	080196e8 	.word	0x080196e8
 80162f0:	0801966f 	.word	0x0801966f
 80162f4:	08019680 	.word	0x08019680
 80162f8:	1e71      	subs	r1, r6, #1
 80162fa:	4620      	mov	r0, r4
 80162fc:	f000 fe60 	bl	8016fc0 <__any_on>
 8016300:	2800      	cmp	r0, #0
 8016302:	d1e6      	bne.n	80162d2 <__gethex+0x2ca>
 8016304:	ee18 0a10 	vmov	r0, s16
 8016308:	4621      	mov	r1, r4
 801630a:	f000 f9f9 	bl	8016700 <_Bfree>
 801630e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016310:	2300      	movs	r3, #0
 8016312:	6013      	str	r3, [r2, #0]
 8016314:	2750      	movs	r7, #80	; 0x50
 8016316:	e70c      	b.n	8016132 <__gethex+0x12a>
 8016318:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801631a:	2b00      	cmp	r3, #0
 801631c:	d1f2      	bne.n	8016304 <__gethex+0x2fc>
 801631e:	e7d8      	b.n	80162d2 <__gethex+0x2ca>
 8016320:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016322:	2b00      	cmp	r3, #0
 8016324:	d1d5      	bne.n	80162d2 <__gethex+0x2ca>
 8016326:	e7ed      	b.n	8016304 <__gethex+0x2fc>
 8016328:	1e6f      	subs	r7, r5, #1
 801632a:	f1ba 0f00 	cmp.w	sl, #0
 801632e:	d131      	bne.n	8016394 <__gethex+0x38c>
 8016330:	b127      	cbz	r7, 801633c <__gethex+0x334>
 8016332:	4639      	mov	r1, r7
 8016334:	4620      	mov	r0, r4
 8016336:	f000 fe43 	bl	8016fc0 <__any_on>
 801633a:	4682      	mov	sl, r0
 801633c:	117b      	asrs	r3, r7, #5
 801633e:	2101      	movs	r1, #1
 8016340:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016344:	f007 071f 	and.w	r7, r7, #31
 8016348:	fa01 f707 	lsl.w	r7, r1, r7
 801634c:	421f      	tst	r7, r3
 801634e:	4629      	mov	r1, r5
 8016350:	4620      	mov	r0, r4
 8016352:	bf18      	it	ne
 8016354:	f04a 0a02 	orrne.w	sl, sl, #2
 8016358:	1b76      	subs	r6, r6, r5
 801635a:	f7ff fded 	bl	8015f38 <rshift>
 801635e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016362:	2702      	movs	r7, #2
 8016364:	f1ba 0f00 	cmp.w	sl, #0
 8016368:	d048      	beq.n	80163fc <__gethex+0x3f4>
 801636a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801636e:	2b02      	cmp	r3, #2
 8016370:	d015      	beq.n	801639e <__gethex+0x396>
 8016372:	2b03      	cmp	r3, #3
 8016374:	d017      	beq.n	80163a6 <__gethex+0x39e>
 8016376:	2b01      	cmp	r3, #1
 8016378:	d109      	bne.n	801638e <__gethex+0x386>
 801637a:	f01a 0f02 	tst.w	sl, #2
 801637e:	d006      	beq.n	801638e <__gethex+0x386>
 8016380:	f8d9 0000 	ldr.w	r0, [r9]
 8016384:	ea4a 0a00 	orr.w	sl, sl, r0
 8016388:	f01a 0f01 	tst.w	sl, #1
 801638c:	d10e      	bne.n	80163ac <__gethex+0x3a4>
 801638e:	f047 0710 	orr.w	r7, r7, #16
 8016392:	e033      	b.n	80163fc <__gethex+0x3f4>
 8016394:	f04f 0a01 	mov.w	sl, #1
 8016398:	e7d0      	b.n	801633c <__gethex+0x334>
 801639a:	2701      	movs	r7, #1
 801639c:	e7e2      	b.n	8016364 <__gethex+0x35c>
 801639e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80163a0:	f1c3 0301 	rsb	r3, r3, #1
 80163a4:	9315      	str	r3, [sp, #84]	; 0x54
 80163a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d0f0      	beq.n	801638e <__gethex+0x386>
 80163ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80163b0:	f104 0314 	add.w	r3, r4, #20
 80163b4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80163b8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80163bc:	f04f 0c00 	mov.w	ip, #0
 80163c0:	4618      	mov	r0, r3
 80163c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80163c6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80163ca:	d01c      	beq.n	8016406 <__gethex+0x3fe>
 80163cc:	3201      	adds	r2, #1
 80163ce:	6002      	str	r2, [r0, #0]
 80163d0:	2f02      	cmp	r7, #2
 80163d2:	f104 0314 	add.w	r3, r4, #20
 80163d6:	d13f      	bne.n	8016458 <__gethex+0x450>
 80163d8:	f8d8 2000 	ldr.w	r2, [r8]
 80163dc:	3a01      	subs	r2, #1
 80163de:	42b2      	cmp	r2, r6
 80163e0:	d10a      	bne.n	80163f8 <__gethex+0x3f0>
 80163e2:	1171      	asrs	r1, r6, #5
 80163e4:	2201      	movs	r2, #1
 80163e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80163ea:	f006 061f 	and.w	r6, r6, #31
 80163ee:	fa02 f606 	lsl.w	r6, r2, r6
 80163f2:	421e      	tst	r6, r3
 80163f4:	bf18      	it	ne
 80163f6:	4617      	movne	r7, r2
 80163f8:	f047 0720 	orr.w	r7, r7, #32
 80163fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80163fe:	601c      	str	r4, [r3, #0]
 8016400:	9b04      	ldr	r3, [sp, #16]
 8016402:	601d      	str	r5, [r3, #0]
 8016404:	e695      	b.n	8016132 <__gethex+0x12a>
 8016406:	4299      	cmp	r1, r3
 8016408:	f843 cc04 	str.w	ip, [r3, #-4]
 801640c:	d8d8      	bhi.n	80163c0 <__gethex+0x3b8>
 801640e:	68a3      	ldr	r3, [r4, #8]
 8016410:	459b      	cmp	fp, r3
 8016412:	db19      	blt.n	8016448 <__gethex+0x440>
 8016414:	6861      	ldr	r1, [r4, #4]
 8016416:	ee18 0a10 	vmov	r0, s16
 801641a:	3101      	adds	r1, #1
 801641c:	f000 f930 	bl	8016680 <_Balloc>
 8016420:	4681      	mov	r9, r0
 8016422:	b918      	cbnz	r0, 801642c <__gethex+0x424>
 8016424:	4b1a      	ldr	r3, [pc, #104]	; (8016490 <__gethex+0x488>)
 8016426:	4602      	mov	r2, r0
 8016428:	2184      	movs	r1, #132	; 0x84
 801642a:	e6a8      	b.n	801617e <__gethex+0x176>
 801642c:	6922      	ldr	r2, [r4, #16]
 801642e:	3202      	adds	r2, #2
 8016430:	f104 010c 	add.w	r1, r4, #12
 8016434:	0092      	lsls	r2, r2, #2
 8016436:	300c      	adds	r0, #12
 8016438:	f7fd f884 	bl	8013544 <memcpy>
 801643c:	4621      	mov	r1, r4
 801643e:	ee18 0a10 	vmov	r0, s16
 8016442:	f000 f95d 	bl	8016700 <_Bfree>
 8016446:	464c      	mov	r4, r9
 8016448:	6923      	ldr	r3, [r4, #16]
 801644a:	1c5a      	adds	r2, r3, #1
 801644c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016450:	6122      	str	r2, [r4, #16]
 8016452:	2201      	movs	r2, #1
 8016454:	615a      	str	r2, [r3, #20]
 8016456:	e7bb      	b.n	80163d0 <__gethex+0x3c8>
 8016458:	6922      	ldr	r2, [r4, #16]
 801645a:	455a      	cmp	r2, fp
 801645c:	dd0b      	ble.n	8016476 <__gethex+0x46e>
 801645e:	2101      	movs	r1, #1
 8016460:	4620      	mov	r0, r4
 8016462:	f7ff fd69 	bl	8015f38 <rshift>
 8016466:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801646a:	3501      	adds	r5, #1
 801646c:	42ab      	cmp	r3, r5
 801646e:	f6ff aed0 	blt.w	8016212 <__gethex+0x20a>
 8016472:	2701      	movs	r7, #1
 8016474:	e7c0      	b.n	80163f8 <__gethex+0x3f0>
 8016476:	f016 061f 	ands.w	r6, r6, #31
 801647a:	d0fa      	beq.n	8016472 <__gethex+0x46a>
 801647c:	4453      	add	r3, sl
 801647e:	f1c6 0620 	rsb	r6, r6, #32
 8016482:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016486:	f000 f9ed 	bl	8016864 <__hi0bits>
 801648a:	42b0      	cmp	r0, r6
 801648c:	dbe7      	blt.n	801645e <__gethex+0x456>
 801648e:	e7f0      	b.n	8016472 <__gethex+0x46a>
 8016490:	0801966f 	.word	0x0801966f

08016494 <L_shift>:
 8016494:	f1c2 0208 	rsb	r2, r2, #8
 8016498:	0092      	lsls	r2, r2, #2
 801649a:	b570      	push	{r4, r5, r6, lr}
 801649c:	f1c2 0620 	rsb	r6, r2, #32
 80164a0:	6843      	ldr	r3, [r0, #4]
 80164a2:	6804      	ldr	r4, [r0, #0]
 80164a4:	fa03 f506 	lsl.w	r5, r3, r6
 80164a8:	432c      	orrs	r4, r5
 80164aa:	40d3      	lsrs	r3, r2
 80164ac:	6004      	str	r4, [r0, #0]
 80164ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80164b2:	4288      	cmp	r0, r1
 80164b4:	d3f4      	bcc.n	80164a0 <L_shift+0xc>
 80164b6:	bd70      	pop	{r4, r5, r6, pc}

080164b8 <__match>:
 80164b8:	b530      	push	{r4, r5, lr}
 80164ba:	6803      	ldr	r3, [r0, #0]
 80164bc:	3301      	adds	r3, #1
 80164be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80164c2:	b914      	cbnz	r4, 80164ca <__match+0x12>
 80164c4:	6003      	str	r3, [r0, #0]
 80164c6:	2001      	movs	r0, #1
 80164c8:	bd30      	pop	{r4, r5, pc}
 80164ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80164ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80164d2:	2d19      	cmp	r5, #25
 80164d4:	bf98      	it	ls
 80164d6:	3220      	addls	r2, #32
 80164d8:	42a2      	cmp	r2, r4
 80164da:	d0f0      	beq.n	80164be <__match+0x6>
 80164dc:	2000      	movs	r0, #0
 80164de:	e7f3      	b.n	80164c8 <__match+0x10>

080164e0 <__hexnan>:
 80164e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164e4:	680b      	ldr	r3, [r1, #0]
 80164e6:	115e      	asrs	r6, r3, #5
 80164e8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80164ec:	f013 031f 	ands.w	r3, r3, #31
 80164f0:	b087      	sub	sp, #28
 80164f2:	bf18      	it	ne
 80164f4:	3604      	addne	r6, #4
 80164f6:	2500      	movs	r5, #0
 80164f8:	1f37      	subs	r7, r6, #4
 80164fa:	4690      	mov	r8, r2
 80164fc:	6802      	ldr	r2, [r0, #0]
 80164fe:	9301      	str	r3, [sp, #4]
 8016500:	4682      	mov	sl, r0
 8016502:	f846 5c04 	str.w	r5, [r6, #-4]
 8016506:	46b9      	mov	r9, r7
 8016508:	463c      	mov	r4, r7
 801650a:	9502      	str	r5, [sp, #8]
 801650c:	46ab      	mov	fp, r5
 801650e:	7851      	ldrb	r1, [r2, #1]
 8016510:	1c53      	adds	r3, r2, #1
 8016512:	9303      	str	r3, [sp, #12]
 8016514:	b341      	cbz	r1, 8016568 <__hexnan+0x88>
 8016516:	4608      	mov	r0, r1
 8016518:	9205      	str	r2, [sp, #20]
 801651a:	9104      	str	r1, [sp, #16]
 801651c:	f7ff fd5e 	bl	8015fdc <__hexdig_fun>
 8016520:	2800      	cmp	r0, #0
 8016522:	d14f      	bne.n	80165c4 <__hexnan+0xe4>
 8016524:	9904      	ldr	r1, [sp, #16]
 8016526:	9a05      	ldr	r2, [sp, #20]
 8016528:	2920      	cmp	r1, #32
 801652a:	d818      	bhi.n	801655e <__hexnan+0x7e>
 801652c:	9b02      	ldr	r3, [sp, #8]
 801652e:	459b      	cmp	fp, r3
 8016530:	dd13      	ble.n	801655a <__hexnan+0x7a>
 8016532:	454c      	cmp	r4, r9
 8016534:	d206      	bcs.n	8016544 <__hexnan+0x64>
 8016536:	2d07      	cmp	r5, #7
 8016538:	dc04      	bgt.n	8016544 <__hexnan+0x64>
 801653a:	462a      	mov	r2, r5
 801653c:	4649      	mov	r1, r9
 801653e:	4620      	mov	r0, r4
 8016540:	f7ff ffa8 	bl	8016494 <L_shift>
 8016544:	4544      	cmp	r4, r8
 8016546:	d950      	bls.n	80165ea <__hexnan+0x10a>
 8016548:	2300      	movs	r3, #0
 801654a:	f1a4 0904 	sub.w	r9, r4, #4
 801654e:	f844 3c04 	str.w	r3, [r4, #-4]
 8016552:	f8cd b008 	str.w	fp, [sp, #8]
 8016556:	464c      	mov	r4, r9
 8016558:	461d      	mov	r5, r3
 801655a:	9a03      	ldr	r2, [sp, #12]
 801655c:	e7d7      	b.n	801650e <__hexnan+0x2e>
 801655e:	2929      	cmp	r1, #41	; 0x29
 8016560:	d156      	bne.n	8016610 <__hexnan+0x130>
 8016562:	3202      	adds	r2, #2
 8016564:	f8ca 2000 	str.w	r2, [sl]
 8016568:	f1bb 0f00 	cmp.w	fp, #0
 801656c:	d050      	beq.n	8016610 <__hexnan+0x130>
 801656e:	454c      	cmp	r4, r9
 8016570:	d206      	bcs.n	8016580 <__hexnan+0xa0>
 8016572:	2d07      	cmp	r5, #7
 8016574:	dc04      	bgt.n	8016580 <__hexnan+0xa0>
 8016576:	462a      	mov	r2, r5
 8016578:	4649      	mov	r1, r9
 801657a:	4620      	mov	r0, r4
 801657c:	f7ff ff8a 	bl	8016494 <L_shift>
 8016580:	4544      	cmp	r4, r8
 8016582:	d934      	bls.n	80165ee <__hexnan+0x10e>
 8016584:	f1a8 0204 	sub.w	r2, r8, #4
 8016588:	4623      	mov	r3, r4
 801658a:	f853 1b04 	ldr.w	r1, [r3], #4
 801658e:	f842 1f04 	str.w	r1, [r2, #4]!
 8016592:	429f      	cmp	r7, r3
 8016594:	d2f9      	bcs.n	801658a <__hexnan+0xaa>
 8016596:	1b3b      	subs	r3, r7, r4
 8016598:	f023 0303 	bic.w	r3, r3, #3
 801659c:	3304      	adds	r3, #4
 801659e:	3401      	adds	r4, #1
 80165a0:	3e03      	subs	r6, #3
 80165a2:	42b4      	cmp	r4, r6
 80165a4:	bf88      	it	hi
 80165a6:	2304      	movhi	r3, #4
 80165a8:	4443      	add	r3, r8
 80165aa:	2200      	movs	r2, #0
 80165ac:	f843 2b04 	str.w	r2, [r3], #4
 80165b0:	429f      	cmp	r7, r3
 80165b2:	d2fb      	bcs.n	80165ac <__hexnan+0xcc>
 80165b4:	683b      	ldr	r3, [r7, #0]
 80165b6:	b91b      	cbnz	r3, 80165c0 <__hexnan+0xe0>
 80165b8:	4547      	cmp	r7, r8
 80165ba:	d127      	bne.n	801660c <__hexnan+0x12c>
 80165bc:	2301      	movs	r3, #1
 80165be:	603b      	str	r3, [r7, #0]
 80165c0:	2005      	movs	r0, #5
 80165c2:	e026      	b.n	8016612 <__hexnan+0x132>
 80165c4:	3501      	adds	r5, #1
 80165c6:	2d08      	cmp	r5, #8
 80165c8:	f10b 0b01 	add.w	fp, fp, #1
 80165cc:	dd06      	ble.n	80165dc <__hexnan+0xfc>
 80165ce:	4544      	cmp	r4, r8
 80165d0:	d9c3      	bls.n	801655a <__hexnan+0x7a>
 80165d2:	2300      	movs	r3, #0
 80165d4:	f844 3c04 	str.w	r3, [r4, #-4]
 80165d8:	2501      	movs	r5, #1
 80165da:	3c04      	subs	r4, #4
 80165dc:	6822      	ldr	r2, [r4, #0]
 80165de:	f000 000f 	and.w	r0, r0, #15
 80165e2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80165e6:	6022      	str	r2, [r4, #0]
 80165e8:	e7b7      	b.n	801655a <__hexnan+0x7a>
 80165ea:	2508      	movs	r5, #8
 80165ec:	e7b5      	b.n	801655a <__hexnan+0x7a>
 80165ee:	9b01      	ldr	r3, [sp, #4]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d0df      	beq.n	80165b4 <__hexnan+0xd4>
 80165f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80165f8:	f1c3 0320 	rsb	r3, r3, #32
 80165fc:	fa22 f303 	lsr.w	r3, r2, r3
 8016600:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016604:	401a      	ands	r2, r3
 8016606:	f846 2c04 	str.w	r2, [r6, #-4]
 801660a:	e7d3      	b.n	80165b4 <__hexnan+0xd4>
 801660c:	3f04      	subs	r7, #4
 801660e:	e7d1      	b.n	80165b4 <__hexnan+0xd4>
 8016610:	2004      	movs	r0, #4
 8016612:	b007      	add	sp, #28
 8016614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016618 <_localeconv_r>:
 8016618:	4800      	ldr	r0, [pc, #0]	; (801661c <_localeconv_r+0x4>)
 801661a:	4770      	bx	lr
 801661c:	200002e0 	.word	0x200002e0

08016620 <_lseek_r>:
 8016620:	b538      	push	{r3, r4, r5, lr}
 8016622:	4d07      	ldr	r5, [pc, #28]	; (8016640 <_lseek_r+0x20>)
 8016624:	4604      	mov	r4, r0
 8016626:	4608      	mov	r0, r1
 8016628:	4611      	mov	r1, r2
 801662a:	2200      	movs	r2, #0
 801662c:	602a      	str	r2, [r5, #0]
 801662e:	461a      	mov	r2, r3
 8016630:	f7f0 fbde 	bl	8006df0 <_lseek>
 8016634:	1c43      	adds	r3, r0, #1
 8016636:	d102      	bne.n	801663e <_lseek_r+0x1e>
 8016638:	682b      	ldr	r3, [r5, #0]
 801663a:	b103      	cbz	r3, 801663e <_lseek_r+0x1e>
 801663c:	6023      	str	r3, [r4, #0]
 801663e:	bd38      	pop	{r3, r4, r5, pc}
 8016640:	200085e4 	.word	0x200085e4

08016644 <__ascii_mbtowc>:
 8016644:	b082      	sub	sp, #8
 8016646:	b901      	cbnz	r1, 801664a <__ascii_mbtowc+0x6>
 8016648:	a901      	add	r1, sp, #4
 801664a:	b142      	cbz	r2, 801665e <__ascii_mbtowc+0x1a>
 801664c:	b14b      	cbz	r3, 8016662 <__ascii_mbtowc+0x1e>
 801664e:	7813      	ldrb	r3, [r2, #0]
 8016650:	600b      	str	r3, [r1, #0]
 8016652:	7812      	ldrb	r2, [r2, #0]
 8016654:	1e10      	subs	r0, r2, #0
 8016656:	bf18      	it	ne
 8016658:	2001      	movne	r0, #1
 801665a:	b002      	add	sp, #8
 801665c:	4770      	bx	lr
 801665e:	4610      	mov	r0, r2
 8016660:	e7fb      	b.n	801665a <__ascii_mbtowc+0x16>
 8016662:	f06f 0001 	mvn.w	r0, #1
 8016666:	e7f8      	b.n	801665a <__ascii_mbtowc+0x16>

08016668 <__malloc_lock>:
 8016668:	4801      	ldr	r0, [pc, #4]	; (8016670 <__malloc_lock+0x8>)
 801666a:	f7fc bf58 	b.w	801351e <__retarget_lock_acquire_recursive>
 801666e:	bf00      	nop
 8016670:	200085d8 	.word	0x200085d8

08016674 <__malloc_unlock>:
 8016674:	4801      	ldr	r0, [pc, #4]	; (801667c <__malloc_unlock+0x8>)
 8016676:	f7fc bf53 	b.w	8013520 <__retarget_lock_release_recursive>
 801667a:	bf00      	nop
 801667c:	200085d8 	.word	0x200085d8

08016680 <_Balloc>:
 8016680:	b570      	push	{r4, r5, r6, lr}
 8016682:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016684:	4604      	mov	r4, r0
 8016686:	460d      	mov	r5, r1
 8016688:	b976      	cbnz	r6, 80166a8 <_Balloc+0x28>
 801668a:	2010      	movs	r0, #16
 801668c:	f7fc ff4a 	bl	8013524 <malloc>
 8016690:	4602      	mov	r2, r0
 8016692:	6260      	str	r0, [r4, #36]	; 0x24
 8016694:	b920      	cbnz	r0, 80166a0 <_Balloc+0x20>
 8016696:	4b18      	ldr	r3, [pc, #96]	; (80166f8 <_Balloc+0x78>)
 8016698:	4818      	ldr	r0, [pc, #96]	; (80166fc <_Balloc+0x7c>)
 801669a:	2166      	movs	r1, #102	; 0x66
 801669c:	f000 fe36 	bl	801730c <__assert_func>
 80166a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80166a4:	6006      	str	r6, [r0, #0]
 80166a6:	60c6      	str	r6, [r0, #12]
 80166a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80166aa:	68f3      	ldr	r3, [r6, #12]
 80166ac:	b183      	cbz	r3, 80166d0 <_Balloc+0x50>
 80166ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80166b0:	68db      	ldr	r3, [r3, #12]
 80166b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80166b6:	b9b8      	cbnz	r0, 80166e8 <_Balloc+0x68>
 80166b8:	2101      	movs	r1, #1
 80166ba:	fa01 f605 	lsl.w	r6, r1, r5
 80166be:	1d72      	adds	r2, r6, #5
 80166c0:	0092      	lsls	r2, r2, #2
 80166c2:	4620      	mov	r0, r4
 80166c4:	f7fc ff54 	bl	8013570 <_calloc_r>
 80166c8:	b160      	cbz	r0, 80166e4 <_Balloc+0x64>
 80166ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80166ce:	e00e      	b.n	80166ee <_Balloc+0x6e>
 80166d0:	2221      	movs	r2, #33	; 0x21
 80166d2:	2104      	movs	r1, #4
 80166d4:	4620      	mov	r0, r4
 80166d6:	f7fc ff4b 	bl	8013570 <_calloc_r>
 80166da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80166dc:	60f0      	str	r0, [r6, #12]
 80166de:	68db      	ldr	r3, [r3, #12]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d1e4      	bne.n	80166ae <_Balloc+0x2e>
 80166e4:	2000      	movs	r0, #0
 80166e6:	bd70      	pop	{r4, r5, r6, pc}
 80166e8:	6802      	ldr	r2, [r0, #0]
 80166ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80166ee:	2300      	movs	r3, #0
 80166f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80166f4:	e7f7      	b.n	80166e6 <_Balloc+0x66>
 80166f6:	bf00      	nop
 80166f8:	080195fd 	.word	0x080195fd
 80166fc:	080196fc 	.word	0x080196fc

08016700 <_Bfree>:
 8016700:	b570      	push	{r4, r5, r6, lr}
 8016702:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016704:	4605      	mov	r5, r0
 8016706:	460c      	mov	r4, r1
 8016708:	b976      	cbnz	r6, 8016728 <_Bfree+0x28>
 801670a:	2010      	movs	r0, #16
 801670c:	f7fc ff0a 	bl	8013524 <malloc>
 8016710:	4602      	mov	r2, r0
 8016712:	6268      	str	r0, [r5, #36]	; 0x24
 8016714:	b920      	cbnz	r0, 8016720 <_Bfree+0x20>
 8016716:	4b09      	ldr	r3, [pc, #36]	; (801673c <_Bfree+0x3c>)
 8016718:	4809      	ldr	r0, [pc, #36]	; (8016740 <_Bfree+0x40>)
 801671a:	218a      	movs	r1, #138	; 0x8a
 801671c:	f000 fdf6 	bl	801730c <__assert_func>
 8016720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016724:	6006      	str	r6, [r0, #0]
 8016726:	60c6      	str	r6, [r0, #12]
 8016728:	b13c      	cbz	r4, 801673a <_Bfree+0x3a>
 801672a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801672c:	6862      	ldr	r2, [r4, #4]
 801672e:	68db      	ldr	r3, [r3, #12]
 8016730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016734:	6021      	str	r1, [r4, #0]
 8016736:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801673a:	bd70      	pop	{r4, r5, r6, pc}
 801673c:	080195fd 	.word	0x080195fd
 8016740:	080196fc 	.word	0x080196fc

08016744 <__multadd>:
 8016744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016748:	690d      	ldr	r5, [r1, #16]
 801674a:	4607      	mov	r7, r0
 801674c:	460c      	mov	r4, r1
 801674e:	461e      	mov	r6, r3
 8016750:	f101 0c14 	add.w	ip, r1, #20
 8016754:	2000      	movs	r0, #0
 8016756:	f8dc 3000 	ldr.w	r3, [ip]
 801675a:	b299      	uxth	r1, r3
 801675c:	fb02 6101 	mla	r1, r2, r1, r6
 8016760:	0c1e      	lsrs	r6, r3, #16
 8016762:	0c0b      	lsrs	r3, r1, #16
 8016764:	fb02 3306 	mla	r3, r2, r6, r3
 8016768:	b289      	uxth	r1, r1
 801676a:	3001      	adds	r0, #1
 801676c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016770:	4285      	cmp	r5, r0
 8016772:	f84c 1b04 	str.w	r1, [ip], #4
 8016776:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801677a:	dcec      	bgt.n	8016756 <__multadd+0x12>
 801677c:	b30e      	cbz	r6, 80167c2 <__multadd+0x7e>
 801677e:	68a3      	ldr	r3, [r4, #8]
 8016780:	42ab      	cmp	r3, r5
 8016782:	dc19      	bgt.n	80167b8 <__multadd+0x74>
 8016784:	6861      	ldr	r1, [r4, #4]
 8016786:	4638      	mov	r0, r7
 8016788:	3101      	adds	r1, #1
 801678a:	f7ff ff79 	bl	8016680 <_Balloc>
 801678e:	4680      	mov	r8, r0
 8016790:	b928      	cbnz	r0, 801679e <__multadd+0x5a>
 8016792:	4602      	mov	r2, r0
 8016794:	4b0c      	ldr	r3, [pc, #48]	; (80167c8 <__multadd+0x84>)
 8016796:	480d      	ldr	r0, [pc, #52]	; (80167cc <__multadd+0x88>)
 8016798:	21b5      	movs	r1, #181	; 0xb5
 801679a:	f000 fdb7 	bl	801730c <__assert_func>
 801679e:	6922      	ldr	r2, [r4, #16]
 80167a0:	3202      	adds	r2, #2
 80167a2:	f104 010c 	add.w	r1, r4, #12
 80167a6:	0092      	lsls	r2, r2, #2
 80167a8:	300c      	adds	r0, #12
 80167aa:	f7fc fecb 	bl	8013544 <memcpy>
 80167ae:	4621      	mov	r1, r4
 80167b0:	4638      	mov	r0, r7
 80167b2:	f7ff ffa5 	bl	8016700 <_Bfree>
 80167b6:	4644      	mov	r4, r8
 80167b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80167bc:	3501      	adds	r5, #1
 80167be:	615e      	str	r6, [r3, #20]
 80167c0:	6125      	str	r5, [r4, #16]
 80167c2:	4620      	mov	r0, r4
 80167c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167c8:	0801966f 	.word	0x0801966f
 80167cc:	080196fc 	.word	0x080196fc

080167d0 <__s2b>:
 80167d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167d4:	460c      	mov	r4, r1
 80167d6:	4615      	mov	r5, r2
 80167d8:	461f      	mov	r7, r3
 80167da:	2209      	movs	r2, #9
 80167dc:	3308      	adds	r3, #8
 80167de:	4606      	mov	r6, r0
 80167e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80167e4:	2100      	movs	r1, #0
 80167e6:	2201      	movs	r2, #1
 80167e8:	429a      	cmp	r2, r3
 80167ea:	db09      	blt.n	8016800 <__s2b+0x30>
 80167ec:	4630      	mov	r0, r6
 80167ee:	f7ff ff47 	bl	8016680 <_Balloc>
 80167f2:	b940      	cbnz	r0, 8016806 <__s2b+0x36>
 80167f4:	4602      	mov	r2, r0
 80167f6:	4b19      	ldr	r3, [pc, #100]	; (801685c <__s2b+0x8c>)
 80167f8:	4819      	ldr	r0, [pc, #100]	; (8016860 <__s2b+0x90>)
 80167fa:	21ce      	movs	r1, #206	; 0xce
 80167fc:	f000 fd86 	bl	801730c <__assert_func>
 8016800:	0052      	lsls	r2, r2, #1
 8016802:	3101      	adds	r1, #1
 8016804:	e7f0      	b.n	80167e8 <__s2b+0x18>
 8016806:	9b08      	ldr	r3, [sp, #32]
 8016808:	6143      	str	r3, [r0, #20]
 801680a:	2d09      	cmp	r5, #9
 801680c:	f04f 0301 	mov.w	r3, #1
 8016810:	6103      	str	r3, [r0, #16]
 8016812:	dd16      	ble.n	8016842 <__s2b+0x72>
 8016814:	f104 0909 	add.w	r9, r4, #9
 8016818:	46c8      	mov	r8, r9
 801681a:	442c      	add	r4, r5
 801681c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016820:	4601      	mov	r1, r0
 8016822:	3b30      	subs	r3, #48	; 0x30
 8016824:	220a      	movs	r2, #10
 8016826:	4630      	mov	r0, r6
 8016828:	f7ff ff8c 	bl	8016744 <__multadd>
 801682c:	45a0      	cmp	r8, r4
 801682e:	d1f5      	bne.n	801681c <__s2b+0x4c>
 8016830:	f1a5 0408 	sub.w	r4, r5, #8
 8016834:	444c      	add	r4, r9
 8016836:	1b2d      	subs	r5, r5, r4
 8016838:	1963      	adds	r3, r4, r5
 801683a:	42bb      	cmp	r3, r7
 801683c:	db04      	blt.n	8016848 <__s2b+0x78>
 801683e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016842:	340a      	adds	r4, #10
 8016844:	2509      	movs	r5, #9
 8016846:	e7f6      	b.n	8016836 <__s2b+0x66>
 8016848:	f814 3b01 	ldrb.w	r3, [r4], #1
 801684c:	4601      	mov	r1, r0
 801684e:	3b30      	subs	r3, #48	; 0x30
 8016850:	220a      	movs	r2, #10
 8016852:	4630      	mov	r0, r6
 8016854:	f7ff ff76 	bl	8016744 <__multadd>
 8016858:	e7ee      	b.n	8016838 <__s2b+0x68>
 801685a:	bf00      	nop
 801685c:	0801966f 	.word	0x0801966f
 8016860:	080196fc 	.word	0x080196fc

08016864 <__hi0bits>:
 8016864:	0c03      	lsrs	r3, r0, #16
 8016866:	041b      	lsls	r3, r3, #16
 8016868:	b9d3      	cbnz	r3, 80168a0 <__hi0bits+0x3c>
 801686a:	0400      	lsls	r0, r0, #16
 801686c:	2310      	movs	r3, #16
 801686e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016872:	bf04      	itt	eq
 8016874:	0200      	lsleq	r0, r0, #8
 8016876:	3308      	addeq	r3, #8
 8016878:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801687c:	bf04      	itt	eq
 801687e:	0100      	lsleq	r0, r0, #4
 8016880:	3304      	addeq	r3, #4
 8016882:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016886:	bf04      	itt	eq
 8016888:	0080      	lsleq	r0, r0, #2
 801688a:	3302      	addeq	r3, #2
 801688c:	2800      	cmp	r0, #0
 801688e:	db05      	blt.n	801689c <__hi0bits+0x38>
 8016890:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016894:	f103 0301 	add.w	r3, r3, #1
 8016898:	bf08      	it	eq
 801689a:	2320      	moveq	r3, #32
 801689c:	4618      	mov	r0, r3
 801689e:	4770      	bx	lr
 80168a0:	2300      	movs	r3, #0
 80168a2:	e7e4      	b.n	801686e <__hi0bits+0xa>

080168a4 <__lo0bits>:
 80168a4:	6803      	ldr	r3, [r0, #0]
 80168a6:	f013 0207 	ands.w	r2, r3, #7
 80168aa:	4601      	mov	r1, r0
 80168ac:	d00b      	beq.n	80168c6 <__lo0bits+0x22>
 80168ae:	07da      	lsls	r2, r3, #31
 80168b0:	d423      	bmi.n	80168fa <__lo0bits+0x56>
 80168b2:	0798      	lsls	r0, r3, #30
 80168b4:	bf49      	itett	mi
 80168b6:	085b      	lsrmi	r3, r3, #1
 80168b8:	089b      	lsrpl	r3, r3, #2
 80168ba:	2001      	movmi	r0, #1
 80168bc:	600b      	strmi	r3, [r1, #0]
 80168be:	bf5c      	itt	pl
 80168c0:	600b      	strpl	r3, [r1, #0]
 80168c2:	2002      	movpl	r0, #2
 80168c4:	4770      	bx	lr
 80168c6:	b298      	uxth	r0, r3
 80168c8:	b9a8      	cbnz	r0, 80168f6 <__lo0bits+0x52>
 80168ca:	0c1b      	lsrs	r3, r3, #16
 80168cc:	2010      	movs	r0, #16
 80168ce:	b2da      	uxtb	r2, r3
 80168d0:	b90a      	cbnz	r2, 80168d6 <__lo0bits+0x32>
 80168d2:	3008      	adds	r0, #8
 80168d4:	0a1b      	lsrs	r3, r3, #8
 80168d6:	071a      	lsls	r2, r3, #28
 80168d8:	bf04      	itt	eq
 80168da:	091b      	lsreq	r3, r3, #4
 80168dc:	3004      	addeq	r0, #4
 80168de:	079a      	lsls	r2, r3, #30
 80168e0:	bf04      	itt	eq
 80168e2:	089b      	lsreq	r3, r3, #2
 80168e4:	3002      	addeq	r0, #2
 80168e6:	07da      	lsls	r2, r3, #31
 80168e8:	d403      	bmi.n	80168f2 <__lo0bits+0x4e>
 80168ea:	085b      	lsrs	r3, r3, #1
 80168ec:	f100 0001 	add.w	r0, r0, #1
 80168f0:	d005      	beq.n	80168fe <__lo0bits+0x5a>
 80168f2:	600b      	str	r3, [r1, #0]
 80168f4:	4770      	bx	lr
 80168f6:	4610      	mov	r0, r2
 80168f8:	e7e9      	b.n	80168ce <__lo0bits+0x2a>
 80168fa:	2000      	movs	r0, #0
 80168fc:	4770      	bx	lr
 80168fe:	2020      	movs	r0, #32
 8016900:	4770      	bx	lr
	...

08016904 <__i2b>:
 8016904:	b510      	push	{r4, lr}
 8016906:	460c      	mov	r4, r1
 8016908:	2101      	movs	r1, #1
 801690a:	f7ff feb9 	bl	8016680 <_Balloc>
 801690e:	4602      	mov	r2, r0
 8016910:	b928      	cbnz	r0, 801691e <__i2b+0x1a>
 8016912:	4b05      	ldr	r3, [pc, #20]	; (8016928 <__i2b+0x24>)
 8016914:	4805      	ldr	r0, [pc, #20]	; (801692c <__i2b+0x28>)
 8016916:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801691a:	f000 fcf7 	bl	801730c <__assert_func>
 801691e:	2301      	movs	r3, #1
 8016920:	6144      	str	r4, [r0, #20]
 8016922:	6103      	str	r3, [r0, #16]
 8016924:	bd10      	pop	{r4, pc}
 8016926:	bf00      	nop
 8016928:	0801966f 	.word	0x0801966f
 801692c:	080196fc 	.word	0x080196fc

08016930 <__multiply>:
 8016930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016934:	4691      	mov	r9, r2
 8016936:	690a      	ldr	r2, [r1, #16]
 8016938:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801693c:	429a      	cmp	r2, r3
 801693e:	bfb8      	it	lt
 8016940:	460b      	movlt	r3, r1
 8016942:	460c      	mov	r4, r1
 8016944:	bfbc      	itt	lt
 8016946:	464c      	movlt	r4, r9
 8016948:	4699      	movlt	r9, r3
 801694a:	6927      	ldr	r7, [r4, #16]
 801694c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016950:	68a3      	ldr	r3, [r4, #8]
 8016952:	6861      	ldr	r1, [r4, #4]
 8016954:	eb07 060a 	add.w	r6, r7, sl
 8016958:	42b3      	cmp	r3, r6
 801695a:	b085      	sub	sp, #20
 801695c:	bfb8      	it	lt
 801695e:	3101      	addlt	r1, #1
 8016960:	f7ff fe8e 	bl	8016680 <_Balloc>
 8016964:	b930      	cbnz	r0, 8016974 <__multiply+0x44>
 8016966:	4602      	mov	r2, r0
 8016968:	4b44      	ldr	r3, [pc, #272]	; (8016a7c <__multiply+0x14c>)
 801696a:	4845      	ldr	r0, [pc, #276]	; (8016a80 <__multiply+0x150>)
 801696c:	f240 115d 	movw	r1, #349	; 0x15d
 8016970:	f000 fccc 	bl	801730c <__assert_func>
 8016974:	f100 0514 	add.w	r5, r0, #20
 8016978:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801697c:	462b      	mov	r3, r5
 801697e:	2200      	movs	r2, #0
 8016980:	4543      	cmp	r3, r8
 8016982:	d321      	bcc.n	80169c8 <__multiply+0x98>
 8016984:	f104 0314 	add.w	r3, r4, #20
 8016988:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801698c:	f109 0314 	add.w	r3, r9, #20
 8016990:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016994:	9202      	str	r2, [sp, #8]
 8016996:	1b3a      	subs	r2, r7, r4
 8016998:	3a15      	subs	r2, #21
 801699a:	f022 0203 	bic.w	r2, r2, #3
 801699e:	3204      	adds	r2, #4
 80169a0:	f104 0115 	add.w	r1, r4, #21
 80169a4:	428f      	cmp	r7, r1
 80169a6:	bf38      	it	cc
 80169a8:	2204      	movcc	r2, #4
 80169aa:	9201      	str	r2, [sp, #4]
 80169ac:	9a02      	ldr	r2, [sp, #8]
 80169ae:	9303      	str	r3, [sp, #12]
 80169b0:	429a      	cmp	r2, r3
 80169b2:	d80c      	bhi.n	80169ce <__multiply+0x9e>
 80169b4:	2e00      	cmp	r6, #0
 80169b6:	dd03      	ble.n	80169c0 <__multiply+0x90>
 80169b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d05a      	beq.n	8016a76 <__multiply+0x146>
 80169c0:	6106      	str	r6, [r0, #16]
 80169c2:	b005      	add	sp, #20
 80169c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169c8:	f843 2b04 	str.w	r2, [r3], #4
 80169cc:	e7d8      	b.n	8016980 <__multiply+0x50>
 80169ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80169d2:	f1ba 0f00 	cmp.w	sl, #0
 80169d6:	d024      	beq.n	8016a22 <__multiply+0xf2>
 80169d8:	f104 0e14 	add.w	lr, r4, #20
 80169dc:	46a9      	mov	r9, r5
 80169de:	f04f 0c00 	mov.w	ip, #0
 80169e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80169e6:	f8d9 1000 	ldr.w	r1, [r9]
 80169ea:	fa1f fb82 	uxth.w	fp, r2
 80169ee:	b289      	uxth	r1, r1
 80169f0:	fb0a 110b 	mla	r1, sl, fp, r1
 80169f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80169f8:	f8d9 2000 	ldr.w	r2, [r9]
 80169fc:	4461      	add	r1, ip
 80169fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016a02:	fb0a c20b 	mla	r2, sl, fp, ip
 8016a06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016a0a:	b289      	uxth	r1, r1
 8016a0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016a10:	4577      	cmp	r7, lr
 8016a12:	f849 1b04 	str.w	r1, [r9], #4
 8016a16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016a1a:	d8e2      	bhi.n	80169e2 <__multiply+0xb2>
 8016a1c:	9a01      	ldr	r2, [sp, #4]
 8016a1e:	f845 c002 	str.w	ip, [r5, r2]
 8016a22:	9a03      	ldr	r2, [sp, #12]
 8016a24:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016a28:	3304      	adds	r3, #4
 8016a2a:	f1b9 0f00 	cmp.w	r9, #0
 8016a2e:	d020      	beq.n	8016a72 <__multiply+0x142>
 8016a30:	6829      	ldr	r1, [r5, #0]
 8016a32:	f104 0c14 	add.w	ip, r4, #20
 8016a36:	46ae      	mov	lr, r5
 8016a38:	f04f 0a00 	mov.w	sl, #0
 8016a3c:	f8bc b000 	ldrh.w	fp, [ip]
 8016a40:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016a44:	fb09 220b 	mla	r2, r9, fp, r2
 8016a48:	4492      	add	sl, r2
 8016a4a:	b289      	uxth	r1, r1
 8016a4c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8016a50:	f84e 1b04 	str.w	r1, [lr], #4
 8016a54:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016a58:	f8be 1000 	ldrh.w	r1, [lr]
 8016a5c:	0c12      	lsrs	r2, r2, #16
 8016a5e:	fb09 1102 	mla	r1, r9, r2, r1
 8016a62:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8016a66:	4567      	cmp	r7, ip
 8016a68:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016a6c:	d8e6      	bhi.n	8016a3c <__multiply+0x10c>
 8016a6e:	9a01      	ldr	r2, [sp, #4]
 8016a70:	50a9      	str	r1, [r5, r2]
 8016a72:	3504      	adds	r5, #4
 8016a74:	e79a      	b.n	80169ac <__multiply+0x7c>
 8016a76:	3e01      	subs	r6, #1
 8016a78:	e79c      	b.n	80169b4 <__multiply+0x84>
 8016a7a:	bf00      	nop
 8016a7c:	0801966f 	.word	0x0801966f
 8016a80:	080196fc 	.word	0x080196fc

08016a84 <__pow5mult>:
 8016a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a88:	4615      	mov	r5, r2
 8016a8a:	f012 0203 	ands.w	r2, r2, #3
 8016a8e:	4606      	mov	r6, r0
 8016a90:	460f      	mov	r7, r1
 8016a92:	d007      	beq.n	8016aa4 <__pow5mult+0x20>
 8016a94:	4c25      	ldr	r4, [pc, #148]	; (8016b2c <__pow5mult+0xa8>)
 8016a96:	3a01      	subs	r2, #1
 8016a98:	2300      	movs	r3, #0
 8016a9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016a9e:	f7ff fe51 	bl	8016744 <__multadd>
 8016aa2:	4607      	mov	r7, r0
 8016aa4:	10ad      	asrs	r5, r5, #2
 8016aa6:	d03d      	beq.n	8016b24 <__pow5mult+0xa0>
 8016aa8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016aaa:	b97c      	cbnz	r4, 8016acc <__pow5mult+0x48>
 8016aac:	2010      	movs	r0, #16
 8016aae:	f7fc fd39 	bl	8013524 <malloc>
 8016ab2:	4602      	mov	r2, r0
 8016ab4:	6270      	str	r0, [r6, #36]	; 0x24
 8016ab6:	b928      	cbnz	r0, 8016ac4 <__pow5mult+0x40>
 8016ab8:	4b1d      	ldr	r3, [pc, #116]	; (8016b30 <__pow5mult+0xac>)
 8016aba:	481e      	ldr	r0, [pc, #120]	; (8016b34 <__pow5mult+0xb0>)
 8016abc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016ac0:	f000 fc24 	bl	801730c <__assert_func>
 8016ac4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016ac8:	6004      	str	r4, [r0, #0]
 8016aca:	60c4      	str	r4, [r0, #12]
 8016acc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016ad0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016ad4:	b94c      	cbnz	r4, 8016aea <__pow5mult+0x66>
 8016ad6:	f240 2171 	movw	r1, #625	; 0x271
 8016ada:	4630      	mov	r0, r6
 8016adc:	f7ff ff12 	bl	8016904 <__i2b>
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	f8c8 0008 	str.w	r0, [r8, #8]
 8016ae6:	4604      	mov	r4, r0
 8016ae8:	6003      	str	r3, [r0, #0]
 8016aea:	f04f 0900 	mov.w	r9, #0
 8016aee:	07eb      	lsls	r3, r5, #31
 8016af0:	d50a      	bpl.n	8016b08 <__pow5mult+0x84>
 8016af2:	4639      	mov	r1, r7
 8016af4:	4622      	mov	r2, r4
 8016af6:	4630      	mov	r0, r6
 8016af8:	f7ff ff1a 	bl	8016930 <__multiply>
 8016afc:	4639      	mov	r1, r7
 8016afe:	4680      	mov	r8, r0
 8016b00:	4630      	mov	r0, r6
 8016b02:	f7ff fdfd 	bl	8016700 <_Bfree>
 8016b06:	4647      	mov	r7, r8
 8016b08:	106d      	asrs	r5, r5, #1
 8016b0a:	d00b      	beq.n	8016b24 <__pow5mult+0xa0>
 8016b0c:	6820      	ldr	r0, [r4, #0]
 8016b0e:	b938      	cbnz	r0, 8016b20 <__pow5mult+0x9c>
 8016b10:	4622      	mov	r2, r4
 8016b12:	4621      	mov	r1, r4
 8016b14:	4630      	mov	r0, r6
 8016b16:	f7ff ff0b 	bl	8016930 <__multiply>
 8016b1a:	6020      	str	r0, [r4, #0]
 8016b1c:	f8c0 9000 	str.w	r9, [r0]
 8016b20:	4604      	mov	r4, r0
 8016b22:	e7e4      	b.n	8016aee <__pow5mult+0x6a>
 8016b24:	4638      	mov	r0, r7
 8016b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b2a:	bf00      	nop
 8016b2c:	08019848 	.word	0x08019848
 8016b30:	080195fd 	.word	0x080195fd
 8016b34:	080196fc 	.word	0x080196fc

08016b38 <__lshift>:
 8016b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b3c:	460c      	mov	r4, r1
 8016b3e:	6849      	ldr	r1, [r1, #4]
 8016b40:	6923      	ldr	r3, [r4, #16]
 8016b42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016b46:	68a3      	ldr	r3, [r4, #8]
 8016b48:	4607      	mov	r7, r0
 8016b4a:	4691      	mov	r9, r2
 8016b4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016b50:	f108 0601 	add.w	r6, r8, #1
 8016b54:	42b3      	cmp	r3, r6
 8016b56:	db0b      	blt.n	8016b70 <__lshift+0x38>
 8016b58:	4638      	mov	r0, r7
 8016b5a:	f7ff fd91 	bl	8016680 <_Balloc>
 8016b5e:	4605      	mov	r5, r0
 8016b60:	b948      	cbnz	r0, 8016b76 <__lshift+0x3e>
 8016b62:	4602      	mov	r2, r0
 8016b64:	4b2a      	ldr	r3, [pc, #168]	; (8016c10 <__lshift+0xd8>)
 8016b66:	482b      	ldr	r0, [pc, #172]	; (8016c14 <__lshift+0xdc>)
 8016b68:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016b6c:	f000 fbce 	bl	801730c <__assert_func>
 8016b70:	3101      	adds	r1, #1
 8016b72:	005b      	lsls	r3, r3, #1
 8016b74:	e7ee      	b.n	8016b54 <__lshift+0x1c>
 8016b76:	2300      	movs	r3, #0
 8016b78:	f100 0114 	add.w	r1, r0, #20
 8016b7c:	f100 0210 	add.w	r2, r0, #16
 8016b80:	4618      	mov	r0, r3
 8016b82:	4553      	cmp	r3, sl
 8016b84:	db37      	blt.n	8016bf6 <__lshift+0xbe>
 8016b86:	6920      	ldr	r0, [r4, #16]
 8016b88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016b8c:	f104 0314 	add.w	r3, r4, #20
 8016b90:	f019 091f 	ands.w	r9, r9, #31
 8016b94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016b98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016b9c:	d02f      	beq.n	8016bfe <__lshift+0xc6>
 8016b9e:	f1c9 0e20 	rsb	lr, r9, #32
 8016ba2:	468a      	mov	sl, r1
 8016ba4:	f04f 0c00 	mov.w	ip, #0
 8016ba8:	681a      	ldr	r2, [r3, #0]
 8016baa:	fa02 f209 	lsl.w	r2, r2, r9
 8016bae:	ea42 020c 	orr.w	r2, r2, ip
 8016bb2:	f84a 2b04 	str.w	r2, [sl], #4
 8016bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8016bba:	4298      	cmp	r0, r3
 8016bbc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8016bc0:	d8f2      	bhi.n	8016ba8 <__lshift+0x70>
 8016bc2:	1b03      	subs	r3, r0, r4
 8016bc4:	3b15      	subs	r3, #21
 8016bc6:	f023 0303 	bic.w	r3, r3, #3
 8016bca:	3304      	adds	r3, #4
 8016bcc:	f104 0215 	add.w	r2, r4, #21
 8016bd0:	4290      	cmp	r0, r2
 8016bd2:	bf38      	it	cc
 8016bd4:	2304      	movcc	r3, #4
 8016bd6:	f841 c003 	str.w	ip, [r1, r3]
 8016bda:	f1bc 0f00 	cmp.w	ip, #0
 8016bde:	d001      	beq.n	8016be4 <__lshift+0xac>
 8016be0:	f108 0602 	add.w	r6, r8, #2
 8016be4:	3e01      	subs	r6, #1
 8016be6:	4638      	mov	r0, r7
 8016be8:	612e      	str	r6, [r5, #16]
 8016bea:	4621      	mov	r1, r4
 8016bec:	f7ff fd88 	bl	8016700 <_Bfree>
 8016bf0:	4628      	mov	r0, r5
 8016bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bf6:	f842 0f04 	str.w	r0, [r2, #4]!
 8016bfa:	3301      	adds	r3, #1
 8016bfc:	e7c1      	b.n	8016b82 <__lshift+0x4a>
 8016bfe:	3904      	subs	r1, #4
 8016c00:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c04:	f841 2f04 	str.w	r2, [r1, #4]!
 8016c08:	4298      	cmp	r0, r3
 8016c0a:	d8f9      	bhi.n	8016c00 <__lshift+0xc8>
 8016c0c:	e7ea      	b.n	8016be4 <__lshift+0xac>
 8016c0e:	bf00      	nop
 8016c10:	0801966f 	.word	0x0801966f
 8016c14:	080196fc 	.word	0x080196fc

08016c18 <__mcmp>:
 8016c18:	b530      	push	{r4, r5, lr}
 8016c1a:	6902      	ldr	r2, [r0, #16]
 8016c1c:	690c      	ldr	r4, [r1, #16]
 8016c1e:	1b12      	subs	r2, r2, r4
 8016c20:	d10e      	bne.n	8016c40 <__mcmp+0x28>
 8016c22:	f100 0314 	add.w	r3, r0, #20
 8016c26:	3114      	adds	r1, #20
 8016c28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016c2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016c30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016c34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016c38:	42a5      	cmp	r5, r4
 8016c3a:	d003      	beq.n	8016c44 <__mcmp+0x2c>
 8016c3c:	d305      	bcc.n	8016c4a <__mcmp+0x32>
 8016c3e:	2201      	movs	r2, #1
 8016c40:	4610      	mov	r0, r2
 8016c42:	bd30      	pop	{r4, r5, pc}
 8016c44:	4283      	cmp	r3, r0
 8016c46:	d3f3      	bcc.n	8016c30 <__mcmp+0x18>
 8016c48:	e7fa      	b.n	8016c40 <__mcmp+0x28>
 8016c4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016c4e:	e7f7      	b.n	8016c40 <__mcmp+0x28>

08016c50 <__mdiff>:
 8016c50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c54:	460c      	mov	r4, r1
 8016c56:	4606      	mov	r6, r0
 8016c58:	4611      	mov	r1, r2
 8016c5a:	4620      	mov	r0, r4
 8016c5c:	4690      	mov	r8, r2
 8016c5e:	f7ff ffdb 	bl	8016c18 <__mcmp>
 8016c62:	1e05      	subs	r5, r0, #0
 8016c64:	d110      	bne.n	8016c88 <__mdiff+0x38>
 8016c66:	4629      	mov	r1, r5
 8016c68:	4630      	mov	r0, r6
 8016c6a:	f7ff fd09 	bl	8016680 <_Balloc>
 8016c6e:	b930      	cbnz	r0, 8016c7e <__mdiff+0x2e>
 8016c70:	4b3a      	ldr	r3, [pc, #232]	; (8016d5c <__mdiff+0x10c>)
 8016c72:	4602      	mov	r2, r0
 8016c74:	f240 2132 	movw	r1, #562	; 0x232
 8016c78:	4839      	ldr	r0, [pc, #228]	; (8016d60 <__mdiff+0x110>)
 8016c7a:	f000 fb47 	bl	801730c <__assert_func>
 8016c7e:	2301      	movs	r3, #1
 8016c80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016c84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c88:	bfa4      	itt	ge
 8016c8a:	4643      	movge	r3, r8
 8016c8c:	46a0      	movge	r8, r4
 8016c8e:	4630      	mov	r0, r6
 8016c90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016c94:	bfa6      	itte	ge
 8016c96:	461c      	movge	r4, r3
 8016c98:	2500      	movge	r5, #0
 8016c9a:	2501      	movlt	r5, #1
 8016c9c:	f7ff fcf0 	bl	8016680 <_Balloc>
 8016ca0:	b920      	cbnz	r0, 8016cac <__mdiff+0x5c>
 8016ca2:	4b2e      	ldr	r3, [pc, #184]	; (8016d5c <__mdiff+0x10c>)
 8016ca4:	4602      	mov	r2, r0
 8016ca6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016caa:	e7e5      	b.n	8016c78 <__mdiff+0x28>
 8016cac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016cb0:	6926      	ldr	r6, [r4, #16]
 8016cb2:	60c5      	str	r5, [r0, #12]
 8016cb4:	f104 0914 	add.w	r9, r4, #20
 8016cb8:	f108 0514 	add.w	r5, r8, #20
 8016cbc:	f100 0e14 	add.w	lr, r0, #20
 8016cc0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016cc4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016cc8:	f108 0210 	add.w	r2, r8, #16
 8016ccc:	46f2      	mov	sl, lr
 8016cce:	2100      	movs	r1, #0
 8016cd0:	f859 3b04 	ldr.w	r3, [r9], #4
 8016cd4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016cd8:	fa1f f883 	uxth.w	r8, r3
 8016cdc:	fa11 f18b 	uxtah	r1, r1, fp
 8016ce0:	0c1b      	lsrs	r3, r3, #16
 8016ce2:	eba1 0808 	sub.w	r8, r1, r8
 8016ce6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016cea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016cee:	fa1f f888 	uxth.w	r8, r8
 8016cf2:	1419      	asrs	r1, r3, #16
 8016cf4:	454e      	cmp	r6, r9
 8016cf6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016cfa:	f84a 3b04 	str.w	r3, [sl], #4
 8016cfe:	d8e7      	bhi.n	8016cd0 <__mdiff+0x80>
 8016d00:	1b33      	subs	r3, r6, r4
 8016d02:	3b15      	subs	r3, #21
 8016d04:	f023 0303 	bic.w	r3, r3, #3
 8016d08:	3304      	adds	r3, #4
 8016d0a:	3415      	adds	r4, #21
 8016d0c:	42a6      	cmp	r6, r4
 8016d0e:	bf38      	it	cc
 8016d10:	2304      	movcc	r3, #4
 8016d12:	441d      	add	r5, r3
 8016d14:	4473      	add	r3, lr
 8016d16:	469e      	mov	lr, r3
 8016d18:	462e      	mov	r6, r5
 8016d1a:	4566      	cmp	r6, ip
 8016d1c:	d30e      	bcc.n	8016d3c <__mdiff+0xec>
 8016d1e:	f10c 0203 	add.w	r2, ip, #3
 8016d22:	1b52      	subs	r2, r2, r5
 8016d24:	f022 0203 	bic.w	r2, r2, #3
 8016d28:	3d03      	subs	r5, #3
 8016d2a:	45ac      	cmp	ip, r5
 8016d2c:	bf38      	it	cc
 8016d2e:	2200      	movcc	r2, #0
 8016d30:	441a      	add	r2, r3
 8016d32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016d36:	b17b      	cbz	r3, 8016d58 <__mdiff+0x108>
 8016d38:	6107      	str	r7, [r0, #16]
 8016d3a:	e7a3      	b.n	8016c84 <__mdiff+0x34>
 8016d3c:	f856 8b04 	ldr.w	r8, [r6], #4
 8016d40:	fa11 f288 	uxtah	r2, r1, r8
 8016d44:	1414      	asrs	r4, r2, #16
 8016d46:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016d4a:	b292      	uxth	r2, r2
 8016d4c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016d50:	f84e 2b04 	str.w	r2, [lr], #4
 8016d54:	1421      	asrs	r1, r4, #16
 8016d56:	e7e0      	b.n	8016d1a <__mdiff+0xca>
 8016d58:	3f01      	subs	r7, #1
 8016d5a:	e7ea      	b.n	8016d32 <__mdiff+0xe2>
 8016d5c:	0801966f 	.word	0x0801966f
 8016d60:	080196fc 	.word	0x080196fc

08016d64 <__ulp>:
 8016d64:	b082      	sub	sp, #8
 8016d66:	ed8d 0b00 	vstr	d0, [sp]
 8016d6a:	9b01      	ldr	r3, [sp, #4]
 8016d6c:	4912      	ldr	r1, [pc, #72]	; (8016db8 <__ulp+0x54>)
 8016d6e:	4019      	ands	r1, r3
 8016d70:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8016d74:	2900      	cmp	r1, #0
 8016d76:	dd05      	ble.n	8016d84 <__ulp+0x20>
 8016d78:	2200      	movs	r2, #0
 8016d7a:	460b      	mov	r3, r1
 8016d7c:	ec43 2b10 	vmov	d0, r2, r3
 8016d80:	b002      	add	sp, #8
 8016d82:	4770      	bx	lr
 8016d84:	4249      	negs	r1, r1
 8016d86:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8016d8a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8016d8e:	f04f 0200 	mov.w	r2, #0
 8016d92:	f04f 0300 	mov.w	r3, #0
 8016d96:	da04      	bge.n	8016da2 <__ulp+0x3e>
 8016d98:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8016d9c:	fa41 f300 	asr.w	r3, r1, r0
 8016da0:	e7ec      	b.n	8016d7c <__ulp+0x18>
 8016da2:	f1a0 0114 	sub.w	r1, r0, #20
 8016da6:	291e      	cmp	r1, #30
 8016da8:	bfda      	itte	le
 8016daa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8016dae:	fa20 f101 	lsrle.w	r1, r0, r1
 8016db2:	2101      	movgt	r1, #1
 8016db4:	460a      	mov	r2, r1
 8016db6:	e7e1      	b.n	8016d7c <__ulp+0x18>
 8016db8:	7ff00000 	.word	0x7ff00000

08016dbc <__b2d>:
 8016dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dbe:	6905      	ldr	r5, [r0, #16]
 8016dc0:	f100 0714 	add.w	r7, r0, #20
 8016dc4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016dc8:	1f2e      	subs	r6, r5, #4
 8016dca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016dce:	4620      	mov	r0, r4
 8016dd0:	f7ff fd48 	bl	8016864 <__hi0bits>
 8016dd4:	f1c0 0320 	rsb	r3, r0, #32
 8016dd8:	280a      	cmp	r0, #10
 8016dda:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8016e58 <__b2d+0x9c>
 8016dde:	600b      	str	r3, [r1, #0]
 8016de0:	dc14      	bgt.n	8016e0c <__b2d+0x50>
 8016de2:	f1c0 0e0b 	rsb	lr, r0, #11
 8016de6:	fa24 f10e 	lsr.w	r1, r4, lr
 8016dea:	42b7      	cmp	r7, r6
 8016dec:	ea41 030c 	orr.w	r3, r1, ip
 8016df0:	bf34      	ite	cc
 8016df2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016df6:	2100      	movcs	r1, #0
 8016df8:	3015      	adds	r0, #21
 8016dfa:	fa04 f000 	lsl.w	r0, r4, r0
 8016dfe:	fa21 f10e 	lsr.w	r1, r1, lr
 8016e02:	ea40 0201 	orr.w	r2, r0, r1
 8016e06:	ec43 2b10 	vmov	d0, r2, r3
 8016e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e0c:	42b7      	cmp	r7, r6
 8016e0e:	bf3a      	itte	cc
 8016e10:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016e14:	f1a5 0608 	subcc.w	r6, r5, #8
 8016e18:	2100      	movcs	r1, #0
 8016e1a:	380b      	subs	r0, #11
 8016e1c:	d017      	beq.n	8016e4e <__b2d+0x92>
 8016e1e:	f1c0 0c20 	rsb	ip, r0, #32
 8016e22:	fa04 f500 	lsl.w	r5, r4, r0
 8016e26:	42be      	cmp	r6, r7
 8016e28:	fa21 f40c 	lsr.w	r4, r1, ip
 8016e2c:	ea45 0504 	orr.w	r5, r5, r4
 8016e30:	bf8c      	ite	hi
 8016e32:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016e36:	2400      	movls	r4, #0
 8016e38:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8016e3c:	fa01 f000 	lsl.w	r0, r1, r0
 8016e40:	fa24 f40c 	lsr.w	r4, r4, ip
 8016e44:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016e48:	ea40 0204 	orr.w	r2, r0, r4
 8016e4c:	e7db      	b.n	8016e06 <__b2d+0x4a>
 8016e4e:	ea44 030c 	orr.w	r3, r4, ip
 8016e52:	460a      	mov	r2, r1
 8016e54:	e7d7      	b.n	8016e06 <__b2d+0x4a>
 8016e56:	bf00      	nop
 8016e58:	3ff00000 	.word	0x3ff00000

08016e5c <__d2b>:
 8016e5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016e60:	4689      	mov	r9, r1
 8016e62:	2101      	movs	r1, #1
 8016e64:	ec57 6b10 	vmov	r6, r7, d0
 8016e68:	4690      	mov	r8, r2
 8016e6a:	f7ff fc09 	bl	8016680 <_Balloc>
 8016e6e:	4604      	mov	r4, r0
 8016e70:	b930      	cbnz	r0, 8016e80 <__d2b+0x24>
 8016e72:	4602      	mov	r2, r0
 8016e74:	4b25      	ldr	r3, [pc, #148]	; (8016f0c <__d2b+0xb0>)
 8016e76:	4826      	ldr	r0, [pc, #152]	; (8016f10 <__d2b+0xb4>)
 8016e78:	f240 310a 	movw	r1, #778	; 0x30a
 8016e7c:	f000 fa46 	bl	801730c <__assert_func>
 8016e80:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016e84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016e88:	bb35      	cbnz	r5, 8016ed8 <__d2b+0x7c>
 8016e8a:	2e00      	cmp	r6, #0
 8016e8c:	9301      	str	r3, [sp, #4]
 8016e8e:	d028      	beq.n	8016ee2 <__d2b+0x86>
 8016e90:	4668      	mov	r0, sp
 8016e92:	9600      	str	r6, [sp, #0]
 8016e94:	f7ff fd06 	bl	80168a4 <__lo0bits>
 8016e98:	9900      	ldr	r1, [sp, #0]
 8016e9a:	b300      	cbz	r0, 8016ede <__d2b+0x82>
 8016e9c:	9a01      	ldr	r2, [sp, #4]
 8016e9e:	f1c0 0320 	rsb	r3, r0, #32
 8016ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8016ea6:	430b      	orrs	r3, r1
 8016ea8:	40c2      	lsrs	r2, r0
 8016eaa:	6163      	str	r3, [r4, #20]
 8016eac:	9201      	str	r2, [sp, #4]
 8016eae:	9b01      	ldr	r3, [sp, #4]
 8016eb0:	61a3      	str	r3, [r4, #24]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	bf14      	ite	ne
 8016eb6:	2202      	movne	r2, #2
 8016eb8:	2201      	moveq	r2, #1
 8016eba:	6122      	str	r2, [r4, #16]
 8016ebc:	b1d5      	cbz	r5, 8016ef4 <__d2b+0x98>
 8016ebe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016ec2:	4405      	add	r5, r0
 8016ec4:	f8c9 5000 	str.w	r5, [r9]
 8016ec8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016ecc:	f8c8 0000 	str.w	r0, [r8]
 8016ed0:	4620      	mov	r0, r4
 8016ed2:	b003      	add	sp, #12
 8016ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ed8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016edc:	e7d5      	b.n	8016e8a <__d2b+0x2e>
 8016ede:	6161      	str	r1, [r4, #20]
 8016ee0:	e7e5      	b.n	8016eae <__d2b+0x52>
 8016ee2:	a801      	add	r0, sp, #4
 8016ee4:	f7ff fcde 	bl	80168a4 <__lo0bits>
 8016ee8:	9b01      	ldr	r3, [sp, #4]
 8016eea:	6163      	str	r3, [r4, #20]
 8016eec:	2201      	movs	r2, #1
 8016eee:	6122      	str	r2, [r4, #16]
 8016ef0:	3020      	adds	r0, #32
 8016ef2:	e7e3      	b.n	8016ebc <__d2b+0x60>
 8016ef4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016ef8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016efc:	f8c9 0000 	str.w	r0, [r9]
 8016f00:	6918      	ldr	r0, [r3, #16]
 8016f02:	f7ff fcaf 	bl	8016864 <__hi0bits>
 8016f06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016f0a:	e7df      	b.n	8016ecc <__d2b+0x70>
 8016f0c:	0801966f 	.word	0x0801966f
 8016f10:	080196fc 	.word	0x080196fc

08016f14 <__ratio>:
 8016f14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f18:	4688      	mov	r8, r1
 8016f1a:	4669      	mov	r1, sp
 8016f1c:	4681      	mov	r9, r0
 8016f1e:	f7ff ff4d 	bl	8016dbc <__b2d>
 8016f22:	a901      	add	r1, sp, #4
 8016f24:	4640      	mov	r0, r8
 8016f26:	ec55 4b10 	vmov	r4, r5, d0
 8016f2a:	f7ff ff47 	bl	8016dbc <__b2d>
 8016f2e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016f32:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016f36:	eba3 0c02 	sub.w	ip, r3, r2
 8016f3a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016f3e:	1a9b      	subs	r3, r3, r2
 8016f40:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016f44:	ec51 0b10 	vmov	r0, r1, d0
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	bfd6      	itet	le
 8016f4c:	460a      	movle	r2, r1
 8016f4e:	462a      	movgt	r2, r5
 8016f50:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016f54:	468b      	mov	fp, r1
 8016f56:	462f      	mov	r7, r5
 8016f58:	bfd4      	ite	le
 8016f5a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016f5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016f62:	4620      	mov	r0, r4
 8016f64:	ee10 2a10 	vmov	r2, s0
 8016f68:	465b      	mov	r3, fp
 8016f6a:	4639      	mov	r1, r7
 8016f6c:	f7e9 fc6e 	bl	800084c <__aeabi_ddiv>
 8016f70:	ec41 0b10 	vmov	d0, r0, r1
 8016f74:	b003      	add	sp, #12
 8016f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016f7a <__copybits>:
 8016f7a:	3901      	subs	r1, #1
 8016f7c:	b570      	push	{r4, r5, r6, lr}
 8016f7e:	1149      	asrs	r1, r1, #5
 8016f80:	6914      	ldr	r4, [r2, #16]
 8016f82:	3101      	adds	r1, #1
 8016f84:	f102 0314 	add.w	r3, r2, #20
 8016f88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016f8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016f90:	1f05      	subs	r5, r0, #4
 8016f92:	42a3      	cmp	r3, r4
 8016f94:	d30c      	bcc.n	8016fb0 <__copybits+0x36>
 8016f96:	1aa3      	subs	r3, r4, r2
 8016f98:	3b11      	subs	r3, #17
 8016f9a:	f023 0303 	bic.w	r3, r3, #3
 8016f9e:	3211      	adds	r2, #17
 8016fa0:	42a2      	cmp	r2, r4
 8016fa2:	bf88      	it	hi
 8016fa4:	2300      	movhi	r3, #0
 8016fa6:	4418      	add	r0, r3
 8016fa8:	2300      	movs	r3, #0
 8016faa:	4288      	cmp	r0, r1
 8016fac:	d305      	bcc.n	8016fba <__copybits+0x40>
 8016fae:	bd70      	pop	{r4, r5, r6, pc}
 8016fb0:	f853 6b04 	ldr.w	r6, [r3], #4
 8016fb4:	f845 6f04 	str.w	r6, [r5, #4]!
 8016fb8:	e7eb      	b.n	8016f92 <__copybits+0x18>
 8016fba:	f840 3b04 	str.w	r3, [r0], #4
 8016fbe:	e7f4      	b.n	8016faa <__copybits+0x30>

08016fc0 <__any_on>:
 8016fc0:	f100 0214 	add.w	r2, r0, #20
 8016fc4:	6900      	ldr	r0, [r0, #16]
 8016fc6:	114b      	asrs	r3, r1, #5
 8016fc8:	4298      	cmp	r0, r3
 8016fca:	b510      	push	{r4, lr}
 8016fcc:	db11      	blt.n	8016ff2 <__any_on+0x32>
 8016fce:	dd0a      	ble.n	8016fe6 <__any_on+0x26>
 8016fd0:	f011 011f 	ands.w	r1, r1, #31
 8016fd4:	d007      	beq.n	8016fe6 <__any_on+0x26>
 8016fd6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016fda:	fa24 f001 	lsr.w	r0, r4, r1
 8016fde:	fa00 f101 	lsl.w	r1, r0, r1
 8016fe2:	428c      	cmp	r4, r1
 8016fe4:	d10b      	bne.n	8016ffe <__any_on+0x3e>
 8016fe6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016fea:	4293      	cmp	r3, r2
 8016fec:	d803      	bhi.n	8016ff6 <__any_on+0x36>
 8016fee:	2000      	movs	r0, #0
 8016ff0:	bd10      	pop	{r4, pc}
 8016ff2:	4603      	mov	r3, r0
 8016ff4:	e7f7      	b.n	8016fe6 <__any_on+0x26>
 8016ff6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016ffa:	2900      	cmp	r1, #0
 8016ffc:	d0f5      	beq.n	8016fea <__any_on+0x2a>
 8016ffe:	2001      	movs	r0, #1
 8017000:	e7f6      	b.n	8016ff0 <__any_on+0x30>

08017002 <__ssputs_r>:
 8017002:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017006:	688e      	ldr	r6, [r1, #8]
 8017008:	429e      	cmp	r6, r3
 801700a:	4682      	mov	sl, r0
 801700c:	460c      	mov	r4, r1
 801700e:	4690      	mov	r8, r2
 8017010:	461f      	mov	r7, r3
 8017012:	d838      	bhi.n	8017086 <__ssputs_r+0x84>
 8017014:	898a      	ldrh	r2, [r1, #12]
 8017016:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801701a:	d032      	beq.n	8017082 <__ssputs_r+0x80>
 801701c:	6825      	ldr	r5, [r4, #0]
 801701e:	6909      	ldr	r1, [r1, #16]
 8017020:	eba5 0901 	sub.w	r9, r5, r1
 8017024:	6965      	ldr	r5, [r4, #20]
 8017026:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801702a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801702e:	3301      	adds	r3, #1
 8017030:	444b      	add	r3, r9
 8017032:	106d      	asrs	r5, r5, #1
 8017034:	429d      	cmp	r5, r3
 8017036:	bf38      	it	cc
 8017038:	461d      	movcc	r5, r3
 801703a:	0553      	lsls	r3, r2, #21
 801703c:	d531      	bpl.n	80170a2 <__ssputs_r+0xa0>
 801703e:	4629      	mov	r1, r5
 8017040:	f7fc fb18 	bl	8013674 <_malloc_r>
 8017044:	4606      	mov	r6, r0
 8017046:	b950      	cbnz	r0, 801705e <__ssputs_r+0x5c>
 8017048:	230c      	movs	r3, #12
 801704a:	f8ca 3000 	str.w	r3, [sl]
 801704e:	89a3      	ldrh	r3, [r4, #12]
 8017050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017054:	81a3      	strh	r3, [r4, #12]
 8017056:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801705a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801705e:	6921      	ldr	r1, [r4, #16]
 8017060:	464a      	mov	r2, r9
 8017062:	f7fc fa6f 	bl	8013544 <memcpy>
 8017066:	89a3      	ldrh	r3, [r4, #12]
 8017068:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801706c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017070:	81a3      	strh	r3, [r4, #12]
 8017072:	6126      	str	r6, [r4, #16]
 8017074:	6165      	str	r5, [r4, #20]
 8017076:	444e      	add	r6, r9
 8017078:	eba5 0509 	sub.w	r5, r5, r9
 801707c:	6026      	str	r6, [r4, #0]
 801707e:	60a5      	str	r5, [r4, #8]
 8017080:	463e      	mov	r6, r7
 8017082:	42be      	cmp	r6, r7
 8017084:	d900      	bls.n	8017088 <__ssputs_r+0x86>
 8017086:	463e      	mov	r6, r7
 8017088:	6820      	ldr	r0, [r4, #0]
 801708a:	4632      	mov	r2, r6
 801708c:	4641      	mov	r1, r8
 801708e:	f000 f96d 	bl	801736c <memmove>
 8017092:	68a3      	ldr	r3, [r4, #8]
 8017094:	1b9b      	subs	r3, r3, r6
 8017096:	60a3      	str	r3, [r4, #8]
 8017098:	6823      	ldr	r3, [r4, #0]
 801709a:	4433      	add	r3, r6
 801709c:	6023      	str	r3, [r4, #0]
 801709e:	2000      	movs	r0, #0
 80170a0:	e7db      	b.n	801705a <__ssputs_r+0x58>
 80170a2:	462a      	mov	r2, r5
 80170a4:	f000 f97c 	bl	80173a0 <_realloc_r>
 80170a8:	4606      	mov	r6, r0
 80170aa:	2800      	cmp	r0, #0
 80170ac:	d1e1      	bne.n	8017072 <__ssputs_r+0x70>
 80170ae:	6921      	ldr	r1, [r4, #16]
 80170b0:	4650      	mov	r0, sl
 80170b2:	f7fc fa73 	bl	801359c <_free_r>
 80170b6:	e7c7      	b.n	8017048 <__ssputs_r+0x46>

080170b8 <_svfiprintf_r>:
 80170b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170bc:	4698      	mov	r8, r3
 80170be:	898b      	ldrh	r3, [r1, #12]
 80170c0:	061b      	lsls	r3, r3, #24
 80170c2:	b09d      	sub	sp, #116	; 0x74
 80170c4:	4607      	mov	r7, r0
 80170c6:	460d      	mov	r5, r1
 80170c8:	4614      	mov	r4, r2
 80170ca:	d50e      	bpl.n	80170ea <_svfiprintf_r+0x32>
 80170cc:	690b      	ldr	r3, [r1, #16]
 80170ce:	b963      	cbnz	r3, 80170ea <_svfiprintf_r+0x32>
 80170d0:	2140      	movs	r1, #64	; 0x40
 80170d2:	f7fc facf 	bl	8013674 <_malloc_r>
 80170d6:	6028      	str	r0, [r5, #0]
 80170d8:	6128      	str	r0, [r5, #16]
 80170da:	b920      	cbnz	r0, 80170e6 <_svfiprintf_r+0x2e>
 80170dc:	230c      	movs	r3, #12
 80170de:	603b      	str	r3, [r7, #0]
 80170e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80170e4:	e0d1      	b.n	801728a <_svfiprintf_r+0x1d2>
 80170e6:	2340      	movs	r3, #64	; 0x40
 80170e8:	616b      	str	r3, [r5, #20]
 80170ea:	2300      	movs	r3, #0
 80170ec:	9309      	str	r3, [sp, #36]	; 0x24
 80170ee:	2320      	movs	r3, #32
 80170f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80170f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80170f8:	2330      	movs	r3, #48	; 0x30
 80170fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80172a4 <_svfiprintf_r+0x1ec>
 80170fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017102:	f04f 0901 	mov.w	r9, #1
 8017106:	4623      	mov	r3, r4
 8017108:	469a      	mov	sl, r3
 801710a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801710e:	b10a      	cbz	r2, 8017114 <_svfiprintf_r+0x5c>
 8017110:	2a25      	cmp	r2, #37	; 0x25
 8017112:	d1f9      	bne.n	8017108 <_svfiprintf_r+0x50>
 8017114:	ebba 0b04 	subs.w	fp, sl, r4
 8017118:	d00b      	beq.n	8017132 <_svfiprintf_r+0x7a>
 801711a:	465b      	mov	r3, fp
 801711c:	4622      	mov	r2, r4
 801711e:	4629      	mov	r1, r5
 8017120:	4638      	mov	r0, r7
 8017122:	f7ff ff6e 	bl	8017002 <__ssputs_r>
 8017126:	3001      	adds	r0, #1
 8017128:	f000 80aa 	beq.w	8017280 <_svfiprintf_r+0x1c8>
 801712c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801712e:	445a      	add	r2, fp
 8017130:	9209      	str	r2, [sp, #36]	; 0x24
 8017132:	f89a 3000 	ldrb.w	r3, [sl]
 8017136:	2b00      	cmp	r3, #0
 8017138:	f000 80a2 	beq.w	8017280 <_svfiprintf_r+0x1c8>
 801713c:	2300      	movs	r3, #0
 801713e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017142:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017146:	f10a 0a01 	add.w	sl, sl, #1
 801714a:	9304      	str	r3, [sp, #16]
 801714c:	9307      	str	r3, [sp, #28]
 801714e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017152:	931a      	str	r3, [sp, #104]	; 0x68
 8017154:	4654      	mov	r4, sl
 8017156:	2205      	movs	r2, #5
 8017158:	f814 1b01 	ldrb.w	r1, [r4], #1
 801715c:	4851      	ldr	r0, [pc, #324]	; (80172a4 <_svfiprintf_r+0x1ec>)
 801715e:	f7e9 f83f 	bl	80001e0 <memchr>
 8017162:	9a04      	ldr	r2, [sp, #16]
 8017164:	b9d8      	cbnz	r0, 801719e <_svfiprintf_r+0xe6>
 8017166:	06d0      	lsls	r0, r2, #27
 8017168:	bf44      	itt	mi
 801716a:	2320      	movmi	r3, #32
 801716c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017170:	0711      	lsls	r1, r2, #28
 8017172:	bf44      	itt	mi
 8017174:	232b      	movmi	r3, #43	; 0x2b
 8017176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801717a:	f89a 3000 	ldrb.w	r3, [sl]
 801717e:	2b2a      	cmp	r3, #42	; 0x2a
 8017180:	d015      	beq.n	80171ae <_svfiprintf_r+0xf6>
 8017182:	9a07      	ldr	r2, [sp, #28]
 8017184:	4654      	mov	r4, sl
 8017186:	2000      	movs	r0, #0
 8017188:	f04f 0c0a 	mov.w	ip, #10
 801718c:	4621      	mov	r1, r4
 801718e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017192:	3b30      	subs	r3, #48	; 0x30
 8017194:	2b09      	cmp	r3, #9
 8017196:	d94e      	bls.n	8017236 <_svfiprintf_r+0x17e>
 8017198:	b1b0      	cbz	r0, 80171c8 <_svfiprintf_r+0x110>
 801719a:	9207      	str	r2, [sp, #28]
 801719c:	e014      	b.n	80171c8 <_svfiprintf_r+0x110>
 801719e:	eba0 0308 	sub.w	r3, r0, r8
 80171a2:	fa09 f303 	lsl.w	r3, r9, r3
 80171a6:	4313      	orrs	r3, r2
 80171a8:	9304      	str	r3, [sp, #16]
 80171aa:	46a2      	mov	sl, r4
 80171ac:	e7d2      	b.n	8017154 <_svfiprintf_r+0x9c>
 80171ae:	9b03      	ldr	r3, [sp, #12]
 80171b0:	1d19      	adds	r1, r3, #4
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	9103      	str	r1, [sp, #12]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	bfbb      	ittet	lt
 80171ba:	425b      	neglt	r3, r3
 80171bc:	f042 0202 	orrlt.w	r2, r2, #2
 80171c0:	9307      	strge	r3, [sp, #28]
 80171c2:	9307      	strlt	r3, [sp, #28]
 80171c4:	bfb8      	it	lt
 80171c6:	9204      	strlt	r2, [sp, #16]
 80171c8:	7823      	ldrb	r3, [r4, #0]
 80171ca:	2b2e      	cmp	r3, #46	; 0x2e
 80171cc:	d10c      	bne.n	80171e8 <_svfiprintf_r+0x130>
 80171ce:	7863      	ldrb	r3, [r4, #1]
 80171d0:	2b2a      	cmp	r3, #42	; 0x2a
 80171d2:	d135      	bne.n	8017240 <_svfiprintf_r+0x188>
 80171d4:	9b03      	ldr	r3, [sp, #12]
 80171d6:	1d1a      	adds	r2, r3, #4
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	9203      	str	r2, [sp, #12]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	bfb8      	it	lt
 80171e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80171e4:	3402      	adds	r4, #2
 80171e6:	9305      	str	r3, [sp, #20]
 80171e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80172b4 <_svfiprintf_r+0x1fc>
 80171ec:	7821      	ldrb	r1, [r4, #0]
 80171ee:	2203      	movs	r2, #3
 80171f0:	4650      	mov	r0, sl
 80171f2:	f7e8 fff5 	bl	80001e0 <memchr>
 80171f6:	b140      	cbz	r0, 801720a <_svfiprintf_r+0x152>
 80171f8:	2340      	movs	r3, #64	; 0x40
 80171fa:	eba0 000a 	sub.w	r0, r0, sl
 80171fe:	fa03 f000 	lsl.w	r0, r3, r0
 8017202:	9b04      	ldr	r3, [sp, #16]
 8017204:	4303      	orrs	r3, r0
 8017206:	3401      	adds	r4, #1
 8017208:	9304      	str	r3, [sp, #16]
 801720a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801720e:	4826      	ldr	r0, [pc, #152]	; (80172a8 <_svfiprintf_r+0x1f0>)
 8017210:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017214:	2206      	movs	r2, #6
 8017216:	f7e8 ffe3 	bl	80001e0 <memchr>
 801721a:	2800      	cmp	r0, #0
 801721c:	d038      	beq.n	8017290 <_svfiprintf_r+0x1d8>
 801721e:	4b23      	ldr	r3, [pc, #140]	; (80172ac <_svfiprintf_r+0x1f4>)
 8017220:	bb1b      	cbnz	r3, 801726a <_svfiprintf_r+0x1b2>
 8017222:	9b03      	ldr	r3, [sp, #12]
 8017224:	3307      	adds	r3, #7
 8017226:	f023 0307 	bic.w	r3, r3, #7
 801722a:	3308      	adds	r3, #8
 801722c:	9303      	str	r3, [sp, #12]
 801722e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017230:	4433      	add	r3, r6
 8017232:	9309      	str	r3, [sp, #36]	; 0x24
 8017234:	e767      	b.n	8017106 <_svfiprintf_r+0x4e>
 8017236:	fb0c 3202 	mla	r2, ip, r2, r3
 801723a:	460c      	mov	r4, r1
 801723c:	2001      	movs	r0, #1
 801723e:	e7a5      	b.n	801718c <_svfiprintf_r+0xd4>
 8017240:	2300      	movs	r3, #0
 8017242:	3401      	adds	r4, #1
 8017244:	9305      	str	r3, [sp, #20]
 8017246:	4619      	mov	r1, r3
 8017248:	f04f 0c0a 	mov.w	ip, #10
 801724c:	4620      	mov	r0, r4
 801724e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017252:	3a30      	subs	r2, #48	; 0x30
 8017254:	2a09      	cmp	r2, #9
 8017256:	d903      	bls.n	8017260 <_svfiprintf_r+0x1a8>
 8017258:	2b00      	cmp	r3, #0
 801725a:	d0c5      	beq.n	80171e8 <_svfiprintf_r+0x130>
 801725c:	9105      	str	r1, [sp, #20]
 801725e:	e7c3      	b.n	80171e8 <_svfiprintf_r+0x130>
 8017260:	fb0c 2101 	mla	r1, ip, r1, r2
 8017264:	4604      	mov	r4, r0
 8017266:	2301      	movs	r3, #1
 8017268:	e7f0      	b.n	801724c <_svfiprintf_r+0x194>
 801726a:	ab03      	add	r3, sp, #12
 801726c:	9300      	str	r3, [sp, #0]
 801726e:	462a      	mov	r2, r5
 8017270:	4b0f      	ldr	r3, [pc, #60]	; (80172b0 <_svfiprintf_r+0x1f8>)
 8017272:	a904      	add	r1, sp, #16
 8017274:	4638      	mov	r0, r7
 8017276:	f7fc fb11 	bl	801389c <_printf_float>
 801727a:	1c42      	adds	r2, r0, #1
 801727c:	4606      	mov	r6, r0
 801727e:	d1d6      	bne.n	801722e <_svfiprintf_r+0x176>
 8017280:	89ab      	ldrh	r3, [r5, #12]
 8017282:	065b      	lsls	r3, r3, #25
 8017284:	f53f af2c 	bmi.w	80170e0 <_svfiprintf_r+0x28>
 8017288:	9809      	ldr	r0, [sp, #36]	; 0x24
 801728a:	b01d      	add	sp, #116	; 0x74
 801728c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017290:	ab03      	add	r3, sp, #12
 8017292:	9300      	str	r3, [sp, #0]
 8017294:	462a      	mov	r2, r5
 8017296:	4b06      	ldr	r3, [pc, #24]	; (80172b0 <_svfiprintf_r+0x1f8>)
 8017298:	a904      	add	r1, sp, #16
 801729a:	4638      	mov	r0, r7
 801729c:	f7fc fda2 	bl	8013de4 <_printf_i>
 80172a0:	e7eb      	b.n	801727a <_svfiprintf_r+0x1c2>
 80172a2:	bf00      	nop
 80172a4:	08019854 	.word	0x08019854
 80172a8:	0801985e 	.word	0x0801985e
 80172ac:	0801389d 	.word	0x0801389d
 80172b0:	08017003 	.word	0x08017003
 80172b4:	0801985a 	.word	0x0801985a

080172b8 <_read_r>:
 80172b8:	b538      	push	{r3, r4, r5, lr}
 80172ba:	4d07      	ldr	r5, [pc, #28]	; (80172d8 <_read_r+0x20>)
 80172bc:	4604      	mov	r4, r0
 80172be:	4608      	mov	r0, r1
 80172c0:	4611      	mov	r1, r2
 80172c2:	2200      	movs	r2, #0
 80172c4:	602a      	str	r2, [r5, #0]
 80172c6:	461a      	mov	r2, r3
 80172c8:	f7ef fd32 	bl	8006d30 <_read>
 80172cc:	1c43      	adds	r3, r0, #1
 80172ce:	d102      	bne.n	80172d6 <_read_r+0x1e>
 80172d0:	682b      	ldr	r3, [r5, #0]
 80172d2:	b103      	cbz	r3, 80172d6 <_read_r+0x1e>
 80172d4:	6023      	str	r3, [r4, #0]
 80172d6:	bd38      	pop	{r3, r4, r5, pc}
 80172d8:	200085e4 	.word	0x200085e4
 80172dc:	00000000 	.word	0x00000000

080172e0 <nan>:
 80172e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80172e8 <nan+0x8>
 80172e4:	4770      	bx	lr
 80172e6:	bf00      	nop
 80172e8:	00000000 	.word	0x00000000
 80172ec:	7ff80000 	.word	0x7ff80000

080172f0 <__ascii_wctomb>:
 80172f0:	b149      	cbz	r1, 8017306 <__ascii_wctomb+0x16>
 80172f2:	2aff      	cmp	r2, #255	; 0xff
 80172f4:	bf85      	ittet	hi
 80172f6:	238a      	movhi	r3, #138	; 0x8a
 80172f8:	6003      	strhi	r3, [r0, #0]
 80172fa:	700a      	strbls	r2, [r1, #0]
 80172fc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8017300:	bf98      	it	ls
 8017302:	2001      	movls	r0, #1
 8017304:	4770      	bx	lr
 8017306:	4608      	mov	r0, r1
 8017308:	4770      	bx	lr
	...

0801730c <__assert_func>:
 801730c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801730e:	4614      	mov	r4, r2
 8017310:	461a      	mov	r2, r3
 8017312:	4b09      	ldr	r3, [pc, #36]	; (8017338 <__assert_func+0x2c>)
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	4605      	mov	r5, r0
 8017318:	68d8      	ldr	r0, [r3, #12]
 801731a:	b14c      	cbz	r4, 8017330 <__assert_func+0x24>
 801731c:	4b07      	ldr	r3, [pc, #28]	; (801733c <__assert_func+0x30>)
 801731e:	9100      	str	r1, [sp, #0]
 8017320:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017324:	4906      	ldr	r1, [pc, #24]	; (8017340 <__assert_func+0x34>)
 8017326:	462b      	mov	r3, r5
 8017328:	f000 f80e 	bl	8017348 <fiprintf>
 801732c:	f000 fa80 	bl	8017830 <abort>
 8017330:	4b04      	ldr	r3, [pc, #16]	; (8017344 <__assert_func+0x38>)
 8017332:	461c      	mov	r4, r3
 8017334:	e7f3      	b.n	801731e <__assert_func+0x12>
 8017336:	bf00      	nop
 8017338:	20000188 	.word	0x20000188
 801733c:	08019865 	.word	0x08019865
 8017340:	08019872 	.word	0x08019872
 8017344:	080198a0 	.word	0x080198a0

08017348 <fiprintf>:
 8017348:	b40e      	push	{r1, r2, r3}
 801734a:	b503      	push	{r0, r1, lr}
 801734c:	4601      	mov	r1, r0
 801734e:	ab03      	add	r3, sp, #12
 8017350:	4805      	ldr	r0, [pc, #20]	; (8017368 <fiprintf+0x20>)
 8017352:	f853 2b04 	ldr.w	r2, [r3], #4
 8017356:	6800      	ldr	r0, [r0, #0]
 8017358:	9301      	str	r3, [sp, #4]
 801735a:	f000 f879 	bl	8017450 <_vfiprintf_r>
 801735e:	b002      	add	sp, #8
 8017360:	f85d eb04 	ldr.w	lr, [sp], #4
 8017364:	b003      	add	sp, #12
 8017366:	4770      	bx	lr
 8017368:	20000188 	.word	0x20000188

0801736c <memmove>:
 801736c:	4288      	cmp	r0, r1
 801736e:	b510      	push	{r4, lr}
 8017370:	eb01 0402 	add.w	r4, r1, r2
 8017374:	d902      	bls.n	801737c <memmove+0x10>
 8017376:	4284      	cmp	r4, r0
 8017378:	4623      	mov	r3, r4
 801737a:	d807      	bhi.n	801738c <memmove+0x20>
 801737c:	1e43      	subs	r3, r0, #1
 801737e:	42a1      	cmp	r1, r4
 8017380:	d008      	beq.n	8017394 <memmove+0x28>
 8017382:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017386:	f803 2f01 	strb.w	r2, [r3, #1]!
 801738a:	e7f8      	b.n	801737e <memmove+0x12>
 801738c:	4402      	add	r2, r0
 801738e:	4601      	mov	r1, r0
 8017390:	428a      	cmp	r2, r1
 8017392:	d100      	bne.n	8017396 <memmove+0x2a>
 8017394:	bd10      	pop	{r4, pc}
 8017396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801739a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801739e:	e7f7      	b.n	8017390 <memmove+0x24>

080173a0 <_realloc_r>:
 80173a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173a4:	4680      	mov	r8, r0
 80173a6:	4614      	mov	r4, r2
 80173a8:	460e      	mov	r6, r1
 80173aa:	b921      	cbnz	r1, 80173b6 <_realloc_r+0x16>
 80173ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80173b0:	4611      	mov	r1, r2
 80173b2:	f7fc b95f 	b.w	8013674 <_malloc_r>
 80173b6:	b92a      	cbnz	r2, 80173c4 <_realloc_r+0x24>
 80173b8:	f7fc f8f0 	bl	801359c <_free_r>
 80173bc:	4625      	mov	r5, r4
 80173be:	4628      	mov	r0, r5
 80173c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173c4:	f000 faa0 	bl	8017908 <_malloc_usable_size_r>
 80173c8:	4284      	cmp	r4, r0
 80173ca:	4607      	mov	r7, r0
 80173cc:	d802      	bhi.n	80173d4 <_realloc_r+0x34>
 80173ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80173d2:	d812      	bhi.n	80173fa <_realloc_r+0x5a>
 80173d4:	4621      	mov	r1, r4
 80173d6:	4640      	mov	r0, r8
 80173d8:	f7fc f94c 	bl	8013674 <_malloc_r>
 80173dc:	4605      	mov	r5, r0
 80173de:	2800      	cmp	r0, #0
 80173e0:	d0ed      	beq.n	80173be <_realloc_r+0x1e>
 80173e2:	42bc      	cmp	r4, r7
 80173e4:	4622      	mov	r2, r4
 80173e6:	4631      	mov	r1, r6
 80173e8:	bf28      	it	cs
 80173ea:	463a      	movcs	r2, r7
 80173ec:	f7fc f8aa 	bl	8013544 <memcpy>
 80173f0:	4631      	mov	r1, r6
 80173f2:	4640      	mov	r0, r8
 80173f4:	f7fc f8d2 	bl	801359c <_free_r>
 80173f8:	e7e1      	b.n	80173be <_realloc_r+0x1e>
 80173fa:	4635      	mov	r5, r6
 80173fc:	e7df      	b.n	80173be <_realloc_r+0x1e>

080173fe <__sfputc_r>:
 80173fe:	6893      	ldr	r3, [r2, #8]
 8017400:	3b01      	subs	r3, #1
 8017402:	2b00      	cmp	r3, #0
 8017404:	b410      	push	{r4}
 8017406:	6093      	str	r3, [r2, #8]
 8017408:	da08      	bge.n	801741c <__sfputc_r+0x1e>
 801740a:	6994      	ldr	r4, [r2, #24]
 801740c:	42a3      	cmp	r3, r4
 801740e:	db01      	blt.n	8017414 <__sfputc_r+0x16>
 8017410:	290a      	cmp	r1, #10
 8017412:	d103      	bne.n	801741c <__sfputc_r+0x1e>
 8017414:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017418:	f000 b94a 	b.w	80176b0 <__swbuf_r>
 801741c:	6813      	ldr	r3, [r2, #0]
 801741e:	1c58      	adds	r0, r3, #1
 8017420:	6010      	str	r0, [r2, #0]
 8017422:	7019      	strb	r1, [r3, #0]
 8017424:	4608      	mov	r0, r1
 8017426:	f85d 4b04 	ldr.w	r4, [sp], #4
 801742a:	4770      	bx	lr

0801742c <__sfputs_r>:
 801742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801742e:	4606      	mov	r6, r0
 8017430:	460f      	mov	r7, r1
 8017432:	4614      	mov	r4, r2
 8017434:	18d5      	adds	r5, r2, r3
 8017436:	42ac      	cmp	r4, r5
 8017438:	d101      	bne.n	801743e <__sfputs_r+0x12>
 801743a:	2000      	movs	r0, #0
 801743c:	e007      	b.n	801744e <__sfputs_r+0x22>
 801743e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017442:	463a      	mov	r2, r7
 8017444:	4630      	mov	r0, r6
 8017446:	f7ff ffda 	bl	80173fe <__sfputc_r>
 801744a:	1c43      	adds	r3, r0, #1
 801744c:	d1f3      	bne.n	8017436 <__sfputs_r+0xa>
 801744e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017450 <_vfiprintf_r>:
 8017450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017454:	460d      	mov	r5, r1
 8017456:	b09d      	sub	sp, #116	; 0x74
 8017458:	4614      	mov	r4, r2
 801745a:	4698      	mov	r8, r3
 801745c:	4606      	mov	r6, r0
 801745e:	b118      	cbz	r0, 8017468 <_vfiprintf_r+0x18>
 8017460:	6983      	ldr	r3, [r0, #24]
 8017462:	b90b      	cbnz	r3, 8017468 <_vfiprintf_r+0x18>
 8017464:	f7fb feec 	bl	8013240 <__sinit>
 8017468:	4b89      	ldr	r3, [pc, #548]	; (8017690 <_vfiprintf_r+0x240>)
 801746a:	429d      	cmp	r5, r3
 801746c:	d11b      	bne.n	80174a6 <_vfiprintf_r+0x56>
 801746e:	6875      	ldr	r5, [r6, #4]
 8017470:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017472:	07d9      	lsls	r1, r3, #31
 8017474:	d405      	bmi.n	8017482 <_vfiprintf_r+0x32>
 8017476:	89ab      	ldrh	r3, [r5, #12]
 8017478:	059a      	lsls	r2, r3, #22
 801747a:	d402      	bmi.n	8017482 <_vfiprintf_r+0x32>
 801747c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801747e:	f7fc f84e 	bl	801351e <__retarget_lock_acquire_recursive>
 8017482:	89ab      	ldrh	r3, [r5, #12]
 8017484:	071b      	lsls	r3, r3, #28
 8017486:	d501      	bpl.n	801748c <_vfiprintf_r+0x3c>
 8017488:	692b      	ldr	r3, [r5, #16]
 801748a:	b9eb      	cbnz	r3, 80174c8 <_vfiprintf_r+0x78>
 801748c:	4629      	mov	r1, r5
 801748e:	4630      	mov	r0, r6
 8017490:	f000 f960 	bl	8017754 <__swsetup_r>
 8017494:	b1c0      	cbz	r0, 80174c8 <_vfiprintf_r+0x78>
 8017496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017498:	07dc      	lsls	r4, r3, #31
 801749a:	d50e      	bpl.n	80174ba <_vfiprintf_r+0x6a>
 801749c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174a0:	b01d      	add	sp, #116	; 0x74
 80174a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174a6:	4b7b      	ldr	r3, [pc, #492]	; (8017694 <_vfiprintf_r+0x244>)
 80174a8:	429d      	cmp	r5, r3
 80174aa:	d101      	bne.n	80174b0 <_vfiprintf_r+0x60>
 80174ac:	68b5      	ldr	r5, [r6, #8]
 80174ae:	e7df      	b.n	8017470 <_vfiprintf_r+0x20>
 80174b0:	4b79      	ldr	r3, [pc, #484]	; (8017698 <_vfiprintf_r+0x248>)
 80174b2:	429d      	cmp	r5, r3
 80174b4:	bf08      	it	eq
 80174b6:	68f5      	ldreq	r5, [r6, #12]
 80174b8:	e7da      	b.n	8017470 <_vfiprintf_r+0x20>
 80174ba:	89ab      	ldrh	r3, [r5, #12]
 80174bc:	0598      	lsls	r0, r3, #22
 80174be:	d4ed      	bmi.n	801749c <_vfiprintf_r+0x4c>
 80174c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80174c2:	f7fc f82d 	bl	8013520 <__retarget_lock_release_recursive>
 80174c6:	e7e9      	b.n	801749c <_vfiprintf_r+0x4c>
 80174c8:	2300      	movs	r3, #0
 80174ca:	9309      	str	r3, [sp, #36]	; 0x24
 80174cc:	2320      	movs	r3, #32
 80174ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80174d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80174d6:	2330      	movs	r3, #48	; 0x30
 80174d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801769c <_vfiprintf_r+0x24c>
 80174dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80174e0:	f04f 0901 	mov.w	r9, #1
 80174e4:	4623      	mov	r3, r4
 80174e6:	469a      	mov	sl, r3
 80174e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80174ec:	b10a      	cbz	r2, 80174f2 <_vfiprintf_r+0xa2>
 80174ee:	2a25      	cmp	r2, #37	; 0x25
 80174f0:	d1f9      	bne.n	80174e6 <_vfiprintf_r+0x96>
 80174f2:	ebba 0b04 	subs.w	fp, sl, r4
 80174f6:	d00b      	beq.n	8017510 <_vfiprintf_r+0xc0>
 80174f8:	465b      	mov	r3, fp
 80174fa:	4622      	mov	r2, r4
 80174fc:	4629      	mov	r1, r5
 80174fe:	4630      	mov	r0, r6
 8017500:	f7ff ff94 	bl	801742c <__sfputs_r>
 8017504:	3001      	adds	r0, #1
 8017506:	f000 80aa 	beq.w	801765e <_vfiprintf_r+0x20e>
 801750a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801750c:	445a      	add	r2, fp
 801750e:	9209      	str	r2, [sp, #36]	; 0x24
 8017510:	f89a 3000 	ldrb.w	r3, [sl]
 8017514:	2b00      	cmp	r3, #0
 8017516:	f000 80a2 	beq.w	801765e <_vfiprintf_r+0x20e>
 801751a:	2300      	movs	r3, #0
 801751c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017520:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017524:	f10a 0a01 	add.w	sl, sl, #1
 8017528:	9304      	str	r3, [sp, #16]
 801752a:	9307      	str	r3, [sp, #28]
 801752c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017530:	931a      	str	r3, [sp, #104]	; 0x68
 8017532:	4654      	mov	r4, sl
 8017534:	2205      	movs	r2, #5
 8017536:	f814 1b01 	ldrb.w	r1, [r4], #1
 801753a:	4858      	ldr	r0, [pc, #352]	; (801769c <_vfiprintf_r+0x24c>)
 801753c:	f7e8 fe50 	bl	80001e0 <memchr>
 8017540:	9a04      	ldr	r2, [sp, #16]
 8017542:	b9d8      	cbnz	r0, 801757c <_vfiprintf_r+0x12c>
 8017544:	06d1      	lsls	r1, r2, #27
 8017546:	bf44      	itt	mi
 8017548:	2320      	movmi	r3, #32
 801754a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801754e:	0713      	lsls	r3, r2, #28
 8017550:	bf44      	itt	mi
 8017552:	232b      	movmi	r3, #43	; 0x2b
 8017554:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017558:	f89a 3000 	ldrb.w	r3, [sl]
 801755c:	2b2a      	cmp	r3, #42	; 0x2a
 801755e:	d015      	beq.n	801758c <_vfiprintf_r+0x13c>
 8017560:	9a07      	ldr	r2, [sp, #28]
 8017562:	4654      	mov	r4, sl
 8017564:	2000      	movs	r0, #0
 8017566:	f04f 0c0a 	mov.w	ip, #10
 801756a:	4621      	mov	r1, r4
 801756c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017570:	3b30      	subs	r3, #48	; 0x30
 8017572:	2b09      	cmp	r3, #9
 8017574:	d94e      	bls.n	8017614 <_vfiprintf_r+0x1c4>
 8017576:	b1b0      	cbz	r0, 80175a6 <_vfiprintf_r+0x156>
 8017578:	9207      	str	r2, [sp, #28]
 801757a:	e014      	b.n	80175a6 <_vfiprintf_r+0x156>
 801757c:	eba0 0308 	sub.w	r3, r0, r8
 8017580:	fa09 f303 	lsl.w	r3, r9, r3
 8017584:	4313      	orrs	r3, r2
 8017586:	9304      	str	r3, [sp, #16]
 8017588:	46a2      	mov	sl, r4
 801758a:	e7d2      	b.n	8017532 <_vfiprintf_r+0xe2>
 801758c:	9b03      	ldr	r3, [sp, #12]
 801758e:	1d19      	adds	r1, r3, #4
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	9103      	str	r1, [sp, #12]
 8017594:	2b00      	cmp	r3, #0
 8017596:	bfbb      	ittet	lt
 8017598:	425b      	neglt	r3, r3
 801759a:	f042 0202 	orrlt.w	r2, r2, #2
 801759e:	9307      	strge	r3, [sp, #28]
 80175a0:	9307      	strlt	r3, [sp, #28]
 80175a2:	bfb8      	it	lt
 80175a4:	9204      	strlt	r2, [sp, #16]
 80175a6:	7823      	ldrb	r3, [r4, #0]
 80175a8:	2b2e      	cmp	r3, #46	; 0x2e
 80175aa:	d10c      	bne.n	80175c6 <_vfiprintf_r+0x176>
 80175ac:	7863      	ldrb	r3, [r4, #1]
 80175ae:	2b2a      	cmp	r3, #42	; 0x2a
 80175b0:	d135      	bne.n	801761e <_vfiprintf_r+0x1ce>
 80175b2:	9b03      	ldr	r3, [sp, #12]
 80175b4:	1d1a      	adds	r2, r3, #4
 80175b6:	681b      	ldr	r3, [r3, #0]
 80175b8:	9203      	str	r2, [sp, #12]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	bfb8      	it	lt
 80175be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80175c2:	3402      	adds	r4, #2
 80175c4:	9305      	str	r3, [sp, #20]
 80175c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80176ac <_vfiprintf_r+0x25c>
 80175ca:	7821      	ldrb	r1, [r4, #0]
 80175cc:	2203      	movs	r2, #3
 80175ce:	4650      	mov	r0, sl
 80175d0:	f7e8 fe06 	bl	80001e0 <memchr>
 80175d4:	b140      	cbz	r0, 80175e8 <_vfiprintf_r+0x198>
 80175d6:	2340      	movs	r3, #64	; 0x40
 80175d8:	eba0 000a 	sub.w	r0, r0, sl
 80175dc:	fa03 f000 	lsl.w	r0, r3, r0
 80175e0:	9b04      	ldr	r3, [sp, #16]
 80175e2:	4303      	orrs	r3, r0
 80175e4:	3401      	adds	r4, #1
 80175e6:	9304      	str	r3, [sp, #16]
 80175e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175ec:	482c      	ldr	r0, [pc, #176]	; (80176a0 <_vfiprintf_r+0x250>)
 80175ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80175f2:	2206      	movs	r2, #6
 80175f4:	f7e8 fdf4 	bl	80001e0 <memchr>
 80175f8:	2800      	cmp	r0, #0
 80175fa:	d03f      	beq.n	801767c <_vfiprintf_r+0x22c>
 80175fc:	4b29      	ldr	r3, [pc, #164]	; (80176a4 <_vfiprintf_r+0x254>)
 80175fe:	bb1b      	cbnz	r3, 8017648 <_vfiprintf_r+0x1f8>
 8017600:	9b03      	ldr	r3, [sp, #12]
 8017602:	3307      	adds	r3, #7
 8017604:	f023 0307 	bic.w	r3, r3, #7
 8017608:	3308      	adds	r3, #8
 801760a:	9303      	str	r3, [sp, #12]
 801760c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801760e:	443b      	add	r3, r7
 8017610:	9309      	str	r3, [sp, #36]	; 0x24
 8017612:	e767      	b.n	80174e4 <_vfiprintf_r+0x94>
 8017614:	fb0c 3202 	mla	r2, ip, r2, r3
 8017618:	460c      	mov	r4, r1
 801761a:	2001      	movs	r0, #1
 801761c:	e7a5      	b.n	801756a <_vfiprintf_r+0x11a>
 801761e:	2300      	movs	r3, #0
 8017620:	3401      	adds	r4, #1
 8017622:	9305      	str	r3, [sp, #20]
 8017624:	4619      	mov	r1, r3
 8017626:	f04f 0c0a 	mov.w	ip, #10
 801762a:	4620      	mov	r0, r4
 801762c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017630:	3a30      	subs	r2, #48	; 0x30
 8017632:	2a09      	cmp	r2, #9
 8017634:	d903      	bls.n	801763e <_vfiprintf_r+0x1ee>
 8017636:	2b00      	cmp	r3, #0
 8017638:	d0c5      	beq.n	80175c6 <_vfiprintf_r+0x176>
 801763a:	9105      	str	r1, [sp, #20]
 801763c:	e7c3      	b.n	80175c6 <_vfiprintf_r+0x176>
 801763e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017642:	4604      	mov	r4, r0
 8017644:	2301      	movs	r3, #1
 8017646:	e7f0      	b.n	801762a <_vfiprintf_r+0x1da>
 8017648:	ab03      	add	r3, sp, #12
 801764a:	9300      	str	r3, [sp, #0]
 801764c:	462a      	mov	r2, r5
 801764e:	4b16      	ldr	r3, [pc, #88]	; (80176a8 <_vfiprintf_r+0x258>)
 8017650:	a904      	add	r1, sp, #16
 8017652:	4630      	mov	r0, r6
 8017654:	f7fc f922 	bl	801389c <_printf_float>
 8017658:	4607      	mov	r7, r0
 801765a:	1c78      	adds	r0, r7, #1
 801765c:	d1d6      	bne.n	801760c <_vfiprintf_r+0x1bc>
 801765e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017660:	07d9      	lsls	r1, r3, #31
 8017662:	d405      	bmi.n	8017670 <_vfiprintf_r+0x220>
 8017664:	89ab      	ldrh	r3, [r5, #12]
 8017666:	059a      	lsls	r2, r3, #22
 8017668:	d402      	bmi.n	8017670 <_vfiprintf_r+0x220>
 801766a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801766c:	f7fb ff58 	bl	8013520 <__retarget_lock_release_recursive>
 8017670:	89ab      	ldrh	r3, [r5, #12]
 8017672:	065b      	lsls	r3, r3, #25
 8017674:	f53f af12 	bmi.w	801749c <_vfiprintf_r+0x4c>
 8017678:	9809      	ldr	r0, [sp, #36]	; 0x24
 801767a:	e711      	b.n	80174a0 <_vfiprintf_r+0x50>
 801767c:	ab03      	add	r3, sp, #12
 801767e:	9300      	str	r3, [sp, #0]
 8017680:	462a      	mov	r2, r5
 8017682:	4b09      	ldr	r3, [pc, #36]	; (80176a8 <_vfiprintf_r+0x258>)
 8017684:	a904      	add	r1, sp, #16
 8017686:	4630      	mov	r0, r6
 8017688:	f7fc fbac 	bl	8013de4 <_printf_i>
 801768c:	e7e4      	b.n	8017658 <_vfiprintf_r+0x208>
 801768e:	bf00      	nop
 8017690:	08019528 	.word	0x08019528
 8017694:	08019548 	.word	0x08019548
 8017698:	08019508 	.word	0x08019508
 801769c:	08019854 	.word	0x08019854
 80176a0:	0801985e 	.word	0x0801985e
 80176a4:	0801389d 	.word	0x0801389d
 80176a8:	0801742d 	.word	0x0801742d
 80176ac:	0801985a 	.word	0x0801985a

080176b0 <__swbuf_r>:
 80176b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176b2:	460e      	mov	r6, r1
 80176b4:	4614      	mov	r4, r2
 80176b6:	4605      	mov	r5, r0
 80176b8:	b118      	cbz	r0, 80176c2 <__swbuf_r+0x12>
 80176ba:	6983      	ldr	r3, [r0, #24]
 80176bc:	b90b      	cbnz	r3, 80176c2 <__swbuf_r+0x12>
 80176be:	f7fb fdbf 	bl	8013240 <__sinit>
 80176c2:	4b21      	ldr	r3, [pc, #132]	; (8017748 <__swbuf_r+0x98>)
 80176c4:	429c      	cmp	r4, r3
 80176c6:	d12b      	bne.n	8017720 <__swbuf_r+0x70>
 80176c8:	686c      	ldr	r4, [r5, #4]
 80176ca:	69a3      	ldr	r3, [r4, #24]
 80176cc:	60a3      	str	r3, [r4, #8]
 80176ce:	89a3      	ldrh	r3, [r4, #12]
 80176d0:	071a      	lsls	r2, r3, #28
 80176d2:	d52f      	bpl.n	8017734 <__swbuf_r+0x84>
 80176d4:	6923      	ldr	r3, [r4, #16]
 80176d6:	b36b      	cbz	r3, 8017734 <__swbuf_r+0x84>
 80176d8:	6923      	ldr	r3, [r4, #16]
 80176da:	6820      	ldr	r0, [r4, #0]
 80176dc:	1ac0      	subs	r0, r0, r3
 80176de:	6963      	ldr	r3, [r4, #20]
 80176e0:	b2f6      	uxtb	r6, r6
 80176e2:	4283      	cmp	r3, r0
 80176e4:	4637      	mov	r7, r6
 80176e6:	dc04      	bgt.n	80176f2 <__swbuf_r+0x42>
 80176e8:	4621      	mov	r1, r4
 80176ea:	4628      	mov	r0, r5
 80176ec:	f7fe fbe8 	bl	8015ec0 <_fflush_r>
 80176f0:	bb30      	cbnz	r0, 8017740 <__swbuf_r+0x90>
 80176f2:	68a3      	ldr	r3, [r4, #8]
 80176f4:	3b01      	subs	r3, #1
 80176f6:	60a3      	str	r3, [r4, #8]
 80176f8:	6823      	ldr	r3, [r4, #0]
 80176fa:	1c5a      	adds	r2, r3, #1
 80176fc:	6022      	str	r2, [r4, #0]
 80176fe:	701e      	strb	r6, [r3, #0]
 8017700:	6963      	ldr	r3, [r4, #20]
 8017702:	3001      	adds	r0, #1
 8017704:	4283      	cmp	r3, r0
 8017706:	d004      	beq.n	8017712 <__swbuf_r+0x62>
 8017708:	89a3      	ldrh	r3, [r4, #12]
 801770a:	07db      	lsls	r3, r3, #31
 801770c:	d506      	bpl.n	801771c <__swbuf_r+0x6c>
 801770e:	2e0a      	cmp	r6, #10
 8017710:	d104      	bne.n	801771c <__swbuf_r+0x6c>
 8017712:	4621      	mov	r1, r4
 8017714:	4628      	mov	r0, r5
 8017716:	f7fe fbd3 	bl	8015ec0 <_fflush_r>
 801771a:	b988      	cbnz	r0, 8017740 <__swbuf_r+0x90>
 801771c:	4638      	mov	r0, r7
 801771e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017720:	4b0a      	ldr	r3, [pc, #40]	; (801774c <__swbuf_r+0x9c>)
 8017722:	429c      	cmp	r4, r3
 8017724:	d101      	bne.n	801772a <__swbuf_r+0x7a>
 8017726:	68ac      	ldr	r4, [r5, #8]
 8017728:	e7cf      	b.n	80176ca <__swbuf_r+0x1a>
 801772a:	4b09      	ldr	r3, [pc, #36]	; (8017750 <__swbuf_r+0xa0>)
 801772c:	429c      	cmp	r4, r3
 801772e:	bf08      	it	eq
 8017730:	68ec      	ldreq	r4, [r5, #12]
 8017732:	e7ca      	b.n	80176ca <__swbuf_r+0x1a>
 8017734:	4621      	mov	r1, r4
 8017736:	4628      	mov	r0, r5
 8017738:	f000 f80c 	bl	8017754 <__swsetup_r>
 801773c:	2800      	cmp	r0, #0
 801773e:	d0cb      	beq.n	80176d8 <__swbuf_r+0x28>
 8017740:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017744:	e7ea      	b.n	801771c <__swbuf_r+0x6c>
 8017746:	bf00      	nop
 8017748:	08019528 	.word	0x08019528
 801774c:	08019548 	.word	0x08019548
 8017750:	08019508 	.word	0x08019508

08017754 <__swsetup_r>:
 8017754:	4b32      	ldr	r3, [pc, #200]	; (8017820 <__swsetup_r+0xcc>)
 8017756:	b570      	push	{r4, r5, r6, lr}
 8017758:	681d      	ldr	r5, [r3, #0]
 801775a:	4606      	mov	r6, r0
 801775c:	460c      	mov	r4, r1
 801775e:	b125      	cbz	r5, 801776a <__swsetup_r+0x16>
 8017760:	69ab      	ldr	r3, [r5, #24]
 8017762:	b913      	cbnz	r3, 801776a <__swsetup_r+0x16>
 8017764:	4628      	mov	r0, r5
 8017766:	f7fb fd6b 	bl	8013240 <__sinit>
 801776a:	4b2e      	ldr	r3, [pc, #184]	; (8017824 <__swsetup_r+0xd0>)
 801776c:	429c      	cmp	r4, r3
 801776e:	d10f      	bne.n	8017790 <__swsetup_r+0x3c>
 8017770:	686c      	ldr	r4, [r5, #4]
 8017772:	89a3      	ldrh	r3, [r4, #12]
 8017774:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017778:	0719      	lsls	r1, r3, #28
 801777a:	d42c      	bmi.n	80177d6 <__swsetup_r+0x82>
 801777c:	06dd      	lsls	r5, r3, #27
 801777e:	d411      	bmi.n	80177a4 <__swsetup_r+0x50>
 8017780:	2309      	movs	r3, #9
 8017782:	6033      	str	r3, [r6, #0]
 8017784:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017788:	81a3      	strh	r3, [r4, #12]
 801778a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801778e:	e03e      	b.n	801780e <__swsetup_r+0xba>
 8017790:	4b25      	ldr	r3, [pc, #148]	; (8017828 <__swsetup_r+0xd4>)
 8017792:	429c      	cmp	r4, r3
 8017794:	d101      	bne.n	801779a <__swsetup_r+0x46>
 8017796:	68ac      	ldr	r4, [r5, #8]
 8017798:	e7eb      	b.n	8017772 <__swsetup_r+0x1e>
 801779a:	4b24      	ldr	r3, [pc, #144]	; (801782c <__swsetup_r+0xd8>)
 801779c:	429c      	cmp	r4, r3
 801779e:	bf08      	it	eq
 80177a0:	68ec      	ldreq	r4, [r5, #12]
 80177a2:	e7e6      	b.n	8017772 <__swsetup_r+0x1e>
 80177a4:	0758      	lsls	r0, r3, #29
 80177a6:	d512      	bpl.n	80177ce <__swsetup_r+0x7a>
 80177a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80177aa:	b141      	cbz	r1, 80177be <__swsetup_r+0x6a>
 80177ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80177b0:	4299      	cmp	r1, r3
 80177b2:	d002      	beq.n	80177ba <__swsetup_r+0x66>
 80177b4:	4630      	mov	r0, r6
 80177b6:	f7fb fef1 	bl	801359c <_free_r>
 80177ba:	2300      	movs	r3, #0
 80177bc:	6363      	str	r3, [r4, #52]	; 0x34
 80177be:	89a3      	ldrh	r3, [r4, #12]
 80177c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80177c4:	81a3      	strh	r3, [r4, #12]
 80177c6:	2300      	movs	r3, #0
 80177c8:	6063      	str	r3, [r4, #4]
 80177ca:	6923      	ldr	r3, [r4, #16]
 80177cc:	6023      	str	r3, [r4, #0]
 80177ce:	89a3      	ldrh	r3, [r4, #12]
 80177d0:	f043 0308 	orr.w	r3, r3, #8
 80177d4:	81a3      	strh	r3, [r4, #12]
 80177d6:	6923      	ldr	r3, [r4, #16]
 80177d8:	b94b      	cbnz	r3, 80177ee <__swsetup_r+0x9a>
 80177da:	89a3      	ldrh	r3, [r4, #12]
 80177dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80177e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80177e4:	d003      	beq.n	80177ee <__swsetup_r+0x9a>
 80177e6:	4621      	mov	r1, r4
 80177e8:	4630      	mov	r0, r6
 80177ea:	f000 f84d 	bl	8017888 <__smakebuf_r>
 80177ee:	89a0      	ldrh	r0, [r4, #12]
 80177f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80177f4:	f010 0301 	ands.w	r3, r0, #1
 80177f8:	d00a      	beq.n	8017810 <__swsetup_r+0xbc>
 80177fa:	2300      	movs	r3, #0
 80177fc:	60a3      	str	r3, [r4, #8]
 80177fe:	6963      	ldr	r3, [r4, #20]
 8017800:	425b      	negs	r3, r3
 8017802:	61a3      	str	r3, [r4, #24]
 8017804:	6923      	ldr	r3, [r4, #16]
 8017806:	b943      	cbnz	r3, 801781a <__swsetup_r+0xc6>
 8017808:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801780c:	d1ba      	bne.n	8017784 <__swsetup_r+0x30>
 801780e:	bd70      	pop	{r4, r5, r6, pc}
 8017810:	0781      	lsls	r1, r0, #30
 8017812:	bf58      	it	pl
 8017814:	6963      	ldrpl	r3, [r4, #20]
 8017816:	60a3      	str	r3, [r4, #8]
 8017818:	e7f4      	b.n	8017804 <__swsetup_r+0xb0>
 801781a:	2000      	movs	r0, #0
 801781c:	e7f7      	b.n	801780e <__swsetup_r+0xba>
 801781e:	bf00      	nop
 8017820:	20000188 	.word	0x20000188
 8017824:	08019528 	.word	0x08019528
 8017828:	08019548 	.word	0x08019548
 801782c:	08019508 	.word	0x08019508

08017830 <abort>:
 8017830:	b508      	push	{r3, lr}
 8017832:	2006      	movs	r0, #6
 8017834:	f000 f898 	bl	8017968 <raise>
 8017838:	2001      	movs	r0, #1
 801783a:	f7ef fa6f 	bl	8006d1c <_exit>

0801783e <__swhatbuf_r>:
 801783e:	b570      	push	{r4, r5, r6, lr}
 8017840:	460e      	mov	r6, r1
 8017842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017846:	2900      	cmp	r1, #0
 8017848:	b096      	sub	sp, #88	; 0x58
 801784a:	4614      	mov	r4, r2
 801784c:	461d      	mov	r5, r3
 801784e:	da08      	bge.n	8017862 <__swhatbuf_r+0x24>
 8017850:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017854:	2200      	movs	r2, #0
 8017856:	602a      	str	r2, [r5, #0]
 8017858:	061a      	lsls	r2, r3, #24
 801785a:	d410      	bmi.n	801787e <__swhatbuf_r+0x40>
 801785c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017860:	e00e      	b.n	8017880 <__swhatbuf_r+0x42>
 8017862:	466a      	mov	r2, sp
 8017864:	f000 f89c 	bl	80179a0 <_fstat_r>
 8017868:	2800      	cmp	r0, #0
 801786a:	dbf1      	blt.n	8017850 <__swhatbuf_r+0x12>
 801786c:	9a01      	ldr	r2, [sp, #4]
 801786e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017872:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017876:	425a      	negs	r2, r3
 8017878:	415a      	adcs	r2, r3
 801787a:	602a      	str	r2, [r5, #0]
 801787c:	e7ee      	b.n	801785c <__swhatbuf_r+0x1e>
 801787e:	2340      	movs	r3, #64	; 0x40
 8017880:	2000      	movs	r0, #0
 8017882:	6023      	str	r3, [r4, #0]
 8017884:	b016      	add	sp, #88	; 0x58
 8017886:	bd70      	pop	{r4, r5, r6, pc}

08017888 <__smakebuf_r>:
 8017888:	898b      	ldrh	r3, [r1, #12]
 801788a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801788c:	079d      	lsls	r5, r3, #30
 801788e:	4606      	mov	r6, r0
 8017890:	460c      	mov	r4, r1
 8017892:	d507      	bpl.n	80178a4 <__smakebuf_r+0x1c>
 8017894:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017898:	6023      	str	r3, [r4, #0]
 801789a:	6123      	str	r3, [r4, #16]
 801789c:	2301      	movs	r3, #1
 801789e:	6163      	str	r3, [r4, #20]
 80178a0:	b002      	add	sp, #8
 80178a2:	bd70      	pop	{r4, r5, r6, pc}
 80178a4:	ab01      	add	r3, sp, #4
 80178a6:	466a      	mov	r2, sp
 80178a8:	f7ff ffc9 	bl	801783e <__swhatbuf_r>
 80178ac:	9900      	ldr	r1, [sp, #0]
 80178ae:	4605      	mov	r5, r0
 80178b0:	4630      	mov	r0, r6
 80178b2:	f7fb fedf 	bl	8013674 <_malloc_r>
 80178b6:	b948      	cbnz	r0, 80178cc <__smakebuf_r+0x44>
 80178b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178bc:	059a      	lsls	r2, r3, #22
 80178be:	d4ef      	bmi.n	80178a0 <__smakebuf_r+0x18>
 80178c0:	f023 0303 	bic.w	r3, r3, #3
 80178c4:	f043 0302 	orr.w	r3, r3, #2
 80178c8:	81a3      	strh	r3, [r4, #12]
 80178ca:	e7e3      	b.n	8017894 <__smakebuf_r+0xc>
 80178cc:	4b0d      	ldr	r3, [pc, #52]	; (8017904 <__smakebuf_r+0x7c>)
 80178ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80178d0:	89a3      	ldrh	r3, [r4, #12]
 80178d2:	6020      	str	r0, [r4, #0]
 80178d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80178d8:	81a3      	strh	r3, [r4, #12]
 80178da:	9b00      	ldr	r3, [sp, #0]
 80178dc:	6163      	str	r3, [r4, #20]
 80178de:	9b01      	ldr	r3, [sp, #4]
 80178e0:	6120      	str	r0, [r4, #16]
 80178e2:	b15b      	cbz	r3, 80178fc <__smakebuf_r+0x74>
 80178e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80178e8:	4630      	mov	r0, r6
 80178ea:	f000 f86b 	bl	80179c4 <_isatty_r>
 80178ee:	b128      	cbz	r0, 80178fc <__smakebuf_r+0x74>
 80178f0:	89a3      	ldrh	r3, [r4, #12]
 80178f2:	f023 0303 	bic.w	r3, r3, #3
 80178f6:	f043 0301 	orr.w	r3, r3, #1
 80178fa:	81a3      	strh	r3, [r4, #12]
 80178fc:	89a0      	ldrh	r0, [r4, #12]
 80178fe:	4305      	orrs	r5, r0
 8017900:	81a5      	strh	r5, [r4, #12]
 8017902:	e7cd      	b.n	80178a0 <__smakebuf_r+0x18>
 8017904:	080131d9 	.word	0x080131d9

08017908 <_malloc_usable_size_r>:
 8017908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801790c:	1f18      	subs	r0, r3, #4
 801790e:	2b00      	cmp	r3, #0
 8017910:	bfbc      	itt	lt
 8017912:	580b      	ldrlt	r3, [r1, r0]
 8017914:	18c0      	addlt	r0, r0, r3
 8017916:	4770      	bx	lr

08017918 <_raise_r>:
 8017918:	291f      	cmp	r1, #31
 801791a:	b538      	push	{r3, r4, r5, lr}
 801791c:	4604      	mov	r4, r0
 801791e:	460d      	mov	r5, r1
 8017920:	d904      	bls.n	801792c <_raise_r+0x14>
 8017922:	2316      	movs	r3, #22
 8017924:	6003      	str	r3, [r0, #0]
 8017926:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801792a:	bd38      	pop	{r3, r4, r5, pc}
 801792c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801792e:	b112      	cbz	r2, 8017936 <_raise_r+0x1e>
 8017930:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017934:	b94b      	cbnz	r3, 801794a <_raise_r+0x32>
 8017936:	4620      	mov	r0, r4
 8017938:	f000 f830 	bl	801799c <_getpid_r>
 801793c:	462a      	mov	r2, r5
 801793e:	4601      	mov	r1, r0
 8017940:	4620      	mov	r0, r4
 8017942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017946:	f000 b817 	b.w	8017978 <_kill_r>
 801794a:	2b01      	cmp	r3, #1
 801794c:	d00a      	beq.n	8017964 <_raise_r+0x4c>
 801794e:	1c59      	adds	r1, r3, #1
 8017950:	d103      	bne.n	801795a <_raise_r+0x42>
 8017952:	2316      	movs	r3, #22
 8017954:	6003      	str	r3, [r0, #0]
 8017956:	2001      	movs	r0, #1
 8017958:	e7e7      	b.n	801792a <_raise_r+0x12>
 801795a:	2400      	movs	r4, #0
 801795c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017960:	4628      	mov	r0, r5
 8017962:	4798      	blx	r3
 8017964:	2000      	movs	r0, #0
 8017966:	e7e0      	b.n	801792a <_raise_r+0x12>

08017968 <raise>:
 8017968:	4b02      	ldr	r3, [pc, #8]	; (8017974 <raise+0xc>)
 801796a:	4601      	mov	r1, r0
 801796c:	6818      	ldr	r0, [r3, #0]
 801796e:	f7ff bfd3 	b.w	8017918 <_raise_r>
 8017972:	bf00      	nop
 8017974:	20000188 	.word	0x20000188

08017978 <_kill_r>:
 8017978:	b538      	push	{r3, r4, r5, lr}
 801797a:	4d07      	ldr	r5, [pc, #28]	; (8017998 <_kill_r+0x20>)
 801797c:	2300      	movs	r3, #0
 801797e:	4604      	mov	r4, r0
 8017980:	4608      	mov	r0, r1
 8017982:	4611      	mov	r1, r2
 8017984:	602b      	str	r3, [r5, #0]
 8017986:	f7ef f9b9 	bl	8006cfc <_kill>
 801798a:	1c43      	adds	r3, r0, #1
 801798c:	d102      	bne.n	8017994 <_kill_r+0x1c>
 801798e:	682b      	ldr	r3, [r5, #0]
 8017990:	b103      	cbz	r3, 8017994 <_kill_r+0x1c>
 8017992:	6023      	str	r3, [r4, #0]
 8017994:	bd38      	pop	{r3, r4, r5, pc}
 8017996:	bf00      	nop
 8017998:	200085e4 	.word	0x200085e4

0801799c <_getpid_r>:
 801799c:	f7ef b9a6 	b.w	8006cec <_getpid>

080179a0 <_fstat_r>:
 80179a0:	b538      	push	{r3, r4, r5, lr}
 80179a2:	4d07      	ldr	r5, [pc, #28]	; (80179c0 <_fstat_r+0x20>)
 80179a4:	2300      	movs	r3, #0
 80179a6:	4604      	mov	r4, r0
 80179a8:	4608      	mov	r0, r1
 80179aa:	4611      	mov	r1, r2
 80179ac:	602b      	str	r3, [r5, #0]
 80179ae:	f7ef fa04 	bl	8006dba <_fstat>
 80179b2:	1c43      	adds	r3, r0, #1
 80179b4:	d102      	bne.n	80179bc <_fstat_r+0x1c>
 80179b6:	682b      	ldr	r3, [r5, #0]
 80179b8:	b103      	cbz	r3, 80179bc <_fstat_r+0x1c>
 80179ba:	6023      	str	r3, [r4, #0]
 80179bc:	bd38      	pop	{r3, r4, r5, pc}
 80179be:	bf00      	nop
 80179c0:	200085e4 	.word	0x200085e4

080179c4 <_isatty_r>:
 80179c4:	b538      	push	{r3, r4, r5, lr}
 80179c6:	4d06      	ldr	r5, [pc, #24]	; (80179e0 <_isatty_r+0x1c>)
 80179c8:	2300      	movs	r3, #0
 80179ca:	4604      	mov	r4, r0
 80179cc:	4608      	mov	r0, r1
 80179ce:	602b      	str	r3, [r5, #0]
 80179d0:	f7ef fa03 	bl	8006dda <_isatty>
 80179d4:	1c43      	adds	r3, r0, #1
 80179d6:	d102      	bne.n	80179de <_isatty_r+0x1a>
 80179d8:	682b      	ldr	r3, [r5, #0]
 80179da:	b103      	cbz	r3, 80179de <_isatty_r+0x1a>
 80179dc:	6023      	str	r3, [r4, #0]
 80179de:	bd38      	pop	{r3, r4, r5, pc}
 80179e0:	200085e4 	.word	0x200085e4

080179e4 <_init>:
 80179e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179e6:	bf00      	nop
 80179e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80179ea:	bc08      	pop	{r3}
 80179ec:	469e      	mov	lr, r3
 80179ee:	4770      	bx	lr

080179f0 <_fini>:
 80179f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179f2:	bf00      	nop
 80179f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80179f6:	bc08      	pop	{r3}
 80179f8:	469e      	mov	lr, r3
 80179fa:	4770      	bx	lr
