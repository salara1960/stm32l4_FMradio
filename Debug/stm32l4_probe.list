
stm32l4_probe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001788c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ebc  08017a20  08017a20  00027a20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080198dc  080198dc  00030360  2**0
                  CONTENTS
  4 .ARM          00000008  080198dc  080198dc  000298dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080198e4  080198e4  00030360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080198e4  080198e4  000298e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080198e8  080198e8  000298e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  080198ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008288  20000360  08019c4c  00030360  2**3
                  ALLOC
 10 ._user_heap_stack 00001000  200085e8  08019c4c  000385e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cfe9  00000000  00000000  00030390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000553f  00000000  00000000  0005d379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023c8  00000000  00000000  000628b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002238  00000000  00000000  00064c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d54d  00000000  00000000  00066eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029c91  00000000  00000000  00094405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d6c2  00000000  00000000  000be096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cb758  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae68  00000000  00000000  001cb7a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000360 	.word	0x20000360
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017a04 	.word	0x08017a04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000364 	.word	0x20000364
 80001cc:	08017a04 	.word	0x08017a04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9f5 	b.w	8001094 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b9aa 	b.w	8001094 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <decodeIRED>:
volatile irparams_t irparams;
decode_results results;

//-----------------------------------------------------------------------------
int16_t decodeIRED(decode_results *results)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	if (irparams.rcvstate != STATE_STOP) return 0;
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <decodeIRED+0x64>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b05      	cmp	r3, #5
 80010a8:	d001      	beq.n	80010ae <decodeIRED+0x16>
 80010aa:	2300      	movs	r3, #0
 80010ac:	e021      	b.n	80010f2 <decodeIRED+0x5a>

	results->rawbuf = irparams.rawbuf;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a13      	ldr	r2, [pc, #76]	; (8001100 <decodeIRED+0x68>)
 80010b2:	609a      	str	r2, [r3, #8]
	results->rawlen = irparams.rawlen;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <decodeIRED+0x64>)
 80010b6:	785b      	ldrb	r3, [r3, #1]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	819a      	strh	r2, [r3, #12]
	results->overflow = irparams.overflow;
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <decodeIRED+0x64>)
 80010c2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	81da      	strh	r2, [r3, #14]

	if(irparams.rcvstate != STATE_STOP) return false;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <decodeIRED+0x64>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b05      	cmp	r3, #5
 80010d6:	d001      	beq.n	80010dc <decodeIRED+0x44>
 80010d8:	2300      	movs	r3, #0
 80010da:	e00a      	b.n	80010f2 <decodeIRED+0x5a>

	if (decodeHashIRED(results)) return 1;
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 f883 	bl	80011e8 <decodeHashIRED>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <decodeIRED+0x54>
 80010e8:	2301      	movs	r3, #1
 80010ea:	e002      	b.n	80010f2 <decodeIRED+0x5a>

	enIntIRED();
 80010ec:	f000 f80a 	bl	8001104 <enIntIRED>

	return 0;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2000037c 	.word	0x2000037c
 8001100:	20000380 	.word	0x20000380

08001104 <enIntIRED>:
//-----------------------------------------------------------------------------
void enIntIRED()
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <enIntIRED+0x28>)
 800110a:	2202      	movs	r2, #2
 800110c:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <enIntIRED+0x28>)
 8001110:	2200      	movs	r2, #0
 8001112:	705a      	strb	r2, [r3, #1]

	__HAL_TIM_SET_COUNTER(portIRED, 0x0000);
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <enIntIRED+0x2c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Start_IT(portIRED);
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <enIntIRED+0x2c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f00c fa1e 	bl	800d564 <HAL_TIM_Base_Start_IT>
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2000037c 	.word	0x2000037c
 8001130:	20000134 	.word	0x20000134

08001134 <resumeIRED>:
//-----------------------------------------------------------------------------
void resumeIRED() // Restart the ISR state machine
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <resumeIRED+0x1c>)
 800113a:	2202      	movs	r2, #2
 800113c:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <resumeIRED+0x1c>)
 8001140:	2200      	movs	r2, #0
 8001142:	705a      	strb	r2, [r3, #1]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	2000037c 	.word	0x2000037c
 8001154:	00000000 	.word	0x00000000

08001158 <compareIRED>:
//-----------------------------------------------------------------------------
int16_t compareIRED(uint16_t oldval, uint16_t newval)
{
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	460a      	mov	r2, r1
 8001162:	80fb      	strh	r3, [r7, #6]
 8001164:	4613      	mov	r3, r2
 8001166:	80bb      	strh	r3, [r7, #4]
	     if (newval < oldval * .8) return 0;
 8001168:	88bb      	ldrh	r3, [r7, #4]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f9da 	bl	8000524 <__aeabi_i2d>
 8001170:	4604      	mov	r4, r0
 8001172:	460d      	mov	r5, r1
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f9d4 	bl	8000524 <__aeabi_i2d>
 800117c:	a318      	add	r3, pc, #96	; (adr r3, 80011e0 <compareIRED+0x88>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	f7ff fa39 	bl	80005f8 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4620      	mov	r0, r4
 800118c:	4629      	mov	r1, r5
 800118e:	f7ff fca5 	bl	8000adc <__aeabi_dcmplt>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <compareIRED+0x44>
 8001198:	2300      	movs	r3, #0
 800119a:	e01a      	b.n	80011d2 <compareIRED+0x7a>
	else if (oldval < newval * .8) return 2;
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9c0 	bl	8000524 <__aeabi_i2d>
 80011a4:	4604      	mov	r4, r0
 80011a6:	460d      	mov	r5, r1
 80011a8:	88bb      	ldrh	r3, [r7, #4]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f9ba 	bl	8000524 <__aeabi_i2d>
 80011b0:	a30b      	add	r3, pc, #44	; (adr r3, 80011e0 <compareIRED+0x88>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	f7ff fa1f 	bl	80005f8 <__aeabi_dmul>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4620      	mov	r0, r4
 80011c0:	4629      	mov	r1, r5
 80011c2:	f7ff fc8b 	bl	8000adc <__aeabi_dcmplt>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <compareIRED+0x78>
 80011cc:	2302      	movs	r3, #2
 80011ce:	e000      	b.n	80011d2 <compareIRED+0x7a>
	else return 1;
 80011d0:	2301      	movs	r3, #1
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bdb0      	pop	{r4, r5, r7, pc}
 80011da:	bf00      	nop
 80011dc:	f3af 8000 	nop.w
 80011e0:	9999999a 	.word	0x9999999a
 80011e4:	3fe99999 	.word	0x3fe99999

080011e8 <decodeHashIRED>:
//-----------------------------------------------------------------------------
int32_t decodeHashIRED(decode_results *results)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	int32_t hash = FNV_BASIS_32;
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <decodeHashIRED+0x90>)
 80011f2:	60fb      	str	r3, [r7, #12]

	if (results->rawlen < 6) return 0;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80011fa:	2b05      	cmp	r3, #5
 80011fc:	dc01      	bgt.n	8001202 <decodeHashIRED+0x1a>
 80011fe:	2300      	movs	r3, #0
 8001200:	e035      	b.n	800126e <decodeHashIRED+0x86>

	for (int16_t i = 1; (i + 2) < results->rawlen; i++) {
 8001202:	2301      	movs	r3, #1
 8001204:	817b      	strh	r3, [r7, #10]
 8001206:	e023      	b.n	8001250 <decodeHashIRED+0x68>
		int16_t value = compareIRED(results->rawbuf[i], results->rawbuf[i + 2]);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	b298      	uxth	r0, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001220:	3302      	adds	r3, #2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4413      	add	r3, r2
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	b29b      	uxth	r3, r3
 800122a:	4619      	mov	r1, r3
 800122c:	f7ff ff94 	bl	8001158 <compareIRED>
 8001230:	4603      	mov	r3, r0
 8001232:	813b      	strh	r3, [r7, #8]
		hash = (hash * FNV_PRIME_32) ^ value;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4a11      	ldr	r2, [pc, #68]	; (800127c <decodeHashIRED+0x94>)
 8001238:	fb03 f202 	mul.w	r2, r3, r2
 800123c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001240:	4053      	eors	r3, r2
 8001242:	60fb      	str	r3, [r7, #12]
	for (int16_t i = 1; (i + 2) < results->rawlen; i++) {
 8001244:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001248:	b29b      	uxth	r3, r3
 800124a:	3301      	adds	r3, #1
 800124c:	b29b      	uxth	r3, r3
 800124e:	817b      	strh	r3, [r7, #10]
 8001250:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001254:	3302      	adds	r3, #2
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800125c:	4293      	cmp	r3, r2
 800125e:	dbd3      	blt.n	8001208 <decodeHashIRED+0x20>
	}

	results->value = hash;
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	601a      	str	r2, [r3, #0]
	results->bits = 32;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2220      	movs	r2, #32
 800126a:	809a      	strh	r2, [r3, #4]

	return 1;
 800126c:	2301      	movs	r3, #1
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	811c9dc5 	.word	0x811c9dc5
 800127c:	01000193 	.word	0x01000193

08001280 <ST7565_Select>:
uint8_t lcdRdy = 1;

//------------------------------------------------------------------------------

inline static void ST7565_Select()
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
 8001284:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001288:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800128c:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
	#endif
	//-----------------------------------------------------
#endif
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <ST7565_Unselect>:

//------------------------------------------------------------------------------

inline static void ST7565_Unselect()
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
		CS_GPIO_Port->BSRR = CS_Pin;
 800129c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012a0:	2210      	movs	r2, #16
 80012a2:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = CS_Pin;
	#endif
	//-----------------------------------------------------
#endif
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <ST7565_Reset>:
	* @brief	 ( описание ):  аппарвтный сброс дисплея
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Reset()
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	RES_GPIO_Port->BSRR = (RES_Pin << 16);//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET );
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <ST7565_Reset+0x24>)
 80012b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012ba:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80012bc:	2001      	movs	r0, #1
 80012be:	f006 fbd7 	bl	8007a70 <HAL_Delay>
	
	RES_GPIO_Port->BSRR = RES_Pin;//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET );
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <ST7565_Reset+0x24>)
 80012c4:	2204      	movs	r2, #4
 80012c6:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f006 fbd1 	bl	8007a70 <HAL_Delay>
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	48000c00 	.word	0x48000c00

080012d8 <ST7565_w_dats>:
//--------------------------------------------------------------------------------
#ifdef SET_NEW_PROC
inline static void ST7565_w_dats(uint8_t *Data, uint16_t len)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = DC_Pin;//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80012e4:	4b1d      	ldr	r3, [pc, #116]	; (800135c <ST7565_w_dats+0x84>)
 80012e6:	2220      	movs	r2, #32
 80012e8:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <ST7565_w_dats+0x88>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d018      	beq.n	8001324 <ST7565_w_dats+0x4c>
		lcdRdy = 0;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <ST7565_w_dats+0x8c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Data, len) != HAL_OK) devError |= devLCD;
 80012f8:	887b      	ldrh	r3, [r7, #2]
 80012fa:	461a      	mov	r2, r3
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	481a      	ldr	r0, [pc, #104]	; (8001368 <ST7565_w_dats+0x90>)
 8001300:	f00b fa22 	bl	800c748 <HAL_SPI_Transmit_DMA>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d006      	beq.n	8001318 <ST7565_w_dats+0x40>
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <ST7565_w_dats+0x94>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001312:	b29a      	uxth	r2, r3
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <ST7565_w_dats+0x94>)
 8001316:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 8001318:	bf00      	nop
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <ST7565_w_dats+0x8c>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0fb      	beq.n	800131a <ST7565_w_dats+0x42>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 8001322:	e017      	b.n	8001354 <ST7565_w_dats+0x7c>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 8001324:	887a      	ldrh	r2, [r7, #2]
 8001326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	480e      	ldr	r0, [pc, #56]	; (8001368 <ST7565_w_dats+0x90>)
 800132e:	f00a fd5a 	bl	800bde6 <HAL_SPI_Transmit>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <ST7565_w_dats+0x6e>
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <ST7565_w_dats+0x94>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <ST7565_w_dats+0x94>)
 8001344:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 8001346:	bf00      	nop
 8001348:	4807      	ldr	r0, [pc, #28]	; (8001368 <ST7565_w_dats+0x90>)
 800134a:	f00b fd9b 	bl	800ce84 <HAL_SPI_GetState>
 800134e:	4603      	mov	r3, r0
 8001350:	2b01      	cmp	r3, #1
 8001352:	d1f9      	bne.n	8001348 <ST7565_w_dats+0x70>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	48000400 	.word	0x48000400
 8001360:	20000994 	.word	0x20000994
 8001364:	20000000 	.word	0x20000000
 8001368:	20000aa0 	.word	0x20000aa0
 800136c:	20001b08 	.word	0x20001b08

08001370 <ST7565_w_cmds>:
//
inline static void ST7565_w_cmds(uint8_t *Command, uint16_t len)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = (DC_Pin << 16);//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800137c:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <ST7565_w_cmds+0x88>)
 800137e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001382:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <ST7565_w_cmds+0x8c>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d018      	beq.n	80013be <ST7565_w_cmds+0x4e>
		lcdRdy = 0;
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <ST7565_w_cmds+0x90>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Command, len) != HAL_OK) devError |= devLCD;
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	461a      	mov	r2, r3
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	481a      	ldr	r0, [pc, #104]	; (8001404 <ST7565_w_cmds+0x94>)
 800139a:	f00b f9d5 	bl	800c748 <HAL_SPI_Transmit_DMA>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d006      	beq.n	80013b2 <ST7565_w_cmds+0x42>
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <ST7565_w_cmds+0x98>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <ST7565_w_cmds+0x98>)
 80013b0:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 80013b2:	bf00      	nop
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <ST7565_w_cmds+0x90>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0fb      	beq.n	80013b4 <ST7565_w_cmds+0x44>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 80013bc:	e017      	b.n	80013ee <ST7565_w_cmds+0x7e>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	480f      	ldr	r0, [pc, #60]	; (8001404 <ST7565_w_cmds+0x94>)
 80013c8:	f00a fd0d 	bl	800bde6 <HAL_SPI_Transmit>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <ST7565_w_cmds+0x70>
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <ST7565_w_cmds+0x98>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <ST7565_w_cmds+0x98>)
 80013de:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 80013e0:	bf00      	nop
 80013e2:	4808      	ldr	r0, [pc, #32]	; (8001404 <ST7565_w_cmds+0x94>)
 80013e4:	f00b fd4e 	bl	800ce84 <HAL_SPI_GetState>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d1f9      	bne.n	80013e2 <ST7565_w_cmds+0x72>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	48000400 	.word	0x48000400
 80013fc:	20000994 	.word	0x20000994
 8001400:	20000000 	.word	0x20000000
 8001404:	20000aa0 	.word	0x20000aa0
 8001408:	20001b08 	.word	0x20001b08

0800140c <ST7565_SetX>:
inline static void ST7565_SetX(uint8_t x)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
	uint8_t bytes[] = { ((x & 0xf0) >> 4) | 0x10, x & 0x0f };
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	091b      	lsrs	r3, r3, #4
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f043 0310 	orr.w	r3, r3, #16
 8001420:	b2db      	uxtb	r3, r3
 8001422:	733b      	strb	r3, [r7, #12]
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	b2db      	uxtb	r3, r3
 800142c:	737b      	strb	r3, [r7, #13]
	ST7565_w_cmds(bytes, 2);
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	2102      	movs	r1, #2
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff9b 	bl	8001370 <ST7565_w_cmds>
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <ST7565_SetY>:
//
inline static void ST7565_SetY(uint8_t y)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	71fb      	strb	r3, [r7, #7]
	uint8_t byte = (y & 0x07) | 0xB0;
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	b25b      	sxtb	r3, r3
 8001456:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800145a:	b25b      	sxtb	r3, r3
 800145c:	b2db      	uxtb	r3, r3
 800145e:	73fb      	strb	r3, [r7, #15]
	ST7565_w_cmds(&byte, 1);
 8001460:	f107 030f 	add.w	r3, r7, #15
 8001464:	2101      	movs	r1, #1
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff82 	bl	8001370 <ST7565_w_cmds>
}
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <ST7565_Display_fill>:
								( данные отправляются сразу на дисплей и записываются в буфер кадра )
								Функцию ST7565_Update() вызывать не нужно
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Display_fill(uint8_t fill)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
uint8_t page;//, column;
	
	memset(ST7565_buffer, fill, (SCREEN_WIDTH * SCREEN_HEIGHT / 8));	// отчистка памяти заполняем массив значением 0x00
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001484:	4619      	mov	r1, r3
 8001486:	4814      	ldr	r0, [pc, #80]	; (80014d8 <ST7565_Display_fill+0x64>)
 8001488:	f012 f87a 	bl	8013580 <memset>
	
	ST7565_Select();
 800148c:	f7ff fef8 	bl	8001280 <ST7565_Select>
#ifdef SET_NEW_PROC
	uint8_t dta[] = {0, 0x10, 0};
 8001490:	4a12      	ldr	r2, [pc, #72]	; (80014dc <ST7565_Display_fill+0x68>)
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	4611      	mov	r1, r2
 800149a:	8019      	strh	r1, [r3, #0]
 800149c:	3302      	adds	r3, #2
 800149e:	0c12      	lsrs	r2, r2, #16
 80014a0:	701a      	strb	r2, [r3, #0]
#endif
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80014a2:	23b7      	movs	r3, #183	; 0xb7
 80014a4:	73fb      	strb	r3, [r7, #15]
 80014a6:	e00e      	b.n	80014c6 <ST7565_Display_fill+0x52>
		ST7565_w_cmd(page);  //set page address
		ST7565_w_cmd(0x10);  //set Column address MSB   
		ST7565_w_cmd(0x00);  //set column address LSB
		for (column = 0; column < 131; column++) ST7565_w_dat(fill);
#else
		dta[0] = page;
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	733b      	strb	r3, [r7, #12]
		ST7565_w_cmds(dta, sizeof(dta));
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2103      	movs	r1, #3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff5c 	bl	8001370 <ST7565_w_cmds>
		ST7565_w_dats(ST7565_buffer, 131);
 80014b8:	2183      	movs	r1, #131	; 0x83
 80014ba:	4807      	ldr	r0, [pc, #28]	; (80014d8 <ST7565_Display_fill+0x64>)
 80014bc:	f7ff ff0c 	bl	80012d8 <ST7565_w_dats>
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	2baf      	cmp	r3, #175	; 0xaf
 80014ca:	d8ed      	bhi.n	80014a8 <ST7565_Display_fill+0x34>
#endif
    }
		
	ST7565_Unselect();
 80014cc:	f7ff fee4 	bl	8001298 <ST7565_Unselect>
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000594 	.word	0x20000594
 80014dc:	08017a20 	.word	0x08017a20

080014e0 <ST7565_Init>:
	* @brief	 ( описание ):  инициализация дисплея ( при другой инициализации можно поменять параметры внутри функции )
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Init()
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
	ST7565_Select();
 80014e6:	f7ff fecb 	bl	8001280 <ST7565_Select>
	ST7565_w_cmd(CMD_DISPLAY_ON);    		//Display on
	// Инвертирование экрана CMD_SET_DISP_NORMAL - OFF    CMD_SET_DISP_REVERSE - ON
	ST7565_w_cmd(CMD_SET_DISP_NORMAL);
	//HAL_Delay(1);//1
#else
	uint8_t dta[] = {
 80014ea:	4a09      	ldr	r2, [pc, #36]	; (8001510 <ST7565_Init+0x30>)
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80014f0:	c303      	stmia	r3!, {r0, r1}
 80014f2:	801a      	strh	r2, [r3, #0]
	};
	#if defined (SCREEN_ORIENTATION_180)
		dta[1] = CMD_SET_ADC_REVERSE;    	//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
		dta[2] = CMD_SET_COM_NORMAL;    		//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
	#endif
	ST7565_w_cmds(dta, sizeof(dta));
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	210a      	movs	r1, #10
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff39 	bl	8001370 <ST7565_w_cmds>
#endif
	
	ST7565_Display_fill(0);
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff ffb8 	bl	8001474 <ST7565_Display_fill>
	
	ST7565_Unselect();
 8001504:	f7ff fec8 	bl	8001298 <ST7565_Unselect>
   
}
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	08017a24 	.word	0x08017a24

08001514 <ST7565_CMD_DISPLAY>:
//--------------------------------------------------------------------------------
void ST7565_CMD_DISPLAY(uint8_t byte)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
#ifdef SET_NEW_PROC
	ST7565_w_cmds(&byte, 1);
 800151e:	1dfb      	adds	r3, r7, #7
 8001520:	2101      	movs	r1, #1
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff ff24 	bl	8001370 <ST7565_w_cmds>

	if (byte == CMD_DISPLAY_OFF) OFF_DISPLAY();
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	2bae      	cmp	r3, #174	; 0xae
 800152c:	d103      	bne.n	8001536 <ST7565_CMD_DISPLAY+0x22>
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <ST7565_CMD_DISPLAY+0x34>)
 8001530:	2201      	movs	r2, #1
 8001532:	619a      	str	r2, [r3, #24]
							else ON_DISPLAY();
#else
	ST7565_w_cmd(byte);
#endif
}
 8001534:	e003      	b.n	800153e <ST7565_CMD_DISPLAY+0x2a>
							else ON_DISPLAY();
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <ST7565_CMD_DISPLAY+0x34>)
 8001538:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800153c:	619a      	str	r2, [r3, #24]
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	48000800 	.word	0x48000800

0800154c <ST7565_Draw_pixel>:
	* @param	( параметры ):	координата X(0 - 127) и координата Y(0 - 63)  color 1 or 0
	* @return  ( возвращает ):	
*******************************************************************************/
// X(0 - 127)  Y(0 - 63)
void ST7565_Draw_pixel(int16_t x, int16_t y, uint8_t color)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	80fb      	strh	r3, [r7, #6]
 8001556:	460b      	mov	r3, r1
 8001558:	80bb      	strh	r3, [r7, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	70fb      	strb	r3, [r7, #3]
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 800155e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001562:	2b7f      	cmp	r3, #127	; 0x7f
 8001564:	dc4c      	bgt.n	8001600 <ST7565_Draw_pixel+0xb4>
 8001566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156a:	2b00      	cmp	r3, #0
 800156c:	db48      	blt.n	8001600 <ST7565_Draw_pixel+0xb4>
 800156e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001572:	2b3f      	cmp	r3, #63	; 0x3f
 8001574:	dc44      	bgt.n	8001600 <ST7565_Draw_pixel+0xb4>
 8001576:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	db40      	blt.n	8001600 <ST7565_Draw_pixel+0xb4>

    uint16_t array_pos = x + ((y >> 3) * SCREEN_WIDTH );
 800157e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001582:	10db      	asrs	r3, r3, #3
 8001584:	b21b      	sxth	r3, r3
 8001586:	b29b      	uxth	r3, r3
 8001588:	01db      	lsls	r3, r3, #7
 800158a:	b29a      	uxth	r2, r3
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	4413      	add	r3, r2
 8001590:	81fb      	strh	r3, [r7, #14]

    if (color) {
 8001592:	78fb      	ldrb	r3, [r7, #3]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d018      	beq.n	80015ca <ST7565_Draw_pixel+0x7e>
        ST7565_buffer[array_pos] |= 1 << (y % 8);
 8001598:	89fb      	ldrh	r3, [r7, #14]
 800159a:	4a1c      	ldr	r2, [pc, #112]	; (800160c <ST7565_Draw_pixel+0xc0>)
 800159c:	5cd3      	ldrb	r3, [r2, r3]
 800159e:	b25a      	sxtb	r2, r3
 80015a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015a4:	4259      	negs	r1, r3
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	f001 0107 	and.w	r1, r1, #7
 80015ae:	bf58      	it	pl
 80015b0:	424b      	negpl	r3, r1
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	4619      	mov	r1, r3
 80015b6:	2301      	movs	r3, #1
 80015b8:	408b      	lsls	r3, r1
 80015ba:	b25b      	sxtb	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	b25a      	sxtb	r2, r3
 80015c0:	89fb      	ldrh	r3, [r7, #14]
 80015c2:	b2d1      	uxtb	r1, r2
 80015c4:	4a11      	ldr	r2, [pc, #68]	; (800160c <ST7565_Draw_pixel+0xc0>)
 80015c6:	54d1      	strb	r1, [r2, r3]
 80015c8:	e01b      	b.n	8001602 <ST7565_Draw_pixel+0xb6>
    } else {
        ST7565_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 80015ca:	89fb      	ldrh	r3, [r7, #14]
 80015cc:	4a0f      	ldr	r2, [pc, #60]	; (800160c <ST7565_Draw_pixel+0xc0>)
 80015ce:	5cd3      	ldrb	r3, [r2, r3]
 80015d0:	b25a      	sxtb	r2, r3
 80015d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015d6:	4259      	negs	r1, r3
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	f001 0107 	and.w	r1, r1, #7
 80015e0:	bf58      	it	pl
 80015e2:	424b      	negpl	r3, r1
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	4619      	mov	r1, r3
 80015e8:	2301      	movs	r3, #1
 80015ea:	408b      	lsls	r3, r1
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	4013      	ands	r3, r2
 80015f4:	b25a      	sxtb	r2, r3
 80015f6:	89fb      	ldrh	r3, [r7, #14]
 80015f8:	b2d1      	uxtb	r1, r2
 80015fa:	4a04      	ldr	r2, [pc, #16]	; (800160c <ST7565_Draw_pixel+0xc0>)
 80015fc:	54d1      	strb	r1, [r2, r3]
 80015fe:	e000      	b.n	8001602 <ST7565_Draw_pixel+0xb6>
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 8001600:	bf00      	nop
    }
}
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	20000594 	.word	0x20000594

08001610 <ST7565_Update>:
	* @brief	 ( описание ):  вывод буффера кадра на дисплей
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Update()
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
uint8_t x, y;
		
	ST7565_Select();
 8001616:	f7ff fe33 	bl	8001280 <ST7565_Select>

  	for (y = 0; y < 8; y++) {
 800161a:	2300      	movs	r3, #0
 800161c:	71bb      	strb	r3, [r7, #6]
 800161e:	e01d      	b.n	800165c <ST7565_Update+0x4c>
		ST7565_SetX(0);	
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff fef3 	bl	800140c <ST7565_SetX>
		ST7565_SetY(y);
 8001626:	79bb      	ldrb	r3, [r7, #6]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff0a 	bl	8001442 <ST7565_SetY>
		for (x = 0; x < 128; x++) {
 800162e:	2300      	movs	r3, #0
 8001630:	71fb      	strb	r3, [r7, #7]
 8001632:	e00c      	b.n	800164e <ST7565_Update+0x3e>
			ST7565_w_dats(&ST7565_buffer[x + 128 * y], 1);
 8001634:	79fa      	ldrb	r2, [r7, #7]
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	01db      	lsls	r3, r3, #7
 800163a:	4413      	add	r3, r2
 800163c:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <ST7565_Update+0x64>)
 800163e:	4413      	add	r3, r2
 8001640:	2101      	movs	r1, #1
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fe48 	bl	80012d8 <ST7565_w_dats>
		for (x = 0; x < 128; x++) {
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	3301      	adds	r3, #1
 800164c:	71fb      	strb	r3, [r7, #7]
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	daee      	bge.n	8001634 <ST7565_Update+0x24>
  	for (y = 0; y < 8; y++) {
 8001656:	79bb      	ldrb	r3, [r7, #6]
 8001658:	3301      	adds	r3, #1
 800165a:	71bb      	strb	r3, [r7, #6]
 800165c:	79bb      	ldrb	r3, [r7, #6]
 800165e:	2b07      	cmp	r3, #7
 8001660:	d9de      	bls.n	8001620 <ST7565_Update+0x10>
		}
	}
	
	ST7565_Unselect();
 8001662:	f7ff fe19 	bl	8001298 <ST7565_Unselect>
	HAL_Delay(50);//(100);
 8001666:	2032      	movs	r0, #50	; 0x32
 8001668:	f006 fa02 	bl	8007a70 <HAL_Delay>
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000594 	.word	0x20000594

08001678 <ST7565_DrawChar>:
	* @brief	 ( описание ):  функция записывает 1 символ в буфер кадра
	* @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawChar(int16_t x, int16_t y, unsigned char ch, FontDef_t* Font, uint8_t multiplier, uint8_t color)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	4603      	mov	r3, r0
 8001682:	81fb      	strh	r3, [r7, #14]
 8001684:	460b      	mov	r3, r1
 8001686:	81bb      	strh	r3, [r7, #12]
 8001688:	4613      	mov	r3, r2
 800168a:	72fb      	strb	r3, [r7, #11]
uint16_t i, j;
uint16_t b;
int16_t X = x, Y = y;
 800168c:	89fb      	ldrh	r3, [r7, #14]
 800168e:	833b      	strh	r3, [r7, #24]
 8001690:	89bb      	ldrh	r3, [r7, #12]
 8001692:	82fb      	strh	r3, [r7, #22]
int16_t xx, yy;
	
	if (multiplier < 1) multiplier = 1;
 8001694:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001698:	2b00      	cmp	r3, #0
 800169a:	d102      	bne.n	80016a2 <ST7565_DrawChar+0x2a>
 800169c:	2301      	movs	r3, #1
 800169e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	
	// Check available space in LCD
	if (SCREEN_WIDTH >= ( x + Font->FontWidth) || SCREEN_HEIGHT >= ( y + Font->FontHeight)) {
 80016a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	7812      	ldrb	r2, [r2, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	2b80      	cmp	r3, #128	; 0x80
 80016ae:	dd07      	ble.n	80016c0 <ST7565_DrawChar+0x48>
 80016b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	7852      	ldrb	r2, [r2, #1]
 80016b8:	4413      	add	r3, r2
 80016ba:	2b40      	cmp	r3, #64	; 0x40
 80016bc:	f300 8154 	bgt.w	8001968 <ST7565_DrawChar+0x2f0>
		// Go through font
		for (i = 0; i < Font->FontHeight; i++) {
 80016c0:	2300      	movs	r3, #0
 80016c2:	83fb      	strh	r3, [r7, #30]
 80016c4:	e149      	b.n	800195a <ST7565_DrawChar+0x2e2>
			if (ch < 127) {
 80016c6:	7afb      	ldrb	r3, [r7, #11]
 80016c8:	2b7e      	cmp	r3, #126	; 0x7e
 80016ca:	d80f      	bhi.n	80016ec <ST7565_DrawChar+0x74>
				b = Font->data[(ch - 32) * Font->FontHeight + i];
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80016d2:	7afb      	ldrb	r3, [r7, #11]
 80016d4:	3b20      	subs	r3, #32
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	7849      	ldrb	r1, [r1, #1]
 80016da:	fb03 f101 	mul.w	r1, r3, r1
 80016de:	8bfb      	ldrh	r3, [r7, #30]
 80016e0:	440b      	add	r3, r1
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	837b      	strh	r3, [r7, #26]
 80016ea:	e0af      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch > 191) {
 80016ec:	7afb      	ldrb	r3, [r7, #11]
 80016ee:	2bbf      	cmp	r3, #191	; 0xbf
 80016f0:	d90f      	bls.n	8001712 <ST7565_DrawChar+0x9a>
				// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
				// и если в шрифте который содержит сперва латиницу и спец символы и потом 
				// только кирилицу то нужно добавлять 95 если шрифт 
				// содержит только кирилицу то +96 не нужно
				b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80016f8:	7afb      	ldrb	r3, [r7, #11]
 80016fa:	3b60      	subs	r3, #96	; 0x60
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	7849      	ldrb	r1, [r1, #1]
 8001700:	fb03 f101 	mul.w	r1, r3, r1
 8001704:	8bfb      	ldrh	r3, [r7, #30]
 8001706:	440b      	add	r3, r1
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	837b      	strh	r3, [r7, #26]
 8001710:	e09c      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 168) {	// 168 символ по ASCII - Ё
 8001712:	7afb      	ldrb	r3, [r7, #11]
 8001714:	2ba8      	cmp	r3, #168	; 0xa8
 8001716:	d111      	bne.n	800173c <ST7565_DrawChar+0xc4>
				// 160 эллемент ( символ Ё ) 
				b = Font->data[160 * Font->FontHeight + i];
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	785b      	ldrb	r3, [r3, #1]
 8001722:	4619      	mov	r1, r3
 8001724:	460b      	mov	r3, r1
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	015b      	lsls	r3, r3, #5
 800172c:	4619      	mov	r1, r3
 800172e:	8bfb      	ldrh	r3, [r7, #30]
 8001730:	440b      	add	r3, r1
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	837b      	strh	r3, [r7, #26]
 800173a:	e087      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 184) {	// 184 символ по ASCII - ё
 800173c:	7afb      	ldrb	r3, [r7, #11]
 800173e:	2bb8      	cmp	r3, #184	; 0xb8
 8001740:	d111      	bne.n	8001766 <ST7565_DrawChar+0xee>
				// 161 эллемент  ( символ ё ) 
				b = Font->data[161 * Font->FontHeight + i];
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f8d3 1002 	ldr.w	r1, [r3, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	785b      	ldrb	r3, [r3, #1]
 800174c:	461a      	mov	r2, r3
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	015b      	lsls	r3, r3, #5
 8001756:	441a      	add	r2, r3
 8001758:	8bfb      	ldrh	r3, [r7, #30]
 800175a:	4413      	add	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	440b      	add	r3, r1
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	837b      	strh	r3, [r7, #26]
 8001764:	e072      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 170) {	// 168 символ по ASCII - Є
 8001766:	7afb      	ldrb	r3, [r7, #11]
 8001768:	2baa      	cmp	r3, #170	; 0xaa
 800176a:	d10f      	bne.n	800178c <ST7565_DrawChar+0x114>
				// 162 эллемент ( символ Є )
				b = Font->data[162 * Font->FontHeight + i];
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	785b      	ldrb	r3, [r3, #1]
 8001776:	4619      	mov	r1, r3
 8001778:	23a2      	movs	r3, #162	; 0xa2
 800177a:	fb03 f101 	mul.w	r1, r3, r1
 800177e:	8bfb      	ldrh	r3, [r7, #30]
 8001780:	440b      	add	r3, r1
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	837b      	strh	r3, [r7, #26]
 800178a:	e05f      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 175) {	// 184 символ по ASCII - Ї
 800178c:	7afb      	ldrb	r3, [r7, #11]
 800178e:	2baf      	cmp	r3, #175	; 0xaf
 8001790:	d10f      	bne.n	80017b2 <ST7565_DrawChar+0x13a>
				// 163 эллемент  ( символ Ї )
				b = Font->data[163 * Font->FontHeight + i];
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	785b      	ldrb	r3, [r3, #1]
 800179c:	4619      	mov	r1, r3
 800179e:	23a3      	movs	r3, #163	; 0xa3
 80017a0:	fb03 f101 	mul.w	r1, r3, r1
 80017a4:	8bfb      	ldrh	r3, [r7, #30]
 80017a6:	440b      	add	r3, r1
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4413      	add	r3, r2
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	837b      	strh	r3, [r7, #26]
 80017b0:	e04c      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 178) {	// 168 символ по ASCII - І
 80017b2:	7afb      	ldrb	r3, [r7, #11]
 80017b4:	2bb2      	cmp	r3, #178	; 0xb2
 80017b6:	d10f      	bne.n	80017d8 <ST7565_DrawChar+0x160>
				// 164 эллемент ( символ І )
				b = Font->data[164 * Font->FontHeight + i];
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	785b      	ldrb	r3, [r3, #1]
 80017c2:	4619      	mov	r1, r3
 80017c4:	23a4      	movs	r3, #164	; 0xa4
 80017c6:	fb03 f101 	mul.w	r1, r3, r1
 80017ca:	8bfb      	ldrh	r3, [r7, #30]
 80017cc:	440b      	add	r3, r1
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	837b      	strh	r3, [r7, #26]
 80017d6:	e039      	b.n	800184c <ST7565_DrawChar+0x1d4>
			}
			else if (ch == 179) {	// 184 символ по ASCII - і
 80017d8:	7afb      	ldrb	r3, [r7, #11]
 80017da:	2bb3      	cmp	r3, #179	; 0xb3
 80017dc:	d111      	bne.n	8001802 <ST7565_DrawChar+0x18a>
				// 165 эллемент  ( символ і )
				b = Font->data[165 * Font->FontHeight + i];
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	785b      	ldrb	r3, [r3, #1]
 80017e8:	4619      	mov	r1, r3
 80017ea:	460b      	mov	r3, r1
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	0159      	lsls	r1, r3, #5
 80017f2:	4419      	add	r1, r3
 80017f4:	8bfb      	ldrh	r3, [r7, #30]
 80017f6:	440b      	add	r3, r1
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	837b      	strh	r3, [r7, #26]
 8001800:	e024      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 186) {	// 184 символ по ASCII - є
 8001802:	7afb      	ldrb	r3, [r7, #11]
 8001804:	2bba      	cmp	r3, #186	; 0xba
 8001806:	d10f      	bne.n	8001828 <ST7565_DrawChar+0x1b0>
				// 166 эллемент  ( символ є )
				b = Font->data[166 * Font->FontHeight + i];
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	785b      	ldrb	r3, [r3, #1]
 8001812:	4619      	mov	r1, r3
 8001814:	23a6      	movs	r3, #166	; 0xa6
 8001816:	fb03 f101 	mul.w	r1, r3, r1
 800181a:	8bfb      	ldrh	r3, [r7, #30]
 800181c:	440b      	add	r3, r1
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4413      	add	r3, r2
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	837b      	strh	r3, [r7, #26]
 8001826:	e011      	b.n	800184c <ST7565_DrawChar+0x1d4>
			} else if (ch == 191) {	// 168 символ по ASCII - ї
 8001828:	7afb      	ldrb	r3, [r7, #11]
 800182a:	2bbf      	cmp	r3, #191	; 0xbf
 800182c:	d10e      	bne.n	800184c <ST7565_DrawChar+0x1d4>
				// 167 эллемент ( символ ї )
				b = Font->data[167 * Font->FontHeight + i];
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	785b      	ldrb	r3, [r3, #1]
 8001838:	4619      	mov	r1, r3
 800183a:	23a7      	movs	r3, #167	; 0xa7
 800183c:	fb03 f101 	mul.w	r1, r3, r1
 8001840:	8bfb      	ldrh	r3, [r7, #30]
 8001842:	440b      	add	r3, r1
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	837b      	strh	r3, [r7, #26]
			}
			//-----------------------------------------------------------------------------
			
			for (j = 0; j < Font->FontWidth; j++) {
 800184c:	2300      	movs	r3, #0
 800184e:	83bb      	strh	r3, [r7, #28]
 8001850:	e071      	b.n	8001936 <ST7565_DrawChar+0x2be>
				if ((b << j) & 0x8000) {
 8001852:	8b7a      	ldrh	r2, [r7, #26]
 8001854:	8bbb      	ldrh	r3, [r7, #28]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d02d      	beq.n	80018be <ST7565_DrawChar+0x246>
					for (yy = 0; yy < multiplier; yy++){
 8001862:	2300      	movs	r3, #0
 8001864:	827b      	strh	r3, [r7, #18]
 8001866:	e023      	b.n	80018b0 <ST7565_DrawChar+0x238>
						for (xx = 0; xx < multiplier; xx++){
 8001868:	2300      	movs	r3, #0
 800186a:	82bb      	strh	r3, [r7, #20]
 800186c:	e014      	b.n	8001898 <ST7565_DrawChar+0x220>
							ST7565_Draw_pixel(X + xx, Y + yy, color);
 800186e:	8b3a      	ldrh	r2, [r7, #24]
 8001870:	8abb      	ldrh	r3, [r7, #20]
 8001872:	4413      	add	r3, r2
 8001874:	b29b      	uxth	r3, r3
 8001876:	b218      	sxth	r0, r3
 8001878:	8afa      	ldrh	r2, [r7, #22]
 800187a:	8a7b      	ldrh	r3, [r7, #18]
 800187c:	4413      	add	r3, r2
 800187e:	b29b      	uxth	r3, r3
 8001880:	b21b      	sxth	r3, r3
 8001882:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001886:	4619      	mov	r1, r3
 8001888:	f7ff fe60 	bl	800154c <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 800188c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001890:	b29b      	uxth	r3, r3
 8001892:	3301      	adds	r3, #1
 8001894:	b29b      	uxth	r3, r3
 8001896:	82bb      	strh	r3, [r7, #20]
 8001898:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800189c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018a0:	429a      	cmp	r2, r3
 80018a2:	dbe4      	blt.n	800186e <ST7565_DrawChar+0x1f6>
					for (yy = 0; yy < multiplier; yy++){
 80018a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	3301      	adds	r3, #1
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	827b      	strh	r3, [r7, #18]
 80018b0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80018b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018b8:	429a      	cmp	r2, r3
 80018ba:	dbd5      	blt.n	8001868 <ST7565_DrawChar+0x1f0>
 80018bc:	e031      	b.n	8001922 <ST7565_DrawChar+0x2aa>
						}
					}
				} else {// если фон очищать то оставляем если чтоб фон оставался старый то коментируем эту часть -------------
					for (yy = 0; yy < multiplier; yy++){
 80018be:	2300      	movs	r3, #0
 80018c0:	827b      	strh	r3, [r7, #18]
 80018c2:	e028      	b.n	8001916 <ST7565_DrawChar+0x29e>
						for (xx = 0; xx < multiplier; xx++){
 80018c4:	2300      	movs	r3, #0
 80018c6:	82bb      	strh	r3, [r7, #20]
 80018c8:	e019      	b.n	80018fe <ST7565_DrawChar+0x286>
							ST7565_Draw_pixel(X + xx, Y + yy, !color);
 80018ca:	8b3a      	ldrh	r2, [r7, #24]
 80018cc:	8abb      	ldrh	r3, [r7, #20]
 80018ce:	4413      	add	r3, r2
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	b218      	sxth	r0, r3
 80018d4:	8afa      	ldrh	r2, [r7, #22]
 80018d6:	8a7b      	ldrh	r3, [r7, #18]
 80018d8:	4413      	add	r3, r2
 80018da:	b29b      	uxth	r3, r3
 80018dc:	b219      	sxth	r1, r3
 80018de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bf0c      	ite	eq
 80018e6:	2301      	moveq	r3, #1
 80018e8:	2300      	movne	r3, #0
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	f7ff fe2d 	bl	800154c <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 80018f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	3301      	adds	r3, #1
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	82bb      	strh	r3, [r7, #20]
 80018fe:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001902:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001906:	429a      	cmp	r2, r3
 8001908:	dbdf      	blt.n	80018ca <ST7565_DrawChar+0x252>
					for (yy = 0; yy < multiplier; yy++){
 800190a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800190e:	b29b      	uxth	r3, r3
 8001910:	3301      	adds	r3, #1
 8001912:	b29b      	uxth	r3, r3
 8001914:	827b      	strh	r3, [r7, #18]
 8001916:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800191a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800191e:	429a      	cmp	r2, r3
 8001920:	dbd0      	blt.n	80018c4 <ST7565_DrawChar+0x24c>
						}
					}
				}
				//----------------------------------------------------------------------------------------------------
				X += multiplier;
 8001922:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001926:	b29a      	uxth	r2, r3
 8001928:	8b3b      	ldrh	r3, [r7, #24]
 800192a:	4413      	add	r3, r2
 800192c:	b29b      	uxth	r3, r3
 800192e:	833b      	strh	r3, [r7, #24]
			for (j = 0; j < Font->FontWidth; j++) {
 8001930:	8bbb      	ldrh	r3, [r7, #28]
 8001932:	3301      	adds	r3, #1
 8001934:	83bb      	strh	r3, [r7, #28]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b29b      	uxth	r3, r3
 800193c:	8bba      	ldrh	r2, [r7, #28]
 800193e:	429a      	cmp	r2, r3
 8001940:	d387      	bcc.n	8001852 <ST7565_DrawChar+0x1da>
			}
			X = x;
 8001942:	89fb      	ldrh	r3, [r7, #14]
 8001944:	833b      	strh	r3, [r7, #24]
			Y += multiplier;
 8001946:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800194a:	b29a      	uxth	r2, r3
 800194c:	8afb      	ldrh	r3, [r7, #22]
 800194e:	4413      	add	r3, r2
 8001950:	b29b      	uxth	r3, r3
 8001952:	82fb      	strh	r3, [r7, #22]
		for (i = 0; i < Font->FontHeight; i++) {
 8001954:	8bfb      	ldrh	r3, [r7, #30]
 8001956:	3301      	adds	r3, #1
 8001958:	83fb      	strh	r3, [r7, #30]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	785b      	ldrb	r3, [r3, #1]
 800195e:	b29b      	uxth	r3, r3
 8001960:	8bfa      	ldrh	r2, [r7, #30]
 8001962:	429a      	cmp	r2, r3
 8001964:	f4ff aeaf 	bcc.w	80016c6 <ST7565_DrawChar+0x4e>
		}
		
	}
}
 8001968:	bf00      	nop
 800196a:	3720      	adds	r7, #32
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <ST7565_Print>:
 * @brief	 ( описание ):  функция записывает строку в буфер кадра ( поддерживает кириллицу ( в том числе и Укр. язык) и латиницу
 * @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
 * @return  ( возвращает ):
*******************************************************************************/
void ST7565_Print(int16_t x, int16_t y, char *str, FontDef_t *Font, uint8_t multiplier, uint8_t color)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af02      	add	r7, sp, #8
 8001976:	60ba      	str	r2, [r7, #8]
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	4603      	mov	r3, r0
 800197c:	81fb      	strh	r3, [r7, #14]
 800197e:	460b      	mov	r3, r1
 8001980:	81bb      	strh	r3, [r7, #12]
unsigned char buff_char;
uint16_t len = strlen(str);
 8001982:	68b8      	ldr	r0, [r7, #8]
 8001984:	f7fe fc24 	bl	80001d0 <strlen>
 8001988:	4603      	mov	r3, r0
 800198a:	82bb      	strh	r3, [r7, #20]

	if (multiplier < 1) multiplier = 1;
 800198c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001990:	2b00      	cmp	r3, #0
 8001992:	f040 809c 	bne.w	8001ace <ST7565_Print+0x15e>
 8001996:	2301      	movs	r3, #1
 8001998:	f887 3020 	strb.w	r3, [r7, #32]
	
	while (len--) {
 800199c:	e097      	b.n	8001ace <ST7565_Print+0x15e>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ) {	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2bbf      	cmp	r3, #191	; 0xbf
 80019a4:	d974      	bls.n	8001a90 <ST7565_Print+0x120>
			// проверяем какой именно байт первый 0xD0 либо 0xD1
			switch ((uint8_t)*str) {
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2bd0      	cmp	r3, #208	; 0xd0
 80019ac:	d002      	beq.n	80019b4 <ST7565_Print+0x44>
 80019ae:	2bd1      	cmp	r3, #209	; 0xd1
 80019b0:	d02c      	beq.n	8001a0c <ST7565_Print+0x9c>
 80019b2:	e05b      	b.n	8001a6c <ST7565_Print+0xfc>
				case 0xD0:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	3301      	adds	r3, #1
 80019b8:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b81      	cmp	r3, #129	; 0x81
 80019c0:	d102      	bne.n	80019c8 <ST7565_Print+0x58>
 80019c2:	23a8      	movs	r3, #168	; 0xa8
 80019c4:	75fb      	strb	r3, [r7, #23]
 80019c6:	e051      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF) { buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b8f      	cmp	r3, #143	; 0x8f
 80019ce:	d908      	bls.n	80019e2 <ST7565_Print+0x72>
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2bbf      	cmp	r3, #191	; 0xbf
 80019d6:	d804      	bhi.n	80019e2 <ST7565_Print+0x72>
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	3330      	adds	r3, #48	; 0x30
 80019de:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 80019e0:	e041      	b.n	8001a66 <ST7565_Print+0xf6>
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b84      	cmp	r3, #132	; 0x84
 80019e8:	d102      	bne.n	80019f0 <ST7565_Print+0x80>
 80019ea:	23aa      	movs	r3, #170	; 0xaa
 80019ec:	75fb      	strb	r3, [r7, #23]
 80019ee:	e03d      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b86      	cmp	r3, #134	; 0x86
 80019f6:	d102      	bne.n	80019fe <ST7565_Print+0x8e>
 80019f8:	23b2      	movs	r3, #178	; 0xb2
 80019fa:	75fb      	strb	r3, [r7, #23]
 80019fc:	e036      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b87      	cmp	r3, #135	; 0x87
 8001a04:	d12f      	bne.n	8001a66 <ST7565_Print+0xf6>
 8001a06:	23af      	movs	r3, #175	; 0xaf
 8001a08:	75fb      	strb	r3, [r7, #23]
 8001a0a:	e02f      	b.n	8001a6c <ST7565_Print+0xfc>
				//}
				case 0xD1:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b91      	cmp	r3, #145	; 0x91
 8001a18:	d102      	bne.n	8001a20 <ST7565_Print+0xb0>
 8001a1a:	23b8      	movs	r3, #184	; 0xb8
 8001a1c:	75fb      	strb	r3, [r7, #23]
 8001a1e:	e025      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F) { buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b25b      	sxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	da08      	bge.n	8001a3c <ST7565_Print+0xcc>
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b8f      	cmp	r3, #143	; 0x8f
 8001a30:	d804      	bhi.n	8001a3c <ST7565_Print+0xcc>
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	3370      	adds	r3, #112	; 0x70
 8001a38:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 8001a3a:	e016      	b.n	8001a6a <ST7565_Print+0xfa>
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b94      	cmp	r3, #148	; 0x94
 8001a42:	d102      	bne.n	8001a4a <ST7565_Print+0xda>
 8001a44:	23ba      	movs	r3, #186	; 0xba
 8001a46:	75fb      	strb	r3, [r7, #23]
 8001a48:	e010      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b96      	cmp	r3, #150	; 0x96
 8001a50:	d102      	bne.n	8001a58 <ST7565_Print+0xe8>
 8001a52:	23b3      	movs	r3, #179	; 0xb3
 8001a54:	75fb      	strb	r3, [r7, #23]
 8001a56:	e009      	b.n	8001a6c <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b97      	cmp	r3, #151	; 0x97
 8001a5e:	d104      	bne.n	8001a6a <ST7565_Print+0xfa>
 8001a60:	23bf      	movs	r3, #191	; 0xbf
 8001a62:	75fb      	strb	r3, [r7, #23]
 8001a64:	e002      	b.n	8001a6c <ST7565_Print+0xfc>
				break;
 8001a66:	bf00      	nop
 8001a68:	e000      	b.n	8001a6c <ST7565_Print+0xfc>
				break;
 8001a6a:	bf00      	nop
				//}
			}
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 8001a6c:	8abb      	ldrh	r3, [r7, #20]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	82bb      	strh	r3, [r7, #20]
			ST7565_DrawChar(x, y, buff_char, Font, multiplier, color);
 8001a72:	7dfa      	ldrb	r2, [r7, #23]
 8001a74:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001a78:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001a7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f7ff fdf5 	bl	8001678 <ST7565_DrawChar>
 8001a8e:	e00e      	b.n	8001aae <ST7565_Print+0x13e>
		} else {
			ST7565_DrawChar(x, y, *str, Font, multiplier, color);
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	781a      	ldrb	r2, [r3, #0]
 8001a94:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001a98:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001a9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f7ff fde5 	bl	8001678 <ST7565_DrawChar>
		}
		
		x += (Font->FontWidth * multiplier);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	fb12 f303 	smulbb	r3, r2, r3
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	89fb      	ldrh	r3, [r7, #14]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	81fb      	strh	r3, [r7, #14]
		str++;
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	3301      	adds	r3, #1
 8001acc:	60bb      	str	r3, [r7, #8]
	while (len--) {
 8001ace:	8abb      	ldrh	r3, [r7, #20]
 8001ad0:	1e5a      	subs	r2, r3, #1
 8001ad2:	82ba      	strh	r2, [r7, #20]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f47f af62 	bne.w	800199e <ST7565_Print+0x2e>
	}
}
 8001ada:	bf00      	nop
 8001adc:	bf00      	nop
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <ST7565_DrawLine>:
	* @param	( параметры ):	координаты начальной точки и конечной и цвет 0 или 1
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint8_t c)
{
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4604      	mov	r4, r0
 8001aec:	4608      	mov	r0, r1
 8001aee:	4611      	mov	r1, r2
 8001af0:	461a      	mov	r2, r3
 8001af2:	4623      	mov	r3, r4
 8001af4:	80fb      	strh	r3, [r7, #6]
 8001af6:	4603      	mov	r3, r0
 8001af8:	80bb      	strh	r3, [r7, #4]
 8001afa:	460b      	mov	r3, r1
 8001afc:	807b      	strh	r3, [r7, #2]
 8001afe:	4613      	mov	r3, r2
 8001b00:	803b      	strh	r3, [r7, #0]
int16_t dx, dy, sx, sy, err, e2, i, tmp;
	
	/* Check for overflow */
	if (x0 >= SCREEN_WIDTH)  x0 = SCREEN_WIDTH  - 1;
 8001b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b06:	2b7f      	cmp	r3, #127	; 0x7f
 8001b08:	dd01      	ble.n	8001b0e <ST7565_DrawLine+0x2a>
 8001b0a:	237f      	movs	r3, #127	; 0x7f
 8001b0c:	80fb      	strh	r3, [r7, #6]
	if (x1 >= SCREEN_WIDTH)  x1 = SCREEN_WIDTH  - 1;
 8001b0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b12:	2b7f      	cmp	r3, #127	; 0x7f
 8001b14:	dd01      	ble.n	8001b1a <ST7565_DrawLine+0x36>
 8001b16:	237f      	movs	r3, #127	; 0x7f
 8001b18:	807b      	strh	r3, [r7, #2]
	if (y0 >= SCREEN_HEIGHT) y0 = SCREEN_HEIGHT - 1;
 8001b1a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b1e:	2b3f      	cmp	r3, #63	; 0x3f
 8001b20:	dd01      	ble.n	8001b26 <ST7565_DrawLine+0x42>
 8001b22:	233f      	movs	r3, #63	; 0x3f
 8001b24:	80bb      	strh	r3, [r7, #4]
	if (y1 >= SCREEN_HEIGHT) y1 = SCREEN_HEIGHT - 1;
 8001b26:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b2a:	2b3f      	cmp	r3, #63	; 0x3f
 8001b2c:	dd01      	ble.n	8001b32 <ST7565_DrawLine+0x4e>
 8001b2e:	233f      	movs	r3, #63	; 0x3f
 8001b30:	803b      	strh	r3, [r7, #0]
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001b32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	da05      	bge.n	8001b4a <ST7565_DrawLine+0x66>
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	b21b      	sxth	r3, r3
 8001b48:	e004      	b.n	8001b54 <ST7565_DrawLine+0x70>
 8001b4a:	88fa      	ldrh	r2, [r7, #6]
 8001b4c:	887b      	ldrh	r3, [r7, #2]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	b21b      	sxth	r3, r3
 8001b54:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001b56:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b5a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	da05      	bge.n	8001b6e <ST7565_DrawLine+0x8a>
 8001b62:	883a      	ldrh	r2, [r7, #0]
 8001b64:	88bb      	ldrh	r3, [r7, #4]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	e004      	b.n	8001b78 <ST7565_DrawLine+0x94>
 8001b6e:	88ba      	ldrh	r2, [r7, #4]
 8001b70:	883b      	ldrh	r3, [r7, #0]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001b7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	da01      	bge.n	8001b8a <ST7565_DrawLine+0xa6>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e001      	b.n	8001b8e <ST7565_DrawLine+0xaa>
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b8e:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001b90:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b94:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	da01      	bge.n	8001ba0 <ST7565_DrawLine+0xbc>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e001      	b.n	8001ba4 <ST7565_DrawLine+0xc0>
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ba4:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001ba6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001baa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	dd06      	ble.n	8001bc0 <ST7565_DrawLine+0xdc>
 8001bb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bb6:	0fda      	lsrs	r2, r3, #31
 8001bb8:	4413      	add	r3, r2
 8001bba:	105b      	asrs	r3, r3, #1
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	e006      	b.n	8001bce <ST7565_DrawLine+0xea>
 8001bc0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bc4:	0fda      	lsrs	r2, r3, #31
 8001bc6:	4413      	add	r3, r2
 8001bc8:	105b      	asrs	r3, r3, #1
 8001bca:	425b      	negs	r3, r3
 8001bcc:	b21b      	sxth	r3, r3
 8001bce:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001bd0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d130      	bne.n	8001c3a <ST7565_DrawLine+0x156>
		if (y1 < y0) {
 8001bd8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001bdc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	da05      	bge.n	8001bf0 <ST7565_DrawLine+0x10c>
			tmp = y1;
 8001be4:	883b      	ldrh	r3, [r7, #0]
 8001be6:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001be8:	88bb      	ldrh	r3, [r7, #4]
 8001bea:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001bec:	893b      	ldrh	r3, [r7, #8]
 8001bee:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001bf0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001bf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	da05      	bge.n	8001c08 <ST7565_DrawLine+0x124>
			tmp = x1;
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001c04:	893b      	ldrh	r3, [r7, #8]
 8001c06:	80fb      	strh	r3, [r7, #6]
		}
		
		// Vertical line
		for (i = y0; i <= y1; i++) ST7565_Draw_pixel(x0, i, c);
 8001c08:	88bb      	ldrh	r3, [r7, #4]
 8001c0a:	82bb      	strh	r3, [r7, #20]
 8001c0c:	e00e      	b.n	8001c2c <ST7565_DrawLine+0x148>
 8001c0e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001c12:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8001c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fc96 	bl	800154c <ST7565_Draw_pixel>
 8001c20:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	3301      	adds	r3, #1
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	82bb      	strh	r3, [r7, #20]
 8001c2c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001c30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	ddea      	ble.n	8001c0e <ST7565_DrawLine+0x12a>
		
		return;
 8001c38:	e06e      	b.n	8001d18 <ST7565_DrawLine+0x234>
	}
	
	if (dy == 0) {
 8001c3a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d130      	bne.n	8001ca4 <ST7565_DrawLine+0x1c0>
		if (y1 < y0) {
 8001c42:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001c46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	da05      	bge.n	8001c5a <ST7565_DrawLine+0x176>
			tmp = y1;
 8001c4e:	883b      	ldrh	r3, [r7, #0]
 8001c50:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001c52:	88bb      	ldrh	r3, [r7, #4]
 8001c54:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001c56:	893b      	ldrh	r3, [r7, #8]
 8001c58:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001c5a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	da05      	bge.n	8001c72 <ST7565_DrawLine+0x18e>
			tmp = x1;
 8001c66:	887b      	ldrh	r3, [r7, #2]
 8001c68:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001c6e:	893b      	ldrh	r3, [r7, #8]
 8001c70:	80fb      	strh	r3, [r7, #6]
		}
		
		// Horizontal line
		for (i = x0; i <= x1; i++) ST7565_Draw_pixel(i, y0, c);
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	82bb      	strh	r3, [r7, #20]
 8001c76:	e00e      	b.n	8001c96 <ST7565_DrawLine+0x1b2>
 8001c78:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001c7c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001c80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fc61 	bl	800154c <ST7565_Draw_pixel>
 8001c8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	3301      	adds	r3, #1
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	82bb      	strh	r3, [r7, #20]
 8001c96:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001c9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	ddea      	ble.n	8001c78 <ST7565_DrawLine+0x194>
		
		return;
 8001ca2:	e039      	b.n	8001d18 <ST7565_DrawLine+0x234>
	}
	
	while (1) {
		ST7565_Draw_pixel(x0, y0, c);
 8001ca4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001ca8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001cac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fc4b 	bl	800154c <ST7565_Draw_pixel>
		if (x0 == x1 && y0 == y1) break;
 8001cb6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001cba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d105      	bne.n	8001cce <ST7565_DrawLine+0x1ea>
 8001cc2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001cc6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d023      	beq.n	8001d16 <ST7565_DrawLine+0x232>

		e2 = err; 
 8001cce:	8afb      	ldrh	r3, [r7, #22]
 8001cd0:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001cd2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001cd6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001cda:	425b      	negs	r3, r3
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	dd09      	ble.n	8001cf4 <ST7565_DrawLine+0x210>
			err -= dy;
 8001ce0:	8afa      	ldrh	r2, [r7, #22]
 8001ce2:	8a3b      	ldrh	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001cea:	88fa      	ldrh	r2, [r7, #6]
 8001cec:	89fb      	ldrh	r3, [r7, #14]
 8001cee:	4413      	add	r3, r2
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001cf4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001cf8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	dad1      	bge.n	8001ca4 <ST7565_DrawLine+0x1c0>
			err += dx;
 8001d00:	8afa      	ldrh	r2, [r7, #22]
 8001d02:	8a7b      	ldrh	r3, [r7, #18]
 8001d04:	4413      	add	r3, r2
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001d0a:	88ba      	ldrh	r2, [r7, #4]
 8001d0c:	89bb      	ldrh	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	80bb      	strh	r3, [r7, #4]
		ST7565_Draw_pixel(x0, y0, c);
 8001d14:	e7c6      	b.n	8001ca4 <ST7565_DrawLine+0x1c0>
		if (x0 == x1 && y0 == y1) break;
 8001d16:	bf00      	nop
		} 
	}
}
 8001d18:	371c      	adds	r7, #28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd90      	pop	{r4, r7, pc}

08001d1e <ST7565_DrawRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001d1e:	b590      	push	{r4, r7, lr}
 8001d20:	b085      	sub	sp, #20
 8001d22:	af02      	add	r7, sp, #8
 8001d24:	4604      	mov	r4, r0
 8001d26:	4608      	mov	r0, r1
 8001d28:	4611      	mov	r1, r2
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4623      	mov	r3, r4
 8001d2e:	80fb      	strh	r3, [r7, #6]
 8001d30:	4603      	mov	r3, r0
 8001d32:	80bb      	strh	r3, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	803b      	strh	r3, [r7, #0]
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001d3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d40:	2b7f      	cmp	r3, #127	; 0x7f
 8001d42:	dc6a      	bgt.n	8001e1a <ST7565_DrawRectangle+0xfc>
 8001d44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d48:	2b3f      	cmp	r3, #63	; 0x3f
 8001d4a:	dc66      	bgt.n	8001e1a <ST7565_DrawRectangle+0xfc>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001d4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d54:	4413      	add	r3, r2
 8001d56:	2b7f      	cmp	r3, #127	; 0x7f
 8001d58:	dd04      	ble.n	8001d64 <ST7565_DrawRectangle+0x46>
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001d64:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001d68:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	2b3f      	cmp	r3, #63	; 0x3f
 8001d70:	dd04      	ble.n	8001d7c <ST7565_DrawRectangle+0x5e>
 8001d72:	88bb      	ldrh	r3, [r7, #4]
 8001d74:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	803b      	strh	r3, [r7, #0]
	
	// Draw 4 lines
	ST7565_DrawLine(x, y, x + w, y, c);         // Top line
 8001d7c:	88fa      	ldrh	r2, [r7, #6]
 8001d7e:	887b      	ldrh	r3, [r7, #2]
 8001d80:	4413      	add	r3, r2
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	b21a      	sxth	r2, r3
 8001d86:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001d8a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001d8e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001d92:	7e3b      	ldrb	r3, [r7, #24]
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	4623      	mov	r3, r4
 8001d98:	f7ff fea4 	bl	8001ae4 <ST7565_DrawLine>
	ST7565_DrawLine(x, y + h, x + w, y + h, c); // Bottom line
 8001d9c:	88ba      	ldrh	r2, [r7, #4]
 8001d9e:	883b      	ldrh	r3, [r7, #0]
 8001da0:	4413      	add	r3, r2
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	b219      	sxth	r1, r3
 8001da6:	88fa      	ldrh	r2, [r7, #6]
 8001da8:	887b      	ldrh	r3, [r7, #2]
 8001daa:	4413      	add	r3, r2
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	b21c      	sxth	r4, r3
 8001db0:	88ba      	ldrh	r2, [r7, #4]
 8001db2:	883b      	ldrh	r3, [r7, #0]
 8001db4:	4413      	add	r3, r2
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001dbe:	7e3b      	ldrb	r3, [r7, #24]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	4622      	mov	r2, r4
 8001dc6:	f7ff fe8d 	bl	8001ae4 <ST7565_DrawLine>
	ST7565_DrawLine(x, y, x, y + h, c);         // Left line
 8001dca:	88ba      	ldrh	r2, [r7, #4]
 8001dcc:	883b      	ldrh	r3, [r7, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	b21c      	sxth	r4, r3
 8001dd4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001dd8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001ddc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001de0:	7e3b      	ldrb	r3, [r7, #24]
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	4623      	mov	r3, r4
 8001de6:	f7ff fe7d 	bl	8001ae4 <ST7565_DrawLine>
	ST7565_DrawLine(x + w, y, x + w, y + h, c); // Right line
 8001dea:	88fa      	ldrh	r2, [r7, #6]
 8001dec:	887b      	ldrh	r3, [r7, #2]
 8001dee:	4413      	add	r3, r2
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	b218      	sxth	r0, r3
 8001df4:	88fa      	ldrh	r2, [r7, #6]
 8001df6:	887b      	ldrh	r3, [r7, #2]
 8001df8:	4413      	add	r3, r2
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	b21c      	sxth	r4, r3
 8001dfe:	88ba      	ldrh	r2, [r7, #4]
 8001e00:	883b      	ldrh	r3, [r7, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b21a      	sxth	r2, r3
 8001e08:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001e0c:	7e3b      	ldrb	r3, [r7, #24]
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	4613      	mov	r3, r2
 8001e12:	4622      	mov	r2, r4
 8001e14:	f7ff fe66 	bl	8001ae4 <ST7565_DrawLine>
 8001e18:	e000      	b.n	8001e1c <ST7565_DrawRectangle+0xfe>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001e1a:	bf00      	nop
}
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd90      	pop	{r4, r7, pc}

08001e22 <ST7565_DrawFilledRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawFilledRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001e22:	b590      	push	{r4, r7, lr}
 8001e24:	b087      	sub	sp, #28
 8001e26:	af02      	add	r7, sp, #8
 8001e28:	4604      	mov	r4, r0
 8001e2a:	4608      	mov	r0, r1
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4623      	mov	r3, r4
 8001e32:	80fb      	strh	r3, [r7, #6]
 8001e34:	4603      	mov	r3, r0
 8001e36:	80bb      	strh	r3, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	803b      	strh	r3, [r7, #0]
uint8_t i;
	
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001e40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e44:	2b7f      	cmp	r3, #127	; 0x7f
 8001e46:	dc41      	bgt.n	8001ecc <ST7565_DrawFilledRectangle+0xaa>
 8001e48:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e4c:	2b3f      	cmp	r3, #63	; 0x3f
 8001e4e:	dc3d      	bgt.n	8001ecc <ST7565_DrawFilledRectangle+0xaa>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001e50:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e58:	4413      	add	r3, r2
 8001e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8001e5c:	dd04      	ble.n	8001e68 <ST7565_DrawFilledRectangle+0x46>
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001e68:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001e6c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001e70:	4413      	add	r3, r2
 8001e72:	2b3f      	cmp	r3, #63	; 0x3f
 8001e74:	dd04      	ble.n	8001e80 <ST7565_DrawFilledRectangle+0x5e>
 8001e76:	88bb      	ldrh	r3, [r7, #4]
 8001e78:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	803b      	strh	r3, [r7, #0]
	
	for (i = 0; i <= h; i++) ST7565_DrawLine(x, y + i, x + w, y + i, c);
 8001e80:	2300      	movs	r3, #0
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	e01c      	b.n	8001ec0 <ST7565_DrawFilledRectangle+0x9e>
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	88bb      	ldrh	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	b219      	sxth	r1, r3
 8001e92:	88fa      	ldrh	r2, [r7, #6]
 8001e94:	887b      	ldrh	r3, [r7, #2]
 8001e96:	4413      	add	r3, r2
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	b21c      	sxth	r4, r3
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	88bb      	ldrh	r3, [r7, #4]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	b21a      	sxth	r2, r3
 8001ea8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001eac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	4622      	mov	r2, r4
 8001eb6:	f7ff fe15 	bl	8001ae4 <ST7565_DrawLine>
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	dddd      	ble.n	8001e86 <ST7565_DrawFilledRectangle+0x64>
 8001eca:	e000      	b.n	8001ece <ST7565_DrawFilledRectangle+0xac>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001ecc:	bf00      	nop
}
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd90      	pop	{r4, r7, pc}

08001ed4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed8:	f3bf 8f4f 	dsb	sy
}
 8001edc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <__NVIC_SystemReset+0x24>)
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ee6:	4904      	ldr	r1, [pc, #16]	; (8001ef8 <__NVIC_SystemReset+0x24>)
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__NVIC_SystemReset+0x28>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eee:	f3bf 8f4f 	dsb	sy
}
 8001ef2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <__NVIC_SystemReset+0x20>
 8001ef8:	e000ed00 	.word	0xe000ed00
 8001efc:	05fa0004 	.word	0x05fa0004

08001f00 <showCfg>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//------------------------------------------------------------------------------------------
void showCfg()
{
 8001f00:	b5b0      	push	{r4, r5, r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af04      	add	r7, sp, #16
	*strf = '\0';
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <showCfg+0x88>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_LIST; i++) {
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	e02d      	b.n	8001f6e <showCfg+0x6e>
		sprintf(strf+strlen(strf), "%u:%.1f:%s\r\n", list[i].band, list[i].freq, list[i].name);
 8001f12:	481d      	ldr	r0, [pc, #116]	; (8001f88 <showCfg+0x88>)
 8001f14:	f7fe f95c 	bl	80001d0 <strlen>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4a1b      	ldr	r2, [pc, #108]	; (8001f88 <showCfg+0x88>)
 8001f1c:	189c      	adds	r4, r3, r2
 8001f1e:	491b      	ldr	r1, [pc, #108]	; (8001f8c <showCfg+0x8c>)
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	461d      	mov	r5, r3
 8001f30:	4916      	ldr	r1, [pc, #88]	; (8001f8c <showCfg+0x8c>)
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fb00 	bl	8000548 <__aeabi_f2d>
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4a0e      	ldr	r2, [pc, #56]	; (8001f8c <showCfg+0x8c>)
 8001f54:	4413      	add	r3, r2
 8001f56:	3305      	adds	r3, #5
 8001f58:	9302      	str	r3, [sp, #8]
 8001f5a:	e9cd 0100 	strd	r0, r1, [sp]
 8001f5e:	462a      	mov	r2, r5
 8001f60:	490b      	ldr	r1, [pc, #44]	; (8001f90 <showCfg+0x90>)
 8001f62:	4620      	mov	r0, r4
 8001f64:	f012 f8ee 	bl	8014144 <siprintf>
	for (int i = 0; i < MAX_LIST; i++) {
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b18      	cmp	r3, #24
 8001f72:	ddce      	ble.n	8001f12 <showCfg+0x12>
	}
	Report(0, "%s", strf);
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <showCfg+0x88>)
 8001f76:	4907      	ldr	r1, [pc, #28]	; (8001f94 <showCfg+0x94>)
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f001 f955 	bl	8003228 <Report>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bdb0      	pop	{r4, r5, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20001708 	.word	0x20001708
 8001f8c:	20002f6c 	.word	0x20002f6c
 8001f90:	08017c98 	.word	0x08017c98
 8001f94:	08017ca8 	.word	0x08017ca8

08001f98 <bleWrite>:


#if defined(SET_BLE) || defined(SET_AUDIO)
//-------------------------------------------------------------------------------------------
void bleWrite(const char *str, bool prn)
{
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	70fb      	strb	r3, [r7, #3]
	if (sleep_mode) return;
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <bleWrite+0xac>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d147      	bne.n	800203c <bleWrite+0xa4>

	if (ble_withDMA) {
 8001fac:	4b26      	ldr	r3, [pc, #152]	; (8002048 <bleWrite+0xb0>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d023      	beq.n	8001ffc <bleWrite+0x64>
		while (!bleRdy) {};
 8001fb4:	bf00      	nop
 8001fb6:	4b25      	ldr	r3, [pc, #148]	; (800204c <bleWrite+0xb4>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0fb      	beq.n	8001fb6 <bleWrite+0x1e>
		bleRdy = 0;
 8001fbe:	4b23      	ldr	r3, [pc, #140]	; (800204c <bleWrite+0xb4>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(blePort, (uint8_t *)str, strlen(str)) != HAL_OK) devError |= devBLE;
 8001fc4:	4b22      	ldr	r3, [pc, #136]	; (8002050 <bleWrite+0xb8>)
 8001fc6:	681c      	ldr	r4, [r3, #0]
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7fe f901 	bl	80001d0 <strlen>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	f00c f856 	bl	800e088 <HAL_UART_Transmit_DMA>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d006      	beq.n	8001ff0 <bleWrite+0x58>
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <bleWrite+0xbc>)
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <bleWrite+0xbc>)
 8001fee:	801a      	strh	r2, [r3, #0]
		while (!bleRdy) {};
 8001ff0:	bf00      	nop
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <bleWrite+0xb4>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0fb      	beq.n	8001ff2 <bleWrite+0x5a>
 8001ffa:	e016      	b.n	800202a <bleWrite+0x92>
		/*while (HAL_UART_GetState(blePort) != HAL_UART_STATE_READY) {
			if (HAL_UART_GetState(blePort) == HAL_UART_STATE_BUSY_RX) break;
			//HAL_Delay(1);
		}*/
	} else {
		if (HAL_UART_Transmit(blePort, (uint8_t *)str, strlen(str), 1000) != HAL_OK) devError |= devBLE;
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <bleWrite+0xb8>)
 8001ffe:	681c      	ldr	r4, [r3, #0]
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7fe f8e5 	bl	80001d0 <strlen>
 8002006:	4603      	mov	r3, r0
 8002008:	b29a      	uxth	r2, r3
 800200a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4620      	mov	r0, r4
 8002012:	f00b ff4f 	bl	800deb4 <HAL_UART_Transmit>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d006      	beq.n	800202a <bleWrite+0x92>
 800201c:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <bleWrite+0xbc>)
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002024:	b29a      	uxth	r2, r3
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <bleWrite+0xbc>)
 8002028:	801a      	strh	r2, [r3, #0]
	}

	if (prn) Report(1, "[BLE_tx] %s", str);
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <bleWrite+0xa6>
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4909      	ldr	r1, [pc, #36]	; (8002058 <bleWrite+0xc0>)
 8002034:	2001      	movs	r0, #1
 8002036:	f001 f8f7 	bl	8003228 <Report>
 800203a:	e000      	b.n	800203e <bleWrite+0xa6>
	if (sleep_mode) return;
 800203c:	bf00      	nop

}
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	bd90      	pop	{r4, r7, pc}
 8002044:	20003600 	.word	0x20003600
 8002048:	20000131 	.word	0x20000131
 800204c:	20000130 	.word	0x20000130
 8002050:	2000012c 	.word	0x2000012c
 8002054:	20001b08 	.word	0x20001b08
 8002058:	08017cac 	.word	0x08017cac

0800205c <errName>:
//------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------
static char *errName(uint16_t err)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	80fb      	strh	r3, [r7, #6]

	switch (err) {
 8002066:	88fb      	ldrh	r3, [r7, #6]
 8002068:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800206c:	d07b      	beq.n	8002166 <errName+0x10a>
 800206e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002072:	dc7a      	bgt.n	800216a <errName+0x10e>
 8002074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002078:	d073      	beq.n	8002162 <errName+0x106>
 800207a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800207e:	dc74      	bgt.n	800216a <errName+0x10e>
 8002080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002084:	d06b      	beq.n	800215e <errName+0x102>
 8002086:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800208a:	dc6e      	bgt.n	800216a <errName+0x10e>
 800208c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002090:	d063      	beq.n	800215a <errName+0xfe>
 8002092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002096:	dc68      	bgt.n	800216a <errName+0x10e>
 8002098:	2b80      	cmp	r3, #128	; 0x80
 800209a:	d05c      	beq.n	8002156 <errName+0xfa>
 800209c:	2b80      	cmp	r3, #128	; 0x80
 800209e:	dc64      	bgt.n	800216a <errName+0x10e>
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	dc47      	bgt.n	8002134 <errName+0xd8>
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	dd60      	ble.n	800216a <errName+0x10e>
 80020a8:	3b01      	subs	r3, #1
 80020aa:	2b1f      	cmp	r3, #31
 80020ac:	d85d      	bhi.n	800216a <errName+0x10e>
 80020ae:	a201      	add	r2, pc, #4	; (adr r2, 80020b4 <errName+0x58>)
 80020b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b4:	0800213b 	.word	0x0800213b
 80020b8:	0800213f 	.word	0x0800213f
 80020bc:	0800216b 	.word	0x0800216b
 80020c0:	08002143 	.word	0x08002143
 80020c4:	0800216b 	.word	0x0800216b
 80020c8:	0800216b 	.word	0x0800216b
 80020cc:	0800216b 	.word	0x0800216b
 80020d0:	08002147 	.word	0x08002147
 80020d4:	0800216b 	.word	0x0800216b
 80020d8:	0800216b 	.word	0x0800216b
 80020dc:	0800216b 	.word	0x0800216b
 80020e0:	0800216b 	.word	0x0800216b
 80020e4:	0800216b 	.word	0x0800216b
 80020e8:	0800216b 	.word	0x0800216b
 80020ec:	0800216b 	.word	0x0800216b
 80020f0:	0800214b 	.word	0x0800214b
 80020f4:	0800216b 	.word	0x0800216b
 80020f8:	0800216b 	.word	0x0800216b
 80020fc:	0800216b 	.word	0x0800216b
 8002100:	0800216b 	.word	0x0800216b
 8002104:	0800216b 	.word	0x0800216b
 8002108:	0800216b 	.word	0x0800216b
 800210c:	0800216b 	.word	0x0800216b
 8002110:	0800216b 	.word	0x0800216b
 8002114:	0800216b 	.word	0x0800216b
 8002118:	0800216b 	.word	0x0800216b
 800211c:	0800216b 	.word	0x0800216b
 8002120:	0800216b 	.word	0x0800216b
 8002124:	0800216b 	.word	0x0800216b
 8002128:	0800216b 	.word	0x0800216b
 800212c:	0800216b 	.word	0x0800216b
 8002130:	0800214f 	.word	0x0800214f
 8002134:	2b40      	cmp	r3, #64	; 0x40
 8002136:	d00c      	beq.n	8002152 <errName+0xf6>
 8002138:	e017      	b.n	800216a <errName+0x10e>
		case devTIK:// = 1,
			return "devTIK";
 800213a:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <errName+0x11c>)
 800213c:	e016      	b.n	800216c <errName+0x110>
		case devUART:// = 2,
			return "devUART";
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <errName+0x120>)
 8002140:	e014      	b.n	800216c <errName+0x110>
		case devMEM://= 4,
			return "devMEM";
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <errName+0x124>)
 8002144:	e012      	b.n	800216c <errName+0x110>
		case devRTC:// = 8,
			return "devRTC";
 8002146:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <errName+0x128>)
 8002148:	e010      	b.n	800216c <errName+0x110>
		case devEVT:// = 0x10,
			return "devEVT";
 800214a:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <errName+0x12c>)
 800214c:	e00e      	b.n	800216c <errName+0x110>
		case devSYS:// = 0x20,
			return "devSYS";
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <errName+0x130>)
 8002150:	e00c      	b.n	800216c <errName+0x110>
		case devSPI:// = 0x40,
			return "devSPI";
 8002152:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <errName+0x134>)
 8002154:	e00a      	b.n	800216c <errName+0x110>
		case devLCD:// = 0x80,
			return "devLCD";
 8002156:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <errName+0x138>)
 8002158:	e008      	b.n	800216c <errName+0x110>
		case devRDA:// = 0x100,
			return "devRDA";
 800215a:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <errName+0x13c>)
 800215c:	e006      	b.n	800216c <errName+0x110>
		case devFS:// = 0x200
			return "devFS";
 800215e:	4b0f      	ldr	r3, [pc, #60]	; (800219c <errName+0x140>)
 8002160:	e004      	b.n	800216c <errName+0x110>
#if defined(SET_BLE) || defined(SET_AUDIO)
		case devBLE:// = 0x400,
			return "devBLE";
 8002162:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <errName+0x144>)
 8002164:	e002      	b.n	800216c <errName+0x110>
		case devQUE:// = 0x800
			return "devQUE";
 8002166:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <errName+0x148>)
 8002168:	e000      	b.n	800216c <errName+0x110>
#endif
	}

	return "???";
 800216a:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <errName+0x14c>)
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	08017cb8 	.word	0x08017cb8
 800217c:	08017cc0 	.word	0x08017cc0
 8002180:	08017cc8 	.word	0x08017cc8
 8002184:	08017cd0 	.word	0x08017cd0
 8002188:	08017cd8 	.word	0x08017cd8
 800218c:	08017ce0 	.word	0x08017ce0
 8002190:	08017ce8 	.word	0x08017ce8
 8002194:	08017cf0 	.word	0x08017cf0
 8002198:	08017cf8 	.word	0x08017cf8
 800219c:	08017d00 	.word	0x08017d00
 80021a0:	08017d08 	.word	0x08017d08
 80021a4:	08017d10 	.word	0x08017d10
 80021a8:	08017c48 	.word	0x08017c48

080021ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021b2:	f005 fc24 	bl	80079fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021b6:	f000 f8c5 	bl	8002344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021ba:	f000 fb6b 	bl	8002894 <MX_GPIO_Init>
  MX_TIM4_Init();
 80021be:	f000 fa2b 	bl	8002618 <MX_TIM4_Init>
  MX_DMA_Init();
 80021c2:	f000 fb0d 	bl	80027e0 <MX_DMA_Init>
  MX_RTC_Init();
 80021c6:	f000 f94f 	bl	8002468 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80021ca:	f000 faa9 	bl	8002720 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80021ce:	f000 f9e5 	bl	800259c <MX_SPI2_Init>
  MX_SPI1_Init();
 80021d2:	f000 f9a5 	bl	8002520 <MX_SPI1_Init>
  MX_I2C1_Init();
 80021d6:	f000 f907 	bl	80023e8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80021da:	f000 fad1 	bl	8002780 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80021de:	f000 fa69 	bl	80026b4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */


    if (HAL_TIM_Base_Start_IT(tikPort) != HAL_OK) devError |= devTIK;
 80021e2:	4b43      	ldr	r3, [pc, #268]	; (80022f0 <main+0x144>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f00b f9bc 	bl	800d564 <HAL_TIM_Base_Start_IT>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d006      	beq.n	8002200 <main+0x54>
 80021f2:	4b40      	ldr	r3, [pc, #256]	; (80022f4 <main+0x148>)
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	4b3d      	ldr	r3, [pc, #244]	; (80022f4 <main+0x148>)
 80021fe:	801a      	strh	r2, [r3, #0]

    for (int8_t i = 0; i < 4; i++) {
 8002200:	2300      	movs	r3, #0
 8002202:	71fb      	strb	r3, [r7, #7]
 8002204:	e011      	b.n	800222a <main+0x7e>
    	errLedOn(true);
 8002206:	2001      	movs	r0, #1
 8002208:	f000 fe6a 	bl	8002ee0 <errLedOn>
    	HAL_Delay(100);
 800220c:	2064      	movs	r0, #100	; 0x64
 800220e:	f005 fc2f 	bl	8007a70 <HAL_Delay>
    	errLedOn(false);
 8002212:	2000      	movs	r0, #0
 8002214:	f000 fe64 	bl	8002ee0 <errLedOn>
    	HAL_Delay(100);
 8002218:	2064      	movs	r0, #100	; 0x64
 800221a:	f005 fc29 	bl	8007a70 <HAL_Delay>
    for (int8_t i = 0; i < 4; i++) {
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	3301      	adds	r3, #1
 8002226:	b2db      	uxtb	r3, r3
 8002228:	71fb      	strb	r3, [r7, #7]
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	2b03      	cmp	r3, #3
 8002230:	dde9      	ble.n	8002206 <main+0x5a>
    }

    if (HAL_UART_Receive_IT(cmdPort, &rxByte, 1) != HAL_OK) devError |= devUART;
 8002232:	4b31      	ldr	r3, [pc, #196]	; (80022f8 <main+0x14c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2201      	movs	r2, #1
 8002238:	4930      	ldr	r1, [pc, #192]	; (80022fc <main+0x150>)
 800223a:	4618      	mov	r0, r3
 800223c:	f00b fece 	bl	800dfdc <HAL_UART_Receive_IT>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d006      	beq.n	8002254 <main+0xa8>
 8002246:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <main+0x148>)
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	f043 0302 	orr.w	r3, r3, #2
 800224e:	b29a      	uxth	r2, r3
 8002250:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <main+0x148>)
 8002252:	801a      	strh	r2, [r3, #0]
#if defined(SET_BLE) || defined(SET_AUDIO)
    if (HAL_UART_Receive_IT(blePort, &rxbByte, 1) != HAL_OK) devError |= devBLE;
 8002254:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <main+0x154>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2201      	movs	r2, #1
 800225a:	492a      	ldr	r1, [pc, #168]	; (8002304 <main+0x158>)
 800225c:	4618      	mov	r0, r3
 800225e:	f00b febd 	bl	800dfdc <HAL_UART_Receive_IT>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d006      	beq.n	8002276 <main+0xca>
 8002268:	4b22      	ldr	r3, [pc, #136]	; (80022f4 <main+0x148>)
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002270:	b29a      	uxth	r2, r3
 8002272:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <main+0x148>)
 8002274:	801a      	strh	r2, [r3, #0]
#endif

    set_Date(epoch);
 8002276:	4b24      	ldr	r3, [pc, #144]	; (8002308 <main+0x15c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f000 feda 	bl	8003034 <set_Date>
    //putEvt(evt_Freq);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002280:	f00d facc 	bl	800f81c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of itSem */
  itSemHandle = osSemaphoreNew(1, 1, &itSem_attributes);
 8002284:	4a21      	ldr	r2, [pc, #132]	; (800230c <main+0x160>)
 8002286:	2101      	movs	r1, #1
 8002288:	2001      	movs	r0, #1
 800228a:	f00d fbab 	bl	800f9e4 <osSemaphoreNew>
 800228e:	4603      	mov	r3, r0
 8002290:	4a1f      	ldr	r2, [pc, #124]	; (8002310 <main+0x164>)
 8002292:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of evtQue */
  evtQueHandle = osMessageQueueNew (8, sizeof(rec_evt_t), &evtQue_attributes);
 8002294:	4a1f      	ldr	r2, [pc, #124]	; (8002314 <main+0x168>)
 8002296:	2108      	movs	r1, #8
 8002298:	2008      	movs	r0, #8
 800229a:	f00d fcc3 	bl	800fc24 <osMessageQueueNew>
 800229e:	4603      	mov	r3, r0
 80022a0:	4a1d      	ldr	r2, [pc, #116]	; (8002318 <main+0x16c>)
 80022a2:	6013      	str	r3, [r2, #0]

  /* creation of cmdQue */
  cmdQueHandle = osMessageQueueNew (8, sizeof(rec_msg_t), &cmdQue_attributes);
 80022a4:	4a1d      	ldr	r2, [pc, #116]	; (800231c <main+0x170>)
 80022a6:	2104      	movs	r1, #4
 80022a8:	2008      	movs	r0, #8
 80022aa:	f00d fcbb 	bl	800fc24 <osMessageQueueNew>
 80022ae:	4603      	mov	r3, r0
 80022b0:	4a1b      	ldr	r2, [pc, #108]	; (8002320 <main+0x174>)
 80022b2:	6013      	str	r3, [r2, #0]

  /* creation of ackQue */
  ackQueHandle = osMessageQueueNew (8, sizeof(rec_msg_t), &ackQue_attributes);
 80022b4:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <main+0x178>)
 80022b6:	2104      	movs	r1, #4
 80022b8:	2008      	movs	r0, #8
 80022ba:	f00d fcb3 	bl	800fc24 <osMessageQueueNew>
 80022be:	4603      	mov	r3, r0
 80022c0:	4a19      	ldr	r2, [pc, #100]	; (8002328 <main+0x17c>)
 80022c2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(StartTask, NULL, &defTask_attributes);
 80022c4:	4a19      	ldr	r2, [pc, #100]	; (800232c <main+0x180>)
 80022c6:	2100      	movs	r1, #0
 80022c8:	4819      	ldr	r0, [pc, #100]	; (8002330 <main+0x184>)
 80022ca:	f00d faf3 	bl	800f8b4 <osThreadNew>
 80022ce:	4603      	mov	r3, r0
 80022d0:	4a18      	ldr	r2, [pc, #96]	; (8002334 <main+0x188>)
 80022d2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_Delay(250);
 80022d4:	20fa      	movs	r0, #250	; 0xfa
 80022d6:	f005 fbcb 	bl	8007a70 <HAL_Delay>
  irdTaskHandle = osThreadNew(irdTask, NULL, &irdTask_attributes);
 80022da:	4a17      	ldr	r2, [pc, #92]	; (8002338 <main+0x18c>)
 80022dc:	2100      	movs	r1, #0
 80022de:	4817      	ldr	r0, [pc, #92]	; (800233c <main+0x190>)
 80022e0:	f00d fae8 	bl	800f8b4 <osThreadNew>
 80022e4:	4603      	mov	r3, r0
 80022e6:	4a16      	ldr	r2, [pc, #88]	; (8002340 <main+0x194>)
 80022e8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80022ea:	f00d fabd 	bl	800f868 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80022ee:	e7fe      	b.n	80022ee <main+0x142>
 80022f0:	20000008 	.word	0x20000008
 80022f4:	20001b08 	.word	0x20001b08
 80022f8:	20000010 	.word	0x20000010
 80022fc:	20001b18 	.word	0x20001b18
 8002300:	2000012c 	.word	0x2000012c
 8002304:	200032f2 	.word	0x200032f2
 8002308:	20000018 	.word	0x20000018
 800230c:	08018eec 	.word	0x08018eec
 8002310:	20000e80 	.word	0x20000e80
 8002314:	08018ea4 	.word	0x08018ea4
 8002318:	20000e74 	.word	0x20000e74
 800231c:	08018ebc 	.word	0x08018ebc
 8002320:	20000e78 	.word	0x20000e78
 8002324:	08018ed4 	.word	0x08018ed4
 8002328:	20000e7c 	.word	0x20000e7c
 800232c:	08018e80 	.word	0x08018e80
 8002330:	080040f1 	.word	0x080040f1
 8002334:	20000e70 	.word	0x20000e70
 8002338:	08018efc 	.word	0x08018efc
 800233c:	08003c91 	.word	0x08003c91
 8002340:	20000e84 	.word	0x20000e84

08002344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b096      	sub	sp, #88	; 0x58
 8002348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800234a:	f107 0314 	add.w	r3, r7, #20
 800234e:	2244      	movs	r2, #68	; 0x44
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f011 f914 	bl	8013580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002358:	463b      	mov	r3, r7
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	60da      	str	r2, [r3, #12]
 8002364:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002366:	f44f 7000 	mov.w	r0, #512	; 0x200
 800236a:	f007 fdf3 	bl	8009f54 <HAL_PWREx_ControlVoltageScaling>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002374:	f003 fb62 	bl	8005a3c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002378:	2309      	movs	r3, #9
 800237a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800237c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002380:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002382:	2301      	movs	r3, #1
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002386:	2302      	movs	r3, #2
 8002388:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800238a:	2303      	movs	r3, #3
 800238c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800238e:	2301      	movs	r3, #1
 8002390:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8002392:	2314      	movs	r3, #20
 8002394:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002396:	2307      	movs	r3, #7
 8002398:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800239a:	2302      	movs	r3, #2
 800239c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800239e:	2302      	movs	r3, #2
 80023a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	4618      	mov	r0, r3
 80023a8:	f007 fe72 	bl	800a090 <HAL_RCC_OscConfig>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80023b2:	f003 fb43 	bl	8005a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023b6:	230f      	movs	r3, #15
 80023b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023ba:	2303      	movs	r3, #3
 80023bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023be:	2300      	movs	r3, #0
 80023c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80023ca:	463b      	mov	r3, r7
 80023cc:	2104      	movs	r1, #4
 80023ce:	4618      	mov	r0, r3
 80023d0:	f008 fa3a 	bl	800a848 <HAL_RCC_ClockConfig>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80023da:	f003 fb2f 	bl	8005a3c <Error_Handler>
  }
}
 80023de:	bf00      	nop
 80023e0:	3758      	adds	r7, #88	; 0x58
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <MX_I2C1_Init+0x74>)
 80023ee:	4a1c      	ldr	r2, [pc, #112]	; (8002460 <MX_I2C1_Init+0x78>)
 80023f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702D95;
 80023f2:	4b1a      	ldr	r3, [pc, #104]	; (800245c <MX_I2C1_Init+0x74>)
 80023f4:	4a1b      	ldr	r2, [pc, #108]	; (8002464 <MX_I2C1_Init+0x7c>)
 80023f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80023f8:	4b18      	ldr	r3, [pc, #96]	; (800245c <MX_I2C1_Init+0x74>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023fe:	4b17      	ldr	r3, [pc, #92]	; (800245c <MX_I2C1_Init+0x74>)
 8002400:	2201      	movs	r2, #1
 8002402:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002404:	4b15      	ldr	r3, [pc, #84]	; (800245c <MX_I2C1_Init+0x74>)
 8002406:	2200      	movs	r2, #0
 8002408:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800240a:	4b14      	ldr	r3, [pc, #80]	; (800245c <MX_I2C1_Init+0x74>)
 800240c:	2200      	movs	r2, #0
 800240e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002410:	4b12      	ldr	r3, [pc, #72]	; (800245c <MX_I2C1_Init+0x74>)
 8002412:	2200      	movs	r2, #0
 8002414:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <MX_I2C1_Init+0x74>)
 8002418:	2200      	movs	r2, #0
 800241a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <MX_I2C1_Init+0x74>)
 800241e:	2200      	movs	r2, #0
 8002420:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002422:	480e      	ldr	r0, [pc, #56]	; (800245c <MX_I2C1_Init+0x74>)
 8002424:	f006 f8ba 	bl	800859c <HAL_I2C_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800242e:	f003 fb05 	bl	8005a3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8002432:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002436:	4809      	ldr	r0, [pc, #36]	; (800245c <MX_I2C1_Init+0x74>)
 8002438:	f007 fc72 	bl	8009d20 <HAL_I2CEx_ConfigAnalogFilter>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002442:	f003 fafb 	bl	8005a3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002446:	2100      	movs	r1, #0
 8002448:	4804      	ldr	r0, [pc, #16]	; (800245c <MX_I2C1_Init+0x74>)
 800244a:	f007 fcb4 	bl	8009db6 <HAL_I2CEx_ConfigDigitalFilter>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002454:	f003 faf2 	bl	8005a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20000998 	.word	0x20000998
 8002460:	40005400 	.word	0x40005400
 8002464:	00702d95 	.word	0x00702d95

08002468 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800247c:	2300      	movs	r3, #0
 800247e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002480:	4b25      	ldr	r3, [pc, #148]	; (8002518 <MX_RTC_Init+0xb0>)
 8002482:	4a26      	ldr	r2, [pc, #152]	; (800251c <MX_RTC_Init+0xb4>)
 8002484:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002486:	4b24      	ldr	r3, [pc, #144]	; (8002518 <MX_RTC_Init+0xb0>)
 8002488:	2200      	movs	r2, #0
 800248a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800248c:	4b22      	ldr	r3, [pc, #136]	; (8002518 <MX_RTC_Init+0xb0>)
 800248e:	227f      	movs	r2, #127	; 0x7f
 8002490:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002492:	4b21      	ldr	r3, [pc, #132]	; (8002518 <MX_RTC_Init+0xb0>)
 8002494:	22ff      	movs	r2, #255	; 0xff
 8002496:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002498:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <MX_RTC_Init+0xb0>)
 800249a:	2200      	movs	r2, #0
 800249c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800249e:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <MX_RTC_Init+0xb0>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80024a4:	4b1c      	ldr	r3, [pc, #112]	; (8002518 <MX_RTC_Init+0xb0>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80024aa:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <MX_RTC_Init+0xb0>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80024b0:	4819      	ldr	r0, [pc, #100]	; (8002518 <MX_RTC_Init+0xb0>)
 80024b2:	f009 f8db 	bl	800b66c <HAL_RTC_Init>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80024bc:	f003 fabe 	bl	8005a3c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	2201      	movs	r2, #1
 80024d8:	4619      	mov	r1, r3
 80024da:	480f      	ldr	r0, [pc, #60]	; (8002518 <MX_RTC_Init+0xb0>)
 80024dc:	f009 f941 	bl	800b762 <HAL_RTC_SetTime>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80024e6:	f003 faa9 	bl	8005a3c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80024ea:	2303      	movs	r3, #3
 80024ec:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 80024ee:	2307      	movs	r3, #7
 80024f0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 80024f2:	2306      	movs	r3, #6
 80024f4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 80024f6:	2322      	movs	r3, #34	; 0x22
 80024f8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80024fa:	463b      	mov	r3, r7
 80024fc:	2201      	movs	r2, #1
 80024fe:	4619      	mov	r1, r3
 8002500:	4805      	ldr	r0, [pc, #20]	; (8002518 <MX_RTC_Init+0xb0>)
 8002502:	f009 fa27 	bl	800b954 <HAL_RTC_SetDate>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800250c:	f003 fa96 	bl	8005a3c <Error_Handler>

  //set_Date(epoch);

  /* USER CODE END RTC_Init 2 */

}
 8002510:	bf00      	nop
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000a7c 	.word	0x20000a7c
 800251c:	40002800 	.word	0x40002800

08002520 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002524:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <MX_SPI1_Init+0x74>)
 8002526:	4a1c      	ldr	r2, [pc, #112]	; (8002598 <MX_SPI1_Init+0x78>)
 8002528:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800252a:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <MX_SPI1_Init+0x74>)
 800252c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002530:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002532:	4b18      	ldr	r3, [pc, #96]	; (8002594 <MX_SPI1_Init+0x74>)
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002538:	4b16      	ldr	r3, [pc, #88]	; (8002594 <MX_SPI1_Init+0x74>)
 800253a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800253e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002540:	4b14      	ldr	r3, [pc, #80]	; (8002594 <MX_SPI1_Init+0x74>)
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002546:	4b13      	ldr	r3, [pc, #76]	; (8002594 <MX_SPI1_Init+0x74>)
 8002548:	2200      	movs	r2, #0
 800254a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <MX_SPI1_Init+0x74>)
 800254e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002552:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002554:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <MX_SPI1_Init+0x74>)
 8002556:	2208      	movs	r2, #8
 8002558:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800255a:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <MX_SPI1_Init+0x74>)
 800255c:	2200      	movs	r2, #0
 800255e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <MX_SPI1_Init+0x74>)
 8002562:	2200      	movs	r2, #0
 8002564:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <MX_SPI1_Init+0x74>)
 8002568:	2200      	movs	r2, #0
 800256a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800256c:	4b09      	ldr	r3, [pc, #36]	; (8002594 <MX_SPI1_Init+0x74>)
 800256e:	2207      	movs	r2, #7
 8002570:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002572:	4b08      	ldr	r3, [pc, #32]	; (8002594 <MX_SPI1_Init+0x74>)
 8002574:	2200      	movs	r2, #0
 8002576:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <MX_SPI1_Init+0x74>)
 800257a:	2200      	movs	r2, #0
 800257c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800257e:	4805      	ldr	r0, [pc, #20]	; (8002594 <MX_SPI1_Init+0x74>)
 8002580:	f009 fb8e 	bl	800bca0 <HAL_SPI_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800258a:	f003 fa57 	bl	8005a3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000aa0 	.word	0x20000aa0
 8002598:	40013000 	.word	0x40013000

0800259c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80025a0:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <MX_SPI2_Init+0x74>)
 80025a2:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <MX_SPI2_Init+0x78>)
 80025a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80025a6:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <MX_SPI2_Init+0x74>)
 80025a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80025ae:	4b18      	ldr	r3, [pc, #96]	; (8002610 <MX_SPI2_Init+0x74>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80025b4:	4b16      	ldr	r3, [pc, #88]	; (8002610 <MX_SPI2_Init+0x74>)
 80025b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025ba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025bc:	4b14      	ldr	r3, [pc, #80]	; (8002610 <MX_SPI2_Init+0x74>)
 80025be:	2200      	movs	r2, #0
 80025c0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025c2:	4b13      	ldr	r3, [pc, #76]	; (8002610 <MX_SPI2_Init+0x74>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <MX_SPI2_Init+0x74>)
 80025ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025d0:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <MX_SPI2_Init+0x74>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025d6:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <MX_SPI2_Init+0x74>)
 80025d8:	2200      	movs	r2, #0
 80025da:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <MX_SPI2_Init+0x74>)
 80025de:	2200      	movs	r2, #0
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <MX_SPI2_Init+0x74>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80025e8:	4b09      	ldr	r3, [pc, #36]	; (8002610 <MX_SPI2_Init+0x74>)
 80025ea:	2207      	movs	r2, #7
 80025ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025ee:	4b08      	ldr	r3, [pc, #32]	; (8002610 <MX_SPI2_Init+0x74>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <MX_SPI2_Init+0x74>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025fa:	4805      	ldr	r0, [pc, #20]	; (8002610 <MX_SPI2_Init+0x74>)
 80025fc:	f009 fb50 	bl	800bca0 <HAL_SPI_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002606:	f003 fa19 	bl	8005a3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000b04 	.word	0x20000b04
 8002614:	40003800 	.word	0x40003800

08002618 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800261e:	f107 0310 	add.w	r3, r7, #16
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	609a      	str	r2, [r3, #8]
 800262a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	605a      	str	r2, [r3, #4]
 8002634:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN TIM4_Init 1 */

  // interupt every 10 ms

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002636:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <MX_TIM4_Init+0x94>)
 8002638:	4a1d      	ldr	r2, [pc, #116]	; (80026b0 <MX_TIM4_Init+0x98>)
 800263a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 800263c:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <MX_TIM4_Init+0x94>)
 800263e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002642:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <MX_TIM4_Init+0x94>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800264a:	4b18      	ldr	r3, [pc, #96]	; (80026ac <MX_TIM4_Init+0x94>)
 800264c:	2263      	movs	r2, #99	; 0x63
 800264e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002650:	4b16      	ldr	r3, [pc, #88]	; (80026ac <MX_TIM4_Init+0x94>)
 8002652:	2200      	movs	r2, #0
 8002654:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <MX_TIM4_Init+0x94>)
 8002658:	2280      	movs	r2, #128	; 0x80
 800265a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800265c:	4813      	ldr	r0, [pc, #76]	; (80026ac <MX_TIM4_Init+0x94>)
 800265e:	f00a ff29 	bl	800d4b4 <HAL_TIM_Base_Init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002668:	f003 f9e8 	bl	8005a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800266c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002670:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002672:	f107 0310 	add.w	r3, r7, #16
 8002676:	4619      	mov	r1, r3
 8002678:	480c      	ldr	r0, [pc, #48]	; (80026ac <MX_TIM4_Init+0x94>)
 800267a:	f00b f902 	bl	800d882 <HAL_TIM_ConfigClockSource>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002684:	f003 f9da 	bl	8005a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002688:	2300      	movs	r3, #0
 800268a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800268c:	2300      	movs	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	4619      	mov	r1, r3
 8002694:	4805      	ldr	r0, [pc, #20]	; (80026ac <MX_TIM4_Init+0x94>)
 8002696:	f00b fb19 	bl	800dccc <HAL_TIMEx_MasterConfigSynchronization>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80026a0:	f003 f9cc 	bl	8005a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80026a4:	bf00      	nop
 80026a6:	3720      	adds	r7, #32
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20000c40 	.word	0x20000c40
 80026b0:	40000800 	.word	0x40000800

080026b4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80026c4:	4b14      	ldr	r3, [pc, #80]	; (8002718 <MX_TIM6_Init+0x64>)
 80026c6:	4a15      	ldr	r2, [pc, #84]	; (800271c <MX_TIM6_Init+0x68>)
 80026c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 399;
 80026ca:	4b13      	ldr	r3, [pc, #76]	; (8002718 <MX_TIM6_Init+0x64>)
 80026cc:	f240 128f 	movw	r2, #399	; 0x18f
 80026d0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d2:	4b11      	ldr	r3, [pc, #68]	; (8002718 <MX_TIM6_Init+0x64>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4;
 80026d8:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <MX_TIM6_Init+0x64>)
 80026da:	2204      	movs	r2, #4
 80026dc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026de:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <MX_TIM6_Init+0x64>)
 80026e0:	2280      	movs	r2, #128	; 0x80
 80026e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80026e4:	480c      	ldr	r0, [pc, #48]	; (8002718 <MX_TIM6_Init+0x64>)
 80026e6:	f00a fee5 	bl	800d4b4 <HAL_TIM_Base_Init>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80026f0:	f003 f9a4 	bl	8005a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026f4:	2300      	movs	r3, #0
 80026f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80026fc:	1d3b      	adds	r3, r7, #4
 80026fe:	4619      	mov	r1, r3
 8002700:	4805      	ldr	r0, [pc, #20]	; (8002718 <MX_TIM6_Init+0x64>)
 8002702:	f00b fae3 	bl	800dccc <HAL_TIMEx_MasterConfigSynchronization>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800270c:	f003 f996 	bl	8005a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002710:	bf00      	nop
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	20000c8c 	.word	0x20000c8c
 800271c:	40001000 	.word	0x40001000

08002720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002724:	4b14      	ldr	r3, [pc, #80]	; (8002778 <MX_USART2_UART_Init+0x58>)
 8002726:	4a15      	ldr	r2, [pc, #84]	; (800277c <MX_USART2_UART_Init+0x5c>)
 8002728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 800272a:	4b13      	ldr	r3, [pc, #76]	; (8002778 <MX_USART2_UART_Init+0x58>)
 800272c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8002730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <MX_USART2_UART_Init+0x58>)
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002738:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <MX_USART2_UART_Init+0x58>)
 800273a:	2200      	movs	r2, #0
 800273c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800273e:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <MX_USART2_UART_Init+0x58>)
 8002740:	2200      	movs	r2, #0
 8002742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <MX_USART2_UART_Init+0x58>)
 8002746:	220c      	movs	r2, #12
 8002748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <MX_USART2_UART_Init+0x58>)
 800274c:	2200      	movs	r2, #0
 800274e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002750:	4b09      	ldr	r3, [pc, #36]	; (8002778 <MX_USART2_UART_Init+0x58>)
 8002752:	2200      	movs	r2, #0
 8002754:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002756:	4b08      	ldr	r3, [pc, #32]	; (8002778 <MX_USART2_UART_Init+0x58>)
 8002758:	2200      	movs	r2, #0
 800275a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <MX_USART2_UART_Init+0x58>)
 800275e:	2200      	movs	r2, #0
 8002760:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002762:	4805      	ldr	r0, [pc, #20]	; (8002778 <MX_USART2_UART_Init+0x58>)
 8002764:	f00b fb58 	bl	800de18 <HAL_UART_Init>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800276e:	f003 f965 	bl	8005a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000cd8 	.word	0x20000cd8
 800277c:	40004400 	.word	0x40004400

08002780 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002784:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <MX_USART3_UART_Init+0x58>)
 8002786:	4a15      	ldr	r2, [pc, #84]	; (80027dc <MX_USART3_UART_Init+0x5c>)
 8002788:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800278a:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <MX_USART3_UART_Init+0x58>)
 800278c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002790:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002792:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <MX_USART3_UART_Init+0x58>)
 8002794:	2200      	movs	r2, #0
 8002796:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <MX_USART3_UART_Init+0x58>)
 800279a:	2200      	movs	r2, #0
 800279c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800279e:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <MX_USART3_UART_Init+0x58>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <MX_USART3_UART_Init+0x58>)
 80027a6:	220c      	movs	r2, #12
 80027a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <MX_USART3_UART_Init+0x58>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <MX_USART3_UART_Init+0x58>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <MX_USART3_UART_Init+0x58>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <MX_USART3_UART_Init+0x58>)
 80027be:	2200      	movs	r2, #0
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027c2:	4805      	ldr	r0, [pc, #20]	; (80027d8 <MX_USART3_UART_Init+0x58>)
 80027c4:	f00b fb28 	bl	800de18 <HAL_UART_Init>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80027ce:	f003 f935 	bl	8005a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000d5c 	.word	0x20000d5c
 80027dc:	40004800 	.word	0x40004800

080027e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027e6:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <MX_DMA_Init+0xb0>)
 80027e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ea:	4a29      	ldr	r2, [pc, #164]	; (8002890 <MX_DMA_Init+0xb0>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	6493      	str	r3, [r2, #72]	; 0x48
 80027f2:	4b27      	ldr	r3, [pc, #156]	; (8002890 <MX_DMA_Init+0xb0>)
 80027f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	607b      	str	r3, [r7, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027fe:	4b24      	ldr	r3, [pc, #144]	; (8002890 <MX_DMA_Init+0xb0>)
 8002800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002802:	4a23      	ldr	r2, [pc, #140]	; (8002890 <MX_DMA_Init+0xb0>)
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	6493      	str	r3, [r2, #72]	; 0x48
 800280a:	4b21      	ldr	r3, [pc, #132]	; (8002890 <MX_DMA_Init+0xb0>)
 800280c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8002816:	2200      	movs	r2, #0
 8002818:	2105      	movs	r1, #5
 800281a:	200c      	movs	r0, #12
 800281c:	f005 fa04 	bl	8007c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002820:	200c      	movs	r0, #12
 8002822:	f005 fa1d 	bl	8007c60 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8002826:	2200      	movs	r2, #0
 8002828:	2105      	movs	r1, #5
 800282a:	200e      	movs	r0, #14
 800282c:	f005 f9fc 	bl	8007c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002830:	200e      	movs	r0, #14
 8002832:	f005 fa15 	bl	8007c60 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8002836:	2200      	movs	r2, #0
 8002838:	2105      	movs	r1, #5
 800283a:	200f      	movs	r0, #15
 800283c:	f005 f9f4 	bl	8007c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002840:	200f      	movs	r0, #15
 8002842:	f005 fa0d 	bl	8007c60 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8002846:	2200      	movs	r2, #0
 8002848:	2105      	movs	r1, #5
 800284a:	2010      	movs	r0, #16
 800284c:	f005 f9ec 	bl	8007c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002850:	2010      	movs	r0, #16
 8002852:	f005 fa05 	bl	8007c60 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	2105      	movs	r1, #5
 800285a:	2011      	movs	r0, #17
 800285c:	f005 f9e4 	bl	8007c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002860:	2011      	movs	r0, #17
 8002862:	f005 f9fd 	bl	8007c60 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	2105      	movs	r1, #5
 800286a:	203b      	movs	r0, #59	; 0x3b
 800286c:	f005 f9dc 	bl	8007c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002870:	203b      	movs	r0, #59	; 0x3b
 8002872:	f005 f9f5 	bl	8007c60 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 5, 0);
 8002876:	2200      	movs	r2, #0
 8002878:	2105      	movs	r1, #5
 800287a:	2044      	movs	r0, #68	; 0x44
 800287c:	f005 f9d4 	bl	8007c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8002880:	2044      	movs	r0, #68	; 0x44
 8002882:	f005 f9ed 	bl	8007c60 <HAL_NVIC_EnableIRQ>

}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000

08002894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289a:	f107 0314 	add.w	r3, r7, #20
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	60da      	str	r2, [r3, #12]
 80028a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028aa:	4b80      	ldr	r3, [pc, #512]	; (8002aac <MX_GPIO_Init+0x218>)
 80028ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ae:	4a7f      	ldr	r2, [pc, #508]	; (8002aac <MX_GPIO_Init+0x218>)
 80028b0:	f043 0304 	orr.w	r3, r3, #4
 80028b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028b6:	4b7d      	ldr	r3, [pc, #500]	; (8002aac <MX_GPIO_Init+0x218>)
 80028b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028c2:	4b7a      	ldr	r3, [pc, #488]	; (8002aac <MX_GPIO_Init+0x218>)
 80028c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c6:	4a79      	ldr	r2, [pc, #484]	; (8002aac <MX_GPIO_Init+0x218>)
 80028c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ce:	4b77      	ldr	r3, [pc, #476]	; (8002aac <MX_GPIO_Init+0x218>)
 80028d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028da:	4b74      	ldr	r3, [pc, #464]	; (8002aac <MX_GPIO_Init+0x218>)
 80028dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028de:	4a73      	ldr	r2, [pc, #460]	; (8002aac <MX_GPIO_Init+0x218>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028e6:	4b71      	ldr	r3, [pc, #452]	; (8002aac <MX_GPIO_Init+0x218>)
 80028e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f2:	4b6e      	ldr	r3, [pc, #440]	; (8002aac <MX_GPIO_Init+0x218>)
 80028f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f6:	4a6d      	ldr	r2, [pc, #436]	; (8002aac <MX_GPIO_Init+0x218>)
 80028f8:	f043 0302 	orr.w	r3, r3, #2
 80028fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028fe:	4b6b      	ldr	r3, [pc, #428]	; (8002aac <MX_GPIO_Init+0x218>)
 8002900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	607b      	str	r3, [r7, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800290a:	4b68      	ldr	r3, [pc, #416]	; (8002aac <MX_GPIO_Init+0x218>)
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	4a67      	ldr	r2, [pc, #412]	; (8002aac <MX_GPIO_Init+0x218>)
 8002910:	f043 0308 	orr.w	r3, r3, #8
 8002914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002916:	4b65      	ldr	r3, [pc, #404]	; (8002aac <MX_GPIO_Init+0x218>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISPLAY_ON_Pin|ERR_LED_Pin, GPIO_PIN_RESET);
 8002922:	2200      	movs	r2, #0
 8002924:	2109      	movs	r1, #9
 8002926:	4862      	ldr	r0, [pc, #392]	; (8002ab0 <MX_GPIO_Init+0x21c>)
 8002928:	f005 fdee 	bl	8008508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIK_LED_GPIO_Port, TIK_LED_Pin, GPIO_PIN_RESET);
 800292c:	2200      	movs	r2, #0
 800292e:	2102      	movs	r1, #2
 8002930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002934:	f005 fde8 	bl	8008508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002938:	2201      	movs	r2, #1
 800293a:	2110      	movs	r1, #16
 800293c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002940:	f005 fde2 	bl	8008508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|SPI1_DC_Pin, GPIO_PIN_SET);
 8002944:	2201      	movs	r2, #1
 8002946:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 800294a:	485a      	ldr	r0, [pc, #360]	; (8002ab4 <MX_GPIO_Init+0x220>)
 800294c:	f005 fddc 	bl	8008508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8002950:	2201      	movs	r2, #1
 8002952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002956:	4856      	ldr	r0, [pc, #344]	; (8002ab0 <MX_GPIO_Init+0x21c>)
 8002958:	f005 fdd6 	bl	8008508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_SET);
 800295c:	2201      	movs	r2, #1
 800295e:	2104      	movs	r1, #4
 8002960:	4855      	ldr	r0, [pc, #340]	; (8002ab8 <MX_GPIO_Init+0x224>)
 8002962:	f005 fdd1 	bl	8008508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DISPLAY_ON_Pin */
  GPIO_InitStruct.Pin = DISPLAY_ON_Pin;
 8002966:	2301      	movs	r3, #1
 8002968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800296a:	2301      	movs	r3, #1
 800296c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800296e:	2302      	movs	r3, #2
 8002970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002972:	2300      	movs	r3, #0
 8002974:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPLAY_ON_GPIO_Port, &GPIO_InitStruct);
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	4619      	mov	r1, r3
 800297c:	484c      	ldr	r0, [pc, #304]	; (8002ab0 <MX_GPIO_Init+0x21c>)
 800297e:	f005 fc01 	bl	8008184 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 8002982:	2306      	movs	r3, #6
 8002984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002986:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800298a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800298c:	2301      	movs	r3, #1
 800298e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	4619      	mov	r1, r3
 8002996:	4846      	ldr	r0, [pc, #280]	; (8002ab0 <MX_GPIO_Init+0x21c>)
 8002998:	f005 fbf4 	bl	8008184 <HAL_GPIO_Init>

  /*Configure GPIO pin : ERR_LED_Pin */
  GPIO_InitStruct.Pin = ERR_LED_Pin;
 800299c:	2308      	movs	r3, #8
 800299e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a0:	2301      	movs	r3, #1
 80029a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80029a8:	2301      	movs	r3, #1
 80029aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERR_LED_GPIO_Port, &GPIO_InitStruct);
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	4619      	mov	r1, r3
 80029b2:	483f      	ldr	r0, [pc, #252]	; (8002ab0 <MX_GPIO_Init+0x21c>)
 80029b4:	f005 fbe6 	bl	8008184 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIK_LED_Pin */
  GPIO_InitStruct.Pin = TIK_LED_Pin;
 80029b8:	2302      	movs	r3, #2
 80029ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029bc:	2301      	movs	r3, #1
 80029be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c4:	2300      	movs	r3, #0
 80029c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIK_LED_GPIO_Port, &GPIO_InitStruct);
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	4619      	mov	r1, r3
 80029ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029d2:	f005 fbd7 	bl	8008184 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80029d6:	2310      	movs	r3, #16
 80029d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029da:	2301      	movs	r3, #1
 80029dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029e2:	2302      	movs	r3, #2
 80029e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80029e6:	f107 0314 	add.w	r3, r7, #20
 80029ea:	4619      	mov	r1, r3
 80029ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029f0:	f005 fbc8 	bl	8008184 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80029f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029fa:	2301      	movs	r3, #1
 80029fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029fe:	2301      	movs	r3, #1
 8002a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a02:	2302      	movs	r3, #2
 8002a04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002a06:	f107 0314 	add.w	r3, r7, #20
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4829      	ldr	r0, [pc, #164]	; (8002ab4 <MX_GPIO_Init+0x220>)
 8002a0e:	f005 fbb9 	bl	8008184 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRED_Pin */
  GPIO_InitStruct.Pin = IRED_Pin;
 8002a12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRED_GPIO_Port, &GPIO_InitStruct);
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	4619      	mov	r1, r3
 8002a26:	4822      	ldr	r0, [pc, #136]	; (8002ab0 <MX_GPIO_Init+0x21c>)
 8002a28:	f005 fbac 	bl	8008184 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8002a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a32:	2301      	movs	r3, #1
 8002a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a36:	2301      	movs	r3, #1
 8002a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8002a3e:	f107 0314 	add.w	r3, r7, #20
 8002a42:	4619      	mov	r1, r3
 8002a44:	481a      	ldr	r0, [pc, #104]	; (8002ab0 <MX_GPIO_Init+0x21c>)
 8002a46:	f005 fb9d 	bl	8008184 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_RST_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin;
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a52:	2301      	movs	r3, #1
 8002a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a56:	2302      	movs	r3, #2
 8002a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_RST_GPIO_Port, &GPIO_InitStruct);
 8002a5a:	f107 0314 	add.w	r3, r7, #20
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4815      	ldr	r0, [pc, #84]	; (8002ab8 <MX_GPIO_Init+0x224>)
 8002a62:	f005 fb8f 	bl	8008184 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_DC_Pin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin;
 8002a66:	2320      	movs	r3, #32
 8002a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a72:	2302      	movs	r3, #2
 8002a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_DC_GPIO_Port, &GPIO_InitStruct);
 8002a76:	f107 0314 	add.w	r3, r7, #20
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	480d      	ldr	r0, [pc, #52]	; (8002ab4 <MX_GPIO_Init+0x220>)
 8002a7e:	f005 fb81 	bl	8008184 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002a82:	2200      	movs	r2, #0
 8002a84:	2105      	movs	r1, #5
 8002a86:	2007      	movs	r0, #7
 8002a88:	f005 f8ce 	bl	8007c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002a8c:	2007      	movs	r0, #7
 8002a8e:	f005 f8e7 	bl	8007c60 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002a92:	2200      	movs	r2, #0
 8002a94:	2105      	movs	r1, #5
 8002a96:	2008      	movs	r0, #8
 8002a98:	f005 f8c6 	bl	8007c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002a9c:	2008      	movs	r0, #8
 8002a9e:	f005 f8df 	bl	8007c60 <HAL_NVIC_EnableIRQ>

}
 8002aa2:	bf00      	nop
 8002aa4:	3728      	adds	r7, #40	; 0x28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	48000800 	.word	0x48000800
 8002ab4:	48000400 	.word	0x48000400
 8002ab8:	48000c00 	.word	0x48000c00

08002abc <hexToBin>:

//-------------------------------------------------------------------------------------------
//      Преобразует два символа строки из hex-формата в двоичный
//
uint8_t hexToBin(char *sc)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
char st = 0, ml = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	73fb      	strb	r3, [r7, #15]
 8002ac8:	2300      	movs	r3, #0
 8002aca:	73bb      	strb	r3, [r7, #14]

	if ((sc[0] >= '0') && (sc[0] <= '9')) st = (sc[0] - 0x30);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b2f      	cmp	r3, #47	; 0x2f
 8002ad2:	d908      	bls.n	8002ae6 <hexToBin+0x2a>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b39      	cmp	r3, #57	; 0x39
 8002ada:	d804      	bhi.n	8002ae6 <hexToBin+0x2a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	3b30      	subs	r3, #48	; 0x30
 8002ae2:	73fb      	strb	r3, [r7, #15]
 8002ae4:	e018      	b.n	8002b18 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'A') && (sc[0] <= 'F')) st = (sc[0] - 0x37);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d908      	bls.n	8002b00 <hexToBin+0x44>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b46      	cmp	r3, #70	; 0x46
 8002af4:	d804      	bhi.n	8002b00 <hexToBin+0x44>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	3b37      	subs	r3, #55	; 0x37
 8002afc:	73fb      	strb	r3, [r7, #15]
 8002afe:	e00b      	b.n	8002b18 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'a') && (sc[0] <= 'f')) st = (sc[0] - 0x57);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b60      	cmp	r3, #96	; 0x60
 8002b06:	d907      	bls.n	8002b18 <hexToBin+0x5c>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b66      	cmp	r3, #102	; 0x66
 8002b0e:	d803      	bhi.n	8002b18 <hexToBin+0x5c>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	3b57      	subs	r3, #87	; 0x57
 8002b16:	73fb      	strb	r3, [r7, #15]

	if ((sc[1] >= '0') && (sc[1] <= '9')) ml = (sc[1] - 0x30);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b2f      	cmp	r3, #47	; 0x2f
 8002b20:	d90a      	bls.n	8002b38 <hexToBin+0x7c>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3301      	adds	r3, #1
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b39      	cmp	r3, #57	; 0x39
 8002b2a:	d805      	bhi.n	8002b38 <hexToBin+0x7c>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	3b30      	subs	r3, #48	; 0x30
 8002b34:	73bb      	strb	r3, [r7, #14]
 8002b36:	e01e      	b.n	8002b76 <hexToBin+0xba>
	else
	if ((sc[1] >= 'A') && (sc[1] <= 'F')) ml = (sc[1] - 0x37);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b40      	cmp	r3, #64	; 0x40
 8002b40:	d90a      	bls.n	8002b58 <hexToBin+0x9c>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3301      	adds	r3, #1
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b46      	cmp	r3, #70	; 0x46
 8002b4a:	d805      	bhi.n	8002b58 <hexToBin+0x9c>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	3b37      	subs	r3, #55	; 0x37
 8002b54:	73bb      	strb	r3, [r7, #14]
 8002b56:	e00e      	b.n	8002b76 <hexToBin+0xba>
	else
	if ((sc[1] >= 'a') && (sc[1] <= 'f')) ml = (sc[1] - 0x57);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b60      	cmp	r3, #96	; 0x60
 8002b60:	d909      	bls.n	8002b76 <hexToBin+0xba>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3301      	adds	r3, #1
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b66      	cmp	r3, #102	; 0x66
 8002b6a:	d804      	bhi.n	8002b76 <hexToBin+0xba>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	3b57      	subs	r3, #87	; 0x57
 8002b74:	73bb      	strb	r3, [r7, #14]

	return ((st << 4) | (ml & 0x0f));
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	b25a      	sxtb	r2, r3
 8002b7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	b25b      	sxtb	r3, r3
 8002b86:	4313      	orrs	r3, r2
 8002b88:	b25b      	sxtb	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3

}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <getQueCount>:
//-------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------
uint32_t getQueCount(osMessageQueueId_t que)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
	return osMessageQueueGetCount(que);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f00d f971 	bl	800fe88 <osMessageQueueGetCount>
 8002ba6:	4603      	mov	r3, r0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <nameStation>:
//-------------------------------------------------------------------------------------------
#ifdef SET_DISPLAY

//-------------------------------------------------------------------------------------------
const char *nameStation(float fr)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	ed87 0a01 	vstr	s0, [r7, #4]
int8_t ik = -1;
 8002bba:	23ff      	movs	r3, #255	; 0xff
 8002bbc:	73fb      	strb	r3, [r7, #15]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	73bb      	strb	r3, [r7, #14]
 8002bc2:	e01b      	b.n	8002bfc <nameStation+0x4c>
		if (list[i].freq == fr) {
 8002bc4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002bc8:	491a      	ldr	r1, [pc, #104]	; (8002c34 <nameStation+0x84>)
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002bd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bdc:	ee07 3a10 	vmov	s14, r3
 8002be0:	eef4 7a47 	vcmp.f32	s15, s14
 8002be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be8:	d102      	bne.n	8002bf0 <nameStation+0x40>
			ik = i;
 8002bea:	7bbb      	ldrb	r3, [r7, #14]
 8002bec:	73fb      	strb	r3, [r7, #15]
			break;
 8002bee:	e009      	b.n	8002c04 <nameStation+0x54>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 8002bf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	73bb      	strb	r3, [r7, #14]
 8002bfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c00:	2b18      	cmp	r3, #24
 8002c02:	dddf      	ble.n	8002bc4 <nameStation+0x14>
		}
	}

	if (ik != -1) return list[ik].name;
 8002c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c0c:	d009      	beq.n	8002c22 <nameStation+0x72>
 8002c0e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4a06      	ldr	r2, [pc, #24]	; (8002c34 <nameStation+0x84>)
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3305      	adds	r3, #5
 8002c20:	e001      	b.n	8002c26 <nameStation+0x76>
			 else return noneStation;
 8002c22:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <nameStation+0x88>)
 8002c24:	681b      	ldr	r3, [r3, #0]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20002f6c 	.word	0x20002f6c
 8002c38:	20000118 	.word	0x20000118

08002c3c <getNextList>:
//-------------------------------------------------------------------------------------------
float getNextList(float fr, uint8_t up, uint8_t *band)
{
 8002c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c40:	b08e      	sub	sp, #56	; 0x38
 8002c42:	af08      	add	r7, sp, #32
 8002c44:	ed87 0a03 	vstr	s0, [r7, #12]
 8002c48:	4603      	mov	r3, r0
 8002c4a:	6079      	str	r1, [r7, #4]
 8002c4c:	72fb      	strb	r3, [r7, #11]
float ret = fr;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	613b      	str	r3, [r7, #16]
int8_t ik = -1;
 8002c52:	23ff      	movs	r3, #255	; 0xff
 8002c54:	75fb      	strb	r3, [r7, #23]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 8002c56:	2300      	movs	r3, #0
 8002c58:	75bb      	strb	r3, [r7, #22]
 8002c5a:	e01b      	b.n	8002c94 <getNextList+0x58>
		if (list[i].freq == fr) {
 8002c5c:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8002c60:	4965      	ldr	r1, [pc, #404]	; (8002df8 <getNextList+0x1bc>)
 8002c62:	4613      	mov	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002c70:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c74:	ee07 3a10 	vmov	s14, r3
 8002c78:	eef4 7a47 	vcmp.f32	s15, s14
 8002c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c80:	d102      	bne.n	8002c88 <getNextList+0x4c>
			ik = i;
 8002c82:	7dbb      	ldrb	r3, [r7, #22]
 8002c84:	75fb      	strb	r3, [r7, #23]
			break;
 8002c86:	e009      	b.n	8002c9c <getNextList+0x60>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 8002c88:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	3301      	adds	r3, #1
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	75bb      	strb	r3, [r7, #22]
 8002c94:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002c98:	2b18      	cmp	r3, #24
 8002c9a:	dddf      	ble.n	8002c5c <getNextList+0x20>
		}
	}
	if (ik != -1) {
 8002c9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ca4:	d01b      	beq.n	8002cde <getNextList+0xa2>
		if (up) {
 8002ca6:	7afb      	ldrb	r3, [r7, #11]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <getNextList+0x86>
			if (++ik == MAX_LIST) ik = 0;
 8002cac:	7dfb      	ldrb	r3, [r7, #23]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	75fb      	strb	r3, [r7, #23]
 8002cb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cb8:	2b19      	cmp	r3, #25
 8002cba:	d161      	bne.n	8002d80 <getNextList+0x144>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	75fb      	strb	r3, [r7, #23]
 8002cc0:	e05e      	b.n	8002d80 <getNextList+0x144>
		} else {
			if (ik != 0) ik--; else ik = MAX_LIST - 1;
 8002cc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d006      	beq.n	8002cd8 <getNextList+0x9c>
 8002cca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	75fb      	strb	r3, [r7, #23]
 8002cd6:	e053      	b.n	8002d80 <getNextList+0x144>
 8002cd8:	2318      	movs	r3, #24
 8002cda:	75fb      	strb	r3, [r7, #23]
 8002cdc:	e050      	b.n	8002d80 <getNextList+0x144>
		}
	} else {
		if (up) {// seek_up
 8002cde:	7afb      	ldrb	r3, [r7, #11]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d023      	beq.n	8002d2c <getNextList+0xf0>
			for (int8_t i = ik; i < MAX_LIST; i++) {
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
 8002ce6:	757b      	strb	r3, [r7, #21]
 8002ce8:	e01b      	b.n	8002d22 <getNextList+0xe6>
				if (list[i].freq > fr) {
 8002cea:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002cee:	4942      	ldr	r1, [pc, #264]	; (8002df8 <getNextList+0x1bc>)
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002cfe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d02:	ee07 3a10 	vmov	s14, r3
 8002d06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d0e:	d502      	bpl.n	8002d16 <getNextList+0xda>
					ik = i;
 8002d10:	7d7b      	ldrb	r3, [r7, #21]
 8002d12:	75fb      	strb	r3, [r7, #23]
					break;
 8002d14:	e02d      	b.n	8002d72 <getNextList+0x136>
			for (int8_t i = ik; i < MAX_LIST; i++) {
 8002d16:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	757b      	strb	r3, [r7, #21]
 8002d22:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002d26:	2b18      	cmp	r3, #24
 8002d28:	dddf      	ble.n	8002cea <getNextList+0xae>
 8002d2a:	e022      	b.n	8002d72 <getNextList+0x136>
				}
			}
		} else {// seek_down
			for (int8_t i = ik; i <= 0; i--) {
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	753b      	strb	r3, [r7, #20]
 8002d30:	e01b      	b.n	8002d6a <getNextList+0x12e>
				if (list[i].freq < fr) {
 8002d32:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002d36:	4930      	ldr	r1, [pc, #192]	; (8002df8 <getNextList+0x1bc>)
 8002d38:	4613      	mov	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002d46:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d4a:	ee07 3a10 	vmov	s14, r3
 8002d4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d56:	dd02      	ble.n	8002d5e <getNextList+0x122>
					ik = i;
 8002d58:	7d3b      	ldrb	r3, [r7, #20]
 8002d5a:	75fb      	strb	r3, [r7, #23]
					break;
 8002d5c:	e009      	b.n	8002d72 <getNextList+0x136>
			for (int8_t i = ik; i <= 0; i--) {
 8002d5e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	753b      	strb	r3, [r7, #20]
 8002d6a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	dddf      	ble.n	8002d32 <getNextList+0xf6>
				}
			}
		}
		if (ik == -1) ik = 0;
 8002d72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d7a:	d101      	bne.n	8002d80 <getNextList+0x144>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	75fb      	strb	r3, [r7, #23]
	}
	ret = list[ik].freq;
 8002d80:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002d84:	491c      	ldr	r1, [pc, #112]	; (8002df8 <getNextList+0x1bc>)
 8002d86:	4613      	mov	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002d94:	613b      	str	r3, [r7, #16]
	*band = list[ik].band;
 8002d96:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002d9a:	4917      	ldr	r1, [pc, #92]	; (8002df8 <getNextList+0x1bc>)
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	781a      	ldrb	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	701a      	strb	r2, [r3, #0]
	Report(1, "[%s] up=%u ik=%d, fr=%.1f ret=%.1f band=%u\r\n", __func__, up, ik, fr, ret, *band);
 8002dac:	f897 800b 	ldrb.w	r8, [r7, #11]
 8002db0:	f997 6017 	ldrsb.w	r6, [r7, #23]
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f7fd fbc7 	bl	8000548 <__aeabi_f2d>
 8002dba:	4604      	mov	r4, r0
 8002dbc:	460d      	mov	r5, r1
 8002dbe:	6938      	ldr	r0, [r7, #16]
 8002dc0:	f7fd fbc2 	bl	8000548 <__aeabi_f2d>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	7809      	ldrb	r1, [r1, #0]
 8002dcc:	9106      	str	r1, [sp, #24]
 8002dce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002dd2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002dd6:	9600      	str	r6, [sp, #0]
 8002dd8:	4643      	mov	r3, r8
 8002dda:	4a08      	ldr	r2, [pc, #32]	; (8002dfc <getNextList+0x1c0>)
 8002ddc:	4908      	ldr	r1, [pc, #32]	; (8002e00 <getNextList+0x1c4>)
 8002dde:	2001      	movs	r0, #1
 8002de0:	f000 fa22 	bl	8003228 <Report>

	return ret;
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	ee07 3a90 	vmov	s15, r3
}
 8002dea:	eeb0 0a67 	vmov.f32	s0, s15
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002df6:	bf00      	nop
 8002df8:	20002f6c 	.word	0x20002f6c
 8002dfc:	080193b8 	.word	0x080193b8
 8002e00:	08017d18 	.word	0x08017d18

08002e04 <showLine>:
//-------------------------------------------------------------------------------------------
void showLine(char *msg, uint16_t lin, int *last_len, bool update)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	; 0x28
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	607a      	str	r2, [r7, #4]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	460b      	mov	r3, r1
 8002e12:	817b      	strh	r3, [r7, #10]
 8002e14:	4613      	mov	r3, r2
 8002e16:	727b      	strb	r3, [r7, #9]
int il = strlen(msg);
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f7fd f9d9 	bl	80001d0 <strlen>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	617b      	str	r3, [r7, #20]
int xf = ( (SCREEN_WIDTH - (lfnt->FontWidth * il) ) >> 1);// & 0x7f;
 8002e22:	4b2e      	ldr	r3, [pc, #184]	; (8002edc <showLine+0xd8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	fb02 f303 	mul.w	r3, r2, r3
 8002e30:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002e34:	105b      	asrs	r3, r3, #1
 8002e36:	61fb      	str	r3, [r7, #28]
bool yes = false;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	76fb      	strb	r3, [r7, #27]

	if (*last_len > il) {
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	da0d      	bge.n	8002e62 <showLine+0x5e>
		ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 8002e46:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002e4a:	4b24      	ldr	r3, [pc, #144]	; (8002edc <showLine+0xd8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	785b      	ldrb	r3, [r3, #1]
 8002e50:	b21b      	sxth	r3, r3
 8002e52:	2200      	movs	r2, #0
 8002e54:	9200      	str	r2, [sp, #0]
 8002e56:	227c      	movs	r2, #124	; 0x7c
 8002e58:	2002      	movs	r0, #2
 8002e5a:	f7fe ffe2 	bl	8001e22 <ST7565_DrawFilledRectangle>
		yes = true;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	76fb      	strb	r3, [r7, #27]
	}
	*last_len = il;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	601a      	str	r2, [r3, #0]
	if (*msg > 0x7f) {
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	b25b      	sxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	da03      	bge.n	8002e7a <showLine+0x76>
		xf += il;
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	4413      	add	r3, r2
 8002e78:	61fb      	str	r3, [r7, #28]
	}
	if (!yes) ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 8002e7a:	7efb      	ldrb	r3, [r7, #27]
 8002e7c:	f083 0301 	eor.w	r3, r3, #1
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00b      	beq.n	8002e9e <showLine+0x9a>
 8002e86:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002e8a:	4b14      	ldr	r3, [pc, #80]	; (8002edc <showLine+0xd8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	785b      	ldrb	r3, [r3, #1]
 8002e90:	b21b      	sxth	r3, r3
 8002e92:	2200      	movs	r2, #0
 8002e94:	9200      	str	r2, [sp, #0]
 8002e96:	227c      	movs	r2, #124	; 0x7c
 8002e98:	2002      	movs	r0, #2
 8002e9a:	f7fe ffc2 	bl	8001e22 <ST7565_DrawFilledRectangle>

	if ((!xf) || (xf > (SCREEN_WIDTH - 4))) xf = 1;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <showLine+0xa6>
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	2b7c      	cmp	r3, #124	; 0x7c
 8002ea8:	dd01      	ble.n	8002eae <showLine+0xaa>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	61fb      	str	r3, [r7, #28]
	ST7565_Print(xf, lin, msg, lfnt, 1, PIX_ON);
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	b218      	sxth	r0, r3
 8002eb2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <showLine+0xd8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	9201      	str	r2, [sp, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	9200      	str	r2, [sp, #0]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	f7fe fd54 	bl	8001970 <ST7565_Print>
	if (update) ST7565_Update();
 8002ec8:	7a7b      	ldrb	r3, [r7, #9]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <showLine+0xce>
 8002ece:	f7fe fb9f 	bl	8001610 <ST7565_Update>
}
 8002ed2:	bf00      	nop
 8002ed4:	3720      	adds	r7, #32
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20002f48 	.word	0x20002f48

08002ee0 <errLedOn>:
#endif
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	71fb      	strb	r3, [r7, #7]
	if (on)
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <errLedOn+0x1c>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_SET);//LED ON
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	2108      	movs	r1, #8
 8002ef4:	4806      	ldr	r0, [pc, #24]	; (8002f10 <errLedOn+0x30>)
 8002ef6:	f005 fb07 	bl	8008508 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
}
 8002efa:	e004      	b.n	8002f06 <errLedOn+0x26>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
 8002efc:	2200      	movs	r2, #0
 8002efe:	2108      	movs	r1, #8
 8002f00:	4803      	ldr	r0, [pc, #12]	; (8002f10 <errLedOn+0x30>)
 8002f02:	f005 fb01 	bl	8008508 <HAL_GPIO_WritePin>
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	48000800 	.word	0x48000800

08002f14 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
	return secCounter;
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <get_secCounter+0x14>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20001b0c 	.word	0x20001b0c

08002f2c <get_msCounter>:
{
	secCounter++;
}
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
	return msCounter;
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <get_msCounter+0x18>)
 8002f32:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20001b10 	.word	0x20001b10

08002f48 <get_tmr>:
{
	msCounter++;
}
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 8002f50:	f7ff ffe0 	bl	8002f14 <get_secCounter>
 8002f54:	4602      	mov	r2, r0
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4413      	add	r3, r2
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 8002f6a:	f7ff ffd3 	bl	8002f14 <get_secCounter>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4293      	cmp	r3, r2
 8002f74:	bf94      	ite	ls
 8002f76:	2301      	movls	r3, #1
 8002f78:	2300      	movhi	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <get_mstmr>:
//------------------------------------------------------------------------------------------
uint64_t get_mstmr(uint64_t hs)
{
 8002f84:	b5b0      	push	{r4, r5, r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	e9c7 0100 	strd	r0, r1, [r7]
	return (get_msCounter() + hs);
 8002f8e:	f7ff ffcd 	bl	8002f2c <get_msCounter>
 8002f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f96:	1884      	adds	r4, r0, r2
 8002f98:	eb41 0503 	adc.w	r5, r1, r3
 8002f9c:	4622      	mov	r2, r4
 8002f9e:	462b      	mov	r3, r5
}
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bdb0      	pop	{r4, r5, r7, pc}

08002faa <check_mstmr>:
//------------------------------------------------------------------------------------------
bool check_mstmr(uint64_t hs)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	e9c7 0100 	strd	r0, r1, [r7]
	return (get_msCounter() >= hs ? true : false);
 8002fb4:	f7ff ffba 	bl	8002f2c <get_msCounter>
 8002fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fbc:	4290      	cmp	r0, r2
 8002fbe:	eb71 0303 	sbcs.w	r3, r1, r3
 8002fc2:	bf2c      	ite	cs
 8002fc4:	2301      	movcs	r3, #1
 8002fc6:	2300      	movcc	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <toUppers>:
//------------------------------------------------------------------------------------------
void toUppers(char *st)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
int i;

    for (i = 0; i < strlen(st); i++) *(st + i) = toupper(*(st + i));
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	e019      	b.n	8003016 <toUppers+0x42>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	72fb      	strb	r3, [r7, #11]
 8002fec:	7afb      	ldrb	r3, [r7, #11]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	4a0f      	ldr	r2, [pc, #60]	; (8003030 <toUppers+0x5c>)
 8002ff2:	4413      	add	r3, r2
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d102      	bne.n	8003004 <toUppers+0x30>
 8002ffe:	7afb      	ldrb	r3, [r7, #11]
 8003000:	3b20      	subs	r3, #32
 8003002:	e000      	b.n	8003006 <toUppers+0x32>
 8003004:	7afb      	ldrb	r3, [r7, #11]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	440a      	add	r2, r1
 800300c:	b2db      	uxtb	r3, r3
 800300e:	7013      	strb	r3, [r2, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	3301      	adds	r3, #1
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fd f8da 	bl	80001d0 <strlen>
 800301c:	4602      	mov	r2, r0
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	429a      	cmp	r2, r3
 8003022:	d8de      	bhi.n	8002fe2 <toUppers+0xe>
}
 8003024:	bf00      	nop
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	08019438 	.word	0x08019438

08003034 <set_Date>:
//------------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b094      	sub	sp, #80	; 0x50
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	2000      	movs	r0, #0
 8003040:	460a      	mov	r2, r1
 8003042:	4603      	mov	r3, r0
 8003044:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 8003048:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800304c:	f107 0320 	add.w	r3, r7, #32
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f010 f9a2 	bl	801339c <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 8003058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800305a:	b2db      	uxtb	r3, r3
 800305c:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 800305e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003060:	b2db      	uxtb	r3, r3
 8003062:	3301      	adds	r3, #1
 8003064:	b2db      	uxtb	r3, r3
 8003066:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 8003068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306a:	b2db      	uxtb	r3, r3
 800306c:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 800306e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003070:	b2db      	uxtb	r3, r3
 8003072:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 8003074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003076:	b2da      	uxtb	r2, r3
 8003078:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <set_Date+0xb0>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	4413      	add	r3, r2
 800307e:	b2db      	uxtb	r3, r3
 8003080:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	b2db      	uxtb	r3, r3
 8003086:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 8003088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308a:	b2db      	uxtb	r3, r3
 800308c:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 800308e:	f107 030c 	add.w	r3, r7, #12
 8003092:	2200      	movs	r2, #0
 8003094:	4619      	mov	r1, r3
 8003096:	4814      	ldr	r0, [pc, #80]	; (80030e8 <set_Date+0xb4>)
 8003098:	f008 fb63 	bl	800b762 <HAL_RTC_SetTime>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d007      	beq.n	80030b2 <set_Date+0x7e>
 80030a2:	4b12      	ldr	r3, [pc, #72]	; (80030ec <set_Date+0xb8>)
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	f043 0308 	orr.w	r3, r3, #8
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	4b0f      	ldr	r3, [pc, #60]	; (80030ec <set_Date+0xb8>)
 80030ae:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 80030b0:	e014      	b.n	80030dc <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 80030b2:	f107 0308 	add.w	r3, r7, #8
 80030b6:	2200      	movs	r2, #0
 80030b8:	4619      	mov	r1, r3
 80030ba:	480b      	ldr	r0, [pc, #44]	; (80030e8 <set_Date+0xb4>)
 80030bc:	f008 fc4a 	bl	800b954 <HAL_RTC_SetDate>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d007      	beq.n	80030d6 <set_Date+0xa2>
 80030c6:	4b09      	ldr	r3, [pc, #36]	; (80030ec <set_Date+0xb8>)
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	f043 0308 	orr.w	r3, r3, #8
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	4b06      	ldr	r3, [pc, #24]	; (80030ec <set_Date+0xb8>)
 80030d2:	801a      	strh	r2, [r3, #0]
}
 80030d4:	e002      	b.n	80030dc <set_Date+0xa8>
			setDate = true;
 80030d6:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <set_Date+0xbc>)
 80030d8:	2201      	movs	r2, #1
 80030da:	701a      	strb	r2, [r3, #0]
}
 80030dc:	bf00      	nop
 80030de:	3750      	adds	r7, #80	; 0x50
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20001f1e 	.word	0x20001f1e
 80030e8:	20000a7c 	.word	0x20000a7c
 80030ec:	20001b08 	.word	0x20001b08
 80030f0:	20001f1d 	.word	0x20001f1d

080030f4 <sec2str>:

	return ep;
}
//------------------------------------------------------------------------------------------
int sec2str(char *st)
{
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b093      	sub	sp, #76	; 0x4c
 80030f8:	af04      	add	r7, sp, #16
 80030fa:	6078      	str	r0, [r7, #4]
int ret = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8003100:	4b40      	ldr	r3, [pc, #256]	; (8003204 <sec2str+0x110>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	f083 0301 	eor.w	r3, r3, #1
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d040      	beq.n	8003190 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 800310e:	f7ff ff01 	bl	8002f14 <get_secCounter>
 8003112:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	4a3c      	ldr	r2, [pc, #240]	; (8003208 <sec2str+0x114>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	0c1b      	lsrs	r3, r3, #16
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8003120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003122:	4a39      	ldr	r2, [pc, #228]	; (8003208 <sec2str+0x114>)
 8003124:	fba2 1203 	umull	r1, r2, r2, r3
 8003128:	0c12      	lsrs	r2, r2, #16
 800312a:	4938      	ldr	r1, [pc, #224]	; (800320c <sec2str+0x118>)
 800312c:	fb01 f202 	mul.w	r2, r1, r2
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 8003134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003136:	4a36      	ldr	r2, [pc, #216]	; (8003210 <sec2str+0x11c>)
 8003138:	fba2 2303 	umull	r2, r3, r2, r3
 800313c:	0adb      	lsrs	r3, r3, #11
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 8003140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003142:	4a33      	ldr	r2, [pc, #204]	; (8003210 <sec2str+0x11c>)
 8003144:	fba2 1203 	umull	r1, r2, r2, r3
 8003148:	0ad2      	lsrs	r2, r2, #11
 800314a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800314e:	fb01 f202 	mul.w	r2, r1, r2
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	4a2e      	ldr	r2, [pc, #184]	; (8003214 <sec2str+0x120>)
 800315a:	fba2 2303 	umull	r2, r3, r2, r3
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 8003162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003164:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <sec2str+0x120>)
 8003166:	fba3 1302 	umull	r1, r3, r3, r2
 800316a:	0959      	lsrs	r1, r3, #5
 800316c:	460b      	mov	r3, r1
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	1a5b      	subs	r3, r3, r1
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 8003178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317a:	9301      	str	r3, [sp, #4]
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003184:	4924      	ldr	r1, [pc, #144]	; (8003218 <sec2str+0x124>)
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f010 ffdc 	bl	8014144 <siprintf>
 800318c:	6378      	str	r0, [r7, #52]	; 0x34
 800318e:	e034      	b.n	80031fa <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8003190:	f107 030c 	add.w	r3, r7, #12
 8003194:	2200      	movs	r2, #0
 8003196:	4619      	mov	r1, r3
 8003198:	4820      	ldr	r0, [pc, #128]	; (800321c <sec2str+0x128>)
 800319a:	f008 fc62 	bl	800ba62 <HAL_RTC_GetDate>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d007      	beq.n	80031b4 <sec2str+0xc0>
 80031a4:	4b1e      	ldr	r3, [pc, #120]	; (8003220 <sec2str+0x12c>)
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	f043 0308 	orr.w	r3, r3, #8
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	4b1c      	ldr	r3, [pc, #112]	; (8003220 <sec2str+0x12c>)
 80031b0:	801a      	strh	r2, [r3, #0]
 80031b2:	e022      	b.n	80031fa <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 80031b4:	f107 0310 	add.w	r3, r7, #16
 80031b8:	2200      	movs	r2, #0
 80031ba:	4619      	mov	r1, r3
 80031bc:	4817      	ldr	r0, [pc, #92]	; (800321c <sec2str+0x128>)
 80031be:	f008 fb6d 	bl	800b89c <HAL_RTC_GetTime>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d007      	beq.n	80031d8 <sec2str+0xe4>
 80031c8:	4b15      	ldr	r3, [pc, #84]	; (8003220 <sec2str+0x12c>)
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	f043 0308 	orr.w	r3, r3, #8
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	4b13      	ldr	r3, [pc, #76]	; (8003220 <sec2str+0x12c>)
 80031d4:	801a      	strh	r2, [r3, #0]
 80031d6:	e010      	b.n	80031fa <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 80031d8:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80031da:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 80031dc:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80031de:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 80031e0:	7c3b      	ldrb	r3, [r7, #16]
 80031e2:	7c7a      	ldrb	r2, [r7, #17]
 80031e4:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80031e6:	9102      	str	r1, [sp, #8]
 80031e8:	9201      	str	r2, [sp, #4]
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	4623      	mov	r3, r4
 80031ee:	4602      	mov	r2, r0
 80031f0:	490c      	ldr	r1, [pc, #48]	; (8003224 <sec2str+0x130>)
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f010 ffa6 	bl	8014144 <siprintf>
 80031f8:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 80031fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	373c      	adds	r7, #60	; 0x3c
 8003200:	46bd      	mov	sp, r7
 8003202:	bd90      	pop	{r4, r7, pc}
 8003204:	20001f1d 	.word	0x20001f1d
 8003208:	c22e4507 	.word	0xc22e4507
 800320c:	00015180 	.word	0x00015180
 8003210:	91a2b3c5 	.word	0x91a2b3c5
 8003214:	88888889 	.word	0x88888889
 8003218:	08017d48 	.word	0x08017d48
 800321c:	20000a7c 	.word	0x20000a7c
 8003220:	20001b08 	.word	0x20001b08
 8003224:	08017d60 	.word	0x08017d60

08003228 <Report>:
//--------------------------------------------------------------------------------------------
void Report(const uint8_t addTime, const char *fmt, ...)
{
 8003228:	b40e      	push	{r1, r2, r3}
 800322a:	b590      	push	{r4, r7, lr}
 800322c:	b08a      	sub	sp, #40	; 0x28
 800322e:	af00      	add	r7, sp, #0
 8003230:	4603      	mov	r3, r0
 8003232:	71fb      	strb	r3, [r7, #7]
#if defined(SET_BLE) || defined(SET_AUDIO)
	if(sleep_mode) return;
 8003234:	4b41      	ldr	r3, [pc, #260]	; (800333c <Report+0x114>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d178      	bne.n	800332e <Report+0x106>
#endif

	size_t len = MAX_UART_BUF;
 800323c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003240:	61bb      	str	r3, [r7, #24]
	char *buf = &cmdBuf[0];
 8003242:	4b3f      	ldr	r3, [pc, #252]	; (8003340 <Report+0x118>)
 8003244:	617b      	str	r3, [r7, #20]

	uint8_t cnt = 32;
 8003246:	2320      	movs	r3, #32
 8003248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t stim = HAL_GetTick();
 800324c:	f004 fc04 	bl	8007a58 <HAL_GetTick>
 8003250:	6238      	str	r0, [r7, #32]
	uint32_t etim = stim;
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	613b      	str	r3, [r7, #16]
	while (!uartRdy && cnt) {
 8003256:	e00e      	b.n	8003276 <Report+0x4e>
		etim = HAL_GetTick();
 8003258:	f004 fbfe 	bl	8007a58 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]
		if (etim - stim) {
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	429a      	cmp	r2, r3
 8003264:	d007      	beq.n	8003276 <Report+0x4e>
			stim = HAL_GetTick();
 8003266:	f004 fbf7 	bl	8007a58 <HAL_GetTick>
 800326a:	6238      	str	r0, [r7, #32]
			cnt--;
 800326c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003270:	3b01      	subs	r3, #1
 8003272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (!uartRdy && cnt) {
 8003276:	4b33      	ldr	r3, [pc, #204]	; (8003344 <Report+0x11c>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d103      	bne.n	8003286 <Report+0x5e>
 800327e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1e8      	bne.n	8003258 <Report+0x30>
		}
	}

	//if (buf) {
		*buf = '\0';
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
		int dl = 0;
 800328c:	2300      	movs	r3, #0
 800328e:	61fb      	str	r3, [r7, #28]
		if (addTime) {
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d010      	beq.n	80032b8 <Report+0x90>
			dl = sec2str(buf);
 8003296:	6978      	ldr	r0, [r7, #20]
 8003298:	f7ff ff2c 	bl	80030f4 <sec2str>
 800329c:	61f8      	str	r0, [r7, #28]
			strcat(buf, " | ");
 800329e:	6978      	ldr	r0, [r7, #20]
 80032a0:	f7fc ff96 	bl	80001d0 <strlen>
 80032a4:	4603      	mov	r3, r0
 80032a6:	461a      	mov	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	4413      	add	r3, r2
 80032ac:	4a26      	ldr	r2, [pc, #152]	; (8003348 <Report+0x120>)
 80032ae:	6810      	ldr	r0, [r2, #0]
 80032b0:	6018      	str	r0, [r3, #0]
			dl += 3;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	3303      	adds	r3, #3
 80032b6:	61fb      	str	r3, [r7, #28]
		}

		va_list args;
		va_start(args, fmt);
 80032b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80032bc:	60fb      	str	r3, [r7, #12]
		vsnprintf(buf + dl, len - dl, fmt, args);
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	18d0      	adds	r0, r2, r3
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	1ad1      	subs	r1, r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032ce:	f011 fed5 	bl	801507c <vsniprintf>

		//if (itSemHandle != NULL) {
			if (osSemaphoreAcquire(itSemHandle, 2000) == osOK) {
 80032d2:	4b1e      	ldr	r3, [pc, #120]	; (800334c <Report+0x124>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80032da:	4618      	mov	r0, r3
 80032dc:	f00c fc0c 	bl	800faf8 <osSemaphoreAcquire>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d124      	bne.n	8003330 <Report+0x108>
		//}
				uartRdy = false;
 80032e6:	4b17      	ldr	r3, [pc, #92]	; (8003344 <Report+0x11c>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	701a      	strb	r2, [r3, #0]
				if (HAL_UART_Transmit_DMA(cmdPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 80032ec:	4b18      	ldr	r3, [pc, #96]	; (8003350 <Report+0x128>)
 80032ee:	681c      	ldr	r4, [r3, #0]
 80032f0:	6978      	ldr	r0, [r7, #20]
 80032f2:	f7fc ff6d 	bl	80001d0 <strlen>
 80032f6:	4603      	mov	r3, r0
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	461a      	mov	r2, r3
 80032fc:	6979      	ldr	r1, [r7, #20]
 80032fe:	4620      	mov	r0, r4
 8003300:	f00a fec2 	bl	800e088 <HAL_UART_Transmit_DMA>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d006      	beq.n	8003318 <Report+0xf0>
 800330a:	4b12      	ldr	r3, [pc, #72]	; (8003354 <Report+0x12c>)
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	f043 0302 	orr.w	r3, r3, #2
 8003312:	b29a      	uxth	r2, r3
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <Report+0x12c>)
 8003316:	801a      	strh	r2, [r3, #0]
				while (!uartRdy) {} //HAL_Delay(1)
 8003318:	bf00      	nop
 800331a:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <Report+0x11c>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0fb      	beq.n	800331a <Report+0xf2>

		//if (itSemHandle) {
				osSemaphoreRelease(itSemHandle);
 8003322:	4b0a      	ldr	r3, [pc, #40]	; (800334c <Report+0x124>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f00c fc38 	bl	800fb9c <osSemaphoreRelease>
 800332c:	e000      	b.n	8003330 <Report+0x108>
	if(sleep_mode) return;
 800332e:	bf00      	nop
	//	free(buf);
	//} else {
	//	devError |= devMEM;
	//}

}
 8003330:	3728      	adds	r7, #40	; 0x28
 8003332:	46bd      	mov	sp, r7
 8003334:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003338:	b003      	add	sp, #12
 800333a:	4770      	bx	lr
 800333c:	20003600 	.word	0x20003600
 8003340:	20001308 	.word	0x20001308
 8003344:	20000014 	.word	0x20000014
 8003348:	08017d7c 	.word	0x08017d7c
 800334c:	20000e80 	.word	0x20000e80
 8003350:	20000010 	.word	0x20000010
 8003354:	20001b08 	.word	0x20001b08

08003358 <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <HAL_UART_TxCpltCallback+0x38>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d103      	bne.n	8003372 <HAL_UART_TxCpltCallback+0x1a>
		uartRdy = 1;
 800336a:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <HAL_UART_TxCpltCallback+0x3c>)
 800336c:	2201      	movs	r2, #1
 800336e:	701a      	strb	r2, [r3, #0]
	else
	if (huart->Instance == USART3) {
		bleRdy = 1;
	}
#endif
}
 8003370:	e007      	b.n	8003382 <HAL_UART_TxCpltCallback+0x2a>
	if (huart->Instance == USART3) {
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a08      	ldr	r2, [pc, #32]	; (8003398 <HAL_UART_TxCpltCallback+0x40>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d102      	bne.n	8003382 <HAL_UART_TxCpltCallback+0x2a>
		bleRdy = 1;
 800337c:	4b07      	ldr	r3, [pc, #28]	; (800339c <HAL_UART_TxCpltCallback+0x44>)
 800337e:	2201      	movs	r2, #1
 8003380:	701a      	strb	r2, [r3, #0]
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40004400 	.word	0x40004400
 8003394:	20000014 	.word	0x20000014
 8003398:	40004800 	.word	0x40004800
 800339c:	20000130 	.word	0x20000130

080033a0 <HAL_UART_ErrorCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0e      	ldr	r2, [pc, #56]	; (80033e8 <HAL_UART_ErrorCallback+0x48>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d107      	bne.n	80033c2 <HAL_UART_ErrorCallback+0x22>
		devError |= devUART;
 80033b2:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <HAL_UART_ErrorCallback+0x4c>)
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	f043 0302 	orr.w	r3, r3, #2
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_UART_ErrorCallback+0x4c>)
 80033be:	801a      	strh	r2, [r3, #0]
	else
	if (huart->Instance == USART3) {
		devError |= devBLE;
	}
#endif
}
 80033c0:	e00b      	b.n	80033da <HAL_UART_ErrorCallback+0x3a>
	if (huart->Instance == USART3) {
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a0a      	ldr	r2, [pc, #40]	; (80033f0 <HAL_UART_ErrorCallback+0x50>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d106      	bne.n	80033da <HAL_UART_ErrorCallback+0x3a>
		devError |= devBLE;
 80033cc:	4b07      	ldr	r3, [pc, #28]	; (80033ec <HAL_UART_ErrorCallback+0x4c>)
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	4b05      	ldr	r3, [pc, #20]	; (80033ec <HAL_UART_ErrorCallback+0x4c>)
 80033d8:	801a      	strh	r2, [r3, #0]
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40004400 	.word	0x40004400
 80033ec:	20001b08 	.word	0x20001b08
 80033f0:	40004800 	.word	0x40004800

080033f4 <HAL_UART_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033f4:	b590      	push	{r4, r7, lr}
 80033f6:	b093      	sub	sp, #76	; 0x4c
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
#if defined(SET_BLE) || defined(SET_AUDIO)
	if (huart->Instance == USART3) {
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a7d      	ldr	r2, [pc, #500]	; (80035f8 <HAL_UART_RxCpltCallback+0x204>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d178      	bne.n	80034f8 <HAL_UART_RxCpltCallback+0x104>
		rxbBuf[rxbInd++] = (char)rxbByte;
 8003406:	4b7d      	ldr	r3, [pc, #500]	; (80035fc <HAL_UART_RxCpltCallback+0x208>)
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	b291      	uxth	r1, r2
 800340e:	4a7b      	ldr	r2, [pc, #492]	; (80035fc <HAL_UART_RxCpltCallback+0x208>)
 8003410:	8011      	strh	r1, [r2, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	4b7a      	ldr	r3, [pc, #488]	; (8003600 <HAL_UART_RxCpltCallback+0x20c>)
 8003416:	7819      	ldrb	r1, [r3, #0]
 8003418:	4b7a      	ldr	r3, [pc, #488]	; (8003604 <HAL_UART_RxCpltCallback+0x210>)
 800341a:	5499      	strb	r1, [r3, r2]
		if (rxbByte == 0x0a) {// '\n'
 800341c:	4b78      	ldr	r3, [pc, #480]	; (8003600 <HAL_UART_RxCpltCallback+0x20c>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b0a      	cmp	r3, #10
 8003422:	d158      	bne.n	80034d6 <HAL_UART_RxCpltCallback+0xe2>
			rxbBuf[--rxbInd] = '\0';
 8003424:	4b75      	ldr	r3, [pc, #468]	; (80035fc <HAL_UART_RxCpltCallback+0x208>)
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	4b73      	ldr	r3, [pc, #460]	; (80035fc <HAL_UART_RxCpltCallback+0x208>)
 800342e:	801a      	strh	r2, [r3, #0]
 8003430:	4b72      	ldr	r3, [pc, #456]	; (80035fc <HAL_UART_RxCpltCallback+0x208>)
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	461a      	mov	r2, r3
 8003436:	4b73      	ldr	r3, [pc, #460]	; (8003604 <HAL_UART_RxCpltCallback+0x210>)
 8003438:	2100      	movs	r1, #0
 800343a:	5499      	strb	r1, [r3, r2]
			int len = strlen(rxbBuf);
 800343c:	4871      	ldr	r0, [pc, #452]	; (8003604 <HAL_UART_RxCpltCallback+0x210>)
 800343e:	f7fc fec7 	bl	80001d0 <strlen>
 8003442:	4603      	mov	r3, r0
 8003444:	61fb      	str	r3, [r7, #28]
			// Блок помещает в очередь ответов на команду очередное сообщение от модуля BLE
			if (len > 1) {
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	2b01      	cmp	r3, #1
 800344a:	dd3b      	ble.n	80034c4 <HAL_UART_RxCpltCallback+0xd0>
				char *from_audio = (char *)calloc(1, MAX_BLE_BUF);//len + 1);
 800344c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003450:	2001      	movs	r0, #1
 8003452:	f00f fe9f 	bl	8013194 <calloc>
 8003456:	4603      	mov	r3, r0
 8003458:	61bb      	str	r3, [r7, #24]
				//char *from_audio = (char *)pvPortMalloc(256);
				if (from_audio) {
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d02a      	beq.n	80034b6 <HAL_UART_RxCpltCallback+0xc2>
					strncpy(from_audio, rxbBuf, MAX_BLE_BUF - 1);
 8003460:	22ff      	movs	r2, #255	; 0xff
 8003462:	4968      	ldr	r1, [pc, #416]	; (8003604 <HAL_UART_RxCpltCallback+0x210>)
 8003464:	69b8      	ldr	r0, [r7, #24]
 8003466:	f010 fef9 	bl	801425c <strncpy>
					rec_msg_t ac;
					ac.msg = from_audio;
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	617b      	str	r3, [r7, #20]
					if (osMessageQueuePut(ackQueHandle, (const void *)&ac, 0, 0) != osOK) {
 800346e:	4b66      	ldr	r3, [pc, #408]	; (8003608 <HAL_UART_RxCpltCallback+0x214>)
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	f107 0114 	add.w	r1, r7, #20
 8003476:	2300      	movs	r3, #0
 8003478:	2200      	movs	r2, #0
 800347a:	f00c fc47 	bl	800fd0c <osMessageQueuePut>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <HAL_UART_RxCpltCallback+0xa6>
						devError |= devQUE;
 8003484:	4b61      	ldr	r3, [pc, #388]	; (800360c <HAL_UART_RxCpltCallback+0x218>)
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800348c:	b29a      	uxth	r2, r3
 800348e:	4b5f      	ldr	r3, [pc, #380]	; (800360c <HAL_UART_RxCpltCallback+0x218>)
 8003490:	801a      	strh	r2, [r3, #0]
						free(from_audio);
 8003492:	69b8      	ldr	r0, [r7, #24]
 8003494:	f010 f85e 	bl	8013554 <free>
 8003498:	e014      	b.n	80034c4 <HAL_UART_RxCpltCallback+0xd0>
						//vPortFree(from_audio);
					} else {
						if (devError & devQUE) devError &= ~devQUE;
 800349a:	4b5c      	ldr	r3, [pc, #368]	; (800360c <HAL_UART_RxCpltCallback+0x218>)
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00e      	beq.n	80034c4 <HAL_UART_RxCpltCallback+0xd0>
 80034a6:	4b59      	ldr	r3, [pc, #356]	; (800360c <HAL_UART_RxCpltCallback+0x218>)
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	4b56      	ldr	r3, [pc, #344]	; (800360c <HAL_UART_RxCpltCallback+0x218>)
 80034b2:	801a      	strh	r2, [r3, #0]
 80034b4:	e006      	b.n	80034c4 <HAL_UART_RxCpltCallback+0xd0>
					}
				} else {
					devError |= devMEM;
 80034b6:	4b55      	ldr	r3, [pc, #340]	; (800360c <HAL_UART_RxCpltCallback+0x218>)
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	f043 0304 	orr.w	r3, r3, #4
 80034be:	b29a      	uxth	r2, r3
 80034c0:	4b52      	ldr	r3, [pc, #328]	; (800360c <HAL_UART_RxCpltCallback+0x218>)
 80034c2:	801a      	strh	r2, [r3, #0]
				}
			}
			//-----------------------------------------------------------------------------
			rxbInd = 0;
 80034c4:	4b4d      	ldr	r3, [pc, #308]	; (80035fc <HAL_UART_RxCpltCallback+0x208>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	801a      	strh	r2, [r3, #0]
			memset(rxbBuf, 0, sizeof(rxbBuf));
 80034ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034ce:	2100      	movs	r1, #0
 80034d0:	484c      	ldr	r0, [pc, #304]	; (8003604 <HAL_UART_RxCpltCallback+0x210>)
 80034d2:	f010 f855 	bl	8013580 <memset>
		}
		//
		if (HAL_UART_Receive_IT(huart, &rxbByte, 1) != HAL_OK) devError |= devBLE;
 80034d6:	2201      	movs	r2, #1
 80034d8:	4949      	ldr	r1, [pc, #292]	; (8003600 <HAL_UART_RxCpltCallback+0x20c>)
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f00a fd7e 	bl	800dfdc <HAL_UART_Receive_IT>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 82dd 	beq.w	8003aa2 <HAL_UART_RxCpltCallback+0x6ae>
 80034e8:	4b48      	ldr	r3, [pc, #288]	; (800360c <HAL_UART_RxCpltCallback+0x218>)
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	4b46      	ldr	r3, [pc, #280]	; (800360c <HAL_UART_RxCpltCallback+0x218>)
 80034f4:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
		}

		if (HAL_UART_Receive_IT(huart, &rxByte, 1) != HAL_OK) devError |= devUART;
	}
}
 80034f6:	e2d4      	b.n	8003aa2 <HAL_UART_RxCpltCallback+0x6ae>
	if (huart->Instance == USART2) {
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a44      	ldr	r2, [pc, #272]	; (8003610 <HAL_UART_RxCpltCallback+0x21c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	f040 82cf 	bne.w	8003aa2 <HAL_UART_RxCpltCallback+0x6ae>
		rxBuf[rxInd++] = (char)rxByte;
 8003504:	4b43      	ldr	r3, [pc, #268]	; (8003614 <HAL_UART_RxCpltCallback+0x220>)
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	b291      	uxth	r1, r2
 800350c:	4a41      	ldr	r2, [pc, #260]	; (8003614 <HAL_UART_RxCpltCallback+0x220>)
 800350e:	8011      	strh	r1, [r2, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	4b41      	ldr	r3, [pc, #260]	; (8003618 <HAL_UART_RxCpltCallback+0x224>)
 8003514:	7819      	ldrb	r1, [r3, #0]
 8003516:	4b41      	ldr	r3, [pc, #260]	; (800361c <HAL_UART_RxCpltCallback+0x228>)
 8003518:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 800351a:	4b3f      	ldr	r3, [pc, #252]	; (8003618 <HAL_UART_RxCpltCallback+0x224>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b0a      	cmp	r3, #10
 8003520:	f040 82b0 	bne.w	8003a84 <HAL_UART_RxCpltCallback+0x690>
			rxBuf[--rxInd] = '\0';
 8003524:	4b3b      	ldr	r3, [pc, #236]	; (8003614 <HAL_UART_RxCpltCallback+0x220>)
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	4b39      	ldr	r3, [pc, #228]	; (8003614 <HAL_UART_RxCpltCallback+0x220>)
 800352e:	801a      	strh	r2, [r3, #0]
 8003530:	4b38      	ldr	r3, [pc, #224]	; (8003614 <HAL_UART_RxCpltCallback+0x220>)
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	461a      	mov	r2, r3
 8003536:	4b39      	ldr	r3, [pc, #228]	; (800361c <HAL_UART_RxCpltCallback+0x228>)
 8003538:	2100      	movs	r1, #0
 800353a:	5499      	strb	r1, [r3, r2]
			int i, ev = -1;
 800353c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003540:	613b      	str	r3, [r7, #16]
			if (strlen(rxBuf) > 2) {
 8003542:	4836      	ldr	r0, [pc, #216]	; (800361c <HAL_UART_RxCpltCallback+0x228>)
 8003544:	f7fc fe44 	bl	80001d0 <strlen>
 8003548:	4603      	mov	r3, r0
 800354a:	2b02      	cmp	r3, #2
 800354c:	f240 8294 	bls.w	8003a78 <HAL_UART_RxCpltCallback+0x684>
				if ( (strstr(rxBuf, "at+")) || (strstr(rxBuf, "AT+")) ) {
 8003550:	4933      	ldr	r1, [pc, #204]	; (8003620 <HAL_UART_RxCpltCallback+0x22c>)
 8003552:	4832      	ldr	r0, [pc, #200]	; (800361c <HAL_UART_RxCpltCallback+0x228>)
 8003554:	f010 fe95 	bl	8014282 <strstr>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_UART_RxCpltCallback+0x178>
 800355e:	4931      	ldr	r1, [pc, #196]	; (8003624 <HAL_UART_RxCpltCallback+0x230>)
 8003560:	482e      	ldr	r0, [pc, #184]	; (800361c <HAL_UART_RxCpltCallback+0x228>)
 8003562:	f010 fe8e 	bl	8014282 <strstr>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d042      	beq.n	80035f2 <HAL_UART_RxCpltCallback+0x1fe>
					char *to_audio = (char *)calloc(1, MAX_BLE_BUF);
 800356c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003570:	2001      	movs	r0, #1
 8003572:	f00f fe0f 	bl	8013194 <calloc>
 8003576:	4603      	mov	r3, r0
 8003578:	623b      	str	r3, [r7, #32]
					if (to_audio) {
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d02d      	beq.n	80035dc <HAL_UART_RxCpltCallback+0x1e8>
						strncpy(to_audio, rxBuf, MAX_BLE_BUF - 1);
 8003580:	22ff      	movs	r2, #255	; 0xff
 8003582:	4926      	ldr	r1, [pc, #152]	; (800361c <HAL_UART_RxCpltCallback+0x228>)
 8003584:	6a38      	ldr	r0, [r7, #32]
 8003586:	f010 fe69 	bl	801425c <strncpy>
						toUppers(to_audio);
 800358a:	6a38      	ldr	r0, [r7, #32]
 800358c:	f7ff fd22 	bl	8002fd4 <toUppers>
						cd.msg = to_audio;
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	60fb      	str	r3, [r7, #12]
						if (osMessageQueuePut(cmdQueHandle, (const void *)&cd, 0, 0) != osOK) {
 8003594:	4b24      	ldr	r3, [pc, #144]	; (8003628 <HAL_UART_RxCpltCallback+0x234>)
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	f107 010c 	add.w	r1, r7, #12
 800359c:	2300      	movs	r3, #0
 800359e:	2200      	movs	r2, #0
 80035a0:	f00c fbb4 	bl	800fd0c <osMessageQueuePut>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_UART_RxCpltCallback+0x1cc>
							devError |= devQUE;
 80035aa:	4b18      	ldr	r3, [pc, #96]	; (800360c <HAL_UART_RxCpltCallback+0x218>)
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	4b15      	ldr	r3, [pc, #84]	; (800360c <HAL_UART_RxCpltCallback+0x218>)
 80035b6:	801a      	strh	r2, [r3, #0]
							free(to_audio);
 80035b8:	6a38      	ldr	r0, [r7, #32]
 80035ba:	f00f ffcb 	bl	8013554 <free>
 80035be:	e014      	b.n	80035ea <HAL_UART_RxCpltCallback+0x1f6>
							if (devError & devQUE) devError &= ~devQUE;
 80035c0:	4b12      	ldr	r3, [pc, #72]	; (800360c <HAL_UART_RxCpltCallback+0x218>)
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00e      	beq.n	80035ea <HAL_UART_RxCpltCallback+0x1f6>
 80035cc:	4b0f      	ldr	r3, [pc, #60]	; (800360c <HAL_UART_RxCpltCallback+0x218>)
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	4b0d      	ldr	r3, [pc, #52]	; (800360c <HAL_UART_RxCpltCallback+0x218>)
 80035d8:	801a      	strh	r2, [r3, #0]
 80035da:	e006      	b.n	80035ea <HAL_UART_RxCpltCallback+0x1f6>
						devError |= devMEM;
 80035dc:	4b0b      	ldr	r3, [pc, #44]	; (800360c <HAL_UART_RxCpltCallback+0x218>)
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	f043 0304 	orr.w	r3, r3, #4
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	4b09      	ldr	r3, [pc, #36]	; (800360c <HAL_UART_RxCpltCallback+0x218>)
 80035e8:	801a      	strh	r2, [r3, #0]
					ev = -2;
 80035ea:	f06f 0301 	mvn.w	r3, #1
 80035ee:	613b      	str	r3, [r7, #16]
				if ( (strstr(rxBuf, "at+")) || (strstr(rxBuf, "AT+")) ) {
 80035f0:	e226      	b.n	8003a40 <HAL_UART_RxCpltCallback+0x64c>
					for (i = 0; i < MAX_CMDS; i++) {
 80035f2:	2300      	movs	r3, #0
 80035f4:	647b      	str	r3, [r7, #68]	; 0x44
 80035f6:	e21d      	b.n	8003a34 <HAL_UART_RxCpltCallback+0x640>
 80035f8:	40004800 	.word	0x40004800
 80035fc:	200032f4 	.word	0x200032f4
 8003600:	200032f2 	.word	0x200032f2
 8003604:	200032f8 	.word	0x200032f8
 8003608:	20000e7c 	.word	0x20000e7c
 800360c:	20001b08 	.word	0x20001b08
 8003610:	40004400 	.word	0x40004400
 8003614:	20001b1a 	.word	0x20001b1a
 8003618:	20001b18 	.word	0x20001b18
 800361c:	20001b1c 	.word	0x20001b1c
 8003620:	08017d80 	.word	0x08017d80
 8003624:	08017d84 	.word	0x08017d84
 8003628:	20000e78 	.word	0x20000e78
						if (!strncmp(rxBuf, s_cmds[i], strlen(s_cmds[i]))) {
 800362c:	4ab0      	ldr	r2, [pc, #704]	; (80038f0 <HAL_UART_RxCpltCallback+0x4fc>)
 800362e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003630:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003634:	4aae      	ldr	r2, [pc, #696]	; (80038f0 <HAL_UART_RxCpltCallback+0x4fc>)
 8003636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800363c:	4618      	mov	r0, r3
 800363e:	f7fc fdc7 	bl	80001d0 <strlen>
 8003642:	4603      	mov	r3, r0
 8003644:	461a      	mov	r2, r3
 8003646:	4621      	mov	r1, r4
 8003648:	48aa      	ldr	r0, [pc, #680]	; (80038f4 <HAL_UART_RxCpltCallback+0x500>)
 800364a:	f010 fdf3 	bl	8014234 <strncmp>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	f040 81ec 	bne.w	8003a2e <HAL_UART_RxCpltCallback+0x63a>
							char *uk = rxBuf + strlen(s_cmds[i]);
 8003656:	4aa6      	ldr	r2, [pc, #664]	; (80038f0 <HAL_UART_RxCpltCallback+0x4fc>)
 8003658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800365a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800365e:	4618      	mov	r0, r3
 8003660:	f7fc fdb6 	bl	80001d0 <strlen>
 8003664:	4603      	mov	r3, r0
 8003666:	4aa3      	ldr	r2, [pc, #652]	; (80038f4 <HAL_UART_RxCpltCallback+0x500>)
 8003668:	4413      	add	r3, r2
 800366a:	63fb      	str	r3, [r7, #60]	; 0x3c
							ev = -1;
 800366c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003670:	613b      	str	r3, [r7, #16]
							switch (i) {
 8003672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003674:	2b1a      	cmp	r3, #26
 8003676:	f200 81e2 	bhi.w	8003a3e <HAL_UART_RxCpltCallback+0x64a>
 800367a:	a201      	add	r2, pc, #4	; (adr r2, 8003680 <HAL_UART_RxCpltCallback+0x28c>)
 800367c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003680:	08003827 	.word	0x08003827
 8003684:	08003827 	.word	0x08003827
 8003688:	0800382d 	.word	0x0800382d
 800368c:	08003a3f 	.word	0x08003a3f
 8003690:	0800387f 	.word	0x0800387f
 8003694:	0800387f 	.word	0x0800387f
 8003698:	080039d1 	.word	0x080039d1
 800369c:	08003935 	.word	0x08003935
 80036a0:	08003a3f 	.word	0x08003a3f
 80036a4:	08003827 	.word	0x08003827
 80036a8:	08003827 	.word	0x08003827
 80036ac:	080037e5 	.word	0x080037e5
 80036b0:	080037a1 	.word	0x080037a1
 80036b4:	08003719 	.word	0x08003719
 80036b8:	08003827 	.word	0x08003827
 80036bc:	08003783 	.word	0x08003783
 80036c0:	080037e5 	.word	0x080037e5
 80036c4:	080036ed 	.word	0x080036ed
 80036c8:	08003827 	.word	0x08003827
 80036cc:	08003827 	.word	0x08003827
 80036d0:	08003a3f 	.word	0x08003a3f
 80036d4:	08003827 	.word	0x08003827
 80036d8:	08003a3f 	.word	0x08003a3f
 80036dc:	08003827 	.word	0x08003827
 80036e0:	08003827 	.word	0x08003827
 80036e4:	08003827 	.word	0x08003827
 80036e8:	08003827 	.word	0x08003827
									if (strlen(uk) >= 1) {
 80036ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 818a 	beq.w	8003a0a <HAL_UART_RxCpltCallback+0x616>
										newBand = atol(uk);
 80036f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80036f8:	f00f fd47 	bl	801318a <atol>
 80036fc:	4603      	mov	r3, r0
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	4b7d      	ldr	r3, [pc, #500]	; (80038f8 <HAL_UART_RxCpltCallback+0x504>)
 8003702:	701a      	strb	r2, [r3, #0]
										if (newBand != Band) {
 8003704:	4b7c      	ldr	r3, [pc, #496]	; (80038f8 <HAL_UART_RxCpltCallback+0x504>)
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	4b7c      	ldr	r3, [pc, #496]	; (80038fc <HAL_UART_RxCpltCallback+0x508>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	f000 817c 	beq.w	8003a0a <HAL_UART_RxCpltCallback+0x616>
											ev = i;
 8003712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003714:	613b      	str	r3, [r7, #16]
								break;
 8003716:	e178      	b.n	8003a0a <HAL_UART_RxCpltCallback+0x616>
									if (strlen(uk) >= 1) {
 8003718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 8176 	beq.w	8003a0e <HAL_UART_RxCpltCallback+0x61a>
										uint8_t nv = Volume;
 8003722:	4b77      	ldr	r3, [pc, #476]	; (8003900 <HAL_UART_RxCpltCallback+0x50c>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
										if (strstr(uk, "up")) {
 800372a:	4976      	ldr	r1, [pc, #472]	; (8003904 <HAL_UART_RxCpltCallback+0x510>)
 800372c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800372e:	f010 fda8 	bl	8014282 <strstr>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_UART_RxCpltCallback+0x350>
											nv++;
 8003738:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800373c:	3301      	adds	r3, #1
 800373e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003742:	e012      	b.n	800376a <HAL_UART_RxCpltCallback+0x376>
										} else if (strstr(uk, "down")) {
 8003744:	4970      	ldr	r1, [pc, #448]	; (8003908 <HAL_UART_RxCpltCallback+0x514>)
 8003746:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003748:	f010 fd9b 	bl	8014282 <strstr>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_UART_RxCpltCallback+0x36a>
											nv--;
 8003752:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003756:	3b01      	subs	r3, #1
 8003758:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800375c:	e005      	b.n	800376a <HAL_UART_RxCpltCallback+0x376>
											nv = (uint8_t)atol(uk);
 800375e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003760:	f00f fd13 	bl	801318a <atol>
 8003764:	4603      	mov	r3, r0
 8003766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
										if ((nv >= 0) && (nv <= 15)) {
 800376a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800376e:	2b0f      	cmp	r3, #15
 8003770:	f200 814d 	bhi.w	8003a0e <HAL_UART_RxCpltCallback+0x61a>
											newVolume = nv;
 8003774:	4a65      	ldr	r2, [pc, #404]	; (800390c <HAL_UART_RxCpltCallback+0x518>)
 8003776:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800377a:	7013      	strb	r3, [r2, #0]
											ev = i;
 800377c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800377e:	613b      	str	r3, [r7, #16]
								break;
 8003780:	e145      	b.n	8003a0e <HAL_UART_RxCpltCallback+0x61a>
									if (strlen(uk) >= 1) {
 8003782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 8143 	beq.w	8003a12 <HAL_UART_RxCpltCallback+0x61e>
										newBassBoost = (uint8_t)atol(uk);
 800378c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800378e:	f00f fcfc 	bl	801318a <atol>
 8003792:	4603      	mov	r3, r0
 8003794:	b2da      	uxtb	r2, r3
 8003796:	4b5e      	ldr	r3, [pc, #376]	; (8003910 <HAL_UART_RxCpltCallback+0x51c>)
 8003798:	701a      	strb	r2, [r3, #0]
										ev = i;
 800379a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800379c:	613b      	str	r3, [r7, #16]
								break;
 800379e:	e138      	b.n	8003a12 <HAL_UART_RxCpltCallback+0x61e>
									if (strlen(uk) >= 2) {
 80037a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037a2:	f7fc fd15 	bl	80001d0 <strlen>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	f240 8134 	bls.w	8003a16 <HAL_UART_RxCpltCallback+0x622>
										newFreq = (float)atof(uk);
 80037ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037b0:	f00f fce4 	bl	801317c <atof>
 80037b4:	ec53 2b10 	vmov	r2, r3, d0
 80037b8:	4610      	mov	r0, r2
 80037ba:	4619      	mov	r1, r3
 80037bc:	f7fd fa14 	bl	8000be8 <__aeabi_d2f>
 80037c0:	4603      	mov	r3, r0
 80037c2:	4a54      	ldr	r2, [pc, #336]	; (8003914 <HAL_UART_RxCpltCallback+0x520>)
 80037c4:	6013      	str	r3, [r2, #0]
										if (newFreq != Freq) {
 80037c6:	4b53      	ldr	r3, [pc, #332]	; (8003914 <HAL_UART_RxCpltCallback+0x520>)
 80037c8:	ed93 7a00 	vldr	s14, [r3]
 80037cc:	4b52      	ldr	r3, [pc, #328]	; (8003918 <HAL_UART_RxCpltCallback+0x524>)
 80037ce:	edd3 7a00 	vldr	s15, [r3]
 80037d2:	eeb4 7a67 	vcmp.f32	s14, s15
 80037d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037da:	f000 811c 	beq.w	8003a16 <HAL_UART_RxCpltCallback+0x622>
											ev = i;
 80037de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037e0:	613b      	str	r3, [r7, #16]
								break;
 80037e2:	e118      	b.n	8003a16 <HAL_UART_RxCpltCallback+0x622>
									seek_up = 1;
 80037e4:	4b4d      	ldr	r3, [pc, #308]	; (800391c <HAL_UART_RxCpltCallback+0x528>)
 80037e6:	2201      	movs	r2, #1
 80037e8:	701a      	strb	r2, [r3, #0]
									ev = i;
 80037ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ec:	613b      	str	r3, [r7, #16]
									char *uki = strchr(uk, ':');
 80037ee:	213a      	movs	r1, #58	; 0x3a
 80037f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037f2:	f010 fd0a 	bl	801420a <strchr>
 80037f6:	63b8      	str	r0, [r7, #56]	; 0x38
									if (uki) {
 80037f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 810d 	beq.w	8003a1a <HAL_UART_RxCpltCallback+0x626>
										if ((*(char *)(uki + 1) == '0') || strstr(uki + 1, "down")) seek_up = 0;
 8003800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003802:	3301      	adds	r3, #1
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b30      	cmp	r3, #48	; 0x30
 8003808:	d009      	beq.n	800381e <HAL_UART_RxCpltCallback+0x42a>
 800380a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380c:	3301      	adds	r3, #1
 800380e:	493e      	ldr	r1, [pc, #248]	; (8003908 <HAL_UART_RxCpltCallback+0x514>)
 8003810:	4618      	mov	r0, r3
 8003812:	f010 fd36 	bl	8014282 <strstr>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 80fe 	beq.w	8003a1a <HAL_UART_RxCpltCallback+0x626>
 800381e:	4b3f      	ldr	r3, [pc, #252]	; (800391c <HAL_UART_RxCpltCallback+0x528>)
 8003820:	2200      	movs	r2, #0
 8003822:	701a      	strb	r2, [r3, #0]
								break;
 8003824:	e0f9      	b.n	8003a1a <HAL_UART_RxCpltCallback+0x626>
									ev = i;
 8003826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003828:	613b      	str	r3, [r7, #16]
								break;
 800382a:	e0ff      	b.n	8003a2c <HAL_UART_RxCpltCallback+0x638>
									if (strlen(uk) >= 10) {
 800382c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800382e:	f7fc fccf 	bl	80001d0 <strlen>
 8003832:	4603      	mov	r3, r0
 8003834:	2b09      	cmp	r3, #9
 8003836:	f240 80f2 	bls.w	8003a1e <HAL_UART_RxCpltCallback+0x62a>
										char *uki = strchr(uk, ':');
 800383a:	213a      	movs	r1, #58	; 0x3a
 800383c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800383e:	f010 fce4 	bl	801420a <strchr>
 8003842:	6278      	str	r0, [r7, #36]	; 0x24
										if (uki) {
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00c      	beq.n	8003864 <HAL_UART_RxCpltCallback+0x470>
											tZone = (uint8_t)atol(uki + 1);
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	3301      	adds	r3, #1
 800384e:	4618      	mov	r0, r3
 8003850:	f00f fc9b 	bl	801318a <atol>
 8003854:	4603      	mov	r3, r0
 8003856:	b2da      	uxtb	r2, r3
 8003858:	4b31      	ldr	r3, [pc, #196]	; (8003920 <HAL_UART_RxCpltCallback+0x52c>)
 800385a:	701a      	strb	r2, [r3, #0]
											*uki = '\0';
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	2200      	movs	r2, #0
 8003860:	701a      	strb	r2, [r3, #0]
 8003862:	e002      	b.n	800386a <HAL_UART_RxCpltCallback+0x476>
											tZone = 0;
 8003864:	4b2e      	ldr	r3, [pc, #184]	; (8003920 <HAL_UART_RxCpltCallback+0x52c>)
 8003866:	2200      	movs	r2, #0
 8003868:	701a      	strb	r2, [r3, #0]
										epoch = (uint32_t)atol(uk);
 800386a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800386c:	f00f fc8d 	bl	801318a <atol>
 8003870:	4603      	mov	r3, r0
 8003872:	461a      	mov	r2, r3
 8003874:	4b2b      	ldr	r3, [pc, #172]	; (8003924 <HAL_UART_RxCpltCallback+0x530>)
 8003876:	601a      	str	r2, [r3, #0]
										ev = i;
 8003878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800387a:	613b      	str	r3, [r7, #16]
								break;
 800387c:	e0cf      	b.n	8003a1e <HAL_UART_RxCpltCallback+0x62a>
									if (i == cmdsRead) cmd_sector = cmdsRead;
 800387e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003880:	2b04      	cmp	r3, #4
 8003882:	d103      	bne.n	800388c <HAL_UART_RxCpltCallback+0x498>
 8003884:	4b28      	ldr	r3, [pc, #160]	; (8003928 <HAL_UART_RxCpltCallback+0x534>)
 8003886:	2204      	movs	r2, #4
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	e002      	b.n	8003892 <HAL_UART_RxCpltCallback+0x49e>
												  else cmd_sector = cmdsErase;
 800388c:	4b26      	ldr	r3, [pc, #152]	; (8003928 <HAL_UART_RxCpltCallback+0x534>)
 800388e:	2205      	movs	r2, #5
 8003890:	601a      	str	r2, [r3, #0]
									if (*uk == ':') {
 8003892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b3a      	cmp	r3, #58	; 0x3a
 8003898:	f040 80c3 	bne.w	8003a22 <HAL_UART_RxCpltCallback+0x62e>
										int sek = atoi(++uk);
 800389c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800389e:	3301      	adds	r3, #1
 80038a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80038a4:	f00f fc6d 	bl	8013182 <atoi>
 80038a8:	62b8      	str	r0, [r7, #40]	; 0x28
										if ( ((sek >= 0) && (sek < W25qxx_getSectorCount())) || (sek == -1) ) {
 80038aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	db05      	blt.n	80038bc <HAL_UART_RxCpltCallback+0x4c8>
 80038b0:	f003 fcf2 	bl	8007298 <W25qxx_getSectorCount>
 80038b4:	4602      	mov	r2, r0
 80038b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d804      	bhi.n	80038c6 <HAL_UART_RxCpltCallback+0x4d2>
 80038bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038c2:	f040 80ae 	bne.w	8003a22 <HAL_UART_RxCpltCallback+0x62e>
											adr_sector = sek;
 80038c6:	4a19      	ldr	r2, [pc, #100]	; (800392c <HAL_UART_RxCpltCallback+0x538>)
 80038c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ca:	6013      	str	r3, [r2, #0]
											offset_sector = 0;
 80038cc:	4b18      	ldr	r3, [pc, #96]	; (8003930 <HAL_UART_RxCpltCallback+0x53c>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]
											if (sek == -1) {
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038d8:	d107      	bne.n	80038ea <HAL_UART_RxCpltCallback+0x4f6>
												if (cmd_sector == cmdsErase) ev = i;
 80038da:	4b13      	ldr	r3, [pc, #76]	; (8003928 <HAL_UART_RxCpltCallback+0x534>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b05      	cmp	r3, #5
 80038e0:	f040 809f 	bne.w	8003a22 <HAL_UART_RxCpltCallback+0x62e>
 80038e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038e6:	613b      	str	r3, [r7, #16]
								break;
 80038e8:	e09b      	b.n	8003a22 <HAL_UART_RxCpltCallback+0x62e>
												ev = i;
 80038ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ec:	613b      	str	r3, [r7, #16]
								break;
 80038ee:	e098      	b.n	8003a22 <HAL_UART_RxCpltCallback+0x62e>
 80038f0:	2000001c 	.word	0x2000001c
 80038f4:	20001b1c 	.word	0x20001b1c
 80038f8:	20000111 	.word	0x20000111
 80038fc:	20000110 	.word	0x20000110
 8003900:	20000113 	.word	0x20000113
 8003904:	08017d88 	.word	0x08017d88
 8003908:	08017d8c 	.word	0x08017d8c
 800390c:	20000114 	.word	0x20000114
 8003910:	20002f5b 	.word	0x20002f5b
 8003914:	2000010c 	.word	0x2000010c
 8003918:	20000108 	.word	0x20000108
 800391c:	20000112 	.word	0x20000112
 8003920:	20001f1e 	.word	0x20001f1e
 8003924:	20000018 	.word	0x20000018
 8003928:	200000fc 	.word	0x200000fc
 800392c:	20001f20 	.word	0x20001f20
 8003930:	20001f24 	.word	0x20001f24
									if (*uk == ':') {
 8003934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b3a      	cmp	r3, #58	; 0x3a
 800393a:	d174      	bne.n	8003a26 <HAL_UART_RxCpltCallback+0x632>
										uk++;
 800393c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800393e:	3301      	adds	r3, #1
 8003940:	63fb      	str	r3, [r7, #60]	; 0x3c
										int sek = atoi(uk);
 8003942:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003944:	f00f fc1d 	bl	8013182 <atoi>
 8003948:	6378      	str	r0, [r7, #52]	; 0x34
										if ((sek >= 0) && (sek < W25qxx_getSectorCount())) {
 800394a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394c:	2b00      	cmp	r3, #0
 800394e:	db6a      	blt.n	8003a26 <HAL_UART_RxCpltCallback+0x632>
 8003950:	f003 fca2 	bl	8007298 <W25qxx_getSectorCount>
 8003954:	4602      	mov	r2, r0
 8003956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003958:	429a      	cmp	r2, r3
 800395a:	d964      	bls.n	8003a26 <HAL_UART_RxCpltCallback+0x632>
											char *ukn = strchr(uk, ':');
 800395c:	213a      	movs	r1, #58	; 0x3a
 800395e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003960:	f010 fc53 	bl	801420a <strchr>
 8003964:	6338      	str	r0, [r7, #48]	; 0x30
											if (ukn) {
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	2b00      	cmp	r3, #0
 800396a:	d05c      	beq.n	8003a26 <HAL_UART_RxCpltCallback+0x632>
												len_write = -1;
 800396c:	4b4f      	ldr	r3, [pc, #316]	; (8003aac <HAL_UART_RxCpltCallback+0x6b8>)
 800396e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003972:	601a      	str	r2, [r3, #0]
												ukn++;
 8003974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003976:	3301      	adds	r3, #1
 8003978:	633b      	str	r3, [r7, #48]	; 0x30
												byte_write = hexToBin(ukn);
 800397a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800397c:	f7ff f89e 	bl	8002abc <hexToBin>
 8003980:	4603      	mov	r3, r0
 8003982:	461a      	mov	r2, r3
 8003984:	4b4a      	ldr	r3, [pc, #296]	; (8003ab0 <HAL_UART_RxCpltCallback+0x6bc>)
 8003986:	701a      	strb	r2, [r3, #0]
												uk = strchr(ukn, ':');
 8003988:	213a      	movs	r1, #58	; 0x3a
 800398a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800398c:	f010 fc3d 	bl	801420a <strchr>
 8003990:	63f8      	str	r0, [r7, #60]	; 0x3c
												if (uk) {
 8003992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d012      	beq.n	80039be <HAL_UART_RxCpltCallback+0x5ca>
													int l = atoi(++uk);
 8003998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800399a:	3301      	adds	r3, #1
 800399c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800399e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80039a0:	f00f fbef 	bl	8013182 <atoi>
 80039a4:	62f8      	str	r0, [r7, #44]	; 0x2c
													if ((l > 0) && (l < W25qxx_getSectorSize())) len_write = l;
 80039a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	dd08      	ble.n	80039be <HAL_UART_RxCpltCallback+0x5ca>
 80039ac:	f003 fc80 	bl	80072b0 <W25qxx_getSectorSize>
 80039b0:	4602      	mov	r2, r0
 80039b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d902      	bls.n	80039be <HAL_UART_RxCpltCallback+0x5ca>
 80039b8:	4a3c      	ldr	r2, [pc, #240]	; (8003aac <HAL_UART_RxCpltCallback+0x6b8>)
 80039ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039bc:	6013      	str	r3, [r2, #0]
												adr_sector = sek;
 80039be:	4a3d      	ldr	r2, [pc, #244]	; (8003ab4 <HAL_UART_RxCpltCallback+0x6c0>)
 80039c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c2:	6013      	str	r3, [r2, #0]
												offset_sector = 0;
 80039c4:	4b3c      	ldr	r3, [pc, #240]	; (8003ab8 <HAL_UART_RxCpltCallback+0x6c4>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
												ev = i;//flag_sector = true;
 80039ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039cc:	613b      	str	r3, [r7, #16]
								break;
 80039ce:	e02a      	b.n	8003a26 <HAL_UART_RxCpltCallback+0x632>
									if ((last_cmd_sector == cmdsRead) || (last_cmd_sector == cmdsNext)) {
 80039d0:	4b3a      	ldr	r3, [pc, #232]	; (8003abc <HAL_UART_RxCpltCallback+0x6c8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d003      	beq.n	80039e0 <HAL_UART_RxCpltCallback+0x5ec>
 80039d8:	4b38      	ldr	r3, [pc, #224]	; (8003abc <HAL_UART_RxCpltCallback+0x6c8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b06      	cmp	r3, #6
 80039de:	d124      	bne.n	8003a2a <HAL_UART_RxCpltCallback+0x636>
										if ((offset_sector + list_sector) < W25qxx_getSectorSize()) {
 80039e0:	4b35      	ldr	r3, [pc, #212]	; (8003ab8 <HAL_UART_RxCpltCallback+0x6c4>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	4b36      	ldr	r3, [pc, #216]	; (8003ac0 <HAL_UART_RxCpltCallback+0x6cc>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4413      	add	r3, r2
 80039ea:	461c      	mov	r4, r3
 80039ec:	f003 fc60 	bl	80072b0 <W25qxx_getSectorSize>
 80039f0:	4603      	mov	r3, r0
 80039f2:	429c      	cmp	r4, r3
 80039f4:	d219      	bcs.n	8003a2a <HAL_UART_RxCpltCallback+0x636>
											offset_sector += list_sector;
 80039f6:	4b30      	ldr	r3, [pc, #192]	; (8003ab8 <HAL_UART_RxCpltCallback+0x6c4>)
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	4b31      	ldr	r3, [pc, #196]	; (8003ac0 <HAL_UART_RxCpltCallback+0x6cc>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4413      	add	r3, r2
 8003a00:	4a2d      	ldr	r2, [pc, #180]	; (8003ab8 <HAL_UART_RxCpltCallback+0x6c4>)
 8003a02:	6013      	str	r3, [r2, #0]
											ev = i;//flag_sector = true;
 8003a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a06:	613b      	str	r3, [r7, #16]
								break;
 8003a08:	e00f      	b.n	8003a2a <HAL_UART_RxCpltCallback+0x636>
								break;
 8003a0a:	bf00      	nop
 8003a0c:	e017      	b.n	8003a3e <HAL_UART_RxCpltCallback+0x64a>
								break;
 8003a0e:	bf00      	nop
 8003a10:	e015      	b.n	8003a3e <HAL_UART_RxCpltCallback+0x64a>
								break;
 8003a12:	bf00      	nop
 8003a14:	e013      	b.n	8003a3e <HAL_UART_RxCpltCallback+0x64a>
								break;
 8003a16:	bf00      	nop
 8003a18:	e011      	b.n	8003a3e <HAL_UART_RxCpltCallback+0x64a>
								break;
 8003a1a:	bf00      	nop
 8003a1c:	e00f      	b.n	8003a3e <HAL_UART_RxCpltCallback+0x64a>
								break;
 8003a1e:	bf00      	nop
 8003a20:	e00d      	b.n	8003a3e <HAL_UART_RxCpltCallback+0x64a>
								break;
 8003a22:	bf00      	nop
 8003a24:	e00b      	b.n	8003a3e <HAL_UART_RxCpltCallback+0x64a>
								break;
 8003a26:	bf00      	nop
 8003a28:	e009      	b.n	8003a3e <HAL_UART_RxCpltCallback+0x64a>
								break;
 8003a2a:	bf00      	nop
							break;
 8003a2c:	e007      	b.n	8003a3e <HAL_UART_RxCpltCallback+0x64a>
					for (i = 0; i < MAX_CMDS; i++) {
 8003a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a30:	3301      	adds	r3, #1
 8003a32:	647b      	str	r3, [r7, #68]	; 0x44
 8003a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a36:	2b1a      	cmp	r3, #26
 8003a38:	f77f adf8 	ble.w	800362c <HAL_UART_RxCpltCallback+0x238>
 8003a3c:	e000      	b.n	8003a40 <HAL_UART_RxCpltCallback+0x64c>
							break;
 8003a3e:	bf00      	nop
				if (ev != -2) {
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f113 0f02 	cmn.w	r3, #2
 8003a46:	d017      	beq.n	8003a78 <HAL_UART_RxCpltCallback+0x684>
					if (ev == -1) ev = cmdErr;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a4e:	d101      	bne.n	8003a54 <HAL_UART_RxCpltCallback+0x660>
 8003a50:	2303      	movs	r3, #3
 8003a52:	613b      	str	r3, [r7, #16]
					if (osMessageQueuePut(evtQueHandle, (const void *)&ev, 0, 0) != osOK) devError |= devEVT;
 8003a54:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <HAL_UART_RxCpltCallback+0x6d0>)
 8003a56:	6818      	ldr	r0, [r3, #0]
 8003a58:	f107 0110 	add.w	r1, r7, #16
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f00c f954 	bl	800fd0c <osMessageQueuePut>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d006      	beq.n	8003a78 <HAL_UART_RxCpltCallback+0x684>
 8003a6a:	4b17      	ldr	r3, [pc, #92]	; (8003ac8 <HAL_UART_RxCpltCallback+0x6d4>)
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	f043 0310 	orr.w	r3, r3, #16
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	4b14      	ldr	r3, [pc, #80]	; (8003ac8 <HAL_UART_RxCpltCallback+0x6d4>)
 8003a76:	801a      	strh	r2, [r3, #0]
			rxInd = 0;
 8003a78:	4b14      	ldr	r3, [pc, #80]	; (8003acc <HAL_UART_RxCpltCallback+0x6d8>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 8003a7e:	4b14      	ldr	r3, [pc, #80]	; (8003ad0 <HAL_UART_RxCpltCallback+0x6dc>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Receive_IT(huart, &rxByte, 1) != HAL_OK) devError |= devUART;
 8003a84:	2201      	movs	r2, #1
 8003a86:	4913      	ldr	r1, [pc, #76]	; (8003ad4 <HAL_UART_RxCpltCallback+0x6e0>)
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f00a faa7 	bl	800dfdc <HAL_UART_Receive_IT>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d006      	beq.n	8003aa2 <HAL_UART_RxCpltCallback+0x6ae>
 8003a94:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <HAL_UART_RxCpltCallback+0x6d4>)
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	f043 0302 	orr.w	r3, r3, #2
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <HAL_UART_RxCpltCallback+0x6d4>)
 8003aa0:	801a      	strh	r2, [r3, #0]
}
 8003aa2:	bf00      	nop
 8003aa4:	374c      	adds	r7, #76	; 0x4c
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd90      	pop	{r4, r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20001f2c 	.word	0x20001f2c
 8003ab0:	20000104 	.word	0x20000104
 8003ab4:	20001f20 	.word	0x20001f20
 8003ab8:	20001f24 	.word	0x20001f24
 8003abc:	20000100 	.word	0x20000100
 8003ac0:	20001f28 	.word	0x20001f28
 8003ac4:	20000e74 	.word	0x20000e74
 8003ac8:	20001b08 	.word	0x20001b08
 8003acc:	20001b1a 	.word	0x20001b1a
 8003ad0:	20001b1c 	.word	0x20001b1c
 8003ad4:	20001b18 	.word	0x20001b18

08003ad8 <spiDone>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//    Функция устанавливает в начальное состояние 'готов' служебные параметры порта SPI1:
//
void spiDone(SPI_HandleTypeDef *hspi)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
#ifdef SET_W25FLASH
	if (hspi->Instance == SPI2) {
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a0a      	ldr	r2, [pc, #40]	; (8003b10 <spiDone+0x38>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d105      	bne.n	8003af6 <spiDone+0x1e>
		W25_UNSELECT();
 8003aea:	f003 f9f9 	bl	8006ee0 <W25_UNSELECT>
		spiRdy = 1;
 8003aee:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <spiDone+0x3c>)
 8003af0:	2201      	movs	r2, #1
 8003af2:	701a      	strb	r2, [r3, #0]
	else
	if (hspi->Instance == SPI1) {
		lcdRdy = 1;
	}
#endif
}
 8003af4:	e007      	b.n	8003b06 <spiDone+0x2e>
	if (hspi->Instance == SPI1) {
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a07      	ldr	r2, [pc, #28]	; (8003b18 <spiDone+0x40>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d102      	bne.n	8003b06 <spiDone+0x2e>
		lcdRdy = 1;
 8003b00:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <spiDone+0x44>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	701a      	strb	r2, [r3, #0]
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40003800 	.word	0x40003800
 8003b14:	200000f8 	.word	0x200000f8
 8003b18:	40013000 	.word	0x40013000
 8003b1c:	20000000 	.word	0x20000000

08003b20 <HAL_SPI_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема данных от порта SPI
//
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff ffd5 	bl	8003ad8 <spiDone>
}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении передачи данных в порт SPI
//
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff ffca 	bl	8003ad8 <spiDone>
}
 8003b44:	bf00      	nop
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_SPI_TxRxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема/передачи данных порта SPI
//
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ffbf 	bl	8003ad8 <spiDone>
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <HAL_SPI_ErrorCallback>:
//--------------------------------------------------------------------------------------------
//    CallBack функция, вызывается при возникновении ошибки у модуля SPI
//
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff ffb3 	bl	8003ad8 <spiDone>
	devError |= devSPI;
 8003b72:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <HAL_SPI_ErrorCallback+0x24>)
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	4b02      	ldr	r3, [pc, #8]	; (8003b88 <HAL_SPI_ErrorCallback+0x24>)
 8003b7e:	801a      	strh	r2, [r3, #0]
}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	20001b08 	.word	0x20001b08

08003b8c <HAL_I2C_ErrorCallback>:
	}
#endif
}
//--------------------------------------------------------------------------------------------
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
#ifdef SET_RDA_CHIP
	if (hi2c->Instance == I2C1) {
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a07      	ldr	r2, [pc, #28]	; (8003bb8 <HAL_I2C_ErrorCallback+0x2c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d106      	bne.n	8003bac <HAL_I2C_ErrorCallback+0x20>
		devError |= devRDA;
 8003b9e:	4b07      	ldr	r3, [pc, #28]	; (8003bbc <HAL_I2C_ErrorCallback+0x30>)
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	4b04      	ldr	r3, [pc, #16]	; (8003bbc <HAL_I2C_ErrorCallback+0x30>)
 8003baa:	801a      	strh	r2, [r3, #0]
	}
#endif
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	40005400 	.word	0x40005400
 8003bbc:	20001b08 	.word	0x20001b08

08003bc0 <HAL_GPIO_EXTI_Callback>:
//--------------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	80fb      	strh	r3, [r7, #6]
#ifdef SET_SLEEP
	if (sleep_mode) {
 8003bca:	4b2c      	ldr	r3, [pc, #176]	; (8003c7c <HAL_GPIO_EXTI_Callback+0xbc>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d027      	beq.n	8003c22 <HAL_GPIO_EXTI_Callback+0x62>
		if ((HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_SET) ||
 8003bd2:	2102      	movs	r1, #2
 8003bd4:	482a      	ldr	r0, [pc, #168]	; (8003c80 <HAL_GPIO_EXTI_Callback+0xc0>)
 8003bd6:	f004 fc7f 	bl	80084d8 <HAL_GPIO_ReadPin>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d006      	beq.n	8003bee <HAL_GPIO_EXTI_Callback+0x2e>
				(HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_SET)) {
 8003be0:	2104      	movs	r1, #4
 8003be2:	4827      	ldr	r0, [pc, #156]	; (8003c80 <HAL_GPIO_EXTI_Callback+0xc0>)
 8003be4:	f004 fc78 	bl	80084d8 <HAL_GPIO_ReadPin>
 8003be8:	4603      	mov	r3, r0
		if ((HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_SET) ||
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d141      	bne.n	8003c72 <HAL_GPIO_EXTI_Callback+0xb2>
			sleep_mode = false;
 8003bee:	4b23      	ldr	r3, [pc, #140]	; (8003c7c <HAL_GPIO_EXTI_Callback+0xbc>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]
			HAL_PWR_DisableSleepOnExit();
 8003bf4:	f006 f990 	bl	8009f18 <HAL_PWR_DisableSleepOnExit>
			int ev = cmdExitSleep;
 8003bf8:	2314      	movs	r3, #20
 8003bfa:	60fb      	str	r3, [r7, #12]
			if (osMessageQueuePut(evtQueHandle, (const void *)&ev, 0, 0)) devError |= devEVT;
 8003bfc:	4b21      	ldr	r3, [pc, #132]	; (8003c84 <HAL_GPIO_EXTI_Callback+0xc4>)
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	f107 010c 	add.w	r1, r7, #12
 8003c04:	2300      	movs	r3, #0
 8003c06:	2200      	movs	r2, #0
 8003c08:	f00c f880 	bl	800fd0c <osMessageQueuePut>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d02f      	beq.n	8003c72 <HAL_GPIO_EXTI_Callback+0xb2>
 8003c12:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <HAL_GPIO_EXTI_Callback+0xc8>)
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	f043 0310 	orr.w	r3, r3, #16
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	4b1a      	ldr	r3, [pc, #104]	; (8003c88 <HAL_GPIO_EXTI_Callback+0xc8>)
 8003c1e:	801a      	strh	r2, [r3, #0]
		}
		return;
 8003c20:	e027      	b.n	8003c72 <HAL_GPIO_EXTI_Callback+0xb2>
	}
#endif
	if ((GPIO_Pin == KEY0_Pin) || (GPIO_Pin == KEY1_Pin)) {
 8003c22:	88fb      	ldrh	r3, [r7, #6]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d002      	beq.n	8003c2e <HAL_GPIO_EXTI_Callback+0x6e>
 8003c28:	88fb      	ldrh	r3, [r7, #6]
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d122      	bne.n	8003c74 <HAL_GPIO_EXTI_Callback+0xb4>
		if (GPIO_Pin == KEY0_Pin) seek_up = 1;
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d103      	bne.n	8003c3c <HAL_GPIO_EXTI_Callback+0x7c>
 8003c34:	4b15      	ldr	r3, [pc, #84]	; (8003c8c <HAL_GPIO_EXTI_Callback+0xcc>)
 8003c36:	2201      	movs	r2, #1
 8003c38:	701a      	strb	r2, [r3, #0]
 8003c3a:	e005      	b.n	8003c48 <HAL_GPIO_EXTI_Callback+0x88>
		else
		if (GPIO_Pin == KEY1_Pin) seek_up = 0;
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d102      	bne.n	8003c48 <HAL_GPIO_EXTI_Callback+0x88>
 8003c42:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <HAL_GPIO_EXTI_Callback+0xcc>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	701a      	strb	r2, [r3, #0]
		int ev = cmdScan;
 8003c48:	230b      	movs	r3, #11
 8003c4a:	60bb      	str	r3, [r7, #8]
		if (osMessageQueuePut(evtQueHandle, (const void *)&ev, 0, 0)) devError |= devEVT;
 8003c4c:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <HAL_GPIO_EXTI_Callback+0xc4>)
 8003c4e:	6818      	ldr	r0, [r3, #0]
 8003c50:	f107 0108 	add.w	r1, r7, #8
 8003c54:	2300      	movs	r3, #0
 8003c56:	2200      	movs	r2, #0
 8003c58:	f00c f858 	bl	800fd0c <osMessageQueuePut>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d008      	beq.n	8003c74 <HAL_GPIO_EXTI_Callback+0xb4>
 8003c62:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <HAL_GPIO_EXTI_Callback+0xc8>)
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	f043 0310 	orr.w	r3, r3, #16
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <HAL_GPIO_EXTI_Callback+0xc8>)
 8003c6e:	801a      	strh	r2, [r3, #0]
 8003c70:	e000      	b.n	8003c74 <HAL_GPIO_EXTI_Callback+0xb4>
		return;
 8003c72:	bf00      	nop
	}
}
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20003600 	.word	0x20003600
 8003c80:	48000800 	.word	0x48000800
 8003c84:	20000e74 	.word	0x20000e74
 8003c88:	20001b08 	.word	0x20001b08
 8003c8c:	20000112 	.word	0x20000112

08003c90 <irdTask>:
  }
}
*********************************************************************************************/

void irdTask(void *argument)
{
 8003c90:	b5b0      	push	{r4, r5, r7, lr}
 8003c92:	b08e      	sub	sp, #56	; 0x38
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	6078      	str	r0, [r7, #4]
#ifdef SET_IRED

	ird_exit = 0;
 8003c98:	4bac      	ldr	r3, [pc, #688]	; (8003f4c <irdTask+0x2bc>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	701a      	strb	r2, [r3, #0]

bool ep_start = false;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
char ep_str[16] = {0};
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	613b      	str	r3, [r7, #16]
 8003ca8:	f107 0314 	add.w	r3, r7, #20
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	605a      	str	r2, [r3, #4]
 8003cb2:	609a      	str	r2, [r3, #8]
uint32_t ep_tmr = 0;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	62bb      	str	r3, [r7, #40]	; 0x28
uint32_t tmr_ired = 0;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
enIntIRED();
 8003cbc:	f7fd fa22 	bl	8001104 <enIntIRED>

  while (!restart) {
 8003cc0:	e1f8      	b.n	80040b4 <irdTask+0x424>

	if (!tmr_ired) {
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f040 81cf 	bne.w	8004068 <irdTask+0x3d8>
		if (decodeIRED(&results)) {
 8003cca:	48a1      	ldr	r0, [pc, #644]	; (8003f50 <irdTask+0x2c0>)
 8003ccc:	f7fd f9e4 	bl	8001098 <decodeIRED>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 81c8 	beq.w	8004068 <irdTask+0x3d8>

			tmr_ired = get_mstmr(_300ms);
 8003cd8:	f04f 001e 	mov.w	r0, #30
 8003cdc:	f04f 0100 	mov.w	r1, #0
 8003ce0:	f7ff f950 	bl	8002f84 <get_mstmr>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4613      	mov	r3, r2
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8003cec:	2200      	movs	r2, #0
 8003cee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cf2:	4898      	ldr	r0, [pc, #608]	; (8003f54 <irdTask+0x2c4>)
 8003cf4:	f004 fc08 	bl	8008508 <HAL_GPIO_WritePin>
			int8_t kid = -1;
 8003cf8:	23ff      	movs	r3, #255	; 0xff
 8003cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			for (int8_t i = 0; i < MAX_IRED_KEY; i++) {
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d04:	e019      	b.n	8003d3a <irdTask+0xaa>
				if (results.value == keyAll[i].code) {
 8003d06:	4b92      	ldr	r3, [pc, #584]	; (8003f50 <irdTask+0x2c0>)
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	f997 2022 	ldrsb.w	r2, [r7, #34]	; 0x22
 8003d0e:	4892      	ldr	r0, [pc, #584]	; (8003f58 <irdTask+0x2c8>)
 8003d10:	4613      	mov	r3, r2
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4403      	add	r3, r0
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4299      	cmp	r1, r3
 8003d20:	d104      	bne.n	8003d2c <irdTask+0x9c>
					kid = i;
 8003d22:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					break;
 8003d2a:	e00a      	b.n	8003d42 <irdTask+0xb2>
			for (int8_t i = 0; i < MAX_IRED_KEY; i++) {
 8003d2c:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	3301      	adds	r3, #1
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d3a:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003d3e:	2b14      	cmp	r3, #20
 8003d40:	dde1      	ble.n	8003d06 <irdTask+0x76>
				}
			}
			//
			if (kid == -1) sprintf(stline, "CODE:%08lX", results.value);
 8003d42:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d4a:	d107      	bne.n	8003d5c <irdTask+0xcc>
 8003d4c:	4b80      	ldr	r3, [pc, #512]	; (8003f50 <irdTask+0x2c0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	4982      	ldr	r1, [pc, #520]	; (8003f5c <irdTask+0x2cc>)
 8003d54:	4882      	ldr	r0, [pc, #520]	; (8003f60 <irdTask+0x2d0>)
 8003d56:	f010 f9f5 	bl	8014144 <siprintf>
 8003d5a:	e00c      	b.n	8003d76 <irdTask+0xe6>
					  else sprintf(stline, "irKEY: %s", keyAll[kid].name);
 8003d5c:	f997 2023 	ldrsb.w	r2, [r7, #35]	; 0x23
 8003d60:	4613      	mov	r3, r2
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	4413      	add	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4a7b      	ldr	r2, [pc, #492]	; (8003f58 <irdTask+0x2c8>)
 8003d6a:	4413      	add	r3, r2
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	497d      	ldr	r1, [pc, #500]	; (8003f64 <irdTask+0x2d4>)
 8003d70:	487b      	ldr	r0, [pc, #492]	; (8003f60 <irdTask+0x2d0>)
 8003d72:	f010 f9e7 	bl	8014144 <siprintf>
			Report(1, "[que:%u] %s\r\n", cntEvt, stline);
 8003d76:	4b7c      	ldr	r3, [pc, #496]	; (8003f68 <irdTask+0x2d8>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4b78      	ldr	r3, [pc, #480]	; (8003f60 <irdTask+0x2d0>)
 8003d80:	497a      	ldr	r1, [pc, #488]	; (8003f6c <irdTask+0x2dc>)
 8003d82:	2001      	movs	r0, #1
 8003d84:	f7ff fa50 	bl	8003228 <Report>
			//
			if (kid != -1) {
 8003d88:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d90:	f000 816a 	beq.w	8004068 <irdTask+0x3d8>
				int ird = evt_None;
 8003d94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d98:	60fb      	str	r3, [r7, #12]
				switch (kid) {
 8003d9a:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003d9e:	2b14      	cmp	r3, #20
 8003da0:	f200 814c 	bhi.w	800403c <irdTask+0x3ac>
 8003da4:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <irdTask+0x11c>)
 8003da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003daa:	bf00      	nop
 8003dac:	08003e13 	.word	0x08003e13
 8003db0:	08003e01 	.word	0x08003e01
 8003db4:	08003e07 	.word	0x08003e07
 8003db8:	08003e57 	.word	0x08003e57
 8003dbc:	08003e63 	.word	0x08003e63
 8003dc0:	08003e75 	.word	0x08003e75
 8003dc4:	08003e1f 	.word	0x08003e1f
 8003dc8:	08003e3b 	.word	0x08003e3b
 8003dcc:	08003e6f 	.word	0x08003e6f
 8003dd0:	08003f17 	.word	0x08003f17
 8003dd4:	08003f33 	.word	0x08003f33
 8003dd8:	08003f95 	.word	0x08003f95
 8003ddc:	08003f95 	.word	0x08003f95
 8003de0:	08003f95 	.word	0x08003f95
 8003de4:	08003f95 	.word	0x08003f95
 8003de8:	08003f95 	.word	0x08003f95
 8003dec:	08003f95 	.word	0x08003f95
 8003df0:	08003f95 	.word	0x08003f95
 8003df4:	08003f95 	.word	0x08003f95
 8003df8:	08003f95 	.word	0x08003f95
 8003dfc:	08003f95 	.word	0x08003f95
					case key_ch:
						ird = evt_Restart;
 8003e00:	2301      	movs	r3, #1
 8003e02:	60fb      	str	r3, [r7, #12]
					break;
 8003e04:	e11a      	b.n	800403c <irdTask+0x3ac>
					case key_ch_plus:
						seek_up = 1;
 8003e06:	4b5a      	ldr	r3, [pc, #360]	; (8003f70 <irdTask+0x2e0>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	701a      	strb	r2, [r3, #0]
						ird = evt_Scan;
 8003e0c:	230b      	movs	r3, #11
 8003e0e:	60fb      	str	r3, [r7, #12]
					break;
 8003e10:	e114      	b.n	800403c <irdTask+0x3ac>
					case key_ch_minus:
						seek_up = 0;
 8003e12:	4b57      	ldr	r3, [pc, #348]	; (8003f70 <irdTask+0x2e0>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	701a      	strb	r2, [r3, #0]
						ird = evt_Scan;
 8003e18:	230b      	movs	r3, #11
 8003e1a:	60fb      	str	r3, [r7, #12]
					break;
 8003e1c:	e10e      	b.n	800403c <irdTask+0x3ac>
					case key_minus:
						if (Volume) {
 8003e1e:	4b55      	ldr	r3, [pc, #340]	; (8003f74 <irdTask+0x2e4>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 8101 	beq.w	800402a <irdTask+0x39a>
							newVolume = Volume - 1;
 8003e28:	4b52      	ldr	r3, [pc, #328]	; (8003f74 <irdTask+0x2e4>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	4b51      	ldr	r3, [pc, #324]	; (8003f78 <irdTask+0x2e8>)
 8003e32:	701a      	strb	r2, [r3, #0]
							ird = evt_Vol;
 8003e34:	230d      	movs	r3, #13
 8003e36:	60fb      	str	r3, [r7, #12]
						}
					break;
 8003e38:	e0f7      	b.n	800402a <irdTask+0x39a>
					case key_plus:
						if (Volume < 15) {
 8003e3a:	4b4e      	ldr	r3, [pc, #312]	; (8003f74 <irdTask+0x2e4>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	2b0e      	cmp	r3, #14
 8003e40:	f200 80f5 	bhi.w	800402e <irdTask+0x39e>
							newVolume = Volume + 1;
 8003e44:	4b4b      	ldr	r3, [pc, #300]	; (8003f74 <irdTask+0x2e4>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	4b4a      	ldr	r3, [pc, #296]	; (8003f78 <irdTask+0x2e8>)
 8003e4e:	701a      	strb	r2, [r3, #0]
							ird = evt_Vol;
 8003e50:	230d      	movs	r3, #13
 8003e52:	60fb      	str	r3, [r7, #12]
						}
					break;
 8003e54:	e0eb      	b.n	800402e <irdTask+0x39e>
					case key_left:
						seek_up = 0;
 8003e56:	4b46      	ldr	r3, [pc, #280]	; (8003f70 <irdTask+0x2e0>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	701a      	strb	r2, [r3, #0]
						ird = evt_List;
 8003e5c:	2310      	movs	r3, #16
 8003e5e:	60fb      	str	r3, [r7, #12]
					break;
 8003e60:	e0ec      	b.n	800403c <irdTask+0x3ac>
					case key_right:
						seek_up = 1;
 8003e62:	4b43      	ldr	r3, [pc, #268]	; (8003f70 <irdTask+0x2e0>)
 8003e64:	2201      	movs	r2, #1
 8003e66:	701a      	strb	r2, [r3, #0]
						ird = evt_List;
 8003e68:	2310      	movs	r3, #16
 8003e6a:	60fb      	str	r3, [r7, #12]
					break;
 8003e6c:	e0e6      	b.n	800403c <irdTask+0x3ac>
					case key_eq:// enable/disable print via uart
						ird = evt_Mute;//evt_Sleep);
 8003e6e:	230e      	movs	r3, #14
 8003e70:	60fb      	str	r3, [r7, #12]
					break;
 8003e72:	e0e3      	b.n	800403c <irdTask+0x3ac>
					case key_sp:
						if (!ep_start) {
 8003e74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e78:	f083 0301 	eor.w	r3, r3, #1
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d038      	beq.n	8003ef4 <irdTask+0x264>
							ep_start = true;
 8003e82:	2301      	movs	r3, #1
 8003e84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							memset(ep_str, 0, sizeof(ep_str));
 8003e88:	f107 0310 	add.w	r3, r7, #16
 8003e8c:	2210      	movs	r2, #16
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	f00f fb75 	bl	8013580 <memset>
							ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - lfnt->FontHeight, SCREEN_WIDTH - 1, lfnt->FontHeight, PIX_OFF);
 8003e96:	4b39      	ldr	r3, [pc, #228]	; (8003f7c <irdTask+0x2ec>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	785b      	ldrb	r3, [r3, #1]
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	b219      	sxth	r1, r3
 8003ea6:	4b35      	ldr	r3, [pc, #212]	; (8003f7c <irdTask+0x2ec>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	785b      	ldrb	r3, [r3, #1]
 8003eac:	b21b      	sxth	r3, r3
 8003eae:	2200      	movs	r2, #0
 8003eb0:	9200      	str	r2, [sp, #0]
 8003eb2:	227f      	movs	r2, #127	; 0x7f
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	f7fd ffb4 	bl	8001e22 <ST7565_DrawFilledRectangle>
							sprintf(tmp, "Time:");
 8003eba:	4931      	ldr	r1, [pc, #196]	; (8003f80 <irdTask+0x2f0>)
 8003ebc:	4831      	ldr	r0, [pc, #196]	; (8003f84 <irdTask+0x2f4>)
 8003ebe:	f010 f941 	bl	8014144 <siprintf>
							ST7565_Print(0, SCREEN_HEIGHT - lfnt->FontHeight, tmp, lfnt, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8003ec2:	4b2e      	ldr	r3, [pc, #184]	; (8003f7c <irdTask+0x2ec>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	785b      	ldrb	r3, [r3, #1]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	b219      	sxth	r1, r3
 8003ed2:	4b2a      	ldr	r3, [pc, #168]	; (8003f7c <irdTask+0x2ec>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	9201      	str	r2, [sp, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	9200      	str	r2, [sp, #0]
 8003ede:	4a29      	ldr	r2, [pc, #164]	; (8003f84 <irdTask+0x2f4>)
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	f7fd fd45 	bl	8001970 <ST7565_Print>
							ST7565_Update();
 8003ee6:	f7fd fb93 	bl	8001610 <ST7565_Update>
							ep_tmr = get_tmr(20);
 8003eea:	2014      	movs	r0, #20
 8003eec:	f7ff f82c 	bl	8002f48 <get_tmr>
 8003ef0:	62b8      	str	r0, [r7, #40]	; 0x28
							ep_start = false;
							ep_tmr = 0;
							epoch = atoi(ep_str);
							ird = evt_Epoch;
						}
					break;
 8003ef2:	e0a3      	b.n	800403c <irdTask+0x3ac>
							ep_start = false;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							ep_tmr = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	62bb      	str	r3, [r7, #40]	; 0x28
							epoch = atoi(ep_str);
 8003efe:	f107 0310 	add.w	r3, r7, #16
 8003f02:	4618      	mov	r0, r3
 8003f04:	f00f f93d 	bl	8013182 <atoi>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	4b1e      	ldr	r3, [pc, #120]	; (8003f88 <irdTask+0x2f8>)
 8003f0e:	601a      	str	r2, [r3, #0]
							ird = evt_Epoch;
 8003f10:	2302      	movs	r3, #2
 8003f12:	60fb      	str	r3, [r7, #12]
					break;
 8003f14:	e092      	b.n	800403c <irdTask+0x3ac>
					case key_100://bandUp();
						if (Band < MAX_BAND) {
 8003f16:	4b1d      	ldr	r3, [pc, #116]	; (8003f8c <irdTask+0x2fc>)
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	f200 8089 	bhi.w	8004032 <irdTask+0x3a2>
							newBand = Band + 1;
 8003f20:	4b1a      	ldr	r3, [pc, #104]	; (8003f8c <irdTask+0x2fc>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	3301      	adds	r3, #1
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	4b19      	ldr	r3, [pc, #100]	; (8003f90 <irdTask+0x300>)
 8003f2a:	701a      	strb	r2, [r3, #0]
							ird = evt_Band;
 8003f2c:	2311      	movs	r3, #17
 8003f2e:	60fb      	str	r3, [r7, #12]
						}
					break;
 8003f30:	e07f      	b.n	8004032 <irdTask+0x3a2>
					case key_200://bandDown();
						if (Band) {
 8003f32:	4b16      	ldr	r3, [pc, #88]	; (8003f8c <irdTask+0x2fc>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d07d      	beq.n	8004036 <irdTask+0x3a6>
							newBand = Band - 1;
 8003f3a:	4b14      	ldr	r3, [pc, #80]	; (8003f8c <irdTask+0x2fc>)
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	4b13      	ldr	r3, [pc, #76]	; (8003f90 <irdTask+0x300>)
 8003f44:	701a      	strb	r2, [r3, #0]
							ird = evt_Band;
 8003f46:	2311      	movs	r3, #17
 8003f48:	60fb      	str	r3, [r7, #12]
						}
					break;
 8003f4a:	e074      	b.n	8004036 <irdTask+0x3a6>
 8003f4c:	20000138 	.word	0x20000138
 8003f50:	20000584 	.word	0x20000584
 8003f54:	48000800 	.word	0x48000800
 8003f58:	080192bc 	.word	0x080192bc
 8003f5c:	08017d94 	.word	0x08017d94
 8003f60:	20003604 	.word	0x20003604
 8003f64:	08017da0 	.word	0x08017da0
 8003f68:	20001f1f 	.word	0x20001f1f
 8003f6c:	08017dac 	.word	0x08017dac
 8003f70:	20000112 	.word	0x20000112
 8003f74:	20000113 	.word	0x20000113
 8003f78:	20000114 	.word	0x20000114
 8003f7c:	20002f48 	.word	0x20002f48
 8003f80:	08017dbc 	.word	0x08017dbc
 8003f84:	20001288 	.word	0x20001288
 8003f88:	20000018 	.word	0x20000018
 8003f8c:	20000110 	.word	0x20000110
 8003f90:	20000111 	.word	0x20000111
					case key_5:
					case key_6:
					case key_7:
					case key_8:
					case key_9:
						if (ep_start) {
 8003f94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d035      	beq.n	8004008 <irdTask+0x378>
							if (strlen(ep_str) < 10) {
 8003f9c:	f107 0310 	add.w	r3, r7, #16
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fc f915 	bl	80001d0 <strlen>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b09      	cmp	r3, #9
 8003faa:	d846      	bhi.n	800403a <irdTask+0x3aa>
								char ch = (kid - key_0) + 0x30;
 8003fac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fb0:	3325      	adds	r3, #37	; 0x25
 8003fb2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
								sprintf(ep_str+strlen(ep_str), "%c", ch);
 8003fb6:	f107 0310 	add.w	r3, r7, #16
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fc f908 	bl	80001d0 <strlen>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	f107 0310 	add.w	r3, r7, #16
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8003fcc:	493f      	ldr	r1, [pc, #252]	; (80040cc <irdTask+0x43c>)
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f010 f8b8 	bl	8014144 <siprintf>
								ST7565_Print(32, SCREEN_HEIGHT - lfnt->FontHeight, ep_str, lfnt, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8003fd4:	4b3e      	ldr	r3, [pc, #248]	; (80040d0 <irdTask+0x440>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	785b      	ldrb	r3, [r3, #1]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	b219      	sxth	r1, r3
 8003fe4:	4b3a      	ldr	r3, [pc, #232]	; (80040d0 <irdTask+0x440>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f107 0210 	add.w	r2, r7, #16
 8003fec:	2001      	movs	r0, #1
 8003fee:	9001      	str	r0, [sp, #4]
 8003ff0:	2001      	movs	r0, #1
 8003ff2:	9000      	str	r0, [sp, #0]
 8003ff4:	2020      	movs	r0, #32
 8003ff6:	f7fd fcbb 	bl	8001970 <ST7565_Print>
								ST7565_Update();
 8003ffa:	f7fd fb09 	bl	8001610 <ST7565_Update>
								ep_tmr = get_tmr(20);
 8003ffe:	2014      	movs	r0, #20
 8004000:	f7fe ffa2 	bl	8002f48 <get_tmr>
 8004004:	62b8      	str	r0, [r7, #40]	; 0x28
							}
						} else {
							newFreq = list[kid - key_0 + 2].freq;//for band=2 only !!!
							ird = evt_Freq;
						}
					break;
 8004006:	e018      	b.n	800403a <irdTask+0x3aa>
							newFreq = list[kid - key_0 + 2].freq;//for band=2 only !!!
 8004008:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800400c:	f1a3 0209 	sub.w	r2, r3, #9
 8004010:	4930      	ldr	r1, [pc, #192]	; (80040d4 <irdTask+0x444>)
 8004012:	4613      	mov	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8004020:	4a2d      	ldr	r2, [pc, #180]	; (80040d8 <irdTask+0x448>)
 8004022:	6013      	str	r3, [r2, #0]
							ird = evt_Freq;
 8004024:	230c      	movs	r3, #12
 8004026:	60fb      	str	r3, [r7, #12]
					break;
 8004028:	e007      	b.n	800403a <irdTask+0x3aa>
					break;
 800402a:	bf00      	nop
 800402c:	e006      	b.n	800403c <irdTask+0x3ac>
					break;
 800402e:	bf00      	nop
 8004030:	e004      	b.n	800403c <irdTask+0x3ac>
					break;
 8004032:	bf00      	nop
 8004034:	e002      	b.n	800403c <irdTask+0x3ac>
					break;
 8004036:	bf00      	nop
 8004038:	e000      	b.n	800403c <irdTask+0x3ac>
					break;
 800403a:	bf00      	nop
				}//switch (kid)
				if (ird != evt_None) {
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004042:	d011      	beq.n	8004068 <irdTask+0x3d8>
					if (osMessageQueuePut(evtQueHandle, (const void *)&ird, 0, 0) != osOK) devError |= devEVT;
 8004044:	4b25      	ldr	r3, [pc, #148]	; (80040dc <irdTask+0x44c>)
 8004046:	6818      	ldr	r0, [r3, #0]
 8004048:	f107 010c 	add.w	r1, r7, #12
 800404c:	2300      	movs	r3, #0
 800404e:	2200      	movs	r2, #0
 8004050:	f00b fe5c 	bl	800fd0c <osMessageQueuePut>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d006      	beq.n	8004068 <irdTask+0x3d8>
 800405a:	4b21      	ldr	r3, [pc, #132]	; (80040e0 <irdTask+0x450>)
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	f043 0310 	orr.w	r3, r3, #16
 8004062:	b29a      	uxth	r2, r3
 8004064:	4b1e      	ldr	r3, [pc, #120]	; (80040e0 <irdTask+0x450>)
 8004066:	801a      	strh	r2, [r3, #0]
				}
			}//if (kid != -1)
		}//if (decodeIRED(&results))
	}
	if (ep_tmr) {
 8004068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <irdTask+0x3f4>
		if (check_tmr(ep_tmr)) {
 800406e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004070:	f7fe ff77 	bl	8002f62 <check_tmr>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d004      	beq.n	8004084 <irdTask+0x3f4>
			ep_tmr = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	62bb      	str	r3, [r7, #40]	; 0x28
			ep_start = false;
 800407e:	2300      	movs	r3, #0
 8004080:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
	}
	if (tmr_ired) {
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	2b00      	cmp	r3, #0
 8004088:	d014      	beq.n	80040b4 <irdTask+0x424>
		if (check_mstmr(tmr_ired)) {
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	2200      	movs	r2, #0
 800408e:	461c      	mov	r4, r3
 8004090:	4615      	mov	r5, r2
 8004092:	4620      	mov	r0, r4
 8004094:	4629      	mov	r1, r5
 8004096:	f7fe ff88 	bl	8002faa <check_mstmr>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d009      	beq.n	80040b4 <irdTask+0x424>
			tmr_ired = 0;
 80040a0:	2300      	movs	r3, #0
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24
			resumeIRED();
 80040a4:	f7fd f846 	bl	8001134 <resumeIRED>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 80040a8:	2201      	movs	r2, #1
 80040aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040ae:	480d      	ldr	r0, [pc, #52]	; (80040e4 <irdTask+0x454>)
 80040b0:	f004 fa2a 	bl	8008508 <HAL_GPIO_WritePin>
  while (!restart) {
 80040b4:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <irdTask+0x458>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f43f ae01 	beq.w	8003cc2 <irdTask+0x32>
		}
	}

  }

  ird_exit = 1;
 80040c0:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <irdTask+0x45c>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	701a      	strb	r2, [r3, #0]

  osThreadExit();
 80040c6:	f00b fc87 	bl	800f9d8 <osThreadExit>
 80040ca:	bf00      	nop
 80040cc:	08017dc4 	.word	0x08017dc4
 80040d0:	20002f48 	.word	0x20002f48
 80040d4:	20002f6c 	.word	0x20002f6c
 80040d8:	2000010c 	.word	0x2000010c
 80040dc:	20000e74 	.word	0x20000e74
 80040e0:	20001b08 	.word	0x20001b08
 80040e4:	48000800 	.word	0x48000800
 80040e8:	20001f1c 	.word	0x20001f1c
 80040ec:	20000138 	.word	0x20000138

080040f0 <StartTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask */
void StartTask(void *argument)
{
 80040f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040f4:	b0c8      	sub	sp, #288	; 0x120
 80040f6:	af08      	add	r7, sp, #32
 80040f8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */


    Report(1, "[que:%u] Start application ver.%s\r\n", getQueCount(evtQueHandle), ver);
 80040fa:	4b3c      	ldr	r3, [pc, #240]	; (80041ec <StartTask+0xfc>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fe fd4a 	bl	8002b98 <getQueCount>
 8004104:	4602      	mov	r2, r0
 8004106:	4b3a      	ldr	r3, [pc, #232]	; (80041f0 <StartTask+0x100>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	493a      	ldr	r1, [pc, #232]	; (80041f4 <StartTask+0x104>)
 800410c:	2001      	movs	r0, #1
 800410e:	f7ff f88b 	bl	8003228 <Report>

#ifdef SET_W25FLASH
    chipPresent = W25qxx_Init();
 8004112:	f002 fffb 	bl	800710c <W25qxx_Init>
 8004116:	4603      	mov	r3, r0
 8004118:	461a      	mov	r2, r3
 800411a:	4b37      	ldr	r3, [pc, #220]	; (80041f8 <StartTask+0x108>)
 800411c:	701a      	strb	r2, [r3, #0]
    uint32_t cid = W25qxx_getChipID();
 800411e:	f003 f8af 	bl	8007280 <W25qxx_getChipID>
 8004122:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if ( chipPresent && ((cid >= W25Q10) && (cid <= W25Q128)) ) validChipID = true;
 8004126:	4b34      	ldr	r3, [pc, #208]	; (80041f8 <StartTask+0x108>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <StartTask+0x54>
 800412e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d006      	beq.n	8004144 <StartTask+0x54>
 8004136:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800413a:	2b08      	cmp	r3, #8
 800413c:	d802      	bhi.n	8004144 <StartTask+0x54>
 800413e:	4b2f      	ldr	r3, [pc, #188]	; (80041fc <StartTask+0x10c>)
 8004140:	2201      	movs	r2, #1
 8004142:	701a      	strb	r2, [r3, #0]
    list_sector = W25qxx_getPageSize() << 1;
 8004144:	f003 f8c0 	bl	80072c8 <W25qxx_getPageSize>
 8004148:	4603      	mov	r3, r0
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	461a      	mov	r2, r3
 800414e:	4b2c      	ldr	r3, [pc, #176]	; (8004200 <StartTask+0x110>)
 8004150:	601a      	str	r2, [r3, #0]
    //
    listSize = sizeof(rec_t) * MAX_LIST;
 8004152:	4b2c      	ldr	r3, [pc, #176]	; (8004204 <StartTask+0x114>)
 8004154:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004158:	801a      	strh	r2, [r3, #0]
    memset((uint8_t *)&list[0].band, 0, listSize);
 800415a:	4b2a      	ldr	r3, [pc, #168]	; (8004204 <StartTask+0x114>)
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	2100      	movs	r1, #0
 8004162:	4829      	ldr	r0, [pc, #164]	; (8004208 <StartTask+0x118>)
 8004164:	f00f fa0c 	bl	8013580 <memset>
    //
    cfgSector = W25qxx_getSectorCount() - 1;
 8004168:	f003 f896 	bl	8007298 <W25qxx_getSectorCount>
 800416c:	4603      	mov	r3, r0
 800416e:	3b01      	subs	r3, #1
 8004170:	4a26      	ldr	r2, [pc, #152]	; (800420c <StartTask+0x11c>)
 8004172:	6013      	str	r3, [r2, #0]
    if (W25qxx_IsEmptySector(cfgSector, 0, listSize)) {//sector is empty -> need write data to sector
 8004174:	4b25      	ldr	r3, [pc, #148]	; (800420c <StartTask+0x11c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a22      	ldr	r2, [pc, #136]	; (8004204 <StartTask+0x114>)
 800417a:	8812      	ldrh	r2, [r2, #0]
 800417c:	2100      	movs	r1, #0
 800417e:	4618      	mov	r0, r3
 8004180:	f003 f90c 	bl	800739c <W25qxx_IsEmptySector>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d017      	beq.n	80041ba <StartTask+0xca>
    	if (!(devError & devSPI)) {
 800418a:	4b21      	ldr	r3, [pc, #132]	; (8004210 <StartTask+0x120>)
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d14b      	bne.n	800422e <StartTask+0x13e>
    		W25qxx_WriteSector((uint8_t *)&def_list[0].band, cfgSector, 0, listSize);
 8004196:	4b1d      	ldr	r3, [pc, #116]	; (800420c <StartTask+0x11c>)
 8004198:	6819      	ldr	r1, [r3, #0]
 800419a:	4b1a      	ldr	r3, [pc, #104]	; (8004204 <StartTask+0x114>)
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	2200      	movs	r2, #0
 80041a0:	481c      	ldr	r0, [pc, #112]	; (8004214 <StartTask+0x124>)
 80041a2:	f003 fa6f 	bl	8007684 <W25qxx_WriteSector>
    		Report(1, "Writen cfg_stations_data (%lu bytes) to cfgSector #%lu\r\n", listSize, cfgSector);
 80041a6:	4b17      	ldr	r3, [pc, #92]	; (8004204 <StartTask+0x114>)
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	4b17      	ldr	r3, [pc, #92]	; (800420c <StartTask+0x11c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4919      	ldr	r1, [pc, #100]	; (8004218 <StartTask+0x128>)
 80041b2:	2001      	movs	r0, #1
 80041b4:	f7ff f838 	bl	8003228 <Report>
 80041b8:	e039      	b.n	800422e <StartTask+0x13e>
      	}
    } else {//in sector	present any data
    	if (!(devError & devSPI)) {
 80041ba:	4b15      	ldr	r3, [pc, #84]	; (8004210 <StartTask+0x120>)
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d12c      	bne.n	8004220 <StartTask+0x130>
    		W25qxx_ReadSector((uint8_t *)&list[0].band, cfgSector, 0, listSize);
 80041c6:	4b11      	ldr	r3, [pc, #68]	; (800420c <StartTask+0x11c>)
 80041c8:	6819      	ldr	r1, [r3, #0]
 80041ca:	4b0e      	ldr	r3, [pc, #56]	; (8004204 <StartTask+0x114>)
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	2200      	movs	r2, #0
 80041d0:	480d      	ldr	r0, [pc, #52]	; (8004208 <StartTask+0x118>)
 80041d2:	f003 fb7f 	bl	80078d4 <W25qxx_ReadSector>
    		Report(1, "Readed cfg_stations_data (%lu bytes) from cfgSector #%lu\r\n", listSize, cfgSector);
 80041d6:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <StartTask+0x114>)
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	4b0b      	ldr	r3, [pc, #44]	; (800420c <StartTask+0x11c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	490e      	ldr	r1, [pc, #56]	; (800421c <StartTask+0x12c>)
 80041e2:	2001      	movs	r0, #1
 80041e4:	f7ff f820 	bl	8003228 <Report>
 80041e8:	e021      	b.n	800422e <StartTask+0x13e>
 80041ea:	bf00      	nop
 80041ec:	20000e74 	.word	0x20000e74
 80041f0:	20000004 	.word	0x20000004
 80041f4:	08017dc8 	.word	0x08017dc8
 80041f8:	20002f34 	.word	0x20002f34
 80041fc:	20002f35 	.word	0x20002f35
 8004200:	20001f28 	.word	0x20001f28
 8004204:	200032f0 	.word	0x200032f0
 8004208:	20002f6c 	.word	0x20002f6c
 800420c:	20002f40 	.word	0x20002f40
 8004210:	20001b08 	.word	0x20001b08
 8004214:	08018f38 	.word	0x08018f38
 8004218:	08017dec 	.word	0x08017dec
 800421c:	08017e28 	.word	0x08017e28
      	} else {
      		memcpy((uint8_t *)&list[0].band, (uint8_t *)&def_list[0].band, listSize);
 8004220:	4ba9      	ldr	r3, [pc, #676]	; (80044c8 <StartTask+0x3d8>)
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	49a9      	ldr	r1, [pc, #676]	; (80044cc <StartTask+0x3dc>)
 8004228:	48a9      	ldr	r0, [pc, #676]	; (80044d0 <StartTask+0x3e0>)
 800422a:	f00f f99b 	bl	8013564 <memcpy>
    }
#endif


#ifdef SET_RDA_CHIP
    rdaID = rda5807_init(&Freq);
 800422e:	48a9      	ldr	r0, [pc, #676]	; (80044d4 <StartTask+0x3e4>)
 8004230:	f001 fc16 	bl	8005a60 <rda5807_init>
 8004234:	4603      	mov	r3, r0
 8004236:	461a      	mov	r2, r3
 8004238:	4ba7      	ldr	r3, [pc, #668]	; (80044d8 <StartTask+0x3e8>)
 800423a:	701a      	strb	r2, [r3, #0]
    RSSI = rda5807_rssi();
 800423c:	f001 fc7e 	bl	8005b3c <rda5807_rssi>
 8004240:	4603      	mov	r3, r0
 8004242:	461a      	mov	r2, r3
 8004244:	4ba5      	ldr	r3, [pc, #660]	; (80044dc <StartTask+0x3ec>)
 8004246:	801a      	strh	r2, [r3, #0]
    rda5807_SetVolume(Volume);
 8004248:	4ba5      	ldr	r3, [pc, #660]	; (80044e0 <StartTask+0x3f0>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	4618      	mov	r0, r3
 800424e:	f001 fe53 	bl	8005ef8 <rda5807_SetVolume>
    rda5807_SetBassBoost(BassBoost);
 8004252:	4ba4      	ldr	r3, [pc, #656]	; (80044e4 <StartTask+0x3f4>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f001 fe96 	bl	8005f88 <rda5807_SetBassBoost>
    stereo = rda5807_Get_StereoMonoFlag();
 800425c:	f001 ffaa 	bl	80061b4 <rda5807_Get_StereoMonoFlag>
 8004260:	4603      	mov	r3, r0
 8004262:	461a      	mov	r2, r3
 8004264:	4ba0      	ldr	r3, [pc, #640]	; (80044e8 <StartTask+0x3f8>)
 8004266:	701a      	strb	r2, [r3, #0]
    Chan = rda5807_Get_Channel();
 8004268:	f001 ffbc 	bl	80061e4 <rda5807_Get_Channel>
 800426c:	4603      	mov	r3, r0
 800426e:	461a      	mov	r2, r3
 8004270:	4b9e      	ldr	r3, [pc, #632]	; (80044ec <StartTask+0x3fc>)
 8004272:	801a      	strh	r2, [r3, #0]


#ifdef SET_DISPLAY

	#ifdef FONT_6x8
  		FontDef_t Font_6x8 = { 6, 8, Font6x8 };
 8004274:	4a9e      	ldr	r2, [pc, #632]	; (80044f0 <StartTask+0x400>)
 8004276:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800427a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800427e:	6018      	str	r0, [r3, #0]
 8004280:	3304      	adds	r3, #4
 8004282:	8019      	strh	r1, [r3, #0]
  		lfnt = &Font_6x8;
 8004284:	4a9b      	ldr	r2, [pc, #620]	; (80044f4 <StartTask+0x404>)
 8004286:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800428a:	6013      	str	r3, [r2, #0]
	#endif

  	uint16_t lin1 = 1;
 800428c:	2301      	movs	r3, #1
 800428e:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
  	uint16_t lin2 = lin1 + Font_6x8.FontHeight;//chipID...
 8004292:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8004296:	b29a      	uxth	r2, r3
 8004298:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800429c:	4413      	add	r3, r2
 800429e:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
  	uint16_t lin3 = lin2 + Font_6x8.FontHeight + 1;//Band...
 80042a2:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80042ac:	4413      	add	r3, r2
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3301      	adds	r3, #1
 80042b2:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
  	uint16_t lin4 = lin3 + Font_6x8.FontHeight + 1;//Volume...//Freq...
 80042b6:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80042c0:	4413      	add	r3, r2
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3301      	adds	r3, #1
 80042c6:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
  	uint16_t lin5 = lin4 + Font_6x8.FontHeight + 1;//Freq...//Volume...
 80042ca:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 80042d4:	4413      	add	r3, r2
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3301      	adds	r3, #1
 80042da:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
  	uint16_t lin6 = lin5 + Font_6x8.FontHeight + 1;//Station
 80042de:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042e8:	4413      	add	r3, r2
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	3301      	adds	r3, #1
 80042ee:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
  	char st[64];
  	char sta[32];
  	char stb[32];

  	ST7565_Reset();
 80042f2:	f7fc ffdd 	bl	80012b0 <ST7565_Reset>
  	ST7565_Init();
 80042f6:	f7fd f8f3 	bl	80014e0 <ST7565_Init>

    int dl = sprintf(tmp, "Ver.%s", ver);
 80042fa:	4b7f      	ldr	r3, [pc, #508]	; (80044f8 <StartTask+0x408>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	497e      	ldr	r1, [pc, #504]	; (80044fc <StartTask+0x40c>)
 8004302:	487f      	ldr	r0, [pc, #508]	; (8004500 <StartTask+0x410>)
 8004304:	f00f ff1e 	bl	8014144 <siprintf>
 8004308:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    uint16_t x = ((SCREEN_WIDTH - (lfnt->FontWidth * dl)) >> 1) & 0x7f;
 800430c:	4b79      	ldr	r3, [pc, #484]	; (80044f4 <StartTask+0x404>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004318:	fb02 f303 	mul.w	r3, r2, r3
 800431c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004320:	105b      	asrs	r3, r3, #1
 8004322:	b29b      	uxth	r3, r3
 8004324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004328:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
    ST7565_Print(x, SCREEN_HEIGHT - lfnt->FontHeight, tmp, lfnt, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 800432c:	f9b7 00ca 	ldrsh.w	r0, [r7, #202]	; 0xca
 8004330:	4b70      	ldr	r3, [pc, #448]	; (80044f4 <StartTask+0x404>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	785b      	ldrb	r3, [r3, #1]
 8004336:	b29b      	uxth	r3, r3
 8004338:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800433c:	b29b      	uxth	r3, r3
 800433e:	b219      	sxth	r1, r3
 8004340:	4b6c      	ldr	r3, [pc, #432]	; (80044f4 <StartTask+0x404>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2201      	movs	r2, #1
 8004346:	9201      	str	r2, [sp, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	9200      	str	r2, [sp, #0]
 800434c:	4a6c      	ldr	r2, [pc, #432]	; (8004500 <StartTask+0x410>)
 800434e:	f7fd fb0f 	bl	8001970 <ST7565_Print>

	#ifdef SET_RDA_CHIP
    	int il = sprintf(st, "RDA5807 chipID:0x%x", rdaID);
 8004352:	4b61      	ldr	r3, [pc, #388]	; (80044d8 <StartTask+0x3e8>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800435c:	4969      	ldr	r1, [pc, #420]	; (8004504 <StartTask+0x414>)
 800435e:	4618      	mov	r0, r3
 8004360:	f00f fef0 	bl	8014144 <siprintf>
 8004364:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
    	uint16_t xf = ((SCREEN_WIDTH - (lfnt->FontWidth * il)) >> 1) & 0x7f;
 8004368:	4b62      	ldr	r3, [pc, #392]	; (80044f4 <StartTask+0x404>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004374:	fb02 f303 	mul.w	r3, r2, r3
 8004378:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800437c:	105b      	asrs	r3, r3, #1
 800437e:	b29b      	uxth	r3, r3
 8004380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004384:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    	if (!xf) xf = 1;
 8004388:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800438c:	2b00      	cmp	r3, #0
 800438e:	d102      	bne.n	8004396 <StartTask+0x2a6>
 8004390:	2301      	movs	r3, #1
 8004392:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    	ST7565_Print(xf, lin2, st, lfnt, 1, PIX_ON);
 8004396:	f9b7 00f6 	ldrsh.w	r0, [r7, #246]	; 0xf6
 800439a:	f9b7 10d4 	ldrsh.w	r1, [r7, #212]	; 0xd4
 800439e:	4b55      	ldr	r3, [pc, #340]	; (80044f4 <StartTask+0x404>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80043a6:	2401      	movs	r4, #1
 80043a8:	9401      	str	r4, [sp, #4]
 80043aa:	2401      	movs	r4, #1
 80043ac:	9400      	str	r4, [sp, #0]
 80043ae:	f7fd fadf 	bl	8001970 <ST7565_Print>

    	int it = sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 80043b2:	4b55      	ldr	r3, [pc, #340]	; (8004508 <StartTask+0x418>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	4b54      	ldr	r3, [pc, #336]	; (800450c <StartTask+0x41c>)
 80043ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80043be:	f107 0320 	add.w	r3, r7, #32
 80043c2:	4953      	ldr	r1, [pc, #332]	; (8004510 <StartTask+0x420>)
 80043c4:	4618      	mov	r0, r3
 80043c6:	f00f febd 	bl	8014144 <siprintf>
 80043ca:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    	int lit = it;
 80043ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043d2:	61fb      	str	r3, [r7, #28]
    	xf = ((SCREEN_WIDTH - (lfnt->FontWidth * it)) >> 1) & 0x7f;
 80043d4:	4b47      	ldr	r3, [pc, #284]	; (80044f4 <StartTask+0x404>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	461a      	mov	r2, r3
 80043dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043e0:	fb02 f303 	mul.w	r3, r2, r3
 80043e4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80043e8:	105b      	asrs	r3, r3, #1
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043f0:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 80043f4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <StartTask+0x314>
 80043fc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004400:	2b7d      	cmp	r3, #125	; 0x7d
 8004402:	d902      	bls.n	800440a <StartTask+0x31a>
 8004404:	2301      	movs	r3, #1
 8004406:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    	ST7565_Print(xf, lin3, stb, lfnt, 1, PIX_ON);
 800440a:	f9b7 00f6 	ldrsh.w	r0, [r7, #246]	; 0xf6
 800440e:	f9b7 10d2 	ldrsh.w	r1, [r7, #210]	; 0xd2
 8004412:	4b38      	ldr	r3, [pc, #224]	; (80044f4 <StartTask+0x404>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f107 0220 	add.w	r2, r7, #32
 800441a:	2401      	movs	r4, #1
 800441c:	9401      	str	r4, [sp, #4]
 800441e:	2401      	movs	r4, #1
 8004420:	9400      	str	r4, [sp, #0]
 8004422:	f7fd faa5 	bl	8001970 <ST7565_Print>

    	int im = sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8004426:	4b2f      	ldr	r3, [pc, #188]	; (80044e4 <StartTask+0x3f4>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	4b2c      	ldr	r3, [pc, #176]	; (80044e0 <StartTask+0x3f0>)
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004434:	4937      	ldr	r1, [pc, #220]	; (8004514 <StartTask+0x424>)
 8004436:	f00f fe85 	bl	8014144 <siprintf>
 800443a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
    	int lim = im;
 800443e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004442:	61bb      	str	r3, [r7, #24]
    	xf = ((SCREEN_WIDTH - (lfnt->FontWidth * im)) >> 1) & 0x7f;
 8004444:	4b2b      	ldr	r3, [pc, #172]	; (80044f4 <StartTask+0x404>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004450:	fb02 f303 	mul.w	r3, r2, r3
 8004454:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004458:	105b      	asrs	r3, r3, #1
 800445a:	b29b      	uxth	r3, r3
 800445c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004460:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8004464:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <StartTask+0x384>
 800446c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004470:	2b7d      	cmp	r3, #125	; 0x7d
 8004472:	d902      	bls.n	800447a <StartTask+0x38a>
 8004474:	2301      	movs	r3, #1
 8004476:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    	ST7565_Print(xf, lin4, st, lfnt, 1, PIX_ON);
 800447a:	f9b7 00f6 	ldrsh.w	r0, [r7, #246]	; 0xf6
 800447e:	f9b7 10d0 	ldrsh.w	r1, [r7, #208]	; 0xd0
 8004482:	4b1c      	ldr	r3, [pc, #112]	; (80044f4 <StartTask+0x404>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800448a:	2401      	movs	r4, #1
 800448c:	9401      	str	r4, [sp, #4]
 800448e:	2401      	movs	r4, #1
 8004490:	9400      	str	r4, [sp, #0]
 8004492:	f7fd fa6d 	bl	8001970 <ST7565_Print>

    	if (stereo)
 8004496:	4b14      	ldr	r3, [pc, #80]	; (80044e8 <StartTask+0x3f8>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d03e      	beq.n	800451c <StartTask+0x42c>
    		il = sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 800449e:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <StartTask+0x3ec>)
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	461c      	mov	r4, r3
 80044a4:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <StartTask+0x3e4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fc f84d 	bl	8000548 <__aeabi_f2d>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80044b6:	e9cd 2300 	strd	r2, r3, [sp]
 80044ba:	4622      	mov	r2, r4
 80044bc:	4916      	ldr	r1, [pc, #88]	; (8004518 <StartTask+0x428>)
 80044be:	f00f fe41 	bl	8014144 <siprintf>
 80044c2:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 80044c6:	e03d      	b.n	8004544 <StartTask+0x454>
 80044c8:	200032f0 	.word	0x200032f0
 80044cc:	08018f38 	.word	0x08018f38
 80044d0:	20002f6c 	.word	0x20002f6c
 80044d4:	20000108 	.word	0x20000108
 80044d8:	20002f58 	.word	0x20002f58
 80044dc:	20002f56 	.word	0x20002f56
 80044e0:	20000113 	.word	0x20000113
 80044e4:	20002f5a 	.word	0x20002f5a
 80044e8:	20002f5c 	.word	0x20002f5c
 80044ec:	20002f54 	.word	0x20002f54
 80044f0:	08018294 	.word	0x08018294
 80044f4:	20002f48 	.word	0x20002f48
 80044f8:	20000004 	.word	0x20000004
 80044fc:	08017e64 	.word	0x08017e64
 8004500:	20001288 	.word	0x20001288
 8004504:	08017e6c 	.word	0x08017e6c
 8004508:	20000110 	.word	0x20000110
 800450c:	2000011c 	.word	0x2000011c
 8004510:	08017e80 	.word	0x08017e80
 8004514:	08017e8c 	.word	0x08017e8c
 8004518:	08017e9c 	.word	0x08017e9c
    	else
    		il = sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 800451c:	4b72      	ldr	r3, [pc, #456]	; (80046e8 <StartTask+0x5f8>)
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	461c      	mov	r4, r3
 8004522:	4b72      	ldr	r3, [pc, #456]	; (80046ec <StartTask+0x5fc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f7fc f80e 	bl	8000548 <__aeabi_f2d>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004534:	e9cd 2300 	strd	r2, r3, [sp]
 8004538:	4622      	mov	r2, r4
 800453a:	496d      	ldr	r1, [pc, #436]	; (80046f0 <StartTask+0x600>)
 800453c:	f00f fe02 	bl	8014144 <siprintf>
 8004540:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
    	int lil = il;
 8004544:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004548:	617b      	str	r3, [r7, #20]
    	xf = ((SCREEN_WIDTH - (lfnt->FontWidth * il)) >> 1) & 0x7f;
 800454a:	4b6a      	ldr	r3, [pc, #424]	; (80046f4 <StartTask+0x604>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	461a      	mov	r2, r3
 8004552:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004556:	fb02 f303 	mul.w	r3, r2, r3
 800455a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800455e:	105b      	asrs	r3, r3, #1
 8004560:	b29b      	uxth	r3, r3
 8004562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004566:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 800456a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <StartTask+0x48a>
 8004572:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004576:	2b7d      	cmp	r3, #125	; 0x7d
 8004578:	d902      	bls.n	8004580 <StartTask+0x490>
 800457a:	2301      	movs	r3, #1
 800457c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    	ST7565_Print(xf, lin5, st, lfnt, 1, PIX_ON);
 8004580:	f9b7 00f6 	ldrsh.w	r0, [r7, #246]	; 0xf6
 8004584:	f9b7 10ce 	ldrsh.w	r1, [r7, #206]	; 0xce
 8004588:	4b5a      	ldr	r3, [pc, #360]	; (80046f4 <StartTask+0x604>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004590:	2401      	movs	r4, #1
 8004592:	9401      	str	r4, [sp, #4]
 8004594:	2401      	movs	r4, #1
 8004596:	9400      	str	r4, [sp, #0]
 8004598:	f7fd f9ea 	bl	8001970 <ST7565_Print>

    	int ia = sprintf(sta, "%s", nameStation(Freq));
 800459c:	4b53      	ldr	r3, [pc, #332]	; (80046ec <StartTask+0x5fc>)
 800459e:	edd3 7a00 	vldr	s15, [r3]
 80045a2:	eeb0 0a67 	vmov.f32	s0, s15
 80045a6:	f7fe fb03 	bl	8002bb0 <nameStation>
 80045aa:	4602      	mov	r2, r0
 80045ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80045b0:	4951      	ldr	r1, [pc, #324]	; (80046f8 <StartTask+0x608>)
 80045b2:	4618      	mov	r0, r3
 80045b4:	f00f fdc6 	bl	8014144 <siprintf>
 80045b8:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
    	int lia = ia;
 80045bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80045c0:	613b      	str	r3, [r7, #16]
    	xf = ((SCREEN_WIDTH - (lfnt->FontWidth * ia)) >> 1) & 0x7f;
 80045c2:	4b4c      	ldr	r3, [pc, #304]	; (80046f4 <StartTask+0x604>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80045ce:	fb02 f303 	mul.w	r3, r2, r3
 80045d2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80045d6:	105b      	asrs	r3, r3, #1
 80045d8:	b29b      	uxth	r3, r3
 80045da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045de:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 80045e2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <StartTask+0x502>
 80045ea:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80045ee:	2b7d      	cmp	r3, #125	; 0x7d
 80045f0:	d902      	bls.n	80045f8 <StartTask+0x508>
 80045f2:	2301      	movs	r3, #1
 80045f4:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    	ST7565_Print(xf, lin6, sta, lfnt, 1, PIX_ON);
 80045f8:	f9b7 00f6 	ldrsh.w	r0, [r7, #246]	; 0xf6
 80045fc:	f9b7 10cc 	ldrsh.w	r1, [r7, #204]	; 0xcc
 8004600:	4b3c      	ldr	r3, [pc, #240]	; (80046f4 <StartTask+0x604>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004608:	2401      	movs	r4, #1
 800460a:	9401      	str	r4, [sp, #4]
 800460c:	2401      	movs	r4, #1
 800460e:	9400      	str	r4, [sp, #0]
 8004610:	f7fd f9ae 	bl	8001970 <ST7565_Print>

    	Report(1, "ChipID:0x%x Chan:%u Freq:%.2f %s RSSI:%u Band:%s Vol:%u BassEn:%u\r\n",
 8004614:	4b39      	ldr	r3, [pc, #228]	; (80046fc <StartTask+0x60c>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	461e      	mov	r6, r3
 800461a:	4b39      	ldr	r3, [pc, #228]	; (8004700 <StartTask+0x610>)
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	4698      	mov	r8, r3
 8004620:	4b32      	ldr	r3, [pc, #200]	; (80046ec <StartTask+0x5fc>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f7fb ff8f 	bl	8000548 <__aeabi_f2d>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	492e      	ldr	r1, [pc, #184]	; (80046e8 <StartTask+0x5f8>)
 8004630:	8809      	ldrh	r1, [r1, #0]
 8004632:	460c      	mov	r4, r1
 8004634:	4933      	ldr	r1, [pc, #204]	; (8004704 <StartTask+0x614>)
 8004636:	7809      	ldrb	r1, [r1, #0]
 8004638:	4608      	mov	r0, r1
 800463a:	4933      	ldr	r1, [pc, #204]	; (8004708 <StartTask+0x618>)
 800463c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8004640:	4832      	ldr	r0, [pc, #200]	; (800470c <StartTask+0x61c>)
 8004642:	7800      	ldrb	r0, [r0, #0]
 8004644:	4605      	mov	r5, r0
 8004646:	4832      	ldr	r0, [pc, #200]	; (8004710 <StartTask+0x620>)
 8004648:	7800      	ldrb	r0, [r0, #0]
 800464a:	9006      	str	r0, [sp, #24]
 800464c:	9505      	str	r5, [sp, #20]
 800464e:	9104      	str	r1, [sp, #16]
 8004650:	9403      	str	r4, [sp, #12]
 8004652:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004656:	9102      	str	r1, [sp, #8]
 8004658:	e9cd 2300 	strd	r2, r3, [sp]
 800465c:	4643      	mov	r3, r8
 800465e:	4632      	mov	r2, r6
 8004660:	492c      	ldr	r1, [pc, #176]	; (8004714 <StartTask+0x624>)
 8004662:	2001      	movs	r0, #1
 8004664:	f7fe fde0 	bl	8003228 <Report>
    			rdaID, Chan, Freq, sta, RSSI, allBands[Band], Volume, BassBoost);
	#endif

    ST7565_DrawRectangle(0, lfnt->FontHeight, SCREEN_WIDTH - 1, SCREEN_HEIGHT - (lfnt->FontHeight << 1) - 2, PIX_ON);
 8004668:	4b22      	ldr	r3, [pc, #136]	; (80046f4 <StartTask+0x604>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	785b      	ldrb	r3, [r3, #1]
 800466e:	b219      	sxth	r1, r3
 8004670:	4b20      	ldr	r3, [pc, #128]	; (80046f4 <StartTask+0x604>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	785b      	ldrb	r3, [r3, #1]
 8004676:	b29b      	uxth	r3, r3
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	b29b      	uxth	r3, r3
 800467c:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 8004680:	b29b      	uxth	r3, r3
 8004682:	b21b      	sxth	r3, r3
 8004684:	2201      	movs	r2, #1
 8004686:	9200      	str	r2, [sp, #0]
 8004688:	227f      	movs	r2, #127	; 0x7f
 800468a:	2000      	movs	r0, #0
 800468c:	f7fd fb47 	bl	8001d1e <ST7565_DrawRectangle>
    ST7565_DrawFilledRectangle(0, 0, SCREEN_WIDTH - 1, lfnt->FontHeight, PIX_ON);
 8004690:	4b18      	ldr	r3, [pc, #96]	; (80046f4 <StartTask+0x604>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	785b      	ldrb	r3, [r3, #1]
 8004696:	b21b      	sxth	r3, r3
 8004698:	2201      	movs	r2, #1
 800469a:	9200      	str	r2, [sp, #0]
 800469c:	227f      	movs	r2, #127	; 0x7f
 800469e:	2100      	movs	r1, #0
 80046a0:	2000      	movs	r0, #0
 80046a2:	f7fd fbbe 	bl	8001e22 <ST7565_DrawFilledRectangle>
    ST7565_Update();
 80046a6:	f7fc ffb3 	bl	8001610 <ST7565_Update>

    startSec = true;
 80046aa:	4b1b      	ldr	r3, [pc, #108]	; (8004718 <StartTask+0x628>)
 80046ac:	2201      	movs	r2, #1
 80046ae:	701a      	strb	r2, [r3, #0]
	uint32_t tmr_ired = 0;
	enIntIRED();
#endif
*/

	uint16_t lastErr = devOK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4

	int evt, ev = evt_Freq;
 80046b6:	230c      	movs	r3, #12
 80046b8:	60bb      	str	r3, [r7, #8]
	if (osMessageQueuePut(evtQueHandle, (const void *)&ev, prio, 20) != osOK) devError |= devEVT;
 80046ba:	4b18      	ldr	r3, [pc, #96]	; (800471c <StartTask+0x62c>)
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	4b18      	ldr	r3, [pc, #96]	; (8004720 <StartTask+0x630>)
 80046c0:	781a      	ldrb	r2, [r3, #0]
 80046c2:	f107 0108 	add.w	r1, r7, #8
 80046c6:	2314      	movs	r3, #20
 80046c8:	f00b fb20 	bl	800fd0c <osMessageQueuePut>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f001 8053 	beq.w	800577a <StartTask+0x168a>
 80046d4:	4b13      	ldr	r3, [pc, #76]	; (8004724 <StartTask+0x634>)
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	f043 0310 	orr.w	r3, r3, #16
 80046dc:	b29a      	uxth	r2, r3
 80046de:	4b11      	ldr	r3, [pc, #68]	; (8004724 <StartTask+0x634>)
 80046e0:	801a      	strh	r2, [r3, #0]

    while (!restart) {
 80046e2:	f001 b84a 	b.w	800577a <StartTask+0x168a>
 80046e6:	bf00      	nop
 80046e8:	20002f56 	.word	0x20002f56
 80046ec:	20000108 	.word	0x20000108
 80046f0:	08017eb0 	.word	0x08017eb0
 80046f4:	20002f48 	.word	0x20002f48
 80046f8:	08017ca8 	.word	0x08017ca8
 80046fc:	20002f58 	.word	0x20002f58
 8004700:	20002f54 	.word	0x20002f54
 8004704:	20000110 	.word	0x20000110
 8004708:	2000011c 	.word	0x2000011c
 800470c:	20000113 	.word	0x20000113
 8004710:	20002f5a 	.word	0x20002f5a
 8004714:	08017ec4 	.word	0x08017ec4
 8004718:	20002f44 	.word	0x20002f44
 800471c:	20000e74 	.word	0x20000e74
 8004720:	2000362c 	.word	0x2000362c
 8004724:	20001b08 	.word	0x20001b08
				HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
			}
		}
#endif
*/
		evt = evt_None;
 8004728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800472c:	60fb      	str	r3, [r7, #12]
		if (osMessageQueueGet(evtQueHandle, &evt, NULL, 1) == osOK) {
 800472e:	4bb7      	ldr	r3, [pc, #732]	; (8004a0c <StartTask+0x91c>)
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	f107 010c 	add.w	r1, r7, #12
 8004736:	2301      	movs	r3, #1
 8004738:	2200      	movs	r2, #0
 800473a:	f00b fb47 	bl	800fdcc <osMessageQueueGet>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	f040 8737 	bne.w	80055b4 <StartTask+0x14c4>
    		cntEvt = getQueCount(evtQueHandle);
 8004746:	4bb1      	ldr	r3, [pc, #708]	; (8004a0c <StartTask+0x91c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f7fe fa24 	bl	8002b98 <getQueCount>
 8004750:	4603      	mov	r3, r0
 8004752:	b2da      	uxtb	r2, r3
 8004754:	4bae      	ldr	r3, [pc, #696]	; (8004a10 <StartTask+0x920>)
 8004756:	701a      	strb	r2, [r3, #0]
    		if (evt != evt_Sec) {
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b08      	cmp	r3, #8
 800475c:	d045      	beq.n	80047ea <StartTask+0x6fa>
    			//Report(1, "[que:%u] get event '%s'\r\n", cntEvt, str_cmds[evt]);
	#ifdef SET_DISPLAY
    			ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - lfnt->FontHeight, SCREEN_WIDTH - 1, lfnt->FontHeight, PIX_OFF);
 800475e:	4bad      	ldr	r3, [pc, #692]	; (8004a14 <StartTask+0x924>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	785b      	ldrb	r3, [r3, #1]
 8004764:	b29b      	uxth	r3, r3
 8004766:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800476a:	b29b      	uxth	r3, r3
 800476c:	b219      	sxth	r1, r3
 800476e:	4ba9      	ldr	r3, [pc, #676]	; (8004a14 <StartTask+0x924>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	785b      	ldrb	r3, [r3, #1]
 8004774:	b21b      	sxth	r3, r3
 8004776:	2200      	movs	r2, #0
 8004778:	9200      	str	r2, [sp, #0]
 800477a:	227f      	movs	r2, #127	; 0x7f
 800477c:	2000      	movs	r0, #0
 800477e:	f7fd fb50 	bl	8001e22 <ST7565_DrawFilledRectangle>
    			int dl = sprintf(tmp, "evt(%u) : %s", cntEvt, str_cmds[evt]);
 8004782:	4ba3      	ldr	r3, [pc, #652]	; (8004a10 <StartTask+0x920>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	b2db      	uxtb	r3, r3
 8004788:	4619      	mov	r1, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4aa2      	ldr	r2, [pc, #648]	; (8004a18 <StartTask+0x928>)
 800478e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004792:	460a      	mov	r2, r1
 8004794:	49a1      	ldr	r1, [pc, #644]	; (8004a1c <StartTask+0x92c>)
 8004796:	48a2      	ldr	r0, [pc, #648]	; (8004a20 <StartTask+0x930>)
 8004798:	f00f fcd4 	bl	8014144 <siprintf>
 800479c:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    			int x = ((SCREEN_WIDTH - (lfnt->FontWidth * dl)) >> 1) & 0x7f;
 80047a0:	4b9c      	ldr	r3, [pc, #624]	; (8004a14 <StartTask+0x924>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80047ac:	fb02 f303 	mul.w	r3, r2, r3
 80047b0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80047b4:	105b      	asrs	r3, r3, #1
 80047b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    			ST7565_Print(x, SCREEN_HEIGHT - lfnt->FontHeight, tmp, lfnt, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 80047be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80047c2:	b218      	sxth	r0, r3
 80047c4:	4b93      	ldr	r3, [pc, #588]	; (8004a14 <StartTask+0x924>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	785b      	ldrb	r3, [r3, #1]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	b219      	sxth	r1, r3
 80047d4:	4b8f      	ldr	r3, [pc, #572]	; (8004a14 <StartTask+0x924>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2201      	movs	r2, #1
 80047da:	9201      	str	r2, [sp, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	9200      	str	r2, [sp, #0]
 80047e0:	4a8f      	ldr	r2, [pc, #572]	; (8004a20 <StartTask+0x930>)
 80047e2:	f7fd f8c5 	bl	8001970 <ST7565_Print>
    			ST7565_Update();
 80047e6:	f7fc ff13 	bl	8001610 <ST7565_Update>
	#endif
    		}
    		switch (evt) {
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2b1a      	cmp	r3, #26
 80047ee:	f200 86d4 	bhi.w	800559a <StartTask+0x14aa>
 80047f2:	a201      	add	r2, pc, #4	; (adr r2, 80047f8 <StartTask+0x708>)
 80047f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f8:	0800523d 	.word	0x0800523d
 80047fc:	080052ed 	.word	0x080052ed
 8004800:	08005305 	.word	0x08005305
 8004804:	08005325 	.word	0x08005325
 8004808:	08005337 	.word	0x08005337
 800480c:	080054db 	.word	0x080054db
 8004810:	08005337 	.word	0x08005337
 8004814:	08005459 	.word	0x08005459
 8004818:	08004f91 	.word	0x08004f91
 800481c:	08004f2b 	.word	0x08004f2b
 8004820:	08005225 	.word	0x08005225
 8004824:	08004f0b 	.word	0x08004f0b
 8004828:	08004dbb 	.word	0x08004dbb
 800482c:	08004c5b 	.word	0x08004c5b
 8004830:	08004cd7 	.word	0x08004cd7
 8004834:	08004bdf 	.word	0x08004bdf
 8004838:	08004aef 	.word	0x08004aef
 800483c:	08004965 	.word	0x08004965
 8004840:	08004ae7 	.word	0x08004ae7
 8004844:	0800559b 	.word	0x0800559b
 8004848:	08004947 	.word	0x08004947
 800484c:	080048f7 	.word	0x080048f7
 8004850:	080048d9 	.word	0x080048d9
 8004854:	08004865 	.word	0x08004865
 8004858:	080051dd 	.word	0x080051dd
 800485c:	080051f5 	.word	0x080051f5
 8004860:	0800520d 	.word	0x0800520d
    			case evt_Rds:
    				memset(dataRDS, 0, sizeof(dataRDS));
 8004864:	2208      	movs	r2, #8
 8004866:	2100      	movs	r1, #0
 8004868:	486e      	ldr	r0, [pc, #440]	; (8004a24 <StartTask+0x934>)
 800486a:	f00e fe89 	bl	8013580 <memset>
    				readyRds = rda5807_Get_RDSData(dataRDS, &syncRds);
 800486e:	496e      	ldr	r1, [pc, #440]	; (8004a28 <StartTask+0x938>)
 8004870:	486c      	ldr	r0, [pc, #432]	; (8004a24 <StartTask+0x934>)
 8004872:	f001 fd53 	bl	800631c <rda5807_Get_RDSData>
 8004876:	4603      	mov	r3, r0
 8004878:	461a      	mov	r2, r3
 800487a:	4b6c      	ldr	r3, [pc, #432]	; (8004a2c <StartTask+0x93c>)
 800487c:	701a      	strb	r2, [r3, #0]
    				sprintf(tmp, "[RDS] ready=%d sync=%d :", readyRds, syncRds);
 800487e:	4b6b      	ldr	r3, [pc, #428]	; (8004a2c <StartTask+0x93c>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	4b68      	ldr	r3, [pc, #416]	; (8004a28 <StartTask+0x938>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	4969      	ldr	r1, [pc, #420]	; (8004a30 <StartTask+0x940>)
 800488a:	4865      	ldr	r0, [pc, #404]	; (8004a20 <StartTask+0x930>)
 800488c:	f00f fc5a 	bl	8014144 <siprintf>
    				for (int8_t i = 0; i < sizeof(dataRDS); i++)
 8004890:	2300      	movs	r3, #0
 8004892:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 8004896:	e014      	b.n	80048c2 <StartTask+0x7d2>
    					sprintf(tmp+strlen(tmp), " %02X", dataRDS[i]);
 8004898:	4861      	ldr	r0, [pc, #388]	; (8004a20 <StartTask+0x930>)
 800489a:	f7fb fc99 	bl	80001d0 <strlen>
 800489e:	4603      	mov	r3, r0
 80048a0:	4a5f      	ldr	r2, [pc, #380]	; (8004a20 <StartTask+0x930>)
 80048a2:	1898      	adds	r0, r3, r2
 80048a4:	f997 30f3 	ldrsb.w	r3, [r7, #243]	; 0xf3
 80048a8:	4a5e      	ldr	r2, [pc, #376]	; (8004a24 <StartTask+0x934>)
 80048aa:	5cd3      	ldrb	r3, [r2, r3]
 80048ac:	461a      	mov	r2, r3
 80048ae:	4961      	ldr	r1, [pc, #388]	; (8004a34 <StartTask+0x944>)
 80048b0:	f00f fc48 	bl	8014144 <siprintf>
    				for (int8_t i = 0; i < sizeof(dataRDS); i++)
 80048b4:	f997 30f3 	ldrsb.w	r3, [r7, #243]	; 0xf3
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	3301      	adds	r3, #1
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 80048c2:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80048c6:	2b07      	cmp	r3, #7
 80048c8:	d9e6      	bls.n	8004898 <StartTask+0x7a8>
    				Report(1, "%s\r\n", tmp);
 80048ca:	4a55      	ldr	r2, [pc, #340]	; (8004a20 <StartTask+0x930>)
 80048cc:	495a      	ldr	r1, [pc, #360]	; (8004a38 <StartTask+0x948>)
 80048ce:	2001      	movs	r0, #1
 80048d0:	f7fe fcaa 	bl	8003228 <Report>
    			break;
 80048d4:	f000 be61 	b.w	800559a <StartTask+0x14aa>
    			case evt_SleepCont:
    				sleep_mode = true;
 80048d8:	4b58      	ldr	r3, [pc, #352]	; (8004a3c <StartTask+0x94c>)
 80048da:	2201      	movs	r2, #1
 80048dc:	701a      	strb	r2, [r3, #0]
    				//
    				HAL_SuspendTick();
 80048de:	f002 f933 	bl	8006b48 <HAL_SuspendTick>
    				HAL_PWR_EnableSleepOnExit();
 80048e2:	f005 fb09 	bl	8009ef8 <HAL_PWR_EnableSleepOnExit>
    				HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80048e6:	2101      	movs	r1, #1
 80048e8:	2000      	movs	r0, #0
 80048ea:	f005 fad1 	bl	8009e90 <HAL_PWR_EnterSLEEPMode>
    				HAL_ResumeTick();
 80048ee:	f002 f93d 	bl	8006b6c <HAL_ResumeTick>
    			break;
 80048f2:	f000 be52 	b.w	800559a <StartTask+0x14aa>
    			case evt_Sleep:
    				Report(1, "Going into SLEEP MODE...\r\n");// in 1 second\r\n");
 80048f6:	4952      	ldr	r1, [pc, #328]	; (8004a40 <StartTask+0x950>)
 80048f8:	2001      	movs	r0, #1
 80048fa:	f7fe fc95 	bl	8003228 <Report>
	#ifdef SET_BLE
    				bleWrite("AT+SLEEP1\r\n", 1);
	#endif
	#ifdef SET_DISPLAY
    				ST7565_CMD_DISPLAY(CMD_DISPLAY_OFF);
 80048fe:	20ae      	movs	r0, #174	; 0xae
 8004900:	f7fc fe08 	bl	8001514 <ST7565_CMD_DISPLAY>
	#endif
    				HAL_Delay(250);
 8004904:	20fa      	movs	r0, #250	; 0xfa
 8004906:	f003 f8b3 	bl	8007a70 <HAL_Delay>
    				HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800490a:	2200      	movs	r2, #0
 800490c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004910:	484c      	ldr	r0, [pc, #304]	; (8004a44 <StartTask+0x954>)
 8004912:	f003 fdf9 	bl	8008508 <HAL_GPIO_WritePin>

    				//putEvt(evt_SleepCont);
    				ev = evt_SleepCont;
 8004916:	2316      	movs	r3, #22
 8004918:	60bb      	str	r3, [r7, #8]
    				if (osMessageQueuePut(evtQueHandle, (const void *)&ev, prio, 10) != osOK) devError |= devEVT;
 800491a:	4b3c      	ldr	r3, [pc, #240]	; (8004a0c <StartTask+0x91c>)
 800491c:	6818      	ldr	r0, [r3, #0]
 800491e:	4b4a      	ldr	r3, [pc, #296]	; (8004a48 <StartTask+0x958>)
 8004920:	781a      	ldrb	r2, [r3, #0]
 8004922:	f107 0108 	add.w	r1, r7, #8
 8004926:	230a      	movs	r3, #10
 8004928:	f00b f9f0 	bl	800fd0c <osMessageQueuePut>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 85f2 	beq.w	8005518 <StartTask+0x1428>
 8004934:	4b45      	ldr	r3, [pc, #276]	; (8004a4c <StartTask+0x95c>)
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	f043 0310 	orr.w	r3, r3, #16
 800493c:	b29a      	uxth	r2, r3
 800493e:	4b43      	ldr	r3, [pc, #268]	; (8004a4c <StartTask+0x95c>)
 8004940:	801a      	strh	r2, [r3, #0]
    			break;
 8004942:	f000 bde9 	b.w	8005518 <StartTask+0x1428>
    			case evt_ExitSleep:
    				HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8004946:	2201      	movs	r2, #1
 8004948:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800494c:	483d      	ldr	r0, [pc, #244]	; (8004a44 <StartTask+0x954>)
 800494e:	f003 fddb 	bl	8008508 <HAL_GPIO_WritePin>
	#ifdef SET_DISPLAY
    				ST7565_CMD_DISPLAY(CMD_DISPLAY_ON);
 8004952:	20af      	movs	r0, #175	; 0xaf
 8004954:	f7fc fdde 	bl	8001514 <ST7565_CMD_DISPLAY>
	#endif
	#ifdef SET_BLE
    				bleWakeUp();//putEvt(evt_WakeUp);
	#endif
    				Report(1, "Exit from SLEEP MODE\r\n");
 8004958:	493d      	ldr	r1, [pc, #244]	; (8004a50 <StartTask+0x960>)
 800495a:	2001      	movs	r0, #1
 800495c:	f7fe fc64 	bl	8003228 <Report>
    			break;
 8004960:	f000 be1b 	b.w	800559a <StartTask+0x14aa>
	#ifdef SET_BLE
    				bleWakeUp();
	#endif
    			break;
    			case evt_Band:
    				Band = newBand;
 8004964:	4b3b      	ldr	r3, [pc, #236]	; (8004a54 <StartTask+0x964>)
 8004966:	781a      	ldrb	r2, [r3, #0]
 8004968:	4b3b      	ldr	r3, [pc, #236]	; (8004a58 <StartTask+0x968>)
 800496a:	701a      	strb	r2, [r3, #0]
    				if (!rda5807_Set_Band(Band)) {
 800496c:	4b3a      	ldr	r3, [pc, #232]	; (8004a58 <StartTask+0x968>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	4618      	mov	r0, r3
 8004972:	f001 fc49 	bl	8006208 <rda5807_Set_Band>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	f040 85cf 	bne.w	800551c <StartTask+0x142c>
    					sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 800497e:	4b36      	ldr	r3, [pc, #216]	; (8004a58 <StartTask+0x968>)
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	4b35      	ldr	r3, [pc, #212]	; (8004a5c <StartTask+0x96c>)
 8004986:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800498a:	f107 0320 	add.w	r3, r7, #32
 800498e:	4934      	ldr	r1, [pc, #208]	; (8004a60 <StartTask+0x970>)
 8004990:	4618      	mov	r0, r3
 8004992:	f00f fbd7 	bl	8014144 <siprintf>
    					showLine(stb, lin3, &lit, true);
 8004996:	f107 021c 	add.w	r2, r7, #28
 800499a:	f8b7 10d2 	ldrh.w	r1, [r7, #210]	; 0xd2
 800499e:	f107 0020 	add.w	r0, r7, #32
 80049a2:	2301      	movs	r3, #1
 80049a4:	f7fe fa2e 	bl	8002e04 <showLine>
    					Report(1, "[que:%u] set new band=%u '%s'\r\n", cntEvt, Band, allBands[Band]);
 80049a8:	4b19      	ldr	r3, [pc, #100]	; (8004a10 <StartTask+0x920>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	4619      	mov	r1, r3
 80049b0:	4b29      	ldr	r3, [pc, #164]	; (8004a58 <StartTask+0x968>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	4618      	mov	r0, r3
 80049b6:	4b28      	ldr	r3, [pc, #160]	; (8004a58 <StartTask+0x968>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	4b27      	ldr	r3, [pc, #156]	; (8004a5c <StartTask+0x96c>)
 80049be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	4603      	mov	r3, r0
 80049c6:	460a      	mov	r2, r1
 80049c8:	4926      	ldr	r1, [pc, #152]	; (8004a64 <StartTask+0x974>)
 80049ca:	2001      	movs	r0, #1
 80049cc:	f7fe fc2c 	bl	8003228 <Report>
    					if (next_evt == evt) {
 80049d0:	4b25      	ldr	r3, [pc, #148]	; (8004a68 <StartTask+0x978>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d16a      	bne.n	8004ab0 <StartTask+0x9c0>
    						if ((Freq < lBand) || (Freq > rBand)) {
 80049da:	4b24      	ldr	r3, [pc, #144]	; (8004a6c <StartTask+0x97c>)
 80049dc:	ed93 7a00 	vldr	s14, [r3]
 80049e0:	4b23      	ldr	r3, [pc, #140]	; (8004a70 <StartTask+0x980>)
 80049e2:	edd3 7a00 	vldr	s15, [r3]
 80049e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ee:	d443      	bmi.n	8004a78 <StartTask+0x988>
 80049f0:	4b1e      	ldr	r3, [pc, #120]	; (8004a6c <StartTask+0x97c>)
 80049f2:	ed93 7a00 	vldr	s14, [r3]
 80049f6:	4b1f      	ldr	r3, [pc, #124]	; (8004a74 <StartTask+0x984>)
 80049f8:	edd3 7a00 	vldr	s15, [r3]
 80049fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a04:	dc38      	bgt.n	8004a78 <StartTask+0x988>
    						//putEvt(evt_Freq);
    						ev = evt_Freq;
    						if (osMessageQueuePut(evtQueHandle, (const void *)&ev, prio, 10) != osOK) devError |= devEVT;
    					}
    				}
    			break;
 8004a06:	f000 bd89 	b.w	800551c <StartTask+0x142c>
 8004a0a:	bf00      	nop
 8004a0c:	20000e74 	.word	0x20000e74
 8004a10:	20001f1f 	.word	0x20001f1f
 8004a14:	20002f48 	.word	0x20002f48
 8004a18:	20000088 	.word	0x20000088
 8004a1c:	08017f08 	.word	0x08017f08
 8004a20:	20001288 	.word	0x20001288
 8004a24:	20002f60 	.word	0x20002f60
 8004a28:	20002f68 	.word	0x20002f68
 8004a2c:	20002f69 	.word	0x20002f69
 8004a30:	08017f18 	.word	0x08017f18
 8004a34:	08017f34 	.word	0x08017f34
 8004a38:	08017f3c 	.word	0x08017f3c
 8004a3c:	20003600 	.word	0x20003600
 8004a40:	08017f44 	.word	0x08017f44
 8004a44:	48000800 	.word	0x48000800
 8004a48:	2000362c 	.word	0x2000362c
 8004a4c:	20001b08 	.word	0x20001b08
 8004a50:	08017f60 	.word	0x08017f60
 8004a54:	20000111 	.word	0x20000111
 8004a58:	20000110 	.word	0x20000110
 8004a5c:	2000011c 	.word	0x2000011c
 8004a60:	08017e80 	.word	0x08017e80
 8004a64:	08017f78 	.word	0x08017f78
 8004a68:	200000f4 	.word	0x200000f4
 8004a6c:	20000108 	.word	0x20000108
 8004a70:	20002f4c 	.word	0x20002f4c
 8004a74:	20002f50 	.word	0x20002f50
    							newFreq = lBand;
 8004a78:	4ba7      	ldr	r3, [pc, #668]	; (8004d18 <StartTask+0xc28>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4aa7      	ldr	r2, [pc, #668]	; (8004d1c <StartTask+0xc2c>)
 8004a7e:	6013      	str	r3, [r2, #0]
    							ev = evt_Freq;
 8004a80:	230c      	movs	r3, #12
 8004a82:	60bb      	str	r3, [r7, #8]
    							if (osMessageQueuePut(evtQueHandle, (const void *)&ev, prio, 10) != osOK) devError |= devEVT;
 8004a84:	4ba6      	ldr	r3, [pc, #664]	; (8004d20 <StartTask+0xc30>)
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	4ba6      	ldr	r3, [pc, #664]	; (8004d24 <StartTask+0xc34>)
 8004a8a:	781a      	ldrb	r2, [r3, #0]
 8004a8c:	f107 0108 	add.w	r1, r7, #8
 8004a90:	230a      	movs	r3, #10
 8004a92:	f00b f93b 	bl	800fd0c <osMessageQueuePut>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 853f 	beq.w	800551c <StartTask+0x142c>
 8004a9e:	4ba2      	ldr	r3, [pc, #648]	; (8004d28 <StartTask+0xc38>)
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	f043 0310 	orr.w	r3, r3, #16
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	4b9f      	ldr	r3, [pc, #636]	; (8004d28 <StartTask+0xc38>)
 8004aaa:	801a      	strh	r2, [r3, #0]
    			break;
 8004aac:	f000 bd36 	b.w	800551c <StartTask+0x142c>
    						next_evt = evt;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4a9e      	ldr	r2, [pc, #632]	; (8004d2c <StartTask+0xc3c>)
 8004ab4:	6013      	str	r3, [r2, #0]
    						ev = evt_Freq;
 8004ab6:	230c      	movs	r3, #12
 8004ab8:	60bb      	str	r3, [r7, #8]
    						if (osMessageQueuePut(evtQueHandle, (const void *)&ev, prio, 10) != osOK) devError |= devEVT;
 8004aba:	4b99      	ldr	r3, [pc, #612]	; (8004d20 <StartTask+0xc30>)
 8004abc:	6818      	ldr	r0, [r3, #0]
 8004abe:	4b99      	ldr	r3, [pc, #612]	; (8004d24 <StartTask+0xc34>)
 8004ac0:	781a      	ldrb	r2, [r3, #0]
 8004ac2:	f107 0108 	add.w	r1, r7, #8
 8004ac6:	230a      	movs	r3, #10
 8004ac8:	f00b f920 	bl	800fd0c <osMessageQueuePut>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 8524 	beq.w	800551c <StartTask+0x142c>
 8004ad4:	4b94      	ldr	r3, [pc, #592]	; (8004d28 <StartTask+0xc38>)
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	f043 0310 	orr.w	r3, r3, #16
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	4b92      	ldr	r3, [pc, #584]	; (8004d28 <StartTask+0xc38>)
 8004ae0:	801a      	strh	r2, [r3, #0]
    			break;
 8004ae2:	f000 bd1b 	b.w	800551c <StartTask+0x142c>
    			case evt_Cfg:
    				showCfg();
 8004ae6:	f7fd fa0b 	bl	8001f00 <showCfg>
    			break;
 8004aea:	f000 bd56 	b.w	800559a <StartTask+0x14aa>
    			case evt_List:
    				next_evt = evt_Freq;
 8004aee:	4b8f      	ldr	r3, [pc, #572]	; (8004d2c <StartTask+0xc3c>)
 8004af0:	220c      	movs	r2, #12
 8004af2:	601a      	str	r2, [r3, #0]
    				newFreq = getNextList(Freq, seek_up, &newBand);
 8004af4:	4b8e      	ldr	r3, [pc, #568]	; (8004d30 <StartTask+0xc40>)
 8004af6:	edd3 7a00 	vldr	s15, [r3]
 8004afa:	4b8e      	ldr	r3, [pc, #568]	; (8004d34 <StartTask+0xc44>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	498d      	ldr	r1, [pc, #564]	; (8004d38 <StartTask+0xc48>)
 8004b02:	4618      	mov	r0, r3
 8004b04:	eeb0 0a67 	vmov.f32	s0, s15
 8004b08:	f7fe f898 	bl	8002c3c <getNextList>
 8004b0c:	eef0 7a40 	vmov.f32	s15, s0
 8004b10:	4b82      	ldr	r3, [pc, #520]	; (8004d1c <StartTask+0xc2c>)
 8004b12:	edc3 7a00 	vstr	s15, [r3]
					if (newBand == Band) {
 8004b16:	4b88      	ldr	r3, [pc, #544]	; (8004d38 <StartTask+0xc48>)
 8004b18:	781a      	ldrb	r2, [r3, #0]
 8004b1a:	4b88      	ldr	r3, [pc, #544]	; (8004d3c <StartTask+0xc4c>)
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d12c      	bne.n	8004b7c <StartTask+0xa8c>
						Report(1, "Band = newBand = %u -> goto set newFreq to %.1f (up = %u)\r\n", newBand, newFreq, seek_up);
 8004b22:	4b85      	ldr	r3, [pc, #532]	; (8004d38 <StartTask+0xc48>)
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	461c      	mov	r4, r3
 8004b28:	4b7c      	ldr	r3, [pc, #496]	; (8004d1c <StartTask+0xc2c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fb fd0b 	bl	8000548 <__aeabi_f2d>
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	497f      	ldr	r1, [pc, #508]	; (8004d34 <StartTask+0xc44>)
 8004b38:	7809      	ldrb	r1, [r1, #0]
 8004b3a:	b2c9      	uxtb	r1, r1
 8004b3c:	9102      	str	r1, [sp, #8]
 8004b3e:	e9cd 2300 	strd	r2, r3, [sp]
 8004b42:	4622      	mov	r2, r4
 8004b44:	497e      	ldr	r1, [pc, #504]	; (8004d40 <StartTask+0xc50>)
 8004b46:	2001      	movs	r0, #1
 8004b48:	f7fe fb6e 	bl	8003228 <Report>
    					//putEvt(evt_Freq);
						ev = evt_Freq;
 8004b4c:	230c      	movs	r3, #12
 8004b4e:	60bb      	str	r3, [r7, #8]
    					if (osMessageQueuePut(evtQueHandle, (const void *)&ev, prio, 10) != osOK) devError |= devEVT;
 8004b50:	4b73      	ldr	r3, [pc, #460]	; (8004d20 <StartTask+0xc30>)
 8004b52:	6818      	ldr	r0, [r3, #0]
 8004b54:	4b73      	ldr	r3, [pc, #460]	; (8004d24 <StartTask+0xc34>)
 8004b56:	781a      	ldrb	r2, [r3, #0]
 8004b58:	f107 0108 	add.w	r1, r7, #8
 8004b5c:	230a      	movs	r3, #10
 8004b5e:	f00b f8d5 	bl	800fd0c <osMessageQueuePut>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 84db 	beq.w	8005520 <StartTask+0x1430>
 8004b6a:	4b6f      	ldr	r3, [pc, #444]	; (8004d28 <StartTask+0xc38>)
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	f043 0310 	orr.w	r3, r3, #16
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	4b6c      	ldr	r3, [pc, #432]	; (8004d28 <StartTask+0xc38>)
 8004b76:	801a      	strh	r2, [r3, #0]
						Report(1, "Band = %u -> goto set newBand to %u (newFreq to %.1f up = %u)\r\n", Band, newBand, newFreq, seek_up);
    					//putEvt(evt_Band);
						ev = evt_Band;
						if (osMessageQueuePut(evtQueHandle, (const void *)&ev, prio, 10) != osOK) devError |= devEVT;
					}
    			break;
 8004b78:	f000 bcd2 	b.w	8005520 <StartTask+0x1430>
						Report(1, "Band = %u -> goto set newBand to %u (newFreq to %.1f up = %u)\r\n", Band, newBand, newFreq, seek_up);
 8004b7c:	4b6f      	ldr	r3, [pc, #444]	; (8004d3c <StartTask+0xc4c>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	461c      	mov	r4, r3
 8004b82:	4b6d      	ldr	r3, [pc, #436]	; (8004d38 <StartTask+0xc48>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	461d      	mov	r5, r3
 8004b88:	4b64      	ldr	r3, [pc, #400]	; (8004d1c <StartTask+0xc2c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fb fcdb 	bl	8000548 <__aeabi_f2d>
 8004b92:	4602      	mov	r2, r0
 8004b94:	460b      	mov	r3, r1
 8004b96:	4967      	ldr	r1, [pc, #412]	; (8004d34 <StartTask+0xc44>)
 8004b98:	7809      	ldrb	r1, [r1, #0]
 8004b9a:	b2c9      	uxtb	r1, r1
 8004b9c:	9102      	str	r1, [sp, #8]
 8004b9e:	e9cd 2300 	strd	r2, r3, [sp]
 8004ba2:	462b      	mov	r3, r5
 8004ba4:	4622      	mov	r2, r4
 8004ba6:	4967      	ldr	r1, [pc, #412]	; (8004d44 <StartTask+0xc54>)
 8004ba8:	2001      	movs	r0, #1
 8004baa:	f7fe fb3d 	bl	8003228 <Report>
						ev = evt_Band;
 8004bae:	2311      	movs	r3, #17
 8004bb0:	60bb      	str	r3, [r7, #8]
						if (osMessageQueuePut(evtQueHandle, (const void *)&ev, prio, 10) != osOK) devError |= devEVT;
 8004bb2:	4b5b      	ldr	r3, [pc, #364]	; (8004d20 <StartTask+0xc30>)
 8004bb4:	6818      	ldr	r0, [r3, #0]
 8004bb6:	4b5b      	ldr	r3, [pc, #364]	; (8004d24 <StartTask+0xc34>)
 8004bb8:	781a      	ldrb	r2, [r3, #0]
 8004bba:	f107 0108 	add.w	r1, r7, #8
 8004bbe:	230a      	movs	r3, #10
 8004bc0:	f00b f8a4 	bl	800fd0c <osMessageQueuePut>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 84aa 	beq.w	8005520 <StartTask+0x1430>
 8004bcc:	4b56      	ldr	r3, [pc, #344]	; (8004d28 <StartTask+0xc38>)
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	f043 0310 	orr.w	r3, r3, #16
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	4b54      	ldr	r3, [pc, #336]	; (8004d28 <StartTask+0xc38>)
 8004bd8:	801a      	strh	r2, [r3, #0]
    			break;
 8004bda:	f000 bca1 	b.w	8005520 <StartTask+0x1430>
    			case evt_Bass:
    				if (newBassBoost != BassBoost) {
 8004bde:	4b5a      	ldr	r3, [pc, #360]	; (8004d48 <StartTask+0xc58>)
 8004be0:	781a      	ldrb	r2, [r3, #0]
 8004be2:	4b5a      	ldr	r3, [pc, #360]	; (8004d4c <StartTask+0xc5c>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	f000 849c 	beq.w	8005524 <StartTask+0x1434>
    					BassBoost = newBassBoost;
 8004bec:	4b56      	ldr	r3, [pc, #344]	; (8004d48 <StartTask+0xc58>)
 8004bee:	781a      	ldrb	r2, [r3, #0]
 8004bf0:	4b56      	ldr	r3, [pc, #344]	; (8004d4c <StartTask+0xc5c>)
 8004bf2:	701a      	strb	r2, [r3, #0]
    					rda5807_SetBassBoost(BassBoost);
 8004bf4:	4b55      	ldr	r3, [pc, #340]	; (8004d4c <StartTask+0xc5c>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f001 f9c5 	bl	8005f88 <rda5807_SetBassBoost>
    					//
    					if (noMute)
 8004bfe:	4b54      	ldr	r3, [pc, #336]	; (8004d50 <StartTask+0xc60>)
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <StartTask+0xb2c>
    						sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8004c06:	4b51      	ldr	r3, [pc, #324]	; (8004d4c <StartTask+0xc5c>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	4b51      	ldr	r3, [pc, #324]	; (8004d54 <StartTask+0xc64>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004c14:	4950      	ldr	r1, [pc, #320]	; (8004d58 <StartTask+0xc68>)
 8004c16:	f00f fa95 	bl	8014144 <siprintf>
 8004c1a:	e009      	b.n	8004c30 <StartTask+0xb40>
    					else
    						sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 8004c1c:	4b4b      	ldr	r3, [pc, #300]	; (8004d4c <StartTask+0xc5c>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	4b4c      	ldr	r3, [pc, #304]	; (8004d54 <StartTask+0xc64>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004c2a:	494c      	ldr	r1, [pc, #304]	; (8004d5c <StartTask+0xc6c>)
 8004c2c:	f00f fa8a 	bl	8014144 <siprintf>
    					showLine(st, lin4, &lim, true);
 8004c30:	f107 0218 	add.w	r2, r7, #24
 8004c34:	f8b7 10d0 	ldrh.w	r1, [r7, #208]	; 0xd0
 8004c38:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f7fe f8e1 	bl	8002e04 <showLine>
    					Report(1, "[que:%u] set new BassBoost to %u\r\n", cntEvt, BassBoost);
 8004c42:	4b47      	ldr	r3, [pc, #284]	; (8004d60 <StartTask+0xc70>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	461a      	mov	r2, r3
 8004c4a:	4b40      	ldr	r3, [pc, #256]	; (8004d4c <StartTask+0xc5c>)
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	4945      	ldr	r1, [pc, #276]	; (8004d64 <StartTask+0xc74>)
 8004c50:	2001      	movs	r0, #1
 8004c52:	f7fe fae9 	bl	8003228 <Report>
    				}
    			break;
 8004c56:	f000 bc65 	b.w	8005524 <StartTask+0x1434>
    			case evt_Vol:
    				if (newVolume != Volume) {
 8004c5a:	4b43      	ldr	r3, [pc, #268]	; (8004d68 <StartTask+0xc78>)
 8004c5c:	781a      	ldrb	r2, [r3, #0]
 8004c5e:	4b3d      	ldr	r3, [pc, #244]	; (8004d54 <StartTask+0xc64>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	f000 8460 	beq.w	8005528 <StartTask+0x1438>
    					Volume = newVolume;
 8004c68:	4b3f      	ldr	r3, [pc, #252]	; (8004d68 <StartTask+0xc78>)
 8004c6a:	781a      	ldrb	r2, [r3, #0]
 8004c6c:	4b39      	ldr	r3, [pc, #228]	; (8004d54 <StartTask+0xc64>)
 8004c6e:	701a      	strb	r2, [r3, #0]
    					rda5807_SetVolume(Volume);
 8004c70:	4b38      	ldr	r3, [pc, #224]	; (8004d54 <StartTask+0xc64>)
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f001 f93f 	bl	8005ef8 <rda5807_SetVolume>
    					//
    					if (noMute)
 8004c7a:	4b35      	ldr	r3, [pc, #212]	; (8004d50 <StartTask+0xc60>)
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <StartTask+0xba8>
    						sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8004c82:	4b32      	ldr	r3, [pc, #200]	; (8004d4c <StartTask+0xc5c>)
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	461a      	mov	r2, r3
 8004c88:	4b32      	ldr	r3, [pc, #200]	; (8004d54 <StartTask+0xc64>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004c90:	4931      	ldr	r1, [pc, #196]	; (8004d58 <StartTask+0xc68>)
 8004c92:	f00f fa57 	bl	8014144 <siprintf>
 8004c96:	e009      	b.n	8004cac <StartTask+0xbbc>
    					else
    						sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 8004c98:	4b2c      	ldr	r3, [pc, #176]	; (8004d4c <StartTask+0xc5c>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4b2d      	ldr	r3, [pc, #180]	; (8004d54 <StartTask+0xc64>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004ca6:	492d      	ldr	r1, [pc, #180]	; (8004d5c <StartTask+0xc6c>)
 8004ca8:	f00f fa4c 	bl	8014144 <siprintf>
    					showLine(st, lin4, &lim, true);
 8004cac:	f107 0218 	add.w	r2, r7, #24
 8004cb0:	f8b7 10d0 	ldrh.w	r1, [r7, #208]	; 0xd0
 8004cb4:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004cb8:	2301      	movs	r3, #1
 8004cba:	f7fe f8a3 	bl	8002e04 <showLine>
    					Report(1, "[que:%u] set new Volume to %u\r\n", cntEvt, Volume);
 8004cbe:	4b28      	ldr	r3, [pc, #160]	; (8004d60 <StartTask+0xc70>)
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	4b23      	ldr	r3, [pc, #140]	; (8004d54 <StartTask+0xc64>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	4928      	ldr	r1, [pc, #160]	; (8004d6c <StartTask+0xc7c>)
 8004ccc:	2001      	movs	r0, #1
 8004cce:	f7fe faab 	bl	8003228 <Report>
    				}
    			break;
 8004cd2:	f000 bc29 	b.w	8005528 <StartTask+0x1438>
    			case evt_Mute:
    				noMute = (~noMute) & 1;
 8004cd6:	4b1e      	ldr	r3, [pc, #120]	; (8004d50 <StartTask+0xc60>)
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	bf0c      	ite	eq
 8004ce2:	2301      	moveq	r3, #1
 8004ce4:	2300      	movne	r3, #0
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4b19      	ldr	r3, [pc, #100]	; (8004d50 <StartTask+0xc60>)
 8004cec:	701a      	strb	r2, [r3, #0]
    				rda5807_Set_Mute(noMute);
 8004cee:	4b18      	ldr	r3, [pc, #96]	; (8004d50 <StartTask+0xc60>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f001 faf4 	bl	80062e0 <rda5807_Set_Mute>
    				//
    				if (noMute)
 8004cf8:	4b15      	ldr	r3, [pc, #84]	; (8004d50 <StartTask+0xc60>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d037      	beq.n	8004d70 <StartTask+0xc80>
    					sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8004d00:	4b12      	ldr	r3, [pc, #72]	; (8004d4c <StartTask+0xc5c>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	4b13      	ldr	r3, [pc, #76]	; (8004d54 <StartTask+0xc64>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004d0e:	4912      	ldr	r1, [pc, #72]	; (8004d58 <StartTask+0xc68>)
 8004d10:	f00f fa18 	bl	8014144 <siprintf>
 8004d14:	e036      	b.n	8004d84 <StartTask+0xc94>
 8004d16:	bf00      	nop
 8004d18:	20002f4c 	.word	0x20002f4c
 8004d1c:	2000010c 	.word	0x2000010c
 8004d20:	20000e74 	.word	0x20000e74
 8004d24:	2000362c 	.word	0x2000362c
 8004d28:	20001b08 	.word	0x20001b08
 8004d2c:	200000f4 	.word	0x200000f4
 8004d30:	20000108 	.word	0x20000108
 8004d34:	20000112 	.word	0x20000112
 8004d38:	20000111 	.word	0x20000111
 8004d3c:	20000110 	.word	0x20000110
 8004d40:	08017f98 	.word	0x08017f98
 8004d44:	08017fd4 	.word	0x08017fd4
 8004d48:	20002f5b 	.word	0x20002f5b
 8004d4c:	20002f5a 	.word	0x20002f5a
 8004d50:	20000115 	.word	0x20000115
 8004d54:	20000113 	.word	0x20000113
 8004d58:	08017e8c 	.word	0x08017e8c
 8004d5c:	08018014 	.word	0x08018014
 8004d60:	20001f1f 	.word	0x20001f1f
 8004d64:	08018028 	.word	0x08018028
 8004d68:	20000114 	.word	0x20000114
 8004d6c:	0801804c 	.word	0x0801804c
    				else
    					sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 8004d70:	4b72      	ldr	r3, [pc, #456]	; (8004f3c <StartTask+0xe4c>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	461a      	mov	r2, r3
 8004d76:	4b72      	ldr	r3, [pc, #456]	; (8004f40 <StartTask+0xe50>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004d7e:	4971      	ldr	r1, [pc, #452]	; (8004f44 <StartTask+0xe54>)
 8004d80:	f00f f9e0 	bl	8014144 <siprintf>
    				showLine(st, lin4, &lim, true);
 8004d84:	f107 0218 	add.w	r2, r7, #24
 8004d88:	f8b7 10d0 	ldrh.w	r1, [r7, #208]	; 0xd0
 8004d8c:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004d90:	2301      	movs	r3, #1
 8004d92:	f7fe f837 	bl	8002e04 <showLine>
    				Report(1, "[que:%u] set Mute to %u\r\n", cntEvt, (~noMute) & 1);
 8004d96:	4b6c      	ldr	r3, [pc, #432]	; (8004f48 <StartTask+0xe58>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4b6b      	ldr	r3, [pc, #428]	; (8004f4c <StartTask+0xe5c>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	bf0c      	ite	eq
 8004daa:	2301      	moveq	r3, #1
 8004dac:	2300      	movne	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	4967      	ldr	r1, [pc, #412]	; (8004f50 <StartTask+0xe60>)
 8004db2:	2001      	movs	r0, #1
 8004db4:	f7fe fa38 	bl	8003228 <Report>
    			break;
 8004db8:	e3ef      	b.n	800559a <StartTask+0x14aa>
    			case evt_Freq:
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 8004dba:	4b66      	ldr	r3, [pc, #408]	; (8004f54 <StartTask+0xe64>)
 8004dbc:	ed93 7a00 	vldr	s14, [r3]
 8004dc0:	4b65      	ldr	r3, [pc, #404]	; (8004f58 <StartTask+0xe68>)
 8004dc2:	edd3 7a00 	vldr	s15, [r3]
 8004dc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dce:	da00      	bge.n	8004dd2 <StartTask+0xce2>
    						sprintf(sta, "%s", nameStation(Freq));
    						showLine(sta, lin6, &lia, true);
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
    					}
    				}
				break;
 8004dd0:	e3ac      	b.n	800552c <StartTask+0x143c>
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 8004dd2:	4b60      	ldr	r3, [pc, #384]	; (8004f54 <StartTask+0xe64>)
 8004dd4:	ed93 7a00 	vldr	s14, [r3]
 8004dd8:	4b60      	ldr	r3, [pc, #384]	; (8004f5c <StartTask+0xe6c>)
 8004dda:	edd3 7a00 	vldr	s15, [r3]
 8004dde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de6:	d900      	bls.n	8004dea <StartTask+0xcfa>
				break;
 8004de8:	e3a0      	b.n	800552c <StartTask+0x143c>
    					if (newFreq != Freq) {
 8004dea:	4b5a      	ldr	r3, [pc, #360]	; (8004f54 <StartTask+0xe64>)
 8004dec:	ed93 7a00 	vldr	s14, [r3]
 8004df0:	4b5b      	ldr	r3, [pc, #364]	; (8004f60 <StartTask+0xe70>)
 8004df2:	edd3 7a00 	vldr	s15, [r3]
 8004df6:	eeb4 7a67 	vcmp.f32	s14, s15
 8004dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfe:	f000 8395 	beq.w	800552c <StartTask+0x143c>
    						Freq = newFreq;
 8004e02:	4b54      	ldr	r3, [pc, #336]	; (8004f54 <StartTask+0xe64>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a56      	ldr	r2, [pc, #344]	; (8004f60 <StartTask+0xe70>)
 8004e08:	6013      	str	r3, [r2, #0]
    						uint16_t fr = (uint16_t)(Freq * 10);
 8004e0a:	4b55      	ldr	r3, [pc, #340]	; (8004f60 <StartTask+0xe70>)
 8004e0c:	edd3 7a00 	vldr	s15, [r3]
 8004e10:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004e14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e1c:	ee17 3a90 	vmov	r3, s15
 8004e20:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
    						rda5807_SetFreq_In100Khz(fr);
 8004e24:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f001 f8cd 	bl	8005fc8 <rda5807_SetFreq_In100Khz>
    						stereo = rda5807_Get_StereoMonoFlag();
 8004e2e:	f001 f9c1 	bl	80061b4 <rda5807_Get_StereoMonoFlag>
 8004e32:	4603      	mov	r3, r0
 8004e34:	461a      	mov	r2, r3
 8004e36:	4b4b      	ldr	r3, [pc, #300]	; (8004f64 <StartTask+0xe74>)
 8004e38:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 8004e3a:	f001 f9d3 	bl	80061e4 <rda5807_Get_Channel>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	461a      	mov	r2, r3
 8004e42:	4b49      	ldr	r3, [pc, #292]	; (8004f68 <StartTask+0xe78>)
 8004e44:	801a      	strh	r2, [r3, #0]
    						if (stereo)
 8004e46:	4b47      	ldr	r3, [pc, #284]	; (8004f64 <StartTask+0xe74>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d012      	beq.n	8004e74 <StartTask+0xd84>
    							sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 8004e4e:	4b47      	ldr	r3, [pc, #284]	; (8004f6c <StartTask+0xe7c>)
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	461c      	mov	r4, r3
 8004e54:	4b42      	ldr	r3, [pc, #264]	; (8004f60 <StartTask+0xe70>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fb fb75 	bl	8000548 <__aeabi_f2d>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004e66:	e9cd 2300 	strd	r2, r3, [sp]
 8004e6a:	4622      	mov	r2, r4
 8004e6c:	4940      	ldr	r1, [pc, #256]	; (8004f70 <StartTask+0xe80>)
 8004e6e:	f00f f969 	bl	8014144 <siprintf>
 8004e72:	e011      	b.n	8004e98 <StartTask+0xda8>
    							sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8004e74:	4b3d      	ldr	r3, [pc, #244]	; (8004f6c <StartTask+0xe7c>)
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	461c      	mov	r4, r3
 8004e7a:	4b39      	ldr	r3, [pc, #228]	; (8004f60 <StartTask+0xe70>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fb fb62 	bl	8000548 <__aeabi_f2d>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004e8c:	e9cd 2300 	strd	r2, r3, [sp]
 8004e90:	4622      	mov	r2, r4
 8004e92:	4938      	ldr	r1, [pc, #224]	; (8004f74 <StartTask+0xe84>)
 8004e94:	f00f f956 	bl	8014144 <siprintf>
    						showLine(st, lin5, &lil, false);
 8004e98:	f107 0214 	add.w	r2, r7, #20
 8004e9c:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 8004ea0:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f7fd ffad 	bl	8002e04 <showLine>
    						sprintf(sta, "%s", nameStation(Freq));
 8004eaa:	4b2d      	ldr	r3, [pc, #180]	; (8004f60 <StartTask+0xe70>)
 8004eac:	edd3 7a00 	vldr	s15, [r3]
 8004eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8004eb4:	f7fd fe7c 	bl	8002bb0 <nameStation>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ebe:	492e      	ldr	r1, [pc, #184]	; (8004f78 <StartTask+0xe88>)
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f00f f93f 	bl	8014144 <siprintf>
    						showLine(sta, lin6, &lia, true);
 8004ec6:	f107 0210 	add.w	r2, r7, #16
 8004eca:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	; 0xcc
 8004ece:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	f7fd ff96 	bl	8002e04 <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 8004ed8:	4b1b      	ldr	r3, [pc, #108]	; (8004f48 <StartTask+0xe58>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	461c      	mov	r4, r3
 8004ee0:	4b1f      	ldr	r3, [pc, #124]	; (8004f60 <StartTask+0xe70>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fb fb2f 	bl	8000548 <__aeabi_f2d>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	491e      	ldr	r1, [pc, #120]	; (8004f68 <StartTask+0xe78>)
 8004ef0:	8809      	ldrh	r1, [r1, #0]
 8004ef2:	9103      	str	r1, [sp, #12]
 8004ef4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004ef8:	9102      	str	r1, [sp, #8]
 8004efa:	e9cd 2300 	strd	r2, r3, [sp]
 8004efe:	4622      	mov	r2, r4
 8004f00:	491e      	ldr	r1, [pc, #120]	; (8004f7c <StartTask+0xe8c>)
 8004f02:	2001      	movs	r0, #1
 8004f04:	f7fe f990 	bl	8003228 <Report>
				break;
 8004f08:	e310      	b.n	800552c <StartTask+0x143c>
    			case evt_Scan:
    				if (!scan) {
 8004f0a:	4b1d      	ldr	r3, [pc, #116]	; (8004f80 <StartTask+0xe90>)
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f040 8341 	bne.w	8005598 <StartTask+0x14a8>
    					scan = 1;
 8004f16:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <StartTask+0xe90>)
 8004f18:	2201      	movs	r2, #1
 8004f1a:	701a      	strb	r2, [r3, #0]
    					rda5807_StartSeek(seek_up);
 8004f1c:	4b19      	ldr	r3, [pc, #100]	; (8004f84 <StartTask+0xe94>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	4618      	mov	r0, r3
 8004f24:	f001 f90a 	bl	800613c <rda5807_StartSeek>
    				}
    			break;
 8004f28:	e336      	b.n	8005598 <StartTask+0x14a8>
    			case evt_Ver:
    				Report(1, "Ver.%s\r\n", ver);
 8004f2a:	4b17      	ldr	r3, [pc, #92]	; (8004f88 <StartTask+0xe98>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	4916      	ldr	r1, [pc, #88]	; (8004f8c <StartTask+0xe9c>)
 8004f32:	2001      	movs	r0, #1
 8004f34:	f7fe f978 	bl	8003228 <Report>
    			break;
 8004f38:	e32f      	b.n	800559a <StartTask+0x14aa>
 8004f3a:	bf00      	nop
 8004f3c:	20002f5a 	.word	0x20002f5a
 8004f40:	20000113 	.word	0x20000113
 8004f44:	08018014 	.word	0x08018014
 8004f48:	20001f1f 	.word	0x20001f1f
 8004f4c:	20000115 	.word	0x20000115
 8004f50:	0801806c 	.word	0x0801806c
 8004f54:	2000010c 	.word	0x2000010c
 8004f58:	20002f4c 	.word	0x20002f4c
 8004f5c:	20002f50 	.word	0x20002f50
 8004f60:	20000108 	.word	0x20000108
 8004f64:	20002f5c 	.word	0x20002f5c
 8004f68:	20002f54 	.word	0x20002f54
 8004f6c:	20002f56 	.word	0x20002f56
 8004f70:	08017e9c 	.word	0x08017e9c
 8004f74:	08017eb0 	.word	0x08017eb0
 8004f78:	08017ca8 	.word	0x08017ca8
 8004f7c:	08018088 	.word	0x08018088
 8004f80:	20002f59 	.word	0x20002f59
 8004f84:	20000112 	.word	0x20000112
 8004f88:	20000004 	.word	0x20000004
 8004f8c:	080180b8 	.word	0x080180b8
    			case evt_Sec:
    			{
	#ifdef SET_DISPLAY
    				dl = sec2str(st);
 8004f90:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fe f8ad 	bl	80030f4 <sec2str>
 8004f9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    				x = ((SCREEN_WIDTH - (lfnt->FontWidth * dl)) >> 1) & 0x7f;
 8004f9e:	4bab      	ldr	r3, [pc, #684]	; (800524c <StartTask+0x115c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004faa:	fb02 f303 	mul.w	r3, r2, r3
 8004fae:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004fb2:	105b      	asrs	r3, r3, #1
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fba:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
    				ST7565_Print(x, lin1, st, lfnt, 0, PIX_OFF);
 8004fbe:	f9b7 00ca 	ldrsh.w	r0, [r7, #202]	; 0xca
 8004fc2:	f9b7 10d6 	ldrsh.w	r1, [r7, #214]	; 0xd6
 8004fc6:	4ba1      	ldr	r3, [pc, #644]	; (800524c <StartTask+0x115c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004fce:	2400      	movs	r4, #0
 8004fd0:	9401      	str	r4, [sp, #4]
 8004fd2:	2400      	movs	r4, #0
 8004fd4:	9400      	str	r4, [sp, #0]
 8004fd6:	f7fc fccb 	bl	8001970 <ST7565_Print>
	#endif
    				//
    				if (scan) {
 8004fda:	4b9d      	ldr	r3, [pc, #628]	; (8005250 <StartTask+0x1160>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d050      	beq.n	8005086 <StartTask+0xf96>
    					if (rda5807_Get_SeekTuneReadyFlag()) {
 8004fe4:	f001 f8d4 	bl	8006190 <rda5807_Get_SeekTuneReadyFlag>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d04b      	beq.n	8005086 <StartTask+0xf96>
    						Freq = (float)rda5807_GetFreq_In100Khz();
 8004fee:	f001 f865 	bl	80060bc <rda5807_GetFreq_In100Khz>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	ee07 3a90 	vmov	s15, r3
 8004ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ffc:	4b95      	ldr	r3, [pc, #596]	; (8005254 <StartTask+0x1164>)
 8004ffe:	edc3 7a00 	vstr	s15, [r3]
    						Freq /= 10;
 8005002:	4b94      	ldr	r3, [pc, #592]	; (8005254 <StartTask+0x1164>)
 8005004:	ed93 7a00 	vldr	s14, [r3]
 8005008:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800500c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005010:	4b90      	ldr	r3, [pc, #576]	; (8005254 <StartTask+0x1164>)
 8005012:	edc3 7a00 	vstr	s15, [r3]
    						scan = 0;
 8005016:	4b8e      	ldr	r3, [pc, #568]	; (8005250 <StartTask+0x1160>)
 8005018:	2200      	movs	r2, #0
 800501a:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 800501c:	f001 f8e2 	bl	80061e4 <rda5807_Get_Channel>
 8005020:	4603      	mov	r3, r0
 8005022:	461a      	mov	r2, r3
 8005024:	4b8c      	ldr	r3, [pc, #560]	; (8005258 <StartTask+0x1168>)
 8005026:	801a      	strh	r2, [r3, #0]
    						sprintf(sta, "%s", nameStation(Freq));
 8005028:	4b8a      	ldr	r3, [pc, #552]	; (8005254 <StartTask+0x1164>)
 800502a:	edd3 7a00 	vldr	s15, [r3]
 800502e:	eeb0 0a67 	vmov.f32	s0, s15
 8005032:	f7fd fdbd 	bl	8002bb0 <nameStation>
 8005036:	4602      	mov	r2, r0
 8005038:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800503c:	4987      	ldr	r1, [pc, #540]	; (800525c <StartTask+0x116c>)
 800503e:	4618      	mov	r0, r3
 8005040:	f00f f880 	bl	8014144 <siprintf>
    						showLine(sta, lin6, &lia, true);
 8005044:	f107 0210 	add.w	r2, r7, #16
 8005048:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	; 0xcc
 800504c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8005050:	2301      	movs	r3, #1
 8005052:	f7fd fed7 	bl	8002e04 <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 8005056:	4b82      	ldr	r3, [pc, #520]	; (8005260 <StartTask+0x1170>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	461c      	mov	r4, r3
 800505e:	4b7d      	ldr	r3, [pc, #500]	; (8005254 <StartTask+0x1164>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f7fb fa70 	bl	8000548 <__aeabi_f2d>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	497a      	ldr	r1, [pc, #488]	; (8005258 <StartTask+0x1168>)
 800506e:	8809      	ldrh	r1, [r1, #0]
 8005070:	9103      	str	r1, [sp, #12]
 8005072:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005076:	9102      	str	r1, [sp, #8]
 8005078:	e9cd 2300 	strd	r2, r3, [sp]
 800507c:	4622      	mov	r2, r4
 800507e:	4979      	ldr	r1, [pc, #484]	; (8005264 <StartTask+0x1174>)
 8005080:	2001      	movs	r0, #1
 8005082:	f7fe f8d1 	bl	8003228 <Report>
    					}
    				}
    				//
    				uint16_t rssi = rda5807_rssi();
 8005086:	f000 fd59 	bl	8005b3c <rda5807_rssi>
 800508a:	4603      	mov	r3, r0
 800508c:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
    				if (rssi != RSSI) {
 8005090:	4b75      	ldr	r3, [pc, #468]	; (8005268 <StartTask+0x1178>)
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8005098:	429a      	cmp	r2, r3
 800509a:	d03b      	beq.n	8005114 <StartTask+0x1024>
    					RSSI = rssi;
 800509c:	4a72      	ldr	r2, [pc, #456]	; (8005268 <StartTask+0x1178>)
 800509e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80050a2:	8013      	strh	r3, [r2, #0]
    					stereo = rda5807_Get_StereoMonoFlag();
 80050a4:	f001 f886 	bl	80061b4 <rda5807_Get_StereoMonoFlag>
 80050a8:	4603      	mov	r3, r0
 80050aa:	461a      	mov	r2, r3
 80050ac:	4b6f      	ldr	r3, [pc, #444]	; (800526c <StartTask+0x117c>)
 80050ae:	701a      	strb	r2, [r3, #0]
	#ifdef SET_DISPLAY
    					if (stereo)
 80050b0:	4b6e      	ldr	r3, [pc, #440]	; (800526c <StartTask+0x117c>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d012      	beq.n	80050de <StartTask+0xfee>
    						sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 80050b8:	4b6b      	ldr	r3, [pc, #428]	; (8005268 <StartTask+0x1178>)
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	461c      	mov	r4, r3
 80050be:	4b65      	ldr	r3, [pc, #404]	; (8005254 <StartTask+0x1164>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fb fa40 	bl	8000548 <__aeabi_f2d>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80050d0:	e9cd 2300 	strd	r2, r3, [sp]
 80050d4:	4622      	mov	r2, r4
 80050d6:	4966      	ldr	r1, [pc, #408]	; (8005270 <StartTask+0x1180>)
 80050d8:	f00f f834 	bl	8014144 <siprintf>
 80050dc:	e011      	b.n	8005102 <StartTask+0x1012>
    					else
    						sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 80050de:	4b62      	ldr	r3, [pc, #392]	; (8005268 <StartTask+0x1178>)
 80050e0:	881b      	ldrh	r3, [r3, #0]
 80050e2:	461c      	mov	r4, r3
 80050e4:	4b5b      	ldr	r3, [pc, #364]	; (8005254 <StartTask+0x1164>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fb fa2d 	bl	8000548 <__aeabi_f2d>
 80050ee:	4602      	mov	r2, r0
 80050f0:	460b      	mov	r3, r1
 80050f2:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80050f6:	e9cd 2300 	strd	r2, r3, [sp]
 80050fa:	4622      	mov	r2, r4
 80050fc:	495d      	ldr	r1, [pc, #372]	; (8005274 <StartTask+0x1184>)
 80050fe:	f00f f821 	bl	8014144 <siprintf>
    					showLine(st, lin5, &lil, false);
 8005102:	f107 0214 	add.w	r2, r7, #20
 8005106:	f8b7 10ce 	ldrh.w	r1, [r7, #206]	; 0xce
 800510a:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800510e:	2300      	movs	r3, #0
 8005110:	f7fd fe78 	bl	8002e04 <showLine>
    					//showLine(sta, lin6, &lia, true);
    					////Report(1, "ChipID:0x%x Chan:%u Freq:%.2f RSSI:%u\r\n", rdaID, Chan, Freq, RSSI);
	#endif
    				}
    				//
    				if (devError) {
 8005114:	4b58      	ldr	r3, [pc, #352]	; (8005278 <StartTask+0x1188>)
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00d      	beq.n	8005138 <StartTask+0x1048>
    					dl = sprintf(tmp, "devError : 0x%04X", devError);
 800511c:	4b56      	ldr	r3, [pc, #344]	; (8005278 <StartTask+0x1188>)
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	461a      	mov	r2, r3
 8005122:	4956      	ldr	r1, [pc, #344]	; (800527c <StartTask+0x118c>)
 8005124:	4856      	ldr	r0, [pc, #344]	; (8005280 <StartTask+0x1190>)
 8005126:	f00f f80d 	bl	8014144 <siprintf>
 800512a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    					lastErr = devError;
 800512e:	4b52      	ldr	r3, [pc, #328]	; (8005278 <StartTask+0x1188>)
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 8005136:	e013      	b.n	8005160 <StartTask+0x1070>
    				} else {
    					if (lastErr) {
 8005138:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00c      	beq.n	800515a <StartTask+0x106a>
    						dl = sprintf(tmp, "Ver.%s", ver);
 8005140:	4b50      	ldr	r3, [pc, #320]	; (8005284 <StartTask+0x1194>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	4950      	ldr	r1, [pc, #320]	; (8005288 <StartTask+0x1198>)
 8005148:	484d      	ldr	r0, [pc, #308]	; (8005280 <StartTask+0x1190>)
 800514a:	f00e fffb 	bl	8014144 <siprintf>
 800514e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    						lastErr = devOK;
 8005152:	2300      	movs	r3, #0
 8005154:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 8005158:	e002      	b.n	8005160 <StartTask+0x1070>
    					} else dl = 0;
 800515a:	2300      	movs	r3, #0
 800515c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    				}
	#ifdef SET_DISPLAY
    				if (dl) {
 8005160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005164:	2b00      	cmp	r3, #0
 8005166:	d036      	beq.n	80051d6 <StartTask+0x10e6>
    					ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - lfnt->FontHeight, SCREEN_WIDTH - 1, lfnt->FontHeight, PIX_OFF);
 8005168:	4b38      	ldr	r3, [pc, #224]	; (800524c <StartTask+0x115c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	785b      	ldrb	r3, [r3, #1]
 800516e:	b29b      	uxth	r3, r3
 8005170:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005174:	b29b      	uxth	r3, r3
 8005176:	b219      	sxth	r1, r3
 8005178:	4b34      	ldr	r3, [pc, #208]	; (800524c <StartTask+0x115c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	785b      	ldrb	r3, [r3, #1]
 800517e:	b21b      	sxth	r3, r3
 8005180:	2200      	movs	r2, #0
 8005182:	9200      	str	r2, [sp, #0]
 8005184:	227f      	movs	r2, #127	; 0x7f
 8005186:	2000      	movs	r0, #0
 8005188:	f7fc fe4b 	bl	8001e22 <ST7565_DrawFilledRectangle>
    					x = ((SCREEN_WIDTH - (lfnt->FontWidth * dl)) >> 1) & 0x7f;
 800518c:	4b2f      	ldr	r3, [pc, #188]	; (800524c <StartTask+0x115c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	461a      	mov	r2, r3
 8005194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005198:	fb02 f303 	mul.w	r3, r2, r3
 800519c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80051a0:	105b      	asrs	r3, r3, #1
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051a8:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
    					ST7565_Print(x, SCREEN_HEIGHT - lfnt->FontHeight, tmp, lfnt, 1, PIX_ON);
 80051ac:	f9b7 00ca 	ldrsh.w	r0, [r7, #202]	; 0xca
 80051b0:	4b26      	ldr	r3, [pc, #152]	; (800524c <StartTask+0x115c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	785b      	ldrb	r3, [r3, #1]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80051bc:	b29b      	uxth	r3, r3
 80051be:	b219      	sxth	r1, r3
 80051c0:	4b22      	ldr	r3, [pc, #136]	; (800524c <StartTask+0x115c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2201      	movs	r2, #1
 80051c6:	9201      	str	r2, [sp, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	9200      	str	r2, [sp, #0]
 80051cc:	4a2c      	ldr	r2, [pc, #176]	; (8005280 <StartTask+0x1190>)
 80051ce:	f7fc fbcf 	bl	8001970 <ST7565_Print>
    					ST7565_Update();
 80051d2:	f7fc fa1d 	bl	8001610 <ST7565_Update>
    				}
    				//
    				ST7565_Update();
 80051d6:	f7fc fa1b 	bl	8001610 <ST7565_Update>
	#endif
    			}
    			break;
 80051da:	e1de      	b.n	800559a <StartTask+0x14aa>
    			case evt_Evt:
    				Report(1, "evtQueue counter : %u\r\n", getQueCount(evtQueHandle));
 80051dc:	4b2b      	ldr	r3, [pc, #172]	; (800528c <StartTask+0x119c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fd fcd9 	bl	8002b98 <getQueCount>
 80051e6:	4603      	mov	r3, r0
 80051e8:	461a      	mov	r2, r3
 80051ea:	4929      	ldr	r1, [pc, #164]	; (8005290 <StartTask+0x11a0>)
 80051ec:	2001      	movs	r0, #1
 80051ee:	f7fe f81b 	bl	8003228 <Report>
    			break;
 80051f2:	e1d2      	b.n	800559a <StartTask+0x14aa>
    			case evt_Ack:
    				Report(1, "ackQueue counter : %u\r\n", getQueCount(ackQueHandle));
 80051f4:	4b27      	ldr	r3, [pc, #156]	; (8005294 <StartTask+0x11a4>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fd fccd 	bl	8002b98 <getQueCount>
 80051fe:	4603      	mov	r3, r0
 8005200:	461a      	mov	r2, r3
 8005202:	4925      	ldr	r1, [pc, #148]	; (8005298 <StartTask+0x11a8>)
 8005204:	2001      	movs	r0, #1
 8005206:	f7fe f80f 	bl	8003228 <Report>
    			break;
 800520a:	e1c6      	b.n	800559a <StartTask+0x14aa>
    			case evt_Cmd:
    				Report(1, "cmdQueue counter : %u\r\n", getQueCount(cmdQueHandle));
 800520c:	4b23      	ldr	r3, [pc, #140]	; (800529c <StartTask+0x11ac>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4618      	mov	r0, r3
 8005212:	f7fd fcc1 	bl	8002b98 <getQueCount>
 8005216:	4603      	mov	r3, r0
 8005218:	461a      	mov	r2, r3
 800521a:	4921      	ldr	r1, [pc, #132]	; (80052a0 <StartTask+0x11b0>)
 800521c:	2001      	movs	r0, #1
 800521e:	f7fe f803 	bl	8003228 <Report>
    			break;
 8005222:	e1ba      	b.n	800559a <StartTask+0x14aa>
    			case evt_Clr:
    				devError = devOK;
 8005224:	4b14      	ldr	r3, [pc, #80]	; (8005278 <StartTask+0x1188>)
 8005226:	2200      	movs	r2, #0
 8005228:	801a      	strh	r2, [r3, #0]
    				Report(1, "[que:%u] Clear all Errors...\r\n", cntEvt);
 800522a:	4b0d      	ldr	r3, [pc, #52]	; (8005260 <StartTask+0x1170>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	b2db      	uxtb	r3, r3
 8005230:	461a      	mov	r2, r3
 8005232:	491c      	ldr	r1, [pc, #112]	; (80052a4 <StartTask+0x11b4>)
 8005234:	2001      	movs	r0, #1
 8005236:	f7fd fff7 	bl	8003228 <Report>
    			break;
 800523a:	e1ae      	b.n	800559a <StartTask+0x14aa>
    			case evt_Help:
    				stx[0] = '\0';
 800523c:	4b1a      	ldr	r3, [pc, #104]	; (80052a8 <StartTask+0x11b8>)
 800523e:	2200      	movs	r2, #0
 8005240:	701a      	strb	r2, [r3, #0]
    				for (int8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t%s\r\n", s_cmds[i]);
 8005242:	2300      	movs	r3, #0
 8005244:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 8005248:	e046      	b.n	80052d8 <StartTask+0x11e8>
 800524a:	bf00      	nop
 800524c:	20002f48 	.word	0x20002f48
 8005250:	20002f59 	.word	0x20002f59
 8005254:	20000108 	.word	0x20000108
 8005258:	20002f54 	.word	0x20002f54
 800525c:	08017ca8 	.word	0x08017ca8
 8005260:	20001f1f 	.word	0x20001f1f
 8005264:	08018088 	.word	0x08018088
 8005268:	20002f56 	.word	0x20002f56
 800526c:	20002f5c 	.word	0x20002f5c
 8005270:	08017e9c 	.word	0x08017e9c
 8005274:	08017eb0 	.word	0x08017eb0
 8005278:	20001b08 	.word	0x20001b08
 800527c:	080180c4 	.word	0x080180c4
 8005280:	20001288 	.word	0x20001288
 8005284:	20000004 	.word	0x20000004
 8005288:	08017e64 	.word	0x08017e64
 800528c:	20000e74 	.word	0x20000e74
 8005290:	080180d8 	.word	0x080180d8
 8005294:	20000e7c 	.word	0x20000e7c
 8005298:	080180f0 	.word	0x080180f0
 800529c:	20000e78 	.word	0x20000e78
 80052a0:	08018108 	.word	0x08018108
 80052a4:	08018120 	.word	0x08018120
 80052a8:	20000e88 	.word	0x20000e88
 80052ac:	48a0      	ldr	r0, [pc, #640]	; (8005530 <StartTask+0x1440>)
 80052ae:	f7fa ff8f 	bl	80001d0 <strlen>
 80052b2:	4603      	mov	r3, r0
 80052b4:	4a9e      	ldr	r2, [pc, #632]	; (8005530 <StartTask+0x1440>)
 80052b6:	1898      	adds	r0, r3, r2
 80052b8:	f997 30f2 	ldrsb.w	r3, [r7, #242]	; 0xf2
 80052bc:	4a9d      	ldr	r2, [pc, #628]	; (8005534 <StartTask+0x1444>)
 80052be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c2:	461a      	mov	r2, r3
 80052c4:	499c      	ldr	r1, [pc, #624]	; (8005538 <StartTask+0x1448>)
 80052c6:	f00e ff3d 	bl	8014144 <siprintf>
 80052ca:	f997 30f2 	ldrsb.w	r3, [r7, #242]	; 0xf2
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	3301      	adds	r3, #1
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 80052d8:	f997 30f2 	ldrsb.w	r3, [r7, #242]	; 0xf2
 80052dc:	2b1a      	cmp	r3, #26
 80052de:	dde5      	ble.n	80052ac <StartTask+0x11bc>
    				Report(0, "%s", stx);
 80052e0:	4a93      	ldr	r2, [pc, #588]	; (8005530 <StartTask+0x1440>)
 80052e2:	4996      	ldr	r1, [pc, #600]	; (800553c <StartTask+0x144c>)
 80052e4:	2000      	movs	r0, #0
 80052e6:	f7fd ff9f 	bl	8003228 <Report>
    			break;
 80052ea:	e156      	b.n	800559a <StartTask+0x14aa>
    			case evt_Restart:
    				restart = 1;
 80052ec:	4b94      	ldr	r3, [pc, #592]	; (8005540 <StartTask+0x1450>)
 80052ee:	2201      	movs	r2, #1
 80052f0:	701a      	strb	r2, [r3, #0]
    				Report(1, "[que:%u] Restart system...\r\n", cntEvt);
 80052f2:	4b94      	ldr	r3, [pc, #592]	; (8005544 <StartTask+0x1454>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	461a      	mov	r2, r3
 80052fa:	4993      	ldr	r1, [pc, #588]	; (8005548 <StartTask+0x1458>)
 80052fc:	2001      	movs	r0, #1
 80052fe:	f7fd ff93 	bl	8003228 <Report>
    			break;
 8005302:	e14a      	b.n	800559a <StartTask+0x14aa>
    			case evt_Epoch:
    				set_Date(epoch);
 8005304:	4b91      	ldr	r3, [pc, #580]	; (800554c <StartTask+0x145c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4618      	mov	r0, r3
 800530a:	f7fd fe93 	bl	8003034 <set_Date>
    				Report(1, "[que:%u] Set Unix TimeStamp to %lu\r\n", cntEvt, epoch);
 800530e:	4b8d      	ldr	r3, [pc, #564]	; (8005544 <StartTask+0x1454>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	461a      	mov	r2, r3
 8005316:	4b8d      	ldr	r3, [pc, #564]	; (800554c <StartTask+0x145c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	498d      	ldr	r1, [pc, #564]	; (8005550 <StartTask+0x1460>)
 800531c:	2001      	movs	r0, #1
 800531e:	f7fd ff83 	bl	8003228 <Report>
    			break;
 8005322:	e13a      	b.n	800559a <StartTask+0x14aa>
    			case evt_Err:
    				Report(1, "[que:%u] Error input from uart\r\n", cntEvt);
 8005324:	4b87      	ldr	r3, [pc, #540]	; (8005544 <StartTask+0x1454>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	b2db      	uxtb	r3, r3
 800532a:	461a      	mov	r2, r3
 800532c:	4989      	ldr	r1, [pc, #548]	; (8005554 <StartTask+0x1464>)
 800532e:	2001      	movs	r0, #1
 8005330:	f7fd ff7a 	bl	8003228 <Report>
    			break;
 8005334:	e131      	b.n	800559a <StartTask+0x14aa>
	#ifdef SET_W25FLASH
    			case evt_sRead:
    			case evt_sNext:
    			{
    				uint32_t w25_adr = (adr_sector * W25qxx_getSectorSize()) + offset_sector;
 8005336:	f001 ffbb 	bl	80072b0 <W25qxx_getSectorSize>
 800533a:	4603      	mov	r3, r0
 800533c:	4a86      	ldr	r2, [pc, #536]	; (8005558 <StartTask+0x1468>)
 800533e:	6812      	ldr	r2, [r2, #0]
 8005340:	fb02 f303 	mul.w	r3, r2, r3
 8005344:	4a85      	ldr	r2, [pc, #532]	; (800555c <StartTask+0x146c>)
 8005346:	6812      	ldr	r2, [r2, #0]
 8005348:	4413      	add	r3, r2
 800534a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    				uint32_t dlin = list_sector;
 800534e:	4b84      	ldr	r3, [pc, #528]	; (8005560 <StartTask+0x1470>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    				int step = 32;
 8005356:	2320      	movs	r3, #32
 8005358:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    				uint32_t ind = 0;
 800535c:	2300      	movs	r3, #0
 800535e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    				W25qxx_ReadSector(fs_work, adr_sector, offset_sector, dlin);
 8005362:	4b7d      	ldr	r3, [pc, #500]	; (8005558 <StartTask+0x1468>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4619      	mov	r1, r3
 8005368:	4b7c      	ldr	r3, [pc, #496]	; (800555c <StartTask+0x146c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005372:	487c      	ldr	r0, [pc, #496]	; (8005564 <StartTask+0x1474>)
 8005374:	f002 faae 	bl	80078d4 <W25qxx_ReadSector>
    				Report(0, "Read sector:%d offset:%d len:%u\r\n", adr_sector, offset_sector, dlin);
 8005378:	4b77      	ldr	r3, [pc, #476]	; (8005558 <StartTask+0x1468>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	4b77      	ldr	r3, [pc, #476]	; (800555c <StartTask+0x146c>)
 800537e:	6819      	ldr	r1, [r3, #0]
 8005380:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	460b      	mov	r3, r1
 8005388:	4977      	ldr	r1, [pc, #476]	; (8005568 <StartTask+0x1478>)
 800538a:	2000      	movs	r0, #0
 800538c:	f7fd ff4c 	bl	8003228 <Report>
    				while (ind < dlin) {
 8005390:	e05b      	b.n	800544a <StartTask+0x135a>
    					strf[0] = '\0';
 8005392:	4b76      	ldr	r3, [pc, #472]	; (800556c <StartTask+0x147c>)
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]
    					while (1) {
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 8005398:	4874      	ldr	r0, [pc, #464]	; (800556c <StartTask+0x147c>)
 800539a:	f7fa ff19 	bl	80001d0 <strlen>
 800539e:	4603      	mov	r3, r0
 80053a0:	4a72      	ldr	r2, [pc, #456]	; (800556c <StartTask+0x147c>)
 80053a2:	4413      	add	r3, r2
 80053a4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80053a8:	4971      	ldr	r1, [pc, #452]	; (8005570 <StartTask+0x1480>)
 80053aa:	4618      	mov	r0, r3
 80053ac:	f00e feca 	bl	8014144 <siprintf>
    						for (int i = 0; i < step; i++) sprintf(strf+strlen(strf), " %02X", fs_work[i + ind]);
 80053b0:	2300      	movs	r3, #0
 80053b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053b6:	e015      	b.n	80053e4 <StartTask+0x12f4>
 80053b8:	486c      	ldr	r0, [pc, #432]	; (800556c <StartTask+0x147c>)
 80053ba:	f7fa ff09 	bl	80001d0 <strlen>
 80053be:	4603      	mov	r3, r0
 80053c0:	4a6a      	ldr	r2, [pc, #424]	; (800556c <StartTask+0x147c>)
 80053c2:	1898      	adds	r0, r3, r2
 80053c4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80053c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80053cc:	4413      	add	r3, r2
 80053ce:	4a65      	ldr	r2, [pc, #404]	; (8005564 <StartTask+0x1474>)
 80053d0:	5cd3      	ldrb	r3, [r2, r3]
 80053d2:	461a      	mov	r2, r3
 80053d4:	4967      	ldr	r1, [pc, #412]	; (8005574 <StartTask+0x1484>)
 80053d6:	f00e feb5 	bl	8014144 <siprintf>
 80053da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053de:	3301      	adds	r3, #1
 80053e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053e4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80053e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053ec:	429a      	cmp	r2, r3
 80053ee:	dbe3      	blt.n	80053b8 <StartTask+0x12c8>
    						strcat(strf, "\r\n");
 80053f0:	485e      	ldr	r0, [pc, #376]	; (800556c <StartTask+0x147c>)
 80053f2:	f7fa feed 	bl	80001d0 <strlen>
 80053f6:	4603      	mov	r3, r0
 80053f8:	461a      	mov	r2, r3
 80053fa:	4b5c      	ldr	r3, [pc, #368]	; (800556c <StartTask+0x147c>)
 80053fc:	4413      	add	r3, r2
 80053fe:	4a5e      	ldr	r2, [pc, #376]	; (8005578 <StartTask+0x1488>)
 8005400:	8811      	ldrh	r1, [r2, #0]
 8005402:	7892      	ldrb	r2, [r2, #2]
 8005404:	8019      	strh	r1, [r3, #0]
 8005406:	709a      	strb	r2, [r3, #2]
    						w25_adr += step;
 8005408:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800540c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005410:	4413      	add	r3, r2
 8005412:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    						ind += step;
 8005416:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800541a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800541e:	4413      	add	r3, r2
 8005420:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    						if (!(ind % W25qxx_getPageSize())) break;
 8005424:	f001 ff50 	bl	80072c8 <W25qxx_getPageSize>
 8005428:	4602      	mov	r2, r0
 800542a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800542e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005432:	fb01 f202 	mul.w	r2, r1, r2
 8005436:	1a9b      	subs	r3, r3, r2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d000      	beq.n	800543e <StartTask+0x134e>
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 800543c:	e7ac      	b.n	8005398 <StartTask+0x12a8>
    						if (!(ind % W25qxx_getPageSize())) break;
 800543e:	bf00      	nop
    					}
    					Report(0, "%s", strf);
 8005440:	4a4a      	ldr	r2, [pc, #296]	; (800556c <StartTask+0x147c>)
 8005442:	493e      	ldr	r1, [pc, #248]	; (800553c <StartTask+0x144c>)
 8005444:	2000      	movs	r0, #0
 8005446:	f7fd feef 	bl	8003228 <Report>
    				while (ind < dlin) {
 800544a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800544e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005452:	429a      	cmp	r2, r3
 8005454:	d39d      	bcc.n	8005392 <StartTask+0x12a2>
    				}
    			}
    			break;
 8005456:	e0a0      	b.n	800559a <StartTask+0x14aa>
    			case evt_sWrite:
    			{
    				uint32_t ss = W25qxx_getSectorSize();
 8005458:	f001 ff2a 	bl	80072b0 <W25qxx_getSectorSize>
 800545c:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    				if (!W25qxx_IsEmptySector(adr_sector, 0, ss)) W25qxx_EraseSector(adr_sector);
 8005460:	4b3d      	ldr	r3, [pc, #244]	; (8005558 <StartTask+0x1468>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005468:	2100      	movs	r1, #0
 800546a:	4618      	mov	r0, r3
 800546c:	f001 ff96 	bl	800739c <W25qxx_IsEmptySector>
 8005470:	4603      	mov	r3, r0
 8005472:	f083 0301 	eor.w	r3, r3, #1
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d004      	beq.n	8005486 <StartTask+0x1396>
 800547c:	4b36      	ldr	r3, [pc, #216]	; (8005558 <StartTask+0x1468>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4618      	mov	r0, r3
 8005482:	f001 ff2f 	bl	80072e4 <W25qxx_EraseSector>
    				memset(fs_work, byte_write, ss);
 8005486:	4b3d      	ldr	r3, [pc, #244]	; (800557c <StartTask+0x148c>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800548e:	4619      	mov	r1, r3
 8005490:	4834      	ldr	r0, [pc, #208]	; (8005564 <StartTask+0x1474>)
 8005492:	f00e f875 	bl	8013580 <memset>
    				if (len_write != -1) ss = len_write;
 8005496:	4b3a      	ldr	r3, [pc, #232]	; (8005580 <StartTask+0x1490>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800549e:	d003      	beq.n	80054a8 <StartTask+0x13b8>
 80054a0:	4b37      	ldr	r3, [pc, #220]	; (8005580 <StartTask+0x1490>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    				W25qxx_WriteSector(fs_work, adr_sector, offset_sector, ss);
 80054a8:	4b2b      	ldr	r3, [pc, #172]	; (8005558 <StartTask+0x1468>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4619      	mov	r1, r3
 80054ae:	4b2b      	ldr	r3, [pc, #172]	; (800555c <StartTask+0x146c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054b8:	482a      	ldr	r0, [pc, #168]	; (8005564 <StartTask+0x1474>)
 80054ba:	f002 f8e3 	bl	8007684 <W25qxx_WriteSector>
    				Report(0, "Fill sector:%d byte:%02X len:%d done\r\n", adr_sector, byte_write, ss);
 80054be:	4b26      	ldr	r3, [pc, #152]	; (8005558 <StartTask+0x1468>)
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	4b2e      	ldr	r3, [pc, #184]	; (800557c <StartTask+0x148c>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	4619      	mov	r1, r3
 80054c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	460b      	mov	r3, r1
 80054d0:	492c      	ldr	r1, [pc, #176]	; (8005584 <StartTask+0x1494>)
 80054d2:	2000      	movs	r0, #0
 80054d4:	f7fd fea8 	bl	8003228 <Report>
    			}
    			break;
 80054d8:	e05f      	b.n	800559a <StartTask+0x14aa>
    			case evt_sErase:
    				if (adr_sector == -1) {
 80054da:	4b1f      	ldr	r3, [pc, #124]	; (8005558 <StartTask+0x1468>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054e2:	d10c      	bne.n	80054fe <StartTask+0x140e>
    					Report(1, "Erase flash");
 80054e4:	4928      	ldr	r1, [pc, #160]	; (8005588 <StartTask+0x1498>)
 80054e6:	2001      	movs	r0, #1
 80054e8:	f7fd fe9e 	bl	8003228 <Report>
    					flag_sector = true;
 80054ec:	4b27      	ldr	r3, [pc, #156]	; (800558c <StartTask+0x149c>)
 80054ee:	2201      	movs	r2, #1
 80054f0:	701a      	strb	r2, [r3, #0]
    					btime = HAL_GetTick();
 80054f2:	f002 fab1 	bl	8007a58 <HAL_GetTick>
 80054f6:	4603      	mov	r3, r0
 80054f8:	4a25      	ldr	r2, [pc, #148]	; (8005590 <StartTask+0x14a0>)
 80054fa:	6013      	str	r3, [r2, #0]
    				} else {
    					W25qxx_EraseSector(adr_sector);
    					Report(1, "Erase sector:%d done\r\n", adr_sector);
    				}
    			break;
 80054fc:	e04d      	b.n	800559a <StartTask+0x14aa>
    					W25qxx_EraseSector(adr_sector);
 80054fe:	4b16      	ldr	r3, [pc, #88]	; (8005558 <StartTask+0x1468>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f001 feee 	bl	80072e4 <W25qxx_EraseSector>
    					Report(1, "Erase sector:%d done\r\n", adr_sector);
 8005508:	4b13      	ldr	r3, [pc, #76]	; (8005558 <StartTask+0x1468>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	461a      	mov	r2, r3
 800550e:	4921      	ldr	r1, [pc, #132]	; (8005594 <StartTask+0x14a4>)
 8005510:	2001      	movs	r0, #1
 8005512:	f7fd fe89 	bl	8003228 <Report>
    			break;
 8005516:	e040      	b.n	800559a <StartTask+0x14aa>
    			break;
 8005518:	bf00      	nop
 800551a:	e03e      	b.n	800559a <StartTask+0x14aa>
    			break;
 800551c:	bf00      	nop
 800551e:	e03c      	b.n	800559a <StartTask+0x14aa>
    			break;
 8005520:	bf00      	nop
 8005522:	e03a      	b.n	800559a <StartTask+0x14aa>
    			break;
 8005524:	bf00      	nop
 8005526:	e038      	b.n	800559a <StartTask+0x14aa>
    			break;
 8005528:	bf00      	nop
 800552a:	e036      	b.n	800559a <StartTask+0x14aa>
				break;
 800552c:	bf00      	nop
 800552e:	e034      	b.n	800559a <StartTask+0x14aa>
 8005530:	20000e88 	.word	0x20000e88
 8005534:	2000001c 	.word	0x2000001c
 8005538:	08018140 	.word	0x08018140
 800553c:	08017ca8 	.word	0x08017ca8
 8005540:	20001f1c 	.word	0x20001f1c
 8005544:	20001f1f 	.word	0x20001f1f
 8005548:	08018148 	.word	0x08018148
 800554c:	20000018 	.word	0x20000018
 8005550:	08018168 	.word	0x08018168
 8005554:	08018190 	.word	0x08018190
 8005558:	20001f20 	.word	0x20001f20
 800555c:	20001f24 	.word	0x20001f24
 8005560:	20001f28 	.word	0x20001f28
 8005564:	20001f34 	.word	0x20001f34
 8005568:	080181b4 	.word	0x080181b4
 800556c:	20001708 	.word	0x20001708
 8005570:	080181d8 	.word	0x080181d8
 8005574:	08017f34 	.word	0x08017f34
 8005578:	080181e0 	.word	0x080181e0
 800557c:	20000104 	.word	0x20000104
 8005580:	20001f2c 	.word	0x20001f2c
 8005584:	080181e4 	.word	0x080181e4
 8005588:	0801820c 	.word	0x0801820c
 800558c:	20001f30 	.word	0x20001f30
 8005590:	20002f38 	.word	0x20002f38
 8005594:	08018218 	.word	0x08018218
    			break;
 8005598:	bf00      	nop
	#endif
    		}
    		if ((evt >= evt_sRead) && (evt <= evt_sWrite)) {
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b03      	cmp	r3, #3
 800559e:	dd09      	ble.n	80055b4 <StartTask+0x14c4>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2b07      	cmp	r3, #7
 80055a4:	dc06      	bgt.n	80055b4 <StartTask+0x14c4>
    			last_cmd_sector =  evt;//cmd_sector;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4a81      	ldr	r2, [pc, #516]	; (80057b0 <StartTask+0x16c0>)
 80055aa:	6013      	str	r3, [r2, #0]
    			cmd_sector = sNone;
 80055ac:	4b81      	ldr	r3, [pc, #516]	; (80057b4 <StartTask+0x16c4>)
 80055ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055b2:	601a      	str	r2, [r3, #0]
    		}
    	}//evtQueueGet(....)


#ifdef SET_W25FLASH
    	if (flag_sector) {
 80055b4:	4b80      	ldr	r3, [pc, #512]	; (80057b8 <StartTask+0x16c8>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d031      	beq.n	8005620 <StartTask+0x1530>
    		adr_sector++;
 80055bc:	4b7f      	ldr	r3, [pc, #508]	; (80057bc <StartTask+0x16cc>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3301      	adds	r3, #1
 80055c2:	4a7e      	ldr	r2, [pc, #504]	; (80057bc <StartTask+0x16cc>)
 80055c4:	6013      	str	r3, [r2, #0]
    		if (adr_sector >= W25qxx_getSectorCount()) {
 80055c6:	f001 fe67 	bl	8007298 <W25qxx_getSectorCount>
 80055ca:	4603      	mov	r3, r0
 80055cc:	4a7b      	ldr	r2, [pc, #492]	; (80057bc <StartTask+0x16cc>)
 80055ce:	6812      	ldr	r2, [r2, #0]
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d816      	bhi.n	8005602 <StartTask+0x1512>
    			flag_sector = false;
 80055d4:	4b78      	ldr	r3, [pc, #480]	; (80057b8 <StartTask+0x16c8>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	701a      	strb	r2, [r3, #0]
    			etime = HAL_GetTick();
 80055da:	f002 fa3d 	bl	8007a58 <HAL_GetTick>
 80055de:	4603      	mov	r3, r0
 80055e0:	4a77      	ldr	r2, [pc, #476]	; (80057c0 <StartTask+0x16d0>)
 80055e2:	6013      	str	r3, [r2, #0]
    			Report(0, " done (%lu sec)\r\n", (etime - btime) / 1000);
 80055e4:	4b76      	ldr	r3, [pc, #472]	; (80057c0 <StartTask+0x16d0>)
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	4b76      	ldr	r3, [pc, #472]	; (80057c4 <StartTask+0x16d4>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	4a76      	ldr	r2, [pc, #472]	; (80057c8 <StartTask+0x16d8>)
 80055f0:	fba2 2303 	umull	r2, r3, r2, r3
 80055f4:	099b      	lsrs	r3, r3, #6
 80055f6:	461a      	mov	r2, r3
 80055f8:	4974      	ldr	r1, [pc, #464]	; (80057cc <StartTask+0x16dc>)
 80055fa:	2000      	movs	r0, #0
 80055fc:	f7fd fe14 	bl	8003228 <Report>
 8005600:	e00e      	b.n	8005620 <StartTask+0x1530>
    		} else {
    			//putEvt(evt_sErase);
    			W25qxx_EraseSector(adr_sector);
 8005602:	4b6e      	ldr	r3, [pc, #440]	; (80057bc <StartTask+0x16cc>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4618      	mov	r0, r3
 8005608:	f001 fe6c 	bl	80072e4 <W25qxx_EraseSector>
    			if (!(adr_sector % 8)) Report(0, ".");
 800560c:	4b6b      	ldr	r3, [pc, #428]	; (80057bc <StartTask+0x16cc>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	2b00      	cmp	r3, #0
 8005616:	d103      	bne.n	8005620 <StartTask+0x1530>
 8005618:	496d      	ldr	r1, [pc, #436]	; (80057d0 <StartTask+0x16e0>)
 800561a:	2000      	movs	r0, #0
 800561c:	f7fd fe04 	bl	8003228 <Report>
    	}
#endif


#if defined(SET_BLE) || defined(SET_AUDIO)
    	if (ackQueHandle) {
 8005620:	4b6c      	ldr	r3, [pc, #432]	; (80057d4 <StartTask+0x16e4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d01d      	beq.n	8005664 <StartTask+0x1574>
    		if (!osMessageQueueGet(ackQueHandle, (void *)&_ack, NULL, 1)) {
 8005628:	4b6a      	ldr	r3, [pc, #424]	; (80057d4 <StartTask+0x16e4>)
 800562a:	6818      	ldr	r0, [r3, #0]
 800562c:	2301      	movs	r3, #1
 800562e:	2200      	movs	r2, #0
 8005630:	4969      	ldr	r1, [pc, #420]	; (80057d8 <StartTask+0x16e8>)
 8005632:	f00a fbcb 	bl	800fdcc <osMessageQueueGet>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d113      	bne.n	8005664 <StartTask+0x1574>
    			if (_ack.msg) {
 800563c:	4b66      	ldr	r3, [pc, #408]	; (80057d8 <StartTask+0x16e8>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00f      	beq.n	8005664 <StartTask+0x1574>
    				strcpy(bleRxBuf, _ack.msg);
 8005644:	4b64      	ldr	r3, [pc, #400]	; (80057d8 <StartTask+0x16e8>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4619      	mov	r1, r3
 800564a:	4864      	ldr	r0, [pc, #400]	; (80057dc <StartTask+0x16ec>)
 800564c:	f00e fdea 	bl	8014224 <strcpy>
    				free(_ack.msg);
 8005650:	4b61      	ldr	r3, [pc, #388]	; (80057d8 <StartTask+0x16e8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4618      	mov	r0, r3
 8005656:	f00d ff7d 	bl	8013554 <free>
    				//vPortFree(_ack.msg);
    				Report(1, "[BLE_rx] %s\r\n", bleRxBuf);
 800565a:	4a60      	ldr	r2, [pc, #384]	; (80057dc <StartTask+0x16ec>)
 800565c:	4960      	ldr	r1, [pc, #384]	; (80057e0 <StartTask+0x16f0>)
 800565e:	2001      	movs	r0, #1
 8005660:	f7fd fde2 	bl	8003228 <Report>
    			}
    		}
    	}
    	if (cmdQueHandle) {
 8005664:	4b5f      	ldr	r3, [pc, #380]	; (80057e4 <StartTask+0x16f4>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d028      	beq.n	80056be <StartTask+0x15ce>
    		if (!osMessageQueueGet(cmdQueHandle, (void *)&_cmd, NULL, 1)) {
 800566c:	4b5d      	ldr	r3, [pc, #372]	; (80057e4 <StartTask+0x16f4>)
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	2301      	movs	r3, #1
 8005672:	2200      	movs	r2, #0
 8005674:	495c      	ldr	r1, [pc, #368]	; (80057e8 <StartTask+0x16f8>)
 8005676:	f00a fba9 	bl	800fdcc <osMessageQueueGet>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d11e      	bne.n	80056be <StartTask+0x15ce>
    			if (_cmd.msg) {
 8005680:	4b59      	ldr	r3, [pc, #356]	; (80057e8 <StartTask+0x16f8>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d01a      	beq.n	80056be <StartTask+0x15ce>
    				strcpy(bleBuf, _cmd.msg);
 8005688:	4b57      	ldr	r3, [pc, #348]	; (80057e8 <StartTask+0x16f8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4619      	mov	r1, r3
 800568e:	4857      	ldr	r0, [pc, #348]	; (80057ec <StartTask+0x16fc>)
 8005690:	f00e fdc8 	bl	8014224 <strcpy>
    				free(_cmd.msg);
 8005694:	4b54      	ldr	r3, [pc, #336]	; (80057e8 <StartTask+0x16f8>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f00d ff5b 	bl	8013554 <free>
    				strcat(bleBuf, "\r\n");
 800569e:	4853      	ldr	r0, [pc, #332]	; (80057ec <StartTask+0x16fc>)
 80056a0:	f7fa fd96 	bl	80001d0 <strlen>
 80056a4:	4603      	mov	r3, r0
 80056a6:	461a      	mov	r2, r3
 80056a8:	4b50      	ldr	r3, [pc, #320]	; (80057ec <StartTask+0x16fc>)
 80056aa:	4413      	add	r3, r2
 80056ac:	4a50      	ldr	r2, [pc, #320]	; (80057f0 <StartTask+0x1700>)
 80056ae:	8811      	ldrh	r1, [r2, #0]
 80056b0:	7892      	ldrb	r2, [r2, #2]
 80056b2:	8019      	strh	r1, [r3, #0]
 80056b4:	709a      	strb	r2, [r3, #2]
    				bleWrite(bleBuf, 1);
 80056b6:	2101      	movs	r1, #1
 80056b8:	484c      	ldr	r0, [pc, #304]	; (80057ec <StartTask+0x16fc>)
 80056ba:	f7fc fc6d 	bl	8001f98 <bleWrite>
    	}
#endif
    	//
    	//
    	//
    	if (devError) {
 80056be:	4b4d      	ldr	r3, [pc, #308]	; (80057f4 <StartTask+0x1704>)
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d04f      	beq.n	8005766 <StartTask+0x1676>
    		errLedOn(true);
 80056c6:	2001      	movs	r0, #1
 80056c8:	f7fd fc0a 	bl	8002ee0 <errLedOn>
    		HAL_Delay(50);
 80056cc:	2032      	movs	r0, #50	; 0x32
 80056ce:	f002 f9cf 	bl	8007a70 <HAL_Delay>
    		errLedOn(false);
 80056d2:	2000      	movs	r0, #0
 80056d4:	f7fd fc04 	bl	8002ee0 <errLedOn>
    		if (last_devError != devError) {
 80056d8:	4b47      	ldr	r3, [pc, #284]	; (80057f8 <StartTask+0x1708>)
 80056da:	881a      	ldrh	r2, [r3, #0]
 80056dc:	4b45      	ldr	r3, [pc, #276]	; (80057f4 <StartTask+0x1704>)
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d04a      	beq.n	800577a <StartTask+0x168a>
    			last_devError = devError;
 80056e4:	4b43      	ldr	r3, [pc, #268]	; (80057f4 <StartTask+0x1704>)
 80056e6:	881a      	ldrh	r2, [r3, #0]
 80056e8:	4b43      	ldr	r3, [pc, #268]	; (80057f8 <StartTask+0x1708>)
 80056ea:	801a      	strh	r2, [r3, #0]
    			tmp[0] = '\0';
 80056ec:	4b43      	ldr	r3, [pc, #268]	; (80057fc <StartTask+0x170c>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	701a      	strb	r2, [r3, #0]
    			uint16_t er = 0;
 80056f2:	2300      	movs	r3, #0
 80056f4:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    			for (int8_t i = 0; i < MAX_ERR_CODE; i++) {
 80056f8:	2300      	movs	r3, #0
 80056fa:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80056fe:	e025      	b.n	800574c <StartTask+0x165c>
    				er = devError & all_devErr[i];
 8005700:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8005704:	4a3e      	ldr	r2, [pc, #248]	; (8005800 <StartTask+0x1710>)
 8005706:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800570a:	4b3a      	ldr	r3, [pc, #232]	; (80057f4 <StartTask+0x1704>)
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	4013      	ands	r3, r2
 8005710:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    				if (er) sprintf(tmp+strlen(tmp), " '%s'", errName(er));
 8005714:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8005718:	2b00      	cmp	r3, #0
 800571a:	d010      	beq.n	800573e <StartTask+0x164e>
 800571c:	4837      	ldr	r0, [pc, #220]	; (80057fc <StartTask+0x170c>)
 800571e:	f7fa fd57 	bl	80001d0 <strlen>
 8005722:	4603      	mov	r3, r0
 8005724:	4a35      	ldr	r2, [pc, #212]	; (80057fc <StartTask+0x170c>)
 8005726:	189c      	adds	r4, r3, r2
 8005728:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800572c:	4618      	mov	r0, r3
 800572e:	f7fc fc95 	bl	800205c <errName>
 8005732:	4603      	mov	r3, r0
 8005734:	461a      	mov	r2, r3
 8005736:	4933      	ldr	r1, [pc, #204]	; (8005804 <StartTask+0x1714>)
 8005738:	4620      	mov	r0, r4
 800573a:	f00e fd03 	bl	8014144 <siprintf>
    			for (int8_t i = 0; i < MAX_ERR_CODE; i++) {
 800573e:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8005742:	b2db      	uxtb	r3, r3
 8005744:	3301      	adds	r3, #1
 8005746:	b2db      	uxtb	r3, r3
 8005748:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 800574c:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8005750:	2b0b      	cmp	r3, #11
 8005752:	ddd5      	ble.n	8005700 <StartTask+0x1610>
    			}
    			Report(1, "Error 0x%04X %s\r\n", devError, tmp);
 8005754:	4b27      	ldr	r3, [pc, #156]	; (80057f4 <StartTask+0x1704>)
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	4b28      	ldr	r3, [pc, #160]	; (80057fc <StartTask+0x170c>)
 800575c:	492a      	ldr	r1, [pc, #168]	; (8005808 <StartTask+0x1718>)
 800575e:	2001      	movs	r0, #1
 8005760:	f7fd fd62 	bl	8003228 <Report>
 8005764:	e009      	b.n	800577a <StartTask+0x168a>
    		}
    	} else {
    		if (HAL_GPIO_ReadPin(ERR_LED_GPIO_Port, ERR_LED_Pin)) errLedOn(false);
 8005766:	2108      	movs	r1, #8
 8005768:	4828      	ldr	r0, [pc, #160]	; (800580c <StartTask+0x171c>)
 800576a:	f002 feb5 	bl	80084d8 <HAL_GPIO_ReadPin>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <StartTask+0x168a>
 8005774:	2000      	movs	r0, #0
 8005776:	f7fd fbb3 	bl	8002ee0 <errLedOn>
    while (!restart) {
 800577a:	4b25      	ldr	r3, [pc, #148]	; (8005810 <StartTask+0x1720>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	f43e afd1 	beq.w	8004728 <StartTask+0x638>
    	//
    	//
    	//
    }//while (!restart)

    while (!ird_exit);
 8005786:	bf00      	nop
 8005788:	4b22      	ldr	r3, [pc, #136]	; (8005814 <StartTask+0x1724>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	f083 0301 	eor.w	r3, r3, #1
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1f8      	bne.n	8005788 <StartTask+0x1698>

    Report(1, "[que:%u] Stop application...\r\n", cntEvt);
 8005796:	4b20      	ldr	r3, [pc, #128]	; (8005818 <StartTask+0x1728>)
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	b2db      	uxtb	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	491f      	ldr	r1, [pc, #124]	; (800581c <StartTask+0x172c>)
 80057a0:	2001      	movs	r0, #1
 80057a2:	f7fd fd41 	bl	8003228 <Report>

    HAL_Delay(250);
 80057a6:	20fa      	movs	r0, #250	; 0xfa
 80057a8:	f002 f962 	bl	8007a70 <HAL_Delay>


    NVIC_SystemReset();
 80057ac:	f7fc fb92 	bl	8001ed4 <__NVIC_SystemReset>
 80057b0:	20000100 	.word	0x20000100
 80057b4:	200000fc 	.word	0x200000fc
 80057b8:	20001f30 	.word	0x20001f30
 80057bc:	20001f20 	.word	0x20001f20
 80057c0:	20002f3c 	.word	0x20002f3c
 80057c4:	20002f38 	.word	0x20002f38
 80057c8:	10624dd3 	.word	0x10624dd3
 80057cc:	08018230 	.word	0x08018230
 80057d0:	08018244 	.word	0x08018244
 80057d4:	20000e7c 	.word	0x20000e7c
 80057d8:	200035f8 	.word	0x200035f8
 80057dc:	200034f8 	.word	0x200034f8
 80057e0:	08018248 	.word	0x08018248
 80057e4:	20000e78 	.word	0x20000e78
 80057e8:	200035fc 	.word	0x200035fc
 80057ec:	200033f8 	.word	0x200033f8
 80057f0:	080181e0 	.word	0x080181e0
 80057f4:	20001b08 	.word	0x20001b08
 80057f8:	20001b0a 	.word	0x20001b0a
 80057fc:	20001288 	.word	0x20001288
 8005800:	08018f20 	.word	0x08018f20
 8005804:	08018258 	.word	0x08018258
 8005808:	08018260 	.word	0x08018260
 800580c:	48000800 	.word	0x48000800
 8005810:	20001f1c 	.word	0x20001f1c
 8005814:	20000138 	.word	0x20000138
 8005818:	20001f1f 	.word	0x20001f1f
 800581c:	08018274 	.word	0x08018274

08005820 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005820:	b5b0      	push	{r4, r5, r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a79      	ldr	r2, [pc, #484]	; (8005a14 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d102      	bne.n	8005838 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8005832:	f002 f8fd 	bl	8007a30 <HAL_IncTick>
		}
		//
	}
#endif
  /* USER CODE END Callback 1 */
}
 8005836:	e0e8      	b.n	8005a0a <HAL_TIM_PeriodElapsedCallback+0x1ea>
	if (htim->Instance == TIM4) {
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a76      	ldr	r2, [pc, #472]	; (8005a18 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d13a      	bne.n	80058b8 <HAL_TIM_PeriodElapsedCallback+0x98>
		msCounter++;//inc_msCounter();
 8005842:	4b76      	ldr	r3, [pc, #472]	; (8005a1c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8005844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005848:	1c54      	adds	r4, r2, #1
 800584a:	f143 0500 	adc.w	r5, r3, #0
 800584e:	4b73      	ldr	r3, [pc, #460]	; (8005a1c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8005850:	e9c3 4500 	strd	r4, r5, [r3]
		if (!(msCounter % _1s)) {// 1 seconda
 8005854:	4b71      	ldr	r3, [pc, #452]	; (8005a1c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8005856:	e9d3 0100 	ldrd	r0, r1, [r3]
 800585a:	f04f 0264 	mov.w	r2, #100	; 0x64
 800585e:	f04f 0300 	mov.w	r3, #0
 8005862:	f7fb fa61 	bl	8000d28 <__aeabi_uldivmod>
 8005866:	4313      	orrs	r3, r2
 8005868:	f040 80cf 	bne.w	8005a0a <HAL_TIM_PeriodElapsedCallback+0x1ea>
			secCounter++;
 800586c:	4b6c      	ldr	r3, [pc, #432]	; (8005a20 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3301      	adds	r3, #1
 8005872:	4a6b      	ldr	r2, [pc, #428]	; (8005a20 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8005874:	6013      	str	r3, [r2, #0]
		  	HAL_GPIO_TogglePin(TIK_LED_GPIO_Port, TIK_LED_Pin);
 8005876:	2102      	movs	r1, #2
 8005878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800587c:	f002 fe5c 	bl	8008538 <HAL_GPIO_TogglePin>
		  	if (startSec) {
 8005880:	4b68      	ldr	r3, [pc, #416]	; (8005a24 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 80bf 	beq.w	8005a0a <HAL_TIM_PeriodElapsedCallback+0x1ea>
		  		int ev = evt_Sec;
 800588c:	2308      	movs	r3, #8
 800588e:	60bb      	str	r3, [r7, #8]
		  		if (osMessageQueuePut(evtQueHandle, (const void *)&ev, 0, 0) != osOK) devError |= devEVT;
 8005890:	4b65      	ldr	r3, [pc, #404]	; (8005a28 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8005892:	6818      	ldr	r0, [r3, #0]
 8005894:	f107 0108 	add.w	r1, r7, #8
 8005898:	2300      	movs	r3, #0
 800589a:	2200      	movs	r2, #0
 800589c:	f00a fa36 	bl	800fd0c <osMessageQueuePut>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 80b1 	beq.w	8005a0a <HAL_TIM_PeriodElapsedCallback+0x1ea>
 80058a8:	4b60      	ldr	r3, [pc, #384]	; (8005a2c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	f043 0310 	orr.w	r3, r3, #16
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	4b5e      	ldr	r3, [pc, #376]	; (8005a2c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80058b4:	801a      	strh	r2, [r3, #0]
}
 80058b6:	e0a8      	b.n	8005a0a <HAL_TIM_PeriodElapsedCallback+0x1ea>
	if (htim->Instance == TIM6) {
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a5c      	ldr	r2, [pc, #368]	; (8005a30 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	f040 809a 	bne.w	80059f8 <HAL_TIM_PeriodElapsedCallback+0x1d8>
		uint8_t irdata = RECIV_PIN; // пин для приёма
 80058c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058c8:	485a      	ldr	r0, [pc, #360]	; (8005a34 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80058ca:	f002 fe05 	bl	80084d8 <HAL_GPIO_ReadPin>
 80058ce:	4603      	mov	r3, r0
 80058d0:	73fb      	strb	r3, [r7, #15]
		irparams.timer++;  // One more 50uS tick
 80058d2:	4b59      	ldr	r3, [pc, #356]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80058d4:	885b      	ldrh	r3, [r3, #2]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	3301      	adds	r3, #1
 80058da:	b29a      	uxth	r2, r3
 80058dc:	4b56      	ldr	r3, [pc, #344]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80058de:	805a      	strh	r2, [r3, #2]
		if (irparams.rawlen >= RAWBUF) irparams.rcvstate = STATE_OVERFLOW;  // Buffer overflow
 80058e0:	4b55      	ldr	r3, [pc, #340]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80058e2:	785b      	ldrb	r3, [r3, #1]
		switch (irparams.rcvstate) {
 80058e4:	4b54      	ldr	r3, [pc, #336]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	3b02      	subs	r3, #2
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	f200 808c 	bhi.w	8005a0a <HAL_TIM_PeriodElapsedCallback+0x1ea>
 80058f2:	a201      	add	r2, pc, #4	; (adr r2, 80058f8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80058f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f8:	0800590d 	.word	0x0800590d
 80058fc:	08005961 	.word	0x08005961
 8005900:	08005995 	.word	0x08005995
 8005904:	080059db 	.word	0x080059db
 8005908:	080059e9 	.word	0x080059e9
				if (irdata == MARK) {
 800590c:	7bfb      	ldrb	r3, [r7, #15]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d174      	bne.n	80059fc <HAL_TIM_PeriodElapsedCallback+0x1dc>
					if (irparams.timer < GAP_TICKS) { // Not big enough to be a gap.
 8005912:	4b49      	ldr	r3, [pc, #292]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005914:	885b      	ldrh	r3, [r3, #2]
 8005916:	b29b      	uxth	r3, r3
 8005918:	2b63      	cmp	r3, #99	; 0x63
 800591a:	d803      	bhi.n	8005924 <HAL_TIM_PeriodElapsedCallback+0x104>
						irparams.timer = 0;
 800591c:	4b46      	ldr	r3, [pc, #280]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800591e:	2200      	movs	r2, #0
 8005920:	805a      	strh	r2, [r3, #2]
			break;
 8005922:	e06b      	b.n	80059fc <HAL_TIM_PeriodElapsedCallback+0x1dc>
						irparams.overflow = 0;
 8005924:	4b44      	ldr	r3, [pc, #272]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						irparams.rawlen  = 0;
 800592c:	4b42      	ldr	r3, [pc, #264]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800592e:	2200      	movs	r2, #0
 8005930:	705a      	strb	r2, [r3, #1]
						irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8005932:	4b41      	ldr	r3, [pc, #260]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005934:	785b      	ldrb	r3, [r3, #1]
 8005936:	b2db      	uxtb	r3, r3
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	b2d1      	uxtb	r1, r2
 800593c:	4a3e      	ldr	r2, [pc, #248]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800593e:	7051      	strb	r1, [r2, #1]
 8005940:	4618      	mov	r0, r3
 8005942:	4b3d      	ldr	r3, [pc, #244]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005944:	885b      	ldrh	r3, [r3, #2]
 8005946:	b299      	uxth	r1, r3
 8005948:	4a3b      	ldr	r2, [pc, #236]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800594a:	0043      	lsls	r3, r0, #1
 800594c:	4413      	add	r3, r2
 800594e:	460a      	mov	r2, r1
 8005950:	809a      	strh	r2, [r3, #4]
						irparams.timer = 0;
 8005952:	4b39      	ldr	r3, [pc, #228]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005954:	2200      	movs	r2, #0
 8005956:	805a      	strh	r2, [r3, #2]
						irparams.rcvstate = STATE_MARK;
 8005958:	4b37      	ldr	r3, [pc, #220]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800595a:	2203      	movs	r2, #3
 800595c:	701a      	strb	r2, [r3, #0]
			break;
 800595e:	e04d      	b.n	80059fc <HAL_TIM_PeriodElapsedCallback+0x1dc>
				if (irdata == SPACE) {// Mark ended; Record time
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d14c      	bne.n	8005a00 <HAL_TIM_PeriodElapsedCallback+0x1e0>
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8005966:	4b34      	ldr	r3, [pc, #208]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005968:	785b      	ldrb	r3, [r3, #1]
 800596a:	b2db      	uxtb	r3, r3
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	b2d1      	uxtb	r1, r2
 8005970:	4a31      	ldr	r2, [pc, #196]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005972:	7051      	strb	r1, [r2, #1]
 8005974:	4618      	mov	r0, r3
 8005976:	4b30      	ldr	r3, [pc, #192]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005978:	885b      	ldrh	r3, [r3, #2]
 800597a:	b299      	uxth	r1, r3
 800597c:	4a2e      	ldr	r2, [pc, #184]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800597e:	0043      	lsls	r3, r0, #1
 8005980:	4413      	add	r3, r2
 8005982:	460a      	mov	r2, r1
 8005984:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 8005986:	4b2c      	ldr	r3, [pc, #176]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005988:	2200      	movs	r2, #0
 800598a:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_SPACE;
 800598c:	4b2a      	ldr	r3, [pc, #168]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800598e:	2204      	movs	r2, #4
 8005990:	701a      	strb	r2, [r3, #0]
			break;
 8005992:	e035      	b.n	8005a00 <HAL_TIM_PeriodElapsedCallback+0x1e0>
				if (irdata == MARK) {// Space just ended; Record time
 8005994:	7bfb      	ldrb	r3, [r7, #15]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d116      	bne.n	80059c8 <HAL_TIM_PeriodElapsedCallback+0x1a8>
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 800599a:	4b27      	ldr	r3, [pc, #156]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800599c:	785b      	ldrb	r3, [r3, #1]
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	b2d1      	uxtb	r1, r2
 80059a4:	4a24      	ldr	r2, [pc, #144]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80059a6:	7051      	strb	r1, [r2, #1]
 80059a8:	4618      	mov	r0, r3
 80059aa:	4b23      	ldr	r3, [pc, #140]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80059ac:	885b      	ldrh	r3, [r3, #2]
 80059ae:	b299      	uxth	r1, r3
 80059b0:	4a21      	ldr	r2, [pc, #132]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80059b2:	0043      	lsls	r3, r0, #1
 80059b4:	4413      	add	r3, r2
 80059b6:	460a      	mov	r2, r1
 80059b8:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 80059ba:	4b1f      	ldr	r3, [pc, #124]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80059bc:	2200      	movs	r2, #0
 80059be:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_MARK;
 80059c0:	4b1d      	ldr	r3, [pc, #116]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80059c2:	2203      	movs	r2, #3
 80059c4:	701a      	strb	r2, [r3, #0]
			break;
 80059c6:	e01d      	b.n	8005a04 <HAL_TIM_PeriodElapsedCallback+0x1e4>
				} else if (irparams.timer > GAP_TICKS) {// Space
 80059c8:	4b1b      	ldr	r3, [pc, #108]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80059ca:	885b      	ldrh	r3, [r3, #2]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b64      	cmp	r3, #100	; 0x64
 80059d0:	d918      	bls.n	8005a04 <HAL_TIM_PeriodElapsedCallback+0x1e4>
					irparams.rcvstate = STATE_STOP;
 80059d2:	4b19      	ldr	r3, [pc, #100]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80059d4:	2205      	movs	r2, #5
 80059d6:	701a      	strb	r2, [r3, #0]
			break;
 80059d8:	e014      	b.n	8005a04 <HAL_TIM_PeriodElapsedCallback+0x1e4>
			 	if (irdata == MARK) irparams.timer = 0;  // Reset gap timer
 80059da:	7bfb      	ldrb	r3, [r7, #15]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d113      	bne.n	8005a08 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 80059e0:	4b15      	ldr	r3, [pc, #84]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	805a      	strh	r2, [r3, #2]
			break;
 80059e6:	e00f      	b.n	8005a08 <HAL_TIM_PeriodElapsedCallback+0x1e8>
				irparams.overflow = 1;
 80059e8:	4b13      	ldr	r3, [pc, #76]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				irparams.rcvstate = STATE_STOP;
 80059f0:	4b11      	ldr	r3, [pc, #68]	; (8005a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80059f2:	2205      	movs	r2, #5
 80059f4:	701a      	strb	r2, [r3, #0]
			break;
 80059f6:	e008      	b.n	8005a0a <HAL_TIM_PeriodElapsedCallback+0x1ea>
	}
 80059f8:	bf00      	nop
 80059fa:	e006      	b.n	8005a0a <HAL_TIM_PeriodElapsedCallback+0x1ea>
			break;
 80059fc:	bf00      	nop
 80059fe:	e004      	b.n	8005a0a <HAL_TIM_PeriodElapsedCallback+0x1ea>
			break;
 8005a00:	bf00      	nop
 8005a02:	e002      	b.n	8005a0a <HAL_TIM_PeriodElapsedCallback+0x1ea>
			break;
 8005a04:	bf00      	nop
 8005a06:	e000      	b.n	8005a0a <HAL_TIM_PeriodElapsedCallback+0x1ea>
			break;
 8005a08:	bf00      	nop
}
 8005a0a:	bf00      	nop
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bdb0      	pop	{r4, r5, r7, pc}
 8005a12:	bf00      	nop
 8005a14:	40012c00 	.word	0x40012c00
 8005a18:	40000800 	.word	0x40000800
 8005a1c:	20001b10 	.word	0x20001b10
 8005a20:	20001b0c 	.word	0x20001b0c
 8005a24:	20002f44 	.word	0x20002f44
 8005a28:	20000e74 	.word	0x20000e74
 8005a2c:	20001b08 	.word	0x20001b08
 8005a30:	40001000 	.word	0x40001000
 8005a34:	48000800 	.word	0x48000800
 8005a38:	2000037c 	.word	0x2000037c

08005a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005a40:	b672      	cpsid	i
}
 8005a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  devError |= devSYS;
 8005a44:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <Error_Handler+0x20>)
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	f043 0320 	orr.w	r3, r3, #32
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	4b03      	ldr	r3, [pc, #12]	; (8005a5c <Error_Handler+0x20>)
 8005a50:	801a      	strh	r2, [r3, #0]
	  errLedOn(true);
 8005a52:	2001      	movs	r0, #1
 8005a54:	f7fd fa44 	bl	8002ee0 <errLedOn>
	  devError |= devSYS;
 8005a58:	e7f4      	b.n	8005a44 <Error_Handler+0x8>
 8005a5a:	bf00      	nop
 8005a5c:	20001b08 	.word	0x20001b08

08005a60 <rda5807_init>:

//==============================================================================
// Инициализация rda5807
//==============================================================================
uint8_t rda5807_init(float *freq)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b088      	sub	sp, #32
 8005a64:	af04      	add	r7, sp, #16
 8005a66:	6078      	str	r0, [r7, #4]
uint8_t buf[2] = {0, 0};
 8005a68:	2300      	movs	r3, #0
 8005a6a:	813b      	strh	r3, [r7, #8]
uint8_t *id = &buf[0];
 8005a6c:	f107 0308 	add.w	r3, r7, #8
 8005a70:	60fb      	str	r3, [r7, #12]

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr, 0, I2C_MEMADD_SIZE_8BIT, buf, 2, RDA5807_TO) != HAL_OK) {
 8005a72:	4b30      	ldr	r3, [pc, #192]	; (8005b34 <rda5807_init+0xd4>)
 8005a74:	6818      	ldr	r0, [r3, #0]
 8005a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a7a:	9302      	str	r3, [sp, #8]
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	9301      	str	r3, [sp, #4]
 8005a80:	f107 0308 	add.w	r3, r7, #8
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	2301      	movs	r3, #1
 8005a88:	2200      	movs	r2, #0
 8005a8a:	2122      	movs	r1, #34	; 0x22
 8005a8c:	f003 f81e 	bl	8008acc <HAL_I2C_Mem_Read>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d13c      	bne.n	8005b10 <rda5807_init+0xb0>
    stx[0] = '\0';
    for (int i = 0; i < 64; i++) sprintf(stx+strlen(stx)," %02x", buf11[i]);
    Report(1, "[%s] %s\r\n", __func__, stx);
#endif

    rda5807_SoftReset();
 8005a96:	f000 f927 	bl	8005ce8 <rda5807_SoftReset>
    if (devError & devRDA) goto err_out;
 8005a9a:	4b27      	ldr	r3, [pc, #156]	; (8005b38 <rda5807_init+0xd8>)
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d136      	bne.n	8005b14 <rda5807_init+0xb4>

    rda5807_SetupDefault();
 8005aa6:	f000 f949 	bl	8005d3c <rda5807_SetupDefault>
    if (devError & devRDA) goto err_out;
 8005aaa:	4b23      	ldr	r3, [pc, #140]	; (8005b38 <rda5807_init+0xd8>)
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d130      	bne.n	8005b18 <rda5807_init+0xb8>

    uint16_t fr = (uint16_t)(*freq * 10);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	edd3 7a00 	vldr	s15, [r3]
 8005abc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005ac0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ac8:	ee17 3a90 	vmov	r3, s15
 8005acc:	817b      	strh	r3, [r7, #10]
    rda5807_SetFreq_In100Khz(fr);
 8005ace:	897b      	ldrh	r3, [r7, #10]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fa79 	bl	8005fc8 <rda5807_SetFreq_In100Khz>
    //
    HAL_Delay(200);
 8005ad6:	20c8      	movs	r0, #200	; 0xc8
 8005ad8:	f001 ffca 	bl	8007a70 <HAL_Delay>
    //
    *freq = (float)rda5807_GetFreq_In100Khz();
 8005adc:	f000 faee 	bl	80060bc <rda5807_GetFreq_In100Khz>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	ee07 3a90 	vmov	s15, r3
 8005ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	edc3 7a00 	vstr	s15, [r3]
    *freq /= 10;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	ed93 7a00 	vldr	s14, [r3]
 8005af6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005afa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	edc3 7a00 	vstr	s15, [r3]
#ifdef SET_RDA_DEBUG
    Report(1, "[%s] Freq: %.2f\r\n", __func__, *freq);//rda5807_GetFreq_In100Khz());
#endif

    HAL_Delay(100);
 8005b04:	2064      	movs	r0, #100	; 0x64
 8005b06:	f001 ffb3 	bl	8007a70 <HAL_Delay>

    return *id;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	e00d      	b.n	8005b2c <rda5807_init+0xcc>
    	goto err_out;
 8005b10:	bf00      	nop
 8005b12:	e002      	b.n	8005b1a <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 8005b14:	bf00      	nop
 8005b16:	e000      	b.n	8005b1a <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 8005b18:	bf00      	nop

err_out:
	devError |= devRDA;
 8005b1a:	4b07      	ldr	r3, [pc, #28]	; (8005b38 <rda5807_init+0xd8>)
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	4b04      	ldr	r3, [pc, #16]	; (8005b38 <rda5807_init+0xd8>)
 8005b26:	801a      	strh	r2, [r3, #0]
    return *id;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	2000013c 	.word	0x2000013c
 8005b38:	20001b08 	.word	0x20001b08

08005b3c <rda5807_rssi>:
//==============================================================================
uint16_t rda5807_rssi()
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
uint16_t word = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	80fb      	strh	r3, [r7, #6]

    rda5807_read(0x0B, &word, 1);
 8005b46:	1dbb      	adds	r3, r7, #6
 8005b48:	2201      	movs	r2, #1
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	200b      	movs	r0, #11
 8005b4e:	f000 f85d 	bl	8005c0c <rda5807_read>

    return (word >> 9);
 8005b52:	88fb      	ldrh	r3, [r7, #6]
 8005b54:	0a5b      	lsrs	r3, r3, #9
 8005b56:	b29b      	uxth	r3, r3
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <rda5807_bytes_change>:

//==============================================================================
// Процедура меняет местами байты попарно в буфере pBuff 
//==============================================================================
void rda5807_bytes_change(uint8_t *pBuff, uint8_t count)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 8005b6c:	e010      	b.n	8005b90 <rda5807_bytes_change+0x30>
        uint8_t Temp = *(pBuff + 1);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	785b      	ldrb	r3, [r3, #1]
 8005b72:	73fb      	strb	r3, [r7, #15]
        *(pBuff + 1) = *pBuff;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3301      	adds	r3, #1
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	7812      	ldrb	r2, [r2, #0]
 8005b7c:	701a      	strb	r2, [r3, #0]
        *pBuff = Temp;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	7bfa      	ldrb	r2, [r7, #15]
 8005b82:	701a      	strb	r2, [r3, #0]
        pBuff += 2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3302      	adds	r3, #2
 8005b88:	607b      	str	r3, [r7, #4]
        count -= 2;
 8005b8a:	78fb      	ldrb	r3, [r7, #3]
 8005b8c:	3b02      	subs	r3, #2
 8005b8e:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 8005b90:	78fb      	ldrb	r3, [r7, #3]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d8eb      	bhi.n	8005b6e <rda5807_bytes_change+0xe>
    }
}
 8005b96:	bf00      	nop
 8005b98:	bf00      	nop
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <rda5807_write_regfile>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с 0x02
// Используется I2C-адрес RDA5807_SeqAccess_Addr
//==============================================================================
void rda5807_write_regfile(uint16_t *pBuff, uint8_t RegNum)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af02      	add	r7, sp, #8
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	70fb      	strb	r3, [r7, #3]
    err = i2cm_Start(I2Cx, RDA5807_SeqAccess_Addr, 0, RDA5807_TO);
    if (err) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7ff ffd1 	bl	8005b60 <rda5807_bytes_change>

//    err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
//    i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Master_Transmit(i2cRDA, (uint16_t)RDA5807_SeqAccess_Addr, (uint8_t *)pBuff, RegNum << 1, RDA5807_TO) != HAL_OK) {
 8005bbe:	4b11      	ldr	r3, [pc, #68]	; (8005c04 <rda5807_write_regfile+0x60>)
 8005bc0:	6818      	ldr	r0, [r3, #0]
 8005bc2:	78fb      	ldrb	r3, [r7, #3]
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	005b      	lsls	r3, r3, #1
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bce:	9200      	str	r2, [sp, #0]
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	2120      	movs	r1, #32
 8005bd4:	f002 fd72 	bl	80086bc <HAL_I2C_Master_Transmit>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d006      	beq.n	8005bec <rda5807_write_regfile+0x48>
    	devError |= devRDA;
 8005bde:	4b0a      	ldr	r3, [pc, #40]	; (8005c08 <rda5807_write_regfile+0x64>)
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <rda5807_write_regfile+0x64>)
 8005bea:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005bec:	78fb      	ldrb	r3, [r7, #3]
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7ff ffb3 	bl	8005b60 <rda5807_bytes_change>
}
 8005bfa:	bf00      	nop
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	2000013c 	.word	0x2000013c
 8005c08:	20001b08 	.word	0x20001b08

08005c0c <rda5807_read>:
//==============================================================================
// Процедура читает из rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_read(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af04      	add	r7, sp, #16
 8005c12:	4603      	mov	r3, r0
 8005c14:	6039      	str	r1, [r7, #0]
 8005c16:	71fb      	strb	r3, [r7, #7]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	71bb      	strb	r3, [r7, #6]
        Error_Handler();
    }
    // Читаем
    i2cm_ReadBuffAndStop(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO); //*/

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr,
 8005c1c:	4b13      	ldr	r3, [pc, #76]	; (8005c6c <rda5807_read+0x60>)
 8005c1e:	6818      	ldr	r0, [r3, #0]
 8005c20:	79fb      	ldrb	r3, [r7, #7]
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	79bb      	ldrb	r3, [r7, #6]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c30:	9102      	str	r1, [sp, #8]
 8005c32:	9301      	str	r3, [sp, #4]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	2301      	movs	r3, #1
 8005c3a:	2122      	movs	r1, #34	; 0x22
 8005c3c:	f002 ff46 	bl	8008acc <HAL_I2C_Mem_Read>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d006      	beq.n	8005c54 <rda5807_read+0x48>
    				     RegAddr, I2C_MEMADD_SIZE_8BIT,
						 (uint8_t *)pBuff, RegNum << 1,
						 RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 8005c46:	4b0a      	ldr	r3, [pc, #40]	; (8005c70 <rda5807_read+0x64>)
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	4b07      	ldr	r3, [pc, #28]	; (8005c70 <rda5807_read+0x64>)
 8005c52:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005c54:	79bb      	ldrb	r3, [r7, #6]
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6838      	ldr	r0, [r7, #0]
 8005c5e:	f7ff ff7f 	bl	8005b60 <rda5807_bytes_change>
}
 8005c62:	bf00      	nop
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	2000013c 	.word	0x2000013c
 8005c70:	20001b08 	.word	0x20001b08

08005c74 <rda5807_write>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_write(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af04      	add	r7, sp, #16
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	6039      	str	r1, [r7, #0]
 8005c7e:	71fb      	strb	r3, [r7, #7]
 8005c80:	4613      	mov	r3, r2
 8005c82:	71bb      	strb	r3, [r7, #6]

    if (i2cm_WriteBuff(I2Cx, &RegAddr, 1, RDA5807_TO)) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005c84:	79bb      	ldrb	r3, [r7, #6]
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	6838      	ldr	r0, [r7, #0]
 8005c8e:	f7ff ff67 	bl	8005b60 <rda5807_bytes_change>

    //err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
    //i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Mem_Write(i2cRDA,
 8005c92:	4b13      	ldr	r3, [pc, #76]	; (8005ce0 <rda5807_write+0x6c>)
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	79fb      	ldrb	r3, [r7, #7]
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	79bb      	ldrb	r3, [r7, #6]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005ca6:	9102      	str	r1, [sp, #8]
 8005ca8:	9301      	str	r3, [sp, #4]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	2301      	movs	r3, #1
 8005cb0:	2122      	movs	r1, #34	; 0x22
 8005cb2:	f002 fdf7 	bl	80088a4 <HAL_I2C_Mem_Write>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d006      	beq.n	8005cca <rda5807_write+0x56>
    					  RDA5807_RandAccess_Addr,
						  RegAddr, I2C_MEMADD_SIZE_8BIT,
						  (uint8_t *)pBuff, RegNum << 1,
						  RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 8005cbc:	4b09      	ldr	r3, [pc, #36]	; (8005ce4 <rda5807_write+0x70>)
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	4b07      	ldr	r3, [pc, #28]	; (8005ce4 <rda5807_write+0x70>)
 8005cc8:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8005cca:	79bb      	ldrb	r3, [r7, #6]
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	6838      	ldr	r0, [r7, #0]
 8005cd4:	f7ff ff44 	bl	8005b60 <rda5807_bytes_change>
}
 8005cd8:	bf00      	nop
 8005cda:	3708      	adds	r7, #8
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	2000013c 	.word	0x2000013c
 8005ce4:	20001b08 	.word	0x20001b08

08005ce8 <rda5807_SoftReset>:

//==============================================================================
// Процедура делает программный сброс rda5807
//==============================================================================
void rda5807_SoftReset()
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
tReg02h reg02;

    rda5807_read(2, (uint16_t *)&reg02, 1);
 8005cee:	1d3b      	adds	r3, r7, #4
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	2002      	movs	r0, #2
 8005cf6:	f7ff ff89 	bl	8005c0c <rda5807_read>

	reg02.bENABLE = 1;
 8005cfa:	793b      	ldrb	r3, [r7, #4]
 8005cfc:	f043 0301 	orr.w	r3, r3, #1
 8005d00:	713b      	strb	r3, [r7, #4]
	reg02.bSOFT_RESET = 1;
 8005d02:	793b      	ldrb	r3, [r7, #4]
 8005d04:	f043 0302 	orr.w	r3, r3, #2
 8005d08:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 8005d0a:	1d3b      	adds	r3, r7, #4
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	4619      	mov	r1, r3
 8005d10:	2002      	movs	r0, #2
 8005d12:	f7ff ffaf 	bl	8005c74 <rda5807_write>

    reg02.bENABLE = 1;
 8005d16:	793b      	ldrb	r3, [r7, #4]
 8005d18:	f043 0301 	orr.w	r3, r3, #1
 8005d1c:	713b      	strb	r3, [r7, #4]
    reg02.bSOFT_RESET = 0;
 8005d1e:	793b      	ldrb	r3, [r7, #4]
 8005d20:	f36f 0341 	bfc	r3, #1, #1
 8005d24:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 8005d26:	1d3b      	adds	r3, r7, #4
 8005d28:	2201      	movs	r2, #1
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	2002      	movs	r0, #2
 8005d2e:	f7ff ffa1 	bl	8005c74 <rda5807_write>
}
 8005d32:	bf00      	nop
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
	...

08005d3c <rda5807_SetupDefault>:

//==============================================================================
// Процедура производит начальную настройку rda5807
//==============================================================================
void rda5807_SetupDefault()
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	af00      	add	r7, sp, #0
	tReg06h Reg06;
	tReg07h Reg07;
} Buffs;*/

    // Регистр 0x02
    Buffs.Reg02.bENABLE = 1;
 8005d40:	4a6b      	ldr	r2, [pc, #428]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005d42:	7813      	ldrb	r3, [r2, #0]
 8005d44:	f043 0301 	orr.w	r3, r3, #1
 8005d48:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSOFT_RESET = 0;
 8005d4a:	4a69      	ldr	r2, [pc, #420]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005d4c:	7813      	ldrb	r3, [r2, #0]
 8005d4e:	f36f 0341 	bfc	r3, #1, #1
 8005d52:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bNEW_METHOD = 1;
 8005d54:	4a66      	ldr	r2, [pc, #408]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005d56:	7813      	ldrb	r3, [r2, #0]
 8005d58:	f043 0304 	orr.w	r3, r3, #4
 8005d5c:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bRDS_EN = 1;
 8005d5e:	4a64      	ldr	r2, [pc, #400]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005d60:	7813      	ldrb	r3, [r2, #0]
 8005d62:	f043 0308 	orr.w	r3, r3, #8
 8005d66:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bCLK_MODE = 0;        // 32.768
 8005d68:	4a61      	ldr	r2, [pc, #388]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005d6a:	7813      	ldrb	r3, [r2, #0]
 8005d6c:	f36f 1306 	bfc	r3, #4, #3
 8005d70:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSKMODE = 0;
 8005d72:	4a5f      	ldr	r2, [pc, #380]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005d74:	7813      	ldrb	r3, [r2, #0]
 8005d76:	f36f 13c7 	bfc	r3, #7, #1
 8005d7a:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 0;
 8005d7c:	4a5c      	ldr	r2, [pc, #368]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005d7e:	7853      	ldrb	r3, [r2, #1]
 8005d80:	f36f 0300 	bfc	r3, #0, #1
 8005d84:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = 1;
 8005d86:	4a5a      	ldr	r2, [pc, #360]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005d88:	7853      	ldrb	r3, [r2, #1]
 8005d8a:	f043 0302 	orr.w	r3, r3, #2
 8005d8e:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_DirectInput = 0;
 8005d90:	4a57      	ldr	r2, [pc, #348]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005d92:	7853      	ldrb	r3, [r2, #1]
 8005d94:	f36f 0382 	bfc	r3, #2, #1
 8005d98:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_NonCalibMode = 0;
 8005d9a:	4a55      	ldr	r2, [pc, #340]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005d9c:	7853      	ldrb	r3, [r2, #1]
 8005d9e:	f36f 03c3 	bfc	r3, #3, #1
 8005da2:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bBASS = 0;
 8005da4:	4a52      	ldr	r2, [pc, #328]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005da6:	7853      	ldrb	r3, [r2, #1]
 8005da8:	f36f 1304 	bfc	r3, #4, #1
 8005dac:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bMONO = 0;
 8005dae:	4a50      	ldr	r2, [pc, #320]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005db0:	7853      	ldrb	r3, [r2, #1]
 8005db2:	f36f 1345 	bfc	r3, #5, #1
 8005db6:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDMUTE = 1;
 8005db8:	4a4d      	ldr	r2, [pc, #308]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005dba:	7853      	ldrb	r3, [r2, #1]
 8005dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dc0:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDHIZ = 1;
 8005dc2:	4a4b      	ldr	r2, [pc, #300]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005dc4:	7853      	ldrb	r3, [r2, #1]
 8005dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dca:	7053      	strb	r3, [r2, #1]
    // Регистр 0x03
    Buffs.Reg03.bSPACE = 0;//Step;//0;   // Шаг настройки - 0 = 100 КГц
 8005dcc:	4a48      	ldr	r2, [pc, #288]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005dce:	7893      	ldrb	r3, [r2, #2]
 8005dd0:	f36f 0301 	bfc	r3, #0, #2
 8005dd4:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bBAND = Band;//2;//0;    // Диапазон 2 - 76–108 MHz
 8005dd6:	4b47      	ldr	r3, [pc, #284]	; (8005ef4 <rda5807_SetupDefault+0x1b8>)
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	b2d9      	uxtb	r1, r3
 8005de0:	4a43      	ldr	r2, [pc, #268]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005de2:	7893      	ldrb	r3, [r2, #2]
 8005de4:	f361 0383 	bfi	r3, r1, #2, #2
 8005de8:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bTUNE = 1;
 8005dea:	4a41      	ldr	r2, [pc, #260]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005dec:	7893      	ldrb	r3, [r2, #2]
 8005dee:	f043 0310 	orr.w	r3, r3, #16
 8005df2:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bDIRECT_MODE = 0;
 8005df4:	4a3e      	ldr	r2, [pc, #248]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005df6:	7893      	ldrb	r3, [r2, #2]
 8005df8:	f36f 1345 	bfc	r3, #5, #1
 8005dfc:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bCHAN = 0;
 8005dfe:	4a3c      	ldr	r2, [pc, #240]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005e00:	8853      	ldrh	r3, [r2, #2]
 8005e02:	f36f 138f 	bfc	r3, #6, #10
 8005e06:	8053      	strh	r3, [r2, #2]
    // Регистр 0x04
    Buffs.Reg04.bRSVD1 = 0;
 8005e08:	4b39      	ldr	r3, [pc, #228]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	711a      	strb	r2, [r3, #4]
    Buffs.Reg04.bAFCD = 0;
 8005e0e:	4a38      	ldr	r2, [pc, #224]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005e10:	7953      	ldrb	r3, [r2, #5]
 8005e12:	f36f 0300 	bfc	r3, #0, #1
 8005e16:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bSOFTMUTE_EN = 1;
 8005e18:	4a35      	ldr	r2, [pc, #212]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005e1a:	7953      	ldrb	r3, [r2, #5]
 8005e1c:	f043 0302 	orr.w	r3, r3, #2
 8005e20:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD2 = 0;
 8005e22:	4a33      	ldr	r2, [pc, #204]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005e24:	7953      	ldrb	r3, [r2, #5]
 8005e26:	f36f 0382 	bfc	r3, #2, #1
 8005e2a:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bDE = 0;
 8005e2c:	4a30      	ldr	r2, [pc, #192]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005e2e:	7953      	ldrb	r3, [r2, #5]
 8005e30:	f36f 03c3 	bfc	r3, #3, #1
 8005e34:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD3 = 0;
 8005e36:	4a2e      	ldr	r2, [pc, #184]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005e38:	7953      	ldrb	r3, [r2, #5]
 8005e3a:	f36f 1307 	bfc	r3, #4, #4
 8005e3e:	7153      	strb	r3, [r2, #5]
    // Регистр 0x05
    Buffs.Reg05.bVOLUME = 0;
 8005e40:	4a2b      	ldr	r2, [pc, #172]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005e42:	7993      	ldrb	r3, [r2, #6]
 8005e44:	f36f 0303 	bfc	r3, #0, #4
 8005e48:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_GAIN = 0;
 8005e4a:	4a29      	ldr	r2, [pc, #164]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005e4c:	7993      	ldrb	r3, [r2, #6]
 8005e4e:	f36f 1305 	bfc	r3, #4, #2
 8005e52:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_TYPE = ANT_TYPE_Both;//ANT_TYPE_External;//ANT_TYPE_Headphones;//ANT_TYPE_Both;
 8005e54:	4a26      	ldr	r2, [pc, #152]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005e56:	7993      	ldrb	r3, [r2, #6]
 8005e58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e5c:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bSEEKTH = 8;
 8005e5e:	4a24      	ldr	r2, [pc, #144]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005e60:	79d3      	ldrb	r3, [r2, #7]
 8005e62:	2108      	movs	r1, #8
 8005e64:	f361 0303 	bfi	r3, r1, #0, #4
 8005e68:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bRSVD3 = 0;
 8005e6a:	4a21      	ldr	r2, [pc, #132]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005e6c:	79d3      	ldrb	r3, [r2, #7]
 8005e6e:	f36f 1306 	bfc	r3, #4, #3
 8005e72:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bINT_MODE = 1;
 8005e74:	4a1e      	ldr	r2, [pc, #120]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005e76:	79d3      	ldrb	r3, [r2, #7]
 8005e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e7c:	71d3      	strb	r3, [r2, #7]
    // Регистр 0x06
    Buffs.Reg06.bRSVD1 = 0;
 8005e7e:	4a1c      	ldr	r2, [pc, #112]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005e80:	8913      	ldrh	r3, [r2, #8]
 8005e82:	f36f 030c 	bfc	r3, #0, #13
 8005e86:	8113      	strh	r3, [r2, #8]
    Buffs.Reg06.bOPEN_MODE = 0;
 8005e88:	4a19      	ldr	r2, [pc, #100]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005e8a:	7a53      	ldrb	r3, [r2, #9]
 8005e8c:	f36f 1346 	bfc	r3, #5, #2
 8005e90:	7253      	strb	r3, [r2, #9]
    Buffs.Reg06.bRSVD2 = 0;
 8005e92:	4a17      	ldr	r2, [pc, #92]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005e94:	7a53      	ldrb	r3, [r2, #9]
 8005e96:	f36f 13c7 	bfc	r3, #7, #1
 8005e9a:	7253      	strb	r3, [r2, #9]
    // Регистр 0x07
    Buffs.Reg07.bFREQ_MODE = 0;
 8005e9c:	4a14      	ldr	r2, [pc, #80]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005e9e:	7a93      	ldrb	r3, [r2, #10]
 8005ea0:	f36f 0300 	bfc	r3, #0, #1
 8005ea4:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSOFTBLEND_EN = 1;
 8005ea6:	4a12      	ldr	r2, [pc, #72]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005ea8:	7a93      	ldrb	r3, [r2, #10]
 8005eaa:	f043 0302 	orr.w	r3, r3, #2
 8005eae:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSEEK_TH_OLD = 0;
 8005eb0:	4a0f      	ldr	r2, [pc, #60]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005eb2:	7a93      	ldrb	r3, [r2, #10]
 8005eb4:	f36f 0387 	bfc	r3, #2, #6
 8005eb8:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bRSVD1 = 0;
 8005eba:	4a0d      	ldr	r2, [pc, #52]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005ebc:	7ad3      	ldrb	r3, [r2, #11]
 8005ebe:	f36f 0300 	bfc	r3, #0, #1
 8005ec2:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.b65M_50M_MODE = 1;
 8005ec4:	4a0a      	ldr	r2, [pc, #40]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005ec6:	7ad3      	ldrb	r3, [r2, #11]
 8005ec8:	f043 0302 	orr.w	r3, r3, #2
 8005ecc:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bTH_SOFRBLEND = 16;
 8005ece:	4a08      	ldr	r2, [pc, #32]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005ed0:	7ad3      	ldrb	r3, [r2, #11]
 8005ed2:	2110      	movs	r1, #16
 8005ed4:	f361 0386 	bfi	r3, r1, #2, #5
 8005ed8:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bRSVD2 = 0;
 8005eda:	4a05      	ldr	r2, [pc, #20]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005edc:	7ad3      	ldrb	r3, [r2, #11]
 8005ede:	f36f 13c7 	bfc	r3, #7, #1
 8005ee2:	72d3      	strb	r3, [r2, #11]

    // Пишем регистры функцией записи регистрового файла
    rda5807_write_regfile((uint16_t *)&(Buffs.Reg02), 6);
 8005ee4:	2106      	movs	r1, #6
 8005ee6:	4802      	ldr	r0, [pc, #8]	; (8005ef0 <rda5807_SetupDefault+0x1b4>)
 8005ee8:	f7ff fe5c 	bl	8005ba4 <rda5807_write_regfile>
}
 8005eec:	bf00      	nop
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20003630 	.word	0x20003630
 8005ef4:	20000110 	.word	0x20000110

08005ef8 <rda5807_SetVolume>:

//==============================================================================
// Процедура устанавливает уровень громкости (0..16) выхода rda5807. При Value=0 включает MUTE
//==============================================================================
void rda5807_SetVolume(uint8_t Value)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	4603      	mov	r3, r0
 8005f00:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;
//tReg05h Reg05;
uint8_t Mute = Value ? 0 : 1;
 8005f02:	79fb      	ldrb	r3, [r7, #7]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	bf0c      	ite	eq
 8005f08:	2301      	moveq	r3, #1
 8005f0a:	2300      	movne	r3, #0
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	73fb      	strb	r3, [r7, #15]

    if (Value > 16) Value = 16;
 8005f10:	79fb      	ldrb	r3, [r7, #7]
 8005f12:	2b10      	cmp	r3, #16
 8005f14:	d901      	bls.n	8005f1a <rda5807_SetVolume+0x22>
 8005f16:	2310      	movs	r3, #16
 8005f18:	71fb      	strb	r3, [r7, #7]

    Value--;    // Значение для поля Volume на 1 меньше, чем входной параметр функции
 8005f1a:	79fb      	ldrb	r3, [r7, #7]
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	71fb      	strb	r3, [r7, #7]

    if (!Mute) {
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d112      	bne.n	8005f4c <rda5807_SetVolume+0x54>
        // Читаем регистр 0x05
        rda5807_read(5, (uint16_t *)&Buffs.Reg05, 1);
 8005f26:	2201      	movs	r2, #1
 8005f28:	4915      	ldr	r1, [pc, #84]	; (8005f80 <rda5807_SetVolume+0x88>)
 8005f2a:	2005      	movs	r0, #5
 8005f2c:	f7ff fe6e 	bl	8005c0c <rda5807_read>
        // Меняем значение поля VOLUME
        Buffs.Reg05.bVOLUME = Value;
 8005f30:	79fb      	ldrb	r3, [r7, #7]
 8005f32:	f003 030f 	and.w	r3, r3, #15
 8005f36:	b2d9      	uxtb	r1, r3
 8005f38:	4a12      	ldr	r2, [pc, #72]	; (8005f84 <rda5807_SetVolume+0x8c>)
 8005f3a:	7993      	ldrb	r3, [r2, #6]
 8005f3c:	f361 0303 	bfi	r3, r1, #0, #4
 8005f40:	7193      	strb	r3, [r2, #6]
        // Пишем регистр 0x05
        rda5807_write(5, (uint16_t *)&Buffs.Reg05, 1);
 8005f42:	2201      	movs	r2, #1
 8005f44:	490e      	ldr	r1, [pc, #56]	; (8005f80 <rda5807_SetVolume+0x88>)
 8005f46:	2005      	movs	r0, #5
 8005f48:	f7ff fe94 	bl	8005c74 <rda5807_write>
    }

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	490d      	ldr	r1, [pc, #52]	; (8005f84 <rda5807_SetVolume+0x8c>)
 8005f50:	2002      	movs	r0, #2
 8005f52:	f7ff fe5b 	bl	8005c0c <rda5807_read>
    // Меняем значение поля VOLUME
    Buffs.Reg02.bDMUTE = Mute ? 0 : 1;
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	bf0c      	ite	eq
 8005f5c:	2301      	moveq	r3, #1
 8005f5e:	2300      	movne	r3, #0
 8005f60:	b2d9      	uxtb	r1, r3
 8005f62:	4a08      	ldr	r2, [pc, #32]	; (8005f84 <rda5807_SetVolume+0x8c>)
 8005f64:	7853      	ldrb	r3, [r2, #1]
 8005f66:	f361 1386 	bfi	r3, r1, #6, #1
 8005f6a:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	4905      	ldr	r1, [pc, #20]	; (8005f84 <rda5807_SetVolume+0x8c>)
 8005f70:	2002      	movs	r0, #2
 8005f72:	f7ff fe7f 	bl	8005c74 <rda5807_write>
}
 8005f76:	bf00      	nop
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20003636 	.word	0x20003636
 8005f84:	20003630 	.word	0x20003630

08005f88 <rda5807_SetBassBoost>:

//==============================================================================
// Процедура включает/выключает BassBoost
//==============================================================================
void rda5807_SetBassBoost(uint8_t Value)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	4603      	mov	r3, r0
 8005f90:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8005f92:	2201      	movs	r2, #1
 8005f94:	490b      	ldr	r1, [pc, #44]	; (8005fc4 <rda5807_SetBassBoost+0x3c>)
 8005f96:	2002      	movs	r0, #2
 8005f98:	f7ff fe38 	bl	8005c0c <rda5807_read>
    // Меняем значение поля BASS
    Buffs.Reg02.bBASS = (Value) ? 1 : 0;
 8005f9c:	79fb      	ldrb	r3, [r7, #7]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	bf14      	ite	ne
 8005fa2:	2301      	movne	r3, #1
 8005fa4:	2300      	moveq	r3, #0
 8005fa6:	b2d9      	uxtb	r1, r3
 8005fa8:	4a06      	ldr	r2, [pc, #24]	; (8005fc4 <rda5807_SetBassBoost+0x3c>)
 8005faa:	7853      	ldrb	r3, [r2, #1]
 8005fac:	f361 1304 	bfi	r3, r1, #4, #1
 8005fb0:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	4903      	ldr	r1, [pc, #12]	; (8005fc4 <rda5807_SetBassBoost+0x3c>)
 8005fb6:	2002      	movs	r0, #2
 8005fb8:	f7ff fe5c 	bl	8005c74 <rda5807_write>
}
 8005fbc:	bf00      	nop
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	20003630 	.word	0x20003630

08005fc8 <rda5807_SetFreq_In100Khz>:
//==============================================================================
// Процедура устанавливает текущую частоту Freq100kHz и стартует перенастройку rda5807 на эту частоту.
// Окончание процесса можно установки можно проконтроллировать по обнулению бита STR в регистре 0x0A (функцией rda5807_Get_SeekTuneReadyFlag)
//==============================================================================
void rda5807_SetFreq_In100Khz(uint16_t Freq100kHz)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	4603      	mov	r3, r0
 8005fd0:	80fb      	strh	r3, [r7, #6]
//tReg03h Reg03;
uint16_t l = 870, r = 1080;
 8005fd2:	f240 3366 	movw	r3, #870	; 0x366
 8005fd6:	81fb      	strh	r3, [r7, #14]
 8005fd8:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8005fdc:	81bb      	strh	r3, [r7, #12]

    // Проверка входного параметра для диапазона Buffs.Reg03.bBAND
	switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8005fde:	4b33      	ldr	r3, [pc, #204]	; (80060ac <rda5807_SetFreq_In100Khz+0xe4>)
 8005fe0:	789b      	ldrb	r3, [r3, #2]
 8005fe2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b03      	cmp	r3, #3
 8005fea:	d011      	beq.n	8006010 <rda5807_SetFreq_In100Khz+0x48>
 8005fec:	2b03      	cmp	r3, #3
 8005fee:	dc16      	bgt.n	800601e <rda5807_SetFreq_In100Khz+0x56>
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d002      	beq.n	8005ffa <rda5807_SetFreq_In100Khz+0x32>
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d007      	beq.n	8006008 <rda5807_SetFreq_In100Khz+0x40>
 8005ff8:	e011      	b.n	800601e <rda5807_SetFreq_In100Khz+0x56>
		//case 0:// 00 = 87–108 MHz (US/Europe)
		//break;
		case 1:// 01 = 76–91 MHz (Japan)
			l = 760;
 8005ffa:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005ffe:	81fb      	strh	r3, [r7, #14]
			r = 910;
 8006000:	f240 338e 	movw	r3, #910	; 0x38e
 8006004:	81bb      	strh	r3, [r7, #12]
		break;
 8006006:	e00a      	b.n	800601e <rda5807_SetFreq_In100Khz+0x56>
		case 2:// 10 = 76–108 MHz (world wide)
			l = 760;
 8006008:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 800600c:	81fb      	strh	r3, [r7, #14]
		break;
 800600e:	e006      	b.n	800601e <rda5807_SetFreq_In100Khz+0x56>
		case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
			l = 650;
 8006010:	f240 238a 	movw	r3, #650	; 0x28a
 8006014:	81fb      	strh	r3, [r7, #14]
			r = 760;
 8006016:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 800601a:	81bb      	strh	r3, [r7, #12]
		break;
 800601c:	bf00      	nop
	}
	lBand = ((float)l) / 10;
 800601e:	89fb      	ldrh	r3, [r7, #14]
 8006020:	ee07 3a90 	vmov	s15, r3
 8006024:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006028:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800602c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006030:	4b1f      	ldr	r3, [pc, #124]	; (80060b0 <rda5807_SetFreq_In100Khz+0xe8>)
 8006032:	edc3 7a00 	vstr	s15, [r3]
	rBand = ((float)r) / 10;
 8006036:	89bb      	ldrh	r3, [r7, #12]
 8006038:	ee07 3a90 	vmov	s15, r3
 800603c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006040:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006044:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006048:	4b1a      	ldr	r3, [pc, #104]	; (80060b4 <rda5807_SetFreq_In100Khz+0xec>)
 800604a:	edc3 7a00 	vstr	s15, [r3]

    if (Freq100kHz < l)  Freq100kHz = l;
 800604e:	88fa      	ldrh	r2, [r7, #6]
 8006050:	89fb      	ldrh	r3, [r7, #14]
 8006052:	429a      	cmp	r2, r3
 8006054:	d201      	bcs.n	800605a <rda5807_SetFreq_In100Khz+0x92>
 8006056:	89fb      	ldrh	r3, [r7, #14]
 8006058:	80fb      	strh	r3, [r7, #6]
    if (Freq100kHz > r) Freq100kHz = r;
 800605a:	88fa      	ldrh	r2, [r7, #6]
 800605c:	89bb      	ldrh	r3, [r7, #12]
 800605e:	429a      	cmp	r2, r3
 8006060:	d901      	bls.n	8006066 <rda5807_SetFreq_In100Khz+0x9e>
 8006062:	89bb      	ldrh	r3, [r7, #12]
 8006064:	80fb      	strh	r3, [r7, #6]

    // Вычитаем начало диапазона (left)
    Freq100kHz -= l;
 8006066:	88fa      	ldrh	r2, [r7, #6]
 8006068:	89fb      	ldrh	r3, [r7, #14]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	80fb      	strh	r3, [r7, #6]

    // Читаем регистр 0x03
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 800606e:	2201      	movs	r2, #1
 8006070:	4911      	ldr	r1, [pc, #68]	; (80060b8 <rda5807_SetFreq_In100Khz+0xf0>)
 8006072:	2003      	movs	r0, #3
 8006074:	f7ff fdca 	bl	8005c0c <rda5807_read>
    // Меняем значение поля CHAN
    Buffs.Reg03.bCHAN = Freq100kHz;
 8006078:	88fb      	ldrh	r3, [r7, #6]
 800607a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800607e:	b299      	uxth	r1, r3
 8006080:	4a0a      	ldr	r2, [pc, #40]	; (80060ac <rda5807_SetFreq_In100Khz+0xe4>)
 8006082:	8853      	ldrh	r3, [r2, #2]
 8006084:	f361 138f 	bfi	r3, r1, #6, #10
 8006088:	8053      	strh	r3, [r2, #2]
    // Выставляем флаг начала перенастройки на канал
    Buffs.Reg03.bTUNE = 1;
 800608a:	4a08      	ldr	r2, [pc, #32]	; (80060ac <rda5807_SetFreq_In100Khz+0xe4>)
 800608c:	7893      	ldrb	r3, [r2, #2]
 800608e:	f043 0310 	orr.w	r3, r3, #16
 8006092:	7093      	strb	r3, [r2, #2]
    // Пишем регистр 0x03
    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 8006094:	2201      	movs	r2, #1
 8006096:	4908      	ldr	r1, [pc, #32]	; (80060b8 <rda5807_SetFreq_In100Khz+0xf0>)
 8006098:	2003      	movs	r0, #3
 800609a:	f7ff fdeb 	bl	8005c74 <rda5807_write>

    HAL_Delay(50);
 800609e:	2032      	movs	r0, #50	; 0x32
 80060a0:	f001 fce6 	bl	8007a70 <HAL_Delay>
}
 80060a4:	bf00      	nop
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	20003630 	.word	0x20003630
 80060b0:	20002f4c 	.word	0x20002f4c
 80060b4:	20002f50 	.word	0x20002f50
 80060b8:	20003632 	.word	0x20003632

080060bc <rda5807_GetFreq_In100Khz>:

//==============================================================================
// Функция читает текущую частоту, на которую настроен rda5807
//==============================================================================
uint16_t rda5807_GetFreq_In100Khz()
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 80060c2:	2201      	movs	r2, #1
 80060c4:	491b      	ldr	r1, [pc, #108]	; (8006134 <rda5807_GetFreq_In100Khz+0x78>)
 80060c6:	200a      	movs	r0, #10
 80060c8:	f7ff fda0 	bl	8005c0c <rda5807_read>

    uint16_t Freq100kHz = Buffs.Reg0A.bREADCHAN;
 80060cc:	4b1a      	ldr	r3, [pc, #104]	; (8006138 <rda5807_GetFreq_In100Khz+0x7c>)
 80060ce:	8a1b      	ldrh	r3, [r3, #16]
 80060d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	80bb      	strh	r3, [r7, #4]

    if (Freq100kHz == 319) return 0;
 80060d8:	88bb      	ldrh	r3, [r7, #4]
 80060da:	f240 123f 	movw	r2, #319	; 0x13f
 80060de:	4293      	cmp	r3, r2
 80060e0:	d101      	bne.n	80060e6 <rda5807_GetFreq_In100Khz+0x2a>
 80060e2:	2300      	movs	r3, #0
 80060e4:	e021      	b.n	800612a <rda5807_GetFreq_In100Khz+0x6e>

    // Прибавляем начало диапазона (87 МГц)
    uint16_t left = 870;
 80060e6:	f240 3366 	movw	r3, #870	; 0x366
 80060ea:	80fb      	strh	r3, [r7, #6]
    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 80060ec:	4b12      	ldr	r3, [pc, #72]	; (8006138 <rda5807_GetFreq_In100Khz+0x7c>)
 80060ee:	789b      	ldrb	r3, [r3, #2]
 80060f0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	d00e      	beq.n	8006118 <rda5807_GetFreq_In100Khz+0x5c>
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	dc10      	bgt.n	8006120 <rda5807_GetFreq_In100Khz+0x64>
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d002      	beq.n	8006108 <rda5807_GetFreq_In100Khz+0x4c>
 8006102:	2b02      	cmp	r3, #2
 8006104:	d004      	beq.n	8006110 <rda5807_GetFreq_In100Khz+0x54>
 8006106:	e00b      	b.n	8006120 <rda5807_GetFreq_In100Khz+0x64>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		left = 760;
 8006108:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 800610c:	80fb      	strh	r3, [r7, #6]
    	break;
 800610e:	e007      	b.n	8006120 <rda5807_GetFreq_In100Khz+0x64>
    	case 2:// 10 = 76–108 MHz (world wide)
    		left = 760;
 8006110:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8006114:	80fb      	strh	r3, [r7, #6]
    	break;
 8006116:	e003      	b.n	8006120 <rda5807_GetFreq_In100Khz+0x64>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		left = 650;
 8006118:	f240 238a 	movw	r3, #650	; 0x28a
 800611c:	80fb      	strh	r3, [r7, #6]
    	break;
 800611e:	bf00      	nop
    }
    Freq100kHz += left;
 8006120:	88ba      	ldrh	r2, [r7, #4]
 8006122:	88fb      	ldrh	r3, [r7, #6]
 8006124:	4413      	add	r3, r2
 8006126:	80bb      	strh	r3, [r7, #4]

    return Freq100kHz;
 8006128:	88bb      	ldrh	r3, [r7, #4]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20003640 	.word	0x20003640
 8006138:	20003630 	.word	0x20003630

0800613c <rda5807_StartSeek>:

//==============================================================================
// Процедура стартует поиск радиостанции вверх/вниз
//==============================================================================
void rda5807_StartSeek(uint8_t Up)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	4603      	mov	r3, r0
 8006144:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8006146:	2201      	movs	r2, #1
 8006148:	4910      	ldr	r1, [pc, #64]	; (800618c <rda5807_StartSeek+0x50>)
 800614a:	2002      	movs	r0, #2
 800614c:	f7ff fd5e 	bl	8005c0c <rda5807_read>

    Buffs.Reg02.bSKMODE = 1;          // 07 Seek Mode (0 = wrap at the upper or lower band limit and continue seeking; 1 = stop seeking at the upper or lower band limit)
 8006150:	4a0e      	ldr	r2, [pc, #56]	; (800618c <rda5807_StartSeek+0x50>)
 8006152:	7813      	ldrb	r3, [r2, #0]
 8006154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006158:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 1;            // 08 Seek (0 = Disable stop seek; 1 = Enable)
 800615a:	4a0c      	ldr	r2, [pc, #48]	; (800618c <rda5807_StartSeek+0x50>)
 800615c:	7853      	ldrb	r3, [r2, #1]
 800615e:	f043 0301 	orr.w	r3, r3, #1
 8006162:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = Up ? 1 : 0; // 09 Seek Up (0 = Seek down; 1 = Seek up)
 8006164:	79fb      	ldrb	r3, [r7, #7]
 8006166:	2b00      	cmp	r3, #0
 8006168:	bf14      	ite	ne
 800616a:	2301      	movne	r3, #1
 800616c:	2300      	moveq	r3, #0
 800616e:	b2d9      	uxtb	r1, r3
 8006170:	4a06      	ldr	r2, [pc, #24]	; (800618c <rda5807_StartSeek+0x50>)
 8006172:	7853      	ldrb	r3, [r2, #1]
 8006174:	f361 0341 	bfi	r3, r1, #1, #1
 8006178:	7053      	strb	r3, [r2, #1]

    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 800617a:	2201      	movs	r2, #1
 800617c:	4903      	ldr	r1, [pc, #12]	; (800618c <rda5807_StartSeek+0x50>)
 800617e:	2002      	movs	r0, #2
 8006180:	f7ff fd78 	bl	8005c74 <rda5807_write>
}
 8006184:	bf00      	nop
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	20003630 	.word	0x20003630

08006190 <rda5807_Get_SeekTuneReadyFlag>:
//==============================================================================
// Функция возвращает состояние бита STR (SeekTuneReadyFlag)
// SeekTuneReadyFlag=1 пока идёт процесс настройки на частоту или поиск радиостанции.
//==============================================================================
uint8_t rda5807_Get_SeekTuneReadyFlag()
{
 8006190:	b580      	push	{r7, lr}
 8006192:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8006194:	2201      	movs	r2, #1
 8006196:	4905      	ldr	r1, [pc, #20]	; (80061ac <rda5807_Get_SeekTuneReadyFlag+0x1c>)
 8006198:	200a      	movs	r0, #10
 800619a:	f7ff fd37 	bl	8005c0c <rda5807_read>

    return Buffs.Reg0A.bSTC;
 800619e:	4b04      	ldr	r3, [pc, #16]	; (80061b0 <rda5807_Get_SeekTuneReadyFlag+0x20>)
 80061a0:	7c5b      	ldrb	r3, [r3, #17]
 80061a2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80061a6:	b2db      	uxtb	r3, r3
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	20003640 	.word	0x20003640
 80061b0:	20003630 	.word	0x20003630

080061b4 <rda5807_Get_StereoMonoFlag>:
//==============================================================================
//==============================================================================
bool rda5807_Get_StereoMonoFlag()
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 80061b8:	2201      	movs	r2, #1
 80061ba:	4908      	ldr	r1, [pc, #32]	; (80061dc <rda5807_Get_StereoMonoFlag+0x28>)
 80061bc:	200a      	movs	r0, #10
 80061be:	f7ff fd25 	bl	8005c0c <rda5807_read>

    return Buffs.Reg0A.bST;     // Stereo Indicator (0 = Mono; 1 = Stereo)
 80061c2:	4b07      	ldr	r3, [pc, #28]	; (80061e0 <rda5807_Get_StereoMonoFlag+0x2c>)
 80061c4:	7c5b      	ldrb	r3, [r3, #17]
 80061c6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	bf14      	ite	ne
 80061d0:	2301      	movne	r3, #1
 80061d2:	2300      	moveq	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	20003640 	.word	0x20003640
 80061e0:	20003630 	.word	0x20003630

080061e4 <rda5807_Get_Channel>:
//==============================================================================
uint16_t rda5807_Get_Channel()
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 80061e8:	2201      	movs	r2, #1
 80061ea:	4905      	ldr	r1, [pc, #20]	; (8006200 <rda5807_Get_Channel+0x1c>)
 80061ec:	200a      	movs	r0, #10
 80061ee:	f7ff fd0d 	bl	8005c0c <rda5807_read>

    return Buffs.Reg0A.bREADCHAN;    // 0-9 Read Channel.
 80061f2:	4b04      	ldr	r3, [pc, #16]	; (8006204 <rda5807_Get_Channel+0x20>)
 80061f4:	8a1b      	ldrh	r3, [r3, #16]
 80061f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061fa:	b29b      	uxth	r3, r3
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	20003640 	.word	0x20003640
 8006204:	20003630 	.word	0x20003630

08006208 <rda5807_Set_Band>:
//==============================================================================
uint8_t rda5807_Set_Band(uint8_t band)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	4603      	mov	r3, r0
 8006210:	71fb      	strb	r3, [r7, #7]
	if (band > 3) return 1;
 8006212:	79fb      	ldrb	r3, [r7, #7]
 8006214:	2b03      	cmp	r3, #3
 8006216:	d901      	bls.n	800621c <rda5807_Set_Band+0x14>
 8006218:	2301      	movs	r3, #1
 800621a:	e054      	b.n	80062c6 <rda5807_Set_Band+0xbe>

    // Читаем регистр 3
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 800621c:	2201      	movs	r2, #1
 800621e:	492c      	ldr	r1, [pc, #176]	; (80062d0 <rda5807_Set_Band+0xc8>)
 8006220:	2003      	movs	r0, #3
 8006222:	f7ff fcf3 	bl	8005c0c <rda5807_read>

    Buffs.Reg03.bBAND = band;
 8006226:	79fb      	ldrb	r3, [r7, #7]
 8006228:	f003 0303 	and.w	r3, r3, #3
 800622c:	b2d9      	uxtb	r1, r3
 800622e:	4a29      	ldr	r2, [pc, #164]	; (80062d4 <rda5807_Set_Band+0xcc>)
 8006230:	7893      	ldrb	r3, [r2, #2]
 8006232:	f361 0383 	bfi	r3, r1, #2, #2
 8006236:	7093      	strb	r3, [r2, #2]

    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 8006238:	2201      	movs	r2, #1
 800623a:	4925      	ldr	r1, [pc, #148]	; (80062d0 <rda5807_Set_Band+0xc8>)
 800623c:	2003      	movs	r0, #3
 800623e:	f7ff fd19 	bl	8005c74 <rda5807_write>

    uint16_t l = 870, r = 1080;
 8006242:	f240 3366 	movw	r3, #870	; 0x366
 8006246:	81fb      	strh	r3, [r7, #14]
 8006248:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800624c:	81bb      	strh	r3, [r7, #12]

    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 800624e:	4b21      	ldr	r3, [pc, #132]	; (80062d4 <rda5807_Set_Band+0xcc>)
 8006250:	789b      	ldrb	r3, [r3, #2]
 8006252:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b03      	cmp	r3, #3
 800625a:	d011      	beq.n	8006280 <rda5807_Set_Band+0x78>
 800625c:	2b03      	cmp	r3, #3
 800625e:	dc16      	bgt.n	800628e <rda5807_Set_Band+0x86>
 8006260:	2b01      	cmp	r3, #1
 8006262:	d002      	beq.n	800626a <rda5807_Set_Band+0x62>
 8006264:	2b02      	cmp	r3, #2
 8006266:	d007      	beq.n	8006278 <rda5807_Set_Band+0x70>
 8006268:	e011      	b.n	800628e <rda5807_Set_Band+0x86>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		l = 760;
 800626a:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 800626e:	81fb      	strh	r3, [r7, #14]
    		r = 910;
 8006270:	f240 338e 	movw	r3, #910	; 0x38e
 8006274:	81bb      	strh	r3, [r7, #12]
    	break;
 8006276:	e00a      	b.n	800628e <rda5807_Set_Band+0x86>
    	case 2:// 10 = 76–108 MHz (world wide)
    		l = 760;
 8006278:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 800627c:	81fb      	strh	r3, [r7, #14]
    	break;
 800627e:	e006      	b.n	800628e <rda5807_Set_Band+0x86>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		l = 650;
 8006280:	f240 238a 	movw	r3, #650	; 0x28a
 8006284:	81fb      	strh	r3, [r7, #14]
    		r = 760;
 8006286:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 800628a:	81bb      	strh	r3, [r7, #12]
    	break;
 800628c:	bf00      	nop
    }
    lBand = ((float)l) / 10;
 800628e:	89fb      	ldrh	r3, [r7, #14]
 8006290:	ee07 3a90 	vmov	s15, r3
 8006294:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006298:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800629c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062a0:	4b0d      	ldr	r3, [pc, #52]	; (80062d8 <rda5807_Set_Band+0xd0>)
 80062a2:	edc3 7a00 	vstr	s15, [r3]
    rBand = ((float)r) / 10;
 80062a6:	89bb      	ldrh	r3, [r7, #12]
 80062a8:	ee07 3a90 	vmov	s15, r3
 80062ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80062b0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80062b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062b8:	4b08      	ldr	r3, [pc, #32]	; (80062dc <rda5807_Set_Band+0xd4>)
 80062ba:	edc3 7a00 	vstr	s15, [r3]

    HAL_Delay(50);
 80062be:	2032      	movs	r0, #50	; 0x32
 80062c0:	f001 fbd6 	bl	8007a70 <HAL_Delay>

    return 0;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20003632 	.word	0x20003632
 80062d4:	20003630 	.word	0x20003630
 80062d8:	20002f4c 	.word	0x20002f4c
 80062dc:	20002f50 	.word	0x20002f50

080062e0 <rda5807_Set_Mute>:
//==============================================================================
void rda5807_Set_Mute(uint8_t mute)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	4603      	mov	r3, r0
 80062e8:	71fb      	strb	r3, [r7, #7]
	// Читаем регистр 2
	rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 80062ea:	2201      	movs	r2, #1
 80062ec:	490a      	ldr	r1, [pc, #40]	; (8006318 <rda5807_Set_Mute+0x38>)
 80062ee:	2002      	movs	r0, #2
 80062f0:	f7ff fc8c 	bl	8005c0c <rda5807_read>

	Buffs.Reg02.bDMUTE = mute & 1;
 80062f4:	79fb      	ldrb	r3, [r7, #7]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	b2d9      	uxtb	r1, r3
 80062fc:	4a06      	ldr	r2, [pc, #24]	; (8006318 <rda5807_Set_Mute+0x38>)
 80062fe:	7853      	ldrb	r3, [r2, #1]
 8006300:	f361 1386 	bfi	r3, r1, #6, #1
 8006304:	7053      	strb	r3, [r2, #1]

	rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8006306:	2201      	movs	r2, #1
 8006308:	4903      	ldr	r1, [pc, #12]	; (8006318 <rda5807_Set_Mute+0x38>)
 800630a:	2002      	movs	r0, #2
 800630c:	f7ff fcb2 	bl	8005c74 <rda5807_write>
}
 8006310:	bf00      	nop
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	20003630 	.word	0x20003630

0800631c <rda5807_Get_RDSData>:
	return Buffs.Reg0A.bRDSR;
}
*/
//==============================================================================
bool rda5807_Get_RDSData(uint8_t *data, bool *sync)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
	rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8006326:	2201      	movs	r2, #1
 8006328:	4914      	ldr	r1, [pc, #80]	; (800637c <rda5807_Get_RDSData+0x60>)
 800632a:	200a      	movs	r0, #10
 800632c:	f7ff fc6e 	bl	8005c0c <rda5807_read>

	*sync = Buffs.Reg0A.bRDSS;
 8006330:	4b13      	ldr	r3, [pc, #76]	; (8006380 <rda5807_Get_RDSData+0x64>)
 8006332:	7c5b      	ldrb	r3, [r3, #17]
 8006334:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	bf14      	ite	ne
 800633e:	2301      	movne	r3, #1
 8006340:	2300      	moveq	r3, #0
 8006342:	b2da      	uxtb	r2, r3
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	701a      	strb	r2, [r3, #0]

	if (Buffs.Reg0A.bRDSR) rda5807_read(0x0C, (uint16_t *)data, 4);
 8006348:	4b0d      	ldr	r3, [pc, #52]	; (8006380 <rda5807_Get_RDSData+0x64>)
 800634a:	7c5b      	ldrb	r3, [r3, #17]
 800634c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d004      	beq.n	8006360 <rda5807_Get_RDSData+0x44>
 8006356:	2204      	movs	r2, #4
 8006358:	6879      	ldr	r1, [r7, #4]
 800635a:	200c      	movs	r0, #12
 800635c:	f7ff fc56 	bl	8005c0c <rda5807_read>

	return Buffs.Reg0A.bRDSR;
 8006360:	4b07      	ldr	r3, [pc, #28]	; (8006380 <rda5807_Get_RDSData+0x64>)
 8006362:	7c5b      	ldrb	r3, [r3, #17]
 8006364:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	bf14      	ite	ne
 800636e:	2301      	movne	r3, #1
 8006370:	2300      	moveq	r3, #0
 8006372:	b2db      	uxtb	r3, r3
}
 8006374:	4618      	mov	r0, r3
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	20003640 	.word	0x20003640
 8006380:	20003630 	.word	0x20003630

08006384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800638a:	4b11      	ldr	r3, [pc, #68]	; (80063d0 <HAL_MspInit+0x4c>)
 800638c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800638e:	4a10      	ldr	r2, [pc, #64]	; (80063d0 <HAL_MspInit+0x4c>)
 8006390:	f043 0301 	orr.w	r3, r3, #1
 8006394:	6613      	str	r3, [r2, #96]	; 0x60
 8006396:	4b0e      	ldr	r3, [pc, #56]	; (80063d0 <HAL_MspInit+0x4c>)
 8006398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	607b      	str	r3, [r7, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80063a2:	4b0b      	ldr	r3, [pc, #44]	; (80063d0 <HAL_MspInit+0x4c>)
 80063a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a6:	4a0a      	ldr	r2, [pc, #40]	; (80063d0 <HAL_MspInit+0x4c>)
 80063a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ac:	6593      	str	r3, [r2, #88]	; 0x58
 80063ae:	4b08      	ldr	r3, [pc, #32]	; (80063d0 <HAL_MspInit+0x4c>)
 80063b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063b6:	603b      	str	r3, [r7, #0]
 80063b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80063ba:	2200      	movs	r2, #0
 80063bc:	210f      	movs	r1, #15
 80063be:	f06f 0001 	mvn.w	r0, #1
 80063c2:	f001 fc31 	bl	8007c28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063c6:	bf00      	nop
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	40021000 	.word	0x40021000

080063d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b0ac      	sub	sp, #176	; 0xb0
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80063e0:	2200      	movs	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	605a      	str	r2, [r3, #4]
 80063e6:	609a      	str	r2, [r3, #8]
 80063e8:	60da      	str	r2, [r3, #12]
 80063ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80063ec:	f107 0314 	add.w	r3, r7, #20
 80063f0:	2288      	movs	r2, #136	; 0x88
 80063f2:	2100      	movs	r1, #0
 80063f4:	4618      	mov	r0, r3
 80063f6:	f00d f8c3 	bl	8013580 <memset>
  if(hi2c->Instance==I2C1)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a57      	ldr	r2, [pc, #348]	; (800655c <HAL_I2C_MspInit+0x188>)
 8006400:	4293      	cmp	r3, r2
 8006402:	f040 80a7 	bne.w	8006554 <HAL_I2C_MspInit+0x180>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006406:	2340      	movs	r3, #64	; 0x40
 8006408:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800640a:	2300      	movs	r3, #0
 800640c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800640e:	f107 0314 	add.w	r3, r7, #20
 8006412:	4618      	mov	r0, r3
 8006414:	f004 fc6e 	bl	800acf4 <HAL_RCCEx_PeriphCLKConfig>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800641e:	f7ff fb0d 	bl	8005a3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006422:	4b4f      	ldr	r3, [pc, #316]	; (8006560 <HAL_I2C_MspInit+0x18c>)
 8006424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006426:	4a4e      	ldr	r2, [pc, #312]	; (8006560 <HAL_I2C_MspInit+0x18c>)
 8006428:	f043 0302 	orr.w	r3, r3, #2
 800642c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800642e:	4b4c      	ldr	r3, [pc, #304]	; (8006560 <HAL_I2C_MspInit+0x18c>)
 8006430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	613b      	str	r3, [r7, #16]
 8006438:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800643a:	23c0      	movs	r3, #192	; 0xc0
 800643c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006440:	2312      	movs	r3, #18
 8006442:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006446:	2300      	movs	r3, #0
 8006448:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800644c:	2302      	movs	r3, #2
 800644e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006452:	2304      	movs	r3, #4
 8006454:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006458:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800645c:	4619      	mov	r1, r3
 800645e:	4841      	ldr	r0, [pc, #260]	; (8006564 <HAL_I2C_MspInit+0x190>)
 8006460:	f001 fe90 	bl	8008184 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB6);
 8006464:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006468:	f003 fcf2 	bl	8009e50 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 800646c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006470:	f003 fcee 	bl	8009e50 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006474:	4b3a      	ldr	r3, [pc, #232]	; (8006560 <HAL_I2C_MspInit+0x18c>)
 8006476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006478:	4a39      	ldr	r2, [pc, #228]	; (8006560 <HAL_I2C_MspInit+0x18c>)
 800647a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800647e:	6593      	str	r3, [r2, #88]	; 0x58
 8006480:	4b37      	ldr	r3, [pc, #220]	; (8006560 <HAL_I2C_MspInit+0x18c>)
 8006482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006488:	60fb      	str	r3, [r7, #12]
 800648a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA2_Channel6;
 800648c:	4b36      	ldr	r3, [pc, #216]	; (8006568 <HAL_I2C_MspInit+0x194>)
 800648e:	4a37      	ldr	r2, [pc, #220]	; (800656c <HAL_I2C_MspInit+0x198>)
 8006490:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_5;
 8006492:	4b35      	ldr	r3, [pc, #212]	; (8006568 <HAL_I2C_MspInit+0x194>)
 8006494:	2205      	movs	r2, #5
 8006496:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006498:	4b33      	ldr	r3, [pc, #204]	; (8006568 <HAL_I2C_MspInit+0x194>)
 800649a:	2200      	movs	r2, #0
 800649c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800649e:	4b32      	ldr	r3, [pc, #200]	; (8006568 <HAL_I2C_MspInit+0x194>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80064a4:	4b30      	ldr	r3, [pc, #192]	; (8006568 <HAL_I2C_MspInit+0x194>)
 80064a6:	2280      	movs	r2, #128	; 0x80
 80064a8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064aa:	4b2f      	ldr	r3, [pc, #188]	; (8006568 <HAL_I2C_MspInit+0x194>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064b0:	4b2d      	ldr	r3, [pc, #180]	; (8006568 <HAL_I2C_MspInit+0x194>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80064b6:	4b2c      	ldr	r3, [pc, #176]	; (8006568 <HAL_I2C_MspInit+0x194>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80064bc:	4b2a      	ldr	r3, [pc, #168]	; (8006568 <HAL_I2C_MspInit+0x194>)
 80064be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80064c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80064c4:	4828      	ldr	r0, [pc, #160]	; (8006568 <HAL_I2C_MspInit+0x194>)
 80064c6:	f001 fbd9 	bl	8007c7c <HAL_DMA_Init>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <HAL_I2C_MspInit+0x100>
    {
      Error_Handler();
 80064d0:	f7ff fab4 	bl	8005a3c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a24      	ldr	r2, [pc, #144]	; (8006568 <HAL_I2C_MspInit+0x194>)
 80064d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80064da:	4a23      	ldr	r2, [pc, #140]	; (8006568 <HAL_I2C_MspInit+0x194>)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80064e0:	4b23      	ldr	r3, [pc, #140]	; (8006570 <HAL_I2C_MspInit+0x19c>)
 80064e2:	4a24      	ldr	r2, [pc, #144]	; (8006574 <HAL_I2C_MspInit+0x1a0>)
 80064e4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 80064e6:	4b22      	ldr	r3, [pc, #136]	; (8006570 <HAL_I2C_MspInit+0x19c>)
 80064e8:	2203      	movs	r2, #3
 80064ea:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064ec:	4b20      	ldr	r3, [pc, #128]	; (8006570 <HAL_I2C_MspInit+0x19c>)
 80064ee:	2210      	movs	r2, #16
 80064f0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064f2:	4b1f      	ldr	r3, [pc, #124]	; (8006570 <HAL_I2C_MspInit+0x19c>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80064f8:	4b1d      	ldr	r3, [pc, #116]	; (8006570 <HAL_I2C_MspInit+0x19c>)
 80064fa:	2280      	movs	r2, #128	; 0x80
 80064fc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064fe:	4b1c      	ldr	r3, [pc, #112]	; (8006570 <HAL_I2C_MspInit+0x19c>)
 8006500:	2200      	movs	r2, #0
 8006502:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006504:	4b1a      	ldr	r3, [pc, #104]	; (8006570 <HAL_I2C_MspInit+0x19c>)
 8006506:	2200      	movs	r2, #0
 8006508:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800650a:	4b19      	ldr	r3, [pc, #100]	; (8006570 <HAL_I2C_MspInit+0x19c>)
 800650c:	2200      	movs	r2, #0
 800650e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006510:	4b17      	ldr	r3, [pc, #92]	; (8006570 <HAL_I2C_MspInit+0x19c>)
 8006512:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006516:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8006518:	4815      	ldr	r0, [pc, #84]	; (8006570 <HAL_I2C_MspInit+0x19c>)
 800651a:	f001 fbaf 	bl	8007c7c <HAL_DMA_Init>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <HAL_I2C_MspInit+0x154>
    {
      Error_Handler();
 8006524:	f7ff fa8a 	bl	8005a3c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a11      	ldr	r2, [pc, #68]	; (8006570 <HAL_I2C_MspInit+0x19c>)
 800652c:	639a      	str	r2, [r3, #56]	; 0x38
 800652e:	4a10      	ldr	r2, [pc, #64]	; (8006570 <HAL_I2C_MspInit+0x19c>)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8006534:	2200      	movs	r2, #0
 8006536:	2105      	movs	r1, #5
 8006538:	201f      	movs	r0, #31
 800653a:	f001 fb75 	bl	8007c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800653e:	201f      	movs	r0, #31
 8006540:	f001 fb8e 	bl	8007c60 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8006544:	2200      	movs	r2, #0
 8006546:	2105      	movs	r1, #5
 8006548:	2020      	movs	r0, #32
 800654a:	f001 fb6d 	bl	8007c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800654e:	2020      	movs	r0, #32
 8006550:	f001 fb86 	bl	8007c60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006554:	bf00      	nop
 8006556:	37b0      	adds	r7, #176	; 0xb0
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	40005400 	.word	0x40005400
 8006560:	40021000 	.word	0x40021000
 8006564:	48000400 	.word	0x48000400
 8006568:	200009ec 	.word	0x200009ec
 800656c:	4002046c 	.word	0x4002046c
 8006570:	20000a34 	.word	0x20000a34
 8006574:	4002006c 	.word	0x4002006c

08006578 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b0a4      	sub	sp, #144	; 0x90
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006580:	f107 0308 	add.w	r3, r7, #8
 8006584:	2288      	movs	r2, #136	; 0x88
 8006586:	2100      	movs	r1, #0
 8006588:	4618      	mov	r0, r3
 800658a:	f00c fff9 	bl	8013580 <memset>
  if(hrtc->Instance==RTC)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a10      	ldr	r2, [pc, #64]	; (80065d4 <HAL_RTC_MspInit+0x5c>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d118      	bne.n	80065ca <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800659c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800659e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80065a6:	f107 0308 	add.w	r3, r7, #8
 80065aa:	4618      	mov	r0, r3
 80065ac:	f004 fba2 	bl	800acf4 <HAL_RCCEx_PeriphCLKConfig>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80065b6:	f7ff fa41 	bl	8005a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80065ba:	4b07      	ldr	r3, [pc, #28]	; (80065d8 <HAL_RTC_MspInit+0x60>)
 80065bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c0:	4a05      	ldr	r2, [pc, #20]	; (80065d8 <HAL_RTC_MspInit+0x60>)
 80065c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80065ca:	bf00      	nop
 80065cc:	3790      	adds	r7, #144	; 0x90
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	40002800 	.word	0x40002800
 80065d8:	40021000 	.word	0x40021000

080065dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08c      	sub	sp, #48	; 0x30
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065e4:	f107 031c 	add.w	r3, r7, #28
 80065e8:	2200      	movs	r2, #0
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	605a      	str	r2, [r3, #4]
 80065ee:	609a      	str	r2, [r3, #8]
 80065f0:	60da      	str	r2, [r3, #12]
 80065f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a76      	ldr	r2, [pc, #472]	; (80067d4 <HAL_SPI_MspInit+0x1f8>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d15b      	bne.n	80066b6 <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80065fe:	4b76      	ldr	r3, [pc, #472]	; (80067d8 <HAL_SPI_MspInit+0x1fc>)
 8006600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006602:	4a75      	ldr	r2, [pc, #468]	; (80067d8 <HAL_SPI_MspInit+0x1fc>)
 8006604:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006608:	6613      	str	r3, [r2, #96]	; 0x60
 800660a:	4b73      	ldr	r3, [pc, #460]	; (80067d8 <HAL_SPI_MspInit+0x1fc>)
 800660c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800660e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006612:	61bb      	str	r3, [r7, #24]
 8006614:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006616:	4b70      	ldr	r3, [pc, #448]	; (80067d8 <HAL_SPI_MspInit+0x1fc>)
 8006618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800661a:	4a6f      	ldr	r2, [pc, #444]	; (80067d8 <HAL_SPI_MspInit+0x1fc>)
 800661c:	f043 0301 	orr.w	r3, r3, #1
 8006620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006622:	4b6d      	ldr	r3, [pc, #436]	; (80067d8 <HAL_SPI_MspInit+0x1fc>)
 8006624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	617b      	str	r3, [r7, #20]
 800662c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800662e:	23a0      	movs	r3, #160	; 0xa0
 8006630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006632:	2302      	movs	r3, #2
 8006634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006636:	2300      	movs	r3, #0
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800663a:	2303      	movs	r3, #3
 800663c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800663e:	2305      	movs	r3, #5
 8006640:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006642:	f107 031c 	add.w	r3, r7, #28
 8006646:	4619      	mov	r1, r3
 8006648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800664c:	f001 fd9a 	bl	8008184 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Channel4;
 8006650:	4b62      	ldr	r3, [pc, #392]	; (80067dc <HAL_SPI_MspInit+0x200>)
 8006652:	4a63      	ldr	r2, [pc, #396]	; (80067e0 <HAL_SPI_MspInit+0x204>)
 8006654:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_4;
 8006656:	4b61      	ldr	r3, [pc, #388]	; (80067dc <HAL_SPI_MspInit+0x200>)
 8006658:	2204      	movs	r2, #4
 800665a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800665c:	4b5f      	ldr	r3, [pc, #380]	; (80067dc <HAL_SPI_MspInit+0x200>)
 800665e:	2210      	movs	r2, #16
 8006660:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006662:	4b5e      	ldr	r3, [pc, #376]	; (80067dc <HAL_SPI_MspInit+0x200>)
 8006664:	2200      	movs	r2, #0
 8006666:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006668:	4b5c      	ldr	r3, [pc, #368]	; (80067dc <HAL_SPI_MspInit+0x200>)
 800666a:	2280      	movs	r2, #128	; 0x80
 800666c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800666e:	4b5b      	ldr	r3, [pc, #364]	; (80067dc <HAL_SPI_MspInit+0x200>)
 8006670:	2200      	movs	r2, #0
 8006672:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006674:	4b59      	ldr	r3, [pc, #356]	; (80067dc <HAL_SPI_MspInit+0x200>)
 8006676:	2200      	movs	r2, #0
 8006678:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800667a:	4b58      	ldr	r3, [pc, #352]	; (80067dc <HAL_SPI_MspInit+0x200>)
 800667c:	2200      	movs	r2, #0
 800667e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006680:	4b56      	ldr	r3, [pc, #344]	; (80067dc <HAL_SPI_MspInit+0x200>)
 8006682:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006686:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8006688:	4854      	ldr	r0, [pc, #336]	; (80067dc <HAL_SPI_MspInit+0x200>)
 800668a:	f001 faf7 	bl	8007c7c <HAL_DMA_Init>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8006694:	f7ff f9d2 	bl	8005a3c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a50      	ldr	r2, [pc, #320]	; (80067dc <HAL_SPI_MspInit+0x200>)
 800669c:	655a      	str	r2, [r3, #84]	; 0x54
 800669e:	4a4f      	ldr	r2, [pc, #316]	; (80067dc <HAL_SPI_MspInit+0x200>)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80066a4:	2200      	movs	r2, #0
 80066a6:	2105      	movs	r1, #5
 80066a8:	2023      	movs	r0, #35	; 0x23
 80066aa:	f001 fabd 	bl	8007c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80066ae:	2023      	movs	r0, #35	; 0x23
 80066b0:	f001 fad6 	bl	8007c60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80066b4:	e08a      	b.n	80067cc <HAL_SPI_MspInit+0x1f0>
  else if(hspi->Instance==SPI2)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a4a      	ldr	r2, [pc, #296]	; (80067e4 <HAL_SPI_MspInit+0x208>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	f040 8085 	bne.w	80067cc <HAL_SPI_MspInit+0x1f0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80066c2:	4b45      	ldr	r3, [pc, #276]	; (80067d8 <HAL_SPI_MspInit+0x1fc>)
 80066c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c6:	4a44      	ldr	r2, [pc, #272]	; (80067d8 <HAL_SPI_MspInit+0x1fc>)
 80066c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066cc:	6593      	str	r3, [r2, #88]	; 0x58
 80066ce:	4b42      	ldr	r3, [pc, #264]	; (80067d8 <HAL_SPI_MspInit+0x1fc>)
 80066d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066d6:	613b      	str	r3, [r7, #16]
 80066d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066da:	4b3f      	ldr	r3, [pc, #252]	; (80067d8 <HAL_SPI_MspInit+0x1fc>)
 80066dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066de:	4a3e      	ldr	r2, [pc, #248]	; (80067d8 <HAL_SPI_MspInit+0x1fc>)
 80066e0:	f043 0302 	orr.w	r3, r3, #2
 80066e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066e6:	4b3c      	ldr	r3, [pc, #240]	; (80067d8 <HAL_SPI_MspInit+0x1fc>)
 80066e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80066f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80066f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066f8:	2302      	movs	r3, #2
 80066fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066fc:	2300      	movs	r3, #0
 80066fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006700:	2303      	movs	r3, #3
 8006702:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006704:	2305      	movs	r3, #5
 8006706:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006708:	f107 031c 	add.w	r3, r7, #28
 800670c:	4619      	mov	r1, r3
 800670e:	4836      	ldr	r0, [pc, #216]	; (80067e8 <HAL_SPI_MspInit+0x20c>)
 8006710:	f001 fd38 	bl	8008184 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8006714:	4b35      	ldr	r3, [pc, #212]	; (80067ec <HAL_SPI_MspInit+0x210>)
 8006716:	4a36      	ldr	r2, [pc, #216]	; (80067f0 <HAL_SPI_MspInit+0x214>)
 8006718:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 800671a:	4b34      	ldr	r3, [pc, #208]	; (80067ec <HAL_SPI_MspInit+0x210>)
 800671c:	2201      	movs	r2, #1
 800671e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006720:	4b32      	ldr	r3, [pc, #200]	; (80067ec <HAL_SPI_MspInit+0x210>)
 8006722:	2200      	movs	r2, #0
 8006724:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006726:	4b31      	ldr	r3, [pc, #196]	; (80067ec <HAL_SPI_MspInit+0x210>)
 8006728:	2200      	movs	r2, #0
 800672a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800672c:	4b2f      	ldr	r3, [pc, #188]	; (80067ec <HAL_SPI_MspInit+0x210>)
 800672e:	2280      	movs	r2, #128	; 0x80
 8006730:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006732:	4b2e      	ldr	r3, [pc, #184]	; (80067ec <HAL_SPI_MspInit+0x210>)
 8006734:	2200      	movs	r2, #0
 8006736:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006738:	4b2c      	ldr	r3, [pc, #176]	; (80067ec <HAL_SPI_MspInit+0x210>)
 800673a:	2200      	movs	r2, #0
 800673c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800673e:	4b2b      	ldr	r3, [pc, #172]	; (80067ec <HAL_SPI_MspInit+0x210>)
 8006740:	2200      	movs	r2, #0
 8006742:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006744:	4b29      	ldr	r3, [pc, #164]	; (80067ec <HAL_SPI_MspInit+0x210>)
 8006746:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800674a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800674c:	4827      	ldr	r0, [pc, #156]	; (80067ec <HAL_SPI_MspInit+0x210>)
 800674e:	f001 fa95 	bl	8007c7c <HAL_DMA_Init>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <HAL_SPI_MspInit+0x180>
      Error_Handler();
 8006758:	f7ff f970 	bl	8005a3c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a23      	ldr	r2, [pc, #140]	; (80067ec <HAL_SPI_MspInit+0x210>)
 8006760:	659a      	str	r2, [r3, #88]	; 0x58
 8006762:	4a22      	ldr	r2, [pc, #136]	; (80067ec <HAL_SPI_MspInit+0x210>)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8006768:	4b22      	ldr	r3, [pc, #136]	; (80067f4 <HAL_SPI_MspInit+0x218>)
 800676a:	4a23      	ldr	r2, [pc, #140]	; (80067f8 <HAL_SPI_MspInit+0x21c>)
 800676c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 800676e:	4b21      	ldr	r3, [pc, #132]	; (80067f4 <HAL_SPI_MspInit+0x218>)
 8006770:	2201      	movs	r2, #1
 8006772:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006774:	4b1f      	ldr	r3, [pc, #124]	; (80067f4 <HAL_SPI_MspInit+0x218>)
 8006776:	2210      	movs	r2, #16
 8006778:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800677a:	4b1e      	ldr	r3, [pc, #120]	; (80067f4 <HAL_SPI_MspInit+0x218>)
 800677c:	2200      	movs	r2, #0
 800677e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006780:	4b1c      	ldr	r3, [pc, #112]	; (80067f4 <HAL_SPI_MspInit+0x218>)
 8006782:	2280      	movs	r2, #128	; 0x80
 8006784:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006786:	4b1b      	ldr	r3, [pc, #108]	; (80067f4 <HAL_SPI_MspInit+0x218>)
 8006788:	2200      	movs	r2, #0
 800678a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800678c:	4b19      	ldr	r3, [pc, #100]	; (80067f4 <HAL_SPI_MspInit+0x218>)
 800678e:	2200      	movs	r2, #0
 8006790:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8006792:	4b18      	ldr	r3, [pc, #96]	; (80067f4 <HAL_SPI_MspInit+0x218>)
 8006794:	2200      	movs	r2, #0
 8006796:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006798:	4b16      	ldr	r3, [pc, #88]	; (80067f4 <HAL_SPI_MspInit+0x218>)
 800679a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800679e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80067a0:	4814      	ldr	r0, [pc, #80]	; (80067f4 <HAL_SPI_MspInit+0x218>)
 80067a2:	f001 fa6b 	bl	8007c7c <HAL_DMA_Init>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <HAL_SPI_MspInit+0x1d4>
      Error_Handler();
 80067ac:	f7ff f946 	bl	8005a3c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a10      	ldr	r2, [pc, #64]	; (80067f4 <HAL_SPI_MspInit+0x218>)
 80067b4:	655a      	str	r2, [r3, #84]	; 0x54
 80067b6:	4a0f      	ldr	r2, [pc, #60]	; (80067f4 <HAL_SPI_MspInit+0x218>)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80067bc:	2200      	movs	r2, #0
 80067be:	2105      	movs	r1, #5
 80067c0:	2024      	movs	r0, #36	; 0x24
 80067c2:	f001 fa31 	bl	8007c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80067c6:	2024      	movs	r0, #36	; 0x24
 80067c8:	f001 fa4a 	bl	8007c60 <HAL_NVIC_EnableIRQ>
}
 80067cc:	bf00      	nop
 80067ce:	3730      	adds	r7, #48	; 0x30
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	40013000 	.word	0x40013000
 80067d8:	40021000 	.word	0x40021000
 80067dc:	20000b68 	.word	0x20000b68
 80067e0:	40020444 	.word	0x40020444
 80067e4:	40003800 	.word	0x40003800
 80067e8:	48000400 	.word	0x48000400
 80067ec:	20000bb0 	.word	0x20000bb0
 80067f0:	40020044 	.word	0x40020044
 80067f4:	20000bf8 	.word	0x20000bf8
 80067f8:	40020058 	.word	0x40020058

080067fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a1a      	ldr	r2, [pc, #104]	; (8006874 <HAL_TIM_Base_MspInit+0x78>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d114      	bne.n	8006838 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800680e:	4b1a      	ldr	r3, [pc, #104]	; (8006878 <HAL_TIM_Base_MspInit+0x7c>)
 8006810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006812:	4a19      	ldr	r2, [pc, #100]	; (8006878 <HAL_TIM_Base_MspInit+0x7c>)
 8006814:	f043 0304 	orr.w	r3, r3, #4
 8006818:	6593      	str	r3, [r2, #88]	; 0x58
 800681a:	4b17      	ldr	r3, [pc, #92]	; (8006878 <HAL_TIM_Base_MspInit+0x7c>)
 800681c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800681e:	f003 0304 	and.w	r3, r3, #4
 8006822:	60fb      	str	r3, [r7, #12]
 8006824:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8006826:	2200      	movs	r2, #0
 8006828:	2105      	movs	r1, #5
 800682a:	201e      	movs	r0, #30
 800682c:	f001 f9fc 	bl	8007c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006830:	201e      	movs	r0, #30
 8006832:	f001 fa15 	bl	8007c60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8006836:	e018      	b.n	800686a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a0f      	ldr	r2, [pc, #60]	; (800687c <HAL_TIM_Base_MspInit+0x80>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d113      	bne.n	800686a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006842:	4b0d      	ldr	r3, [pc, #52]	; (8006878 <HAL_TIM_Base_MspInit+0x7c>)
 8006844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006846:	4a0c      	ldr	r2, [pc, #48]	; (8006878 <HAL_TIM_Base_MspInit+0x7c>)
 8006848:	f043 0310 	orr.w	r3, r3, #16
 800684c:	6593      	str	r3, [r2, #88]	; 0x58
 800684e:	4b0a      	ldr	r3, [pc, #40]	; (8006878 <HAL_TIM_Base_MspInit+0x7c>)
 8006850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006852:	f003 0310 	and.w	r3, r3, #16
 8006856:	60bb      	str	r3, [r7, #8]
 8006858:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 7, 0);
 800685a:	2200      	movs	r2, #0
 800685c:	2107      	movs	r1, #7
 800685e:	2036      	movs	r0, #54	; 0x36
 8006860:	f001 f9e2 	bl	8007c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006864:	2036      	movs	r0, #54	; 0x36
 8006866:	f001 f9fb 	bl	8007c60 <HAL_NVIC_EnableIRQ>
}
 800686a:	bf00      	nop
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	40000800 	.word	0x40000800
 8006878:	40021000 	.word	0x40021000
 800687c:	40001000 	.word	0x40001000

08006880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b0ae      	sub	sp, #184	; 0xb8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006888:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800688c:	2200      	movs	r2, #0
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	605a      	str	r2, [r3, #4]
 8006892:	609a      	str	r2, [r3, #8]
 8006894:	60da      	str	r2, [r3, #12]
 8006896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006898:	f107 031c 	add.w	r3, r7, #28
 800689c:	2288      	movs	r2, #136	; 0x88
 800689e:	2100      	movs	r1, #0
 80068a0:	4618      	mov	r0, r3
 80068a2:	f00c fe6d 	bl	8013580 <memset>
  if(huart->Instance==USART2)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a74      	ldr	r2, [pc, #464]	; (8006a7c <HAL_UART_MspInit+0x1fc>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d16e      	bne.n	800698e <HAL_UART_MspInit+0x10e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80068b0:	2302      	movs	r3, #2
 80068b2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80068b4:	2300      	movs	r3, #0
 80068b6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80068b8:	f107 031c 	add.w	r3, r7, #28
 80068bc:	4618      	mov	r0, r3
 80068be:	f004 fa19 	bl	800acf4 <HAL_RCCEx_PeriphCLKConfig>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80068c8:	f7ff f8b8 	bl	8005a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80068cc:	4b6c      	ldr	r3, [pc, #432]	; (8006a80 <HAL_UART_MspInit+0x200>)
 80068ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d0:	4a6b      	ldr	r2, [pc, #428]	; (8006a80 <HAL_UART_MspInit+0x200>)
 80068d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068d6:	6593      	str	r3, [r2, #88]	; 0x58
 80068d8:	4b69      	ldr	r3, [pc, #420]	; (8006a80 <HAL_UART_MspInit+0x200>)
 80068da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e0:	61bb      	str	r3, [r7, #24]
 80068e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068e4:	4b66      	ldr	r3, [pc, #408]	; (8006a80 <HAL_UART_MspInit+0x200>)
 80068e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e8:	4a65      	ldr	r2, [pc, #404]	; (8006a80 <HAL_UART_MspInit+0x200>)
 80068ea:	f043 0301 	orr.w	r3, r3, #1
 80068ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068f0:	4b63      	ldr	r3, [pc, #396]	; (8006a80 <HAL_UART_MspInit+0x200>)
 80068f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	617b      	str	r3, [r7, #20]
 80068fa:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOG_TX_Pin|LOG_RX_Pin;
 80068fc:	230c      	movs	r3, #12
 80068fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006902:	2302      	movs	r3, #2
 8006904:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006908:	2300      	movs	r3, #0
 800690a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800690e:	2303      	movs	r3, #3
 8006910:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006914:	2307      	movs	r3, #7
 8006916:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800691a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800691e:	4619      	mov	r1, r3
 8006920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006924:	f001 fc2e 	bl	8008184 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8006928:	4b56      	ldr	r3, [pc, #344]	; (8006a84 <HAL_UART_MspInit+0x204>)
 800692a:	4a57      	ldr	r2, [pc, #348]	; (8006a88 <HAL_UART_MspInit+0x208>)
 800692c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800692e:	4b55      	ldr	r3, [pc, #340]	; (8006a84 <HAL_UART_MspInit+0x204>)
 8006930:	2202      	movs	r2, #2
 8006932:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006934:	4b53      	ldr	r3, [pc, #332]	; (8006a84 <HAL_UART_MspInit+0x204>)
 8006936:	2210      	movs	r2, #16
 8006938:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800693a:	4b52      	ldr	r3, [pc, #328]	; (8006a84 <HAL_UART_MspInit+0x204>)
 800693c:	2200      	movs	r2, #0
 800693e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006940:	4b50      	ldr	r3, [pc, #320]	; (8006a84 <HAL_UART_MspInit+0x204>)
 8006942:	2280      	movs	r2, #128	; 0x80
 8006944:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006946:	4b4f      	ldr	r3, [pc, #316]	; (8006a84 <HAL_UART_MspInit+0x204>)
 8006948:	2200      	movs	r2, #0
 800694a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800694c:	4b4d      	ldr	r3, [pc, #308]	; (8006a84 <HAL_UART_MspInit+0x204>)
 800694e:	2200      	movs	r2, #0
 8006950:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006952:	4b4c      	ldr	r3, [pc, #304]	; (8006a84 <HAL_UART_MspInit+0x204>)
 8006954:	2200      	movs	r2, #0
 8006956:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006958:	4b4a      	ldr	r3, [pc, #296]	; (8006a84 <HAL_UART_MspInit+0x204>)
 800695a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800695e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006960:	4848      	ldr	r0, [pc, #288]	; (8006a84 <HAL_UART_MspInit+0x204>)
 8006962:	f001 f98b 	bl	8007c7c <HAL_DMA_Init>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 800696c:	f7ff f866 	bl	8005a3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a44      	ldr	r2, [pc, #272]	; (8006a84 <HAL_UART_MspInit+0x204>)
 8006974:	66da      	str	r2, [r3, #108]	; 0x6c
 8006976:	4a43      	ldr	r2, [pc, #268]	; (8006a84 <HAL_UART_MspInit+0x204>)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800697c:	2200      	movs	r2, #0
 800697e:	2105      	movs	r1, #5
 8006980:	2026      	movs	r0, #38	; 0x26
 8006982:	f001 f951 	bl	8007c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006986:	2026      	movs	r0, #38	; 0x26
 8006988:	f001 f96a 	bl	8007c60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800698c:	e071      	b.n	8006a72 <HAL_UART_MspInit+0x1f2>
  else if(huart->Instance==USART3)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a3e      	ldr	r2, [pc, #248]	; (8006a8c <HAL_UART_MspInit+0x20c>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d16c      	bne.n	8006a72 <HAL_UART_MspInit+0x1f2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006998:	2304      	movs	r3, #4
 800699a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800699c:	2300      	movs	r3, #0
 800699e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80069a0:	f107 031c 	add.w	r3, r7, #28
 80069a4:	4618      	mov	r0, r3
 80069a6:	f004 f9a5 	bl	800acf4 <HAL_RCCEx_PeriphCLKConfig>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <HAL_UART_MspInit+0x134>
      Error_Handler();
 80069b0:	f7ff f844 	bl	8005a3c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80069b4:	4b32      	ldr	r3, [pc, #200]	; (8006a80 <HAL_UART_MspInit+0x200>)
 80069b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b8:	4a31      	ldr	r2, [pc, #196]	; (8006a80 <HAL_UART_MspInit+0x200>)
 80069ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069be:	6593      	str	r3, [r2, #88]	; 0x58
 80069c0:	4b2f      	ldr	r3, [pc, #188]	; (8006a80 <HAL_UART_MspInit+0x200>)
 80069c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069c8:	613b      	str	r3, [r7, #16]
 80069ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80069cc:	4b2c      	ldr	r3, [pc, #176]	; (8006a80 <HAL_UART_MspInit+0x200>)
 80069ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d0:	4a2b      	ldr	r2, [pc, #172]	; (8006a80 <HAL_UART_MspInit+0x200>)
 80069d2:	f043 0304 	orr.w	r3, r3, #4
 80069d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80069d8:	4b29      	ldr	r3, [pc, #164]	; (8006a80 <HAL_UART_MspInit+0x200>)
 80069da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069dc:	f003 0304 	and.w	r3, r3, #4
 80069e0:	60fb      	str	r3, [r7, #12]
 80069e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80069e4:	2330      	movs	r3, #48	; 0x30
 80069e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ea:	2302      	movs	r3, #2
 80069ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069f0:	2300      	movs	r3, #0
 80069f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069f6:	2303      	movs	r3, #3
 80069f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80069fc:	2307      	movs	r3, #7
 80069fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a02:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006a06:	4619      	mov	r1, r3
 8006a08:	4821      	ldr	r0, [pc, #132]	; (8006a90 <HAL_UART_MspInit+0x210>)
 8006a0a:	f001 fbbb 	bl	8008184 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8006a0e:	4b21      	ldr	r3, [pc, #132]	; (8006a94 <HAL_UART_MspInit+0x214>)
 8006a10:	4a21      	ldr	r2, [pc, #132]	; (8006a98 <HAL_UART_MspInit+0x218>)
 8006a12:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 8006a14:	4b1f      	ldr	r3, [pc, #124]	; (8006a94 <HAL_UART_MspInit+0x214>)
 8006a16:	2202      	movs	r2, #2
 8006a18:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a1a:	4b1e      	ldr	r3, [pc, #120]	; (8006a94 <HAL_UART_MspInit+0x214>)
 8006a1c:	2210      	movs	r2, #16
 8006a1e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a20:	4b1c      	ldr	r3, [pc, #112]	; (8006a94 <HAL_UART_MspInit+0x214>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006a26:	4b1b      	ldr	r3, [pc, #108]	; (8006a94 <HAL_UART_MspInit+0x214>)
 8006a28:	2280      	movs	r2, #128	; 0x80
 8006a2a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a2c:	4b19      	ldr	r3, [pc, #100]	; (8006a94 <HAL_UART_MspInit+0x214>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a32:	4b18      	ldr	r3, [pc, #96]	; (8006a94 <HAL_UART_MspInit+0x214>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006a38:	4b16      	ldr	r3, [pc, #88]	; (8006a94 <HAL_UART_MspInit+0x214>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006a3e:	4b15      	ldr	r3, [pc, #84]	; (8006a94 <HAL_UART_MspInit+0x214>)
 8006a40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006a46:	4813      	ldr	r0, [pc, #76]	; (8006a94 <HAL_UART_MspInit+0x214>)
 8006a48:	f001 f918 	bl	8007c7c <HAL_DMA_Init>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 8006a52:	f7fe fff3 	bl	8005a3c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a0e      	ldr	r2, [pc, #56]	; (8006a94 <HAL_UART_MspInit+0x214>)
 8006a5a:	66da      	str	r2, [r3, #108]	; 0x6c
 8006a5c:	4a0d      	ldr	r2, [pc, #52]	; (8006a94 <HAL_UART_MspInit+0x214>)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006a62:	2200      	movs	r2, #0
 8006a64:	2105      	movs	r1, #5
 8006a66:	2027      	movs	r0, #39	; 0x27
 8006a68:	f001 f8de 	bl	8007c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006a6c:	2027      	movs	r0, #39	; 0x27
 8006a6e:	f001 f8f7 	bl	8007c60 <HAL_NVIC_EnableIRQ>
}
 8006a72:	bf00      	nop
 8006a74:	37b8      	adds	r7, #184	; 0xb8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	40004400 	.word	0x40004400
 8006a80:	40021000 	.word	0x40021000
 8006a84:	20000de0 	.word	0x20000de0
 8006a88:	40020080 	.word	0x40020080
 8006a8c:	40004800 	.word	0x40004800
 8006a90:	48000800 	.word	0x48000800
 8006a94:	20000e28 	.word	0x20000e28
 8006a98:	4002001c 	.word	0x4002001c

08006a9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b08c      	sub	sp, #48	; 0x30
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8006aac:	2200      	movs	r2, #0
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	2019      	movs	r0, #25
 8006ab2:	f001 f8b9 	bl	8007c28 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006ab6:	2019      	movs	r0, #25
 8006ab8:	f001 f8d2 	bl	8007c60 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006abc:	4b1e      	ldr	r3, [pc, #120]	; (8006b38 <HAL_InitTick+0x9c>)
 8006abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ac0:	4a1d      	ldr	r2, [pc, #116]	; (8006b38 <HAL_InitTick+0x9c>)
 8006ac2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006ac6:	6613      	str	r3, [r2, #96]	; 0x60
 8006ac8:	4b1b      	ldr	r3, [pc, #108]	; (8006b38 <HAL_InitTick+0x9c>)
 8006aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ad0:	60fb      	str	r3, [r7, #12]
 8006ad2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006ad4:	f107 0210 	add.w	r2, r7, #16
 8006ad8:	f107 0314 	add.w	r3, r7, #20
 8006adc:	4611      	mov	r1, r2
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f004 f876 	bl	800abd0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006ae4:	f004 f85e 	bl	800aba4 <HAL_RCC_GetPCLK2Freq>
 8006ae8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aec:	4a13      	ldr	r2, [pc, #76]	; (8006b3c <HAL_InitTick+0xa0>)
 8006aee:	fba2 2303 	umull	r2, r3, r2, r3
 8006af2:	0c9b      	lsrs	r3, r3, #18
 8006af4:	3b01      	subs	r3, #1
 8006af6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8006af8:	4b11      	ldr	r3, [pc, #68]	; (8006b40 <HAL_InitTick+0xa4>)
 8006afa:	4a12      	ldr	r2, [pc, #72]	; (8006b44 <HAL_InitTick+0xa8>)
 8006afc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8006afe:	4b10      	ldr	r3, [pc, #64]	; (8006b40 <HAL_InitTick+0xa4>)
 8006b00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006b04:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8006b06:	4a0e      	ldr	r2, [pc, #56]	; (8006b40 <HAL_InitTick+0xa4>)
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8006b0c:	4b0c      	ldr	r3, [pc, #48]	; (8006b40 <HAL_InitTick+0xa4>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b12:	4b0b      	ldr	r3, [pc, #44]	; (8006b40 <HAL_InitTick+0xa4>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8006b18:	4809      	ldr	r0, [pc, #36]	; (8006b40 <HAL_InitTick+0xa4>)
 8006b1a:	f006 fccb 	bl	800d4b4 <HAL_TIM_Base_Init>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d104      	bne.n	8006b2e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8006b24:	4806      	ldr	r0, [pc, #24]	; (8006b40 <HAL_InitTick+0xa4>)
 8006b26:	f006 fd1d 	bl	800d564 <HAL_TIM_Base_Start_IT>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	e000      	b.n	8006b30 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3730      	adds	r7, #48	; 0x30
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	40021000 	.word	0x40021000
 8006b3c:	431bde83 	.word	0x431bde83
 8006b40:	20003644 	.word	0x20003644
 8006b44:	40012c00 	.word	0x40012c00

08006b48 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	af00      	add	r7, sp, #0
  /* Disable TIM1 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE);
 8006b4c:	4b06      	ldr	r3, [pc, #24]	; (8006b68 <HAL_SuspendTick+0x20>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68da      	ldr	r2, [r3, #12]
 8006b52:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <HAL_SuspendTick+0x20>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f022 0201 	bic.w	r2, r2, #1
 8006b5a:	60da      	str	r2, [r3, #12]
}
 8006b5c:	bf00      	nop
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	20003644 	.word	0x20003644

08006b6c <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	af00      	add	r7, sp, #0
  /* Enable TIM1 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8006b70:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <HAL_ResumeTick+0x20>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	4b05      	ldr	r3, [pc, #20]	; (8006b8c <HAL_ResumeTick+0x20>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0201 	orr.w	r2, r2, #1
 8006b7e:	60da      	str	r2, [r3, #12]
}
 8006b80:	bf00      	nop
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	20003644 	.word	0x20003644

08006b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006b90:	b480      	push	{r7}
 8006b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006b94:	e7fe      	b.n	8006b94 <NMI_Handler+0x4>

08006b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006b96:	b480      	push	{r7}
 8006b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006b9a:	e7fe      	b.n	8006b9a <HardFault_Handler+0x4>

08006b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006ba0:	e7fe      	b.n	8006ba0 <MemManage_Handler+0x4>

08006ba2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006ba6:	e7fe      	b.n	8006ba6 <BusFault_Handler+0x4>

08006ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006bac:	e7fe      	b.n	8006bac <UsageFault_Handler+0x4>

08006bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006bb2:	bf00      	nop
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8006bc0:	2002      	movs	r0, #2
 8006bc2:	f001 fcd3 	bl	800856c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8006bc6:	bf00      	nop
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 8006bce:	2004      	movs	r0, #4
 8006bd0:	f001 fccc 	bl	800856c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8006bd4:	bf00      	nop
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006bdc:	4802      	ldr	r0, [pc, #8]	; (8006be8 <DMA1_Channel2_IRQHandler+0x10>)
 8006bde:	f001 f9e4 	bl	8007faa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8006be2:	bf00      	nop
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	20000e28 	.word	0x20000e28

08006bec <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8006bf0:	4802      	ldr	r0, [pc, #8]	; (8006bfc <DMA1_Channel4_IRQHandler+0x10>)
 8006bf2:	f001 f9da 	bl	8007faa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006bf6:	bf00      	nop
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20000bb0 	.word	0x20000bb0

08006c00 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006c04:	4802      	ldr	r0, [pc, #8]	; (8006c10 <DMA1_Channel5_IRQHandler+0x10>)
 8006c06:	f001 f9d0 	bl	8007faa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8006c0a:	bf00      	nop
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	20000bf8 	.word	0x20000bf8

08006c14 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8006c18:	4802      	ldr	r0, [pc, #8]	; (8006c24 <DMA1_Channel6_IRQHandler+0x10>)
 8006c1a:	f001 f9c6 	bl	8007faa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8006c1e:	bf00      	nop
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	20000a34 	.word	0x20000a34

08006c28 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006c2c:	4802      	ldr	r0, [pc, #8]	; (8006c38 <DMA1_Channel7_IRQHandler+0x10>)
 8006c2e:	f001 f9bc 	bl	8007faa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8006c32:	bf00      	nop
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	20000de0 	.word	0x20000de0

08006c3c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006c40:	4802      	ldr	r0, [pc, #8]	; (8006c4c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8006c42:	f006 fcff 	bl	800d644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006c46:	bf00      	nop
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20003644 	.word	0x20003644

08006c50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006c54:	4802      	ldr	r0, [pc, #8]	; (8006c60 <TIM4_IRQHandler+0x10>)
 8006c56:	f006 fcf5 	bl	800d644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006c5a:	bf00      	nop
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	20000c40 	.word	0x20000c40

08006c64 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006c68:	4802      	ldr	r0, [pc, #8]	; (8006c74 <I2C1_EV_IRQHandler+0x10>)
 8006c6a:	f002 f849 	bl	8008d00 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8006c6e:	bf00      	nop
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	20000998 	.word	0x20000998

08006c78 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8006c7c:	4802      	ldr	r0, [pc, #8]	; (8006c88 <I2C1_ER_IRQHandler+0x10>)
 8006c7e:	f002 f859 	bl	8008d34 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8006c82:	bf00      	nop
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20000998 	.word	0x20000998

08006c8c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8006c90:	4802      	ldr	r0, [pc, #8]	; (8006c9c <SPI1_IRQHandler+0x10>)
 8006c92:	f005 ffd9 	bl	800cc48 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8006c96:	bf00      	nop
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20000aa0 	.word	0x20000aa0

08006ca0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8006ca4:	4802      	ldr	r0, [pc, #8]	; (8006cb0 <SPI2_IRQHandler+0x10>)
 8006ca6:	f005 ffcf 	bl	800cc48 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8006caa:	bf00      	nop
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	20000b04 	.word	0x20000b04

08006cb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006cb8:	4802      	ldr	r0, [pc, #8]	; (8006cc4 <USART2_IRQHandler+0x10>)
 8006cba:	f007 fa75 	bl	800e1a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006cbe:	bf00      	nop
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	20000cd8 	.word	0x20000cd8

08006cc8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006ccc:	4802      	ldr	r0, [pc, #8]	; (8006cd8 <USART3_IRQHandler+0x10>)
 8006cce:	f007 fa6b 	bl	800e1a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006cd2:	bf00      	nop
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000d5c 	.word	0x20000d5c

08006cdc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006ce0:	4802      	ldr	r0, [pc, #8]	; (8006cec <TIM6_DAC_IRQHandler+0x10>)
 8006ce2:	f006 fcaf 	bl	800d644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006ce6:	bf00      	nop
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	20000c8c 	.word	0x20000c8c

08006cf0 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006cf4:	4802      	ldr	r0, [pc, #8]	; (8006d00 <DMA2_Channel4_IRQHandler+0x10>)
 8006cf6:	f001 f958 	bl	8007faa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8006cfa:	bf00      	nop
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	20000b68 	.word	0x20000b68

08006d04 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8006d08:	4802      	ldr	r0, [pc, #8]	; (8006d14 <DMA2_Channel6_IRQHandler+0x10>)
 8006d0a:	f001 f94e 	bl	8007faa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8006d0e:	bf00      	nop
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	200009ec 	.word	0x200009ec

08006d18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	af00      	add	r7, sp, #0
	return 1;
 8006d1c:	2301      	movs	r3, #1
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <_kill>:

int _kill(int pid, int sig)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006d32:	f00c fa37 	bl	80131a4 <__errno>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2216      	movs	r2, #22
 8006d3a:	601a      	str	r2, [r3, #0]
	return -1;
 8006d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <_exit>:

void _exit (int status)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006d50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f7ff ffe7 	bl	8006d28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006d5a:	e7fe      	b.n	8006d5a <_exit+0x12>

08006d5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d68:	2300      	movs	r3, #0
 8006d6a:	617b      	str	r3, [r7, #20]
 8006d6c:	e00a      	b.n	8006d84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006d6e:	f3af 8000 	nop.w
 8006d72:	4601      	mov	r1, r0
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	1c5a      	adds	r2, r3, #1
 8006d78:	60ba      	str	r2, [r7, #8]
 8006d7a:	b2ca      	uxtb	r2, r1
 8006d7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	3301      	adds	r3, #1
 8006d82:	617b      	str	r3, [r7, #20]
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	dbf0      	blt.n	8006d6e <_read+0x12>
	}

return len;
 8006d8c:	687b      	ldr	r3, [r7, #4]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b086      	sub	sp, #24
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	60f8      	str	r0, [r7, #12]
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006da2:	2300      	movs	r3, #0
 8006da4:	617b      	str	r3, [r7, #20]
 8006da6:	e009      	b.n	8006dbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	60ba      	str	r2, [r7, #8]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	3301      	adds	r3, #1
 8006dba:	617b      	str	r3, [r7, #20]
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	dbf1      	blt.n	8006da8 <_write+0x12>
	}
	return len;
 8006dc4:	687b      	ldr	r3, [r7, #4]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <_close>:

int _close(int file)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b083      	sub	sp, #12
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
	return -1;
 8006dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b083      	sub	sp, #12
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006df6:	605a      	str	r2, [r3, #4]
	return 0;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <_isatty>:

int _isatty(int file)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b083      	sub	sp, #12
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
	return 1;
 8006e0e:	2301      	movs	r3, #1
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
	return 0;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
	...

08006e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006e40:	4a14      	ldr	r2, [pc, #80]	; (8006e94 <_sbrk+0x5c>)
 8006e42:	4b15      	ldr	r3, [pc, #84]	; (8006e98 <_sbrk+0x60>)
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006e4c:	4b13      	ldr	r3, [pc, #76]	; (8006e9c <_sbrk+0x64>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d102      	bne.n	8006e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006e54:	4b11      	ldr	r3, [pc, #68]	; (8006e9c <_sbrk+0x64>)
 8006e56:	4a12      	ldr	r2, [pc, #72]	; (8006ea0 <_sbrk+0x68>)
 8006e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006e5a:	4b10      	ldr	r3, [pc, #64]	; (8006e9c <_sbrk+0x64>)
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4413      	add	r3, r2
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d207      	bcs.n	8006e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006e68:	f00c f99c 	bl	80131a4 <__errno>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	220c      	movs	r2, #12
 8006e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e76:	e009      	b.n	8006e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006e78:	4b08      	ldr	r3, [pc, #32]	; (8006e9c <_sbrk+0x64>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006e7e:	4b07      	ldr	r3, [pc, #28]	; (8006e9c <_sbrk+0x64>)
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4413      	add	r3, r2
 8006e86:	4a05      	ldr	r2, [pc, #20]	; (8006e9c <_sbrk+0x64>)
 8006e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3718      	adds	r7, #24
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	20018000 	.word	0x20018000
 8006e98:	00000c00 	.word	0x00000c00
 8006e9c:	20003690 	.word	0x20003690
 8006ea0:	200085e8 	.word	0x200085e8

08006ea4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8006ea8:	4b06      	ldr	r3, [pc, #24]	; (8006ec4 <SystemInit+0x20>)
 8006eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eae:	4a05      	ldr	r2, [pc, #20]	; (8006ec4 <SystemInit+0x20>)
 8006eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8006eb8:	bf00      	nop
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	e000ed00 	.word	0xe000ed00

08006ec8 <W25_SELECT>:

extern void Report(const uint8_t addTime, const char *fmt, ...);

//------------------------------------------------------------------------------------------

void W25_SELECT()   { W25_SEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET);//set to 0
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ed2:	4802      	ldr	r0, [pc, #8]	; (8006edc <W25_SELECT+0x14>)
 8006ed4:	f001 fb18 	bl	8008508 <HAL_GPIO_WritePin>
 8006ed8:	bf00      	nop
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	48000400 	.word	0x48000400

08006ee0 <W25_UNSELECT>:
void W25_UNSELECT() { W25_UNSEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET);//set to 1
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006eea:	4802      	ldr	r0, [pc, #8]	; (8006ef4 <W25_UNSELECT+0x14>)
 8006eec:	f001 fb0c 	bl	8008508 <HAL_GPIO_WritePin>
 8006ef0:	bf00      	nop
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	48000400 	.word	0x48000400

08006ef8 <W25qxx_Spi>:
//void W25_SELECT()   { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET); }//set to 0
//void W25_UNSELECT() { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET); }//set to 1

//------------------------------------------------------------------------------------------
uint8_t W25qxx_Spi(uint8_t Data)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af02      	add	r7, sp, #8
 8006efe:	4603      	mov	r3, r0
 8006f00:	71fb      	strb	r3, [r7, #7]
uint8_t ret;

    if (HAL_SPI_TransmitReceive(portFLASH, &Data, &ret, 1, min_wait_ms) != HAL_OK) devError |= devSPI;
 8006f02:	4b0c      	ldr	r3, [pc, #48]	; (8006f34 <W25qxx_Spi+0x3c>)
 8006f04:	6818      	ldr	r0, [r3, #0]
 8006f06:	23fa      	movs	r3, #250	; 0xfa
 8006f08:	f107 020f 	add.w	r2, r7, #15
 8006f0c:	1df9      	adds	r1, r7, #7
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	2301      	movs	r3, #1
 8006f12:	f005 fa06 	bl	800c322 <HAL_SPI_TransmitReceive>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d006      	beq.n	8006f2a <W25qxx_Spi+0x32>
 8006f1c:	4b06      	ldr	r3, [pc, #24]	; (8006f38 <W25qxx_Spi+0x40>)
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	4b04      	ldr	r3, [pc, #16]	; (8006f38 <W25qxx_Spi+0x40>)
 8006f28:	801a      	strh	r2, [r3, #0]

    return ret;
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	2000000c 	.word	0x2000000c
 8006f38:	20001b08 	.word	0x20001b08

08006f3c <W25qxx_Reset>:
//------------------------------------------------------------------------------------------
void W25qxx_Reset(void)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
	W25qxx_Delay(100);
 8006f40:	2064      	movs	r0, #100	; 0x64
 8006f42:	f000 fd95 	bl	8007a70 <HAL_Delay>

	W25_SELECT();
 8006f46:	f7ff ffbf 	bl	8006ec8 <W25_SELECT>
		W25qxx_Spi(EN_RESET);
 8006f4a:	2066      	movs	r0, #102	; 0x66
 8006f4c:	f7ff ffd4 	bl	8006ef8 <W25qxx_Spi>
		W25qxx_Spi(CHIP_RESET);
 8006f50:	2099      	movs	r0, #153	; 0x99
 8006f52:	f7ff ffd1 	bl	8006ef8 <W25qxx_Spi>
	W25_UNSELECT();
 8006f56:	f7ff ffc3 	bl	8006ee0 <W25_UNSELECT>

	W25qxx_Delay(100);
 8006f5a:	2064      	movs	r0, #100	; 0x64
 8006f5c:	f000 fd88 	bl	8007a70 <HAL_Delay>
}
 8006f60:	bf00      	nop
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <W25qxx_ReadID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_ReadID(void)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
uint32_t Temp[3] = {0};
 8006f6a:	1d3b      	adds	r3, r7, #4
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	601a      	str	r2, [r3, #0]
 8006f70:	605a      	str	r2, [r3, #4]
 8006f72:	609a      	str	r2, [r3, #8]

    W25_SELECT();//set to 0
 8006f74:	f7ff ffa8 	bl	8006ec8 <W25_SELECT>

    W25qxx_Spi(JEDEC_ID);
 8006f78:	209f      	movs	r0, #159	; 0x9f
 8006f7a:	f7ff ffbd 	bl	8006ef8 <W25qxx_Spi>
    Temp[0] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006f7e:	20a5      	movs	r0, #165	; 0xa5
 8006f80:	f7ff ffba 	bl	8006ef8 <W25qxx_Spi>
 8006f84:	4603      	mov	r3, r0
 8006f86:	607b      	str	r3, [r7, #4]
    Temp[1] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006f88:	20a5      	movs	r0, #165	; 0xa5
 8006f8a:	f7ff ffb5 	bl	8006ef8 <W25qxx_Spi>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	60bb      	str	r3, [r7, #8]
    Temp[2] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006f92:	20a5      	movs	r0, #165	; 0xa5
 8006f94:	f7ff ffb0 	bl	8006ef8 <W25qxx_Spi>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	60fb      	str	r3, [r7, #12]

    W25_UNSELECT();//set to 1
 8006f9c:	f7ff ffa0 	bl	8006ee0 <W25_UNSELECT>

    return ((Temp[0] << 16) | (Temp[1] << 8) | Temp[2]);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	041a      	lsls	r2, r3, #16
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	021b      	lsls	r3, r3, #8
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4313      	orrs	r3, r2
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <W25qxx_ReadUniqID>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadUniqID(void)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
	uint8_t dat[] = {READ_UID, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE};
 8006fbe:	4a18      	ldr	r2, [pc, #96]	; (8007020 <W25qxx_ReadUniqID+0x68>)
 8006fc0:	463b      	mov	r3, r7
 8006fc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006fc6:	6018      	str	r0, [r3, #0]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	7019      	strb	r1, [r3, #0]
    W25_SELECT();
 8006fcc:	f7ff ff7c 	bl	8006ec8 <W25_SELECT>

    //W25qxx_Spi(READ_UID);
    //for (uint8_t i = 0; i < 4; i++) W25qxx_Spi(W25QXX_DUMMY_BYTE);
    //for (uint8_t i = 0; i < 8; i++) w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
    if (HAL_SPI_Transmit(portFLASH, dat, sizeof(dat), min_wait_ms) != HAL_OK) devError |= devSPI;
 8006fd0:	4b14      	ldr	r3, [pc, #80]	; (8007024 <W25qxx_ReadUniqID+0x6c>)
 8006fd2:	6818      	ldr	r0, [r3, #0]
 8006fd4:	23fa      	movs	r3, #250	; 0xfa
 8006fd6:	4639      	mov	r1, r7
 8006fd8:	2205      	movs	r2, #5
 8006fda:	f004 ff04 	bl	800bde6 <HAL_SPI_Transmit>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d006      	beq.n	8006ff2 <W25qxx_ReadUniqID+0x3a>
 8006fe4:	4b10      	ldr	r3, [pc, #64]	; (8007028 <W25qxx_ReadUniqID+0x70>)
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	4b0e      	ldr	r3, [pc, #56]	; (8007028 <W25qxx_ReadUniqID+0x70>)
 8006ff0:	801a      	strh	r2, [r3, #0]
    if (HAL_SPI_Receive(portFLASH, w25qxx.UniqID, 8, min_wait_ms) != HAL_OK) devError |= devSPI;
 8006ff2:	4b0c      	ldr	r3, [pc, #48]	; (8007024 <W25qxx_ReadUniqID+0x6c>)
 8006ff4:	6818      	ldr	r0, [r3, #0]
 8006ff6:	23fa      	movs	r3, #250	; 0xfa
 8006ff8:	2208      	movs	r2, #8
 8006ffa:	490c      	ldr	r1, [pc, #48]	; (800702c <W25qxx_ReadUniqID+0x74>)
 8006ffc:	f005 f861 	bl	800c0c2 <HAL_SPI_Receive>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d006      	beq.n	8007014 <W25qxx_ReadUniqID+0x5c>
 8007006:	4b08      	ldr	r3, [pc, #32]	; (8007028 <W25qxx_ReadUniqID+0x70>)
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800700e:	b29a      	uxth	r2, r3
 8007010:	4b05      	ldr	r3, [pc, #20]	; (8007028 <W25qxx_ReadUniqID+0x70>)
 8007012:	801a      	strh	r2, [r3, #0]

    W25_UNSELECT();
 8007014:	f7ff ff64 	bl	8006ee0 <W25_UNSELECT>
}
 8007018:	bf00      	nop
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	080182f0 	.word	0x080182f0
 8007024:	2000000c 	.word	0x2000000c
 8007028:	20001b08 	.word	0x20001b08
 800702c:	20003695 	.word	0x20003695

08007030 <W25qxx_WriteEnable>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteEnable(void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	af00      	add	r7, sp, #0
    W25_SELECT();
 8007034:	f7ff ff48 	bl	8006ec8 <W25_SELECT>

    W25qxx_Spi(WRITE_ENABLE);
 8007038:	2006      	movs	r0, #6
 800703a:	f7ff ff5d 	bl	8006ef8 <W25qxx_Spi>

    W25_UNSELECT();
 800703e:	f7ff ff4f 	bl	8006ee0 <W25_UNSELECT>

    W25qxx_Delay(1);
 8007042:	2001      	movs	r0, #1
 8007044:	f000 fd14 	bl	8007a70 <HAL_Delay>
}
 8007048:	bf00      	nop
 800704a:	bd80      	pop	{r7, pc}

0800704c <W25qxx_ReadStatusRegister>:

    W25qxx_Delay(1);
}
//------------------------------------------------------------------------------------------
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusReg)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	4603      	mov	r3, r0
 8007054:	71fb      	strb	r3, [r7, #7]
uint8_t status = 0;
 8007056:	2300      	movs	r3, #0
 8007058:	73fb      	strb	r3, [r7, #15]

    W25_SELECT();
 800705a:	f7ff ff35 	bl	8006ec8 <W25_SELECT>

    switch (SelectStatusReg) {
 800705e:	79fb      	ldrb	r3, [r7, #7]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d002      	beq.n	800706a <W25qxx_ReadStatusRegister+0x1e>
 8007064:	2b02      	cmp	r3, #2
 8007066:	d00d      	beq.n	8007084 <W25qxx_ReadStatusRegister+0x38>
 8007068:	e019      	b.n	800709e <W25qxx_ReadStatusRegister+0x52>
        case 1:
            W25qxx_Spi(READ_STAT_REG1);
 800706a:	2005      	movs	r0, #5
 800706c:	f7ff ff44 	bl	8006ef8 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8007070:	20a5      	movs	r0, #165	; 0xa5
 8007072:	f7ff ff41 	bl	8006ef8 <W25qxx_Spi>
 8007076:	4603      	mov	r3, r0
 8007078:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister1 = status;
 800707a:	4a12      	ldr	r2, [pc, #72]	; (80070c4 <W25qxx_ReadStatusRegister+0x78>)
 800707c:	7bfb      	ldrb	r3, [r7, #15]
 800707e:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
        break;
 8007082:	e018      	b.n	80070b6 <W25qxx_ReadStatusRegister+0x6a>
        case 2:
            W25qxx_Spi(READ_STAT_REG2);
 8007084:	2035      	movs	r0, #53	; 0x35
 8007086:	f7ff ff37 	bl	8006ef8 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800708a:	20a5      	movs	r0, #165	; 0xa5
 800708c:	f7ff ff34 	bl	8006ef8 <W25qxx_Spi>
 8007090:	4603      	mov	r3, r0
 8007092:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister2 = status;
 8007094:	4a0b      	ldr	r2, [pc, #44]	; (80070c4 <W25qxx_ReadStatusRegister+0x78>)
 8007096:	7bfb      	ldrb	r3, [r7, #15]
 8007098:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        break;
 800709c:	e00b      	b.n	80070b6 <W25qxx_ReadStatusRegister+0x6a>
        default : {
            W25qxx_Spi(READ_STAT_REG3);
 800709e:	2015      	movs	r0, #21
 80070a0:	f7ff ff2a 	bl	8006ef8 <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80070a4:	20a5      	movs	r0, #165	; 0xa5
 80070a6:	f7ff ff27 	bl	8006ef8 <W25qxx_Spi>
 80070aa:	4603      	mov	r3, r0
 80070ac:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister3 = status;
 80070ae:	4a05      	ldr	r2, [pc, #20]	; (80070c4 <W25qxx_ReadStatusRegister+0x78>)
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
 80070b2:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        }
    }

    W25_UNSELECT();
 80070b6:	f7ff ff13 	bl	8006ee0 <W25_UNSELECT>

    return status;
 80070ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	20003694 	.word	0x20003694

080070c8 <W25qxx_WaitForWriteEnd>:

    W25_UNSELECT();
}
//------------------------------------------------------------------------------------------
void W25qxx_WaitForWriteEnd(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
    W25qxx_Delay(1);
 80070cc:	2001      	movs	r0, #1
 80070ce:	f000 fccf 	bl	8007a70 <HAL_Delay>

    W25_SELECT();
 80070d2:	f7ff fef9 	bl	8006ec8 <W25_SELECT>

    W25qxx_Spi(READ_STAT_REG1);
 80070d6:	2005      	movs	r0, #5
 80070d8:	f7ff ff0e 	bl	8006ef8 <W25qxx_Spi>
    do
    {
        w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80070dc:	20a5      	movs	r0, #165	; 0xa5
 80070de:	f7ff ff0b 	bl	8006ef8 <W25qxx_Spi>
 80070e2:	4603      	mov	r3, r0
 80070e4:	461a      	mov	r2, r3
 80070e6:	4b08      	ldr	r3, [pc, #32]	; (8007108 <W25qxx_WaitForWriteEnd+0x40>)
 80070e8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        W25qxx_Delay(1);
 80070ec:	2001      	movs	r0, #1
 80070ee:	f000 fcbf 	bl	8007a70 <HAL_Delay>
    } while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80070f2:	4b05      	ldr	r3, [pc, #20]	; (8007108 <W25qxx_WaitForWriteEnd+0x40>)
 80070f4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80070f8:	f003 0301 	and.w	r3, r3, #1
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1ed      	bne.n	80070dc <W25qxx_WaitForWriteEnd+0x14>

    W25_UNSELECT();
 8007100:	f7ff feee 	bl	8006ee0 <W25_UNSELECT>
}
 8007104:	bf00      	nop
 8007106:	bd80      	pop	{r7, pc}
 8007108:	20003694 	.word	0x20003694

0800710c <W25qxx_Init>:
//------------------------------------------------------------------------------------------
bool W25qxx_Init(void)
{
 800710c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800710e:	b089      	sub	sp, #36	; 0x24
 8007110:	af06      	add	r7, sp, #24

	W25qxx_Reset();
 8007112:	f7ff ff13 	bl	8006f3c <W25qxx_Reset>


    w25qxx.Lock = 1;
 8007116:	4b54      	ldr	r3, [pc, #336]	; (8007268 <W25qxx_Init+0x15c>)
 8007118:	2201      	movs	r2, #1
 800711a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    bool ret = false;
 800711e:	2300      	movs	r3, #0
 8007120:	71fb      	strb	r3, [r7, #7]

    W25_UNSELECT();
 8007122:	f7ff fedd 	bl	8006ee0 <W25_UNSELECT>

    uint32_t id = W25qxx_ReadID() & 0xffff;
 8007126:	f7ff ff1d 	bl	8006f64 <W25qxx_ReadID>
 800712a:	4603      	mov	r3, r0
 800712c:	b29b      	uxth	r3, r3
 800712e:	603b      	str	r3, [r7, #0]
//#ifdef W25QXX_DEBUG
    Report(1, "w25qxx Init Begin... Chip ID:0x%X\r\n", id);
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	494e      	ldr	r1, [pc, #312]	; (800726c <W25qxx_Init+0x160>)
 8007134:	2001      	movs	r0, #1
 8007136:	f7fc f877 	bl	8003228 <Report>
//#endif
    id &= 0xff;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	b2db      	uxtb	r3, r3
 800713e:	603b      	str	r3, [r7, #0]
    id -= 0x10;//0x4010;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	3b10      	subs	r3, #16
 8007144:	603b      	str	r3, [r7, #0]
    if (id > 0x0a) id = 0;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b0a      	cmp	r3, #10
 800714a:	d901      	bls.n	8007150 <W25qxx_Init+0x44>
 800714c:	2300      	movs	r3, #0
 800714e:	603b      	str	r3, [r7, #0]
    w25qxx.ID         = id;              //W25Q10..W25Q512
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	b2da      	uxtb	r2, r3
 8007154:	4b44      	ldr	r3, [pc, #272]	; (8007268 <W25qxx_Init+0x15c>)
 8007156:	701a      	strb	r2, [r3, #0]
    w25qxx.BlockCount = all_chipBLK[id]; //0..1024;
 8007158:	4a45      	ldr	r2, [pc, #276]	; (8007270 <W25qxx_Init+0x164>)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007160:	4a41      	ldr	r2, [pc, #260]	; (8007268 <W25qxx_Init+0x15c>)
 8007162:	f8c2 301b 	str.w	r3, [r2, #27]
//#ifdef W25QXX_DEBUG
    Report(1, "Chip %s\r\n", all_chipID[id]);
 8007166:	4a43      	ldr	r2, [pc, #268]	; (8007274 <W25qxx_Init+0x168>)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800716e:	461a      	mov	r2, r3
 8007170:	4941      	ldr	r1, [pc, #260]	; (8007278 <W25qxx_Init+0x16c>)
 8007172:	2001      	movs	r0, #1
 8007174:	f7fc f858 	bl	8003228 <Report>
//#endif

    if (id) {
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d06b      	beq.n	8007256 <W25qxx_Init+0x14a>
    	w25qxx.PageSize = 256;
 800717e:	4b3a      	ldr	r3, [pc, #232]	; (8007268 <W25qxx_Init+0x15c>)
 8007180:	2200      	movs	r2, #0
 8007182:	725a      	strb	r2, [r3, #9]
 8007184:	2200      	movs	r2, #0
 8007186:	f042 0201 	orr.w	r2, r2, #1
 800718a:	729a      	strb	r2, [r3, #10]
    	w25qxx.SectorSize = 0x1000;
 800718c:	4b36      	ldr	r3, [pc, #216]	; (8007268 <W25qxx_Init+0x15c>)
 800718e:	2200      	movs	r2, #0
 8007190:	73da      	strb	r2, [r3, #15]
 8007192:	2200      	movs	r2, #0
 8007194:	f042 0210 	orr.w	r2, r2, #16
 8007198:	741a      	strb	r2, [r3, #16]
 800719a:	2200      	movs	r2, #0
 800719c:	745a      	strb	r2, [r3, #17]
 800719e:	2200      	movs	r2, #0
 80071a0:	749a      	strb	r2, [r3, #18]
    	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80071a2:	4b31      	ldr	r3, [pc, #196]	; (8007268 <W25qxx_Init+0x15c>)
 80071a4:	f8d3 301b 	ldr.w	r3, [r3, #27]
 80071a8:	011b      	lsls	r3, r3, #4
 80071aa:	4a2f      	ldr	r2, [pc, #188]	; (8007268 <W25qxx_Init+0x15c>)
 80071ac:	f8c2 3013 	str.w	r3, [r2, #19]
    	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80071b0:	4b2d      	ldr	r3, [pc, #180]	; (8007268 <W25qxx_Init+0x15c>)
 80071b2:	f8d3 3013 	ldr.w	r3, [r3, #19]
 80071b6:	4a2c      	ldr	r2, [pc, #176]	; (8007268 <W25qxx_Init+0x15c>)
 80071b8:	f8d2 200f 	ldr.w	r2, [r2, #15]
 80071bc:	fb02 f303 	mul.w	r3, r2, r3
 80071c0:	4a29      	ldr	r2, [pc, #164]	; (8007268 <W25qxx_Init+0x15c>)
 80071c2:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 80071c6:	b292      	uxth	r2, r2
 80071c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80071cc:	4a26      	ldr	r2, [pc, #152]	; (8007268 <W25qxx_Init+0x15c>)
 80071ce:	f8c2 300b 	str.w	r3, [r2, #11]
    	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80071d2:	4b25      	ldr	r3, [pc, #148]	; (8007268 <W25qxx_Init+0x15c>)
 80071d4:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80071d8:	011b      	lsls	r3, r3, #4
 80071da:	4a23      	ldr	r2, [pc, #140]	; (8007268 <W25qxx_Init+0x15c>)
 80071dc:	f8c2 3017 	str.w	r3, [r2, #23]
    	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80071e0:	4b21      	ldr	r3, [pc, #132]	; (8007268 <W25qxx_Init+0x15c>)
 80071e2:	f8d3 3013 	ldr.w	r3, [r3, #19]
 80071e6:	4a20      	ldr	r2, [pc, #128]	; (8007268 <W25qxx_Init+0x15c>)
 80071e8:	f8d2 200f 	ldr.w	r2, [r2, #15]
 80071ec:	fb02 f303 	mul.w	r3, r2, r3
 80071f0:	0a9b      	lsrs	r3, r3, #10
 80071f2:	4a1d      	ldr	r2, [pc, #116]	; (8007268 <W25qxx_Init+0x15c>)
 80071f4:	f8c2 301f 	str.w	r3, [r2, #31]
    	W25qxx_ReadUniqID();
 80071f8:	f7ff fede 	bl	8006fb8 <W25qxx_ReadUniqID>
    	W25qxx_ReadStatusRegister(1);
 80071fc:	2001      	movs	r0, #1
 80071fe:	f7ff ff25 	bl	800704c <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(2);
 8007202:	2002      	movs	r0, #2
 8007204:	f7ff ff22 	bl	800704c <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(3);
 8007208:	2003      	movs	r0, #3
 800720a:	f7ff ff1f 	bl	800704c <W25qxx_ReadStatusRegister>
    	ret = true;
 800720e:	2301      	movs	r3, #1
 8007210:	71fb      	strb	r3, [r7, #7]
                 "\tSector Size:\t%u bytes\r\n"
                 "\tSector Count:\t%u\r\n"
                 "\tBlock Size:\t%u bytes\r\n"
                 "\tBlock Count:\t%u\r\n"
                 "\tCapacity:\t%u KBytes\r\n",
                 w25qxx.PageSize,
 8007212:	4b15      	ldr	r3, [pc, #84]	; (8007268 <W25qxx_Init+0x15c>)
 8007214:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007218:	b29b      	uxth	r3, r3
    	Report(0,"\tPage Size:\t%u bytes\r\n"
 800721a:	461e      	mov	r6, r3
 800721c:	4b12      	ldr	r3, [pc, #72]	; (8007268 <W25qxx_Init+0x15c>)
 800721e:	f8d3 500b 	ldr.w	r5, [r3, #11]
 8007222:	4b11      	ldr	r3, [pc, #68]	; (8007268 <W25qxx_Init+0x15c>)
 8007224:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007228:	4a0f      	ldr	r2, [pc, #60]	; (8007268 <W25qxx_Init+0x15c>)
 800722a:	f8d2 2013 	ldr.w	r2, [r2, #19]
 800722e:	490e      	ldr	r1, [pc, #56]	; (8007268 <W25qxx_Init+0x15c>)
 8007230:	f8d1 1017 	ldr.w	r1, [r1, #23]
 8007234:	480c      	ldr	r0, [pc, #48]	; (8007268 <W25qxx_Init+0x15c>)
 8007236:	f8d0 001b 	ldr.w	r0, [r0, #27]
 800723a:	4c0b      	ldr	r4, [pc, #44]	; (8007268 <W25qxx_Init+0x15c>)
 800723c:	f8d4 401f 	ldr.w	r4, [r4, #31]
 8007240:	9404      	str	r4, [sp, #16]
 8007242:	9003      	str	r0, [sp, #12]
 8007244:	9102      	str	r1, [sp, #8]
 8007246:	9201      	str	r2, [sp, #4]
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	462b      	mov	r3, r5
 800724c:	4632      	mov	r2, r6
 800724e:	490b      	ldr	r1, [pc, #44]	; (800727c <W25qxx_Init+0x170>)
 8007250:	2000      	movs	r0, #0
 8007252:	f7fb ffe9 	bl	8003228 <Report>
                 w25qxx.BlockCount,
                 w25qxx.CapacityInKiloByte);
//#endif
    }

    w25qxx.Lock = 0;
 8007256:	4b04      	ldr	r3, [pc, #16]	; (8007268 <W25qxx_Init+0x15c>)
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return ret;
 800725e:	79fb      	ldrb	r3, [r7, #7]
}
 8007260:	4618      	mov	r0, r3
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007268:	20003694 	.word	0x20003694
 800726c:	080182f8 	.word	0x080182f8
 8007270:	0801940c 	.word	0x0801940c
 8007274:	20000144 	.word	0x20000144
 8007278:	0801831c 	.word	0x0801831c
 800727c:	08018328 	.word	0x08018328

08007280 <W25qxx_getChipID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_getChipID()
{
 8007280:	b480      	push	{r7}
 8007282:	af00      	add	r7, sp, #0
	return (uint32_t)w25qxx.ID;
 8007284:	4b03      	ldr	r3, [pc, #12]	; (8007294 <W25qxx_getChipID+0x14>)
 8007286:	781b      	ldrb	r3, [r3, #0]
}
 8007288:	4618      	mov	r0, r3
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	20003694 	.word	0x20003694

08007298 <W25qxx_getSectorCount>:
uint32_t W25qxx_getSectorCount()
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
	return w25qxx.SectorCount;
 800729c:	4b03      	ldr	r3, [pc, #12]	; (80072ac <W25qxx_getSectorCount+0x14>)
 800729e:	f8d3 3013 	ldr.w	r3, [r3, #19]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	20003694 	.word	0x20003694

080072b0 <W25qxx_getSectorSize>:
uint32_t W25qxx_getSectorSize()
{
 80072b0:	b480      	push	{r7}
 80072b2:	af00      	add	r7, sp, #0
	return w25qxx.SectorSize;
 80072b4:	4b03      	ldr	r3, [pc, #12]	; (80072c4 <W25qxx_getSectorSize+0x14>)
 80072b6:	f8d3 300f 	ldr.w	r3, [r3, #15]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	20003694 	.word	0x20003694

080072c8 <W25qxx_getPageSize>:
uint32_t W25qxx_getPageCount()
{
	return w25qxx.PageCount;
}
uint32_t W25qxx_getPageSize()
{
 80072c8:	b480      	push	{r7}
 80072ca:	af00      	add	r7, sp, #0
	return w25qxx.PageSize;
 80072cc:	4b04      	ldr	r3, [pc, #16]	; (80072e0 <W25qxx_getPageSize+0x18>)
 80072ce:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80072d2:	b29b      	uxth	r3, r3
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	20003694 	.word	0x20003694

080072e4 <W25qxx_EraseSector>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 80072ec:	e002      	b.n	80072f4 <W25qxx_EraseSector+0x10>
 80072ee:	2001      	movs	r0, #1
 80072f0:	f000 fbbe 	bl	8007a70 <HAL_Delay>
 80072f4:	4b1c      	ldr	r3, [pc, #112]	; (8007368 <W25qxx_EraseSector+0x84>)
 80072f6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1f7      	bne.n	80072ee <W25qxx_EraseSector+0xa>

    w25qxx.Lock = 1;
 80072fe:	4b1a      	ldr	r3, [pc, #104]	; (8007368 <W25qxx_EraseSector+0x84>)
 8007300:	2201      	movs	r2, #1
 8007302:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#ifdef W25QXX_DEBUG
    uint32_t StartTime = HAL_GetTick();
    Report(1, "%u Begin...", SectorAddr);
#endif

    W25qxx_WaitForWriteEnd();
 8007306:	f7ff fedf 	bl	80070c8 <W25qxx_WaitForWriteEnd>
    SectorAddr = SectorAddr * w25qxx.SectorSize;
 800730a:	4b17      	ldr	r3, [pc, #92]	; (8007368 <W25qxx_EraseSector+0x84>)
 800730c:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	fb02 f303 	mul.w	r3, r2, r3
 8007316:	607b      	str	r3, [r7, #4]
    W25qxx_WriteEnable();
 8007318:	f7ff fe8a 	bl	8007030 <W25qxx_WriteEnable>

    W25_SELECT();
 800731c:	f7ff fdd4 	bl	8006ec8 <W25_SELECT>
    W25qxx_Spi(SECTOR_ERASE);
 8007320:	2020      	movs	r0, #32
 8007322:	f7ff fde9 	bl	8006ef8 <W25qxx_Spi>
    //if (w25qxx.ID >= W25Q256) W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
    W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	0c1b      	lsrs	r3, r3, #16
 800732a:	b2db      	uxtb	r3, r3
 800732c:	4618      	mov	r0, r3
 800732e:	f7ff fde3 	bl	8006ef8 <W25qxx_Spi>
    W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	0a1b      	lsrs	r3, r3, #8
 8007336:	b2db      	uxtb	r3, r3
 8007338:	4618      	mov	r0, r3
 800733a:	f7ff fddd 	bl	8006ef8 <W25qxx_Spi>
    W25qxx_Spi(SectorAddr & 0xFF);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	b2db      	uxtb	r3, r3
 8007342:	4618      	mov	r0, r3
 8007344:	f7ff fdd8 	bl	8006ef8 <W25qxx_Spi>
    W25_UNSELECT();
 8007348:	f7ff fdca 	bl	8006ee0 <W25_UNSELECT>

    W25qxx_WaitForWriteEnd();
 800734c:	f7ff febc 	bl	80070c8 <W25qxx_WaitForWriteEnd>

#ifdef W25QXX_DEBUG
    uint32_t dur = HAL_GetTick() - StartTime;
    Report(0, " done after %u ms (%u sec)!\r\n", dur, dur / 1000);
#endif
    W25qxx_Delay(1);
 8007350:	2001      	movs	r0, #1
 8007352:	f000 fb8d 	bl	8007a70 <HAL_Delay>

    w25qxx.Lock = 0;
 8007356:	4b04      	ldr	r3, [pc, #16]	; (8007368 <W25qxx_EraseSector+0x84>)
 8007358:	2200      	movs	r2, #0
 800735a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800735e:	bf00      	nop
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	20003694 	.word	0x20003694

0800736c <W25qxx_SectorToPage>:
{
    return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//------------------------------------------------------------------------------------------
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
    return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8007374:	4b08      	ldr	r3, [pc, #32]	; (8007398 <W25qxx_SectorToPage+0x2c>)
 8007376:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	fb02 f303 	mul.w	r3, r2, r3
 8007380:	4a05      	ldr	r2, [pc, #20]	; (8007398 <W25qxx_SectorToPage+0x2c>)
 8007382:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8007386:	b292      	uxth	r2, r2
 8007388:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800738c:	4618      	mov	r0, r3
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	20003694 	.word	0x20003694

0800739c <W25qxx_IsEmptySector>:

    return false;
}
//------------------------------------------------------------------------------------------
bool W25qxx_IsEmptySector(uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToCheck_up_to_SectorSize)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b090      	sub	sp, #64	; 0x40
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 80073a8:	e002      	b.n	80073b0 <W25qxx_IsEmptySector+0x14>
 80073aa:	2001      	movs	r0, #1
 80073ac:	f000 fb60 	bl	8007a70 <HAL_Delay>
 80073b0:	4b59      	ldr	r3, [pc, #356]	; (8007518 <W25qxx_IsEmptySector+0x17c>)
 80073b2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1f7      	bne.n	80073aa <W25qxx_IsEmptySector+0xe>

    w25qxx.Lock = 1;
 80073ba:	4b57      	ldr	r3, [pc, #348]	; (8007518 <W25qxx_IsEmptySector+0x17c>)
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( (NumByteToCheck_up_to_SectorSize > w25qxx.SectorSize) || (!NumByteToCheck_up_to_SectorSize) )
 80073c2:	4b55      	ldr	r3, [pc, #340]	; (8007518 <W25qxx_IsEmptySector+0x17c>)
 80073c4:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d802      	bhi.n	80073d4 <W25qxx_IsEmptySector+0x38>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d103      	bne.n	80073dc <W25qxx_IsEmptySector+0x40>
                NumByteToCheck_up_to_SectorSize = w25qxx.SectorSize;
 80073d4:	4b50      	ldr	r3, [pc, #320]	; (8007518 <W25qxx_IsEmptySector+0x17c>)
 80073d6:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80073da:	607b      	str	r3, [r7, #4]
    uint32_t StartTime = HAL_GetTick();
#endif

    uint8_t pBuffer[32];
    uint32_t i, WorkAddress;
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073e0:	e040      	b.n	8007464 <W25qxx_IsEmptySector+0xc8>

    	W25_SELECT();
 80073e2:	f7ff fd71 	bl	8006ec8 <W25_SELECT>
        WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 80073e6:	4b4c      	ldr	r3, [pc, #304]	; (8007518 <W25qxx_IsEmptySector+0x17c>)
 80073e8:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	fb02 f303 	mul.w	r3, r2, r3
 80073f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073f4:	4413      	add	r3, r2
 80073f6:	637b      	str	r3, [r7, #52]	; 0x34
        W25qxx_Spi(DATA_READ);//FAST_READ);
 80073f8:	2003      	movs	r0, #3
 80073fa:	f7ff fd7d 	bl	8006ef8 <W25qxx_Spi>
        //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
        W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80073fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007400:	0c1b      	lsrs	r3, r3, #16
 8007402:	b2db      	uxtb	r3, r3
 8007404:	4618      	mov	r0, r3
 8007406:	f7ff fd77 	bl	8006ef8 <W25qxx_Spi>
        W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 800740a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800740c:	0a1b      	lsrs	r3, r3, #8
 800740e:	b2db      	uxtb	r3, r3
 8007410:	4618      	mov	r0, r3
 8007412:	f7ff fd71 	bl	8006ef8 <W25qxx_Spi>
        W25qxx_Spi(WorkAddress & 0xFF);
 8007416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007418:	b2db      	uxtb	r3, r3
 800741a:	4618      	mov	r0, r3
 800741c:	f7ff fd6c 	bl	8006ef8 <W25qxx_Spi>
        //W25qxx_Spi(0);
        HAL_SPI_Receive(portFLASH, pBuffer, sizeof(pBuffer), min_wait_ms);
 8007420:	4b3e      	ldr	r3, [pc, #248]	; (800751c <W25qxx_IsEmptySector+0x180>)
 8007422:	6818      	ldr	r0, [r3, #0]
 8007424:	23fa      	movs	r3, #250	; 0xfa
 8007426:	f107 0114 	add.w	r1, r7, #20
 800742a:	2220      	movs	r2, #32
 800742c:	f004 fe49 	bl	800c0c2 <HAL_SPI_Receive>
        W25_UNSELECT();
 8007430:	f7ff fd56 	bl	8006ee0 <W25_UNSELECT>

        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 8007434:	2300      	movs	r3, #0
 8007436:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800743a:	e00c      	b.n	8007456 <W25qxx_IsEmptySector+0xba>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 800743c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007440:	3340      	adds	r3, #64	; 0x40
 8007442:	443b      	add	r3, r7
 8007444:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8007448:	2bff      	cmp	r3, #255	; 0xff
 800744a:	d159      	bne.n	8007500 <W25qxx_IsEmptySector+0x164>
        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 800744c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007450:	3301      	adds	r3, #1
 8007452:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007456:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800745a:	2b1f      	cmp	r3, #31
 800745c:	d9ee      	bls.n	800743c <W25qxx_IsEmptySector+0xa0>
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 800745e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007460:	3320      	adds	r3, #32
 8007462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007464:	4b2c      	ldr	r3, [pc, #176]	; (8007518 <W25qxx_IsEmptySector+0x17c>)
 8007466:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800746a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800746c:	429a      	cmp	r2, r3
 800746e:	d3b8      	bcc.n	80073e2 <W25qxx_IsEmptySector+0x46>
        }
    }
    if ((w25qxx.SectorSize + OffsetInByte) % sizeof(pBuffer) != 0) {
 8007470:	4b29      	ldr	r3, [pc, #164]	; (8007518 <W25qxx_IsEmptySector+0x17c>)
 8007472:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	4413      	add	r3, r2
 800747a:	f003 031f 	and.w	r3, r3, #31
 800747e:	2b00      	cmp	r3, #0
 8007480:	d038      	beq.n	80074f4 <W25qxx_IsEmptySector+0x158>
        i -= sizeof(pBuffer);
 8007482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007484:	3b20      	subs	r3, #32
 8007486:	63fb      	str	r3, [r7, #60]	; 0x3c
        for( ; i < w25qxx.SectorSize; i++) {
 8007488:	e02e      	b.n	80074e8 <W25qxx_IsEmptySector+0x14c>

            W25_SELECT();
 800748a:	f7ff fd1d 	bl	8006ec8 <W25_SELECT>
            WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 800748e:	4b22      	ldr	r3, [pc, #136]	; (8007518 <W25qxx_IsEmptySector+0x17c>)
 8007490:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	fb02 f303 	mul.w	r3, r2, r3
 800749a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800749c:	4413      	add	r3, r2
 800749e:	637b      	str	r3, [r7, #52]	; 0x34
            W25qxx_Spi(DATA_READ);//FAST_READ);
 80074a0:	2003      	movs	r0, #3
 80074a2:	f7ff fd29 	bl	8006ef8 <W25qxx_Spi>
            //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
            W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80074a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a8:	0c1b      	lsrs	r3, r3, #16
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7ff fd23 	bl	8006ef8 <W25qxx_Spi>
            W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 80074b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b4:	0a1b      	lsrs	r3, r3, #8
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7ff fd1d 	bl	8006ef8 <W25qxx_Spi>
            W25qxx_Spi(WorkAddress & 0xFF);
 80074be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7ff fd18 	bl	8006ef8 <W25qxx_Spi>
            //W25qxx_Spi(0);
            HAL_SPI_Receive(portFLASH, pBuffer, 1, min_wait_ms);
 80074c8:	4b14      	ldr	r3, [pc, #80]	; (800751c <W25qxx_IsEmptySector+0x180>)
 80074ca:	6818      	ldr	r0, [r3, #0]
 80074cc:	23fa      	movs	r3, #250	; 0xfa
 80074ce:	f107 0114 	add.w	r1, r7, #20
 80074d2:	2201      	movs	r2, #1
 80074d4:	f004 fdf5 	bl	800c0c2 <HAL_SPI_Receive>
            W25_UNSELECT();
 80074d8:	f7ff fd02 	bl	8006ee0 <W25_UNSELECT>

            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 80074dc:	7d3b      	ldrb	r3, [r7, #20]
 80074de:	2bff      	cmp	r3, #255	; 0xff
 80074e0:	d110      	bne.n	8007504 <W25qxx_IsEmptySector+0x168>
        for( ; i < w25qxx.SectorSize; i++) {
 80074e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e4:	3301      	adds	r3, #1
 80074e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074e8:	4b0b      	ldr	r3, [pc, #44]	; (8007518 <W25qxx_IsEmptySector+0x17c>)
 80074ea:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80074ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d3ca      	bcc.n	800748a <W25qxx_IsEmptySector+0xee>
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 80074f4:	4b08      	ldr	r3, [pc, #32]	; (8007518 <W25qxx_IsEmptySector+0x17c>)
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return true;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e007      	b.n	8007510 <W25qxx_IsEmptySector+0x174>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 8007500:	bf00      	nop
 8007502:	e000      	b.n	8007506 <W25qxx_IsEmptySector+0x16a>
            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 8007504:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Not Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 8007506:	4b04      	ldr	r3, [pc, #16]	; (8007518 <W25qxx_IsEmptySector+0x17c>)
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return false;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3740      	adds	r7, #64	; 0x40
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	20003694 	.word	0x20003694
 800751c:	2000000c 	.word	0x2000000c

08007520 <W25qxx_WritePage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
 800752c:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 800752e:	e002      	b.n	8007536 <W25qxx_WritePage+0x16>
 8007530:	2001      	movs	r0, #1
 8007532:	f000 fa9d 	bl	8007a70 <HAL_Delay>
 8007536:	4b4d      	ldr	r3, [pc, #308]	; (800766c <W25qxx_WritePage+0x14c>)
 8007538:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1f7      	bne.n	8007530 <W25qxx_WritePage+0x10>

    w25qxx.Lock = 1;
 8007540:	4b4a      	ldr	r3, [pc, #296]	; (800766c <W25qxx_WritePage+0x14c>)
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( ((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || !NumByteToWrite_up_to_PageSize )
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4413      	add	r3, r2
 800754e:	4a47      	ldr	r2, [pc, #284]	; (800766c <W25qxx_WritePage+0x14c>)
 8007550:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8007554:	b292      	uxth	r2, r2
 8007556:	4293      	cmp	r3, r2
 8007558:	d802      	bhi.n	8007560 <W25qxx_WritePage+0x40>
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d107      	bne.n	8007570 <W25qxx_WritePage+0x50>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8007560:	4b42      	ldr	r3, [pc, #264]	; (800766c <W25qxx_WritePage+0x14c>)
 8007562:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007566:	b29b      	uxth	r3, r3
 8007568:	461a      	mov	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	603b      	str	r3, [r7, #0]
    if ( (OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize )
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	4413      	add	r3, r2
 8007576:	4a3d      	ldr	r2, [pc, #244]	; (800766c <W25qxx_WritePage+0x14c>)
 8007578:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800757c:	b292      	uxth	r2, r2
 800757e:	4293      	cmp	r3, r2
 8007580:	d907      	bls.n	8007592 <W25qxx_WritePage+0x72>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8007582:	4b3a      	ldr	r3, [pc, #232]	; (800766c <W25qxx_WritePage+0x14c>)
 8007584:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007588:	b29b      	uxth	r3, r3
 800758a:	461a      	mov	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	603b      	str	r3, [r7, #0]
    Report(1, "%s WritePage:0x%X(%u), Offset:%u ,Writes %u Bytes, begin...\r\n",
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
    uint32_t StartTime = HAL_GetTick();
#endif

    W25qxx_WaitForWriteEnd();
 8007592:	f7ff fd99 	bl	80070c8 <W25qxx_WaitForWriteEnd>
    W25qxx_WriteEnable();
 8007596:	f7ff fd4b 	bl	8007030 <W25qxx_WriteEnable>

    Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 800759a:	4b34      	ldr	r3, [pc, #208]	; (800766c <W25qxx_WritePage+0x14c>)
 800759c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	461a      	mov	r2, r3
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	fb02 f303 	mul.w	r3, r2, r3
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	4413      	add	r3, r2
 80075ae:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi((Page_Address & 0xFF00) >> 8);
    W25qxx_Spi(Page_Address&0xFF);
    HAL_SPI_Transmit(portFLASH, pBuffer, NumByteToWrite_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();*/

    uint16_t lens = NumByteToWrite_up_to_PageSize + PAGE_HDR_BYTES;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	3304      	adds	r3, #4
 80075b6:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 80075b8:	2300      	movs	r3, #0
 80075ba:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = PAGE_PROG;
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	613a      	str	r2, [r7, #16]
 80075c2:	4a2b      	ldr	r2, [pc, #172]	; (8007670 <W25qxx_WritePage+0x150>)
 80075c4:	2102      	movs	r1, #2
 80075c6:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	0c19      	lsrs	r1, r3, #16
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	1c5a      	adds	r2, r3, #1
 80075d0:	613a      	str	r2, [r7, #16]
 80075d2:	b2c9      	uxtb	r1, r1
 80075d4:	4a26      	ldr	r2, [pc, #152]	; (8007670 <W25qxx_WritePage+0x150>)
 80075d6:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	0a19      	lsrs	r1, r3, #8
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	1c5a      	adds	r2, r3, #1
 80075e0:	613a      	str	r2, [r7, #16]
 80075e2:	b2c9      	uxtb	r1, r1
 80075e4:	4a22      	ldr	r2, [pc, #136]	; (8007670 <W25qxx_WritePage+0x150>)
 80075e6:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	613a      	str	r2, [r7, #16]
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	b2d1      	uxtb	r1, r2
 80075f2:	4a1f      	ldr	r2, [pc, #124]	; (8007670 <W25qxx_WritePage+0x150>)
 80075f4:	54d1      	strb	r1, [r2, r3]
    memcpy(&pageTmp[PAGE_HDR_BYTES], pBuffer, NumByteToWrite_up_to_PageSize);//w25qxx.PageSize);
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	68f9      	ldr	r1, [r7, #12]
 80075fa:	481e      	ldr	r0, [pc, #120]	; (8007674 <W25qxx_WritePage+0x154>)
 80075fc:	f00b ffb2 	bl	8013564 <memcpy>

    spiRdy = 0;
 8007600:	4b1d      	ldr	r3, [pc, #116]	; (8007678 <W25qxx_WritePage+0x158>)
 8007602:	2200      	movs	r2, #0
 8007604:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 8007606:	4b1d      	ldr	r3, [pc, #116]	; (800767c <W25qxx_WritePage+0x15c>)
 8007608:	2201      	movs	r2, #1
 800760a:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 800760c:	f7ff fc5c 	bl	8006ec8 <W25_SELECT>
    if (w25_withDMA) {
 8007610:	4b1a      	ldr	r3, [pc, #104]	; (800767c <W25qxx_WritePage+0x15c>)
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d012      	beq.n	800763e <W25qxx_WritePage+0x11e>
    	HAL_SPI_Transmit_DMA(portFLASH, pageTmp, lens);
 8007618:	4b19      	ldr	r3, [pc, #100]	; (8007680 <W25qxx_WritePage+0x160>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	8afa      	ldrh	r2, [r7, #22]
 800761e:	4914      	ldr	r1, [pc, #80]	; (8007670 <W25qxx_WritePage+0x150>)
 8007620:	4618      	mov	r0, r3
 8007622:	f005 f891 	bl	800c748 <HAL_SPI_Transmit_DMA>
    	while (!spiRdy) {
 8007626:	e002      	b.n	800762e <W25qxx_WritePage+0x10e>
    		W25qxx_Delay(1);
 8007628:	2001      	movs	r0, #1
 800762a:	f000 fa21 	bl	8007a70 <HAL_Delay>
    	while (!spiRdy) {
 800762e:	4b12      	ldr	r3, [pc, #72]	; (8007678 <W25qxx_WritePage+0x158>)
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d0f8      	beq.n	8007628 <W25qxx_WritePage+0x108>
    	}
w25_withDMA = 0;
 8007636:	4b11      	ldr	r3, [pc, #68]	; (800767c <W25qxx_WritePage+0x15c>)
 8007638:	2200      	movs	r2, #0
 800763a:	701a      	strb	r2, [r3, #0]
 800763c:	e00d      	b.n	800765a <W25qxx_WritePage+0x13a>
    } else {
    	HAL_SPI_Transmit(portFLASH, pageTmp, lens, min_wait_ms);
 800763e:	4b10      	ldr	r3, [pc, #64]	; (8007680 <W25qxx_WritePage+0x160>)
 8007640:	6818      	ldr	r0, [r3, #0]
 8007642:	23fa      	movs	r3, #250	; 0xfa
 8007644:	8afa      	ldrh	r2, [r7, #22]
 8007646:	490a      	ldr	r1, [pc, #40]	; (8007670 <W25qxx_WritePage+0x150>)
 8007648:	f004 fbcd 	bl	800bde6 <HAL_SPI_Transmit>

    	W25_UNSELECT();
 800764c:	f7ff fc48 	bl	8006ee0 <W25_UNSELECT>

    	W25qxx_WaitForWriteEnd();
 8007650:	f7ff fd3a 	bl	80070c8 <W25qxx_WaitForWriteEnd>

    	spiRdy = 1;
 8007654:	4b08      	ldr	r3, [pc, #32]	; (8007678 <W25qxx_WritePage+0x158>)
 8007656:	2201      	movs	r2, #1
 8007658:	701a      	strb	r2, [r3, #0]
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif
    }

    w25qxx.Lock = 0;
 800765a:	4b04      	ldr	r3, [pc, #16]	; (800766c <W25qxx_WritePage+0x14c>)
 800765c:	2200      	movs	r2, #0
 800765e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8007662:	bf00      	nop
 8007664:	3718      	adds	r7, #24
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	20003694 	.word	0x20003694
 8007670:	200036bc 	.word	0x200036bc
 8007674:	200036c0 	.word	0x200036c0
 8007678:	200000f8 	.word	0x200000f8
 800767c:	200037c1 	.word	0x200037c1
 8007680:	2000000c 	.word	0x2000000c

08007684 <W25qxx_WriteSector>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b088      	sub	sp, #32
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
 8007690:	603b      	str	r3, [r7, #0]
    if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToWrite_up_to_SectorSize)
 8007692:	4b31      	ldr	r3, [pc, #196]	; (8007758 <W25qxx_WriteSector+0xd4>)
 8007694:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	429a      	cmp	r2, r3
 800769c:	d802      	bhi.n	80076a4 <W25qxx_WriteSector+0x20>
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d103      	bne.n	80076ac <W25qxx_WriteSector+0x28>
                NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 80076a4:	4b2c      	ldr	r3, [pc, #176]	; (8007758 <W25qxx_WriteSector+0xd4>)
 80076a6:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80076aa:	603b      	str	r3, [r7, #0]
    Report(1, "%s WriteSector:0x%X(%u), Offset:%u ,Write %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 80076ac:	4b2a      	ldr	r3, [pc, #168]	; (8007758 <W25qxx_WriteSector+0xd4>)
 80076ae:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d24b      	bcs.n	8007750 <W25qxx_WriteSector+0xcc>
        return;
    }

    int32_t BytesToWrite;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	441a      	add	r2, r3
 80076be:	4b26      	ldr	r3, [pc, #152]	; (8007758 <W25qxx_WriteSector+0xd4>)
 80076c0:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d906      	bls.n	80076d6 <W25qxx_WriteSector+0x52>
        BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 80076c8:	4b23      	ldr	r3, [pc, #140]	; (8007758 <W25qxx_WriteSector+0xd4>)
 80076ca:	f8d3 200f 	ldr.w	r2, [r3, #15]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	61fb      	str	r3, [r7, #28]
 80076d4:	e001      	b.n	80076da <W25qxx_WriteSector+0x56>
    else
        BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80076da:	68b8      	ldr	r0, [r7, #8]
 80076dc:	f7ff fe46 	bl	800736c <W25qxx_SectorToPage>
 80076e0:	4602      	mov	r2, r0
 80076e2:	4b1d      	ldr	r3, [pc, #116]	; (8007758 <W25qxx_WriteSector+0xd4>)
 80076e4:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	4619      	mov	r1, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80076f2:	4413      	add	r3, r2
 80076f4:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 80076f6:	4b18      	ldr	r3, [pc, #96]	; (8007758 <W25qxx_WriteSector+0xd4>)
 80076f8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	461a      	mov	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	fbb3 f1f2 	udiv	r1, r3, r2
 8007706:	fb01 f202 	mul.w	r2, r1, r2
 800770a:	1a9b      	subs	r3, r3, r2
 800770c:	61bb      	str	r3, [r7, #24]

    do
    {
        W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	6979      	ldr	r1, [r7, #20]
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f7ff ff03 	bl	8007520 <W25qxx_WritePage>
        StartPage++;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	3301      	adds	r3, #1
 800771e:	617b      	str	r3, [r7, #20]
        BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8007720:	4b0d      	ldr	r3, [pc, #52]	; (8007758 <W25qxx_WriteSector+0xd4>)
 8007722:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007726:	b29b      	uxth	r3, r3
 8007728:	461a      	mov	r2, r3
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	1a9a      	subs	r2, r3, r2
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	4413      	add	r3, r2
 8007732:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 8007734:	4b08      	ldr	r3, [pc, #32]	; (8007758 <W25qxx_WriteSector+0xd4>)
 8007736:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800773a:	b29b      	uxth	r3, r3
 800773c:	461a      	mov	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	4413      	add	r3, r2
 8007742:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 8007744:	2300      	movs	r3, #0
 8007746:	61bb      	str	r3, [r7, #24]
    } while(BytesToWrite > 0);
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	2b00      	cmp	r3, #0
 800774c:	dcdf      	bgt.n	800770e <W25qxx_WriteSector+0x8a>
 800774e:	e000      	b.n	8007752 <W25qxx_WriteSector+0xce>
        return;
 8007750:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s Done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 8007752:	3720      	adds	r7, #32
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	20003694 	.word	0x20003694

0800775c <W25qxx_ReadPage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b088      	sub	sp, #32
 8007760:	af02      	add	r7, sp, #8
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
 8007768:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 800776a:	e002      	b.n	8007772 <W25qxx_ReadPage+0x16>
 800776c:	2001      	movs	r0, #1
 800776e:	f000 f97f 	bl	8007a70 <HAL_Delay>
 8007772:	4b51      	ldr	r3, [pc, #324]	; (80078b8 <W25qxx_ReadPage+0x15c>)
 8007774:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1f7      	bne.n	800776c <W25qxx_ReadPage+0x10>

    w25qxx.Lock = 1;
 800777c:	4b4e      	ldr	r3, [pc, #312]	; (80078b8 <W25qxx_ReadPage+0x15c>)
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || !NumByteToRead_up_to_PageSize)
 8007784:	4b4c      	ldr	r3, [pc, #304]	; (80078b8 <W25qxx_ReadPage+0x15c>)
 8007786:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800778a:	b29b      	uxth	r3, r3
 800778c:	461a      	mov	r2, r3
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	4293      	cmp	r3, r2
 8007792:	d802      	bhi.n	800779a <W25qxx_ReadPage+0x3e>
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d104      	bne.n	80077a4 <W25qxx_ReadPage+0x48>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800779a:	4b47      	ldr	r3, [pc, #284]	; (80078b8 <W25qxx_ReadPage+0x15c>)
 800779c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	603b      	str	r3, [r7, #0]
    if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	4413      	add	r3, r2
 80077aa:	4a43      	ldr	r2, [pc, #268]	; (80078b8 <W25qxx_ReadPage+0x15c>)
 80077ac:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 80077b0:	b292      	uxth	r2, r2
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d907      	bls.n	80077c6 <W25qxx_ReadPage+0x6a>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80077b6:	4b40      	ldr	r3, [pc, #256]	; (80078b8 <W25qxx_ReadPage+0x15c>)
 80077b8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80077bc:	b29b      	uxth	r3, r3
 80077be:	461a      	mov	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	603b      	str	r3, [r7, #0]
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
    //W25qxx_Delay(100);
    uint32_t StartTime = HAL_GetTick();
#endif

    Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80077c6:	4b3c      	ldr	r3, [pc, #240]	; (80078b8 <W25qxx_ReadPage+0x15c>)
 80077c8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	461a      	mov	r2, r3
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	fb02 f303 	mul.w	r3, r2, r3
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	4413      	add	r3, r2
 80077da:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi(Page_Address & 0xFF);
    //W25qxx_Spi(0);
    HAL_SPI_Receive(portFLASH, pBuffer, NumByteToRead_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();
    */
    memset(pageTmp, 0, sizeof(pageTmp));
 80077dc:	f240 1205 	movw	r2, #261	; 0x105
 80077e0:	2100      	movs	r1, #0
 80077e2:	4836      	ldr	r0, [pc, #216]	; (80078bc <W25qxx_ReadPage+0x160>)
 80077e4:	f00b fecc 	bl	8013580 <memset>
    uint16_t lens = NumByteToRead_up_to_PageSize + PAGE_HDR_BYTES;// + 1;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	3304      	adds	r3, #4
 80077ee:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 80077f0:	2300      	movs	r3, #0
 80077f2:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = DATA_READ;//FAST_READ;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	1c5a      	adds	r2, r3, #1
 80077f8:	613a      	str	r2, [r7, #16]
 80077fa:	4a30      	ldr	r2, [pc, #192]	; (80078bc <W25qxx_ReadPage+0x160>)
 80077fc:	2103      	movs	r1, #3
 80077fe:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	0c19      	lsrs	r1, r3, #16
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	613a      	str	r2, [r7, #16]
 800780a:	b2c9      	uxtb	r1, r1
 800780c:	4a2b      	ldr	r2, [pc, #172]	; (80078bc <W25qxx_ReadPage+0x160>)
 800780e:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	0a19      	lsrs	r1, r3, #8
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	1c5a      	adds	r2, r3, #1
 8007818:	613a      	str	r2, [r7, #16]
 800781a:	b2c9      	uxtb	r1, r1
 800781c:	4a27      	ldr	r2, [pc, #156]	; (80078bc <W25qxx_ReadPage+0x160>)
 800781e:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	1c5a      	adds	r2, r3, #1
 8007824:	613a      	str	r2, [r7, #16]
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	b2d1      	uxtb	r1, r2
 800782a:	4a24      	ldr	r2, [pc, #144]	; (80078bc <W25qxx_ReadPage+0x160>)
 800782c:	54d1      	strb	r1, [r2, r3]
    //pageTmp[idx++] = 0;
    spiRdy = 0;
 800782e:	4b24      	ldr	r3, [pc, #144]	; (80078c0 <W25qxx_ReadPage+0x164>)
 8007830:	2200      	movs	r2, #0
 8007832:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 8007834:	4b23      	ldr	r3, [pc, #140]	; (80078c4 <W25qxx_ReadPage+0x168>)
 8007836:	2201      	movs	r2, #1
 8007838:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 800783a:	f7ff fb45 	bl	8006ec8 <W25_SELECT>
    if (w25_withDMA) {
 800783e:	4b21      	ldr	r3, [pc, #132]	; (80078c4 <W25qxx_ReadPage+0x168>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d012      	beq.n	800786c <W25qxx_ReadPage+0x110>
    	HAL_SPI_TransmitReceive_DMA(portFLASH, pageTmp, pageTmp, lens);
 8007846:	4b20      	ldr	r3, [pc, #128]	; (80078c8 <W25qxx_ReadPage+0x16c>)
 8007848:	6818      	ldr	r0, [r3, #0]
 800784a:	8afb      	ldrh	r3, [r7, #22]
 800784c:	4a1b      	ldr	r2, [pc, #108]	; (80078bc <W25qxx_ReadPage+0x160>)
 800784e:	491b      	ldr	r1, [pc, #108]	; (80078bc <W25qxx_ReadPage+0x160>)
 8007850:	f005 f86e 	bl	800c930 <HAL_SPI_TransmitReceive_DMA>
    	while (!spiRdy) {
 8007854:	e002      	b.n	800785c <W25qxx_ReadPage+0x100>
    		W25qxx_Delay(1);
 8007856:	2001      	movs	r0, #1
 8007858:	f000 f90a 	bl	8007a70 <HAL_Delay>
    	while (!spiRdy) {
 800785c:	4b18      	ldr	r3, [pc, #96]	; (80078c0 <W25qxx_ReadPage+0x164>)
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d0f8      	beq.n	8007856 <W25qxx_ReadPage+0xfa>
    	}
w25_withDMA = 0;
 8007864:	4b17      	ldr	r3, [pc, #92]	; (80078c4 <W25qxx_ReadPage+0x168>)
 8007866:	2200      	movs	r2, #0
 8007868:	701a      	strb	r2, [r3, #0]
 800786a:	e017      	b.n	800789c <W25qxx_ReadPage+0x140>
    } else {
    	if (HAL_SPI_TransmitReceive(portFLASH, pageTmp, pageTmp, lens, min_wait_ms) != HAL_OK) devError |= devSPI;
 800786c:	4b16      	ldr	r3, [pc, #88]	; (80078c8 <W25qxx_ReadPage+0x16c>)
 800786e:	6818      	ldr	r0, [r3, #0]
 8007870:	22fa      	movs	r2, #250	; 0xfa
 8007872:	8afb      	ldrh	r3, [r7, #22]
 8007874:	9200      	str	r2, [sp, #0]
 8007876:	4a11      	ldr	r2, [pc, #68]	; (80078bc <W25qxx_ReadPage+0x160>)
 8007878:	4910      	ldr	r1, [pc, #64]	; (80078bc <W25qxx_ReadPage+0x160>)
 800787a:	f004 fd52 	bl	800c322 <HAL_SPI_TransmitReceive>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d006      	beq.n	8007892 <W25qxx_ReadPage+0x136>
 8007884:	4b11      	ldr	r3, [pc, #68]	; (80078cc <W25qxx_ReadPage+0x170>)
 8007886:	881b      	ldrh	r3, [r3, #0]
 8007888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800788c:	b29a      	uxth	r2, r3
 800788e:	4b0f      	ldr	r3, [pc, #60]	; (80078cc <W25qxx_ReadPage+0x170>)
 8007890:	801a      	strh	r2, [r3, #0]
    	W25_UNSELECT();
 8007892:	f7ff fb25 	bl	8006ee0 <W25_UNSELECT>

    	spiRdy = 1;
 8007896:	4b0a      	ldr	r3, [pc, #40]	; (80078c0 <W25qxx_ReadPage+0x164>)
 8007898:	2201      	movs	r2, #1
 800789a:	701a      	strb	r2, [r3, #0]
    }
	memcpy(pBuffer, &pageTmp[PAGE_HDR_BYTES], NumByteToRead_up_to_PageSize);//w25qxx.PageSize);
 800789c:	683a      	ldr	r2, [r7, #0]
 800789e:	490c      	ldr	r1, [pc, #48]	; (80078d0 <W25qxx_ReadPage+0x174>)
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f00b fe5f 	bl	8013564 <memcpy>
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif


    w25qxx.Lock = 0;
 80078a6:	4b04      	ldr	r3, [pc, #16]	; (80078b8 <W25qxx_ReadPage+0x15c>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80078ae:	bf00      	nop
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	20003694 	.word	0x20003694
 80078bc:	200036bc 	.word	0x200036bc
 80078c0:	200000f8 	.word	0x200000f8
 80078c4:	200037c1 	.word	0x200037c1
 80078c8:	2000000c 	.word	0x2000000c
 80078cc:	20001b08 	.word	0x20001b08
 80078d0:	200036c0 	.word	0x200036c0

080078d4 <W25qxx_ReadSector>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b088      	sub	sp, #32
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
 80078e0:	603b      	str	r3, [r7, #0]
    if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToRead_up_to_SectorSize)
 80078e2:	4b31      	ldr	r3, [pc, #196]	; (80079a8 <W25qxx_ReadSector+0xd4>)
 80078e4:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d802      	bhi.n	80078f4 <W25qxx_ReadSector+0x20>
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d103      	bne.n	80078fc <W25qxx_ReadSector+0x28>
                NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80078f4:	4b2c      	ldr	r3, [pc, #176]	; (80079a8 <W25qxx_ReadSector+0xd4>)
 80078f6:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80078fa:	603b      	str	r3, [r7, #0]
    Report(1, "%s:0x%X(%u), Offset:%u ,Read %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 80078fc:	4b2a      	ldr	r3, [pc, #168]	; (80079a8 <W25qxx_ReadSector+0xd4>)
 80078fe:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	429a      	cmp	r2, r3
 8007906:	d24b      	bcs.n	80079a0 <W25qxx_ReadSector+0xcc>
        return;
    }

    int32_t BytesToRead;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	441a      	add	r2, r3
 800790e:	4b26      	ldr	r3, [pc, #152]	; (80079a8 <W25qxx_ReadSector+0xd4>)
 8007910:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007914:	429a      	cmp	r2, r3
 8007916:	d906      	bls.n	8007926 <W25qxx_ReadSector+0x52>
        BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8007918:	4b23      	ldr	r3, [pc, #140]	; (80079a8 <W25qxx_ReadSector+0xd4>)
 800791a:	f8d3 200f 	ldr.w	r2, [r3, #15]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	61fb      	str	r3, [r7, #28]
 8007924:	e001      	b.n	800792a <W25qxx_ReadSector+0x56>
    else
        BytesToRead = NumByteToRead_up_to_SectorSize;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800792a:	68b8      	ldr	r0, [r7, #8]
 800792c:	f7ff fd1e 	bl	800736c <W25qxx_SectorToPage>
 8007930:	4602      	mov	r2, r0
 8007932:	4b1d      	ldr	r3, [pc, #116]	; (80079a8 <W25qxx_ReadSector+0xd4>)
 8007934:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007938:	b29b      	uxth	r3, r3
 800793a:	4619      	mov	r1, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007942:	4413      	add	r3, r2
 8007944:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 8007946:	4b18      	ldr	r3, [pc, #96]	; (80079a8 <W25qxx_ReadSector+0xd4>)
 8007948:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800794c:	b29b      	uxth	r3, r3
 800794e:	461a      	mov	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	fbb3 f1f2 	udiv	r1, r3, r2
 8007956:	fb01 f202 	mul.w	r2, r1, r2
 800795a:	1a9b      	subs	r3, r3, r2
 800795c:	61bb      	str	r3, [r7, #24]
    do {
        W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	6979      	ldr	r1, [r7, #20]
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f7ff fef9 	bl	800775c <W25qxx_ReadPage>
        StartPage++;
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	3301      	adds	r3, #1
 800796e:	617b      	str	r3, [r7, #20]
        BytesToRead -= w25qxx.PageSize - LocalOffset;
 8007970:	4b0d      	ldr	r3, [pc, #52]	; (80079a8 <W25qxx_ReadSector+0xd4>)
 8007972:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007976:	b29b      	uxth	r3, r3
 8007978:	461a      	mov	r2, r3
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	1a9a      	subs	r2, r3, r2
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	4413      	add	r3, r2
 8007982:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 8007984:	4b08      	ldr	r3, [pc, #32]	; (80079a8 <W25qxx_ReadSector+0xd4>)
 8007986:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800798a:	b29b      	uxth	r3, r3
 800798c:	461a      	mov	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	4413      	add	r3, r2
 8007992:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 8007994:	2300      	movs	r3, #0
 8007996:	61bb      	str	r3, [r7, #24]
    } while(BytesToRead > 0);
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	2b00      	cmp	r3, #0
 800799c:	dcdf      	bgt.n	800795e <W25qxx_ReadSector+0x8a>
 800799e:	e000      	b.n	80079a2 <W25qxx_ReadSector+0xce>
        return;
 80079a0:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 80079a2:	3720      	adds	r7, #32
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	20003694 	.word	0x20003694

080079ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80079ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80079e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80079b0:	f7ff fa78 	bl	8006ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80079b4:	480c      	ldr	r0, [pc, #48]	; (80079e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80079b6:	490d      	ldr	r1, [pc, #52]	; (80079ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80079b8:	4a0d      	ldr	r2, [pc, #52]	; (80079f0 <LoopForever+0xe>)
  movs r3, #0
 80079ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80079bc:	e002      	b.n	80079c4 <LoopCopyDataInit>

080079be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80079be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80079c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80079c2:	3304      	adds	r3, #4

080079c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80079c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80079c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80079c8:	d3f9      	bcc.n	80079be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80079ca:	4a0a      	ldr	r2, [pc, #40]	; (80079f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80079cc:	4c0a      	ldr	r4, [pc, #40]	; (80079f8 <LoopForever+0x16>)
  movs r3, #0
 80079ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80079d0:	e001      	b.n	80079d6 <LoopFillZerobss>

080079d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80079d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80079d4:	3204      	adds	r2, #4

080079d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80079d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80079d8:	d3fb      	bcc.n	80079d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80079da:	f00b fd8b 	bl	80134f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80079de:	f7fa fbe5 	bl	80021ac <main>

080079e2 <LoopForever>:

LoopForever:
    b LoopForever
 80079e2:	e7fe      	b.n	80079e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80079e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80079e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80079ec:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 80079f0:	080198ec 	.word	0x080198ec
  ldr r2, =_sbss
 80079f4:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 80079f8:	200085e8 	.word	0x200085e8

080079fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80079fc:	e7fe      	b.n	80079fc <ADC1_2_IRQHandler>

080079fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b082      	sub	sp, #8
 8007a02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007a08:	2003      	movs	r0, #3
 8007a0a:	f000 f902 	bl	8007c12 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007a0e:	200f      	movs	r0, #15
 8007a10:	f7ff f844 	bl	8006a9c <HAL_InitTick>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d002      	beq.n	8007a20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	71fb      	strb	r3, [r7, #7]
 8007a1e:	e001      	b.n	8007a24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007a20:	f7fe fcb0 	bl	8006384 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007a24:	79fb      	ldrb	r3, [r7, #7]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
	...

08007a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007a30:	b480      	push	{r7}
 8007a32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007a34:	4b06      	ldr	r3, [pc, #24]	; (8007a50 <HAL_IncTick+0x20>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	461a      	mov	r2, r3
 8007a3a:	4b06      	ldr	r3, [pc, #24]	; (8007a54 <HAL_IncTick+0x24>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4413      	add	r3, r2
 8007a40:	4a04      	ldr	r2, [pc, #16]	; (8007a54 <HAL_IncTick+0x24>)
 8007a42:	6013      	str	r3, [r2, #0]
}
 8007a44:	bf00      	nop
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	20000174 	.word	0x20000174
 8007a54:	200037c4 	.word	0x200037c4

08007a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8007a5c:	4b03      	ldr	r3, [pc, #12]	; (8007a6c <HAL_GetTick+0x14>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	200037c4 	.word	0x200037c4

08007a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007a78:	f7ff ffee 	bl	8007a58 <HAL_GetTick>
 8007a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a88:	d005      	beq.n	8007a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8007a8a:	4b0a      	ldr	r3, [pc, #40]	; (8007ab4 <HAL_Delay+0x44>)
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4413      	add	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007a96:	bf00      	nop
 8007a98:	f7ff ffde 	bl	8007a58 <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d8f7      	bhi.n	8007a98 <HAL_Delay+0x28>
  {
  }
}
 8007aa8:	bf00      	nop
 8007aaa:	bf00      	nop
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20000174 	.word	0x20000174

08007ab8 <__NVIC_SetPriorityGrouping>:
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f003 0307 	and.w	r3, r3, #7
 8007ac6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ac8:	4b0c      	ldr	r3, [pc, #48]	; (8007afc <__NVIC_SetPriorityGrouping+0x44>)
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007aea:	4a04      	ldr	r2, [pc, #16]	; (8007afc <__NVIC_SetPriorityGrouping+0x44>)
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	60d3      	str	r3, [r2, #12]
}
 8007af0:	bf00      	nop
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	e000ed00 	.word	0xe000ed00

08007b00 <__NVIC_GetPriorityGrouping>:
{
 8007b00:	b480      	push	{r7}
 8007b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b04:	4b04      	ldr	r3, [pc, #16]	; (8007b18 <__NVIC_GetPriorityGrouping+0x18>)
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	0a1b      	lsrs	r3, r3, #8
 8007b0a:	f003 0307 	and.w	r3, r3, #7
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	e000ed00 	.word	0xe000ed00

08007b1c <__NVIC_EnableIRQ>:
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	4603      	mov	r3, r0
 8007b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	db0b      	blt.n	8007b46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b2e:	79fb      	ldrb	r3, [r7, #7]
 8007b30:	f003 021f 	and.w	r2, r3, #31
 8007b34:	4907      	ldr	r1, [pc, #28]	; (8007b54 <__NVIC_EnableIRQ+0x38>)
 8007b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b3a:	095b      	lsrs	r3, r3, #5
 8007b3c:	2001      	movs	r0, #1
 8007b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8007b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007b46:	bf00      	nop
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	e000e100 	.word	0xe000e100

08007b58 <__NVIC_SetPriority>:
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	4603      	mov	r3, r0
 8007b60:	6039      	str	r1, [r7, #0]
 8007b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	db0a      	blt.n	8007b82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	490c      	ldr	r1, [pc, #48]	; (8007ba4 <__NVIC_SetPriority+0x4c>)
 8007b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b76:	0112      	lsls	r2, r2, #4
 8007b78:	b2d2      	uxtb	r2, r2
 8007b7a:	440b      	add	r3, r1
 8007b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007b80:	e00a      	b.n	8007b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	4908      	ldr	r1, [pc, #32]	; (8007ba8 <__NVIC_SetPriority+0x50>)
 8007b88:	79fb      	ldrb	r3, [r7, #7]
 8007b8a:	f003 030f 	and.w	r3, r3, #15
 8007b8e:	3b04      	subs	r3, #4
 8007b90:	0112      	lsls	r2, r2, #4
 8007b92:	b2d2      	uxtb	r2, r2
 8007b94:	440b      	add	r3, r1
 8007b96:	761a      	strb	r2, [r3, #24]
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr
 8007ba4:	e000e100 	.word	0xe000e100
 8007ba8:	e000ed00 	.word	0xe000ed00

08007bac <NVIC_EncodePriority>:
{
 8007bac:	b480      	push	{r7}
 8007bae:	b089      	sub	sp, #36	; 0x24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f003 0307 	and.w	r3, r3, #7
 8007bbe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	f1c3 0307 	rsb	r3, r3, #7
 8007bc6:	2b04      	cmp	r3, #4
 8007bc8:	bf28      	it	cs
 8007bca:	2304      	movcs	r3, #4
 8007bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	3304      	adds	r3, #4
 8007bd2:	2b06      	cmp	r3, #6
 8007bd4:	d902      	bls.n	8007bdc <NVIC_EncodePriority+0x30>
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	3b03      	subs	r3, #3
 8007bda:	e000      	b.n	8007bde <NVIC_EncodePriority+0x32>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bea:	43da      	mvns	r2, r3
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	401a      	ands	r2, r3
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007bf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8007bfe:	43d9      	mvns	r1, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c04:	4313      	orrs	r3, r2
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3724      	adds	r7, #36	; 0x24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b082      	sub	sp, #8
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7ff ff4c 	bl	8007ab8 <__NVIC_SetPriorityGrouping>
}
 8007c20:	bf00      	nop
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b086      	sub	sp, #24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	4603      	mov	r3, r0
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
 8007c34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007c36:	2300      	movs	r3, #0
 8007c38:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007c3a:	f7ff ff61 	bl	8007b00 <__NVIC_GetPriorityGrouping>
 8007c3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	68b9      	ldr	r1, [r7, #8]
 8007c44:	6978      	ldr	r0, [r7, #20]
 8007c46:	f7ff ffb1 	bl	8007bac <NVIC_EncodePriority>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c50:	4611      	mov	r1, r2
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7ff ff80 	bl	8007b58 <__NVIC_SetPriority>
}
 8007c58:	bf00      	nop
 8007c5a:	3718      	adds	r7, #24
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	4603      	mov	r3, r0
 8007c68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7ff ff54 	bl	8007b1c <__NVIC_EnableIRQ>
}
 8007c74:	bf00      	nop
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e098      	b.n	8007dc0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	461a      	mov	r2, r3
 8007c94:	4b4d      	ldr	r3, [pc, #308]	; (8007dcc <HAL_DMA_Init+0x150>)
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d80f      	bhi.n	8007cba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	4b4b      	ldr	r3, [pc, #300]	; (8007dd0 <HAL_DMA_Init+0x154>)
 8007ca2:	4413      	add	r3, r2
 8007ca4:	4a4b      	ldr	r2, [pc, #300]	; (8007dd4 <HAL_DMA_Init+0x158>)
 8007ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8007caa:	091b      	lsrs	r3, r3, #4
 8007cac:	009a      	lsls	r2, r3, #2
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a48      	ldr	r2, [pc, #288]	; (8007dd8 <HAL_DMA_Init+0x15c>)
 8007cb6:	641a      	str	r2, [r3, #64]	; 0x40
 8007cb8:	e00e      	b.n	8007cd8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	4b46      	ldr	r3, [pc, #280]	; (8007ddc <HAL_DMA_Init+0x160>)
 8007cc2:	4413      	add	r3, r2
 8007cc4:	4a43      	ldr	r2, [pc, #268]	; (8007dd4 <HAL_DMA_Init+0x158>)
 8007cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cca:	091b      	lsrs	r3, r3, #4
 8007ccc:	009a      	lsls	r2, r3, #2
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a42      	ldr	r2, [pc, #264]	; (8007de0 <HAL_DMA_Init+0x164>)
 8007cd6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cf2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d32:	d039      	beq.n	8007da8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d38:	4a27      	ldr	r2, [pc, #156]	; (8007dd8 <HAL_DMA_Init+0x15c>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d11a      	bne.n	8007d74 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007d3e:	4b29      	ldr	r3, [pc, #164]	; (8007de4 <HAL_DMA_Init+0x168>)
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d46:	f003 031c 	and.w	r3, r3, #28
 8007d4a:	210f      	movs	r1, #15
 8007d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d50:	43db      	mvns	r3, r3
 8007d52:	4924      	ldr	r1, [pc, #144]	; (8007de4 <HAL_DMA_Init+0x168>)
 8007d54:	4013      	ands	r3, r2
 8007d56:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007d58:	4b22      	ldr	r3, [pc, #136]	; (8007de4 <HAL_DMA_Init+0x168>)
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6859      	ldr	r1, [r3, #4]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d64:	f003 031c 	and.w	r3, r3, #28
 8007d68:	fa01 f303 	lsl.w	r3, r1, r3
 8007d6c:	491d      	ldr	r1, [pc, #116]	; (8007de4 <HAL_DMA_Init+0x168>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	600b      	str	r3, [r1, #0]
 8007d72:	e019      	b.n	8007da8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007d74:	4b1c      	ldr	r3, [pc, #112]	; (8007de8 <HAL_DMA_Init+0x16c>)
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7c:	f003 031c 	and.w	r3, r3, #28
 8007d80:	210f      	movs	r1, #15
 8007d82:	fa01 f303 	lsl.w	r3, r1, r3
 8007d86:	43db      	mvns	r3, r3
 8007d88:	4917      	ldr	r1, [pc, #92]	; (8007de8 <HAL_DMA_Init+0x16c>)
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007d8e:	4b16      	ldr	r3, [pc, #88]	; (8007de8 <HAL_DMA_Init+0x16c>)
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6859      	ldr	r1, [r3, #4]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d9a:	f003 031c 	and.w	r3, r3, #28
 8007d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007da2:	4911      	ldr	r1, [pc, #68]	; (8007de8 <HAL_DMA_Init+0x16c>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	40020407 	.word	0x40020407
 8007dd0:	bffdfff8 	.word	0xbffdfff8
 8007dd4:	cccccccd 	.word	0xcccccccd
 8007dd8:	40020000 	.word	0x40020000
 8007ddc:	bffdfbf8 	.word	0xbffdfbf8
 8007de0:	40020400 	.word	0x40020400
 8007de4:	400200a8 	.word	0x400200a8
 8007de8:	400204a8 	.word	0x400204a8

08007dec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b086      	sub	sp, #24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
 8007df8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d101      	bne.n	8007e0c <HAL_DMA_Start_IT+0x20>
 8007e08:	2302      	movs	r3, #2
 8007e0a:	e04b      	b.n	8007ea4 <HAL_DMA_Start_IT+0xb8>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d13a      	bne.n	8007e96 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f022 0201 	bic.w	r2, r2, #1
 8007e3c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	68b9      	ldr	r1, [r7, #8]
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 f96d 	bl	8008124 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d008      	beq.n	8007e64 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f042 020e 	orr.w	r2, r2, #14
 8007e60:	601a      	str	r2, [r3, #0]
 8007e62:	e00f      	b.n	8007e84 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f022 0204 	bic.w	r2, r2, #4
 8007e72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f042 020a 	orr.w	r2, r2, #10
 8007e82:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 0201 	orr.w	r2, r2, #1
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	e005      	b.n	8007ea2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007e9e:	2302      	movs	r3, #2
 8007ea0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d008      	beq.n	8007ed6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2204      	movs	r2, #4
 8007ec8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e022      	b.n	8007f1c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f022 020e 	bic.w	r2, r2, #14
 8007ee4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 0201 	bic.w	r2, r2, #1
 8007ef4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007efa:	f003 021c 	and.w	r2, r3, #28
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f02:	2101      	movs	r1, #1
 8007f04:	fa01 f202 	lsl.w	r2, r1, r2
 8007f08:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d005      	beq.n	8007f4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2204      	movs	r2, #4
 8007f44:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	73fb      	strb	r3, [r7, #15]
 8007f4a:	e029      	b.n	8007fa0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f022 020e 	bic.w	r2, r2, #14
 8007f5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f022 0201 	bic.w	r2, r2, #1
 8007f6a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f70:	f003 021c 	and.w	r2, r3, #28
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f78:	2101      	movs	r1, #1
 8007f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8007f7e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d003      	beq.n	8007fa0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	4798      	blx	r3
    }
  }
  return status;
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc6:	f003 031c 	and.w	r3, r3, #28
 8007fca:	2204      	movs	r2, #4
 8007fcc:	409a      	lsls	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d026      	beq.n	8008024 <HAL_DMA_IRQHandler+0x7a>
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	f003 0304 	and.w	r3, r3, #4
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d021      	beq.n	8008024 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0320 	and.w	r3, r3, #32
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d107      	bne.n	8007ffe <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 0204 	bic.w	r2, r2, #4
 8007ffc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008002:	f003 021c 	and.w	r2, r3, #28
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800a:	2104      	movs	r1, #4
 800800c:	fa01 f202 	lsl.w	r2, r1, r2
 8008010:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008016:	2b00      	cmp	r3, #0
 8008018:	d071      	beq.n	80080fe <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8008022:	e06c      	b.n	80080fe <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008028:	f003 031c 	and.w	r3, r3, #28
 800802c:	2202      	movs	r2, #2
 800802e:	409a      	lsls	r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	4013      	ands	r3, r2
 8008034:	2b00      	cmp	r3, #0
 8008036:	d02e      	beq.n	8008096 <HAL_DMA_IRQHandler+0xec>
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	f003 0302 	and.w	r3, r3, #2
 800803e:	2b00      	cmp	r3, #0
 8008040:	d029      	beq.n	8008096 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0320 	and.w	r3, r3, #32
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10b      	bne.n	8008068 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 020a 	bic.w	r2, r2, #10
 800805e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800806c:	f003 021c 	and.w	r2, r3, #28
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008074:	2102      	movs	r1, #2
 8008076:	fa01 f202 	lsl.w	r2, r1, r2
 800807a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008088:	2b00      	cmp	r3, #0
 800808a:	d038      	beq.n	80080fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008094:	e033      	b.n	80080fe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800809a:	f003 031c 	and.w	r3, r3, #28
 800809e:	2208      	movs	r2, #8
 80080a0:	409a      	lsls	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	4013      	ands	r3, r2
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d02a      	beq.n	8008100 <HAL_DMA_IRQHandler+0x156>
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	f003 0308 	and.w	r3, r3, #8
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d025      	beq.n	8008100 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f022 020e 	bic.w	r2, r2, #14
 80080c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080c8:	f003 021c 	and.w	r2, r3, #28
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d0:	2101      	movs	r1, #1
 80080d2:	fa01 f202 	lsl.w	r2, r1, r2
 80080d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d004      	beq.n	8008100 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80080fe:	bf00      	nop
 8008100:	bf00      	nop
}
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008116:	b2db      	uxtb	r3, r3
}
 8008118:	4618      	mov	r0, r3
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008136:	f003 021c 	and.w	r2, r3, #28
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813e:	2101      	movs	r1, #1
 8008140:	fa01 f202 	lsl.w	r2, r1, r2
 8008144:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	2b10      	cmp	r3, #16
 8008154:	d108      	bne.n	8008168 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008166:	e007      	b.n	8008178 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	60da      	str	r2, [r3, #12]
}
 8008178:	bf00      	nop
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800818e:	2300      	movs	r3, #0
 8008190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008192:	e17f      	b.n	8008494 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	2101      	movs	r1, #1
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	fa01 f303 	lsl.w	r3, r1, r3
 80081a0:	4013      	ands	r3, r2
 80081a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f000 8171 	beq.w	800848e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	f003 0303 	and.w	r3, r3, #3
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d005      	beq.n	80081c4 <HAL_GPIO_Init+0x40>
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	f003 0303 	and.w	r3, r3, #3
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d130      	bne.n	8008226 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	005b      	lsls	r3, r3, #1
 80081ce:	2203      	movs	r2, #3
 80081d0:	fa02 f303 	lsl.w	r3, r2, r3
 80081d4:	43db      	mvns	r3, r3
 80081d6:	693a      	ldr	r2, [r7, #16]
 80081d8:	4013      	ands	r3, r2
 80081da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	68da      	ldr	r2, [r3, #12]
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	fa02 f303 	lsl.w	r3, r2, r3
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80081fa:	2201      	movs	r2, #1
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008202:	43db      	mvns	r3, r3
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	4013      	ands	r3, r2
 8008208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	091b      	lsrs	r3, r3, #4
 8008210:	f003 0201 	and.w	r2, r3, #1
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	fa02 f303 	lsl.w	r3, r2, r3
 800821a:	693a      	ldr	r2, [r7, #16]
 800821c:	4313      	orrs	r3, r2
 800821e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	f003 0303 	and.w	r3, r3, #3
 800822e:	2b03      	cmp	r3, #3
 8008230:	d118      	bne.n	8008264 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8008238:	2201      	movs	r2, #1
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	fa02 f303 	lsl.w	r3, r2, r3
 8008240:	43db      	mvns	r3, r3
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	4013      	ands	r3, r2
 8008246:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	08db      	lsrs	r3, r3, #3
 800824e:	f003 0201 	and.w	r2, r3, #1
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	fa02 f303 	lsl.w	r3, r2, r3
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	4313      	orrs	r3, r2
 800825c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	f003 0303 	and.w	r3, r3, #3
 800826c:	2b03      	cmp	r3, #3
 800826e:	d017      	beq.n	80082a0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	005b      	lsls	r3, r3, #1
 800827a:	2203      	movs	r2, #3
 800827c:	fa02 f303 	lsl.w	r3, r2, r3
 8008280:	43db      	mvns	r3, r3
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	4013      	ands	r3, r2
 8008286:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	689a      	ldr	r2, [r3, #8]
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	005b      	lsls	r3, r3, #1
 8008290:	fa02 f303 	lsl.w	r3, r2, r3
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	4313      	orrs	r3, r2
 8008298:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	f003 0303 	and.w	r3, r3, #3
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d123      	bne.n	80082f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	08da      	lsrs	r2, r3, #3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	3208      	adds	r2, #8
 80082b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f003 0307 	and.w	r3, r3, #7
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	220f      	movs	r2, #15
 80082c4:	fa02 f303 	lsl.w	r3, r2, r3
 80082c8:	43db      	mvns	r3, r3
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	4013      	ands	r3, r2
 80082ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	691a      	ldr	r2, [r3, #16]
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f003 0307 	and.w	r3, r3, #7
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	fa02 f303 	lsl.w	r3, r2, r3
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	08da      	lsrs	r2, r3, #3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	3208      	adds	r2, #8
 80082ee:	6939      	ldr	r1, [r7, #16]
 80082f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	005b      	lsls	r3, r3, #1
 80082fe:	2203      	movs	r2, #3
 8008300:	fa02 f303 	lsl.w	r3, r2, r3
 8008304:	43db      	mvns	r3, r3
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	4013      	ands	r3, r2
 800830a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	f003 0203 	and.w	r2, r3, #3
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	005b      	lsls	r3, r3, #1
 8008318:	fa02 f303 	lsl.w	r3, r2, r3
 800831c:	693a      	ldr	r2, [r7, #16]
 800831e:	4313      	orrs	r3, r2
 8008320:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 80ac 	beq.w	800848e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008336:	4b5f      	ldr	r3, [pc, #380]	; (80084b4 <HAL_GPIO_Init+0x330>)
 8008338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800833a:	4a5e      	ldr	r2, [pc, #376]	; (80084b4 <HAL_GPIO_Init+0x330>)
 800833c:	f043 0301 	orr.w	r3, r3, #1
 8008340:	6613      	str	r3, [r2, #96]	; 0x60
 8008342:	4b5c      	ldr	r3, [pc, #368]	; (80084b4 <HAL_GPIO_Init+0x330>)
 8008344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008346:	f003 0301 	and.w	r3, r3, #1
 800834a:	60bb      	str	r3, [r7, #8]
 800834c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800834e:	4a5a      	ldr	r2, [pc, #360]	; (80084b8 <HAL_GPIO_Init+0x334>)
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	089b      	lsrs	r3, r3, #2
 8008354:	3302      	adds	r3, #2
 8008356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800835a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	f003 0303 	and.w	r3, r3, #3
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	220f      	movs	r2, #15
 8008366:	fa02 f303 	lsl.w	r3, r2, r3
 800836a:	43db      	mvns	r3, r3
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	4013      	ands	r3, r2
 8008370:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008378:	d025      	beq.n	80083c6 <HAL_GPIO_Init+0x242>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a4f      	ldr	r2, [pc, #316]	; (80084bc <HAL_GPIO_Init+0x338>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d01f      	beq.n	80083c2 <HAL_GPIO_Init+0x23e>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a4e      	ldr	r2, [pc, #312]	; (80084c0 <HAL_GPIO_Init+0x33c>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d019      	beq.n	80083be <HAL_GPIO_Init+0x23a>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a4d      	ldr	r2, [pc, #308]	; (80084c4 <HAL_GPIO_Init+0x340>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d013      	beq.n	80083ba <HAL_GPIO_Init+0x236>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a4c      	ldr	r2, [pc, #304]	; (80084c8 <HAL_GPIO_Init+0x344>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d00d      	beq.n	80083b6 <HAL_GPIO_Init+0x232>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a4b      	ldr	r2, [pc, #300]	; (80084cc <HAL_GPIO_Init+0x348>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d007      	beq.n	80083b2 <HAL_GPIO_Init+0x22e>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a4a      	ldr	r2, [pc, #296]	; (80084d0 <HAL_GPIO_Init+0x34c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d101      	bne.n	80083ae <HAL_GPIO_Init+0x22a>
 80083aa:	2306      	movs	r3, #6
 80083ac:	e00c      	b.n	80083c8 <HAL_GPIO_Init+0x244>
 80083ae:	2307      	movs	r3, #7
 80083b0:	e00a      	b.n	80083c8 <HAL_GPIO_Init+0x244>
 80083b2:	2305      	movs	r3, #5
 80083b4:	e008      	b.n	80083c8 <HAL_GPIO_Init+0x244>
 80083b6:	2304      	movs	r3, #4
 80083b8:	e006      	b.n	80083c8 <HAL_GPIO_Init+0x244>
 80083ba:	2303      	movs	r3, #3
 80083bc:	e004      	b.n	80083c8 <HAL_GPIO_Init+0x244>
 80083be:	2302      	movs	r3, #2
 80083c0:	e002      	b.n	80083c8 <HAL_GPIO_Init+0x244>
 80083c2:	2301      	movs	r3, #1
 80083c4:	e000      	b.n	80083c8 <HAL_GPIO_Init+0x244>
 80083c6:	2300      	movs	r3, #0
 80083c8:	697a      	ldr	r2, [r7, #20]
 80083ca:	f002 0203 	and.w	r2, r2, #3
 80083ce:	0092      	lsls	r2, r2, #2
 80083d0:	4093      	lsls	r3, r2
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80083d8:	4937      	ldr	r1, [pc, #220]	; (80084b8 <HAL_GPIO_Init+0x334>)
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	089b      	lsrs	r3, r3, #2
 80083de:	3302      	adds	r3, #2
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80083e6:	4b3b      	ldr	r3, [pc, #236]	; (80084d4 <HAL_GPIO_Init+0x350>)
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	43db      	mvns	r3, r3
 80083f0:	693a      	ldr	r2, [r7, #16]
 80083f2:	4013      	ands	r3, r2
 80083f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d003      	beq.n	800840a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	4313      	orrs	r3, r2
 8008408:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800840a:	4a32      	ldr	r2, [pc, #200]	; (80084d4 <HAL_GPIO_Init+0x350>)
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008410:	4b30      	ldr	r3, [pc, #192]	; (80084d4 <HAL_GPIO_Init+0x350>)
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	43db      	mvns	r3, r3
 800841a:	693a      	ldr	r2, [r7, #16]
 800841c:	4013      	ands	r3, r2
 800841e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d003      	beq.n	8008434 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	4313      	orrs	r3, r2
 8008432:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008434:	4a27      	ldr	r2, [pc, #156]	; (80084d4 <HAL_GPIO_Init+0x350>)
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800843a:	4b26      	ldr	r3, [pc, #152]	; (80084d4 <HAL_GPIO_Init+0x350>)
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	43db      	mvns	r3, r3
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	4013      	ands	r3, r2
 8008448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d003      	beq.n	800845e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	4313      	orrs	r3, r2
 800845c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800845e:	4a1d      	ldr	r2, [pc, #116]	; (80084d4 <HAL_GPIO_Init+0x350>)
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008464:	4b1b      	ldr	r3, [pc, #108]	; (80084d4 <HAL_GPIO_Init+0x350>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	43db      	mvns	r3, r3
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	4013      	ands	r3, r2
 8008472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800847c:	2b00      	cmp	r3, #0
 800847e:	d003      	beq.n	8008488 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	4313      	orrs	r3, r2
 8008486:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008488:	4a12      	ldr	r2, [pc, #72]	; (80084d4 <HAL_GPIO_Init+0x350>)
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	3301      	adds	r3, #1
 8008492:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	fa22 f303 	lsr.w	r3, r2, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	f47f ae78 	bne.w	8008194 <HAL_GPIO_Init+0x10>
  }
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop
 80084a8:	371c      	adds	r7, #28
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	40021000 	.word	0x40021000
 80084b8:	40010000 	.word	0x40010000
 80084bc:	48000400 	.word	0x48000400
 80084c0:	48000800 	.word	0x48000800
 80084c4:	48000c00 	.word	0x48000c00
 80084c8:	48001000 	.word	0x48001000
 80084cc:	48001400 	.word	0x48001400
 80084d0:	48001800 	.word	0x48001800
 80084d4:	40010400 	.word	0x40010400

080084d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	460b      	mov	r3, r1
 80084e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	691a      	ldr	r2, [r3, #16]
 80084e8:	887b      	ldrh	r3, [r7, #2]
 80084ea:	4013      	ands	r3, r2
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d002      	beq.n	80084f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80084f0:	2301      	movs	r3, #1
 80084f2:	73fb      	strb	r3, [r7, #15]
 80084f4:	e001      	b.n	80084fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80084f6:	2300      	movs	r3, #0
 80084f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3714      	adds	r7, #20
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	460b      	mov	r3, r1
 8008512:	807b      	strh	r3, [r7, #2]
 8008514:	4613      	mov	r3, r2
 8008516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008518:	787b      	ldrb	r3, [r7, #1]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d003      	beq.n	8008526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800851e:	887a      	ldrh	r2, [r7, #2]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008524:	e002      	b.n	800852c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008526:	887a      	ldrh	r2, [r7, #2]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	460b      	mov	r3, r1
 8008542:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	695b      	ldr	r3, [r3, #20]
 8008548:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800854a:	887a      	ldrh	r2, [r7, #2]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	4013      	ands	r3, r2
 8008550:	041a      	lsls	r2, r3, #16
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	43d9      	mvns	r1, r3
 8008556:	887b      	ldrh	r3, [r7, #2]
 8008558:	400b      	ands	r3, r1
 800855a:	431a      	orrs	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	619a      	str	r2, [r3, #24]
}
 8008560:	bf00      	nop
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	4603      	mov	r3, r0
 8008574:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008576:	4b08      	ldr	r3, [pc, #32]	; (8008598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008578:	695a      	ldr	r2, [r3, #20]
 800857a:	88fb      	ldrh	r3, [r7, #6]
 800857c:	4013      	ands	r3, r2
 800857e:	2b00      	cmp	r3, #0
 8008580:	d006      	beq.n	8008590 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008582:	4a05      	ldr	r2, [pc, #20]	; (8008598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008584:	88fb      	ldrh	r3, [r7, #6]
 8008586:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008588:	88fb      	ldrh	r3, [r7, #6]
 800858a:	4618      	mov	r0, r3
 800858c:	f7fb fb18 	bl	8003bc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8008590:	bf00      	nop
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	40010400 	.word	0x40010400

0800859c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d101      	bne.n	80085ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e081      	b.n	80086b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d106      	bne.n	80085c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f7fd ff06 	bl	80063d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2224      	movs	r2, #36	; 0x24
 80085cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f022 0201 	bic.w	r2, r2, #1
 80085de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685a      	ldr	r2, [r3, #4]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80085ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	689a      	ldr	r2, [r3, #8]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80085fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d107      	bne.n	8008616 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	689a      	ldr	r2, [r3, #8]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008612:	609a      	str	r2, [r3, #8]
 8008614:	e006      	b.n	8008624 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	689a      	ldr	r2, [r3, #8]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008622:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	2b02      	cmp	r3, #2
 800862a:	d104      	bne.n	8008636 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008634:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	6812      	ldr	r2, [r2, #0]
 8008640:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008648:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68da      	ldr	r2, [r3, #12]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008658:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	691a      	ldr	r2, [r3, #16]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	430a      	orrs	r2, r1
 8008672:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	69d9      	ldr	r1, [r3, #28]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a1a      	ldr	r2, [r3, #32]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	430a      	orrs	r2, r1
 8008682:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f042 0201 	orr.w	r2, r2, #1
 8008692:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2220      	movs	r2, #32
 800869e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
	...

080086bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b088      	sub	sp, #32
 80086c0:	af02      	add	r7, sp, #8
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	607a      	str	r2, [r7, #4]
 80086c6:	461a      	mov	r2, r3
 80086c8:	460b      	mov	r3, r1
 80086ca:	817b      	strh	r3, [r7, #10]
 80086cc:	4613      	mov	r3, r2
 80086ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	2b20      	cmp	r3, #32
 80086da:	f040 80da 	bne.w	8008892 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d101      	bne.n	80086ec <HAL_I2C_Master_Transmit+0x30>
 80086e8:	2302      	movs	r3, #2
 80086ea:	e0d3      	b.n	8008894 <HAL_I2C_Master_Transmit+0x1d8>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80086f4:	f7ff f9b0 	bl	8007a58 <HAL_GetTick>
 80086f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	2319      	movs	r3, #25
 8008700:	2201      	movs	r2, #1
 8008702:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f001 f8d1 	bl	80098ae <I2C_WaitOnFlagUntilTimeout>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e0be      	b.n	8008894 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2221      	movs	r2, #33	; 0x21
 800871a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2210      	movs	r2, #16
 8008722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	893a      	ldrh	r2, [r7, #8]
 8008736:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008742:	b29b      	uxth	r3, r3
 8008744:	2bff      	cmp	r3, #255	; 0xff
 8008746:	d90e      	bls.n	8008766 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	22ff      	movs	r2, #255	; 0xff
 800874c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008752:	b2da      	uxtb	r2, r3
 8008754:	8979      	ldrh	r1, [r7, #10]
 8008756:	4b51      	ldr	r3, [pc, #324]	; (800889c <HAL_I2C_Master_Transmit+0x1e0>)
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f001 fa4e 	bl	8009c00 <I2C_TransferConfig>
 8008764:	e06c      	b.n	8008840 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800876a:	b29a      	uxth	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008774:	b2da      	uxtb	r2, r3
 8008776:	8979      	ldrh	r1, [r7, #10]
 8008778:	4b48      	ldr	r3, [pc, #288]	; (800889c <HAL_I2C_Master_Transmit+0x1e0>)
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f001 fa3d 	bl	8009c00 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008786:	e05b      	b.n	8008840 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008788:	697a      	ldr	r2, [r7, #20]
 800878a:	6a39      	ldr	r1, [r7, #32]
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f001 f8ce 	bl	800992e <I2C_WaitOnTXISFlagUntilTimeout>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e07b      	b.n	8008894 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a0:	781a      	ldrb	r2, [r3, #0]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ac:	1c5a      	adds	r2, r3, #1
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	3b01      	subs	r3, #1
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087c4:	3b01      	subs	r3, #1
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d034      	beq.n	8008840 <HAL_I2C_Master_Transmit+0x184>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d130      	bne.n	8008840 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	6a3b      	ldr	r3, [r7, #32]
 80087e4:	2200      	movs	r2, #0
 80087e6:	2180      	movs	r1, #128	; 0x80
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f001 f860 	bl	80098ae <I2C_WaitOnFlagUntilTimeout>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e04d      	b.n	8008894 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	2bff      	cmp	r3, #255	; 0xff
 8008800:	d90e      	bls.n	8008820 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	22ff      	movs	r2, #255	; 0xff
 8008806:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800880c:	b2da      	uxtb	r2, r3
 800880e:	8979      	ldrh	r1, [r7, #10]
 8008810:	2300      	movs	r3, #0
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f001 f9f1 	bl	8009c00 <I2C_TransferConfig>
 800881e:	e00f      	b.n	8008840 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008824:	b29a      	uxth	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800882e:	b2da      	uxtb	r2, r3
 8008830:	8979      	ldrh	r1, [r7, #10]
 8008832:	2300      	movs	r3, #0
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	f001 f9e0 	bl	8009c00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008844:	b29b      	uxth	r3, r3
 8008846:	2b00      	cmp	r3, #0
 8008848:	d19e      	bne.n	8008788 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	6a39      	ldr	r1, [r7, #32]
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f001 f8ad 	bl	80099ae <I2C_WaitOnSTOPFlagUntilTimeout>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e01a      	b.n	8008894 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2220      	movs	r2, #32
 8008864:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	6859      	ldr	r1, [r3, #4]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	4b0b      	ldr	r3, [pc, #44]	; (80088a0 <HAL_I2C_Master_Transmit+0x1e4>)
 8008872:	400b      	ands	r3, r1
 8008874:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2220      	movs	r2, #32
 800887a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	e000      	b.n	8008894 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8008892:	2302      	movs	r3, #2
  }
}
 8008894:	4618      	mov	r0, r3
 8008896:	3718      	adds	r7, #24
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	80002000 	.word	0x80002000
 80088a0:	fe00e800 	.word	0xfe00e800

080088a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b088      	sub	sp, #32
 80088a8:	af02      	add	r7, sp, #8
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	4608      	mov	r0, r1
 80088ae:	4611      	mov	r1, r2
 80088b0:	461a      	mov	r2, r3
 80088b2:	4603      	mov	r3, r0
 80088b4:	817b      	strh	r3, [r7, #10]
 80088b6:	460b      	mov	r3, r1
 80088b8:	813b      	strh	r3, [r7, #8]
 80088ba:	4613      	mov	r3, r2
 80088bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b20      	cmp	r3, #32
 80088c8:	f040 80f9 	bne.w	8008abe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d002      	beq.n	80088d8 <HAL_I2C_Mem_Write+0x34>
 80088d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d105      	bne.n	80088e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e0ed      	b.n	8008ac0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d101      	bne.n	80088f2 <HAL_I2C_Mem_Write+0x4e>
 80088ee:	2302      	movs	r3, #2
 80088f0:	e0e6      	b.n	8008ac0 <HAL_I2C_Mem_Write+0x21c>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80088fa:	f7ff f8ad 	bl	8007a58 <HAL_GetTick>
 80088fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	2319      	movs	r3, #25
 8008906:	2201      	movs	r2, #1
 8008908:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f000 ffce 	bl	80098ae <I2C_WaitOnFlagUntilTimeout>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d001      	beq.n	800891c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e0d1      	b.n	8008ac0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2221      	movs	r2, #33	; 0x21
 8008920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2240      	movs	r2, #64	; 0x40
 8008928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6a3a      	ldr	r2, [r7, #32]
 8008936:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800893c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008944:	88f8      	ldrh	r0, [r7, #6]
 8008946:	893a      	ldrh	r2, [r7, #8]
 8008948:	8979      	ldrh	r1, [r7, #10]
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	9301      	str	r3, [sp, #4]
 800894e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	4603      	mov	r3, r0
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f000 fb87 	bl	8009068 <I2C_RequestMemoryWrite>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d005      	beq.n	800896c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	e0a9      	b.n	8008ac0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008970:	b29b      	uxth	r3, r3
 8008972:	2bff      	cmp	r3, #255	; 0xff
 8008974:	d90e      	bls.n	8008994 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	22ff      	movs	r2, #255	; 0xff
 800897a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008980:	b2da      	uxtb	r2, r3
 8008982:	8979      	ldrh	r1, [r7, #10]
 8008984:	2300      	movs	r3, #0
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f001 f937 	bl	8009c00 <I2C_TransferConfig>
 8008992:	e00f      	b.n	80089b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008998:	b29a      	uxth	r2, r3
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089a2:	b2da      	uxtb	r2, r3
 80089a4:	8979      	ldrh	r1, [r7, #10]
 80089a6:	2300      	movs	r3, #0
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f001 f926 	bl	8009c00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f000 ffb8 	bl	800992e <I2C_WaitOnTXISFlagUntilTimeout>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e07b      	b.n	8008ac0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089cc:	781a      	ldrb	r2, [r3, #0]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d8:	1c5a      	adds	r2, r3, #1
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	3b01      	subs	r3, #1
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089f0:	3b01      	subs	r3, #1
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d034      	beq.n	8008a6c <HAL_I2C_Mem_Write+0x1c8>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d130      	bne.n	8008a6c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a10:	2200      	movs	r2, #0
 8008a12:	2180      	movs	r1, #128	; 0x80
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f000 ff4a 	bl	80098ae <I2C_WaitOnFlagUntilTimeout>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d001      	beq.n	8008a24 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e04d      	b.n	8008ac0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	2bff      	cmp	r3, #255	; 0xff
 8008a2c:	d90e      	bls.n	8008a4c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	22ff      	movs	r2, #255	; 0xff
 8008a32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	8979      	ldrh	r1, [r7, #10]
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f001 f8db 	bl	8009c00 <I2C_TransferConfig>
 8008a4a:	e00f      	b.n	8008a6c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	8979      	ldrh	r1, [r7, #10]
 8008a5e:	2300      	movs	r3, #0
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f001 f8ca 	bl	8009c00 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d19e      	bne.n	80089b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f000 ff97 	bl	80099ae <I2C_WaitOnSTOPFlagUntilTimeout>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d001      	beq.n	8008a8a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e01a      	b.n	8008ac0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2220      	movs	r2, #32
 8008a90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6859      	ldr	r1, [r3, #4]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	4b0a      	ldr	r3, [pc, #40]	; (8008ac8 <HAL_I2C_Mem_Write+0x224>)
 8008a9e:	400b      	ands	r3, r1
 8008aa0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2220      	movs	r2, #32
 8008aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	e000      	b.n	8008ac0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008abe:	2302      	movs	r3, #2
  }
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3718      	adds	r7, #24
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	fe00e800 	.word	0xfe00e800

08008acc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b088      	sub	sp, #32
 8008ad0:	af02      	add	r7, sp, #8
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	4608      	mov	r0, r1
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	461a      	mov	r2, r3
 8008ada:	4603      	mov	r3, r0
 8008adc:	817b      	strh	r3, [r7, #10]
 8008ade:	460b      	mov	r3, r1
 8008ae0:	813b      	strh	r3, [r7, #8]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2b20      	cmp	r3, #32
 8008af0:	f040 80fd 	bne.w	8008cee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008af4:	6a3b      	ldr	r3, [r7, #32]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d002      	beq.n	8008b00 <HAL_I2C_Mem_Read+0x34>
 8008afa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d105      	bne.n	8008b0c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e0f1      	b.n	8008cf0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d101      	bne.n	8008b1a <HAL_I2C_Mem_Read+0x4e>
 8008b16:	2302      	movs	r3, #2
 8008b18:	e0ea      	b.n	8008cf0 <HAL_I2C_Mem_Read+0x224>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008b22:	f7fe ff99 	bl	8007a58 <HAL_GetTick>
 8008b26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	2319      	movs	r3, #25
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f000 feba 	bl	80098ae <I2C_WaitOnFlagUntilTimeout>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d001      	beq.n	8008b44 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	e0d5      	b.n	8008cf0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2222      	movs	r2, #34	; 0x22
 8008b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2240      	movs	r2, #64	; 0x40
 8008b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6a3a      	ldr	r2, [r7, #32]
 8008b5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008b64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008b6c:	88f8      	ldrh	r0, [r7, #6]
 8008b6e:	893a      	ldrh	r2, [r7, #8]
 8008b70:	8979      	ldrh	r1, [r7, #10]
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	9301      	str	r3, [sp, #4]
 8008b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b78:	9300      	str	r3, [sp, #0]
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f000 fac7 	bl	8009110 <I2C_RequestMemoryRead>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d005      	beq.n	8008b94 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e0ad      	b.n	8008cf0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	2bff      	cmp	r3, #255	; 0xff
 8008b9c:	d90e      	bls.n	8008bbc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	22ff      	movs	r2, #255	; 0xff
 8008ba2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ba8:	b2da      	uxtb	r2, r3
 8008baa:	8979      	ldrh	r1, [r7, #10]
 8008bac:	4b52      	ldr	r3, [pc, #328]	; (8008cf8 <HAL_I2C_Mem_Read+0x22c>)
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f001 f823 	bl	8009c00 <I2C_TransferConfig>
 8008bba:	e00f      	b.n	8008bdc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	8979      	ldrh	r1, [r7, #10]
 8008bce:	4b4a      	ldr	r3, [pc, #296]	; (8008cf8 <HAL_I2C_Mem_Read+0x22c>)
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f001 f812 	bl	8009c00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	9300      	str	r3, [sp, #0]
 8008be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be2:	2200      	movs	r2, #0
 8008be4:	2104      	movs	r1, #4
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f000 fe61 	bl	80098ae <I2C_WaitOnFlagUntilTimeout>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d001      	beq.n	8008bf6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e07c      	b.n	8008cf0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c00:	b2d2      	uxtb	r2, r2
 8008c02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c08:	1c5a      	adds	r2, r3, #1
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c12:	3b01      	subs	r3, #1
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	3b01      	subs	r3, #1
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d034      	beq.n	8008c9c <HAL_I2C_Mem_Read+0x1d0>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d130      	bne.n	8008c9c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	9300      	str	r3, [sp, #0]
 8008c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c40:	2200      	movs	r2, #0
 8008c42:	2180      	movs	r1, #128	; 0x80
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f000 fe32 	bl	80098ae <I2C_WaitOnFlagUntilTimeout>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d001      	beq.n	8008c54 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e04d      	b.n	8008cf0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	2bff      	cmp	r3, #255	; 0xff
 8008c5c:	d90e      	bls.n	8008c7c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	22ff      	movs	r2, #255	; 0xff
 8008c62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c68:	b2da      	uxtb	r2, r3
 8008c6a:	8979      	ldrh	r1, [r7, #10]
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f000 ffc3 	bl	8009c00 <I2C_TransferConfig>
 8008c7a:	e00f      	b.n	8008c9c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c8a:	b2da      	uxtb	r2, r3
 8008c8c:	8979      	ldrh	r1, [r7, #10]
 8008c8e:	2300      	movs	r3, #0
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f000 ffb2 	bl	8009c00 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d19a      	bne.n	8008bdc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f000 fe7f 	bl	80099ae <I2C_WaitOnSTOPFlagUntilTimeout>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d001      	beq.n	8008cba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e01a      	b.n	8008cf0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	6859      	ldr	r1, [r3, #4]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	4b0b      	ldr	r3, [pc, #44]	; (8008cfc <HAL_I2C_Mem_Read+0x230>)
 8008cce:	400b      	ands	r3, r1
 8008cd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2220      	movs	r2, #32
 8008cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008cea:	2300      	movs	r3, #0
 8008cec:	e000      	b.n	8008cf0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008cee:	2302      	movs	r3, #2
  }
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3718      	adds	r7, #24
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	80002400 	.word	0x80002400
 8008cfc:	fe00e800 	.word	0xfe00e800

08008d00 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	699b      	ldr	r3, [r3, #24]
 8008d0e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d005      	beq.n	8008d2c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	68f9      	ldr	r1, [r7, #12]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	4798      	blx	r3
  }
}
 8008d2c:	bf00      	nop
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b086      	sub	sp, #24
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	0a1b      	lsrs	r3, r3, #8
 8008d50:	f003 0301 	and.w	r3, r3, #1
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d010      	beq.n	8008d7a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	09db      	lsrs	r3, r3, #7
 8008d5c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00a      	beq.n	8008d7a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d68:	f043 0201 	orr.w	r2, r3, #1
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d78:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	0a9b      	lsrs	r3, r3, #10
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d010      	beq.n	8008da8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	09db      	lsrs	r3, r3, #7
 8008d8a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00a      	beq.n	8008da8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d96:	f043 0208 	orr.w	r2, r3, #8
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008da6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	0a5b      	lsrs	r3, r3, #9
 8008dac:	f003 0301 	and.w	r3, r3, #1
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d010      	beq.n	8008dd6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	09db      	lsrs	r3, r3, #7
 8008db8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00a      	beq.n	8008dd6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dc4:	f043 0202 	orr.w	r2, r3, #2
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dd4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dda:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f003 030b 	and.w	r3, r3, #11
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d003      	beq.n	8008dee <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8008de6:	68f9      	ldr	r1, [r7, #12]
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 fc27 	bl	800963c <I2C_ITError>
  }
}
 8008dee:	bf00      	nop
 8008df0:	3718      	adds	r7, #24
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008df6:	b480      	push	{r7}
 8008df8:	b083      	sub	sp, #12
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008dfe:	bf00      	nop
 8008e00:	370c      	adds	r7, #12
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e0a:	b480      	push	{r7}
 8008e0c:	b083      	sub	sp, #12
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008e12:	bf00      	nop
 8008e14:	370c      	adds	r7, #12
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b083      	sub	sp, #12
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	460b      	mov	r3, r1
 8008e28:	70fb      	strb	r3, [r7, #3]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008e2e:	bf00      	nop
 8008e30:	370c      	adds	r7, #12
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr

08008e3a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e3a:	b480      	push	{r7}
 8008e3c:	b083      	sub	sp, #12
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008e42:	bf00      	nop
 8008e44:	370c      	adds	r7, #12
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr

08008e4e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b083      	sub	sp, #12
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008e56:	bf00      	nop
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr

08008e62 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b086      	sub	sp, #24
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	60f8      	str	r0, [r7, #12]
 8008e6a:	60b9      	str	r1, [r7, #8]
 8008e6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e72:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d101      	bne.n	8008e86 <I2C_Slave_ISR_IT+0x24>
 8008e82:	2302      	movs	r3, #2
 8008e84:	e0ec      	b.n	8009060 <I2C_Slave_ISR_IT+0x1fe>
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	095b      	lsrs	r3, r3, #5
 8008e92:	f003 0301 	and.w	r3, r3, #1
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d009      	beq.n	8008eae <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	095b      	lsrs	r3, r3, #5
 8008e9e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d003      	beq.n	8008eae <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008ea6:	6939      	ldr	r1, [r7, #16]
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f000 fa67 	bl	800937c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	091b      	lsrs	r3, r3, #4
 8008eb2:	f003 0301 	and.w	r3, r3, #1
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d04d      	beq.n	8008f56 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	091b      	lsrs	r3, r3, #4
 8008ebe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d047      	beq.n	8008f56 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d128      	bne.n	8008f22 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b28      	cmp	r3, #40	; 0x28
 8008eda:	d108      	bne.n	8008eee <I2C_Slave_ISR_IT+0x8c>
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ee2:	d104      	bne.n	8008eee <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008ee4:	6939      	ldr	r1, [r7, #16]
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f000 fb52 	bl	8009590 <I2C_ITListenCplt>
 8008eec:	e032      	b.n	8008f54 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b29      	cmp	r3, #41	; 0x29
 8008ef8:	d10e      	bne.n	8008f18 <I2C_Slave_ISR_IT+0xb6>
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f00:	d00a      	beq.n	8008f18 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2210      	movs	r2, #16
 8008f08:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f000 fc8d 	bl	800982a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f000 f9d5 	bl	80092c0 <I2C_ITSlaveSeqCplt>
 8008f16:	e01d      	b.n	8008f54 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2210      	movs	r2, #16
 8008f1e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008f20:	e096      	b.n	8009050 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2210      	movs	r2, #16
 8008f28:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f2e:	f043 0204 	orr.w	r2, r3, #4
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d004      	beq.n	8008f46 <I2C_Slave_ISR_IT+0xe4>
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f42:	f040 8085 	bne.w	8009050 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f000 fb75 	bl	800963c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008f52:	e07d      	b.n	8009050 <I2C_Slave_ISR_IT+0x1ee>
 8008f54:	e07c      	b.n	8009050 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	089b      	lsrs	r3, r3, #2
 8008f5a:	f003 0301 	and.w	r3, r3, #1
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d030      	beq.n	8008fc4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	089b      	lsrs	r3, r3, #2
 8008f66:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d02a      	beq.n	8008fc4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d018      	beq.n	8008faa <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f82:	b2d2      	uxtb	r2, r2
 8008f84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8a:	1c5a      	adds	r2, r3, #1
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f94:	3b01      	subs	r3, #1
 8008f96:	b29a      	uxth	r2, r3
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d14f      	bne.n	8009054 <I2C_Slave_ISR_IT+0x1f2>
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008fba:	d04b      	beq.n	8009054 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f000 f97f 	bl	80092c0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008fc2:	e047      	b.n	8009054 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	08db      	lsrs	r3, r3, #3
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00a      	beq.n	8008fe6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	08db      	lsrs	r3, r3, #3
 8008fd4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d004      	beq.n	8008fe6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008fdc:	6939      	ldr	r1, [r7, #16]
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f000 f8ea 	bl	80091b8 <I2C_ITAddrCplt>
 8008fe4:	e037      	b.n	8009056 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	085b      	lsrs	r3, r3, #1
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d031      	beq.n	8009056 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	085b      	lsrs	r3, r3, #1
 8008ff6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d02b      	beq.n	8009056 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009002:	b29b      	uxth	r3, r3
 8009004:	2b00      	cmp	r3, #0
 8009006:	d018      	beq.n	800903a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900c:	781a      	ldrb	r2, [r3, #0]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009018:	1c5a      	adds	r2, r3, #1
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009022:	b29b      	uxth	r3, r3
 8009024:	3b01      	subs	r3, #1
 8009026:	b29a      	uxth	r2, r3
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009030:	3b01      	subs	r3, #1
 8009032:	b29a      	uxth	r2, r3
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	851a      	strh	r2, [r3, #40]	; 0x28
 8009038:	e00d      	b.n	8009056 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009040:	d002      	beq.n	8009048 <I2C_Slave_ISR_IT+0x1e6>
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d106      	bne.n	8009056 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f000 f939 	bl	80092c0 <I2C_ITSlaveSeqCplt>
 800904e:	e002      	b.n	8009056 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8009050:	bf00      	nop
 8009052:	e000      	b.n	8009056 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8009054:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	3718      	adds	r7, #24
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af02      	add	r7, sp, #8
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	4608      	mov	r0, r1
 8009072:	4611      	mov	r1, r2
 8009074:	461a      	mov	r2, r3
 8009076:	4603      	mov	r3, r0
 8009078:	817b      	strh	r3, [r7, #10]
 800907a:	460b      	mov	r3, r1
 800907c:	813b      	strh	r3, [r7, #8]
 800907e:	4613      	mov	r3, r2
 8009080:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009082:	88fb      	ldrh	r3, [r7, #6]
 8009084:	b2da      	uxtb	r2, r3
 8009086:	8979      	ldrh	r1, [r7, #10]
 8009088:	4b20      	ldr	r3, [pc, #128]	; (800910c <I2C_RequestMemoryWrite+0xa4>)
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f000 fdb5 	bl	8009c00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009096:	69fa      	ldr	r2, [r7, #28]
 8009098:	69b9      	ldr	r1, [r7, #24]
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f000 fc47 	bl	800992e <I2C_WaitOnTXISFlagUntilTimeout>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d001      	beq.n	80090aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e02c      	b.n	8009104 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80090aa:	88fb      	ldrh	r3, [r7, #6]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d105      	bne.n	80090bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80090b0:	893b      	ldrh	r3, [r7, #8]
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	629a      	str	r2, [r3, #40]	; 0x28
 80090ba:	e015      	b.n	80090e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80090bc:	893b      	ldrh	r3, [r7, #8]
 80090be:	0a1b      	lsrs	r3, r3, #8
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090ca:	69fa      	ldr	r2, [r7, #28]
 80090cc:	69b9      	ldr	r1, [r7, #24]
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f000 fc2d 	bl	800992e <I2C_WaitOnTXISFlagUntilTimeout>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	e012      	b.n	8009104 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80090de:	893b      	ldrh	r3, [r7, #8]
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	2200      	movs	r2, #0
 80090f0:	2180      	movs	r1, #128	; 0x80
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f000 fbdb 	bl	80098ae <I2C_WaitOnFlagUntilTimeout>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d001      	beq.n	8009102 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	e000      	b.n	8009104 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	80002000 	.word	0x80002000

08009110 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af02      	add	r7, sp, #8
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	4608      	mov	r0, r1
 800911a:	4611      	mov	r1, r2
 800911c:	461a      	mov	r2, r3
 800911e:	4603      	mov	r3, r0
 8009120:	817b      	strh	r3, [r7, #10]
 8009122:	460b      	mov	r3, r1
 8009124:	813b      	strh	r3, [r7, #8]
 8009126:	4613      	mov	r3, r2
 8009128:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800912a:	88fb      	ldrh	r3, [r7, #6]
 800912c:	b2da      	uxtb	r2, r3
 800912e:	8979      	ldrh	r1, [r7, #10]
 8009130:	4b20      	ldr	r3, [pc, #128]	; (80091b4 <I2C_RequestMemoryRead+0xa4>)
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	2300      	movs	r3, #0
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	f000 fd62 	bl	8009c00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800913c:	69fa      	ldr	r2, [r7, #28]
 800913e:	69b9      	ldr	r1, [r7, #24]
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f000 fbf4 	bl	800992e <I2C_WaitOnTXISFlagUntilTimeout>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	e02c      	b.n	80091aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009150:	88fb      	ldrh	r3, [r7, #6]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d105      	bne.n	8009162 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009156:	893b      	ldrh	r3, [r7, #8]
 8009158:	b2da      	uxtb	r2, r3
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	629a      	str	r2, [r3, #40]	; 0x28
 8009160:	e015      	b.n	800918e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009162:	893b      	ldrh	r3, [r7, #8]
 8009164:	0a1b      	lsrs	r3, r3, #8
 8009166:	b29b      	uxth	r3, r3
 8009168:	b2da      	uxtb	r2, r3
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009170:	69fa      	ldr	r2, [r7, #28]
 8009172:	69b9      	ldr	r1, [r7, #24]
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f000 fbda 	bl	800992e <I2C_WaitOnTXISFlagUntilTimeout>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d001      	beq.n	8009184 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	e012      	b.n	80091aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009184:	893b      	ldrh	r3, [r7, #8]
 8009186:	b2da      	uxtb	r2, r3
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	9300      	str	r3, [sp, #0]
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	2200      	movs	r2, #0
 8009196:	2140      	movs	r1, #64	; 0x40
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f000 fb88 	bl	80098ae <I2C_WaitOnFlagUntilTimeout>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e000      	b.n	80091aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	80002000 	.word	0x80002000

080091b8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80091ce:	2b28      	cmp	r3, #40	; 0x28
 80091d0:	d16a      	bne.n	80092a8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	0c1b      	lsrs	r3, r3, #16
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	f003 0301 	and.w	r3, r3, #1
 80091e0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	699b      	ldr	r3, [r3, #24]
 80091e8:	0c1b      	lsrs	r3, r3, #16
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80091f0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091fe:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	b29b      	uxth	r3, r3
 8009208:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800920c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	2b02      	cmp	r3, #2
 8009214:	d138      	bne.n	8009288 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8009216:	897b      	ldrh	r3, [r7, #10]
 8009218:	09db      	lsrs	r3, r3, #7
 800921a:	b29a      	uxth	r2, r3
 800921c:	89bb      	ldrh	r3, [r7, #12]
 800921e:	4053      	eors	r3, r2
 8009220:	b29b      	uxth	r3, r3
 8009222:	f003 0306 	and.w	r3, r3, #6
 8009226:	2b00      	cmp	r3, #0
 8009228:	d11c      	bne.n	8009264 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800922a:	897b      	ldrh	r3, [r7, #10]
 800922c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009232:	1c5a      	adds	r2, r3, #1
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800923c:	2b02      	cmp	r3, #2
 800923e:	d13b      	bne.n	80092b8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2208      	movs	r2, #8
 800924c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009256:	89ba      	ldrh	r2, [r7, #12]
 8009258:	7bfb      	ldrb	r3, [r7, #15]
 800925a:	4619      	mov	r1, r3
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f7ff fdde 	bl	8008e1e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009262:	e029      	b.n	80092b8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8009264:	893b      	ldrh	r3, [r7, #8]
 8009266:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009268:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fcf9 	bl	8009c64 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800927a:	89ba      	ldrh	r2, [r7, #12]
 800927c:	7bfb      	ldrb	r3, [r7, #15]
 800927e:	4619      	mov	r1, r3
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f7ff fdcc 	bl	8008e1e <HAL_I2C_AddrCallback>
}
 8009286:	e017      	b.n	80092b8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009288:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fce9 	bl	8009c64 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800929a:	89ba      	ldrh	r2, [r7, #12]
 800929c:	7bfb      	ldrb	r3, [r7, #15]
 800929e:	4619      	mov	r1, r3
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f7ff fdbc 	bl	8008e1e <HAL_I2C_AddrCallback>
}
 80092a6:	e007      	b.n	80092b8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2208      	movs	r2, #8
 80092ae:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80092b8:	bf00      	nop
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	0b9b      	lsrs	r3, r3, #14
 80092dc:	f003 0301 	and.w	r3, r3, #1
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d008      	beq.n	80092f6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80092f2:	601a      	str	r2, [r3, #0]
 80092f4:	e00d      	b.n	8009312 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	0bdb      	lsrs	r3, r3, #15
 80092fa:	f003 0301 	and.w	r3, r3, #1
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d007      	beq.n	8009312 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009310:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009318:	b2db      	uxtb	r3, r3
 800931a:	2b29      	cmp	r3, #41	; 0x29
 800931c:	d112      	bne.n	8009344 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2228      	movs	r2, #40	; 0x28
 8009322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2221      	movs	r2, #33	; 0x21
 800932a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800932c:	2101      	movs	r1, #1
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 fc98 	bl	8009c64 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f7ff fd5a 	bl	8008df6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009342:	e017      	b.n	8009374 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800934a:	b2db      	uxtb	r3, r3
 800934c:	2b2a      	cmp	r3, #42	; 0x2a
 800934e:	d111      	bne.n	8009374 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2228      	movs	r2, #40	; 0x28
 8009354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2222      	movs	r2, #34	; 0x22
 800935c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800935e:	2102      	movs	r1, #2
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 fc7f 	bl	8009c64 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f7ff fd4b 	bl	8008e0a <HAL_I2C_SlaveRxCpltCallback>
}
 8009374:	bf00      	nop
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b086      	sub	sp, #24
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009398:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2220      	movs	r2, #32
 80093a0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80093a2:	7bfb      	ldrb	r3, [r7, #15]
 80093a4:	2b21      	cmp	r3, #33	; 0x21
 80093a6:	d002      	beq.n	80093ae <I2C_ITSlaveCplt+0x32>
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
 80093aa:	2b29      	cmp	r3, #41	; 0x29
 80093ac:	d108      	bne.n	80093c0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80093ae:	f248 0101 	movw	r1, #32769	; 0x8001
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fc56 	bl	8009c64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2221      	movs	r2, #33	; 0x21
 80093bc:	631a      	str	r2, [r3, #48]	; 0x30
 80093be:	e00d      	b.n	80093dc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
 80093c2:	2b22      	cmp	r3, #34	; 0x22
 80093c4:	d002      	beq.n	80093cc <I2C_ITSlaveCplt+0x50>
 80093c6:	7bfb      	ldrb	r3, [r7, #15]
 80093c8:	2b2a      	cmp	r3, #42	; 0x2a
 80093ca:	d107      	bne.n	80093dc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80093cc:	f248 0102 	movw	r1, #32770	; 0x8002
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fc47 	bl	8009c64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2222      	movs	r2, #34	; 0x22
 80093da:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093ea:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6859      	ldr	r1, [r3, #4]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	4b64      	ldr	r3, [pc, #400]	; (8009588 <I2C_ITSlaveCplt+0x20c>)
 80093f8:	400b      	ands	r3, r1
 80093fa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 fa14 	bl	800982a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	0b9b      	lsrs	r3, r3, #14
 8009406:	f003 0301 	and.w	r3, r3, #1
 800940a:	2b00      	cmp	r3, #0
 800940c:	d013      	beq.n	8009436 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800941c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009422:	2b00      	cmp	r3, #0
 8009424:	d020      	beq.n	8009468 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	b29a      	uxth	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009434:	e018      	b.n	8009468 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	0bdb      	lsrs	r3, r3, #15
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	2b00      	cmp	r3, #0
 8009440:	d012      	beq.n	8009468 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009450:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009456:	2b00      	cmp	r3, #0
 8009458:	d006      	beq.n	8009468 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	b29a      	uxth	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	089b      	lsrs	r3, r3, #2
 800946c:	f003 0301 	and.w	r3, r3, #1
 8009470:	2b00      	cmp	r3, #0
 8009472:	d020      	beq.n	80094b6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	f023 0304 	bic.w	r3, r3, #4
 800947a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009486:	b2d2      	uxtb	r2, r2
 8009488:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948e:	1c5a      	adds	r2, r3, #1
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00c      	beq.n	80094b6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094a0:	3b01      	subs	r3, #1
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	3b01      	subs	r3, #1
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d005      	beq.n	80094cc <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c4:	f043 0204 	orr.w	r2, r3, #4
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d010      	beq.n	8009504 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e6:	4619      	mov	r1, r3
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 f8a7 	bl	800963c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b28      	cmp	r3, #40	; 0x28
 80094f8:	d141      	bne.n	800957e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80094fa:	6979      	ldr	r1, [r7, #20]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 f847 	bl	8009590 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009502:	e03c      	b.n	800957e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009508:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800950c:	d014      	beq.n	8009538 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f7ff fed6 	bl	80092c0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a1d      	ldr	r2, [pc, #116]	; (800958c <I2C_ITSlaveCplt+0x210>)
 8009518:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2220      	movs	r2, #32
 800951e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f7ff fc82 	bl	8008e3a <HAL_I2C_ListenCpltCallback>
}
 8009536:	e022      	b.n	800957e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800953e:	b2db      	uxtb	r3, r3
 8009540:	2b22      	cmp	r3, #34	; 0x22
 8009542:	d10e      	bne.n	8009562 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2220      	movs	r2, #32
 8009548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7ff fc55 	bl	8008e0a <HAL_I2C_SlaveRxCpltCallback>
}
 8009560:	e00d      	b.n	800957e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2220      	movs	r2, #32
 8009566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7ff fc3c 	bl	8008df6 <HAL_I2C_SlaveTxCpltCallback>
}
 800957e:	bf00      	nop
 8009580:	3718      	adds	r7, #24
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	fe00e800 	.word	0xfe00e800
 800958c:	ffff0000 	.word	0xffff0000

08009590 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a26      	ldr	r2, [pc, #152]	; (8009638 <I2C_ITListenCplt+0xa8>)
 800959e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2220      	movs	r2, #32
 80095aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	089b      	lsrs	r3, r3, #2
 80095c0:	f003 0301 	and.w	r3, r3, #1
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d022      	beq.n	800960e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d2:	b2d2      	uxtb	r2, r2
 80095d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095da:	1c5a      	adds	r2, r3, #1
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d012      	beq.n	800960e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095ec:	3b01      	subs	r3, #1
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	3b01      	subs	r3, #1
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009606:	f043 0204 	orr.w	r2, r3, #4
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800960e:	f248 0103 	movw	r1, #32771	; 0x8003
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 fb26 	bl	8009c64 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2210      	movs	r2, #16
 800961e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f7ff fc06 	bl	8008e3a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800962e:	bf00      	nop
 8009630:	3708      	adds	r7, #8
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	ffff0000 	.word	0xffff0000

0800963c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800964c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a5d      	ldr	r2, [pc, #372]	; (80097d0 <I2C_ITError+0x194>)
 800965a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	431a      	orrs	r2, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800966e:	7bfb      	ldrb	r3, [r7, #15]
 8009670:	2b28      	cmp	r3, #40	; 0x28
 8009672:	d005      	beq.n	8009680 <I2C_ITError+0x44>
 8009674:	7bfb      	ldrb	r3, [r7, #15]
 8009676:	2b29      	cmp	r3, #41	; 0x29
 8009678:	d002      	beq.n	8009680 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800967a:	7bfb      	ldrb	r3, [r7, #15]
 800967c:	2b2a      	cmp	r3, #42	; 0x2a
 800967e:	d10b      	bne.n	8009698 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009680:	2103      	movs	r1, #3
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 faee 	bl	8009c64 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2228      	movs	r2, #40	; 0x28
 800968c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a50      	ldr	r2, [pc, #320]	; (80097d4 <I2C_ITError+0x198>)
 8009694:	635a      	str	r2, [r3, #52]	; 0x34
 8009696:	e011      	b.n	80096bc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009698:	f248 0103 	movw	r1, #32771	; 0x8003
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 fae1 	bl	8009c64 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	2b60      	cmp	r3, #96	; 0x60
 80096ac:	d003      	beq.n	80096b6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2220      	movs	r2, #32
 80096b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d039      	beq.n	800973e <I2C_ITError+0x102>
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	2b11      	cmp	r3, #17
 80096ce:	d002      	beq.n	80096d6 <I2C_ITError+0x9a>
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	2b21      	cmp	r3, #33	; 0x21
 80096d4:	d133      	bne.n	800973e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096e4:	d107      	bne.n	80096f6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80096f4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fe fd04 	bl	8008108 <HAL_DMA_GetState>
 8009700:	4603      	mov	r3, r0
 8009702:	2b01      	cmp	r3, #1
 8009704:	d017      	beq.n	8009736 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970a:	4a33      	ldr	r2, [pc, #204]	; (80097d8 <I2C_ITError+0x19c>)
 800970c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971a:	4618      	mov	r0, r3
 800971c:	f7fe fc04 	bl	8007f28 <HAL_DMA_Abort_IT>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d04d      	beq.n	80097c2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009730:	4610      	mov	r0, r2
 8009732:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009734:	e045      	b.n	80097c2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f850 	bl	80097dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800973c:	e041      	b.n	80097c2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009742:	2b00      	cmp	r3, #0
 8009744:	d039      	beq.n	80097ba <I2C_ITError+0x17e>
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	2b12      	cmp	r3, #18
 800974a:	d002      	beq.n	8009752 <I2C_ITError+0x116>
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	2b22      	cmp	r3, #34	; 0x22
 8009750:	d133      	bne.n	80097ba <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800975c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009760:	d107      	bne.n	8009772 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009770:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009776:	4618      	mov	r0, r3
 8009778:	f7fe fcc6 	bl	8008108 <HAL_DMA_GetState>
 800977c:	4603      	mov	r3, r0
 800977e:	2b01      	cmp	r3, #1
 8009780:	d017      	beq.n	80097b2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009786:	4a14      	ldr	r2, [pc, #80]	; (80097d8 <I2C_ITError+0x19c>)
 8009788:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009796:	4618      	mov	r0, r3
 8009798:	f7fe fbc6 	bl	8007f28 <HAL_DMA_Abort_IT>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d011      	beq.n	80097c6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80097ac:	4610      	mov	r0, r2
 80097ae:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80097b0:	e009      	b.n	80097c6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f812 	bl	80097dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80097b8:	e005      	b.n	80097c6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f80e 	bl	80097dc <I2C_TreatErrorCallback>
  }
}
 80097c0:	e002      	b.n	80097c8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80097c2:	bf00      	nop
 80097c4:	e000      	b.n	80097c8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80097c6:	bf00      	nop
}
 80097c8:	bf00      	nop
 80097ca:	3710      	adds	r7, #16
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	ffff0000 	.word	0xffff0000
 80097d4:	08008e63 	.word	0x08008e63
 80097d8:	08009873 	.word	0x08009873

080097dc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	2b60      	cmp	r3, #96	; 0x60
 80097ee:	d10e      	bne.n	800980e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2220      	movs	r2, #32
 80097f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f7ff fb21 	bl	8008e4e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800980c:	e009      	b.n	8009822 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7fa f9b5 	bl	8003b8c <HAL_I2C_ErrorCallback>
}
 8009822:	bf00      	nop
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800982a:	b480      	push	{r7}
 800982c:	b083      	sub	sp, #12
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	699b      	ldr	r3, [r3, #24]
 8009838:	f003 0302 	and.w	r3, r3, #2
 800983c:	2b02      	cmp	r3, #2
 800983e:	d103      	bne.n	8009848 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2200      	movs	r2, #0
 8009846:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	699b      	ldr	r3, [r3, #24]
 800984e:	f003 0301 	and.w	r3, r3, #1
 8009852:	2b01      	cmp	r3, #1
 8009854:	d007      	beq.n	8009866 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	699a      	ldr	r2, [r3, #24]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f042 0201 	orr.w	r2, r2, #1
 8009864:	619a      	str	r2, [r3, #24]
  }
}
 8009866:	bf00      	nop
 8009868:	370c      	adds	r7, #12
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr

08009872 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b084      	sub	sp, #16
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800987e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009884:	2b00      	cmp	r3, #0
 8009886:	d003      	beq.n	8009890 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988c:	2200      	movs	r2, #0
 800988e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009894:	2b00      	cmp	r3, #0
 8009896:	d003      	beq.n	80098a0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800989c:	2200      	movs	r2, #0
 800989e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f7ff ff9b 	bl	80097dc <I2C_TreatErrorCallback>
}
 80098a6:	bf00      	nop
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b084      	sub	sp, #16
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	60f8      	str	r0, [r7, #12]
 80098b6:	60b9      	str	r1, [r7, #8]
 80098b8:	603b      	str	r3, [r7, #0]
 80098ba:	4613      	mov	r3, r2
 80098bc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098be:	e022      	b.n	8009906 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098c6:	d01e      	beq.n	8009906 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098c8:	f7fe f8c6 	bl	8007a58 <HAL_GetTick>
 80098cc:	4602      	mov	r2, r0
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d302      	bcc.n	80098de <I2C_WaitOnFlagUntilTimeout+0x30>
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d113      	bne.n	8009906 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098e2:	f043 0220 	orr.w	r2, r3, #32
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2220      	movs	r2, #32
 80098ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e00f      	b.n	8009926 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	699a      	ldr	r2, [r3, #24]
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	4013      	ands	r3, r2
 8009910:	68ba      	ldr	r2, [r7, #8]
 8009912:	429a      	cmp	r2, r3
 8009914:	bf0c      	ite	eq
 8009916:	2301      	moveq	r3, #1
 8009918:	2300      	movne	r3, #0
 800991a:	b2db      	uxtb	r3, r3
 800991c:	461a      	mov	r2, r3
 800991e:	79fb      	ldrb	r3, [r7, #7]
 8009920:	429a      	cmp	r2, r3
 8009922:	d0cd      	beq.n	80098c0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b084      	sub	sp, #16
 8009932:	af00      	add	r7, sp, #0
 8009934:	60f8      	str	r0, [r7, #12]
 8009936:	60b9      	str	r1, [r7, #8]
 8009938:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800993a:	e02c      	b.n	8009996 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	68b9      	ldr	r1, [r7, #8]
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f000 f871 	bl	8009a28 <I2C_IsErrorOccurred>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d001      	beq.n	8009950 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	e02a      	b.n	80099a6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009956:	d01e      	beq.n	8009996 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009958:	f7fe f87e 	bl	8007a58 <HAL_GetTick>
 800995c:	4602      	mov	r2, r0
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	68ba      	ldr	r2, [r7, #8]
 8009964:	429a      	cmp	r2, r3
 8009966:	d302      	bcc.n	800996e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d113      	bne.n	8009996 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009972:	f043 0220 	orr.w	r2, r3, #32
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2220      	movs	r2, #32
 800997e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	e007      	b.n	80099a6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	699b      	ldr	r3, [r3, #24]
 800999c:	f003 0302 	and.w	r3, r3, #2
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d1cb      	bne.n	800993c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b084      	sub	sp, #16
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	60f8      	str	r0, [r7, #12]
 80099b6:	60b9      	str	r1, [r7, #8]
 80099b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099ba:	e028      	b.n	8009a0e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	68b9      	ldr	r1, [r7, #8]
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f000 f831 	bl	8009a28 <I2C_IsErrorOccurred>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d001      	beq.n	80099d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	e026      	b.n	8009a1e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099d0:	f7fe f842 	bl	8007a58 <HAL_GetTick>
 80099d4:	4602      	mov	r2, r0
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	68ba      	ldr	r2, [r7, #8]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d302      	bcc.n	80099e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d113      	bne.n	8009a0e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ea:	f043 0220 	orr.w	r2, r3, #32
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2220      	movs	r2, #32
 80099f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e007      	b.n	8009a1e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	699b      	ldr	r3, [r3, #24]
 8009a14:	f003 0320 	and.w	r3, r3, #32
 8009a18:	2b20      	cmp	r3, #32
 8009a1a:	d1cf      	bne.n	80099bc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
	...

08009a28 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b08a      	sub	sp, #40	; 0x28
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a34:	2300      	movs	r3, #0
 8009a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009a42:	2300      	movs	r3, #0
 8009a44:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	f003 0310 	and.w	r3, r3, #16
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d075      	beq.n	8009b40 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2210      	movs	r2, #16
 8009a5a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a5c:	e056      	b.n	8009b0c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a64:	d052      	beq.n	8009b0c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009a66:	f7fd fff7 	bl	8007a58 <HAL_GetTick>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d302      	bcc.n	8009a7c <I2C_IsErrorOccurred+0x54>
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d147      	bne.n	8009b0c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a86:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a8e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	699b      	ldr	r3, [r3, #24]
 8009a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a9e:	d12e      	bne.n	8009afe <I2C_IsErrorOccurred+0xd6>
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009aa6:	d02a      	beq.n	8009afe <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8009aa8:	7cfb      	ldrb	r3, [r7, #19]
 8009aaa:	2b20      	cmp	r3, #32
 8009aac:	d027      	beq.n	8009afe <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	685a      	ldr	r2, [r3, #4]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009abc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009abe:	f7fd ffcb 	bl	8007a58 <HAL_GetTick>
 8009ac2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ac4:	e01b      	b.n	8009afe <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009ac6:	f7fd ffc7 	bl	8007a58 <HAL_GetTick>
 8009aca:	4602      	mov	r2, r0
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	2b19      	cmp	r3, #25
 8009ad2:	d914      	bls.n	8009afe <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ad8:	f043 0220 	orr.w	r2, r3, #32
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2220      	movs	r2, #32
 8009ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2200      	movs	r2, #0
 8009aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	f003 0320 	and.w	r3, r3, #32
 8009b08:	2b20      	cmp	r3, #32
 8009b0a:	d1dc      	bne.n	8009ac6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	699b      	ldr	r3, [r3, #24]
 8009b12:	f003 0320 	and.w	r3, r3, #32
 8009b16:	2b20      	cmp	r3, #32
 8009b18:	d003      	beq.n	8009b22 <I2C_IsErrorOccurred+0xfa>
 8009b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d09d      	beq.n	8009a5e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009b22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d103      	bne.n	8009b32 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2220      	movs	r2, #32
 8009b30:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009b32:	6a3b      	ldr	r3, [r7, #32]
 8009b34:	f043 0304 	orr.w	r3, r3, #4
 8009b38:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00b      	beq.n	8009b6a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009b52:	6a3b      	ldr	r3, [r7, #32]
 8009b54:	f043 0301 	orr.w	r3, r3, #1
 8009b58:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00b      	beq.n	8009b8c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009b74:	6a3b      	ldr	r3, [r7, #32]
 8009b76:	f043 0308 	orr.w	r3, r3, #8
 8009b7a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009b84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00b      	beq.n	8009bae <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	f043 0302 	orr.w	r3, r3, #2
 8009b9c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ba6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009bae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d01c      	beq.n	8009bf0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f7ff fe37 	bl	800982a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	6859      	ldr	r1, [r3, #4]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	4b0d      	ldr	r3, [pc, #52]	; (8009bfc <I2C_IsErrorOccurred+0x1d4>)
 8009bc8:	400b      	ands	r3, r1
 8009bca:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bd0:	6a3b      	ldr	r3, [r7, #32]
 8009bd2:	431a      	orrs	r2, r3
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2220      	movs	r2, #32
 8009bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3728      	adds	r7, #40	; 0x28
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	fe00e800 	.word	0xfe00e800

08009c00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b087      	sub	sp, #28
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	607b      	str	r3, [r7, #4]
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	817b      	strh	r3, [r7, #10]
 8009c0e:	4613      	mov	r3, r2
 8009c10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c12:	897b      	ldrh	r3, [r7, #10]
 8009c14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c18:	7a7b      	ldrb	r3, [r7, #9]
 8009c1a:	041b      	lsls	r3, r3, #16
 8009c1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c20:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c2e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	685a      	ldr	r2, [r3, #4]
 8009c36:	6a3b      	ldr	r3, [r7, #32]
 8009c38:	0d5b      	lsrs	r3, r3, #21
 8009c3a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009c3e:	4b08      	ldr	r3, [pc, #32]	; (8009c60 <I2C_TransferConfig+0x60>)
 8009c40:	430b      	orrs	r3, r1
 8009c42:	43db      	mvns	r3, r3
 8009c44:	ea02 0103 	and.w	r1, r2, r3
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	697a      	ldr	r2, [r7, #20]
 8009c4e:	430a      	orrs	r2, r1
 8009c50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009c52:	bf00      	nop
 8009c54:	371c      	adds	r7, #28
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	03ff63ff 	.word	0x03ff63ff

08009c64 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009c70:	2300      	movs	r3, #0
 8009c72:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009c74:	887b      	ldrh	r3, [r7, #2]
 8009c76:	f003 0301 	and.w	r3, r3, #1
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00f      	beq.n	8009c9e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8009c84:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009c92:	2b28      	cmp	r3, #40	; 0x28
 8009c94:	d003      	beq.n	8009c9e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009c9c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009c9e:	887b      	ldrh	r3, [r7, #2]
 8009ca0:	f003 0302 	and.w	r3, r3, #2
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00f      	beq.n	8009cc8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8009cae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009cbc:	2b28      	cmp	r3, #40	; 0x28
 8009cbe:	d003      	beq.n	8009cc8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009cc6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009cc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	da03      	bge.n	8009cd8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009cd6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009cd8:	887b      	ldrh	r3, [r7, #2]
 8009cda:	2b10      	cmp	r3, #16
 8009cdc:	d103      	bne.n	8009ce6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009ce4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009ce6:	887b      	ldrh	r3, [r7, #2]
 8009ce8:	2b20      	cmp	r3, #32
 8009cea:	d103      	bne.n	8009cf4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f043 0320 	orr.w	r3, r3, #32
 8009cf2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009cf4:	887b      	ldrh	r3, [r7, #2]
 8009cf6:	2b40      	cmp	r3, #64	; 0x40
 8009cf8:	d103      	bne.n	8009d02 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d00:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	6819      	ldr	r1, [r3, #0]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	43da      	mvns	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	400a      	ands	r2, r1
 8009d12:	601a      	str	r2, [r3, #0]
}
 8009d14:	bf00      	nop
 8009d16:	3714      	adds	r7, #20
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	2b20      	cmp	r3, #32
 8009d34:	d138      	bne.n	8009da8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d101      	bne.n	8009d44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009d40:	2302      	movs	r3, #2
 8009d42:	e032      	b.n	8009daa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2224      	movs	r2, #36	; 0x24
 8009d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f022 0201 	bic.w	r2, r2, #1
 8009d62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009d72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6819      	ldr	r1, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	430a      	orrs	r2, r1
 8009d82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f042 0201 	orr.w	r2, r2, #1
 8009d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2220      	movs	r2, #32
 8009d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009da4:	2300      	movs	r3, #0
 8009da6:	e000      	b.n	8009daa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009da8:	2302      	movs	r3, #2
  }
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	370c      	adds	r7, #12
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr

08009db6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009db6:	b480      	push	{r7}
 8009db8:	b085      	sub	sp, #20
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
 8009dbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	2b20      	cmp	r3, #32
 8009dca:	d139      	bne.n	8009e40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d101      	bne.n	8009dda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009dd6:	2302      	movs	r3, #2
 8009dd8:	e033      	b.n	8009e42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2224      	movs	r2, #36	; 0x24
 8009de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f022 0201 	bic.w	r2, r2, #1
 8009df8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009e08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	021b      	lsls	r3, r3, #8
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f042 0201 	orr.w	r2, r2, #1
 8009e2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2220      	movs	r2, #32
 8009e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	e000      	b.n	8009e42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009e40:	2302      	movs	r3, #2
  }
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3714      	adds	r7, #20
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr
	...

08009e50 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e58:	4b0b      	ldr	r3, [pc, #44]	; (8009e88 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e5c:	4a0a      	ldr	r2, [pc, #40]	; (8009e88 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009e5e:	f043 0301 	orr.w	r3, r3, #1
 8009e62:	6613      	str	r3, [r2, #96]	; 0x60
 8009e64:	4b08      	ldr	r3, [pc, #32]	; (8009e88 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e68:	f003 0301 	and.w	r3, r3, #1
 8009e6c:	60fb      	str	r3, [r7, #12]
 8009e6e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8009e70:	4b06      	ldr	r3, [pc, #24]	; (8009e8c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009e72:	685a      	ldr	r2, [r3, #4]
 8009e74:	4905      	ldr	r1, [pc, #20]	; (8009e8c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	604b      	str	r3, [r1, #4]
}
 8009e7c:	bf00      	nop
 8009e7e:	3714      	adds	r7, #20
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr
 8009e88:	40021000 	.word	0x40021000
 8009e8c:	40010000 	.word	0x40010000

08009e90 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d10c      	bne.n	8009ebc <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8009ea2:	4b13      	ldr	r3, [pc, #76]	; (8009ef0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8009ea4:	695b      	ldr	r3, [r3, #20]
 8009ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009eae:	d10e      	bne.n	8009ece <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8009eb0:	f000 f8b6 	bl	800a020 <HAL_PWREx_DisableLowPowerRunMode>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d009      	beq.n	8009ece <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8009eba:	e016      	b.n	8009eea <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8009ebc:	4b0c      	ldr	r3, [pc, #48]	; (8009ef0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8009ebe:	695b      	ldr	r3, [r3, #20]
 8009ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ec8:	d001      	beq.n	8009ece <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8009eca:	f000 f899 	bl	800a000 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009ece:	4b09      	ldr	r3, [pc, #36]	; (8009ef4 <HAL_PWR_EnterSLEEPMode+0x64>)
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	4a08      	ldr	r2, [pc, #32]	; (8009ef4 <HAL_PWR_EnterSLEEPMode+0x64>)
 8009ed4:	f023 0304 	bic.w	r3, r3, #4
 8009ed8:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8009eda:	78fb      	ldrb	r3, [r7, #3]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d101      	bne.n	8009ee4 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8009ee0:	bf30      	wfi
 8009ee2:	e002      	b.n	8009eea <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8009ee4:	bf40      	sev
    __WFE();
 8009ee6:	bf20      	wfe
    __WFE();
 8009ee8:	bf20      	wfe
  }

}
 8009eea:	3708      	adds	r7, #8
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	40007000 	.word	0x40007000
 8009ef4:	e000ed00 	.word	0xe000ed00

08009ef8 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8009efc:	4b05      	ldr	r3, [pc, #20]	; (8009f14 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	4a04      	ldr	r2, [pc, #16]	; (8009f14 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8009f02:	f043 0302 	orr.w	r3, r3, #2
 8009f06:	6113      	str	r3, [r2, #16]
}
 8009f08:	bf00      	nop
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	e000ed00 	.word	0xe000ed00

08009f18 <HAL_PWR_DisableSleepOnExit>:
  * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8009f1c:	4b05      	ldr	r3, [pc, #20]	; (8009f34 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8009f1e:	691b      	ldr	r3, [r3, #16]
 8009f20:	4a04      	ldr	r2, [pc, #16]	; (8009f34 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8009f22:	f023 0302 	bic.w	r3, r3, #2
 8009f26:	6113      	str	r3, [r2, #16]
}
 8009f28:	bf00      	nop
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	e000ed00 	.word	0xe000ed00

08009f38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009f3c:	4b04      	ldr	r3, [pc, #16]	; (8009f50 <HAL_PWREx_GetVoltageRange+0x18>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	40007000 	.word	0x40007000

08009f54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f62:	d130      	bne.n	8009fc6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009f64:	4b23      	ldr	r3, [pc, #140]	; (8009ff4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f70:	d038      	beq.n	8009fe4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009f72:	4b20      	ldr	r3, [pc, #128]	; (8009ff4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009f7a:	4a1e      	ldr	r2, [pc, #120]	; (8009ff4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009f7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009f82:	4b1d      	ldr	r3, [pc, #116]	; (8009ff8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2232      	movs	r2, #50	; 0x32
 8009f88:	fb02 f303 	mul.w	r3, r2, r3
 8009f8c:	4a1b      	ldr	r2, [pc, #108]	; (8009ffc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8009f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f92:	0c9b      	lsrs	r3, r3, #18
 8009f94:	3301      	adds	r3, #1
 8009f96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009f98:	e002      	b.n	8009fa0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009fa0:	4b14      	ldr	r3, [pc, #80]	; (8009ff4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009fa2:	695b      	ldr	r3, [r3, #20]
 8009fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fac:	d102      	bne.n	8009fb4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1f2      	bne.n	8009f9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009fb4:	4b0f      	ldr	r3, [pc, #60]	; (8009ff4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009fb6:	695b      	ldr	r3, [r3, #20]
 8009fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fc0:	d110      	bne.n	8009fe4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	e00f      	b.n	8009fe6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8009fc6:	4b0b      	ldr	r3, [pc, #44]	; (8009ff4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fd2:	d007      	beq.n	8009fe4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009fd4:	4b07      	ldr	r3, [pc, #28]	; (8009ff4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009fdc:	4a05      	ldr	r2, [pc, #20]	; (8009ff4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009fde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009fe2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	40007000 	.word	0x40007000
 8009ff8:	20000140 	.word	0x20000140
 8009ffc:	431bde83 	.word	0x431bde83

0800a000 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800a000:	b480      	push	{r7}
 800a002:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800a004:	4b05      	ldr	r3, [pc, #20]	; (800a01c <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a04      	ldr	r2, [pc, #16]	; (800a01c <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800a00a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a00e:	6013      	str	r3, [r2, #0]
}
 800a010:	bf00      	nop
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	40007000 	.word	0x40007000

0800a020 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800a026:	4b17      	ldr	r3, [pc, #92]	; (800a084 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a16      	ldr	r2, [pc, #88]	; (800a084 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a02c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a030:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a032:	4b15      	ldr	r3, [pc, #84]	; (800a088 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2232      	movs	r2, #50	; 0x32
 800a038:	fb02 f303 	mul.w	r3, r2, r3
 800a03c:	4a13      	ldr	r2, [pc, #76]	; (800a08c <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 800a03e:	fba2 2303 	umull	r2, r3, r2, r3
 800a042:	0c9b      	lsrs	r3, r3, #18
 800a044:	3301      	adds	r3, #1
 800a046:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a048:	e002      	b.n	800a050 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	3b01      	subs	r3, #1
 800a04e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a050:	4b0c      	ldr	r3, [pc, #48]	; (800a084 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a052:	695b      	ldr	r3, [r3, #20]
 800a054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a05c:	d102      	bne.n	800a064 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1f2      	bne.n	800a04a <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800a064:	4b07      	ldr	r3, [pc, #28]	; (800a084 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a066:	695b      	ldr	r3, [r3, #20]
 800a068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a06c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a070:	d101      	bne.n	800a076 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800a072:	2303      	movs	r3, #3
 800a074:	e000      	b.n	800a078 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr
 800a084:	40007000 	.word	0x40007000
 800a088:	20000140 	.word	0x20000140
 800a08c:	431bde83 	.word	0x431bde83

0800a090 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b088      	sub	sp, #32
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d101      	bne.n	800a0a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e3ca      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0a2:	4b97      	ldr	r3, [pc, #604]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	f003 030c 	and.w	r3, r3, #12
 800a0aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a0ac:	4b94      	ldr	r3, [pc, #592]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	f003 0303 	and.w	r3, r3, #3
 800a0b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f003 0310 	and.w	r3, r3, #16
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f000 80e4 	beq.w	800a28c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d007      	beq.n	800a0da <HAL_RCC_OscConfig+0x4a>
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	2b0c      	cmp	r3, #12
 800a0ce:	f040 808b 	bne.w	800a1e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	f040 8087 	bne.w	800a1e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a0da:	4b89      	ldr	r3, [pc, #548]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 0302 	and.w	r3, r3, #2
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d005      	beq.n	800a0f2 <HAL_RCC_OscConfig+0x62>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	699b      	ldr	r3, [r3, #24]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d101      	bne.n	800a0f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e3a2      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a1a      	ldr	r2, [r3, #32]
 800a0f6:	4b82      	ldr	r3, [pc, #520]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f003 0308 	and.w	r3, r3, #8
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d004      	beq.n	800a10c <HAL_RCC_OscConfig+0x7c>
 800a102:	4b7f      	ldr	r3, [pc, #508]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a10a:	e005      	b.n	800a118 <HAL_RCC_OscConfig+0x88>
 800a10c:	4b7c      	ldr	r3, [pc, #496]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a10e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a112:	091b      	lsrs	r3, r3, #4
 800a114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a118:	4293      	cmp	r3, r2
 800a11a:	d223      	bcs.n	800a164 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a1b      	ldr	r3, [r3, #32]
 800a120:	4618      	mov	r0, r3
 800a122:	f000 fd87 	bl	800ac34 <RCC_SetFlashLatencyFromMSIRange>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d001      	beq.n	800a130 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	e383      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a130:	4b73      	ldr	r3, [pc, #460]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a72      	ldr	r2, [pc, #456]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a136:	f043 0308 	orr.w	r3, r3, #8
 800a13a:	6013      	str	r3, [r2, #0]
 800a13c:	4b70      	ldr	r3, [pc, #448]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a1b      	ldr	r3, [r3, #32]
 800a148:	496d      	ldr	r1, [pc, #436]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a14a:	4313      	orrs	r3, r2
 800a14c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a14e:	4b6c      	ldr	r3, [pc, #432]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	69db      	ldr	r3, [r3, #28]
 800a15a:	021b      	lsls	r3, r3, #8
 800a15c:	4968      	ldr	r1, [pc, #416]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a15e:	4313      	orrs	r3, r2
 800a160:	604b      	str	r3, [r1, #4]
 800a162:	e025      	b.n	800a1b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a164:	4b66      	ldr	r3, [pc, #408]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a65      	ldr	r2, [pc, #404]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a16a:	f043 0308 	orr.w	r3, r3, #8
 800a16e:	6013      	str	r3, [r2, #0]
 800a170:	4b63      	ldr	r3, [pc, #396]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a1b      	ldr	r3, [r3, #32]
 800a17c:	4960      	ldr	r1, [pc, #384]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a17e:	4313      	orrs	r3, r2
 800a180:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a182:	4b5f      	ldr	r3, [pc, #380]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	69db      	ldr	r3, [r3, #28]
 800a18e:	021b      	lsls	r3, r3, #8
 800a190:	495b      	ldr	r1, [pc, #364]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a192:	4313      	orrs	r3, r2
 800a194:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d109      	bne.n	800a1b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6a1b      	ldr	r3, [r3, #32]
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f000 fd47 	bl	800ac34 <RCC_SetFlashLatencyFromMSIRange>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d001      	beq.n	800a1b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e343      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a1b0:	f000 fc4a 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	4b52      	ldr	r3, [pc, #328]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	091b      	lsrs	r3, r3, #4
 800a1bc:	f003 030f 	and.w	r3, r3, #15
 800a1c0:	4950      	ldr	r1, [pc, #320]	; (800a304 <HAL_RCC_OscConfig+0x274>)
 800a1c2:	5ccb      	ldrb	r3, [r1, r3]
 800a1c4:	f003 031f 	and.w	r3, r3, #31
 800a1c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a1cc:	4a4e      	ldr	r2, [pc, #312]	; (800a308 <HAL_RCC_OscConfig+0x278>)
 800a1ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a1d0:	4b4e      	ldr	r3, [pc, #312]	; (800a30c <HAL_RCC_OscConfig+0x27c>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7fc fc61 	bl	8006a9c <HAL_InitTick>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a1de:	7bfb      	ldrb	r3, [r7, #15]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d052      	beq.n	800a28a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800a1e4:	7bfb      	ldrb	r3, [r7, #15]
 800a1e6:	e327      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d032      	beq.n	800a256 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a1f0:	4b43      	ldr	r3, [pc, #268]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a42      	ldr	r2, [pc, #264]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a1f6:	f043 0301 	orr.w	r3, r3, #1
 800a1fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a1fc:	f7fd fc2c 	bl	8007a58 <HAL_GetTick>
 800a200:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a202:	e008      	b.n	800a216 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a204:	f7fd fc28 	bl	8007a58 <HAL_GetTick>
 800a208:	4602      	mov	r2, r0
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	1ad3      	subs	r3, r2, r3
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d901      	bls.n	800a216 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800a212:	2303      	movs	r3, #3
 800a214:	e310      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a216:	4b3a      	ldr	r3, [pc, #232]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f003 0302 	and.w	r3, r3, #2
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d0f0      	beq.n	800a204 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a222:	4b37      	ldr	r3, [pc, #220]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a36      	ldr	r2, [pc, #216]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a228:	f043 0308 	orr.w	r3, r3, #8
 800a22c:	6013      	str	r3, [r2, #0]
 800a22e:	4b34      	ldr	r3, [pc, #208]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	4931      	ldr	r1, [pc, #196]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a23c:	4313      	orrs	r3, r2
 800a23e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a240:	4b2f      	ldr	r3, [pc, #188]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	69db      	ldr	r3, [r3, #28]
 800a24c:	021b      	lsls	r3, r3, #8
 800a24e:	492c      	ldr	r1, [pc, #176]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a250:	4313      	orrs	r3, r2
 800a252:	604b      	str	r3, [r1, #4]
 800a254:	e01a      	b.n	800a28c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a256:	4b2a      	ldr	r3, [pc, #168]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a29      	ldr	r2, [pc, #164]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a25c:	f023 0301 	bic.w	r3, r3, #1
 800a260:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a262:	f7fd fbf9 	bl	8007a58 <HAL_GetTick>
 800a266:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a268:	e008      	b.n	800a27c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a26a:	f7fd fbf5 	bl	8007a58 <HAL_GetTick>
 800a26e:	4602      	mov	r2, r0
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	2b02      	cmp	r3, #2
 800a276:	d901      	bls.n	800a27c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800a278:	2303      	movs	r3, #3
 800a27a:	e2dd      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a27c:	4b20      	ldr	r3, [pc, #128]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 0302 	and.w	r3, r3, #2
 800a284:	2b00      	cmp	r3, #0
 800a286:	d1f0      	bne.n	800a26a <HAL_RCC_OscConfig+0x1da>
 800a288:	e000      	b.n	800a28c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a28a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f003 0301 	and.w	r3, r3, #1
 800a294:	2b00      	cmp	r3, #0
 800a296:	d074      	beq.n	800a382 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	2b08      	cmp	r3, #8
 800a29c:	d005      	beq.n	800a2aa <HAL_RCC_OscConfig+0x21a>
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	2b0c      	cmp	r3, #12
 800a2a2:	d10e      	bne.n	800a2c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	2b03      	cmp	r3, #3
 800a2a8:	d10b      	bne.n	800a2c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2aa:	4b15      	ldr	r3, [pc, #84]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d064      	beq.n	800a380 <HAL_RCC_OscConfig+0x2f0>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d160      	bne.n	800a380 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e2ba      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2ca:	d106      	bne.n	800a2da <HAL_RCC_OscConfig+0x24a>
 800a2cc:	4b0c      	ldr	r3, [pc, #48]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a0b      	ldr	r2, [pc, #44]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a2d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2d6:	6013      	str	r3, [r2, #0]
 800a2d8:	e026      	b.n	800a328 <HAL_RCC_OscConfig+0x298>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a2e2:	d115      	bne.n	800a310 <HAL_RCC_OscConfig+0x280>
 800a2e4:	4b06      	ldr	r3, [pc, #24]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a05      	ldr	r2, [pc, #20]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a2ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a2ee:	6013      	str	r3, [r2, #0]
 800a2f0:	4b03      	ldr	r3, [pc, #12]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a02      	ldr	r2, [pc, #8]	; (800a300 <HAL_RCC_OscConfig+0x270>)
 800a2f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2fa:	6013      	str	r3, [r2, #0]
 800a2fc:	e014      	b.n	800a328 <HAL_RCC_OscConfig+0x298>
 800a2fe:	bf00      	nop
 800a300:	40021000 	.word	0x40021000
 800a304:	080193c4 	.word	0x080193c4
 800a308:	20000140 	.word	0x20000140
 800a30c:	20000170 	.word	0x20000170
 800a310:	4ba0      	ldr	r3, [pc, #640]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a9f      	ldr	r2, [pc, #636]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a31a:	6013      	str	r3, [r2, #0]
 800a31c:	4b9d      	ldr	r3, [pc, #628]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a9c      	ldr	r2, [pc, #624]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d013      	beq.n	800a358 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a330:	f7fd fb92 	bl	8007a58 <HAL_GetTick>
 800a334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a336:	e008      	b.n	800a34a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a338:	f7fd fb8e 	bl	8007a58 <HAL_GetTick>
 800a33c:	4602      	mov	r2, r0
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	1ad3      	subs	r3, r2, r3
 800a342:	2b64      	cmp	r3, #100	; 0x64
 800a344:	d901      	bls.n	800a34a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a346:	2303      	movs	r3, #3
 800a348:	e276      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a34a:	4b92      	ldr	r3, [pc, #584]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a352:	2b00      	cmp	r3, #0
 800a354:	d0f0      	beq.n	800a338 <HAL_RCC_OscConfig+0x2a8>
 800a356:	e014      	b.n	800a382 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a358:	f7fd fb7e 	bl	8007a58 <HAL_GetTick>
 800a35c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a35e:	e008      	b.n	800a372 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a360:	f7fd fb7a 	bl	8007a58 <HAL_GetTick>
 800a364:	4602      	mov	r2, r0
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	2b64      	cmp	r3, #100	; 0x64
 800a36c:	d901      	bls.n	800a372 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a36e:	2303      	movs	r3, #3
 800a370:	e262      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a372:	4b88      	ldr	r3, [pc, #544]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d1f0      	bne.n	800a360 <HAL_RCC_OscConfig+0x2d0>
 800a37e:	e000      	b.n	800a382 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 0302 	and.w	r3, r3, #2
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d060      	beq.n	800a450 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	2b04      	cmp	r3, #4
 800a392:	d005      	beq.n	800a3a0 <HAL_RCC_OscConfig+0x310>
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	2b0c      	cmp	r3, #12
 800a398:	d119      	bne.n	800a3ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	2b02      	cmp	r3, #2
 800a39e:	d116      	bne.n	800a3ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a3a0:	4b7c      	ldr	r3, [pc, #496]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d005      	beq.n	800a3b8 <HAL_RCC_OscConfig+0x328>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d101      	bne.n	800a3b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e23f      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3b8:	4b76      	ldr	r3, [pc, #472]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	061b      	lsls	r3, r3, #24
 800a3c6:	4973      	ldr	r1, [pc, #460]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a3cc:	e040      	b.n	800a450 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d023      	beq.n	800a41e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a3d6:	4b6f      	ldr	r3, [pc, #444]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a6e      	ldr	r2, [pc, #440]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a3dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3e2:	f7fd fb39 	bl	8007a58 <HAL_GetTick>
 800a3e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a3e8:	e008      	b.n	800a3fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3ea:	f7fd fb35 	bl	8007a58 <HAL_GetTick>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d901      	bls.n	800a3fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	e21d      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a3fc:	4b65      	ldr	r3, [pc, #404]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a404:	2b00      	cmp	r3, #0
 800a406:	d0f0      	beq.n	800a3ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a408:	4b62      	ldr	r3, [pc, #392]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	061b      	lsls	r3, r3, #24
 800a416:	495f      	ldr	r1, [pc, #380]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a418:	4313      	orrs	r3, r2
 800a41a:	604b      	str	r3, [r1, #4]
 800a41c:	e018      	b.n	800a450 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a41e:	4b5d      	ldr	r3, [pc, #372]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a5c      	ldr	r2, [pc, #368]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a42a:	f7fd fb15 	bl	8007a58 <HAL_GetTick>
 800a42e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a430:	e008      	b.n	800a444 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a432:	f7fd fb11 	bl	8007a58 <HAL_GetTick>
 800a436:	4602      	mov	r2, r0
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d901      	bls.n	800a444 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a440:	2303      	movs	r3, #3
 800a442:	e1f9      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a444:	4b53      	ldr	r3, [pc, #332]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d1f0      	bne.n	800a432 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 0308 	and.w	r3, r3, #8
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d03c      	beq.n	800a4d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	695b      	ldr	r3, [r3, #20]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d01c      	beq.n	800a49e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a464:	4b4b      	ldr	r3, [pc, #300]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a46a:	4a4a      	ldr	r2, [pc, #296]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a46c:	f043 0301 	orr.w	r3, r3, #1
 800a470:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a474:	f7fd faf0 	bl	8007a58 <HAL_GetTick>
 800a478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a47a:	e008      	b.n	800a48e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a47c:	f7fd faec 	bl	8007a58 <HAL_GetTick>
 800a480:	4602      	mov	r2, r0
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	1ad3      	subs	r3, r2, r3
 800a486:	2b02      	cmp	r3, #2
 800a488:	d901      	bls.n	800a48e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a48a:	2303      	movs	r3, #3
 800a48c:	e1d4      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a48e:	4b41      	ldr	r3, [pc, #260]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a494:	f003 0302 	and.w	r3, r3, #2
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d0ef      	beq.n	800a47c <HAL_RCC_OscConfig+0x3ec>
 800a49c:	e01b      	b.n	800a4d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a49e:	4b3d      	ldr	r3, [pc, #244]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a4a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4a4:	4a3b      	ldr	r2, [pc, #236]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a4a6:	f023 0301 	bic.w	r3, r3, #1
 800a4aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4ae:	f7fd fad3 	bl	8007a58 <HAL_GetTick>
 800a4b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a4b4:	e008      	b.n	800a4c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a4b6:	f7fd facf 	bl	8007a58 <HAL_GetTick>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	d901      	bls.n	800a4c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	e1b7      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a4c8:	4b32      	ldr	r3, [pc, #200]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a4ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4ce:	f003 0302 	and.w	r3, r3, #2
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d1ef      	bne.n	800a4b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f003 0304 	and.w	r3, r3, #4
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f000 80a6 	beq.w	800a630 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a4e8:	4b2a      	ldr	r3, [pc, #168]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a4ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d10d      	bne.n	800a510 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a4f4:	4b27      	ldr	r3, [pc, #156]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a4f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4f8:	4a26      	ldr	r2, [pc, #152]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a4fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4fe:	6593      	str	r3, [r2, #88]	; 0x58
 800a500:	4b24      	ldr	r3, [pc, #144]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a508:	60bb      	str	r3, [r7, #8]
 800a50a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a50c:	2301      	movs	r3, #1
 800a50e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a510:	4b21      	ldr	r3, [pc, #132]	; (800a598 <HAL_RCC_OscConfig+0x508>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d118      	bne.n	800a54e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a51c:	4b1e      	ldr	r3, [pc, #120]	; (800a598 <HAL_RCC_OscConfig+0x508>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a1d      	ldr	r2, [pc, #116]	; (800a598 <HAL_RCC_OscConfig+0x508>)
 800a522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a526:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a528:	f7fd fa96 	bl	8007a58 <HAL_GetTick>
 800a52c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a52e:	e008      	b.n	800a542 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a530:	f7fd fa92 	bl	8007a58 <HAL_GetTick>
 800a534:	4602      	mov	r2, r0
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	2b02      	cmp	r3, #2
 800a53c:	d901      	bls.n	800a542 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a53e:	2303      	movs	r3, #3
 800a540:	e17a      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a542:	4b15      	ldr	r3, [pc, #84]	; (800a598 <HAL_RCC_OscConfig+0x508>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d0f0      	beq.n	800a530 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	689b      	ldr	r3, [r3, #8]
 800a552:	2b01      	cmp	r3, #1
 800a554:	d108      	bne.n	800a568 <HAL_RCC_OscConfig+0x4d8>
 800a556:	4b0f      	ldr	r3, [pc, #60]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a55c:	4a0d      	ldr	r2, [pc, #52]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a55e:	f043 0301 	orr.w	r3, r3, #1
 800a562:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a566:	e029      	b.n	800a5bc <HAL_RCC_OscConfig+0x52c>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	2b05      	cmp	r3, #5
 800a56e:	d115      	bne.n	800a59c <HAL_RCC_OscConfig+0x50c>
 800a570:	4b08      	ldr	r3, [pc, #32]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a576:	4a07      	ldr	r2, [pc, #28]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a578:	f043 0304 	orr.w	r3, r3, #4
 800a57c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a580:	4b04      	ldr	r3, [pc, #16]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a586:	4a03      	ldr	r2, [pc, #12]	; (800a594 <HAL_RCC_OscConfig+0x504>)
 800a588:	f043 0301 	orr.w	r3, r3, #1
 800a58c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a590:	e014      	b.n	800a5bc <HAL_RCC_OscConfig+0x52c>
 800a592:	bf00      	nop
 800a594:	40021000 	.word	0x40021000
 800a598:	40007000 	.word	0x40007000
 800a59c:	4b9c      	ldr	r3, [pc, #624]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a59e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5a2:	4a9b      	ldr	r2, [pc, #620]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a5a4:	f023 0301 	bic.w	r3, r3, #1
 800a5a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a5ac:	4b98      	ldr	r3, [pc, #608]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a5ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5b2:	4a97      	ldr	r2, [pc, #604]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a5b4:	f023 0304 	bic.w	r3, r3, #4
 800a5b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d016      	beq.n	800a5f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5c4:	f7fd fa48 	bl	8007a58 <HAL_GetTick>
 800a5c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5ca:	e00a      	b.n	800a5e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5cc:	f7fd fa44 	bl	8007a58 <HAL_GetTick>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d901      	bls.n	800a5e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	e12a      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5e2:	4b8b      	ldr	r3, [pc, #556]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a5e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5e8:	f003 0302 	and.w	r3, r3, #2
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d0ed      	beq.n	800a5cc <HAL_RCC_OscConfig+0x53c>
 800a5f0:	e015      	b.n	800a61e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5f2:	f7fd fa31 	bl	8007a58 <HAL_GetTick>
 800a5f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a5f8:	e00a      	b.n	800a610 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5fa:	f7fd fa2d 	bl	8007a58 <HAL_GetTick>
 800a5fe:	4602      	mov	r2, r0
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	1ad3      	subs	r3, r2, r3
 800a604:	f241 3288 	movw	r2, #5000	; 0x1388
 800a608:	4293      	cmp	r3, r2
 800a60a:	d901      	bls.n	800a610 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a60c:	2303      	movs	r3, #3
 800a60e:	e113      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a610:	4b7f      	ldr	r3, [pc, #508]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a616:	f003 0302 	and.w	r3, r3, #2
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d1ed      	bne.n	800a5fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a61e:	7ffb      	ldrb	r3, [r7, #31]
 800a620:	2b01      	cmp	r3, #1
 800a622:	d105      	bne.n	800a630 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a624:	4b7a      	ldr	r3, [pc, #488]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a628:	4a79      	ldr	r2, [pc, #484]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a62a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a62e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a634:	2b00      	cmp	r3, #0
 800a636:	f000 80fe 	beq.w	800a836 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a63e:	2b02      	cmp	r3, #2
 800a640:	f040 80d0 	bne.w	800a7e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a644:	4b72      	ldr	r3, [pc, #456]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	f003 0203 	and.w	r2, r3, #3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a654:	429a      	cmp	r2, r3
 800a656:	d130      	bne.n	800a6ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a662:	3b01      	subs	r3, #1
 800a664:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a666:	429a      	cmp	r2, r3
 800a668:	d127      	bne.n	800a6ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a674:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a676:	429a      	cmp	r2, r3
 800a678:	d11f      	bne.n	800a6ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a684:	2a07      	cmp	r2, #7
 800a686:	bf14      	ite	ne
 800a688:	2201      	movne	r2, #1
 800a68a:	2200      	moveq	r2, #0
 800a68c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a68e:	4293      	cmp	r3, r2
 800a690:	d113      	bne.n	800a6ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a69c:	085b      	lsrs	r3, r3, #1
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d109      	bne.n	800a6ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b0:	085b      	lsrs	r3, r3, #1
 800a6b2:	3b01      	subs	r3, #1
 800a6b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d06e      	beq.n	800a798 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	2b0c      	cmp	r3, #12
 800a6be:	d069      	beq.n	800a794 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a6c0:	4b53      	ldr	r3, [pc, #332]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d105      	bne.n	800a6d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a6cc:	4b50      	ldr	r3, [pc, #320]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d001      	beq.n	800a6dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e0ad      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a6dc:	4b4c      	ldr	r3, [pc, #304]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a4b      	ldr	r2, [pc, #300]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a6e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a6e8:	f7fd f9b6 	bl	8007a58 <HAL_GetTick>
 800a6ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a6ee:	e008      	b.n	800a702 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6f0:	f7fd f9b2 	bl	8007a58 <HAL_GetTick>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	1ad3      	subs	r3, r2, r3
 800a6fa:	2b02      	cmp	r3, #2
 800a6fc:	d901      	bls.n	800a702 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800a6fe:	2303      	movs	r3, #3
 800a700:	e09a      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a702:	4b43      	ldr	r3, [pc, #268]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1f0      	bne.n	800a6f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a70e:	4b40      	ldr	r3, [pc, #256]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a710:	68da      	ldr	r2, [r3, #12]
 800a712:	4b40      	ldr	r3, [pc, #256]	; (800a814 <HAL_RCC_OscConfig+0x784>)
 800a714:	4013      	ands	r3, r2
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a71e:	3a01      	subs	r2, #1
 800a720:	0112      	lsls	r2, r2, #4
 800a722:	4311      	orrs	r1, r2
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a728:	0212      	lsls	r2, r2, #8
 800a72a:	4311      	orrs	r1, r2
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a730:	0852      	lsrs	r2, r2, #1
 800a732:	3a01      	subs	r2, #1
 800a734:	0552      	lsls	r2, r2, #21
 800a736:	4311      	orrs	r1, r2
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a73c:	0852      	lsrs	r2, r2, #1
 800a73e:	3a01      	subs	r2, #1
 800a740:	0652      	lsls	r2, r2, #25
 800a742:	4311      	orrs	r1, r2
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a748:	0912      	lsrs	r2, r2, #4
 800a74a:	0452      	lsls	r2, r2, #17
 800a74c:	430a      	orrs	r2, r1
 800a74e:	4930      	ldr	r1, [pc, #192]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a750:	4313      	orrs	r3, r2
 800a752:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a754:	4b2e      	ldr	r3, [pc, #184]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a2d      	ldr	r2, [pc, #180]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a75a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a75e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a760:	4b2b      	ldr	r3, [pc, #172]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	4a2a      	ldr	r2, [pc, #168]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a76a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a76c:	f7fd f974 	bl	8007a58 <HAL_GetTick>
 800a770:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a772:	e008      	b.n	800a786 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a774:	f7fd f970 	bl	8007a58 <HAL_GetTick>
 800a778:	4602      	mov	r2, r0
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d901      	bls.n	800a786 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800a782:	2303      	movs	r3, #3
 800a784:	e058      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a786:	4b22      	ldr	r3, [pc, #136]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d0f0      	beq.n	800a774 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a792:	e050      	b.n	800a836 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	e04f      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a798:	4b1d      	ldr	r3, [pc, #116]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d148      	bne.n	800a836 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a7a4:	4b1a      	ldr	r3, [pc, #104]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a19      	ldr	r2, [pc, #100]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a7aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a7b0:	4b17      	ldr	r3, [pc, #92]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	4a16      	ldr	r2, [pc, #88]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a7b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a7bc:	f7fd f94c 	bl	8007a58 <HAL_GetTick>
 800a7c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a7c2:	e008      	b.n	800a7d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7c4:	f7fd f948 	bl	8007a58 <HAL_GetTick>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	1ad3      	subs	r3, r2, r3
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d901      	bls.n	800a7d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800a7d2:	2303      	movs	r3, #3
 800a7d4:	e030      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a7d6:	4b0e      	ldr	r3, [pc, #56]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d0f0      	beq.n	800a7c4 <HAL_RCC_OscConfig+0x734>
 800a7e2:	e028      	b.n	800a836 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a7e4:	69bb      	ldr	r3, [r7, #24]
 800a7e6:	2b0c      	cmp	r3, #12
 800a7e8:	d023      	beq.n	800a832 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7ea:	4b09      	ldr	r3, [pc, #36]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a08      	ldr	r2, [pc, #32]	; (800a810 <HAL_RCC_OscConfig+0x780>)
 800a7f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a7f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7f6:	f7fd f92f 	bl	8007a58 <HAL_GetTick>
 800a7fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a7fc:	e00c      	b.n	800a818 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7fe:	f7fd f92b 	bl	8007a58 <HAL_GetTick>
 800a802:	4602      	mov	r2, r0
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	1ad3      	subs	r3, r2, r3
 800a808:	2b02      	cmp	r3, #2
 800a80a:	d905      	bls.n	800a818 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800a80c:	2303      	movs	r3, #3
 800a80e:	e013      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
 800a810:	40021000 	.word	0x40021000
 800a814:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a818:	4b09      	ldr	r3, [pc, #36]	; (800a840 <HAL_RCC_OscConfig+0x7b0>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a820:	2b00      	cmp	r3, #0
 800a822:	d1ec      	bne.n	800a7fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a824:	4b06      	ldr	r3, [pc, #24]	; (800a840 <HAL_RCC_OscConfig+0x7b0>)
 800a826:	68da      	ldr	r2, [r3, #12]
 800a828:	4905      	ldr	r1, [pc, #20]	; (800a840 <HAL_RCC_OscConfig+0x7b0>)
 800a82a:	4b06      	ldr	r3, [pc, #24]	; (800a844 <HAL_RCC_OscConfig+0x7b4>)
 800a82c:	4013      	ands	r3, r2
 800a82e:	60cb      	str	r3, [r1, #12]
 800a830:	e001      	b.n	800a836 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a832:	2301      	movs	r3, #1
 800a834:	e000      	b.n	800a838 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3720      	adds	r7, #32
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	40021000 	.word	0x40021000
 800a844:	feeefffc 	.word	0xfeeefffc

0800a848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d101      	bne.n	800a85c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a858:	2301      	movs	r3, #1
 800a85a:	e0e7      	b.n	800aa2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a85c:	4b75      	ldr	r3, [pc, #468]	; (800aa34 <HAL_RCC_ClockConfig+0x1ec>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 0307 	and.w	r3, r3, #7
 800a864:	683a      	ldr	r2, [r7, #0]
 800a866:	429a      	cmp	r2, r3
 800a868:	d910      	bls.n	800a88c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a86a:	4b72      	ldr	r3, [pc, #456]	; (800aa34 <HAL_RCC_ClockConfig+0x1ec>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f023 0207 	bic.w	r2, r3, #7
 800a872:	4970      	ldr	r1, [pc, #448]	; (800aa34 <HAL_RCC_ClockConfig+0x1ec>)
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	4313      	orrs	r3, r2
 800a878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a87a:	4b6e      	ldr	r3, [pc, #440]	; (800aa34 <HAL_RCC_ClockConfig+0x1ec>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f003 0307 	and.w	r3, r3, #7
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	429a      	cmp	r2, r3
 800a886:	d001      	beq.n	800a88c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a888:	2301      	movs	r3, #1
 800a88a:	e0cf      	b.n	800aa2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f003 0302 	and.w	r3, r3, #2
 800a894:	2b00      	cmp	r3, #0
 800a896:	d010      	beq.n	800a8ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	689a      	ldr	r2, [r3, #8]
 800a89c:	4b66      	ldr	r3, [pc, #408]	; (800aa38 <HAL_RCC_ClockConfig+0x1f0>)
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d908      	bls.n	800a8ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8a8:	4b63      	ldr	r3, [pc, #396]	; (800aa38 <HAL_RCC_ClockConfig+0x1f0>)
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	4960      	ldr	r1, [pc, #384]	; (800aa38 <HAL_RCC_ClockConfig+0x1f0>)
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f003 0301 	and.w	r3, r3, #1
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d04c      	beq.n	800a960 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	2b03      	cmp	r3, #3
 800a8cc:	d107      	bne.n	800a8de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a8ce:	4b5a      	ldr	r3, [pc, #360]	; (800aa38 <HAL_RCC_ClockConfig+0x1f0>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d121      	bne.n	800a91e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e0a6      	b.n	800aa2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	2b02      	cmp	r3, #2
 800a8e4:	d107      	bne.n	800a8f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a8e6:	4b54      	ldr	r3, [pc, #336]	; (800aa38 <HAL_RCC_ClockConfig+0x1f0>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d115      	bne.n	800a91e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e09a      	b.n	800aa2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d107      	bne.n	800a90e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a8fe:	4b4e      	ldr	r3, [pc, #312]	; (800aa38 <HAL_RCC_ClockConfig+0x1f0>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f003 0302 	and.w	r3, r3, #2
 800a906:	2b00      	cmp	r3, #0
 800a908:	d109      	bne.n	800a91e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a90a:	2301      	movs	r3, #1
 800a90c:	e08e      	b.n	800aa2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a90e:	4b4a      	ldr	r3, [pc, #296]	; (800aa38 <HAL_RCC_ClockConfig+0x1f0>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a916:	2b00      	cmp	r3, #0
 800a918:	d101      	bne.n	800a91e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a91a:	2301      	movs	r3, #1
 800a91c:	e086      	b.n	800aa2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a91e:	4b46      	ldr	r3, [pc, #280]	; (800aa38 <HAL_RCC_ClockConfig+0x1f0>)
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	f023 0203 	bic.w	r2, r3, #3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	4943      	ldr	r1, [pc, #268]	; (800aa38 <HAL_RCC_ClockConfig+0x1f0>)
 800a92c:	4313      	orrs	r3, r2
 800a92e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a930:	f7fd f892 	bl	8007a58 <HAL_GetTick>
 800a934:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a936:	e00a      	b.n	800a94e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a938:	f7fd f88e 	bl	8007a58 <HAL_GetTick>
 800a93c:	4602      	mov	r2, r0
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	1ad3      	subs	r3, r2, r3
 800a942:	f241 3288 	movw	r2, #5000	; 0x1388
 800a946:	4293      	cmp	r3, r2
 800a948:	d901      	bls.n	800a94e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800a94a:	2303      	movs	r3, #3
 800a94c:	e06e      	b.n	800aa2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a94e:	4b3a      	ldr	r3, [pc, #232]	; (800aa38 <HAL_RCC_ClockConfig+0x1f0>)
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	f003 020c 	and.w	r2, r3, #12
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d1eb      	bne.n	800a938 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 0302 	and.w	r3, r3, #2
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d010      	beq.n	800a98e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	689a      	ldr	r2, [r3, #8]
 800a970:	4b31      	ldr	r3, [pc, #196]	; (800aa38 <HAL_RCC_ClockConfig+0x1f0>)
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a978:	429a      	cmp	r2, r3
 800a97a:	d208      	bcs.n	800a98e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a97c:	4b2e      	ldr	r3, [pc, #184]	; (800aa38 <HAL_RCC_ClockConfig+0x1f0>)
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	492b      	ldr	r1, [pc, #172]	; (800aa38 <HAL_RCC_ClockConfig+0x1f0>)
 800a98a:	4313      	orrs	r3, r2
 800a98c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a98e:	4b29      	ldr	r3, [pc, #164]	; (800aa34 <HAL_RCC_ClockConfig+0x1ec>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f003 0307 	and.w	r3, r3, #7
 800a996:	683a      	ldr	r2, [r7, #0]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d210      	bcs.n	800a9be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a99c:	4b25      	ldr	r3, [pc, #148]	; (800aa34 <HAL_RCC_ClockConfig+0x1ec>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f023 0207 	bic.w	r2, r3, #7
 800a9a4:	4923      	ldr	r1, [pc, #140]	; (800aa34 <HAL_RCC_ClockConfig+0x1ec>)
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9ac:	4b21      	ldr	r3, [pc, #132]	; (800aa34 <HAL_RCC_ClockConfig+0x1ec>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f003 0307 	and.w	r3, r3, #7
 800a9b4:	683a      	ldr	r2, [r7, #0]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d001      	beq.n	800a9be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e036      	b.n	800aa2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 0304 	and.w	r3, r3, #4
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d008      	beq.n	800a9dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a9ca:	4b1b      	ldr	r3, [pc, #108]	; (800aa38 <HAL_RCC_ClockConfig+0x1f0>)
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	4918      	ldr	r1, [pc, #96]	; (800aa38 <HAL_RCC_ClockConfig+0x1f0>)
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f003 0308 	and.w	r3, r3, #8
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d009      	beq.n	800a9fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a9e8:	4b13      	ldr	r3, [pc, #76]	; (800aa38 <HAL_RCC_ClockConfig+0x1f0>)
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	00db      	lsls	r3, r3, #3
 800a9f6:	4910      	ldr	r1, [pc, #64]	; (800aa38 <HAL_RCC_ClockConfig+0x1f0>)
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a9fc:	f000 f824 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800aa00:	4602      	mov	r2, r0
 800aa02:	4b0d      	ldr	r3, [pc, #52]	; (800aa38 <HAL_RCC_ClockConfig+0x1f0>)
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	091b      	lsrs	r3, r3, #4
 800aa08:	f003 030f 	and.w	r3, r3, #15
 800aa0c:	490b      	ldr	r1, [pc, #44]	; (800aa3c <HAL_RCC_ClockConfig+0x1f4>)
 800aa0e:	5ccb      	ldrb	r3, [r1, r3]
 800aa10:	f003 031f 	and.w	r3, r3, #31
 800aa14:	fa22 f303 	lsr.w	r3, r2, r3
 800aa18:	4a09      	ldr	r2, [pc, #36]	; (800aa40 <HAL_RCC_ClockConfig+0x1f8>)
 800aa1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800aa1c:	4b09      	ldr	r3, [pc, #36]	; (800aa44 <HAL_RCC_ClockConfig+0x1fc>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7fc f83b 	bl	8006a9c <HAL_InitTick>
 800aa26:	4603      	mov	r3, r0
 800aa28:	72fb      	strb	r3, [r7, #11]

  return status;
 800aa2a:	7afb      	ldrb	r3, [r7, #11]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3710      	adds	r7, #16
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	40022000 	.word	0x40022000
 800aa38:	40021000 	.word	0x40021000
 800aa3c:	080193c4 	.word	0x080193c4
 800aa40:	20000140 	.word	0x20000140
 800aa44:	20000170 	.word	0x20000170

0800aa48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b089      	sub	sp, #36	; 0x24
 800aa4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	61fb      	str	r3, [r7, #28]
 800aa52:	2300      	movs	r3, #0
 800aa54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa56:	4b3e      	ldr	r3, [pc, #248]	; (800ab50 <HAL_RCC_GetSysClockFreq+0x108>)
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	f003 030c 	and.w	r3, r3, #12
 800aa5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aa60:	4b3b      	ldr	r3, [pc, #236]	; (800ab50 <HAL_RCC_GetSysClockFreq+0x108>)
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	f003 0303 	and.w	r3, r3, #3
 800aa68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d005      	beq.n	800aa7c <HAL_RCC_GetSysClockFreq+0x34>
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	2b0c      	cmp	r3, #12
 800aa74:	d121      	bne.n	800aaba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d11e      	bne.n	800aaba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800aa7c:	4b34      	ldr	r3, [pc, #208]	; (800ab50 <HAL_RCC_GetSysClockFreq+0x108>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f003 0308 	and.w	r3, r3, #8
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d107      	bne.n	800aa98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800aa88:	4b31      	ldr	r3, [pc, #196]	; (800ab50 <HAL_RCC_GetSysClockFreq+0x108>)
 800aa8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa8e:	0a1b      	lsrs	r3, r3, #8
 800aa90:	f003 030f 	and.w	r3, r3, #15
 800aa94:	61fb      	str	r3, [r7, #28]
 800aa96:	e005      	b.n	800aaa4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800aa98:	4b2d      	ldr	r3, [pc, #180]	; (800ab50 <HAL_RCC_GetSysClockFreq+0x108>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	091b      	lsrs	r3, r3, #4
 800aa9e:	f003 030f 	and.w	r3, r3, #15
 800aaa2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800aaa4:	4a2b      	ldr	r2, [pc, #172]	; (800ab54 <HAL_RCC_GetSysClockFreq+0x10c>)
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10d      	bne.n	800aad0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800aab4:	69fb      	ldr	r3, [r7, #28]
 800aab6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800aab8:	e00a      	b.n	800aad0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	2b04      	cmp	r3, #4
 800aabe:	d102      	bne.n	800aac6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800aac0:	4b25      	ldr	r3, [pc, #148]	; (800ab58 <HAL_RCC_GetSysClockFreq+0x110>)
 800aac2:	61bb      	str	r3, [r7, #24]
 800aac4:	e004      	b.n	800aad0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	2b08      	cmp	r3, #8
 800aaca:	d101      	bne.n	800aad0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800aacc:	4b23      	ldr	r3, [pc, #140]	; (800ab5c <HAL_RCC_GetSysClockFreq+0x114>)
 800aace:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	2b0c      	cmp	r3, #12
 800aad4:	d134      	bne.n	800ab40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800aad6:	4b1e      	ldr	r3, [pc, #120]	; (800ab50 <HAL_RCC_GetSysClockFreq+0x108>)
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	f003 0303 	and.w	r3, r3, #3
 800aade:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	2b02      	cmp	r3, #2
 800aae4:	d003      	beq.n	800aaee <HAL_RCC_GetSysClockFreq+0xa6>
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	2b03      	cmp	r3, #3
 800aaea:	d003      	beq.n	800aaf4 <HAL_RCC_GetSysClockFreq+0xac>
 800aaec:	e005      	b.n	800aafa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800aaee:	4b1a      	ldr	r3, [pc, #104]	; (800ab58 <HAL_RCC_GetSysClockFreq+0x110>)
 800aaf0:	617b      	str	r3, [r7, #20]
      break;
 800aaf2:	e005      	b.n	800ab00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800aaf4:	4b19      	ldr	r3, [pc, #100]	; (800ab5c <HAL_RCC_GetSysClockFreq+0x114>)
 800aaf6:	617b      	str	r3, [r7, #20]
      break;
 800aaf8:	e002      	b.n	800ab00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	617b      	str	r3, [r7, #20]
      break;
 800aafe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ab00:	4b13      	ldr	r3, [pc, #76]	; (800ab50 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	091b      	lsrs	r3, r3, #4
 800ab06:	f003 0307 	and.w	r3, r3, #7
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ab0e:	4b10      	ldr	r3, [pc, #64]	; (800ab50 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	0a1b      	lsrs	r3, r3, #8
 800ab14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab18:	697a      	ldr	r2, [r7, #20]
 800ab1a:	fb03 f202 	mul.w	r2, r3, r2
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ab26:	4b0a      	ldr	r3, [pc, #40]	; (800ab50 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	0e5b      	lsrs	r3, r3, #25
 800ab2c:	f003 0303 	and.w	r3, r3, #3
 800ab30:	3301      	adds	r3, #1
 800ab32:	005b      	lsls	r3, r3, #1
 800ab34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800ab36:	697a      	ldr	r2, [r7, #20]
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800ab40:	69bb      	ldr	r3, [r7, #24]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3724      	adds	r7, #36	; 0x24
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	40021000 	.word	0x40021000
 800ab54:	080193dc 	.word	0x080193dc
 800ab58:	00f42400 	.word	0x00f42400
 800ab5c:	007a1200 	.word	0x007a1200

0800ab60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab60:	b480      	push	{r7}
 800ab62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ab64:	4b03      	ldr	r3, [pc, #12]	; (800ab74 <HAL_RCC_GetHCLKFreq+0x14>)
 800ab66:	681b      	ldr	r3, [r3, #0]
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr
 800ab72:	bf00      	nop
 800ab74:	20000140 	.word	0x20000140

0800ab78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800ab7c:	f7ff fff0 	bl	800ab60 <HAL_RCC_GetHCLKFreq>
 800ab80:	4602      	mov	r2, r0
 800ab82:	4b06      	ldr	r3, [pc, #24]	; (800ab9c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ab84:	689b      	ldr	r3, [r3, #8]
 800ab86:	0a1b      	lsrs	r3, r3, #8
 800ab88:	f003 0307 	and.w	r3, r3, #7
 800ab8c:	4904      	ldr	r1, [pc, #16]	; (800aba0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ab8e:	5ccb      	ldrb	r3, [r1, r3]
 800ab90:	f003 031f 	and.w	r3, r3, #31
 800ab94:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	bd80      	pop	{r7, pc}
 800ab9c:	40021000 	.word	0x40021000
 800aba0:	080193d4 	.word	0x080193d4

0800aba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800aba8:	f7ff ffda 	bl	800ab60 <HAL_RCC_GetHCLKFreq>
 800abac:	4602      	mov	r2, r0
 800abae:	4b06      	ldr	r3, [pc, #24]	; (800abc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	0adb      	lsrs	r3, r3, #11
 800abb4:	f003 0307 	and.w	r3, r3, #7
 800abb8:	4904      	ldr	r1, [pc, #16]	; (800abcc <HAL_RCC_GetPCLK2Freq+0x28>)
 800abba:	5ccb      	ldrb	r3, [r1, r3]
 800abbc:	f003 031f 	and.w	r3, r3, #31
 800abc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	40021000 	.word	0x40021000
 800abcc:	080193d4 	.word	0x080193d4

0800abd0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	220f      	movs	r2, #15
 800abde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800abe0:	4b12      	ldr	r3, [pc, #72]	; (800ac2c <HAL_RCC_GetClockConfig+0x5c>)
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	f003 0203 	and.w	r2, r3, #3
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800abec:	4b0f      	ldr	r3, [pc, #60]	; (800ac2c <HAL_RCC_GetClockConfig+0x5c>)
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800abf8:	4b0c      	ldr	r3, [pc, #48]	; (800ac2c <HAL_RCC_GetClockConfig+0x5c>)
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800ac04:	4b09      	ldr	r3, [pc, #36]	; (800ac2c <HAL_RCC_GetClockConfig+0x5c>)
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	08db      	lsrs	r3, r3, #3
 800ac0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800ac12:	4b07      	ldr	r3, [pc, #28]	; (800ac30 <HAL_RCC_GetClockConfig+0x60>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f003 0207 	and.w	r2, r3, #7
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	601a      	str	r2, [r3, #0]
}
 800ac1e:	bf00      	nop
 800ac20:	370c      	adds	r7, #12
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	40021000 	.word	0x40021000
 800ac30:	40022000 	.word	0x40022000

0800ac34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b086      	sub	sp, #24
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ac40:	4b2a      	ldr	r3, [pc, #168]	; (800acec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ac42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d003      	beq.n	800ac54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800ac4c:	f7ff f974 	bl	8009f38 <HAL_PWREx_GetVoltageRange>
 800ac50:	6178      	str	r0, [r7, #20]
 800ac52:	e014      	b.n	800ac7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ac54:	4b25      	ldr	r3, [pc, #148]	; (800acec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ac56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac58:	4a24      	ldr	r2, [pc, #144]	; (800acec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ac5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac5e:	6593      	str	r3, [r2, #88]	; 0x58
 800ac60:	4b22      	ldr	r3, [pc, #136]	; (800acec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ac62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac68:	60fb      	str	r3, [r7, #12]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800ac6c:	f7ff f964 	bl	8009f38 <HAL_PWREx_GetVoltageRange>
 800ac70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ac72:	4b1e      	ldr	r3, [pc, #120]	; (800acec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ac74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac76:	4a1d      	ldr	r2, [pc, #116]	; (800acec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ac78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac84:	d10b      	bne.n	800ac9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2b80      	cmp	r3, #128	; 0x80
 800ac8a:	d919      	bls.n	800acc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2ba0      	cmp	r3, #160	; 0xa0
 800ac90:	d902      	bls.n	800ac98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ac92:	2302      	movs	r3, #2
 800ac94:	613b      	str	r3, [r7, #16]
 800ac96:	e013      	b.n	800acc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ac98:	2301      	movs	r3, #1
 800ac9a:	613b      	str	r3, [r7, #16]
 800ac9c:	e010      	b.n	800acc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2b80      	cmp	r3, #128	; 0x80
 800aca2:	d902      	bls.n	800acaa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800aca4:	2303      	movs	r3, #3
 800aca6:	613b      	str	r3, [r7, #16]
 800aca8:	e00a      	b.n	800acc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2b80      	cmp	r3, #128	; 0x80
 800acae:	d102      	bne.n	800acb6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800acb0:	2302      	movs	r3, #2
 800acb2:	613b      	str	r3, [r7, #16]
 800acb4:	e004      	b.n	800acc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2b70      	cmp	r3, #112	; 0x70
 800acba:	d101      	bne.n	800acc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800acbc:	2301      	movs	r3, #1
 800acbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800acc0:	4b0b      	ldr	r3, [pc, #44]	; (800acf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f023 0207 	bic.w	r2, r3, #7
 800acc8:	4909      	ldr	r1, [pc, #36]	; (800acf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	4313      	orrs	r3, r2
 800acce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800acd0:	4b07      	ldr	r3, [pc, #28]	; (800acf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f003 0307 	and.w	r3, r3, #7
 800acd8:	693a      	ldr	r2, [r7, #16]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d001      	beq.n	800ace2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	e000      	b.n	800ace4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3718      	adds	r7, #24
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	40021000 	.word	0x40021000
 800acf0:	40022000 	.word	0x40022000

0800acf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b086      	sub	sp, #24
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800acfc:	2300      	movs	r3, #0
 800acfe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ad00:	2300      	movs	r3, #0
 800ad02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d041      	beq.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ad18:	d02a      	beq.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ad1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ad1e:	d824      	bhi.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ad20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad24:	d008      	beq.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ad26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad2a:	d81e      	bhi.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00a      	beq.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800ad30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad34:	d010      	beq.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ad36:	e018      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ad38:	4b86      	ldr	r3, [pc, #536]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	4a85      	ldr	r2, [pc, #532]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ad3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad42:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ad44:	e015      	b.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	3304      	adds	r3, #4
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f000 fabb 	bl	800b2c8 <RCCEx_PLLSAI1_Config>
 800ad52:	4603      	mov	r3, r0
 800ad54:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ad56:	e00c      	b.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	3320      	adds	r3, #32
 800ad5c:	2100      	movs	r1, #0
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f000 fba6 	bl	800b4b0 <RCCEx_PLLSAI2_Config>
 800ad64:	4603      	mov	r3, r0
 800ad66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ad68:	e003      	b.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	74fb      	strb	r3, [r7, #19]
      break;
 800ad6e:	e000      	b.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800ad70:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad72:	7cfb      	ldrb	r3, [r7, #19]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d10b      	bne.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ad78:	4b76      	ldr	r3, [pc, #472]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ad7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad86:	4973      	ldr	r1, [pc, #460]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ad8e:	e001      	b.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad90:	7cfb      	ldrb	r3, [r7, #19]
 800ad92:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d041      	beq.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ada4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ada8:	d02a      	beq.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800adaa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800adae:	d824      	bhi.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800adb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adb4:	d008      	beq.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800adb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adba:	d81e      	bhi.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00a      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800adc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800adc4:	d010      	beq.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800adc6:	e018      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800adc8:	4b62      	ldr	r3, [pc, #392]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	4a61      	ldr	r2, [pc, #388]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800adce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800add2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800add4:	e015      	b.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	3304      	adds	r3, #4
 800adda:	2100      	movs	r1, #0
 800addc:	4618      	mov	r0, r3
 800adde:	f000 fa73 	bl	800b2c8 <RCCEx_PLLSAI1_Config>
 800ade2:	4603      	mov	r3, r0
 800ade4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ade6:	e00c      	b.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	3320      	adds	r3, #32
 800adec:	2100      	movs	r1, #0
 800adee:	4618      	mov	r0, r3
 800adf0:	f000 fb5e 	bl	800b4b0 <RCCEx_PLLSAI2_Config>
 800adf4:	4603      	mov	r3, r0
 800adf6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800adf8:	e003      	b.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800adfa:	2301      	movs	r3, #1
 800adfc:	74fb      	strb	r3, [r7, #19]
      break;
 800adfe:	e000      	b.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800ae00:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae02:	7cfb      	ldrb	r3, [r7, #19]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d10b      	bne.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ae08:	4b52      	ldr	r3, [pc, #328]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae16:	494f      	ldr	r1, [pc, #316]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ae1e:	e001      	b.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae20:	7cfb      	ldrb	r3, [r7, #19]
 800ae22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f000 80a0 	beq.w	800af72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ae32:	2300      	movs	r3, #0
 800ae34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ae36:	4b47      	ldr	r3, [pc, #284]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d101      	bne.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800ae42:	2301      	movs	r3, #1
 800ae44:	e000      	b.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800ae46:	2300      	movs	r3, #0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00d      	beq.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae4c:	4b41      	ldr	r3, [pc, #260]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae50:	4a40      	ldr	r2, [pc, #256]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae56:	6593      	str	r3, [r2, #88]	; 0x58
 800ae58:	4b3e      	ldr	r3, [pc, #248]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae60:	60bb      	str	r3, [r7, #8]
 800ae62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae64:	2301      	movs	r3, #1
 800ae66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae68:	4b3b      	ldr	r3, [pc, #236]	; (800af58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a3a      	ldr	r2, [pc, #232]	; (800af58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800ae6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae74:	f7fc fdf0 	bl	8007a58 <HAL_GetTick>
 800ae78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ae7a:	e009      	b.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae7c:	f7fc fdec 	bl	8007a58 <HAL_GetTick>
 800ae80:	4602      	mov	r2, r0
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	2b02      	cmp	r3, #2
 800ae88:	d902      	bls.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800ae8a:	2303      	movs	r3, #3
 800ae8c:	74fb      	strb	r3, [r7, #19]
        break;
 800ae8e:	e005      	b.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ae90:	4b31      	ldr	r3, [pc, #196]	; (800af58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d0ef      	beq.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800ae9c:	7cfb      	ldrb	r3, [r7, #19]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d15c      	bne.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800aea2:	4b2c      	ldr	r3, [pc, #176]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aeac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d01f      	beq.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aeba:	697a      	ldr	r2, [r7, #20]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d019      	beq.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800aec0:	4b24      	ldr	r3, [pc, #144]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aeca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aecc:	4b21      	ldr	r3, [pc, #132]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aed2:	4a20      	ldr	r2, [pc, #128]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aedc:	4b1d      	ldr	r3, [pc, #116]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aee2:	4a1c      	ldr	r2, [pc, #112]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800aeec:	4a19      	ldr	r2, [pc, #100]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	f003 0301 	and.w	r3, r3, #1
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d016      	beq.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aefe:	f7fc fdab 	bl	8007a58 <HAL_GetTick>
 800af02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af04:	e00b      	b.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af06:	f7fc fda7 	bl	8007a58 <HAL_GetTick>
 800af0a:	4602      	mov	r2, r0
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	1ad3      	subs	r3, r2, r3
 800af10:	f241 3288 	movw	r2, #5000	; 0x1388
 800af14:	4293      	cmp	r3, r2
 800af16:	d902      	bls.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800af18:	2303      	movs	r3, #3
 800af1a:	74fb      	strb	r3, [r7, #19]
            break;
 800af1c:	e006      	b.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af1e:	4b0d      	ldr	r3, [pc, #52]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800af20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af24:	f003 0302 	and.w	r3, r3, #2
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d0ec      	beq.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800af2c:	7cfb      	ldrb	r3, [r7, #19]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10c      	bne.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af32:	4b08      	ldr	r3, [pc, #32]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800af34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af42:	4904      	ldr	r1, [pc, #16]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800af44:	4313      	orrs	r3, r2
 800af46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800af4a:	e009      	b.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800af4c:	7cfb      	ldrb	r3, [r7, #19]
 800af4e:	74bb      	strb	r3, [r7, #18]
 800af50:	e006      	b.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800af52:	bf00      	nop
 800af54:	40021000 	.word	0x40021000
 800af58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af5c:	7cfb      	ldrb	r3, [r7, #19]
 800af5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800af60:	7c7b      	ldrb	r3, [r7, #17]
 800af62:	2b01      	cmp	r3, #1
 800af64:	d105      	bne.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af66:	4b9e      	ldr	r3, [pc, #632]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800af68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af6a:	4a9d      	ldr	r2, [pc, #628]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800af6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f003 0301 	and.w	r3, r3, #1
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00a      	beq.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800af7e:	4b98      	ldr	r3, [pc, #608]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800af80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af84:	f023 0203 	bic.w	r2, r3, #3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af8c:	4994      	ldr	r1, [pc, #592]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800af8e:	4313      	orrs	r3, r2
 800af90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f003 0302 	and.w	r3, r3, #2
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d00a      	beq.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800afa0:	4b8f      	ldr	r3, [pc, #572]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800afa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afa6:	f023 020c 	bic.w	r2, r3, #12
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afae:	498c      	ldr	r1, [pc, #560]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800afb0:	4313      	orrs	r3, r2
 800afb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f003 0304 	and.w	r3, r3, #4
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00a      	beq.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800afc2:	4b87      	ldr	r3, [pc, #540]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800afc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd0:	4983      	ldr	r1, [pc, #524]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800afd2:	4313      	orrs	r3, r2
 800afd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f003 0308 	and.w	r3, r3, #8
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00a      	beq.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800afe4:	4b7e      	ldr	r3, [pc, #504]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800afe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aff2:	497b      	ldr	r1, [pc, #492]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aff4:	4313      	orrs	r3, r2
 800aff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f003 0310 	and.w	r3, r3, #16
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00a      	beq.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b006:	4b76      	ldr	r3, [pc, #472]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b00c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b014:	4972      	ldr	r1, [pc, #456]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b016:	4313      	orrs	r3, r2
 800b018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f003 0320 	and.w	r3, r3, #32
 800b024:	2b00      	cmp	r3, #0
 800b026:	d00a      	beq.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b028:	4b6d      	ldr	r3, [pc, #436]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b02a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b02e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b036:	496a      	ldr	r1, [pc, #424]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b038:	4313      	orrs	r3, r2
 800b03a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b046:	2b00      	cmp	r3, #0
 800b048:	d00a      	beq.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b04a:	4b65      	ldr	r3, [pc, #404]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b050:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b058:	4961      	ldr	r1, [pc, #388]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b05a:	4313      	orrs	r3, r2
 800b05c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00a      	beq.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b06c:	4b5c      	ldr	r3, [pc, #368]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b06e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b072:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b07a:	4959      	ldr	r1, [pc, #356]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b07c:	4313      	orrs	r3, r2
 800b07e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00a      	beq.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b08e:	4b54      	ldr	r3, [pc, #336]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b094:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b09c:	4950      	ldr	r1, [pc, #320]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d00a      	beq.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b0b0:	4b4b      	ldr	r3, [pc, #300]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0be:	4948      	ldr	r1, [pc, #288]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00a      	beq.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b0d2:	4b43      	ldr	r3, [pc, #268]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b0d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0e0:	493f      	ldr	r1, [pc, #252]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d028      	beq.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b0f4:	4b3a      	ldr	r3, [pc, #232]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b102:	4937      	ldr	r1, [pc, #220]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b104:	4313      	orrs	r3, r2
 800b106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b10e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b112:	d106      	bne.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b114:	4b32      	ldr	r3, [pc, #200]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b116:	68db      	ldr	r3, [r3, #12]
 800b118:	4a31      	ldr	r2, [pc, #196]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b11a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b11e:	60d3      	str	r3, [r2, #12]
 800b120:	e011      	b.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b126:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b12a:	d10c      	bne.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	3304      	adds	r3, #4
 800b130:	2101      	movs	r1, #1
 800b132:	4618      	mov	r0, r3
 800b134:	f000 f8c8 	bl	800b2c8 <RCCEx_PLLSAI1_Config>
 800b138:	4603      	mov	r3, r0
 800b13a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b13c:	7cfb      	ldrb	r3, [r7, #19]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d001      	beq.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800b142:	7cfb      	ldrb	r3, [r7, #19]
 800b144:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d028      	beq.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b152:	4b23      	ldr	r3, [pc, #140]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b158:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b160:	491f      	ldr	r1, [pc, #124]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b162:	4313      	orrs	r3, r2
 800b164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b16c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b170:	d106      	bne.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b172:	4b1b      	ldr	r3, [pc, #108]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	4a1a      	ldr	r2, [pc, #104]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b178:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b17c:	60d3      	str	r3, [r2, #12]
 800b17e:	e011      	b.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b184:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b188:	d10c      	bne.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	3304      	adds	r3, #4
 800b18e:	2101      	movs	r1, #1
 800b190:	4618      	mov	r0, r3
 800b192:	f000 f899 	bl	800b2c8 <RCCEx_PLLSAI1_Config>
 800b196:	4603      	mov	r3, r0
 800b198:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b19a:	7cfb      	ldrb	r3, [r7, #19]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d001      	beq.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800b1a0:	7cfb      	ldrb	r3, [r7, #19]
 800b1a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d02b      	beq.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b1b0:	4b0b      	ldr	r3, [pc, #44]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b1b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1be:	4908      	ldr	r1, [pc, #32]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1ce:	d109      	bne.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b1d0:	4b03      	ldr	r3, [pc, #12]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	4a02      	ldr	r2, [pc, #8]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b1d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1da:	60d3      	str	r3, [r2, #12]
 800b1dc:	e014      	b.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800b1de:	bf00      	nop
 800b1e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b1ec:	d10c      	bne.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	2101      	movs	r1, #1
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f000 f867 	bl	800b2c8 <RCCEx_PLLSAI1_Config>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b1fe:	7cfb      	ldrb	r3, [r7, #19]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d001      	beq.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800b204:	7cfb      	ldrb	r3, [r7, #19]
 800b206:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b210:	2b00      	cmp	r3, #0
 800b212:	d02f      	beq.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b214:	4b2b      	ldr	r3, [pc, #172]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b21a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b222:	4928      	ldr	r1, [pc, #160]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b224:	4313      	orrs	r3, r2
 800b226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b22e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b232:	d10d      	bne.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	3304      	adds	r3, #4
 800b238:	2102      	movs	r1, #2
 800b23a:	4618      	mov	r0, r3
 800b23c:	f000 f844 	bl	800b2c8 <RCCEx_PLLSAI1_Config>
 800b240:	4603      	mov	r3, r0
 800b242:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b244:	7cfb      	ldrb	r3, [r7, #19]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d014      	beq.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800b24a:	7cfb      	ldrb	r3, [r7, #19]
 800b24c:	74bb      	strb	r3, [r7, #18]
 800b24e:	e011      	b.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b258:	d10c      	bne.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	3320      	adds	r3, #32
 800b25e:	2102      	movs	r1, #2
 800b260:	4618      	mov	r0, r3
 800b262:	f000 f925 	bl	800b4b0 <RCCEx_PLLSAI2_Config>
 800b266:	4603      	mov	r3, r0
 800b268:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b26a:	7cfb      	ldrb	r3, [r7, #19]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d001      	beq.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800b270:	7cfb      	ldrb	r3, [r7, #19]
 800b272:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00a      	beq.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b280:	4b10      	ldr	r3, [pc, #64]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b286:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b28e:	490d      	ldr	r1, [pc, #52]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b290:	4313      	orrs	r3, r2
 800b292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d00b      	beq.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b2a2:	4b08      	ldr	r3, [pc, #32]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b2a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2b2:	4904      	ldr	r1, [pc, #16]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b2ba:	7cbb      	ldrb	r3, [r7, #18]
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3718      	adds	r7, #24
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	40021000 	.word	0x40021000

0800b2c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b2d6:	4b75      	ldr	r3, [pc, #468]	; (800b4ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	f003 0303 	and.w	r3, r3, #3
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d018      	beq.n	800b314 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b2e2:	4b72      	ldr	r3, [pc, #456]	; (800b4ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b2e4:	68db      	ldr	r3, [r3, #12]
 800b2e6:	f003 0203 	and.w	r2, r3, #3
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d10d      	bne.n	800b30e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
       ||
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d009      	beq.n	800b30e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b2fa:	4b6c      	ldr	r3, [pc, #432]	; (800b4ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	091b      	lsrs	r3, r3, #4
 800b300:	f003 0307 	and.w	r3, r3, #7
 800b304:	1c5a      	adds	r2, r3, #1
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	685b      	ldr	r3, [r3, #4]
       ||
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d047      	beq.n	800b39e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b30e:	2301      	movs	r3, #1
 800b310:	73fb      	strb	r3, [r7, #15]
 800b312:	e044      	b.n	800b39e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2b03      	cmp	r3, #3
 800b31a:	d018      	beq.n	800b34e <RCCEx_PLLSAI1_Config+0x86>
 800b31c:	2b03      	cmp	r3, #3
 800b31e:	d825      	bhi.n	800b36c <RCCEx_PLLSAI1_Config+0xa4>
 800b320:	2b01      	cmp	r3, #1
 800b322:	d002      	beq.n	800b32a <RCCEx_PLLSAI1_Config+0x62>
 800b324:	2b02      	cmp	r3, #2
 800b326:	d009      	beq.n	800b33c <RCCEx_PLLSAI1_Config+0x74>
 800b328:	e020      	b.n	800b36c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b32a:	4b60      	ldr	r3, [pc, #384]	; (800b4ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f003 0302 	and.w	r3, r3, #2
 800b332:	2b00      	cmp	r3, #0
 800b334:	d11d      	bne.n	800b372 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800b336:	2301      	movs	r3, #1
 800b338:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b33a:	e01a      	b.n	800b372 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b33c:	4b5b      	ldr	r3, [pc, #364]	; (800b4ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b344:	2b00      	cmp	r3, #0
 800b346:	d116      	bne.n	800b376 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800b348:	2301      	movs	r3, #1
 800b34a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b34c:	e013      	b.n	800b376 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b34e:	4b57      	ldr	r3, [pc, #348]	; (800b4ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b356:	2b00      	cmp	r3, #0
 800b358:	d10f      	bne.n	800b37a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b35a:	4b54      	ldr	r3, [pc, #336]	; (800b4ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b362:	2b00      	cmp	r3, #0
 800b364:	d109      	bne.n	800b37a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b36a:	e006      	b.n	800b37a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b36c:	2301      	movs	r3, #1
 800b36e:	73fb      	strb	r3, [r7, #15]
      break;
 800b370:	e004      	b.n	800b37c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b372:	bf00      	nop
 800b374:	e002      	b.n	800b37c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b376:	bf00      	nop
 800b378:	e000      	b.n	800b37c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b37a:	bf00      	nop
    }

    if(status == HAL_OK)
 800b37c:	7bfb      	ldrb	r3, [r7, #15]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d10d      	bne.n	800b39e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b382:	4b4a      	ldr	r3, [pc, #296]	; (800b4ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6819      	ldr	r1, [r3, #0]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	3b01      	subs	r3, #1
 800b394:	011b      	lsls	r3, r3, #4
 800b396:	430b      	orrs	r3, r1
 800b398:	4944      	ldr	r1, [pc, #272]	; (800b4ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b39a:	4313      	orrs	r3, r2
 800b39c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b39e:	7bfb      	ldrb	r3, [r7, #15]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d17d      	bne.n	800b4a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b3a4:	4b41      	ldr	r3, [pc, #260]	; (800b4ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a40      	ldr	r2, [pc, #256]	; (800b4ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b3aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b3ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3b0:	f7fc fb52 	bl	8007a58 <HAL_GetTick>
 800b3b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b3b6:	e009      	b.n	800b3cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b3b8:	f7fc fb4e 	bl	8007a58 <HAL_GetTick>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	1ad3      	subs	r3, r2, r3
 800b3c2:	2b02      	cmp	r3, #2
 800b3c4:	d902      	bls.n	800b3cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b3c6:	2303      	movs	r3, #3
 800b3c8:	73fb      	strb	r3, [r7, #15]
        break;
 800b3ca:	e005      	b.n	800b3d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b3cc:	4b37      	ldr	r3, [pc, #220]	; (800b4ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d1ef      	bne.n	800b3b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b3d8:	7bfb      	ldrb	r3, [r7, #15]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d160      	bne.n	800b4a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d111      	bne.n	800b408 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b3e4:	4b31      	ldr	r3, [pc, #196]	; (800b4ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800b3ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	6892      	ldr	r2, [r2, #8]
 800b3f4:	0211      	lsls	r1, r2, #8
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	68d2      	ldr	r2, [r2, #12]
 800b3fa:	0912      	lsrs	r2, r2, #4
 800b3fc:	0452      	lsls	r2, r2, #17
 800b3fe:	430a      	orrs	r2, r1
 800b400:	492a      	ldr	r1, [pc, #168]	; (800b4ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b402:	4313      	orrs	r3, r2
 800b404:	610b      	str	r3, [r1, #16]
 800b406:	e027      	b.n	800b458 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d112      	bne.n	800b434 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b40e:	4b27      	ldr	r3, [pc, #156]	; (800b4ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b410:	691b      	ldr	r3, [r3, #16]
 800b412:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800b416:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	6892      	ldr	r2, [r2, #8]
 800b41e:	0211      	lsls	r1, r2, #8
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	6912      	ldr	r2, [r2, #16]
 800b424:	0852      	lsrs	r2, r2, #1
 800b426:	3a01      	subs	r2, #1
 800b428:	0552      	lsls	r2, r2, #21
 800b42a:	430a      	orrs	r2, r1
 800b42c:	491f      	ldr	r1, [pc, #124]	; (800b4ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b42e:	4313      	orrs	r3, r2
 800b430:	610b      	str	r3, [r1, #16]
 800b432:	e011      	b.n	800b458 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b434:	4b1d      	ldr	r3, [pc, #116]	; (800b4ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b43c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	6892      	ldr	r2, [r2, #8]
 800b444:	0211      	lsls	r1, r2, #8
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	6952      	ldr	r2, [r2, #20]
 800b44a:	0852      	lsrs	r2, r2, #1
 800b44c:	3a01      	subs	r2, #1
 800b44e:	0652      	lsls	r2, r2, #25
 800b450:	430a      	orrs	r2, r1
 800b452:	4916      	ldr	r1, [pc, #88]	; (800b4ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b454:	4313      	orrs	r3, r2
 800b456:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b458:	4b14      	ldr	r3, [pc, #80]	; (800b4ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a13      	ldr	r2, [pc, #76]	; (800b4ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b45e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b462:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b464:	f7fc faf8 	bl	8007a58 <HAL_GetTick>
 800b468:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b46a:	e009      	b.n	800b480 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b46c:	f7fc faf4 	bl	8007a58 <HAL_GetTick>
 800b470:	4602      	mov	r2, r0
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	1ad3      	subs	r3, r2, r3
 800b476:	2b02      	cmp	r3, #2
 800b478:	d902      	bls.n	800b480 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800b47a:	2303      	movs	r3, #3
 800b47c:	73fb      	strb	r3, [r7, #15]
          break;
 800b47e:	e005      	b.n	800b48c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b480:	4b0a      	ldr	r3, [pc, #40]	; (800b4ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d0ef      	beq.n	800b46c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d106      	bne.n	800b4a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b492:	4b06      	ldr	r3, [pc, #24]	; (800b4ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b494:	691a      	ldr	r2, [r3, #16]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	699b      	ldr	r3, [r3, #24]
 800b49a:	4904      	ldr	r1, [pc, #16]	; (800b4ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b49c:	4313      	orrs	r3, r2
 800b49e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3710      	adds	r7, #16
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	40021000 	.word	0x40021000

0800b4b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b4be:	4b6a      	ldr	r3, [pc, #424]	; (800b668 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	f003 0303 	and.w	r3, r3, #3
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d018      	beq.n	800b4fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b4ca:	4b67      	ldr	r3, [pc, #412]	; (800b668 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	f003 0203 	and.w	r2, r3, #3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d10d      	bne.n	800b4f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
       ||
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d009      	beq.n	800b4f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800b4e2:	4b61      	ldr	r3, [pc, #388]	; (800b668 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	091b      	lsrs	r3, r3, #4
 800b4e8:	f003 0307 	and.w	r3, r3, #7
 800b4ec:	1c5a      	adds	r2, r3, #1
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	685b      	ldr	r3, [r3, #4]
       ||
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d047      	beq.n	800b586 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	73fb      	strb	r3, [r7, #15]
 800b4fa:	e044      	b.n	800b586 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2b03      	cmp	r3, #3
 800b502:	d018      	beq.n	800b536 <RCCEx_PLLSAI2_Config+0x86>
 800b504:	2b03      	cmp	r3, #3
 800b506:	d825      	bhi.n	800b554 <RCCEx_PLLSAI2_Config+0xa4>
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d002      	beq.n	800b512 <RCCEx_PLLSAI2_Config+0x62>
 800b50c:	2b02      	cmp	r3, #2
 800b50e:	d009      	beq.n	800b524 <RCCEx_PLLSAI2_Config+0x74>
 800b510:	e020      	b.n	800b554 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b512:	4b55      	ldr	r3, [pc, #340]	; (800b668 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f003 0302 	and.w	r3, r3, #2
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d11d      	bne.n	800b55a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800b51e:	2301      	movs	r3, #1
 800b520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b522:	e01a      	b.n	800b55a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b524:	4b50      	ldr	r3, [pc, #320]	; (800b668 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d116      	bne.n	800b55e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800b530:	2301      	movs	r3, #1
 800b532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b534:	e013      	b.n	800b55e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b536:	4b4c      	ldr	r3, [pc, #304]	; (800b668 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d10f      	bne.n	800b562 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b542:	4b49      	ldr	r3, [pc, #292]	; (800b668 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d109      	bne.n	800b562 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b552:	e006      	b.n	800b562 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b554:	2301      	movs	r3, #1
 800b556:	73fb      	strb	r3, [r7, #15]
      break;
 800b558:	e004      	b.n	800b564 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b55a:	bf00      	nop
 800b55c:	e002      	b.n	800b564 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b55e:	bf00      	nop
 800b560:	e000      	b.n	800b564 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b562:	bf00      	nop
    }

    if(status == HAL_OK)
 800b564:	7bfb      	ldrb	r3, [r7, #15]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d10d      	bne.n	800b586 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b56a:	4b3f      	ldr	r3, [pc, #252]	; (800b668 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b56c:	68db      	ldr	r3, [r3, #12]
 800b56e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6819      	ldr	r1, [r3, #0]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	3b01      	subs	r3, #1
 800b57c:	011b      	lsls	r3, r3, #4
 800b57e:	430b      	orrs	r3, r1
 800b580:	4939      	ldr	r1, [pc, #228]	; (800b668 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b582:	4313      	orrs	r3, r2
 800b584:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b586:	7bfb      	ldrb	r3, [r7, #15]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d167      	bne.n	800b65c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b58c:	4b36      	ldr	r3, [pc, #216]	; (800b668 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a35      	ldr	r2, [pc, #212]	; (800b668 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b598:	f7fc fa5e 	bl	8007a58 <HAL_GetTick>
 800b59c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b59e:	e009      	b.n	800b5b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b5a0:	f7fc fa5a 	bl	8007a58 <HAL_GetTick>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	1ad3      	subs	r3, r2, r3
 800b5aa:	2b02      	cmp	r3, #2
 800b5ac:	d902      	bls.n	800b5b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b5ae:	2303      	movs	r3, #3
 800b5b0:	73fb      	strb	r3, [r7, #15]
        break;
 800b5b2:	e005      	b.n	800b5c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b5b4:	4b2c      	ldr	r3, [pc, #176]	; (800b668 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d1ef      	bne.n	800b5a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d14a      	bne.n	800b65c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d111      	bne.n	800b5f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b5cc:	4b26      	ldr	r3, [pc, #152]	; (800b668 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b5ce:	695b      	ldr	r3, [r3, #20]
 800b5d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800b5d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	6892      	ldr	r2, [r2, #8]
 800b5dc:	0211      	lsls	r1, r2, #8
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	68d2      	ldr	r2, [r2, #12]
 800b5e2:	0912      	lsrs	r2, r2, #4
 800b5e4:	0452      	lsls	r2, r2, #17
 800b5e6:	430a      	orrs	r2, r1
 800b5e8:	491f      	ldr	r1, [pc, #124]	; (800b668 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	614b      	str	r3, [r1, #20]
 800b5ee:	e011      	b.n	800b614 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b5f0:	4b1d      	ldr	r3, [pc, #116]	; (800b668 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b5f2:	695b      	ldr	r3, [r3, #20]
 800b5f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b5f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	6892      	ldr	r2, [r2, #8]
 800b600:	0211      	lsls	r1, r2, #8
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	6912      	ldr	r2, [r2, #16]
 800b606:	0852      	lsrs	r2, r2, #1
 800b608:	3a01      	subs	r2, #1
 800b60a:	0652      	lsls	r2, r2, #25
 800b60c:	430a      	orrs	r2, r1
 800b60e:	4916      	ldr	r1, [pc, #88]	; (800b668 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b610:	4313      	orrs	r3, r2
 800b612:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b614:	4b14      	ldr	r3, [pc, #80]	; (800b668 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4a13      	ldr	r2, [pc, #76]	; (800b668 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b61a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b61e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b620:	f7fc fa1a 	bl	8007a58 <HAL_GetTick>
 800b624:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b626:	e009      	b.n	800b63c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b628:	f7fc fa16 	bl	8007a58 <HAL_GetTick>
 800b62c:	4602      	mov	r2, r0
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	1ad3      	subs	r3, r2, r3
 800b632:	2b02      	cmp	r3, #2
 800b634:	d902      	bls.n	800b63c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800b636:	2303      	movs	r3, #3
 800b638:	73fb      	strb	r3, [r7, #15]
          break;
 800b63a:	e005      	b.n	800b648 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b63c:	4b0a      	ldr	r3, [pc, #40]	; (800b668 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b644:	2b00      	cmp	r3, #0
 800b646:	d0ef      	beq.n	800b628 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800b648:	7bfb      	ldrb	r3, [r7, #15]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d106      	bne.n	800b65c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b64e:	4b06      	ldr	r3, [pc, #24]	; (800b668 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b650:	695a      	ldr	r2, [r3, #20]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	695b      	ldr	r3, [r3, #20]
 800b656:	4904      	ldr	r1, [pc, #16]	; (800b668 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b658:	4313      	orrs	r3, r2
 800b65a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	40021000 	.word	0x40021000

0800b66c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d06c      	beq.n	800b758 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b684:	b2db      	uxtb	r3, r3
 800b686:	2b00      	cmp	r3, #0
 800b688:	d106      	bne.n	800b698 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f7fa ff70 	bl	8006578 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2202      	movs	r2, #2
 800b69c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	22ca      	movs	r2, #202	; 0xca
 800b6a6:	625a      	str	r2, [r3, #36]	; 0x24
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2253      	movs	r2, #83	; 0x53
 800b6ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f000 fa49 	bl	800bb48 <RTC_EnterInitMode>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b6ba:	7bfb      	ldrb	r3, [r7, #15]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d14b      	bne.n	800b758 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	6812      	ldr	r2, [r2, #0]
 800b6ca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b6ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6d2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	6899      	ldr	r1, [r3, #8]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	685a      	ldr	r2, [r3, #4]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	691b      	ldr	r3, [r3, #16]
 800b6e2:	431a      	orrs	r2, r3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	699b      	ldr	r3, [r3, #24]
 800b6e8:	431a      	orrs	r2, r3
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	430a      	orrs	r2, r1
 800b6f0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	68d2      	ldr	r2, [r2, #12]
 800b6fa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	6919      	ldr	r1, [r3, #16]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	041a      	lsls	r2, r3, #16
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	430a      	orrs	r2, r1
 800b70e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 fa4d 	bl	800bbb0 <RTC_ExitInitMode>
 800b716:	4603      	mov	r3, r0
 800b718:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800b71a:	7bfb      	ldrb	r3, [r7, #15]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d11b      	bne.n	800b758 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f022 0203 	bic.w	r2, r2, #3
 800b72e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	69da      	ldr	r2, [r3, #28]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	695b      	ldr	r3, [r3, #20]
 800b73e:	431a      	orrs	r2, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	430a      	orrs	r2, r1
 800b746:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	22ff      	movs	r2, #255	; 0xff
 800b74e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2201      	movs	r2, #1
 800b754:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800b758:	7bfb      	ldrb	r3, [r7, #15]
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3710      	adds	r7, #16
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}

0800b762 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b762:	b590      	push	{r4, r7, lr}
 800b764:	b087      	sub	sp, #28
 800b766:	af00      	add	r7, sp, #0
 800b768:	60f8      	str	r0, [r7, #12]
 800b76a:	60b9      	str	r1, [r7, #8]
 800b76c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d101      	bne.n	800b77c <HAL_RTC_SetTime+0x1a>
 800b778:	2302      	movs	r3, #2
 800b77a:	e08b      	b.n	800b894 <HAL_RTC_SetTime+0x132>
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2201      	movs	r2, #1
 800b780:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2202      	movs	r2, #2
 800b788:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	22ca      	movs	r2, #202	; 0xca
 800b792:	625a      	str	r2, [r3, #36]	; 0x24
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2253      	movs	r2, #83	; 0x53
 800b79a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f000 f9d3 	bl	800bb48 <RTC_EnterInitMode>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b7a6:	7cfb      	ldrb	r3, [r7, #19]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d163      	bne.n	800b874 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d126      	bne.n	800b800 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d102      	bne.n	800b7c6 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f000 fa2e 	bl	800bc2c <RTC_ByteToBcd2>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	785b      	ldrb	r3, [r3, #1]
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f000 fa27 	bl	800bc2c <RTC_ByteToBcd2>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b7e2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	789b      	ldrb	r3, [r3, #2]
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f000 fa1f 	bl	800bc2c <RTC_ByteToBcd2>
 800b7ee:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b7f0:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	78db      	ldrb	r3, [r3, #3]
 800b7f8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	617b      	str	r3, [r7, #20]
 800b7fe:	e018      	b.n	800b832 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	689b      	ldr	r3, [r3, #8]
 800b806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d102      	bne.n	800b814 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	2200      	movs	r2, #0
 800b812:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	785b      	ldrb	r3, [r3, #1]
 800b81e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b820:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b822:	68ba      	ldr	r2, [r7, #8]
 800b824:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b826:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	78db      	ldrb	r3, [r3, #3]
 800b82c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b82e:	4313      	orrs	r3, r2
 800b830:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b83c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b840:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	689a      	ldr	r2, [r3, #8]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b850:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	6899      	ldr	r1, [r3, #8]
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	68da      	ldr	r2, [r3, #12]
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	691b      	ldr	r3, [r3, #16]
 800b860:	431a      	orrs	r2, r3
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	430a      	orrs	r2, r1
 800b868:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	f000 f9a0 	bl	800bbb0 <RTC_ExitInitMode>
 800b870:	4603      	mov	r3, r0
 800b872:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	22ff      	movs	r2, #255	; 0xff
 800b87a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b87c:	7cfb      	ldrb	r3, [r7, #19]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d103      	bne.n	800b88a <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2201      	movs	r2, #1
 800b886:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b892:	7cfb      	ldrb	r3, [r7, #19]
}
 800b894:	4618      	mov	r0, r3
 800b896:	371c      	adds	r7, #28
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd90      	pop	{r4, r7, pc}

0800b89c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b086      	sub	sp, #24
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	691b      	ldr	r3, [r3, #16]
 800b8b8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b8ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b8ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	0c1b      	lsrs	r3, r3, #16
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8da:	b2da      	uxtb	r2, r3
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	0a1b      	lsrs	r3, r3, #8
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8ea:	b2da      	uxtb	r2, r3
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8f8:	b2da      	uxtb	r2, r3
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	0d9b      	lsrs	r3, r3, #22
 800b902:	b2db      	uxtb	r3, r3
 800b904:	f003 0301 	and.w	r3, r3, #1
 800b908:	b2da      	uxtb	r2, r3
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d11a      	bne.n	800b94a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	4618      	mov	r0, r3
 800b91a:	f000 f9a7 	bl	800bc6c <RTC_Bcd2ToByte>
 800b91e:	4603      	mov	r3, r0
 800b920:	461a      	mov	r2, r3
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	785b      	ldrb	r3, [r3, #1]
 800b92a:	4618      	mov	r0, r3
 800b92c:	f000 f99e 	bl	800bc6c <RTC_Bcd2ToByte>
 800b930:	4603      	mov	r3, r0
 800b932:	461a      	mov	r2, r3
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	789b      	ldrb	r3, [r3, #2]
 800b93c:	4618      	mov	r0, r3
 800b93e:	f000 f995 	bl	800bc6c <RTC_Bcd2ToByte>
 800b942:	4603      	mov	r3, r0
 800b944:	461a      	mov	r2, r3
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b94a:	2300      	movs	r3, #0
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3718      	adds	r7, #24
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b954:	b590      	push	{r4, r7, lr}
 800b956:	b087      	sub	sp, #28
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b966:	2b01      	cmp	r3, #1
 800b968:	d101      	bne.n	800b96e <HAL_RTC_SetDate+0x1a>
 800b96a:	2302      	movs	r3, #2
 800b96c:	e075      	b.n	800ba5a <HAL_RTC_SetDate+0x106>
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2201      	movs	r2, #1
 800b972:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2202      	movs	r2, #2
 800b97a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d10e      	bne.n	800b9a2 <HAL_RTC_SetDate+0x4e>
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	785b      	ldrb	r3, [r3, #1]
 800b988:	f003 0310 	and.w	r3, r3, #16
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d008      	beq.n	800b9a2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	785b      	ldrb	r3, [r3, #1]
 800b994:	f023 0310 	bic.w	r3, r3, #16
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	330a      	adds	r3, #10
 800b99c:	b2da      	uxtb	r2, r3
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d11c      	bne.n	800b9e2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	78db      	ldrb	r3, [r3, #3]
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f000 f93d 	bl	800bc2c <RTC_ByteToBcd2>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	785b      	ldrb	r3, [r3, #1]
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f000 f936 	bl	800bc2c <RTC_ByteToBcd2>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b9c4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	789b      	ldrb	r3, [r3, #2]
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f000 f92e 	bl	800bc2c <RTC_ByteToBcd2>
 800b9d0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b9d2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	617b      	str	r3, [r7, #20]
 800b9e0:	e00e      	b.n	800ba00 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	78db      	ldrb	r3, [r3, #3]
 800b9e6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	785b      	ldrb	r3, [r3, #1]
 800b9ec:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b9ee:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800b9f0:	68ba      	ldr	r2, [r7, #8]
 800b9f2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b9f4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	22ca      	movs	r2, #202	; 0xca
 800ba06:	625a      	str	r2, [r3, #36]	; 0x24
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2253      	movs	r2, #83	; 0x53
 800ba0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f000 f899 	bl	800bb48 <RTC_EnterInitMode>
 800ba16:	4603      	mov	r3, r0
 800ba18:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800ba1a:	7cfb      	ldrb	r3, [r7, #19]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d10c      	bne.n	800ba3a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ba2a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ba2e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ba30:	68f8      	ldr	r0, [r7, #12]
 800ba32:	f000 f8bd 	bl	800bbb0 <RTC_ExitInitMode>
 800ba36:	4603      	mov	r3, r0
 800ba38:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	22ff      	movs	r2, #255	; 0xff
 800ba40:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800ba42:	7cfb      	ldrb	r3, [r7, #19]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d103      	bne.n	800ba50 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2200      	movs	r2, #0
 800ba54:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800ba58:	7cfb      	ldrb	r3, [r7, #19]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	371c      	adds	r7, #28
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd90      	pop	{r4, r7, pc}

0800ba62 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ba62:	b580      	push	{r7, lr}
 800ba64:	b086      	sub	sp, #24
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	60f8      	str	r0, [r7, #12]
 800ba6a:	60b9      	str	r1, [r7, #8]
 800ba6c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ba78:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ba7c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	0c1b      	lsrs	r3, r3, #16
 800ba82:	b2da      	uxtb	r2, r3
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	0a1b      	lsrs	r3, r3, #8
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	f003 031f 	and.w	r3, r3, #31
 800ba92:	b2da      	uxtb	r2, r3
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800baa0:	b2da      	uxtb	r2, r3
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	0b5b      	lsrs	r3, r3, #13
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	f003 0307 	and.w	r3, r3, #7
 800bab0:	b2da      	uxtb	r2, r3
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d11a      	bne.n	800baf2 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	78db      	ldrb	r3, [r3, #3]
 800bac0:	4618      	mov	r0, r3
 800bac2:	f000 f8d3 	bl	800bc6c <RTC_Bcd2ToByte>
 800bac6:	4603      	mov	r3, r0
 800bac8:	461a      	mov	r2, r3
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	785b      	ldrb	r3, [r3, #1]
 800bad2:	4618      	mov	r0, r3
 800bad4:	f000 f8ca 	bl	800bc6c <RTC_Bcd2ToByte>
 800bad8:	4603      	mov	r3, r0
 800bada:	461a      	mov	r2, r3
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	789b      	ldrb	r3, [r3, #2]
 800bae4:	4618      	mov	r0, r3
 800bae6:	f000 f8c1 	bl	800bc6c <RTC_Bcd2ToByte>
 800baea:	4603      	mov	r3, r0
 800baec:	461a      	mov	r2, r3
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800baf2:	2300      	movs	r3, #0
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3718      	adds	r7, #24
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	68da      	ldr	r2, [r3, #12]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bb12:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800bb14:	f7fb ffa0 	bl	8007a58 <HAL_GetTick>
 800bb18:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bb1a:	e009      	b.n	800bb30 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bb1c:	f7fb ff9c 	bl	8007a58 <HAL_GetTick>
 800bb20:	4602      	mov	r2, r0
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	1ad3      	subs	r3, r2, r3
 800bb26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb2a:	d901      	bls.n	800bb30 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800bb2c:	2303      	movs	r3, #3
 800bb2e:	e007      	b.n	800bb40 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	68db      	ldr	r3, [r3, #12]
 800bb36:	f003 0320 	and.w	r3, r3, #32
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d0ee      	beq.n	800bb1c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800bb3e:	2300      	movs	r3, #0
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3710      	adds	r7, #16
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb50:	2300      	movs	r3, #0
 800bb52:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d120      	bne.n	800bba4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb6a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800bb6c:	f7fb ff74 	bl	8007a58 <HAL_GetTick>
 800bb70:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800bb72:	e00d      	b.n	800bb90 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800bb74:	f7fb ff70 	bl	8007a58 <HAL_GetTick>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	1ad3      	subs	r3, r2, r3
 800bb7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb82:	d905      	bls.n	800bb90 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800bb84:	2303      	movs	r3, #3
 800bb86:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2203      	movs	r2, #3
 800bb8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d102      	bne.n	800bba4 <RTC_EnterInitMode+0x5c>
 800bb9e:	7bfb      	ldrb	r3, [r7, #15]
 800bba0:	2b03      	cmp	r3, #3
 800bba2:	d1e7      	bne.n	800bb74 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800bba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3710      	adds	r7, #16
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
	...

0800bbb0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800bbbc:	4b1a      	ldr	r3, [pc, #104]	; (800bc28 <RTC_ExitInitMode+0x78>)
 800bbbe:	68db      	ldr	r3, [r3, #12]
 800bbc0:	4a19      	ldr	r2, [pc, #100]	; (800bc28 <RTC_ExitInitMode+0x78>)
 800bbc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbc6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800bbc8:	4b17      	ldr	r3, [pc, #92]	; (800bc28 <RTC_ExitInitMode+0x78>)
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	f003 0320 	and.w	r3, r3, #32
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d10c      	bne.n	800bbee <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f7ff ff91 	bl	800bafc <HAL_RTC_WaitForSynchro>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d01e      	beq.n	800bc1e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2203      	movs	r2, #3
 800bbe4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800bbe8:	2303      	movs	r3, #3
 800bbea:	73fb      	strb	r3, [r7, #15]
 800bbec:	e017      	b.n	800bc1e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bbee:	4b0e      	ldr	r3, [pc, #56]	; (800bc28 <RTC_ExitInitMode+0x78>)
 800bbf0:	689b      	ldr	r3, [r3, #8]
 800bbf2:	4a0d      	ldr	r2, [pc, #52]	; (800bc28 <RTC_ExitInitMode+0x78>)
 800bbf4:	f023 0320 	bic.w	r3, r3, #32
 800bbf8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f7ff ff7e 	bl	800bafc <HAL_RTC_WaitForSynchro>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d005      	beq.n	800bc12 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2203      	movs	r2, #3
 800bc0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800bc0e:	2303      	movs	r3, #3
 800bc10:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bc12:	4b05      	ldr	r3, [pc, #20]	; (800bc28 <RTC_ExitInitMode+0x78>)
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	4a04      	ldr	r2, [pc, #16]	; (800bc28 <RTC_ExitInitMode+0x78>)
 800bc18:	f043 0320 	orr.w	r3, r3, #32
 800bc1c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800bc1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3710      	adds	r7, #16
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	40002800 	.word	0x40002800

0800bc2c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b085      	sub	sp, #20
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	4603      	mov	r3, r0
 800bc34:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800bc36:	2300      	movs	r3, #0
 800bc38:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800bc3a:	79fb      	ldrb	r3, [r7, #7]
 800bc3c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800bc3e:	e005      	b.n	800bc4c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	3301      	adds	r3, #1
 800bc44:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800bc46:	7afb      	ldrb	r3, [r7, #11]
 800bc48:	3b0a      	subs	r3, #10
 800bc4a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800bc4c:	7afb      	ldrb	r3, [r7, #11]
 800bc4e:	2b09      	cmp	r3, #9
 800bc50:	d8f6      	bhi.n	800bc40 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	011b      	lsls	r3, r3, #4
 800bc58:	b2da      	uxtb	r2, r3
 800bc5a:	7afb      	ldrb	r3, [r7, #11]
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	b2db      	uxtb	r3, r3
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3714      	adds	r7, #20
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b085      	sub	sp, #20
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	4603      	mov	r3, r0
 800bc74:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800bc76:	79fb      	ldrb	r3, [r7, #7]
 800bc78:	091b      	lsrs	r3, r3, #4
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	0092      	lsls	r2, r2, #2
 800bc80:	4413      	add	r3, r2
 800bc82:	005b      	lsls	r3, r3, #1
 800bc84:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800bc86:	79fb      	ldrb	r3, [r7, #7]
 800bc88:	f003 030f 	and.w	r3, r3, #15
 800bc8c:	b2da      	uxtb	r2, r3
 800bc8e:	7bfb      	ldrb	r3, [r7, #15]
 800bc90:	4413      	add	r3, r2
 800bc92:	b2db      	uxtb	r3, r3
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3714      	adds	r7, #20
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d101      	bne.n	800bcb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	e095      	b.n	800bdde <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d108      	bne.n	800bccc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bcc2:	d009      	beq.n	800bcd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	61da      	str	r2, [r3, #28]
 800bcca:	e005      	b.n	800bcd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d106      	bne.n	800bcf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2200      	movs	r2, #0
 800bcee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f7fa fc72 	bl	80065dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2202      	movs	r2, #2
 800bcfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bd18:	d902      	bls.n	800bd20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	60fb      	str	r3, [r7, #12]
 800bd1e:	e002      	b.n	800bd26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bd20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bd2e:	d007      	beq.n	800bd40 <HAL_SPI_Init+0xa0>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	68db      	ldr	r3, [r3, #12]
 800bd34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bd38:	d002      	beq.n	800bd40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bd50:	431a      	orrs	r2, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	691b      	ldr	r3, [r3, #16]
 800bd56:	f003 0302 	and.w	r3, r3, #2
 800bd5a:	431a      	orrs	r2, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	695b      	ldr	r3, [r3, #20]
 800bd60:	f003 0301 	and.w	r3, r3, #1
 800bd64:	431a      	orrs	r2, r3
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	699b      	ldr	r3, [r3, #24]
 800bd6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd6e:	431a      	orrs	r2, r3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	69db      	ldr	r3, [r3, #28]
 800bd74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd78:	431a      	orrs	r2, r3
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6a1b      	ldr	r3, [r3, #32]
 800bd7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd82:	ea42 0103 	orr.w	r1, r2, r3
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd8a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	430a      	orrs	r2, r1
 800bd94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	699b      	ldr	r3, [r3, #24]
 800bd9a:	0c1b      	lsrs	r3, r3, #16
 800bd9c:	f003 0204 	and.w	r2, r3, #4
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda4:	f003 0310 	and.w	r3, r3, #16
 800bda8:	431a      	orrs	r2, r3
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdae:	f003 0308 	and.w	r3, r3, #8
 800bdb2:	431a      	orrs	r2, r3
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	68db      	ldr	r3, [r3, #12]
 800bdb8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800bdbc:	ea42 0103 	orr.w	r1, r2, r3
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	430a      	orrs	r2, r1
 800bdcc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bddc:	2300      	movs	r3, #0
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3710      	adds	r7, #16
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bde6:	b580      	push	{r7, lr}
 800bde8:	b088      	sub	sp, #32
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	60f8      	str	r0, [r7, #12]
 800bdee:	60b9      	str	r1, [r7, #8]
 800bdf0:	603b      	str	r3, [r7, #0]
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800be00:	2b01      	cmp	r3, #1
 800be02:	d101      	bne.n	800be08 <HAL_SPI_Transmit+0x22>
 800be04:	2302      	movs	r3, #2
 800be06:	e158      	b.n	800c0ba <HAL_SPI_Transmit+0x2d4>
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2201      	movs	r2, #1
 800be0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800be10:	f7fb fe22 	bl	8007a58 <HAL_GetTick>
 800be14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800be16:	88fb      	ldrh	r3, [r7, #6]
 800be18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800be20:	b2db      	uxtb	r3, r3
 800be22:	2b01      	cmp	r3, #1
 800be24:	d002      	beq.n	800be2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800be26:	2302      	movs	r3, #2
 800be28:	77fb      	strb	r3, [r7, #31]
    goto error;
 800be2a:	e13d      	b.n	800c0a8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d002      	beq.n	800be38 <HAL_SPI_Transmit+0x52>
 800be32:	88fb      	ldrh	r3, [r7, #6]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d102      	bne.n	800be3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800be38:	2301      	movs	r3, #1
 800be3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800be3c:	e134      	b.n	800c0a8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2203      	movs	r2, #3
 800be42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2200      	movs	r2, #0
 800be4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	68ba      	ldr	r2, [r7, #8]
 800be50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	88fa      	ldrh	r2, [r7, #6]
 800be56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	88fa      	ldrh	r2, [r7, #6]
 800be5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2200      	movs	r2, #0
 800be62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2200      	movs	r2, #0
 800be68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2200      	movs	r2, #0
 800be70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2200      	movs	r2, #0
 800be78:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2200      	movs	r2, #0
 800be7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	689b      	ldr	r3, [r3, #8]
 800be84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be88:	d10f      	bne.n	800beaa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bea8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beb4:	2b40      	cmp	r3, #64	; 0x40
 800beb6:	d007      	beq.n	800bec8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bec6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bed0:	d94b      	bls.n	800bf6a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d002      	beq.n	800bee0 <HAL_SPI_Transmit+0xfa>
 800beda:	8afb      	ldrh	r3, [r7, #22]
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d13e      	bne.n	800bf5e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee4:	881a      	ldrh	r2, [r3, #0]
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef0:	1c9a      	adds	r2, r3, #2
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800befa:	b29b      	uxth	r3, r3
 800befc:	3b01      	subs	r3, #1
 800befe:	b29a      	uxth	r2, r3
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bf04:	e02b      	b.n	800bf5e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	f003 0302 	and.w	r3, r3, #2
 800bf10:	2b02      	cmp	r3, #2
 800bf12:	d112      	bne.n	800bf3a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf18:	881a      	ldrh	r2, [r3, #0]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf24:	1c9a      	adds	r2, r3, #2
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	3b01      	subs	r3, #1
 800bf32:	b29a      	uxth	r2, r3
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bf38:	e011      	b.n	800bf5e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf3a:	f7fb fd8d 	bl	8007a58 <HAL_GetTick>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	1ad3      	subs	r3, r2, r3
 800bf44:	683a      	ldr	r2, [r7, #0]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d803      	bhi.n	800bf52 <HAL_SPI_Transmit+0x16c>
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf50:	d102      	bne.n	800bf58 <HAL_SPI_Transmit+0x172>
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d102      	bne.n	800bf5e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800bf58:	2303      	movs	r3, #3
 800bf5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bf5c:	e0a4      	b.n	800c0a8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d1ce      	bne.n	800bf06 <HAL_SPI_Transmit+0x120>
 800bf68:	e07c      	b.n	800c064 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d002      	beq.n	800bf78 <HAL_SPI_Transmit+0x192>
 800bf72:	8afb      	ldrh	r3, [r7, #22]
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d170      	bne.n	800c05a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d912      	bls.n	800bfa8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf86:	881a      	ldrh	r2, [r3, #0]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf92:	1c9a      	adds	r2, r3, #2
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	3b02      	subs	r3, #2
 800bfa0:	b29a      	uxth	r2, r3
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bfa6:	e058      	b.n	800c05a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	330c      	adds	r3, #12
 800bfb2:	7812      	ldrb	r2, [r2, #0]
 800bfb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfba:	1c5a      	adds	r2, r3, #1
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	3b01      	subs	r3, #1
 800bfc8:	b29a      	uxth	r2, r3
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800bfce:	e044      	b.n	800c05a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	689b      	ldr	r3, [r3, #8]
 800bfd6:	f003 0302 	and.w	r3, r3, #2
 800bfda:	2b02      	cmp	r3, #2
 800bfdc:	d12b      	bne.n	800c036 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d912      	bls.n	800c00e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfec:	881a      	ldrh	r2, [r3, #0]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bff8:	1c9a      	adds	r2, r3, #2
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c002:	b29b      	uxth	r3, r3
 800c004:	3b02      	subs	r3, #2
 800c006:	b29a      	uxth	r2, r3
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c00c:	e025      	b.n	800c05a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	330c      	adds	r3, #12
 800c018:	7812      	ldrb	r2, [r2, #0]
 800c01a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c020:	1c5a      	adds	r2, r3, #1
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	3b01      	subs	r3, #1
 800c02e:	b29a      	uxth	r2, r3
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c034:	e011      	b.n	800c05a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c036:	f7fb fd0f 	bl	8007a58 <HAL_GetTick>
 800c03a:	4602      	mov	r2, r0
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	1ad3      	subs	r3, r2, r3
 800c040:	683a      	ldr	r2, [r7, #0]
 800c042:	429a      	cmp	r2, r3
 800c044:	d803      	bhi.n	800c04e <HAL_SPI_Transmit+0x268>
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c04c:	d102      	bne.n	800c054 <HAL_SPI_Transmit+0x26e>
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d102      	bne.n	800c05a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800c054:	2303      	movs	r3, #3
 800c056:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c058:	e026      	b.n	800c0a8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c05e:	b29b      	uxth	r3, r3
 800c060:	2b00      	cmp	r3, #0
 800c062:	d1b5      	bne.n	800bfd0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c064:	69ba      	ldr	r2, [r7, #24]
 800c066:	6839      	ldr	r1, [r7, #0]
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	f001 f9dd 	bl	800d428 <SPI_EndRxTxTransaction>
 800c06e:	4603      	mov	r3, r0
 800c070:	2b00      	cmp	r3, #0
 800c072:	d002      	beq.n	800c07a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2220      	movs	r2, #32
 800c078:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	689b      	ldr	r3, [r3, #8]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d10a      	bne.n	800c098 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c082:	2300      	movs	r3, #0
 800c084:	613b      	str	r3, [r7, #16]
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	68db      	ldr	r3, [r3, #12]
 800c08c:	613b      	str	r3, [r7, #16]
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	613b      	str	r3, [r7, #16]
 800c096:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d002      	beq.n	800c0a6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	77fb      	strb	r3, [r7, #31]
 800c0a4:	e000      	b.n	800c0a8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800c0a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c0b8:	7ffb      	ldrb	r3, [r7, #31]
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3720      	adds	r7, #32
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}

0800c0c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c0c2:	b580      	push	{r7, lr}
 800c0c4:	b088      	sub	sp, #32
 800c0c6:	af02      	add	r7, sp, #8
 800c0c8:	60f8      	str	r0, [r7, #12]
 800c0ca:	60b9      	str	r1, [r7, #8]
 800c0cc:	603b      	str	r3, [r7, #0]
 800c0ce:	4613      	mov	r3, r2
 800c0d0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c0de:	d112      	bne.n	800c106 <HAL_SPI_Receive+0x44>
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	689b      	ldr	r3, [r3, #8]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d10e      	bne.n	800c106 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2204      	movs	r2, #4
 800c0ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c0f0:	88fa      	ldrh	r2, [r7, #6]
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	9300      	str	r3, [sp, #0]
 800c0f6:	4613      	mov	r3, r2
 800c0f8:	68ba      	ldr	r2, [r7, #8]
 800c0fa:	68b9      	ldr	r1, [r7, #8]
 800c0fc:	68f8      	ldr	r0, [r7, #12]
 800c0fe:	f000 f910 	bl	800c322 <HAL_SPI_TransmitReceive>
 800c102:	4603      	mov	r3, r0
 800c104:	e109      	b.n	800c31a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d101      	bne.n	800c114 <HAL_SPI_Receive+0x52>
 800c110:	2302      	movs	r3, #2
 800c112:	e102      	b.n	800c31a <HAL_SPI_Receive+0x258>
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2201      	movs	r2, #1
 800c118:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c11c:	f7fb fc9c 	bl	8007a58 <HAL_GetTick>
 800c120:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c128:	b2db      	uxtb	r3, r3
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	d002      	beq.n	800c134 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800c12e:	2302      	movs	r3, #2
 800c130:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c132:	e0e9      	b.n	800c308 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d002      	beq.n	800c140 <HAL_SPI_Receive+0x7e>
 800c13a:	88fb      	ldrh	r3, [r7, #6]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d102      	bne.n	800c146 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c140:	2301      	movs	r3, #1
 800c142:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c144:	e0e0      	b.n	800c308 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2204      	movs	r2, #4
 800c14a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2200      	movs	r2, #0
 800c152:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	68ba      	ldr	r2, [r7, #8]
 800c158:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	88fa      	ldrh	r2, [r7, #6]
 800c15e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	88fa      	ldrh	r2, [r7, #6]
 800c166:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2200      	movs	r2, #0
 800c16e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2200      	movs	r2, #0
 800c174:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2200      	movs	r2, #0
 800c17a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2200      	movs	r2, #0
 800c180:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2200      	movs	r2, #0
 800c186:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	68db      	ldr	r3, [r3, #12]
 800c18c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c190:	d908      	bls.n	800c1a4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	685a      	ldr	r2, [r3, #4]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c1a0:	605a      	str	r2, [r3, #4]
 800c1a2:	e007      	b.n	800c1b4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	685a      	ldr	r2, [r3, #4]
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c1b2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	689b      	ldr	r3, [r3, #8]
 800c1b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1bc:	d10f      	bne.n	800c1de <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c1dc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1e8:	2b40      	cmp	r3, #64	; 0x40
 800c1ea:	d007      	beq.n	800c1fc <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c1fa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	68db      	ldr	r3, [r3, #12]
 800c200:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c204:	d867      	bhi.n	800c2d6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c206:	e030      	b.n	800c26a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	689b      	ldr	r3, [r3, #8]
 800c20e:	f003 0301 	and.w	r3, r3, #1
 800c212:	2b01      	cmp	r3, #1
 800c214:	d117      	bne.n	800c246 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f103 020c 	add.w	r2, r3, #12
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c222:	7812      	ldrb	r2, [r2, #0]
 800c224:	b2d2      	uxtb	r2, r2
 800c226:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c22c:	1c5a      	adds	r2, r3, #1
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c238:	b29b      	uxth	r3, r3
 800c23a:	3b01      	subs	r3, #1
 800c23c:	b29a      	uxth	r2, r3
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c244:	e011      	b.n	800c26a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c246:	f7fb fc07 	bl	8007a58 <HAL_GetTick>
 800c24a:	4602      	mov	r2, r0
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	1ad3      	subs	r3, r2, r3
 800c250:	683a      	ldr	r2, [r7, #0]
 800c252:	429a      	cmp	r2, r3
 800c254:	d803      	bhi.n	800c25e <HAL_SPI_Receive+0x19c>
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c25c:	d102      	bne.n	800c264 <HAL_SPI_Receive+0x1a2>
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d102      	bne.n	800c26a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800c264:	2303      	movs	r3, #3
 800c266:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c268:	e04e      	b.n	800c308 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c270:	b29b      	uxth	r3, r3
 800c272:	2b00      	cmp	r3, #0
 800c274:	d1c8      	bne.n	800c208 <HAL_SPI_Receive+0x146>
 800c276:	e034      	b.n	800c2e2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	689b      	ldr	r3, [r3, #8]
 800c27e:	f003 0301 	and.w	r3, r3, #1
 800c282:	2b01      	cmp	r3, #1
 800c284:	d115      	bne.n	800c2b2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	68da      	ldr	r2, [r3, #12]
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c290:	b292      	uxth	r2, r2
 800c292:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c298:	1c9a      	adds	r2, r3, #2
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c2a4:	b29b      	uxth	r3, r3
 800c2a6:	3b01      	subs	r3, #1
 800c2a8:	b29a      	uxth	r2, r3
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c2b0:	e011      	b.n	800c2d6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2b2:	f7fb fbd1 	bl	8007a58 <HAL_GetTick>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	1ad3      	subs	r3, r2, r3
 800c2bc:	683a      	ldr	r2, [r7, #0]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d803      	bhi.n	800c2ca <HAL_SPI_Receive+0x208>
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2c8:	d102      	bne.n	800c2d0 <HAL_SPI_Receive+0x20e>
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d102      	bne.n	800c2d6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800c2d0:	2303      	movs	r3, #3
 800c2d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c2d4:	e018      	b.n	800c308 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1ca      	bne.n	800c278 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c2e2:	693a      	ldr	r2, [r7, #16]
 800c2e4:	6839      	ldr	r1, [r7, #0]
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f001 f846 	bl	800d378 <SPI_EndRxTransaction>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d002      	beq.n	800c2f8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2220      	movs	r2, #32
 800c2f6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d002      	beq.n	800c306 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800c300:	2301      	movs	r3, #1
 800c302:	75fb      	strb	r3, [r7, #23]
 800c304:	e000      	b.n	800c308 <HAL_SPI_Receive+0x246>
  }

error :
 800c306:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2201      	movs	r2, #1
 800c30c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2200      	movs	r2, #0
 800c314:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c318:	7dfb      	ldrb	r3, [r7, #23]
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3718      	adds	r7, #24
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c322:	b580      	push	{r7, lr}
 800c324:	b08a      	sub	sp, #40	; 0x28
 800c326:	af00      	add	r7, sp, #0
 800c328:	60f8      	str	r0, [r7, #12]
 800c32a:	60b9      	str	r1, [r7, #8]
 800c32c:	607a      	str	r2, [r7, #4]
 800c32e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c330:	2301      	movs	r3, #1
 800c332:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c334:	2300      	movs	r3, #0
 800c336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c340:	2b01      	cmp	r3, #1
 800c342:	d101      	bne.n	800c348 <HAL_SPI_TransmitReceive+0x26>
 800c344:	2302      	movs	r3, #2
 800c346:	e1fb      	b.n	800c740 <HAL_SPI_TransmitReceive+0x41e>
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2201      	movs	r2, #1
 800c34c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c350:	f7fb fb82 	bl	8007a58 <HAL_GetTick>
 800c354:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c35c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800c364:	887b      	ldrh	r3, [r7, #2]
 800c366:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800c368:	887b      	ldrh	r3, [r7, #2]
 800c36a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c36c:	7efb      	ldrb	r3, [r7, #27]
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d00e      	beq.n	800c390 <HAL_SPI_TransmitReceive+0x6e>
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c378:	d106      	bne.n	800c388 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	689b      	ldr	r3, [r3, #8]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d102      	bne.n	800c388 <HAL_SPI_TransmitReceive+0x66>
 800c382:	7efb      	ldrb	r3, [r7, #27]
 800c384:	2b04      	cmp	r3, #4
 800c386:	d003      	beq.n	800c390 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800c388:	2302      	movs	r3, #2
 800c38a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800c38e:	e1cd      	b.n	800c72c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d005      	beq.n	800c3a2 <HAL_SPI_TransmitReceive+0x80>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d002      	beq.n	800c3a2 <HAL_SPI_TransmitReceive+0x80>
 800c39c:	887b      	ldrh	r3, [r7, #2]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d103      	bne.n	800c3aa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800c3a8:	e1c0      	b.n	800c72c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	2b04      	cmp	r3, #4
 800c3b4:	d003      	beq.n	800c3be <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2205      	movs	r2, #5
 800c3ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	887a      	ldrh	r2, [r7, #2]
 800c3ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	887a      	ldrh	r2, [r7, #2]
 800c3d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	68ba      	ldr	r2, [r7, #8]
 800c3de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	887a      	ldrh	r2, [r7, #2]
 800c3e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	887a      	ldrh	r2, [r7, #2]
 800c3ea:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	68db      	ldr	r3, [r3, #12]
 800c3fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c400:	d802      	bhi.n	800c408 <HAL_SPI_TransmitReceive+0xe6>
 800c402:	8a3b      	ldrh	r3, [r7, #16]
 800c404:	2b01      	cmp	r3, #1
 800c406:	d908      	bls.n	800c41a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	685a      	ldr	r2, [r3, #4]
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c416:	605a      	str	r2, [r3, #4]
 800c418:	e007      	b.n	800c42a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	685a      	ldr	r2, [r3, #4]
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c428:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c434:	2b40      	cmp	r3, #64	; 0x40
 800c436:	d007      	beq.n	800c448 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	681a      	ldr	r2, [r3, #0]
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c446:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	68db      	ldr	r3, [r3, #12]
 800c44c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c450:	d97c      	bls.n	800c54c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d002      	beq.n	800c460 <HAL_SPI_TransmitReceive+0x13e>
 800c45a:	8a7b      	ldrh	r3, [r7, #18]
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d169      	bne.n	800c534 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c464:	881a      	ldrh	r2, [r3, #0]
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c470:	1c9a      	adds	r2, r3, #2
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	3b01      	subs	r3, #1
 800c47e:	b29a      	uxth	r2, r3
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c484:	e056      	b.n	800c534 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	f003 0302 	and.w	r3, r3, #2
 800c490:	2b02      	cmp	r3, #2
 800c492:	d11b      	bne.n	800c4cc <HAL_SPI_TransmitReceive+0x1aa>
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c498:	b29b      	uxth	r3, r3
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d016      	beq.n	800c4cc <HAL_SPI_TransmitReceive+0x1aa>
 800c49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d113      	bne.n	800c4cc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a8:	881a      	ldrh	r2, [r3, #0]
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b4:	1c9a      	adds	r2, r3, #2
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	b29a      	uxth	r2, r3
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	689b      	ldr	r3, [r3, #8]
 800c4d2:	f003 0301 	and.w	r3, r3, #1
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d11c      	bne.n	800c514 <HAL_SPI_TransmitReceive+0x1f2>
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d016      	beq.n	800c514 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	68da      	ldr	r2, [r3, #12]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4f0:	b292      	uxth	r2, r2
 800c4f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4f8:	1c9a      	adds	r2, r3, #2
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c504:	b29b      	uxth	r3, r3
 800c506:	3b01      	subs	r3, #1
 800c508:	b29a      	uxth	r2, r3
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c510:	2301      	movs	r3, #1
 800c512:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c514:	f7fb faa0 	bl	8007a58 <HAL_GetTick>
 800c518:	4602      	mov	r2, r0
 800c51a:	69fb      	ldr	r3, [r7, #28]
 800c51c:	1ad3      	subs	r3, r2, r3
 800c51e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c520:	429a      	cmp	r2, r3
 800c522:	d807      	bhi.n	800c534 <HAL_SPI_TransmitReceive+0x212>
 800c524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c52a:	d003      	beq.n	800c534 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800c52c:	2303      	movs	r3, #3
 800c52e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c532:	e0fb      	b.n	800c72c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c538:	b29b      	uxth	r3, r3
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d1a3      	bne.n	800c486 <HAL_SPI_TransmitReceive+0x164>
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c544:	b29b      	uxth	r3, r3
 800c546:	2b00      	cmp	r3, #0
 800c548:	d19d      	bne.n	800c486 <HAL_SPI_TransmitReceive+0x164>
 800c54a:	e0df      	b.n	800c70c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d003      	beq.n	800c55c <HAL_SPI_TransmitReceive+0x23a>
 800c554:	8a7b      	ldrh	r3, [r7, #18]
 800c556:	2b01      	cmp	r3, #1
 800c558:	f040 80cb 	bne.w	800c6f2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c560:	b29b      	uxth	r3, r3
 800c562:	2b01      	cmp	r3, #1
 800c564:	d912      	bls.n	800c58c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c56a:	881a      	ldrh	r2, [r3, #0]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c576:	1c9a      	adds	r2, r3, #2
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c580:	b29b      	uxth	r3, r3
 800c582:	3b02      	subs	r3, #2
 800c584:	b29a      	uxth	r2, r3
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c58a:	e0b2      	b.n	800c6f2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	330c      	adds	r3, #12
 800c596:	7812      	ldrb	r2, [r2, #0]
 800c598:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c59e:	1c5a      	adds	r2, r3, #1
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	3b01      	subs	r3, #1
 800c5ac:	b29a      	uxth	r2, r3
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c5b2:	e09e      	b.n	800c6f2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	f003 0302 	and.w	r3, r3, #2
 800c5be:	2b02      	cmp	r3, #2
 800c5c0:	d134      	bne.n	800c62c <HAL_SPI_TransmitReceive+0x30a>
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d02f      	beq.n	800c62c <HAL_SPI_TransmitReceive+0x30a>
 800c5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d12c      	bne.n	800c62c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d912      	bls.n	800c602 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5e0:	881a      	ldrh	r2, [r3, #0]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ec:	1c9a      	adds	r2, r3, #2
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	3b02      	subs	r3, #2
 800c5fa:	b29a      	uxth	r2, r3
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c600:	e012      	b.n	800c628 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	330c      	adds	r3, #12
 800c60c:	7812      	ldrb	r2, [r2, #0]
 800c60e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c614:	1c5a      	adds	r2, r3, #1
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c61e:	b29b      	uxth	r3, r3
 800c620:	3b01      	subs	r3, #1
 800c622:	b29a      	uxth	r2, r3
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c628:	2300      	movs	r3, #0
 800c62a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	689b      	ldr	r3, [r3, #8]
 800c632:	f003 0301 	and.w	r3, r3, #1
 800c636:	2b01      	cmp	r3, #1
 800c638:	d148      	bne.n	800c6cc <HAL_SPI_TransmitReceive+0x3aa>
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c640:	b29b      	uxth	r3, r3
 800c642:	2b00      	cmp	r3, #0
 800c644:	d042      	beq.n	800c6cc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c64c:	b29b      	uxth	r3, r3
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d923      	bls.n	800c69a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	68da      	ldr	r2, [r3, #12]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c65c:	b292      	uxth	r2, r2
 800c65e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c664:	1c9a      	adds	r2, r3, #2
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c670:	b29b      	uxth	r3, r3
 800c672:	3b02      	subs	r3, #2
 800c674:	b29a      	uxth	r2, r3
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c682:	b29b      	uxth	r3, r3
 800c684:	2b01      	cmp	r3, #1
 800c686:	d81f      	bhi.n	800c6c8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	685a      	ldr	r2, [r3, #4]
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c696:	605a      	str	r2, [r3, #4]
 800c698:	e016      	b.n	800c6c8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f103 020c 	add.w	r2, r3, #12
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6a6:	7812      	ldrb	r2, [r2, #0]
 800c6a8:	b2d2      	uxtb	r2, r2
 800c6aa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6b0:	1c5a      	adds	r2, r3, #1
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	3b01      	subs	r3, #1
 800c6c0:	b29a      	uxth	r2, r3
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c6cc:	f7fb f9c4 	bl	8007a58 <HAL_GetTick>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	69fb      	ldr	r3, [r7, #28]
 800c6d4:	1ad3      	subs	r3, r2, r3
 800c6d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d803      	bhi.n	800c6e4 <HAL_SPI_TransmitReceive+0x3c2>
 800c6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6e2:	d102      	bne.n	800c6ea <HAL_SPI_TransmitReceive+0x3c8>
 800c6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d103      	bne.n	800c6f2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800c6ea:	2303      	movs	r3, #3
 800c6ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c6f0:	e01c      	b.n	800c72c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6f6:	b29b      	uxth	r3, r3
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	f47f af5b 	bne.w	800c5b4 <HAL_SPI_TransmitReceive+0x292>
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c704:	b29b      	uxth	r3, r3
 800c706:	2b00      	cmp	r3, #0
 800c708:	f47f af54 	bne.w	800c5b4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c70c:	69fa      	ldr	r2, [r7, #28]
 800c70e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c710:	68f8      	ldr	r0, [r7, #12]
 800c712:	f000 fe89 	bl	800d428 <SPI_EndRxTxTransaction>
 800c716:	4603      	mov	r3, r0
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d006      	beq.n	800c72a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800c71c:	2301      	movs	r3, #1
 800c71e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2220      	movs	r2, #32
 800c726:	661a      	str	r2, [r3, #96]	; 0x60
 800c728:	e000      	b.n	800c72c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800c72a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	2201      	movs	r2, #1
 800c730:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2200      	movs	r2, #0
 800c738:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c73c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800c740:	4618      	mov	r0, r3
 800c742:	3728      	adds	r7, #40	; 0x28
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}

0800c748 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b086      	sub	sp, #24
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	60f8      	str	r0, [r7, #12]
 800c750:	60b9      	str	r1, [r7, #8]
 800c752:	4613      	mov	r3, r2
 800c754:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c756:	2300      	movs	r3, #0
 800c758:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c760:	2b01      	cmp	r3, #1
 800c762:	d101      	bne.n	800c768 <HAL_SPI_Transmit_DMA+0x20>
 800c764:	2302      	movs	r3, #2
 800c766:	e0d8      	b.n	800c91a <HAL_SPI_Transmit_DMA+0x1d2>
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c776:	b2db      	uxtb	r3, r3
 800c778:	2b01      	cmp	r3, #1
 800c77a:	d002      	beq.n	800c782 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800c77c:	2302      	movs	r3, #2
 800c77e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c780:	e0c6      	b.n	800c910 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d002      	beq.n	800c78e <HAL_SPI_Transmit_DMA+0x46>
 800c788:	88fb      	ldrh	r3, [r7, #6]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d102      	bne.n	800c794 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800c78e:	2301      	movs	r3, #1
 800c790:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c792:	e0bd      	b.n	800c910 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2203      	movs	r2, #3
 800c798:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	68ba      	ldr	r2, [r7, #8]
 800c7a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	88fa      	ldrh	r2, [r7, #6]
 800c7ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	88fa      	ldrh	r2, [r7, #6]
 800c7b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	689b      	ldr	r3, [r3, #8]
 800c7da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7de:	d10f      	bne.n	800c800 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	681a      	ldr	r2, [r3, #0]
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c7fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c804:	4a47      	ldr	r2, [pc, #284]	; (800c924 <HAL_SPI_Transmit_DMA+0x1dc>)
 800c806:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c80c:	4a46      	ldr	r2, [pc, #280]	; (800c928 <HAL_SPI_Transmit_DMA+0x1e0>)
 800c80e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c814:	4a45      	ldr	r2, [pc, #276]	; (800c92c <HAL_SPI_Transmit_DMA+0x1e4>)
 800c816:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c81c:	2200      	movs	r2, #0
 800c81e:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	685a      	ldr	r2, [r3, #4]
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c82e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	68db      	ldr	r3, [r3, #12]
 800c834:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c838:	d82d      	bhi.n	800c896 <HAL_SPI_Transmit_DMA+0x14e>
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c83e:	699b      	ldr	r3, [r3, #24]
 800c840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c844:	d127      	bne.n	800c896 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	f003 0301 	and.w	r3, r3, #1
 800c850:	2b00      	cmp	r3, #0
 800c852:	d10f      	bne.n	800c874 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	685a      	ldr	r2, [r3, #4]
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c862:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c868:	b29b      	uxth	r3, r3
 800c86a:	085b      	lsrs	r3, r3, #1
 800c86c:	b29a      	uxth	r2, r3
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c872:	e010      	b.n	800c896 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	685a      	ldr	r2, [r3, #4]
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c882:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c888:	b29b      	uxth	r3, r3
 800c88a:	085b      	lsrs	r3, r3, #1
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	3301      	adds	r3, #1
 800c890:	b29a      	uxth	r2, r3
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c89e:	4619      	mov	r1, r3
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	330c      	adds	r3, #12
 800c8a6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8ac:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c8ae:	f7fb fa9d 	bl	8007dec <HAL_DMA_Start_IT>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d00c      	beq.n	800c8d2 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8bc:	f043 0210 	orr.w	r2, r3, #16
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800c8d0:	e01e      	b.n	800c910 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8dc:	2b40      	cmp	r3, #64	; 0x40
 800c8de:	d007      	beq.n	800c8f0 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	681a      	ldr	r2, [r3, #0]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c8ee:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	685a      	ldr	r2, [r3, #4]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f042 0220 	orr.w	r2, r2, #32
 800c8fe:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	685a      	ldr	r2, [r3, #4]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f042 0202 	orr.w	r2, r2, #2
 800c90e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2200      	movs	r2, #0
 800c914:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c918:	7dfb      	ldrb	r3, [r7, #23]
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3718      	adds	r7, #24
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	0800d07f 	.word	0x0800d07f
 800c928:	0800cea1 	.word	0x0800cea1
 800c92c:	0800d0d3 	.word	0x0800d0d3

0800c930 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b086      	sub	sp, #24
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	607a      	str	r2, [r7, #4]
 800c93c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c93e:	2300      	movs	r3, #0
 800c940:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d101      	bne.n	800c950 <HAL_SPI_TransmitReceive_DMA+0x20>
 800c94c:	2302      	movs	r3, #2
 800c94e:	e16c      	b.n	800cc2a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2201      	movs	r2, #1
 800c954:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c95e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800c966:	7dbb      	ldrb	r3, [r7, #22]
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d00d      	beq.n	800c988 <HAL_SPI_TransmitReceive_DMA+0x58>
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c972:	d106      	bne.n	800c982 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d102      	bne.n	800c982 <HAL_SPI_TransmitReceive_DMA+0x52>
 800c97c:	7dbb      	ldrb	r3, [r7, #22]
 800c97e:	2b04      	cmp	r3, #4
 800c980:	d002      	beq.n	800c988 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800c982:	2302      	movs	r3, #2
 800c984:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c986:	e14b      	b.n	800cc20 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d005      	beq.n	800c99a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d002      	beq.n	800c99a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c994:	887b      	ldrh	r3, [r7, #2]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d102      	bne.n	800c9a0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800c99a:	2301      	movs	r3, #1
 800c99c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c99e:	e13f      	b.n	800cc20 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	2b04      	cmp	r3, #4
 800c9aa:	d003      	beq.n	800c9b4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2205      	movs	r2, #5
 800c9b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	68ba      	ldr	r2, [r7, #8]
 800c9be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	887a      	ldrh	r2, [r7, #2]
 800c9c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	887a      	ldrh	r2, [r7, #2]
 800c9ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	687a      	ldr	r2, [r7, #4]
 800c9d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	887a      	ldrh	r2, [r7, #2]
 800c9d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	887a      	ldrh	r2, [r7, #2]
 800c9de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	685a      	ldr	r2, [r3, #4]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800c9fc:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ca06:	d908      	bls.n	800ca1a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	685a      	ldr	r2, [r3, #4]
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ca16:	605a      	str	r2, [r3, #4]
 800ca18:	e06f      	b.n	800cafa <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	685a      	ldr	r2, [r3, #4]
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ca28:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca2e:	699b      	ldr	r3, [r3, #24]
 800ca30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca34:	d126      	bne.n	800ca84 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ca3a:	f003 0301 	and.w	r3, r3, #1
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d10f      	bne.n	800ca62 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	685a      	ldr	r2, [r3, #4]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ca50:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca56:	b29b      	uxth	r3, r3
 800ca58:	085b      	lsrs	r3, r3, #1
 800ca5a:	b29a      	uxth	r2, r3
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ca60:	e010      	b.n	800ca84 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	685a      	ldr	r2, [r3, #4]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ca70:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	085b      	lsrs	r3, r3, #1
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	b29a      	uxth	r2, r3
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca88:	699b      	ldr	r3, [r3, #24]
 800ca8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca8e:	d134      	bne.n	800cafa <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	685a      	ldr	r2, [r3, #4]
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ca9e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800caa6:	b29b      	uxth	r3, r3
 800caa8:	f003 0301 	and.w	r3, r3, #1
 800caac:	2b00      	cmp	r3, #0
 800caae:	d111      	bne.n	800cad4 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	685a      	ldr	r2, [r3, #4]
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cabe:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cac6:	b29b      	uxth	r3, r3
 800cac8:	085b      	lsrs	r3, r3, #1
 800caca:	b29a      	uxth	r2, r3
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800cad2:	e012      	b.n	800cafa <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	685a      	ldr	r2, [r3, #4]
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cae2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800caea:	b29b      	uxth	r3, r3
 800caec:	085b      	lsrs	r3, r3, #1
 800caee:	b29b      	uxth	r3, r3
 800caf0:	3301      	adds	r3, #1
 800caf2:	b29a      	uxth	r2, r3
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cb00:	b2db      	uxtb	r3, r3
 800cb02:	2b04      	cmp	r3, #4
 800cb04:	d108      	bne.n	800cb18 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb0a:	4a4a      	ldr	r2, [pc, #296]	; (800cc34 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800cb0c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb12:	4a49      	ldr	r2, [pc, #292]	; (800cc38 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800cb14:	62da      	str	r2, [r3, #44]	; 0x2c
 800cb16:	e007      	b.n	800cb28 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb1c:	4a47      	ldr	r2, [pc, #284]	; (800cc3c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800cb1e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb24:	4a46      	ldr	r2, [pc, #280]	; (800cc40 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800cb26:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb2c:	4a45      	ldr	r2, [pc, #276]	; (800cc44 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800cb2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb34:	2200      	movs	r2, #0
 800cb36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	330c      	adds	r3, #12
 800cb42:	4619      	mov	r1, r3
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb48:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cb50:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800cb52:	f7fb f94b 	bl	8007dec <HAL_DMA_Start_IT>
 800cb56:	4603      	mov	r3, r0
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d00c      	beq.n	800cb76 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb60:	f043 0210 	orr.w	r2, r3, #16
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2201      	movs	r2, #1
 800cb70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800cb74:	e054      	b.n	800cc20 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	685a      	ldr	r2, [r3, #4]
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f042 0201 	orr.w	r2, r2, #1
 800cb84:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb92:	2200      	movs	r2, #0
 800cb94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cba2:	2200      	movs	r2, #0
 800cba4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbae:	4619      	mov	r1, r3
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	330c      	adds	r3, #12
 800cbb6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cbbc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cbbe:	f7fb f915 	bl	8007dec <HAL_DMA_Start_IT>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d00c      	beq.n	800cbe2 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbcc:	f043 0210 	orr.w	r2, r3, #16
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2201      	movs	r2, #1
 800cbdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800cbe0:	e01e      	b.n	800cc20 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbec:	2b40      	cmp	r3, #64	; 0x40
 800cbee:	d007      	beq.n	800cc00 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cbfe:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	685a      	ldr	r2, [r3, #4]
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f042 0220 	orr.w	r2, r2, #32
 800cc0e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	685a      	ldr	r2, [r3, #4]
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f042 0202 	orr.w	r2, r2, #2
 800cc1e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2200      	movs	r2, #0
 800cc24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cc28:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3718      	adds	r7, #24
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	0800d09b 	.word	0x0800d09b
 800cc38:	0800cf47 	.word	0x0800cf47
 800cc3c:	0800d0b7 	.word	0x0800d0b7
 800cc40:	0800cfef 	.word	0x0800cfef
 800cc44:	0800d0d3 	.word	0x0800d0d3

0800cc48 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b088      	sub	sp, #32
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	689b      	ldr	r3, [r3, #8]
 800cc5e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800cc60:	69bb      	ldr	r3, [r7, #24]
 800cc62:	099b      	lsrs	r3, r3, #6
 800cc64:	f003 0301 	and.w	r3, r3, #1
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d10f      	bne.n	800cc8c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800cc6c:	69bb      	ldr	r3, [r7, #24]
 800cc6e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d00a      	beq.n	800cc8c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	099b      	lsrs	r3, r3, #6
 800cc7a:	f003 0301 	and.w	r3, r3, #1
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d004      	beq.n	800cc8c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	4798      	blx	r3
    return;
 800cc8a:	e0d7      	b.n	800ce3c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800cc8c:	69bb      	ldr	r3, [r7, #24]
 800cc8e:	085b      	lsrs	r3, r3, #1
 800cc90:	f003 0301 	and.w	r3, r3, #1
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d00a      	beq.n	800ccae <HAL_SPI_IRQHandler+0x66>
 800cc98:	69fb      	ldr	r3, [r7, #28]
 800cc9a:	09db      	lsrs	r3, r3, #7
 800cc9c:	f003 0301 	and.w	r3, r3, #1
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d004      	beq.n	800ccae <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	4798      	blx	r3
    return;
 800ccac:	e0c6      	b.n	800ce3c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	095b      	lsrs	r3, r3, #5
 800ccb2:	f003 0301 	and.w	r3, r3, #1
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d10c      	bne.n	800ccd4 <HAL_SPI_IRQHandler+0x8c>
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	099b      	lsrs	r3, r3, #6
 800ccbe:	f003 0301 	and.w	r3, r3, #1
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d106      	bne.n	800ccd4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ccc6:	69bb      	ldr	r3, [r7, #24]
 800ccc8:	0a1b      	lsrs	r3, r3, #8
 800ccca:	f003 0301 	and.w	r3, r3, #1
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	f000 80b4 	beq.w	800ce3c <HAL_SPI_IRQHandler+0x1f4>
 800ccd4:	69fb      	ldr	r3, [r7, #28]
 800ccd6:	095b      	lsrs	r3, r3, #5
 800ccd8:	f003 0301 	and.w	r3, r3, #1
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	f000 80ad 	beq.w	800ce3c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800cce2:	69bb      	ldr	r3, [r7, #24]
 800cce4:	099b      	lsrs	r3, r3, #6
 800cce6:	f003 0301 	and.w	r3, r3, #1
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d023      	beq.n	800cd36 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	2b03      	cmp	r3, #3
 800ccf8:	d011      	beq.n	800cd1e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccfe:	f043 0204 	orr.w	r2, r3, #4
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cd06:	2300      	movs	r3, #0
 800cd08:	617b      	str	r3, [r7, #20]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	617b      	str	r3, [r7, #20]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	689b      	ldr	r3, [r3, #8]
 800cd18:	617b      	str	r3, [r7, #20]
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	e00b      	b.n	800cd36 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cd1e:	2300      	movs	r3, #0
 800cd20:	613b      	str	r3, [r7, #16]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	68db      	ldr	r3, [r3, #12]
 800cd28:	613b      	str	r3, [r7, #16]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	689b      	ldr	r3, [r3, #8]
 800cd30:	613b      	str	r3, [r7, #16]
 800cd32:	693b      	ldr	r3, [r7, #16]
        return;
 800cd34:	e082      	b.n	800ce3c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800cd36:	69bb      	ldr	r3, [r7, #24]
 800cd38:	095b      	lsrs	r3, r3, #5
 800cd3a:	f003 0301 	and.w	r3, r3, #1
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d014      	beq.n	800cd6c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd46:	f043 0201 	orr.w	r2, r3, #1
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cd4e:	2300      	movs	r3, #0
 800cd50:	60fb      	str	r3, [r7, #12]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	689b      	ldr	r3, [r3, #8]
 800cd58:	60fb      	str	r3, [r7, #12]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	681a      	ldr	r2, [r3, #0]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd68:	601a      	str	r2, [r3, #0]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800cd6c:	69bb      	ldr	r3, [r7, #24]
 800cd6e:	0a1b      	lsrs	r3, r3, #8
 800cd70:	f003 0301 	and.w	r3, r3, #1
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d00c      	beq.n	800cd92 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd7c:	f043 0208 	orr.w	r2, r3, #8
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cd84:	2300      	movs	r3, #0
 800cd86:	60bb      	str	r3, [r7, #8]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	689b      	ldr	r3, [r3, #8]
 800cd8e:	60bb      	str	r3, [r7, #8]
 800cd90:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d04f      	beq.n	800ce3a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	685a      	ldr	r2, [r3, #4]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cda8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2201      	movs	r2, #1
 800cdae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800cdb2:	69fb      	ldr	r3, [r7, #28]
 800cdb4:	f003 0302 	and.w	r3, r3, #2
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d104      	bne.n	800cdc6 <HAL_SPI_IRQHandler+0x17e>
 800cdbc:	69fb      	ldr	r3, [r7, #28]
 800cdbe:	f003 0301 	and.w	r3, r3, #1
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d034      	beq.n	800ce30 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	685a      	ldr	r2, [r3, #4]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f022 0203 	bic.w	r2, r2, #3
 800cdd4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d011      	beq.n	800ce02 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cde2:	4a18      	ldr	r2, [pc, #96]	; (800ce44 <HAL_SPI_IRQHandler+0x1fc>)
 800cde4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7fb f89c 	bl	8007f28 <HAL_DMA_Abort_IT>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d005      	beq.n	800ce02 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d016      	beq.n	800ce38 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce0e:	4a0d      	ldr	r2, [pc, #52]	; (800ce44 <HAL_SPI_IRQHandler+0x1fc>)
 800ce10:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7fb f886 	bl	8007f28 <HAL_DMA_Abort_IT>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d00a      	beq.n	800ce38 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800ce2e:	e003      	b.n	800ce38 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f7f6 fe97 	bl	8003b64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ce36:	e000      	b.n	800ce3a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800ce38:	bf00      	nop
    return;
 800ce3a:	bf00      	nop
  }
}
 800ce3c:	3720      	adds	r7, #32
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	0800d113 	.word	0x0800d113

0800ce48 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b083      	sub	sp, #12
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800ce50:	bf00      	nop
 800ce52:	370c      	adds	r7, #12
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr

0800ce5c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b083      	sub	sp, #12
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800ce64:	bf00      	nop
 800ce66:	370c      	adds	r7, #12
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6e:	4770      	bx	lr

0800ce70 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b083      	sub	sp, #12
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800ce78:	bf00      	nop
 800ce7a:	370c      	adds	r7, #12
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr

0800ce84 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b083      	sub	sp, #12
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ce92:	b2db      	uxtb	r3, r3
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	370c      	adds	r7, #12
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr

0800cea0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b086      	sub	sp, #24
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ceae:	f7fa fdd3 	bl	8007a58 <HAL_GetTick>
 800ceb2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f003 0320 	and.w	r3, r3, #32
 800cebe:	2b20      	cmp	r3, #32
 800cec0:	d03b      	beq.n	800cf3a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	685a      	ldr	r2, [r3, #4]
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f022 0220 	bic.w	r2, r2, #32
 800ced0:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	685a      	ldr	r2, [r3, #4]
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f022 0202 	bic.w	r2, r2, #2
 800cee0:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cee2:	693a      	ldr	r2, [r7, #16]
 800cee4:	2164      	movs	r1, #100	; 0x64
 800cee6:	6978      	ldr	r0, [r7, #20]
 800cee8:	f000 fa9e 	bl	800d428 <SPI_EndRxTxTransaction>
 800ceec:	4603      	mov	r3, r0
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d005      	beq.n	800cefe <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cef6:	f043 0220 	orr.w	r2, r3, #32
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	689b      	ldr	r3, [r3, #8]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d10a      	bne.n	800cf1c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cf06:	2300      	movs	r3, #0
 800cf08:	60fb      	str	r3, [r7, #12]
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	68db      	ldr	r3, [r3, #12]
 800cf10:	60fb      	str	r3, [r7, #12]
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	689b      	ldr	r3, [r3, #8]
 800cf18:	60fb      	str	r3, [r7, #12]
 800cf1a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	2201      	movs	r2, #1
 800cf26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d003      	beq.n	800cf3a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cf32:	6978      	ldr	r0, [r7, #20]
 800cf34:	f7f6 fe16 	bl	8003b64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cf38:	e002      	b.n	800cf40 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800cf3a:	6978      	ldr	r0, [r7, #20]
 800cf3c:	f7f6 fdfb 	bl	8003b36 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cf40:	3718      	adds	r7, #24
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}

0800cf46 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b084      	sub	sp, #16
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf52:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cf54:	f7fa fd80 	bl	8007a58 <HAL_GetTick>
 800cf58:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f003 0320 	and.w	r3, r3, #32
 800cf64:	2b20      	cmp	r3, #32
 800cf66:	d03c      	beq.n	800cfe2 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	685a      	ldr	r2, [r3, #4]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f022 0220 	bic.w	r2, r2, #32
 800cf76:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	689b      	ldr	r3, [r3, #8]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d10d      	bne.n	800cf9c <SPI_DMAReceiveCplt+0x56>
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cf88:	d108      	bne.n	800cf9c <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	685a      	ldr	r2, [r3, #4]
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f022 0203 	bic.w	r2, r2, #3
 800cf98:	605a      	str	r2, [r3, #4]
 800cf9a:	e007      	b.n	800cfac <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	685a      	ldr	r2, [r3, #4]
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	f022 0201 	bic.w	r2, r2, #1
 800cfaa:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cfac:	68ba      	ldr	r2, [r7, #8]
 800cfae:	2164      	movs	r1, #100	; 0x64
 800cfb0:	68f8      	ldr	r0, [r7, #12]
 800cfb2:	f000 f9e1 	bl	800d378 <SPI_EndRxTransaction>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d002      	beq.n	800cfc2 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	2220      	movs	r2, #32
 800cfc0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2201      	movs	r2, #1
 800cfce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d003      	beq.n	800cfe2 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cfda:	68f8      	ldr	r0, [r7, #12]
 800cfdc:	f7f6 fdc2 	bl	8003b64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cfe0:	e002      	b.n	800cfe8 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800cfe2:	68f8      	ldr	r0, [r7, #12]
 800cfe4:	f7f6 fd9c 	bl	8003b20 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cfe8:	3710      	adds	r7, #16
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b084      	sub	sp, #16
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cffa:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cffc:	f7fa fd2c 	bl	8007a58 <HAL_GetTick>
 800d000:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f003 0320 	and.w	r3, r3, #32
 800d00c:	2b20      	cmp	r3, #32
 800d00e:	d030      	beq.n	800d072 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	685a      	ldr	r2, [r3, #4]
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f022 0220 	bic.w	r2, r2, #32
 800d01e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d020:	68ba      	ldr	r2, [r7, #8]
 800d022:	2164      	movs	r1, #100	; 0x64
 800d024:	68f8      	ldr	r0, [r7, #12]
 800d026:	f000 f9ff 	bl	800d428 <SPI_EndRxTxTransaction>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d005      	beq.n	800d03c <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d034:	f043 0220 	orr.w	r2, r3, #32
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	685a      	ldr	r2, [r3, #4]
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f022 0203 	bic.w	r2, r2, #3
 800d04a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2200      	movs	r2, #0
 800d050:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2200      	movs	r2, #0
 800d056:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2201      	movs	r2, #1
 800d05e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d066:	2b00      	cmp	r3, #0
 800d068:	d003      	beq.n	800d072 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d06a:	68f8      	ldr	r0, [r7, #12]
 800d06c:	f7f6 fd7a 	bl	8003b64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d070:	e002      	b.n	800d078 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800d072:	68f8      	ldr	r0, [r7, #12]
 800d074:	f7f6 fd6a 	bl	8003b4c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d078:	3710      	adds	r7, #16
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}

0800d07e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d07e:	b580      	push	{r7, lr}
 800d080:	b084      	sub	sp, #16
 800d082:	af00      	add	r7, sp, #0
 800d084:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d08a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800d08c:	68f8      	ldr	r0, [r7, #12]
 800d08e:	f7ff fedb 	bl	800ce48 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d092:	bf00      	nop
 800d094:	3710      	adds	r7, #16
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}

0800d09a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d09a:	b580      	push	{r7, lr}
 800d09c:	b084      	sub	sp, #16
 800d09e:	af00      	add	r7, sp, #0
 800d0a0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0a6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800d0a8:	68f8      	ldr	r0, [r7, #12]
 800d0aa:	f7ff fed7 	bl	800ce5c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d0ae:	bf00      	nop
 800d0b0:	3710      	adds	r7, #16
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}

0800d0b6 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d0b6:	b580      	push	{r7, lr}
 800d0b8:	b084      	sub	sp, #16
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0c2:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800d0c4:	68f8      	ldr	r0, [r7, #12]
 800d0c6:	f7ff fed3 	bl	800ce70 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d0ca:	bf00      	nop
 800d0cc:	3710      	adds	r7, #16
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}

0800d0d2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d0d2:	b580      	push	{r7, lr}
 800d0d4:	b084      	sub	sp, #16
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0de:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	685a      	ldr	r2, [r3, #4]
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f022 0203 	bic.w	r2, r2, #3
 800d0ee:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d0f4:	f043 0210 	orr.w	r2, r3, #16
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2201      	movs	r2, #1
 800d100:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d104:	68f8      	ldr	r0, [r7, #12]
 800d106:	f7f6 fd2d 	bl	8003b64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d10a:	bf00      	nop
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b084      	sub	sp, #16
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d11e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2200      	movs	r2, #0
 800d124:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	2200      	movs	r2, #0
 800d12c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d12e:	68f8      	ldr	r0, [r7, #12]
 800d130:	f7f6 fd18 	bl	8003b64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d134:	bf00      	nop
 800d136:	3710      	adds	r7, #16
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b088      	sub	sp, #32
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	603b      	str	r3, [r7, #0]
 800d148:	4613      	mov	r3, r2
 800d14a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d14c:	f7fa fc84 	bl	8007a58 <HAL_GetTick>
 800d150:	4602      	mov	r2, r0
 800d152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d154:	1a9b      	subs	r3, r3, r2
 800d156:	683a      	ldr	r2, [r7, #0]
 800d158:	4413      	add	r3, r2
 800d15a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d15c:	f7fa fc7c 	bl	8007a58 <HAL_GetTick>
 800d160:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d162:	4b39      	ldr	r3, [pc, #228]	; (800d248 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	015b      	lsls	r3, r3, #5
 800d168:	0d1b      	lsrs	r3, r3, #20
 800d16a:	69fa      	ldr	r2, [r7, #28]
 800d16c:	fb02 f303 	mul.w	r3, r2, r3
 800d170:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d172:	e054      	b.n	800d21e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d17a:	d050      	beq.n	800d21e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d17c:	f7fa fc6c 	bl	8007a58 <HAL_GetTick>
 800d180:	4602      	mov	r2, r0
 800d182:	69bb      	ldr	r3, [r7, #24]
 800d184:	1ad3      	subs	r3, r2, r3
 800d186:	69fa      	ldr	r2, [r7, #28]
 800d188:	429a      	cmp	r2, r3
 800d18a:	d902      	bls.n	800d192 <SPI_WaitFlagStateUntilTimeout+0x56>
 800d18c:	69fb      	ldr	r3, [r7, #28]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d13d      	bne.n	800d20e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	685a      	ldr	r2, [r3, #4]
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d1a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	685b      	ldr	r3, [r3, #4]
 800d1a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d1aa:	d111      	bne.n	800d1d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	689b      	ldr	r3, [r3, #8]
 800d1b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1b4:	d004      	beq.n	800d1c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	689b      	ldr	r3, [r3, #8]
 800d1ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1be:	d107      	bne.n	800d1d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	681a      	ldr	r2, [r3, #0]
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d1ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d1d8:	d10f      	bne.n	800d1fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	681a      	ldr	r2, [r3, #0]
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d1e8:	601a      	str	r2, [r3, #0]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	681a      	ldr	r2, [r3, #0]
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d1f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2200      	movs	r2, #0
 800d206:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d20a:	2303      	movs	r3, #3
 800d20c:	e017      	b.n	800d23e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d101      	bne.n	800d218 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d214:	2300      	movs	r3, #0
 800d216:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	3b01      	subs	r3, #1
 800d21c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	689a      	ldr	r2, [r3, #8]
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	4013      	ands	r3, r2
 800d228:	68ba      	ldr	r2, [r7, #8]
 800d22a:	429a      	cmp	r2, r3
 800d22c:	bf0c      	ite	eq
 800d22e:	2301      	moveq	r3, #1
 800d230:	2300      	movne	r3, #0
 800d232:	b2db      	uxtb	r3, r3
 800d234:	461a      	mov	r2, r3
 800d236:	79fb      	ldrb	r3, [r7, #7]
 800d238:	429a      	cmp	r2, r3
 800d23a:	d19b      	bne.n	800d174 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d23c:	2300      	movs	r3, #0
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3720      	adds	r7, #32
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop
 800d248:	20000140 	.word	0x20000140

0800d24c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b08a      	sub	sp, #40	; 0x28
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	607a      	str	r2, [r7, #4]
 800d258:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d25a:	2300      	movs	r3, #0
 800d25c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d25e:	f7fa fbfb 	bl	8007a58 <HAL_GetTick>
 800d262:	4602      	mov	r2, r0
 800d264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d266:	1a9b      	subs	r3, r3, r2
 800d268:	683a      	ldr	r2, [r7, #0]
 800d26a:	4413      	add	r3, r2
 800d26c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800d26e:	f7fa fbf3 	bl	8007a58 <HAL_GetTick>
 800d272:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	330c      	adds	r3, #12
 800d27a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d27c:	4b3d      	ldr	r3, [pc, #244]	; (800d374 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d27e:	681a      	ldr	r2, [r3, #0]
 800d280:	4613      	mov	r3, r2
 800d282:	009b      	lsls	r3, r3, #2
 800d284:	4413      	add	r3, r2
 800d286:	00da      	lsls	r2, r3, #3
 800d288:	1ad3      	subs	r3, r2, r3
 800d28a:	0d1b      	lsrs	r3, r3, #20
 800d28c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d28e:	fb02 f303 	mul.w	r3, r2, r3
 800d292:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d294:	e060      	b.n	800d358 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d29c:	d107      	bne.n	800d2ae <SPI_WaitFifoStateUntilTimeout+0x62>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d104      	bne.n	800d2ae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d2ac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2b4:	d050      	beq.n	800d358 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d2b6:	f7fa fbcf 	bl	8007a58 <HAL_GetTick>
 800d2ba:	4602      	mov	r2, r0
 800d2bc:	6a3b      	ldr	r3, [r7, #32]
 800d2be:	1ad3      	subs	r3, r2, r3
 800d2c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d902      	bls.n	800d2cc <SPI_WaitFifoStateUntilTimeout+0x80>
 800d2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d13d      	bne.n	800d348 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	685a      	ldr	r2, [r3, #4]
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d2da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d2e4:	d111      	bne.n	800d30a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	689b      	ldr	r3, [r3, #8]
 800d2ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d2ee:	d004      	beq.n	800d2fa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	689b      	ldr	r3, [r3, #8]
 800d2f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2f8:	d107      	bne.n	800d30a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	681a      	ldr	r2, [r3, #0]
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d308:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d30e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d312:	d10f      	bne.n	800d334 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	681a      	ldr	r2, [r3, #0]
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d322:	601a      	str	r2, [r3, #0]
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d332:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2201      	movs	r2, #1
 800d338:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2200      	movs	r2, #0
 800d340:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d344:	2303      	movs	r3, #3
 800d346:	e010      	b.n	800d36a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d101      	bne.n	800d352 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d34e:	2300      	movs	r3, #0
 800d350:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	3b01      	subs	r3, #1
 800d356:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	689a      	ldr	r2, [r3, #8]
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	4013      	ands	r3, r2
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	429a      	cmp	r2, r3
 800d366:	d196      	bne.n	800d296 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d368:	2300      	movs	r3, #0
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3728      	adds	r7, #40	; 0x28
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
 800d372:	bf00      	nop
 800d374:	20000140 	.word	0x20000140

0800d378 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b086      	sub	sp, #24
 800d37c:	af02      	add	r7, sp, #8
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d38c:	d111      	bne.n	800d3b2 <SPI_EndRxTransaction+0x3a>
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	689b      	ldr	r3, [r3, #8]
 800d392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d396:	d004      	beq.n	800d3a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	689b      	ldr	r3, [r3, #8]
 800d39c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d3a0:	d107      	bne.n	800d3b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d3b0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	9300      	str	r3, [sp, #0]
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	2180      	movs	r1, #128	; 0x80
 800d3bc:	68f8      	ldr	r0, [r7, #12]
 800d3be:	f7ff febd 	bl	800d13c <SPI_WaitFlagStateUntilTimeout>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d007      	beq.n	800d3d8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3cc:	f043 0220 	orr.w	r2, r3, #32
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d3d4:	2303      	movs	r3, #3
 800d3d6:	e023      	b.n	800d420 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d3e0:	d11d      	bne.n	800d41e <SPI_EndRxTransaction+0xa6>
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	689b      	ldr	r3, [r3, #8]
 800d3e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3ea:	d004      	beq.n	800d3f6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	689b      	ldr	r3, [r3, #8]
 800d3f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d3f4:	d113      	bne.n	800d41e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	9300      	str	r3, [sp, #0]
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d402:	68f8      	ldr	r0, [r7, #12]
 800d404:	f7ff ff22 	bl	800d24c <SPI_WaitFifoStateUntilTimeout>
 800d408:	4603      	mov	r3, r0
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d007      	beq.n	800d41e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d412:	f043 0220 	orr.w	r2, r3, #32
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800d41a:	2303      	movs	r3, #3
 800d41c:	e000      	b.n	800d420 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800d41e:	2300      	movs	r3, #0
}
 800d420:	4618      	mov	r0, r3
 800d422:	3710      	adds	r7, #16
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b086      	sub	sp, #24
 800d42c:	af02      	add	r7, sp, #8
 800d42e:	60f8      	str	r0, [r7, #12]
 800d430:	60b9      	str	r1, [r7, #8]
 800d432:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	9300      	str	r3, [sp, #0]
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	2200      	movs	r2, #0
 800d43c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d440:	68f8      	ldr	r0, [r7, #12]
 800d442:	f7ff ff03 	bl	800d24c <SPI_WaitFifoStateUntilTimeout>
 800d446:	4603      	mov	r3, r0
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d007      	beq.n	800d45c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d450:	f043 0220 	orr.w	r2, r3, #32
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d458:	2303      	movs	r3, #3
 800d45a:	e027      	b.n	800d4ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	9300      	str	r3, [sp, #0]
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	2200      	movs	r2, #0
 800d464:	2180      	movs	r1, #128	; 0x80
 800d466:	68f8      	ldr	r0, [r7, #12]
 800d468:	f7ff fe68 	bl	800d13c <SPI_WaitFlagStateUntilTimeout>
 800d46c:	4603      	mov	r3, r0
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d007      	beq.n	800d482 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d476:	f043 0220 	orr.w	r2, r3, #32
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d47e:	2303      	movs	r3, #3
 800d480:	e014      	b.n	800d4ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	9300      	str	r3, [sp, #0]
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	2200      	movs	r2, #0
 800d48a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d48e:	68f8      	ldr	r0, [r7, #12]
 800d490:	f7ff fedc 	bl	800d24c <SPI_WaitFifoStateUntilTimeout>
 800d494:	4603      	mov	r3, r0
 800d496:	2b00      	cmp	r3, #0
 800d498:	d007      	beq.n	800d4aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d49e:	f043 0220 	orr.w	r2, r3, #32
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d4a6:	2303      	movs	r3, #3
 800d4a8:	e000      	b.n	800d4ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d4aa:	2300      	movs	r3, #0
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3710      	adds	r7, #16
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d101      	bne.n	800d4c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	e049      	b.n	800d55a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d106      	bne.n	800d4e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f7f9 f98e 	bl	80067fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2202      	movs	r2, #2
 800d4e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	3304      	adds	r3, #4
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	4610      	mov	r0, r2
 800d4f4:	f000 fab6 	bl	800da64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2201      	movs	r2, #1
 800d504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2201      	movs	r2, #1
 800d50c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2201      	movs	r2, #1
 800d514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2201      	movs	r2, #1
 800d51c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2201      	movs	r2, #1
 800d524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2201      	movs	r2, #1
 800d52c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2201      	movs	r2, #1
 800d534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2201      	movs	r2, #1
 800d53c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2201      	movs	r2, #1
 800d544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2201      	movs	r2, #1
 800d54c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2201      	movs	r2, #1
 800d554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d558:	2300      	movs	r3, #0
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3708      	adds	r7, #8
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
	...

0800d564 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d564:	b480      	push	{r7}
 800d566:	b085      	sub	sp, #20
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d572:	b2db      	uxtb	r3, r3
 800d574:	2b01      	cmp	r3, #1
 800d576:	d001      	beq.n	800d57c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d578:	2301      	movs	r3, #1
 800d57a:	e04f      	b.n	800d61c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2202      	movs	r2, #2
 800d580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	68da      	ldr	r2, [r3, #12]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f042 0201 	orr.w	r2, r2, #1
 800d592:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4a23      	ldr	r2, [pc, #140]	; (800d628 <HAL_TIM_Base_Start_IT+0xc4>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d01d      	beq.n	800d5da <HAL_TIM_Base_Start_IT+0x76>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5a6:	d018      	beq.n	800d5da <HAL_TIM_Base_Start_IT+0x76>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	4a1f      	ldr	r2, [pc, #124]	; (800d62c <HAL_TIM_Base_Start_IT+0xc8>)
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	d013      	beq.n	800d5da <HAL_TIM_Base_Start_IT+0x76>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	4a1e      	ldr	r2, [pc, #120]	; (800d630 <HAL_TIM_Base_Start_IT+0xcc>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d00e      	beq.n	800d5da <HAL_TIM_Base_Start_IT+0x76>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4a1c      	ldr	r2, [pc, #112]	; (800d634 <HAL_TIM_Base_Start_IT+0xd0>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d009      	beq.n	800d5da <HAL_TIM_Base_Start_IT+0x76>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	4a1b      	ldr	r2, [pc, #108]	; (800d638 <HAL_TIM_Base_Start_IT+0xd4>)
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d004      	beq.n	800d5da <HAL_TIM_Base_Start_IT+0x76>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	4a19      	ldr	r2, [pc, #100]	; (800d63c <HAL_TIM_Base_Start_IT+0xd8>)
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d115      	bne.n	800d606 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	689a      	ldr	r2, [r3, #8]
 800d5e0:	4b17      	ldr	r3, [pc, #92]	; (800d640 <HAL_TIM_Base_Start_IT+0xdc>)
 800d5e2:	4013      	ands	r3, r2
 800d5e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2b06      	cmp	r3, #6
 800d5ea:	d015      	beq.n	800d618 <HAL_TIM_Base_Start_IT+0xb4>
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5f2:	d011      	beq.n	800d618 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f042 0201 	orr.w	r2, r2, #1
 800d602:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d604:	e008      	b.n	800d618 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	681a      	ldr	r2, [r3, #0]
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f042 0201 	orr.w	r2, r2, #1
 800d614:	601a      	str	r2, [r3, #0]
 800d616:	e000      	b.n	800d61a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d618:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d61a:	2300      	movs	r3, #0
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3714      	adds	r7, #20
 800d620:	46bd      	mov	sp, r7
 800d622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d626:	4770      	bx	lr
 800d628:	40012c00 	.word	0x40012c00
 800d62c:	40000400 	.word	0x40000400
 800d630:	40000800 	.word	0x40000800
 800d634:	40000c00 	.word	0x40000c00
 800d638:	40013400 	.word	0x40013400
 800d63c:	40014000 	.word	0x40014000
 800d640:	00010007 	.word	0x00010007

0800d644 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	691b      	ldr	r3, [r3, #16]
 800d652:	f003 0302 	and.w	r3, r3, #2
 800d656:	2b02      	cmp	r3, #2
 800d658:	d122      	bne.n	800d6a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	68db      	ldr	r3, [r3, #12]
 800d660:	f003 0302 	and.w	r3, r3, #2
 800d664:	2b02      	cmp	r3, #2
 800d666:	d11b      	bne.n	800d6a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f06f 0202 	mvn.w	r2, #2
 800d670:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2201      	movs	r2, #1
 800d676:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	699b      	ldr	r3, [r3, #24]
 800d67e:	f003 0303 	and.w	r3, r3, #3
 800d682:	2b00      	cmp	r3, #0
 800d684:	d003      	beq.n	800d68e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 f9ce 	bl	800da28 <HAL_TIM_IC_CaptureCallback>
 800d68c:	e005      	b.n	800d69a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f000 f9c0 	bl	800da14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f000 f9d1 	bl	800da3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2200      	movs	r2, #0
 800d69e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	691b      	ldr	r3, [r3, #16]
 800d6a6:	f003 0304 	and.w	r3, r3, #4
 800d6aa:	2b04      	cmp	r3, #4
 800d6ac:	d122      	bne.n	800d6f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	f003 0304 	and.w	r3, r3, #4
 800d6b8:	2b04      	cmp	r3, #4
 800d6ba:	d11b      	bne.n	800d6f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f06f 0204 	mvn.w	r2, #4
 800d6c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2202      	movs	r2, #2
 800d6ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	699b      	ldr	r3, [r3, #24]
 800d6d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d003      	beq.n	800d6e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f000 f9a4 	bl	800da28 <HAL_TIM_IC_CaptureCallback>
 800d6e0:	e005      	b.n	800d6ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 f996 	bl	800da14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f000 f9a7 	bl	800da3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	691b      	ldr	r3, [r3, #16]
 800d6fa:	f003 0308 	and.w	r3, r3, #8
 800d6fe:	2b08      	cmp	r3, #8
 800d700:	d122      	bne.n	800d748 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	68db      	ldr	r3, [r3, #12]
 800d708:	f003 0308 	and.w	r3, r3, #8
 800d70c:	2b08      	cmp	r3, #8
 800d70e:	d11b      	bne.n	800d748 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f06f 0208 	mvn.w	r2, #8
 800d718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2204      	movs	r2, #4
 800d71e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	69db      	ldr	r3, [r3, #28]
 800d726:	f003 0303 	and.w	r3, r3, #3
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d003      	beq.n	800d736 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 f97a 	bl	800da28 <HAL_TIM_IC_CaptureCallback>
 800d734:	e005      	b.n	800d742 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 f96c 	bl	800da14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f000 f97d 	bl	800da3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2200      	movs	r2, #0
 800d746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	691b      	ldr	r3, [r3, #16]
 800d74e:	f003 0310 	and.w	r3, r3, #16
 800d752:	2b10      	cmp	r3, #16
 800d754:	d122      	bne.n	800d79c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	f003 0310 	and.w	r3, r3, #16
 800d760:	2b10      	cmp	r3, #16
 800d762:	d11b      	bne.n	800d79c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f06f 0210 	mvn.w	r2, #16
 800d76c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2208      	movs	r2, #8
 800d772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	69db      	ldr	r3, [r3, #28]
 800d77a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d003      	beq.n	800d78a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f000 f950 	bl	800da28 <HAL_TIM_IC_CaptureCallback>
 800d788:	e005      	b.n	800d796 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 f942 	bl	800da14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f000 f953 	bl	800da3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2200      	movs	r2, #0
 800d79a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	691b      	ldr	r3, [r3, #16]
 800d7a2:	f003 0301 	and.w	r3, r3, #1
 800d7a6:	2b01      	cmp	r3, #1
 800d7a8:	d10e      	bne.n	800d7c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	68db      	ldr	r3, [r3, #12]
 800d7b0:	f003 0301 	and.w	r3, r3, #1
 800d7b4:	2b01      	cmp	r3, #1
 800d7b6:	d107      	bne.n	800d7c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f06f 0201 	mvn.w	r2, #1
 800d7c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f7f8 f82c 	bl	8005820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	691b      	ldr	r3, [r3, #16]
 800d7ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7d2:	2b80      	cmp	r3, #128	; 0x80
 800d7d4:	d10e      	bne.n	800d7f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	68db      	ldr	r3, [r3, #12]
 800d7dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7e0:	2b80      	cmp	r3, #128	; 0x80
 800d7e2:	d107      	bne.n	800d7f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d7ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f000 fafe 	bl	800ddf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	691b      	ldr	r3, [r3, #16]
 800d7fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d802:	d10e      	bne.n	800d822 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	68db      	ldr	r3, [r3, #12]
 800d80a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d80e:	2b80      	cmp	r3, #128	; 0x80
 800d810:	d107      	bne.n	800d822 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d81a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f000 faf1 	bl	800de04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	691b      	ldr	r3, [r3, #16]
 800d828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d82c:	2b40      	cmp	r3, #64	; 0x40
 800d82e:	d10e      	bne.n	800d84e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	68db      	ldr	r3, [r3, #12]
 800d836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d83a:	2b40      	cmp	r3, #64	; 0x40
 800d83c:	d107      	bne.n	800d84e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 f901 	bl	800da50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	691b      	ldr	r3, [r3, #16]
 800d854:	f003 0320 	and.w	r3, r3, #32
 800d858:	2b20      	cmp	r3, #32
 800d85a:	d10e      	bne.n	800d87a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	68db      	ldr	r3, [r3, #12]
 800d862:	f003 0320 	and.w	r3, r3, #32
 800d866:	2b20      	cmp	r3, #32
 800d868:	d107      	bne.n	800d87a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f06f 0220 	mvn.w	r2, #32
 800d872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 fab1 	bl	800dddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d87a:	bf00      	nop
 800d87c:	3708      	adds	r7, #8
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}

0800d882 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d882:	b580      	push	{r7, lr}
 800d884:	b084      	sub	sp, #16
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
 800d88a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d88c:	2300      	movs	r3, #0
 800d88e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d896:	2b01      	cmp	r3, #1
 800d898:	d101      	bne.n	800d89e <HAL_TIM_ConfigClockSource+0x1c>
 800d89a:	2302      	movs	r3, #2
 800d89c:	e0b6      	b.n	800da0c <HAL_TIM_ConfigClockSource+0x18a>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2202      	movs	r2, #2
 800d8aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	689b      	ldr	r3, [r3, #8]
 800d8b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d8bc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d8c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d8c8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	68ba      	ldr	r2, [r7, #8]
 800d8d0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d8da:	d03e      	beq.n	800d95a <HAL_TIM_ConfigClockSource+0xd8>
 800d8dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d8e0:	f200 8087 	bhi.w	800d9f2 <HAL_TIM_ConfigClockSource+0x170>
 800d8e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8e8:	f000 8086 	beq.w	800d9f8 <HAL_TIM_ConfigClockSource+0x176>
 800d8ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8f0:	d87f      	bhi.n	800d9f2 <HAL_TIM_ConfigClockSource+0x170>
 800d8f2:	2b70      	cmp	r3, #112	; 0x70
 800d8f4:	d01a      	beq.n	800d92c <HAL_TIM_ConfigClockSource+0xaa>
 800d8f6:	2b70      	cmp	r3, #112	; 0x70
 800d8f8:	d87b      	bhi.n	800d9f2 <HAL_TIM_ConfigClockSource+0x170>
 800d8fa:	2b60      	cmp	r3, #96	; 0x60
 800d8fc:	d050      	beq.n	800d9a0 <HAL_TIM_ConfigClockSource+0x11e>
 800d8fe:	2b60      	cmp	r3, #96	; 0x60
 800d900:	d877      	bhi.n	800d9f2 <HAL_TIM_ConfigClockSource+0x170>
 800d902:	2b50      	cmp	r3, #80	; 0x50
 800d904:	d03c      	beq.n	800d980 <HAL_TIM_ConfigClockSource+0xfe>
 800d906:	2b50      	cmp	r3, #80	; 0x50
 800d908:	d873      	bhi.n	800d9f2 <HAL_TIM_ConfigClockSource+0x170>
 800d90a:	2b40      	cmp	r3, #64	; 0x40
 800d90c:	d058      	beq.n	800d9c0 <HAL_TIM_ConfigClockSource+0x13e>
 800d90e:	2b40      	cmp	r3, #64	; 0x40
 800d910:	d86f      	bhi.n	800d9f2 <HAL_TIM_ConfigClockSource+0x170>
 800d912:	2b30      	cmp	r3, #48	; 0x30
 800d914:	d064      	beq.n	800d9e0 <HAL_TIM_ConfigClockSource+0x15e>
 800d916:	2b30      	cmp	r3, #48	; 0x30
 800d918:	d86b      	bhi.n	800d9f2 <HAL_TIM_ConfigClockSource+0x170>
 800d91a:	2b20      	cmp	r3, #32
 800d91c:	d060      	beq.n	800d9e0 <HAL_TIM_ConfigClockSource+0x15e>
 800d91e:	2b20      	cmp	r3, #32
 800d920:	d867      	bhi.n	800d9f2 <HAL_TIM_ConfigClockSource+0x170>
 800d922:	2b00      	cmp	r3, #0
 800d924:	d05c      	beq.n	800d9e0 <HAL_TIM_ConfigClockSource+0x15e>
 800d926:	2b10      	cmp	r3, #16
 800d928:	d05a      	beq.n	800d9e0 <HAL_TIM_ConfigClockSource+0x15e>
 800d92a:	e062      	b.n	800d9f2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6818      	ldr	r0, [r3, #0]
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	6899      	ldr	r1, [r3, #8]
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	685a      	ldr	r2, [r3, #4]
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	f000 f9a6 	bl	800dc8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	689b      	ldr	r3, [r3, #8]
 800d946:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d94e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	68ba      	ldr	r2, [r7, #8]
 800d956:	609a      	str	r2, [r3, #8]
      break;
 800d958:	e04f      	b.n	800d9fa <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6818      	ldr	r0, [r3, #0]
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	6899      	ldr	r1, [r3, #8]
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	685a      	ldr	r2, [r3, #4]
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	68db      	ldr	r3, [r3, #12]
 800d96a:	f000 f98f 	bl	800dc8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	689a      	ldr	r2, [r3, #8]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d97c:	609a      	str	r2, [r3, #8]
      break;
 800d97e:	e03c      	b.n	800d9fa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6818      	ldr	r0, [r3, #0]
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	6859      	ldr	r1, [r3, #4]
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	68db      	ldr	r3, [r3, #12]
 800d98c:	461a      	mov	r2, r3
 800d98e:	f000 f903 	bl	800db98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2150      	movs	r1, #80	; 0x50
 800d998:	4618      	mov	r0, r3
 800d99a:	f000 f95c 	bl	800dc56 <TIM_ITRx_SetConfig>
      break;
 800d99e:	e02c      	b.n	800d9fa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6818      	ldr	r0, [r3, #0]
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	6859      	ldr	r1, [r3, #4]
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	f000 f922 	bl	800dbf6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	2160      	movs	r1, #96	; 0x60
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f000 f94c 	bl	800dc56 <TIM_ITRx_SetConfig>
      break;
 800d9be:	e01c      	b.n	800d9fa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6818      	ldr	r0, [r3, #0]
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	6859      	ldr	r1, [r3, #4]
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	f000 f8e3 	bl	800db98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	2140      	movs	r1, #64	; 0x40
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f000 f93c 	bl	800dc56 <TIM_ITRx_SetConfig>
      break;
 800d9de:	e00c      	b.n	800d9fa <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681a      	ldr	r2, [r3, #0]
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	4610      	mov	r0, r2
 800d9ec:	f000 f933 	bl	800dc56 <TIM_ITRx_SetConfig>
      break;
 800d9f0:	e003      	b.n	800d9fa <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	73fb      	strb	r3, [r7, #15]
      break;
 800d9f6:	e000      	b.n	800d9fa <HAL_TIM_ConfigClockSource+0x178>
      break;
 800d9f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800da0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3710      	adds	r7, #16
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800da14:	b480      	push	{r7}
 800da16:	b083      	sub	sp, #12
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800da1c:	bf00      	nop
 800da1e:	370c      	adds	r7, #12
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr

0800da28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800da28:	b480      	push	{r7}
 800da2a:	b083      	sub	sp, #12
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800da30:	bf00      	nop
 800da32:	370c      	adds	r7, #12
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr

0800da3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b083      	sub	sp, #12
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800da44:	bf00      	nop
 800da46:	370c      	adds	r7, #12
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr

0800da50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800da50:	b480      	push	{r7}
 800da52:	b083      	sub	sp, #12
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800da58:	bf00      	nop
 800da5a:	370c      	adds	r7, #12
 800da5c:	46bd      	mov	sp, r7
 800da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da62:	4770      	bx	lr

0800da64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800da64:	b480      	push	{r7}
 800da66:	b085      	sub	sp, #20
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	4a40      	ldr	r2, [pc, #256]	; (800db78 <TIM_Base_SetConfig+0x114>)
 800da78:	4293      	cmp	r3, r2
 800da7a:	d013      	beq.n	800daa4 <TIM_Base_SetConfig+0x40>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da82:	d00f      	beq.n	800daa4 <TIM_Base_SetConfig+0x40>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	4a3d      	ldr	r2, [pc, #244]	; (800db7c <TIM_Base_SetConfig+0x118>)
 800da88:	4293      	cmp	r3, r2
 800da8a:	d00b      	beq.n	800daa4 <TIM_Base_SetConfig+0x40>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	4a3c      	ldr	r2, [pc, #240]	; (800db80 <TIM_Base_SetConfig+0x11c>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d007      	beq.n	800daa4 <TIM_Base_SetConfig+0x40>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	4a3b      	ldr	r2, [pc, #236]	; (800db84 <TIM_Base_SetConfig+0x120>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	d003      	beq.n	800daa4 <TIM_Base_SetConfig+0x40>
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	4a3a      	ldr	r2, [pc, #232]	; (800db88 <TIM_Base_SetConfig+0x124>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d108      	bne.n	800dab6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800daaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	68fa      	ldr	r2, [r7, #12]
 800dab2:	4313      	orrs	r3, r2
 800dab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	4a2f      	ldr	r2, [pc, #188]	; (800db78 <TIM_Base_SetConfig+0x114>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d01f      	beq.n	800dafe <TIM_Base_SetConfig+0x9a>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dac4:	d01b      	beq.n	800dafe <TIM_Base_SetConfig+0x9a>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	4a2c      	ldr	r2, [pc, #176]	; (800db7c <TIM_Base_SetConfig+0x118>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d017      	beq.n	800dafe <TIM_Base_SetConfig+0x9a>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	4a2b      	ldr	r2, [pc, #172]	; (800db80 <TIM_Base_SetConfig+0x11c>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d013      	beq.n	800dafe <TIM_Base_SetConfig+0x9a>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	4a2a      	ldr	r2, [pc, #168]	; (800db84 <TIM_Base_SetConfig+0x120>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d00f      	beq.n	800dafe <TIM_Base_SetConfig+0x9a>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	4a29      	ldr	r2, [pc, #164]	; (800db88 <TIM_Base_SetConfig+0x124>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d00b      	beq.n	800dafe <TIM_Base_SetConfig+0x9a>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	4a28      	ldr	r2, [pc, #160]	; (800db8c <TIM_Base_SetConfig+0x128>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d007      	beq.n	800dafe <TIM_Base_SetConfig+0x9a>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	4a27      	ldr	r2, [pc, #156]	; (800db90 <TIM_Base_SetConfig+0x12c>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d003      	beq.n	800dafe <TIM_Base_SetConfig+0x9a>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	4a26      	ldr	r2, [pc, #152]	; (800db94 <TIM_Base_SetConfig+0x130>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d108      	bne.n	800db10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	68db      	ldr	r3, [r3, #12]
 800db0a:	68fa      	ldr	r2, [r7, #12]
 800db0c:	4313      	orrs	r3, r2
 800db0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	695b      	ldr	r3, [r3, #20]
 800db1a:	4313      	orrs	r3, r2
 800db1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	68fa      	ldr	r2, [r7, #12]
 800db22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	689a      	ldr	r2, [r3, #8]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	681a      	ldr	r2, [r3, #0]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	4a10      	ldr	r2, [pc, #64]	; (800db78 <TIM_Base_SetConfig+0x114>)
 800db38:	4293      	cmp	r3, r2
 800db3a:	d00f      	beq.n	800db5c <TIM_Base_SetConfig+0xf8>
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	4a12      	ldr	r2, [pc, #72]	; (800db88 <TIM_Base_SetConfig+0x124>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d00b      	beq.n	800db5c <TIM_Base_SetConfig+0xf8>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	4a11      	ldr	r2, [pc, #68]	; (800db8c <TIM_Base_SetConfig+0x128>)
 800db48:	4293      	cmp	r3, r2
 800db4a:	d007      	beq.n	800db5c <TIM_Base_SetConfig+0xf8>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	4a10      	ldr	r2, [pc, #64]	; (800db90 <TIM_Base_SetConfig+0x12c>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d003      	beq.n	800db5c <TIM_Base_SetConfig+0xf8>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	4a0f      	ldr	r2, [pc, #60]	; (800db94 <TIM_Base_SetConfig+0x130>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d103      	bne.n	800db64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	691a      	ldr	r2, [r3, #16]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2201      	movs	r2, #1
 800db68:	615a      	str	r2, [r3, #20]
}
 800db6a:	bf00      	nop
 800db6c:	3714      	adds	r7, #20
 800db6e:	46bd      	mov	sp, r7
 800db70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db74:	4770      	bx	lr
 800db76:	bf00      	nop
 800db78:	40012c00 	.word	0x40012c00
 800db7c:	40000400 	.word	0x40000400
 800db80:	40000800 	.word	0x40000800
 800db84:	40000c00 	.word	0x40000c00
 800db88:	40013400 	.word	0x40013400
 800db8c:	40014000 	.word	0x40014000
 800db90:	40014400 	.word	0x40014400
 800db94:	40014800 	.word	0x40014800

0800db98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800db98:	b480      	push	{r7}
 800db9a:	b087      	sub	sp, #28
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	60f8      	str	r0, [r7, #12]
 800dba0:	60b9      	str	r1, [r7, #8]
 800dba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	6a1b      	ldr	r3, [r3, #32]
 800dba8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	6a1b      	ldr	r3, [r3, #32]
 800dbae:	f023 0201 	bic.w	r2, r3, #1
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	699b      	ldr	r3, [r3, #24]
 800dbba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dbc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	011b      	lsls	r3, r3, #4
 800dbc8:	693a      	ldr	r2, [r7, #16]
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	f023 030a 	bic.w	r3, r3, #10
 800dbd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dbd6:	697a      	ldr	r2, [r7, #20]
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	4313      	orrs	r3, r2
 800dbdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	693a      	ldr	r2, [r7, #16]
 800dbe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	697a      	ldr	r2, [r7, #20]
 800dbe8:	621a      	str	r2, [r3, #32]
}
 800dbea:	bf00      	nop
 800dbec:	371c      	adds	r7, #28
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf4:	4770      	bx	lr

0800dbf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dbf6:	b480      	push	{r7}
 800dbf8:	b087      	sub	sp, #28
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	60f8      	str	r0, [r7, #12]
 800dbfe:	60b9      	str	r1, [r7, #8]
 800dc00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	6a1b      	ldr	r3, [r3, #32]
 800dc06:	f023 0210 	bic.w	r2, r3, #16
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	699b      	ldr	r3, [r3, #24]
 800dc12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	6a1b      	ldr	r3, [r3, #32]
 800dc18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dc20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	031b      	lsls	r3, r3, #12
 800dc26:	697a      	ldr	r2, [r7, #20]
 800dc28:	4313      	orrs	r3, r2
 800dc2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dc2c:	693b      	ldr	r3, [r7, #16]
 800dc2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dc32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	011b      	lsls	r3, r3, #4
 800dc38:	693a      	ldr	r2, [r7, #16]
 800dc3a:	4313      	orrs	r3, r2
 800dc3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	697a      	ldr	r2, [r7, #20]
 800dc42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	693a      	ldr	r2, [r7, #16]
 800dc48:	621a      	str	r2, [r3, #32]
}
 800dc4a:	bf00      	nop
 800dc4c:	371c      	adds	r7, #28
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr

0800dc56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dc56:	b480      	push	{r7}
 800dc58:	b085      	sub	sp, #20
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	6078      	str	r0, [r7, #4]
 800dc5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	689b      	ldr	r3, [r3, #8]
 800dc64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dc6e:	683a      	ldr	r2, [r7, #0]
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	4313      	orrs	r3, r2
 800dc74:	f043 0307 	orr.w	r3, r3, #7
 800dc78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	68fa      	ldr	r2, [r7, #12]
 800dc7e:	609a      	str	r2, [r3, #8]
}
 800dc80:	bf00      	nop
 800dc82:	3714      	adds	r7, #20
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr

0800dc8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b087      	sub	sp, #28
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	60f8      	str	r0, [r7, #12]
 800dc94:	60b9      	str	r1, [r7, #8]
 800dc96:	607a      	str	r2, [r7, #4]
 800dc98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	689b      	ldr	r3, [r3, #8]
 800dc9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dca6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	021a      	lsls	r2, r3, #8
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	431a      	orrs	r2, r3
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	4313      	orrs	r3, r2
 800dcb4:	697a      	ldr	r2, [r7, #20]
 800dcb6:	4313      	orrs	r3, r2
 800dcb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	697a      	ldr	r2, [r7, #20]
 800dcbe:	609a      	str	r2, [r3, #8]
}
 800dcc0:	bf00      	nop
 800dcc2:	371c      	adds	r7, #28
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr

0800dccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b085      	sub	sp, #20
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d101      	bne.n	800dce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dce0:	2302      	movs	r3, #2
 800dce2:	e068      	b.n	800ddb6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2201      	movs	r2, #1
 800dce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2202      	movs	r2, #2
 800dcf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	689b      	ldr	r3, [r3, #8]
 800dd02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4a2e      	ldr	r2, [pc, #184]	; (800ddc4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d004      	beq.n	800dd18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	4a2d      	ldr	r2, [pc, #180]	; (800ddc8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d108      	bne.n	800dd2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dd1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	68fa      	ldr	r2, [r7, #12]
 800dd26:	4313      	orrs	r3, r2
 800dd28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	68fa      	ldr	r2, [r7, #12]
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	68fa      	ldr	r2, [r7, #12]
 800dd42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4a1e      	ldr	r2, [pc, #120]	; (800ddc4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d01d      	beq.n	800dd8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd56:	d018      	beq.n	800dd8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	4a1b      	ldr	r2, [pc, #108]	; (800ddcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	d013      	beq.n	800dd8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	4a1a      	ldr	r2, [pc, #104]	; (800ddd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d00e      	beq.n	800dd8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	4a18      	ldr	r2, [pc, #96]	; (800ddd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d009      	beq.n	800dd8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	4a13      	ldr	r2, [pc, #76]	; (800ddc8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	d004      	beq.n	800dd8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4a14      	ldr	r2, [pc, #80]	; (800ddd8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d10c      	bne.n	800dda4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	689b      	ldr	r3, [r3, #8]
 800dd96:	68ba      	ldr	r2, [r7, #8]
 800dd98:	4313      	orrs	r3, r2
 800dd9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	68ba      	ldr	r2, [r7, #8]
 800dda2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2201      	movs	r2, #1
 800dda8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2200      	movs	r2, #0
 800ddb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ddb4:	2300      	movs	r3, #0
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3714      	adds	r7, #20
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc0:	4770      	bx	lr
 800ddc2:	bf00      	nop
 800ddc4:	40012c00 	.word	0x40012c00
 800ddc8:	40013400 	.word	0x40013400
 800ddcc:	40000400 	.word	0x40000400
 800ddd0:	40000800 	.word	0x40000800
 800ddd4:	40000c00 	.word	0x40000c00
 800ddd8:	40014000 	.word	0x40014000

0800dddc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dddc:	b480      	push	{r7}
 800ddde:	b083      	sub	sp, #12
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dde4:	bf00      	nop
 800dde6:	370c      	adds	r7, #12
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr

0800ddf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b083      	sub	sp, #12
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ddf8:	bf00      	nop
 800ddfa:	370c      	adds	r7, #12
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr

0800de04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800de04:	b480      	push	{r7}
 800de06:	b083      	sub	sp, #12
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800de0c:	bf00      	nop
 800de0e:	370c      	adds	r7, #12
 800de10:	46bd      	mov	sp, r7
 800de12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de16:	4770      	bx	lr

0800de18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b082      	sub	sp, #8
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d101      	bne.n	800de2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800de26:	2301      	movs	r3, #1
 800de28:	e040      	b.n	800deac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d106      	bne.n	800de40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2200      	movs	r2, #0
 800de36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f7f8 fd20 	bl	8006880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2224      	movs	r2, #36	; 0x24
 800de44:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	681a      	ldr	r2, [r3, #0]
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f022 0201 	bic.w	r2, r2, #1
 800de54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f000 fc9e 	bl	800e798 <UART_SetConfig>
 800de5c:	4603      	mov	r3, r0
 800de5e:	2b01      	cmp	r3, #1
 800de60:	d101      	bne.n	800de66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800de62:	2301      	movs	r3, #1
 800de64:	e022      	b.n	800deac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d002      	beq.n	800de74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f000 ff4a 	bl	800ed08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	685a      	ldr	r2, [r3, #4]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800de82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	689a      	ldr	r2, [r3, #8]
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800de92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	681a      	ldr	r2, [r3, #0]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	f042 0201 	orr.w	r2, r2, #1
 800dea2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 ffd1 	bl	800ee4c <UART_CheckIdleState>
 800deaa:	4603      	mov	r3, r0
}
 800deac:	4618      	mov	r0, r3
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b08a      	sub	sp, #40	; 0x28
 800deb8:	af02      	add	r7, sp, #8
 800deba:	60f8      	str	r0, [r7, #12]
 800debc:	60b9      	str	r1, [r7, #8]
 800debe:	603b      	str	r3, [r7, #0]
 800dec0:	4613      	mov	r3, r2
 800dec2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dec8:	2b20      	cmp	r3, #32
 800deca:	f040 8082 	bne.w	800dfd2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d002      	beq.n	800deda <HAL_UART_Transmit+0x26>
 800ded4:	88fb      	ldrh	r3, [r7, #6]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d101      	bne.n	800dede <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800deda:	2301      	movs	r3, #1
 800dedc:	e07a      	b.n	800dfd4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	d101      	bne.n	800deec <HAL_UART_Transmit+0x38>
 800dee8:	2302      	movs	r3, #2
 800deea:	e073      	b.n	800dfd4 <HAL_UART_Transmit+0x120>
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2201      	movs	r2, #1
 800def0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2200      	movs	r2, #0
 800def8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2221      	movs	r2, #33	; 0x21
 800df00:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800df02:	f7f9 fda9 	bl	8007a58 <HAL_GetTick>
 800df06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	88fa      	ldrh	r2, [r7, #6]
 800df0c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	88fa      	ldrh	r2, [r7, #6]
 800df14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	689b      	ldr	r3, [r3, #8]
 800df1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df20:	d108      	bne.n	800df34 <HAL_UART_Transmit+0x80>
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	691b      	ldr	r3, [r3, #16]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d104      	bne.n	800df34 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800df2a:	2300      	movs	r3, #0
 800df2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	61bb      	str	r3, [r7, #24]
 800df32:	e003      	b.n	800df3c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800df38:	2300      	movs	r3, #0
 800df3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	2200      	movs	r2, #0
 800df40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800df44:	e02d      	b.n	800dfa2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	9300      	str	r3, [sp, #0]
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	2200      	movs	r2, #0
 800df4e:	2180      	movs	r1, #128	; 0x80
 800df50:	68f8      	ldr	r0, [r7, #12]
 800df52:	f000 ffc4 	bl	800eede <UART_WaitOnFlagUntilTimeout>
 800df56:	4603      	mov	r3, r0
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d001      	beq.n	800df60 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800df5c:	2303      	movs	r3, #3
 800df5e:	e039      	b.n	800dfd4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800df60:	69fb      	ldr	r3, [r7, #28]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d10b      	bne.n	800df7e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800df66:	69bb      	ldr	r3, [r7, #24]
 800df68:	881a      	ldrh	r2, [r3, #0]
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800df72:	b292      	uxth	r2, r2
 800df74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800df76:	69bb      	ldr	r3, [r7, #24]
 800df78:	3302      	adds	r3, #2
 800df7a:	61bb      	str	r3, [r7, #24]
 800df7c:	e008      	b.n	800df90 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800df7e:	69fb      	ldr	r3, [r7, #28]
 800df80:	781a      	ldrb	r2, [r3, #0]
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	b292      	uxth	r2, r2
 800df88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800df8a:	69fb      	ldr	r3, [r7, #28]
 800df8c:	3301      	adds	r3, #1
 800df8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800df96:	b29b      	uxth	r3, r3
 800df98:	3b01      	subs	r3, #1
 800df9a:	b29a      	uxth	r2, r3
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800dfa8:	b29b      	uxth	r3, r3
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d1cb      	bne.n	800df46 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	9300      	str	r3, [sp, #0]
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	2140      	movs	r1, #64	; 0x40
 800dfb8:	68f8      	ldr	r0, [r7, #12]
 800dfba:	f000 ff90 	bl	800eede <UART_WaitOnFlagUntilTimeout>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d001      	beq.n	800dfc8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800dfc4:	2303      	movs	r3, #3
 800dfc6:	e005      	b.n	800dfd4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	2220      	movs	r2, #32
 800dfcc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	e000      	b.n	800dfd4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800dfd2:	2302      	movs	r3, #2
  }
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3720      	adds	r7, #32
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b08a      	sub	sp, #40	; 0x28
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	4613      	mov	r3, r2
 800dfe8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfee:	2b20      	cmp	r3, #32
 800dff0:	d142      	bne.n	800e078 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d002      	beq.n	800dffe <HAL_UART_Receive_IT+0x22>
 800dff8:	88fb      	ldrh	r3, [r7, #6]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d101      	bne.n	800e002 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800dffe:	2301      	movs	r3, #1
 800e000:	e03b      	b.n	800e07a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e008:	2b01      	cmp	r3, #1
 800e00a:	d101      	bne.n	800e010 <HAL_UART_Receive_IT+0x34>
 800e00c:	2302      	movs	r3, #2
 800e00e:	e034      	b.n	800e07a <HAL_UART_Receive_IT+0x9e>
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2201      	movs	r2, #1
 800e014:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2200      	movs	r2, #0
 800e01c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	4a18      	ldr	r2, [pc, #96]	; (800e084 <HAL_UART_Receive_IT+0xa8>)
 800e024:	4293      	cmp	r3, r2
 800e026:	d01f      	beq.n	800e068 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e032:	2b00      	cmp	r3, #0
 800e034:	d018      	beq.n	800e068 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	e853 3f00 	ldrex	r3, [r3]
 800e042:	613b      	str	r3, [r7, #16]
   return(result);
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e04a:	627b      	str	r3, [r7, #36]	; 0x24
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	461a      	mov	r2, r3
 800e052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e054:	623b      	str	r3, [r7, #32]
 800e056:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e058:	69f9      	ldr	r1, [r7, #28]
 800e05a:	6a3a      	ldr	r2, [r7, #32]
 800e05c:	e841 2300 	strex	r3, r2, [r1]
 800e060:	61bb      	str	r3, [r7, #24]
   return(result);
 800e062:	69bb      	ldr	r3, [r7, #24]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d1e6      	bne.n	800e036 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e068:	88fb      	ldrh	r3, [r7, #6]
 800e06a:	461a      	mov	r2, r3
 800e06c:	68b9      	ldr	r1, [r7, #8]
 800e06e:	68f8      	ldr	r0, [r7, #12]
 800e070:	f000 fffa 	bl	800f068 <UART_Start_Receive_IT>
 800e074:	4603      	mov	r3, r0
 800e076:	e000      	b.n	800e07a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800e078:	2302      	movs	r3, #2
  }
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3728      	adds	r7, #40	; 0x28
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
 800e082:	bf00      	nop
 800e084:	40008000 	.word	0x40008000

0800e088 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b08a      	sub	sp, #40	; 0x28
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	4613      	mov	r3, r2
 800e094:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e09a:	2b20      	cmp	r3, #32
 800e09c:	d178      	bne.n	800e190 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d002      	beq.n	800e0aa <HAL_UART_Transmit_DMA+0x22>
 800e0a4:	88fb      	ldrh	r3, [r7, #6]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d101      	bne.n	800e0ae <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	e071      	b.n	800e192 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d101      	bne.n	800e0bc <HAL_UART_Transmit_DMA+0x34>
 800e0b8:	2302      	movs	r3, #2
 800e0ba:	e06a      	b.n	800e192 <HAL_UART_Transmit_DMA+0x10a>
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	2201      	movs	r2, #1
 800e0c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	68ba      	ldr	r2, [r7, #8]
 800e0c8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	88fa      	ldrh	r2, [r7, #6]
 800e0ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	88fa      	ldrh	r2, [r7, #6]
 800e0d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	2221      	movs	r2, #33	; 0x21
 800e0e6:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d02b      	beq.n	800e148 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0f4:	4a29      	ldr	r2, [pc, #164]	; (800e19c <HAL_UART_Transmit_DMA+0x114>)
 800e0f6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0fc:	4a28      	ldr	r2, [pc, #160]	; (800e1a0 <HAL_UART_Transmit_DMA+0x118>)
 800e0fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e104:	4a27      	ldr	r2, [pc, #156]	; (800e1a4 <HAL_UART_Transmit_DMA+0x11c>)
 800e106:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e10c:	2200      	movs	r2, #0
 800e10e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e118:	4619      	mov	r1, r3
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	3328      	adds	r3, #40	; 0x28
 800e120:	461a      	mov	r2, r3
 800e122:	88fb      	ldrh	r3, [r7, #6]
 800e124:	f7f9 fe62 	bl	8007dec <HAL_DMA_Start_IT>
 800e128:	4603      	mov	r3, r0
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d00c      	beq.n	800e148 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2210      	movs	r2, #16
 800e132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	2200      	movs	r2, #0
 800e13a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2220      	movs	r2, #32
 800e142:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800e144:	2301      	movs	r3, #1
 800e146:	e024      	b.n	800e192 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	2240      	movs	r2, #64	; 0x40
 800e14e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	2200      	movs	r2, #0
 800e154:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	3308      	adds	r3, #8
 800e15e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	e853 3f00 	ldrex	r3, [r3]
 800e166:	613b      	str	r3, [r7, #16]
   return(result);
 800e168:	693b      	ldr	r3, [r7, #16]
 800e16a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e16e:	627b      	str	r3, [r7, #36]	; 0x24
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	3308      	adds	r3, #8
 800e176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e178:	623a      	str	r2, [r7, #32]
 800e17a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e17c:	69f9      	ldr	r1, [r7, #28]
 800e17e:	6a3a      	ldr	r2, [r7, #32]
 800e180:	e841 2300 	strex	r3, r2, [r1]
 800e184:	61bb      	str	r3, [r7, #24]
   return(result);
 800e186:	69bb      	ldr	r3, [r7, #24]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d1e5      	bne.n	800e158 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800e18c:	2300      	movs	r3, #0
 800e18e:	e000      	b.n	800e192 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800e190:	2302      	movs	r3, #2
  }
}
 800e192:	4618      	mov	r0, r3
 800e194:	3728      	adds	r7, #40	; 0x28
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	bf00      	nop
 800e19c:	0800f30f 	.word	0x0800f30f
 800e1a0:	0800f3a9 	.word	0x0800f3a9
 800e1a4:	0800f3c5 	.word	0x0800f3c5

0800e1a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b0ba      	sub	sp, #232	; 0xe8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	69db      	ldr	r3, [r3, #28]
 800e1b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	689b      	ldr	r3, [r3, #8]
 800e1ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e1ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e1d2:	f640 030f 	movw	r3, #2063	; 0x80f
 800e1d6:	4013      	ands	r3, r2
 800e1d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e1dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d115      	bne.n	800e210 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e1e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1e8:	f003 0320 	and.w	r3, r3, #32
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d00f      	beq.n	800e210 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e1f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1f4:	f003 0320 	and.w	r3, r3, #32
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d009      	beq.n	800e210 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e200:	2b00      	cmp	r3, #0
 800e202:	f000 82a6 	beq.w	800e752 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	4798      	blx	r3
      }
      return;
 800e20e:	e2a0      	b.n	800e752 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800e210:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e214:	2b00      	cmp	r3, #0
 800e216:	f000 8117 	beq.w	800e448 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e21a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e21e:	f003 0301 	and.w	r3, r3, #1
 800e222:	2b00      	cmp	r3, #0
 800e224:	d106      	bne.n	800e234 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e226:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e22a:	4b85      	ldr	r3, [pc, #532]	; (800e440 <HAL_UART_IRQHandler+0x298>)
 800e22c:	4013      	ands	r3, r2
 800e22e:	2b00      	cmp	r3, #0
 800e230:	f000 810a 	beq.w	800e448 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e238:	f003 0301 	and.w	r3, r3, #1
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d011      	beq.n	800e264 <HAL_UART_IRQHandler+0xbc>
 800e240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d00b      	beq.n	800e264 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	2201      	movs	r2, #1
 800e252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e25a:	f043 0201 	orr.w	r2, r3, #1
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e268:	f003 0302 	and.w	r3, r3, #2
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d011      	beq.n	800e294 <HAL_UART_IRQHandler+0xec>
 800e270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e274:	f003 0301 	and.w	r3, r3, #1
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d00b      	beq.n	800e294 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	2202      	movs	r2, #2
 800e282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e28a:	f043 0204 	orr.w	r2, r3, #4
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e298:	f003 0304 	and.w	r3, r3, #4
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d011      	beq.n	800e2c4 <HAL_UART_IRQHandler+0x11c>
 800e2a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2a4:	f003 0301 	and.w	r3, r3, #1
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d00b      	beq.n	800e2c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	2204      	movs	r2, #4
 800e2b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2ba:	f043 0202 	orr.w	r2, r3, #2
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e2c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2c8:	f003 0308 	and.w	r3, r3, #8
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d017      	beq.n	800e300 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e2d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2d4:	f003 0320 	and.w	r3, r3, #32
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d105      	bne.n	800e2e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e2dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d00b      	beq.n	800e300 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	2208      	movs	r2, #8
 800e2ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2f6:	f043 0208 	orr.w	r2, r3, #8
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d012      	beq.n	800e332 <HAL_UART_IRQHandler+0x18a>
 800e30c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e310:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e314:	2b00      	cmp	r3, #0
 800e316:	d00c      	beq.n	800e332 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e320:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e328:	f043 0220 	orr.w	r2, r3, #32
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e338:	2b00      	cmp	r3, #0
 800e33a:	f000 820c 	beq.w	800e756 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e33e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e342:	f003 0320 	and.w	r3, r3, #32
 800e346:	2b00      	cmp	r3, #0
 800e348:	d00d      	beq.n	800e366 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e34a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e34e:	f003 0320 	and.w	r3, r3, #32
 800e352:	2b00      	cmp	r3, #0
 800e354:	d007      	beq.n	800e366 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d003      	beq.n	800e366 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e36c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	689b      	ldr	r3, [r3, #8]
 800e376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e37a:	2b40      	cmp	r3, #64	; 0x40
 800e37c:	d005      	beq.n	800e38a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e37e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e382:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e386:	2b00      	cmp	r3, #0
 800e388:	d04f      	beq.n	800e42a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 ff5c 	bl	800f248 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	689b      	ldr	r3, [r3, #8]
 800e396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e39a:	2b40      	cmp	r3, #64	; 0x40
 800e39c:	d141      	bne.n	800e422 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	3308      	adds	r3, #8
 800e3a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e3ac:	e853 3f00 	ldrex	r3, [r3]
 800e3b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e3b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e3b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	3308      	adds	r3, #8
 800e3c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e3ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e3ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e3d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e3da:	e841 2300 	strex	r3, r2, [r1]
 800e3de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e3e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d1d9      	bne.n	800e39e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d013      	beq.n	800e41a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3f6:	4a13      	ldr	r2, [pc, #76]	; (800e444 <HAL_UART_IRQHandler+0x29c>)
 800e3f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7f9 fd92 	bl	8007f28 <HAL_DMA_Abort_IT>
 800e404:	4603      	mov	r3, r0
 800e406:	2b00      	cmp	r3, #0
 800e408:	d017      	beq.n	800e43a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e40e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e410:	687a      	ldr	r2, [r7, #4]
 800e412:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800e414:	4610      	mov	r0, r2
 800e416:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e418:	e00f      	b.n	800e43a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f7f4 ffc0 	bl	80033a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e420:	e00b      	b.n	800e43a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f7f4 ffbc 	bl	80033a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e428:	e007      	b.n	800e43a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f7f4 ffb8 	bl	80033a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2200      	movs	r2, #0
 800e434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800e438:	e18d      	b.n	800e756 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e43a:	bf00      	nop
    return;
 800e43c:	e18b      	b.n	800e756 <HAL_UART_IRQHandler+0x5ae>
 800e43e:	bf00      	nop
 800e440:	04000120 	.word	0x04000120
 800e444:	0800f441 	.word	0x0800f441

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	f040 8146 	bne.w	800e6de <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e456:	f003 0310 	and.w	r3, r3, #16
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	f000 813f 	beq.w	800e6de <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e464:	f003 0310 	and.w	r3, r3, #16
 800e468:	2b00      	cmp	r3, #0
 800e46a:	f000 8138 	beq.w	800e6de <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	2210      	movs	r2, #16
 800e474:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	689b      	ldr	r3, [r3, #8]
 800e47c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e480:	2b40      	cmp	r3, #64	; 0x40
 800e482:	f040 80b4 	bne.w	800e5ee <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	685b      	ldr	r3, [r3, #4]
 800e48e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e492:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e496:	2b00      	cmp	r3, #0
 800e498:	f000 815f 	beq.w	800e75a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e4a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	f080 8157 	bcs.w	800e75a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e4b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	f003 0320 	and.w	r3, r3, #32
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	f040 8085 	bne.w	800e5d2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e4d4:	e853 3f00 	ldrex	r3, [r3]
 800e4d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e4dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e4e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e4e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e4f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e4f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e4fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e502:	e841 2300 	strex	r3, r2, [r1]
 800e506:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e50a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d1da      	bne.n	800e4c8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	3308      	adds	r3, #8
 800e518:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e51a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e51c:	e853 3f00 	ldrex	r3, [r3]
 800e520:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e524:	f023 0301 	bic.w	r3, r3, #1
 800e528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	3308      	adds	r3, #8
 800e532:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e536:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e53a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e53c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e53e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e542:	e841 2300 	strex	r3, r2, [r1]
 800e546:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d1e1      	bne.n	800e512 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	3308      	adds	r3, #8
 800e554:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e558:	e853 3f00 	ldrex	r3, [r3]
 800e55c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e55e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e564:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	3308      	adds	r3, #8
 800e56e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e572:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e574:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e576:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e578:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e57a:	e841 2300 	strex	r3, r2, [r1]
 800e57e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e582:	2b00      	cmp	r3, #0
 800e584:	d1e3      	bne.n	800e54e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2220      	movs	r2, #32
 800e58a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2200      	movs	r2, #0
 800e590:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e59a:	e853 3f00 	ldrex	r3, [r3]
 800e59e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e5a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5a2:	f023 0310 	bic.w	r3, r3, #16
 800e5a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	461a      	mov	r2, r3
 800e5b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e5b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800e5b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e5ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e5bc:	e841 2300 	strex	r3, r2, [r1]
 800e5c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e5c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d1e4      	bne.n	800e592 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f7f9 fc6d 	bl	8007eac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	1ad3      	subs	r3, r2, r3
 800e5e2:	b29b      	uxth	r3, r3
 800e5e4:	4619      	mov	r1, r3
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f000 f8ca 	bl	800e780 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e5ec:	e0b5      	b.n	800e75a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	1ad3      	subs	r3, r2, r3
 800e5fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e608:	b29b      	uxth	r3, r3
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	f000 80a7 	beq.w	800e75e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800e610:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e614:	2b00      	cmp	r3, #0
 800e616:	f000 80a2 	beq.w	800e75e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e622:	e853 3f00 	ldrex	r3, [r3]
 800e626:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e62a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e62e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	461a      	mov	r2, r3
 800e638:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e63c:	647b      	str	r3, [r7, #68]	; 0x44
 800e63e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e640:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e642:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e644:	e841 2300 	strex	r3, r2, [r1]
 800e648:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d1e4      	bne.n	800e61a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	3308      	adds	r3, #8
 800e656:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65a:	e853 3f00 	ldrex	r3, [r3]
 800e65e:	623b      	str	r3, [r7, #32]
   return(result);
 800e660:	6a3b      	ldr	r3, [r7, #32]
 800e662:	f023 0301 	bic.w	r3, r3, #1
 800e666:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	3308      	adds	r3, #8
 800e670:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e674:	633a      	str	r2, [r7, #48]	; 0x30
 800e676:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e678:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e67a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e67c:	e841 2300 	strex	r3, r2, [r1]
 800e680:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e684:	2b00      	cmp	r3, #0
 800e686:	d1e3      	bne.n	800e650 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2220      	movs	r2, #32
 800e68c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2200      	movs	r2, #0
 800e692:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2200      	movs	r2, #0
 800e698:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	e853 3f00 	ldrex	r3, [r3]
 800e6a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f023 0310 	bic.w	r3, r3, #16
 800e6ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e6bc:	61fb      	str	r3, [r7, #28]
 800e6be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6c0:	69b9      	ldr	r1, [r7, #24]
 800e6c2:	69fa      	ldr	r2, [r7, #28]
 800e6c4:	e841 2300 	strex	r3, r2, [r1]
 800e6c8:	617b      	str	r3, [r7, #20]
   return(result);
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d1e4      	bne.n	800e69a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e6d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f000 f852 	bl	800e780 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e6dc:	e03f      	b.n	800e75e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e6de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d00e      	beq.n	800e708 <HAL_UART_IRQHandler+0x560>
 800e6ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d008      	beq.n	800e708 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e6fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f001 f83d 	bl	800f780 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e706:	e02d      	b.n	800e764 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e70c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e710:	2b00      	cmp	r3, #0
 800e712:	d00e      	beq.n	800e732 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d008      	beq.n	800e732 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e724:	2b00      	cmp	r3, #0
 800e726:	d01c      	beq.n	800e762 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	4798      	blx	r3
    }
    return;
 800e730:	e017      	b.n	800e762 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d012      	beq.n	800e764 <HAL_UART_IRQHandler+0x5bc>
 800e73e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e746:	2b00      	cmp	r3, #0
 800e748:	d00c      	beq.n	800e764 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f000 fe8e 	bl	800f46c <UART_EndTransmit_IT>
    return;
 800e750:	e008      	b.n	800e764 <HAL_UART_IRQHandler+0x5bc>
      return;
 800e752:	bf00      	nop
 800e754:	e006      	b.n	800e764 <HAL_UART_IRQHandler+0x5bc>
    return;
 800e756:	bf00      	nop
 800e758:	e004      	b.n	800e764 <HAL_UART_IRQHandler+0x5bc>
      return;
 800e75a:	bf00      	nop
 800e75c:	e002      	b.n	800e764 <HAL_UART_IRQHandler+0x5bc>
      return;
 800e75e:	bf00      	nop
 800e760:	e000      	b.n	800e764 <HAL_UART_IRQHandler+0x5bc>
    return;
 800e762:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800e764:	37e8      	adds	r7, #232	; 0xe8
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
 800e76a:	bf00      	nop

0800e76c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e76c:	b480      	push	{r7}
 800e76e:	b083      	sub	sp, #12
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e774:	bf00      	nop
 800e776:	370c      	adds	r7, #12
 800e778:	46bd      	mov	sp, r7
 800e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77e:	4770      	bx	lr

0800e780 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e780:	b480      	push	{r7}
 800e782:	b083      	sub	sp, #12
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	460b      	mov	r3, r1
 800e78a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e78c:	bf00      	nop
 800e78e:	370c      	adds	r7, #12
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr

0800e798 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e79c:	b08a      	sub	sp, #40	; 0x28
 800e79e:	af00      	add	r7, sp, #0
 800e7a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	689a      	ldr	r2, [r3, #8]
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	691b      	ldr	r3, [r3, #16]
 800e7b0:	431a      	orrs	r2, r3
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	695b      	ldr	r3, [r3, #20]
 800e7b6:	431a      	orrs	r2, r3
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	69db      	ldr	r3, [r3, #28]
 800e7bc:	4313      	orrs	r3, r2
 800e7be:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	681a      	ldr	r2, [r3, #0]
 800e7c6:	4ba4      	ldr	r3, [pc, #656]	; (800ea58 <UART_SetConfig+0x2c0>)
 800e7c8:	4013      	ands	r3, r2
 800e7ca:	68fa      	ldr	r2, [r7, #12]
 800e7cc:	6812      	ldr	r2, [r2, #0]
 800e7ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e7d0:	430b      	orrs	r3, r1
 800e7d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	685b      	ldr	r3, [r3, #4]
 800e7da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	68da      	ldr	r2, [r3, #12]
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	430a      	orrs	r2, r1
 800e7e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	699b      	ldr	r3, [r3, #24]
 800e7ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4a99      	ldr	r2, [pc, #612]	; (800ea5c <UART_SetConfig+0x2c4>)
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d004      	beq.n	800e804 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	6a1b      	ldr	r3, [r3, #32]
 800e7fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e800:	4313      	orrs	r3, r2
 800e802:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	689b      	ldr	r3, [r3, #8]
 800e80a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e814:	430a      	orrs	r2, r1
 800e816:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	4a90      	ldr	r2, [pc, #576]	; (800ea60 <UART_SetConfig+0x2c8>)
 800e81e:	4293      	cmp	r3, r2
 800e820:	d126      	bne.n	800e870 <UART_SetConfig+0xd8>
 800e822:	4b90      	ldr	r3, [pc, #576]	; (800ea64 <UART_SetConfig+0x2cc>)
 800e824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e828:	f003 0303 	and.w	r3, r3, #3
 800e82c:	2b03      	cmp	r3, #3
 800e82e:	d81b      	bhi.n	800e868 <UART_SetConfig+0xd0>
 800e830:	a201      	add	r2, pc, #4	; (adr r2, 800e838 <UART_SetConfig+0xa0>)
 800e832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e836:	bf00      	nop
 800e838:	0800e849 	.word	0x0800e849
 800e83c:	0800e859 	.word	0x0800e859
 800e840:	0800e851 	.word	0x0800e851
 800e844:	0800e861 	.word	0x0800e861
 800e848:	2301      	movs	r3, #1
 800e84a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e84e:	e116      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e850:	2302      	movs	r3, #2
 800e852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e856:	e112      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e858:	2304      	movs	r3, #4
 800e85a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e85e:	e10e      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e860:	2308      	movs	r3, #8
 800e862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e866:	e10a      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e868:	2310      	movs	r3, #16
 800e86a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e86e:	e106      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	4a7c      	ldr	r2, [pc, #496]	; (800ea68 <UART_SetConfig+0x2d0>)
 800e876:	4293      	cmp	r3, r2
 800e878:	d138      	bne.n	800e8ec <UART_SetConfig+0x154>
 800e87a:	4b7a      	ldr	r3, [pc, #488]	; (800ea64 <UART_SetConfig+0x2cc>)
 800e87c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e880:	f003 030c 	and.w	r3, r3, #12
 800e884:	2b0c      	cmp	r3, #12
 800e886:	d82d      	bhi.n	800e8e4 <UART_SetConfig+0x14c>
 800e888:	a201      	add	r2, pc, #4	; (adr r2, 800e890 <UART_SetConfig+0xf8>)
 800e88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e88e:	bf00      	nop
 800e890:	0800e8c5 	.word	0x0800e8c5
 800e894:	0800e8e5 	.word	0x0800e8e5
 800e898:	0800e8e5 	.word	0x0800e8e5
 800e89c:	0800e8e5 	.word	0x0800e8e5
 800e8a0:	0800e8d5 	.word	0x0800e8d5
 800e8a4:	0800e8e5 	.word	0x0800e8e5
 800e8a8:	0800e8e5 	.word	0x0800e8e5
 800e8ac:	0800e8e5 	.word	0x0800e8e5
 800e8b0:	0800e8cd 	.word	0x0800e8cd
 800e8b4:	0800e8e5 	.word	0x0800e8e5
 800e8b8:	0800e8e5 	.word	0x0800e8e5
 800e8bc:	0800e8e5 	.word	0x0800e8e5
 800e8c0:	0800e8dd 	.word	0x0800e8dd
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8ca:	e0d8      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e8cc:	2302      	movs	r3, #2
 800e8ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8d2:	e0d4      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e8d4:	2304      	movs	r3, #4
 800e8d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8da:	e0d0      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e8dc:	2308      	movs	r3, #8
 800e8de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8e2:	e0cc      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e8e4:	2310      	movs	r3, #16
 800e8e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8ea:	e0c8      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4a5e      	ldr	r2, [pc, #376]	; (800ea6c <UART_SetConfig+0x2d4>)
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d125      	bne.n	800e942 <UART_SetConfig+0x1aa>
 800e8f6:	4b5b      	ldr	r3, [pc, #364]	; (800ea64 <UART_SetConfig+0x2cc>)
 800e8f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e900:	2b30      	cmp	r3, #48	; 0x30
 800e902:	d016      	beq.n	800e932 <UART_SetConfig+0x19a>
 800e904:	2b30      	cmp	r3, #48	; 0x30
 800e906:	d818      	bhi.n	800e93a <UART_SetConfig+0x1a2>
 800e908:	2b20      	cmp	r3, #32
 800e90a:	d00a      	beq.n	800e922 <UART_SetConfig+0x18a>
 800e90c:	2b20      	cmp	r3, #32
 800e90e:	d814      	bhi.n	800e93a <UART_SetConfig+0x1a2>
 800e910:	2b00      	cmp	r3, #0
 800e912:	d002      	beq.n	800e91a <UART_SetConfig+0x182>
 800e914:	2b10      	cmp	r3, #16
 800e916:	d008      	beq.n	800e92a <UART_SetConfig+0x192>
 800e918:	e00f      	b.n	800e93a <UART_SetConfig+0x1a2>
 800e91a:	2300      	movs	r3, #0
 800e91c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e920:	e0ad      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e922:	2302      	movs	r3, #2
 800e924:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e928:	e0a9      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e92a:	2304      	movs	r3, #4
 800e92c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e930:	e0a5      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e932:	2308      	movs	r3, #8
 800e934:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e938:	e0a1      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e93a:	2310      	movs	r3, #16
 800e93c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e940:	e09d      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	4a4a      	ldr	r2, [pc, #296]	; (800ea70 <UART_SetConfig+0x2d8>)
 800e948:	4293      	cmp	r3, r2
 800e94a:	d125      	bne.n	800e998 <UART_SetConfig+0x200>
 800e94c:	4b45      	ldr	r3, [pc, #276]	; (800ea64 <UART_SetConfig+0x2cc>)
 800e94e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e952:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e956:	2bc0      	cmp	r3, #192	; 0xc0
 800e958:	d016      	beq.n	800e988 <UART_SetConfig+0x1f0>
 800e95a:	2bc0      	cmp	r3, #192	; 0xc0
 800e95c:	d818      	bhi.n	800e990 <UART_SetConfig+0x1f8>
 800e95e:	2b80      	cmp	r3, #128	; 0x80
 800e960:	d00a      	beq.n	800e978 <UART_SetConfig+0x1e0>
 800e962:	2b80      	cmp	r3, #128	; 0x80
 800e964:	d814      	bhi.n	800e990 <UART_SetConfig+0x1f8>
 800e966:	2b00      	cmp	r3, #0
 800e968:	d002      	beq.n	800e970 <UART_SetConfig+0x1d8>
 800e96a:	2b40      	cmp	r3, #64	; 0x40
 800e96c:	d008      	beq.n	800e980 <UART_SetConfig+0x1e8>
 800e96e:	e00f      	b.n	800e990 <UART_SetConfig+0x1f8>
 800e970:	2300      	movs	r3, #0
 800e972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e976:	e082      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e978:	2302      	movs	r3, #2
 800e97a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e97e:	e07e      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e980:	2304      	movs	r3, #4
 800e982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e986:	e07a      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e988:	2308      	movs	r3, #8
 800e98a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e98e:	e076      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e990:	2310      	movs	r3, #16
 800e992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e996:	e072      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	4a35      	ldr	r2, [pc, #212]	; (800ea74 <UART_SetConfig+0x2dc>)
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	d12a      	bne.n	800e9f8 <UART_SetConfig+0x260>
 800e9a2:	4b30      	ldr	r3, [pc, #192]	; (800ea64 <UART_SetConfig+0x2cc>)
 800e9a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e9ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e9b0:	d01a      	beq.n	800e9e8 <UART_SetConfig+0x250>
 800e9b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e9b6:	d81b      	bhi.n	800e9f0 <UART_SetConfig+0x258>
 800e9b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9bc:	d00c      	beq.n	800e9d8 <UART_SetConfig+0x240>
 800e9be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9c2:	d815      	bhi.n	800e9f0 <UART_SetConfig+0x258>
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d003      	beq.n	800e9d0 <UART_SetConfig+0x238>
 800e9c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9cc:	d008      	beq.n	800e9e0 <UART_SetConfig+0x248>
 800e9ce:	e00f      	b.n	800e9f0 <UART_SetConfig+0x258>
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9d6:	e052      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e9d8:	2302      	movs	r3, #2
 800e9da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9de:	e04e      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e9e0:	2304      	movs	r3, #4
 800e9e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9e6:	e04a      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e9e8:	2308      	movs	r3, #8
 800e9ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9ee:	e046      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e9f0:	2310      	movs	r3, #16
 800e9f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9f6:	e042      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	4a17      	ldr	r2, [pc, #92]	; (800ea5c <UART_SetConfig+0x2c4>)
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	d13a      	bne.n	800ea78 <UART_SetConfig+0x2e0>
 800ea02:	4b18      	ldr	r3, [pc, #96]	; (800ea64 <UART_SetConfig+0x2cc>)
 800ea04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ea0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ea10:	d01a      	beq.n	800ea48 <UART_SetConfig+0x2b0>
 800ea12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ea16:	d81b      	bhi.n	800ea50 <UART_SetConfig+0x2b8>
 800ea18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea1c:	d00c      	beq.n	800ea38 <UART_SetConfig+0x2a0>
 800ea1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea22:	d815      	bhi.n	800ea50 <UART_SetConfig+0x2b8>
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d003      	beq.n	800ea30 <UART_SetConfig+0x298>
 800ea28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea2c:	d008      	beq.n	800ea40 <UART_SetConfig+0x2a8>
 800ea2e:	e00f      	b.n	800ea50 <UART_SetConfig+0x2b8>
 800ea30:	2300      	movs	r3, #0
 800ea32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea36:	e022      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800ea38:	2302      	movs	r3, #2
 800ea3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea3e:	e01e      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800ea40:	2304      	movs	r3, #4
 800ea42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea46:	e01a      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800ea48:	2308      	movs	r3, #8
 800ea4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea4e:	e016      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800ea50:	2310      	movs	r3, #16
 800ea52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea56:	e012      	b.n	800ea7e <UART_SetConfig+0x2e6>
 800ea58:	efff69f3 	.word	0xefff69f3
 800ea5c:	40008000 	.word	0x40008000
 800ea60:	40013800 	.word	0x40013800
 800ea64:	40021000 	.word	0x40021000
 800ea68:	40004400 	.word	0x40004400
 800ea6c:	40004800 	.word	0x40004800
 800ea70:	40004c00 	.word	0x40004c00
 800ea74:	40005000 	.word	0x40005000
 800ea78:	2310      	movs	r3, #16
 800ea7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	4a9f      	ldr	r2, [pc, #636]	; (800ed00 <UART_SetConfig+0x568>)
 800ea84:	4293      	cmp	r3, r2
 800ea86:	d17a      	bne.n	800eb7e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ea88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ea8c:	2b08      	cmp	r3, #8
 800ea8e:	d824      	bhi.n	800eada <UART_SetConfig+0x342>
 800ea90:	a201      	add	r2, pc, #4	; (adr r2, 800ea98 <UART_SetConfig+0x300>)
 800ea92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea96:	bf00      	nop
 800ea98:	0800eabd 	.word	0x0800eabd
 800ea9c:	0800eadb 	.word	0x0800eadb
 800eaa0:	0800eac5 	.word	0x0800eac5
 800eaa4:	0800eadb 	.word	0x0800eadb
 800eaa8:	0800eacb 	.word	0x0800eacb
 800eaac:	0800eadb 	.word	0x0800eadb
 800eab0:	0800eadb 	.word	0x0800eadb
 800eab4:	0800eadb 	.word	0x0800eadb
 800eab8:	0800ead3 	.word	0x0800ead3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eabc:	f7fc f85c 	bl	800ab78 <HAL_RCC_GetPCLK1Freq>
 800eac0:	61f8      	str	r0, [r7, #28]
        break;
 800eac2:	e010      	b.n	800eae6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800eac4:	4b8f      	ldr	r3, [pc, #572]	; (800ed04 <UART_SetConfig+0x56c>)
 800eac6:	61fb      	str	r3, [r7, #28]
        break;
 800eac8:	e00d      	b.n	800eae6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800eaca:	f7fb ffbd 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800eace:	61f8      	str	r0, [r7, #28]
        break;
 800ead0:	e009      	b.n	800eae6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ead2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ead6:	61fb      	str	r3, [r7, #28]
        break;
 800ead8:	e005      	b.n	800eae6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800eada:	2300      	movs	r3, #0
 800eadc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800eade:	2301      	movs	r3, #1
 800eae0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800eae4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800eae6:	69fb      	ldr	r3, [r7, #28]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	f000 80fb 	beq.w	800ece4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	685a      	ldr	r2, [r3, #4]
 800eaf2:	4613      	mov	r3, r2
 800eaf4:	005b      	lsls	r3, r3, #1
 800eaf6:	4413      	add	r3, r2
 800eaf8:	69fa      	ldr	r2, [r7, #28]
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d305      	bcc.n	800eb0a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	685b      	ldr	r3, [r3, #4]
 800eb02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800eb04:	69fa      	ldr	r2, [r7, #28]
 800eb06:	429a      	cmp	r2, r3
 800eb08:	d903      	bls.n	800eb12 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800eb10:	e0e8      	b.n	800ece4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800eb12:	69fb      	ldr	r3, [r7, #28]
 800eb14:	2200      	movs	r2, #0
 800eb16:	461c      	mov	r4, r3
 800eb18:	4615      	mov	r5, r2
 800eb1a:	f04f 0200 	mov.w	r2, #0
 800eb1e:	f04f 0300 	mov.w	r3, #0
 800eb22:	022b      	lsls	r3, r5, #8
 800eb24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800eb28:	0222      	lsls	r2, r4, #8
 800eb2a:	68f9      	ldr	r1, [r7, #12]
 800eb2c:	6849      	ldr	r1, [r1, #4]
 800eb2e:	0849      	lsrs	r1, r1, #1
 800eb30:	2000      	movs	r0, #0
 800eb32:	4688      	mov	r8, r1
 800eb34:	4681      	mov	r9, r0
 800eb36:	eb12 0a08 	adds.w	sl, r2, r8
 800eb3a:	eb43 0b09 	adc.w	fp, r3, r9
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	685b      	ldr	r3, [r3, #4]
 800eb42:	2200      	movs	r2, #0
 800eb44:	603b      	str	r3, [r7, #0]
 800eb46:	607a      	str	r2, [r7, #4]
 800eb48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb4c:	4650      	mov	r0, sl
 800eb4e:	4659      	mov	r1, fp
 800eb50:	f7f2 f8ea 	bl	8000d28 <__aeabi_uldivmod>
 800eb54:	4602      	mov	r2, r0
 800eb56:	460b      	mov	r3, r1
 800eb58:	4613      	mov	r3, r2
 800eb5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eb5c:	69bb      	ldr	r3, [r7, #24]
 800eb5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eb62:	d308      	bcc.n	800eb76 <UART_SetConfig+0x3de>
 800eb64:	69bb      	ldr	r3, [r7, #24]
 800eb66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb6a:	d204      	bcs.n	800eb76 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	69ba      	ldr	r2, [r7, #24]
 800eb72:	60da      	str	r2, [r3, #12]
 800eb74:	e0b6      	b.n	800ece4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800eb76:	2301      	movs	r3, #1
 800eb78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800eb7c:	e0b2      	b.n	800ece4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	69db      	ldr	r3, [r3, #28]
 800eb82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb86:	d15e      	bne.n	800ec46 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800eb88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb8c:	2b08      	cmp	r3, #8
 800eb8e:	d828      	bhi.n	800ebe2 <UART_SetConfig+0x44a>
 800eb90:	a201      	add	r2, pc, #4	; (adr r2, 800eb98 <UART_SetConfig+0x400>)
 800eb92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb96:	bf00      	nop
 800eb98:	0800ebbd 	.word	0x0800ebbd
 800eb9c:	0800ebc5 	.word	0x0800ebc5
 800eba0:	0800ebcd 	.word	0x0800ebcd
 800eba4:	0800ebe3 	.word	0x0800ebe3
 800eba8:	0800ebd3 	.word	0x0800ebd3
 800ebac:	0800ebe3 	.word	0x0800ebe3
 800ebb0:	0800ebe3 	.word	0x0800ebe3
 800ebb4:	0800ebe3 	.word	0x0800ebe3
 800ebb8:	0800ebdb 	.word	0x0800ebdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ebbc:	f7fb ffdc 	bl	800ab78 <HAL_RCC_GetPCLK1Freq>
 800ebc0:	61f8      	str	r0, [r7, #28]
        break;
 800ebc2:	e014      	b.n	800ebee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ebc4:	f7fb ffee 	bl	800aba4 <HAL_RCC_GetPCLK2Freq>
 800ebc8:	61f8      	str	r0, [r7, #28]
        break;
 800ebca:	e010      	b.n	800ebee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ebcc:	4b4d      	ldr	r3, [pc, #308]	; (800ed04 <UART_SetConfig+0x56c>)
 800ebce:	61fb      	str	r3, [r7, #28]
        break;
 800ebd0:	e00d      	b.n	800ebee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ebd2:	f7fb ff39 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800ebd6:	61f8      	str	r0, [r7, #28]
        break;
 800ebd8:	e009      	b.n	800ebee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ebda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebde:	61fb      	str	r3, [r7, #28]
        break;
 800ebe0:	e005      	b.n	800ebee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ebec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ebee:	69fb      	ldr	r3, [r7, #28]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d077      	beq.n	800ece4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ebf4:	69fb      	ldr	r3, [r7, #28]
 800ebf6:	005a      	lsls	r2, r3, #1
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	085b      	lsrs	r3, r3, #1
 800ebfe:	441a      	add	r2, r3
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec08:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec0a:	69bb      	ldr	r3, [r7, #24]
 800ec0c:	2b0f      	cmp	r3, #15
 800ec0e:	d916      	bls.n	800ec3e <UART_SetConfig+0x4a6>
 800ec10:	69bb      	ldr	r3, [r7, #24]
 800ec12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec16:	d212      	bcs.n	800ec3e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ec18:	69bb      	ldr	r3, [r7, #24]
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	f023 030f 	bic.w	r3, r3, #15
 800ec20:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ec22:	69bb      	ldr	r3, [r7, #24]
 800ec24:	085b      	lsrs	r3, r3, #1
 800ec26:	b29b      	uxth	r3, r3
 800ec28:	f003 0307 	and.w	r3, r3, #7
 800ec2c:	b29a      	uxth	r2, r3
 800ec2e:	8afb      	ldrh	r3, [r7, #22]
 800ec30:	4313      	orrs	r3, r2
 800ec32:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	8afa      	ldrh	r2, [r7, #22]
 800ec3a:	60da      	str	r2, [r3, #12]
 800ec3c:	e052      	b.n	800ece4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800ec3e:	2301      	movs	r3, #1
 800ec40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ec44:	e04e      	b.n	800ece4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ec46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec4a:	2b08      	cmp	r3, #8
 800ec4c:	d827      	bhi.n	800ec9e <UART_SetConfig+0x506>
 800ec4e:	a201      	add	r2, pc, #4	; (adr r2, 800ec54 <UART_SetConfig+0x4bc>)
 800ec50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec54:	0800ec79 	.word	0x0800ec79
 800ec58:	0800ec81 	.word	0x0800ec81
 800ec5c:	0800ec89 	.word	0x0800ec89
 800ec60:	0800ec9f 	.word	0x0800ec9f
 800ec64:	0800ec8f 	.word	0x0800ec8f
 800ec68:	0800ec9f 	.word	0x0800ec9f
 800ec6c:	0800ec9f 	.word	0x0800ec9f
 800ec70:	0800ec9f 	.word	0x0800ec9f
 800ec74:	0800ec97 	.word	0x0800ec97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ec78:	f7fb ff7e 	bl	800ab78 <HAL_RCC_GetPCLK1Freq>
 800ec7c:	61f8      	str	r0, [r7, #28]
        break;
 800ec7e:	e014      	b.n	800ecaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ec80:	f7fb ff90 	bl	800aba4 <HAL_RCC_GetPCLK2Freq>
 800ec84:	61f8      	str	r0, [r7, #28]
        break;
 800ec86:	e010      	b.n	800ecaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ec88:	4b1e      	ldr	r3, [pc, #120]	; (800ed04 <UART_SetConfig+0x56c>)
 800ec8a:	61fb      	str	r3, [r7, #28]
        break;
 800ec8c:	e00d      	b.n	800ecaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ec8e:	f7fb fedb 	bl	800aa48 <HAL_RCC_GetSysClockFreq>
 800ec92:	61f8      	str	r0, [r7, #28]
        break;
 800ec94:	e009      	b.n	800ecaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec9a:	61fb      	str	r3, [r7, #28]
        break;
 800ec9c:	e005      	b.n	800ecaa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800eca2:	2301      	movs	r3, #1
 800eca4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800eca8:	bf00      	nop
    }

    if (pclk != 0U)
 800ecaa:	69fb      	ldr	r3, [r7, #28]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d019      	beq.n	800ece4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	685b      	ldr	r3, [r3, #4]
 800ecb4:	085a      	lsrs	r2, r3, #1
 800ecb6:	69fb      	ldr	r3, [r7, #28]
 800ecb8:	441a      	add	r2, r3
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecc2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ecc4:	69bb      	ldr	r3, [r7, #24]
 800ecc6:	2b0f      	cmp	r3, #15
 800ecc8:	d909      	bls.n	800ecde <UART_SetConfig+0x546>
 800ecca:	69bb      	ldr	r3, [r7, #24]
 800eccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecd0:	d205      	bcs.n	800ecde <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ecd2:	69bb      	ldr	r3, [r7, #24]
 800ecd4:	b29a      	uxth	r2, r3
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	60da      	str	r2, [r3, #12]
 800ecdc:	e002      	b.n	800ece4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800ecde:	2301      	movs	r3, #1
 800ece0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2200      	movs	r2, #0
 800ece8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	2200      	movs	r2, #0
 800ecee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ecf0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3728      	adds	r7, #40	; 0x28
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ecfe:	bf00      	nop
 800ed00:	40008000 	.word	0x40008000
 800ed04:	00f42400 	.word	0x00f42400

0800ed08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b083      	sub	sp, #12
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed14:	f003 0301 	and.w	r3, r3, #1
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d00a      	beq.n	800ed32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	430a      	orrs	r2, r1
 800ed30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed36:	f003 0302 	and.w	r3, r3, #2
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d00a      	beq.n	800ed54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	430a      	orrs	r2, r1
 800ed52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed58:	f003 0304 	and.w	r3, r3, #4
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d00a      	beq.n	800ed76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	685b      	ldr	r3, [r3, #4]
 800ed66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	430a      	orrs	r2, r1
 800ed74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed7a:	f003 0308 	and.w	r3, r3, #8
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d00a      	beq.n	800ed98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	685b      	ldr	r3, [r3, #4]
 800ed88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	430a      	orrs	r2, r1
 800ed96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed9c:	f003 0310 	and.w	r3, r3, #16
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d00a      	beq.n	800edba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	689b      	ldr	r3, [r3, #8]
 800edaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	430a      	orrs	r2, r1
 800edb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edbe:	f003 0320 	and.w	r3, r3, #32
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d00a      	beq.n	800eddc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	689b      	ldr	r3, [r3, #8]
 800edcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	430a      	orrs	r2, r1
 800edda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ede0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d01a      	beq.n	800ee1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	685b      	ldr	r3, [r3, #4]
 800edee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	430a      	orrs	r2, r1
 800edfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee06:	d10a      	bne.n	800ee1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	430a      	orrs	r2, r1
 800ee1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d00a      	beq.n	800ee40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	685b      	ldr	r3, [r3, #4]
 800ee30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	430a      	orrs	r2, r1
 800ee3e:	605a      	str	r2, [r3, #4]
  }
}
 800ee40:	bf00      	nop
 800ee42:	370c      	adds	r7, #12
 800ee44:	46bd      	mov	sp, r7
 800ee46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4a:	4770      	bx	lr

0800ee4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b086      	sub	sp, #24
 800ee50:	af02      	add	r7, sp, #8
 800ee52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2200      	movs	r2, #0
 800ee58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ee5c:	f7f8 fdfc 	bl	8007a58 <HAL_GetTick>
 800ee60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f003 0308 	and.w	r3, r3, #8
 800ee6c:	2b08      	cmp	r3, #8
 800ee6e:	d10e      	bne.n	800ee8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee74:	9300      	str	r3, [sp, #0]
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f000 f82d 	bl	800eede <UART_WaitOnFlagUntilTimeout>
 800ee84:	4603      	mov	r3, r0
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d001      	beq.n	800ee8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee8a:	2303      	movs	r3, #3
 800ee8c:	e023      	b.n	800eed6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f003 0304 	and.w	r3, r3, #4
 800ee98:	2b04      	cmp	r3, #4
 800ee9a:	d10e      	bne.n	800eeba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eea0:	9300      	str	r3, [sp, #0]
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	2200      	movs	r2, #0
 800eea6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f000 f817 	bl	800eede <UART_WaitOnFlagUntilTimeout>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d001      	beq.n	800eeba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eeb6:	2303      	movs	r3, #3
 800eeb8:	e00d      	b.n	800eed6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2220      	movs	r2, #32
 800eebe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2220      	movs	r2, #32
 800eec4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2200      	movs	r2, #0
 800eeca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2200      	movs	r2, #0
 800eed0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800eed4:	2300      	movs	r3, #0
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	3710      	adds	r7, #16
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}

0800eede <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eede:	b580      	push	{r7, lr}
 800eee0:	b09c      	sub	sp, #112	; 0x70
 800eee2:	af00      	add	r7, sp, #0
 800eee4:	60f8      	str	r0, [r7, #12]
 800eee6:	60b9      	str	r1, [r7, #8]
 800eee8:	603b      	str	r3, [r7, #0]
 800eeea:	4613      	mov	r3, r2
 800eeec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eeee:	e0a5      	b.n	800f03c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eef2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eef6:	f000 80a1 	beq.w	800f03c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eefa:	f7f8 fdad 	bl	8007a58 <HAL_GetTick>
 800eefe:	4602      	mov	r2, r0
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	1ad3      	subs	r3, r2, r3
 800ef04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d302      	bcc.n	800ef10 <UART_WaitOnFlagUntilTimeout+0x32>
 800ef0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d13e      	bne.n	800ef8e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef18:	e853 3f00 	ldrex	r3, [r3]
 800ef1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ef1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ef24:	667b      	str	r3, [r7, #100]	; 0x64
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ef30:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ef36:	e841 2300 	strex	r3, r2, [r1]
 800ef3a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ef3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d1e6      	bne.n	800ef10 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	3308      	adds	r3, #8
 800ef48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef4c:	e853 3f00 	ldrex	r3, [r3]
 800ef50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ef52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef54:	f023 0301 	bic.w	r3, r3, #1
 800ef58:	663b      	str	r3, [r7, #96]	; 0x60
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	3308      	adds	r3, #8
 800ef60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ef62:	64ba      	str	r2, [r7, #72]	; 0x48
 800ef64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef6a:	e841 2300 	strex	r3, r2, [r1]
 800ef6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ef70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d1e5      	bne.n	800ef42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	2220      	movs	r2, #32
 800ef7a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	2220      	movs	r2, #32
 800ef80:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	2200      	movs	r2, #0
 800ef86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ef8a:	2303      	movs	r3, #3
 800ef8c:	e067      	b.n	800f05e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f003 0304 	and.w	r3, r3, #4
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d04f      	beq.n	800f03c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	69db      	ldr	r3, [r3, #28]
 800efa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800efa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800efaa:	d147      	bne.n	800f03c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800efb4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efbe:	e853 3f00 	ldrex	r3, [r3]
 800efc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800efc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800efca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	461a      	mov	r2, r3
 800efd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800efd4:	637b      	str	r3, [r7, #52]	; 0x34
 800efd6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800efda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efdc:	e841 2300 	strex	r3, r2, [r1]
 800efe0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800efe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d1e6      	bne.n	800efb6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	3308      	adds	r3, #8
 800efee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	e853 3f00 	ldrex	r3, [r3]
 800eff6:	613b      	str	r3, [r7, #16]
   return(result);
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	f023 0301 	bic.w	r3, r3, #1
 800effe:	66bb      	str	r3, [r7, #104]	; 0x68
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	3308      	adds	r3, #8
 800f006:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f008:	623a      	str	r2, [r7, #32]
 800f00a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f00c:	69f9      	ldr	r1, [r7, #28]
 800f00e:	6a3a      	ldr	r2, [r7, #32]
 800f010:	e841 2300 	strex	r3, r2, [r1]
 800f014:	61bb      	str	r3, [r7, #24]
   return(result);
 800f016:	69bb      	ldr	r3, [r7, #24]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d1e5      	bne.n	800efe8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	2220      	movs	r2, #32
 800f020:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	2220      	movs	r2, #32
 800f026:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	2220      	movs	r2, #32
 800f02c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	2200      	movs	r2, #0
 800f034:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800f038:	2303      	movs	r3, #3
 800f03a:	e010      	b.n	800f05e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	69da      	ldr	r2, [r3, #28]
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	4013      	ands	r3, r2
 800f046:	68ba      	ldr	r2, [r7, #8]
 800f048:	429a      	cmp	r2, r3
 800f04a:	bf0c      	ite	eq
 800f04c:	2301      	moveq	r3, #1
 800f04e:	2300      	movne	r3, #0
 800f050:	b2db      	uxtb	r3, r3
 800f052:	461a      	mov	r2, r3
 800f054:	79fb      	ldrb	r3, [r7, #7]
 800f056:	429a      	cmp	r2, r3
 800f058:	f43f af4a 	beq.w	800eef0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f05c:	2300      	movs	r3, #0
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3770      	adds	r7, #112	; 0x70
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
	...

0800f068 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f068:	b480      	push	{r7}
 800f06a:	b097      	sub	sp, #92	; 0x5c
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	60f8      	str	r0, [r7, #12]
 800f070:	60b9      	str	r1, [r7, #8]
 800f072:	4613      	mov	r3, r2
 800f074:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	68ba      	ldr	r2, [r7, #8]
 800f07a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	88fa      	ldrh	r2, [r7, #6]
 800f080:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	88fa      	ldrh	r2, [r7, #6]
 800f088:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	2200      	movs	r2, #0
 800f090:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	689b      	ldr	r3, [r3, #8]
 800f096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f09a:	d10e      	bne.n	800f0ba <UART_Start_Receive_IT+0x52>
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	691b      	ldr	r3, [r3, #16]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d105      	bne.n	800f0b0 <UART_Start_Receive_IT+0x48>
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f0aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f0ae:	e02d      	b.n	800f10c <UART_Start_Receive_IT+0xa4>
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	22ff      	movs	r2, #255	; 0xff
 800f0b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f0b8:	e028      	b.n	800f10c <UART_Start_Receive_IT+0xa4>
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	689b      	ldr	r3, [r3, #8]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d10d      	bne.n	800f0de <UART_Start_Receive_IT+0x76>
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	691b      	ldr	r3, [r3, #16]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d104      	bne.n	800f0d4 <UART_Start_Receive_IT+0x6c>
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	22ff      	movs	r2, #255	; 0xff
 800f0ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f0d2:	e01b      	b.n	800f10c <UART_Start_Receive_IT+0xa4>
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	227f      	movs	r2, #127	; 0x7f
 800f0d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f0dc:	e016      	b.n	800f10c <UART_Start_Receive_IT+0xa4>
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	689b      	ldr	r3, [r3, #8]
 800f0e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f0e6:	d10d      	bne.n	800f104 <UART_Start_Receive_IT+0x9c>
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	691b      	ldr	r3, [r3, #16]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d104      	bne.n	800f0fa <UART_Start_Receive_IT+0x92>
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	227f      	movs	r2, #127	; 0x7f
 800f0f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f0f8:	e008      	b.n	800f10c <UART_Start_Receive_IT+0xa4>
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	223f      	movs	r2, #63	; 0x3f
 800f0fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f102:	e003      	b.n	800f10c <UART_Start_Receive_IT+0xa4>
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	2200      	movs	r2, #0
 800f108:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	2200      	movs	r2, #0
 800f110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2222      	movs	r2, #34	; 0x22
 800f118:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	3308      	adds	r3, #8
 800f120:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f124:	e853 3f00 	ldrex	r3, [r3]
 800f128:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f12c:	f043 0301 	orr.w	r3, r3, #1
 800f130:	657b      	str	r3, [r7, #84]	; 0x54
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	3308      	adds	r3, #8
 800f138:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f13a:	64ba      	str	r2, [r7, #72]	; 0x48
 800f13c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f13e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f140:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f142:	e841 2300 	strex	r3, r2, [r1]
 800f146:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d1e5      	bne.n	800f11a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	689b      	ldr	r3, [r3, #8]
 800f152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f156:	d107      	bne.n	800f168 <UART_Start_Receive_IT+0x100>
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	691b      	ldr	r3, [r3, #16]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d103      	bne.n	800f168 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	4a24      	ldr	r2, [pc, #144]	; (800f1f4 <UART_Start_Receive_IT+0x18c>)
 800f164:	665a      	str	r2, [r3, #100]	; 0x64
 800f166:	e002      	b.n	800f16e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	4a23      	ldr	r2, [pc, #140]	; (800f1f8 <UART_Start_Receive_IT+0x190>)
 800f16c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2200      	movs	r2, #0
 800f172:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	691b      	ldr	r3, [r3, #16]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d019      	beq.n	800f1b2 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f186:	e853 3f00 	ldrex	r3, [r3]
 800f18a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f18e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f192:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	461a      	mov	r2, r3
 800f19a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f19c:	637b      	str	r3, [r7, #52]	; 0x34
 800f19e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f1a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1a4:	e841 2300 	strex	r3, r2, [r1]
 800f1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d1e6      	bne.n	800f17e <UART_Start_Receive_IT+0x116>
 800f1b0:	e018      	b.n	800f1e4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	e853 3f00 	ldrex	r3, [r3]
 800f1be:	613b      	str	r3, [r7, #16]
   return(result);
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	f043 0320 	orr.w	r3, r3, #32
 800f1c6:	653b      	str	r3, [r7, #80]	; 0x50
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	461a      	mov	r2, r3
 800f1ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1d0:	623b      	str	r3, [r7, #32]
 800f1d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1d4:	69f9      	ldr	r1, [r7, #28]
 800f1d6:	6a3a      	ldr	r2, [r7, #32]
 800f1d8:	e841 2300 	strex	r3, r2, [r1]
 800f1dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800f1de:	69bb      	ldr	r3, [r7, #24]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d1e6      	bne.n	800f1b2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800f1e4:	2300      	movs	r3, #0
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	375c      	adds	r7, #92	; 0x5c
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f0:	4770      	bx	lr
 800f1f2:	bf00      	nop
 800f1f4:	0800f621 	.word	0x0800f621
 800f1f8:	0800f4c1 	.word	0x0800f4c1

0800f1fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f1fc:	b480      	push	{r7}
 800f1fe:	b089      	sub	sp, #36	; 0x24
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	e853 3f00 	ldrex	r3, [r3]
 800f210:	60bb      	str	r3, [r7, #8]
   return(result);
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f218:	61fb      	str	r3, [r7, #28]
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	461a      	mov	r2, r3
 800f220:	69fb      	ldr	r3, [r7, #28]
 800f222:	61bb      	str	r3, [r7, #24]
 800f224:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f226:	6979      	ldr	r1, [r7, #20]
 800f228:	69ba      	ldr	r2, [r7, #24]
 800f22a:	e841 2300 	strex	r3, r2, [r1]
 800f22e:	613b      	str	r3, [r7, #16]
   return(result);
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d1e6      	bne.n	800f204 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2220      	movs	r2, #32
 800f23a:	679a      	str	r2, [r3, #120]	; 0x78
}
 800f23c:	bf00      	nop
 800f23e:	3724      	adds	r7, #36	; 0x24
 800f240:	46bd      	mov	sp, r7
 800f242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f246:	4770      	bx	lr

0800f248 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f248:	b480      	push	{r7}
 800f24a:	b095      	sub	sp, #84	; 0x54
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f258:	e853 3f00 	ldrex	r3, [r3]
 800f25c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f260:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f264:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	461a      	mov	r2, r3
 800f26c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f26e:	643b      	str	r3, [r7, #64]	; 0x40
 800f270:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f272:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f274:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f276:	e841 2300 	strex	r3, r2, [r1]
 800f27a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d1e6      	bne.n	800f250 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	3308      	adds	r3, #8
 800f288:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f28a:	6a3b      	ldr	r3, [r7, #32]
 800f28c:	e853 3f00 	ldrex	r3, [r3]
 800f290:	61fb      	str	r3, [r7, #28]
   return(result);
 800f292:	69fb      	ldr	r3, [r7, #28]
 800f294:	f023 0301 	bic.w	r3, r3, #1
 800f298:	64bb      	str	r3, [r7, #72]	; 0x48
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	3308      	adds	r3, #8
 800f2a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f2a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f2a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f2a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2aa:	e841 2300 	strex	r3, r2, [r1]
 800f2ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d1e5      	bne.n	800f282 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f2ba:	2b01      	cmp	r3, #1
 800f2bc:	d118      	bne.n	800f2f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	e853 3f00 	ldrex	r3, [r3]
 800f2ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	f023 0310 	bic.w	r3, r3, #16
 800f2d2:	647b      	str	r3, [r7, #68]	; 0x44
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	461a      	mov	r2, r3
 800f2da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2dc:	61bb      	str	r3, [r7, #24]
 800f2de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2e0:	6979      	ldr	r1, [r7, #20]
 800f2e2:	69ba      	ldr	r2, [r7, #24]
 800f2e4:	e841 2300 	strex	r3, r2, [r1]
 800f2e8:	613b      	str	r3, [r7, #16]
   return(result);
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d1e6      	bne.n	800f2be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2220      	movs	r2, #32
 800f2f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2200      	movs	r2, #0
 800f300:	665a      	str	r2, [r3, #100]	; 0x64
}
 800f302:	bf00      	nop
 800f304:	3754      	adds	r7, #84	; 0x54
 800f306:	46bd      	mov	sp, r7
 800f308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30c:	4770      	bx	lr

0800f30e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f30e:	b580      	push	{r7, lr}
 800f310:	b090      	sub	sp, #64	; 0x40
 800f312:	af00      	add	r7, sp, #0
 800f314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f31a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f003 0320 	and.w	r3, r3, #32
 800f326:	2b00      	cmp	r3, #0
 800f328:	d137      	bne.n	800f39a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800f32a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f32c:	2200      	movs	r2, #0
 800f32e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	3308      	adds	r3, #8
 800f338:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f33c:	e853 3f00 	ldrex	r3, [r3]
 800f340:	623b      	str	r3, [r7, #32]
   return(result);
 800f342:	6a3b      	ldr	r3, [r7, #32]
 800f344:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f348:	63bb      	str	r3, [r7, #56]	; 0x38
 800f34a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	3308      	adds	r3, #8
 800f350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f352:	633a      	str	r2, [r7, #48]	; 0x30
 800f354:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f356:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f35a:	e841 2300 	strex	r3, r2, [r1]
 800f35e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f362:	2b00      	cmp	r3, #0
 800f364:	d1e5      	bne.n	800f332 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f36c:	693b      	ldr	r3, [r7, #16]
 800f36e:	e853 3f00 	ldrex	r3, [r3]
 800f372:	60fb      	str	r3, [r7, #12]
   return(result);
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f37a:	637b      	str	r3, [r7, #52]	; 0x34
 800f37c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	461a      	mov	r2, r3
 800f382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f384:	61fb      	str	r3, [r7, #28]
 800f386:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f388:	69b9      	ldr	r1, [r7, #24]
 800f38a:	69fa      	ldr	r2, [r7, #28]
 800f38c:	e841 2300 	strex	r3, r2, [r1]
 800f390:	617b      	str	r3, [r7, #20]
   return(result);
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d1e6      	bne.n	800f366 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f398:	e002      	b.n	800f3a0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800f39a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f39c:	f7f3 ffdc 	bl	8003358 <HAL_UART_TxCpltCallback>
}
 800f3a0:	bf00      	nop
 800f3a2:	3740      	adds	r7, #64	; 0x40
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}

0800f3a8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3b4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f3b6:	68f8      	ldr	r0, [r7, #12]
 800f3b8:	f7ff f9d8 	bl	800e76c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f3bc:	bf00      	nop
 800f3be:	3710      	adds	r7, #16
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}

0800f3c4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b086      	sub	sp, #24
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3d0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3d6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3dc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	689b      	ldr	r3, [r3, #8]
 800f3e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3e8:	2b80      	cmp	r3, #128	; 0x80
 800f3ea:	d109      	bne.n	800f400 <UART_DMAError+0x3c>
 800f3ec:	693b      	ldr	r3, [r7, #16]
 800f3ee:	2b21      	cmp	r3, #33	; 0x21
 800f3f0:	d106      	bne.n	800f400 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800f3fa:	6978      	ldr	r0, [r7, #20]
 800f3fc:	f7ff fefe 	bl	800f1fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	689b      	ldr	r3, [r3, #8]
 800f406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f40a:	2b40      	cmp	r3, #64	; 0x40
 800f40c:	d109      	bne.n	800f422 <UART_DMAError+0x5e>
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	2b22      	cmp	r3, #34	; 0x22
 800f412:	d106      	bne.n	800f422 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	2200      	movs	r2, #0
 800f418:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800f41c:	6978      	ldr	r0, [r7, #20]
 800f41e:	f7ff ff13 	bl	800f248 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f428:	f043 0210 	orr.w	r2, r3, #16
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f432:	6978      	ldr	r0, [r7, #20]
 800f434:	f7f3 ffb4 	bl	80033a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f438:	bf00      	nop
 800f43a:	3718      	adds	r7, #24
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}

0800f440 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b084      	sub	sp, #16
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f44c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	2200      	movs	r2, #0
 800f452:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	2200      	movs	r2, #0
 800f45a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f45e:	68f8      	ldr	r0, [r7, #12]
 800f460:	f7f3 ff9e 	bl	80033a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f464:	bf00      	nop
 800f466:	3710      	adds	r7, #16
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}

0800f46c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b088      	sub	sp, #32
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	e853 3f00 	ldrex	r3, [r3]
 800f480:	60bb      	str	r3, [r7, #8]
   return(result);
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f488:	61fb      	str	r3, [r7, #28]
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	461a      	mov	r2, r3
 800f490:	69fb      	ldr	r3, [r7, #28]
 800f492:	61bb      	str	r3, [r7, #24]
 800f494:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f496:	6979      	ldr	r1, [r7, #20]
 800f498:	69ba      	ldr	r2, [r7, #24]
 800f49a:	e841 2300 	strex	r3, r2, [r1]
 800f49e:	613b      	str	r3, [r7, #16]
   return(result);
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d1e6      	bne.n	800f474 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2220      	movs	r2, #32
 800f4aa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f7f3 ff50 	bl	8003358 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f4b8:	bf00      	nop
 800f4ba:	3720      	adds	r7, #32
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}

0800f4c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b096      	sub	sp, #88	; 0x58
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f4ce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4d6:	2b22      	cmp	r3, #34	; 0x22
 800f4d8:	f040 8094 	bne.w	800f604 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f4e2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f4e6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f4ea:	b2d9      	uxtb	r1, r3
 800f4ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f4f0:	b2da      	uxtb	r2, r3
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4f6:	400a      	ands	r2, r1
 800f4f8:	b2d2      	uxtb	r2, r2
 800f4fa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f500:	1c5a      	adds	r2, r3, #1
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f50c:	b29b      	uxth	r3, r3
 800f50e:	3b01      	subs	r3, #1
 800f510:	b29a      	uxth	r2, r3
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f51e:	b29b      	uxth	r3, r3
 800f520:	2b00      	cmp	r3, #0
 800f522:	d179      	bne.n	800f618 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f52c:	e853 3f00 	ldrex	r3, [r3]
 800f530:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f534:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f538:	653b      	str	r3, [r7, #80]	; 0x50
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	461a      	mov	r2, r3
 800f540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f542:	647b      	str	r3, [r7, #68]	; 0x44
 800f544:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f546:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f548:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f54a:	e841 2300 	strex	r3, r2, [r1]
 800f54e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f552:	2b00      	cmp	r3, #0
 800f554:	d1e6      	bne.n	800f524 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	3308      	adds	r3, #8
 800f55c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f560:	e853 3f00 	ldrex	r3, [r3]
 800f564:	623b      	str	r3, [r7, #32]
   return(result);
 800f566:	6a3b      	ldr	r3, [r7, #32]
 800f568:	f023 0301 	bic.w	r3, r3, #1
 800f56c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	3308      	adds	r3, #8
 800f574:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f576:	633a      	str	r2, [r7, #48]	; 0x30
 800f578:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f57a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f57c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f57e:	e841 2300 	strex	r3, r2, [r1]
 800f582:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f586:	2b00      	cmp	r3, #0
 800f588:	d1e5      	bne.n	800f556 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	2220      	movs	r2, #32
 800f58e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2200      	movs	r2, #0
 800f594:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f59a:	2b01      	cmp	r3, #1
 800f59c:	d12e      	bne.n	800f5fc <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	e853 3f00 	ldrex	r3, [r3]
 800f5b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	f023 0310 	bic.w	r3, r3, #16
 800f5b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	461a      	mov	r2, r3
 800f5c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5c2:	61fb      	str	r3, [r7, #28]
 800f5c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5c6:	69b9      	ldr	r1, [r7, #24]
 800f5c8:	69fa      	ldr	r2, [r7, #28]
 800f5ca:	e841 2300 	strex	r3, r2, [r1]
 800f5ce:	617b      	str	r3, [r7, #20]
   return(result);
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d1e6      	bne.n	800f5a4 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	69db      	ldr	r3, [r3, #28]
 800f5dc:	f003 0310 	and.w	r3, r3, #16
 800f5e0:	2b10      	cmp	r3, #16
 800f5e2:	d103      	bne.n	800f5ec <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	2210      	movs	r2, #16
 800f5ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f5f2:	4619      	mov	r1, r3
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f7ff f8c3 	bl	800e780 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f5fa:	e00d      	b.n	800f618 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f7f3 fef9 	bl	80033f4 <HAL_UART_RxCpltCallback>
}
 800f602:	e009      	b.n	800f618 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	8b1b      	ldrh	r3, [r3, #24]
 800f60a:	b29a      	uxth	r2, r3
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	f042 0208 	orr.w	r2, r2, #8
 800f614:	b292      	uxth	r2, r2
 800f616:	831a      	strh	r2, [r3, #24]
}
 800f618:	bf00      	nop
 800f61a:	3758      	adds	r7, #88	; 0x58
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}

0800f620 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b096      	sub	sp, #88	; 0x58
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f62e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f636:	2b22      	cmp	r3, #34	; 0x22
 800f638:	f040 8094 	bne.w	800f764 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f642:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f64a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f64c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f650:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f654:	4013      	ands	r3, r2
 800f656:	b29a      	uxth	r2, r3
 800f658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f65a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f660:	1c9a      	adds	r2, r3, #2
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f66c:	b29b      	uxth	r3, r3
 800f66e:	3b01      	subs	r3, #1
 800f670:	b29a      	uxth	r2, r3
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f67e:	b29b      	uxth	r3, r3
 800f680:	2b00      	cmp	r3, #0
 800f682:	d179      	bne.n	800f778 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f68c:	e853 3f00 	ldrex	r3, [r3]
 800f690:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f694:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f698:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	461a      	mov	r2, r3
 800f6a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6a2:	643b      	str	r3, [r7, #64]	; 0x40
 800f6a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f6a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f6aa:	e841 2300 	strex	r3, r2, [r1]
 800f6ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d1e6      	bne.n	800f684 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	3308      	adds	r3, #8
 800f6bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6be:	6a3b      	ldr	r3, [r7, #32]
 800f6c0:	e853 3f00 	ldrex	r3, [r3]
 800f6c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800f6c6:	69fb      	ldr	r3, [r7, #28]
 800f6c8:	f023 0301 	bic.w	r3, r3, #1
 800f6cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	3308      	adds	r3, #8
 800f6d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f6d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f6d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f6dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6de:	e841 2300 	strex	r3, r2, [r1]
 800f6e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d1e5      	bne.n	800f6b6 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2220      	movs	r2, #32
 800f6ee:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d12e      	bne.n	800f75c <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2200      	movs	r2, #0
 800f702:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	e853 3f00 	ldrex	r3, [r3]
 800f710:	60bb      	str	r3, [r7, #8]
   return(result);
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	f023 0310 	bic.w	r3, r3, #16
 800f718:	647b      	str	r3, [r7, #68]	; 0x44
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	461a      	mov	r2, r3
 800f720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f722:	61bb      	str	r3, [r7, #24]
 800f724:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f726:	6979      	ldr	r1, [r7, #20]
 800f728:	69ba      	ldr	r2, [r7, #24]
 800f72a:	e841 2300 	strex	r3, r2, [r1]
 800f72e:	613b      	str	r3, [r7, #16]
   return(result);
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d1e6      	bne.n	800f704 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	69db      	ldr	r3, [r3, #28]
 800f73c:	f003 0310 	and.w	r3, r3, #16
 800f740:	2b10      	cmp	r3, #16
 800f742:	d103      	bne.n	800f74c <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	2210      	movs	r2, #16
 800f74a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f752:	4619      	mov	r1, r3
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	f7ff f813 	bl	800e780 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f75a:	e00d      	b.n	800f778 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	f7f3 fe49 	bl	80033f4 <HAL_UART_RxCpltCallback>
}
 800f762:	e009      	b.n	800f778 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	8b1b      	ldrh	r3, [r3, #24]
 800f76a:	b29a      	uxth	r2, r3
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	f042 0208 	orr.w	r2, r2, #8
 800f774:	b292      	uxth	r2, r2
 800f776:	831a      	strh	r2, [r3, #24]
}
 800f778:	bf00      	nop
 800f77a:	3758      	adds	r7, #88	; 0x58
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}

0800f780 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f780:	b480      	push	{r7}
 800f782:	b083      	sub	sp, #12
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f788:	bf00      	nop
 800f78a:	370c      	adds	r7, #12
 800f78c:	46bd      	mov	sp, r7
 800f78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f792:	4770      	bx	lr

0800f794 <__NVIC_SetPriority>:
{
 800f794:	b480      	push	{r7}
 800f796:	b083      	sub	sp, #12
 800f798:	af00      	add	r7, sp, #0
 800f79a:	4603      	mov	r3, r0
 800f79c:	6039      	str	r1, [r7, #0]
 800f79e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f7a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	db0a      	blt.n	800f7be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	b2da      	uxtb	r2, r3
 800f7ac:	490c      	ldr	r1, [pc, #48]	; (800f7e0 <__NVIC_SetPriority+0x4c>)
 800f7ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f7b2:	0112      	lsls	r2, r2, #4
 800f7b4:	b2d2      	uxtb	r2, r2
 800f7b6:	440b      	add	r3, r1
 800f7b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f7bc:	e00a      	b.n	800f7d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	b2da      	uxtb	r2, r3
 800f7c2:	4908      	ldr	r1, [pc, #32]	; (800f7e4 <__NVIC_SetPriority+0x50>)
 800f7c4:	79fb      	ldrb	r3, [r7, #7]
 800f7c6:	f003 030f 	and.w	r3, r3, #15
 800f7ca:	3b04      	subs	r3, #4
 800f7cc:	0112      	lsls	r2, r2, #4
 800f7ce:	b2d2      	uxtb	r2, r2
 800f7d0:	440b      	add	r3, r1
 800f7d2:	761a      	strb	r2, [r3, #24]
}
 800f7d4:	bf00      	nop
 800f7d6:	370c      	adds	r7, #12
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7de:	4770      	bx	lr
 800f7e0:	e000e100 	.word	0xe000e100
 800f7e4:	e000ed00 	.word	0xe000ed00

0800f7e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f7ec:	4b05      	ldr	r3, [pc, #20]	; (800f804 <SysTick_Handler+0x1c>)
 800f7ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f7f0:	f002 fb22 	bl	8011e38 <xTaskGetSchedulerState>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	2b01      	cmp	r3, #1
 800f7f8:	d001      	beq.n	800f7fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f7fa:	f003 fa05 	bl	8012c08 <xPortSysTickHandler>
  }
}
 800f7fe:	bf00      	nop
 800f800:	bd80      	pop	{r7, pc}
 800f802:	bf00      	nop
 800f804:	e000e010 	.word	0xe000e010

0800f808 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f808:	b580      	push	{r7, lr}
 800f80a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f80c:	2100      	movs	r1, #0
 800f80e:	f06f 0004 	mvn.w	r0, #4
 800f812:	f7ff ffbf 	bl	800f794 <__NVIC_SetPriority>
#endif
}
 800f816:	bf00      	nop
 800f818:	bd80      	pop	{r7, pc}
	...

0800f81c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b082      	sub	sp, #8
 800f820:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f822:	f3ef 8305 	mrs	r3, IPSR
 800f826:	603b      	str	r3, [r7, #0]
  return(result);
 800f828:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d003      	beq.n	800f836 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f82e:	f06f 0305 	mvn.w	r3, #5
 800f832:	607b      	str	r3, [r7, #4]
 800f834:	e00f      	b.n	800f856 <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f836:	4b0a      	ldr	r3, [pc, #40]	; (800f860 <osKernelInitialize+0x44>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d108      	bne.n	800f850 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 800f83e:	4809      	ldr	r0, [pc, #36]	; (800f864 <osKernelInitialize+0x48>)
 800f840:	f003 fbd2 	bl	8012fe8 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 800f844:	4b06      	ldr	r3, [pc, #24]	; (800f860 <osKernelInitialize+0x44>)
 800f846:	2201      	movs	r2, #1
 800f848:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f84a:	2300      	movs	r3, #0
 800f84c:	607b      	str	r3, [r7, #4]
 800f84e:	e002      	b.n	800f856 <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 800f850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f854:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f856:	687b      	ldr	r3, [r7, #4]
}
 800f858:	4618      	mov	r0, r3
 800f85a:	3708      	adds	r7, #8
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	200037c8 	.word	0x200037c8
 800f864:	20000178 	.word	0x20000178

0800f868 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f868:	b580      	push	{r7, lr}
 800f86a:	b082      	sub	sp, #8
 800f86c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f86e:	f3ef 8305 	mrs	r3, IPSR
 800f872:	603b      	str	r3, [r7, #0]
  return(result);
 800f874:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f876:	2b00      	cmp	r3, #0
 800f878:	d003      	beq.n	800f882 <osKernelStart+0x1a>
    stat = osErrorISR;
 800f87a:	f06f 0305 	mvn.w	r3, #5
 800f87e:	607b      	str	r3, [r7, #4]
 800f880:	e010      	b.n	800f8a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f882:	4b0b      	ldr	r3, [pc, #44]	; (800f8b0 <osKernelStart+0x48>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	2b01      	cmp	r3, #1
 800f888:	d109      	bne.n	800f89e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f88a:	f7ff ffbd 	bl	800f808 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f88e:	4b08      	ldr	r3, [pc, #32]	; (800f8b0 <osKernelStart+0x48>)
 800f890:	2202      	movs	r2, #2
 800f892:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f894:	f001 fe74 	bl	8011580 <vTaskStartScheduler>
      stat = osOK;
 800f898:	2300      	movs	r3, #0
 800f89a:	607b      	str	r3, [r7, #4]
 800f89c:	e002      	b.n	800f8a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f89e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f8a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f8a4:	687b      	ldr	r3, [r7, #4]
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	3708      	adds	r7, #8
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}
 800f8ae:	bf00      	nop
 800f8b0:	200037c8 	.word	0x200037c8

0800f8b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b08e      	sub	sp, #56	; 0x38
 800f8b8:	af04      	add	r7, sp, #16
 800f8ba:	60f8      	str	r0, [r7, #12]
 800f8bc:	60b9      	str	r1, [r7, #8]
 800f8be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8c4:	f3ef 8305 	mrs	r3, IPSR
 800f8c8:	617b      	str	r3, [r7, #20]
  return(result);
 800f8ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d17e      	bne.n	800f9ce <osThreadNew+0x11a>
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d07b      	beq.n	800f9ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f8d6:	2380      	movs	r3, #128	; 0x80
 800f8d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f8da:	2318      	movs	r3, #24
 800f8dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f8e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f8e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d045      	beq.n	800f97a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d002      	beq.n	800f8fc <osThreadNew+0x48>
        name = attr->name;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	699b      	ldr	r3, [r3, #24]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d002      	beq.n	800f90a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	699b      	ldr	r3, [r3, #24]
 800f908:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f90a:	69fb      	ldr	r3, [r7, #28]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d008      	beq.n	800f922 <osThreadNew+0x6e>
 800f910:	69fb      	ldr	r3, [r7, #28]
 800f912:	2b38      	cmp	r3, #56	; 0x38
 800f914:	d805      	bhi.n	800f922 <osThreadNew+0x6e>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	685b      	ldr	r3, [r3, #4]
 800f91a:	f003 0301 	and.w	r3, r3, #1
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d001      	beq.n	800f926 <osThreadNew+0x72>
        return (NULL);
 800f922:	2300      	movs	r3, #0
 800f924:	e054      	b.n	800f9d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	695b      	ldr	r3, [r3, #20]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d003      	beq.n	800f936 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	695b      	ldr	r3, [r3, #20]
 800f932:	089b      	lsrs	r3, r3, #2
 800f934:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	689b      	ldr	r3, [r3, #8]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d00e      	beq.n	800f95c <osThreadNew+0xa8>
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	68db      	ldr	r3, [r3, #12]
 800f942:	2bbb      	cmp	r3, #187	; 0xbb
 800f944:	d90a      	bls.n	800f95c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d006      	beq.n	800f95c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	695b      	ldr	r3, [r3, #20]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d002      	beq.n	800f95c <osThreadNew+0xa8>
        mem = 1;
 800f956:	2301      	movs	r3, #1
 800f958:	61bb      	str	r3, [r7, #24]
 800f95a:	e010      	b.n	800f97e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	689b      	ldr	r3, [r3, #8]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d10c      	bne.n	800f97e <osThreadNew+0xca>
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	68db      	ldr	r3, [r3, #12]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d108      	bne.n	800f97e <osThreadNew+0xca>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	691b      	ldr	r3, [r3, #16]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d104      	bne.n	800f97e <osThreadNew+0xca>
          mem = 0;
 800f974:	2300      	movs	r3, #0
 800f976:	61bb      	str	r3, [r7, #24]
 800f978:	e001      	b.n	800f97e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f97a:	2300      	movs	r3, #0
 800f97c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f97e:	69bb      	ldr	r3, [r7, #24]
 800f980:	2b01      	cmp	r3, #1
 800f982:	d110      	bne.n	800f9a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f988:	687a      	ldr	r2, [r7, #4]
 800f98a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f98c:	9202      	str	r2, [sp, #8]
 800f98e:	9301      	str	r3, [sp, #4]
 800f990:	69fb      	ldr	r3, [r7, #28]
 800f992:	9300      	str	r3, [sp, #0]
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	6a3a      	ldr	r2, [r7, #32]
 800f998:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f99a:	68f8      	ldr	r0, [r7, #12]
 800f99c:	f001 fbc6 	bl	801112c <xTaskCreateStatic>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	613b      	str	r3, [r7, #16]
 800f9a4:	e013      	b.n	800f9ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f9a6:	69bb      	ldr	r3, [r7, #24]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d110      	bne.n	800f9ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f9ac:	6a3b      	ldr	r3, [r7, #32]
 800f9ae:	b29a      	uxth	r2, r3
 800f9b0:	f107 0310 	add.w	r3, r7, #16
 800f9b4:	9301      	str	r3, [sp, #4]
 800f9b6:	69fb      	ldr	r3, [r7, #28]
 800f9b8:	9300      	str	r3, [sp, #0]
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f9be:	68f8      	ldr	r0, [r7, #12]
 800f9c0:	f001 fc11 	bl	80111e6 <xTaskCreate>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	2b01      	cmp	r3, #1
 800f9c8:	d001      	beq.n	800f9ce <osThreadNew+0x11a>
            hTask = NULL;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f9ce:	693b      	ldr	r3, [r7, #16]
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3728      	adds	r7, #40	; 0x28
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800f9dc:	2000      	movs	r0, #0
 800f9de:	f001 fd5d 	bl	801149c <vTaskDelete>
#endif
  for (;;);
 800f9e2:	e7fe      	b.n	800f9e2 <osThreadExit+0xa>

0800f9e4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b08a      	sub	sp, #40	; 0x28
 800f9e8:	af02      	add	r7, sp, #8
 800f9ea:	60f8      	str	r0, [r7, #12]
 800f9ec:	60b9      	str	r1, [r7, #8]
 800f9ee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9f4:	f3ef 8305 	mrs	r3, IPSR
 800f9f8:	613b      	str	r3, [r7, #16]
  return(result);
 800f9fa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d175      	bne.n	800faec <osSemaphoreNew+0x108>
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d072      	beq.n	800faec <osSemaphoreNew+0x108>
 800fa06:	68ba      	ldr	r2, [r7, #8]
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d86e      	bhi.n	800faec <osSemaphoreNew+0x108>
    mem = -1;
 800fa0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fa12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d015      	beq.n	800fa46 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	689b      	ldr	r3, [r3, #8]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d006      	beq.n	800fa30 <osSemaphoreNew+0x4c>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	68db      	ldr	r3, [r3, #12]
 800fa26:	2b4f      	cmp	r3, #79	; 0x4f
 800fa28:	d902      	bls.n	800fa30 <osSemaphoreNew+0x4c>
        mem = 1;
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	61bb      	str	r3, [r7, #24]
 800fa2e:	e00c      	b.n	800fa4a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	689b      	ldr	r3, [r3, #8]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d108      	bne.n	800fa4a <osSemaphoreNew+0x66>
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	68db      	ldr	r3, [r3, #12]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d104      	bne.n	800fa4a <osSemaphoreNew+0x66>
          mem = 0;
 800fa40:	2300      	movs	r3, #0
 800fa42:	61bb      	str	r3, [r7, #24]
 800fa44:	e001      	b.n	800fa4a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800fa46:	2300      	movs	r3, #0
 800fa48:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800fa4a:	69bb      	ldr	r3, [r7, #24]
 800fa4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa50:	d04c      	beq.n	800faec <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	2b01      	cmp	r3, #1
 800fa56:	d128      	bne.n	800faaa <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800fa58:	69bb      	ldr	r3, [r7, #24]
 800fa5a:	2b01      	cmp	r3, #1
 800fa5c:	d10a      	bne.n	800fa74 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	689b      	ldr	r3, [r3, #8]
 800fa62:	2203      	movs	r2, #3
 800fa64:	9200      	str	r2, [sp, #0]
 800fa66:	2200      	movs	r2, #0
 800fa68:	2100      	movs	r1, #0
 800fa6a:	2001      	movs	r0, #1
 800fa6c:	f000 fb7c 	bl	8010168 <xQueueGenericCreateStatic>
 800fa70:	61f8      	str	r0, [r7, #28]
 800fa72:	e005      	b.n	800fa80 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800fa74:	2203      	movs	r2, #3
 800fa76:	2100      	movs	r1, #0
 800fa78:	2001      	movs	r0, #1
 800fa7a:	f000 fbed 	bl	8010258 <xQueueGenericCreate>
 800fa7e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800fa80:	69fb      	ldr	r3, [r7, #28]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d022      	beq.n	800facc <osSemaphoreNew+0xe8>
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d01f      	beq.n	800facc <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	2200      	movs	r2, #0
 800fa90:	2100      	movs	r1, #0
 800fa92:	69f8      	ldr	r0, [r7, #28]
 800fa94:	f000 fca8 	bl	80103e8 <xQueueGenericSend>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	2b01      	cmp	r3, #1
 800fa9c:	d016      	beq.n	800facc <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800fa9e:	69f8      	ldr	r0, [r7, #28]
 800faa0:	f001 f970 	bl	8010d84 <vQueueDelete>
            hSemaphore = NULL;
 800faa4:	2300      	movs	r3, #0
 800faa6:	61fb      	str	r3, [r7, #28]
 800faa8:	e010      	b.n	800facc <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800faaa:	69bb      	ldr	r3, [r7, #24]
 800faac:	2b01      	cmp	r3, #1
 800faae:	d108      	bne.n	800fac2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	689b      	ldr	r3, [r3, #8]
 800fab4:	461a      	mov	r2, r3
 800fab6:	68b9      	ldr	r1, [r7, #8]
 800fab8:	68f8      	ldr	r0, [r7, #12]
 800faba:	f000 fc2a 	bl	8010312 <xQueueCreateCountingSemaphoreStatic>
 800fabe:	61f8      	str	r0, [r7, #28]
 800fac0:	e004      	b.n	800facc <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800fac2:	68b9      	ldr	r1, [r7, #8]
 800fac4:	68f8      	ldr	r0, [r7, #12]
 800fac6:	f000 fc5b 	bl	8010380 <xQueueCreateCountingSemaphore>
 800faca:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800facc:	69fb      	ldr	r3, [r7, #28]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d00c      	beq.n	800faec <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d003      	beq.n	800fae0 <osSemaphoreNew+0xfc>
          name = attr->name;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	617b      	str	r3, [r7, #20]
 800fade:	e001      	b.n	800fae4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800fae0:	2300      	movs	r3, #0
 800fae2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800fae4:	6979      	ldr	r1, [r7, #20]
 800fae6:	69f8      	ldr	r0, [r7, #28]
 800fae8:	f001 fa98 	bl	801101c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800faec:	69fb      	ldr	r3, [r7, #28]
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3720      	adds	r7, #32
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
	...

0800faf8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b086      	sub	sp, #24
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
 800fb00:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800fb06:	2300      	movs	r3, #0
 800fb08:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800fb0a:	693b      	ldr	r3, [r7, #16]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d103      	bne.n	800fb18 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800fb10:	f06f 0303 	mvn.w	r3, #3
 800fb14:	617b      	str	r3, [r7, #20]
 800fb16:	e039      	b.n	800fb8c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb18:	f3ef 8305 	mrs	r3, IPSR
 800fb1c:	60fb      	str	r3, [r7, #12]
  return(result);
 800fb1e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d022      	beq.n	800fb6a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d003      	beq.n	800fb32 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800fb2a:	f06f 0303 	mvn.w	r3, #3
 800fb2e:	617b      	str	r3, [r7, #20]
 800fb30:	e02c      	b.n	800fb8c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800fb32:	2300      	movs	r3, #0
 800fb34:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800fb36:	f107 0308 	add.w	r3, r7, #8
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	2100      	movs	r1, #0
 800fb3e:	6938      	ldr	r0, [r7, #16]
 800fb40:	f001 f864 	bl	8010c0c <xQueueReceiveFromISR>
 800fb44:	4603      	mov	r3, r0
 800fb46:	2b01      	cmp	r3, #1
 800fb48:	d003      	beq.n	800fb52 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800fb4a:	f06f 0302 	mvn.w	r3, #2
 800fb4e:	617b      	str	r3, [r7, #20]
 800fb50:	e01c      	b.n	800fb8c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d019      	beq.n	800fb8c <osSemaphoreAcquire+0x94>
 800fb58:	4b0f      	ldr	r3, [pc, #60]	; (800fb98 <osSemaphoreAcquire+0xa0>)
 800fb5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb5e:	601a      	str	r2, [r3, #0]
 800fb60:	f3bf 8f4f 	dsb	sy
 800fb64:	f3bf 8f6f 	isb	sy
 800fb68:	e010      	b.n	800fb8c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800fb6a:	6839      	ldr	r1, [r7, #0]
 800fb6c:	6938      	ldr	r0, [r7, #16]
 800fb6e:	f000 ff41 	bl	80109f4 <xQueueSemaphoreTake>
 800fb72:	4603      	mov	r3, r0
 800fb74:	2b01      	cmp	r3, #1
 800fb76:	d009      	beq.n	800fb8c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d003      	beq.n	800fb86 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800fb7e:	f06f 0301 	mvn.w	r3, #1
 800fb82:	617b      	str	r3, [r7, #20]
 800fb84:	e002      	b.n	800fb8c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800fb86:	f06f 0302 	mvn.w	r3, #2
 800fb8a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800fb8c:	697b      	ldr	r3, [r7, #20]
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	3718      	adds	r7, #24
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}
 800fb96:	bf00      	nop
 800fb98:	e000ed04 	.word	0xe000ed04

0800fb9c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b086      	sub	sp, #24
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d103      	bne.n	800fbba <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800fbb2:	f06f 0303 	mvn.w	r3, #3
 800fbb6:	617b      	str	r3, [r7, #20]
 800fbb8:	e02c      	b.n	800fc14 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fbba:	f3ef 8305 	mrs	r3, IPSR
 800fbbe:	60fb      	str	r3, [r7, #12]
  return(result);
 800fbc0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d01a      	beq.n	800fbfc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800fbca:	f107 0308 	add.w	r3, r7, #8
 800fbce:	4619      	mov	r1, r3
 800fbd0:	6938      	ldr	r0, [r7, #16]
 800fbd2:	f000 fda2 	bl	801071a <xQueueGiveFromISR>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	2b01      	cmp	r3, #1
 800fbda:	d003      	beq.n	800fbe4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800fbdc:	f06f 0302 	mvn.w	r3, #2
 800fbe0:	617b      	str	r3, [r7, #20]
 800fbe2:	e017      	b.n	800fc14 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d014      	beq.n	800fc14 <osSemaphoreRelease+0x78>
 800fbea:	4b0d      	ldr	r3, [pc, #52]	; (800fc20 <osSemaphoreRelease+0x84>)
 800fbec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbf0:	601a      	str	r2, [r3, #0]
 800fbf2:	f3bf 8f4f 	dsb	sy
 800fbf6:	f3bf 8f6f 	isb	sy
 800fbfa:	e00b      	b.n	800fc14 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	2200      	movs	r2, #0
 800fc00:	2100      	movs	r1, #0
 800fc02:	6938      	ldr	r0, [r7, #16]
 800fc04:	f000 fbf0 	bl	80103e8 <xQueueGenericSend>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	2b01      	cmp	r3, #1
 800fc0c:	d002      	beq.n	800fc14 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800fc0e:	f06f 0302 	mvn.w	r3, #2
 800fc12:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800fc14:	697b      	ldr	r3, [r7, #20]
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	3718      	adds	r7, #24
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	e000ed04 	.word	0xe000ed04

0800fc24 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b08a      	sub	sp, #40	; 0x28
 800fc28:	af02      	add	r7, sp, #8
 800fc2a:	60f8      	str	r0, [r7, #12]
 800fc2c:	60b9      	str	r1, [r7, #8]
 800fc2e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800fc30:	2300      	movs	r3, #0
 800fc32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc34:	f3ef 8305 	mrs	r3, IPSR
 800fc38:	613b      	str	r3, [r7, #16]
  return(result);
 800fc3a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d15f      	bne.n	800fd00 <osMessageQueueNew+0xdc>
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d05c      	beq.n	800fd00 <osMessageQueueNew+0xdc>
 800fc46:	68bb      	ldr	r3, [r7, #8]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d059      	beq.n	800fd00 <osMessageQueueNew+0xdc>
    mem = -1;
 800fc4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc50:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d029      	beq.n	800fcac <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	689b      	ldr	r3, [r3, #8]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d012      	beq.n	800fc86 <osMessageQueueNew+0x62>
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	68db      	ldr	r3, [r3, #12]
 800fc64:	2b4f      	cmp	r3, #79	; 0x4f
 800fc66:	d90e      	bls.n	800fc86 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d00a      	beq.n	800fc86 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	695a      	ldr	r2, [r3, #20]
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	68b9      	ldr	r1, [r7, #8]
 800fc78:	fb01 f303 	mul.w	r3, r1, r3
 800fc7c:	429a      	cmp	r2, r3
 800fc7e:	d302      	bcc.n	800fc86 <osMessageQueueNew+0x62>
        mem = 1;
 800fc80:	2301      	movs	r3, #1
 800fc82:	61bb      	str	r3, [r7, #24]
 800fc84:	e014      	b.n	800fcb0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	689b      	ldr	r3, [r3, #8]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d110      	bne.n	800fcb0 <osMessageQueueNew+0x8c>
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	68db      	ldr	r3, [r3, #12]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d10c      	bne.n	800fcb0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d108      	bne.n	800fcb0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	695b      	ldr	r3, [r3, #20]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d104      	bne.n	800fcb0 <osMessageQueueNew+0x8c>
          mem = 0;
 800fca6:	2300      	movs	r3, #0
 800fca8:	61bb      	str	r3, [r7, #24]
 800fcaa:	e001      	b.n	800fcb0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800fcac:	2300      	movs	r3, #0
 800fcae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fcb0:	69bb      	ldr	r3, [r7, #24]
 800fcb2:	2b01      	cmp	r3, #1
 800fcb4:	d10b      	bne.n	800fcce <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	691a      	ldr	r2, [r3, #16]
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	689b      	ldr	r3, [r3, #8]
 800fcbe:	2100      	movs	r1, #0
 800fcc0:	9100      	str	r1, [sp, #0]
 800fcc2:	68b9      	ldr	r1, [r7, #8]
 800fcc4:	68f8      	ldr	r0, [r7, #12]
 800fcc6:	f000 fa4f 	bl	8010168 <xQueueGenericCreateStatic>
 800fcca:	61f8      	str	r0, [r7, #28]
 800fccc:	e008      	b.n	800fce0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800fcce:	69bb      	ldr	r3, [r7, #24]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d105      	bne.n	800fce0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	68b9      	ldr	r1, [r7, #8]
 800fcd8:	68f8      	ldr	r0, [r7, #12]
 800fcda:	f000 fabd 	bl	8010258 <xQueueGenericCreate>
 800fcde:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800fce0:	69fb      	ldr	r3, [r7, #28]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d00c      	beq.n	800fd00 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d003      	beq.n	800fcf4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	617b      	str	r3, [r7, #20]
 800fcf2:	e001      	b.n	800fcf8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800fcf8:	6979      	ldr	r1, [r7, #20]
 800fcfa:	69f8      	ldr	r0, [r7, #28]
 800fcfc:	f001 f98e 	bl	801101c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800fd00:	69fb      	ldr	r3, [r7, #28]
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	3720      	adds	r7, #32
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}
	...

0800fd0c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b088      	sub	sp, #32
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	60f8      	str	r0, [r7, #12]
 800fd14:	60b9      	str	r1, [r7, #8]
 800fd16:	603b      	str	r3, [r7, #0]
 800fd18:	4613      	mov	r3, r2
 800fd1a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fd20:	2300      	movs	r3, #0
 800fd22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd24:	f3ef 8305 	mrs	r3, IPSR
 800fd28:	617b      	str	r3, [r7, #20]
  return(result);
 800fd2a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d028      	beq.n	800fd82 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fd30:	69bb      	ldr	r3, [r7, #24]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d005      	beq.n	800fd42 <osMessageQueuePut+0x36>
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d002      	beq.n	800fd42 <osMessageQueuePut+0x36>
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d003      	beq.n	800fd4a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800fd42:	f06f 0303 	mvn.w	r3, #3
 800fd46:	61fb      	str	r3, [r7, #28]
 800fd48:	e038      	b.n	800fdbc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800fd4e:	f107 0210 	add.w	r2, r7, #16
 800fd52:	2300      	movs	r3, #0
 800fd54:	68b9      	ldr	r1, [r7, #8]
 800fd56:	69b8      	ldr	r0, [r7, #24]
 800fd58:	f000 fc44 	bl	80105e4 <xQueueGenericSendFromISR>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	2b01      	cmp	r3, #1
 800fd60:	d003      	beq.n	800fd6a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800fd62:	f06f 0302 	mvn.w	r3, #2
 800fd66:	61fb      	str	r3, [r7, #28]
 800fd68:	e028      	b.n	800fdbc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800fd6a:	693b      	ldr	r3, [r7, #16]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d025      	beq.n	800fdbc <osMessageQueuePut+0xb0>
 800fd70:	4b15      	ldr	r3, [pc, #84]	; (800fdc8 <osMessageQueuePut+0xbc>)
 800fd72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd76:	601a      	str	r2, [r3, #0]
 800fd78:	f3bf 8f4f 	dsb	sy
 800fd7c:	f3bf 8f6f 	isb	sy
 800fd80:	e01c      	b.n	800fdbc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fd82:	69bb      	ldr	r3, [r7, #24]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d002      	beq.n	800fd8e <osMessageQueuePut+0x82>
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d103      	bne.n	800fd96 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800fd8e:	f06f 0303 	mvn.w	r3, #3
 800fd92:	61fb      	str	r3, [r7, #28]
 800fd94:	e012      	b.n	800fdbc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fd96:	2300      	movs	r3, #0
 800fd98:	683a      	ldr	r2, [r7, #0]
 800fd9a:	68b9      	ldr	r1, [r7, #8]
 800fd9c:	69b8      	ldr	r0, [r7, #24]
 800fd9e:	f000 fb23 	bl	80103e8 <xQueueGenericSend>
 800fda2:	4603      	mov	r3, r0
 800fda4:	2b01      	cmp	r3, #1
 800fda6:	d009      	beq.n	800fdbc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d003      	beq.n	800fdb6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800fdae:	f06f 0301 	mvn.w	r3, #1
 800fdb2:	61fb      	str	r3, [r7, #28]
 800fdb4:	e002      	b.n	800fdbc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800fdb6:	f06f 0302 	mvn.w	r3, #2
 800fdba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800fdbc:	69fb      	ldr	r3, [r7, #28]
}
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	3720      	adds	r7, #32
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}
 800fdc6:	bf00      	nop
 800fdc8:	e000ed04 	.word	0xe000ed04

0800fdcc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b088      	sub	sp, #32
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	60f8      	str	r0, [r7, #12]
 800fdd4:	60b9      	str	r1, [r7, #8]
 800fdd6:	607a      	str	r2, [r7, #4]
 800fdd8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fdde:	2300      	movs	r3, #0
 800fde0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fde2:	f3ef 8305 	mrs	r3, IPSR
 800fde6:	617b      	str	r3, [r7, #20]
  return(result);
 800fde8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d028      	beq.n	800fe40 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fdee:	69bb      	ldr	r3, [r7, #24]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d005      	beq.n	800fe00 <osMessageQueueGet+0x34>
 800fdf4:	68bb      	ldr	r3, [r7, #8]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d002      	beq.n	800fe00 <osMessageQueueGet+0x34>
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d003      	beq.n	800fe08 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800fe00:	f06f 0303 	mvn.w	r3, #3
 800fe04:	61fb      	str	r3, [r7, #28]
 800fe06:	e037      	b.n	800fe78 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800fe0c:	f107 0310 	add.w	r3, r7, #16
 800fe10:	461a      	mov	r2, r3
 800fe12:	68b9      	ldr	r1, [r7, #8]
 800fe14:	69b8      	ldr	r0, [r7, #24]
 800fe16:	f000 fef9 	bl	8010c0c <xQueueReceiveFromISR>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	2b01      	cmp	r3, #1
 800fe1e:	d003      	beq.n	800fe28 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800fe20:	f06f 0302 	mvn.w	r3, #2
 800fe24:	61fb      	str	r3, [r7, #28]
 800fe26:	e027      	b.n	800fe78 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d024      	beq.n	800fe78 <osMessageQueueGet+0xac>
 800fe2e:	4b15      	ldr	r3, [pc, #84]	; (800fe84 <osMessageQueueGet+0xb8>)
 800fe30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe34:	601a      	str	r2, [r3, #0]
 800fe36:	f3bf 8f4f 	dsb	sy
 800fe3a:	f3bf 8f6f 	isb	sy
 800fe3e:	e01b      	b.n	800fe78 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fe40:	69bb      	ldr	r3, [r7, #24]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d002      	beq.n	800fe4c <osMessageQueueGet+0x80>
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d103      	bne.n	800fe54 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800fe4c:	f06f 0303 	mvn.w	r3, #3
 800fe50:	61fb      	str	r3, [r7, #28]
 800fe52:	e011      	b.n	800fe78 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fe54:	683a      	ldr	r2, [r7, #0]
 800fe56:	68b9      	ldr	r1, [r7, #8]
 800fe58:	69b8      	ldr	r0, [r7, #24]
 800fe5a:	f000 fceb 	bl	8010834 <xQueueReceive>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	2b01      	cmp	r3, #1
 800fe62:	d009      	beq.n	800fe78 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d003      	beq.n	800fe72 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800fe6a:	f06f 0301 	mvn.w	r3, #1
 800fe6e:	61fb      	str	r3, [r7, #28]
 800fe70:	e002      	b.n	800fe78 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800fe72:	f06f 0302 	mvn.w	r3, #2
 800fe76:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800fe78:	69fb      	ldr	r3, [r7, #28]
}
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	3720      	adds	r7, #32
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bd80      	pop	{r7, pc}
 800fe82:	bf00      	nop
 800fe84:	e000ed04 	.word	0xe000ed04

0800fe88 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b086      	sub	sp, #24
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d102      	bne.n	800fea0 <osMessageQueueGetCount+0x18>
    count = 0U;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	617b      	str	r3, [r7, #20]
 800fe9e:	e00e      	b.n	800febe <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fea0:	f3ef 8305 	mrs	r3, IPSR
 800fea4:	60fb      	str	r3, [r7, #12]
  return(result);
 800fea6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d004      	beq.n	800feb6 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800feac:	6938      	ldr	r0, [r7, #16]
 800feae:	f000 ff4b 	bl	8010d48 <uxQueueMessagesWaitingFromISR>
 800feb2:	6178      	str	r0, [r7, #20]
 800feb4:	e003      	b.n	800febe <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800feb6:	6938      	ldr	r0, [r7, #16]
 800feb8:	f000 ff28 	bl	8010d0c <uxQueueMessagesWaiting>
 800febc:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800febe:	697b      	ldr	r3, [r7, #20]
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3718      	adds	r7, #24
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fec8:	b480      	push	{r7}
 800feca:	b085      	sub	sp, #20
 800fecc:	af00      	add	r7, sp, #0
 800fece:	60f8      	str	r0, [r7, #12]
 800fed0:	60b9      	str	r1, [r7, #8]
 800fed2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	4a07      	ldr	r2, [pc, #28]	; (800fef4 <vApplicationGetIdleTaskMemory+0x2c>)
 800fed8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800feda:	68bb      	ldr	r3, [r7, #8]
 800fedc:	4a06      	ldr	r2, [pc, #24]	; (800fef8 <vApplicationGetIdleTaskMemory+0x30>)
 800fede:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2280      	movs	r2, #128	; 0x80
 800fee4:	601a      	str	r2, [r3, #0]
}
 800fee6:	bf00      	nop
 800fee8:	3714      	adds	r7, #20
 800feea:	46bd      	mov	sp, r7
 800feec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef0:	4770      	bx	lr
 800fef2:	bf00      	nop
 800fef4:	200077cc 	.word	0x200077cc
 800fef8:	20007888 	.word	0x20007888

0800fefc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fefc:	b480      	push	{r7}
 800fefe:	b085      	sub	sp, #20
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	60f8      	str	r0, [r7, #12]
 800ff04:	60b9      	str	r1, [r7, #8]
 800ff06:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	4a07      	ldr	r2, [pc, #28]	; (800ff28 <vApplicationGetTimerTaskMemory+0x2c>)
 800ff0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	4a06      	ldr	r2, [pc, #24]	; (800ff2c <vApplicationGetTimerTaskMemory+0x30>)
 800ff12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ff1a:	601a      	str	r2, [r3, #0]
}
 800ff1c:	bf00      	nop
 800ff1e:	3714      	adds	r7, #20
 800ff20:	46bd      	mov	sp, r7
 800ff22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff26:	4770      	bx	lr
 800ff28:	20007a88 	.word	0x20007a88
 800ff2c:	20007b44 	.word	0x20007b44

0800ff30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ff30:	b480      	push	{r7}
 800ff32:	b083      	sub	sp, #12
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f103 0208 	add.w	r2, r3, #8
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f103 0208 	add.w	r2, r3, #8
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f103 0208 	add.w	r2, r3, #8
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2200      	movs	r2, #0
 800ff62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ff64:	bf00      	nop
 800ff66:	370c      	adds	r7, #12
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6e:	4770      	bx	lr

0800ff70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ff70:	b480      	push	{r7}
 800ff72:	b083      	sub	sp, #12
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ff7e:	bf00      	nop
 800ff80:	370c      	adds	r7, #12
 800ff82:	46bd      	mov	sp, r7
 800ff84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff88:	4770      	bx	lr

0800ff8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ff8a:	b480      	push	{r7}
 800ff8c:	b085      	sub	sp, #20
 800ff8e:	af00      	add	r7, sp, #0
 800ff90:	6078      	str	r0, [r7, #4]
 800ff92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	685b      	ldr	r3, [r3, #4]
 800ff98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	68fa      	ldr	r2, [r7, #12]
 800ff9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	689a      	ldr	r2, [r3, #8]
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	689b      	ldr	r3, [r3, #8]
 800ffac:	683a      	ldr	r2, [r7, #0]
 800ffae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	683a      	ldr	r2, [r7, #0]
 800ffb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	687a      	ldr	r2, [r7, #4]
 800ffba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	1c5a      	adds	r2, r3, #1
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	601a      	str	r2, [r3, #0]
}
 800ffc6:	bf00      	nop
 800ffc8:	3714      	adds	r7, #20
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd0:	4770      	bx	lr

0800ffd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ffd2:	b480      	push	{r7}
 800ffd4:	b085      	sub	sp, #20
 800ffd6:	af00      	add	r7, sp, #0
 800ffd8:	6078      	str	r0, [r7, #4]
 800ffda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ffe8:	d103      	bne.n	800fff2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	691b      	ldr	r3, [r3, #16]
 800ffee:	60fb      	str	r3, [r7, #12]
 800fff0:	e00c      	b.n	801000c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	3308      	adds	r3, #8
 800fff6:	60fb      	str	r3, [r7, #12]
 800fff8:	e002      	b.n	8010000 <vListInsert+0x2e>
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	685b      	ldr	r3, [r3, #4]
 800fffe:	60fb      	str	r3, [r7, #12]
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	685b      	ldr	r3, [r3, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	68ba      	ldr	r2, [r7, #8]
 8010008:	429a      	cmp	r2, r3
 801000a:	d2f6      	bcs.n	800fffa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	685a      	ldr	r2, [r3, #4]
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	685b      	ldr	r3, [r3, #4]
 8010018:	683a      	ldr	r2, [r7, #0]
 801001a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	68fa      	ldr	r2, [r7, #12]
 8010020:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	683a      	ldr	r2, [r7, #0]
 8010026:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	1c5a      	adds	r2, r3, #1
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	601a      	str	r2, [r3, #0]
}
 8010038:	bf00      	nop
 801003a:	3714      	adds	r7, #20
 801003c:	46bd      	mov	sp, r7
 801003e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010042:	4770      	bx	lr

08010044 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010044:	b480      	push	{r7}
 8010046:	b085      	sub	sp, #20
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	691b      	ldr	r3, [r3, #16]
 8010050:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	685b      	ldr	r3, [r3, #4]
 8010056:	687a      	ldr	r2, [r7, #4]
 8010058:	6892      	ldr	r2, [r2, #8]
 801005a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	689b      	ldr	r3, [r3, #8]
 8010060:	687a      	ldr	r2, [r7, #4]
 8010062:	6852      	ldr	r2, [r2, #4]
 8010064:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	685b      	ldr	r3, [r3, #4]
 801006a:	687a      	ldr	r2, [r7, #4]
 801006c:	429a      	cmp	r2, r3
 801006e:	d103      	bne.n	8010078 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	689a      	ldr	r2, [r3, #8]
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2200      	movs	r2, #0
 801007c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	1e5a      	subs	r2, r3, #1
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	681b      	ldr	r3, [r3, #0]
}
 801008c:	4618      	mov	r0, r3
 801008e:	3714      	adds	r7, #20
 8010090:	46bd      	mov	sp, r7
 8010092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010096:	4770      	bx	lr

08010098 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b084      	sub	sp, #16
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
 80100a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d10a      	bne.n	80100c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80100ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100b0:	f383 8811 	msr	BASEPRI, r3
 80100b4:	f3bf 8f6f 	isb	sy
 80100b8:	f3bf 8f4f 	dsb	sy
 80100bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80100be:	bf00      	nop
 80100c0:	e7fe      	b.n	80100c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80100c2:	f002 fd0f 	bl	8012ae4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	681a      	ldr	r2, [r3, #0]
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100ce:	68f9      	ldr	r1, [r7, #12]
 80100d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80100d2:	fb01 f303 	mul.w	r3, r1, r3
 80100d6:	441a      	add	r2, r3
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	2200      	movs	r2, #0
 80100e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	681a      	ldr	r2, [r3, #0]
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	681a      	ldr	r2, [r3, #0]
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100f2:	3b01      	subs	r3, #1
 80100f4:	68f9      	ldr	r1, [r7, #12]
 80100f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80100f8:	fb01 f303 	mul.w	r3, r1, r3
 80100fc:	441a      	add	r2, r3
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	22ff      	movs	r2, #255	; 0xff
 8010106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	22ff      	movs	r2, #255	; 0xff
 801010e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d114      	bne.n	8010142 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	691b      	ldr	r3, [r3, #16]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d01a      	beq.n	8010156 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	3310      	adds	r3, #16
 8010124:	4618      	mov	r0, r3
 8010126:	f001 fcc5 	bl	8011ab4 <xTaskRemoveFromEventList>
 801012a:	4603      	mov	r3, r0
 801012c:	2b00      	cmp	r3, #0
 801012e:	d012      	beq.n	8010156 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010130:	4b0c      	ldr	r3, [pc, #48]	; (8010164 <xQueueGenericReset+0xcc>)
 8010132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010136:	601a      	str	r2, [r3, #0]
 8010138:	f3bf 8f4f 	dsb	sy
 801013c:	f3bf 8f6f 	isb	sy
 8010140:	e009      	b.n	8010156 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	3310      	adds	r3, #16
 8010146:	4618      	mov	r0, r3
 8010148:	f7ff fef2 	bl	800ff30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	3324      	adds	r3, #36	; 0x24
 8010150:	4618      	mov	r0, r3
 8010152:	f7ff feed 	bl	800ff30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010156:	f002 fcf5 	bl	8012b44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801015a:	2301      	movs	r3, #1
}
 801015c:	4618      	mov	r0, r3
 801015e:	3710      	adds	r7, #16
 8010160:	46bd      	mov	sp, r7
 8010162:	bd80      	pop	{r7, pc}
 8010164:	e000ed04 	.word	0xe000ed04

08010168 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010168:	b580      	push	{r7, lr}
 801016a:	b08e      	sub	sp, #56	; 0x38
 801016c:	af02      	add	r7, sp, #8
 801016e:	60f8      	str	r0, [r7, #12]
 8010170:	60b9      	str	r1, [r7, #8]
 8010172:	607a      	str	r2, [r7, #4]
 8010174:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d10a      	bne.n	8010192 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801017c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010180:	f383 8811 	msr	BASEPRI, r3
 8010184:	f3bf 8f6f 	isb	sy
 8010188:	f3bf 8f4f 	dsb	sy
 801018c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801018e:	bf00      	nop
 8010190:	e7fe      	b.n	8010190 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d10a      	bne.n	80101ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010198:	f04f 0350 	mov.w	r3, #80	; 0x50
 801019c:	f383 8811 	msr	BASEPRI, r3
 80101a0:	f3bf 8f6f 	isb	sy
 80101a4:	f3bf 8f4f 	dsb	sy
 80101a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80101aa:	bf00      	nop
 80101ac:	e7fe      	b.n	80101ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d002      	beq.n	80101ba <xQueueGenericCreateStatic+0x52>
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d001      	beq.n	80101be <xQueueGenericCreateStatic+0x56>
 80101ba:	2301      	movs	r3, #1
 80101bc:	e000      	b.n	80101c0 <xQueueGenericCreateStatic+0x58>
 80101be:	2300      	movs	r3, #0
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d10a      	bne.n	80101da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80101c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c8:	f383 8811 	msr	BASEPRI, r3
 80101cc:	f3bf 8f6f 	isb	sy
 80101d0:	f3bf 8f4f 	dsb	sy
 80101d4:	623b      	str	r3, [r7, #32]
}
 80101d6:	bf00      	nop
 80101d8:	e7fe      	b.n	80101d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d102      	bne.n	80101e6 <xQueueGenericCreateStatic+0x7e>
 80101e0:	68bb      	ldr	r3, [r7, #8]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d101      	bne.n	80101ea <xQueueGenericCreateStatic+0x82>
 80101e6:	2301      	movs	r3, #1
 80101e8:	e000      	b.n	80101ec <xQueueGenericCreateStatic+0x84>
 80101ea:	2300      	movs	r3, #0
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d10a      	bne.n	8010206 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80101f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f4:	f383 8811 	msr	BASEPRI, r3
 80101f8:	f3bf 8f6f 	isb	sy
 80101fc:	f3bf 8f4f 	dsb	sy
 8010200:	61fb      	str	r3, [r7, #28]
}
 8010202:	bf00      	nop
 8010204:	e7fe      	b.n	8010204 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010206:	2350      	movs	r3, #80	; 0x50
 8010208:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	2b50      	cmp	r3, #80	; 0x50
 801020e:	d00a      	beq.n	8010226 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010214:	f383 8811 	msr	BASEPRI, r3
 8010218:	f3bf 8f6f 	isb	sy
 801021c:	f3bf 8f4f 	dsb	sy
 8010220:	61bb      	str	r3, [r7, #24]
}
 8010222:	bf00      	nop
 8010224:	e7fe      	b.n	8010224 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010226:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801022c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801022e:	2b00      	cmp	r3, #0
 8010230:	d00d      	beq.n	801024e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010234:	2201      	movs	r2, #1
 8010236:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801023a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801023e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010240:	9300      	str	r3, [sp, #0]
 8010242:	4613      	mov	r3, r2
 8010244:	687a      	ldr	r2, [r7, #4]
 8010246:	68b9      	ldr	r1, [r7, #8]
 8010248:	68f8      	ldr	r0, [r7, #12]
 801024a:	f000 f83f 	bl	80102cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801024e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010250:	4618      	mov	r0, r3
 8010252:	3730      	adds	r7, #48	; 0x30
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}

08010258 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010258:	b580      	push	{r7, lr}
 801025a:	b08a      	sub	sp, #40	; 0x28
 801025c:	af02      	add	r7, sp, #8
 801025e:	60f8      	str	r0, [r7, #12]
 8010260:	60b9      	str	r1, [r7, #8]
 8010262:	4613      	mov	r3, r2
 8010264:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d10a      	bne.n	8010282 <xQueueGenericCreate+0x2a>
	__asm volatile
 801026c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010270:	f383 8811 	msr	BASEPRI, r3
 8010274:	f3bf 8f6f 	isb	sy
 8010278:	f3bf 8f4f 	dsb	sy
 801027c:	613b      	str	r3, [r7, #16]
}
 801027e:	bf00      	nop
 8010280:	e7fe      	b.n	8010280 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	68ba      	ldr	r2, [r7, #8]
 8010286:	fb02 f303 	mul.w	r3, r2, r3
 801028a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801028c:	69fb      	ldr	r3, [r7, #28]
 801028e:	3350      	adds	r3, #80	; 0x50
 8010290:	4618      	mov	r0, r3
 8010292:	f002 fd49 	bl	8012d28 <pvPortMalloc>
 8010296:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010298:	69bb      	ldr	r3, [r7, #24]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d011      	beq.n	80102c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801029e:	69bb      	ldr	r3, [r7, #24]
 80102a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	3350      	adds	r3, #80	; 0x50
 80102a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80102a8:	69bb      	ldr	r3, [r7, #24]
 80102aa:	2200      	movs	r2, #0
 80102ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80102b0:	79fa      	ldrb	r2, [r7, #7]
 80102b2:	69bb      	ldr	r3, [r7, #24]
 80102b4:	9300      	str	r3, [sp, #0]
 80102b6:	4613      	mov	r3, r2
 80102b8:	697a      	ldr	r2, [r7, #20]
 80102ba:	68b9      	ldr	r1, [r7, #8]
 80102bc:	68f8      	ldr	r0, [r7, #12]
 80102be:	f000 f805 	bl	80102cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80102c2:	69bb      	ldr	r3, [r7, #24]
	}
 80102c4:	4618      	mov	r0, r3
 80102c6:	3720      	adds	r7, #32
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}

080102cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b084      	sub	sp, #16
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	60f8      	str	r0, [r7, #12]
 80102d4:	60b9      	str	r1, [r7, #8]
 80102d6:	607a      	str	r2, [r7, #4]
 80102d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80102da:	68bb      	ldr	r3, [r7, #8]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d103      	bne.n	80102e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80102e0:	69bb      	ldr	r3, [r7, #24]
 80102e2:	69ba      	ldr	r2, [r7, #24]
 80102e4:	601a      	str	r2, [r3, #0]
 80102e6:	e002      	b.n	80102ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80102e8:	69bb      	ldr	r3, [r7, #24]
 80102ea:	687a      	ldr	r2, [r7, #4]
 80102ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80102ee:	69bb      	ldr	r3, [r7, #24]
 80102f0:	68fa      	ldr	r2, [r7, #12]
 80102f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80102f4:	69bb      	ldr	r3, [r7, #24]
 80102f6:	68ba      	ldr	r2, [r7, #8]
 80102f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80102fa:	2101      	movs	r1, #1
 80102fc:	69b8      	ldr	r0, [r7, #24]
 80102fe:	f7ff fecb 	bl	8010098 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010302:	69bb      	ldr	r3, [r7, #24]
 8010304:	78fa      	ldrb	r2, [r7, #3]
 8010306:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801030a:	bf00      	nop
 801030c:	3710      	adds	r7, #16
 801030e:	46bd      	mov	sp, r7
 8010310:	bd80      	pop	{r7, pc}

08010312 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010312:	b580      	push	{r7, lr}
 8010314:	b08a      	sub	sp, #40	; 0x28
 8010316:	af02      	add	r7, sp, #8
 8010318:	60f8      	str	r0, [r7, #12]
 801031a:	60b9      	str	r1, [r7, #8]
 801031c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d10a      	bne.n	801033a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8010324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010328:	f383 8811 	msr	BASEPRI, r3
 801032c:	f3bf 8f6f 	isb	sy
 8010330:	f3bf 8f4f 	dsb	sy
 8010334:	61bb      	str	r3, [r7, #24]
}
 8010336:	bf00      	nop
 8010338:	e7fe      	b.n	8010338 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801033a:	68ba      	ldr	r2, [r7, #8]
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	429a      	cmp	r2, r3
 8010340:	d90a      	bls.n	8010358 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8010342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010346:	f383 8811 	msr	BASEPRI, r3
 801034a:	f3bf 8f6f 	isb	sy
 801034e:	f3bf 8f4f 	dsb	sy
 8010352:	617b      	str	r3, [r7, #20]
}
 8010354:	bf00      	nop
 8010356:	e7fe      	b.n	8010356 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010358:	2302      	movs	r3, #2
 801035a:	9300      	str	r3, [sp, #0]
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	2200      	movs	r2, #0
 8010360:	2100      	movs	r1, #0
 8010362:	68f8      	ldr	r0, [r7, #12]
 8010364:	f7ff ff00 	bl	8010168 <xQueueGenericCreateStatic>
 8010368:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801036a:	69fb      	ldr	r3, [r7, #28]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d002      	beq.n	8010376 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010370:	69fb      	ldr	r3, [r7, #28]
 8010372:	68ba      	ldr	r2, [r7, #8]
 8010374:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010376:	69fb      	ldr	r3, [r7, #28]
	}
 8010378:	4618      	mov	r0, r3
 801037a:	3720      	adds	r7, #32
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}

08010380 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010380:	b580      	push	{r7, lr}
 8010382:	b086      	sub	sp, #24
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d10a      	bne.n	80103a6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8010390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010394:	f383 8811 	msr	BASEPRI, r3
 8010398:	f3bf 8f6f 	isb	sy
 801039c:	f3bf 8f4f 	dsb	sy
 80103a0:	613b      	str	r3, [r7, #16]
}
 80103a2:	bf00      	nop
 80103a4:	e7fe      	b.n	80103a4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80103a6:	683a      	ldr	r2, [r7, #0]
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	429a      	cmp	r2, r3
 80103ac:	d90a      	bls.n	80103c4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80103ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103b2:	f383 8811 	msr	BASEPRI, r3
 80103b6:	f3bf 8f6f 	isb	sy
 80103ba:	f3bf 8f4f 	dsb	sy
 80103be:	60fb      	str	r3, [r7, #12]
}
 80103c0:	bf00      	nop
 80103c2:	e7fe      	b.n	80103c2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80103c4:	2202      	movs	r2, #2
 80103c6:	2100      	movs	r1, #0
 80103c8:	6878      	ldr	r0, [r7, #4]
 80103ca:	f7ff ff45 	bl	8010258 <xQueueGenericCreate>
 80103ce:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80103d0:	697b      	ldr	r3, [r7, #20]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d002      	beq.n	80103dc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	683a      	ldr	r2, [r7, #0]
 80103da:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80103dc:	697b      	ldr	r3, [r7, #20]
	}
 80103de:	4618      	mov	r0, r3
 80103e0:	3718      	adds	r7, #24
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}
	...

080103e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b08e      	sub	sp, #56	; 0x38
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	60f8      	str	r0, [r7, #12]
 80103f0:	60b9      	str	r1, [r7, #8]
 80103f2:	607a      	str	r2, [r7, #4]
 80103f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80103f6:	2300      	movs	r3, #0
 80103f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80103fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010400:	2b00      	cmp	r3, #0
 8010402:	d10a      	bne.n	801041a <xQueueGenericSend+0x32>
	__asm volatile
 8010404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010408:	f383 8811 	msr	BASEPRI, r3
 801040c:	f3bf 8f6f 	isb	sy
 8010410:	f3bf 8f4f 	dsb	sy
 8010414:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010416:	bf00      	nop
 8010418:	e7fe      	b.n	8010418 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d103      	bne.n	8010428 <xQueueGenericSend+0x40>
 8010420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010424:	2b00      	cmp	r3, #0
 8010426:	d101      	bne.n	801042c <xQueueGenericSend+0x44>
 8010428:	2301      	movs	r3, #1
 801042a:	e000      	b.n	801042e <xQueueGenericSend+0x46>
 801042c:	2300      	movs	r3, #0
 801042e:	2b00      	cmp	r3, #0
 8010430:	d10a      	bne.n	8010448 <xQueueGenericSend+0x60>
	__asm volatile
 8010432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010436:	f383 8811 	msr	BASEPRI, r3
 801043a:	f3bf 8f6f 	isb	sy
 801043e:	f3bf 8f4f 	dsb	sy
 8010442:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010444:	bf00      	nop
 8010446:	e7fe      	b.n	8010446 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	2b02      	cmp	r3, #2
 801044c:	d103      	bne.n	8010456 <xQueueGenericSend+0x6e>
 801044e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010452:	2b01      	cmp	r3, #1
 8010454:	d101      	bne.n	801045a <xQueueGenericSend+0x72>
 8010456:	2301      	movs	r3, #1
 8010458:	e000      	b.n	801045c <xQueueGenericSend+0x74>
 801045a:	2300      	movs	r3, #0
 801045c:	2b00      	cmp	r3, #0
 801045e:	d10a      	bne.n	8010476 <xQueueGenericSend+0x8e>
	__asm volatile
 8010460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010464:	f383 8811 	msr	BASEPRI, r3
 8010468:	f3bf 8f6f 	isb	sy
 801046c:	f3bf 8f4f 	dsb	sy
 8010470:	623b      	str	r3, [r7, #32]
}
 8010472:	bf00      	nop
 8010474:	e7fe      	b.n	8010474 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010476:	f001 fcdf 	bl	8011e38 <xTaskGetSchedulerState>
 801047a:	4603      	mov	r3, r0
 801047c:	2b00      	cmp	r3, #0
 801047e:	d102      	bne.n	8010486 <xQueueGenericSend+0x9e>
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d101      	bne.n	801048a <xQueueGenericSend+0xa2>
 8010486:	2301      	movs	r3, #1
 8010488:	e000      	b.n	801048c <xQueueGenericSend+0xa4>
 801048a:	2300      	movs	r3, #0
 801048c:	2b00      	cmp	r3, #0
 801048e:	d10a      	bne.n	80104a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8010490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010494:	f383 8811 	msr	BASEPRI, r3
 8010498:	f3bf 8f6f 	isb	sy
 801049c:	f3bf 8f4f 	dsb	sy
 80104a0:	61fb      	str	r3, [r7, #28]
}
 80104a2:	bf00      	nop
 80104a4:	e7fe      	b.n	80104a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80104a6:	f002 fb1d 	bl	8012ae4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80104aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80104ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104b2:	429a      	cmp	r2, r3
 80104b4:	d302      	bcc.n	80104bc <xQueueGenericSend+0xd4>
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	2b02      	cmp	r3, #2
 80104ba:	d129      	bne.n	8010510 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80104bc:	683a      	ldr	r2, [r7, #0]
 80104be:	68b9      	ldr	r1, [r7, #8]
 80104c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80104c2:	f000 fc9a 	bl	8010dfa <prvCopyDataToQueue>
 80104c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80104c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d010      	beq.n	80104f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80104d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d2:	3324      	adds	r3, #36	; 0x24
 80104d4:	4618      	mov	r0, r3
 80104d6:	f001 faed 	bl	8011ab4 <xTaskRemoveFromEventList>
 80104da:	4603      	mov	r3, r0
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d013      	beq.n	8010508 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80104e0:	4b3f      	ldr	r3, [pc, #252]	; (80105e0 <xQueueGenericSend+0x1f8>)
 80104e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104e6:	601a      	str	r2, [r3, #0]
 80104e8:	f3bf 8f4f 	dsb	sy
 80104ec:	f3bf 8f6f 	isb	sy
 80104f0:	e00a      	b.n	8010508 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80104f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d007      	beq.n	8010508 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80104f8:	4b39      	ldr	r3, [pc, #228]	; (80105e0 <xQueueGenericSend+0x1f8>)
 80104fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104fe:	601a      	str	r2, [r3, #0]
 8010500:	f3bf 8f4f 	dsb	sy
 8010504:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010508:	f002 fb1c 	bl	8012b44 <vPortExitCritical>
				return pdPASS;
 801050c:	2301      	movs	r3, #1
 801050e:	e063      	b.n	80105d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d103      	bne.n	801051e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010516:	f002 fb15 	bl	8012b44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801051a:	2300      	movs	r3, #0
 801051c:	e05c      	b.n	80105d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801051e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010520:	2b00      	cmp	r3, #0
 8010522:	d106      	bne.n	8010532 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010524:	f107 0314 	add.w	r3, r7, #20
 8010528:	4618      	mov	r0, r3
 801052a:	f001 fb27 	bl	8011b7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801052e:	2301      	movs	r3, #1
 8010530:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010532:	f002 fb07 	bl	8012b44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010536:	f001 f893 	bl	8011660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801053a:	f002 fad3 	bl	8012ae4 <vPortEnterCritical>
 801053e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010540:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010544:	b25b      	sxtb	r3, r3
 8010546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801054a:	d103      	bne.n	8010554 <xQueueGenericSend+0x16c>
 801054c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801054e:	2200      	movs	r2, #0
 8010550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010556:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801055a:	b25b      	sxtb	r3, r3
 801055c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010560:	d103      	bne.n	801056a <xQueueGenericSend+0x182>
 8010562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010564:	2200      	movs	r2, #0
 8010566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801056a:	f002 faeb 	bl	8012b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801056e:	1d3a      	adds	r2, r7, #4
 8010570:	f107 0314 	add.w	r3, r7, #20
 8010574:	4611      	mov	r1, r2
 8010576:	4618      	mov	r0, r3
 8010578:	f001 fb16 	bl	8011ba8 <xTaskCheckForTimeOut>
 801057c:	4603      	mov	r3, r0
 801057e:	2b00      	cmp	r3, #0
 8010580:	d124      	bne.n	80105cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010582:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010584:	f000 fd31 	bl	8010fea <prvIsQueueFull>
 8010588:	4603      	mov	r3, r0
 801058a:	2b00      	cmp	r3, #0
 801058c:	d018      	beq.n	80105c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801058e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010590:	3310      	adds	r3, #16
 8010592:	687a      	ldr	r2, [r7, #4]
 8010594:	4611      	mov	r1, r2
 8010596:	4618      	mov	r0, r3
 8010598:	f001 fa3c 	bl	8011a14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801059c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801059e:	f000 fcbc 	bl	8010f1a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80105a2:	f001 f86b 	bl	801167c <xTaskResumeAll>
 80105a6:	4603      	mov	r3, r0
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	f47f af7c 	bne.w	80104a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80105ae:	4b0c      	ldr	r3, [pc, #48]	; (80105e0 <xQueueGenericSend+0x1f8>)
 80105b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105b4:	601a      	str	r2, [r3, #0]
 80105b6:	f3bf 8f4f 	dsb	sy
 80105ba:	f3bf 8f6f 	isb	sy
 80105be:	e772      	b.n	80104a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80105c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80105c2:	f000 fcaa 	bl	8010f1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80105c6:	f001 f859 	bl	801167c <xTaskResumeAll>
 80105ca:	e76c      	b.n	80104a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80105cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80105ce:	f000 fca4 	bl	8010f1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80105d2:	f001 f853 	bl	801167c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80105d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80105d8:	4618      	mov	r0, r3
 80105da:	3738      	adds	r7, #56	; 0x38
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}
 80105e0:	e000ed04 	.word	0xe000ed04

080105e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b090      	sub	sp, #64	; 0x40
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	60f8      	str	r0, [r7, #12]
 80105ec:	60b9      	str	r1, [r7, #8]
 80105ee:	607a      	str	r2, [r7, #4]
 80105f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80105f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d10a      	bne.n	8010612 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80105fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010600:	f383 8811 	msr	BASEPRI, r3
 8010604:	f3bf 8f6f 	isb	sy
 8010608:	f3bf 8f4f 	dsb	sy
 801060c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801060e:	bf00      	nop
 8010610:	e7fe      	b.n	8010610 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010612:	68bb      	ldr	r3, [r7, #8]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d103      	bne.n	8010620 <xQueueGenericSendFromISR+0x3c>
 8010618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801061c:	2b00      	cmp	r3, #0
 801061e:	d101      	bne.n	8010624 <xQueueGenericSendFromISR+0x40>
 8010620:	2301      	movs	r3, #1
 8010622:	e000      	b.n	8010626 <xQueueGenericSendFromISR+0x42>
 8010624:	2300      	movs	r3, #0
 8010626:	2b00      	cmp	r3, #0
 8010628:	d10a      	bne.n	8010640 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801062a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801062e:	f383 8811 	msr	BASEPRI, r3
 8010632:	f3bf 8f6f 	isb	sy
 8010636:	f3bf 8f4f 	dsb	sy
 801063a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801063c:	bf00      	nop
 801063e:	e7fe      	b.n	801063e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	2b02      	cmp	r3, #2
 8010644:	d103      	bne.n	801064e <xQueueGenericSendFromISR+0x6a>
 8010646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801064a:	2b01      	cmp	r3, #1
 801064c:	d101      	bne.n	8010652 <xQueueGenericSendFromISR+0x6e>
 801064e:	2301      	movs	r3, #1
 8010650:	e000      	b.n	8010654 <xQueueGenericSendFromISR+0x70>
 8010652:	2300      	movs	r3, #0
 8010654:	2b00      	cmp	r3, #0
 8010656:	d10a      	bne.n	801066e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010658:	f04f 0350 	mov.w	r3, #80	; 0x50
 801065c:	f383 8811 	msr	BASEPRI, r3
 8010660:	f3bf 8f6f 	isb	sy
 8010664:	f3bf 8f4f 	dsb	sy
 8010668:	623b      	str	r3, [r7, #32]
}
 801066a:	bf00      	nop
 801066c:	e7fe      	b.n	801066c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801066e:	f002 fb1b 	bl	8012ca8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010672:	f3ef 8211 	mrs	r2, BASEPRI
 8010676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801067a:	f383 8811 	msr	BASEPRI, r3
 801067e:	f3bf 8f6f 	isb	sy
 8010682:	f3bf 8f4f 	dsb	sy
 8010686:	61fa      	str	r2, [r7, #28]
 8010688:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801068a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801068c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801068e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010696:	429a      	cmp	r2, r3
 8010698:	d302      	bcc.n	80106a0 <xQueueGenericSendFromISR+0xbc>
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	2b02      	cmp	r3, #2
 801069e:	d12f      	bne.n	8010700 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80106a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80106a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80106aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80106b0:	683a      	ldr	r2, [r7, #0]
 80106b2:	68b9      	ldr	r1, [r7, #8]
 80106b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80106b6:	f000 fba0 	bl	8010dfa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80106ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80106be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80106c2:	d112      	bne.n	80106ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80106c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d016      	beq.n	80106fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80106cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ce:	3324      	adds	r3, #36	; 0x24
 80106d0:	4618      	mov	r0, r3
 80106d2:	f001 f9ef 	bl	8011ab4 <xTaskRemoveFromEventList>
 80106d6:	4603      	mov	r3, r0
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d00e      	beq.n	80106fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d00b      	beq.n	80106fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2201      	movs	r2, #1
 80106e6:	601a      	str	r2, [r3, #0]
 80106e8:	e007      	b.n	80106fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80106ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80106ee:	3301      	adds	r3, #1
 80106f0:	b2db      	uxtb	r3, r3
 80106f2:	b25a      	sxtb	r2, r3
 80106f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80106fa:	2301      	movs	r3, #1
 80106fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80106fe:	e001      	b.n	8010704 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010700:	2300      	movs	r3, #0
 8010702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010706:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801070e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010712:	4618      	mov	r0, r3
 8010714:	3740      	adds	r7, #64	; 0x40
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}

0801071a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801071a:	b580      	push	{r7, lr}
 801071c:	b08e      	sub	sp, #56	; 0x38
 801071e:	af00      	add	r7, sp, #0
 8010720:	6078      	str	r0, [r7, #4]
 8010722:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801072a:	2b00      	cmp	r3, #0
 801072c:	d10a      	bne.n	8010744 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010732:	f383 8811 	msr	BASEPRI, r3
 8010736:	f3bf 8f6f 	isb	sy
 801073a:	f3bf 8f4f 	dsb	sy
 801073e:	623b      	str	r3, [r7, #32]
}
 8010740:	bf00      	nop
 8010742:	e7fe      	b.n	8010742 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010748:	2b00      	cmp	r3, #0
 801074a:	d00a      	beq.n	8010762 <xQueueGiveFromISR+0x48>
	__asm volatile
 801074c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010750:	f383 8811 	msr	BASEPRI, r3
 8010754:	f3bf 8f6f 	isb	sy
 8010758:	f3bf 8f4f 	dsb	sy
 801075c:	61fb      	str	r3, [r7, #28]
}
 801075e:	bf00      	nop
 8010760:	e7fe      	b.n	8010760 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d103      	bne.n	8010772 <xQueueGiveFromISR+0x58>
 801076a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801076c:	689b      	ldr	r3, [r3, #8]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d101      	bne.n	8010776 <xQueueGiveFromISR+0x5c>
 8010772:	2301      	movs	r3, #1
 8010774:	e000      	b.n	8010778 <xQueueGiveFromISR+0x5e>
 8010776:	2300      	movs	r3, #0
 8010778:	2b00      	cmp	r3, #0
 801077a:	d10a      	bne.n	8010792 <xQueueGiveFromISR+0x78>
	__asm volatile
 801077c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010780:	f383 8811 	msr	BASEPRI, r3
 8010784:	f3bf 8f6f 	isb	sy
 8010788:	f3bf 8f4f 	dsb	sy
 801078c:	61bb      	str	r3, [r7, #24]
}
 801078e:	bf00      	nop
 8010790:	e7fe      	b.n	8010790 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010792:	f002 fa89 	bl	8012ca8 <vPortValidateInterruptPriority>
	__asm volatile
 8010796:	f3ef 8211 	mrs	r2, BASEPRI
 801079a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801079e:	f383 8811 	msr	BASEPRI, r3
 80107a2:	f3bf 8f6f 	isb	sy
 80107a6:	f3bf 8f4f 	dsb	sy
 80107aa:	617a      	str	r2, [r7, #20]
 80107ac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80107ae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80107b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80107b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80107b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107be:	429a      	cmp	r2, r3
 80107c0:	d22b      	bcs.n	801081a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80107c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80107c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80107cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ce:	1c5a      	adds	r2, r3, #1
 80107d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80107d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80107d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80107dc:	d112      	bne.n	8010804 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80107de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d016      	beq.n	8010814 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80107e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e8:	3324      	adds	r3, #36	; 0x24
 80107ea:	4618      	mov	r0, r3
 80107ec:	f001 f962 	bl	8011ab4 <xTaskRemoveFromEventList>
 80107f0:	4603      	mov	r3, r0
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d00e      	beq.n	8010814 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d00b      	beq.n	8010814 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	2201      	movs	r2, #1
 8010800:	601a      	str	r2, [r3, #0]
 8010802:	e007      	b.n	8010814 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010808:	3301      	adds	r3, #1
 801080a:	b2db      	uxtb	r3, r3
 801080c:	b25a      	sxtb	r2, r3
 801080e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010814:	2301      	movs	r3, #1
 8010816:	637b      	str	r3, [r7, #52]	; 0x34
 8010818:	e001      	b.n	801081e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801081a:	2300      	movs	r3, #0
 801081c:	637b      	str	r3, [r7, #52]	; 0x34
 801081e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010820:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	f383 8811 	msr	BASEPRI, r3
}
 8010828:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801082a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801082c:	4618      	mov	r0, r3
 801082e:	3738      	adds	r7, #56	; 0x38
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}

08010834 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b08c      	sub	sp, #48	; 0x30
 8010838:	af00      	add	r7, sp, #0
 801083a:	60f8      	str	r0, [r7, #12]
 801083c:	60b9      	str	r1, [r7, #8]
 801083e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010840:	2300      	movs	r3, #0
 8010842:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801084a:	2b00      	cmp	r3, #0
 801084c:	d10a      	bne.n	8010864 <xQueueReceive+0x30>
	__asm volatile
 801084e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010852:	f383 8811 	msr	BASEPRI, r3
 8010856:	f3bf 8f6f 	isb	sy
 801085a:	f3bf 8f4f 	dsb	sy
 801085e:	623b      	str	r3, [r7, #32]
}
 8010860:	bf00      	nop
 8010862:	e7fe      	b.n	8010862 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d103      	bne.n	8010872 <xQueueReceive+0x3e>
 801086a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801086e:	2b00      	cmp	r3, #0
 8010870:	d101      	bne.n	8010876 <xQueueReceive+0x42>
 8010872:	2301      	movs	r3, #1
 8010874:	e000      	b.n	8010878 <xQueueReceive+0x44>
 8010876:	2300      	movs	r3, #0
 8010878:	2b00      	cmp	r3, #0
 801087a:	d10a      	bne.n	8010892 <xQueueReceive+0x5e>
	__asm volatile
 801087c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010880:	f383 8811 	msr	BASEPRI, r3
 8010884:	f3bf 8f6f 	isb	sy
 8010888:	f3bf 8f4f 	dsb	sy
 801088c:	61fb      	str	r3, [r7, #28]
}
 801088e:	bf00      	nop
 8010890:	e7fe      	b.n	8010890 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010892:	f001 fad1 	bl	8011e38 <xTaskGetSchedulerState>
 8010896:	4603      	mov	r3, r0
 8010898:	2b00      	cmp	r3, #0
 801089a:	d102      	bne.n	80108a2 <xQueueReceive+0x6e>
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d101      	bne.n	80108a6 <xQueueReceive+0x72>
 80108a2:	2301      	movs	r3, #1
 80108a4:	e000      	b.n	80108a8 <xQueueReceive+0x74>
 80108a6:	2300      	movs	r3, #0
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d10a      	bne.n	80108c2 <xQueueReceive+0x8e>
	__asm volatile
 80108ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108b0:	f383 8811 	msr	BASEPRI, r3
 80108b4:	f3bf 8f6f 	isb	sy
 80108b8:	f3bf 8f4f 	dsb	sy
 80108bc:	61bb      	str	r3, [r7, #24]
}
 80108be:	bf00      	nop
 80108c0:	e7fe      	b.n	80108c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80108c2:	f002 f90f 	bl	8012ae4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80108c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80108cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d01f      	beq.n	8010912 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80108d2:	68b9      	ldr	r1, [r7, #8]
 80108d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108d6:	f000 fafa 	bl	8010ece <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80108da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108dc:	1e5a      	subs	r2, r3, #1
 80108de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80108e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e4:	691b      	ldr	r3, [r3, #16]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d00f      	beq.n	801090a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80108ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ec:	3310      	adds	r3, #16
 80108ee:	4618      	mov	r0, r3
 80108f0:	f001 f8e0 	bl	8011ab4 <xTaskRemoveFromEventList>
 80108f4:	4603      	mov	r3, r0
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d007      	beq.n	801090a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80108fa:	4b3d      	ldr	r3, [pc, #244]	; (80109f0 <xQueueReceive+0x1bc>)
 80108fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010900:	601a      	str	r2, [r3, #0]
 8010902:	f3bf 8f4f 	dsb	sy
 8010906:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801090a:	f002 f91b 	bl	8012b44 <vPortExitCritical>
				return pdPASS;
 801090e:	2301      	movs	r3, #1
 8010910:	e069      	b.n	80109e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d103      	bne.n	8010920 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010918:	f002 f914 	bl	8012b44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801091c:	2300      	movs	r3, #0
 801091e:	e062      	b.n	80109e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010922:	2b00      	cmp	r3, #0
 8010924:	d106      	bne.n	8010934 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010926:	f107 0310 	add.w	r3, r7, #16
 801092a:	4618      	mov	r0, r3
 801092c:	f001 f926 	bl	8011b7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010930:	2301      	movs	r3, #1
 8010932:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010934:	f002 f906 	bl	8012b44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010938:	f000 fe92 	bl	8011660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801093c:	f002 f8d2 	bl	8012ae4 <vPortEnterCritical>
 8010940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010942:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010946:	b25b      	sxtb	r3, r3
 8010948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801094c:	d103      	bne.n	8010956 <xQueueReceive+0x122>
 801094e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010950:	2200      	movs	r2, #0
 8010952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801095c:	b25b      	sxtb	r3, r3
 801095e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010962:	d103      	bne.n	801096c <xQueueReceive+0x138>
 8010964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010966:	2200      	movs	r2, #0
 8010968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801096c:	f002 f8ea 	bl	8012b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010970:	1d3a      	adds	r2, r7, #4
 8010972:	f107 0310 	add.w	r3, r7, #16
 8010976:	4611      	mov	r1, r2
 8010978:	4618      	mov	r0, r3
 801097a:	f001 f915 	bl	8011ba8 <xTaskCheckForTimeOut>
 801097e:	4603      	mov	r3, r0
 8010980:	2b00      	cmp	r3, #0
 8010982:	d123      	bne.n	80109cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010986:	f000 fb1a 	bl	8010fbe <prvIsQueueEmpty>
 801098a:	4603      	mov	r3, r0
 801098c:	2b00      	cmp	r3, #0
 801098e:	d017      	beq.n	80109c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010992:	3324      	adds	r3, #36	; 0x24
 8010994:	687a      	ldr	r2, [r7, #4]
 8010996:	4611      	mov	r1, r2
 8010998:	4618      	mov	r0, r3
 801099a:	f001 f83b 	bl	8011a14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801099e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109a0:	f000 fabb 	bl	8010f1a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80109a4:	f000 fe6a 	bl	801167c <xTaskResumeAll>
 80109a8:	4603      	mov	r3, r0
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d189      	bne.n	80108c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80109ae:	4b10      	ldr	r3, [pc, #64]	; (80109f0 <xQueueReceive+0x1bc>)
 80109b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109b4:	601a      	str	r2, [r3, #0]
 80109b6:	f3bf 8f4f 	dsb	sy
 80109ba:	f3bf 8f6f 	isb	sy
 80109be:	e780      	b.n	80108c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80109c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109c2:	f000 faaa 	bl	8010f1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80109c6:	f000 fe59 	bl	801167c <xTaskResumeAll>
 80109ca:	e77a      	b.n	80108c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80109cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109ce:	f000 faa4 	bl	8010f1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80109d2:	f000 fe53 	bl	801167c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80109d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109d8:	f000 faf1 	bl	8010fbe <prvIsQueueEmpty>
 80109dc:	4603      	mov	r3, r0
 80109de:	2b00      	cmp	r3, #0
 80109e0:	f43f af6f 	beq.w	80108c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80109e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	3730      	adds	r7, #48	; 0x30
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}
 80109ee:	bf00      	nop
 80109f0:	e000ed04 	.word	0xe000ed04

080109f4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b08e      	sub	sp, #56	; 0x38
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
 80109fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80109fe:	2300      	movs	r3, #0
 8010a00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010a06:	2300      	movs	r3, #0
 8010a08:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d10a      	bne.n	8010a26 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a14:	f383 8811 	msr	BASEPRI, r3
 8010a18:	f3bf 8f6f 	isb	sy
 8010a1c:	f3bf 8f4f 	dsb	sy
 8010a20:	623b      	str	r3, [r7, #32]
}
 8010a22:	bf00      	nop
 8010a24:	e7fe      	b.n	8010a24 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d00a      	beq.n	8010a44 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8010a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a32:	f383 8811 	msr	BASEPRI, r3
 8010a36:	f3bf 8f6f 	isb	sy
 8010a3a:	f3bf 8f4f 	dsb	sy
 8010a3e:	61fb      	str	r3, [r7, #28]
}
 8010a40:	bf00      	nop
 8010a42:	e7fe      	b.n	8010a42 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010a44:	f001 f9f8 	bl	8011e38 <xTaskGetSchedulerState>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d102      	bne.n	8010a54 <xQueueSemaphoreTake+0x60>
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d101      	bne.n	8010a58 <xQueueSemaphoreTake+0x64>
 8010a54:	2301      	movs	r3, #1
 8010a56:	e000      	b.n	8010a5a <xQueueSemaphoreTake+0x66>
 8010a58:	2300      	movs	r3, #0
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d10a      	bne.n	8010a74 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8010a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a62:	f383 8811 	msr	BASEPRI, r3
 8010a66:	f3bf 8f6f 	isb	sy
 8010a6a:	f3bf 8f4f 	dsb	sy
 8010a6e:	61bb      	str	r3, [r7, #24]
}
 8010a70:	bf00      	nop
 8010a72:	e7fe      	b.n	8010a72 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010a74:	f002 f836 	bl	8012ae4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a7c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d024      	beq.n	8010ace <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a86:	1e5a      	subs	r2, r3, #1
 8010a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a8a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d104      	bne.n	8010a9e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010a94:	f001 fb46 	bl	8012124 <pvTaskIncrementMutexHeldCount>
 8010a98:	4602      	mov	r2, r0
 8010a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a9c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aa0:	691b      	ldr	r3, [r3, #16]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d00f      	beq.n	8010ac6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aa8:	3310      	adds	r3, #16
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f001 f802 	bl	8011ab4 <xTaskRemoveFromEventList>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d007      	beq.n	8010ac6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010ab6:	4b54      	ldr	r3, [pc, #336]	; (8010c08 <xQueueSemaphoreTake+0x214>)
 8010ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010abc:	601a      	str	r2, [r3, #0]
 8010abe:	f3bf 8f4f 	dsb	sy
 8010ac2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010ac6:	f002 f83d 	bl	8012b44 <vPortExitCritical>
				return pdPASS;
 8010aca:	2301      	movs	r3, #1
 8010acc:	e097      	b.n	8010bfe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d111      	bne.n	8010af8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d00a      	beq.n	8010af0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ade:	f383 8811 	msr	BASEPRI, r3
 8010ae2:	f3bf 8f6f 	isb	sy
 8010ae6:	f3bf 8f4f 	dsb	sy
 8010aea:	617b      	str	r3, [r7, #20]
}
 8010aec:	bf00      	nop
 8010aee:	e7fe      	b.n	8010aee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010af0:	f002 f828 	bl	8012b44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010af4:	2300      	movs	r3, #0
 8010af6:	e082      	b.n	8010bfe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d106      	bne.n	8010b0c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010afe:	f107 030c 	add.w	r3, r7, #12
 8010b02:	4618      	mov	r0, r3
 8010b04:	f001 f83a 	bl	8011b7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010b08:	2301      	movs	r3, #1
 8010b0a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010b0c:	f002 f81a 	bl	8012b44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010b10:	f000 fda6 	bl	8011660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010b14:	f001 ffe6 	bl	8012ae4 <vPortEnterCritical>
 8010b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b1e:	b25b      	sxtb	r3, r3
 8010b20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b24:	d103      	bne.n	8010b2e <xQueueSemaphoreTake+0x13a>
 8010b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b28:	2200      	movs	r2, #0
 8010b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b34:	b25b      	sxtb	r3, r3
 8010b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b3a:	d103      	bne.n	8010b44 <xQueueSemaphoreTake+0x150>
 8010b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b3e:	2200      	movs	r2, #0
 8010b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010b44:	f001 fffe 	bl	8012b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010b48:	463a      	mov	r2, r7
 8010b4a:	f107 030c 	add.w	r3, r7, #12
 8010b4e:	4611      	mov	r1, r2
 8010b50:	4618      	mov	r0, r3
 8010b52:	f001 f829 	bl	8011ba8 <xTaskCheckForTimeOut>
 8010b56:	4603      	mov	r3, r0
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d132      	bne.n	8010bc2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010b5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b5e:	f000 fa2e 	bl	8010fbe <prvIsQueueEmpty>
 8010b62:	4603      	mov	r3, r0
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d026      	beq.n	8010bb6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d109      	bne.n	8010b84 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010b70:	f001 ffb8 	bl	8012ae4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b76:	689b      	ldr	r3, [r3, #8]
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f001 f97b 	bl	8011e74 <xTaskPriorityInherit>
 8010b7e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010b80:	f001 ffe0 	bl	8012b44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b86:	3324      	adds	r3, #36	; 0x24
 8010b88:	683a      	ldr	r2, [r7, #0]
 8010b8a:	4611      	mov	r1, r2
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f000 ff41 	bl	8011a14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010b92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b94:	f000 f9c1 	bl	8010f1a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010b98:	f000 fd70 	bl	801167c <xTaskResumeAll>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	f47f af68 	bne.w	8010a74 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010ba4:	4b18      	ldr	r3, [pc, #96]	; (8010c08 <xQueueSemaphoreTake+0x214>)
 8010ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010baa:	601a      	str	r2, [r3, #0]
 8010bac:	f3bf 8f4f 	dsb	sy
 8010bb0:	f3bf 8f6f 	isb	sy
 8010bb4:	e75e      	b.n	8010a74 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010bb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010bb8:	f000 f9af 	bl	8010f1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010bbc:	f000 fd5e 	bl	801167c <xTaskResumeAll>
 8010bc0:	e758      	b.n	8010a74 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010bc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010bc4:	f000 f9a9 	bl	8010f1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010bc8:	f000 fd58 	bl	801167c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010bcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010bce:	f000 f9f6 	bl	8010fbe <prvIsQueueEmpty>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	f43f af4d 	beq.w	8010a74 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d00d      	beq.n	8010bfc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010be0:	f001 ff80 	bl	8012ae4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010be4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010be6:	f000 f8f0 	bl	8010dca <prvGetDisinheritPriorityAfterTimeout>
 8010bea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bee:	689b      	ldr	r3, [r3, #8]
 8010bf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f001 fa14 	bl	8012020 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010bf8:	f001 ffa4 	bl	8012b44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010bfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	3738      	adds	r7, #56	; 0x38
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}
 8010c06:	bf00      	nop
 8010c08:	e000ed04 	.word	0xe000ed04

08010c0c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b08e      	sub	sp, #56	; 0x38
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	60f8      	str	r0, [r7, #12]
 8010c14:	60b9      	str	r1, [r7, #8]
 8010c16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d10a      	bne.n	8010c38 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c26:	f383 8811 	msr	BASEPRI, r3
 8010c2a:	f3bf 8f6f 	isb	sy
 8010c2e:	f3bf 8f4f 	dsb	sy
 8010c32:	623b      	str	r3, [r7, #32]
}
 8010c34:	bf00      	nop
 8010c36:	e7fe      	b.n	8010c36 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d103      	bne.n	8010c46 <xQueueReceiveFromISR+0x3a>
 8010c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d101      	bne.n	8010c4a <xQueueReceiveFromISR+0x3e>
 8010c46:	2301      	movs	r3, #1
 8010c48:	e000      	b.n	8010c4c <xQueueReceiveFromISR+0x40>
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d10a      	bne.n	8010c66 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c54:	f383 8811 	msr	BASEPRI, r3
 8010c58:	f3bf 8f6f 	isb	sy
 8010c5c:	f3bf 8f4f 	dsb	sy
 8010c60:	61fb      	str	r3, [r7, #28]
}
 8010c62:	bf00      	nop
 8010c64:	e7fe      	b.n	8010c64 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010c66:	f002 f81f 	bl	8012ca8 <vPortValidateInterruptPriority>
	__asm volatile
 8010c6a:	f3ef 8211 	mrs	r2, BASEPRI
 8010c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c72:	f383 8811 	msr	BASEPRI, r3
 8010c76:	f3bf 8f6f 	isb	sy
 8010c7a:	f3bf 8f4f 	dsb	sy
 8010c7e:	61ba      	str	r2, [r7, #24]
 8010c80:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010c82:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010c84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c8a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d02f      	beq.n	8010cf2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010c9c:	68b9      	ldr	r1, [r7, #8]
 8010c9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ca0:	f000 f915 	bl	8010ece <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ca6:	1e5a      	subs	r2, r3, #1
 8010ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010caa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010cac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010cb4:	d112      	bne.n	8010cdc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb8:	691b      	ldr	r3, [r3, #16]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d016      	beq.n	8010cec <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc0:	3310      	adds	r3, #16
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	f000 fef6 	bl	8011ab4 <xTaskRemoveFromEventList>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d00e      	beq.n	8010cec <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d00b      	beq.n	8010cec <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2201      	movs	r2, #1
 8010cd8:	601a      	str	r2, [r3, #0]
 8010cda:	e007      	b.n	8010cec <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ce0:	3301      	adds	r3, #1
 8010ce2:	b2db      	uxtb	r3, r3
 8010ce4:	b25a      	sxtb	r2, r3
 8010ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010cec:	2301      	movs	r3, #1
 8010cee:	637b      	str	r3, [r7, #52]	; 0x34
 8010cf0:	e001      	b.n	8010cf6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8010cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010cfa:	693b      	ldr	r3, [r7, #16]
 8010cfc:	f383 8811 	msr	BASEPRI, r3
}
 8010d00:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010d04:	4618      	mov	r0, r3
 8010d06:	3738      	adds	r7, #56	; 0x38
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}

08010d0c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b084      	sub	sp, #16
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d10a      	bne.n	8010d30 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8010d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d1e:	f383 8811 	msr	BASEPRI, r3
 8010d22:	f3bf 8f6f 	isb	sy
 8010d26:	f3bf 8f4f 	dsb	sy
 8010d2a:	60bb      	str	r3, [r7, #8]
}
 8010d2c:	bf00      	nop
 8010d2e:	e7fe      	b.n	8010d2e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8010d30:	f001 fed8 	bl	8012ae4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d38:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8010d3a:	f001 ff03 	bl	8012b44 <vPortExitCritical>

	return uxReturn;
 8010d3e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010d40:	4618      	mov	r0, r3
 8010d42:	3710      	adds	r7, #16
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}

08010d48 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8010d48:	b480      	push	{r7}
 8010d4a:	b087      	sub	sp, #28
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8010d54:	697b      	ldr	r3, [r7, #20]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d10a      	bne.n	8010d70 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8010d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d5e:	f383 8811 	msr	BASEPRI, r3
 8010d62:	f3bf 8f6f 	isb	sy
 8010d66:	f3bf 8f4f 	dsb	sy
 8010d6a:	60fb      	str	r3, [r7, #12]
}
 8010d6c:	bf00      	nop
 8010d6e:	e7fe      	b.n	8010d6e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d74:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8010d76:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010d78:	4618      	mov	r0, r3
 8010d7a:	371c      	adds	r7, #28
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d82:	4770      	bx	lr

08010d84 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b084      	sub	sp, #16
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d10a      	bne.n	8010dac <vQueueDelete+0x28>
	__asm volatile
 8010d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d9a:	f383 8811 	msr	BASEPRI, r3
 8010d9e:	f3bf 8f6f 	isb	sy
 8010da2:	f3bf 8f4f 	dsb	sy
 8010da6:	60bb      	str	r3, [r7, #8]
}
 8010da8:	bf00      	nop
 8010daa:	e7fe      	b.n	8010daa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010dac:	68f8      	ldr	r0, [r7, #12]
 8010dae:	f000 f95f 	bl	8011070 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d102      	bne.n	8010dc2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010dbc:	68f8      	ldr	r0, [r7, #12]
 8010dbe:	f002 f857 	bl	8012e70 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010dc2:	bf00      	nop
 8010dc4:	3710      	adds	r7, #16
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}

08010dca <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010dca:	b480      	push	{r7}
 8010dcc:	b085      	sub	sp, #20
 8010dce:	af00      	add	r7, sp, #0
 8010dd0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d006      	beq.n	8010de8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8010de4:	60fb      	str	r3, [r7, #12]
 8010de6:	e001      	b.n	8010dec <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010de8:	2300      	movs	r3, #0
 8010dea:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010dec:	68fb      	ldr	r3, [r7, #12]
	}
 8010dee:	4618      	mov	r0, r3
 8010df0:	3714      	adds	r7, #20
 8010df2:	46bd      	mov	sp, r7
 8010df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df8:	4770      	bx	lr

08010dfa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010dfa:	b580      	push	{r7, lr}
 8010dfc:	b086      	sub	sp, #24
 8010dfe:	af00      	add	r7, sp, #0
 8010e00:	60f8      	str	r0, [r7, #12]
 8010e02:	60b9      	str	r1, [r7, #8]
 8010e04:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010e06:	2300      	movs	r3, #0
 8010e08:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e0e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d10d      	bne.n	8010e34 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d14d      	bne.n	8010ebc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	689b      	ldr	r3, [r3, #8]
 8010e24:	4618      	mov	r0, r3
 8010e26:	f001 f88d 	bl	8011f44 <xTaskPriorityDisinherit>
 8010e2a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	2200      	movs	r2, #0
 8010e30:	609a      	str	r2, [r3, #8]
 8010e32:	e043      	b.n	8010ebc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d119      	bne.n	8010e6e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	6858      	ldr	r0, [r3, #4]
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e42:	461a      	mov	r2, r3
 8010e44:	68b9      	ldr	r1, [r7, #8]
 8010e46:	f002 fb8d 	bl	8013564 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	685a      	ldr	r2, [r3, #4]
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e52:	441a      	add	r2, r3
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	685a      	ldr	r2, [r3, #4]
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	689b      	ldr	r3, [r3, #8]
 8010e60:	429a      	cmp	r2, r3
 8010e62:	d32b      	bcc.n	8010ebc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	681a      	ldr	r2, [r3, #0]
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	605a      	str	r2, [r3, #4]
 8010e6c:	e026      	b.n	8010ebc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	68d8      	ldr	r0, [r3, #12]
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e76:	461a      	mov	r2, r3
 8010e78:	68b9      	ldr	r1, [r7, #8]
 8010e7a:	f002 fb73 	bl	8013564 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	68da      	ldr	r2, [r3, #12]
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e86:	425b      	negs	r3, r3
 8010e88:	441a      	add	r2, r3
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	68da      	ldr	r2, [r3, #12]
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	429a      	cmp	r2, r3
 8010e98:	d207      	bcs.n	8010eaa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	689a      	ldr	r2, [r3, #8]
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ea2:	425b      	negs	r3, r3
 8010ea4:	441a      	add	r2, r3
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	2b02      	cmp	r3, #2
 8010eae:	d105      	bne.n	8010ebc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010eb0:	693b      	ldr	r3, [r7, #16]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d002      	beq.n	8010ebc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	3b01      	subs	r3, #1
 8010eba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	1c5a      	adds	r2, r3, #1
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010ec4:	697b      	ldr	r3, [r7, #20]
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	3718      	adds	r7, #24
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	bd80      	pop	{r7, pc}

08010ece <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010ece:	b580      	push	{r7, lr}
 8010ed0:	b082      	sub	sp, #8
 8010ed2:	af00      	add	r7, sp, #0
 8010ed4:	6078      	str	r0, [r7, #4]
 8010ed6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d018      	beq.n	8010f12 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	68da      	ldr	r2, [r3, #12]
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ee8:	441a      	add	r2, r3
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	68da      	ldr	r2, [r3, #12]
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	689b      	ldr	r3, [r3, #8]
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d303      	bcc.n	8010f02 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681a      	ldr	r2, [r3, #0]
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	68d9      	ldr	r1, [r3, #12]
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f0a:	461a      	mov	r2, r3
 8010f0c:	6838      	ldr	r0, [r7, #0]
 8010f0e:	f002 fb29 	bl	8013564 <memcpy>
	}
}
 8010f12:	bf00      	nop
 8010f14:	3708      	adds	r7, #8
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd80      	pop	{r7, pc}

08010f1a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010f1a:	b580      	push	{r7, lr}
 8010f1c:	b084      	sub	sp, #16
 8010f1e:	af00      	add	r7, sp, #0
 8010f20:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010f22:	f001 fddf 	bl	8012ae4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010f2c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010f2e:	e011      	b.n	8010f54 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d012      	beq.n	8010f5e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	3324      	adds	r3, #36	; 0x24
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f000 fdb9 	bl	8011ab4 <xTaskRemoveFromEventList>
 8010f42:	4603      	mov	r3, r0
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d001      	beq.n	8010f4c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010f48:	f000 fe90 	bl	8011c6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010f4c:	7bfb      	ldrb	r3, [r7, #15]
 8010f4e:	3b01      	subs	r3, #1
 8010f50:	b2db      	uxtb	r3, r3
 8010f52:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	dce9      	bgt.n	8010f30 <prvUnlockQueue+0x16>
 8010f5c:	e000      	b.n	8010f60 <prvUnlockQueue+0x46>
					break;
 8010f5e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	22ff      	movs	r2, #255	; 0xff
 8010f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010f68:	f001 fdec 	bl	8012b44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010f6c:	f001 fdba 	bl	8012ae4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010f76:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010f78:	e011      	b.n	8010f9e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	691b      	ldr	r3, [r3, #16]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d012      	beq.n	8010fa8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	3310      	adds	r3, #16
 8010f86:	4618      	mov	r0, r3
 8010f88:	f000 fd94 	bl	8011ab4 <xTaskRemoveFromEventList>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d001      	beq.n	8010f96 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010f92:	f000 fe6b 	bl	8011c6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010f96:	7bbb      	ldrb	r3, [r7, #14]
 8010f98:	3b01      	subs	r3, #1
 8010f9a:	b2db      	uxtb	r3, r3
 8010f9c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010f9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	dce9      	bgt.n	8010f7a <prvUnlockQueue+0x60>
 8010fa6:	e000      	b.n	8010faa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010fa8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	22ff      	movs	r2, #255	; 0xff
 8010fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010fb2:	f001 fdc7 	bl	8012b44 <vPortExitCritical>
}
 8010fb6:	bf00      	nop
 8010fb8:	3710      	adds	r7, #16
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	bd80      	pop	{r7, pc}

08010fbe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010fbe:	b580      	push	{r7, lr}
 8010fc0:	b084      	sub	sp, #16
 8010fc2:	af00      	add	r7, sp, #0
 8010fc4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010fc6:	f001 fd8d 	bl	8012ae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d102      	bne.n	8010fd8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010fd2:	2301      	movs	r3, #1
 8010fd4:	60fb      	str	r3, [r7, #12]
 8010fd6:	e001      	b.n	8010fdc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010fd8:	2300      	movs	r3, #0
 8010fda:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010fdc:	f001 fdb2 	bl	8012b44 <vPortExitCritical>

	return xReturn;
 8010fe0:	68fb      	ldr	r3, [r7, #12]
}
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	3710      	adds	r7, #16
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd80      	pop	{r7, pc}

08010fea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010fea:	b580      	push	{r7, lr}
 8010fec:	b084      	sub	sp, #16
 8010fee:	af00      	add	r7, sp, #0
 8010ff0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010ff2:	f001 fd77 	bl	8012ae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ffe:	429a      	cmp	r2, r3
 8011000:	d102      	bne.n	8011008 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011002:	2301      	movs	r3, #1
 8011004:	60fb      	str	r3, [r7, #12]
 8011006:	e001      	b.n	801100c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011008:	2300      	movs	r3, #0
 801100a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801100c:	f001 fd9a 	bl	8012b44 <vPortExitCritical>

	return xReturn;
 8011010:	68fb      	ldr	r3, [r7, #12]
}
 8011012:	4618      	mov	r0, r3
 8011014:	3710      	adds	r7, #16
 8011016:	46bd      	mov	sp, r7
 8011018:	bd80      	pop	{r7, pc}
	...

0801101c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801101c:	b480      	push	{r7}
 801101e:	b085      	sub	sp, #20
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
 8011024:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011026:	2300      	movs	r3, #0
 8011028:	60fb      	str	r3, [r7, #12]
 801102a:	e014      	b.n	8011056 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801102c:	4a0f      	ldr	r2, [pc, #60]	; (801106c <vQueueAddToRegistry+0x50>)
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d10b      	bne.n	8011050 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011038:	490c      	ldr	r1, [pc, #48]	; (801106c <vQueueAddToRegistry+0x50>)
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	683a      	ldr	r2, [r7, #0]
 801103e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011042:	4a0a      	ldr	r2, [pc, #40]	; (801106c <vQueueAddToRegistry+0x50>)
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	00db      	lsls	r3, r3, #3
 8011048:	4413      	add	r3, r2
 801104a:	687a      	ldr	r2, [r7, #4]
 801104c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801104e:	e006      	b.n	801105e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	3301      	adds	r3, #1
 8011054:	60fb      	str	r3, [r7, #12]
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	2b07      	cmp	r3, #7
 801105a:	d9e7      	bls.n	801102c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801105c:	bf00      	nop
 801105e:	bf00      	nop
 8011060:	3714      	adds	r7, #20
 8011062:	46bd      	mov	sp, r7
 8011064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011068:	4770      	bx	lr
 801106a:	bf00      	nop
 801106c:	20007f44 	.word	0x20007f44

08011070 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011070:	b480      	push	{r7}
 8011072:	b085      	sub	sp, #20
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011078:	2300      	movs	r3, #0
 801107a:	60fb      	str	r3, [r7, #12]
 801107c:	e016      	b.n	80110ac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801107e:	4a10      	ldr	r2, [pc, #64]	; (80110c0 <vQueueUnregisterQueue+0x50>)
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	00db      	lsls	r3, r3, #3
 8011084:	4413      	add	r3, r2
 8011086:	685b      	ldr	r3, [r3, #4]
 8011088:	687a      	ldr	r2, [r7, #4]
 801108a:	429a      	cmp	r2, r3
 801108c:	d10b      	bne.n	80110a6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801108e:	4a0c      	ldr	r2, [pc, #48]	; (80110c0 <vQueueUnregisterQueue+0x50>)
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	2100      	movs	r1, #0
 8011094:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011098:	4a09      	ldr	r2, [pc, #36]	; (80110c0 <vQueueUnregisterQueue+0x50>)
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	00db      	lsls	r3, r3, #3
 801109e:	4413      	add	r3, r2
 80110a0:	2200      	movs	r2, #0
 80110a2:	605a      	str	r2, [r3, #4]
				break;
 80110a4:	e006      	b.n	80110b4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	3301      	adds	r3, #1
 80110aa:	60fb      	str	r3, [r7, #12]
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	2b07      	cmp	r3, #7
 80110b0:	d9e5      	bls.n	801107e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80110b2:	bf00      	nop
 80110b4:	bf00      	nop
 80110b6:	3714      	adds	r7, #20
 80110b8:	46bd      	mov	sp, r7
 80110ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110be:	4770      	bx	lr
 80110c0:	20007f44 	.word	0x20007f44

080110c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b086      	sub	sp, #24
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	60f8      	str	r0, [r7, #12]
 80110cc:	60b9      	str	r1, [r7, #8]
 80110ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80110d4:	f001 fd06 	bl	8012ae4 <vPortEnterCritical>
 80110d8:	697b      	ldr	r3, [r7, #20]
 80110da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80110de:	b25b      	sxtb	r3, r3
 80110e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110e4:	d103      	bne.n	80110ee <vQueueWaitForMessageRestricted+0x2a>
 80110e6:	697b      	ldr	r3, [r7, #20]
 80110e8:	2200      	movs	r2, #0
 80110ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80110ee:	697b      	ldr	r3, [r7, #20]
 80110f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80110f4:	b25b      	sxtb	r3, r3
 80110f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110fa:	d103      	bne.n	8011104 <vQueueWaitForMessageRestricted+0x40>
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	2200      	movs	r2, #0
 8011100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011104:	f001 fd1e 	bl	8012b44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011108:	697b      	ldr	r3, [r7, #20]
 801110a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801110c:	2b00      	cmp	r3, #0
 801110e:	d106      	bne.n	801111e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011110:	697b      	ldr	r3, [r7, #20]
 8011112:	3324      	adds	r3, #36	; 0x24
 8011114:	687a      	ldr	r2, [r7, #4]
 8011116:	68b9      	ldr	r1, [r7, #8]
 8011118:	4618      	mov	r0, r3
 801111a:	f000 fc9f 	bl	8011a5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801111e:	6978      	ldr	r0, [r7, #20]
 8011120:	f7ff fefb 	bl	8010f1a <prvUnlockQueue>
	}
 8011124:	bf00      	nop
 8011126:	3718      	adds	r7, #24
 8011128:	46bd      	mov	sp, r7
 801112a:	bd80      	pop	{r7, pc}

0801112c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801112c:	b580      	push	{r7, lr}
 801112e:	b08e      	sub	sp, #56	; 0x38
 8011130:	af04      	add	r7, sp, #16
 8011132:	60f8      	str	r0, [r7, #12]
 8011134:	60b9      	str	r1, [r7, #8]
 8011136:	607a      	str	r2, [r7, #4]
 8011138:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801113a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801113c:	2b00      	cmp	r3, #0
 801113e:	d10a      	bne.n	8011156 <xTaskCreateStatic+0x2a>
	__asm volatile
 8011140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011144:	f383 8811 	msr	BASEPRI, r3
 8011148:	f3bf 8f6f 	isb	sy
 801114c:	f3bf 8f4f 	dsb	sy
 8011150:	623b      	str	r3, [r7, #32]
}
 8011152:	bf00      	nop
 8011154:	e7fe      	b.n	8011154 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011158:	2b00      	cmp	r3, #0
 801115a:	d10a      	bne.n	8011172 <xTaskCreateStatic+0x46>
	__asm volatile
 801115c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011160:	f383 8811 	msr	BASEPRI, r3
 8011164:	f3bf 8f6f 	isb	sy
 8011168:	f3bf 8f4f 	dsb	sy
 801116c:	61fb      	str	r3, [r7, #28]
}
 801116e:	bf00      	nop
 8011170:	e7fe      	b.n	8011170 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011172:	23bc      	movs	r3, #188	; 0xbc
 8011174:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011176:	693b      	ldr	r3, [r7, #16]
 8011178:	2bbc      	cmp	r3, #188	; 0xbc
 801117a:	d00a      	beq.n	8011192 <xTaskCreateStatic+0x66>
	__asm volatile
 801117c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011180:	f383 8811 	msr	BASEPRI, r3
 8011184:	f3bf 8f6f 	isb	sy
 8011188:	f3bf 8f4f 	dsb	sy
 801118c:	61bb      	str	r3, [r7, #24]
}
 801118e:	bf00      	nop
 8011190:	e7fe      	b.n	8011190 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011192:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011196:	2b00      	cmp	r3, #0
 8011198:	d01e      	beq.n	80111d8 <xTaskCreateStatic+0xac>
 801119a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801119c:	2b00      	cmp	r3, #0
 801119e:	d01b      	beq.n	80111d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80111a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80111a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80111a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80111aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ac:	2202      	movs	r2, #2
 80111ae:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80111b2:	2300      	movs	r3, #0
 80111b4:	9303      	str	r3, [sp, #12]
 80111b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b8:	9302      	str	r3, [sp, #8]
 80111ba:	f107 0314 	add.w	r3, r7, #20
 80111be:	9301      	str	r3, [sp, #4]
 80111c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c2:	9300      	str	r3, [sp, #0]
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	687a      	ldr	r2, [r7, #4]
 80111c8:	68b9      	ldr	r1, [r7, #8]
 80111ca:	68f8      	ldr	r0, [r7, #12]
 80111cc:	f000 f850 	bl	8011270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80111d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111d2:	f000 f8f3 	bl	80113bc <prvAddNewTaskToReadyList>
 80111d6:	e001      	b.n	80111dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80111d8:	2300      	movs	r3, #0
 80111da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80111dc:	697b      	ldr	r3, [r7, #20]
	}
 80111de:	4618      	mov	r0, r3
 80111e0:	3728      	adds	r7, #40	; 0x28
 80111e2:	46bd      	mov	sp, r7
 80111e4:	bd80      	pop	{r7, pc}

080111e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80111e6:	b580      	push	{r7, lr}
 80111e8:	b08c      	sub	sp, #48	; 0x30
 80111ea:	af04      	add	r7, sp, #16
 80111ec:	60f8      	str	r0, [r7, #12]
 80111ee:	60b9      	str	r1, [r7, #8]
 80111f0:	603b      	str	r3, [r7, #0]
 80111f2:	4613      	mov	r3, r2
 80111f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80111f6:	88fb      	ldrh	r3, [r7, #6]
 80111f8:	009b      	lsls	r3, r3, #2
 80111fa:	4618      	mov	r0, r3
 80111fc:	f001 fd94 	bl	8012d28 <pvPortMalloc>
 8011200:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011202:	697b      	ldr	r3, [r7, #20]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d00e      	beq.n	8011226 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011208:	20bc      	movs	r0, #188	; 0xbc
 801120a:	f001 fd8d 	bl	8012d28 <pvPortMalloc>
 801120e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011210:	69fb      	ldr	r3, [r7, #28]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d003      	beq.n	801121e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011216:	69fb      	ldr	r3, [r7, #28]
 8011218:	697a      	ldr	r2, [r7, #20]
 801121a:	631a      	str	r2, [r3, #48]	; 0x30
 801121c:	e005      	b.n	801122a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801121e:	6978      	ldr	r0, [r7, #20]
 8011220:	f001 fe26 	bl	8012e70 <vPortFree>
 8011224:	e001      	b.n	801122a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011226:	2300      	movs	r3, #0
 8011228:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801122a:	69fb      	ldr	r3, [r7, #28]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d017      	beq.n	8011260 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011230:	69fb      	ldr	r3, [r7, #28]
 8011232:	2200      	movs	r2, #0
 8011234:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011238:	88fa      	ldrh	r2, [r7, #6]
 801123a:	2300      	movs	r3, #0
 801123c:	9303      	str	r3, [sp, #12]
 801123e:	69fb      	ldr	r3, [r7, #28]
 8011240:	9302      	str	r3, [sp, #8]
 8011242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011244:	9301      	str	r3, [sp, #4]
 8011246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011248:	9300      	str	r3, [sp, #0]
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	68b9      	ldr	r1, [r7, #8]
 801124e:	68f8      	ldr	r0, [r7, #12]
 8011250:	f000 f80e 	bl	8011270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011254:	69f8      	ldr	r0, [r7, #28]
 8011256:	f000 f8b1 	bl	80113bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801125a:	2301      	movs	r3, #1
 801125c:	61bb      	str	r3, [r7, #24]
 801125e:	e002      	b.n	8011266 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011264:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011266:	69bb      	ldr	r3, [r7, #24]
	}
 8011268:	4618      	mov	r0, r3
 801126a:	3720      	adds	r7, #32
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}

08011270 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b088      	sub	sp, #32
 8011274:	af00      	add	r7, sp, #0
 8011276:	60f8      	str	r0, [r7, #12]
 8011278:	60b9      	str	r1, [r7, #8]
 801127a:	607a      	str	r2, [r7, #4]
 801127c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801127e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011280:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	009b      	lsls	r3, r3, #2
 8011286:	461a      	mov	r2, r3
 8011288:	21a5      	movs	r1, #165	; 0xa5
 801128a:	f002 f979 	bl	8013580 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801128e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011298:	3b01      	subs	r3, #1
 801129a:	009b      	lsls	r3, r3, #2
 801129c:	4413      	add	r3, r2
 801129e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80112a0:	69bb      	ldr	r3, [r7, #24]
 80112a2:	f023 0307 	bic.w	r3, r3, #7
 80112a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80112a8:	69bb      	ldr	r3, [r7, #24]
 80112aa:	f003 0307 	and.w	r3, r3, #7
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d00a      	beq.n	80112c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80112b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112b6:	f383 8811 	msr	BASEPRI, r3
 80112ba:	f3bf 8f6f 	isb	sy
 80112be:	f3bf 8f4f 	dsb	sy
 80112c2:	617b      	str	r3, [r7, #20]
}
 80112c4:	bf00      	nop
 80112c6:	e7fe      	b.n	80112c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80112c8:	68bb      	ldr	r3, [r7, #8]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d01f      	beq.n	801130e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80112ce:	2300      	movs	r3, #0
 80112d0:	61fb      	str	r3, [r7, #28]
 80112d2:	e012      	b.n	80112fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80112d4:	68ba      	ldr	r2, [r7, #8]
 80112d6:	69fb      	ldr	r3, [r7, #28]
 80112d8:	4413      	add	r3, r2
 80112da:	7819      	ldrb	r1, [r3, #0]
 80112dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112de:	69fb      	ldr	r3, [r7, #28]
 80112e0:	4413      	add	r3, r2
 80112e2:	3334      	adds	r3, #52	; 0x34
 80112e4:	460a      	mov	r2, r1
 80112e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80112e8:	68ba      	ldr	r2, [r7, #8]
 80112ea:	69fb      	ldr	r3, [r7, #28]
 80112ec:	4413      	add	r3, r2
 80112ee:	781b      	ldrb	r3, [r3, #0]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d006      	beq.n	8011302 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80112f4:	69fb      	ldr	r3, [r7, #28]
 80112f6:	3301      	adds	r3, #1
 80112f8:	61fb      	str	r3, [r7, #28]
 80112fa:	69fb      	ldr	r3, [r7, #28]
 80112fc:	2b0f      	cmp	r3, #15
 80112fe:	d9e9      	bls.n	80112d4 <prvInitialiseNewTask+0x64>
 8011300:	e000      	b.n	8011304 <prvInitialiseNewTask+0x94>
			{
				break;
 8011302:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011306:	2200      	movs	r2, #0
 8011308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801130c:	e003      	b.n	8011316 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801130e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011310:	2200      	movs	r2, #0
 8011312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011318:	2b37      	cmp	r3, #55	; 0x37
 801131a:	d901      	bls.n	8011320 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801131c:	2337      	movs	r3, #55	; 0x37
 801131e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011324:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801132a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801132c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801132e:	2200      	movs	r2, #0
 8011330:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011334:	3304      	adds	r3, #4
 8011336:	4618      	mov	r0, r3
 8011338:	f7fe fe1a 	bl	800ff70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801133c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801133e:	3318      	adds	r3, #24
 8011340:	4618      	mov	r0, r3
 8011342:	f7fe fe15 	bl	800ff70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801134a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801134c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801134e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011354:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801135a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801135c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801135e:	2200      	movs	r2, #0
 8011360:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011366:	2200      	movs	r2, #0
 8011368:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801136c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801136e:	3354      	adds	r3, #84	; 0x54
 8011370:	2260      	movs	r2, #96	; 0x60
 8011372:	2100      	movs	r1, #0
 8011374:	4618      	mov	r0, r3
 8011376:	f002 f903 	bl	8013580 <memset>
 801137a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801137c:	4a0c      	ldr	r2, [pc, #48]	; (80113b0 <prvInitialiseNewTask+0x140>)
 801137e:	659a      	str	r2, [r3, #88]	; 0x58
 8011380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011382:	4a0c      	ldr	r2, [pc, #48]	; (80113b4 <prvInitialiseNewTask+0x144>)
 8011384:	65da      	str	r2, [r3, #92]	; 0x5c
 8011386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011388:	4a0b      	ldr	r2, [pc, #44]	; (80113b8 <prvInitialiseNewTask+0x148>)
 801138a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801138c:	683a      	ldr	r2, [r7, #0]
 801138e:	68f9      	ldr	r1, [r7, #12]
 8011390:	69b8      	ldr	r0, [r7, #24]
 8011392:	f001 fa7d 	bl	8012890 <pxPortInitialiseStack>
 8011396:	4602      	mov	r2, r0
 8011398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801139a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801139c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d002      	beq.n	80113a8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80113a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80113a8:	bf00      	nop
 80113aa:	3720      	adds	r7, #32
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}
 80113b0:	0801955c 	.word	0x0801955c
 80113b4:	0801957c 	.word	0x0801957c
 80113b8:	0801953c 	.word	0x0801953c

080113bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b082      	sub	sp, #8
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80113c4:	f001 fb8e 	bl	8012ae4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80113c8:	4b2d      	ldr	r3, [pc, #180]	; (8011480 <prvAddNewTaskToReadyList+0xc4>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	3301      	adds	r3, #1
 80113ce:	4a2c      	ldr	r2, [pc, #176]	; (8011480 <prvAddNewTaskToReadyList+0xc4>)
 80113d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80113d2:	4b2c      	ldr	r3, [pc, #176]	; (8011484 <prvAddNewTaskToReadyList+0xc8>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d109      	bne.n	80113ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80113da:	4a2a      	ldr	r2, [pc, #168]	; (8011484 <prvAddNewTaskToReadyList+0xc8>)
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80113e0:	4b27      	ldr	r3, [pc, #156]	; (8011480 <prvAddNewTaskToReadyList+0xc4>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	2b01      	cmp	r3, #1
 80113e6:	d110      	bne.n	801140a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80113e8:	f000 fc64 	bl	8011cb4 <prvInitialiseTaskLists>
 80113ec:	e00d      	b.n	801140a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80113ee:	4b26      	ldr	r3, [pc, #152]	; (8011488 <prvAddNewTaskToReadyList+0xcc>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d109      	bne.n	801140a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80113f6:	4b23      	ldr	r3, [pc, #140]	; (8011484 <prvAddNewTaskToReadyList+0xc8>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011400:	429a      	cmp	r2, r3
 8011402:	d802      	bhi.n	801140a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011404:	4a1f      	ldr	r2, [pc, #124]	; (8011484 <prvAddNewTaskToReadyList+0xc8>)
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801140a:	4b20      	ldr	r3, [pc, #128]	; (801148c <prvAddNewTaskToReadyList+0xd0>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	3301      	adds	r3, #1
 8011410:	4a1e      	ldr	r2, [pc, #120]	; (801148c <prvAddNewTaskToReadyList+0xd0>)
 8011412:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011414:	4b1d      	ldr	r3, [pc, #116]	; (801148c <prvAddNewTaskToReadyList+0xd0>)
 8011416:	681a      	ldr	r2, [r3, #0]
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011420:	4b1b      	ldr	r3, [pc, #108]	; (8011490 <prvAddNewTaskToReadyList+0xd4>)
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	429a      	cmp	r2, r3
 8011426:	d903      	bls.n	8011430 <prvAddNewTaskToReadyList+0x74>
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801142c:	4a18      	ldr	r2, [pc, #96]	; (8011490 <prvAddNewTaskToReadyList+0xd4>)
 801142e:	6013      	str	r3, [r2, #0]
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011434:	4613      	mov	r3, r2
 8011436:	009b      	lsls	r3, r3, #2
 8011438:	4413      	add	r3, r2
 801143a:	009b      	lsls	r3, r3, #2
 801143c:	4a15      	ldr	r2, [pc, #84]	; (8011494 <prvAddNewTaskToReadyList+0xd8>)
 801143e:	441a      	add	r2, r3
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	3304      	adds	r3, #4
 8011444:	4619      	mov	r1, r3
 8011446:	4610      	mov	r0, r2
 8011448:	f7fe fd9f 	bl	800ff8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801144c:	f001 fb7a 	bl	8012b44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011450:	4b0d      	ldr	r3, [pc, #52]	; (8011488 <prvAddNewTaskToReadyList+0xcc>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d00e      	beq.n	8011476 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011458:	4b0a      	ldr	r3, [pc, #40]	; (8011484 <prvAddNewTaskToReadyList+0xc8>)
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011462:	429a      	cmp	r2, r3
 8011464:	d207      	bcs.n	8011476 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011466:	4b0c      	ldr	r3, [pc, #48]	; (8011498 <prvAddNewTaskToReadyList+0xdc>)
 8011468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801146c:	601a      	str	r2, [r3, #0]
 801146e:	f3bf 8f4f 	dsb	sy
 8011472:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011476:	bf00      	nop
 8011478:	3708      	adds	r7, #8
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}
 801147e:	bf00      	nop
 8011480:	20008458 	.word	0x20008458
 8011484:	20007f84 	.word	0x20007f84
 8011488:	20008464 	.word	0x20008464
 801148c:	20008474 	.word	0x20008474
 8011490:	20008460 	.word	0x20008460
 8011494:	20007f88 	.word	0x20007f88
 8011498:	e000ed04 	.word	0xe000ed04

0801149c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 801149c:	b580      	push	{r7, lr}
 801149e:	b084      	sub	sp, #16
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80114a4:	f001 fb1e 	bl	8012ae4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d102      	bne.n	80114b4 <vTaskDelete+0x18>
 80114ae:	4b2c      	ldr	r3, [pc, #176]	; (8011560 <vTaskDelete+0xc4>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	e000      	b.n	80114b6 <vTaskDelete+0x1a>
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	3304      	adds	r3, #4
 80114bc:	4618      	mov	r0, r3
 80114be:	f7fe fdc1 	bl	8010044 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d004      	beq.n	80114d4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	3318      	adds	r3, #24
 80114ce:	4618      	mov	r0, r3
 80114d0:	f7fe fdb8 	bl	8010044 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80114d4:	4b23      	ldr	r3, [pc, #140]	; (8011564 <vTaskDelete+0xc8>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	3301      	adds	r3, #1
 80114da:	4a22      	ldr	r2, [pc, #136]	; (8011564 <vTaskDelete+0xc8>)
 80114dc:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80114de:	4b20      	ldr	r3, [pc, #128]	; (8011560 <vTaskDelete+0xc4>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	68fa      	ldr	r2, [r7, #12]
 80114e4:	429a      	cmp	r2, r3
 80114e6:	d10b      	bne.n	8011500 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	3304      	adds	r3, #4
 80114ec:	4619      	mov	r1, r3
 80114ee:	481e      	ldr	r0, [pc, #120]	; (8011568 <vTaskDelete+0xcc>)
 80114f0:	f7fe fd4b 	bl	800ff8a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80114f4:	4b1d      	ldr	r3, [pc, #116]	; (801156c <vTaskDelete+0xd0>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	3301      	adds	r3, #1
 80114fa:	4a1c      	ldr	r2, [pc, #112]	; (801156c <vTaskDelete+0xd0>)
 80114fc:	6013      	str	r3, [r2, #0]
 80114fe:	e009      	b.n	8011514 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8011500:	4b1b      	ldr	r3, [pc, #108]	; (8011570 <vTaskDelete+0xd4>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	3b01      	subs	r3, #1
 8011506:	4a1a      	ldr	r2, [pc, #104]	; (8011570 <vTaskDelete+0xd4>)
 8011508:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801150a:	68f8      	ldr	r0, [r7, #12]
 801150c:	f000 fc40 	bl	8011d90 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8011510:	f000 fc72 	bl	8011df8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8011514:	f001 fb16 	bl	8012b44 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8011518:	4b16      	ldr	r3, [pc, #88]	; (8011574 <vTaskDelete+0xd8>)
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d01b      	beq.n	8011558 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8011520:	4b0f      	ldr	r3, [pc, #60]	; (8011560 <vTaskDelete+0xc4>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	68fa      	ldr	r2, [r7, #12]
 8011526:	429a      	cmp	r2, r3
 8011528:	d116      	bne.n	8011558 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801152a:	4b13      	ldr	r3, [pc, #76]	; (8011578 <vTaskDelete+0xdc>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d00a      	beq.n	8011548 <vTaskDelete+0xac>
	__asm volatile
 8011532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011536:	f383 8811 	msr	BASEPRI, r3
 801153a:	f3bf 8f6f 	isb	sy
 801153e:	f3bf 8f4f 	dsb	sy
 8011542:	60bb      	str	r3, [r7, #8]
}
 8011544:	bf00      	nop
 8011546:	e7fe      	b.n	8011546 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8011548:	4b0c      	ldr	r3, [pc, #48]	; (801157c <vTaskDelete+0xe0>)
 801154a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801154e:	601a      	str	r2, [r3, #0]
 8011550:	f3bf 8f4f 	dsb	sy
 8011554:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011558:	bf00      	nop
 801155a:	3710      	adds	r7, #16
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}
 8011560:	20007f84 	.word	0x20007f84
 8011564:	20008474 	.word	0x20008474
 8011568:	2000842c 	.word	0x2000842c
 801156c:	20008440 	.word	0x20008440
 8011570:	20008458 	.word	0x20008458
 8011574:	20008464 	.word	0x20008464
 8011578:	20008480 	.word	0x20008480
 801157c:	e000ed04 	.word	0xe000ed04

08011580 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b08a      	sub	sp, #40	; 0x28
 8011584:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011586:	2300      	movs	r3, #0
 8011588:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801158a:	2300      	movs	r3, #0
 801158c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801158e:	463a      	mov	r2, r7
 8011590:	1d39      	adds	r1, r7, #4
 8011592:	f107 0308 	add.w	r3, r7, #8
 8011596:	4618      	mov	r0, r3
 8011598:	f7fe fc96 	bl	800fec8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801159c:	6839      	ldr	r1, [r7, #0]
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	68ba      	ldr	r2, [r7, #8]
 80115a2:	9202      	str	r2, [sp, #8]
 80115a4:	9301      	str	r3, [sp, #4]
 80115a6:	2300      	movs	r3, #0
 80115a8:	9300      	str	r3, [sp, #0]
 80115aa:	2300      	movs	r3, #0
 80115ac:	460a      	mov	r2, r1
 80115ae:	4924      	ldr	r1, [pc, #144]	; (8011640 <vTaskStartScheduler+0xc0>)
 80115b0:	4824      	ldr	r0, [pc, #144]	; (8011644 <vTaskStartScheduler+0xc4>)
 80115b2:	f7ff fdbb 	bl	801112c <xTaskCreateStatic>
 80115b6:	4603      	mov	r3, r0
 80115b8:	4a23      	ldr	r2, [pc, #140]	; (8011648 <vTaskStartScheduler+0xc8>)
 80115ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80115bc:	4b22      	ldr	r3, [pc, #136]	; (8011648 <vTaskStartScheduler+0xc8>)
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d002      	beq.n	80115ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80115c4:	2301      	movs	r3, #1
 80115c6:	617b      	str	r3, [r7, #20]
 80115c8:	e001      	b.n	80115ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80115ca:	2300      	movs	r3, #0
 80115cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80115ce:	697b      	ldr	r3, [r7, #20]
 80115d0:	2b01      	cmp	r3, #1
 80115d2:	d102      	bne.n	80115da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80115d4:	f000 fe0e 	bl	80121f4 <xTimerCreateTimerTask>
 80115d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80115da:	697b      	ldr	r3, [r7, #20]
 80115dc:	2b01      	cmp	r3, #1
 80115de:	d11b      	bne.n	8011618 <vTaskStartScheduler+0x98>
	__asm volatile
 80115e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115e4:	f383 8811 	msr	BASEPRI, r3
 80115e8:	f3bf 8f6f 	isb	sy
 80115ec:	f3bf 8f4f 	dsb	sy
 80115f0:	613b      	str	r3, [r7, #16]
}
 80115f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80115f4:	4b15      	ldr	r3, [pc, #84]	; (801164c <vTaskStartScheduler+0xcc>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	3354      	adds	r3, #84	; 0x54
 80115fa:	4a15      	ldr	r2, [pc, #84]	; (8011650 <vTaskStartScheduler+0xd0>)
 80115fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80115fe:	4b15      	ldr	r3, [pc, #84]	; (8011654 <vTaskStartScheduler+0xd4>)
 8011600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011604:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011606:	4b14      	ldr	r3, [pc, #80]	; (8011658 <vTaskStartScheduler+0xd8>)
 8011608:	2201      	movs	r2, #1
 801160a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801160c:	4b13      	ldr	r3, [pc, #76]	; (801165c <vTaskStartScheduler+0xdc>)
 801160e:	2200      	movs	r2, #0
 8011610:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011612:	f001 f9c5 	bl	80129a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011616:	e00e      	b.n	8011636 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011618:	697b      	ldr	r3, [r7, #20]
 801161a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801161e:	d10a      	bne.n	8011636 <vTaskStartScheduler+0xb6>
	__asm volatile
 8011620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011624:	f383 8811 	msr	BASEPRI, r3
 8011628:	f3bf 8f6f 	isb	sy
 801162c:	f3bf 8f4f 	dsb	sy
 8011630:	60fb      	str	r3, [r7, #12]
}
 8011632:	bf00      	nop
 8011634:	e7fe      	b.n	8011634 <vTaskStartScheduler+0xb4>
}
 8011636:	bf00      	nop
 8011638:	3718      	adds	r7, #24
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}
 801163e:	bf00      	nop
 8011640:	080183e8 	.word	0x080183e8
 8011644:	08011c85 	.word	0x08011c85
 8011648:	2000847c 	.word	0x2000847c
 801164c:	20007f84 	.word	0x20007f84
 8011650:	2000018c 	.word	0x2000018c
 8011654:	20008478 	.word	0x20008478
 8011658:	20008464 	.word	0x20008464
 801165c:	2000845c 	.word	0x2000845c

08011660 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011660:	b480      	push	{r7}
 8011662:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011664:	4b04      	ldr	r3, [pc, #16]	; (8011678 <vTaskSuspendAll+0x18>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	3301      	adds	r3, #1
 801166a:	4a03      	ldr	r2, [pc, #12]	; (8011678 <vTaskSuspendAll+0x18>)
 801166c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801166e:	bf00      	nop
 8011670:	46bd      	mov	sp, r7
 8011672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011676:	4770      	bx	lr
 8011678:	20008480 	.word	0x20008480

0801167c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b084      	sub	sp, #16
 8011680:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011682:	2300      	movs	r3, #0
 8011684:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011686:	2300      	movs	r3, #0
 8011688:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801168a:	4b42      	ldr	r3, [pc, #264]	; (8011794 <xTaskResumeAll+0x118>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d10a      	bne.n	80116a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8011692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011696:	f383 8811 	msr	BASEPRI, r3
 801169a:	f3bf 8f6f 	isb	sy
 801169e:	f3bf 8f4f 	dsb	sy
 80116a2:	603b      	str	r3, [r7, #0]
}
 80116a4:	bf00      	nop
 80116a6:	e7fe      	b.n	80116a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80116a8:	f001 fa1c 	bl	8012ae4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80116ac:	4b39      	ldr	r3, [pc, #228]	; (8011794 <xTaskResumeAll+0x118>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	3b01      	subs	r3, #1
 80116b2:	4a38      	ldr	r2, [pc, #224]	; (8011794 <xTaskResumeAll+0x118>)
 80116b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80116b6:	4b37      	ldr	r3, [pc, #220]	; (8011794 <xTaskResumeAll+0x118>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d162      	bne.n	8011784 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80116be:	4b36      	ldr	r3, [pc, #216]	; (8011798 <xTaskResumeAll+0x11c>)
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d05e      	beq.n	8011784 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80116c6:	e02f      	b.n	8011728 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80116c8:	4b34      	ldr	r3, [pc, #208]	; (801179c <xTaskResumeAll+0x120>)
 80116ca:	68db      	ldr	r3, [r3, #12]
 80116cc:	68db      	ldr	r3, [r3, #12]
 80116ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	3318      	adds	r3, #24
 80116d4:	4618      	mov	r0, r3
 80116d6:	f7fe fcb5 	bl	8010044 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	3304      	adds	r3, #4
 80116de:	4618      	mov	r0, r3
 80116e0:	f7fe fcb0 	bl	8010044 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116e8:	4b2d      	ldr	r3, [pc, #180]	; (80117a0 <xTaskResumeAll+0x124>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	429a      	cmp	r2, r3
 80116ee:	d903      	bls.n	80116f8 <xTaskResumeAll+0x7c>
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116f4:	4a2a      	ldr	r2, [pc, #168]	; (80117a0 <xTaskResumeAll+0x124>)
 80116f6:	6013      	str	r3, [r2, #0]
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116fc:	4613      	mov	r3, r2
 80116fe:	009b      	lsls	r3, r3, #2
 8011700:	4413      	add	r3, r2
 8011702:	009b      	lsls	r3, r3, #2
 8011704:	4a27      	ldr	r2, [pc, #156]	; (80117a4 <xTaskResumeAll+0x128>)
 8011706:	441a      	add	r2, r3
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	3304      	adds	r3, #4
 801170c:	4619      	mov	r1, r3
 801170e:	4610      	mov	r0, r2
 8011710:	f7fe fc3b 	bl	800ff8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011718:	4b23      	ldr	r3, [pc, #140]	; (80117a8 <xTaskResumeAll+0x12c>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801171e:	429a      	cmp	r2, r3
 8011720:	d302      	bcc.n	8011728 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011722:	4b22      	ldr	r3, [pc, #136]	; (80117ac <xTaskResumeAll+0x130>)
 8011724:	2201      	movs	r2, #1
 8011726:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011728:	4b1c      	ldr	r3, [pc, #112]	; (801179c <xTaskResumeAll+0x120>)
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d1cb      	bne.n	80116c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d001      	beq.n	801173a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011736:	f000 fb5f 	bl	8011df8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801173a:	4b1d      	ldr	r3, [pc, #116]	; (80117b0 <xTaskResumeAll+0x134>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d010      	beq.n	8011768 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011746:	f000 f847 	bl	80117d8 <xTaskIncrementTick>
 801174a:	4603      	mov	r3, r0
 801174c:	2b00      	cmp	r3, #0
 801174e:	d002      	beq.n	8011756 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011750:	4b16      	ldr	r3, [pc, #88]	; (80117ac <xTaskResumeAll+0x130>)
 8011752:	2201      	movs	r2, #1
 8011754:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	3b01      	subs	r3, #1
 801175a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d1f1      	bne.n	8011746 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011762:	4b13      	ldr	r3, [pc, #76]	; (80117b0 <xTaskResumeAll+0x134>)
 8011764:	2200      	movs	r2, #0
 8011766:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011768:	4b10      	ldr	r3, [pc, #64]	; (80117ac <xTaskResumeAll+0x130>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d009      	beq.n	8011784 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011770:	2301      	movs	r3, #1
 8011772:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011774:	4b0f      	ldr	r3, [pc, #60]	; (80117b4 <xTaskResumeAll+0x138>)
 8011776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801177a:	601a      	str	r2, [r3, #0]
 801177c:	f3bf 8f4f 	dsb	sy
 8011780:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011784:	f001 f9de 	bl	8012b44 <vPortExitCritical>

	return xAlreadyYielded;
 8011788:	68bb      	ldr	r3, [r7, #8]
}
 801178a:	4618      	mov	r0, r3
 801178c:	3710      	adds	r7, #16
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}
 8011792:	bf00      	nop
 8011794:	20008480 	.word	0x20008480
 8011798:	20008458 	.word	0x20008458
 801179c:	20008418 	.word	0x20008418
 80117a0:	20008460 	.word	0x20008460
 80117a4:	20007f88 	.word	0x20007f88
 80117a8:	20007f84 	.word	0x20007f84
 80117ac:	2000846c 	.word	0x2000846c
 80117b0:	20008468 	.word	0x20008468
 80117b4:	e000ed04 	.word	0xe000ed04

080117b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80117b8:	b480      	push	{r7}
 80117ba:	b083      	sub	sp, #12
 80117bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80117be:	4b05      	ldr	r3, [pc, #20]	; (80117d4 <xTaskGetTickCount+0x1c>)
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80117c4:	687b      	ldr	r3, [r7, #4]
}
 80117c6:	4618      	mov	r0, r3
 80117c8:	370c      	adds	r7, #12
 80117ca:	46bd      	mov	sp, r7
 80117cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d0:	4770      	bx	lr
 80117d2:	bf00      	nop
 80117d4:	2000845c 	.word	0x2000845c

080117d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b086      	sub	sp, #24
 80117dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80117de:	2300      	movs	r3, #0
 80117e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80117e2:	4b4f      	ldr	r3, [pc, #316]	; (8011920 <xTaskIncrementTick+0x148>)
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	f040 808f 	bne.w	801190a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80117ec:	4b4d      	ldr	r3, [pc, #308]	; (8011924 <xTaskIncrementTick+0x14c>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	3301      	adds	r3, #1
 80117f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80117f4:	4a4b      	ldr	r2, [pc, #300]	; (8011924 <xTaskIncrementTick+0x14c>)
 80117f6:	693b      	ldr	r3, [r7, #16]
 80117f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80117fa:	693b      	ldr	r3, [r7, #16]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d120      	bne.n	8011842 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011800:	4b49      	ldr	r3, [pc, #292]	; (8011928 <xTaskIncrementTick+0x150>)
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d00a      	beq.n	8011820 <xTaskIncrementTick+0x48>
	__asm volatile
 801180a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801180e:	f383 8811 	msr	BASEPRI, r3
 8011812:	f3bf 8f6f 	isb	sy
 8011816:	f3bf 8f4f 	dsb	sy
 801181a:	603b      	str	r3, [r7, #0]
}
 801181c:	bf00      	nop
 801181e:	e7fe      	b.n	801181e <xTaskIncrementTick+0x46>
 8011820:	4b41      	ldr	r3, [pc, #260]	; (8011928 <xTaskIncrementTick+0x150>)
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	60fb      	str	r3, [r7, #12]
 8011826:	4b41      	ldr	r3, [pc, #260]	; (801192c <xTaskIncrementTick+0x154>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	4a3f      	ldr	r2, [pc, #252]	; (8011928 <xTaskIncrementTick+0x150>)
 801182c:	6013      	str	r3, [r2, #0]
 801182e:	4a3f      	ldr	r2, [pc, #252]	; (801192c <xTaskIncrementTick+0x154>)
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	6013      	str	r3, [r2, #0]
 8011834:	4b3e      	ldr	r3, [pc, #248]	; (8011930 <xTaskIncrementTick+0x158>)
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	3301      	adds	r3, #1
 801183a:	4a3d      	ldr	r2, [pc, #244]	; (8011930 <xTaskIncrementTick+0x158>)
 801183c:	6013      	str	r3, [r2, #0]
 801183e:	f000 fadb 	bl	8011df8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011842:	4b3c      	ldr	r3, [pc, #240]	; (8011934 <xTaskIncrementTick+0x15c>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	693a      	ldr	r2, [r7, #16]
 8011848:	429a      	cmp	r2, r3
 801184a:	d349      	bcc.n	80118e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801184c:	4b36      	ldr	r3, [pc, #216]	; (8011928 <xTaskIncrementTick+0x150>)
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d104      	bne.n	8011860 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011856:	4b37      	ldr	r3, [pc, #220]	; (8011934 <xTaskIncrementTick+0x15c>)
 8011858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801185c:	601a      	str	r2, [r3, #0]
					break;
 801185e:	e03f      	b.n	80118e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011860:	4b31      	ldr	r3, [pc, #196]	; (8011928 <xTaskIncrementTick+0x150>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	68db      	ldr	r3, [r3, #12]
 8011866:	68db      	ldr	r3, [r3, #12]
 8011868:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	685b      	ldr	r3, [r3, #4]
 801186e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011870:	693a      	ldr	r2, [r7, #16]
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	429a      	cmp	r2, r3
 8011876:	d203      	bcs.n	8011880 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011878:	4a2e      	ldr	r2, [pc, #184]	; (8011934 <xTaskIncrementTick+0x15c>)
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801187e:	e02f      	b.n	80118e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011880:	68bb      	ldr	r3, [r7, #8]
 8011882:	3304      	adds	r3, #4
 8011884:	4618      	mov	r0, r3
 8011886:	f7fe fbdd 	bl	8010044 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801188a:	68bb      	ldr	r3, [r7, #8]
 801188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801188e:	2b00      	cmp	r3, #0
 8011890:	d004      	beq.n	801189c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011892:	68bb      	ldr	r3, [r7, #8]
 8011894:	3318      	adds	r3, #24
 8011896:	4618      	mov	r0, r3
 8011898:	f7fe fbd4 	bl	8010044 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801189c:	68bb      	ldr	r3, [r7, #8]
 801189e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118a0:	4b25      	ldr	r3, [pc, #148]	; (8011938 <xTaskIncrementTick+0x160>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	429a      	cmp	r2, r3
 80118a6:	d903      	bls.n	80118b0 <xTaskIncrementTick+0xd8>
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ac:	4a22      	ldr	r2, [pc, #136]	; (8011938 <xTaskIncrementTick+0x160>)
 80118ae:	6013      	str	r3, [r2, #0]
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118b4:	4613      	mov	r3, r2
 80118b6:	009b      	lsls	r3, r3, #2
 80118b8:	4413      	add	r3, r2
 80118ba:	009b      	lsls	r3, r3, #2
 80118bc:	4a1f      	ldr	r2, [pc, #124]	; (801193c <xTaskIncrementTick+0x164>)
 80118be:	441a      	add	r2, r3
 80118c0:	68bb      	ldr	r3, [r7, #8]
 80118c2:	3304      	adds	r3, #4
 80118c4:	4619      	mov	r1, r3
 80118c6:	4610      	mov	r0, r2
 80118c8:	f7fe fb5f 	bl	800ff8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80118cc:	68bb      	ldr	r3, [r7, #8]
 80118ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118d0:	4b1b      	ldr	r3, [pc, #108]	; (8011940 <xTaskIncrementTick+0x168>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118d6:	429a      	cmp	r2, r3
 80118d8:	d3b8      	bcc.n	801184c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80118da:	2301      	movs	r3, #1
 80118dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80118de:	e7b5      	b.n	801184c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80118e0:	4b17      	ldr	r3, [pc, #92]	; (8011940 <xTaskIncrementTick+0x168>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118e6:	4915      	ldr	r1, [pc, #84]	; (801193c <xTaskIncrementTick+0x164>)
 80118e8:	4613      	mov	r3, r2
 80118ea:	009b      	lsls	r3, r3, #2
 80118ec:	4413      	add	r3, r2
 80118ee:	009b      	lsls	r3, r3, #2
 80118f0:	440b      	add	r3, r1
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	2b01      	cmp	r3, #1
 80118f6:	d901      	bls.n	80118fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80118f8:	2301      	movs	r3, #1
 80118fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80118fc:	4b11      	ldr	r3, [pc, #68]	; (8011944 <xTaskIncrementTick+0x16c>)
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d007      	beq.n	8011914 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011904:	2301      	movs	r3, #1
 8011906:	617b      	str	r3, [r7, #20]
 8011908:	e004      	b.n	8011914 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801190a:	4b0f      	ldr	r3, [pc, #60]	; (8011948 <xTaskIncrementTick+0x170>)
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	3301      	adds	r3, #1
 8011910:	4a0d      	ldr	r2, [pc, #52]	; (8011948 <xTaskIncrementTick+0x170>)
 8011912:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011914:	697b      	ldr	r3, [r7, #20]
}
 8011916:	4618      	mov	r0, r3
 8011918:	3718      	adds	r7, #24
 801191a:	46bd      	mov	sp, r7
 801191c:	bd80      	pop	{r7, pc}
 801191e:	bf00      	nop
 8011920:	20008480 	.word	0x20008480
 8011924:	2000845c 	.word	0x2000845c
 8011928:	20008410 	.word	0x20008410
 801192c:	20008414 	.word	0x20008414
 8011930:	20008470 	.word	0x20008470
 8011934:	20008478 	.word	0x20008478
 8011938:	20008460 	.word	0x20008460
 801193c:	20007f88 	.word	0x20007f88
 8011940:	20007f84 	.word	0x20007f84
 8011944:	2000846c 	.word	0x2000846c
 8011948:	20008468 	.word	0x20008468

0801194c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801194c:	b480      	push	{r7}
 801194e:	b085      	sub	sp, #20
 8011950:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011952:	4b2a      	ldr	r3, [pc, #168]	; (80119fc <vTaskSwitchContext+0xb0>)
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d003      	beq.n	8011962 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801195a:	4b29      	ldr	r3, [pc, #164]	; (8011a00 <vTaskSwitchContext+0xb4>)
 801195c:	2201      	movs	r2, #1
 801195e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011960:	e046      	b.n	80119f0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8011962:	4b27      	ldr	r3, [pc, #156]	; (8011a00 <vTaskSwitchContext+0xb4>)
 8011964:	2200      	movs	r2, #0
 8011966:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011968:	4b26      	ldr	r3, [pc, #152]	; (8011a04 <vTaskSwitchContext+0xb8>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	60fb      	str	r3, [r7, #12]
 801196e:	e010      	b.n	8011992 <vTaskSwitchContext+0x46>
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d10a      	bne.n	801198c <vTaskSwitchContext+0x40>
	__asm volatile
 8011976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801197a:	f383 8811 	msr	BASEPRI, r3
 801197e:	f3bf 8f6f 	isb	sy
 8011982:	f3bf 8f4f 	dsb	sy
 8011986:	607b      	str	r3, [r7, #4]
}
 8011988:	bf00      	nop
 801198a:	e7fe      	b.n	801198a <vTaskSwitchContext+0x3e>
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	3b01      	subs	r3, #1
 8011990:	60fb      	str	r3, [r7, #12]
 8011992:	491d      	ldr	r1, [pc, #116]	; (8011a08 <vTaskSwitchContext+0xbc>)
 8011994:	68fa      	ldr	r2, [r7, #12]
 8011996:	4613      	mov	r3, r2
 8011998:	009b      	lsls	r3, r3, #2
 801199a:	4413      	add	r3, r2
 801199c:	009b      	lsls	r3, r3, #2
 801199e:	440b      	add	r3, r1
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d0e4      	beq.n	8011970 <vTaskSwitchContext+0x24>
 80119a6:	68fa      	ldr	r2, [r7, #12]
 80119a8:	4613      	mov	r3, r2
 80119aa:	009b      	lsls	r3, r3, #2
 80119ac:	4413      	add	r3, r2
 80119ae:	009b      	lsls	r3, r3, #2
 80119b0:	4a15      	ldr	r2, [pc, #84]	; (8011a08 <vTaskSwitchContext+0xbc>)
 80119b2:	4413      	add	r3, r2
 80119b4:	60bb      	str	r3, [r7, #8]
 80119b6:	68bb      	ldr	r3, [r7, #8]
 80119b8:	685b      	ldr	r3, [r3, #4]
 80119ba:	685a      	ldr	r2, [r3, #4]
 80119bc:	68bb      	ldr	r3, [r7, #8]
 80119be:	605a      	str	r2, [r3, #4]
 80119c0:	68bb      	ldr	r3, [r7, #8]
 80119c2:	685a      	ldr	r2, [r3, #4]
 80119c4:	68bb      	ldr	r3, [r7, #8]
 80119c6:	3308      	adds	r3, #8
 80119c8:	429a      	cmp	r2, r3
 80119ca:	d104      	bne.n	80119d6 <vTaskSwitchContext+0x8a>
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	685b      	ldr	r3, [r3, #4]
 80119d0:	685a      	ldr	r2, [r3, #4]
 80119d2:	68bb      	ldr	r3, [r7, #8]
 80119d4:	605a      	str	r2, [r3, #4]
 80119d6:	68bb      	ldr	r3, [r7, #8]
 80119d8:	685b      	ldr	r3, [r3, #4]
 80119da:	68db      	ldr	r3, [r3, #12]
 80119dc:	4a0b      	ldr	r2, [pc, #44]	; (8011a0c <vTaskSwitchContext+0xc0>)
 80119de:	6013      	str	r3, [r2, #0]
 80119e0:	4a08      	ldr	r2, [pc, #32]	; (8011a04 <vTaskSwitchContext+0xb8>)
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80119e6:	4b09      	ldr	r3, [pc, #36]	; (8011a0c <vTaskSwitchContext+0xc0>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	3354      	adds	r3, #84	; 0x54
 80119ec:	4a08      	ldr	r2, [pc, #32]	; (8011a10 <vTaskSwitchContext+0xc4>)
 80119ee:	6013      	str	r3, [r2, #0]
}
 80119f0:	bf00      	nop
 80119f2:	3714      	adds	r7, #20
 80119f4:	46bd      	mov	sp, r7
 80119f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fa:	4770      	bx	lr
 80119fc:	20008480 	.word	0x20008480
 8011a00:	2000846c 	.word	0x2000846c
 8011a04:	20008460 	.word	0x20008460
 8011a08:	20007f88 	.word	0x20007f88
 8011a0c:	20007f84 	.word	0x20007f84
 8011a10:	2000018c 	.word	0x2000018c

08011a14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b084      	sub	sp, #16
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
 8011a1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d10a      	bne.n	8011a3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a28:	f383 8811 	msr	BASEPRI, r3
 8011a2c:	f3bf 8f6f 	isb	sy
 8011a30:	f3bf 8f4f 	dsb	sy
 8011a34:	60fb      	str	r3, [r7, #12]
}
 8011a36:	bf00      	nop
 8011a38:	e7fe      	b.n	8011a38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011a3a:	4b07      	ldr	r3, [pc, #28]	; (8011a58 <vTaskPlaceOnEventList+0x44>)
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	3318      	adds	r3, #24
 8011a40:	4619      	mov	r1, r3
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f7fe fac5 	bl	800ffd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011a48:	2101      	movs	r1, #1
 8011a4a:	6838      	ldr	r0, [r7, #0]
 8011a4c:	f000 fb7e 	bl	801214c <prvAddCurrentTaskToDelayedList>
}
 8011a50:	bf00      	nop
 8011a52:	3710      	adds	r7, #16
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd80      	pop	{r7, pc}
 8011a58:	20007f84 	.word	0x20007f84

08011a5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b086      	sub	sp, #24
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	60f8      	str	r0, [r7, #12]
 8011a64:	60b9      	str	r1, [r7, #8]
 8011a66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d10a      	bne.n	8011a84 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a72:	f383 8811 	msr	BASEPRI, r3
 8011a76:	f3bf 8f6f 	isb	sy
 8011a7a:	f3bf 8f4f 	dsb	sy
 8011a7e:	617b      	str	r3, [r7, #20]
}
 8011a80:	bf00      	nop
 8011a82:	e7fe      	b.n	8011a82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011a84:	4b0a      	ldr	r3, [pc, #40]	; (8011ab0 <vTaskPlaceOnEventListRestricted+0x54>)
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	3318      	adds	r3, #24
 8011a8a:	4619      	mov	r1, r3
 8011a8c:	68f8      	ldr	r0, [r7, #12]
 8011a8e:	f7fe fa7c 	bl	800ff8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d002      	beq.n	8011a9e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011a9e:	6879      	ldr	r1, [r7, #4]
 8011aa0:	68b8      	ldr	r0, [r7, #8]
 8011aa2:	f000 fb53 	bl	801214c <prvAddCurrentTaskToDelayedList>
	}
 8011aa6:	bf00      	nop
 8011aa8:	3718      	adds	r7, #24
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	bd80      	pop	{r7, pc}
 8011aae:	bf00      	nop
 8011ab0:	20007f84 	.word	0x20007f84

08011ab4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b086      	sub	sp, #24
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	68db      	ldr	r3, [r3, #12]
 8011ac0:	68db      	ldr	r3, [r3, #12]
 8011ac2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011ac4:	693b      	ldr	r3, [r7, #16]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d10a      	bne.n	8011ae0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ace:	f383 8811 	msr	BASEPRI, r3
 8011ad2:	f3bf 8f6f 	isb	sy
 8011ad6:	f3bf 8f4f 	dsb	sy
 8011ada:	60fb      	str	r3, [r7, #12]
}
 8011adc:	bf00      	nop
 8011ade:	e7fe      	b.n	8011ade <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011ae0:	693b      	ldr	r3, [r7, #16]
 8011ae2:	3318      	adds	r3, #24
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f7fe faad 	bl	8010044 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011aea:	4b1e      	ldr	r3, [pc, #120]	; (8011b64 <xTaskRemoveFromEventList+0xb0>)
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d11d      	bne.n	8011b2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011af2:	693b      	ldr	r3, [r7, #16]
 8011af4:	3304      	adds	r3, #4
 8011af6:	4618      	mov	r0, r3
 8011af8:	f7fe faa4 	bl	8010044 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011afc:	693b      	ldr	r3, [r7, #16]
 8011afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b00:	4b19      	ldr	r3, [pc, #100]	; (8011b68 <xTaskRemoveFromEventList+0xb4>)
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	429a      	cmp	r2, r3
 8011b06:	d903      	bls.n	8011b10 <xTaskRemoveFromEventList+0x5c>
 8011b08:	693b      	ldr	r3, [r7, #16]
 8011b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b0c:	4a16      	ldr	r2, [pc, #88]	; (8011b68 <xTaskRemoveFromEventList+0xb4>)
 8011b0e:	6013      	str	r3, [r2, #0]
 8011b10:	693b      	ldr	r3, [r7, #16]
 8011b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b14:	4613      	mov	r3, r2
 8011b16:	009b      	lsls	r3, r3, #2
 8011b18:	4413      	add	r3, r2
 8011b1a:	009b      	lsls	r3, r3, #2
 8011b1c:	4a13      	ldr	r2, [pc, #76]	; (8011b6c <xTaskRemoveFromEventList+0xb8>)
 8011b1e:	441a      	add	r2, r3
 8011b20:	693b      	ldr	r3, [r7, #16]
 8011b22:	3304      	adds	r3, #4
 8011b24:	4619      	mov	r1, r3
 8011b26:	4610      	mov	r0, r2
 8011b28:	f7fe fa2f 	bl	800ff8a <vListInsertEnd>
 8011b2c:	e005      	b.n	8011b3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011b2e:	693b      	ldr	r3, [r7, #16]
 8011b30:	3318      	adds	r3, #24
 8011b32:	4619      	mov	r1, r3
 8011b34:	480e      	ldr	r0, [pc, #56]	; (8011b70 <xTaskRemoveFromEventList+0xbc>)
 8011b36:	f7fe fa28 	bl	800ff8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011b3a:	693b      	ldr	r3, [r7, #16]
 8011b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b3e:	4b0d      	ldr	r3, [pc, #52]	; (8011b74 <xTaskRemoveFromEventList+0xc0>)
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b44:	429a      	cmp	r2, r3
 8011b46:	d905      	bls.n	8011b54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011b48:	2301      	movs	r3, #1
 8011b4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011b4c:	4b0a      	ldr	r3, [pc, #40]	; (8011b78 <xTaskRemoveFromEventList+0xc4>)
 8011b4e:	2201      	movs	r2, #1
 8011b50:	601a      	str	r2, [r3, #0]
 8011b52:	e001      	b.n	8011b58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011b54:	2300      	movs	r3, #0
 8011b56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011b58:	697b      	ldr	r3, [r7, #20]
}
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	3718      	adds	r7, #24
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd80      	pop	{r7, pc}
 8011b62:	bf00      	nop
 8011b64:	20008480 	.word	0x20008480
 8011b68:	20008460 	.word	0x20008460
 8011b6c:	20007f88 	.word	0x20007f88
 8011b70:	20008418 	.word	0x20008418
 8011b74:	20007f84 	.word	0x20007f84
 8011b78:	2000846c 	.word	0x2000846c

08011b7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011b7c:	b480      	push	{r7}
 8011b7e:	b083      	sub	sp, #12
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011b84:	4b06      	ldr	r3, [pc, #24]	; (8011ba0 <vTaskInternalSetTimeOutState+0x24>)
 8011b86:	681a      	ldr	r2, [r3, #0]
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011b8c:	4b05      	ldr	r3, [pc, #20]	; (8011ba4 <vTaskInternalSetTimeOutState+0x28>)
 8011b8e:	681a      	ldr	r2, [r3, #0]
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	605a      	str	r2, [r3, #4]
}
 8011b94:	bf00      	nop
 8011b96:	370c      	adds	r7, #12
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9e:	4770      	bx	lr
 8011ba0:	20008470 	.word	0x20008470
 8011ba4:	2000845c 	.word	0x2000845c

08011ba8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b088      	sub	sp, #32
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
 8011bb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d10a      	bne.n	8011bce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bbc:	f383 8811 	msr	BASEPRI, r3
 8011bc0:	f3bf 8f6f 	isb	sy
 8011bc4:	f3bf 8f4f 	dsb	sy
 8011bc8:	613b      	str	r3, [r7, #16]
}
 8011bca:	bf00      	nop
 8011bcc:	e7fe      	b.n	8011bcc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d10a      	bne.n	8011bea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bd8:	f383 8811 	msr	BASEPRI, r3
 8011bdc:	f3bf 8f6f 	isb	sy
 8011be0:	f3bf 8f4f 	dsb	sy
 8011be4:	60fb      	str	r3, [r7, #12]
}
 8011be6:	bf00      	nop
 8011be8:	e7fe      	b.n	8011be8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011bea:	f000 ff7b 	bl	8012ae4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011bee:	4b1d      	ldr	r3, [pc, #116]	; (8011c64 <xTaskCheckForTimeOut+0xbc>)
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	685b      	ldr	r3, [r3, #4]
 8011bf8:	69ba      	ldr	r2, [r7, #24]
 8011bfa:	1ad3      	subs	r3, r2, r3
 8011bfc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c06:	d102      	bne.n	8011c0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011c08:	2300      	movs	r3, #0
 8011c0a:	61fb      	str	r3, [r7, #28]
 8011c0c:	e023      	b.n	8011c56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	681a      	ldr	r2, [r3, #0]
 8011c12:	4b15      	ldr	r3, [pc, #84]	; (8011c68 <xTaskCheckForTimeOut+0xc0>)
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	429a      	cmp	r2, r3
 8011c18:	d007      	beq.n	8011c2a <xTaskCheckForTimeOut+0x82>
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	685b      	ldr	r3, [r3, #4]
 8011c1e:	69ba      	ldr	r2, [r7, #24]
 8011c20:	429a      	cmp	r2, r3
 8011c22:	d302      	bcc.n	8011c2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011c24:	2301      	movs	r3, #1
 8011c26:	61fb      	str	r3, [r7, #28]
 8011c28:	e015      	b.n	8011c56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011c2a:	683b      	ldr	r3, [r7, #0]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	697a      	ldr	r2, [r7, #20]
 8011c30:	429a      	cmp	r2, r3
 8011c32:	d20b      	bcs.n	8011c4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	681a      	ldr	r2, [r3, #0]
 8011c38:	697b      	ldr	r3, [r7, #20]
 8011c3a:	1ad2      	subs	r2, r2, r3
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f7ff ff9b 	bl	8011b7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011c46:	2300      	movs	r3, #0
 8011c48:	61fb      	str	r3, [r7, #28]
 8011c4a:	e004      	b.n	8011c56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	2200      	movs	r2, #0
 8011c50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011c52:	2301      	movs	r3, #1
 8011c54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011c56:	f000 ff75 	bl	8012b44 <vPortExitCritical>

	return xReturn;
 8011c5a:	69fb      	ldr	r3, [r7, #28]
}
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	3720      	adds	r7, #32
 8011c60:	46bd      	mov	sp, r7
 8011c62:	bd80      	pop	{r7, pc}
 8011c64:	2000845c 	.word	0x2000845c
 8011c68:	20008470 	.word	0x20008470

08011c6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011c6c:	b480      	push	{r7}
 8011c6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011c70:	4b03      	ldr	r3, [pc, #12]	; (8011c80 <vTaskMissedYield+0x14>)
 8011c72:	2201      	movs	r2, #1
 8011c74:	601a      	str	r2, [r3, #0]
}
 8011c76:	bf00      	nop
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7e:	4770      	bx	lr
 8011c80:	2000846c 	.word	0x2000846c

08011c84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b082      	sub	sp, #8
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011c8c:	f000 f852 	bl	8011d34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011c90:	4b06      	ldr	r3, [pc, #24]	; (8011cac <prvIdleTask+0x28>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	2b01      	cmp	r3, #1
 8011c96:	d9f9      	bls.n	8011c8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8011c98:	4b05      	ldr	r3, [pc, #20]	; (8011cb0 <prvIdleTask+0x2c>)
 8011c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c9e:	601a      	str	r2, [r3, #0]
 8011ca0:	f3bf 8f4f 	dsb	sy
 8011ca4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011ca8:	e7f0      	b.n	8011c8c <prvIdleTask+0x8>
 8011caa:	bf00      	nop
 8011cac:	20007f88 	.word	0x20007f88
 8011cb0:	e000ed04 	.word	0xe000ed04

08011cb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b082      	sub	sp, #8
 8011cb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011cba:	2300      	movs	r3, #0
 8011cbc:	607b      	str	r3, [r7, #4]
 8011cbe:	e00c      	b.n	8011cda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011cc0:	687a      	ldr	r2, [r7, #4]
 8011cc2:	4613      	mov	r3, r2
 8011cc4:	009b      	lsls	r3, r3, #2
 8011cc6:	4413      	add	r3, r2
 8011cc8:	009b      	lsls	r3, r3, #2
 8011cca:	4a12      	ldr	r2, [pc, #72]	; (8011d14 <prvInitialiseTaskLists+0x60>)
 8011ccc:	4413      	add	r3, r2
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f7fe f92e 	bl	800ff30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	3301      	adds	r3, #1
 8011cd8:	607b      	str	r3, [r7, #4]
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	2b37      	cmp	r3, #55	; 0x37
 8011cde:	d9ef      	bls.n	8011cc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011ce0:	480d      	ldr	r0, [pc, #52]	; (8011d18 <prvInitialiseTaskLists+0x64>)
 8011ce2:	f7fe f925 	bl	800ff30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011ce6:	480d      	ldr	r0, [pc, #52]	; (8011d1c <prvInitialiseTaskLists+0x68>)
 8011ce8:	f7fe f922 	bl	800ff30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011cec:	480c      	ldr	r0, [pc, #48]	; (8011d20 <prvInitialiseTaskLists+0x6c>)
 8011cee:	f7fe f91f 	bl	800ff30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011cf2:	480c      	ldr	r0, [pc, #48]	; (8011d24 <prvInitialiseTaskLists+0x70>)
 8011cf4:	f7fe f91c 	bl	800ff30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011cf8:	480b      	ldr	r0, [pc, #44]	; (8011d28 <prvInitialiseTaskLists+0x74>)
 8011cfa:	f7fe f919 	bl	800ff30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011cfe:	4b0b      	ldr	r3, [pc, #44]	; (8011d2c <prvInitialiseTaskLists+0x78>)
 8011d00:	4a05      	ldr	r2, [pc, #20]	; (8011d18 <prvInitialiseTaskLists+0x64>)
 8011d02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011d04:	4b0a      	ldr	r3, [pc, #40]	; (8011d30 <prvInitialiseTaskLists+0x7c>)
 8011d06:	4a05      	ldr	r2, [pc, #20]	; (8011d1c <prvInitialiseTaskLists+0x68>)
 8011d08:	601a      	str	r2, [r3, #0]
}
 8011d0a:	bf00      	nop
 8011d0c:	3708      	adds	r7, #8
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}
 8011d12:	bf00      	nop
 8011d14:	20007f88 	.word	0x20007f88
 8011d18:	200083e8 	.word	0x200083e8
 8011d1c:	200083fc 	.word	0x200083fc
 8011d20:	20008418 	.word	0x20008418
 8011d24:	2000842c 	.word	0x2000842c
 8011d28:	20008444 	.word	0x20008444
 8011d2c:	20008410 	.word	0x20008410
 8011d30:	20008414 	.word	0x20008414

08011d34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b082      	sub	sp, #8
 8011d38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011d3a:	e019      	b.n	8011d70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011d3c:	f000 fed2 	bl	8012ae4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d40:	4b10      	ldr	r3, [pc, #64]	; (8011d84 <prvCheckTasksWaitingTermination+0x50>)
 8011d42:	68db      	ldr	r3, [r3, #12]
 8011d44:	68db      	ldr	r3, [r3, #12]
 8011d46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	3304      	adds	r3, #4
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f7fe f979 	bl	8010044 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011d52:	4b0d      	ldr	r3, [pc, #52]	; (8011d88 <prvCheckTasksWaitingTermination+0x54>)
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	3b01      	subs	r3, #1
 8011d58:	4a0b      	ldr	r2, [pc, #44]	; (8011d88 <prvCheckTasksWaitingTermination+0x54>)
 8011d5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011d5c:	4b0b      	ldr	r3, [pc, #44]	; (8011d8c <prvCheckTasksWaitingTermination+0x58>)
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	3b01      	subs	r3, #1
 8011d62:	4a0a      	ldr	r2, [pc, #40]	; (8011d8c <prvCheckTasksWaitingTermination+0x58>)
 8011d64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011d66:	f000 feed 	bl	8012b44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011d6a:	6878      	ldr	r0, [r7, #4]
 8011d6c:	f000 f810 	bl	8011d90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011d70:	4b06      	ldr	r3, [pc, #24]	; (8011d8c <prvCheckTasksWaitingTermination+0x58>)
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d1e1      	bne.n	8011d3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011d78:	bf00      	nop
 8011d7a:	bf00      	nop
 8011d7c:	3708      	adds	r7, #8
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bd80      	pop	{r7, pc}
 8011d82:	bf00      	nop
 8011d84:	2000842c 	.word	0x2000842c
 8011d88:	20008458 	.word	0x20008458
 8011d8c:	20008440 	.word	0x20008440

08011d90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b084      	sub	sp, #16
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	3354      	adds	r3, #84	; 0x54
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f002 f965 	bl	801406c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d108      	bne.n	8011dbe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011db0:	4618      	mov	r0, r3
 8011db2:	f001 f85d 	bl	8012e70 <vPortFree>
				vPortFree( pxTCB );
 8011db6:	6878      	ldr	r0, [r7, #4]
 8011db8:	f001 f85a 	bl	8012e70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011dbc:	e018      	b.n	8011df0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011dc4:	2b01      	cmp	r3, #1
 8011dc6:	d103      	bne.n	8011dd0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f001 f851 	bl	8012e70 <vPortFree>
	}
 8011dce:	e00f      	b.n	8011df0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011dd6:	2b02      	cmp	r3, #2
 8011dd8:	d00a      	beq.n	8011df0 <prvDeleteTCB+0x60>
	__asm volatile
 8011dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dde:	f383 8811 	msr	BASEPRI, r3
 8011de2:	f3bf 8f6f 	isb	sy
 8011de6:	f3bf 8f4f 	dsb	sy
 8011dea:	60fb      	str	r3, [r7, #12]
}
 8011dec:	bf00      	nop
 8011dee:	e7fe      	b.n	8011dee <prvDeleteTCB+0x5e>
	}
 8011df0:	bf00      	nop
 8011df2:	3710      	adds	r7, #16
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd80      	pop	{r7, pc}

08011df8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011df8:	b480      	push	{r7}
 8011dfa:	b083      	sub	sp, #12
 8011dfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011dfe:	4b0c      	ldr	r3, [pc, #48]	; (8011e30 <prvResetNextTaskUnblockTime+0x38>)
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d104      	bne.n	8011e12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011e08:	4b0a      	ldr	r3, [pc, #40]	; (8011e34 <prvResetNextTaskUnblockTime+0x3c>)
 8011e0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011e10:	e008      	b.n	8011e24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e12:	4b07      	ldr	r3, [pc, #28]	; (8011e30 <prvResetNextTaskUnblockTime+0x38>)
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	68db      	ldr	r3, [r3, #12]
 8011e18:	68db      	ldr	r3, [r3, #12]
 8011e1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	685b      	ldr	r3, [r3, #4]
 8011e20:	4a04      	ldr	r2, [pc, #16]	; (8011e34 <prvResetNextTaskUnblockTime+0x3c>)
 8011e22:	6013      	str	r3, [r2, #0]
}
 8011e24:	bf00      	nop
 8011e26:	370c      	adds	r7, #12
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2e:	4770      	bx	lr
 8011e30:	20008410 	.word	0x20008410
 8011e34:	20008478 	.word	0x20008478

08011e38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011e38:	b480      	push	{r7}
 8011e3a:	b083      	sub	sp, #12
 8011e3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011e3e:	4b0b      	ldr	r3, [pc, #44]	; (8011e6c <xTaskGetSchedulerState+0x34>)
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d102      	bne.n	8011e4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011e46:	2301      	movs	r3, #1
 8011e48:	607b      	str	r3, [r7, #4]
 8011e4a:	e008      	b.n	8011e5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e4c:	4b08      	ldr	r3, [pc, #32]	; (8011e70 <xTaskGetSchedulerState+0x38>)
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d102      	bne.n	8011e5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011e54:	2302      	movs	r3, #2
 8011e56:	607b      	str	r3, [r7, #4]
 8011e58:	e001      	b.n	8011e5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011e5e:	687b      	ldr	r3, [r7, #4]
	}
 8011e60:	4618      	mov	r0, r3
 8011e62:	370c      	adds	r7, #12
 8011e64:	46bd      	mov	sp, r7
 8011e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6a:	4770      	bx	lr
 8011e6c:	20008464 	.word	0x20008464
 8011e70:	20008480 	.word	0x20008480

08011e74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b084      	sub	sp, #16
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011e80:	2300      	movs	r3, #0
 8011e82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d051      	beq.n	8011f2e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011e8a:	68bb      	ldr	r3, [r7, #8]
 8011e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e8e:	4b2a      	ldr	r3, [pc, #168]	; (8011f38 <xTaskPriorityInherit+0xc4>)
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e94:	429a      	cmp	r2, r3
 8011e96:	d241      	bcs.n	8011f1c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011e98:	68bb      	ldr	r3, [r7, #8]
 8011e9a:	699b      	ldr	r3, [r3, #24]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	db06      	blt.n	8011eae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ea0:	4b25      	ldr	r3, [pc, #148]	; (8011f38 <xTaskPriorityInherit+0xc4>)
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ea6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011eaa:	68bb      	ldr	r3, [r7, #8]
 8011eac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011eae:	68bb      	ldr	r3, [r7, #8]
 8011eb0:	6959      	ldr	r1, [r3, #20]
 8011eb2:	68bb      	ldr	r3, [r7, #8]
 8011eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011eb6:	4613      	mov	r3, r2
 8011eb8:	009b      	lsls	r3, r3, #2
 8011eba:	4413      	add	r3, r2
 8011ebc:	009b      	lsls	r3, r3, #2
 8011ebe:	4a1f      	ldr	r2, [pc, #124]	; (8011f3c <xTaskPriorityInherit+0xc8>)
 8011ec0:	4413      	add	r3, r2
 8011ec2:	4299      	cmp	r1, r3
 8011ec4:	d122      	bne.n	8011f0c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ec6:	68bb      	ldr	r3, [r7, #8]
 8011ec8:	3304      	adds	r3, #4
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7fe f8ba 	bl	8010044 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011ed0:	4b19      	ldr	r3, [pc, #100]	; (8011f38 <xTaskPriorityInherit+0xc4>)
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011eda:	68bb      	ldr	r3, [r7, #8]
 8011edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ede:	4b18      	ldr	r3, [pc, #96]	; (8011f40 <xTaskPriorityInherit+0xcc>)
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	429a      	cmp	r2, r3
 8011ee4:	d903      	bls.n	8011eee <xTaskPriorityInherit+0x7a>
 8011ee6:	68bb      	ldr	r3, [r7, #8]
 8011ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eea:	4a15      	ldr	r2, [pc, #84]	; (8011f40 <xTaskPriorityInherit+0xcc>)
 8011eec:	6013      	str	r3, [r2, #0]
 8011eee:	68bb      	ldr	r3, [r7, #8]
 8011ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ef2:	4613      	mov	r3, r2
 8011ef4:	009b      	lsls	r3, r3, #2
 8011ef6:	4413      	add	r3, r2
 8011ef8:	009b      	lsls	r3, r3, #2
 8011efa:	4a10      	ldr	r2, [pc, #64]	; (8011f3c <xTaskPriorityInherit+0xc8>)
 8011efc:	441a      	add	r2, r3
 8011efe:	68bb      	ldr	r3, [r7, #8]
 8011f00:	3304      	adds	r3, #4
 8011f02:	4619      	mov	r1, r3
 8011f04:	4610      	mov	r0, r2
 8011f06:	f7fe f840 	bl	800ff8a <vListInsertEnd>
 8011f0a:	e004      	b.n	8011f16 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011f0c:	4b0a      	ldr	r3, [pc, #40]	; (8011f38 <xTaskPriorityInherit+0xc4>)
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f12:	68bb      	ldr	r3, [r7, #8]
 8011f14:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011f16:	2301      	movs	r3, #1
 8011f18:	60fb      	str	r3, [r7, #12]
 8011f1a:	e008      	b.n	8011f2e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011f1c:	68bb      	ldr	r3, [r7, #8]
 8011f1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011f20:	4b05      	ldr	r3, [pc, #20]	; (8011f38 <xTaskPriorityInherit+0xc4>)
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f26:	429a      	cmp	r2, r3
 8011f28:	d201      	bcs.n	8011f2e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011f2e:	68fb      	ldr	r3, [r7, #12]
	}
 8011f30:	4618      	mov	r0, r3
 8011f32:	3710      	adds	r7, #16
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd80      	pop	{r7, pc}
 8011f38:	20007f84 	.word	0x20007f84
 8011f3c:	20007f88 	.word	0x20007f88
 8011f40:	20008460 	.word	0x20008460

08011f44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b086      	sub	sp, #24
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011f50:	2300      	movs	r3, #0
 8011f52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d056      	beq.n	8012008 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011f5a:	4b2e      	ldr	r3, [pc, #184]	; (8012014 <xTaskPriorityDisinherit+0xd0>)
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	693a      	ldr	r2, [r7, #16]
 8011f60:	429a      	cmp	r2, r3
 8011f62:	d00a      	beq.n	8011f7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f68:	f383 8811 	msr	BASEPRI, r3
 8011f6c:	f3bf 8f6f 	isb	sy
 8011f70:	f3bf 8f4f 	dsb	sy
 8011f74:	60fb      	str	r3, [r7, #12]
}
 8011f76:	bf00      	nop
 8011f78:	e7fe      	b.n	8011f78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d10a      	bne.n	8011f98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f86:	f383 8811 	msr	BASEPRI, r3
 8011f8a:	f3bf 8f6f 	isb	sy
 8011f8e:	f3bf 8f4f 	dsb	sy
 8011f92:	60bb      	str	r3, [r7, #8]
}
 8011f94:	bf00      	nop
 8011f96:	e7fe      	b.n	8011f96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011f98:	693b      	ldr	r3, [r7, #16]
 8011f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f9c:	1e5a      	subs	r2, r3, #1
 8011f9e:	693b      	ldr	r3, [r7, #16]
 8011fa0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011fa2:	693b      	ldr	r3, [r7, #16]
 8011fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011faa:	429a      	cmp	r2, r3
 8011fac:	d02c      	beq.n	8012008 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011fae:	693b      	ldr	r3, [r7, #16]
 8011fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d128      	bne.n	8012008 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011fb6:	693b      	ldr	r3, [r7, #16]
 8011fb8:	3304      	adds	r3, #4
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f7fe f842 	bl	8010044 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011fc0:	693b      	ldr	r3, [r7, #16]
 8011fc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011fc4:	693b      	ldr	r3, [r7, #16]
 8011fc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011fc8:	693b      	ldr	r3, [r7, #16]
 8011fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fcc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011fd0:	693b      	ldr	r3, [r7, #16]
 8011fd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011fd4:	693b      	ldr	r3, [r7, #16]
 8011fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fd8:	4b0f      	ldr	r3, [pc, #60]	; (8012018 <xTaskPriorityDisinherit+0xd4>)
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	429a      	cmp	r2, r3
 8011fde:	d903      	bls.n	8011fe8 <xTaskPriorityDisinherit+0xa4>
 8011fe0:	693b      	ldr	r3, [r7, #16]
 8011fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fe4:	4a0c      	ldr	r2, [pc, #48]	; (8012018 <xTaskPriorityDisinherit+0xd4>)
 8011fe6:	6013      	str	r3, [r2, #0]
 8011fe8:	693b      	ldr	r3, [r7, #16]
 8011fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fec:	4613      	mov	r3, r2
 8011fee:	009b      	lsls	r3, r3, #2
 8011ff0:	4413      	add	r3, r2
 8011ff2:	009b      	lsls	r3, r3, #2
 8011ff4:	4a09      	ldr	r2, [pc, #36]	; (801201c <xTaskPriorityDisinherit+0xd8>)
 8011ff6:	441a      	add	r2, r3
 8011ff8:	693b      	ldr	r3, [r7, #16]
 8011ffa:	3304      	adds	r3, #4
 8011ffc:	4619      	mov	r1, r3
 8011ffe:	4610      	mov	r0, r2
 8012000:	f7fd ffc3 	bl	800ff8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012004:	2301      	movs	r3, #1
 8012006:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012008:	697b      	ldr	r3, [r7, #20]
	}
 801200a:	4618      	mov	r0, r3
 801200c:	3718      	adds	r7, #24
 801200e:	46bd      	mov	sp, r7
 8012010:	bd80      	pop	{r7, pc}
 8012012:	bf00      	nop
 8012014:	20007f84 	.word	0x20007f84
 8012018:	20008460 	.word	0x20008460
 801201c:	20007f88 	.word	0x20007f88

08012020 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012020:	b580      	push	{r7, lr}
 8012022:	b088      	sub	sp, #32
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
 8012028:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801202e:	2301      	movs	r3, #1
 8012030:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d06a      	beq.n	801210e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012038:	69bb      	ldr	r3, [r7, #24]
 801203a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801203c:	2b00      	cmp	r3, #0
 801203e:	d10a      	bne.n	8012056 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8012040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012044:	f383 8811 	msr	BASEPRI, r3
 8012048:	f3bf 8f6f 	isb	sy
 801204c:	f3bf 8f4f 	dsb	sy
 8012050:	60fb      	str	r3, [r7, #12]
}
 8012052:	bf00      	nop
 8012054:	e7fe      	b.n	8012054 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012056:	69bb      	ldr	r3, [r7, #24]
 8012058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801205a:	683a      	ldr	r2, [r7, #0]
 801205c:	429a      	cmp	r2, r3
 801205e:	d902      	bls.n	8012066 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012060:	683b      	ldr	r3, [r7, #0]
 8012062:	61fb      	str	r3, [r7, #28]
 8012064:	e002      	b.n	801206c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012066:	69bb      	ldr	r3, [r7, #24]
 8012068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801206a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801206c:	69bb      	ldr	r3, [r7, #24]
 801206e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012070:	69fa      	ldr	r2, [r7, #28]
 8012072:	429a      	cmp	r2, r3
 8012074:	d04b      	beq.n	801210e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012076:	69bb      	ldr	r3, [r7, #24]
 8012078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801207a:	697a      	ldr	r2, [r7, #20]
 801207c:	429a      	cmp	r2, r3
 801207e:	d146      	bne.n	801210e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012080:	4b25      	ldr	r3, [pc, #148]	; (8012118 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	69ba      	ldr	r2, [r7, #24]
 8012086:	429a      	cmp	r2, r3
 8012088:	d10a      	bne.n	80120a0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801208a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801208e:	f383 8811 	msr	BASEPRI, r3
 8012092:	f3bf 8f6f 	isb	sy
 8012096:	f3bf 8f4f 	dsb	sy
 801209a:	60bb      	str	r3, [r7, #8]
}
 801209c:	bf00      	nop
 801209e:	e7fe      	b.n	801209e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80120a0:	69bb      	ldr	r3, [r7, #24]
 80120a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120a4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80120a6:	69bb      	ldr	r3, [r7, #24]
 80120a8:	69fa      	ldr	r2, [r7, #28]
 80120aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80120ac:	69bb      	ldr	r3, [r7, #24]
 80120ae:	699b      	ldr	r3, [r3, #24]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	db04      	blt.n	80120be <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80120b4:	69fb      	ldr	r3, [r7, #28]
 80120b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80120ba:	69bb      	ldr	r3, [r7, #24]
 80120bc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80120be:	69bb      	ldr	r3, [r7, #24]
 80120c0:	6959      	ldr	r1, [r3, #20]
 80120c2:	693a      	ldr	r2, [r7, #16]
 80120c4:	4613      	mov	r3, r2
 80120c6:	009b      	lsls	r3, r3, #2
 80120c8:	4413      	add	r3, r2
 80120ca:	009b      	lsls	r3, r3, #2
 80120cc:	4a13      	ldr	r2, [pc, #76]	; (801211c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80120ce:	4413      	add	r3, r2
 80120d0:	4299      	cmp	r1, r3
 80120d2:	d11c      	bne.n	801210e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80120d4:	69bb      	ldr	r3, [r7, #24]
 80120d6:	3304      	adds	r3, #4
 80120d8:	4618      	mov	r0, r3
 80120da:	f7fd ffb3 	bl	8010044 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80120de:	69bb      	ldr	r3, [r7, #24]
 80120e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120e2:	4b0f      	ldr	r3, [pc, #60]	; (8012120 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	429a      	cmp	r2, r3
 80120e8:	d903      	bls.n	80120f2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80120ea:	69bb      	ldr	r3, [r7, #24]
 80120ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120ee:	4a0c      	ldr	r2, [pc, #48]	; (8012120 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80120f0:	6013      	str	r3, [r2, #0]
 80120f2:	69bb      	ldr	r3, [r7, #24]
 80120f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120f6:	4613      	mov	r3, r2
 80120f8:	009b      	lsls	r3, r3, #2
 80120fa:	4413      	add	r3, r2
 80120fc:	009b      	lsls	r3, r3, #2
 80120fe:	4a07      	ldr	r2, [pc, #28]	; (801211c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012100:	441a      	add	r2, r3
 8012102:	69bb      	ldr	r3, [r7, #24]
 8012104:	3304      	adds	r3, #4
 8012106:	4619      	mov	r1, r3
 8012108:	4610      	mov	r0, r2
 801210a:	f7fd ff3e 	bl	800ff8a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801210e:	bf00      	nop
 8012110:	3720      	adds	r7, #32
 8012112:	46bd      	mov	sp, r7
 8012114:	bd80      	pop	{r7, pc}
 8012116:	bf00      	nop
 8012118:	20007f84 	.word	0x20007f84
 801211c:	20007f88 	.word	0x20007f88
 8012120:	20008460 	.word	0x20008460

08012124 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012124:	b480      	push	{r7}
 8012126:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012128:	4b07      	ldr	r3, [pc, #28]	; (8012148 <pvTaskIncrementMutexHeldCount+0x24>)
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d004      	beq.n	801213a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012130:	4b05      	ldr	r3, [pc, #20]	; (8012148 <pvTaskIncrementMutexHeldCount+0x24>)
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012136:	3201      	adds	r2, #1
 8012138:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801213a:	4b03      	ldr	r3, [pc, #12]	; (8012148 <pvTaskIncrementMutexHeldCount+0x24>)
 801213c:	681b      	ldr	r3, [r3, #0]
	}
 801213e:	4618      	mov	r0, r3
 8012140:	46bd      	mov	sp, r7
 8012142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012146:	4770      	bx	lr
 8012148:	20007f84 	.word	0x20007f84

0801214c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b084      	sub	sp, #16
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
 8012154:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012156:	4b21      	ldr	r3, [pc, #132]	; (80121dc <prvAddCurrentTaskToDelayedList+0x90>)
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801215c:	4b20      	ldr	r3, [pc, #128]	; (80121e0 <prvAddCurrentTaskToDelayedList+0x94>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	3304      	adds	r3, #4
 8012162:	4618      	mov	r0, r3
 8012164:	f7fd ff6e 	bl	8010044 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801216e:	d10a      	bne.n	8012186 <prvAddCurrentTaskToDelayedList+0x3a>
 8012170:	683b      	ldr	r3, [r7, #0]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d007      	beq.n	8012186 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012176:	4b1a      	ldr	r3, [pc, #104]	; (80121e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	3304      	adds	r3, #4
 801217c:	4619      	mov	r1, r3
 801217e:	4819      	ldr	r0, [pc, #100]	; (80121e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8012180:	f7fd ff03 	bl	800ff8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012184:	e026      	b.n	80121d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012186:	68fa      	ldr	r2, [r7, #12]
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	4413      	add	r3, r2
 801218c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801218e:	4b14      	ldr	r3, [pc, #80]	; (80121e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	68ba      	ldr	r2, [r7, #8]
 8012194:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012196:	68ba      	ldr	r2, [r7, #8]
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	429a      	cmp	r2, r3
 801219c:	d209      	bcs.n	80121b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801219e:	4b12      	ldr	r3, [pc, #72]	; (80121e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80121a0:	681a      	ldr	r2, [r3, #0]
 80121a2:	4b0f      	ldr	r3, [pc, #60]	; (80121e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	3304      	adds	r3, #4
 80121a8:	4619      	mov	r1, r3
 80121aa:	4610      	mov	r0, r2
 80121ac:	f7fd ff11 	bl	800ffd2 <vListInsert>
}
 80121b0:	e010      	b.n	80121d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80121b2:	4b0e      	ldr	r3, [pc, #56]	; (80121ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80121b4:	681a      	ldr	r2, [r3, #0]
 80121b6:	4b0a      	ldr	r3, [pc, #40]	; (80121e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	3304      	adds	r3, #4
 80121bc:	4619      	mov	r1, r3
 80121be:	4610      	mov	r0, r2
 80121c0:	f7fd ff07 	bl	800ffd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80121c4:	4b0a      	ldr	r3, [pc, #40]	; (80121f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	68ba      	ldr	r2, [r7, #8]
 80121ca:	429a      	cmp	r2, r3
 80121cc:	d202      	bcs.n	80121d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80121ce:	4a08      	ldr	r2, [pc, #32]	; (80121f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	6013      	str	r3, [r2, #0]
}
 80121d4:	bf00      	nop
 80121d6:	3710      	adds	r7, #16
 80121d8:	46bd      	mov	sp, r7
 80121da:	bd80      	pop	{r7, pc}
 80121dc:	2000845c 	.word	0x2000845c
 80121e0:	20007f84 	.word	0x20007f84
 80121e4:	20008444 	.word	0x20008444
 80121e8:	20008414 	.word	0x20008414
 80121ec:	20008410 	.word	0x20008410
 80121f0:	20008478 	.word	0x20008478

080121f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b08a      	sub	sp, #40	; 0x28
 80121f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80121fa:	2300      	movs	r3, #0
 80121fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80121fe:	f000 fb07 	bl	8012810 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012202:	4b1c      	ldr	r3, [pc, #112]	; (8012274 <xTimerCreateTimerTask+0x80>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d021      	beq.n	801224e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801220a:	2300      	movs	r3, #0
 801220c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801220e:	2300      	movs	r3, #0
 8012210:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012212:	1d3a      	adds	r2, r7, #4
 8012214:	f107 0108 	add.w	r1, r7, #8
 8012218:	f107 030c 	add.w	r3, r7, #12
 801221c:	4618      	mov	r0, r3
 801221e:	f7fd fe6d 	bl	800fefc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012222:	6879      	ldr	r1, [r7, #4]
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	68fa      	ldr	r2, [r7, #12]
 8012228:	9202      	str	r2, [sp, #8]
 801222a:	9301      	str	r3, [sp, #4]
 801222c:	2302      	movs	r3, #2
 801222e:	9300      	str	r3, [sp, #0]
 8012230:	2300      	movs	r3, #0
 8012232:	460a      	mov	r2, r1
 8012234:	4910      	ldr	r1, [pc, #64]	; (8012278 <xTimerCreateTimerTask+0x84>)
 8012236:	4811      	ldr	r0, [pc, #68]	; (801227c <xTimerCreateTimerTask+0x88>)
 8012238:	f7fe ff78 	bl	801112c <xTaskCreateStatic>
 801223c:	4603      	mov	r3, r0
 801223e:	4a10      	ldr	r2, [pc, #64]	; (8012280 <xTimerCreateTimerTask+0x8c>)
 8012240:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012242:	4b0f      	ldr	r3, [pc, #60]	; (8012280 <xTimerCreateTimerTask+0x8c>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d001      	beq.n	801224e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801224a:	2301      	movs	r3, #1
 801224c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d10a      	bne.n	801226a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8012254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012258:	f383 8811 	msr	BASEPRI, r3
 801225c:	f3bf 8f6f 	isb	sy
 8012260:	f3bf 8f4f 	dsb	sy
 8012264:	613b      	str	r3, [r7, #16]
}
 8012266:	bf00      	nop
 8012268:	e7fe      	b.n	8012268 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801226a:	697b      	ldr	r3, [r7, #20]
}
 801226c:	4618      	mov	r0, r3
 801226e:	3718      	adds	r7, #24
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}
 8012274:	200084b4 	.word	0x200084b4
 8012278:	080183f0 	.word	0x080183f0
 801227c:	080123b9 	.word	0x080123b9
 8012280:	200084b8 	.word	0x200084b8

08012284 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012284:	b580      	push	{r7, lr}
 8012286:	b08a      	sub	sp, #40	; 0x28
 8012288:	af00      	add	r7, sp, #0
 801228a:	60f8      	str	r0, [r7, #12]
 801228c:	60b9      	str	r1, [r7, #8]
 801228e:	607a      	str	r2, [r7, #4]
 8012290:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012292:	2300      	movs	r3, #0
 8012294:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d10a      	bne.n	80122b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 801229c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122a0:	f383 8811 	msr	BASEPRI, r3
 80122a4:	f3bf 8f6f 	isb	sy
 80122a8:	f3bf 8f4f 	dsb	sy
 80122ac:	623b      	str	r3, [r7, #32]
}
 80122ae:	bf00      	nop
 80122b0:	e7fe      	b.n	80122b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80122b2:	4b1a      	ldr	r3, [pc, #104]	; (801231c <xTimerGenericCommand+0x98>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d02a      	beq.n	8012310 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80122ba:	68bb      	ldr	r3, [r7, #8]
 80122bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80122c6:	68bb      	ldr	r3, [r7, #8]
 80122c8:	2b05      	cmp	r3, #5
 80122ca:	dc18      	bgt.n	80122fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80122cc:	f7ff fdb4 	bl	8011e38 <xTaskGetSchedulerState>
 80122d0:	4603      	mov	r3, r0
 80122d2:	2b02      	cmp	r3, #2
 80122d4:	d109      	bne.n	80122ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80122d6:	4b11      	ldr	r3, [pc, #68]	; (801231c <xTimerGenericCommand+0x98>)
 80122d8:	6818      	ldr	r0, [r3, #0]
 80122da:	f107 0110 	add.w	r1, r7, #16
 80122de:	2300      	movs	r3, #0
 80122e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122e2:	f7fe f881 	bl	80103e8 <xQueueGenericSend>
 80122e6:	6278      	str	r0, [r7, #36]	; 0x24
 80122e8:	e012      	b.n	8012310 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80122ea:	4b0c      	ldr	r3, [pc, #48]	; (801231c <xTimerGenericCommand+0x98>)
 80122ec:	6818      	ldr	r0, [r3, #0]
 80122ee:	f107 0110 	add.w	r1, r7, #16
 80122f2:	2300      	movs	r3, #0
 80122f4:	2200      	movs	r2, #0
 80122f6:	f7fe f877 	bl	80103e8 <xQueueGenericSend>
 80122fa:	6278      	str	r0, [r7, #36]	; 0x24
 80122fc:	e008      	b.n	8012310 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80122fe:	4b07      	ldr	r3, [pc, #28]	; (801231c <xTimerGenericCommand+0x98>)
 8012300:	6818      	ldr	r0, [r3, #0]
 8012302:	f107 0110 	add.w	r1, r7, #16
 8012306:	2300      	movs	r3, #0
 8012308:	683a      	ldr	r2, [r7, #0]
 801230a:	f7fe f96b 	bl	80105e4 <xQueueGenericSendFromISR>
 801230e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012312:	4618      	mov	r0, r3
 8012314:	3728      	adds	r7, #40	; 0x28
 8012316:	46bd      	mov	sp, r7
 8012318:	bd80      	pop	{r7, pc}
 801231a:	bf00      	nop
 801231c:	200084b4 	.word	0x200084b4

08012320 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b088      	sub	sp, #32
 8012324:	af02      	add	r7, sp, #8
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801232a:	4b22      	ldr	r3, [pc, #136]	; (80123b4 <prvProcessExpiredTimer+0x94>)
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	68db      	ldr	r3, [r3, #12]
 8012330:	68db      	ldr	r3, [r3, #12]
 8012332:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012334:	697b      	ldr	r3, [r7, #20]
 8012336:	3304      	adds	r3, #4
 8012338:	4618      	mov	r0, r3
 801233a:	f7fd fe83 	bl	8010044 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012344:	f003 0304 	and.w	r3, r3, #4
 8012348:	2b00      	cmp	r3, #0
 801234a:	d022      	beq.n	8012392 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801234c:	697b      	ldr	r3, [r7, #20]
 801234e:	699a      	ldr	r2, [r3, #24]
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	18d1      	adds	r1, r2, r3
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	683a      	ldr	r2, [r7, #0]
 8012358:	6978      	ldr	r0, [r7, #20]
 801235a:	f000 f8d1 	bl	8012500 <prvInsertTimerInActiveList>
 801235e:	4603      	mov	r3, r0
 8012360:	2b00      	cmp	r3, #0
 8012362:	d01f      	beq.n	80123a4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012364:	2300      	movs	r3, #0
 8012366:	9300      	str	r3, [sp, #0]
 8012368:	2300      	movs	r3, #0
 801236a:	687a      	ldr	r2, [r7, #4]
 801236c:	2100      	movs	r1, #0
 801236e:	6978      	ldr	r0, [r7, #20]
 8012370:	f7ff ff88 	bl	8012284 <xTimerGenericCommand>
 8012374:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012376:	693b      	ldr	r3, [r7, #16]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d113      	bne.n	80123a4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801237c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012380:	f383 8811 	msr	BASEPRI, r3
 8012384:	f3bf 8f6f 	isb	sy
 8012388:	f3bf 8f4f 	dsb	sy
 801238c:	60fb      	str	r3, [r7, #12]
}
 801238e:	bf00      	nop
 8012390:	e7fe      	b.n	8012390 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012392:	697b      	ldr	r3, [r7, #20]
 8012394:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012398:	f023 0301 	bic.w	r3, r3, #1
 801239c:	b2da      	uxtb	r2, r3
 801239e:	697b      	ldr	r3, [r7, #20]
 80123a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80123a4:	697b      	ldr	r3, [r7, #20]
 80123a6:	6a1b      	ldr	r3, [r3, #32]
 80123a8:	6978      	ldr	r0, [r7, #20]
 80123aa:	4798      	blx	r3
}
 80123ac:	bf00      	nop
 80123ae:	3718      	adds	r7, #24
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}
 80123b4:	200084ac 	.word	0x200084ac

080123b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b084      	sub	sp, #16
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80123c0:	f107 0308 	add.w	r3, r7, #8
 80123c4:	4618      	mov	r0, r3
 80123c6:	f000 f857 	bl	8012478 <prvGetNextExpireTime>
 80123ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80123cc:	68bb      	ldr	r3, [r7, #8]
 80123ce:	4619      	mov	r1, r3
 80123d0:	68f8      	ldr	r0, [r7, #12]
 80123d2:	f000 f803 	bl	80123dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80123d6:	f000 f8d5 	bl	8012584 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80123da:	e7f1      	b.n	80123c0 <prvTimerTask+0x8>

080123dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b084      	sub	sp, #16
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
 80123e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80123e6:	f7ff f93b 	bl	8011660 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80123ea:	f107 0308 	add.w	r3, r7, #8
 80123ee:	4618      	mov	r0, r3
 80123f0:	f000 f866 	bl	80124c0 <prvSampleTimeNow>
 80123f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80123f6:	68bb      	ldr	r3, [r7, #8]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d130      	bne.n	801245e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80123fc:	683b      	ldr	r3, [r7, #0]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d10a      	bne.n	8012418 <prvProcessTimerOrBlockTask+0x3c>
 8012402:	687a      	ldr	r2, [r7, #4]
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	429a      	cmp	r2, r3
 8012408:	d806      	bhi.n	8012418 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801240a:	f7ff f937 	bl	801167c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801240e:	68f9      	ldr	r1, [r7, #12]
 8012410:	6878      	ldr	r0, [r7, #4]
 8012412:	f7ff ff85 	bl	8012320 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012416:	e024      	b.n	8012462 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012418:	683b      	ldr	r3, [r7, #0]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d008      	beq.n	8012430 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801241e:	4b13      	ldr	r3, [pc, #76]	; (801246c <prvProcessTimerOrBlockTask+0x90>)
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d101      	bne.n	801242c <prvProcessTimerOrBlockTask+0x50>
 8012428:	2301      	movs	r3, #1
 801242a:	e000      	b.n	801242e <prvProcessTimerOrBlockTask+0x52>
 801242c:	2300      	movs	r3, #0
 801242e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012430:	4b0f      	ldr	r3, [pc, #60]	; (8012470 <prvProcessTimerOrBlockTask+0x94>)
 8012432:	6818      	ldr	r0, [r3, #0]
 8012434:	687a      	ldr	r2, [r7, #4]
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	1ad3      	subs	r3, r2, r3
 801243a:	683a      	ldr	r2, [r7, #0]
 801243c:	4619      	mov	r1, r3
 801243e:	f7fe fe41 	bl	80110c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012442:	f7ff f91b 	bl	801167c <xTaskResumeAll>
 8012446:	4603      	mov	r3, r0
 8012448:	2b00      	cmp	r3, #0
 801244a:	d10a      	bne.n	8012462 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801244c:	4b09      	ldr	r3, [pc, #36]	; (8012474 <prvProcessTimerOrBlockTask+0x98>)
 801244e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012452:	601a      	str	r2, [r3, #0]
 8012454:	f3bf 8f4f 	dsb	sy
 8012458:	f3bf 8f6f 	isb	sy
}
 801245c:	e001      	b.n	8012462 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801245e:	f7ff f90d 	bl	801167c <xTaskResumeAll>
}
 8012462:	bf00      	nop
 8012464:	3710      	adds	r7, #16
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}
 801246a:	bf00      	nop
 801246c:	200084b0 	.word	0x200084b0
 8012470:	200084b4 	.word	0x200084b4
 8012474:	e000ed04 	.word	0xe000ed04

08012478 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012478:	b480      	push	{r7}
 801247a:	b085      	sub	sp, #20
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012480:	4b0e      	ldr	r3, [pc, #56]	; (80124bc <prvGetNextExpireTime+0x44>)
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d101      	bne.n	801248e <prvGetNextExpireTime+0x16>
 801248a:	2201      	movs	r2, #1
 801248c:	e000      	b.n	8012490 <prvGetNextExpireTime+0x18>
 801248e:	2200      	movs	r2, #0
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d105      	bne.n	80124a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801249c:	4b07      	ldr	r3, [pc, #28]	; (80124bc <prvGetNextExpireTime+0x44>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	68db      	ldr	r3, [r3, #12]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	60fb      	str	r3, [r7, #12]
 80124a6:	e001      	b.n	80124ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80124a8:	2300      	movs	r3, #0
 80124aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80124ac:	68fb      	ldr	r3, [r7, #12]
}
 80124ae:	4618      	mov	r0, r3
 80124b0:	3714      	adds	r7, #20
 80124b2:	46bd      	mov	sp, r7
 80124b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b8:	4770      	bx	lr
 80124ba:	bf00      	nop
 80124bc:	200084ac 	.word	0x200084ac

080124c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b084      	sub	sp, #16
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80124c8:	f7ff f976 	bl	80117b8 <xTaskGetTickCount>
 80124cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80124ce:	4b0b      	ldr	r3, [pc, #44]	; (80124fc <prvSampleTimeNow+0x3c>)
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	68fa      	ldr	r2, [r7, #12]
 80124d4:	429a      	cmp	r2, r3
 80124d6:	d205      	bcs.n	80124e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80124d8:	f000 f936 	bl	8012748 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2201      	movs	r2, #1
 80124e0:	601a      	str	r2, [r3, #0]
 80124e2:	e002      	b.n	80124ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	2200      	movs	r2, #0
 80124e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80124ea:	4a04      	ldr	r2, [pc, #16]	; (80124fc <prvSampleTimeNow+0x3c>)
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80124f0:	68fb      	ldr	r3, [r7, #12]
}
 80124f2:	4618      	mov	r0, r3
 80124f4:	3710      	adds	r7, #16
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}
 80124fa:	bf00      	nop
 80124fc:	200084bc 	.word	0x200084bc

08012500 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b086      	sub	sp, #24
 8012504:	af00      	add	r7, sp, #0
 8012506:	60f8      	str	r0, [r7, #12]
 8012508:	60b9      	str	r1, [r7, #8]
 801250a:	607a      	str	r2, [r7, #4]
 801250c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801250e:	2300      	movs	r3, #0
 8012510:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	68ba      	ldr	r2, [r7, #8]
 8012516:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	68fa      	ldr	r2, [r7, #12]
 801251c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801251e:	68ba      	ldr	r2, [r7, #8]
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	429a      	cmp	r2, r3
 8012524:	d812      	bhi.n	801254c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012526:	687a      	ldr	r2, [r7, #4]
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	1ad2      	subs	r2, r2, r3
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	699b      	ldr	r3, [r3, #24]
 8012530:	429a      	cmp	r2, r3
 8012532:	d302      	bcc.n	801253a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012534:	2301      	movs	r3, #1
 8012536:	617b      	str	r3, [r7, #20]
 8012538:	e01b      	b.n	8012572 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801253a:	4b10      	ldr	r3, [pc, #64]	; (801257c <prvInsertTimerInActiveList+0x7c>)
 801253c:	681a      	ldr	r2, [r3, #0]
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	3304      	adds	r3, #4
 8012542:	4619      	mov	r1, r3
 8012544:	4610      	mov	r0, r2
 8012546:	f7fd fd44 	bl	800ffd2 <vListInsert>
 801254a:	e012      	b.n	8012572 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801254c:	687a      	ldr	r2, [r7, #4]
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	429a      	cmp	r2, r3
 8012552:	d206      	bcs.n	8012562 <prvInsertTimerInActiveList+0x62>
 8012554:	68ba      	ldr	r2, [r7, #8]
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	429a      	cmp	r2, r3
 801255a:	d302      	bcc.n	8012562 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801255c:	2301      	movs	r3, #1
 801255e:	617b      	str	r3, [r7, #20]
 8012560:	e007      	b.n	8012572 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012562:	4b07      	ldr	r3, [pc, #28]	; (8012580 <prvInsertTimerInActiveList+0x80>)
 8012564:	681a      	ldr	r2, [r3, #0]
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	3304      	adds	r3, #4
 801256a:	4619      	mov	r1, r3
 801256c:	4610      	mov	r0, r2
 801256e:	f7fd fd30 	bl	800ffd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012572:	697b      	ldr	r3, [r7, #20]
}
 8012574:	4618      	mov	r0, r3
 8012576:	3718      	adds	r7, #24
 8012578:	46bd      	mov	sp, r7
 801257a:	bd80      	pop	{r7, pc}
 801257c:	200084b0 	.word	0x200084b0
 8012580:	200084ac 	.word	0x200084ac

08012584 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b08e      	sub	sp, #56	; 0x38
 8012588:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801258a:	e0ca      	b.n	8012722 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	2b00      	cmp	r3, #0
 8012590:	da18      	bge.n	80125c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012592:	1d3b      	adds	r3, r7, #4
 8012594:	3304      	adds	r3, #4
 8012596:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801259a:	2b00      	cmp	r3, #0
 801259c:	d10a      	bne.n	80125b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801259e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125a2:	f383 8811 	msr	BASEPRI, r3
 80125a6:	f3bf 8f6f 	isb	sy
 80125aa:	f3bf 8f4f 	dsb	sy
 80125ae:	61fb      	str	r3, [r7, #28]
}
 80125b0:	bf00      	nop
 80125b2:	e7fe      	b.n	80125b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80125b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80125ba:	6850      	ldr	r0, [r2, #4]
 80125bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80125be:	6892      	ldr	r2, [r2, #8]
 80125c0:	4611      	mov	r1, r2
 80125c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	f2c0 80aa 	blt.w	8012720 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80125d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125d2:	695b      	ldr	r3, [r3, #20]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d004      	beq.n	80125e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80125d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125da:	3304      	adds	r3, #4
 80125dc:	4618      	mov	r0, r3
 80125de:	f7fd fd31 	bl	8010044 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80125e2:	463b      	mov	r3, r7
 80125e4:	4618      	mov	r0, r3
 80125e6:	f7ff ff6b 	bl	80124c0 <prvSampleTimeNow>
 80125ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2b09      	cmp	r3, #9
 80125f0:	f200 8097 	bhi.w	8012722 <prvProcessReceivedCommands+0x19e>
 80125f4:	a201      	add	r2, pc, #4	; (adr r2, 80125fc <prvProcessReceivedCommands+0x78>)
 80125f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125fa:	bf00      	nop
 80125fc:	08012625 	.word	0x08012625
 8012600:	08012625 	.word	0x08012625
 8012604:	08012625 	.word	0x08012625
 8012608:	08012699 	.word	0x08012699
 801260c:	080126ad 	.word	0x080126ad
 8012610:	080126f7 	.word	0x080126f7
 8012614:	08012625 	.word	0x08012625
 8012618:	08012625 	.word	0x08012625
 801261c:	08012699 	.word	0x08012699
 8012620:	080126ad 	.word	0x080126ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012626:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801262a:	f043 0301 	orr.w	r3, r3, #1
 801262e:	b2da      	uxtb	r2, r3
 8012630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012632:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012636:	68ba      	ldr	r2, [r7, #8]
 8012638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801263a:	699b      	ldr	r3, [r3, #24]
 801263c:	18d1      	adds	r1, r2, r3
 801263e:	68bb      	ldr	r3, [r7, #8]
 8012640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012644:	f7ff ff5c 	bl	8012500 <prvInsertTimerInActiveList>
 8012648:	4603      	mov	r3, r0
 801264a:	2b00      	cmp	r3, #0
 801264c:	d069      	beq.n	8012722 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012650:	6a1b      	ldr	r3, [r3, #32]
 8012652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012654:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801265c:	f003 0304 	and.w	r3, r3, #4
 8012660:	2b00      	cmp	r3, #0
 8012662:	d05e      	beq.n	8012722 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012664:	68ba      	ldr	r2, [r7, #8]
 8012666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012668:	699b      	ldr	r3, [r3, #24]
 801266a:	441a      	add	r2, r3
 801266c:	2300      	movs	r3, #0
 801266e:	9300      	str	r3, [sp, #0]
 8012670:	2300      	movs	r3, #0
 8012672:	2100      	movs	r1, #0
 8012674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012676:	f7ff fe05 	bl	8012284 <xTimerGenericCommand>
 801267a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801267c:	6a3b      	ldr	r3, [r7, #32]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d14f      	bne.n	8012722 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8012682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012686:	f383 8811 	msr	BASEPRI, r3
 801268a:	f3bf 8f6f 	isb	sy
 801268e:	f3bf 8f4f 	dsb	sy
 8012692:	61bb      	str	r3, [r7, #24]
}
 8012694:	bf00      	nop
 8012696:	e7fe      	b.n	8012696 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801269a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801269e:	f023 0301 	bic.w	r3, r3, #1
 80126a2:	b2da      	uxtb	r2, r3
 80126a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80126aa:	e03a      	b.n	8012722 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80126ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126b2:	f043 0301 	orr.w	r3, r3, #1
 80126b6:	b2da      	uxtb	r2, r3
 80126b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80126be:	68ba      	ldr	r2, [r7, #8]
 80126c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80126c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126c6:	699b      	ldr	r3, [r3, #24]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d10a      	bne.n	80126e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80126cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126d0:	f383 8811 	msr	BASEPRI, r3
 80126d4:	f3bf 8f6f 	isb	sy
 80126d8:	f3bf 8f4f 	dsb	sy
 80126dc:	617b      	str	r3, [r7, #20]
}
 80126de:	bf00      	nop
 80126e0:	e7fe      	b.n	80126e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80126e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126e4:	699a      	ldr	r2, [r3, #24]
 80126e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e8:	18d1      	adds	r1, r2, r3
 80126ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126f0:	f7ff ff06 	bl	8012500 <prvInsertTimerInActiveList>
					break;
 80126f4:	e015      	b.n	8012722 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80126f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126fc:	f003 0302 	and.w	r3, r3, #2
 8012700:	2b00      	cmp	r3, #0
 8012702:	d103      	bne.n	801270c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012706:	f000 fbb3 	bl	8012e70 <vPortFree>
 801270a:	e00a      	b.n	8012722 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801270c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801270e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012712:	f023 0301 	bic.w	r3, r3, #1
 8012716:	b2da      	uxtb	r2, r3
 8012718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801271a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801271e:	e000      	b.n	8012722 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012720:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012722:	4b08      	ldr	r3, [pc, #32]	; (8012744 <prvProcessReceivedCommands+0x1c0>)
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	1d39      	adds	r1, r7, #4
 8012728:	2200      	movs	r2, #0
 801272a:	4618      	mov	r0, r3
 801272c:	f7fe f882 	bl	8010834 <xQueueReceive>
 8012730:	4603      	mov	r3, r0
 8012732:	2b00      	cmp	r3, #0
 8012734:	f47f af2a 	bne.w	801258c <prvProcessReceivedCommands+0x8>
	}
}
 8012738:	bf00      	nop
 801273a:	bf00      	nop
 801273c:	3730      	adds	r7, #48	; 0x30
 801273e:	46bd      	mov	sp, r7
 8012740:	bd80      	pop	{r7, pc}
 8012742:	bf00      	nop
 8012744:	200084b4 	.word	0x200084b4

08012748 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b088      	sub	sp, #32
 801274c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801274e:	e048      	b.n	80127e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012750:	4b2d      	ldr	r3, [pc, #180]	; (8012808 <prvSwitchTimerLists+0xc0>)
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	68db      	ldr	r3, [r3, #12]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801275a:	4b2b      	ldr	r3, [pc, #172]	; (8012808 <prvSwitchTimerLists+0xc0>)
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	68db      	ldr	r3, [r3, #12]
 8012760:	68db      	ldr	r3, [r3, #12]
 8012762:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	3304      	adds	r3, #4
 8012768:	4618      	mov	r0, r3
 801276a:	f7fd fc6b 	bl	8010044 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	6a1b      	ldr	r3, [r3, #32]
 8012772:	68f8      	ldr	r0, [r7, #12]
 8012774:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801277c:	f003 0304 	and.w	r3, r3, #4
 8012780:	2b00      	cmp	r3, #0
 8012782:	d02e      	beq.n	80127e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	699b      	ldr	r3, [r3, #24]
 8012788:	693a      	ldr	r2, [r7, #16]
 801278a:	4413      	add	r3, r2
 801278c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801278e:	68ba      	ldr	r2, [r7, #8]
 8012790:	693b      	ldr	r3, [r7, #16]
 8012792:	429a      	cmp	r2, r3
 8012794:	d90e      	bls.n	80127b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	68ba      	ldr	r2, [r7, #8]
 801279a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	68fa      	ldr	r2, [r7, #12]
 80127a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80127a2:	4b19      	ldr	r3, [pc, #100]	; (8012808 <prvSwitchTimerLists+0xc0>)
 80127a4:	681a      	ldr	r2, [r3, #0]
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	3304      	adds	r3, #4
 80127aa:	4619      	mov	r1, r3
 80127ac:	4610      	mov	r0, r2
 80127ae:	f7fd fc10 	bl	800ffd2 <vListInsert>
 80127b2:	e016      	b.n	80127e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80127b4:	2300      	movs	r3, #0
 80127b6:	9300      	str	r3, [sp, #0]
 80127b8:	2300      	movs	r3, #0
 80127ba:	693a      	ldr	r2, [r7, #16]
 80127bc:	2100      	movs	r1, #0
 80127be:	68f8      	ldr	r0, [r7, #12]
 80127c0:	f7ff fd60 	bl	8012284 <xTimerGenericCommand>
 80127c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d10a      	bne.n	80127e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80127cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127d0:	f383 8811 	msr	BASEPRI, r3
 80127d4:	f3bf 8f6f 	isb	sy
 80127d8:	f3bf 8f4f 	dsb	sy
 80127dc:	603b      	str	r3, [r7, #0]
}
 80127de:	bf00      	nop
 80127e0:	e7fe      	b.n	80127e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80127e2:	4b09      	ldr	r3, [pc, #36]	; (8012808 <prvSwitchTimerLists+0xc0>)
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d1b1      	bne.n	8012750 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80127ec:	4b06      	ldr	r3, [pc, #24]	; (8012808 <prvSwitchTimerLists+0xc0>)
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80127f2:	4b06      	ldr	r3, [pc, #24]	; (801280c <prvSwitchTimerLists+0xc4>)
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	4a04      	ldr	r2, [pc, #16]	; (8012808 <prvSwitchTimerLists+0xc0>)
 80127f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80127fa:	4a04      	ldr	r2, [pc, #16]	; (801280c <prvSwitchTimerLists+0xc4>)
 80127fc:	697b      	ldr	r3, [r7, #20]
 80127fe:	6013      	str	r3, [r2, #0]
}
 8012800:	bf00      	nop
 8012802:	3718      	adds	r7, #24
 8012804:	46bd      	mov	sp, r7
 8012806:	bd80      	pop	{r7, pc}
 8012808:	200084ac 	.word	0x200084ac
 801280c:	200084b0 	.word	0x200084b0

08012810 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b082      	sub	sp, #8
 8012814:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012816:	f000 f965 	bl	8012ae4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801281a:	4b15      	ldr	r3, [pc, #84]	; (8012870 <prvCheckForValidListAndQueue+0x60>)
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d120      	bne.n	8012864 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012822:	4814      	ldr	r0, [pc, #80]	; (8012874 <prvCheckForValidListAndQueue+0x64>)
 8012824:	f7fd fb84 	bl	800ff30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012828:	4813      	ldr	r0, [pc, #76]	; (8012878 <prvCheckForValidListAndQueue+0x68>)
 801282a:	f7fd fb81 	bl	800ff30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801282e:	4b13      	ldr	r3, [pc, #76]	; (801287c <prvCheckForValidListAndQueue+0x6c>)
 8012830:	4a10      	ldr	r2, [pc, #64]	; (8012874 <prvCheckForValidListAndQueue+0x64>)
 8012832:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012834:	4b12      	ldr	r3, [pc, #72]	; (8012880 <prvCheckForValidListAndQueue+0x70>)
 8012836:	4a10      	ldr	r2, [pc, #64]	; (8012878 <prvCheckForValidListAndQueue+0x68>)
 8012838:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801283a:	2300      	movs	r3, #0
 801283c:	9300      	str	r3, [sp, #0]
 801283e:	4b11      	ldr	r3, [pc, #68]	; (8012884 <prvCheckForValidListAndQueue+0x74>)
 8012840:	4a11      	ldr	r2, [pc, #68]	; (8012888 <prvCheckForValidListAndQueue+0x78>)
 8012842:	2110      	movs	r1, #16
 8012844:	200a      	movs	r0, #10
 8012846:	f7fd fc8f 	bl	8010168 <xQueueGenericCreateStatic>
 801284a:	4603      	mov	r3, r0
 801284c:	4a08      	ldr	r2, [pc, #32]	; (8012870 <prvCheckForValidListAndQueue+0x60>)
 801284e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012850:	4b07      	ldr	r3, [pc, #28]	; (8012870 <prvCheckForValidListAndQueue+0x60>)
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d005      	beq.n	8012864 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012858:	4b05      	ldr	r3, [pc, #20]	; (8012870 <prvCheckForValidListAndQueue+0x60>)
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	490b      	ldr	r1, [pc, #44]	; (801288c <prvCheckForValidListAndQueue+0x7c>)
 801285e:	4618      	mov	r0, r3
 8012860:	f7fe fbdc 	bl	801101c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012864:	f000 f96e 	bl	8012b44 <vPortExitCritical>
}
 8012868:	bf00      	nop
 801286a:	46bd      	mov	sp, r7
 801286c:	bd80      	pop	{r7, pc}
 801286e:	bf00      	nop
 8012870:	200084b4 	.word	0x200084b4
 8012874:	20008484 	.word	0x20008484
 8012878:	20008498 	.word	0x20008498
 801287c:	200084ac 	.word	0x200084ac
 8012880:	200084b0 	.word	0x200084b0
 8012884:	20008560 	.word	0x20008560
 8012888:	200084c0 	.word	0x200084c0
 801288c:	080183f8 	.word	0x080183f8

08012890 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012890:	b480      	push	{r7}
 8012892:	b085      	sub	sp, #20
 8012894:	af00      	add	r7, sp, #0
 8012896:	60f8      	str	r0, [r7, #12]
 8012898:	60b9      	str	r1, [r7, #8]
 801289a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	3b04      	subs	r3, #4
 80128a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80128a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	3b04      	subs	r3, #4
 80128ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	f023 0201 	bic.w	r2, r3, #1
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	3b04      	subs	r3, #4
 80128be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80128c0:	4a0c      	ldr	r2, [pc, #48]	; (80128f4 <pxPortInitialiseStack+0x64>)
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	3b14      	subs	r3, #20
 80128ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80128cc:	687a      	ldr	r2, [r7, #4]
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	3b04      	subs	r3, #4
 80128d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	f06f 0202 	mvn.w	r2, #2
 80128de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	3b20      	subs	r3, #32
 80128e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80128e6:	68fb      	ldr	r3, [r7, #12]
}
 80128e8:	4618      	mov	r0, r3
 80128ea:	3714      	adds	r7, #20
 80128ec:	46bd      	mov	sp, r7
 80128ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f2:	4770      	bx	lr
 80128f4:	080128f9 	.word	0x080128f9

080128f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80128f8:	b480      	push	{r7}
 80128fa:	b085      	sub	sp, #20
 80128fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80128fe:	2300      	movs	r3, #0
 8012900:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012902:	4b12      	ldr	r3, [pc, #72]	; (801294c <prvTaskExitError+0x54>)
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801290a:	d00a      	beq.n	8012922 <prvTaskExitError+0x2a>
	__asm volatile
 801290c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012910:	f383 8811 	msr	BASEPRI, r3
 8012914:	f3bf 8f6f 	isb	sy
 8012918:	f3bf 8f4f 	dsb	sy
 801291c:	60fb      	str	r3, [r7, #12]
}
 801291e:	bf00      	nop
 8012920:	e7fe      	b.n	8012920 <prvTaskExitError+0x28>
	__asm volatile
 8012922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012926:	f383 8811 	msr	BASEPRI, r3
 801292a:	f3bf 8f6f 	isb	sy
 801292e:	f3bf 8f4f 	dsb	sy
 8012932:	60bb      	str	r3, [r7, #8]
}
 8012934:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012936:	bf00      	nop
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d0fc      	beq.n	8012938 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801293e:	bf00      	nop
 8012940:	bf00      	nop
 8012942:	3714      	adds	r7, #20
 8012944:	46bd      	mov	sp, r7
 8012946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294a:	4770      	bx	lr
 801294c:	20000188 	.word	0x20000188

08012950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012950:	4b07      	ldr	r3, [pc, #28]	; (8012970 <pxCurrentTCBConst2>)
 8012952:	6819      	ldr	r1, [r3, #0]
 8012954:	6808      	ldr	r0, [r1, #0]
 8012956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801295a:	f380 8809 	msr	PSP, r0
 801295e:	f3bf 8f6f 	isb	sy
 8012962:	f04f 0000 	mov.w	r0, #0
 8012966:	f380 8811 	msr	BASEPRI, r0
 801296a:	4770      	bx	lr
 801296c:	f3af 8000 	nop.w

08012970 <pxCurrentTCBConst2>:
 8012970:	20007f84 	.word	0x20007f84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012974:	bf00      	nop
 8012976:	bf00      	nop

08012978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012978:	4808      	ldr	r0, [pc, #32]	; (801299c <prvPortStartFirstTask+0x24>)
 801297a:	6800      	ldr	r0, [r0, #0]
 801297c:	6800      	ldr	r0, [r0, #0]
 801297e:	f380 8808 	msr	MSP, r0
 8012982:	f04f 0000 	mov.w	r0, #0
 8012986:	f380 8814 	msr	CONTROL, r0
 801298a:	b662      	cpsie	i
 801298c:	b661      	cpsie	f
 801298e:	f3bf 8f4f 	dsb	sy
 8012992:	f3bf 8f6f 	isb	sy
 8012996:	df00      	svc	0
 8012998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801299a:	bf00      	nop
 801299c:	e000ed08 	.word	0xe000ed08

080129a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b086      	sub	sp, #24
 80129a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80129a6:	4b46      	ldr	r3, [pc, #280]	; (8012ac0 <xPortStartScheduler+0x120>)
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	4a46      	ldr	r2, [pc, #280]	; (8012ac4 <xPortStartScheduler+0x124>)
 80129ac:	4293      	cmp	r3, r2
 80129ae:	d10a      	bne.n	80129c6 <xPortStartScheduler+0x26>
	__asm volatile
 80129b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129b4:	f383 8811 	msr	BASEPRI, r3
 80129b8:	f3bf 8f6f 	isb	sy
 80129bc:	f3bf 8f4f 	dsb	sy
 80129c0:	613b      	str	r3, [r7, #16]
}
 80129c2:	bf00      	nop
 80129c4:	e7fe      	b.n	80129c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80129c6:	4b3e      	ldr	r3, [pc, #248]	; (8012ac0 <xPortStartScheduler+0x120>)
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	4a3f      	ldr	r2, [pc, #252]	; (8012ac8 <xPortStartScheduler+0x128>)
 80129cc:	4293      	cmp	r3, r2
 80129ce:	d10a      	bne.n	80129e6 <xPortStartScheduler+0x46>
	__asm volatile
 80129d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129d4:	f383 8811 	msr	BASEPRI, r3
 80129d8:	f3bf 8f6f 	isb	sy
 80129dc:	f3bf 8f4f 	dsb	sy
 80129e0:	60fb      	str	r3, [r7, #12]
}
 80129e2:	bf00      	nop
 80129e4:	e7fe      	b.n	80129e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80129e6:	4b39      	ldr	r3, [pc, #228]	; (8012acc <xPortStartScheduler+0x12c>)
 80129e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80129ea:	697b      	ldr	r3, [r7, #20]
 80129ec:	781b      	ldrb	r3, [r3, #0]
 80129ee:	b2db      	uxtb	r3, r3
 80129f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80129f2:	697b      	ldr	r3, [r7, #20]
 80129f4:	22ff      	movs	r2, #255	; 0xff
 80129f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80129f8:	697b      	ldr	r3, [r7, #20]
 80129fa:	781b      	ldrb	r3, [r3, #0]
 80129fc:	b2db      	uxtb	r3, r3
 80129fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012a00:	78fb      	ldrb	r3, [r7, #3]
 8012a02:	b2db      	uxtb	r3, r3
 8012a04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012a08:	b2da      	uxtb	r2, r3
 8012a0a:	4b31      	ldr	r3, [pc, #196]	; (8012ad0 <xPortStartScheduler+0x130>)
 8012a0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012a0e:	4b31      	ldr	r3, [pc, #196]	; (8012ad4 <xPortStartScheduler+0x134>)
 8012a10:	2207      	movs	r2, #7
 8012a12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012a14:	e009      	b.n	8012a2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012a16:	4b2f      	ldr	r3, [pc, #188]	; (8012ad4 <xPortStartScheduler+0x134>)
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	3b01      	subs	r3, #1
 8012a1c:	4a2d      	ldr	r2, [pc, #180]	; (8012ad4 <xPortStartScheduler+0x134>)
 8012a1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012a20:	78fb      	ldrb	r3, [r7, #3]
 8012a22:	b2db      	uxtb	r3, r3
 8012a24:	005b      	lsls	r3, r3, #1
 8012a26:	b2db      	uxtb	r3, r3
 8012a28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012a2a:	78fb      	ldrb	r3, [r7, #3]
 8012a2c:	b2db      	uxtb	r3, r3
 8012a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a32:	2b80      	cmp	r3, #128	; 0x80
 8012a34:	d0ef      	beq.n	8012a16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012a36:	4b27      	ldr	r3, [pc, #156]	; (8012ad4 <xPortStartScheduler+0x134>)
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	f1c3 0307 	rsb	r3, r3, #7
 8012a3e:	2b04      	cmp	r3, #4
 8012a40:	d00a      	beq.n	8012a58 <xPortStartScheduler+0xb8>
	__asm volatile
 8012a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a46:	f383 8811 	msr	BASEPRI, r3
 8012a4a:	f3bf 8f6f 	isb	sy
 8012a4e:	f3bf 8f4f 	dsb	sy
 8012a52:	60bb      	str	r3, [r7, #8]
}
 8012a54:	bf00      	nop
 8012a56:	e7fe      	b.n	8012a56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012a58:	4b1e      	ldr	r3, [pc, #120]	; (8012ad4 <xPortStartScheduler+0x134>)
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	021b      	lsls	r3, r3, #8
 8012a5e:	4a1d      	ldr	r2, [pc, #116]	; (8012ad4 <xPortStartScheduler+0x134>)
 8012a60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012a62:	4b1c      	ldr	r3, [pc, #112]	; (8012ad4 <xPortStartScheduler+0x134>)
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012a6a:	4a1a      	ldr	r2, [pc, #104]	; (8012ad4 <xPortStartScheduler+0x134>)
 8012a6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	b2da      	uxtb	r2, r3
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012a76:	4b18      	ldr	r3, [pc, #96]	; (8012ad8 <xPortStartScheduler+0x138>)
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	4a17      	ldr	r2, [pc, #92]	; (8012ad8 <xPortStartScheduler+0x138>)
 8012a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012a80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012a82:	4b15      	ldr	r3, [pc, #84]	; (8012ad8 <xPortStartScheduler+0x138>)
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	4a14      	ldr	r2, [pc, #80]	; (8012ad8 <xPortStartScheduler+0x138>)
 8012a88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012a8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012a8e:	f000 f8dd 	bl	8012c4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012a92:	4b12      	ldr	r3, [pc, #72]	; (8012adc <xPortStartScheduler+0x13c>)
 8012a94:	2200      	movs	r2, #0
 8012a96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012a98:	f000 f8fc 	bl	8012c94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012a9c:	4b10      	ldr	r3, [pc, #64]	; (8012ae0 <xPortStartScheduler+0x140>)
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	4a0f      	ldr	r2, [pc, #60]	; (8012ae0 <xPortStartScheduler+0x140>)
 8012aa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012aa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012aa8:	f7ff ff66 	bl	8012978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012aac:	f7fe ff4e 	bl	801194c <vTaskSwitchContext>
	prvTaskExitError();
 8012ab0:	f7ff ff22 	bl	80128f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012ab4:	2300      	movs	r3, #0
}
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	3718      	adds	r7, #24
 8012aba:	46bd      	mov	sp, r7
 8012abc:	bd80      	pop	{r7, pc}
 8012abe:	bf00      	nop
 8012ac0:	e000ed00 	.word	0xe000ed00
 8012ac4:	410fc271 	.word	0x410fc271
 8012ac8:	410fc270 	.word	0x410fc270
 8012acc:	e000e400 	.word	0xe000e400
 8012ad0:	200085b0 	.word	0x200085b0
 8012ad4:	200085b4 	.word	0x200085b4
 8012ad8:	e000ed20 	.word	0xe000ed20
 8012adc:	20000188 	.word	0x20000188
 8012ae0:	e000ef34 	.word	0xe000ef34

08012ae4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012ae4:	b480      	push	{r7}
 8012ae6:	b083      	sub	sp, #12
 8012ae8:	af00      	add	r7, sp, #0
	__asm volatile
 8012aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aee:	f383 8811 	msr	BASEPRI, r3
 8012af2:	f3bf 8f6f 	isb	sy
 8012af6:	f3bf 8f4f 	dsb	sy
 8012afa:	607b      	str	r3, [r7, #4]
}
 8012afc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012afe:	4b0f      	ldr	r3, [pc, #60]	; (8012b3c <vPortEnterCritical+0x58>)
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	3301      	adds	r3, #1
 8012b04:	4a0d      	ldr	r2, [pc, #52]	; (8012b3c <vPortEnterCritical+0x58>)
 8012b06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012b08:	4b0c      	ldr	r3, [pc, #48]	; (8012b3c <vPortEnterCritical+0x58>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	2b01      	cmp	r3, #1
 8012b0e:	d10f      	bne.n	8012b30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012b10:	4b0b      	ldr	r3, [pc, #44]	; (8012b40 <vPortEnterCritical+0x5c>)
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	b2db      	uxtb	r3, r3
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d00a      	beq.n	8012b30 <vPortEnterCritical+0x4c>
	__asm volatile
 8012b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b1e:	f383 8811 	msr	BASEPRI, r3
 8012b22:	f3bf 8f6f 	isb	sy
 8012b26:	f3bf 8f4f 	dsb	sy
 8012b2a:	603b      	str	r3, [r7, #0]
}
 8012b2c:	bf00      	nop
 8012b2e:	e7fe      	b.n	8012b2e <vPortEnterCritical+0x4a>
	}
}
 8012b30:	bf00      	nop
 8012b32:	370c      	adds	r7, #12
 8012b34:	46bd      	mov	sp, r7
 8012b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3a:	4770      	bx	lr
 8012b3c:	20000188 	.word	0x20000188
 8012b40:	e000ed04 	.word	0xe000ed04

08012b44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012b44:	b480      	push	{r7}
 8012b46:	b083      	sub	sp, #12
 8012b48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012b4a:	4b12      	ldr	r3, [pc, #72]	; (8012b94 <vPortExitCritical+0x50>)
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d10a      	bne.n	8012b68 <vPortExitCritical+0x24>
	__asm volatile
 8012b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b56:	f383 8811 	msr	BASEPRI, r3
 8012b5a:	f3bf 8f6f 	isb	sy
 8012b5e:	f3bf 8f4f 	dsb	sy
 8012b62:	607b      	str	r3, [r7, #4]
}
 8012b64:	bf00      	nop
 8012b66:	e7fe      	b.n	8012b66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012b68:	4b0a      	ldr	r3, [pc, #40]	; (8012b94 <vPortExitCritical+0x50>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	3b01      	subs	r3, #1
 8012b6e:	4a09      	ldr	r2, [pc, #36]	; (8012b94 <vPortExitCritical+0x50>)
 8012b70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012b72:	4b08      	ldr	r3, [pc, #32]	; (8012b94 <vPortExitCritical+0x50>)
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d105      	bne.n	8012b86 <vPortExitCritical+0x42>
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012b7e:	683b      	ldr	r3, [r7, #0]
 8012b80:	f383 8811 	msr	BASEPRI, r3
}
 8012b84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012b86:	bf00      	nop
 8012b88:	370c      	adds	r7, #12
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b90:	4770      	bx	lr
 8012b92:	bf00      	nop
 8012b94:	20000188 	.word	0x20000188
	...

08012ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012ba0:	f3ef 8009 	mrs	r0, PSP
 8012ba4:	f3bf 8f6f 	isb	sy
 8012ba8:	4b15      	ldr	r3, [pc, #84]	; (8012c00 <pxCurrentTCBConst>)
 8012baa:	681a      	ldr	r2, [r3, #0]
 8012bac:	f01e 0f10 	tst.w	lr, #16
 8012bb0:	bf08      	it	eq
 8012bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bba:	6010      	str	r0, [r2, #0]
 8012bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012bc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012bc4:	f380 8811 	msr	BASEPRI, r0
 8012bc8:	f3bf 8f4f 	dsb	sy
 8012bcc:	f3bf 8f6f 	isb	sy
 8012bd0:	f7fe febc 	bl	801194c <vTaskSwitchContext>
 8012bd4:	f04f 0000 	mov.w	r0, #0
 8012bd8:	f380 8811 	msr	BASEPRI, r0
 8012bdc:	bc09      	pop	{r0, r3}
 8012bde:	6819      	ldr	r1, [r3, #0]
 8012be0:	6808      	ldr	r0, [r1, #0]
 8012be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012be6:	f01e 0f10 	tst.w	lr, #16
 8012bea:	bf08      	it	eq
 8012bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012bf0:	f380 8809 	msr	PSP, r0
 8012bf4:	f3bf 8f6f 	isb	sy
 8012bf8:	4770      	bx	lr
 8012bfa:	bf00      	nop
 8012bfc:	f3af 8000 	nop.w

08012c00 <pxCurrentTCBConst>:
 8012c00:	20007f84 	.word	0x20007f84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012c04:	bf00      	nop
 8012c06:	bf00      	nop

08012c08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b082      	sub	sp, #8
 8012c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8012c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c12:	f383 8811 	msr	BASEPRI, r3
 8012c16:	f3bf 8f6f 	isb	sy
 8012c1a:	f3bf 8f4f 	dsb	sy
 8012c1e:	607b      	str	r3, [r7, #4]
}
 8012c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012c22:	f7fe fdd9 	bl	80117d8 <xTaskIncrementTick>
 8012c26:	4603      	mov	r3, r0
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d003      	beq.n	8012c34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012c2c:	4b06      	ldr	r3, [pc, #24]	; (8012c48 <xPortSysTickHandler+0x40>)
 8012c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c32:	601a      	str	r2, [r3, #0]
 8012c34:	2300      	movs	r3, #0
 8012c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012c38:	683b      	ldr	r3, [r7, #0]
 8012c3a:	f383 8811 	msr	BASEPRI, r3
}
 8012c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012c40:	bf00      	nop
 8012c42:	3708      	adds	r7, #8
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bd80      	pop	{r7, pc}
 8012c48:	e000ed04 	.word	0xe000ed04

08012c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012c50:	4b0b      	ldr	r3, [pc, #44]	; (8012c80 <vPortSetupTimerInterrupt+0x34>)
 8012c52:	2200      	movs	r2, #0
 8012c54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012c56:	4b0b      	ldr	r3, [pc, #44]	; (8012c84 <vPortSetupTimerInterrupt+0x38>)
 8012c58:	2200      	movs	r2, #0
 8012c5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012c5c:	4b0a      	ldr	r3, [pc, #40]	; (8012c88 <vPortSetupTimerInterrupt+0x3c>)
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	4a0a      	ldr	r2, [pc, #40]	; (8012c8c <vPortSetupTimerInterrupt+0x40>)
 8012c62:	fba2 2303 	umull	r2, r3, r2, r3
 8012c66:	099b      	lsrs	r3, r3, #6
 8012c68:	4a09      	ldr	r2, [pc, #36]	; (8012c90 <vPortSetupTimerInterrupt+0x44>)
 8012c6a:	3b01      	subs	r3, #1
 8012c6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012c6e:	4b04      	ldr	r3, [pc, #16]	; (8012c80 <vPortSetupTimerInterrupt+0x34>)
 8012c70:	2207      	movs	r2, #7
 8012c72:	601a      	str	r2, [r3, #0]
}
 8012c74:	bf00      	nop
 8012c76:	46bd      	mov	sp, r7
 8012c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7c:	4770      	bx	lr
 8012c7e:	bf00      	nop
 8012c80:	e000e010 	.word	0xe000e010
 8012c84:	e000e018 	.word	0xe000e018
 8012c88:	20000140 	.word	0x20000140
 8012c8c:	10624dd3 	.word	0x10624dd3
 8012c90:	e000e014 	.word	0xe000e014

08012c94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012c94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012ca4 <vPortEnableVFP+0x10>
 8012c98:	6801      	ldr	r1, [r0, #0]
 8012c9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012c9e:	6001      	str	r1, [r0, #0]
 8012ca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012ca2:	bf00      	nop
 8012ca4:	e000ed88 	.word	0xe000ed88

08012ca8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012ca8:	b480      	push	{r7}
 8012caa:	b085      	sub	sp, #20
 8012cac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012cae:	f3ef 8305 	mrs	r3, IPSR
 8012cb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	2b0f      	cmp	r3, #15
 8012cb8:	d914      	bls.n	8012ce4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012cba:	4a17      	ldr	r2, [pc, #92]	; (8012d18 <vPortValidateInterruptPriority+0x70>)
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	4413      	add	r3, r2
 8012cc0:	781b      	ldrb	r3, [r3, #0]
 8012cc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012cc4:	4b15      	ldr	r3, [pc, #84]	; (8012d1c <vPortValidateInterruptPriority+0x74>)
 8012cc6:	781b      	ldrb	r3, [r3, #0]
 8012cc8:	7afa      	ldrb	r2, [r7, #11]
 8012cca:	429a      	cmp	r2, r3
 8012ccc:	d20a      	bcs.n	8012ce4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cd2:	f383 8811 	msr	BASEPRI, r3
 8012cd6:	f3bf 8f6f 	isb	sy
 8012cda:	f3bf 8f4f 	dsb	sy
 8012cde:	607b      	str	r3, [r7, #4]
}
 8012ce0:	bf00      	nop
 8012ce2:	e7fe      	b.n	8012ce2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012ce4:	4b0e      	ldr	r3, [pc, #56]	; (8012d20 <vPortValidateInterruptPriority+0x78>)
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012cec:	4b0d      	ldr	r3, [pc, #52]	; (8012d24 <vPortValidateInterruptPriority+0x7c>)
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	429a      	cmp	r2, r3
 8012cf2:	d90a      	bls.n	8012d0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cf8:	f383 8811 	msr	BASEPRI, r3
 8012cfc:	f3bf 8f6f 	isb	sy
 8012d00:	f3bf 8f4f 	dsb	sy
 8012d04:	603b      	str	r3, [r7, #0]
}
 8012d06:	bf00      	nop
 8012d08:	e7fe      	b.n	8012d08 <vPortValidateInterruptPriority+0x60>
	}
 8012d0a:	bf00      	nop
 8012d0c:	3714      	adds	r7, #20
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d14:	4770      	bx	lr
 8012d16:	bf00      	nop
 8012d18:	e000e3f0 	.word	0xe000e3f0
 8012d1c:	200085b0 	.word	0x200085b0
 8012d20:	e000ed0c 	.word	0xe000ed0c
 8012d24:	200085b4 	.word	0x200085b4

08012d28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b088      	sub	sp, #32
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012d30:	2300      	movs	r3, #0
 8012d32:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 8012d34:	4b48      	ldr	r3, [pc, #288]	; (8012e58 <pvPortMalloc+0x130>)
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d10a      	bne.n	8012d52 <pvPortMalloc+0x2a>
	__asm volatile
 8012d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d40:	f383 8811 	msr	BASEPRI, r3
 8012d44:	f3bf 8f6f 	isb	sy
 8012d48:	f3bf 8f4f 	dsb	sy
 8012d4c:	60fb      	str	r3, [r7, #12]
}
 8012d4e:	bf00      	nop
 8012d50:	e7fe      	b.n	8012d50 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 8012d52:	f7fe fc85 	bl	8011660 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012d56:	4b41      	ldr	r3, [pc, #260]	; (8012e5c <pvPortMalloc+0x134>)
 8012d58:	681a      	ldr	r2, [r3, #0]
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	4013      	ands	r3, r2
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d172      	bne.n	8012e48 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d00d      	beq.n	8012d84 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8012d68:	2208      	movs	r2, #8
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	4413      	add	r3, r2
 8012d6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	f003 0307 	and.w	r3, r3, #7
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d004      	beq.n	8012d84 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	f023 0307 	bic.w	r3, r3, #7
 8012d80:	3308      	adds	r3, #8
 8012d82:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d05e      	beq.n	8012e48 <pvPortMalloc+0x120>
 8012d8a:	4b35      	ldr	r3, [pc, #212]	; (8012e60 <pvPortMalloc+0x138>)
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	687a      	ldr	r2, [r7, #4]
 8012d90:	429a      	cmp	r2, r3
 8012d92:	d859      	bhi.n	8012e48 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012d94:	4b33      	ldr	r3, [pc, #204]	; (8012e64 <pvPortMalloc+0x13c>)
 8012d96:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 8012d98:	4b32      	ldr	r3, [pc, #200]	; (8012e64 <pvPortMalloc+0x13c>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012d9e:	e004      	b.n	8012daa <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8012da0:	69fb      	ldr	r3, [r7, #28]
 8012da2:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012da4:	69fb      	ldr	r3, [r7, #28]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012daa:	69fb      	ldr	r3, [r7, #28]
 8012dac:	685b      	ldr	r3, [r3, #4]
 8012dae:	687a      	ldr	r2, [r7, #4]
 8012db0:	429a      	cmp	r2, r3
 8012db2:	d903      	bls.n	8012dbc <pvPortMalloc+0x94>
 8012db4:	69fb      	ldr	r3, [r7, #28]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d1f1      	bne.n	8012da0 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012dbc:	4b26      	ldr	r3, [pc, #152]	; (8012e58 <pvPortMalloc+0x130>)
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	69fa      	ldr	r2, [r7, #28]
 8012dc2:	429a      	cmp	r2, r3
 8012dc4:	d040      	beq.n	8012e48 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012dc6:	69bb      	ldr	r3, [r7, #24]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	2208      	movs	r2, #8
 8012dcc:	4413      	add	r3, r2
 8012dce:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012dd0:	69fb      	ldr	r3, [r7, #28]
 8012dd2:	681a      	ldr	r2, [r3, #0]
 8012dd4:	69bb      	ldr	r3, [r7, #24]
 8012dd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012dd8:	69fb      	ldr	r3, [r7, #28]
 8012dda:	685a      	ldr	r2, [r3, #4]
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	1ad2      	subs	r2, r2, r3
 8012de0:	2308      	movs	r3, #8
 8012de2:	005b      	lsls	r3, r3, #1
 8012de4:	429a      	cmp	r2, r3
 8012de6:	d90f      	bls.n	8012e08 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012de8:	69fa      	ldr	r2, [r7, #28]
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	4413      	add	r3, r2
 8012dee:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012df0:	69fb      	ldr	r3, [r7, #28]
 8012df2:	685a      	ldr	r2, [r3, #4]
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	1ad2      	subs	r2, r2, r3
 8012df8:	693b      	ldr	r3, [r7, #16]
 8012dfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012dfc:	69fb      	ldr	r3, [r7, #28]
 8012dfe:	687a      	ldr	r2, [r7, #4]
 8012e00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8012e02:	6938      	ldr	r0, [r7, #16]
 8012e04:	f000 f896 	bl	8012f34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012e08:	4b15      	ldr	r3, [pc, #84]	; (8012e60 <pvPortMalloc+0x138>)
 8012e0a:	681a      	ldr	r2, [r3, #0]
 8012e0c:	69fb      	ldr	r3, [r7, #28]
 8012e0e:	685b      	ldr	r3, [r3, #4]
 8012e10:	1ad3      	subs	r3, r2, r3
 8012e12:	4a13      	ldr	r2, [pc, #76]	; (8012e60 <pvPortMalloc+0x138>)
 8012e14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012e16:	4b12      	ldr	r3, [pc, #72]	; (8012e60 <pvPortMalloc+0x138>)
 8012e18:	681a      	ldr	r2, [r3, #0]
 8012e1a:	4b13      	ldr	r3, [pc, #76]	; (8012e68 <pvPortMalloc+0x140>)
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	429a      	cmp	r2, r3
 8012e20:	d203      	bcs.n	8012e2a <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012e22:	4b0f      	ldr	r3, [pc, #60]	; (8012e60 <pvPortMalloc+0x138>)
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	4a10      	ldr	r2, [pc, #64]	; (8012e68 <pvPortMalloc+0x140>)
 8012e28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012e2a:	69fb      	ldr	r3, [r7, #28]
 8012e2c:	685a      	ldr	r2, [r3, #4]
 8012e2e:	4b0b      	ldr	r3, [pc, #44]	; (8012e5c <pvPortMalloc+0x134>)
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	431a      	orrs	r2, r3
 8012e34:	69fb      	ldr	r3, [r7, #28]
 8012e36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012e38:	69fb      	ldr	r3, [r7, #28]
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012e3e:	4b0b      	ldr	r3, [pc, #44]	; (8012e6c <pvPortMalloc+0x144>)
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	3301      	adds	r3, #1
 8012e44:	4a09      	ldr	r2, [pc, #36]	; (8012e6c <pvPortMalloc+0x144>)
 8012e46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012e48:	f7fe fc18 	bl	801167c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 8012e4c:	697b      	ldr	r3, [r7, #20]
}
 8012e4e:	4618      	mov	r0, r3
 8012e50:	3720      	adds	r7, #32
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}
 8012e56:	bf00      	nop
 8012e58:	200085c0 	.word	0x200085c0
 8012e5c:	200085d4 	.word	0x200085d4
 8012e60:	200085c4 	.word	0x200085c4
 8012e64:	200085b8 	.word	0x200085b8
 8012e68:	200085c8 	.word	0x200085c8
 8012e6c:	200085cc 	.word	0x200085cc

08012e70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012e70:	b580      	push	{r7, lr}
 8012e72:	b086      	sub	sp, #24
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d04d      	beq.n	8012f1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012e82:	2308      	movs	r3, #8
 8012e84:	425b      	negs	r3, r3
 8012e86:	697a      	ldr	r2, [r7, #20]
 8012e88:	4413      	add	r3, r2
 8012e8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012e8c:	697b      	ldr	r3, [r7, #20]
 8012e8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012e90:	693b      	ldr	r3, [r7, #16]
 8012e92:	685a      	ldr	r2, [r3, #4]
 8012e94:	4b24      	ldr	r3, [pc, #144]	; (8012f28 <vPortFree+0xb8>)
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	4013      	ands	r3, r2
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d10a      	bne.n	8012eb4 <vPortFree+0x44>
	__asm volatile
 8012e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ea2:	f383 8811 	msr	BASEPRI, r3
 8012ea6:	f3bf 8f6f 	isb	sy
 8012eaa:	f3bf 8f4f 	dsb	sy
 8012eae:	60fb      	str	r3, [r7, #12]
}
 8012eb0:	bf00      	nop
 8012eb2:	e7fe      	b.n	8012eb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012eb4:	693b      	ldr	r3, [r7, #16]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d00a      	beq.n	8012ed2 <vPortFree+0x62>
	__asm volatile
 8012ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ec0:	f383 8811 	msr	BASEPRI, r3
 8012ec4:	f3bf 8f6f 	isb	sy
 8012ec8:	f3bf 8f4f 	dsb	sy
 8012ecc:	60bb      	str	r3, [r7, #8]
}
 8012ece:	bf00      	nop
 8012ed0:	e7fe      	b.n	8012ed0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012ed2:	693b      	ldr	r3, [r7, #16]
 8012ed4:	685a      	ldr	r2, [r3, #4]
 8012ed6:	4b14      	ldr	r3, [pc, #80]	; (8012f28 <vPortFree+0xb8>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	4013      	ands	r3, r2
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d01e      	beq.n	8012f1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012ee0:	693b      	ldr	r3, [r7, #16]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d11a      	bne.n	8012f1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012ee8:	693b      	ldr	r3, [r7, #16]
 8012eea:	685a      	ldr	r2, [r3, #4]
 8012eec:	4b0e      	ldr	r3, [pc, #56]	; (8012f28 <vPortFree+0xb8>)
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	43db      	mvns	r3, r3
 8012ef2:	401a      	ands	r2, r3
 8012ef4:	693b      	ldr	r3, [r7, #16]
 8012ef6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012ef8:	f7fe fbb2 	bl	8011660 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012efc:	693b      	ldr	r3, [r7, #16]
 8012efe:	685a      	ldr	r2, [r3, #4]
 8012f00:	4b0a      	ldr	r3, [pc, #40]	; (8012f2c <vPortFree+0xbc>)
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	4413      	add	r3, r2
 8012f06:	4a09      	ldr	r2, [pc, #36]	; (8012f2c <vPortFree+0xbc>)
 8012f08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012f0a:	6938      	ldr	r0, [r7, #16]
 8012f0c:	f000 f812 	bl	8012f34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012f10:	4b07      	ldr	r3, [pc, #28]	; (8012f30 <vPortFree+0xc0>)
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	3301      	adds	r3, #1
 8012f16:	4a06      	ldr	r2, [pc, #24]	; (8012f30 <vPortFree+0xc0>)
 8012f18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012f1a:	f7fe fbaf 	bl	801167c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012f1e:	bf00      	nop
 8012f20:	3718      	adds	r7, #24
 8012f22:	46bd      	mov	sp, r7
 8012f24:	bd80      	pop	{r7, pc}
 8012f26:	bf00      	nop
 8012f28:	200085d4 	.word	0x200085d4
 8012f2c:	200085c4 	.word	0x200085c4
 8012f30:	200085d0 	.word	0x200085d0

08012f34 <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012f34:	b480      	push	{r7}
 8012f36:	b085      	sub	sp, #20
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012f3c:	4b28      	ldr	r3, [pc, #160]	; (8012fe0 <prvInsertBlockIntoFreeList+0xac>)
 8012f3e:	60fb      	str	r3, [r7, #12]
 8012f40:	e002      	b.n	8012f48 <prvInsertBlockIntoFreeList+0x14>
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	60fb      	str	r3, [r7, #12]
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	687a      	ldr	r2, [r7, #4]
 8012f4e:	429a      	cmp	r2, r3
 8012f50:	d8f7      	bhi.n	8012f42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	685b      	ldr	r3, [r3, #4]
 8012f5a:	68ba      	ldr	r2, [r7, #8]
 8012f5c:	4413      	add	r3, r2
 8012f5e:	687a      	ldr	r2, [r7, #4]
 8012f60:	429a      	cmp	r2, r3
 8012f62:	d108      	bne.n	8012f76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	685a      	ldr	r2, [r3, #4]
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	685b      	ldr	r3, [r3, #4]
 8012f6c:	441a      	add	r2, r3
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	685b      	ldr	r3, [r3, #4]
 8012f7e:	68ba      	ldr	r2, [r7, #8]
 8012f80:	441a      	add	r2, r3
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	429a      	cmp	r2, r3
 8012f88:	d118      	bne.n	8012fbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	681a      	ldr	r2, [r3, #0]
 8012f8e:	4b15      	ldr	r3, [pc, #84]	; (8012fe4 <prvInsertBlockIntoFreeList+0xb0>)
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	429a      	cmp	r2, r3
 8012f94:	d00d      	beq.n	8012fb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	685a      	ldr	r2, [r3, #4]
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	685b      	ldr	r3, [r3, #4]
 8012fa0:	441a      	add	r2, r3
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	681a      	ldr	r2, [r3, #0]
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	601a      	str	r2, [r3, #0]
 8012fb0:	e008      	b.n	8012fc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012fb2:	4b0c      	ldr	r3, [pc, #48]	; (8012fe4 <prvInsertBlockIntoFreeList+0xb0>)
 8012fb4:	681a      	ldr	r2, [r3, #0]
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	601a      	str	r2, [r3, #0]
 8012fba:	e003      	b.n	8012fc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	681a      	ldr	r2, [r3, #0]
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012fc4:	68fa      	ldr	r2, [r7, #12]
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	429a      	cmp	r2, r3
 8012fca:	d002      	beq.n	8012fd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	687a      	ldr	r2, [r7, #4]
 8012fd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012fd2:	bf00      	nop
 8012fd4:	3714      	adds	r7, #20
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fdc:	4770      	bx	lr
 8012fde:	bf00      	nop
 8012fe0:	200085b8 	.word	0x200085b8
 8012fe4:	200085c0 	.word	0x200085c0

08012fe8 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 8012fe8:	b480      	push	{r7}
 8012fea:	b08f      	sub	sp, #60	; 0x3c
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 8012ffc:	4b5a      	ldr	r3, [pc, #360]	; (8013168 <vPortDefineHeapRegions+0x180>)
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d00a      	beq.n	801301a <vPortDefineHeapRegions+0x32>
	__asm volatile
 8013004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013008:	f383 8811 	msr	BASEPRI, r3
 801300c:	f3bf 8f6f 	isb	sy
 8013010:	f3bf 8f4f 	dsb	sy
 8013014:	617b      	str	r3, [r7, #20]
}
 8013016:	bf00      	nop
 8013018:	e7fe      	b.n	8013018 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 801301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801301c:	00db      	lsls	r3, r3, #3
 801301e:	687a      	ldr	r2, [r7, #4]
 8013020:	4413      	add	r3, r2
 8013022:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 8013024:	e07d      	b.n	8013122 <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 8013026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013028:	685b      	ldr	r3, [r3, #4]
 801302a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 801302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013034:	f003 0307 	and.w	r3, r3, #7
 8013038:	2b00      	cmp	r3, #0
 801303a:	d00e      	beq.n	801305a <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 801303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801303e:	3307      	adds	r3, #7
 8013040:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8013042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013044:	f023 0307 	bic.w	r3, r3, #7
 8013048:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 801304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	461a      	mov	r2, r3
 8013050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013052:	1ad3      	subs	r3, r2, r3
 8013054:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013056:	4413      	add	r3, r2
 8013058:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 801305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801305c:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 801305e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013060:	2b00      	cmp	r3, #0
 8013062:	d106      	bne.n	8013072 <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 8013064:	69fb      	ldr	r3, [r7, #28]
 8013066:	4a41      	ldr	r2, [pc, #260]	; (801316c <vPortDefineHeapRegions+0x184>)
 8013068:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 801306a:	4b40      	ldr	r3, [pc, #256]	; (801316c <vPortDefineHeapRegions+0x184>)
 801306c:	2200      	movs	r2, #0
 801306e:	605a      	str	r2, [r3, #4]
 8013070:	e01f      	b.n	80130b2 <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 8013072:	4b3d      	ldr	r3, [pc, #244]	; (8013168 <vPortDefineHeapRegions+0x180>)
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d10a      	bne.n	8013090 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 801307a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801307e:	f383 8811 	msr	BASEPRI, r3
 8013082:	f3bf 8f6f 	isb	sy
 8013086:	f3bf 8f4f 	dsb	sy
 801308a:	613b      	str	r3, [r7, #16]
}
 801308c:	bf00      	nop
 801308e:	e7fe      	b.n	801308e <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 8013090:	4b35      	ldr	r3, [pc, #212]	; (8013168 <vPortDefineHeapRegions+0x180>)
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	461a      	mov	r2, r3
 8013096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013098:	4293      	cmp	r3, r2
 801309a:	d80a      	bhi.n	80130b2 <vPortDefineHeapRegions+0xca>
	__asm volatile
 801309c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130a0:	f383 8811 	msr	BASEPRI, r3
 80130a4:	f3bf 8f6f 	isb	sy
 80130a8:	f3bf 8f4f 	dsb	sy
 80130ac:	60fb      	str	r3, [r7, #12]
}
 80130ae:	bf00      	nop
 80130b0:	e7fe      	b.n	80130b0 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 80130b2:	4b2d      	ldr	r3, [pc, #180]	; (8013168 <vPortDefineHeapRegions+0x180>)
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 80130b8:	69fa      	ldr	r2, [r7, #28]
 80130ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130bc:	4413      	add	r3, r2
 80130be:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 80130c0:	2208      	movs	r2, #8
 80130c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130c4:	1a9b      	subs	r3, r3, r2
 80130c6:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 80130c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ca:	f023 0307 	bic.w	r3, r3, #7
 80130ce:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 80130d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130d2:	4a25      	ldr	r2, [pc, #148]	; (8013168 <vPortDefineHeapRegions+0x180>)
 80130d4:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 80130d6:	4b24      	ldr	r3, [pc, #144]	; (8013168 <vPortDefineHeapRegions+0x180>)
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	2200      	movs	r2, #0
 80130dc:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 80130de:	4b22      	ldr	r3, [pc, #136]	; (8013168 <vPortDefineHeapRegions+0x180>)
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	2200      	movs	r2, #0
 80130e4:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 80130e6:	69fb      	ldr	r3, [r7, #28]
 80130e8:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 80130ea:	6a3b      	ldr	r3, [r7, #32]
 80130ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80130ee:	1ad2      	subs	r2, r2, r3
 80130f0:	6a3b      	ldr	r3, [r7, #32]
 80130f2:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 80130f4:	4b1c      	ldr	r3, [pc, #112]	; (8013168 <vPortDefineHeapRegions+0x180>)
 80130f6:	681a      	ldr	r2, [r3, #0]
 80130f8:	6a3b      	ldr	r3, [r7, #32]
 80130fa:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 80130fc:	69bb      	ldr	r3, [r7, #24]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d002      	beq.n	8013108 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 8013102:	69bb      	ldr	r3, [r7, #24]
 8013104:	6a3a      	ldr	r2, [r7, #32]
 8013106:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8013108:	6a3b      	ldr	r3, [r7, #32]
 801310a:	685b      	ldr	r3, [r3, #4]
 801310c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801310e:	4413      	add	r3, r2
 8013110:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 8013112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013114:	3301      	adds	r3, #1
 8013116:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8013118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801311a:	00db      	lsls	r3, r3, #3
 801311c:	687a      	ldr	r2, [r7, #4]
 801311e:	4413      	add	r3, r2
 8013120:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 8013122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013124:	685b      	ldr	r3, [r3, #4]
 8013126:	2b00      	cmp	r3, #0
 8013128:	f47f af7d 	bne.w	8013026 <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 801312c:	4a10      	ldr	r2, [pc, #64]	; (8013170 <vPortDefineHeapRegions+0x188>)
 801312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013130:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 8013132:	4a10      	ldr	r2, [pc, #64]	; (8013174 <vPortDefineHeapRegions+0x18c>)
 8013134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013136:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 8013138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801313a:	2b00      	cmp	r3, #0
 801313c:	d10a      	bne.n	8013154 <vPortDefineHeapRegions+0x16c>
	__asm volatile
 801313e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013142:	f383 8811 	msr	BASEPRI, r3
 8013146:	f3bf 8f6f 	isb	sy
 801314a:	f3bf 8f4f 	dsb	sy
 801314e:	60bb      	str	r3, [r7, #8]
}
 8013150:	bf00      	nop
 8013152:	e7fe      	b.n	8013152 <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013154:	4b08      	ldr	r3, [pc, #32]	; (8013178 <vPortDefineHeapRegions+0x190>)
 8013156:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801315a:	601a      	str	r2, [r3, #0]
}
 801315c:	bf00      	nop
 801315e:	373c      	adds	r7, #60	; 0x3c
 8013160:	46bd      	mov	sp, r7
 8013162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013166:	4770      	bx	lr
 8013168:	200085c0 	.word	0x200085c0
 801316c:	200085b8 	.word	0x200085b8
 8013170:	200085c8 	.word	0x200085c8
 8013174:	200085c4 	.word	0x200085c4
 8013178:	200085d4 	.word	0x200085d4

0801317c <atof>:
 801317c:	2100      	movs	r1, #0
 801317e:	f001 beb9 	b.w	8014ef4 <strtod>

08013182 <atoi>:
 8013182:	220a      	movs	r2, #10
 8013184:	2100      	movs	r1, #0
 8013186:	f001 bf43 	b.w	8015010 <strtol>

0801318a <atol>:
 801318a:	220a      	movs	r2, #10
 801318c:	2100      	movs	r1, #0
 801318e:	f001 bf3f 	b.w	8015010 <strtol>
	...

08013194 <calloc>:
 8013194:	4b02      	ldr	r3, [pc, #8]	; (80131a0 <calloc+0xc>)
 8013196:	460a      	mov	r2, r1
 8013198:	4601      	mov	r1, r0
 801319a:	6818      	ldr	r0, [r3, #0]
 801319c:	f000 b9f8 	b.w	8013590 <_calloc_r>
 80131a0:	2000018c 	.word	0x2000018c

080131a4 <__errno>:
 80131a4:	4b01      	ldr	r3, [pc, #4]	; (80131ac <__errno+0x8>)
 80131a6:	6818      	ldr	r0, [r3, #0]
 80131a8:	4770      	bx	lr
 80131aa:	bf00      	nop
 80131ac:	2000018c 	.word	0x2000018c

080131b0 <std>:
 80131b0:	2300      	movs	r3, #0
 80131b2:	b510      	push	{r4, lr}
 80131b4:	4604      	mov	r4, r0
 80131b6:	e9c0 3300 	strd	r3, r3, [r0]
 80131ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80131be:	6083      	str	r3, [r0, #8]
 80131c0:	8181      	strh	r1, [r0, #12]
 80131c2:	6643      	str	r3, [r0, #100]	; 0x64
 80131c4:	81c2      	strh	r2, [r0, #14]
 80131c6:	6183      	str	r3, [r0, #24]
 80131c8:	4619      	mov	r1, r3
 80131ca:	2208      	movs	r2, #8
 80131cc:	305c      	adds	r0, #92	; 0x5c
 80131ce:	f000 f9d7 	bl	8013580 <memset>
 80131d2:	4b05      	ldr	r3, [pc, #20]	; (80131e8 <std+0x38>)
 80131d4:	6263      	str	r3, [r4, #36]	; 0x24
 80131d6:	4b05      	ldr	r3, [pc, #20]	; (80131ec <std+0x3c>)
 80131d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80131da:	4b05      	ldr	r3, [pc, #20]	; (80131f0 <std+0x40>)
 80131dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80131de:	4b05      	ldr	r3, [pc, #20]	; (80131f4 <std+0x44>)
 80131e0:	6224      	str	r4, [r4, #32]
 80131e2:	6323      	str	r3, [r4, #48]	; 0x30
 80131e4:	bd10      	pop	{r4, pc}
 80131e6:	bf00      	nop
 80131e8:	08014185 	.word	0x08014185
 80131ec:	080141a7 	.word	0x080141a7
 80131f0:	080141df 	.word	0x080141df
 80131f4:	08014203 	.word	0x08014203

080131f8 <_cleanup_r>:
 80131f8:	4901      	ldr	r1, [pc, #4]	; (8013200 <_cleanup_r+0x8>)
 80131fa:	f000 b8af 	b.w	801335c <_fwalk_reent>
 80131fe:	bf00      	nop
 8013200:	08015ee1 	.word	0x08015ee1

08013204 <__sfmoreglue>:
 8013204:	b570      	push	{r4, r5, r6, lr}
 8013206:	2268      	movs	r2, #104	; 0x68
 8013208:	1e4d      	subs	r5, r1, #1
 801320a:	4355      	muls	r5, r2
 801320c:	460e      	mov	r6, r1
 801320e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013212:	f000 fa3f 	bl	8013694 <_malloc_r>
 8013216:	4604      	mov	r4, r0
 8013218:	b140      	cbz	r0, 801322c <__sfmoreglue+0x28>
 801321a:	2100      	movs	r1, #0
 801321c:	e9c0 1600 	strd	r1, r6, [r0]
 8013220:	300c      	adds	r0, #12
 8013222:	60a0      	str	r0, [r4, #8]
 8013224:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013228:	f000 f9aa 	bl	8013580 <memset>
 801322c:	4620      	mov	r0, r4
 801322e:	bd70      	pop	{r4, r5, r6, pc}

08013230 <__sfp_lock_acquire>:
 8013230:	4801      	ldr	r0, [pc, #4]	; (8013238 <__sfp_lock_acquire+0x8>)
 8013232:	f000 b984 	b.w	801353e <__retarget_lock_acquire_recursive>
 8013236:	bf00      	nop
 8013238:	200085d9 	.word	0x200085d9

0801323c <__sfp_lock_release>:
 801323c:	4801      	ldr	r0, [pc, #4]	; (8013244 <__sfp_lock_release+0x8>)
 801323e:	f000 b97f 	b.w	8013540 <__retarget_lock_release_recursive>
 8013242:	bf00      	nop
 8013244:	200085d9 	.word	0x200085d9

08013248 <__sinit_lock_acquire>:
 8013248:	4801      	ldr	r0, [pc, #4]	; (8013250 <__sinit_lock_acquire+0x8>)
 801324a:	f000 b978 	b.w	801353e <__retarget_lock_acquire_recursive>
 801324e:	bf00      	nop
 8013250:	200085da 	.word	0x200085da

08013254 <__sinit_lock_release>:
 8013254:	4801      	ldr	r0, [pc, #4]	; (801325c <__sinit_lock_release+0x8>)
 8013256:	f000 b973 	b.w	8013540 <__retarget_lock_release_recursive>
 801325a:	bf00      	nop
 801325c:	200085da 	.word	0x200085da

08013260 <__sinit>:
 8013260:	b510      	push	{r4, lr}
 8013262:	4604      	mov	r4, r0
 8013264:	f7ff fff0 	bl	8013248 <__sinit_lock_acquire>
 8013268:	69a3      	ldr	r3, [r4, #24]
 801326a:	b11b      	cbz	r3, 8013274 <__sinit+0x14>
 801326c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013270:	f7ff bff0 	b.w	8013254 <__sinit_lock_release>
 8013274:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013278:	6523      	str	r3, [r4, #80]	; 0x50
 801327a:	4b13      	ldr	r3, [pc, #76]	; (80132c8 <__sinit+0x68>)
 801327c:	4a13      	ldr	r2, [pc, #76]	; (80132cc <__sinit+0x6c>)
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	62a2      	str	r2, [r4, #40]	; 0x28
 8013282:	42a3      	cmp	r3, r4
 8013284:	bf04      	itt	eq
 8013286:	2301      	moveq	r3, #1
 8013288:	61a3      	streq	r3, [r4, #24]
 801328a:	4620      	mov	r0, r4
 801328c:	f000 f820 	bl	80132d0 <__sfp>
 8013290:	6060      	str	r0, [r4, #4]
 8013292:	4620      	mov	r0, r4
 8013294:	f000 f81c 	bl	80132d0 <__sfp>
 8013298:	60a0      	str	r0, [r4, #8]
 801329a:	4620      	mov	r0, r4
 801329c:	f000 f818 	bl	80132d0 <__sfp>
 80132a0:	2200      	movs	r2, #0
 80132a2:	60e0      	str	r0, [r4, #12]
 80132a4:	2104      	movs	r1, #4
 80132a6:	6860      	ldr	r0, [r4, #4]
 80132a8:	f7ff ff82 	bl	80131b0 <std>
 80132ac:	68a0      	ldr	r0, [r4, #8]
 80132ae:	2201      	movs	r2, #1
 80132b0:	2109      	movs	r1, #9
 80132b2:	f7ff ff7d 	bl	80131b0 <std>
 80132b6:	68e0      	ldr	r0, [r4, #12]
 80132b8:	2202      	movs	r2, #2
 80132ba:	2112      	movs	r1, #18
 80132bc:	f7ff ff78 	bl	80131b0 <std>
 80132c0:	2301      	movs	r3, #1
 80132c2:	61a3      	str	r3, [r4, #24]
 80132c4:	e7d2      	b.n	801326c <__sinit+0xc>
 80132c6:	bf00      	nop
 80132c8:	0801959c 	.word	0x0801959c
 80132cc:	080131f9 	.word	0x080131f9

080132d0 <__sfp>:
 80132d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132d2:	4607      	mov	r7, r0
 80132d4:	f7ff ffac 	bl	8013230 <__sfp_lock_acquire>
 80132d8:	4b1e      	ldr	r3, [pc, #120]	; (8013354 <__sfp+0x84>)
 80132da:	681e      	ldr	r6, [r3, #0]
 80132dc:	69b3      	ldr	r3, [r6, #24]
 80132de:	b913      	cbnz	r3, 80132e6 <__sfp+0x16>
 80132e0:	4630      	mov	r0, r6
 80132e2:	f7ff ffbd 	bl	8013260 <__sinit>
 80132e6:	3648      	adds	r6, #72	; 0x48
 80132e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80132ec:	3b01      	subs	r3, #1
 80132ee:	d503      	bpl.n	80132f8 <__sfp+0x28>
 80132f0:	6833      	ldr	r3, [r6, #0]
 80132f2:	b30b      	cbz	r3, 8013338 <__sfp+0x68>
 80132f4:	6836      	ldr	r6, [r6, #0]
 80132f6:	e7f7      	b.n	80132e8 <__sfp+0x18>
 80132f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80132fc:	b9d5      	cbnz	r5, 8013334 <__sfp+0x64>
 80132fe:	4b16      	ldr	r3, [pc, #88]	; (8013358 <__sfp+0x88>)
 8013300:	60e3      	str	r3, [r4, #12]
 8013302:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013306:	6665      	str	r5, [r4, #100]	; 0x64
 8013308:	f000 f918 	bl	801353c <__retarget_lock_init_recursive>
 801330c:	f7ff ff96 	bl	801323c <__sfp_lock_release>
 8013310:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013314:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013318:	6025      	str	r5, [r4, #0]
 801331a:	61a5      	str	r5, [r4, #24]
 801331c:	2208      	movs	r2, #8
 801331e:	4629      	mov	r1, r5
 8013320:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013324:	f000 f92c 	bl	8013580 <memset>
 8013328:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801332c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013330:	4620      	mov	r0, r4
 8013332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013334:	3468      	adds	r4, #104	; 0x68
 8013336:	e7d9      	b.n	80132ec <__sfp+0x1c>
 8013338:	2104      	movs	r1, #4
 801333a:	4638      	mov	r0, r7
 801333c:	f7ff ff62 	bl	8013204 <__sfmoreglue>
 8013340:	4604      	mov	r4, r0
 8013342:	6030      	str	r0, [r6, #0]
 8013344:	2800      	cmp	r0, #0
 8013346:	d1d5      	bne.n	80132f4 <__sfp+0x24>
 8013348:	f7ff ff78 	bl	801323c <__sfp_lock_release>
 801334c:	230c      	movs	r3, #12
 801334e:	603b      	str	r3, [r7, #0]
 8013350:	e7ee      	b.n	8013330 <__sfp+0x60>
 8013352:	bf00      	nop
 8013354:	0801959c 	.word	0x0801959c
 8013358:	ffff0001 	.word	0xffff0001

0801335c <_fwalk_reent>:
 801335c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013360:	4606      	mov	r6, r0
 8013362:	4688      	mov	r8, r1
 8013364:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013368:	2700      	movs	r7, #0
 801336a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801336e:	f1b9 0901 	subs.w	r9, r9, #1
 8013372:	d505      	bpl.n	8013380 <_fwalk_reent+0x24>
 8013374:	6824      	ldr	r4, [r4, #0]
 8013376:	2c00      	cmp	r4, #0
 8013378:	d1f7      	bne.n	801336a <_fwalk_reent+0xe>
 801337a:	4638      	mov	r0, r7
 801337c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013380:	89ab      	ldrh	r3, [r5, #12]
 8013382:	2b01      	cmp	r3, #1
 8013384:	d907      	bls.n	8013396 <_fwalk_reent+0x3a>
 8013386:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801338a:	3301      	adds	r3, #1
 801338c:	d003      	beq.n	8013396 <_fwalk_reent+0x3a>
 801338e:	4629      	mov	r1, r5
 8013390:	4630      	mov	r0, r6
 8013392:	47c0      	blx	r8
 8013394:	4307      	orrs	r7, r0
 8013396:	3568      	adds	r5, #104	; 0x68
 8013398:	e7e9      	b.n	801336e <_fwalk_reent+0x12>
	...

0801339c <gmtime_r>:
 801339c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133a0:	e9d0 6700 	ldrd	r6, r7, [r0]
 80133a4:	460c      	mov	r4, r1
 80133a6:	4a4f      	ldr	r2, [pc, #316]	; (80134e4 <gmtime_r+0x148>)
 80133a8:	2300      	movs	r3, #0
 80133aa:	4630      	mov	r0, r6
 80133ac:	4639      	mov	r1, r7
 80133ae:	f7ed fc6b 	bl	8000c88 <__aeabi_ldivmod>
 80133b2:	4639      	mov	r1, r7
 80133b4:	4605      	mov	r5, r0
 80133b6:	4a4b      	ldr	r2, [pc, #300]	; (80134e4 <gmtime_r+0x148>)
 80133b8:	4630      	mov	r0, r6
 80133ba:	2300      	movs	r3, #0
 80133bc:	f7ed fc64 	bl	8000c88 <__aeabi_ldivmod>
 80133c0:	2a00      	cmp	r2, #0
 80133c2:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80133c6:	bfb7      	itett	lt
 80133c8:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80133cc:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 80133d0:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 80133d4:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80133d8:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80133dc:	fbb2 f1f0 	udiv	r1, r2, r0
 80133e0:	fb00 2211 	mls	r2, r0, r1, r2
 80133e4:	203c      	movs	r0, #60	; 0x3c
 80133e6:	60a1      	str	r1, [r4, #8]
 80133e8:	fbb2 f1f0 	udiv	r1, r2, r0
 80133ec:	fb00 2211 	mls	r2, r0, r1, r2
 80133f0:	6061      	str	r1, [r4, #4]
 80133f2:	6022      	str	r2, [r4, #0]
 80133f4:	2107      	movs	r1, #7
 80133f6:	1cda      	adds	r2, r3, #3
 80133f8:	fb92 f1f1 	sdiv	r1, r2, r1
 80133fc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8013400:	1a52      	subs	r2, r2, r1
 8013402:	bf48      	it	mi
 8013404:	3207      	addmi	r2, #7
 8013406:	4d38      	ldr	r5, [pc, #224]	; (80134e8 <gmtime_r+0x14c>)
 8013408:	4838      	ldr	r0, [pc, #224]	; (80134ec <gmtime_r+0x150>)
 801340a:	61a2      	str	r2, [r4, #24]
 801340c:	2b00      	cmp	r3, #0
 801340e:	bfb7      	itett	lt
 8013410:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8013414:	fb93 f5f5 	sdivge	r5, r3, r5
 8013418:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 801341c:	fb92 f5f5 	sdivlt	r5, r2, r5
 8013420:	fb00 3005 	mla	r0, r0, r5, r3
 8013424:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8013428:	fbb0 f2f2 	udiv	r2, r0, r2
 801342c:	4402      	add	r2, r0
 801342e:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8013432:	fbb0 f1f3 	udiv	r1, r0, r3
 8013436:	1a52      	subs	r2, r2, r1
 8013438:	f240 1c6d 	movw	ip, #365	; 0x16d
 801343c:	492c      	ldr	r1, [pc, #176]	; (80134f0 <gmtime_r+0x154>)
 801343e:	fbb0 f1f1 	udiv	r1, r0, r1
 8013442:	2764      	movs	r7, #100	; 0x64
 8013444:	1a52      	subs	r2, r2, r1
 8013446:	fbb2 f1fc 	udiv	r1, r2, ip
 801344a:	fbb2 f3f3 	udiv	r3, r2, r3
 801344e:	fbb1 f6f7 	udiv	r6, r1, r7
 8013452:	1af3      	subs	r3, r6, r3
 8013454:	4403      	add	r3, r0
 8013456:	fb0c 3311 	mls	r3, ip, r1, r3
 801345a:	2299      	movs	r2, #153	; 0x99
 801345c:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8013460:	f10e 0e02 	add.w	lr, lr, #2
 8013464:	f103 0c01 	add.w	ip, r3, #1
 8013468:	fbbe f0f2 	udiv	r0, lr, r2
 801346c:	4342      	muls	r2, r0
 801346e:	3202      	adds	r2, #2
 8013470:	f04f 0805 	mov.w	r8, #5
 8013474:	fbb2 f2f8 	udiv	r2, r2, r8
 8013478:	ebac 0c02 	sub.w	ip, ip, r2
 801347c:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8013480:	4596      	cmp	lr, r2
 8013482:	bf94      	ite	ls
 8013484:	2202      	movls	r2, #2
 8013486:	f06f 0209 	mvnhi.w	r2, #9
 801348a:	4410      	add	r0, r2
 801348c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8013490:	fb02 1505 	mla	r5, r2, r5, r1
 8013494:	2801      	cmp	r0, #1
 8013496:	bf98      	it	ls
 8013498:	3501      	addls	r5, #1
 801349a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801349e:	d30d      	bcc.n	80134bc <gmtime_r+0x120>
 80134a0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80134a4:	61e3      	str	r3, [r4, #28]
 80134a6:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80134aa:	2300      	movs	r3, #0
 80134ac:	e9c4 0504 	strd	r0, r5, [r4, #16]
 80134b0:	f8c4 c00c 	str.w	ip, [r4, #12]
 80134b4:	6223      	str	r3, [r4, #32]
 80134b6:	4620      	mov	r0, r4
 80134b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134bc:	078a      	lsls	r2, r1, #30
 80134be:	d102      	bne.n	80134c6 <gmtime_r+0x12a>
 80134c0:	fb07 1616 	mls	r6, r7, r6, r1
 80134c4:	b95e      	cbnz	r6, 80134de <gmtime_r+0x142>
 80134c6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80134ca:	fbb1 f6f2 	udiv	r6, r1, r2
 80134ce:	fb02 1216 	mls	r2, r2, r6, r1
 80134d2:	fab2 f282 	clz	r2, r2
 80134d6:	0952      	lsrs	r2, r2, #5
 80134d8:	333b      	adds	r3, #59	; 0x3b
 80134da:	4413      	add	r3, r2
 80134dc:	e7e2      	b.n	80134a4 <gmtime_r+0x108>
 80134de:	2201      	movs	r2, #1
 80134e0:	e7fa      	b.n	80134d8 <gmtime_r+0x13c>
 80134e2:	bf00      	nop
 80134e4:	00015180 	.word	0x00015180
 80134e8:	00023ab1 	.word	0x00023ab1
 80134ec:	fffdc54f 	.word	0xfffdc54f
 80134f0:	00023ab0 	.word	0x00023ab0

080134f4 <__libc_init_array>:
 80134f4:	b570      	push	{r4, r5, r6, lr}
 80134f6:	4d0d      	ldr	r5, [pc, #52]	; (801352c <__libc_init_array+0x38>)
 80134f8:	4c0d      	ldr	r4, [pc, #52]	; (8013530 <__libc_init_array+0x3c>)
 80134fa:	1b64      	subs	r4, r4, r5
 80134fc:	10a4      	asrs	r4, r4, #2
 80134fe:	2600      	movs	r6, #0
 8013500:	42a6      	cmp	r6, r4
 8013502:	d109      	bne.n	8013518 <__libc_init_array+0x24>
 8013504:	4d0b      	ldr	r5, [pc, #44]	; (8013534 <__libc_init_array+0x40>)
 8013506:	4c0c      	ldr	r4, [pc, #48]	; (8013538 <__libc_init_array+0x44>)
 8013508:	f004 fa7c 	bl	8017a04 <_init>
 801350c:	1b64      	subs	r4, r4, r5
 801350e:	10a4      	asrs	r4, r4, #2
 8013510:	2600      	movs	r6, #0
 8013512:	42a6      	cmp	r6, r4
 8013514:	d105      	bne.n	8013522 <__libc_init_array+0x2e>
 8013516:	bd70      	pop	{r4, r5, r6, pc}
 8013518:	f855 3b04 	ldr.w	r3, [r5], #4
 801351c:	4798      	blx	r3
 801351e:	3601      	adds	r6, #1
 8013520:	e7ee      	b.n	8013500 <__libc_init_array+0xc>
 8013522:	f855 3b04 	ldr.w	r3, [r5], #4
 8013526:	4798      	blx	r3
 8013528:	3601      	adds	r6, #1
 801352a:	e7f2      	b.n	8013512 <__libc_init_array+0x1e>
 801352c:	080198e4 	.word	0x080198e4
 8013530:	080198e4 	.word	0x080198e4
 8013534:	080198e4 	.word	0x080198e4
 8013538:	080198e8 	.word	0x080198e8

0801353c <__retarget_lock_init_recursive>:
 801353c:	4770      	bx	lr

0801353e <__retarget_lock_acquire_recursive>:
 801353e:	4770      	bx	lr

08013540 <__retarget_lock_release_recursive>:
 8013540:	4770      	bx	lr
	...

08013544 <malloc>:
 8013544:	4b02      	ldr	r3, [pc, #8]	; (8013550 <malloc+0xc>)
 8013546:	4601      	mov	r1, r0
 8013548:	6818      	ldr	r0, [r3, #0]
 801354a:	f000 b8a3 	b.w	8013694 <_malloc_r>
 801354e:	bf00      	nop
 8013550:	2000018c 	.word	0x2000018c

08013554 <free>:
 8013554:	4b02      	ldr	r3, [pc, #8]	; (8013560 <free+0xc>)
 8013556:	4601      	mov	r1, r0
 8013558:	6818      	ldr	r0, [r3, #0]
 801355a:	f000 b82f 	b.w	80135bc <_free_r>
 801355e:	bf00      	nop
 8013560:	2000018c 	.word	0x2000018c

08013564 <memcpy>:
 8013564:	440a      	add	r2, r1
 8013566:	4291      	cmp	r1, r2
 8013568:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801356c:	d100      	bne.n	8013570 <memcpy+0xc>
 801356e:	4770      	bx	lr
 8013570:	b510      	push	{r4, lr}
 8013572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013576:	f803 4f01 	strb.w	r4, [r3, #1]!
 801357a:	4291      	cmp	r1, r2
 801357c:	d1f9      	bne.n	8013572 <memcpy+0xe>
 801357e:	bd10      	pop	{r4, pc}

08013580 <memset>:
 8013580:	4402      	add	r2, r0
 8013582:	4603      	mov	r3, r0
 8013584:	4293      	cmp	r3, r2
 8013586:	d100      	bne.n	801358a <memset+0xa>
 8013588:	4770      	bx	lr
 801358a:	f803 1b01 	strb.w	r1, [r3], #1
 801358e:	e7f9      	b.n	8013584 <memset+0x4>

08013590 <_calloc_r>:
 8013590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013592:	fba1 2402 	umull	r2, r4, r1, r2
 8013596:	b94c      	cbnz	r4, 80135ac <_calloc_r+0x1c>
 8013598:	4611      	mov	r1, r2
 801359a:	9201      	str	r2, [sp, #4]
 801359c:	f000 f87a 	bl	8013694 <_malloc_r>
 80135a0:	9a01      	ldr	r2, [sp, #4]
 80135a2:	4605      	mov	r5, r0
 80135a4:	b930      	cbnz	r0, 80135b4 <_calloc_r+0x24>
 80135a6:	4628      	mov	r0, r5
 80135a8:	b003      	add	sp, #12
 80135aa:	bd30      	pop	{r4, r5, pc}
 80135ac:	220c      	movs	r2, #12
 80135ae:	6002      	str	r2, [r0, #0]
 80135b0:	2500      	movs	r5, #0
 80135b2:	e7f8      	b.n	80135a6 <_calloc_r+0x16>
 80135b4:	4621      	mov	r1, r4
 80135b6:	f7ff ffe3 	bl	8013580 <memset>
 80135ba:	e7f4      	b.n	80135a6 <_calloc_r+0x16>

080135bc <_free_r>:
 80135bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80135be:	2900      	cmp	r1, #0
 80135c0:	d044      	beq.n	801364c <_free_r+0x90>
 80135c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135c6:	9001      	str	r0, [sp, #4]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	f1a1 0404 	sub.w	r4, r1, #4
 80135ce:	bfb8      	it	lt
 80135d0:	18e4      	addlt	r4, r4, r3
 80135d2:	f003 f859 	bl	8016688 <__malloc_lock>
 80135d6:	4a1e      	ldr	r2, [pc, #120]	; (8013650 <_free_r+0x94>)
 80135d8:	9801      	ldr	r0, [sp, #4]
 80135da:	6813      	ldr	r3, [r2, #0]
 80135dc:	b933      	cbnz	r3, 80135ec <_free_r+0x30>
 80135de:	6063      	str	r3, [r4, #4]
 80135e0:	6014      	str	r4, [r2, #0]
 80135e2:	b003      	add	sp, #12
 80135e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80135e8:	f003 b854 	b.w	8016694 <__malloc_unlock>
 80135ec:	42a3      	cmp	r3, r4
 80135ee:	d908      	bls.n	8013602 <_free_r+0x46>
 80135f0:	6825      	ldr	r5, [r4, #0]
 80135f2:	1961      	adds	r1, r4, r5
 80135f4:	428b      	cmp	r3, r1
 80135f6:	bf01      	itttt	eq
 80135f8:	6819      	ldreq	r1, [r3, #0]
 80135fa:	685b      	ldreq	r3, [r3, #4]
 80135fc:	1949      	addeq	r1, r1, r5
 80135fe:	6021      	streq	r1, [r4, #0]
 8013600:	e7ed      	b.n	80135de <_free_r+0x22>
 8013602:	461a      	mov	r2, r3
 8013604:	685b      	ldr	r3, [r3, #4]
 8013606:	b10b      	cbz	r3, 801360c <_free_r+0x50>
 8013608:	42a3      	cmp	r3, r4
 801360a:	d9fa      	bls.n	8013602 <_free_r+0x46>
 801360c:	6811      	ldr	r1, [r2, #0]
 801360e:	1855      	adds	r5, r2, r1
 8013610:	42a5      	cmp	r5, r4
 8013612:	d10b      	bne.n	801362c <_free_r+0x70>
 8013614:	6824      	ldr	r4, [r4, #0]
 8013616:	4421      	add	r1, r4
 8013618:	1854      	adds	r4, r2, r1
 801361a:	42a3      	cmp	r3, r4
 801361c:	6011      	str	r1, [r2, #0]
 801361e:	d1e0      	bne.n	80135e2 <_free_r+0x26>
 8013620:	681c      	ldr	r4, [r3, #0]
 8013622:	685b      	ldr	r3, [r3, #4]
 8013624:	6053      	str	r3, [r2, #4]
 8013626:	4421      	add	r1, r4
 8013628:	6011      	str	r1, [r2, #0]
 801362a:	e7da      	b.n	80135e2 <_free_r+0x26>
 801362c:	d902      	bls.n	8013634 <_free_r+0x78>
 801362e:	230c      	movs	r3, #12
 8013630:	6003      	str	r3, [r0, #0]
 8013632:	e7d6      	b.n	80135e2 <_free_r+0x26>
 8013634:	6825      	ldr	r5, [r4, #0]
 8013636:	1961      	adds	r1, r4, r5
 8013638:	428b      	cmp	r3, r1
 801363a:	bf04      	itt	eq
 801363c:	6819      	ldreq	r1, [r3, #0]
 801363e:	685b      	ldreq	r3, [r3, #4]
 8013640:	6063      	str	r3, [r4, #4]
 8013642:	bf04      	itt	eq
 8013644:	1949      	addeq	r1, r1, r5
 8013646:	6021      	streq	r1, [r4, #0]
 8013648:	6054      	str	r4, [r2, #4]
 801364a:	e7ca      	b.n	80135e2 <_free_r+0x26>
 801364c:	b003      	add	sp, #12
 801364e:	bd30      	pop	{r4, r5, pc}
 8013650:	200085dc 	.word	0x200085dc

08013654 <sbrk_aligned>:
 8013654:	b570      	push	{r4, r5, r6, lr}
 8013656:	4e0e      	ldr	r6, [pc, #56]	; (8013690 <sbrk_aligned+0x3c>)
 8013658:	460c      	mov	r4, r1
 801365a:	6831      	ldr	r1, [r6, #0]
 801365c:	4605      	mov	r5, r0
 801365e:	b911      	cbnz	r1, 8013666 <sbrk_aligned+0x12>
 8013660:	f000 fd60 	bl	8014124 <_sbrk_r>
 8013664:	6030      	str	r0, [r6, #0]
 8013666:	4621      	mov	r1, r4
 8013668:	4628      	mov	r0, r5
 801366a:	f000 fd5b 	bl	8014124 <_sbrk_r>
 801366e:	1c43      	adds	r3, r0, #1
 8013670:	d00a      	beq.n	8013688 <sbrk_aligned+0x34>
 8013672:	1cc4      	adds	r4, r0, #3
 8013674:	f024 0403 	bic.w	r4, r4, #3
 8013678:	42a0      	cmp	r0, r4
 801367a:	d007      	beq.n	801368c <sbrk_aligned+0x38>
 801367c:	1a21      	subs	r1, r4, r0
 801367e:	4628      	mov	r0, r5
 8013680:	f000 fd50 	bl	8014124 <_sbrk_r>
 8013684:	3001      	adds	r0, #1
 8013686:	d101      	bne.n	801368c <sbrk_aligned+0x38>
 8013688:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801368c:	4620      	mov	r0, r4
 801368e:	bd70      	pop	{r4, r5, r6, pc}
 8013690:	200085e0 	.word	0x200085e0

08013694 <_malloc_r>:
 8013694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013698:	1ccd      	adds	r5, r1, #3
 801369a:	f025 0503 	bic.w	r5, r5, #3
 801369e:	3508      	adds	r5, #8
 80136a0:	2d0c      	cmp	r5, #12
 80136a2:	bf38      	it	cc
 80136a4:	250c      	movcc	r5, #12
 80136a6:	2d00      	cmp	r5, #0
 80136a8:	4607      	mov	r7, r0
 80136aa:	db01      	blt.n	80136b0 <_malloc_r+0x1c>
 80136ac:	42a9      	cmp	r1, r5
 80136ae:	d905      	bls.n	80136bc <_malloc_r+0x28>
 80136b0:	230c      	movs	r3, #12
 80136b2:	603b      	str	r3, [r7, #0]
 80136b4:	2600      	movs	r6, #0
 80136b6:	4630      	mov	r0, r6
 80136b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136bc:	4e2e      	ldr	r6, [pc, #184]	; (8013778 <_malloc_r+0xe4>)
 80136be:	f002 ffe3 	bl	8016688 <__malloc_lock>
 80136c2:	6833      	ldr	r3, [r6, #0]
 80136c4:	461c      	mov	r4, r3
 80136c6:	bb34      	cbnz	r4, 8013716 <_malloc_r+0x82>
 80136c8:	4629      	mov	r1, r5
 80136ca:	4638      	mov	r0, r7
 80136cc:	f7ff ffc2 	bl	8013654 <sbrk_aligned>
 80136d0:	1c43      	adds	r3, r0, #1
 80136d2:	4604      	mov	r4, r0
 80136d4:	d14d      	bne.n	8013772 <_malloc_r+0xde>
 80136d6:	6834      	ldr	r4, [r6, #0]
 80136d8:	4626      	mov	r6, r4
 80136da:	2e00      	cmp	r6, #0
 80136dc:	d140      	bne.n	8013760 <_malloc_r+0xcc>
 80136de:	6823      	ldr	r3, [r4, #0]
 80136e0:	4631      	mov	r1, r6
 80136e2:	4638      	mov	r0, r7
 80136e4:	eb04 0803 	add.w	r8, r4, r3
 80136e8:	f000 fd1c 	bl	8014124 <_sbrk_r>
 80136ec:	4580      	cmp	r8, r0
 80136ee:	d13a      	bne.n	8013766 <_malloc_r+0xd2>
 80136f0:	6821      	ldr	r1, [r4, #0]
 80136f2:	3503      	adds	r5, #3
 80136f4:	1a6d      	subs	r5, r5, r1
 80136f6:	f025 0503 	bic.w	r5, r5, #3
 80136fa:	3508      	adds	r5, #8
 80136fc:	2d0c      	cmp	r5, #12
 80136fe:	bf38      	it	cc
 8013700:	250c      	movcc	r5, #12
 8013702:	4629      	mov	r1, r5
 8013704:	4638      	mov	r0, r7
 8013706:	f7ff ffa5 	bl	8013654 <sbrk_aligned>
 801370a:	3001      	adds	r0, #1
 801370c:	d02b      	beq.n	8013766 <_malloc_r+0xd2>
 801370e:	6823      	ldr	r3, [r4, #0]
 8013710:	442b      	add	r3, r5
 8013712:	6023      	str	r3, [r4, #0]
 8013714:	e00e      	b.n	8013734 <_malloc_r+0xa0>
 8013716:	6822      	ldr	r2, [r4, #0]
 8013718:	1b52      	subs	r2, r2, r5
 801371a:	d41e      	bmi.n	801375a <_malloc_r+0xc6>
 801371c:	2a0b      	cmp	r2, #11
 801371e:	d916      	bls.n	801374e <_malloc_r+0xba>
 8013720:	1961      	adds	r1, r4, r5
 8013722:	42a3      	cmp	r3, r4
 8013724:	6025      	str	r5, [r4, #0]
 8013726:	bf18      	it	ne
 8013728:	6059      	strne	r1, [r3, #4]
 801372a:	6863      	ldr	r3, [r4, #4]
 801372c:	bf08      	it	eq
 801372e:	6031      	streq	r1, [r6, #0]
 8013730:	5162      	str	r2, [r4, r5]
 8013732:	604b      	str	r3, [r1, #4]
 8013734:	4638      	mov	r0, r7
 8013736:	f104 060b 	add.w	r6, r4, #11
 801373a:	f002 ffab 	bl	8016694 <__malloc_unlock>
 801373e:	f026 0607 	bic.w	r6, r6, #7
 8013742:	1d23      	adds	r3, r4, #4
 8013744:	1af2      	subs	r2, r6, r3
 8013746:	d0b6      	beq.n	80136b6 <_malloc_r+0x22>
 8013748:	1b9b      	subs	r3, r3, r6
 801374a:	50a3      	str	r3, [r4, r2]
 801374c:	e7b3      	b.n	80136b6 <_malloc_r+0x22>
 801374e:	6862      	ldr	r2, [r4, #4]
 8013750:	42a3      	cmp	r3, r4
 8013752:	bf0c      	ite	eq
 8013754:	6032      	streq	r2, [r6, #0]
 8013756:	605a      	strne	r2, [r3, #4]
 8013758:	e7ec      	b.n	8013734 <_malloc_r+0xa0>
 801375a:	4623      	mov	r3, r4
 801375c:	6864      	ldr	r4, [r4, #4]
 801375e:	e7b2      	b.n	80136c6 <_malloc_r+0x32>
 8013760:	4634      	mov	r4, r6
 8013762:	6876      	ldr	r6, [r6, #4]
 8013764:	e7b9      	b.n	80136da <_malloc_r+0x46>
 8013766:	230c      	movs	r3, #12
 8013768:	603b      	str	r3, [r7, #0]
 801376a:	4638      	mov	r0, r7
 801376c:	f002 ff92 	bl	8016694 <__malloc_unlock>
 8013770:	e7a1      	b.n	80136b6 <_malloc_r+0x22>
 8013772:	6025      	str	r5, [r4, #0]
 8013774:	e7de      	b.n	8013734 <_malloc_r+0xa0>
 8013776:	bf00      	nop
 8013778:	200085dc 	.word	0x200085dc

0801377c <__cvt>:
 801377c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013780:	ec55 4b10 	vmov	r4, r5, d0
 8013784:	2d00      	cmp	r5, #0
 8013786:	460e      	mov	r6, r1
 8013788:	4619      	mov	r1, r3
 801378a:	462b      	mov	r3, r5
 801378c:	bfbb      	ittet	lt
 801378e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013792:	461d      	movlt	r5, r3
 8013794:	2300      	movge	r3, #0
 8013796:	232d      	movlt	r3, #45	; 0x2d
 8013798:	700b      	strb	r3, [r1, #0]
 801379a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801379c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80137a0:	4691      	mov	r9, r2
 80137a2:	f023 0820 	bic.w	r8, r3, #32
 80137a6:	bfbc      	itt	lt
 80137a8:	4622      	movlt	r2, r4
 80137aa:	4614      	movlt	r4, r2
 80137ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80137b0:	d005      	beq.n	80137be <__cvt+0x42>
 80137b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80137b6:	d100      	bne.n	80137ba <__cvt+0x3e>
 80137b8:	3601      	adds	r6, #1
 80137ba:	2102      	movs	r1, #2
 80137bc:	e000      	b.n	80137c0 <__cvt+0x44>
 80137be:	2103      	movs	r1, #3
 80137c0:	ab03      	add	r3, sp, #12
 80137c2:	9301      	str	r3, [sp, #4]
 80137c4:	ab02      	add	r3, sp, #8
 80137c6:	9300      	str	r3, [sp, #0]
 80137c8:	ec45 4b10 	vmov	d0, r4, r5
 80137cc:	4653      	mov	r3, sl
 80137ce:	4632      	mov	r2, r6
 80137d0:	f001 fd12 	bl	80151f8 <_dtoa_r>
 80137d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80137d8:	4607      	mov	r7, r0
 80137da:	d102      	bne.n	80137e2 <__cvt+0x66>
 80137dc:	f019 0f01 	tst.w	r9, #1
 80137e0:	d022      	beq.n	8013828 <__cvt+0xac>
 80137e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80137e6:	eb07 0906 	add.w	r9, r7, r6
 80137ea:	d110      	bne.n	801380e <__cvt+0x92>
 80137ec:	783b      	ldrb	r3, [r7, #0]
 80137ee:	2b30      	cmp	r3, #48	; 0x30
 80137f0:	d10a      	bne.n	8013808 <__cvt+0x8c>
 80137f2:	2200      	movs	r2, #0
 80137f4:	2300      	movs	r3, #0
 80137f6:	4620      	mov	r0, r4
 80137f8:	4629      	mov	r1, r5
 80137fa:	f7ed f965 	bl	8000ac8 <__aeabi_dcmpeq>
 80137fe:	b918      	cbnz	r0, 8013808 <__cvt+0x8c>
 8013800:	f1c6 0601 	rsb	r6, r6, #1
 8013804:	f8ca 6000 	str.w	r6, [sl]
 8013808:	f8da 3000 	ldr.w	r3, [sl]
 801380c:	4499      	add	r9, r3
 801380e:	2200      	movs	r2, #0
 8013810:	2300      	movs	r3, #0
 8013812:	4620      	mov	r0, r4
 8013814:	4629      	mov	r1, r5
 8013816:	f7ed f957 	bl	8000ac8 <__aeabi_dcmpeq>
 801381a:	b108      	cbz	r0, 8013820 <__cvt+0xa4>
 801381c:	f8cd 900c 	str.w	r9, [sp, #12]
 8013820:	2230      	movs	r2, #48	; 0x30
 8013822:	9b03      	ldr	r3, [sp, #12]
 8013824:	454b      	cmp	r3, r9
 8013826:	d307      	bcc.n	8013838 <__cvt+0xbc>
 8013828:	9b03      	ldr	r3, [sp, #12]
 801382a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801382c:	1bdb      	subs	r3, r3, r7
 801382e:	4638      	mov	r0, r7
 8013830:	6013      	str	r3, [r2, #0]
 8013832:	b004      	add	sp, #16
 8013834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013838:	1c59      	adds	r1, r3, #1
 801383a:	9103      	str	r1, [sp, #12]
 801383c:	701a      	strb	r2, [r3, #0]
 801383e:	e7f0      	b.n	8013822 <__cvt+0xa6>

08013840 <__exponent>:
 8013840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013842:	4603      	mov	r3, r0
 8013844:	2900      	cmp	r1, #0
 8013846:	bfb8      	it	lt
 8013848:	4249      	neglt	r1, r1
 801384a:	f803 2b02 	strb.w	r2, [r3], #2
 801384e:	bfb4      	ite	lt
 8013850:	222d      	movlt	r2, #45	; 0x2d
 8013852:	222b      	movge	r2, #43	; 0x2b
 8013854:	2909      	cmp	r1, #9
 8013856:	7042      	strb	r2, [r0, #1]
 8013858:	dd2a      	ble.n	80138b0 <__exponent+0x70>
 801385a:	f10d 0407 	add.w	r4, sp, #7
 801385e:	46a4      	mov	ip, r4
 8013860:	270a      	movs	r7, #10
 8013862:	46a6      	mov	lr, r4
 8013864:	460a      	mov	r2, r1
 8013866:	fb91 f6f7 	sdiv	r6, r1, r7
 801386a:	fb07 1516 	mls	r5, r7, r6, r1
 801386e:	3530      	adds	r5, #48	; 0x30
 8013870:	2a63      	cmp	r2, #99	; 0x63
 8013872:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8013876:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801387a:	4631      	mov	r1, r6
 801387c:	dcf1      	bgt.n	8013862 <__exponent+0x22>
 801387e:	3130      	adds	r1, #48	; 0x30
 8013880:	f1ae 0502 	sub.w	r5, lr, #2
 8013884:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013888:	1c44      	adds	r4, r0, #1
 801388a:	4629      	mov	r1, r5
 801388c:	4561      	cmp	r1, ip
 801388e:	d30a      	bcc.n	80138a6 <__exponent+0x66>
 8013890:	f10d 0209 	add.w	r2, sp, #9
 8013894:	eba2 020e 	sub.w	r2, r2, lr
 8013898:	4565      	cmp	r5, ip
 801389a:	bf88      	it	hi
 801389c:	2200      	movhi	r2, #0
 801389e:	4413      	add	r3, r2
 80138a0:	1a18      	subs	r0, r3, r0
 80138a2:	b003      	add	sp, #12
 80138a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80138aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80138ae:	e7ed      	b.n	801388c <__exponent+0x4c>
 80138b0:	2330      	movs	r3, #48	; 0x30
 80138b2:	3130      	adds	r1, #48	; 0x30
 80138b4:	7083      	strb	r3, [r0, #2]
 80138b6:	70c1      	strb	r1, [r0, #3]
 80138b8:	1d03      	adds	r3, r0, #4
 80138ba:	e7f1      	b.n	80138a0 <__exponent+0x60>

080138bc <_printf_float>:
 80138bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138c0:	ed2d 8b02 	vpush	{d8}
 80138c4:	b08d      	sub	sp, #52	; 0x34
 80138c6:	460c      	mov	r4, r1
 80138c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80138cc:	4616      	mov	r6, r2
 80138ce:	461f      	mov	r7, r3
 80138d0:	4605      	mov	r5, r0
 80138d2:	f002 feb1 	bl	8016638 <_localeconv_r>
 80138d6:	f8d0 a000 	ldr.w	sl, [r0]
 80138da:	4650      	mov	r0, sl
 80138dc:	f7ec fc78 	bl	80001d0 <strlen>
 80138e0:	2300      	movs	r3, #0
 80138e2:	930a      	str	r3, [sp, #40]	; 0x28
 80138e4:	6823      	ldr	r3, [r4, #0]
 80138e6:	9305      	str	r3, [sp, #20]
 80138e8:	f8d8 3000 	ldr.w	r3, [r8]
 80138ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80138f0:	3307      	adds	r3, #7
 80138f2:	f023 0307 	bic.w	r3, r3, #7
 80138f6:	f103 0208 	add.w	r2, r3, #8
 80138fa:	f8c8 2000 	str.w	r2, [r8]
 80138fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013902:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013906:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801390a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801390e:	9307      	str	r3, [sp, #28]
 8013910:	f8cd 8018 	str.w	r8, [sp, #24]
 8013914:	ee08 0a10 	vmov	s16, r0
 8013918:	4b9f      	ldr	r3, [pc, #636]	; (8013b98 <_printf_float+0x2dc>)
 801391a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801391e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013922:	f7ed f903 	bl	8000b2c <__aeabi_dcmpun>
 8013926:	bb88      	cbnz	r0, 801398c <_printf_float+0xd0>
 8013928:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801392c:	4b9a      	ldr	r3, [pc, #616]	; (8013b98 <_printf_float+0x2dc>)
 801392e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013932:	f7ed f8dd 	bl	8000af0 <__aeabi_dcmple>
 8013936:	bb48      	cbnz	r0, 801398c <_printf_float+0xd0>
 8013938:	2200      	movs	r2, #0
 801393a:	2300      	movs	r3, #0
 801393c:	4640      	mov	r0, r8
 801393e:	4649      	mov	r1, r9
 8013940:	f7ed f8cc 	bl	8000adc <__aeabi_dcmplt>
 8013944:	b110      	cbz	r0, 801394c <_printf_float+0x90>
 8013946:	232d      	movs	r3, #45	; 0x2d
 8013948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801394c:	4b93      	ldr	r3, [pc, #588]	; (8013b9c <_printf_float+0x2e0>)
 801394e:	4894      	ldr	r0, [pc, #592]	; (8013ba0 <_printf_float+0x2e4>)
 8013950:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013954:	bf94      	ite	ls
 8013956:	4698      	movls	r8, r3
 8013958:	4680      	movhi	r8, r0
 801395a:	2303      	movs	r3, #3
 801395c:	6123      	str	r3, [r4, #16]
 801395e:	9b05      	ldr	r3, [sp, #20]
 8013960:	f023 0204 	bic.w	r2, r3, #4
 8013964:	6022      	str	r2, [r4, #0]
 8013966:	f04f 0900 	mov.w	r9, #0
 801396a:	9700      	str	r7, [sp, #0]
 801396c:	4633      	mov	r3, r6
 801396e:	aa0b      	add	r2, sp, #44	; 0x2c
 8013970:	4621      	mov	r1, r4
 8013972:	4628      	mov	r0, r5
 8013974:	f000 f9d8 	bl	8013d28 <_printf_common>
 8013978:	3001      	adds	r0, #1
 801397a:	f040 8090 	bne.w	8013a9e <_printf_float+0x1e2>
 801397e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013982:	b00d      	add	sp, #52	; 0x34
 8013984:	ecbd 8b02 	vpop	{d8}
 8013988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801398c:	4642      	mov	r2, r8
 801398e:	464b      	mov	r3, r9
 8013990:	4640      	mov	r0, r8
 8013992:	4649      	mov	r1, r9
 8013994:	f7ed f8ca 	bl	8000b2c <__aeabi_dcmpun>
 8013998:	b140      	cbz	r0, 80139ac <_printf_float+0xf0>
 801399a:	464b      	mov	r3, r9
 801399c:	2b00      	cmp	r3, #0
 801399e:	bfbc      	itt	lt
 80139a0:	232d      	movlt	r3, #45	; 0x2d
 80139a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80139a6:	487f      	ldr	r0, [pc, #508]	; (8013ba4 <_printf_float+0x2e8>)
 80139a8:	4b7f      	ldr	r3, [pc, #508]	; (8013ba8 <_printf_float+0x2ec>)
 80139aa:	e7d1      	b.n	8013950 <_printf_float+0x94>
 80139ac:	6863      	ldr	r3, [r4, #4]
 80139ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80139b2:	9206      	str	r2, [sp, #24]
 80139b4:	1c5a      	adds	r2, r3, #1
 80139b6:	d13f      	bne.n	8013a38 <_printf_float+0x17c>
 80139b8:	2306      	movs	r3, #6
 80139ba:	6063      	str	r3, [r4, #4]
 80139bc:	9b05      	ldr	r3, [sp, #20]
 80139be:	6861      	ldr	r1, [r4, #4]
 80139c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80139c4:	2300      	movs	r3, #0
 80139c6:	9303      	str	r3, [sp, #12]
 80139c8:	ab0a      	add	r3, sp, #40	; 0x28
 80139ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80139ce:	ab09      	add	r3, sp, #36	; 0x24
 80139d0:	ec49 8b10 	vmov	d0, r8, r9
 80139d4:	9300      	str	r3, [sp, #0]
 80139d6:	6022      	str	r2, [r4, #0]
 80139d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80139dc:	4628      	mov	r0, r5
 80139de:	f7ff fecd 	bl	801377c <__cvt>
 80139e2:	9b06      	ldr	r3, [sp, #24]
 80139e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80139e6:	2b47      	cmp	r3, #71	; 0x47
 80139e8:	4680      	mov	r8, r0
 80139ea:	d108      	bne.n	80139fe <_printf_float+0x142>
 80139ec:	1cc8      	adds	r0, r1, #3
 80139ee:	db02      	blt.n	80139f6 <_printf_float+0x13a>
 80139f0:	6863      	ldr	r3, [r4, #4]
 80139f2:	4299      	cmp	r1, r3
 80139f4:	dd41      	ble.n	8013a7a <_printf_float+0x1be>
 80139f6:	f1ab 0b02 	sub.w	fp, fp, #2
 80139fa:	fa5f fb8b 	uxtb.w	fp, fp
 80139fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013a02:	d820      	bhi.n	8013a46 <_printf_float+0x18a>
 8013a04:	3901      	subs	r1, #1
 8013a06:	465a      	mov	r2, fp
 8013a08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013a0c:	9109      	str	r1, [sp, #36]	; 0x24
 8013a0e:	f7ff ff17 	bl	8013840 <__exponent>
 8013a12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a14:	1813      	adds	r3, r2, r0
 8013a16:	2a01      	cmp	r2, #1
 8013a18:	4681      	mov	r9, r0
 8013a1a:	6123      	str	r3, [r4, #16]
 8013a1c:	dc02      	bgt.n	8013a24 <_printf_float+0x168>
 8013a1e:	6822      	ldr	r2, [r4, #0]
 8013a20:	07d2      	lsls	r2, r2, #31
 8013a22:	d501      	bpl.n	8013a28 <_printf_float+0x16c>
 8013a24:	3301      	adds	r3, #1
 8013a26:	6123      	str	r3, [r4, #16]
 8013a28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d09c      	beq.n	801396a <_printf_float+0xae>
 8013a30:	232d      	movs	r3, #45	; 0x2d
 8013a32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a36:	e798      	b.n	801396a <_printf_float+0xae>
 8013a38:	9a06      	ldr	r2, [sp, #24]
 8013a3a:	2a47      	cmp	r2, #71	; 0x47
 8013a3c:	d1be      	bne.n	80139bc <_printf_float+0x100>
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d1bc      	bne.n	80139bc <_printf_float+0x100>
 8013a42:	2301      	movs	r3, #1
 8013a44:	e7b9      	b.n	80139ba <_printf_float+0xfe>
 8013a46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013a4a:	d118      	bne.n	8013a7e <_printf_float+0x1c2>
 8013a4c:	2900      	cmp	r1, #0
 8013a4e:	6863      	ldr	r3, [r4, #4]
 8013a50:	dd0b      	ble.n	8013a6a <_printf_float+0x1ae>
 8013a52:	6121      	str	r1, [r4, #16]
 8013a54:	b913      	cbnz	r3, 8013a5c <_printf_float+0x1a0>
 8013a56:	6822      	ldr	r2, [r4, #0]
 8013a58:	07d0      	lsls	r0, r2, #31
 8013a5a:	d502      	bpl.n	8013a62 <_printf_float+0x1a6>
 8013a5c:	3301      	adds	r3, #1
 8013a5e:	440b      	add	r3, r1
 8013a60:	6123      	str	r3, [r4, #16]
 8013a62:	65a1      	str	r1, [r4, #88]	; 0x58
 8013a64:	f04f 0900 	mov.w	r9, #0
 8013a68:	e7de      	b.n	8013a28 <_printf_float+0x16c>
 8013a6a:	b913      	cbnz	r3, 8013a72 <_printf_float+0x1b6>
 8013a6c:	6822      	ldr	r2, [r4, #0]
 8013a6e:	07d2      	lsls	r2, r2, #31
 8013a70:	d501      	bpl.n	8013a76 <_printf_float+0x1ba>
 8013a72:	3302      	adds	r3, #2
 8013a74:	e7f4      	b.n	8013a60 <_printf_float+0x1a4>
 8013a76:	2301      	movs	r3, #1
 8013a78:	e7f2      	b.n	8013a60 <_printf_float+0x1a4>
 8013a7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a80:	4299      	cmp	r1, r3
 8013a82:	db05      	blt.n	8013a90 <_printf_float+0x1d4>
 8013a84:	6823      	ldr	r3, [r4, #0]
 8013a86:	6121      	str	r1, [r4, #16]
 8013a88:	07d8      	lsls	r0, r3, #31
 8013a8a:	d5ea      	bpl.n	8013a62 <_printf_float+0x1a6>
 8013a8c:	1c4b      	adds	r3, r1, #1
 8013a8e:	e7e7      	b.n	8013a60 <_printf_float+0x1a4>
 8013a90:	2900      	cmp	r1, #0
 8013a92:	bfd4      	ite	le
 8013a94:	f1c1 0202 	rsble	r2, r1, #2
 8013a98:	2201      	movgt	r2, #1
 8013a9a:	4413      	add	r3, r2
 8013a9c:	e7e0      	b.n	8013a60 <_printf_float+0x1a4>
 8013a9e:	6823      	ldr	r3, [r4, #0]
 8013aa0:	055a      	lsls	r2, r3, #21
 8013aa2:	d407      	bmi.n	8013ab4 <_printf_float+0x1f8>
 8013aa4:	6923      	ldr	r3, [r4, #16]
 8013aa6:	4642      	mov	r2, r8
 8013aa8:	4631      	mov	r1, r6
 8013aaa:	4628      	mov	r0, r5
 8013aac:	47b8      	blx	r7
 8013aae:	3001      	adds	r0, #1
 8013ab0:	d12c      	bne.n	8013b0c <_printf_float+0x250>
 8013ab2:	e764      	b.n	801397e <_printf_float+0xc2>
 8013ab4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013ab8:	f240 80e0 	bls.w	8013c7c <_printf_float+0x3c0>
 8013abc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	f7ed f800 	bl	8000ac8 <__aeabi_dcmpeq>
 8013ac8:	2800      	cmp	r0, #0
 8013aca:	d034      	beq.n	8013b36 <_printf_float+0x27a>
 8013acc:	4a37      	ldr	r2, [pc, #220]	; (8013bac <_printf_float+0x2f0>)
 8013ace:	2301      	movs	r3, #1
 8013ad0:	4631      	mov	r1, r6
 8013ad2:	4628      	mov	r0, r5
 8013ad4:	47b8      	blx	r7
 8013ad6:	3001      	adds	r0, #1
 8013ad8:	f43f af51 	beq.w	801397e <_printf_float+0xc2>
 8013adc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013ae0:	429a      	cmp	r2, r3
 8013ae2:	db02      	blt.n	8013aea <_printf_float+0x22e>
 8013ae4:	6823      	ldr	r3, [r4, #0]
 8013ae6:	07d8      	lsls	r0, r3, #31
 8013ae8:	d510      	bpl.n	8013b0c <_printf_float+0x250>
 8013aea:	ee18 3a10 	vmov	r3, s16
 8013aee:	4652      	mov	r2, sl
 8013af0:	4631      	mov	r1, r6
 8013af2:	4628      	mov	r0, r5
 8013af4:	47b8      	blx	r7
 8013af6:	3001      	adds	r0, #1
 8013af8:	f43f af41 	beq.w	801397e <_printf_float+0xc2>
 8013afc:	f04f 0800 	mov.w	r8, #0
 8013b00:	f104 091a 	add.w	r9, r4, #26
 8013b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b06:	3b01      	subs	r3, #1
 8013b08:	4543      	cmp	r3, r8
 8013b0a:	dc09      	bgt.n	8013b20 <_printf_float+0x264>
 8013b0c:	6823      	ldr	r3, [r4, #0]
 8013b0e:	079b      	lsls	r3, r3, #30
 8013b10:	f100 8105 	bmi.w	8013d1e <_printf_float+0x462>
 8013b14:	68e0      	ldr	r0, [r4, #12]
 8013b16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b18:	4298      	cmp	r0, r3
 8013b1a:	bfb8      	it	lt
 8013b1c:	4618      	movlt	r0, r3
 8013b1e:	e730      	b.n	8013982 <_printf_float+0xc6>
 8013b20:	2301      	movs	r3, #1
 8013b22:	464a      	mov	r2, r9
 8013b24:	4631      	mov	r1, r6
 8013b26:	4628      	mov	r0, r5
 8013b28:	47b8      	blx	r7
 8013b2a:	3001      	adds	r0, #1
 8013b2c:	f43f af27 	beq.w	801397e <_printf_float+0xc2>
 8013b30:	f108 0801 	add.w	r8, r8, #1
 8013b34:	e7e6      	b.n	8013b04 <_printf_float+0x248>
 8013b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	dc39      	bgt.n	8013bb0 <_printf_float+0x2f4>
 8013b3c:	4a1b      	ldr	r2, [pc, #108]	; (8013bac <_printf_float+0x2f0>)
 8013b3e:	2301      	movs	r3, #1
 8013b40:	4631      	mov	r1, r6
 8013b42:	4628      	mov	r0, r5
 8013b44:	47b8      	blx	r7
 8013b46:	3001      	adds	r0, #1
 8013b48:	f43f af19 	beq.w	801397e <_printf_float+0xc2>
 8013b4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013b50:	4313      	orrs	r3, r2
 8013b52:	d102      	bne.n	8013b5a <_printf_float+0x29e>
 8013b54:	6823      	ldr	r3, [r4, #0]
 8013b56:	07d9      	lsls	r1, r3, #31
 8013b58:	d5d8      	bpl.n	8013b0c <_printf_float+0x250>
 8013b5a:	ee18 3a10 	vmov	r3, s16
 8013b5e:	4652      	mov	r2, sl
 8013b60:	4631      	mov	r1, r6
 8013b62:	4628      	mov	r0, r5
 8013b64:	47b8      	blx	r7
 8013b66:	3001      	adds	r0, #1
 8013b68:	f43f af09 	beq.w	801397e <_printf_float+0xc2>
 8013b6c:	f04f 0900 	mov.w	r9, #0
 8013b70:	f104 0a1a 	add.w	sl, r4, #26
 8013b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b76:	425b      	negs	r3, r3
 8013b78:	454b      	cmp	r3, r9
 8013b7a:	dc01      	bgt.n	8013b80 <_printf_float+0x2c4>
 8013b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b7e:	e792      	b.n	8013aa6 <_printf_float+0x1ea>
 8013b80:	2301      	movs	r3, #1
 8013b82:	4652      	mov	r2, sl
 8013b84:	4631      	mov	r1, r6
 8013b86:	4628      	mov	r0, r5
 8013b88:	47b8      	blx	r7
 8013b8a:	3001      	adds	r0, #1
 8013b8c:	f43f aef7 	beq.w	801397e <_printf_float+0xc2>
 8013b90:	f109 0901 	add.w	r9, r9, #1
 8013b94:	e7ee      	b.n	8013b74 <_printf_float+0x2b8>
 8013b96:	bf00      	nop
 8013b98:	7fefffff 	.word	0x7fefffff
 8013b9c:	080195a0 	.word	0x080195a0
 8013ba0:	080195a4 	.word	0x080195a4
 8013ba4:	080195ac 	.word	0x080195ac
 8013ba8:	080195a8 	.word	0x080195a8
 8013bac:	080195b0 	.word	0x080195b0
 8013bb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013bb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013bb4:	429a      	cmp	r2, r3
 8013bb6:	bfa8      	it	ge
 8013bb8:	461a      	movge	r2, r3
 8013bba:	2a00      	cmp	r2, #0
 8013bbc:	4691      	mov	r9, r2
 8013bbe:	dc37      	bgt.n	8013c30 <_printf_float+0x374>
 8013bc0:	f04f 0b00 	mov.w	fp, #0
 8013bc4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013bc8:	f104 021a 	add.w	r2, r4, #26
 8013bcc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013bce:	9305      	str	r3, [sp, #20]
 8013bd0:	eba3 0309 	sub.w	r3, r3, r9
 8013bd4:	455b      	cmp	r3, fp
 8013bd6:	dc33      	bgt.n	8013c40 <_printf_float+0x384>
 8013bd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013bdc:	429a      	cmp	r2, r3
 8013bde:	db3b      	blt.n	8013c58 <_printf_float+0x39c>
 8013be0:	6823      	ldr	r3, [r4, #0]
 8013be2:	07da      	lsls	r2, r3, #31
 8013be4:	d438      	bmi.n	8013c58 <_printf_float+0x39c>
 8013be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013be8:	9a05      	ldr	r2, [sp, #20]
 8013bea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013bec:	1a9a      	subs	r2, r3, r2
 8013bee:	eba3 0901 	sub.w	r9, r3, r1
 8013bf2:	4591      	cmp	r9, r2
 8013bf4:	bfa8      	it	ge
 8013bf6:	4691      	movge	r9, r2
 8013bf8:	f1b9 0f00 	cmp.w	r9, #0
 8013bfc:	dc35      	bgt.n	8013c6a <_printf_float+0x3ae>
 8013bfe:	f04f 0800 	mov.w	r8, #0
 8013c02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013c06:	f104 0a1a 	add.w	sl, r4, #26
 8013c0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013c0e:	1a9b      	subs	r3, r3, r2
 8013c10:	eba3 0309 	sub.w	r3, r3, r9
 8013c14:	4543      	cmp	r3, r8
 8013c16:	f77f af79 	ble.w	8013b0c <_printf_float+0x250>
 8013c1a:	2301      	movs	r3, #1
 8013c1c:	4652      	mov	r2, sl
 8013c1e:	4631      	mov	r1, r6
 8013c20:	4628      	mov	r0, r5
 8013c22:	47b8      	blx	r7
 8013c24:	3001      	adds	r0, #1
 8013c26:	f43f aeaa 	beq.w	801397e <_printf_float+0xc2>
 8013c2a:	f108 0801 	add.w	r8, r8, #1
 8013c2e:	e7ec      	b.n	8013c0a <_printf_float+0x34e>
 8013c30:	4613      	mov	r3, r2
 8013c32:	4631      	mov	r1, r6
 8013c34:	4642      	mov	r2, r8
 8013c36:	4628      	mov	r0, r5
 8013c38:	47b8      	blx	r7
 8013c3a:	3001      	adds	r0, #1
 8013c3c:	d1c0      	bne.n	8013bc0 <_printf_float+0x304>
 8013c3e:	e69e      	b.n	801397e <_printf_float+0xc2>
 8013c40:	2301      	movs	r3, #1
 8013c42:	4631      	mov	r1, r6
 8013c44:	4628      	mov	r0, r5
 8013c46:	9205      	str	r2, [sp, #20]
 8013c48:	47b8      	blx	r7
 8013c4a:	3001      	adds	r0, #1
 8013c4c:	f43f ae97 	beq.w	801397e <_printf_float+0xc2>
 8013c50:	9a05      	ldr	r2, [sp, #20]
 8013c52:	f10b 0b01 	add.w	fp, fp, #1
 8013c56:	e7b9      	b.n	8013bcc <_printf_float+0x310>
 8013c58:	ee18 3a10 	vmov	r3, s16
 8013c5c:	4652      	mov	r2, sl
 8013c5e:	4631      	mov	r1, r6
 8013c60:	4628      	mov	r0, r5
 8013c62:	47b8      	blx	r7
 8013c64:	3001      	adds	r0, #1
 8013c66:	d1be      	bne.n	8013be6 <_printf_float+0x32a>
 8013c68:	e689      	b.n	801397e <_printf_float+0xc2>
 8013c6a:	9a05      	ldr	r2, [sp, #20]
 8013c6c:	464b      	mov	r3, r9
 8013c6e:	4442      	add	r2, r8
 8013c70:	4631      	mov	r1, r6
 8013c72:	4628      	mov	r0, r5
 8013c74:	47b8      	blx	r7
 8013c76:	3001      	adds	r0, #1
 8013c78:	d1c1      	bne.n	8013bfe <_printf_float+0x342>
 8013c7a:	e680      	b.n	801397e <_printf_float+0xc2>
 8013c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013c7e:	2a01      	cmp	r2, #1
 8013c80:	dc01      	bgt.n	8013c86 <_printf_float+0x3ca>
 8013c82:	07db      	lsls	r3, r3, #31
 8013c84:	d538      	bpl.n	8013cf8 <_printf_float+0x43c>
 8013c86:	2301      	movs	r3, #1
 8013c88:	4642      	mov	r2, r8
 8013c8a:	4631      	mov	r1, r6
 8013c8c:	4628      	mov	r0, r5
 8013c8e:	47b8      	blx	r7
 8013c90:	3001      	adds	r0, #1
 8013c92:	f43f ae74 	beq.w	801397e <_printf_float+0xc2>
 8013c96:	ee18 3a10 	vmov	r3, s16
 8013c9a:	4652      	mov	r2, sl
 8013c9c:	4631      	mov	r1, r6
 8013c9e:	4628      	mov	r0, r5
 8013ca0:	47b8      	blx	r7
 8013ca2:	3001      	adds	r0, #1
 8013ca4:	f43f ae6b 	beq.w	801397e <_printf_float+0xc2>
 8013ca8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013cac:	2200      	movs	r2, #0
 8013cae:	2300      	movs	r3, #0
 8013cb0:	f7ec ff0a 	bl	8000ac8 <__aeabi_dcmpeq>
 8013cb4:	b9d8      	cbnz	r0, 8013cee <_printf_float+0x432>
 8013cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013cb8:	f108 0201 	add.w	r2, r8, #1
 8013cbc:	3b01      	subs	r3, #1
 8013cbe:	4631      	mov	r1, r6
 8013cc0:	4628      	mov	r0, r5
 8013cc2:	47b8      	blx	r7
 8013cc4:	3001      	adds	r0, #1
 8013cc6:	d10e      	bne.n	8013ce6 <_printf_float+0x42a>
 8013cc8:	e659      	b.n	801397e <_printf_float+0xc2>
 8013cca:	2301      	movs	r3, #1
 8013ccc:	4652      	mov	r2, sl
 8013cce:	4631      	mov	r1, r6
 8013cd0:	4628      	mov	r0, r5
 8013cd2:	47b8      	blx	r7
 8013cd4:	3001      	adds	r0, #1
 8013cd6:	f43f ae52 	beq.w	801397e <_printf_float+0xc2>
 8013cda:	f108 0801 	add.w	r8, r8, #1
 8013cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ce0:	3b01      	subs	r3, #1
 8013ce2:	4543      	cmp	r3, r8
 8013ce4:	dcf1      	bgt.n	8013cca <_printf_float+0x40e>
 8013ce6:	464b      	mov	r3, r9
 8013ce8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013cec:	e6dc      	b.n	8013aa8 <_printf_float+0x1ec>
 8013cee:	f04f 0800 	mov.w	r8, #0
 8013cf2:	f104 0a1a 	add.w	sl, r4, #26
 8013cf6:	e7f2      	b.n	8013cde <_printf_float+0x422>
 8013cf8:	2301      	movs	r3, #1
 8013cfa:	4642      	mov	r2, r8
 8013cfc:	e7df      	b.n	8013cbe <_printf_float+0x402>
 8013cfe:	2301      	movs	r3, #1
 8013d00:	464a      	mov	r2, r9
 8013d02:	4631      	mov	r1, r6
 8013d04:	4628      	mov	r0, r5
 8013d06:	47b8      	blx	r7
 8013d08:	3001      	adds	r0, #1
 8013d0a:	f43f ae38 	beq.w	801397e <_printf_float+0xc2>
 8013d0e:	f108 0801 	add.w	r8, r8, #1
 8013d12:	68e3      	ldr	r3, [r4, #12]
 8013d14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013d16:	1a5b      	subs	r3, r3, r1
 8013d18:	4543      	cmp	r3, r8
 8013d1a:	dcf0      	bgt.n	8013cfe <_printf_float+0x442>
 8013d1c:	e6fa      	b.n	8013b14 <_printf_float+0x258>
 8013d1e:	f04f 0800 	mov.w	r8, #0
 8013d22:	f104 0919 	add.w	r9, r4, #25
 8013d26:	e7f4      	b.n	8013d12 <_printf_float+0x456>

08013d28 <_printf_common>:
 8013d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d2c:	4616      	mov	r6, r2
 8013d2e:	4699      	mov	r9, r3
 8013d30:	688a      	ldr	r2, [r1, #8]
 8013d32:	690b      	ldr	r3, [r1, #16]
 8013d34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013d38:	4293      	cmp	r3, r2
 8013d3a:	bfb8      	it	lt
 8013d3c:	4613      	movlt	r3, r2
 8013d3e:	6033      	str	r3, [r6, #0]
 8013d40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013d44:	4607      	mov	r7, r0
 8013d46:	460c      	mov	r4, r1
 8013d48:	b10a      	cbz	r2, 8013d4e <_printf_common+0x26>
 8013d4a:	3301      	adds	r3, #1
 8013d4c:	6033      	str	r3, [r6, #0]
 8013d4e:	6823      	ldr	r3, [r4, #0]
 8013d50:	0699      	lsls	r1, r3, #26
 8013d52:	bf42      	ittt	mi
 8013d54:	6833      	ldrmi	r3, [r6, #0]
 8013d56:	3302      	addmi	r3, #2
 8013d58:	6033      	strmi	r3, [r6, #0]
 8013d5a:	6825      	ldr	r5, [r4, #0]
 8013d5c:	f015 0506 	ands.w	r5, r5, #6
 8013d60:	d106      	bne.n	8013d70 <_printf_common+0x48>
 8013d62:	f104 0a19 	add.w	sl, r4, #25
 8013d66:	68e3      	ldr	r3, [r4, #12]
 8013d68:	6832      	ldr	r2, [r6, #0]
 8013d6a:	1a9b      	subs	r3, r3, r2
 8013d6c:	42ab      	cmp	r3, r5
 8013d6e:	dc26      	bgt.n	8013dbe <_printf_common+0x96>
 8013d70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013d74:	1e13      	subs	r3, r2, #0
 8013d76:	6822      	ldr	r2, [r4, #0]
 8013d78:	bf18      	it	ne
 8013d7a:	2301      	movne	r3, #1
 8013d7c:	0692      	lsls	r2, r2, #26
 8013d7e:	d42b      	bmi.n	8013dd8 <_printf_common+0xb0>
 8013d80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013d84:	4649      	mov	r1, r9
 8013d86:	4638      	mov	r0, r7
 8013d88:	47c0      	blx	r8
 8013d8a:	3001      	adds	r0, #1
 8013d8c:	d01e      	beq.n	8013dcc <_printf_common+0xa4>
 8013d8e:	6823      	ldr	r3, [r4, #0]
 8013d90:	68e5      	ldr	r5, [r4, #12]
 8013d92:	6832      	ldr	r2, [r6, #0]
 8013d94:	f003 0306 	and.w	r3, r3, #6
 8013d98:	2b04      	cmp	r3, #4
 8013d9a:	bf08      	it	eq
 8013d9c:	1aad      	subeq	r5, r5, r2
 8013d9e:	68a3      	ldr	r3, [r4, #8]
 8013da0:	6922      	ldr	r2, [r4, #16]
 8013da2:	bf0c      	ite	eq
 8013da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013da8:	2500      	movne	r5, #0
 8013daa:	4293      	cmp	r3, r2
 8013dac:	bfc4      	itt	gt
 8013dae:	1a9b      	subgt	r3, r3, r2
 8013db0:	18ed      	addgt	r5, r5, r3
 8013db2:	2600      	movs	r6, #0
 8013db4:	341a      	adds	r4, #26
 8013db6:	42b5      	cmp	r5, r6
 8013db8:	d11a      	bne.n	8013df0 <_printf_common+0xc8>
 8013dba:	2000      	movs	r0, #0
 8013dbc:	e008      	b.n	8013dd0 <_printf_common+0xa8>
 8013dbe:	2301      	movs	r3, #1
 8013dc0:	4652      	mov	r2, sl
 8013dc2:	4649      	mov	r1, r9
 8013dc4:	4638      	mov	r0, r7
 8013dc6:	47c0      	blx	r8
 8013dc8:	3001      	adds	r0, #1
 8013dca:	d103      	bne.n	8013dd4 <_printf_common+0xac>
 8013dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dd4:	3501      	adds	r5, #1
 8013dd6:	e7c6      	b.n	8013d66 <_printf_common+0x3e>
 8013dd8:	18e1      	adds	r1, r4, r3
 8013dda:	1c5a      	adds	r2, r3, #1
 8013ddc:	2030      	movs	r0, #48	; 0x30
 8013dde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013de2:	4422      	add	r2, r4
 8013de4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013de8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013dec:	3302      	adds	r3, #2
 8013dee:	e7c7      	b.n	8013d80 <_printf_common+0x58>
 8013df0:	2301      	movs	r3, #1
 8013df2:	4622      	mov	r2, r4
 8013df4:	4649      	mov	r1, r9
 8013df6:	4638      	mov	r0, r7
 8013df8:	47c0      	blx	r8
 8013dfa:	3001      	adds	r0, #1
 8013dfc:	d0e6      	beq.n	8013dcc <_printf_common+0xa4>
 8013dfe:	3601      	adds	r6, #1
 8013e00:	e7d9      	b.n	8013db6 <_printf_common+0x8e>
	...

08013e04 <_printf_i>:
 8013e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013e08:	7e0f      	ldrb	r7, [r1, #24]
 8013e0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013e0c:	2f78      	cmp	r7, #120	; 0x78
 8013e0e:	4691      	mov	r9, r2
 8013e10:	4680      	mov	r8, r0
 8013e12:	460c      	mov	r4, r1
 8013e14:	469a      	mov	sl, r3
 8013e16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013e1a:	d807      	bhi.n	8013e2c <_printf_i+0x28>
 8013e1c:	2f62      	cmp	r7, #98	; 0x62
 8013e1e:	d80a      	bhi.n	8013e36 <_printf_i+0x32>
 8013e20:	2f00      	cmp	r7, #0
 8013e22:	f000 80d8 	beq.w	8013fd6 <_printf_i+0x1d2>
 8013e26:	2f58      	cmp	r7, #88	; 0x58
 8013e28:	f000 80a3 	beq.w	8013f72 <_printf_i+0x16e>
 8013e2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013e30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013e34:	e03a      	b.n	8013eac <_printf_i+0xa8>
 8013e36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013e3a:	2b15      	cmp	r3, #21
 8013e3c:	d8f6      	bhi.n	8013e2c <_printf_i+0x28>
 8013e3e:	a101      	add	r1, pc, #4	; (adr r1, 8013e44 <_printf_i+0x40>)
 8013e40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013e44:	08013e9d 	.word	0x08013e9d
 8013e48:	08013eb1 	.word	0x08013eb1
 8013e4c:	08013e2d 	.word	0x08013e2d
 8013e50:	08013e2d 	.word	0x08013e2d
 8013e54:	08013e2d 	.word	0x08013e2d
 8013e58:	08013e2d 	.word	0x08013e2d
 8013e5c:	08013eb1 	.word	0x08013eb1
 8013e60:	08013e2d 	.word	0x08013e2d
 8013e64:	08013e2d 	.word	0x08013e2d
 8013e68:	08013e2d 	.word	0x08013e2d
 8013e6c:	08013e2d 	.word	0x08013e2d
 8013e70:	08013fbd 	.word	0x08013fbd
 8013e74:	08013ee1 	.word	0x08013ee1
 8013e78:	08013f9f 	.word	0x08013f9f
 8013e7c:	08013e2d 	.word	0x08013e2d
 8013e80:	08013e2d 	.word	0x08013e2d
 8013e84:	08013fdf 	.word	0x08013fdf
 8013e88:	08013e2d 	.word	0x08013e2d
 8013e8c:	08013ee1 	.word	0x08013ee1
 8013e90:	08013e2d 	.word	0x08013e2d
 8013e94:	08013e2d 	.word	0x08013e2d
 8013e98:	08013fa7 	.word	0x08013fa7
 8013e9c:	682b      	ldr	r3, [r5, #0]
 8013e9e:	1d1a      	adds	r2, r3, #4
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	602a      	str	r2, [r5, #0]
 8013ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013ea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013eac:	2301      	movs	r3, #1
 8013eae:	e0a3      	b.n	8013ff8 <_printf_i+0x1f4>
 8013eb0:	6820      	ldr	r0, [r4, #0]
 8013eb2:	6829      	ldr	r1, [r5, #0]
 8013eb4:	0606      	lsls	r6, r0, #24
 8013eb6:	f101 0304 	add.w	r3, r1, #4
 8013eba:	d50a      	bpl.n	8013ed2 <_printf_i+0xce>
 8013ebc:	680e      	ldr	r6, [r1, #0]
 8013ebe:	602b      	str	r3, [r5, #0]
 8013ec0:	2e00      	cmp	r6, #0
 8013ec2:	da03      	bge.n	8013ecc <_printf_i+0xc8>
 8013ec4:	232d      	movs	r3, #45	; 0x2d
 8013ec6:	4276      	negs	r6, r6
 8013ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ecc:	485e      	ldr	r0, [pc, #376]	; (8014048 <_printf_i+0x244>)
 8013ece:	230a      	movs	r3, #10
 8013ed0:	e019      	b.n	8013f06 <_printf_i+0x102>
 8013ed2:	680e      	ldr	r6, [r1, #0]
 8013ed4:	602b      	str	r3, [r5, #0]
 8013ed6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013eda:	bf18      	it	ne
 8013edc:	b236      	sxthne	r6, r6
 8013ede:	e7ef      	b.n	8013ec0 <_printf_i+0xbc>
 8013ee0:	682b      	ldr	r3, [r5, #0]
 8013ee2:	6820      	ldr	r0, [r4, #0]
 8013ee4:	1d19      	adds	r1, r3, #4
 8013ee6:	6029      	str	r1, [r5, #0]
 8013ee8:	0601      	lsls	r1, r0, #24
 8013eea:	d501      	bpl.n	8013ef0 <_printf_i+0xec>
 8013eec:	681e      	ldr	r6, [r3, #0]
 8013eee:	e002      	b.n	8013ef6 <_printf_i+0xf2>
 8013ef0:	0646      	lsls	r6, r0, #25
 8013ef2:	d5fb      	bpl.n	8013eec <_printf_i+0xe8>
 8013ef4:	881e      	ldrh	r6, [r3, #0]
 8013ef6:	4854      	ldr	r0, [pc, #336]	; (8014048 <_printf_i+0x244>)
 8013ef8:	2f6f      	cmp	r7, #111	; 0x6f
 8013efa:	bf0c      	ite	eq
 8013efc:	2308      	moveq	r3, #8
 8013efe:	230a      	movne	r3, #10
 8013f00:	2100      	movs	r1, #0
 8013f02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013f06:	6865      	ldr	r5, [r4, #4]
 8013f08:	60a5      	str	r5, [r4, #8]
 8013f0a:	2d00      	cmp	r5, #0
 8013f0c:	bfa2      	ittt	ge
 8013f0e:	6821      	ldrge	r1, [r4, #0]
 8013f10:	f021 0104 	bicge.w	r1, r1, #4
 8013f14:	6021      	strge	r1, [r4, #0]
 8013f16:	b90e      	cbnz	r6, 8013f1c <_printf_i+0x118>
 8013f18:	2d00      	cmp	r5, #0
 8013f1a:	d04d      	beq.n	8013fb8 <_printf_i+0x1b4>
 8013f1c:	4615      	mov	r5, r2
 8013f1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8013f22:	fb03 6711 	mls	r7, r3, r1, r6
 8013f26:	5dc7      	ldrb	r7, [r0, r7]
 8013f28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013f2c:	4637      	mov	r7, r6
 8013f2e:	42bb      	cmp	r3, r7
 8013f30:	460e      	mov	r6, r1
 8013f32:	d9f4      	bls.n	8013f1e <_printf_i+0x11a>
 8013f34:	2b08      	cmp	r3, #8
 8013f36:	d10b      	bne.n	8013f50 <_printf_i+0x14c>
 8013f38:	6823      	ldr	r3, [r4, #0]
 8013f3a:	07de      	lsls	r6, r3, #31
 8013f3c:	d508      	bpl.n	8013f50 <_printf_i+0x14c>
 8013f3e:	6923      	ldr	r3, [r4, #16]
 8013f40:	6861      	ldr	r1, [r4, #4]
 8013f42:	4299      	cmp	r1, r3
 8013f44:	bfde      	ittt	le
 8013f46:	2330      	movle	r3, #48	; 0x30
 8013f48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013f4c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013f50:	1b52      	subs	r2, r2, r5
 8013f52:	6122      	str	r2, [r4, #16]
 8013f54:	f8cd a000 	str.w	sl, [sp]
 8013f58:	464b      	mov	r3, r9
 8013f5a:	aa03      	add	r2, sp, #12
 8013f5c:	4621      	mov	r1, r4
 8013f5e:	4640      	mov	r0, r8
 8013f60:	f7ff fee2 	bl	8013d28 <_printf_common>
 8013f64:	3001      	adds	r0, #1
 8013f66:	d14c      	bne.n	8014002 <_printf_i+0x1fe>
 8013f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f6c:	b004      	add	sp, #16
 8013f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f72:	4835      	ldr	r0, [pc, #212]	; (8014048 <_printf_i+0x244>)
 8013f74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013f78:	6829      	ldr	r1, [r5, #0]
 8013f7a:	6823      	ldr	r3, [r4, #0]
 8013f7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8013f80:	6029      	str	r1, [r5, #0]
 8013f82:	061d      	lsls	r5, r3, #24
 8013f84:	d514      	bpl.n	8013fb0 <_printf_i+0x1ac>
 8013f86:	07df      	lsls	r7, r3, #31
 8013f88:	bf44      	itt	mi
 8013f8a:	f043 0320 	orrmi.w	r3, r3, #32
 8013f8e:	6023      	strmi	r3, [r4, #0]
 8013f90:	b91e      	cbnz	r6, 8013f9a <_printf_i+0x196>
 8013f92:	6823      	ldr	r3, [r4, #0]
 8013f94:	f023 0320 	bic.w	r3, r3, #32
 8013f98:	6023      	str	r3, [r4, #0]
 8013f9a:	2310      	movs	r3, #16
 8013f9c:	e7b0      	b.n	8013f00 <_printf_i+0xfc>
 8013f9e:	6823      	ldr	r3, [r4, #0]
 8013fa0:	f043 0320 	orr.w	r3, r3, #32
 8013fa4:	6023      	str	r3, [r4, #0]
 8013fa6:	2378      	movs	r3, #120	; 0x78
 8013fa8:	4828      	ldr	r0, [pc, #160]	; (801404c <_printf_i+0x248>)
 8013faa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013fae:	e7e3      	b.n	8013f78 <_printf_i+0x174>
 8013fb0:	0659      	lsls	r1, r3, #25
 8013fb2:	bf48      	it	mi
 8013fb4:	b2b6      	uxthmi	r6, r6
 8013fb6:	e7e6      	b.n	8013f86 <_printf_i+0x182>
 8013fb8:	4615      	mov	r5, r2
 8013fba:	e7bb      	b.n	8013f34 <_printf_i+0x130>
 8013fbc:	682b      	ldr	r3, [r5, #0]
 8013fbe:	6826      	ldr	r6, [r4, #0]
 8013fc0:	6961      	ldr	r1, [r4, #20]
 8013fc2:	1d18      	adds	r0, r3, #4
 8013fc4:	6028      	str	r0, [r5, #0]
 8013fc6:	0635      	lsls	r5, r6, #24
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	d501      	bpl.n	8013fd0 <_printf_i+0x1cc>
 8013fcc:	6019      	str	r1, [r3, #0]
 8013fce:	e002      	b.n	8013fd6 <_printf_i+0x1d2>
 8013fd0:	0670      	lsls	r0, r6, #25
 8013fd2:	d5fb      	bpl.n	8013fcc <_printf_i+0x1c8>
 8013fd4:	8019      	strh	r1, [r3, #0]
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	6123      	str	r3, [r4, #16]
 8013fda:	4615      	mov	r5, r2
 8013fdc:	e7ba      	b.n	8013f54 <_printf_i+0x150>
 8013fde:	682b      	ldr	r3, [r5, #0]
 8013fe0:	1d1a      	adds	r2, r3, #4
 8013fe2:	602a      	str	r2, [r5, #0]
 8013fe4:	681d      	ldr	r5, [r3, #0]
 8013fe6:	6862      	ldr	r2, [r4, #4]
 8013fe8:	2100      	movs	r1, #0
 8013fea:	4628      	mov	r0, r5
 8013fec:	f7ec f8f8 	bl	80001e0 <memchr>
 8013ff0:	b108      	cbz	r0, 8013ff6 <_printf_i+0x1f2>
 8013ff2:	1b40      	subs	r0, r0, r5
 8013ff4:	6060      	str	r0, [r4, #4]
 8013ff6:	6863      	ldr	r3, [r4, #4]
 8013ff8:	6123      	str	r3, [r4, #16]
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014000:	e7a8      	b.n	8013f54 <_printf_i+0x150>
 8014002:	6923      	ldr	r3, [r4, #16]
 8014004:	462a      	mov	r2, r5
 8014006:	4649      	mov	r1, r9
 8014008:	4640      	mov	r0, r8
 801400a:	47d0      	blx	sl
 801400c:	3001      	adds	r0, #1
 801400e:	d0ab      	beq.n	8013f68 <_printf_i+0x164>
 8014010:	6823      	ldr	r3, [r4, #0]
 8014012:	079b      	lsls	r3, r3, #30
 8014014:	d413      	bmi.n	801403e <_printf_i+0x23a>
 8014016:	68e0      	ldr	r0, [r4, #12]
 8014018:	9b03      	ldr	r3, [sp, #12]
 801401a:	4298      	cmp	r0, r3
 801401c:	bfb8      	it	lt
 801401e:	4618      	movlt	r0, r3
 8014020:	e7a4      	b.n	8013f6c <_printf_i+0x168>
 8014022:	2301      	movs	r3, #1
 8014024:	4632      	mov	r2, r6
 8014026:	4649      	mov	r1, r9
 8014028:	4640      	mov	r0, r8
 801402a:	47d0      	blx	sl
 801402c:	3001      	adds	r0, #1
 801402e:	d09b      	beq.n	8013f68 <_printf_i+0x164>
 8014030:	3501      	adds	r5, #1
 8014032:	68e3      	ldr	r3, [r4, #12]
 8014034:	9903      	ldr	r1, [sp, #12]
 8014036:	1a5b      	subs	r3, r3, r1
 8014038:	42ab      	cmp	r3, r5
 801403a:	dcf2      	bgt.n	8014022 <_printf_i+0x21e>
 801403c:	e7eb      	b.n	8014016 <_printf_i+0x212>
 801403e:	2500      	movs	r5, #0
 8014040:	f104 0619 	add.w	r6, r4, #25
 8014044:	e7f5      	b.n	8014032 <_printf_i+0x22e>
 8014046:	bf00      	nop
 8014048:	080195b2 	.word	0x080195b2
 801404c:	080195c3 	.word	0x080195c3

08014050 <cleanup_glue>:
 8014050:	b538      	push	{r3, r4, r5, lr}
 8014052:	460c      	mov	r4, r1
 8014054:	6809      	ldr	r1, [r1, #0]
 8014056:	4605      	mov	r5, r0
 8014058:	b109      	cbz	r1, 801405e <cleanup_glue+0xe>
 801405a:	f7ff fff9 	bl	8014050 <cleanup_glue>
 801405e:	4621      	mov	r1, r4
 8014060:	4628      	mov	r0, r5
 8014062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014066:	f7ff baa9 	b.w	80135bc <_free_r>
	...

0801406c <_reclaim_reent>:
 801406c:	4b2c      	ldr	r3, [pc, #176]	; (8014120 <_reclaim_reent+0xb4>)
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	4283      	cmp	r3, r0
 8014072:	b570      	push	{r4, r5, r6, lr}
 8014074:	4604      	mov	r4, r0
 8014076:	d051      	beq.n	801411c <_reclaim_reent+0xb0>
 8014078:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801407a:	b143      	cbz	r3, 801408e <_reclaim_reent+0x22>
 801407c:	68db      	ldr	r3, [r3, #12]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d14a      	bne.n	8014118 <_reclaim_reent+0xac>
 8014082:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014084:	6819      	ldr	r1, [r3, #0]
 8014086:	b111      	cbz	r1, 801408e <_reclaim_reent+0x22>
 8014088:	4620      	mov	r0, r4
 801408a:	f7ff fa97 	bl	80135bc <_free_r>
 801408e:	6961      	ldr	r1, [r4, #20]
 8014090:	b111      	cbz	r1, 8014098 <_reclaim_reent+0x2c>
 8014092:	4620      	mov	r0, r4
 8014094:	f7ff fa92 	bl	80135bc <_free_r>
 8014098:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801409a:	b111      	cbz	r1, 80140a2 <_reclaim_reent+0x36>
 801409c:	4620      	mov	r0, r4
 801409e:	f7ff fa8d 	bl	80135bc <_free_r>
 80140a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80140a4:	b111      	cbz	r1, 80140ac <_reclaim_reent+0x40>
 80140a6:	4620      	mov	r0, r4
 80140a8:	f7ff fa88 	bl	80135bc <_free_r>
 80140ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80140ae:	b111      	cbz	r1, 80140b6 <_reclaim_reent+0x4a>
 80140b0:	4620      	mov	r0, r4
 80140b2:	f7ff fa83 	bl	80135bc <_free_r>
 80140b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80140b8:	b111      	cbz	r1, 80140c0 <_reclaim_reent+0x54>
 80140ba:	4620      	mov	r0, r4
 80140bc:	f7ff fa7e 	bl	80135bc <_free_r>
 80140c0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80140c2:	b111      	cbz	r1, 80140ca <_reclaim_reent+0x5e>
 80140c4:	4620      	mov	r0, r4
 80140c6:	f7ff fa79 	bl	80135bc <_free_r>
 80140ca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80140cc:	b111      	cbz	r1, 80140d4 <_reclaim_reent+0x68>
 80140ce:	4620      	mov	r0, r4
 80140d0:	f7ff fa74 	bl	80135bc <_free_r>
 80140d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80140d6:	b111      	cbz	r1, 80140de <_reclaim_reent+0x72>
 80140d8:	4620      	mov	r0, r4
 80140da:	f7ff fa6f 	bl	80135bc <_free_r>
 80140de:	69a3      	ldr	r3, [r4, #24]
 80140e0:	b1e3      	cbz	r3, 801411c <_reclaim_reent+0xb0>
 80140e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80140e4:	4620      	mov	r0, r4
 80140e6:	4798      	blx	r3
 80140e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80140ea:	b1b9      	cbz	r1, 801411c <_reclaim_reent+0xb0>
 80140ec:	4620      	mov	r0, r4
 80140ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140f2:	f7ff bfad 	b.w	8014050 <cleanup_glue>
 80140f6:	5949      	ldr	r1, [r1, r5]
 80140f8:	b941      	cbnz	r1, 801410c <_reclaim_reent+0xa0>
 80140fa:	3504      	adds	r5, #4
 80140fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80140fe:	2d80      	cmp	r5, #128	; 0x80
 8014100:	68d9      	ldr	r1, [r3, #12]
 8014102:	d1f8      	bne.n	80140f6 <_reclaim_reent+0x8a>
 8014104:	4620      	mov	r0, r4
 8014106:	f7ff fa59 	bl	80135bc <_free_r>
 801410a:	e7ba      	b.n	8014082 <_reclaim_reent+0x16>
 801410c:	680e      	ldr	r6, [r1, #0]
 801410e:	4620      	mov	r0, r4
 8014110:	f7ff fa54 	bl	80135bc <_free_r>
 8014114:	4631      	mov	r1, r6
 8014116:	e7ef      	b.n	80140f8 <_reclaim_reent+0x8c>
 8014118:	2500      	movs	r5, #0
 801411a:	e7ef      	b.n	80140fc <_reclaim_reent+0x90>
 801411c:	bd70      	pop	{r4, r5, r6, pc}
 801411e:	bf00      	nop
 8014120:	2000018c 	.word	0x2000018c

08014124 <_sbrk_r>:
 8014124:	b538      	push	{r3, r4, r5, lr}
 8014126:	4d06      	ldr	r5, [pc, #24]	; (8014140 <_sbrk_r+0x1c>)
 8014128:	2300      	movs	r3, #0
 801412a:	4604      	mov	r4, r0
 801412c:	4608      	mov	r0, r1
 801412e:	602b      	str	r3, [r5, #0]
 8014130:	f7f2 fe82 	bl	8006e38 <_sbrk>
 8014134:	1c43      	adds	r3, r0, #1
 8014136:	d102      	bne.n	801413e <_sbrk_r+0x1a>
 8014138:	682b      	ldr	r3, [r5, #0]
 801413a:	b103      	cbz	r3, 801413e <_sbrk_r+0x1a>
 801413c:	6023      	str	r3, [r4, #0]
 801413e:	bd38      	pop	{r3, r4, r5, pc}
 8014140:	200085e4 	.word	0x200085e4

08014144 <siprintf>:
 8014144:	b40e      	push	{r1, r2, r3}
 8014146:	b500      	push	{lr}
 8014148:	b09c      	sub	sp, #112	; 0x70
 801414a:	ab1d      	add	r3, sp, #116	; 0x74
 801414c:	9002      	str	r0, [sp, #8]
 801414e:	9006      	str	r0, [sp, #24]
 8014150:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014154:	4809      	ldr	r0, [pc, #36]	; (801417c <siprintf+0x38>)
 8014156:	9107      	str	r1, [sp, #28]
 8014158:	9104      	str	r1, [sp, #16]
 801415a:	4909      	ldr	r1, [pc, #36]	; (8014180 <siprintf+0x3c>)
 801415c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014160:	9105      	str	r1, [sp, #20]
 8014162:	6800      	ldr	r0, [r0, #0]
 8014164:	9301      	str	r3, [sp, #4]
 8014166:	a902      	add	r1, sp, #8
 8014168:	f002 ffb6 	bl	80170d8 <_svfiprintf_r>
 801416c:	9b02      	ldr	r3, [sp, #8]
 801416e:	2200      	movs	r2, #0
 8014170:	701a      	strb	r2, [r3, #0]
 8014172:	b01c      	add	sp, #112	; 0x70
 8014174:	f85d eb04 	ldr.w	lr, [sp], #4
 8014178:	b003      	add	sp, #12
 801417a:	4770      	bx	lr
 801417c:	2000018c 	.word	0x2000018c
 8014180:	ffff0208 	.word	0xffff0208

08014184 <__sread>:
 8014184:	b510      	push	{r4, lr}
 8014186:	460c      	mov	r4, r1
 8014188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801418c:	f003 f8a4 	bl	80172d8 <_read_r>
 8014190:	2800      	cmp	r0, #0
 8014192:	bfab      	itete	ge
 8014194:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014196:	89a3      	ldrhlt	r3, [r4, #12]
 8014198:	181b      	addge	r3, r3, r0
 801419a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801419e:	bfac      	ite	ge
 80141a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80141a2:	81a3      	strhlt	r3, [r4, #12]
 80141a4:	bd10      	pop	{r4, pc}

080141a6 <__swrite>:
 80141a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141aa:	461f      	mov	r7, r3
 80141ac:	898b      	ldrh	r3, [r1, #12]
 80141ae:	05db      	lsls	r3, r3, #23
 80141b0:	4605      	mov	r5, r0
 80141b2:	460c      	mov	r4, r1
 80141b4:	4616      	mov	r6, r2
 80141b6:	d505      	bpl.n	80141c4 <__swrite+0x1e>
 80141b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141bc:	2302      	movs	r3, #2
 80141be:	2200      	movs	r2, #0
 80141c0:	f002 fa3e 	bl	8016640 <_lseek_r>
 80141c4:	89a3      	ldrh	r3, [r4, #12]
 80141c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80141ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80141ce:	81a3      	strh	r3, [r4, #12]
 80141d0:	4632      	mov	r2, r6
 80141d2:	463b      	mov	r3, r7
 80141d4:	4628      	mov	r0, r5
 80141d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80141da:	f000 bf5d 	b.w	8015098 <_write_r>

080141de <__sseek>:
 80141de:	b510      	push	{r4, lr}
 80141e0:	460c      	mov	r4, r1
 80141e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141e6:	f002 fa2b 	bl	8016640 <_lseek_r>
 80141ea:	1c43      	adds	r3, r0, #1
 80141ec:	89a3      	ldrh	r3, [r4, #12]
 80141ee:	bf15      	itete	ne
 80141f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80141f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80141f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80141fa:	81a3      	strheq	r3, [r4, #12]
 80141fc:	bf18      	it	ne
 80141fe:	81a3      	strhne	r3, [r4, #12]
 8014200:	bd10      	pop	{r4, pc}

08014202 <__sclose>:
 8014202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014206:	f000 bf59 	b.w	80150bc <_close_r>

0801420a <strchr>:
 801420a:	b2c9      	uxtb	r1, r1
 801420c:	4603      	mov	r3, r0
 801420e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014212:	b11a      	cbz	r2, 801421c <strchr+0x12>
 8014214:	428a      	cmp	r2, r1
 8014216:	d1f9      	bne.n	801420c <strchr+0x2>
 8014218:	4618      	mov	r0, r3
 801421a:	4770      	bx	lr
 801421c:	2900      	cmp	r1, #0
 801421e:	bf18      	it	ne
 8014220:	2300      	movne	r3, #0
 8014222:	e7f9      	b.n	8014218 <strchr+0xe>

08014224 <strcpy>:
 8014224:	4603      	mov	r3, r0
 8014226:	f811 2b01 	ldrb.w	r2, [r1], #1
 801422a:	f803 2b01 	strb.w	r2, [r3], #1
 801422e:	2a00      	cmp	r2, #0
 8014230:	d1f9      	bne.n	8014226 <strcpy+0x2>
 8014232:	4770      	bx	lr

08014234 <strncmp>:
 8014234:	b510      	push	{r4, lr}
 8014236:	b17a      	cbz	r2, 8014258 <strncmp+0x24>
 8014238:	4603      	mov	r3, r0
 801423a:	3901      	subs	r1, #1
 801423c:	1884      	adds	r4, r0, r2
 801423e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014242:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014246:	4290      	cmp	r0, r2
 8014248:	d101      	bne.n	801424e <strncmp+0x1a>
 801424a:	42a3      	cmp	r3, r4
 801424c:	d101      	bne.n	8014252 <strncmp+0x1e>
 801424e:	1a80      	subs	r0, r0, r2
 8014250:	bd10      	pop	{r4, pc}
 8014252:	2800      	cmp	r0, #0
 8014254:	d1f3      	bne.n	801423e <strncmp+0xa>
 8014256:	e7fa      	b.n	801424e <strncmp+0x1a>
 8014258:	4610      	mov	r0, r2
 801425a:	e7f9      	b.n	8014250 <strncmp+0x1c>

0801425c <strncpy>:
 801425c:	b510      	push	{r4, lr}
 801425e:	3901      	subs	r1, #1
 8014260:	4603      	mov	r3, r0
 8014262:	b132      	cbz	r2, 8014272 <strncpy+0x16>
 8014264:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014268:	f803 4b01 	strb.w	r4, [r3], #1
 801426c:	3a01      	subs	r2, #1
 801426e:	2c00      	cmp	r4, #0
 8014270:	d1f7      	bne.n	8014262 <strncpy+0x6>
 8014272:	441a      	add	r2, r3
 8014274:	2100      	movs	r1, #0
 8014276:	4293      	cmp	r3, r2
 8014278:	d100      	bne.n	801427c <strncpy+0x20>
 801427a:	bd10      	pop	{r4, pc}
 801427c:	f803 1b01 	strb.w	r1, [r3], #1
 8014280:	e7f9      	b.n	8014276 <strncpy+0x1a>

08014282 <strstr>:
 8014282:	780a      	ldrb	r2, [r1, #0]
 8014284:	b570      	push	{r4, r5, r6, lr}
 8014286:	b96a      	cbnz	r2, 80142a4 <strstr+0x22>
 8014288:	bd70      	pop	{r4, r5, r6, pc}
 801428a:	429a      	cmp	r2, r3
 801428c:	d109      	bne.n	80142a2 <strstr+0x20>
 801428e:	460c      	mov	r4, r1
 8014290:	4605      	mov	r5, r0
 8014292:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8014296:	2b00      	cmp	r3, #0
 8014298:	d0f6      	beq.n	8014288 <strstr+0x6>
 801429a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801429e:	429e      	cmp	r6, r3
 80142a0:	d0f7      	beq.n	8014292 <strstr+0x10>
 80142a2:	3001      	adds	r0, #1
 80142a4:	7803      	ldrb	r3, [r0, #0]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d1ef      	bne.n	801428a <strstr+0x8>
 80142aa:	4618      	mov	r0, r3
 80142ac:	e7ec      	b.n	8014288 <strstr+0x6>

080142ae <sulp>:
 80142ae:	b570      	push	{r4, r5, r6, lr}
 80142b0:	4604      	mov	r4, r0
 80142b2:	460d      	mov	r5, r1
 80142b4:	ec45 4b10 	vmov	d0, r4, r5
 80142b8:	4616      	mov	r6, r2
 80142ba:	f002 fd63 	bl	8016d84 <__ulp>
 80142be:	ec51 0b10 	vmov	r0, r1, d0
 80142c2:	b17e      	cbz	r6, 80142e4 <sulp+0x36>
 80142c4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80142c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	dd09      	ble.n	80142e4 <sulp+0x36>
 80142d0:	051b      	lsls	r3, r3, #20
 80142d2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80142d6:	2400      	movs	r4, #0
 80142d8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80142dc:	4622      	mov	r2, r4
 80142de:	462b      	mov	r3, r5
 80142e0:	f7ec f98a 	bl	80005f8 <__aeabi_dmul>
 80142e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080142e8 <_strtod_l>:
 80142e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142ec:	ed2d 8b02 	vpush	{d8}
 80142f0:	b09d      	sub	sp, #116	; 0x74
 80142f2:	461f      	mov	r7, r3
 80142f4:	2300      	movs	r3, #0
 80142f6:	9318      	str	r3, [sp, #96]	; 0x60
 80142f8:	4ba2      	ldr	r3, [pc, #648]	; (8014584 <_strtod_l+0x29c>)
 80142fa:	9213      	str	r2, [sp, #76]	; 0x4c
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	9305      	str	r3, [sp, #20]
 8014300:	4604      	mov	r4, r0
 8014302:	4618      	mov	r0, r3
 8014304:	4688      	mov	r8, r1
 8014306:	f7eb ff63 	bl	80001d0 <strlen>
 801430a:	f04f 0a00 	mov.w	sl, #0
 801430e:	4605      	mov	r5, r0
 8014310:	f04f 0b00 	mov.w	fp, #0
 8014314:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014318:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801431a:	781a      	ldrb	r2, [r3, #0]
 801431c:	2a2b      	cmp	r2, #43	; 0x2b
 801431e:	d04e      	beq.n	80143be <_strtod_l+0xd6>
 8014320:	d83b      	bhi.n	801439a <_strtod_l+0xb2>
 8014322:	2a0d      	cmp	r2, #13
 8014324:	d834      	bhi.n	8014390 <_strtod_l+0xa8>
 8014326:	2a08      	cmp	r2, #8
 8014328:	d834      	bhi.n	8014394 <_strtod_l+0xac>
 801432a:	2a00      	cmp	r2, #0
 801432c:	d03e      	beq.n	80143ac <_strtod_l+0xc4>
 801432e:	2300      	movs	r3, #0
 8014330:	930a      	str	r3, [sp, #40]	; 0x28
 8014332:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8014334:	7833      	ldrb	r3, [r6, #0]
 8014336:	2b30      	cmp	r3, #48	; 0x30
 8014338:	f040 80b0 	bne.w	801449c <_strtod_l+0x1b4>
 801433c:	7873      	ldrb	r3, [r6, #1]
 801433e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014342:	2b58      	cmp	r3, #88	; 0x58
 8014344:	d168      	bne.n	8014418 <_strtod_l+0x130>
 8014346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014348:	9301      	str	r3, [sp, #4]
 801434a:	ab18      	add	r3, sp, #96	; 0x60
 801434c:	9702      	str	r7, [sp, #8]
 801434e:	9300      	str	r3, [sp, #0]
 8014350:	4a8d      	ldr	r2, [pc, #564]	; (8014588 <_strtod_l+0x2a0>)
 8014352:	ab19      	add	r3, sp, #100	; 0x64
 8014354:	a917      	add	r1, sp, #92	; 0x5c
 8014356:	4620      	mov	r0, r4
 8014358:	f001 fe66 	bl	8016028 <__gethex>
 801435c:	f010 0707 	ands.w	r7, r0, #7
 8014360:	4605      	mov	r5, r0
 8014362:	d005      	beq.n	8014370 <_strtod_l+0x88>
 8014364:	2f06      	cmp	r7, #6
 8014366:	d12c      	bne.n	80143c2 <_strtod_l+0xda>
 8014368:	3601      	adds	r6, #1
 801436a:	2300      	movs	r3, #0
 801436c:	9617      	str	r6, [sp, #92]	; 0x5c
 801436e:	930a      	str	r3, [sp, #40]	; 0x28
 8014370:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014372:	2b00      	cmp	r3, #0
 8014374:	f040 8590 	bne.w	8014e98 <_strtod_l+0xbb0>
 8014378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801437a:	b1eb      	cbz	r3, 80143b8 <_strtod_l+0xd0>
 801437c:	4652      	mov	r2, sl
 801437e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014382:	ec43 2b10 	vmov	d0, r2, r3
 8014386:	b01d      	add	sp, #116	; 0x74
 8014388:	ecbd 8b02 	vpop	{d8}
 801438c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014390:	2a20      	cmp	r2, #32
 8014392:	d1cc      	bne.n	801432e <_strtod_l+0x46>
 8014394:	3301      	adds	r3, #1
 8014396:	9317      	str	r3, [sp, #92]	; 0x5c
 8014398:	e7be      	b.n	8014318 <_strtod_l+0x30>
 801439a:	2a2d      	cmp	r2, #45	; 0x2d
 801439c:	d1c7      	bne.n	801432e <_strtod_l+0x46>
 801439e:	2201      	movs	r2, #1
 80143a0:	920a      	str	r2, [sp, #40]	; 0x28
 80143a2:	1c5a      	adds	r2, r3, #1
 80143a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80143a6:	785b      	ldrb	r3, [r3, #1]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d1c2      	bne.n	8014332 <_strtod_l+0x4a>
 80143ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80143ae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	f040 856e 	bne.w	8014e94 <_strtod_l+0xbac>
 80143b8:	4652      	mov	r2, sl
 80143ba:	465b      	mov	r3, fp
 80143bc:	e7e1      	b.n	8014382 <_strtod_l+0x9a>
 80143be:	2200      	movs	r2, #0
 80143c0:	e7ee      	b.n	80143a0 <_strtod_l+0xb8>
 80143c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80143c4:	b13a      	cbz	r2, 80143d6 <_strtod_l+0xee>
 80143c6:	2135      	movs	r1, #53	; 0x35
 80143c8:	a81a      	add	r0, sp, #104	; 0x68
 80143ca:	f002 fde6 	bl	8016f9a <__copybits>
 80143ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80143d0:	4620      	mov	r0, r4
 80143d2:	f002 f9a5 	bl	8016720 <_Bfree>
 80143d6:	3f01      	subs	r7, #1
 80143d8:	2f04      	cmp	r7, #4
 80143da:	d806      	bhi.n	80143ea <_strtod_l+0x102>
 80143dc:	e8df f007 	tbb	[pc, r7]
 80143e0:	1714030a 	.word	0x1714030a
 80143e4:	0a          	.byte	0x0a
 80143e5:	00          	.byte	0x00
 80143e6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80143ea:	0728      	lsls	r0, r5, #28
 80143ec:	d5c0      	bpl.n	8014370 <_strtod_l+0x88>
 80143ee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80143f2:	e7bd      	b.n	8014370 <_strtod_l+0x88>
 80143f4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80143f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80143fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80143fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014402:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014406:	e7f0      	b.n	80143ea <_strtod_l+0x102>
 8014408:	f8df b180 	ldr.w	fp, [pc, #384]	; 801458c <_strtod_l+0x2a4>
 801440c:	e7ed      	b.n	80143ea <_strtod_l+0x102>
 801440e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8014412:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8014416:	e7e8      	b.n	80143ea <_strtod_l+0x102>
 8014418:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801441a:	1c5a      	adds	r2, r3, #1
 801441c:	9217      	str	r2, [sp, #92]	; 0x5c
 801441e:	785b      	ldrb	r3, [r3, #1]
 8014420:	2b30      	cmp	r3, #48	; 0x30
 8014422:	d0f9      	beq.n	8014418 <_strtod_l+0x130>
 8014424:	2b00      	cmp	r3, #0
 8014426:	d0a3      	beq.n	8014370 <_strtod_l+0x88>
 8014428:	2301      	movs	r3, #1
 801442a:	f04f 0900 	mov.w	r9, #0
 801442e:	9304      	str	r3, [sp, #16]
 8014430:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014432:	9308      	str	r3, [sp, #32]
 8014434:	f8cd 901c 	str.w	r9, [sp, #28]
 8014438:	464f      	mov	r7, r9
 801443a:	220a      	movs	r2, #10
 801443c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801443e:	7806      	ldrb	r6, [r0, #0]
 8014440:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014444:	b2d9      	uxtb	r1, r3
 8014446:	2909      	cmp	r1, #9
 8014448:	d92a      	bls.n	80144a0 <_strtod_l+0x1b8>
 801444a:	9905      	ldr	r1, [sp, #20]
 801444c:	462a      	mov	r2, r5
 801444e:	f7ff fef1 	bl	8014234 <strncmp>
 8014452:	b398      	cbz	r0, 80144bc <_strtod_l+0x1d4>
 8014454:	2000      	movs	r0, #0
 8014456:	4632      	mov	r2, r6
 8014458:	463d      	mov	r5, r7
 801445a:	9005      	str	r0, [sp, #20]
 801445c:	4603      	mov	r3, r0
 801445e:	2a65      	cmp	r2, #101	; 0x65
 8014460:	d001      	beq.n	8014466 <_strtod_l+0x17e>
 8014462:	2a45      	cmp	r2, #69	; 0x45
 8014464:	d118      	bne.n	8014498 <_strtod_l+0x1b0>
 8014466:	b91d      	cbnz	r5, 8014470 <_strtod_l+0x188>
 8014468:	9a04      	ldr	r2, [sp, #16]
 801446a:	4302      	orrs	r2, r0
 801446c:	d09e      	beq.n	80143ac <_strtod_l+0xc4>
 801446e:	2500      	movs	r5, #0
 8014470:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8014474:	f108 0201 	add.w	r2, r8, #1
 8014478:	9217      	str	r2, [sp, #92]	; 0x5c
 801447a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801447e:	2a2b      	cmp	r2, #43	; 0x2b
 8014480:	d075      	beq.n	801456e <_strtod_l+0x286>
 8014482:	2a2d      	cmp	r2, #45	; 0x2d
 8014484:	d07b      	beq.n	801457e <_strtod_l+0x296>
 8014486:	f04f 0c00 	mov.w	ip, #0
 801448a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801448e:	2909      	cmp	r1, #9
 8014490:	f240 8082 	bls.w	8014598 <_strtod_l+0x2b0>
 8014494:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014498:	2600      	movs	r6, #0
 801449a:	e09d      	b.n	80145d8 <_strtod_l+0x2f0>
 801449c:	2300      	movs	r3, #0
 801449e:	e7c4      	b.n	801442a <_strtod_l+0x142>
 80144a0:	2f08      	cmp	r7, #8
 80144a2:	bfd8      	it	le
 80144a4:	9907      	ldrle	r1, [sp, #28]
 80144a6:	f100 0001 	add.w	r0, r0, #1
 80144aa:	bfda      	itte	le
 80144ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80144b0:	9307      	strle	r3, [sp, #28]
 80144b2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80144b6:	3701      	adds	r7, #1
 80144b8:	9017      	str	r0, [sp, #92]	; 0x5c
 80144ba:	e7bf      	b.n	801443c <_strtod_l+0x154>
 80144bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80144be:	195a      	adds	r2, r3, r5
 80144c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80144c2:	5d5a      	ldrb	r2, [r3, r5]
 80144c4:	2f00      	cmp	r7, #0
 80144c6:	d037      	beq.n	8014538 <_strtod_l+0x250>
 80144c8:	9005      	str	r0, [sp, #20]
 80144ca:	463d      	mov	r5, r7
 80144cc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80144d0:	2b09      	cmp	r3, #9
 80144d2:	d912      	bls.n	80144fa <_strtod_l+0x212>
 80144d4:	2301      	movs	r3, #1
 80144d6:	e7c2      	b.n	801445e <_strtod_l+0x176>
 80144d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80144da:	1c5a      	adds	r2, r3, #1
 80144dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80144de:	785a      	ldrb	r2, [r3, #1]
 80144e0:	3001      	adds	r0, #1
 80144e2:	2a30      	cmp	r2, #48	; 0x30
 80144e4:	d0f8      	beq.n	80144d8 <_strtod_l+0x1f0>
 80144e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80144ea:	2b08      	cmp	r3, #8
 80144ec:	f200 84d9 	bhi.w	8014ea2 <_strtod_l+0xbba>
 80144f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80144f2:	9005      	str	r0, [sp, #20]
 80144f4:	2000      	movs	r0, #0
 80144f6:	9308      	str	r3, [sp, #32]
 80144f8:	4605      	mov	r5, r0
 80144fa:	3a30      	subs	r2, #48	; 0x30
 80144fc:	f100 0301 	add.w	r3, r0, #1
 8014500:	d014      	beq.n	801452c <_strtod_l+0x244>
 8014502:	9905      	ldr	r1, [sp, #20]
 8014504:	4419      	add	r1, r3
 8014506:	9105      	str	r1, [sp, #20]
 8014508:	462b      	mov	r3, r5
 801450a:	eb00 0e05 	add.w	lr, r0, r5
 801450e:	210a      	movs	r1, #10
 8014510:	4573      	cmp	r3, lr
 8014512:	d113      	bne.n	801453c <_strtod_l+0x254>
 8014514:	182b      	adds	r3, r5, r0
 8014516:	2b08      	cmp	r3, #8
 8014518:	f105 0501 	add.w	r5, r5, #1
 801451c:	4405      	add	r5, r0
 801451e:	dc1c      	bgt.n	801455a <_strtod_l+0x272>
 8014520:	9907      	ldr	r1, [sp, #28]
 8014522:	230a      	movs	r3, #10
 8014524:	fb03 2301 	mla	r3, r3, r1, r2
 8014528:	9307      	str	r3, [sp, #28]
 801452a:	2300      	movs	r3, #0
 801452c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801452e:	1c51      	adds	r1, r2, #1
 8014530:	9117      	str	r1, [sp, #92]	; 0x5c
 8014532:	7852      	ldrb	r2, [r2, #1]
 8014534:	4618      	mov	r0, r3
 8014536:	e7c9      	b.n	80144cc <_strtod_l+0x1e4>
 8014538:	4638      	mov	r0, r7
 801453a:	e7d2      	b.n	80144e2 <_strtod_l+0x1fa>
 801453c:	2b08      	cmp	r3, #8
 801453e:	dc04      	bgt.n	801454a <_strtod_l+0x262>
 8014540:	9e07      	ldr	r6, [sp, #28]
 8014542:	434e      	muls	r6, r1
 8014544:	9607      	str	r6, [sp, #28]
 8014546:	3301      	adds	r3, #1
 8014548:	e7e2      	b.n	8014510 <_strtod_l+0x228>
 801454a:	f103 0c01 	add.w	ip, r3, #1
 801454e:	f1bc 0f10 	cmp.w	ip, #16
 8014552:	bfd8      	it	le
 8014554:	fb01 f909 	mulle.w	r9, r1, r9
 8014558:	e7f5      	b.n	8014546 <_strtod_l+0x25e>
 801455a:	2d10      	cmp	r5, #16
 801455c:	bfdc      	itt	le
 801455e:	230a      	movle	r3, #10
 8014560:	fb03 2909 	mlale	r9, r3, r9, r2
 8014564:	e7e1      	b.n	801452a <_strtod_l+0x242>
 8014566:	2300      	movs	r3, #0
 8014568:	9305      	str	r3, [sp, #20]
 801456a:	2301      	movs	r3, #1
 801456c:	e77c      	b.n	8014468 <_strtod_l+0x180>
 801456e:	f04f 0c00 	mov.w	ip, #0
 8014572:	f108 0202 	add.w	r2, r8, #2
 8014576:	9217      	str	r2, [sp, #92]	; 0x5c
 8014578:	f898 2002 	ldrb.w	r2, [r8, #2]
 801457c:	e785      	b.n	801448a <_strtod_l+0x1a2>
 801457e:	f04f 0c01 	mov.w	ip, #1
 8014582:	e7f6      	b.n	8014572 <_strtod_l+0x28a>
 8014584:	08019720 	.word	0x08019720
 8014588:	080195d4 	.word	0x080195d4
 801458c:	7ff00000 	.word	0x7ff00000
 8014590:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014592:	1c51      	adds	r1, r2, #1
 8014594:	9117      	str	r1, [sp, #92]	; 0x5c
 8014596:	7852      	ldrb	r2, [r2, #1]
 8014598:	2a30      	cmp	r2, #48	; 0x30
 801459a:	d0f9      	beq.n	8014590 <_strtod_l+0x2a8>
 801459c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80145a0:	2908      	cmp	r1, #8
 80145a2:	f63f af79 	bhi.w	8014498 <_strtod_l+0x1b0>
 80145a6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80145aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80145ac:	9206      	str	r2, [sp, #24]
 80145ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80145b0:	1c51      	adds	r1, r2, #1
 80145b2:	9117      	str	r1, [sp, #92]	; 0x5c
 80145b4:	7852      	ldrb	r2, [r2, #1]
 80145b6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80145ba:	2e09      	cmp	r6, #9
 80145bc:	d937      	bls.n	801462e <_strtod_l+0x346>
 80145be:	9e06      	ldr	r6, [sp, #24]
 80145c0:	1b89      	subs	r1, r1, r6
 80145c2:	2908      	cmp	r1, #8
 80145c4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80145c8:	dc02      	bgt.n	80145d0 <_strtod_l+0x2e8>
 80145ca:	4576      	cmp	r6, lr
 80145cc:	bfa8      	it	ge
 80145ce:	4676      	movge	r6, lr
 80145d0:	f1bc 0f00 	cmp.w	ip, #0
 80145d4:	d000      	beq.n	80145d8 <_strtod_l+0x2f0>
 80145d6:	4276      	negs	r6, r6
 80145d8:	2d00      	cmp	r5, #0
 80145da:	d14d      	bne.n	8014678 <_strtod_l+0x390>
 80145dc:	9904      	ldr	r1, [sp, #16]
 80145de:	4301      	orrs	r1, r0
 80145e0:	f47f aec6 	bne.w	8014370 <_strtod_l+0x88>
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	f47f aee1 	bne.w	80143ac <_strtod_l+0xc4>
 80145ea:	2a69      	cmp	r2, #105	; 0x69
 80145ec:	d027      	beq.n	801463e <_strtod_l+0x356>
 80145ee:	dc24      	bgt.n	801463a <_strtod_l+0x352>
 80145f0:	2a49      	cmp	r2, #73	; 0x49
 80145f2:	d024      	beq.n	801463e <_strtod_l+0x356>
 80145f4:	2a4e      	cmp	r2, #78	; 0x4e
 80145f6:	f47f aed9 	bne.w	80143ac <_strtod_l+0xc4>
 80145fa:	499f      	ldr	r1, [pc, #636]	; (8014878 <_strtod_l+0x590>)
 80145fc:	a817      	add	r0, sp, #92	; 0x5c
 80145fe:	f001 ff6b 	bl	80164d8 <__match>
 8014602:	2800      	cmp	r0, #0
 8014604:	f43f aed2 	beq.w	80143ac <_strtod_l+0xc4>
 8014608:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801460a:	781b      	ldrb	r3, [r3, #0]
 801460c:	2b28      	cmp	r3, #40	; 0x28
 801460e:	d12d      	bne.n	801466c <_strtod_l+0x384>
 8014610:	499a      	ldr	r1, [pc, #616]	; (801487c <_strtod_l+0x594>)
 8014612:	aa1a      	add	r2, sp, #104	; 0x68
 8014614:	a817      	add	r0, sp, #92	; 0x5c
 8014616:	f001 ff73 	bl	8016500 <__hexnan>
 801461a:	2805      	cmp	r0, #5
 801461c:	d126      	bne.n	801466c <_strtod_l+0x384>
 801461e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014620:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8014624:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014628:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801462c:	e6a0      	b.n	8014370 <_strtod_l+0x88>
 801462e:	210a      	movs	r1, #10
 8014630:	fb01 2e0e 	mla	lr, r1, lr, r2
 8014634:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8014638:	e7b9      	b.n	80145ae <_strtod_l+0x2c6>
 801463a:	2a6e      	cmp	r2, #110	; 0x6e
 801463c:	e7db      	b.n	80145f6 <_strtod_l+0x30e>
 801463e:	4990      	ldr	r1, [pc, #576]	; (8014880 <_strtod_l+0x598>)
 8014640:	a817      	add	r0, sp, #92	; 0x5c
 8014642:	f001 ff49 	bl	80164d8 <__match>
 8014646:	2800      	cmp	r0, #0
 8014648:	f43f aeb0 	beq.w	80143ac <_strtod_l+0xc4>
 801464c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801464e:	498d      	ldr	r1, [pc, #564]	; (8014884 <_strtod_l+0x59c>)
 8014650:	3b01      	subs	r3, #1
 8014652:	a817      	add	r0, sp, #92	; 0x5c
 8014654:	9317      	str	r3, [sp, #92]	; 0x5c
 8014656:	f001 ff3f 	bl	80164d8 <__match>
 801465a:	b910      	cbnz	r0, 8014662 <_strtod_l+0x37a>
 801465c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801465e:	3301      	adds	r3, #1
 8014660:	9317      	str	r3, [sp, #92]	; 0x5c
 8014662:	f8df b230 	ldr.w	fp, [pc, #560]	; 8014894 <_strtod_l+0x5ac>
 8014666:	f04f 0a00 	mov.w	sl, #0
 801466a:	e681      	b.n	8014370 <_strtod_l+0x88>
 801466c:	4886      	ldr	r0, [pc, #536]	; (8014888 <_strtod_l+0x5a0>)
 801466e:	f002 fe47 	bl	8017300 <nan>
 8014672:	ec5b ab10 	vmov	sl, fp, d0
 8014676:	e67b      	b.n	8014370 <_strtod_l+0x88>
 8014678:	9b05      	ldr	r3, [sp, #20]
 801467a:	9807      	ldr	r0, [sp, #28]
 801467c:	1af3      	subs	r3, r6, r3
 801467e:	2f00      	cmp	r7, #0
 8014680:	bf08      	it	eq
 8014682:	462f      	moveq	r7, r5
 8014684:	2d10      	cmp	r5, #16
 8014686:	9306      	str	r3, [sp, #24]
 8014688:	46a8      	mov	r8, r5
 801468a:	bfa8      	it	ge
 801468c:	f04f 0810 	movge.w	r8, #16
 8014690:	f7eb ff38 	bl	8000504 <__aeabi_ui2d>
 8014694:	2d09      	cmp	r5, #9
 8014696:	4682      	mov	sl, r0
 8014698:	468b      	mov	fp, r1
 801469a:	dd13      	ble.n	80146c4 <_strtod_l+0x3dc>
 801469c:	4b7b      	ldr	r3, [pc, #492]	; (801488c <_strtod_l+0x5a4>)
 801469e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80146a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80146a6:	f7eb ffa7 	bl	80005f8 <__aeabi_dmul>
 80146aa:	4682      	mov	sl, r0
 80146ac:	4648      	mov	r0, r9
 80146ae:	468b      	mov	fp, r1
 80146b0:	f7eb ff28 	bl	8000504 <__aeabi_ui2d>
 80146b4:	4602      	mov	r2, r0
 80146b6:	460b      	mov	r3, r1
 80146b8:	4650      	mov	r0, sl
 80146ba:	4659      	mov	r1, fp
 80146bc:	f7eb fde6 	bl	800028c <__adddf3>
 80146c0:	4682      	mov	sl, r0
 80146c2:	468b      	mov	fp, r1
 80146c4:	2d0f      	cmp	r5, #15
 80146c6:	dc38      	bgt.n	801473a <_strtod_l+0x452>
 80146c8:	9b06      	ldr	r3, [sp, #24]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	f43f ae50 	beq.w	8014370 <_strtod_l+0x88>
 80146d0:	dd24      	ble.n	801471c <_strtod_l+0x434>
 80146d2:	2b16      	cmp	r3, #22
 80146d4:	dc0b      	bgt.n	80146ee <_strtod_l+0x406>
 80146d6:	496d      	ldr	r1, [pc, #436]	; (801488c <_strtod_l+0x5a4>)
 80146d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80146dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80146e0:	4652      	mov	r2, sl
 80146e2:	465b      	mov	r3, fp
 80146e4:	f7eb ff88 	bl	80005f8 <__aeabi_dmul>
 80146e8:	4682      	mov	sl, r0
 80146ea:	468b      	mov	fp, r1
 80146ec:	e640      	b.n	8014370 <_strtod_l+0x88>
 80146ee:	9a06      	ldr	r2, [sp, #24]
 80146f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80146f4:	4293      	cmp	r3, r2
 80146f6:	db20      	blt.n	801473a <_strtod_l+0x452>
 80146f8:	4c64      	ldr	r4, [pc, #400]	; (801488c <_strtod_l+0x5a4>)
 80146fa:	f1c5 050f 	rsb	r5, r5, #15
 80146fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8014702:	4652      	mov	r2, sl
 8014704:	465b      	mov	r3, fp
 8014706:	e9d1 0100 	ldrd	r0, r1, [r1]
 801470a:	f7eb ff75 	bl	80005f8 <__aeabi_dmul>
 801470e:	9b06      	ldr	r3, [sp, #24]
 8014710:	1b5d      	subs	r5, r3, r5
 8014712:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8014716:	e9d4 2300 	ldrd	r2, r3, [r4]
 801471a:	e7e3      	b.n	80146e4 <_strtod_l+0x3fc>
 801471c:	9b06      	ldr	r3, [sp, #24]
 801471e:	3316      	adds	r3, #22
 8014720:	db0b      	blt.n	801473a <_strtod_l+0x452>
 8014722:	9b05      	ldr	r3, [sp, #20]
 8014724:	1b9e      	subs	r6, r3, r6
 8014726:	4b59      	ldr	r3, [pc, #356]	; (801488c <_strtod_l+0x5a4>)
 8014728:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801472c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014730:	4650      	mov	r0, sl
 8014732:	4659      	mov	r1, fp
 8014734:	f7ec f88a 	bl	800084c <__aeabi_ddiv>
 8014738:	e7d6      	b.n	80146e8 <_strtod_l+0x400>
 801473a:	9b06      	ldr	r3, [sp, #24]
 801473c:	eba5 0808 	sub.w	r8, r5, r8
 8014740:	4498      	add	r8, r3
 8014742:	f1b8 0f00 	cmp.w	r8, #0
 8014746:	dd74      	ble.n	8014832 <_strtod_l+0x54a>
 8014748:	f018 030f 	ands.w	r3, r8, #15
 801474c:	d00a      	beq.n	8014764 <_strtod_l+0x47c>
 801474e:	494f      	ldr	r1, [pc, #316]	; (801488c <_strtod_l+0x5a4>)
 8014750:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014754:	4652      	mov	r2, sl
 8014756:	465b      	mov	r3, fp
 8014758:	e9d1 0100 	ldrd	r0, r1, [r1]
 801475c:	f7eb ff4c 	bl	80005f8 <__aeabi_dmul>
 8014760:	4682      	mov	sl, r0
 8014762:	468b      	mov	fp, r1
 8014764:	f038 080f 	bics.w	r8, r8, #15
 8014768:	d04f      	beq.n	801480a <_strtod_l+0x522>
 801476a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801476e:	dd22      	ble.n	80147b6 <_strtod_l+0x4ce>
 8014770:	2500      	movs	r5, #0
 8014772:	462e      	mov	r6, r5
 8014774:	9507      	str	r5, [sp, #28]
 8014776:	9505      	str	r5, [sp, #20]
 8014778:	2322      	movs	r3, #34	; 0x22
 801477a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8014894 <_strtod_l+0x5ac>
 801477e:	6023      	str	r3, [r4, #0]
 8014780:	f04f 0a00 	mov.w	sl, #0
 8014784:	9b07      	ldr	r3, [sp, #28]
 8014786:	2b00      	cmp	r3, #0
 8014788:	f43f adf2 	beq.w	8014370 <_strtod_l+0x88>
 801478c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801478e:	4620      	mov	r0, r4
 8014790:	f001 ffc6 	bl	8016720 <_Bfree>
 8014794:	9905      	ldr	r1, [sp, #20]
 8014796:	4620      	mov	r0, r4
 8014798:	f001 ffc2 	bl	8016720 <_Bfree>
 801479c:	4631      	mov	r1, r6
 801479e:	4620      	mov	r0, r4
 80147a0:	f001 ffbe 	bl	8016720 <_Bfree>
 80147a4:	9907      	ldr	r1, [sp, #28]
 80147a6:	4620      	mov	r0, r4
 80147a8:	f001 ffba 	bl	8016720 <_Bfree>
 80147ac:	4629      	mov	r1, r5
 80147ae:	4620      	mov	r0, r4
 80147b0:	f001 ffb6 	bl	8016720 <_Bfree>
 80147b4:	e5dc      	b.n	8014370 <_strtod_l+0x88>
 80147b6:	4b36      	ldr	r3, [pc, #216]	; (8014890 <_strtod_l+0x5a8>)
 80147b8:	9304      	str	r3, [sp, #16]
 80147ba:	2300      	movs	r3, #0
 80147bc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80147c0:	4650      	mov	r0, sl
 80147c2:	4659      	mov	r1, fp
 80147c4:	4699      	mov	r9, r3
 80147c6:	f1b8 0f01 	cmp.w	r8, #1
 80147ca:	dc21      	bgt.n	8014810 <_strtod_l+0x528>
 80147cc:	b10b      	cbz	r3, 80147d2 <_strtod_l+0x4ea>
 80147ce:	4682      	mov	sl, r0
 80147d0:	468b      	mov	fp, r1
 80147d2:	4b2f      	ldr	r3, [pc, #188]	; (8014890 <_strtod_l+0x5a8>)
 80147d4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80147d8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80147dc:	4652      	mov	r2, sl
 80147de:	465b      	mov	r3, fp
 80147e0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80147e4:	f7eb ff08 	bl	80005f8 <__aeabi_dmul>
 80147e8:	4b2a      	ldr	r3, [pc, #168]	; (8014894 <_strtod_l+0x5ac>)
 80147ea:	460a      	mov	r2, r1
 80147ec:	400b      	ands	r3, r1
 80147ee:	492a      	ldr	r1, [pc, #168]	; (8014898 <_strtod_l+0x5b0>)
 80147f0:	428b      	cmp	r3, r1
 80147f2:	4682      	mov	sl, r0
 80147f4:	d8bc      	bhi.n	8014770 <_strtod_l+0x488>
 80147f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80147fa:	428b      	cmp	r3, r1
 80147fc:	bf86      	itte	hi
 80147fe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801489c <_strtod_l+0x5b4>
 8014802:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8014806:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801480a:	2300      	movs	r3, #0
 801480c:	9304      	str	r3, [sp, #16]
 801480e:	e084      	b.n	801491a <_strtod_l+0x632>
 8014810:	f018 0f01 	tst.w	r8, #1
 8014814:	d005      	beq.n	8014822 <_strtod_l+0x53a>
 8014816:	9b04      	ldr	r3, [sp, #16]
 8014818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801481c:	f7eb feec 	bl	80005f8 <__aeabi_dmul>
 8014820:	2301      	movs	r3, #1
 8014822:	9a04      	ldr	r2, [sp, #16]
 8014824:	3208      	adds	r2, #8
 8014826:	f109 0901 	add.w	r9, r9, #1
 801482a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801482e:	9204      	str	r2, [sp, #16]
 8014830:	e7c9      	b.n	80147c6 <_strtod_l+0x4de>
 8014832:	d0ea      	beq.n	801480a <_strtod_l+0x522>
 8014834:	f1c8 0800 	rsb	r8, r8, #0
 8014838:	f018 020f 	ands.w	r2, r8, #15
 801483c:	d00a      	beq.n	8014854 <_strtod_l+0x56c>
 801483e:	4b13      	ldr	r3, [pc, #76]	; (801488c <_strtod_l+0x5a4>)
 8014840:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014844:	4650      	mov	r0, sl
 8014846:	4659      	mov	r1, fp
 8014848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801484c:	f7eb fffe 	bl	800084c <__aeabi_ddiv>
 8014850:	4682      	mov	sl, r0
 8014852:	468b      	mov	fp, r1
 8014854:	ea5f 1828 	movs.w	r8, r8, asr #4
 8014858:	d0d7      	beq.n	801480a <_strtod_l+0x522>
 801485a:	f1b8 0f1f 	cmp.w	r8, #31
 801485e:	dd1f      	ble.n	80148a0 <_strtod_l+0x5b8>
 8014860:	2500      	movs	r5, #0
 8014862:	462e      	mov	r6, r5
 8014864:	9507      	str	r5, [sp, #28]
 8014866:	9505      	str	r5, [sp, #20]
 8014868:	2322      	movs	r3, #34	; 0x22
 801486a:	f04f 0a00 	mov.w	sl, #0
 801486e:	f04f 0b00 	mov.w	fp, #0
 8014872:	6023      	str	r3, [r4, #0]
 8014874:	e786      	b.n	8014784 <_strtod_l+0x49c>
 8014876:	bf00      	nop
 8014878:	080195ad 	.word	0x080195ad
 801487c:	080195e8 	.word	0x080195e8
 8014880:	080195a5 	.word	0x080195a5
 8014884:	0801962b 	.word	0x0801962b
 8014888:	080198d8 	.word	0x080198d8
 801488c:	080197b8 	.word	0x080197b8
 8014890:	08019790 	.word	0x08019790
 8014894:	7ff00000 	.word	0x7ff00000
 8014898:	7ca00000 	.word	0x7ca00000
 801489c:	7fefffff 	.word	0x7fefffff
 80148a0:	f018 0310 	ands.w	r3, r8, #16
 80148a4:	bf18      	it	ne
 80148a6:	236a      	movne	r3, #106	; 0x6a
 80148a8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8014c58 <_strtod_l+0x970>
 80148ac:	9304      	str	r3, [sp, #16]
 80148ae:	4650      	mov	r0, sl
 80148b0:	4659      	mov	r1, fp
 80148b2:	2300      	movs	r3, #0
 80148b4:	f018 0f01 	tst.w	r8, #1
 80148b8:	d004      	beq.n	80148c4 <_strtod_l+0x5dc>
 80148ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 80148be:	f7eb fe9b 	bl	80005f8 <__aeabi_dmul>
 80148c2:	2301      	movs	r3, #1
 80148c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80148c8:	f109 0908 	add.w	r9, r9, #8
 80148cc:	d1f2      	bne.n	80148b4 <_strtod_l+0x5cc>
 80148ce:	b10b      	cbz	r3, 80148d4 <_strtod_l+0x5ec>
 80148d0:	4682      	mov	sl, r0
 80148d2:	468b      	mov	fp, r1
 80148d4:	9b04      	ldr	r3, [sp, #16]
 80148d6:	b1c3      	cbz	r3, 801490a <_strtod_l+0x622>
 80148d8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80148dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	4659      	mov	r1, fp
 80148e4:	dd11      	ble.n	801490a <_strtod_l+0x622>
 80148e6:	2b1f      	cmp	r3, #31
 80148e8:	f340 8124 	ble.w	8014b34 <_strtod_l+0x84c>
 80148ec:	2b34      	cmp	r3, #52	; 0x34
 80148ee:	bfde      	ittt	le
 80148f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80148f4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80148f8:	fa03 f202 	lslle.w	r2, r3, r2
 80148fc:	f04f 0a00 	mov.w	sl, #0
 8014900:	bfcc      	ite	gt
 8014902:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014906:	ea02 0b01 	andle.w	fp, r2, r1
 801490a:	2200      	movs	r2, #0
 801490c:	2300      	movs	r3, #0
 801490e:	4650      	mov	r0, sl
 8014910:	4659      	mov	r1, fp
 8014912:	f7ec f8d9 	bl	8000ac8 <__aeabi_dcmpeq>
 8014916:	2800      	cmp	r0, #0
 8014918:	d1a2      	bne.n	8014860 <_strtod_l+0x578>
 801491a:	9b07      	ldr	r3, [sp, #28]
 801491c:	9300      	str	r3, [sp, #0]
 801491e:	9908      	ldr	r1, [sp, #32]
 8014920:	462b      	mov	r3, r5
 8014922:	463a      	mov	r2, r7
 8014924:	4620      	mov	r0, r4
 8014926:	f001 ff63 	bl	80167f0 <__s2b>
 801492a:	9007      	str	r0, [sp, #28]
 801492c:	2800      	cmp	r0, #0
 801492e:	f43f af1f 	beq.w	8014770 <_strtod_l+0x488>
 8014932:	9b05      	ldr	r3, [sp, #20]
 8014934:	1b9e      	subs	r6, r3, r6
 8014936:	9b06      	ldr	r3, [sp, #24]
 8014938:	2b00      	cmp	r3, #0
 801493a:	bfb4      	ite	lt
 801493c:	4633      	movlt	r3, r6
 801493e:	2300      	movge	r3, #0
 8014940:	930c      	str	r3, [sp, #48]	; 0x30
 8014942:	9b06      	ldr	r3, [sp, #24]
 8014944:	2500      	movs	r5, #0
 8014946:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801494a:	9312      	str	r3, [sp, #72]	; 0x48
 801494c:	462e      	mov	r6, r5
 801494e:	9b07      	ldr	r3, [sp, #28]
 8014950:	4620      	mov	r0, r4
 8014952:	6859      	ldr	r1, [r3, #4]
 8014954:	f001 fea4 	bl	80166a0 <_Balloc>
 8014958:	9005      	str	r0, [sp, #20]
 801495a:	2800      	cmp	r0, #0
 801495c:	f43f af0c 	beq.w	8014778 <_strtod_l+0x490>
 8014960:	9b07      	ldr	r3, [sp, #28]
 8014962:	691a      	ldr	r2, [r3, #16]
 8014964:	3202      	adds	r2, #2
 8014966:	f103 010c 	add.w	r1, r3, #12
 801496a:	0092      	lsls	r2, r2, #2
 801496c:	300c      	adds	r0, #12
 801496e:	f7fe fdf9 	bl	8013564 <memcpy>
 8014972:	ec4b ab10 	vmov	d0, sl, fp
 8014976:	aa1a      	add	r2, sp, #104	; 0x68
 8014978:	a919      	add	r1, sp, #100	; 0x64
 801497a:	4620      	mov	r0, r4
 801497c:	f002 fa7e 	bl	8016e7c <__d2b>
 8014980:	ec4b ab18 	vmov	d8, sl, fp
 8014984:	9018      	str	r0, [sp, #96]	; 0x60
 8014986:	2800      	cmp	r0, #0
 8014988:	f43f aef6 	beq.w	8014778 <_strtod_l+0x490>
 801498c:	2101      	movs	r1, #1
 801498e:	4620      	mov	r0, r4
 8014990:	f001 ffc8 	bl	8016924 <__i2b>
 8014994:	4606      	mov	r6, r0
 8014996:	2800      	cmp	r0, #0
 8014998:	f43f aeee 	beq.w	8014778 <_strtod_l+0x490>
 801499c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801499e:	9904      	ldr	r1, [sp, #16]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	bfab      	itete	ge
 80149a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80149a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80149a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80149aa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80149ae:	bfac      	ite	ge
 80149b0:	eb03 0902 	addge.w	r9, r3, r2
 80149b4:	1ad7      	sublt	r7, r2, r3
 80149b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80149b8:	eba3 0801 	sub.w	r8, r3, r1
 80149bc:	4490      	add	r8, r2
 80149be:	4ba1      	ldr	r3, [pc, #644]	; (8014c44 <_strtod_l+0x95c>)
 80149c0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80149c4:	4598      	cmp	r8, r3
 80149c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80149ca:	f280 80c7 	bge.w	8014b5c <_strtod_l+0x874>
 80149ce:	eba3 0308 	sub.w	r3, r3, r8
 80149d2:	2b1f      	cmp	r3, #31
 80149d4:	eba2 0203 	sub.w	r2, r2, r3
 80149d8:	f04f 0101 	mov.w	r1, #1
 80149dc:	f300 80b1 	bgt.w	8014b42 <_strtod_l+0x85a>
 80149e0:	fa01 f303 	lsl.w	r3, r1, r3
 80149e4:	930d      	str	r3, [sp, #52]	; 0x34
 80149e6:	2300      	movs	r3, #0
 80149e8:	9308      	str	r3, [sp, #32]
 80149ea:	eb09 0802 	add.w	r8, r9, r2
 80149ee:	9b04      	ldr	r3, [sp, #16]
 80149f0:	45c1      	cmp	r9, r8
 80149f2:	4417      	add	r7, r2
 80149f4:	441f      	add	r7, r3
 80149f6:	464b      	mov	r3, r9
 80149f8:	bfa8      	it	ge
 80149fa:	4643      	movge	r3, r8
 80149fc:	42bb      	cmp	r3, r7
 80149fe:	bfa8      	it	ge
 8014a00:	463b      	movge	r3, r7
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	bfc2      	ittt	gt
 8014a06:	eba8 0803 	subgt.w	r8, r8, r3
 8014a0a:	1aff      	subgt	r7, r7, r3
 8014a0c:	eba9 0903 	subgt.w	r9, r9, r3
 8014a10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	dd17      	ble.n	8014a46 <_strtod_l+0x75e>
 8014a16:	4631      	mov	r1, r6
 8014a18:	461a      	mov	r2, r3
 8014a1a:	4620      	mov	r0, r4
 8014a1c:	f002 f842 	bl	8016aa4 <__pow5mult>
 8014a20:	4606      	mov	r6, r0
 8014a22:	2800      	cmp	r0, #0
 8014a24:	f43f aea8 	beq.w	8014778 <_strtod_l+0x490>
 8014a28:	4601      	mov	r1, r0
 8014a2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014a2c:	4620      	mov	r0, r4
 8014a2e:	f001 ff8f 	bl	8016950 <__multiply>
 8014a32:	900b      	str	r0, [sp, #44]	; 0x2c
 8014a34:	2800      	cmp	r0, #0
 8014a36:	f43f ae9f 	beq.w	8014778 <_strtod_l+0x490>
 8014a3a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014a3c:	4620      	mov	r0, r4
 8014a3e:	f001 fe6f 	bl	8016720 <_Bfree>
 8014a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a44:	9318      	str	r3, [sp, #96]	; 0x60
 8014a46:	f1b8 0f00 	cmp.w	r8, #0
 8014a4a:	f300 808c 	bgt.w	8014b66 <_strtod_l+0x87e>
 8014a4e:	9b06      	ldr	r3, [sp, #24]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	dd08      	ble.n	8014a66 <_strtod_l+0x77e>
 8014a54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014a56:	9905      	ldr	r1, [sp, #20]
 8014a58:	4620      	mov	r0, r4
 8014a5a:	f002 f823 	bl	8016aa4 <__pow5mult>
 8014a5e:	9005      	str	r0, [sp, #20]
 8014a60:	2800      	cmp	r0, #0
 8014a62:	f43f ae89 	beq.w	8014778 <_strtod_l+0x490>
 8014a66:	2f00      	cmp	r7, #0
 8014a68:	dd08      	ble.n	8014a7c <_strtod_l+0x794>
 8014a6a:	9905      	ldr	r1, [sp, #20]
 8014a6c:	463a      	mov	r2, r7
 8014a6e:	4620      	mov	r0, r4
 8014a70:	f002 f872 	bl	8016b58 <__lshift>
 8014a74:	9005      	str	r0, [sp, #20]
 8014a76:	2800      	cmp	r0, #0
 8014a78:	f43f ae7e 	beq.w	8014778 <_strtod_l+0x490>
 8014a7c:	f1b9 0f00 	cmp.w	r9, #0
 8014a80:	dd08      	ble.n	8014a94 <_strtod_l+0x7ac>
 8014a82:	4631      	mov	r1, r6
 8014a84:	464a      	mov	r2, r9
 8014a86:	4620      	mov	r0, r4
 8014a88:	f002 f866 	bl	8016b58 <__lshift>
 8014a8c:	4606      	mov	r6, r0
 8014a8e:	2800      	cmp	r0, #0
 8014a90:	f43f ae72 	beq.w	8014778 <_strtod_l+0x490>
 8014a94:	9a05      	ldr	r2, [sp, #20]
 8014a96:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014a98:	4620      	mov	r0, r4
 8014a9a:	f002 f8e9 	bl	8016c70 <__mdiff>
 8014a9e:	4605      	mov	r5, r0
 8014aa0:	2800      	cmp	r0, #0
 8014aa2:	f43f ae69 	beq.w	8014778 <_strtod_l+0x490>
 8014aa6:	68c3      	ldr	r3, [r0, #12]
 8014aa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8014aaa:	2300      	movs	r3, #0
 8014aac:	60c3      	str	r3, [r0, #12]
 8014aae:	4631      	mov	r1, r6
 8014ab0:	f002 f8c2 	bl	8016c38 <__mcmp>
 8014ab4:	2800      	cmp	r0, #0
 8014ab6:	da60      	bge.n	8014b7a <_strtod_l+0x892>
 8014ab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014aba:	ea53 030a 	orrs.w	r3, r3, sl
 8014abe:	f040 8082 	bne.w	8014bc6 <_strtod_l+0x8de>
 8014ac2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d17d      	bne.n	8014bc6 <_strtod_l+0x8de>
 8014aca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014ace:	0d1b      	lsrs	r3, r3, #20
 8014ad0:	051b      	lsls	r3, r3, #20
 8014ad2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014ad6:	d976      	bls.n	8014bc6 <_strtod_l+0x8de>
 8014ad8:	696b      	ldr	r3, [r5, #20]
 8014ada:	b913      	cbnz	r3, 8014ae2 <_strtod_l+0x7fa>
 8014adc:	692b      	ldr	r3, [r5, #16]
 8014ade:	2b01      	cmp	r3, #1
 8014ae0:	dd71      	ble.n	8014bc6 <_strtod_l+0x8de>
 8014ae2:	4629      	mov	r1, r5
 8014ae4:	2201      	movs	r2, #1
 8014ae6:	4620      	mov	r0, r4
 8014ae8:	f002 f836 	bl	8016b58 <__lshift>
 8014aec:	4631      	mov	r1, r6
 8014aee:	4605      	mov	r5, r0
 8014af0:	f002 f8a2 	bl	8016c38 <__mcmp>
 8014af4:	2800      	cmp	r0, #0
 8014af6:	dd66      	ble.n	8014bc6 <_strtod_l+0x8de>
 8014af8:	9904      	ldr	r1, [sp, #16]
 8014afa:	4a53      	ldr	r2, [pc, #332]	; (8014c48 <_strtod_l+0x960>)
 8014afc:	465b      	mov	r3, fp
 8014afe:	2900      	cmp	r1, #0
 8014b00:	f000 8081 	beq.w	8014c06 <_strtod_l+0x91e>
 8014b04:	ea02 010b 	and.w	r1, r2, fp
 8014b08:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014b0c:	dc7b      	bgt.n	8014c06 <_strtod_l+0x91e>
 8014b0e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014b12:	f77f aea9 	ble.w	8014868 <_strtod_l+0x580>
 8014b16:	4b4d      	ldr	r3, [pc, #308]	; (8014c4c <_strtod_l+0x964>)
 8014b18:	4650      	mov	r0, sl
 8014b1a:	4659      	mov	r1, fp
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	f7eb fd6b 	bl	80005f8 <__aeabi_dmul>
 8014b22:	460b      	mov	r3, r1
 8014b24:	4303      	orrs	r3, r0
 8014b26:	bf08      	it	eq
 8014b28:	2322      	moveq	r3, #34	; 0x22
 8014b2a:	4682      	mov	sl, r0
 8014b2c:	468b      	mov	fp, r1
 8014b2e:	bf08      	it	eq
 8014b30:	6023      	streq	r3, [r4, #0]
 8014b32:	e62b      	b.n	801478c <_strtod_l+0x4a4>
 8014b34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014b38:	fa02 f303 	lsl.w	r3, r2, r3
 8014b3c:	ea03 0a0a 	and.w	sl, r3, sl
 8014b40:	e6e3      	b.n	801490a <_strtod_l+0x622>
 8014b42:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8014b46:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8014b4a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8014b4e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8014b52:	fa01 f308 	lsl.w	r3, r1, r8
 8014b56:	9308      	str	r3, [sp, #32]
 8014b58:	910d      	str	r1, [sp, #52]	; 0x34
 8014b5a:	e746      	b.n	80149ea <_strtod_l+0x702>
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	9308      	str	r3, [sp, #32]
 8014b60:	2301      	movs	r3, #1
 8014b62:	930d      	str	r3, [sp, #52]	; 0x34
 8014b64:	e741      	b.n	80149ea <_strtod_l+0x702>
 8014b66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014b68:	4642      	mov	r2, r8
 8014b6a:	4620      	mov	r0, r4
 8014b6c:	f001 fff4 	bl	8016b58 <__lshift>
 8014b70:	9018      	str	r0, [sp, #96]	; 0x60
 8014b72:	2800      	cmp	r0, #0
 8014b74:	f47f af6b 	bne.w	8014a4e <_strtod_l+0x766>
 8014b78:	e5fe      	b.n	8014778 <_strtod_l+0x490>
 8014b7a:	465f      	mov	r7, fp
 8014b7c:	d16e      	bne.n	8014c5c <_strtod_l+0x974>
 8014b7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014b80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014b84:	b342      	cbz	r2, 8014bd8 <_strtod_l+0x8f0>
 8014b86:	4a32      	ldr	r2, [pc, #200]	; (8014c50 <_strtod_l+0x968>)
 8014b88:	4293      	cmp	r3, r2
 8014b8a:	d128      	bne.n	8014bde <_strtod_l+0x8f6>
 8014b8c:	9b04      	ldr	r3, [sp, #16]
 8014b8e:	4651      	mov	r1, sl
 8014b90:	b1eb      	cbz	r3, 8014bce <_strtod_l+0x8e6>
 8014b92:	4b2d      	ldr	r3, [pc, #180]	; (8014c48 <_strtod_l+0x960>)
 8014b94:	403b      	ands	r3, r7
 8014b96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014b9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014b9e:	d819      	bhi.n	8014bd4 <_strtod_l+0x8ec>
 8014ba0:	0d1b      	lsrs	r3, r3, #20
 8014ba2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8014baa:	4299      	cmp	r1, r3
 8014bac:	d117      	bne.n	8014bde <_strtod_l+0x8f6>
 8014bae:	4b29      	ldr	r3, [pc, #164]	; (8014c54 <_strtod_l+0x96c>)
 8014bb0:	429f      	cmp	r7, r3
 8014bb2:	d102      	bne.n	8014bba <_strtod_l+0x8d2>
 8014bb4:	3101      	adds	r1, #1
 8014bb6:	f43f addf 	beq.w	8014778 <_strtod_l+0x490>
 8014bba:	4b23      	ldr	r3, [pc, #140]	; (8014c48 <_strtod_l+0x960>)
 8014bbc:	403b      	ands	r3, r7
 8014bbe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014bc2:	f04f 0a00 	mov.w	sl, #0
 8014bc6:	9b04      	ldr	r3, [sp, #16]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d1a4      	bne.n	8014b16 <_strtod_l+0x82e>
 8014bcc:	e5de      	b.n	801478c <_strtod_l+0x4a4>
 8014bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014bd2:	e7ea      	b.n	8014baa <_strtod_l+0x8c2>
 8014bd4:	4613      	mov	r3, r2
 8014bd6:	e7e8      	b.n	8014baa <_strtod_l+0x8c2>
 8014bd8:	ea53 030a 	orrs.w	r3, r3, sl
 8014bdc:	d08c      	beq.n	8014af8 <_strtod_l+0x810>
 8014bde:	9b08      	ldr	r3, [sp, #32]
 8014be0:	b1db      	cbz	r3, 8014c1a <_strtod_l+0x932>
 8014be2:	423b      	tst	r3, r7
 8014be4:	d0ef      	beq.n	8014bc6 <_strtod_l+0x8de>
 8014be6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014be8:	9a04      	ldr	r2, [sp, #16]
 8014bea:	4650      	mov	r0, sl
 8014bec:	4659      	mov	r1, fp
 8014bee:	b1c3      	cbz	r3, 8014c22 <_strtod_l+0x93a>
 8014bf0:	f7ff fb5d 	bl	80142ae <sulp>
 8014bf4:	4602      	mov	r2, r0
 8014bf6:	460b      	mov	r3, r1
 8014bf8:	ec51 0b18 	vmov	r0, r1, d8
 8014bfc:	f7eb fb46 	bl	800028c <__adddf3>
 8014c00:	4682      	mov	sl, r0
 8014c02:	468b      	mov	fp, r1
 8014c04:	e7df      	b.n	8014bc6 <_strtod_l+0x8de>
 8014c06:	4013      	ands	r3, r2
 8014c08:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014c0c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014c10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014c14:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8014c18:	e7d5      	b.n	8014bc6 <_strtod_l+0x8de>
 8014c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c1c:	ea13 0f0a 	tst.w	r3, sl
 8014c20:	e7e0      	b.n	8014be4 <_strtod_l+0x8fc>
 8014c22:	f7ff fb44 	bl	80142ae <sulp>
 8014c26:	4602      	mov	r2, r0
 8014c28:	460b      	mov	r3, r1
 8014c2a:	ec51 0b18 	vmov	r0, r1, d8
 8014c2e:	f7eb fb2b 	bl	8000288 <__aeabi_dsub>
 8014c32:	2200      	movs	r2, #0
 8014c34:	2300      	movs	r3, #0
 8014c36:	4682      	mov	sl, r0
 8014c38:	468b      	mov	fp, r1
 8014c3a:	f7eb ff45 	bl	8000ac8 <__aeabi_dcmpeq>
 8014c3e:	2800      	cmp	r0, #0
 8014c40:	d0c1      	beq.n	8014bc6 <_strtod_l+0x8de>
 8014c42:	e611      	b.n	8014868 <_strtod_l+0x580>
 8014c44:	fffffc02 	.word	0xfffffc02
 8014c48:	7ff00000 	.word	0x7ff00000
 8014c4c:	39500000 	.word	0x39500000
 8014c50:	000fffff 	.word	0x000fffff
 8014c54:	7fefffff 	.word	0x7fefffff
 8014c58:	08019600 	.word	0x08019600
 8014c5c:	4631      	mov	r1, r6
 8014c5e:	4628      	mov	r0, r5
 8014c60:	f002 f968 	bl	8016f34 <__ratio>
 8014c64:	ec59 8b10 	vmov	r8, r9, d0
 8014c68:	ee10 0a10 	vmov	r0, s0
 8014c6c:	2200      	movs	r2, #0
 8014c6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014c72:	4649      	mov	r1, r9
 8014c74:	f7eb ff3c 	bl	8000af0 <__aeabi_dcmple>
 8014c78:	2800      	cmp	r0, #0
 8014c7a:	d07a      	beq.n	8014d72 <_strtod_l+0xa8a>
 8014c7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d04a      	beq.n	8014d18 <_strtod_l+0xa30>
 8014c82:	4b95      	ldr	r3, [pc, #596]	; (8014ed8 <_strtod_l+0xbf0>)
 8014c84:	2200      	movs	r2, #0
 8014c86:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014c8a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014ed8 <_strtod_l+0xbf0>
 8014c8e:	f04f 0800 	mov.w	r8, #0
 8014c92:	4b92      	ldr	r3, [pc, #584]	; (8014edc <_strtod_l+0xbf4>)
 8014c94:	403b      	ands	r3, r7
 8014c96:	930d      	str	r3, [sp, #52]	; 0x34
 8014c98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014c9a:	4b91      	ldr	r3, [pc, #580]	; (8014ee0 <_strtod_l+0xbf8>)
 8014c9c:	429a      	cmp	r2, r3
 8014c9e:	f040 80b0 	bne.w	8014e02 <_strtod_l+0xb1a>
 8014ca2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014ca6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8014caa:	ec4b ab10 	vmov	d0, sl, fp
 8014cae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014cb2:	f002 f867 	bl	8016d84 <__ulp>
 8014cb6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014cba:	ec53 2b10 	vmov	r2, r3, d0
 8014cbe:	f7eb fc9b 	bl	80005f8 <__aeabi_dmul>
 8014cc2:	4652      	mov	r2, sl
 8014cc4:	465b      	mov	r3, fp
 8014cc6:	f7eb fae1 	bl	800028c <__adddf3>
 8014cca:	460b      	mov	r3, r1
 8014ccc:	4983      	ldr	r1, [pc, #524]	; (8014edc <_strtod_l+0xbf4>)
 8014cce:	4a85      	ldr	r2, [pc, #532]	; (8014ee4 <_strtod_l+0xbfc>)
 8014cd0:	4019      	ands	r1, r3
 8014cd2:	4291      	cmp	r1, r2
 8014cd4:	4682      	mov	sl, r0
 8014cd6:	d960      	bls.n	8014d9a <_strtod_l+0xab2>
 8014cd8:	ee18 3a90 	vmov	r3, s17
 8014cdc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014ce0:	4293      	cmp	r3, r2
 8014ce2:	d104      	bne.n	8014cee <_strtod_l+0xa06>
 8014ce4:	ee18 3a10 	vmov	r3, s16
 8014ce8:	3301      	adds	r3, #1
 8014cea:	f43f ad45 	beq.w	8014778 <_strtod_l+0x490>
 8014cee:	f8df b200 	ldr.w	fp, [pc, #512]	; 8014ef0 <_strtod_l+0xc08>
 8014cf2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8014cf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014cf8:	4620      	mov	r0, r4
 8014cfa:	f001 fd11 	bl	8016720 <_Bfree>
 8014cfe:	9905      	ldr	r1, [sp, #20]
 8014d00:	4620      	mov	r0, r4
 8014d02:	f001 fd0d 	bl	8016720 <_Bfree>
 8014d06:	4631      	mov	r1, r6
 8014d08:	4620      	mov	r0, r4
 8014d0a:	f001 fd09 	bl	8016720 <_Bfree>
 8014d0e:	4629      	mov	r1, r5
 8014d10:	4620      	mov	r0, r4
 8014d12:	f001 fd05 	bl	8016720 <_Bfree>
 8014d16:	e61a      	b.n	801494e <_strtod_l+0x666>
 8014d18:	f1ba 0f00 	cmp.w	sl, #0
 8014d1c:	d11b      	bne.n	8014d56 <_strtod_l+0xa6e>
 8014d1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014d22:	b9f3      	cbnz	r3, 8014d62 <_strtod_l+0xa7a>
 8014d24:	4b6c      	ldr	r3, [pc, #432]	; (8014ed8 <_strtod_l+0xbf0>)
 8014d26:	2200      	movs	r2, #0
 8014d28:	4640      	mov	r0, r8
 8014d2a:	4649      	mov	r1, r9
 8014d2c:	f7eb fed6 	bl	8000adc <__aeabi_dcmplt>
 8014d30:	b9d0      	cbnz	r0, 8014d68 <_strtod_l+0xa80>
 8014d32:	4640      	mov	r0, r8
 8014d34:	4649      	mov	r1, r9
 8014d36:	4b6c      	ldr	r3, [pc, #432]	; (8014ee8 <_strtod_l+0xc00>)
 8014d38:	2200      	movs	r2, #0
 8014d3a:	f7eb fc5d 	bl	80005f8 <__aeabi_dmul>
 8014d3e:	4680      	mov	r8, r0
 8014d40:	4689      	mov	r9, r1
 8014d42:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014d46:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8014d4a:	9315      	str	r3, [sp, #84]	; 0x54
 8014d4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014d50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014d54:	e79d      	b.n	8014c92 <_strtod_l+0x9aa>
 8014d56:	f1ba 0f01 	cmp.w	sl, #1
 8014d5a:	d102      	bne.n	8014d62 <_strtod_l+0xa7a>
 8014d5c:	2f00      	cmp	r7, #0
 8014d5e:	f43f ad83 	beq.w	8014868 <_strtod_l+0x580>
 8014d62:	4b62      	ldr	r3, [pc, #392]	; (8014eec <_strtod_l+0xc04>)
 8014d64:	2200      	movs	r2, #0
 8014d66:	e78e      	b.n	8014c86 <_strtod_l+0x99e>
 8014d68:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8014ee8 <_strtod_l+0xc00>
 8014d6c:	f04f 0800 	mov.w	r8, #0
 8014d70:	e7e7      	b.n	8014d42 <_strtod_l+0xa5a>
 8014d72:	4b5d      	ldr	r3, [pc, #372]	; (8014ee8 <_strtod_l+0xc00>)
 8014d74:	4640      	mov	r0, r8
 8014d76:	4649      	mov	r1, r9
 8014d78:	2200      	movs	r2, #0
 8014d7a:	f7eb fc3d 	bl	80005f8 <__aeabi_dmul>
 8014d7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d80:	4680      	mov	r8, r0
 8014d82:	4689      	mov	r9, r1
 8014d84:	b933      	cbnz	r3, 8014d94 <_strtod_l+0xaac>
 8014d86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d8a:	900e      	str	r0, [sp, #56]	; 0x38
 8014d8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014d92:	e7dd      	b.n	8014d50 <_strtod_l+0xa68>
 8014d94:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8014d98:	e7f9      	b.n	8014d8e <_strtod_l+0xaa6>
 8014d9a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014d9e:	9b04      	ldr	r3, [sp, #16]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d1a8      	bne.n	8014cf6 <_strtod_l+0xa0e>
 8014da4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014da8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014daa:	0d1b      	lsrs	r3, r3, #20
 8014dac:	051b      	lsls	r3, r3, #20
 8014dae:	429a      	cmp	r2, r3
 8014db0:	d1a1      	bne.n	8014cf6 <_strtod_l+0xa0e>
 8014db2:	4640      	mov	r0, r8
 8014db4:	4649      	mov	r1, r9
 8014db6:	f7eb ffcf 	bl	8000d58 <__aeabi_d2lz>
 8014dba:	f7eb fbef 	bl	800059c <__aeabi_l2d>
 8014dbe:	4602      	mov	r2, r0
 8014dc0:	460b      	mov	r3, r1
 8014dc2:	4640      	mov	r0, r8
 8014dc4:	4649      	mov	r1, r9
 8014dc6:	f7eb fa5f 	bl	8000288 <__aeabi_dsub>
 8014dca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014dcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014dd0:	ea43 030a 	orr.w	r3, r3, sl
 8014dd4:	4313      	orrs	r3, r2
 8014dd6:	4680      	mov	r8, r0
 8014dd8:	4689      	mov	r9, r1
 8014dda:	d055      	beq.n	8014e88 <_strtod_l+0xba0>
 8014ddc:	a336      	add	r3, pc, #216	; (adr r3, 8014eb8 <_strtod_l+0xbd0>)
 8014dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014de2:	f7eb fe7b 	bl	8000adc <__aeabi_dcmplt>
 8014de6:	2800      	cmp	r0, #0
 8014de8:	f47f acd0 	bne.w	801478c <_strtod_l+0x4a4>
 8014dec:	a334      	add	r3, pc, #208	; (adr r3, 8014ec0 <_strtod_l+0xbd8>)
 8014dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014df2:	4640      	mov	r0, r8
 8014df4:	4649      	mov	r1, r9
 8014df6:	f7eb fe8f 	bl	8000b18 <__aeabi_dcmpgt>
 8014dfa:	2800      	cmp	r0, #0
 8014dfc:	f43f af7b 	beq.w	8014cf6 <_strtod_l+0xa0e>
 8014e00:	e4c4      	b.n	801478c <_strtod_l+0x4a4>
 8014e02:	9b04      	ldr	r3, [sp, #16]
 8014e04:	b333      	cbz	r3, 8014e54 <_strtod_l+0xb6c>
 8014e06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e08:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014e0c:	d822      	bhi.n	8014e54 <_strtod_l+0xb6c>
 8014e0e:	a32e      	add	r3, pc, #184	; (adr r3, 8014ec8 <_strtod_l+0xbe0>)
 8014e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e14:	4640      	mov	r0, r8
 8014e16:	4649      	mov	r1, r9
 8014e18:	f7eb fe6a 	bl	8000af0 <__aeabi_dcmple>
 8014e1c:	b1a0      	cbz	r0, 8014e48 <_strtod_l+0xb60>
 8014e1e:	4649      	mov	r1, r9
 8014e20:	4640      	mov	r0, r8
 8014e22:	f7eb fec1 	bl	8000ba8 <__aeabi_d2uiz>
 8014e26:	2801      	cmp	r0, #1
 8014e28:	bf38      	it	cc
 8014e2a:	2001      	movcc	r0, #1
 8014e2c:	f7eb fb6a 	bl	8000504 <__aeabi_ui2d>
 8014e30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e32:	4680      	mov	r8, r0
 8014e34:	4689      	mov	r9, r1
 8014e36:	bb23      	cbnz	r3, 8014e82 <_strtod_l+0xb9a>
 8014e38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014e3c:	9010      	str	r0, [sp, #64]	; 0x40
 8014e3e:	9311      	str	r3, [sp, #68]	; 0x44
 8014e40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014e44:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014e4c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014e50:	1a9b      	subs	r3, r3, r2
 8014e52:	9309      	str	r3, [sp, #36]	; 0x24
 8014e54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014e58:	eeb0 0a48 	vmov.f32	s0, s16
 8014e5c:	eef0 0a68 	vmov.f32	s1, s17
 8014e60:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014e64:	f001 ff8e 	bl	8016d84 <__ulp>
 8014e68:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014e6c:	ec53 2b10 	vmov	r2, r3, d0
 8014e70:	f7eb fbc2 	bl	80005f8 <__aeabi_dmul>
 8014e74:	ec53 2b18 	vmov	r2, r3, d8
 8014e78:	f7eb fa08 	bl	800028c <__adddf3>
 8014e7c:	4682      	mov	sl, r0
 8014e7e:	468b      	mov	fp, r1
 8014e80:	e78d      	b.n	8014d9e <_strtod_l+0xab6>
 8014e82:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8014e86:	e7db      	b.n	8014e40 <_strtod_l+0xb58>
 8014e88:	a311      	add	r3, pc, #68	; (adr r3, 8014ed0 <_strtod_l+0xbe8>)
 8014e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e8e:	f7eb fe25 	bl	8000adc <__aeabi_dcmplt>
 8014e92:	e7b2      	b.n	8014dfa <_strtod_l+0xb12>
 8014e94:	2300      	movs	r3, #0
 8014e96:	930a      	str	r3, [sp, #40]	; 0x28
 8014e98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014e9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014e9c:	6013      	str	r3, [r2, #0]
 8014e9e:	f7ff ba6b 	b.w	8014378 <_strtod_l+0x90>
 8014ea2:	2a65      	cmp	r2, #101	; 0x65
 8014ea4:	f43f ab5f 	beq.w	8014566 <_strtod_l+0x27e>
 8014ea8:	2a45      	cmp	r2, #69	; 0x45
 8014eaa:	f43f ab5c 	beq.w	8014566 <_strtod_l+0x27e>
 8014eae:	2301      	movs	r3, #1
 8014eb0:	f7ff bb94 	b.w	80145dc <_strtod_l+0x2f4>
 8014eb4:	f3af 8000 	nop.w
 8014eb8:	94a03595 	.word	0x94a03595
 8014ebc:	3fdfffff 	.word	0x3fdfffff
 8014ec0:	35afe535 	.word	0x35afe535
 8014ec4:	3fe00000 	.word	0x3fe00000
 8014ec8:	ffc00000 	.word	0xffc00000
 8014ecc:	41dfffff 	.word	0x41dfffff
 8014ed0:	94a03595 	.word	0x94a03595
 8014ed4:	3fcfffff 	.word	0x3fcfffff
 8014ed8:	3ff00000 	.word	0x3ff00000
 8014edc:	7ff00000 	.word	0x7ff00000
 8014ee0:	7fe00000 	.word	0x7fe00000
 8014ee4:	7c9fffff 	.word	0x7c9fffff
 8014ee8:	3fe00000 	.word	0x3fe00000
 8014eec:	bff00000 	.word	0xbff00000
 8014ef0:	7fefffff 	.word	0x7fefffff

08014ef4 <strtod>:
 8014ef4:	460a      	mov	r2, r1
 8014ef6:	4601      	mov	r1, r0
 8014ef8:	4802      	ldr	r0, [pc, #8]	; (8014f04 <strtod+0x10>)
 8014efa:	4b03      	ldr	r3, [pc, #12]	; (8014f08 <strtod+0x14>)
 8014efc:	6800      	ldr	r0, [r0, #0]
 8014efe:	f7ff b9f3 	b.w	80142e8 <_strtod_l>
 8014f02:	bf00      	nop
 8014f04:	2000018c 	.word	0x2000018c
 8014f08:	200001f4 	.word	0x200001f4

08014f0c <_strtol_l.constprop.0>:
 8014f0c:	2b01      	cmp	r3, #1
 8014f0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f12:	d001      	beq.n	8014f18 <_strtol_l.constprop.0+0xc>
 8014f14:	2b24      	cmp	r3, #36	; 0x24
 8014f16:	d906      	bls.n	8014f26 <_strtol_l.constprop.0+0x1a>
 8014f18:	f7fe f944 	bl	80131a4 <__errno>
 8014f1c:	2316      	movs	r3, #22
 8014f1e:	6003      	str	r3, [r0, #0]
 8014f20:	2000      	movs	r0, #0
 8014f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f26:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801500c <_strtol_l.constprop.0+0x100>
 8014f2a:	460d      	mov	r5, r1
 8014f2c:	462e      	mov	r6, r5
 8014f2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f32:	f814 700c 	ldrb.w	r7, [r4, ip]
 8014f36:	f017 0708 	ands.w	r7, r7, #8
 8014f3a:	d1f7      	bne.n	8014f2c <_strtol_l.constprop.0+0x20>
 8014f3c:	2c2d      	cmp	r4, #45	; 0x2d
 8014f3e:	d132      	bne.n	8014fa6 <_strtol_l.constprop.0+0x9a>
 8014f40:	782c      	ldrb	r4, [r5, #0]
 8014f42:	2701      	movs	r7, #1
 8014f44:	1cb5      	adds	r5, r6, #2
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d05b      	beq.n	8015002 <_strtol_l.constprop.0+0xf6>
 8014f4a:	2b10      	cmp	r3, #16
 8014f4c:	d109      	bne.n	8014f62 <_strtol_l.constprop.0+0x56>
 8014f4e:	2c30      	cmp	r4, #48	; 0x30
 8014f50:	d107      	bne.n	8014f62 <_strtol_l.constprop.0+0x56>
 8014f52:	782c      	ldrb	r4, [r5, #0]
 8014f54:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014f58:	2c58      	cmp	r4, #88	; 0x58
 8014f5a:	d14d      	bne.n	8014ff8 <_strtol_l.constprop.0+0xec>
 8014f5c:	786c      	ldrb	r4, [r5, #1]
 8014f5e:	2310      	movs	r3, #16
 8014f60:	3502      	adds	r5, #2
 8014f62:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014f66:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8014f6a:	f04f 0c00 	mov.w	ip, #0
 8014f6e:	fbb8 f9f3 	udiv	r9, r8, r3
 8014f72:	4666      	mov	r6, ip
 8014f74:	fb03 8a19 	mls	sl, r3, r9, r8
 8014f78:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014f7c:	f1be 0f09 	cmp.w	lr, #9
 8014f80:	d816      	bhi.n	8014fb0 <_strtol_l.constprop.0+0xa4>
 8014f82:	4674      	mov	r4, lr
 8014f84:	42a3      	cmp	r3, r4
 8014f86:	dd24      	ble.n	8014fd2 <_strtol_l.constprop.0+0xc6>
 8014f88:	f1bc 0f00 	cmp.w	ip, #0
 8014f8c:	db1e      	blt.n	8014fcc <_strtol_l.constprop.0+0xc0>
 8014f8e:	45b1      	cmp	r9, r6
 8014f90:	d31c      	bcc.n	8014fcc <_strtol_l.constprop.0+0xc0>
 8014f92:	d101      	bne.n	8014f98 <_strtol_l.constprop.0+0x8c>
 8014f94:	45a2      	cmp	sl, r4
 8014f96:	db19      	blt.n	8014fcc <_strtol_l.constprop.0+0xc0>
 8014f98:	fb06 4603 	mla	r6, r6, r3, r4
 8014f9c:	f04f 0c01 	mov.w	ip, #1
 8014fa0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014fa4:	e7e8      	b.n	8014f78 <_strtol_l.constprop.0+0x6c>
 8014fa6:	2c2b      	cmp	r4, #43	; 0x2b
 8014fa8:	bf04      	itt	eq
 8014faa:	782c      	ldrbeq	r4, [r5, #0]
 8014fac:	1cb5      	addeq	r5, r6, #2
 8014fae:	e7ca      	b.n	8014f46 <_strtol_l.constprop.0+0x3a>
 8014fb0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014fb4:	f1be 0f19 	cmp.w	lr, #25
 8014fb8:	d801      	bhi.n	8014fbe <_strtol_l.constprop.0+0xb2>
 8014fba:	3c37      	subs	r4, #55	; 0x37
 8014fbc:	e7e2      	b.n	8014f84 <_strtol_l.constprop.0+0x78>
 8014fbe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8014fc2:	f1be 0f19 	cmp.w	lr, #25
 8014fc6:	d804      	bhi.n	8014fd2 <_strtol_l.constprop.0+0xc6>
 8014fc8:	3c57      	subs	r4, #87	; 0x57
 8014fca:	e7db      	b.n	8014f84 <_strtol_l.constprop.0+0x78>
 8014fcc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8014fd0:	e7e6      	b.n	8014fa0 <_strtol_l.constprop.0+0x94>
 8014fd2:	f1bc 0f00 	cmp.w	ip, #0
 8014fd6:	da05      	bge.n	8014fe4 <_strtol_l.constprop.0+0xd8>
 8014fd8:	2322      	movs	r3, #34	; 0x22
 8014fda:	6003      	str	r3, [r0, #0]
 8014fdc:	4646      	mov	r6, r8
 8014fde:	b942      	cbnz	r2, 8014ff2 <_strtol_l.constprop.0+0xe6>
 8014fe0:	4630      	mov	r0, r6
 8014fe2:	e79e      	b.n	8014f22 <_strtol_l.constprop.0+0x16>
 8014fe4:	b107      	cbz	r7, 8014fe8 <_strtol_l.constprop.0+0xdc>
 8014fe6:	4276      	negs	r6, r6
 8014fe8:	2a00      	cmp	r2, #0
 8014fea:	d0f9      	beq.n	8014fe0 <_strtol_l.constprop.0+0xd4>
 8014fec:	f1bc 0f00 	cmp.w	ip, #0
 8014ff0:	d000      	beq.n	8014ff4 <_strtol_l.constprop.0+0xe8>
 8014ff2:	1e69      	subs	r1, r5, #1
 8014ff4:	6011      	str	r1, [r2, #0]
 8014ff6:	e7f3      	b.n	8014fe0 <_strtol_l.constprop.0+0xd4>
 8014ff8:	2430      	movs	r4, #48	; 0x30
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d1b1      	bne.n	8014f62 <_strtol_l.constprop.0+0x56>
 8014ffe:	2308      	movs	r3, #8
 8015000:	e7af      	b.n	8014f62 <_strtol_l.constprop.0+0x56>
 8015002:	2c30      	cmp	r4, #48	; 0x30
 8015004:	d0a5      	beq.n	8014f52 <_strtol_l.constprop.0+0x46>
 8015006:	230a      	movs	r3, #10
 8015008:	e7ab      	b.n	8014f62 <_strtol_l.constprop.0+0x56>
 801500a:	bf00      	nop
 801500c:	08019439 	.word	0x08019439

08015010 <strtol>:
 8015010:	4613      	mov	r3, r2
 8015012:	460a      	mov	r2, r1
 8015014:	4601      	mov	r1, r0
 8015016:	4802      	ldr	r0, [pc, #8]	; (8015020 <strtol+0x10>)
 8015018:	6800      	ldr	r0, [r0, #0]
 801501a:	f7ff bf77 	b.w	8014f0c <_strtol_l.constprop.0>
 801501e:	bf00      	nop
 8015020:	2000018c 	.word	0x2000018c

08015024 <_vsniprintf_r>:
 8015024:	b530      	push	{r4, r5, lr}
 8015026:	4614      	mov	r4, r2
 8015028:	2c00      	cmp	r4, #0
 801502a:	b09b      	sub	sp, #108	; 0x6c
 801502c:	4605      	mov	r5, r0
 801502e:	461a      	mov	r2, r3
 8015030:	da05      	bge.n	801503e <_vsniprintf_r+0x1a>
 8015032:	238b      	movs	r3, #139	; 0x8b
 8015034:	6003      	str	r3, [r0, #0]
 8015036:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801503a:	b01b      	add	sp, #108	; 0x6c
 801503c:	bd30      	pop	{r4, r5, pc}
 801503e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015042:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015046:	bf14      	ite	ne
 8015048:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801504c:	4623      	moveq	r3, r4
 801504e:	9302      	str	r3, [sp, #8]
 8015050:	9305      	str	r3, [sp, #20]
 8015052:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015056:	9100      	str	r1, [sp, #0]
 8015058:	9104      	str	r1, [sp, #16]
 801505a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801505e:	4669      	mov	r1, sp
 8015060:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015062:	f002 f839 	bl	80170d8 <_svfiprintf_r>
 8015066:	1c43      	adds	r3, r0, #1
 8015068:	bfbc      	itt	lt
 801506a:	238b      	movlt	r3, #139	; 0x8b
 801506c:	602b      	strlt	r3, [r5, #0]
 801506e:	2c00      	cmp	r4, #0
 8015070:	d0e3      	beq.n	801503a <_vsniprintf_r+0x16>
 8015072:	9b00      	ldr	r3, [sp, #0]
 8015074:	2200      	movs	r2, #0
 8015076:	701a      	strb	r2, [r3, #0]
 8015078:	e7df      	b.n	801503a <_vsniprintf_r+0x16>
	...

0801507c <vsniprintf>:
 801507c:	b507      	push	{r0, r1, r2, lr}
 801507e:	9300      	str	r3, [sp, #0]
 8015080:	4613      	mov	r3, r2
 8015082:	460a      	mov	r2, r1
 8015084:	4601      	mov	r1, r0
 8015086:	4803      	ldr	r0, [pc, #12]	; (8015094 <vsniprintf+0x18>)
 8015088:	6800      	ldr	r0, [r0, #0]
 801508a:	f7ff ffcb 	bl	8015024 <_vsniprintf_r>
 801508e:	b003      	add	sp, #12
 8015090:	f85d fb04 	ldr.w	pc, [sp], #4
 8015094:	2000018c 	.word	0x2000018c

08015098 <_write_r>:
 8015098:	b538      	push	{r3, r4, r5, lr}
 801509a:	4d07      	ldr	r5, [pc, #28]	; (80150b8 <_write_r+0x20>)
 801509c:	4604      	mov	r4, r0
 801509e:	4608      	mov	r0, r1
 80150a0:	4611      	mov	r1, r2
 80150a2:	2200      	movs	r2, #0
 80150a4:	602a      	str	r2, [r5, #0]
 80150a6:	461a      	mov	r2, r3
 80150a8:	f7f1 fe75 	bl	8006d96 <_write>
 80150ac:	1c43      	adds	r3, r0, #1
 80150ae:	d102      	bne.n	80150b6 <_write_r+0x1e>
 80150b0:	682b      	ldr	r3, [r5, #0]
 80150b2:	b103      	cbz	r3, 80150b6 <_write_r+0x1e>
 80150b4:	6023      	str	r3, [r4, #0]
 80150b6:	bd38      	pop	{r3, r4, r5, pc}
 80150b8:	200085e4 	.word	0x200085e4

080150bc <_close_r>:
 80150bc:	b538      	push	{r3, r4, r5, lr}
 80150be:	4d06      	ldr	r5, [pc, #24]	; (80150d8 <_close_r+0x1c>)
 80150c0:	2300      	movs	r3, #0
 80150c2:	4604      	mov	r4, r0
 80150c4:	4608      	mov	r0, r1
 80150c6:	602b      	str	r3, [r5, #0]
 80150c8:	f7f1 fe81 	bl	8006dce <_close>
 80150cc:	1c43      	adds	r3, r0, #1
 80150ce:	d102      	bne.n	80150d6 <_close_r+0x1a>
 80150d0:	682b      	ldr	r3, [r5, #0]
 80150d2:	b103      	cbz	r3, 80150d6 <_close_r+0x1a>
 80150d4:	6023      	str	r3, [r4, #0]
 80150d6:	bd38      	pop	{r3, r4, r5, pc}
 80150d8:	200085e4 	.word	0x200085e4

080150dc <quorem>:
 80150dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150e0:	6903      	ldr	r3, [r0, #16]
 80150e2:	690c      	ldr	r4, [r1, #16]
 80150e4:	42a3      	cmp	r3, r4
 80150e6:	4607      	mov	r7, r0
 80150e8:	f2c0 8081 	blt.w	80151ee <quorem+0x112>
 80150ec:	3c01      	subs	r4, #1
 80150ee:	f101 0814 	add.w	r8, r1, #20
 80150f2:	f100 0514 	add.w	r5, r0, #20
 80150f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80150fa:	9301      	str	r3, [sp, #4]
 80150fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015100:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015104:	3301      	adds	r3, #1
 8015106:	429a      	cmp	r2, r3
 8015108:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801510c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015110:	fbb2 f6f3 	udiv	r6, r2, r3
 8015114:	d331      	bcc.n	801517a <quorem+0x9e>
 8015116:	f04f 0e00 	mov.w	lr, #0
 801511a:	4640      	mov	r0, r8
 801511c:	46ac      	mov	ip, r5
 801511e:	46f2      	mov	sl, lr
 8015120:	f850 2b04 	ldr.w	r2, [r0], #4
 8015124:	b293      	uxth	r3, r2
 8015126:	fb06 e303 	mla	r3, r6, r3, lr
 801512a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801512e:	b29b      	uxth	r3, r3
 8015130:	ebaa 0303 	sub.w	r3, sl, r3
 8015134:	f8dc a000 	ldr.w	sl, [ip]
 8015138:	0c12      	lsrs	r2, r2, #16
 801513a:	fa13 f38a 	uxtah	r3, r3, sl
 801513e:	fb06 e202 	mla	r2, r6, r2, lr
 8015142:	9300      	str	r3, [sp, #0]
 8015144:	9b00      	ldr	r3, [sp, #0]
 8015146:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801514a:	b292      	uxth	r2, r2
 801514c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015150:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015154:	f8bd 3000 	ldrh.w	r3, [sp]
 8015158:	4581      	cmp	r9, r0
 801515a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801515e:	f84c 3b04 	str.w	r3, [ip], #4
 8015162:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015166:	d2db      	bcs.n	8015120 <quorem+0x44>
 8015168:	f855 300b 	ldr.w	r3, [r5, fp]
 801516c:	b92b      	cbnz	r3, 801517a <quorem+0x9e>
 801516e:	9b01      	ldr	r3, [sp, #4]
 8015170:	3b04      	subs	r3, #4
 8015172:	429d      	cmp	r5, r3
 8015174:	461a      	mov	r2, r3
 8015176:	d32e      	bcc.n	80151d6 <quorem+0xfa>
 8015178:	613c      	str	r4, [r7, #16]
 801517a:	4638      	mov	r0, r7
 801517c:	f001 fd5c 	bl	8016c38 <__mcmp>
 8015180:	2800      	cmp	r0, #0
 8015182:	db24      	blt.n	80151ce <quorem+0xf2>
 8015184:	3601      	adds	r6, #1
 8015186:	4628      	mov	r0, r5
 8015188:	f04f 0c00 	mov.w	ip, #0
 801518c:	f858 2b04 	ldr.w	r2, [r8], #4
 8015190:	f8d0 e000 	ldr.w	lr, [r0]
 8015194:	b293      	uxth	r3, r2
 8015196:	ebac 0303 	sub.w	r3, ip, r3
 801519a:	0c12      	lsrs	r2, r2, #16
 801519c:	fa13 f38e 	uxtah	r3, r3, lr
 80151a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80151a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80151a8:	b29b      	uxth	r3, r3
 80151aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80151ae:	45c1      	cmp	r9, r8
 80151b0:	f840 3b04 	str.w	r3, [r0], #4
 80151b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80151b8:	d2e8      	bcs.n	801518c <quorem+0xb0>
 80151ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80151be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80151c2:	b922      	cbnz	r2, 80151ce <quorem+0xf2>
 80151c4:	3b04      	subs	r3, #4
 80151c6:	429d      	cmp	r5, r3
 80151c8:	461a      	mov	r2, r3
 80151ca:	d30a      	bcc.n	80151e2 <quorem+0x106>
 80151cc:	613c      	str	r4, [r7, #16]
 80151ce:	4630      	mov	r0, r6
 80151d0:	b003      	add	sp, #12
 80151d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151d6:	6812      	ldr	r2, [r2, #0]
 80151d8:	3b04      	subs	r3, #4
 80151da:	2a00      	cmp	r2, #0
 80151dc:	d1cc      	bne.n	8015178 <quorem+0x9c>
 80151de:	3c01      	subs	r4, #1
 80151e0:	e7c7      	b.n	8015172 <quorem+0x96>
 80151e2:	6812      	ldr	r2, [r2, #0]
 80151e4:	3b04      	subs	r3, #4
 80151e6:	2a00      	cmp	r2, #0
 80151e8:	d1f0      	bne.n	80151cc <quorem+0xf0>
 80151ea:	3c01      	subs	r4, #1
 80151ec:	e7eb      	b.n	80151c6 <quorem+0xea>
 80151ee:	2000      	movs	r0, #0
 80151f0:	e7ee      	b.n	80151d0 <quorem+0xf4>
 80151f2:	0000      	movs	r0, r0
 80151f4:	0000      	movs	r0, r0
	...

080151f8 <_dtoa_r>:
 80151f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151fc:	ed2d 8b04 	vpush	{d8-d9}
 8015200:	ec57 6b10 	vmov	r6, r7, d0
 8015204:	b093      	sub	sp, #76	; 0x4c
 8015206:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015208:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801520c:	9106      	str	r1, [sp, #24]
 801520e:	ee10 aa10 	vmov	sl, s0
 8015212:	4604      	mov	r4, r0
 8015214:	9209      	str	r2, [sp, #36]	; 0x24
 8015216:	930c      	str	r3, [sp, #48]	; 0x30
 8015218:	46bb      	mov	fp, r7
 801521a:	b975      	cbnz	r5, 801523a <_dtoa_r+0x42>
 801521c:	2010      	movs	r0, #16
 801521e:	f7fe f991 	bl	8013544 <malloc>
 8015222:	4602      	mov	r2, r0
 8015224:	6260      	str	r0, [r4, #36]	; 0x24
 8015226:	b920      	cbnz	r0, 8015232 <_dtoa_r+0x3a>
 8015228:	4ba7      	ldr	r3, [pc, #668]	; (80154c8 <_dtoa_r+0x2d0>)
 801522a:	21ea      	movs	r1, #234	; 0xea
 801522c:	48a7      	ldr	r0, [pc, #668]	; (80154cc <_dtoa_r+0x2d4>)
 801522e:	f002 f87d 	bl	801732c <__assert_func>
 8015232:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015236:	6005      	str	r5, [r0, #0]
 8015238:	60c5      	str	r5, [r0, #12]
 801523a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801523c:	6819      	ldr	r1, [r3, #0]
 801523e:	b151      	cbz	r1, 8015256 <_dtoa_r+0x5e>
 8015240:	685a      	ldr	r2, [r3, #4]
 8015242:	604a      	str	r2, [r1, #4]
 8015244:	2301      	movs	r3, #1
 8015246:	4093      	lsls	r3, r2
 8015248:	608b      	str	r3, [r1, #8]
 801524a:	4620      	mov	r0, r4
 801524c:	f001 fa68 	bl	8016720 <_Bfree>
 8015250:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015252:	2200      	movs	r2, #0
 8015254:	601a      	str	r2, [r3, #0]
 8015256:	1e3b      	subs	r3, r7, #0
 8015258:	bfaa      	itet	ge
 801525a:	2300      	movge	r3, #0
 801525c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8015260:	f8c8 3000 	strge.w	r3, [r8]
 8015264:	4b9a      	ldr	r3, [pc, #616]	; (80154d0 <_dtoa_r+0x2d8>)
 8015266:	bfbc      	itt	lt
 8015268:	2201      	movlt	r2, #1
 801526a:	f8c8 2000 	strlt.w	r2, [r8]
 801526e:	ea33 030b 	bics.w	r3, r3, fp
 8015272:	d11b      	bne.n	80152ac <_dtoa_r+0xb4>
 8015274:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015276:	f242 730f 	movw	r3, #9999	; 0x270f
 801527a:	6013      	str	r3, [r2, #0]
 801527c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015280:	4333      	orrs	r3, r6
 8015282:	f000 8592 	beq.w	8015daa <_dtoa_r+0xbb2>
 8015286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015288:	b963      	cbnz	r3, 80152a4 <_dtoa_r+0xac>
 801528a:	4b92      	ldr	r3, [pc, #584]	; (80154d4 <_dtoa_r+0x2dc>)
 801528c:	e022      	b.n	80152d4 <_dtoa_r+0xdc>
 801528e:	4b92      	ldr	r3, [pc, #584]	; (80154d8 <_dtoa_r+0x2e0>)
 8015290:	9301      	str	r3, [sp, #4]
 8015292:	3308      	adds	r3, #8
 8015294:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015296:	6013      	str	r3, [r2, #0]
 8015298:	9801      	ldr	r0, [sp, #4]
 801529a:	b013      	add	sp, #76	; 0x4c
 801529c:	ecbd 8b04 	vpop	{d8-d9}
 80152a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152a4:	4b8b      	ldr	r3, [pc, #556]	; (80154d4 <_dtoa_r+0x2dc>)
 80152a6:	9301      	str	r3, [sp, #4]
 80152a8:	3303      	adds	r3, #3
 80152aa:	e7f3      	b.n	8015294 <_dtoa_r+0x9c>
 80152ac:	2200      	movs	r2, #0
 80152ae:	2300      	movs	r3, #0
 80152b0:	4650      	mov	r0, sl
 80152b2:	4659      	mov	r1, fp
 80152b4:	f7eb fc08 	bl	8000ac8 <__aeabi_dcmpeq>
 80152b8:	ec4b ab19 	vmov	d9, sl, fp
 80152bc:	4680      	mov	r8, r0
 80152be:	b158      	cbz	r0, 80152d8 <_dtoa_r+0xe0>
 80152c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80152c2:	2301      	movs	r3, #1
 80152c4:	6013      	str	r3, [r2, #0]
 80152c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	f000 856b 	beq.w	8015da4 <_dtoa_r+0xbac>
 80152ce:	4883      	ldr	r0, [pc, #524]	; (80154dc <_dtoa_r+0x2e4>)
 80152d0:	6018      	str	r0, [r3, #0]
 80152d2:	1e43      	subs	r3, r0, #1
 80152d4:	9301      	str	r3, [sp, #4]
 80152d6:	e7df      	b.n	8015298 <_dtoa_r+0xa0>
 80152d8:	ec4b ab10 	vmov	d0, sl, fp
 80152dc:	aa10      	add	r2, sp, #64	; 0x40
 80152de:	a911      	add	r1, sp, #68	; 0x44
 80152e0:	4620      	mov	r0, r4
 80152e2:	f001 fdcb 	bl	8016e7c <__d2b>
 80152e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80152ea:	ee08 0a10 	vmov	s16, r0
 80152ee:	2d00      	cmp	r5, #0
 80152f0:	f000 8084 	beq.w	80153fc <_dtoa_r+0x204>
 80152f4:	ee19 3a90 	vmov	r3, s19
 80152f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80152fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8015300:	4656      	mov	r6, sl
 8015302:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8015306:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801530a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801530e:	4b74      	ldr	r3, [pc, #464]	; (80154e0 <_dtoa_r+0x2e8>)
 8015310:	2200      	movs	r2, #0
 8015312:	4630      	mov	r0, r6
 8015314:	4639      	mov	r1, r7
 8015316:	f7ea ffb7 	bl	8000288 <__aeabi_dsub>
 801531a:	a365      	add	r3, pc, #404	; (adr r3, 80154b0 <_dtoa_r+0x2b8>)
 801531c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015320:	f7eb f96a 	bl	80005f8 <__aeabi_dmul>
 8015324:	a364      	add	r3, pc, #400	; (adr r3, 80154b8 <_dtoa_r+0x2c0>)
 8015326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801532a:	f7ea ffaf 	bl	800028c <__adddf3>
 801532e:	4606      	mov	r6, r0
 8015330:	4628      	mov	r0, r5
 8015332:	460f      	mov	r7, r1
 8015334:	f7eb f8f6 	bl	8000524 <__aeabi_i2d>
 8015338:	a361      	add	r3, pc, #388	; (adr r3, 80154c0 <_dtoa_r+0x2c8>)
 801533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801533e:	f7eb f95b 	bl	80005f8 <__aeabi_dmul>
 8015342:	4602      	mov	r2, r0
 8015344:	460b      	mov	r3, r1
 8015346:	4630      	mov	r0, r6
 8015348:	4639      	mov	r1, r7
 801534a:	f7ea ff9f 	bl	800028c <__adddf3>
 801534e:	4606      	mov	r6, r0
 8015350:	460f      	mov	r7, r1
 8015352:	f7eb fc01 	bl	8000b58 <__aeabi_d2iz>
 8015356:	2200      	movs	r2, #0
 8015358:	9000      	str	r0, [sp, #0]
 801535a:	2300      	movs	r3, #0
 801535c:	4630      	mov	r0, r6
 801535e:	4639      	mov	r1, r7
 8015360:	f7eb fbbc 	bl	8000adc <__aeabi_dcmplt>
 8015364:	b150      	cbz	r0, 801537c <_dtoa_r+0x184>
 8015366:	9800      	ldr	r0, [sp, #0]
 8015368:	f7eb f8dc 	bl	8000524 <__aeabi_i2d>
 801536c:	4632      	mov	r2, r6
 801536e:	463b      	mov	r3, r7
 8015370:	f7eb fbaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8015374:	b910      	cbnz	r0, 801537c <_dtoa_r+0x184>
 8015376:	9b00      	ldr	r3, [sp, #0]
 8015378:	3b01      	subs	r3, #1
 801537a:	9300      	str	r3, [sp, #0]
 801537c:	9b00      	ldr	r3, [sp, #0]
 801537e:	2b16      	cmp	r3, #22
 8015380:	d85a      	bhi.n	8015438 <_dtoa_r+0x240>
 8015382:	9a00      	ldr	r2, [sp, #0]
 8015384:	4b57      	ldr	r3, [pc, #348]	; (80154e4 <_dtoa_r+0x2ec>)
 8015386:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801538a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801538e:	ec51 0b19 	vmov	r0, r1, d9
 8015392:	f7eb fba3 	bl	8000adc <__aeabi_dcmplt>
 8015396:	2800      	cmp	r0, #0
 8015398:	d050      	beq.n	801543c <_dtoa_r+0x244>
 801539a:	9b00      	ldr	r3, [sp, #0]
 801539c:	3b01      	subs	r3, #1
 801539e:	9300      	str	r3, [sp, #0]
 80153a0:	2300      	movs	r3, #0
 80153a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80153a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80153a6:	1b5d      	subs	r5, r3, r5
 80153a8:	1e6b      	subs	r3, r5, #1
 80153aa:	9305      	str	r3, [sp, #20]
 80153ac:	bf45      	ittet	mi
 80153ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80153b2:	9304      	strmi	r3, [sp, #16]
 80153b4:	2300      	movpl	r3, #0
 80153b6:	2300      	movmi	r3, #0
 80153b8:	bf4c      	ite	mi
 80153ba:	9305      	strmi	r3, [sp, #20]
 80153bc:	9304      	strpl	r3, [sp, #16]
 80153be:	9b00      	ldr	r3, [sp, #0]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	db3d      	blt.n	8015440 <_dtoa_r+0x248>
 80153c4:	9b05      	ldr	r3, [sp, #20]
 80153c6:	9a00      	ldr	r2, [sp, #0]
 80153c8:	920a      	str	r2, [sp, #40]	; 0x28
 80153ca:	4413      	add	r3, r2
 80153cc:	9305      	str	r3, [sp, #20]
 80153ce:	2300      	movs	r3, #0
 80153d0:	9307      	str	r3, [sp, #28]
 80153d2:	9b06      	ldr	r3, [sp, #24]
 80153d4:	2b09      	cmp	r3, #9
 80153d6:	f200 8089 	bhi.w	80154ec <_dtoa_r+0x2f4>
 80153da:	2b05      	cmp	r3, #5
 80153dc:	bfc4      	itt	gt
 80153de:	3b04      	subgt	r3, #4
 80153e0:	9306      	strgt	r3, [sp, #24]
 80153e2:	9b06      	ldr	r3, [sp, #24]
 80153e4:	f1a3 0302 	sub.w	r3, r3, #2
 80153e8:	bfcc      	ite	gt
 80153ea:	2500      	movgt	r5, #0
 80153ec:	2501      	movle	r5, #1
 80153ee:	2b03      	cmp	r3, #3
 80153f0:	f200 8087 	bhi.w	8015502 <_dtoa_r+0x30a>
 80153f4:	e8df f003 	tbb	[pc, r3]
 80153f8:	59383a2d 	.word	0x59383a2d
 80153fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8015400:	441d      	add	r5, r3
 8015402:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015406:	2b20      	cmp	r3, #32
 8015408:	bfc1      	itttt	gt
 801540a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801540e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8015412:	fa0b f303 	lslgt.w	r3, fp, r3
 8015416:	fa26 f000 	lsrgt.w	r0, r6, r0
 801541a:	bfda      	itte	le
 801541c:	f1c3 0320 	rsble	r3, r3, #32
 8015420:	fa06 f003 	lslle.w	r0, r6, r3
 8015424:	4318      	orrgt	r0, r3
 8015426:	f7eb f86d 	bl	8000504 <__aeabi_ui2d>
 801542a:	2301      	movs	r3, #1
 801542c:	4606      	mov	r6, r0
 801542e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015432:	3d01      	subs	r5, #1
 8015434:	930e      	str	r3, [sp, #56]	; 0x38
 8015436:	e76a      	b.n	801530e <_dtoa_r+0x116>
 8015438:	2301      	movs	r3, #1
 801543a:	e7b2      	b.n	80153a2 <_dtoa_r+0x1aa>
 801543c:	900b      	str	r0, [sp, #44]	; 0x2c
 801543e:	e7b1      	b.n	80153a4 <_dtoa_r+0x1ac>
 8015440:	9b04      	ldr	r3, [sp, #16]
 8015442:	9a00      	ldr	r2, [sp, #0]
 8015444:	1a9b      	subs	r3, r3, r2
 8015446:	9304      	str	r3, [sp, #16]
 8015448:	4253      	negs	r3, r2
 801544a:	9307      	str	r3, [sp, #28]
 801544c:	2300      	movs	r3, #0
 801544e:	930a      	str	r3, [sp, #40]	; 0x28
 8015450:	e7bf      	b.n	80153d2 <_dtoa_r+0x1da>
 8015452:	2300      	movs	r3, #0
 8015454:	9308      	str	r3, [sp, #32]
 8015456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015458:	2b00      	cmp	r3, #0
 801545a:	dc55      	bgt.n	8015508 <_dtoa_r+0x310>
 801545c:	2301      	movs	r3, #1
 801545e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015462:	461a      	mov	r2, r3
 8015464:	9209      	str	r2, [sp, #36]	; 0x24
 8015466:	e00c      	b.n	8015482 <_dtoa_r+0x28a>
 8015468:	2301      	movs	r3, #1
 801546a:	e7f3      	b.n	8015454 <_dtoa_r+0x25c>
 801546c:	2300      	movs	r3, #0
 801546e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015470:	9308      	str	r3, [sp, #32]
 8015472:	9b00      	ldr	r3, [sp, #0]
 8015474:	4413      	add	r3, r2
 8015476:	9302      	str	r3, [sp, #8]
 8015478:	3301      	adds	r3, #1
 801547a:	2b01      	cmp	r3, #1
 801547c:	9303      	str	r3, [sp, #12]
 801547e:	bfb8      	it	lt
 8015480:	2301      	movlt	r3, #1
 8015482:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015484:	2200      	movs	r2, #0
 8015486:	6042      	str	r2, [r0, #4]
 8015488:	2204      	movs	r2, #4
 801548a:	f102 0614 	add.w	r6, r2, #20
 801548e:	429e      	cmp	r6, r3
 8015490:	6841      	ldr	r1, [r0, #4]
 8015492:	d93d      	bls.n	8015510 <_dtoa_r+0x318>
 8015494:	4620      	mov	r0, r4
 8015496:	f001 f903 	bl	80166a0 <_Balloc>
 801549a:	9001      	str	r0, [sp, #4]
 801549c:	2800      	cmp	r0, #0
 801549e:	d13b      	bne.n	8015518 <_dtoa_r+0x320>
 80154a0:	4b11      	ldr	r3, [pc, #68]	; (80154e8 <_dtoa_r+0x2f0>)
 80154a2:	4602      	mov	r2, r0
 80154a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80154a8:	e6c0      	b.n	801522c <_dtoa_r+0x34>
 80154aa:	2301      	movs	r3, #1
 80154ac:	e7df      	b.n	801546e <_dtoa_r+0x276>
 80154ae:	bf00      	nop
 80154b0:	636f4361 	.word	0x636f4361
 80154b4:	3fd287a7 	.word	0x3fd287a7
 80154b8:	8b60c8b3 	.word	0x8b60c8b3
 80154bc:	3fc68a28 	.word	0x3fc68a28
 80154c0:	509f79fb 	.word	0x509f79fb
 80154c4:	3fd34413 	.word	0x3fd34413
 80154c8:	08019635 	.word	0x08019635
 80154cc:	0801964c 	.word	0x0801964c
 80154d0:	7ff00000 	.word	0x7ff00000
 80154d4:	08019631 	.word	0x08019631
 80154d8:	08019628 	.word	0x08019628
 80154dc:	080195b1 	.word	0x080195b1
 80154e0:	3ff80000 	.word	0x3ff80000
 80154e4:	080197b8 	.word	0x080197b8
 80154e8:	080196a7 	.word	0x080196a7
 80154ec:	2501      	movs	r5, #1
 80154ee:	2300      	movs	r3, #0
 80154f0:	9306      	str	r3, [sp, #24]
 80154f2:	9508      	str	r5, [sp, #32]
 80154f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80154f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80154fc:	2200      	movs	r2, #0
 80154fe:	2312      	movs	r3, #18
 8015500:	e7b0      	b.n	8015464 <_dtoa_r+0x26c>
 8015502:	2301      	movs	r3, #1
 8015504:	9308      	str	r3, [sp, #32]
 8015506:	e7f5      	b.n	80154f4 <_dtoa_r+0x2fc>
 8015508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801550a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801550e:	e7b8      	b.n	8015482 <_dtoa_r+0x28a>
 8015510:	3101      	adds	r1, #1
 8015512:	6041      	str	r1, [r0, #4]
 8015514:	0052      	lsls	r2, r2, #1
 8015516:	e7b8      	b.n	801548a <_dtoa_r+0x292>
 8015518:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801551a:	9a01      	ldr	r2, [sp, #4]
 801551c:	601a      	str	r2, [r3, #0]
 801551e:	9b03      	ldr	r3, [sp, #12]
 8015520:	2b0e      	cmp	r3, #14
 8015522:	f200 809d 	bhi.w	8015660 <_dtoa_r+0x468>
 8015526:	2d00      	cmp	r5, #0
 8015528:	f000 809a 	beq.w	8015660 <_dtoa_r+0x468>
 801552c:	9b00      	ldr	r3, [sp, #0]
 801552e:	2b00      	cmp	r3, #0
 8015530:	dd32      	ble.n	8015598 <_dtoa_r+0x3a0>
 8015532:	4ab7      	ldr	r2, [pc, #732]	; (8015810 <_dtoa_r+0x618>)
 8015534:	f003 030f 	and.w	r3, r3, #15
 8015538:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801553c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015540:	9b00      	ldr	r3, [sp, #0]
 8015542:	05d8      	lsls	r0, r3, #23
 8015544:	ea4f 1723 	mov.w	r7, r3, asr #4
 8015548:	d516      	bpl.n	8015578 <_dtoa_r+0x380>
 801554a:	4bb2      	ldr	r3, [pc, #712]	; (8015814 <_dtoa_r+0x61c>)
 801554c:	ec51 0b19 	vmov	r0, r1, d9
 8015550:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015554:	f7eb f97a 	bl	800084c <__aeabi_ddiv>
 8015558:	f007 070f 	and.w	r7, r7, #15
 801555c:	4682      	mov	sl, r0
 801555e:	468b      	mov	fp, r1
 8015560:	2503      	movs	r5, #3
 8015562:	4eac      	ldr	r6, [pc, #688]	; (8015814 <_dtoa_r+0x61c>)
 8015564:	b957      	cbnz	r7, 801557c <_dtoa_r+0x384>
 8015566:	4642      	mov	r2, r8
 8015568:	464b      	mov	r3, r9
 801556a:	4650      	mov	r0, sl
 801556c:	4659      	mov	r1, fp
 801556e:	f7eb f96d 	bl	800084c <__aeabi_ddiv>
 8015572:	4682      	mov	sl, r0
 8015574:	468b      	mov	fp, r1
 8015576:	e028      	b.n	80155ca <_dtoa_r+0x3d2>
 8015578:	2502      	movs	r5, #2
 801557a:	e7f2      	b.n	8015562 <_dtoa_r+0x36a>
 801557c:	07f9      	lsls	r1, r7, #31
 801557e:	d508      	bpl.n	8015592 <_dtoa_r+0x39a>
 8015580:	4640      	mov	r0, r8
 8015582:	4649      	mov	r1, r9
 8015584:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015588:	f7eb f836 	bl	80005f8 <__aeabi_dmul>
 801558c:	3501      	adds	r5, #1
 801558e:	4680      	mov	r8, r0
 8015590:	4689      	mov	r9, r1
 8015592:	107f      	asrs	r7, r7, #1
 8015594:	3608      	adds	r6, #8
 8015596:	e7e5      	b.n	8015564 <_dtoa_r+0x36c>
 8015598:	f000 809b 	beq.w	80156d2 <_dtoa_r+0x4da>
 801559c:	9b00      	ldr	r3, [sp, #0]
 801559e:	4f9d      	ldr	r7, [pc, #628]	; (8015814 <_dtoa_r+0x61c>)
 80155a0:	425e      	negs	r6, r3
 80155a2:	4b9b      	ldr	r3, [pc, #620]	; (8015810 <_dtoa_r+0x618>)
 80155a4:	f006 020f 	and.w	r2, r6, #15
 80155a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80155ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155b0:	ec51 0b19 	vmov	r0, r1, d9
 80155b4:	f7eb f820 	bl	80005f8 <__aeabi_dmul>
 80155b8:	1136      	asrs	r6, r6, #4
 80155ba:	4682      	mov	sl, r0
 80155bc:	468b      	mov	fp, r1
 80155be:	2300      	movs	r3, #0
 80155c0:	2502      	movs	r5, #2
 80155c2:	2e00      	cmp	r6, #0
 80155c4:	d17a      	bne.n	80156bc <_dtoa_r+0x4c4>
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d1d3      	bne.n	8015572 <_dtoa_r+0x37a>
 80155ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	f000 8082 	beq.w	80156d6 <_dtoa_r+0x4de>
 80155d2:	4b91      	ldr	r3, [pc, #580]	; (8015818 <_dtoa_r+0x620>)
 80155d4:	2200      	movs	r2, #0
 80155d6:	4650      	mov	r0, sl
 80155d8:	4659      	mov	r1, fp
 80155da:	f7eb fa7f 	bl	8000adc <__aeabi_dcmplt>
 80155de:	2800      	cmp	r0, #0
 80155e0:	d079      	beq.n	80156d6 <_dtoa_r+0x4de>
 80155e2:	9b03      	ldr	r3, [sp, #12]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d076      	beq.n	80156d6 <_dtoa_r+0x4de>
 80155e8:	9b02      	ldr	r3, [sp, #8]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	dd36      	ble.n	801565c <_dtoa_r+0x464>
 80155ee:	9b00      	ldr	r3, [sp, #0]
 80155f0:	4650      	mov	r0, sl
 80155f2:	4659      	mov	r1, fp
 80155f4:	1e5f      	subs	r7, r3, #1
 80155f6:	2200      	movs	r2, #0
 80155f8:	4b88      	ldr	r3, [pc, #544]	; (801581c <_dtoa_r+0x624>)
 80155fa:	f7ea fffd 	bl	80005f8 <__aeabi_dmul>
 80155fe:	9e02      	ldr	r6, [sp, #8]
 8015600:	4682      	mov	sl, r0
 8015602:	468b      	mov	fp, r1
 8015604:	3501      	adds	r5, #1
 8015606:	4628      	mov	r0, r5
 8015608:	f7ea ff8c 	bl	8000524 <__aeabi_i2d>
 801560c:	4652      	mov	r2, sl
 801560e:	465b      	mov	r3, fp
 8015610:	f7ea fff2 	bl	80005f8 <__aeabi_dmul>
 8015614:	4b82      	ldr	r3, [pc, #520]	; (8015820 <_dtoa_r+0x628>)
 8015616:	2200      	movs	r2, #0
 8015618:	f7ea fe38 	bl	800028c <__adddf3>
 801561c:	46d0      	mov	r8, sl
 801561e:	46d9      	mov	r9, fp
 8015620:	4682      	mov	sl, r0
 8015622:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8015626:	2e00      	cmp	r6, #0
 8015628:	d158      	bne.n	80156dc <_dtoa_r+0x4e4>
 801562a:	4b7e      	ldr	r3, [pc, #504]	; (8015824 <_dtoa_r+0x62c>)
 801562c:	2200      	movs	r2, #0
 801562e:	4640      	mov	r0, r8
 8015630:	4649      	mov	r1, r9
 8015632:	f7ea fe29 	bl	8000288 <__aeabi_dsub>
 8015636:	4652      	mov	r2, sl
 8015638:	465b      	mov	r3, fp
 801563a:	4680      	mov	r8, r0
 801563c:	4689      	mov	r9, r1
 801563e:	f7eb fa6b 	bl	8000b18 <__aeabi_dcmpgt>
 8015642:	2800      	cmp	r0, #0
 8015644:	f040 8295 	bne.w	8015b72 <_dtoa_r+0x97a>
 8015648:	4652      	mov	r2, sl
 801564a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801564e:	4640      	mov	r0, r8
 8015650:	4649      	mov	r1, r9
 8015652:	f7eb fa43 	bl	8000adc <__aeabi_dcmplt>
 8015656:	2800      	cmp	r0, #0
 8015658:	f040 8289 	bne.w	8015b6e <_dtoa_r+0x976>
 801565c:	ec5b ab19 	vmov	sl, fp, d9
 8015660:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015662:	2b00      	cmp	r3, #0
 8015664:	f2c0 8148 	blt.w	80158f8 <_dtoa_r+0x700>
 8015668:	9a00      	ldr	r2, [sp, #0]
 801566a:	2a0e      	cmp	r2, #14
 801566c:	f300 8144 	bgt.w	80158f8 <_dtoa_r+0x700>
 8015670:	4b67      	ldr	r3, [pc, #412]	; (8015810 <_dtoa_r+0x618>)
 8015672:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015676:	e9d3 8900 	ldrd	r8, r9, [r3]
 801567a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801567c:	2b00      	cmp	r3, #0
 801567e:	f280 80d5 	bge.w	801582c <_dtoa_r+0x634>
 8015682:	9b03      	ldr	r3, [sp, #12]
 8015684:	2b00      	cmp	r3, #0
 8015686:	f300 80d1 	bgt.w	801582c <_dtoa_r+0x634>
 801568a:	f040 826f 	bne.w	8015b6c <_dtoa_r+0x974>
 801568e:	4b65      	ldr	r3, [pc, #404]	; (8015824 <_dtoa_r+0x62c>)
 8015690:	2200      	movs	r2, #0
 8015692:	4640      	mov	r0, r8
 8015694:	4649      	mov	r1, r9
 8015696:	f7ea ffaf 	bl	80005f8 <__aeabi_dmul>
 801569a:	4652      	mov	r2, sl
 801569c:	465b      	mov	r3, fp
 801569e:	f7eb fa31 	bl	8000b04 <__aeabi_dcmpge>
 80156a2:	9e03      	ldr	r6, [sp, #12]
 80156a4:	4637      	mov	r7, r6
 80156a6:	2800      	cmp	r0, #0
 80156a8:	f040 8245 	bne.w	8015b36 <_dtoa_r+0x93e>
 80156ac:	9d01      	ldr	r5, [sp, #4]
 80156ae:	2331      	movs	r3, #49	; 0x31
 80156b0:	f805 3b01 	strb.w	r3, [r5], #1
 80156b4:	9b00      	ldr	r3, [sp, #0]
 80156b6:	3301      	adds	r3, #1
 80156b8:	9300      	str	r3, [sp, #0]
 80156ba:	e240      	b.n	8015b3e <_dtoa_r+0x946>
 80156bc:	07f2      	lsls	r2, r6, #31
 80156be:	d505      	bpl.n	80156cc <_dtoa_r+0x4d4>
 80156c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80156c4:	f7ea ff98 	bl	80005f8 <__aeabi_dmul>
 80156c8:	3501      	adds	r5, #1
 80156ca:	2301      	movs	r3, #1
 80156cc:	1076      	asrs	r6, r6, #1
 80156ce:	3708      	adds	r7, #8
 80156d0:	e777      	b.n	80155c2 <_dtoa_r+0x3ca>
 80156d2:	2502      	movs	r5, #2
 80156d4:	e779      	b.n	80155ca <_dtoa_r+0x3d2>
 80156d6:	9f00      	ldr	r7, [sp, #0]
 80156d8:	9e03      	ldr	r6, [sp, #12]
 80156da:	e794      	b.n	8015606 <_dtoa_r+0x40e>
 80156dc:	9901      	ldr	r1, [sp, #4]
 80156de:	4b4c      	ldr	r3, [pc, #304]	; (8015810 <_dtoa_r+0x618>)
 80156e0:	4431      	add	r1, r6
 80156e2:	910d      	str	r1, [sp, #52]	; 0x34
 80156e4:	9908      	ldr	r1, [sp, #32]
 80156e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80156ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80156ee:	2900      	cmp	r1, #0
 80156f0:	d043      	beq.n	801577a <_dtoa_r+0x582>
 80156f2:	494d      	ldr	r1, [pc, #308]	; (8015828 <_dtoa_r+0x630>)
 80156f4:	2000      	movs	r0, #0
 80156f6:	f7eb f8a9 	bl	800084c <__aeabi_ddiv>
 80156fa:	4652      	mov	r2, sl
 80156fc:	465b      	mov	r3, fp
 80156fe:	f7ea fdc3 	bl	8000288 <__aeabi_dsub>
 8015702:	9d01      	ldr	r5, [sp, #4]
 8015704:	4682      	mov	sl, r0
 8015706:	468b      	mov	fp, r1
 8015708:	4649      	mov	r1, r9
 801570a:	4640      	mov	r0, r8
 801570c:	f7eb fa24 	bl	8000b58 <__aeabi_d2iz>
 8015710:	4606      	mov	r6, r0
 8015712:	f7ea ff07 	bl	8000524 <__aeabi_i2d>
 8015716:	4602      	mov	r2, r0
 8015718:	460b      	mov	r3, r1
 801571a:	4640      	mov	r0, r8
 801571c:	4649      	mov	r1, r9
 801571e:	f7ea fdb3 	bl	8000288 <__aeabi_dsub>
 8015722:	3630      	adds	r6, #48	; 0x30
 8015724:	f805 6b01 	strb.w	r6, [r5], #1
 8015728:	4652      	mov	r2, sl
 801572a:	465b      	mov	r3, fp
 801572c:	4680      	mov	r8, r0
 801572e:	4689      	mov	r9, r1
 8015730:	f7eb f9d4 	bl	8000adc <__aeabi_dcmplt>
 8015734:	2800      	cmp	r0, #0
 8015736:	d163      	bne.n	8015800 <_dtoa_r+0x608>
 8015738:	4642      	mov	r2, r8
 801573a:	464b      	mov	r3, r9
 801573c:	4936      	ldr	r1, [pc, #216]	; (8015818 <_dtoa_r+0x620>)
 801573e:	2000      	movs	r0, #0
 8015740:	f7ea fda2 	bl	8000288 <__aeabi_dsub>
 8015744:	4652      	mov	r2, sl
 8015746:	465b      	mov	r3, fp
 8015748:	f7eb f9c8 	bl	8000adc <__aeabi_dcmplt>
 801574c:	2800      	cmp	r0, #0
 801574e:	f040 80b5 	bne.w	80158bc <_dtoa_r+0x6c4>
 8015752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015754:	429d      	cmp	r5, r3
 8015756:	d081      	beq.n	801565c <_dtoa_r+0x464>
 8015758:	4b30      	ldr	r3, [pc, #192]	; (801581c <_dtoa_r+0x624>)
 801575a:	2200      	movs	r2, #0
 801575c:	4650      	mov	r0, sl
 801575e:	4659      	mov	r1, fp
 8015760:	f7ea ff4a 	bl	80005f8 <__aeabi_dmul>
 8015764:	4b2d      	ldr	r3, [pc, #180]	; (801581c <_dtoa_r+0x624>)
 8015766:	4682      	mov	sl, r0
 8015768:	468b      	mov	fp, r1
 801576a:	4640      	mov	r0, r8
 801576c:	4649      	mov	r1, r9
 801576e:	2200      	movs	r2, #0
 8015770:	f7ea ff42 	bl	80005f8 <__aeabi_dmul>
 8015774:	4680      	mov	r8, r0
 8015776:	4689      	mov	r9, r1
 8015778:	e7c6      	b.n	8015708 <_dtoa_r+0x510>
 801577a:	4650      	mov	r0, sl
 801577c:	4659      	mov	r1, fp
 801577e:	f7ea ff3b 	bl	80005f8 <__aeabi_dmul>
 8015782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015784:	9d01      	ldr	r5, [sp, #4]
 8015786:	930f      	str	r3, [sp, #60]	; 0x3c
 8015788:	4682      	mov	sl, r0
 801578a:	468b      	mov	fp, r1
 801578c:	4649      	mov	r1, r9
 801578e:	4640      	mov	r0, r8
 8015790:	f7eb f9e2 	bl	8000b58 <__aeabi_d2iz>
 8015794:	4606      	mov	r6, r0
 8015796:	f7ea fec5 	bl	8000524 <__aeabi_i2d>
 801579a:	3630      	adds	r6, #48	; 0x30
 801579c:	4602      	mov	r2, r0
 801579e:	460b      	mov	r3, r1
 80157a0:	4640      	mov	r0, r8
 80157a2:	4649      	mov	r1, r9
 80157a4:	f7ea fd70 	bl	8000288 <__aeabi_dsub>
 80157a8:	f805 6b01 	strb.w	r6, [r5], #1
 80157ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80157ae:	429d      	cmp	r5, r3
 80157b0:	4680      	mov	r8, r0
 80157b2:	4689      	mov	r9, r1
 80157b4:	f04f 0200 	mov.w	r2, #0
 80157b8:	d124      	bne.n	8015804 <_dtoa_r+0x60c>
 80157ba:	4b1b      	ldr	r3, [pc, #108]	; (8015828 <_dtoa_r+0x630>)
 80157bc:	4650      	mov	r0, sl
 80157be:	4659      	mov	r1, fp
 80157c0:	f7ea fd64 	bl	800028c <__adddf3>
 80157c4:	4602      	mov	r2, r0
 80157c6:	460b      	mov	r3, r1
 80157c8:	4640      	mov	r0, r8
 80157ca:	4649      	mov	r1, r9
 80157cc:	f7eb f9a4 	bl	8000b18 <__aeabi_dcmpgt>
 80157d0:	2800      	cmp	r0, #0
 80157d2:	d173      	bne.n	80158bc <_dtoa_r+0x6c4>
 80157d4:	4652      	mov	r2, sl
 80157d6:	465b      	mov	r3, fp
 80157d8:	4913      	ldr	r1, [pc, #76]	; (8015828 <_dtoa_r+0x630>)
 80157da:	2000      	movs	r0, #0
 80157dc:	f7ea fd54 	bl	8000288 <__aeabi_dsub>
 80157e0:	4602      	mov	r2, r0
 80157e2:	460b      	mov	r3, r1
 80157e4:	4640      	mov	r0, r8
 80157e6:	4649      	mov	r1, r9
 80157e8:	f7eb f978 	bl	8000adc <__aeabi_dcmplt>
 80157ec:	2800      	cmp	r0, #0
 80157ee:	f43f af35 	beq.w	801565c <_dtoa_r+0x464>
 80157f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80157f4:	1e6b      	subs	r3, r5, #1
 80157f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80157f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80157fc:	2b30      	cmp	r3, #48	; 0x30
 80157fe:	d0f8      	beq.n	80157f2 <_dtoa_r+0x5fa>
 8015800:	9700      	str	r7, [sp, #0]
 8015802:	e049      	b.n	8015898 <_dtoa_r+0x6a0>
 8015804:	4b05      	ldr	r3, [pc, #20]	; (801581c <_dtoa_r+0x624>)
 8015806:	f7ea fef7 	bl	80005f8 <__aeabi_dmul>
 801580a:	4680      	mov	r8, r0
 801580c:	4689      	mov	r9, r1
 801580e:	e7bd      	b.n	801578c <_dtoa_r+0x594>
 8015810:	080197b8 	.word	0x080197b8
 8015814:	08019790 	.word	0x08019790
 8015818:	3ff00000 	.word	0x3ff00000
 801581c:	40240000 	.word	0x40240000
 8015820:	401c0000 	.word	0x401c0000
 8015824:	40140000 	.word	0x40140000
 8015828:	3fe00000 	.word	0x3fe00000
 801582c:	9d01      	ldr	r5, [sp, #4]
 801582e:	4656      	mov	r6, sl
 8015830:	465f      	mov	r7, fp
 8015832:	4642      	mov	r2, r8
 8015834:	464b      	mov	r3, r9
 8015836:	4630      	mov	r0, r6
 8015838:	4639      	mov	r1, r7
 801583a:	f7eb f807 	bl	800084c <__aeabi_ddiv>
 801583e:	f7eb f98b 	bl	8000b58 <__aeabi_d2iz>
 8015842:	4682      	mov	sl, r0
 8015844:	f7ea fe6e 	bl	8000524 <__aeabi_i2d>
 8015848:	4642      	mov	r2, r8
 801584a:	464b      	mov	r3, r9
 801584c:	f7ea fed4 	bl	80005f8 <__aeabi_dmul>
 8015850:	4602      	mov	r2, r0
 8015852:	460b      	mov	r3, r1
 8015854:	4630      	mov	r0, r6
 8015856:	4639      	mov	r1, r7
 8015858:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801585c:	f7ea fd14 	bl	8000288 <__aeabi_dsub>
 8015860:	f805 6b01 	strb.w	r6, [r5], #1
 8015864:	9e01      	ldr	r6, [sp, #4]
 8015866:	9f03      	ldr	r7, [sp, #12]
 8015868:	1bae      	subs	r6, r5, r6
 801586a:	42b7      	cmp	r7, r6
 801586c:	4602      	mov	r2, r0
 801586e:	460b      	mov	r3, r1
 8015870:	d135      	bne.n	80158de <_dtoa_r+0x6e6>
 8015872:	f7ea fd0b 	bl	800028c <__adddf3>
 8015876:	4642      	mov	r2, r8
 8015878:	464b      	mov	r3, r9
 801587a:	4606      	mov	r6, r0
 801587c:	460f      	mov	r7, r1
 801587e:	f7eb f94b 	bl	8000b18 <__aeabi_dcmpgt>
 8015882:	b9d0      	cbnz	r0, 80158ba <_dtoa_r+0x6c2>
 8015884:	4642      	mov	r2, r8
 8015886:	464b      	mov	r3, r9
 8015888:	4630      	mov	r0, r6
 801588a:	4639      	mov	r1, r7
 801588c:	f7eb f91c 	bl	8000ac8 <__aeabi_dcmpeq>
 8015890:	b110      	cbz	r0, 8015898 <_dtoa_r+0x6a0>
 8015892:	f01a 0f01 	tst.w	sl, #1
 8015896:	d110      	bne.n	80158ba <_dtoa_r+0x6c2>
 8015898:	4620      	mov	r0, r4
 801589a:	ee18 1a10 	vmov	r1, s16
 801589e:	f000 ff3f 	bl	8016720 <_Bfree>
 80158a2:	2300      	movs	r3, #0
 80158a4:	9800      	ldr	r0, [sp, #0]
 80158a6:	702b      	strb	r3, [r5, #0]
 80158a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80158aa:	3001      	adds	r0, #1
 80158ac:	6018      	str	r0, [r3, #0]
 80158ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	f43f acf1 	beq.w	8015298 <_dtoa_r+0xa0>
 80158b6:	601d      	str	r5, [r3, #0]
 80158b8:	e4ee      	b.n	8015298 <_dtoa_r+0xa0>
 80158ba:	9f00      	ldr	r7, [sp, #0]
 80158bc:	462b      	mov	r3, r5
 80158be:	461d      	mov	r5, r3
 80158c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80158c4:	2a39      	cmp	r2, #57	; 0x39
 80158c6:	d106      	bne.n	80158d6 <_dtoa_r+0x6de>
 80158c8:	9a01      	ldr	r2, [sp, #4]
 80158ca:	429a      	cmp	r2, r3
 80158cc:	d1f7      	bne.n	80158be <_dtoa_r+0x6c6>
 80158ce:	9901      	ldr	r1, [sp, #4]
 80158d0:	2230      	movs	r2, #48	; 0x30
 80158d2:	3701      	adds	r7, #1
 80158d4:	700a      	strb	r2, [r1, #0]
 80158d6:	781a      	ldrb	r2, [r3, #0]
 80158d8:	3201      	adds	r2, #1
 80158da:	701a      	strb	r2, [r3, #0]
 80158dc:	e790      	b.n	8015800 <_dtoa_r+0x608>
 80158de:	4ba6      	ldr	r3, [pc, #664]	; (8015b78 <_dtoa_r+0x980>)
 80158e0:	2200      	movs	r2, #0
 80158e2:	f7ea fe89 	bl	80005f8 <__aeabi_dmul>
 80158e6:	2200      	movs	r2, #0
 80158e8:	2300      	movs	r3, #0
 80158ea:	4606      	mov	r6, r0
 80158ec:	460f      	mov	r7, r1
 80158ee:	f7eb f8eb 	bl	8000ac8 <__aeabi_dcmpeq>
 80158f2:	2800      	cmp	r0, #0
 80158f4:	d09d      	beq.n	8015832 <_dtoa_r+0x63a>
 80158f6:	e7cf      	b.n	8015898 <_dtoa_r+0x6a0>
 80158f8:	9a08      	ldr	r2, [sp, #32]
 80158fa:	2a00      	cmp	r2, #0
 80158fc:	f000 80d7 	beq.w	8015aae <_dtoa_r+0x8b6>
 8015900:	9a06      	ldr	r2, [sp, #24]
 8015902:	2a01      	cmp	r2, #1
 8015904:	f300 80ba 	bgt.w	8015a7c <_dtoa_r+0x884>
 8015908:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801590a:	2a00      	cmp	r2, #0
 801590c:	f000 80b2 	beq.w	8015a74 <_dtoa_r+0x87c>
 8015910:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015914:	9e07      	ldr	r6, [sp, #28]
 8015916:	9d04      	ldr	r5, [sp, #16]
 8015918:	9a04      	ldr	r2, [sp, #16]
 801591a:	441a      	add	r2, r3
 801591c:	9204      	str	r2, [sp, #16]
 801591e:	9a05      	ldr	r2, [sp, #20]
 8015920:	2101      	movs	r1, #1
 8015922:	441a      	add	r2, r3
 8015924:	4620      	mov	r0, r4
 8015926:	9205      	str	r2, [sp, #20]
 8015928:	f000 fffc 	bl	8016924 <__i2b>
 801592c:	4607      	mov	r7, r0
 801592e:	2d00      	cmp	r5, #0
 8015930:	dd0c      	ble.n	801594c <_dtoa_r+0x754>
 8015932:	9b05      	ldr	r3, [sp, #20]
 8015934:	2b00      	cmp	r3, #0
 8015936:	dd09      	ble.n	801594c <_dtoa_r+0x754>
 8015938:	42ab      	cmp	r3, r5
 801593a:	9a04      	ldr	r2, [sp, #16]
 801593c:	bfa8      	it	ge
 801593e:	462b      	movge	r3, r5
 8015940:	1ad2      	subs	r2, r2, r3
 8015942:	9204      	str	r2, [sp, #16]
 8015944:	9a05      	ldr	r2, [sp, #20]
 8015946:	1aed      	subs	r5, r5, r3
 8015948:	1ad3      	subs	r3, r2, r3
 801594a:	9305      	str	r3, [sp, #20]
 801594c:	9b07      	ldr	r3, [sp, #28]
 801594e:	b31b      	cbz	r3, 8015998 <_dtoa_r+0x7a0>
 8015950:	9b08      	ldr	r3, [sp, #32]
 8015952:	2b00      	cmp	r3, #0
 8015954:	f000 80af 	beq.w	8015ab6 <_dtoa_r+0x8be>
 8015958:	2e00      	cmp	r6, #0
 801595a:	dd13      	ble.n	8015984 <_dtoa_r+0x78c>
 801595c:	4639      	mov	r1, r7
 801595e:	4632      	mov	r2, r6
 8015960:	4620      	mov	r0, r4
 8015962:	f001 f89f 	bl	8016aa4 <__pow5mult>
 8015966:	ee18 2a10 	vmov	r2, s16
 801596a:	4601      	mov	r1, r0
 801596c:	4607      	mov	r7, r0
 801596e:	4620      	mov	r0, r4
 8015970:	f000 ffee 	bl	8016950 <__multiply>
 8015974:	ee18 1a10 	vmov	r1, s16
 8015978:	4680      	mov	r8, r0
 801597a:	4620      	mov	r0, r4
 801597c:	f000 fed0 	bl	8016720 <_Bfree>
 8015980:	ee08 8a10 	vmov	s16, r8
 8015984:	9b07      	ldr	r3, [sp, #28]
 8015986:	1b9a      	subs	r2, r3, r6
 8015988:	d006      	beq.n	8015998 <_dtoa_r+0x7a0>
 801598a:	ee18 1a10 	vmov	r1, s16
 801598e:	4620      	mov	r0, r4
 8015990:	f001 f888 	bl	8016aa4 <__pow5mult>
 8015994:	ee08 0a10 	vmov	s16, r0
 8015998:	2101      	movs	r1, #1
 801599a:	4620      	mov	r0, r4
 801599c:	f000 ffc2 	bl	8016924 <__i2b>
 80159a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	4606      	mov	r6, r0
 80159a6:	f340 8088 	ble.w	8015aba <_dtoa_r+0x8c2>
 80159aa:	461a      	mov	r2, r3
 80159ac:	4601      	mov	r1, r0
 80159ae:	4620      	mov	r0, r4
 80159b0:	f001 f878 	bl	8016aa4 <__pow5mult>
 80159b4:	9b06      	ldr	r3, [sp, #24]
 80159b6:	2b01      	cmp	r3, #1
 80159b8:	4606      	mov	r6, r0
 80159ba:	f340 8081 	ble.w	8015ac0 <_dtoa_r+0x8c8>
 80159be:	f04f 0800 	mov.w	r8, #0
 80159c2:	6933      	ldr	r3, [r6, #16]
 80159c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80159c8:	6918      	ldr	r0, [r3, #16]
 80159ca:	f000 ff5b 	bl	8016884 <__hi0bits>
 80159ce:	f1c0 0020 	rsb	r0, r0, #32
 80159d2:	9b05      	ldr	r3, [sp, #20]
 80159d4:	4418      	add	r0, r3
 80159d6:	f010 001f 	ands.w	r0, r0, #31
 80159da:	f000 8092 	beq.w	8015b02 <_dtoa_r+0x90a>
 80159de:	f1c0 0320 	rsb	r3, r0, #32
 80159e2:	2b04      	cmp	r3, #4
 80159e4:	f340 808a 	ble.w	8015afc <_dtoa_r+0x904>
 80159e8:	f1c0 001c 	rsb	r0, r0, #28
 80159ec:	9b04      	ldr	r3, [sp, #16]
 80159ee:	4403      	add	r3, r0
 80159f0:	9304      	str	r3, [sp, #16]
 80159f2:	9b05      	ldr	r3, [sp, #20]
 80159f4:	4403      	add	r3, r0
 80159f6:	4405      	add	r5, r0
 80159f8:	9305      	str	r3, [sp, #20]
 80159fa:	9b04      	ldr	r3, [sp, #16]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	dd07      	ble.n	8015a10 <_dtoa_r+0x818>
 8015a00:	ee18 1a10 	vmov	r1, s16
 8015a04:	461a      	mov	r2, r3
 8015a06:	4620      	mov	r0, r4
 8015a08:	f001 f8a6 	bl	8016b58 <__lshift>
 8015a0c:	ee08 0a10 	vmov	s16, r0
 8015a10:	9b05      	ldr	r3, [sp, #20]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	dd05      	ble.n	8015a22 <_dtoa_r+0x82a>
 8015a16:	4631      	mov	r1, r6
 8015a18:	461a      	mov	r2, r3
 8015a1a:	4620      	mov	r0, r4
 8015a1c:	f001 f89c 	bl	8016b58 <__lshift>
 8015a20:	4606      	mov	r6, r0
 8015a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d06e      	beq.n	8015b06 <_dtoa_r+0x90e>
 8015a28:	ee18 0a10 	vmov	r0, s16
 8015a2c:	4631      	mov	r1, r6
 8015a2e:	f001 f903 	bl	8016c38 <__mcmp>
 8015a32:	2800      	cmp	r0, #0
 8015a34:	da67      	bge.n	8015b06 <_dtoa_r+0x90e>
 8015a36:	9b00      	ldr	r3, [sp, #0]
 8015a38:	3b01      	subs	r3, #1
 8015a3a:	ee18 1a10 	vmov	r1, s16
 8015a3e:	9300      	str	r3, [sp, #0]
 8015a40:	220a      	movs	r2, #10
 8015a42:	2300      	movs	r3, #0
 8015a44:	4620      	mov	r0, r4
 8015a46:	f000 fe8d 	bl	8016764 <__multadd>
 8015a4a:	9b08      	ldr	r3, [sp, #32]
 8015a4c:	ee08 0a10 	vmov	s16, r0
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	f000 81b1 	beq.w	8015db8 <_dtoa_r+0xbc0>
 8015a56:	2300      	movs	r3, #0
 8015a58:	4639      	mov	r1, r7
 8015a5a:	220a      	movs	r2, #10
 8015a5c:	4620      	mov	r0, r4
 8015a5e:	f000 fe81 	bl	8016764 <__multadd>
 8015a62:	9b02      	ldr	r3, [sp, #8]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	4607      	mov	r7, r0
 8015a68:	f300 808e 	bgt.w	8015b88 <_dtoa_r+0x990>
 8015a6c:	9b06      	ldr	r3, [sp, #24]
 8015a6e:	2b02      	cmp	r3, #2
 8015a70:	dc51      	bgt.n	8015b16 <_dtoa_r+0x91e>
 8015a72:	e089      	b.n	8015b88 <_dtoa_r+0x990>
 8015a74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015a7a:	e74b      	b.n	8015914 <_dtoa_r+0x71c>
 8015a7c:	9b03      	ldr	r3, [sp, #12]
 8015a7e:	1e5e      	subs	r6, r3, #1
 8015a80:	9b07      	ldr	r3, [sp, #28]
 8015a82:	42b3      	cmp	r3, r6
 8015a84:	bfbf      	itttt	lt
 8015a86:	9b07      	ldrlt	r3, [sp, #28]
 8015a88:	9607      	strlt	r6, [sp, #28]
 8015a8a:	1af2      	sublt	r2, r6, r3
 8015a8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8015a8e:	bfb6      	itet	lt
 8015a90:	189b      	addlt	r3, r3, r2
 8015a92:	1b9e      	subge	r6, r3, r6
 8015a94:	930a      	strlt	r3, [sp, #40]	; 0x28
 8015a96:	9b03      	ldr	r3, [sp, #12]
 8015a98:	bfb8      	it	lt
 8015a9a:	2600      	movlt	r6, #0
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	bfb7      	itett	lt
 8015aa0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8015aa4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8015aa8:	1a9d      	sublt	r5, r3, r2
 8015aaa:	2300      	movlt	r3, #0
 8015aac:	e734      	b.n	8015918 <_dtoa_r+0x720>
 8015aae:	9e07      	ldr	r6, [sp, #28]
 8015ab0:	9d04      	ldr	r5, [sp, #16]
 8015ab2:	9f08      	ldr	r7, [sp, #32]
 8015ab4:	e73b      	b.n	801592e <_dtoa_r+0x736>
 8015ab6:	9a07      	ldr	r2, [sp, #28]
 8015ab8:	e767      	b.n	801598a <_dtoa_r+0x792>
 8015aba:	9b06      	ldr	r3, [sp, #24]
 8015abc:	2b01      	cmp	r3, #1
 8015abe:	dc18      	bgt.n	8015af2 <_dtoa_r+0x8fa>
 8015ac0:	f1ba 0f00 	cmp.w	sl, #0
 8015ac4:	d115      	bne.n	8015af2 <_dtoa_r+0x8fa>
 8015ac6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015aca:	b993      	cbnz	r3, 8015af2 <_dtoa_r+0x8fa>
 8015acc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015ad0:	0d1b      	lsrs	r3, r3, #20
 8015ad2:	051b      	lsls	r3, r3, #20
 8015ad4:	b183      	cbz	r3, 8015af8 <_dtoa_r+0x900>
 8015ad6:	9b04      	ldr	r3, [sp, #16]
 8015ad8:	3301      	adds	r3, #1
 8015ada:	9304      	str	r3, [sp, #16]
 8015adc:	9b05      	ldr	r3, [sp, #20]
 8015ade:	3301      	adds	r3, #1
 8015ae0:	9305      	str	r3, [sp, #20]
 8015ae2:	f04f 0801 	mov.w	r8, #1
 8015ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	f47f af6a 	bne.w	80159c2 <_dtoa_r+0x7ca>
 8015aee:	2001      	movs	r0, #1
 8015af0:	e76f      	b.n	80159d2 <_dtoa_r+0x7da>
 8015af2:	f04f 0800 	mov.w	r8, #0
 8015af6:	e7f6      	b.n	8015ae6 <_dtoa_r+0x8ee>
 8015af8:	4698      	mov	r8, r3
 8015afa:	e7f4      	b.n	8015ae6 <_dtoa_r+0x8ee>
 8015afc:	f43f af7d 	beq.w	80159fa <_dtoa_r+0x802>
 8015b00:	4618      	mov	r0, r3
 8015b02:	301c      	adds	r0, #28
 8015b04:	e772      	b.n	80159ec <_dtoa_r+0x7f4>
 8015b06:	9b03      	ldr	r3, [sp, #12]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	dc37      	bgt.n	8015b7c <_dtoa_r+0x984>
 8015b0c:	9b06      	ldr	r3, [sp, #24]
 8015b0e:	2b02      	cmp	r3, #2
 8015b10:	dd34      	ble.n	8015b7c <_dtoa_r+0x984>
 8015b12:	9b03      	ldr	r3, [sp, #12]
 8015b14:	9302      	str	r3, [sp, #8]
 8015b16:	9b02      	ldr	r3, [sp, #8]
 8015b18:	b96b      	cbnz	r3, 8015b36 <_dtoa_r+0x93e>
 8015b1a:	4631      	mov	r1, r6
 8015b1c:	2205      	movs	r2, #5
 8015b1e:	4620      	mov	r0, r4
 8015b20:	f000 fe20 	bl	8016764 <__multadd>
 8015b24:	4601      	mov	r1, r0
 8015b26:	4606      	mov	r6, r0
 8015b28:	ee18 0a10 	vmov	r0, s16
 8015b2c:	f001 f884 	bl	8016c38 <__mcmp>
 8015b30:	2800      	cmp	r0, #0
 8015b32:	f73f adbb 	bgt.w	80156ac <_dtoa_r+0x4b4>
 8015b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b38:	9d01      	ldr	r5, [sp, #4]
 8015b3a:	43db      	mvns	r3, r3
 8015b3c:	9300      	str	r3, [sp, #0]
 8015b3e:	f04f 0800 	mov.w	r8, #0
 8015b42:	4631      	mov	r1, r6
 8015b44:	4620      	mov	r0, r4
 8015b46:	f000 fdeb 	bl	8016720 <_Bfree>
 8015b4a:	2f00      	cmp	r7, #0
 8015b4c:	f43f aea4 	beq.w	8015898 <_dtoa_r+0x6a0>
 8015b50:	f1b8 0f00 	cmp.w	r8, #0
 8015b54:	d005      	beq.n	8015b62 <_dtoa_r+0x96a>
 8015b56:	45b8      	cmp	r8, r7
 8015b58:	d003      	beq.n	8015b62 <_dtoa_r+0x96a>
 8015b5a:	4641      	mov	r1, r8
 8015b5c:	4620      	mov	r0, r4
 8015b5e:	f000 fddf 	bl	8016720 <_Bfree>
 8015b62:	4639      	mov	r1, r7
 8015b64:	4620      	mov	r0, r4
 8015b66:	f000 fddb 	bl	8016720 <_Bfree>
 8015b6a:	e695      	b.n	8015898 <_dtoa_r+0x6a0>
 8015b6c:	2600      	movs	r6, #0
 8015b6e:	4637      	mov	r7, r6
 8015b70:	e7e1      	b.n	8015b36 <_dtoa_r+0x93e>
 8015b72:	9700      	str	r7, [sp, #0]
 8015b74:	4637      	mov	r7, r6
 8015b76:	e599      	b.n	80156ac <_dtoa_r+0x4b4>
 8015b78:	40240000 	.word	0x40240000
 8015b7c:	9b08      	ldr	r3, [sp, #32]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	f000 80ca 	beq.w	8015d18 <_dtoa_r+0xb20>
 8015b84:	9b03      	ldr	r3, [sp, #12]
 8015b86:	9302      	str	r3, [sp, #8]
 8015b88:	2d00      	cmp	r5, #0
 8015b8a:	dd05      	ble.n	8015b98 <_dtoa_r+0x9a0>
 8015b8c:	4639      	mov	r1, r7
 8015b8e:	462a      	mov	r2, r5
 8015b90:	4620      	mov	r0, r4
 8015b92:	f000 ffe1 	bl	8016b58 <__lshift>
 8015b96:	4607      	mov	r7, r0
 8015b98:	f1b8 0f00 	cmp.w	r8, #0
 8015b9c:	d05b      	beq.n	8015c56 <_dtoa_r+0xa5e>
 8015b9e:	6879      	ldr	r1, [r7, #4]
 8015ba0:	4620      	mov	r0, r4
 8015ba2:	f000 fd7d 	bl	80166a0 <_Balloc>
 8015ba6:	4605      	mov	r5, r0
 8015ba8:	b928      	cbnz	r0, 8015bb6 <_dtoa_r+0x9be>
 8015baa:	4b87      	ldr	r3, [pc, #540]	; (8015dc8 <_dtoa_r+0xbd0>)
 8015bac:	4602      	mov	r2, r0
 8015bae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015bb2:	f7ff bb3b 	b.w	801522c <_dtoa_r+0x34>
 8015bb6:	693a      	ldr	r2, [r7, #16]
 8015bb8:	3202      	adds	r2, #2
 8015bba:	0092      	lsls	r2, r2, #2
 8015bbc:	f107 010c 	add.w	r1, r7, #12
 8015bc0:	300c      	adds	r0, #12
 8015bc2:	f7fd fccf 	bl	8013564 <memcpy>
 8015bc6:	2201      	movs	r2, #1
 8015bc8:	4629      	mov	r1, r5
 8015bca:	4620      	mov	r0, r4
 8015bcc:	f000 ffc4 	bl	8016b58 <__lshift>
 8015bd0:	9b01      	ldr	r3, [sp, #4]
 8015bd2:	f103 0901 	add.w	r9, r3, #1
 8015bd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8015bda:	4413      	add	r3, r2
 8015bdc:	9305      	str	r3, [sp, #20]
 8015bde:	f00a 0301 	and.w	r3, sl, #1
 8015be2:	46b8      	mov	r8, r7
 8015be4:	9304      	str	r3, [sp, #16]
 8015be6:	4607      	mov	r7, r0
 8015be8:	4631      	mov	r1, r6
 8015bea:	ee18 0a10 	vmov	r0, s16
 8015bee:	f7ff fa75 	bl	80150dc <quorem>
 8015bf2:	4641      	mov	r1, r8
 8015bf4:	9002      	str	r0, [sp, #8]
 8015bf6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015bfa:	ee18 0a10 	vmov	r0, s16
 8015bfe:	f001 f81b 	bl	8016c38 <__mcmp>
 8015c02:	463a      	mov	r2, r7
 8015c04:	9003      	str	r0, [sp, #12]
 8015c06:	4631      	mov	r1, r6
 8015c08:	4620      	mov	r0, r4
 8015c0a:	f001 f831 	bl	8016c70 <__mdiff>
 8015c0e:	68c2      	ldr	r2, [r0, #12]
 8015c10:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8015c14:	4605      	mov	r5, r0
 8015c16:	bb02      	cbnz	r2, 8015c5a <_dtoa_r+0xa62>
 8015c18:	4601      	mov	r1, r0
 8015c1a:	ee18 0a10 	vmov	r0, s16
 8015c1e:	f001 f80b 	bl	8016c38 <__mcmp>
 8015c22:	4602      	mov	r2, r0
 8015c24:	4629      	mov	r1, r5
 8015c26:	4620      	mov	r0, r4
 8015c28:	9207      	str	r2, [sp, #28]
 8015c2a:	f000 fd79 	bl	8016720 <_Bfree>
 8015c2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015c32:	ea43 0102 	orr.w	r1, r3, r2
 8015c36:	9b04      	ldr	r3, [sp, #16]
 8015c38:	430b      	orrs	r3, r1
 8015c3a:	464d      	mov	r5, r9
 8015c3c:	d10f      	bne.n	8015c5e <_dtoa_r+0xa66>
 8015c3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015c42:	d02a      	beq.n	8015c9a <_dtoa_r+0xaa2>
 8015c44:	9b03      	ldr	r3, [sp, #12]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	dd02      	ble.n	8015c50 <_dtoa_r+0xa58>
 8015c4a:	9b02      	ldr	r3, [sp, #8]
 8015c4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8015c50:	f88b a000 	strb.w	sl, [fp]
 8015c54:	e775      	b.n	8015b42 <_dtoa_r+0x94a>
 8015c56:	4638      	mov	r0, r7
 8015c58:	e7ba      	b.n	8015bd0 <_dtoa_r+0x9d8>
 8015c5a:	2201      	movs	r2, #1
 8015c5c:	e7e2      	b.n	8015c24 <_dtoa_r+0xa2c>
 8015c5e:	9b03      	ldr	r3, [sp, #12]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	db04      	blt.n	8015c6e <_dtoa_r+0xa76>
 8015c64:	9906      	ldr	r1, [sp, #24]
 8015c66:	430b      	orrs	r3, r1
 8015c68:	9904      	ldr	r1, [sp, #16]
 8015c6a:	430b      	orrs	r3, r1
 8015c6c:	d122      	bne.n	8015cb4 <_dtoa_r+0xabc>
 8015c6e:	2a00      	cmp	r2, #0
 8015c70:	ddee      	ble.n	8015c50 <_dtoa_r+0xa58>
 8015c72:	ee18 1a10 	vmov	r1, s16
 8015c76:	2201      	movs	r2, #1
 8015c78:	4620      	mov	r0, r4
 8015c7a:	f000 ff6d 	bl	8016b58 <__lshift>
 8015c7e:	4631      	mov	r1, r6
 8015c80:	ee08 0a10 	vmov	s16, r0
 8015c84:	f000 ffd8 	bl	8016c38 <__mcmp>
 8015c88:	2800      	cmp	r0, #0
 8015c8a:	dc03      	bgt.n	8015c94 <_dtoa_r+0xa9c>
 8015c8c:	d1e0      	bne.n	8015c50 <_dtoa_r+0xa58>
 8015c8e:	f01a 0f01 	tst.w	sl, #1
 8015c92:	d0dd      	beq.n	8015c50 <_dtoa_r+0xa58>
 8015c94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015c98:	d1d7      	bne.n	8015c4a <_dtoa_r+0xa52>
 8015c9a:	2339      	movs	r3, #57	; 0x39
 8015c9c:	f88b 3000 	strb.w	r3, [fp]
 8015ca0:	462b      	mov	r3, r5
 8015ca2:	461d      	mov	r5, r3
 8015ca4:	3b01      	subs	r3, #1
 8015ca6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015caa:	2a39      	cmp	r2, #57	; 0x39
 8015cac:	d071      	beq.n	8015d92 <_dtoa_r+0xb9a>
 8015cae:	3201      	adds	r2, #1
 8015cb0:	701a      	strb	r2, [r3, #0]
 8015cb2:	e746      	b.n	8015b42 <_dtoa_r+0x94a>
 8015cb4:	2a00      	cmp	r2, #0
 8015cb6:	dd07      	ble.n	8015cc8 <_dtoa_r+0xad0>
 8015cb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015cbc:	d0ed      	beq.n	8015c9a <_dtoa_r+0xaa2>
 8015cbe:	f10a 0301 	add.w	r3, sl, #1
 8015cc2:	f88b 3000 	strb.w	r3, [fp]
 8015cc6:	e73c      	b.n	8015b42 <_dtoa_r+0x94a>
 8015cc8:	9b05      	ldr	r3, [sp, #20]
 8015cca:	f809 ac01 	strb.w	sl, [r9, #-1]
 8015cce:	4599      	cmp	r9, r3
 8015cd0:	d047      	beq.n	8015d62 <_dtoa_r+0xb6a>
 8015cd2:	ee18 1a10 	vmov	r1, s16
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	220a      	movs	r2, #10
 8015cda:	4620      	mov	r0, r4
 8015cdc:	f000 fd42 	bl	8016764 <__multadd>
 8015ce0:	45b8      	cmp	r8, r7
 8015ce2:	ee08 0a10 	vmov	s16, r0
 8015ce6:	f04f 0300 	mov.w	r3, #0
 8015cea:	f04f 020a 	mov.w	r2, #10
 8015cee:	4641      	mov	r1, r8
 8015cf0:	4620      	mov	r0, r4
 8015cf2:	d106      	bne.n	8015d02 <_dtoa_r+0xb0a>
 8015cf4:	f000 fd36 	bl	8016764 <__multadd>
 8015cf8:	4680      	mov	r8, r0
 8015cfa:	4607      	mov	r7, r0
 8015cfc:	f109 0901 	add.w	r9, r9, #1
 8015d00:	e772      	b.n	8015be8 <_dtoa_r+0x9f0>
 8015d02:	f000 fd2f 	bl	8016764 <__multadd>
 8015d06:	4639      	mov	r1, r7
 8015d08:	4680      	mov	r8, r0
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	220a      	movs	r2, #10
 8015d0e:	4620      	mov	r0, r4
 8015d10:	f000 fd28 	bl	8016764 <__multadd>
 8015d14:	4607      	mov	r7, r0
 8015d16:	e7f1      	b.n	8015cfc <_dtoa_r+0xb04>
 8015d18:	9b03      	ldr	r3, [sp, #12]
 8015d1a:	9302      	str	r3, [sp, #8]
 8015d1c:	9d01      	ldr	r5, [sp, #4]
 8015d1e:	ee18 0a10 	vmov	r0, s16
 8015d22:	4631      	mov	r1, r6
 8015d24:	f7ff f9da 	bl	80150dc <quorem>
 8015d28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015d2c:	9b01      	ldr	r3, [sp, #4]
 8015d2e:	f805 ab01 	strb.w	sl, [r5], #1
 8015d32:	1aea      	subs	r2, r5, r3
 8015d34:	9b02      	ldr	r3, [sp, #8]
 8015d36:	4293      	cmp	r3, r2
 8015d38:	dd09      	ble.n	8015d4e <_dtoa_r+0xb56>
 8015d3a:	ee18 1a10 	vmov	r1, s16
 8015d3e:	2300      	movs	r3, #0
 8015d40:	220a      	movs	r2, #10
 8015d42:	4620      	mov	r0, r4
 8015d44:	f000 fd0e 	bl	8016764 <__multadd>
 8015d48:	ee08 0a10 	vmov	s16, r0
 8015d4c:	e7e7      	b.n	8015d1e <_dtoa_r+0xb26>
 8015d4e:	9b02      	ldr	r3, [sp, #8]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	bfc8      	it	gt
 8015d54:	461d      	movgt	r5, r3
 8015d56:	9b01      	ldr	r3, [sp, #4]
 8015d58:	bfd8      	it	le
 8015d5a:	2501      	movle	r5, #1
 8015d5c:	441d      	add	r5, r3
 8015d5e:	f04f 0800 	mov.w	r8, #0
 8015d62:	ee18 1a10 	vmov	r1, s16
 8015d66:	2201      	movs	r2, #1
 8015d68:	4620      	mov	r0, r4
 8015d6a:	f000 fef5 	bl	8016b58 <__lshift>
 8015d6e:	4631      	mov	r1, r6
 8015d70:	ee08 0a10 	vmov	s16, r0
 8015d74:	f000 ff60 	bl	8016c38 <__mcmp>
 8015d78:	2800      	cmp	r0, #0
 8015d7a:	dc91      	bgt.n	8015ca0 <_dtoa_r+0xaa8>
 8015d7c:	d102      	bne.n	8015d84 <_dtoa_r+0xb8c>
 8015d7e:	f01a 0f01 	tst.w	sl, #1
 8015d82:	d18d      	bne.n	8015ca0 <_dtoa_r+0xaa8>
 8015d84:	462b      	mov	r3, r5
 8015d86:	461d      	mov	r5, r3
 8015d88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015d8c:	2a30      	cmp	r2, #48	; 0x30
 8015d8e:	d0fa      	beq.n	8015d86 <_dtoa_r+0xb8e>
 8015d90:	e6d7      	b.n	8015b42 <_dtoa_r+0x94a>
 8015d92:	9a01      	ldr	r2, [sp, #4]
 8015d94:	429a      	cmp	r2, r3
 8015d96:	d184      	bne.n	8015ca2 <_dtoa_r+0xaaa>
 8015d98:	9b00      	ldr	r3, [sp, #0]
 8015d9a:	3301      	adds	r3, #1
 8015d9c:	9300      	str	r3, [sp, #0]
 8015d9e:	2331      	movs	r3, #49	; 0x31
 8015da0:	7013      	strb	r3, [r2, #0]
 8015da2:	e6ce      	b.n	8015b42 <_dtoa_r+0x94a>
 8015da4:	4b09      	ldr	r3, [pc, #36]	; (8015dcc <_dtoa_r+0xbd4>)
 8015da6:	f7ff ba95 	b.w	80152d4 <_dtoa_r+0xdc>
 8015daa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	f47f aa6e 	bne.w	801528e <_dtoa_r+0x96>
 8015db2:	4b07      	ldr	r3, [pc, #28]	; (8015dd0 <_dtoa_r+0xbd8>)
 8015db4:	f7ff ba8e 	b.w	80152d4 <_dtoa_r+0xdc>
 8015db8:	9b02      	ldr	r3, [sp, #8]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	dcae      	bgt.n	8015d1c <_dtoa_r+0xb24>
 8015dbe:	9b06      	ldr	r3, [sp, #24]
 8015dc0:	2b02      	cmp	r3, #2
 8015dc2:	f73f aea8 	bgt.w	8015b16 <_dtoa_r+0x91e>
 8015dc6:	e7a9      	b.n	8015d1c <_dtoa_r+0xb24>
 8015dc8:	080196a7 	.word	0x080196a7
 8015dcc:	080195b0 	.word	0x080195b0
 8015dd0:	08019628 	.word	0x08019628

08015dd4 <__sflush_r>:
 8015dd4:	898a      	ldrh	r2, [r1, #12]
 8015dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dda:	4605      	mov	r5, r0
 8015ddc:	0710      	lsls	r0, r2, #28
 8015dde:	460c      	mov	r4, r1
 8015de0:	d458      	bmi.n	8015e94 <__sflush_r+0xc0>
 8015de2:	684b      	ldr	r3, [r1, #4]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	dc05      	bgt.n	8015df4 <__sflush_r+0x20>
 8015de8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	dc02      	bgt.n	8015df4 <__sflush_r+0x20>
 8015dee:	2000      	movs	r0, #0
 8015df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015df4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015df6:	2e00      	cmp	r6, #0
 8015df8:	d0f9      	beq.n	8015dee <__sflush_r+0x1a>
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015e00:	682f      	ldr	r7, [r5, #0]
 8015e02:	602b      	str	r3, [r5, #0]
 8015e04:	d032      	beq.n	8015e6c <__sflush_r+0x98>
 8015e06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015e08:	89a3      	ldrh	r3, [r4, #12]
 8015e0a:	075a      	lsls	r2, r3, #29
 8015e0c:	d505      	bpl.n	8015e1a <__sflush_r+0x46>
 8015e0e:	6863      	ldr	r3, [r4, #4]
 8015e10:	1ac0      	subs	r0, r0, r3
 8015e12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015e14:	b10b      	cbz	r3, 8015e1a <__sflush_r+0x46>
 8015e16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015e18:	1ac0      	subs	r0, r0, r3
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	4602      	mov	r2, r0
 8015e1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015e20:	6a21      	ldr	r1, [r4, #32]
 8015e22:	4628      	mov	r0, r5
 8015e24:	47b0      	blx	r6
 8015e26:	1c43      	adds	r3, r0, #1
 8015e28:	89a3      	ldrh	r3, [r4, #12]
 8015e2a:	d106      	bne.n	8015e3a <__sflush_r+0x66>
 8015e2c:	6829      	ldr	r1, [r5, #0]
 8015e2e:	291d      	cmp	r1, #29
 8015e30:	d82c      	bhi.n	8015e8c <__sflush_r+0xb8>
 8015e32:	4a2a      	ldr	r2, [pc, #168]	; (8015edc <__sflush_r+0x108>)
 8015e34:	40ca      	lsrs	r2, r1
 8015e36:	07d6      	lsls	r6, r2, #31
 8015e38:	d528      	bpl.n	8015e8c <__sflush_r+0xb8>
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	6062      	str	r2, [r4, #4]
 8015e3e:	04d9      	lsls	r1, r3, #19
 8015e40:	6922      	ldr	r2, [r4, #16]
 8015e42:	6022      	str	r2, [r4, #0]
 8015e44:	d504      	bpl.n	8015e50 <__sflush_r+0x7c>
 8015e46:	1c42      	adds	r2, r0, #1
 8015e48:	d101      	bne.n	8015e4e <__sflush_r+0x7a>
 8015e4a:	682b      	ldr	r3, [r5, #0]
 8015e4c:	b903      	cbnz	r3, 8015e50 <__sflush_r+0x7c>
 8015e4e:	6560      	str	r0, [r4, #84]	; 0x54
 8015e50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e52:	602f      	str	r7, [r5, #0]
 8015e54:	2900      	cmp	r1, #0
 8015e56:	d0ca      	beq.n	8015dee <__sflush_r+0x1a>
 8015e58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e5c:	4299      	cmp	r1, r3
 8015e5e:	d002      	beq.n	8015e66 <__sflush_r+0x92>
 8015e60:	4628      	mov	r0, r5
 8015e62:	f7fd fbab 	bl	80135bc <_free_r>
 8015e66:	2000      	movs	r0, #0
 8015e68:	6360      	str	r0, [r4, #52]	; 0x34
 8015e6a:	e7c1      	b.n	8015df0 <__sflush_r+0x1c>
 8015e6c:	6a21      	ldr	r1, [r4, #32]
 8015e6e:	2301      	movs	r3, #1
 8015e70:	4628      	mov	r0, r5
 8015e72:	47b0      	blx	r6
 8015e74:	1c41      	adds	r1, r0, #1
 8015e76:	d1c7      	bne.n	8015e08 <__sflush_r+0x34>
 8015e78:	682b      	ldr	r3, [r5, #0]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d0c4      	beq.n	8015e08 <__sflush_r+0x34>
 8015e7e:	2b1d      	cmp	r3, #29
 8015e80:	d001      	beq.n	8015e86 <__sflush_r+0xb2>
 8015e82:	2b16      	cmp	r3, #22
 8015e84:	d101      	bne.n	8015e8a <__sflush_r+0xb6>
 8015e86:	602f      	str	r7, [r5, #0]
 8015e88:	e7b1      	b.n	8015dee <__sflush_r+0x1a>
 8015e8a:	89a3      	ldrh	r3, [r4, #12]
 8015e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e90:	81a3      	strh	r3, [r4, #12]
 8015e92:	e7ad      	b.n	8015df0 <__sflush_r+0x1c>
 8015e94:	690f      	ldr	r7, [r1, #16]
 8015e96:	2f00      	cmp	r7, #0
 8015e98:	d0a9      	beq.n	8015dee <__sflush_r+0x1a>
 8015e9a:	0793      	lsls	r3, r2, #30
 8015e9c:	680e      	ldr	r6, [r1, #0]
 8015e9e:	bf08      	it	eq
 8015ea0:	694b      	ldreq	r3, [r1, #20]
 8015ea2:	600f      	str	r7, [r1, #0]
 8015ea4:	bf18      	it	ne
 8015ea6:	2300      	movne	r3, #0
 8015ea8:	eba6 0807 	sub.w	r8, r6, r7
 8015eac:	608b      	str	r3, [r1, #8]
 8015eae:	f1b8 0f00 	cmp.w	r8, #0
 8015eb2:	dd9c      	ble.n	8015dee <__sflush_r+0x1a>
 8015eb4:	6a21      	ldr	r1, [r4, #32]
 8015eb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015eb8:	4643      	mov	r3, r8
 8015eba:	463a      	mov	r2, r7
 8015ebc:	4628      	mov	r0, r5
 8015ebe:	47b0      	blx	r6
 8015ec0:	2800      	cmp	r0, #0
 8015ec2:	dc06      	bgt.n	8015ed2 <__sflush_r+0xfe>
 8015ec4:	89a3      	ldrh	r3, [r4, #12]
 8015ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015eca:	81a3      	strh	r3, [r4, #12]
 8015ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015ed0:	e78e      	b.n	8015df0 <__sflush_r+0x1c>
 8015ed2:	4407      	add	r7, r0
 8015ed4:	eba8 0800 	sub.w	r8, r8, r0
 8015ed8:	e7e9      	b.n	8015eae <__sflush_r+0xda>
 8015eda:	bf00      	nop
 8015edc:	20400001 	.word	0x20400001

08015ee0 <_fflush_r>:
 8015ee0:	b538      	push	{r3, r4, r5, lr}
 8015ee2:	690b      	ldr	r3, [r1, #16]
 8015ee4:	4605      	mov	r5, r0
 8015ee6:	460c      	mov	r4, r1
 8015ee8:	b913      	cbnz	r3, 8015ef0 <_fflush_r+0x10>
 8015eea:	2500      	movs	r5, #0
 8015eec:	4628      	mov	r0, r5
 8015eee:	bd38      	pop	{r3, r4, r5, pc}
 8015ef0:	b118      	cbz	r0, 8015efa <_fflush_r+0x1a>
 8015ef2:	6983      	ldr	r3, [r0, #24]
 8015ef4:	b90b      	cbnz	r3, 8015efa <_fflush_r+0x1a>
 8015ef6:	f7fd f9b3 	bl	8013260 <__sinit>
 8015efa:	4b14      	ldr	r3, [pc, #80]	; (8015f4c <_fflush_r+0x6c>)
 8015efc:	429c      	cmp	r4, r3
 8015efe:	d11b      	bne.n	8015f38 <_fflush_r+0x58>
 8015f00:	686c      	ldr	r4, [r5, #4]
 8015f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d0ef      	beq.n	8015eea <_fflush_r+0xa>
 8015f0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015f0c:	07d0      	lsls	r0, r2, #31
 8015f0e:	d404      	bmi.n	8015f1a <_fflush_r+0x3a>
 8015f10:	0599      	lsls	r1, r3, #22
 8015f12:	d402      	bmi.n	8015f1a <_fflush_r+0x3a>
 8015f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015f16:	f7fd fb12 	bl	801353e <__retarget_lock_acquire_recursive>
 8015f1a:	4628      	mov	r0, r5
 8015f1c:	4621      	mov	r1, r4
 8015f1e:	f7ff ff59 	bl	8015dd4 <__sflush_r>
 8015f22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015f24:	07da      	lsls	r2, r3, #31
 8015f26:	4605      	mov	r5, r0
 8015f28:	d4e0      	bmi.n	8015eec <_fflush_r+0xc>
 8015f2a:	89a3      	ldrh	r3, [r4, #12]
 8015f2c:	059b      	lsls	r3, r3, #22
 8015f2e:	d4dd      	bmi.n	8015eec <_fflush_r+0xc>
 8015f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015f32:	f7fd fb05 	bl	8013540 <__retarget_lock_release_recursive>
 8015f36:	e7d9      	b.n	8015eec <_fflush_r+0xc>
 8015f38:	4b05      	ldr	r3, [pc, #20]	; (8015f50 <_fflush_r+0x70>)
 8015f3a:	429c      	cmp	r4, r3
 8015f3c:	d101      	bne.n	8015f42 <_fflush_r+0x62>
 8015f3e:	68ac      	ldr	r4, [r5, #8]
 8015f40:	e7df      	b.n	8015f02 <_fflush_r+0x22>
 8015f42:	4b04      	ldr	r3, [pc, #16]	; (8015f54 <_fflush_r+0x74>)
 8015f44:	429c      	cmp	r4, r3
 8015f46:	bf08      	it	eq
 8015f48:	68ec      	ldreq	r4, [r5, #12]
 8015f4a:	e7da      	b.n	8015f02 <_fflush_r+0x22>
 8015f4c:	0801955c 	.word	0x0801955c
 8015f50:	0801957c 	.word	0x0801957c
 8015f54:	0801953c 	.word	0x0801953c

08015f58 <rshift>:
 8015f58:	6903      	ldr	r3, [r0, #16]
 8015f5a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015f5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f62:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015f66:	f100 0414 	add.w	r4, r0, #20
 8015f6a:	dd45      	ble.n	8015ff8 <rshift+0xa0>
 8015f6c:	f011 011f 	ands.w	r1, r1, #31
 8015f70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015f74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015f78:	d10c      	bne.n	8015f94 <rshift+0x3c>
 8015f7a:	f100 0710 	add.w	r7, r0, #16
 8015f7e:	4629      	mov	r1, r5
 8015f80:	42b1      	cmp	r1, r6
 8015f82:	d334      	bcc.n	8015fee <rshift+0x96>
 8015f84:	1a9b      	subs	r3, r3, r2
 8015f86:	009b      	lsls	r3, r3, #2
 8015f88:	1eea      	subs	r2, r5, #3
 8015f8a:	4296      	cmp	r6, r2
 8015f8c:	bf38      	it	cc
 8015f8e:	2300      	movcc	r3, #0
 8015f90:	4423      	add	r3, r4
 8015f92:	e015      	b.n	8015fc0 <rshift+0x68>
 8015f94:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015f98:	f1c1 0820 	rsb	r8, r1, #32
 8015f9c:	40cf      	lsrs	r7, r1
 8015f9e:	f105 0e04 	add.w	lr, r5, #4
 8015fa2:	46a1      	mov	r9, r4
 8015fa4:	4576      	cmp	r6, lr
 8015fa6:	46f4      	mov	ip, lr
 8015fa8:	d815      	bhi.n	8015fd6 <rshift+0x7e>
 8015faa:	1a9a      	subs	r2, r3, r2
 8015fac:	0092      	lsls	r2, r2, #2
 8015fae:	3a04      	subs	r2, #4
 8015fb0:	3501      	adds	r5, #1
 8015fb2:	42ae      	cmp	r6, r5
 8015fb4:	bf38      	it	cc
 8015fb6:	2200      	movcc	r2, #0
 8015fb8:	18a3      	adds	r3, r4, r2
 8015fba:	50a7      	str	r7, [r4, r2]
 8015fbc:	b107      	cbz	r7, 8015fc0 <rshift+0x68>
 8015fbe:	3304      	adds	r3, #4
 8015fc0:	1b1a      	subs	r2, r3, r4
 8015fc2:	42a3      	cmp	r3, r4
 8015fc4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015fc8:	bf08      	it	eq
 8015fca:	2300      	moveq	r3, #0
 8015fcc:	6102      	str	r2, [r0, #16]
 8015fce:	bf08      	it	eq
 8015fd0:	6143      	streq	r3, [r0, #20]
 8015fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fd6:	f8dc c000 	ldr.w	ip, [ip]
 8015fda:	fa0c fc08 	lsl.w	ip, ip, r8
 8015fde:	ea4c 0707 	orr.w	r7, ip, r7
 8015fe2:	f849 7b04 	str.w	r7, [r9], #4
 8015fe6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015fea:	40cf      	lsrs	r7, r1
 8015fec:	e7da      	b.n	8015fa4 <rshift+0x4c>
 8015fee:	f851 cb04 	ldr.w	ip, [r1], #4
 8015ff2:	f847 cf04 	str.w	ip, [r7, #4]!
 8015ff6:	e7c3      	b.n	8015f80 <rshift+0x28>
 8015ff8:	4623      	mov	r3, r4
 8015ffa:	e7e1      	b.n	8015fc0 <rshift+0x68>

08015ffc <__hexdig_fun>:
 8015ffc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016000:	2b09      	cmp	r3, #9
 8016002:	d802      	bhi.n	801600a <__hexdig_fun+0xe>
 8016004:	3820      	subs	r0, #32
 8016006:	b2c0      	uxtb	r0, r0
 8016008:	4770      	bx	lr
 801600a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801600e:	2b05      	cmp	r3, #5
 8016010:	d801      	bhi.n	8016016 <__hexdig_fun+0x1a>
 8016012:	3847      	subs	r0, #71	; 0x47
 8016014:	e7f7      	b.n	8016006 <__hexdig_fun+0xa>
 8016016:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801601a:	2b05      	cmp	r3, #5
 801601c:	d801      	bhi.n	8016022 <__hexdig_fun+0x26>
 801601e:	3827      	subs	r0, #39	; 0x27
 8016020:	e7f1      	b.n	8016006 <__hexdig_fun+0xa>
 8016022:	2000      	movs	r0, #0
 8016024:	4770      	bx	lr
	...

08016028 <__gethex>:
 8016028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801602c:	ed2d 8b02 	vpush	{d8}
 8016030:	b089      	sub	sp, #36	; 0x24
 8016032:	ee08 0a10 	vmov	s16, r0
 8016036:	9304      	str	r3, [sp, #16]
 8016038:	4bb4      	ldr	r3, [pc, #720]	; (801630c <__gethex+0x2e4>)
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	9301      	str	r3, [sp, #4]
 801603e:	4618      	mov	r0, r3
 8016040:	468b      	mov	fp, r1
 8016042:	4690      	mov	r8, r2
 8016044:	f7ea f8c4 	bl	80001d0 <strlen>
 8016048:	9b01      	ldr	r3, [sp, #4]
 801604a:	f8db 2000 	ldr.w	r2, [fp]
 801604e:	4403      	add	r3, r0
 8016050:	4682      	mov	sl, r0
 8016052:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016056:	9305      	str	r3, [sp, #20]
 8016058:	1c93      	adds	r3, r2, #2
 801605a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801605e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016062:	32fe      	adds	r2, #254	; 0xfe
 8016064:	18d1      	adds	r1, r2, r3
 8016066:	461f      	mov	r7, r3
 8016068:	f813 0b01 	ldrb.w	r0, [r3], #1
 801606c:	9100      	str	r1, [sp, #0]
 801606e:	2830      	cmp	r0, #48	; 0x30
 8016070:	d0f8      	beq.n	8016064 <__gethex+0x3c>
 8016072:	f7ff ffc3 	bl	8015ffc <__hexdig_fun>
 8016076:	4604      	mov	r4, r0
 8016078:	2800      	cmp	r0, #0
 801607a:	d13a      	bne.n	80160f2 <__gethex+0xca>
 801607c:	9901      	ldr	r1, [sp, #4]
 801607e:	4652      	mov	r2, sl
 8016080:	4638      	mov	r0, r7
 8016082:	f7fe f8d7 	bl	8014234 <strncmp>
 8016086:	4605      	mov	r5, r0
 8016088:	2800      	cmp	r0, #0
 801608a:	d168      	bne.n	801615e <__gethex+0x136>
 801608c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8016090:	eb07 060a 	add.w	r6, r7, sl
 8016094:	f7ff ffb2 	bl	8015ffc <__hexdig_fun>
 8016098:	2800      	cmp	r0, #0
 801609a:	d062      	beq.n	8016162 <__gethex+0x13a>
 801609c:	4633      	mov	r3, r6
 801609e:	7818      	ldrb	r0, [r3, #0]
 80160a0:	2830      	cmp	r0, #48	; 0x30
 80160a2:	461f      	mov	r7, r3
 80160a4:	f103 0301 	add.w	r3, r3, #1
 80160a8:	d0f9      	beq.n	801609e <__gethex+0x76>
 80160aa:	f7ff ffa7 	bl	8015ffc <__hexdig_fun>
 80160ae:	2301      	movs	r3, #1
 80160b0:	fab0 f480 	clz	r4, r0
 80160b4:	0964      	lsrs	r4, r4, #5
 80160b6:	4635      	mov	r5, r6
 80160b8:	9300      	str	r3, [sp, #0]
 80160ba:	463a      	mov	r2, r7
 80160bc:	4616      	mov	r6, r2
 80160be:	3201      	adds	r2, #1
 80160c0:	7830      	ldrb	r0, [r6, #0]
 80160c2:	f7ff ff9b 	bl	8015ffc <__hexdig_fun>
 80160c6:	2800      	cmp	r0, #0
 80160c8:	d1f8      	bne.n	80160bc <__gethex+0x94>
 80160ca:	9901      	ldr	r1, [sp, #4]
 80160cc:	4652      	mov	r2, sl
 80160ce:	4630      	mov	r0, r6
 80160d0:	f7fe f8b0 	bl	8014234 <strncmp>
 80160d4:	b980      	cbnz	r0, 80160f8 <__gethex+0xd0>
 80160d6:	b94d      	cbnz	r5, 80160ec <__gethex+0xc4>
 80160d8:	eb06 050a 	add.w	r5, r6, sl
 80160dc:	462a      	mov	r2, r5
 80160de:	4616      	mov	r6, r2
 80160e0:	3201      	adds	r2, #1
 80160e2:	7830      	ldrb	r0, [r6, #0]
 80160e4:	f7ff ff8a 	bl	8015ffc <__hexdig_fun>
 80160e8:	2800      	cmp	r0, #0
 80160ea:	d1f8      	bne.n	80160de <__gethex+0xb6>
 80160ec:	1bad      	subs	r5, r5, r6
 80160ee:	00ad      	lsls	r5, r5, #2
 80160f0:	e004      	b.n	80160fc <__gethex+0xd4>
 80160f2:	2400      	movs	r4, #0
 80160f4:	4625      	mov	r5, r4
 80160f6:	e7e0      	b.n	80160ba <__gethex+0x92>
 80160f8:	2d00      	cmp	r5, #0
 80160fa:	d1f7      	bne.n	80160ec <__gethex+0xc4>
 80160fc:	7833      	ldrb	r3, [r6, #0]
 80160fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016102:	2b50      	cmp	r3, #80	; 0x50
 8016104:	d13b      	bne.n	801617e <__gethex+0x156>
 8016106:	7873      	ldrb	r3, [r6, #1]
 8016108:	2b2b      	cmp	r3, #43	; 0x2b
 801610a:	d02c      	beq.n	8016166 <__gethex+0x13e>
 801610c:	2b2d      	cmp	r3, #45	; 0x2d
 801610e:	d02e      	beq.n	801616e <__gethex+0x146>
 8016110:	1c71      	adds	r1, r6, #1
 8016112:	f04f 0900 	mov.w	r9, #0
 8016116:	7808      	ldrb	r0, [r1, #0]
 8016118:	f7ff ff70 	bl	8015ffc <__hexdig_fun>
 801611c:	1e43      	subs	r3, r0, #1
 801611e:	b2db      	uxtb	r3, r3
 8016120:	2b18      	cmp	r3, #24
 8016122:	d82c      	bhi.n	801617e <__gethex+0x156>
 8016124:	f1a0 0210 	sub.w	r2, r0, #16
 8016128:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801612c:	f7ff ff66 	bl	8015ffc <__hexdig_fun>
 8016130:	1e43      	subs	r3, r0, #1
 8016132:	b2db      	uxtb	r3, r3
 8016134:	2b18      	cmp	r3, #24
 8016136:	d91d      	bls.n	8016174 <__gethex+0x14c>
 8016138:	f1b9 0f00 	cmp.w	r9, #0
 801613c:	d000      	beq.n	8016140 <__gethex+0x118>
 801613e:	4252      	negs	r2, r2
 8016140:	4415      	add	r5, r2
 8016142:	f8cb 1000 	str.w	r1, [fp]
 8016146:	b1e4      	cbz	r4, 8016182 <__gethex+0x15a>
 8016148:	9b00      	ldr	r3, [sp, #0]
 801614a:	2b00      	cmp	r3, #0
 801614c:	bf14      	ite	ne
 801614e:	2700      	movne	r7, #0
 8016150:	2706      	moveq	r7, #6
 8016152:	4638      	mov	r0, r7
 8016154:	b009      	add	sp, #36	; 0x24
 8016156:	ecbd 8b02 	vpop	{d8}
 801615a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801615e:	463e      	mov	r6, r7
 8016160:	4625      	mov	r5, r4
 8016162:	2401      	movs	r4, #1
 8016164:	e7ca      	b.n	80160fc <__gethex+0xd4>
 8016166:	f04f 0900 	mov.w	r9, #0
 801616a:	1cb1      	adds	r1, r6, #2
 801616c:	e7d3      	b.n	8016116 <__gethex+0xee>
 801616e:	f04f 0901 	mov.w	r9, #1
 8016172:	e7fa      	b.n	801616a <__gethex+0x142>
 8016174:	230a      	movs	r3, #10
 8016176:	fb03 0202 	mla	r2, r3, r2, r0
 801617a:	3a10      	subs	r2, #16
 801617c:	e7d4      	b.n	8016128 <__gethex+0x100>
 801617e:	4631      	mov	r1, r6
 8016180:	e7df      	b.n	8016142 <__gethex+0x11a>
 8016182:	1bf3      	subs	r3, r6, r7
 8016184:	3b01      	subs	r3, #1
 8016186:	4621      	mov	r1, r4
 8016188:	2b07      	cmp	r3, #7
 801618a:	dc0b      	bgt.n	80161a4 <__gethex+0x17c>
 801618c:	ee18 0a10 	vmov	r0, s16
 8016190:	f000 fa86 	bl	80166a0 <_Balloc>
 8016194:	4604      	mov	r4, r0
 8016196:	b940      	cbnz	r0, 80161aa <__gethex+0x182>
 8016198:	4b5d      	ldr	r3, [pc, #372]	; (8016310 <__gethex+0x2e8>)
 801619a:	4602      	mov	r2, r0
 801619c:	21de      	movs	r1, #222	; 0xde
 801619e:	485d      	ldr	r0, [pc, #372]	; (8016314 <__gethex+0x2ec>)
 80161a0:	f001 f8c4 	bl	801732c <__assert_func>
 80161a4:	3101      	adds	r1, #1
 80161a6:	105b      	asrs	r3, r3, #1
 80161a8:	e7ee      	b.n	8016188 <__gethex+0x160>
 80161aa:	f100 0914 	add.w	r9, r0, #20
 80161ae:	f04f 0b00 	mov.w	fp, #0
 80161b2:	f1ca 0301 	rsb	r3, sl, #1
 80161b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80161ba:	f8cd b000 	str.w	fp, [sp]
 80161be:	9306      	str	r3, [sp, #24]
 80161c0:	42b7      	cmp	r7, r6
 80161c2:	d340      	bcc.n	8016246 <__gethex+0x21e>
 80161c4:	9802      	ldr	r0, [sp, #8]
 80161c6:	9b00      	ldr	r3, [sp, #0]
 80161c8:	f840 3b04 	str.w	r3, [r0], #4
 80161cc:	eba0 0009 	sub.w	r0, r0, r9
 80161d0:	1080      	asrs	r0, r0, #2
 80161d2:	0146      	lsls	r6, r0, #5
 80161d4:	6120      	str	r0, [r4, #16]
 80161d6:	4618      	mov	r0, r3
 80161d8:	f000 fb54 	bl	8016884 <__hi0bits>
 80161dc:	1a30      	subs	r0, r6, r0
 80161de:	f8d8 6000 	ldr.w	r6, [r8]
 80161e2:	42b0      	cmp	r0, r6
 80161e4:	dd63      	ble.n	80162ae <__gethex+0x286>
 80161e6:	1b87      	subs	r7, r0, r6
 80161e8:	4639      	mov	r1, r7
 80161ea:	4620      	mov	r0, r4
 80161ec:	f000 fef8 	bl	8016fe0 <__any_on>
 80161f0:	4682      	mov	sl, r0
 80161f2:	b1a8      	cbz	r0, 8016220 <__gethex+0x1f8>
 80161f4:	1e7b      	subs	r3, r7, #1
 80161f6:	1159      	asrs	r1, r3, #5
 80161f8:	f003 021f 	and.w	r2, r3, #31
 80161fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8016200:	f04f 0a01 	mov.w	sl, #1
 8016204:	fa0a f202 	lsl.w	r2, sl, r2
 8016208:	420a      	tst	r2, r1
 801620a:	d009      	beq.n	8016220 <__gethex+0x1f8>
 801620c:	4553      	cmp	r3, sl
 801620e:	dd05      	ble.n	801621c <__gethex+0x1f4>
 8016210:	1eb9      	subs	r1, r7, #2
 8016212:	4620      	mov	r0, r4
 8016214:	f000 fee4 	bl	8016fe0 <__any_on>
 8016218:	2800      	cmp	r0, #0
 801621a:	d145      	bne.n	80162a8 <__gethex+0x280>
 801621c:	f04f 0a02 	mov.w	sl, #2
 8016220:	4639      	mov	r1, r7
 8016222:	4620      	mov	r0, r4
 8016224:	f7ff fe98 	bl	8015f58 <rshift>
 8016228:	443d      	add	r5, r7
 801622a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801622e:	42ab      	cmp	r3, r5
 8016230:	da4c      	bge.n	80162cc <__gethex+0x2a4>
 8016232:	ee18 0a10 	vmov	r0, s16
 8016236:	4621      	mov	r1, r4
 8016238:	f000 fa72 	bl	8016720 <_Bfree>
 801623c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801623e:	2300      	movs	r3, #0
 8016240:	6013      	str	r3, [r2, #0]
 8016242:	27a3      	movs	r7, #163	; 0xa3
 8016244:	e785      	b.n	8016152 <__gethex+0x12a>
 8016246:	1e73      	subs	r3, r6, #1
 8016248:	9a05      	ldr	r2, [sp, #20]
 801624a:	9303      	str	r3, [sp, #12]
 801624c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016250:	4293      	cmp	r3, r2
 8016252:	d019      	beq.n	8016288 <__gethex+0x260>
 8016254:	f1bb 0f20 	cmp.w	fp, #32
 8016258:	d107      	bne.n	801626a <__gethex+0x242>
 801625a:	9b02      	ldr	r3, [sp, #8]
 801625c:	9a00      	ldr	r2, [sp, #0]
 801625e:	f843 2b04 	str.w	r2, [r3], #4
 8016262:	9302      	str	r3, [sp, #8]
 8016264:	2300      	movs	r3, #0
 8016266:	9300      	str	r3, [sp, #0]
 8016268:	469b      	mov	fp, r3
 801626a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801626e:	f7ff fec5 	bl	8015ffc <__hexdig_fun>
 8016272:	9b00      	ldr	r3, [sp, #0]
 8016274:	f000 000f 	and.w	r0, r0, #15
 8016278:	fa00 f00b 	lsl.w	r0, r0, fp
 801627c:	4303      	orrs	r3, r0
 801627e:	9300      	str	r3, [sp, #0]
 8016280:	f10b 0b04 	add.w	fp, fp, #4
 8016284:	9b03      	ldr	r3, [sp, #12]
 8016286:	e00d      	b.n	80162a4 <__gethex+0x27c>
 8016288:	9b03      	ldr	r3, [sp, #12]
 801628a:	9a06      	ldr	r2, [sp, #24]
 801628c:	4413      	add	r3, r2
 801628e:	42bb      	cmp	r3, r7
 8016290:	d3e0      	bcc.n	8016254 <__gethex+0x22c>
 8016292:	4618      	mov	r0, r3
 8016294:	9901      	ldr	r1, [sp, #4]
 8016296:	9307      	str	r3, [sp, #28]
 8016298:	4652      	mov	r2, sl
 801629a:	f7fd ffcb 	bl	8014234 <strncmp>
 801629e:	9b07      	ldr	r3, [sp, #28]
 80162a0:	2800      	cmp	r0, #0
 80162a2:	d1d7      	bne.n	8016254 <__gethex+0x22c>
 80162a4:	461e      	mov	r6, r3
 80162a6:	e78b      	b.n	80161c0 <__gethex+0x198>
 80162a8:	f04f 0a03 	mov.w	sl, #3
 80162ac:	e7b8      	b.n	8016220 <__gethex+0x1f8>
 80162ae:	da0a      	bge.n	80162c6 <__gethex+0x29e>
 80162b0:	1a37      	subs	r7, r6, r0
 80162b2:	4621      	mov	r1, r4
 80162b4:	ee18 0a10 	vmov	r0, s16
 80162b8:	463a      	mov	r2, r7
 80162ba:	f000 fc4d 	bl	8016b58 <__lshift>
 80162be:	1bed      	subs	r5, r5, r7
 80162c0:	4604      	mov	r4, r0
 80162c2:	f100 0914 	add.w	r9, r0, #20
 80162c6:	f04f 0a00 	mov.w	sl, #0
 80162ca:	e7ae      	b.n	801622a <__gethex+0x202>
 80162cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80162d0:	42a8      	cmp	r0, r5
 80162d2:	dd72      	ble.n	80163ba <__gethex+0x392>
 80162d4:	1b45      	subs	r5, r0, r5
 80162d6:	42ae      	cmp	r6, r5
 80162d8:	dc36      	bgt.n	8016348 <__gethex+0x320>
 80162da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80162de:	2b02      	cmp	r3, #2
 80162e0:	d02a      	beq.n	8016338 <__gethex+0x310>
 80162e2:	2b03      	cmp	r3, #3
 80162e4:	d02c      	beq.n	8016340 <__gethex+0x318>
 80162e6:	2b01      	cmp	r3, #1
 80162e8:	d11c      	bne.n	8016324 <__gethex+0x2fc>
 80162ea:	42ae      	cmp	r6, r5
 80162ec:	d11a      	bne.n	8016324 <__gethex+0x2fc>
 80162ee:	2e01      	cmp	r6, #1
 80162f0:	d112      	bne.n	8016318 <__gethex+0x2f0>
 80162f2:	9a04      	ldr	r2, [sp, #16]
 80162f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80162f8:	6013      	str	r3, [r2, #0]
 80162fa:	2301      	movs	r3, #1
 80162fc:	6123      	str	r3, [r4, #16]
 80162fe:	f8c9 3000 	str.w	r3, [r9]
 8016302:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016304:	2762      	movs	r7, #98	; 0x62
 8016306:	601c      	str	r4, [r3, #0]
 8016308:	e723      	b.n	8016152 <__gethex+0x12a>
 801630a:	bf00      	nop
 801630c:	08019720 	.word	0x08019720
 8016310:	080196a7 	.word	0x080196a7
 8016314:	080196b8 	.word	0x080196b8
 8016318:	1e71      	subs	r1, r6, #1
 801631a:	4620      	mov	r0, r4
 801631c:	f000 fe60 	bl	8016fe0 <__any_on>
 8016320:	2800      	cmp	r0, #0
 8016322:	d1e6      	bne.n	80162f2 <__gethex+0x2ca>
 8016324:	ee18 0a10 	vmov	r0, s16
 8016328:	4621      	mov	r1, r4
 801632a:	f000 f9f9 	bl	8016720 <_Bfree>
 801632e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016330:	2300      	movs	r3, #0
 8016332:	6013      	str	r3, [r2, #0]
 8016334:	2750      	movs	r7, #80	; 0x50
 8016336:	e70c      	b.n	8016152 <__gethex+0x12a>
 8016338:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801633a:	2b00      	cmp	r3, #0
 801633c:	d1f2      	bne.n	8016324 <__gethex+0x2fc>
 801633e:	e7d8      	b.n	80162f2 <__gethex+0x2ca>
 8016340:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016342:	2b00      	cmp	r3, #0
 8016344:	d1d5      	bne.n	80162f2 <__gethex+0x2ca>
 8016346:	e7ed      	b.n	8016324 <__gethex+0x2fc>
 8016348:	1e6f      	subs	r7, r5, #1
 801634a:	f1ba 0f00 	cmp.w	sl, #0
 801634e:	d131      	bne.n	80163b4 <__gethex+0x38c>
 8016350:	b127      	cbz	r7, 801635c <__gethex+0x334>
 8016352:	4639      	mov	r1, r7
 8016354:	4620      	mov	r0, r4
 8016356:	f000 fe43 	bl	8016fe0 <__any_on>
 801635a:	4682      	mov	sl, r0
 801635c:	117b      	asrs	r3, r7, #5
 801635e:	2101      	movs	r1, #1
 8016360:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016364:	f007 071f 	and.w	r7, r7, #31
 8016368:	fa01 f707 	lsl.w	r7, r1, r7
 801636c:	421f      	tst	r7, r3
 801636e:	4629      	mov	r1, r5
 8016370:	4620      	mov	r0, r4
 8016372:	bf18      	it	ne
 8016374:	f04a 0a02 	orrne.w	sl, sl, #2
 8016378:	1b76      	subs	r6, r6, r5
 801637a:	f7ff fded 	bl	8015f58 <rshift>
 801637e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016382:	2702      	movs	r7, #2
 8016384:	f1ba 0f00 	cmp.w	sl, #0
 8016388:	d048      	beq.n	801641c <__gethex+0x3f4>
 801638a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801638e:	2b02      	cmp	r3, #2
 8016390:	d015      	beq.n	80163be <__gethex+0x396>
 8016392:	2b03      	cmp	r3, #3
 8016394:	d017      	beq.n	80163c6 <__gethex+0x39e>
 8016396:	2b01      	cmp	r3, #1
 8016398:	d109      	bne.n	80163ae <__gethex+0x386>
 801639a:	f01a 0f02 	tst.w	sl, #2
 801639e:	d006      	beq.n	80163ae <__gethex+0x386>
 80163a0:	f8d9 0000 	ldr.w	r0, [r9]
 80163a4:	ea4a 0a00 	orr.w	sl, sl, r0
 80163a8:	f01a 0f01 	tst.w	sl, #1
 80163ac:	d10e      	bne.n	80163cc <__gethex+0x3a4>
 80163ae:	f047 0710 	orr.w	r7, r7, #16
 80163b2:	e033      	b.n	801641c <__gethex+0x3f4>
 80163b4:	f04f 0a01 	mov.w	sl, #1
 80163b8:	e7d0      	b.n	801635c <__gethex+0x334>
 80163ba:	2701      	movs	r7, #1
 80163bc:	e7e2      	b.n	8016384 <__gethex+0x35c>
 80163be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80163c0:	f1c3 0301 	rsb	r3, r3, #1
 80163c4:	9315      	str	r3, [sp, #84]	; 0x54
 80163c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d0f0      	beq.n	80163ae <__gethex+0x386>
 80163cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80163d0:	f104 0314 	add.w	r3, r4, #20
 80163d4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80163d8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80163dc:	f04f 0c00 	mov.w	ip, #0
 80163e0:	4618      	mov	r0, r3
 80163e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80163e6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80163ea:	d01c      	beq.n	8016426 <__gethex+0x3fe>
 80163ec:	3201      	adds	r2, #1
 80163ee:	6002      	str	r2, [r0, #0]
 80163f0:	2f02      	cmp	r7, #2
 80163f2:	f104 0314 	add.w	r3, r4, #20
 80163f6:	d13f      	bne.n	8016478 <__gethex+0x450>
 80163f8:	f8d8 2000 	ldr.w	r2, [r8]
 80163fc:	3a01      	subs	r2, #1
 80163fe:	42b2      	cmp	r2, r6
 8016400:	d10a      	bne.n	8016418 <__gethex+0x3f0>
 8016402:	1171      	asrs	r1, r6, #5
 8016404:	2201      	movs	r2, #1
 8016406:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801640a:	f006 061f 	and.w	r6, r6, #31
 801640e:	fa02 f606 	lsl.w	r6, r2, r6
 8016412:	421e      	tst	r6, r3
 8016414:	bf18      	it	ne
 8016416:	4617      	movne	r7, r2
 8016418:	f047 0720 	orr.w	r7, r7, #32
 801641c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801641e:	601c      	str	r4, [r3, #0]
 8016420:	9b04      	ldr	r3, [sp, #16]
 8016422:	601d      	str	r5, [r3, #0]
 8016424:	e695      	b.n	8016152 <__gethex+0x12a>
 8016426:	4299      	cmp	r1, r3
 8016428:	f843 cc04 	str.w	ip, [r3, #-4]
 801642c:	d8d8      	bhi.n	80163e0 <__gethex+0x3b8>
 801642e:	68a3      	ldr	r3, [r4, #8]
 8016430:	459b      	cmp	fp, r3
 8016432:	db19      	blt.n	8016468 <__gethex+0x440>
 8016434:	6861      	ldr	r1, [r4, #4]
 8016436:	ee18 0a10 	vmov	r0, s16
 801643a:	3101      	adds	r1, #1
 801643c:	f000 f930 	bl	80166a0 <_Balloc>
 8016440:	4681      	mov	r9, r0
 8016442:	b918      	cbnz	r0, 801644c <__gethex+0x424>
 8016444:	4b1a      	ldr	r3, [pc, #104]	; (80164b0 <__gethex+0x488>)
 8016446:	4602      	mov	r2, r0
 8016448:	2184      	movs	r1, #132	; 0x84
 801644a:	e6a8      	b.n	801619e <__gethex+0x176>
 801644c:	6922      	ldr	r2, [r4, #16]
 801644e:	3202      	adds	r2, #2
 8016450:	f104 010c 	add.w	r1, r4, #12
 8016454:	0092      	lsls	r2, r2, #2
 8016456:	300c      	adds	r0, #12
 8016458:	f7fd f884 	bl	8013564 <memcpy>
 801645c:	4621      	mov	r1, r4
 801645e:	ee18 0a10 	vmov	r0, s16
 8016462:	f000 f95d 	bl	8016720 <_Bfree>
 8016466:	464c      	mov	r4, r9
 8016468:	6923      	ldr	r3, [r4, #16]
 801646a:	1c5a      	adds	r2, r3, #1
 801646c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016470:	6122      	str	r2, [r4, #16]
 8016472:	2201      	movs	r2, #1
 8016474:	615a      	str	r2, [r3, #20]
 8016476:	e7bb      	b.n	80163f0 <__gethex+0x3c8>
 8016478:	6922      	ldr	r2, [r4, #16]
 801647a:	455a      	cmp	r2, fp
 801647c:	dd0b      	ble.n	8016496 <__gethex+0x46e>
 801647e:	2101      	movs	r1, #1
 8016480:	4620      	mov	r0, r4
 8016482:	f7ff fd69 	bl	8015f58 <rshift>
 8016486:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801648a:	3501      	adds	r5, #1
 801648c:	42ab      	cmp	r3, r5
 801648e:	f6ff aed0 	blt.w	8016232 <__gethex+0x20a>
 8016492:	2701      	movs	r7, #1
 8016494:	e7c0      	b.n	8016418 <__gethex+0x3f0>
 8016496:	f016 061f 	ands.w	r6, r6, #31
 801649a:	d0fa      	beq.n	8016492 <__gethex+0x46a>
 801649c:	4453      	add	r3, sl
 801649e:	f1c6 0620 	rsb	r6, r6, #32
 80164a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80164a6:	f000 f9ed 	bl	8016884 <__hi0bits>
 80164aa:	42b0      	cmp	r0, r6
 80164ac:	dbe7      	blt.n	801647e <__gethex+0x456>
 80164ae:	e7f0      	b.n	8016492 <__gethex+0x46a>
 80164b0:	080196a7 	.word	0x080196a7

080164b4 <L_shift>:
 80164b4:	f1c2 0208 	rsb	r2, r2, #8
 80164b8:	0092      	lsls	r2, r2, #2
 80164ba:	b570      	push	{r4, r5, r6, lr}
 80164bc:	f1c2 0620 	rsb	r6, r2, #32
 80164c0:	6843      	ldr	r3, [r0, #4]
 80164c2:	6804      	ldr	r4, [r0, #0]
 80164c4:	fa03 f506 	lsl.w	r5, r3, r6
 80164c8:	432c      	orrs	r4, r5
 80164ca:	40d3      	lsrs	r3, r2
 80164cc:	6004      	str	r4, [r0, #0]
 80164ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80164d2:	4288      	cmp	r0, r1
 80164d4:	d3f4      	bcc.n	80164c0 <L_shift+0xc>
 80164d6:	bd70      	pop	{r4, r5, r6, pc}

080164d8 <__match>:
 80164d8:	b530      	push	{r4, r5, lr}
 80164da:	6803      	ldr	r3, [r0, #0]
 80164dc:	3301      	adds	r3, #1
 80164de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80164e2:	b914      	cbnz	r4, 80164ea <__match+0x12>
 80164e4:	6003      	str	r3, [r0, #0]
 80164e6:	2001      	movs	r0, #1
 80164e8:	bd30      	pop	{r4, r5, pc}
 80164ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80164ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80164f2:	2d19      	cmp	r5, #25
 80164f4:	bf98      	it	ls
 80164f6:	3220      	addls	r2, #32
 80164f8:	42a2      	cmp	r2, r4
 80164fa:	d0f0      	beq.n	80164de <__match+0x6>
 80164fc:	2000      	movs	r0, #0
 80164fe:	e7f3      	b.n	80164e8 <__match+0x10>

08016500 <__hexnan>:
 8016500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016504:	680b      	ldr	r3, [r1, #0]
 8016506:	115e      	asrs	r6, r3, #5
 8016508:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801650c:	f013 031f 	ands.w	r3, r3, #31
 8016510:	b087      	sub	sp, #28
 8016512:	bf18      	it	ne
 8016514:	3604      	addne	r6, #4
 8016516:	2500      	movs	r5, #0
 8016518:	1f37      	subs	r7, r6, #4
 801651a:	4690      	mov	r8, r2
 801651c:	6802      	ldr	r2, [r0, #0]
 801651e:	9301      	str	r3, [sp, #4]
 8016520:	4682      	mov	sl, r0
 8016522:	f846 5c04 	str.w	r5, [r6, #-4]
 8016526:	46b9      	mov	r9, r7
 8016528:	463c      	mov	r4, r7
 801652a:	9502      	str	r5, [sp, #8]
 801652c:	46ab      	mov	fp, r5
 801652e:	7851      	ldrb	r1, [r2, #1]
 8016530:	1c53      	adds	r3, r2, #1
 8016532:	9303      	str	r3, [sp, #12]
 8016534:	b341      	cbz	r1, 8016588 <__hexnan+0x88>
 8016536:	4608      	mov	r0, r1
 8016538:	9205      	str	r2, [sp, #20]
 801653a:	9104      	str	r1, [sp, #16]
 801653c:	f7ff fd5e 	bl	8015ffc <__hexdig_fun>
 8016540:	2800      	cmp	r0, #0
 8016542:	d14f      	bne.n	80165e4 <__hexnan+0xe4>
 8016544:	9904      	ldr	r1, [sp, #16]
 8016546:	9a05      	ldr	r2, [sp, #20]
 8016548:	2920      	cmp	r1, #32
 801654a:	d818      	bhi.n	801657e <__hexnan+0x7e>
 801654c:	9b02      	ldr	r3, [sp, #8]
 801654e:	459b      	cmp	fp, r3
 8016550:	dd13      	ble.n	801657a <__hexnan+0x7a>
 8016552:	454c      	cmp	r4, r9
 8016554:	d206      	bcs.n	8016564 <__hexnan+0x64>
 8016556:	2d07      	cmp	r5, #7
 8016558:	dc04      	bgt.n	8016564 <__hexnan+0x64>
 801655a:	462a      	mov	r2, r5
 801655c:	4649      	mov	r1, r9
 801655e:	4620      	mov	r0, r4
 8016560:	f7ff ffa8 	bl	80164b4 <L_shift>
 8016564:	4544      	cmp	r4, r8
 8016566:	d950      	bls.n	801660a <__hexnan+0x10a>
 8016568:	2300      	movs	r3, #0
 801656a:	f1a4 0904 	sub.w	r9, r4, #4
 801656e:	f844 3c04 	str.w	r3, [r4, #-4]
 8016572:	f8cd b008 	str.w	fp, [sp, #8]
 8016576:	464c      	mov	r4, r9
 8016578:	461d      	mov	r5, r3
 801657a:	9a03      	ldr	r2, [sp, #12]
 801657c:	e7d7      	b.n	801652e <__hexnan+0x2e>
 801657e:	2929      	cmp	r1, #41	; 0x29
 8016580:	d156      	bne.n	8016630 <__hexnan+0x130>
 8016582:	3202      	adds	r2, #2
 8016584:	f8ca 2000 	str.w	r2, [sl]
 8016588:	f1bb 0f00 	cmp.w	fp, #0
 801658c:	d050      	beq.n	8016630 <__hexnan+0x130>
 801658e:	454c      	cmp	r4, r9
 8016590:	d206      	bcs.n	80165a0 <__hexnan+0xa0>
 8016592:	2d07      	cmp	r5, #7
 8016594:	dc04      	bgt.n	80165a0 <__hexnan+0xa0>
 8016596:	462a      	mov	r2, r5
 8016598:	4649      	mov	r1, r9
 801659a:	4620      	mov	r0, r4
 801659c:	f7ff ff8a 	bl	80164b4 <L_shift>
 80165a0:	4544      	cmp	r4, r8
 80165a2:	d934      	bls.n	801660e <__hexnan+0x10e>
 80165a4:	f1a8 0204 	sub.w	r2, r8, #4
 80165a8:	4623      	mov	r3, r4
 80165aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80165ae:	f842 1f04 	str.w	r1, [r2, #4]!
 80165b2:	429f      	cmp	r7, r3
 80165b4:	d2f9      	bcs.n	80165aa <__hexnan+0xaa>
 80165b6:	1b3b      	subs	r3, r7, r4
 80165b8:	f023 0303 	bic.w	r3, r3, #3
 80165bc:	3304      	adds	r3, #4
 80165be:	3401      	adds	r4, #1
 80165c0:	3e03      	subs	r6, #3
 80165c2:	42b4      	cmp	r4, r6
 80165c4:	bf88      	it	hi
 80165c6:	2304      	movhi	r3, #4
 80165c8:	4443      	add	r3, r8
 80165ca:	2200      	movs	r2, #0
 80165cc:	f843 2b04 	str.w	r2, [r3], #4
 80165d0:	429f      	cmp	r7, r3
 80165d2:	d2fb      	bcs.n	80165cc <__hexnan+0xcc>
 80165d4:	683b      	ldr	r3, [r7, #0]
 80165d6:	b91b      	cbnz	r3, 80165e0 <__hexnan+0xe0>
 80165d8:	4547      	cmp	r7, r8
 80165da:	d127      	bne.n	801662c <__hexnan+0x12c>
 80165dc:	2301      	movs	r3, #1
 80165de:	603b      	str	r3, [r7, #0]
 80165e0:	2005      	movs	r0, #5
 80165e2:	e026      	b.n	8016632 <__hexnan+0x132>
 80165e4:	3501      	adds	r5, #1
 80165e6:	2d08      	cmp	r5, #8
 80165e8:	f10b 0b01 	add.w	fp, fp, #1
 80165ec:	dd06      	ble.n	80165fc <__hexnan+0xfc>
 80165ee:	4544      	cmp	r4, r8
 80165f0:	d9c3      	bls.n	801657a <__hexnan+0x7a>
 80165f2:	2300      	movs	r3, #0
 80165f4:	f844 3c04 	str.w	r3, [r4, #-4]
 80165f8:	2501      	movs	r5, #1
 80165fa:	3c04      	subs	r4, #4
 80165fc:	6822      	ldr	r2, [r4, #0]
 80165fe:	f000 000f 	and.w	r0, r0, #15
 8016602:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8016606:	6022      	str	r2, [r4, #0]
 8016608:	e7b7      	b.n	801657a <__hexnan+0x7a>
 801660a:	2508      	movs	r5, #8
 801660c:	e7b5      	b.n	801657a <__hexnan+0x7a>
 801660e:	9b01      	ldr	r3, [sp, #4]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d0df      	beq.n	80165d4 <__hexnan+0xd4>
 8016614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016618:	f1c3 0320 	rsb	r3, r3, #32
 801661c:	fa22 f303 	lsr.w	r3, r2, r3
 8016620:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016624:	401a      	ands	r2, r3
 8016626:	f846 2c04 	str.w	r2, [r6, #-4]
 801662a:	e7d3      	b.n	80165d4 <__hexnan+0xd4>
 801662c:	3f04      	subs	r7, #4
 801662e:	e7d1      	b.n	80165d4 <__hexnan+0xd4>
 8016630:	2004      	movs	r0, #4
 8016632:	b007      	add	sp, #28
 8016634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016638 <_localeconv_r>:
 8016638:	4800      	ldr	r0, [pc, #0]	; (801663c <_localeconv_r+0x4>)
 801663a:	4770      	bx	lr
 801663c:	200002e4 	.word	0x200002e4

08016640 <_lseek_r>:
 8016640:	b538      	push	{r3, r4, r5, lr}
 8016642:	4d07      	ldr	r5, [pc, #28]	; (8016660 <_lseek_r+0x20>)
 8016644:	4604      	mov	r4, r0
 8016646:	4608      	mov	r0, r1
 8016648:	4611      	mov	r1, r2
 801664a:	2200      	movs	r2, #0
 801664c:	602a      	str	r2, [r5, #0]
 801664e:	461a      	mov	r2, r3
 8016650:	f7f0 fbe4 	bl	8006e1c <_lseek>
 8016654:	1c43      	adds	r3, r0, #1
 8016656:	d102      	bne.n	801665e <_lseek_r+0x1e>
 8016658:	682b      	ldr	r3, [r5, #0]
 801665a:	b103      	cbz	r3, 801665e <_lseek_r+0x1e>
 801665c:	6023      	str	r3, [r4, #0]
 801665e:	bd38      	pop	{r3, r4, r5, pc}
 8016660:	200085e4 	.word	0x200085e4

08016664 <__ascii_mbtowc>:
 8016664:	b082      	sub	sp, #8
 8016666:	b901      	cbnz	r1, 801666a <__ascii_mbtowc+0x6>
 8016668:	a901      	add	r1, sp, #4
 801666a:	b142      	cbz	r2, 801667e <__ascii_mbtowc+0x1a>
 801666c:	b14b      	cbz	r3, 8016682 <__ascii_mbtowc+0x1e>
 801666e:	7813      	ldrb	r3, [r2, #0]
 8016670:	600b      	str	r3, [r1, #0]
 8016672:	7812      	ldrb	r2, [r2, #0]
 8016674:	1e10      	subs	r0, r2, #0
 8016676:	bf18      	it	ne
 8016678:	2001      	movne	r0, #1
 801667a:	b002      	add	sp, #8
 801667c:	4770      	bx	lr
 801667e:	4610      	mov	r0, r2
 8016680:	e7fb      	b.n	801667a <__ascii_mbtowc+0x16>
 8016682:	f06f 0001 	mvn.w	r0, #1
 8016686:	e7f8      	b.n	801667a <__ascii_mbtowc+0x16>

08016688 <__malloc_lock>:
 8016688:	4801      	ldr	r0, [pc, #4]	; (8016690 <__malloc_lock+0x8>)
 801668a:	f7fc bf58 	b.w	801353e <__retarget_lock_acquire_recursive>
 801668e:	bf00      	nop
 8016690:	200085d8 	.word	0x200085d8

08016694 <__malloc_unlock>:
 8016694:	4801      	ldr	r0, [pc, #4]	; (801669c <__malloc_unlock+0x8>)
 8016696:	f7fc bf53 	b.w	8013540 <__retarget_lock_release_recursive>
 801669a:	bf00      	nop
 801669c:	200085d8 	.word	0x200085d8

080166a0 <_Balloc>:
 80166a0:	b570      	push	{r4, r5, r6, lr}
 80166a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80166a4:	4604      	mov	r4, r0
 80166a6:	460d      	mov	r5, r1
 80166a8:	b976      	cbnz	r6, 80166c8 <_Balloc+0x28>
 80166aa:	2010      	movs	r0, #16
 80166ac:	f7fc ff4a 	bl	8013544 <malloc>
 80166b0:	4602      	mov	r2, r0
 80166b2:	6260      	str	r0, [r4, #36]	; 0x24
 80166b4:	b920      	cbnz	r0, 80166c0 <_Balloc+0x20>
 80166b6:	4b18      	ldr	r3, [pc, #96]	; (8016718 <_Balloc+0x78>)
 80166b8:	4818      	ldr	r0, [pc, #96]	; (801671c <_Balloc+0x7c>)
 80166ba:	2166      	movs	r1, #102	; 0x66
 80166bc:	f000 fe36 	bl	801732c <__assert_func>
 80166c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80166c4:	6006      	str	r6, [r0, #0]
 80166c6:	60c6      	str	r6, [r0, #12]
 80166c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80166ca:	68f3      	ldr	r3, [r6, #12]
 80166cc:	b183      	cbz	r3, 80166f0 <_Balloc+0x50>
 80166ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80166d0:	68db      	ldr	r3, [r3, #12]
 80166d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80166d6:	b9b8      	cbnz	r0, 8016708 <_Balloc+0x68>
 80166d8:	2101      	movs	r1, #1
 80166da:	fa01 f605 	lsl.w	r6, r1, r5
 80166de:	1d72      	adds	r2, r6, #5
 80166e0:	0092      	lsls	r2, r2, #2
 80166e2:	4620      	mov	r0, r4
 80166e4:	f7fc ff54 	bl	8013590 <_calloc_r>
 80166e8:	b160      	cbz	r0, 8016704 <_Balloc+0x64>
 80166ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80166ee:	e00e      	b.n	801670e <_Balloc+0x6e>
 80166f0:	2221      	movs	r2, #33	; 0x21
 80166f2:	2104      	movs	r1, #4
 80166f4:	4620      	mov	r0, r4
 80166f6:	f7fc ff4b 	bl	8013590 <_calloc_r>
 80166fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80166fc:	60f0      	str	r0, [r6, #12]
 80166fe:	68db      	ldr	r3, [r3, #12]
 8016700:	2b00      	cmp	r3, #0
 8016702:	d1e4      	bne.n	80166ce <_Balloc+0x2e>
 8016704:	2000      	movs	r0, #0
 8016706:	bd70      	pop	{r4, r5, r6, pc}
 8016708:	6802      	ldr	r2, [r0, #0]
 801670a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801670e:	2300      	movs	r3, #0
 8016710:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016714:	e7f7      	b.n	8016706 <_Balloc+0x66>
 8016716:	bf00      	nop
 8016718:	08019635 	.word	0x08019635
 801671c:	08019734 	.word	0x08019734

08016720 <_Bfree>:
 8016720:	b570      	push	{r4, r5, r6, lr}
 8016722:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016724:	4605      	mov	r5, r0
 8016726:	460c      	mov	r4, r1
 8016728:	b976      	cbnz	r6, 8016748 <_Bfree+0x28>
 801672a:	2010      	movs	r0, #16
 801672c:	f7fc ff0a 	bl	8013544 <malloc>
 8016730:	4602      	mov	r2, r0
 8016732:	6268      	str	r0, [r5, #36]	; 0x24
 8016734:	b920      	cbnz	r0, 8016740 <_Bfree+0x20>
 8016736:	4b09      	ldr	r3, [pc, #36]	; (801675c <_Bfree+0x3c>)
 8016738:	4809      	ldr	r0, [pc, #36]	; (8016760 <_Bfree+0x40>)
 801673a:	218a      	movs	r1, #138	; 0x8a
 801673c:	f000 fdf6 	bl	801732c <__assert_func>
 8016740:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016744:	6006      	str	r6, [r0, #0]
 8016746:	60c6      	str	r6, [r0, #12]
 8016748:	b13c      	cbz	r4, 801675a <_Bfree+0x3a>
 801674a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801674c:	6862      	ldr	r2, [r4, #4]
 801674e:	68db      	ldr	r3, [r3, #12]
 8016750:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016754:	6021      	str	r1, [r4, #0]
 8016756:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801675a:	bd70      	pop	{r4, r5, r6, pc}
 801675c:	08019635 	.word	0x08019635
 8016760:	08019734 	.word	0x08019734

08016764 <__multadd>:
 8016764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016768:	690d      	ldr	r5, [r1, #16]
 801676a:	4607      	mov	r7, r0
 801676c:	460c      	mov	r4, r1
 801676e:	461e      	mov	r6, r3
 8016770:	f101 0c14 	add.w	ip, r1, #20
 8016774:	2000      	movs	r0, #0
 8016776:	f8dc 3000 	ldr.w	r3, [ip]
 801677a:	b299      	uxth	r1, r3
 801677c:	fb02 6101 	mla	r1, r2, r1, r6
 8016780:	0c1e      	lsrs	r6, r3, #16
 8016782:	0c0b      	lsrs	r3, r1, #16
 8016784:	fb02 3306 	mla	r3, r2, r6, r3
 8016788:	b289      	uxth	r1, r1
 801678a:	3001      	adds	r0, #1
 801678c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016790:	4285      	cmp	r5, r0
 8016792:	f84c 1b04 	str.w	r1, [ip], #4
 8016796:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801679a:	dcec      	bgt.n	8016776 <__multadd+0x12>
 801679c:	b30e      	cbz	r6, 80167e2 <__multadd+0x7e>
 801679e:	68a3      	ldr	r3, [r4, #8]
 80167a0:	42ab      	cmp	r3, r5
 80167a2:	dc19      	bgt.n	80167d8 <__multadd+0x74>
 80167a4:	6861      	ldr	r1, [r4, #4]
 80167a6:	4638      	mov	r0, r7
 80167a8:	3101      	adds	r1, #1
 80167aa:	f7ff ff79 	bl	80166a0 <_Balloc>
 80167ae:	4680      	mov	r8, r0
 80167b0:	b928      	cbnz	r0, 80167be <__multadd+0x5a>
 80167b2:	4602      	mov	r2, r0
 80167b4:	4b0c      	ldr	r3, [pc, #48]	; (80167e8 <__multadd+0x84>)
 80167b6:	480d      	ldr	r0, [pc, #52]	; (80167ec <__multadd+0x88>)
 80167b8:	21b5      	movs	r1, #181	; 0xb5
 80167ba:	f000 fdb7 	bl	801732c <__assert_func>
 80167be:	6922      	ldr	r2, [r4, #16]
 80167c0:	3202      	adds	r2, #2
 80167c2:	f104 010c 	add.w	r1, r4, #12
 80167c6:	0092      	lsls	r2, r2, #2
 80167c8:	300c      	adds	r0, #12
 80167ca:	f7fc fecb 	bl	8013564 <memcpy>
 80167ce:	4621      	mov	r1, r4
 80167d0:	4638      	mov	r0, r7
 80167d2:	f7ff ffa5 	bl	8016720 <_Bfree>
 80167d6:	4644      	mov	r4, r8
 80167d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80167dc:	3501      	adds	r5, #1
 80167de:	615e      	str	r6, [r3, #20]
 80167e0:	6125      	str	r5, [r4, #16]
 80167e2:	4620      	mov	r0, r4
 80167e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167e8:	080196a7 	.word	0x080196a7
 80167ec:	08019734 	.word	0x08019734

080167f0 <__s2b>:
 80167f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167f4:	460c      	mov	r4, r1
 80167f6:	4615      	mov	r5, r2
 80167f8:	461f      	mov	r7, r3
 80167fa:	2209      	movs	r2, #9
 80167fc:	3308      	adds	r3, #8
 80167fe:	4606      	mov	r6, r0
 8016800:	fb93 f3f2 	sdiv	r3, r3, r2
 8016804:	2100      	movs	r1, #0
 8016806:	2201      	movs	r2, #1
 8016808:	429a      	cmp	r2, r3
 801680a:	db09      	blt.n	8016820 <__s2b+0x30>
 801680c:	4630      	mov	r0, r6
 801680e:	f7ff ff47 	bl	80166a0 <_Balloc>
 8016812:	b940      	cbnz	r0, 8016826 <__s2b+0x36>
 8016814:	4602      	mov	r2, r0
 8016816:	4b19      	ldr	r3, [pc, #100]	; (801687c <__s2b+0x8c>)
 8016818:	4819      	ldr	r0, [pc, #100]	; (8016880 <__s2b+0x90>)
 801681a:	21ce      	movs	r1, #206	; 0xce
 801681c:	f000 fd86 	bl	801732c <__assert_func>
 8016820:	0052      	lsls	r2, r2, #1
 8016822:	3101      	adds	r1, #1
 8016824:	e7f0      	b.n	8016808 <__s2b+0x18>
 8016826:	9b08      	ldr	r3, [sp, #32]
 8016828:	6143      	str	r3, [r0, #20]
 801682a:	2d09      	cmp	r5, #9
 801682c:	f04f 0301 	mov.w	r3, #1
 8016830:	6103      	str	r3, [r0, #16]
 8016832:	dd16      	ble.n	8016862 <__s2b+0x72>
 8016834:	f104 0909 	add.w	r9, r4, #9
 8016838:	46c8      	mov	r8, r9
 801683a:	442c      	add	r4, r5
 801683c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016840:	4601      	mov	r1, r0
 8016842:	3b30      	subs	r3, #48	; 0x30
 8016844:	220a      	movs	r2, #10
 8016846:	4630      	mov	r0, r6
 8016848:	f7ff ff8c 	bl	8016764 <__multadd>
 801684c:	45a0      	cmp	r8, r4
 801684e:	d1f5      	bne.n	801683c <__s2b+0x4c>
 8016850:	f1a5 0408 	sub.w	r4, r5, #8
 8016854:	444c      	add	r4, r9
 8016856:	1b2d      	subs	r5, r5, r4
 8016858:	1963      	adds	r3, r4, r5
 801685a:	42bb      	cmp	r3, r7
 801685c:	db04      	blt.n	8016868 <__s2b+0x78>
 801685e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016862:	340a      	adds	r4, #10
 8016864:	2509      	movs	r5, #9
 8016866:	e7f6      	b.n	8016856 <__s2b+0x66>
 8016868:	f814 3b01 	ldrb.w	r3, [r4], #1
 801686c:	4601      	mov	r1, r0
 801686e:	3b30      	subs	r3, #48	; 0x30
 8016870:	220a      	movs	r2, #10
 8016872:	4630      	mov	r0, r6
 8016874:	f7ff ff76 	bl	8016764 <__multadd>
 8016878:	e7ee      	b.n	8016858 <__s2b+0x68>
 801687a:	bf00      	nop
 801687c:	080196a7 	.word	0x080196a7
 8016880:	08019734 	.word	0x08019734

08016884 <__hi0bits>:
 8016884:	0c03      	lsrs	r3, r0, #16
 8016886:	041b      	lsls	r3, r3, #16
 8016888:	b9d3      	cbnz	r3, 80168c0 <__hi0bits+0x3c>
 801688a:	0400      	lsls	r0, r0, #16
 801688c:	2310      	movs	r3, #16
 801688e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016892:	bf04      	itt	eq
 8016894:	0200      	lsleq	r0, r0, #8
 8016896:	3308      	addeq	r3, #8
 8016898:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801689c:	bf04      	itt	eq
 801689e:	0100      	lsleq	r0, r0, #4
 80168a0:	3304      	addeq	r3, #4
 80168a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80168a6:	bf04      	itt	eq
 80168a8:	0080      	lsleq	r0, r0, #2
 80168aa:	3302      	addeq	r3, #2
 80168ac:	2800      	cmp	r0, #0
 80168ae:	db05      	blt.n	80168bc <__hi0bits+0x38>
 80168b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80168b4:	f103 0301 	add.w	r3, r3, #1
 80168b8:	bf08      	it	eq
 80168ba:	2320      	moveq	r3, #32
 80168bc:	4618      	mov	r0, r3
 80168be:	4770      	bx	lr
 80168c0:	2300      	movs	r3, #0
 80168c2:	e7e4      	b.n	801688e <__hi0bits+0xa>

080168c4 <__lo0bits>:
 80168c4:	6803      	ldr	r3, [r0, #0]
 80168c6:	f013 0207 	ands.w	r2, r3, #7
 80168ca:	4601      	mov	r1, r0
 80168cc:	d00b      	beq.n	80168e6 <__lo0bits+0x22>
 80168ce:	07da      	lsls	r2, r3, #31
 80168d0:	d423      	bmi.n	801691a <__lo0bits+0x56>
 80168d2:	0798      	lsls	r0, r3, #30
 80168d4:	bf49      	itett	mi
 80168d6:	085b      	lsrmi	r3, r3, #1
 80168d8:	089b      	lsrpl	r3, r3, #2
 80168da:	2001      	movmi	r0, #1
 80168dc:	600b      	strmi	r3, [r1, #0]
 80168de:	bf5c      	itt	pl
 80168e0:	600b      	strpl	r3, [r1, #0]
 80168e2:	2002      	movpl	r0, #2
 80168e4:	4770      	bx	lr
 80168e6:	b298      	uxth	r0, r3
 80168e8:	b9a8      	cbnz	r0, 8016916 <__lo0bits+0x52>
 80168ea:	0c1b      	lsrs	r3, r3, #16
 80168ec:	2010      	movs	r0, #16
 80168ee:	b2da      	uxtb	r2, r3
 80168f0:	b90a      	cbnz	r2, 80168f6 <__lo0bits+0x32>
 80168f2:	3008      	adds	r0, #8
 80168f4:	0a1b      	lsrs	r3, r3, #8
 80168f6:	071a      	lsls	r2, r3, #28
 80168f8:	bf04      	itt	eq
 80168fa:	091b      	lsreq	r3, r3, #4
 80168fc:	3004      	addeq	r0, #4
 80168fe:	079a      	lsls	r2, r3, #30
 8016900:	bf04      	itt	eq
 8016902:	089b      	lsreq	r3, r3, #2
 8016904:	3002      	addeq	r0, #2
 8016906:	07da      	lsls	r2, r3, #31
 8016908:	d403      	bmi.n	8016912 <__lo0bits+0x4e>
 801690a:	085b      	lsrs	r3, r3, #1
 801690c:	f100 0001 	add.w	r0, r0, #1
 8016910:	d005      	beq.n	801691e <__lo0bits+0x5a>
 8016912:	600b      	str	r3, [r1, #0]
 8016914:	4770      	bx	lr
 8016916:	4610      	mov	r0, r2
 8016918:	e7e9      	b.n	80168ee <__lo0bits+0x2a>
 801691a:	2000      	movs	r0, #0
 801691c:	4770      	bx	lr
 801691e:	2020      	movs	r0, #32
 8016920:	4770      	bx	lr
	...

08016924 <__i2b>:
 8016924:	b510      	push	{r4, lr}
 8016926:	460c      	mov	r4, r1
 8016928:	2101      	movs	r1, #1
 801692a:	f7ff feb9 	bl	80166a0 <_Balloc>
 801692e:	4602      	mov	r2, r0
 8016930:	b928      	cbnz	r0, 801693e <__i2b+0x1a>
 8016932:	4b05      	ldr	r3, [pc, #20]	; (8016948 <__i2b+0x24>)
 8016934:	4805      	ldr	r0, [pc, #20]	; (801694c <__i2b+0x28>)
 8016936:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801693a:	f000 fcf7 	bl	801732c <__assert_func>
 801693e:	2301      	movs	r3, #1
 8016940:	6144      	str	r4, [r0, #20]
 8016942:	6103      	str	r3, [r0, #16]
 8016944:	bd10      	pop	{r4, pc}
 8016946:	bf00      	nop
 8016948:	080196a7 	.word	0x080196a7
 801694c:	08019734 	.word	0x08019734

08016950 <__multiply>:
 8016950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016954:	4691      	mov	r9, r2
 8016956:	690a      	ldr	r2, [r1, #16]
 8016958:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801695c:	429a      	cmp	r2, r3
 801695e:	bfb8      	it	lt
 8016960:	460b      	movlt	r3, r1
 8016962:	460c      	mov	r4, r1
 8016964:	bfbc      	itt	lt
 8016966:	464c      	movlt	r4, r9
 8016968:	4699      	movlt	r9, r3
 801696a:	6927      	ldr	r7, [r4, #16]
 801696c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016970:	68a3      	ldr	r3, [r4, #8]
 8016972:	6861      	ldr	r1, [r4, #4]
 8016974:	eb07 060a 	add.w	r6, r7, sl
 8016978:	42b3      	cmp	r3, r6
 801697a:	b085      	sub	sp, #20
 801697c:	bfb8      	it	lt
 801697e:	3101      	addlt	r1, #1
 8016980:	f7ff fe8e 	bl	80166a0 <_Balloc>
 8016984:	b930      	cbnz	r0, 8016994 <__multiply+0x44>
 8016986:	4602      	mov	r2, r0
 8016988:	4b44      	ldr	r3, [pc, #272]	; (8016a9c <__multiply+0x14c>)
 801698a:	4845      	ldr	r0, [pc, #276]	; (8016aa0 <__multiply+0x150>)
 801698c:	f240 115d 	movw	r1, #349	; 0x15d
 8016990:	f000 fccc 	bl	801732c <__assert_func>
 8016994:	f100 0514 	add.w	r5, r0, #20
 8016998:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801699c:	462b      	mov	r3, r5
 801699e:	2200      	movs	r2, #0
 80169a0:	4543      	cmp	r3, r8
 80169a2:	d321      	bcc.n	80169e8 <__multiply+0x98>
 80169a4:	f104 0314 	add.w	r3, r4, #20
 80169a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80169ac:	f109 0314 	add.w	r3, r9, #20
 80169b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80169b4:	9202      	str	r2, [sp, #8]
 80169b6:	1b3a      	subs	r2, r7, r4
 80169b8:	3a15      	subs	r2, #21
 80169ba:	f022 0203 	bic.w	r2, r2, #3
 80169be:	3204      	adds	r2, #4
 80169c0:	f104 0115 	add.w	r1, r4, #21
 80169c4:	428f      	cmp	r7, r1
 80169c6:	bf38      	it	cc
 80169c8:	2204      	movcc	r2, #4
 80169ca:	9201      	str	r2, [sp, #4]
 80169cc:	9a02      	ldr	r2, [sp, #8]
 80169ce:	9303      	str	r3, [sp, #12]
 80169d0:	429a      	cmp	r2, r3
 80169d2:	d80c      	bhi.n	80169ee <__multiply+0x9e>
 80169d4:	2e00      	cmp	r6, #0
 80169d6:	dd03      	ble.n	80169e0 <__multiply+0x90>
 80169d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d05a      	beq.n	8016a96 <__multiply+0x146>
 80169e0:	6106      	str	r6, [r0, #16]
 80169e2:	b005      	add	sp, #20
 80169e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169e8:	f843 2b04 	str.w	r2, [r3], #4
 80169ec:	e7d8      	b.n	80169a0 <__multiply+0x50>
 80169ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80169f2:	f1ba 0f00 	cmp.w	sl, #0
 80169f6:	d024      	beq.n	8016a42 <__multiply+0xf2>
 80169f8:	f104 0e14 	add.w	lr, r4, #20
 80169fc:	46a9      	mov	r9, r5
 80169fe:	f04f 0c00 	mov.w	ip, #0
 8016a02:	f85e 2b04 	ldr.w	r2, [lr], #4
 8016a06:	f8d9 1000 	ldr.w	r1, [r9]
 8016a0a:	fa1f fb82 	uxth.w	fp, r2
 8016a0e:	b289      	uxth	r1, r1
 8016a10:	fb0a 110b 	mla	r1, sl, fp, r1
 8016a14:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016a18:	f8d9 2000 	ldr.w	r2, [r9]
 8016a1c:	4461      	add	r1, ip
 8016a1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016a22:	fb0a c20b 	mla	r2, sl, fp, ip
 8016a26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016a2a:	b289      	uxth	r1, r1
 8016a2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016a30:	4577      	cmp	r7, lr
 8016a32:	f849 1b04 	str.w	r1, [r9], #4
 8016a36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016a3a:	d8e2      	bhi.n	8016a02 <__multiply+0xb2>
 8016a3c:	9a01      	ldr	r2, [sp, #4]
 8016a3e:	f845 c002 	str.w	ip, [r5, r2]
 8016a42:	9a03      	ldr	r2, [sp, #12]
 8016a44:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016a48:	3304      	adds	r3, #4
 8016a4a:	f1b9 0f00 	cmp.w	r9, #0
 8016a4e:	d020      	beq.n	8016a92 <__multiply+0x142>
 8016a50:	6829      	ldr	r1, [r5, #0]
 8016a52:	f104 0c14 	add.w	ip, r4, #20
 8016a56:	46ae      	mov	lr, r5
 8016a58:	f04f 0a00 	mov.w	sl, #0
 8016a5c:	f8bc b000 	ldrh.w	fp, [ip]
 8016a60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016a64:	fb09 220b 	mla	r2, r9, fp, r2
 8016a68:	4492      	add	sl, r2
 8016a6a:	b289      	uxth	r1, r1
 8016a6c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8016a70:	f84e 1b04 	str.w	r1, [lr], #4
 8016a74:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016a78:	f8be 1000 	ldrh.w	r1, [lr]
 8016a7c:	0c12      	lsrs	r2, r2, #16
 8016a7e:	fb09 1102 	mla	r1, r9, r2, r1
 8016a82:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8016a86:	4567      	cmp	r7, ip
 8016a88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016a8c:	d8e6      	bhi.n	8016a5c <__multiply+0x10c>
 8016a8e:	9a01      	ldr	r2, [sp, #4]
 8016a90:	50a9      	str	r1, [r5, r2]
 8016a92:	3504      	adds	r5, #4
 8016a94:	e79a      	b.n	80169cc <__multiply+0x7c>
 8016a96:	3e01      	subs	r6, #1
 8016a98:	e79c      	b.n	80169d4 <__multiply+0x84>
 8016a9a:	bf00      	nop
 8016a9c:	080196a7 	.word	0x080196a7
 8016aa0:	08019734 	.word	0x08019734

08016aa4 <__pow5mult>:
 8016aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016aa8:	4615      	mov	r5, r2
 8016aaa:	f012 0203 	ands.w	r2, r2, #3
 8016aae:	4606      	mov	r6, r0
 8016ab0:	460f      	mov	r7, r1
 8016ab2:	d007      	beq.n	8016ac4 <__pow5mult+0x20>
 8016ab4:	4c25      	ldr	r4, [pc, #148]	; (8016b4c <__pow5mult+0xa8>)
 8016ab6:	3a01      	subs	r2, #1
 8016ab8:	2300      	movs	r3, #0
 8016aba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016abe:	f7ff fe51 	bl	8016764 <__multadd>
 8016ac2:	4607      	mov	r7, r0
 8016ac4:	10ad      	asrs	r5, r5, #2
 8016ac6:	d03d      	beq.n	8016b44 <__pow5mult+0xa0>
 8016ac8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016aca:	b97c      	cbnz	r4, 8016aec <__pow5mult+0x48>
 8016acc:	2010      	movs	r0, #16
 8016ace:	f7fc fd39 	bl	8013544 <malloc>
 8016ad2:	4602      	mov	r2, r0
 8016ad4:	6270      	str	r0, [r6, #36]	; 0x24
 8016ad6:	b928      	cbnz	r0, 8016ae4 <__pow5mult+0x40>
 8016ad8:	4b1d      	ldr	r3, [pc, #116]	; (8016b50 <__pow5mult+0xac>)
 8016ada:	481e      	ldr	r0, [pc, #120]	; (8016b54 <__pow5mult+0xb0>)
 8016adc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016ae0:	f000 fc24 	bl	801732c <__assert_func>
 8016ae4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016ae8:	6004      	str	r4, [r0, #0]
 8016aea:	60c4      	str	r4, [r0, #12]
 8016aec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016af0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016af4:	b94c      	cbnz	r4, 8016b0a <__pow5mult+0x66>
 8016af6:	f240 2171 	movw	r1, #625	; 0x271
 8016afa:	4630      	mov	r0, r6
 8016afc:	f7ff ff12 	bl	8016924 <__i2b>
 8016b00:	2300      	movs	r3, #0
 8016b02:	f8c8 0008 	str.w	r0, [r8, #8]
 8016b06:	4604      	mov	r4, r0
 8016b08:	6003      	str	r3, [r0, #0]
 8016b0a:	f04f 0900 	mov.w	r9, #0
 8016b0e:	07eb      	lsls	r3, r5, #31
 8016b10:	d50a      	bpl.n	8016b28 <__pow5mult+0x84>
 8016b12:	4639      	mov	r1, r7
 8016b14:	4622      	mov	r2, r4
 8016b16:	4630      	mov	r0, r6
 8016b18:	f7ff ff1a 	bl	8016950 <__multiply>
 8016b1c:	4639      	mov	r1, r7
 8016b1e:	4680      	mov	r8, r0
 8016b20:	4630      	mov	r0, r6
 8016b22:	f7ff fdfd 	bl	8016720 <_Bfree>
 8016b26:	4647      	mov	r7, r8
 8016b28:	106d      	asrs	r5, r5, #1
 8016b2a:	d00b      	beq.n	8016b44 <__pow5mult+0xa0>
 8016b2c:	6820      	ldr	r0, [r4, #0]
 8016b2e:	b938      	cbnz	r0, 8016b40 <__pow5mult+0x9c>
 8016b30:	4622      	mov	r2, r4
 8016b32:	4621      	mov	r1, r4
 8016b34:	4630      	mov	r0, r6
 8016b36:	f7ff ff0b 	bl	8016950 <__multiply>
 8016b3a:	6020      	str	r0, [r4, #0]
 8016b3c:	f8c0 9000 	str.w	r9, [r0]
 8016b40:	4604      	mov	r4, r0
 8016b42:	e7e4      	b.n	8016b0e <__pow5mult+0x6a>
 8016b44:	4638      	mov	r0, r7
 8016b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b4a:	bf00      	nop
 8016b4c:	08019880 	.word	0x08019880
 8016b50:	08019635 	.word	0x08019635
 8016b54:	08019734 	.word	0x08019734

08016b58 <__lshift>:
 8016b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b5c:	460c      	mov	r4, r1
 8016b5e:	6849      	ldr	r1, [r1, #4]
 8016b60:	6923      	ldr	r3, [r4, #16]
 8016b62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016b66:	68a3      	ldr	r3, [r4, #8]
 8016b68:	4607      	mov	r7, r0
 8016b6a:	4691      	mov	r9, r2
 8016b6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016b70:	f108 0601 	add.w	r6, r8, #1
 8016b74:	42b3      	cmp	r3, r6
 8016b76:	db0b      	blt.n	8016b90 <__lshift+0x38>
 8016b78:	4638      	mov	r0, r7
 8016b7a:	f7ff fd91 	bl	80166a0 <_Balloc>
 8016b7e:	4605      	mov	r5, r0
 8016b80:	b948      	cbnz	r0, 8016b96 <__lshift+0x3e>
 8016b82:	4602      	mov	r2, r0
 8016b84:	4b2a      	ldr	r3, [pc, #168]	; (8016c30 <__lshift+0xd8>)
 8016b86:	482b      	ldr	r0, [pc, #172]	; (8016c34 <__lshift+0xdc>)
 8016b88:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016b8c:	f000 fbce 	bl	801732c <__assert_func>
 8016b90:	3101      	adds	r1, #1
 8016b92:	005b      	lsls	r3, r3, #1
 8016b94:	e7ee      	b.n	8016b74 <__lshift+0x1c>
 8016b96:	2300      	movs	r3, #0
 8016b98:	f100 0114 	add.w	r1, r0, #20
 8016b9c:	f100 0210 	add.w	r2, r0, #16
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	4553      	cmp	r3, sl
 8016ba4:	db37      	blt.n	8016c16 <__lshift+0xbe>
 8016ba6:	6920      	ldr	r0, [r4, #16]
 8016ba8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016bac:	f104 0314 	add.w	r3, r4, #20
 8016bb0:	f019 091f 	ands.w	r9, r9, #31
 8016bb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016bb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016bbc:	d02f      	beq.n	8016c1e <__lshift+0xc6>
 8016bbe:	f1c9 0e20 	rsb	lr, r9, #32
 8016bc2:	468a      	mov	sl, r1
 8016bc4:	f04f 0c00 	mov.w	ip, #0
 8016bc8:	681a      	ldr	r2, [r3, #0]
 8016bca:	fa02 f209 	lsl.w	r2, r2, r9
 8016bce:	ea42 020c 	orr.w	r2, r2, ip
 8016bd2:	f84a 2b04 	str.w	r2, [sl], #4
 8016bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8016bda:	4298      	cmp	r0, r3
 8016bdc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8016be0:	d8f2      	bhi.n	8016bc8 <__lshift+0x70>
 8016be2:	1b03      	subs	r3, r0, r4
 8016be4:	3b15      	subs	r3, #21
 8016be6:	f023 0303 	bic.w	r3, r3, #3
 8016bea:	3304      	adds	r3, #4
 8016bec:	f104 0215 	add.w	r2, r4, #21
 8016bf0:	4290      	cmp	r0, r2
 8016bf2:	bf38      	it	cc
 8016bf4:	2304      	movcc	r3, #4
 8016bf6:	f841 c003 	str.w	ip, [r1, r3]
 8016bfa:	f1bc 0f00 	cmp.w	ip, #0
 8016bfe:	d001      	beq.n	8016c04 <__lshift+0xac>
 8016c00:	f108 0602 	add.w	r6, r8, #2
 8016c04:	3e01      	subs	r6, #1
 8016c06:	4638      	mov	r0, r7
 8016c08:	612e      	str	r6, [r5, #16]
 8016c0a:	4621      	mov	r1, r4
 8016c0c:	f7ff fd88 	bl	8016720 <_Bfree>
 8016c10:	4628      	mov	r0, r5
 8016c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c16:	f842 0f04 	str.w	r0, [r2, #4]!
 8016c1a:	3301      	adds	r3, #1
 8016c1c:	e7c1      	b.n	8016ba2 <__lshift+0x4a>
 8016c1e:	3904      	subs	r1, #4
 8016c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c24:	f841 2f04 	str.w	r2, [r1, #4]!
 8016c28:	4298      	cmp	r0, r3
 8016c2a:	d8f9      	bhi.n	8016c20 <__lshift+0xc8>
 8016c2c:	e7ea      	b.n	8016c04 <__lshift+0xac>
 8016c2e:	bf00      	nop
 8016c30:	080196a7 	.word	0x080196a7
 8016c34:	08019734 	.word	0x08019734

08016c38 <__mcmp>:
 8016c38:	b530      	push	{r4, r5, lr}
 8016c3a:	6902      	ldr	r2, [r0, #16]
 8016c3c:	690c      	ldr	r4, [r1, #16]
 8016c3e:	1b12      	subs	r2, r2, r4
 8016c40:	d10e      	bne.n	8016c60 <__mcmp+0x28>
 8016c42:	f100 0314 	add.w	r3, r0, #20
 8016c46:	3114      	adds	r1, #20
 8016c48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016c4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016c50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016c54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016c58:	42a5      	cmp	r5, r4
 8016c5a:	d003      	beq.n	8016c64 <__mcmp+0x2c>
 8016c5c:	d305      	bcc.n	8016c6a <__mcmp+0x32>
 8016c5e:	2201      	movs	r2, #1
 8016c60:	4610      	mov	r0, r2
 8016c62:	bd30      	pop	{r4, r5, pc}
 8016c64:	4283      	cmp	r3, r0
 8016c66:	d3f3      	bcc.n	8016c50 <__mcmp+0x18>
 8016c68:	e7fa      	b.n	8016c60 <__mcmp+0x28>
 8016c6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016c6e:	e7f7      	b.n	8016c60 <__mcmp+0x28>

08016c70 <__mdiff>:
 8016c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c74:	460c      	mov	r4, r1
 8016c76:	4606      	mov	r6, r0
 8016c78:	4611      	mov	r1, r2
 8016c7a:	4620      	mov	r0, r4
 8016c7c:	4690      	mov	r8, r2
 8016c7e:	f7ff ffdb 	bl	8016c38 <__mcmp>
 8016c82:	1e05      	subs	r5, r0, #0
 8016c84:	d110      	bne.n	8016ca8 <__mdiff+0x38>
 8016c86:	4629      	mov	r1, r5
 8016c88:	4630      	mov	r0, r6
 8016c8a:	f7ff fd09 	bl	80166a0 <_Balloc>
 8016c8e:	b930      	cbnz	r0, 8016c9e <__mdiff+0x2e>
 8016c90:	4b3a      	ldr	r3, [pc, #232]	; (8016d7c <__mdiff+0x10c>)
 8016c92:	4602      	mov	r2, r0
 8016c94:	f240 2132 	movw	r1, #562	; 0x232
 8016c98:	4839      	ldr	r0, [pc, #228]	; (8016d80 <__mdiff+0x110>)
 8016c9a:	f000 fb47 	bl	801732c <__assert_func>
 8016c9e:	2301      	movs	r3, #1
 8016ca0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016ca4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ca8:	bfa4      	itt	ge
 8016caa:	4643      	movge	r3, r8
 8016cac:	46a0      	movge	r8, r4
 8016cae:	4630      	mov	r0, r6
 8016cb0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016cb4:	bfa6      	itte	ge
 8016cb6:	461c      	movge	r4, r3
 8016cb8:	2500      	movge	r5, #0
 8016cba:	2501      	movlt	r5, #1
 8016cbc:	f7ff fcf0 	bl	80166a0 <_Balloc>
 8016cc0:	b920      	cbnz	r0, 8016ccc <__mdiff+0x5c>
 8016cc2:	4b2e      	ldr	r3, [pc, #184]	; (8016d7c <__mdiff+0x10c>)
 8016cc4:	4602      	mov	r2, r0
 8016cc6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016cca:	e7e5      	b.n	8016c98 <__mdiff+0x28>
 8016ccc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016cd0:	6926      	ldr	r6, [r4, #16]
 8016cd2:	60c5      	str	r5, [r0, #12]
 8016cd4:	f104 0914 	add.w	r9, r4, #20
 8016cd8:	f108 0514 	add.w	r5, r8, #20
 8016cdc:	f100 0e14 	add.w	lr, r0, #20
 8016ce0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016ce4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016ce8:	f108 0210 	add.w	r2, r8, #16
 8016cec:	46f2      	mov	sl, lr
 8016cee:	2100      	movs	r1, #0
 8016cf0:	f859 3b04 	ldr.w	r3, [r9], #4
 8016cf4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016cf8:	fa1f f883 	uxth.w	r8, r3
 8016cfc:	fa11 f18b 	uxtah	r1, r1, fp
 8016d00:	0c1b      	lsrs	r3, r3, #16
 8016d02:	eba1 0808 	sub.w	r8, r1, r8
 8016d06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016d0a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016d0e:	fa1f f888 	uxth.w	r8, r8
 8016d12:	1419      	asrs	r1, r3, #16
 8016d14:	454e      	cmp	r6, r9
 8016d16:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016d1a:	f84a 3b04 	str.w	r3, [sl], #4
 8016d1e:	d8e7      	bhi.n	8016cf0 <__mdiff+0x80>
 8016d20:	1b33      	subs	r3, r6, r4
 8016d22:	3b15      	subs	r3, #21
 8016d24:	f023 0303 	bic.w	r3, r3, #3
 8016d28:	3304      	adds	r3, #4
 8016d2a:	3415      	adds	r4, #21
 8016d2c:	42a6      	cmp	r6, r4
 8016d2e:	bf38      	it	cc
 8016d30:	2304      	movcc	r3, #4
 8016d32:	441d      	add	r5, r3
 8016d34:	4473      	add	r3, lr
 8016d36:	469e      	mov	lr, r3
 8016d38:	462e      	mov	r6, r5
 8016d3a:	4566      	cmp	r6, ip
 8016d3c:	d30e      	bcc.n	8016d5c <__mdiff+0xec>
 8016d3e:	f10c 0203 	add.w	r2, ip, #3
 8016d42:	1b52      	subs	r2, r2, r5
 8016d44:	f022 0203 	bic.w	r2, r2, #3
 8016d48:	3d03      	subs	r5, #3
 8016d4a:	45ac      	cmp	ip, r5
 8016d4c:	bf38      	it	cc
 8016d4e:	2200      	movcc	r2, #0
 8016d50:	441a      	add	r2, r3
 8016d52:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016d56:	b17b      	cbz	r3, 8016d78 <__mdiff+0x108>
 8016d58:	6107      	str	r7, [r0, #16]
 8016d5a:	e7a3      	b.n	8016ca4 <__mdiff+0x34>
 8016d5c:	f856 8b04 	ldr.w	r8, [r6], #4
 8016d60:	fa11 f288 	uxtah	r2, r1, r8
 8016d64:	1414      	asrs	r4, r2, #16
 8016d66:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016d6a:	b292      	uxth	r2, r2
 8016d6c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016d70:	f84e 2b04 	str.w	r2, [lr], #4
 8016d74:	1421      	asrs	r1, r4, #16
 8016d76:	e7e0      	b.n	8016d3a <__mdiff+0xca>
 8016d78:	3f01      	subs	r7, #1
 8016d7a:	e7ea      	b.n	8016d52 <__mdiff+0xe2>
 8016d7c:	080196a7 	.word	0x080196a7
 8016d80:	08019734 	.word	0x08019734

08016d84 <__ulp>:
 8016d84:	b082      	sub	sp, #8
 8016d86:	ed8d 0b00 	vstr	d0, [sp]
 8016d8a:	9b01      	ldr	r3, [sp, #4]
 8016d8c:	4912      	ldr	r1, [pc, #72]	; (8016dd8 <__ulp+0x54>)
 8016d8e:	4019      	ands	r1, r3
 8016d90:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8016d94:	2900      	cmp	r1, #0
 8016d96:	dd05      	ble.n	8016da4 <__ulp+0x20>
 8016d98:	2200      	movs	r2, #0
 8016d9a:	460b      	mov	r3, r1
 8016d9c:	ec43 2b10 	vmov	d0, r2, r3
 8016da0:	b002      	add	sp, #8
 8016da2:	4770      	bx	lr
 8016da4:	4249      	negs	r1, r1
 8016da6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8016daa:	ea4f 5021 	mov.w	r0, r1, asr #20
 8016dae:	f04f 0200 	mov.w	r2, #0
 8016db2:	f04f 0300 	mov.w	r3, #0
 8016db6:	da04      	bge.n	8016dc2 <__ulp+0x3e>
 8016db8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8016dbc:	fa41 f300 	asr.w	r3, r1, r0
 8016dc0:	e7ec      	b.n	8016d9c <__ulp+0x18>
 8016dc2:	f1a0 0114 	sub.w	r1, r0, #20
 8016dc6:	291e      	cmp	r1, #30
 8016dc8:	bfda      	itte	le
 8016dca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8016dce:	fa20 f101 	lsrle.w	r1, r0, r1
 8016dd2:	2101      	movgt	r1, #1
 8016dd4:	460a      	mov	r2, r1
 8016dd6:	e7e1      	b.n	8016d9c <__ulp+0x18>
 8016dd8:	7ff00000 	.word	0x7ff00000

08016ddc <__b2d>:
 8016ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dde:	6905      	ldr	r5, [r0, #16]
 8016de0:	f100 0714 	add.w	r7, r0, #20
 8016de4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016de8:	1f2e      	subs	r6, r5, #4
 8016dea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016dee:	4620      	mov	r0, r4
 8016df0:	f7ff fd48 	bl	8016884 <__hi0bits>
 8016df4:	f1c0 0320 	rsb	r3, r0, #32
 8016df8:	280a      	cmp	r0, #10
 8016dfa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8016e78 <__b2d+0x9c>
 8016dfe:	600b      	str	r3, [r1, #0]
 8016e00:	dc14      	bgt.n	8016e2c <__b2d+0x50>
 8016e02:	f1c0 0e0b 	rsb	lr, r0, #11
 8016e06:	fa24 f10e 	lsr.w	r1, r4, lr
 8016e0a:	42b7      	cmp	r7, r6
 8016e0c:	ea41 030c 	orr.w	r3, r1, ip
 8016e10:	bf34      	ite	cc
 8016e12:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016e16:	2100      	movcs	r1, #0
 8016e18:	3015      	adds	r0, #21
 8016e1a:	fa04 f000 	lsl.w	r0, r4, r0
 8016e1e:	fa21 f10e 	lsr.w	r1, r1, lr
 8016e22:	ea40 0201 	orr.w	r2, r0, r1
 8016e26:	ec43 2b10 	vmov	d0, r2, r3
 8016e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e2c:	42b7      	cmp	r7, r6
 8016e2e:	bf3a      	itte	cc
 8016e30:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016e34:	f1a5 0608 	subcc.w	r6, r5, #8
 8016e38:	2100      	movcs	r1, #0
 8016e3a:	380b      	subs	r0, #11
 8016e3c:	d017      	beq.n	8016e6e <__b2d+0x92>
 8016e3e:	f1c0 0c20 	rsb	ip, r0, #32
 8016e42:	fa04 f500 	lsl.w	r5, r4, r0
 8016e46:	42be      	cmp	r6, r7
 8016e48:	fa21 f40c 	lsr.w	r4, r1, ip
 8016e4c:	ea45 0504 	orr.w	r5, r5, r4
 8016e50:	bf8c      	ite	hi
 8016e52:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016e56:	2400      	movls	r4, #0
 8016e58:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8016e5c:	fa01 f000 	lsl.w	r0, r1, r0
 8016e60:	fa24 f40c 	lsr.w	r4, r4, ip
 8016e64:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016e68:	ea40 0204 	orr.w	r2, r0, r4
 8016e6c:	e7db      	b.n	8016e26 <__b2d+0x4a>
 8016e6e:	ea44 030c 	orr.w	r3, r4, ip
 8016e72:	460a      	mov	r2, r1
 8016e74:	e7d7      	b.n	8016e26 <__b2d+0x4a>
 8016e76:	bf00      	nop
 8016e78:	3ff00000 	.word	0x3ff00000

08016e7c <__d2b>:
 8016e7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016e80:	4689      	mov	r9, r1
 8016e82:	2101      	movs	r1, #1
 8016e84:	ec57 6b10 	vmov	r6, r7, d0
 8016e88:	4690      	mov	r8, r2
 8016e8a:	f7ff fc09 	bl	80166a0 <_Balloc>
 8016e8e:	4604      	mov	r4, r0
 8016e90:	b930      	cbnz	r0, 8016ea0 <__d2b+0x24>
 8016e92:	4602      	mov	r2, r0
 8016e94:	4b25      	ldr	r3, [pc, #148]	; (8016f2c <__d2b+0xb0>)
 8016e96:	4826      	ldr	r0, [pc, #152]	; (8016f30 <__d2b+0xb4>)
 8016e98:	f240 310a 	movw	r1, #778	; 0x30a
 8016e9c:	f000 fa46 	bl	801732c <__assert_func>
 8016ea0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016ea4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016ea8:	bb35      	cbnz	r5, 8016ef8 <__d2b+0x7c>
 8016eaa:	2e00      	cmp	r6, #0
 8016eac:	9301      	str	r3, [sp, #4]
 8016eae:	d028      	beq.n	8016f02 <__d2b+0x86>
 8016eb0:	4668      	mov	r0, sp
 8016eb2:	9600      	str	r6, [sp, #0]
 8016eb4:	f7ff fd06 	bl	80168c4 <__lo0bits>
 8016eb8:	9900      	ldr	r1, [sp, #0]
 8016eba:	b300      	cbz	r0, 8016efe <__d2b+0x82>
 8016ebc:	9a01      	ldr	r2, [sp, #4]
 8016ebe:	f1c0 0320 	rsb	r3, r0, #32
 8016ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8016ec6:	430b      	orrs	r3, r1
 8016ec8:	40c2      	lsrs	r2, r0
 8016eca:	6163      	str	r3, [r4, #20]
 8016ecc:	9201      	str	r2, [sp, #4]
 8016ece:	9b01      	ldr	r3, [sp, #4]
 8016ed0:	61a3      	str	r3, [r4, #24]
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	bf14      	ite	ne
 8016ed6:	2202      	movne	r2, #2
 8016ed8:	2201      	moveq	r2, #1
 8016eda:	6122      	str	r2, [r4, #16]
 8016edc:	b1d5      	cbz	r5, 8016f14 <__d2b+0x98>
 8016ede:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016ee2:	4405      	add	r5, r0
 8016ee4:	f8c9 5000 	str.w	r5, [r9]
 8016ee8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016eec:	f8c8 0000 	str.w	r0, [r8]
 8016ef0:	4620      	mov	r0, r4
 8016ef2:	b003      	add	sp, #12
 8016ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ef8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016efc:	e7d5      	b.n	8016eaa <__d2b+0x2e>
 8016efe:	6161      	str	r1, [r4, #20]
 8016f00:	e7e5      	b.n	8016ece <__d2b+0x52>
 8016f02:	a801      	add	r0, sp, #4
 8016f04:	f7ff fcde 	bl	80168c4 <__lo0bits>
 8016f08:	9b01      	ldr	r3, [sp, #4]
 8016f0a:	6163      	str	r3, [r4, #20]
 8016f0c:	2201      	movs	r2, #1
 8016f0e:	6122      	str	r2, [r4, #16]
 8016f10:	3020      	adds	r0, #32
 8016f12:	e7e3      	b.n	8016edc <__d2b+0x60>
 8016f14:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016f18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016f1c:	f8c9 0000 	str.w	r0, [r9]
 8016f20:	6918      	ldr	r0, [r3, #16]
 8016f22:	f7ff fcaf 	bl	8016884 <__hi0bits>
 8016f26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016f2a:	e7df      	b.n	8016eec <__d2b+0x70>
 8016f2c:	080196a7 	.word	0x080196a7
 8016f30:	08019734 	.word	0x08019734

08016f34 <__ratio>:
 8016f34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f38:	4688      	mov	r8, r1
 8016f3a:	4669      	mov	r1, sp
 8016f3c:	4681      	mov	r9, r0
 8016f3e:	f7ff ff4d 	bl	8016ddc <__b2d>
 8016f42:	a901      	add	r1, sp, #4
 8016f44:	4640      	mov	r0, r8
 8016f46:	ec55 4b10 	vmov	r4, r5, d0
 8016f4a:	f7ff ff47 	bl	8016ddc <__b2d>
 8016f4e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016f52:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016f56:	eba3 0c02 	sub.w	ip, r3, r2
 8016f5a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016f5e:	1a9b      	subs	r3, r3, r2
 8016f60:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016f64:	ec51 0b10 	vmov	r0, r1, d0
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	bfd6      	itet	le
 8016f6c:	460a      	movle	r2, r1
 8016f6e:	462a      	movgt	r2, r5
 8016f70:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016f74:	468b      	mov	fp, r1
 8016f76:	462f      	mov	r7, r5
 8016f78:	bfd4      	ite	le
 8016f7a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016f7e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016f82:	4620      	mov	r0, r4
 8016f84:	ee10 2a10 	vmov	r2, s0
 8016f88:	465b      	mov	r3, fp
 8016f8a:	4639      	mov	r1, r7
 8016f8c:	f7e9 fc5e 	bl	800084c <__aeabi_ddiv>
 8016f90:	ec41 0b10 	vmov	d0, r0, r1
 8016f94:	b003      	add	sp, #12
 8016f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016f9a <__copybits>:
 8016f9a:	3901      	subs	r1, #1
 8016f9c:	b570      	push	{r4, r5, r6, lr}
 8016f9e:	1149      	asrs	r1, r1, #5
 8016fa0:	6914      	ldr	r4, [r2, #16]
 8016fa2:	3101      	adds	r1, #1
 8016fa4:	f102 0314 	add.w	r3, r2, #20
 8016fa8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016fac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016fb0:	1f05      	subs	r5, r0, #4
 8016fb2:	42a3      	cmp	r3, r4
 8016fb4:	d30c      	bcc.n	8016fd0 <__copybits+0x36>
 8016fb6:	1aa3      	subs	r3, r4, r2
 8016fb8:	3b11      	subs	r3, #17
 8016fba:	f023 0303 	bic.w	r3, r3, #3
 8016fbe:	3211      	adds	r2, #17
 8016fc0:	42a2      	cmp	r2, r4
 8016fc2:	bf88      	it	hi
 8016fc4:	2300      	movhi	r3, #0
 8016fc6:	4418      	add	r0, r3
 8016fc8:	2300      	movs	r3, #0
 8016fca:	4288      	cmp	r0, r1
 8016fcc:	d305      	bcc.n	8016fda <__copybits+0x40>
 8016fce:	bd70      	pop	{r4, r5, r6, pc}
 8016fd0:	f853 6b04 	ldr.w	r6, [r3], #4
 8016fd4:	f845 6f04 	str.w	r6, [r5, #4]!
 8016fd8:	e7eb      	b.n	8016fb2 <__copybits+0x18>
 8016fda:	f840 3b04 	str.w	r3, [r0], #4
 8016fde:	e7f4      	b.n	8016fca <__copybits+0x30>

08016fe0 <__any_on>:
 8016fe0:	f100 0214 	add.w	r2, r0, #20
 8016fe4:	6900      	ldr	r0, [r0, #16]
 8016fe6:	114b      	asrs	r3, r1, #5
 8016fe8:	4298      	cmp	r0, r3
 8016fea:	b510      	push	{r4, lr}
 8016fec:	db11      	blt.n	8017012 <__any_on+0x32>
 8016fee:	dd0a      	ble.n	8017006 <__any_on+0x26>
 8016ff0:	f011 011f 	ands.w	r1, r1, #31
 8016ff4:	d007      	beq.n	8017006 <__any_on+0x26>
 8016ff6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016ffa:	fa24 f001 	lsr.w	r0, r4, r1
 8016ffe:	fa00 f101 	lsl.w	r1, r0, r1
 8017002:	428c      	cmp	r4, r1
 8017004:	d10b      	bne.n	801701e <__any_on+0x3e>
 8017006:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801700a:	4293      	cmp	r3, r2
 801700c:	d803      	bhi.n	8017016 <__any_on+0x36>
 801700e:	2000      	movs	r0, #0
 8017010:	bd10      	pop	{r4, pc}
 8017012:	4603      	mov	r3, r0
 8017014:	e7f7      	b.n	8017006 <__any_on+0x26>
 8017016:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801701a:	2900      	cmp	r1, #0
 801701c:	d0f5      	beq.n	801700a <__any_on+0x2a>
 801701e:	2001      	movs	r0, #1
 8017020:	e7f6      	b.n	8017010 <__any_on+0x30>

08017022 <__ssputs_r>:
 8017022:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017026:	688e      	ldr	r6, [r1, #8]
 8017028:	429e      	cmp	r6, r3
 801702a:	4682      	mov	sl, r0
 801702c:	460c      	mov	r4, r1
 801702e:	4690      	mov	r8, r2
 8017030:	461f      	mov	r7, r3
 8017032:	d838      	bhi.n	80170a6 <__ssputs_r+0x84>
 8017034:	898a      	ldrh	r2, [r1, #12]
 8017036:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801703a:	d032      	beq.n	80170a2 <__ssputs_r+0x80>
 801703c:	6825      	ldr	r5, [r4, #0]
 801703e:	6909      	ldr	r1, [r1, #16]
 8017040:	eba5 0901 	sub.w	r9, r5, r1
 8017044:	6965      	ldr	r5, [r4, #20]
 8017046:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801704a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801704e:	3301      	adds	r3, #1
 8017050:	444b      	add	r3, r9
 8017052:	106d      	asrs	r5, r5, #1
 8017054:	429d      	cmp	r5, r3
 8017056:	bf38      	it	cc
 8017058:	461d      	movcc	r5, r3
 801705a:	0553      	lsls	r3, r2, #21
 801705c:	d531      	bpl.n	80170c2 <__ssputs_r+0xa0>
 801705e:	4629      	mov	r1, r5
 8017060:	f7fc fb18 	bl	8013694 <_malloc_r>
 8017064:	4606      	mov	r6, r0
 8017066:	b950      	cbnz	r0, 801707e <__ssputs_r+0x5c>
 8017068:	230c      	movs	r3, #12
 801706a:	f8ca 3000 	str.w	r3, [sl]
 801706e:	89a3      	ldrh	r3, [r4, #12]
 8017070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017074:	81a3      	strh	r3, [r4, #12]
 8017076:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801707a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801707e:	6921      	ldr	r1, [r4, #16]
 8017080:	464a      	mov	r2, r9
 8017082:	f7fc fa6f 	bl	8013564 <memcpy>
 8017086:	89a3      	ldrh	r3, [r4, #12]
 8017088:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801708c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017090:	81a3      	strh	r3, [r4, #12]
 8017092:	6126      	str	r6, [r4, #16]
 8017094:	6165      	str	r5, [r4, #20]
 8017096:	444e      	add	r6, r9
 8017098:	eba5 0509 	sub.w	r5, r5, r9
 801709c:	6026      	str	r6, [r4, #0]
 801709e:	60a5      	str	r5, [r4, #8]
 80170a0:	463e      	mov	r6, r7
 80170a2:	42be      	cmp	r6, r7
 80170a4:	d900      	bls.n	80170a8 <__ssputs_r+0x86>
 80170a6:	463e      	mov	r6, r7
 80170a8:	6820      	ldr	r0, [r4, #0]
 80170aa:	4632      	mov	r2, r6
 80170ac:	4641      	mov	r1, r8
 80170ae:	f000 f96d 	bl	801738c <memmove>
 80170b2:	68a3      	ldr	r3, [r4, #8]
 80170b4:	1b9b      	subs	r3, r3, r6
 80170b6:	60a3      	str	r3, [r4, #8]
 80170b8:	6823      	ldr	r3, [r4, #0]
 80170ba:	4433      	add	r3, r6
 80170bc:	6023      	str	r3, [r4, #0]
 80170be:	2000      	movs	r0, #0
 80170c0:	e7db      	b.n	801707a <__ssputs_r+0x58>
 80170c2:	462a      	mov	r2, r5
 80170c4:	f000 f97c 	bl	80173c0 <_realloc_r>
 80170c8:	4606      	mov	r6, r0
 80170ca:	2800      	cmp	r0, #0
 80170cc:	d1e1      	bne.n	8017092 <__ssputs_r+0x70>
 80170ce:	6921      	ldr	r1, [r4, #16]
 80170d0:	4650      	mov	r0, sl
 80170d2:	f7fc fa73 	bl	80135bc <_free_r>
 80170d6:	e7c7      	b.n	8017068 <__ssputs_r+0x46>

080170d8 <_svfiprintf_r>:
 80170d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170dc:	4698      	mov	r8, r3
 80170de:	898b      	ldrh	r3, [r1, #12]
 80170e0:	061b      	lsls	r3, r3, #24
 80170e2:	b09d      	sub	sp, #116	; 0x74
 80170e4:	4607      	mov	r7, r0
 80170e6:	460d      	mov	r5, r1
 80170e8:	4614      	mov	r4, r2
 80170ea:	d50e      	bpl.n	801710a <_svfiprintf_r+0x32>
 80170ec:	690b      	ldr	r3, [r1, #16]
 80170ee:	b963      	cbnz	r3, 801710a <_svfiprintf_r+0x32>
 80170f0:	2140      	movs	r1, #64	; 0x40
 80170f2:	f7fc facf 	bl	8013694 <_malloc_r>
 80170f6:	6028      	str	r0, [r5, #0]
 80170f8:	6128      	str	r0, [r5, #16]
 80170fa:	b920      	cbnz	r0, 8017106 <_svfiprintf_r+0x2e>
 80170fc:	230c      	movs	r3, #12
 80170fe:	603b      	str	r3, [r7, #0]
 8017100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017104:	e0d1      	b.n	80172aa <_svfiprintf_r+0x1d2>
 8017106:	2340      	movs	r3, #64	; 0x40
 8017108:	616b      	str	r3, [r5, #20]
 801710a:	2300      	movs	r3, #0
 801710c:	9309      	str	r3, [sp, #36]	; 0x24
 801710e:	2320      	movs	r3, #32
 8017110:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017114:	f8cd 800c 	str.w	r8, [sp, #12]
 8017118:	2330      	movs	r3, #48	; 0x30
 801711a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80172c4 <_svfiprintf_r+0x1ec>
 801711e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017122:	f04f 0901 	mov.w	r9, #1
 8017126:	4623      	mov	r3, r4
 8017128:	469a      	mov	sl, r3
 801712a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801712e:	b10a      	cbz	r2, 8017134 <_svfiprintf_r+0x5c>
 8017130:	2a25      	cmp	r2, #37	; 0x25
 8017132:	d1f9      	bne.n	8017128 <_svfiprintf_r+0x50>
 8017134:	ebba 0b04 	subs.w	fp, sl, r4
 8017138:	d00b      	beq.n	8017152 <_svfiprintf_r+0x7a>
 801713a:	465b      	mov	r3, fp
 801713c:	4622      	mov	r2, r4
 801713e:	4629      	mov	r1, r5
 8017140:	4638      	mov	r0, r7
 8017142:	f7ff ff6e 	bl	8017022 <__ssputs_r>
 8017146:	3001      	adds	r0, #1
 8017148:	f000 80aa 	beq.w	80172a0 <_svfiprintf_r+0x1c8>
 801714c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801714e:	445a      	add	r2, fp
 8017150:	9209      	str	r2, [sp, #36]	; 0x24
 8017152:	f89a 3000 	ldrb.w	r3, [sl]
 8017156:	2b00      	cmp	r3, #0
 8017158:	f000 80a2 	beq.w	80172a0 <_svfiprintf_r+0x1c8>
 801715c:	2300      	movs	r3, #0
 801715e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017166:	f10a 0a01 	add.w	sl, sl, #1
 801716a:	9304      	str	r3, [sp, #16]
 801716c:	9307      	str	r3, [sp, #28]
 801716e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017172:	931a      	str	r3, [sp, #104]	; 0x68
 8017174:	4654      	mov	r4, sl
 8017176:	2205      	movs	r2, #5
 8017178:	f814 1b01 	ldrb.w	r1, [r4], #1
 801717c:	4851      	ldr	r0, [pc, #324]	; (80172c4 <_svfiprintf_r+0x1ec>)
 801717e:	f7e9 f82f 	bl	80001e0 <memchr>
 8017182:	9a04      	ldr	r2, [sp, #16]
 8017184:	b9d8      	cbnz	r0, 80171be <_svfiprintf_r+0xe6>
 8017186:	06d0      	lsls	r0, r2, #27
 8017188:	bf44      	itt	mi
 801718a:	2320      	movmi	r3, #32
 801718c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017190:	0711      	lsls	r1, r2, #28
 8017192:	bf44      	itt	mi
 8017194:	232b      	movmi	r3, #43	; 0x2b
 8017196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801719a:	f89a 3000 	ldrb.w	r3, [sl]
 801719e:	2b2a      	cmp	r3, #42	; 0x2a
 80171a0:	d015      	beq.n	80171ce <_svfiprintf_r+0xf6>
 80171a2:	9a07      	ldr	r2, [sp, #28]
 80171a4:	4654      	mov	r4, sl
 80171a6:	2000      	movs	r0, #0
 80171a8:	f04f 0c0a 	mov.w	ip, #10
 80171ac:	4621      	mov	r1, r4
 80171ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80171b2:	3b30      	subs	r3, #48	; 0x30
 80171b4:	2b09      	cmp	r3, #9
 80171b6:	d94e      	bls.n	8017256 <_svfiprintf_r+0x17e>
 80171b8:	b1b0      	cbz	r0, 80171e8 <_svfiprintf_r+0x110>
 80171ba:	9207      	str	r2, [sp, #28]
 80171bc:	e014      	b.n	80171e8 <_svfiprintf_r+0x110>
 80171be:	eba0 0308 	sub.w	r3, r0, r8
 80171c2:	fa09 f303 	lsl.w	r3, r9, r3
 80171c6:	4313      	orrs	r3, r2
 80171c8:	9304      	str	r3, [sp, #16]
 80171ca:	46a2      	mov	sl, r4
 80171cc:	e7d2      	b.n	8017174 <_svfiprintf_r+0x9c>
 80171ce:	9b03      	ldr	r3, [sp, #12]
 80171d0:	1d19      	adds	r1, r3, #4
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	9103      	str	r1, [sp, #12]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	bfbb      	ittet	lt
 80171da:	425b      	neglt	r3, r3
 80171dc:	f042 0202 	orrlt.w	r2, r2, #2
 80171e0:	9307      	strge	r3, [sp, #28]
 80171e2:	9307      	strlt	r3, [sp, #28]
 80171e4:	bfb8      	it	lt
 80171e6:	9204      	strlt	r2, [sp, #16]
 80171e8:	7823      	ldrb	r3, [r4, #0]
 80171ea:	2b2e      	cmp	r3, #46	; 0x2e
 80171ec:	d10c      	bne.n	8017208 <_svfiprintf_r+0x130>
 80171ee:	7863      	ldrb	r3, [r4, #1]
 80171f0:	2b2a      	cmp	r3, #42	; 0x2a
 80171f2:	d135      	bne.n	8017260 <_svfiprintf_r+0x188>
 80171f4:	9b03      	ldr	r3, [sp, #12]
 80171f6:	1d1a      	adds	r2, r3, #4
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	9203      	str	r2, [sp, #12]
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	bfb8      	it	lt
 8017200:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017204:	3402      	adds	r4, #2
 8017206:	9305      	str	r3, [sp, #20]
 8017208:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80172d4 <_svfiprintf_r+0x1fc>
 801720c:	7821      	ldrb	r1, [r4, #0]
 801720e:	2203      	movs	r2, #3
 8017210:	4650      	mov	r0, sl
 8017212:	f7e8 ffe5 	bl	80001e0 <memchr>
 8017216:	b140      	cbz	r0, 801722a <_svfiprintf_r+0x152>
 8017218:	2340      	movs	r3, #64	; 0x40
 801721a:	eba0 000a 	sub.w	r0, r0, sl
 801721e:	fa03 f000 	lsl.w	r0, r3, r0
 8017222:	9b04      	ldr	r3, [sp, #16]
 8017224:	4303      	orrs	r3, r0
 8017226:	3401      	adds	r4, #1
 8017228:	9304      	str	r3, [sp, #16]
 801722a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801722e:	4826      	ldr	r0, [pc, #152]	; (80172c8 <_svfiprintf_r+0x1f0>)
 8017230:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017234:	2206      	movs	r2, #6
 8017236:	f7e8 ffd3 	bl	80001e0 <memchr>
 801723a:	2800      	cmp	r0, #0
 801723c:	d038      	beq.n	80172b0 <_svfiprintf_r+0x1d8>
 801723e:	4b23      	ldr	r3, [pc, #140]	; (80172cc <_svfiprintf_r+0x1f4>)
 8017240:	bb1b      	cbnz	r3, 801728a <_svfiprintf_r+0x1b2>
 8017242:	9b03      	ldr	r3, [sp, #12]
 8017244:	3307      	adds	r3, #7
 8017246:	f023 0307 	bic.w	r3, r3, #7
 801724a:	3308      	adds	r3, #8
 801724c:	9303      	str	r3, [sp, #12]
 801724e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017250:	4433      	add	r3, r6
 8017252:	9309      	str	r3, [sp, #36]	; 0x24
 8017254:	e767      	b.n	8017126 <_svfiprintf_r+0x4e>
 8017256:	fb0c 3202 	mla	r2, ip, r2, r3
 801725a:	460c      	mov	r4, r1
 801725c:	2001      	movs	r0, #1
 801725e:	e7a5      	b.n	80171ac <_svfiprintf_r+0xd4>
 8017260:	2300      	movs	r3, #0
 8017262:	3401      	adds	r4, #1
 8017264:	9305      	str	r3, [sp, #20]
 8017266:	4619      	mov	r1, r3
 8017268:	f04f 0c0a 	mov.w	ip, #10
 801726c:	4620      	mov	r0, r4
 801726e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017272:	3a30      	subs	r2, #48	; 0x30
 8017274:	2a09      	cmp	r2, #9
 8017276:	d903      	bls.n	8017280 <_svfiprintf_r+0x1a8>
 8017278:	2b00      	cmp	r3, #0
 801727a:	d0c5      	beq.n	8017208 <_svfiprintf_r+0x130>
 801727c:	9105      	str	r1, [sp, #20]
 801727e:	e7c3      	b.n	8017208 <_svfiprintf_r+0x130>
 8017280:	fb0c 2101 	mla	r1, ip, r1, r2
 8017284:	4604      	mov	r4, r0
 8017286:	2301      	movs	r3, #1
 8017288:	e7f0      	b.n	801726c <_svfiprintf_r+0x194>
 801728a:	ab03      	add	r3, sp, #12
 801728c:	9300      	str	r3, [sp, #0]
 801728e:	462a      	mov	r2, r5
 8017290:	4b0f      	ldr	r3, [pc, #60]	; (80172d0 <_svfiprintf_r+0x1f8>)
 8017292:	a904      	add	r1, sp, #16
 8017294:	4638      	mov	r0, r7
 8017296:	f7fc fb11 	bl	80138bc <_printf_float>
 801729a:	1c42      	adds	r2, r0, #1
 801729c:	4606      	mov	r6, r0
 801729e:	d1d6      	bne.n	801724e <_svfiprintf_r+0x176>
 80172a0:	89ab      	ldrh	r3, [r5, #12]
 80172a2:	065b      	lsls	r3, r3, #25
 80172a4:	f53f af2c 	bmi.w	8017100 <_svfiprintf_r+0x28>
 80172a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80172aa:	b01d      	add	sp, #116	; 0x74
 80172ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172b0:	ab03      	add	r3, sp, #12
 80172b2:	9300      	str	r3, [sp, #0]
 80172b4:	462a      	mov	r2, r5
 80172b6:	4b06      	ldr	r3, [pc, #24]	; (80172d0 <_svfiprintf_r+0x1f8>)
 80172b8:	a904      	add	r1, sp, #16
 80172ba:	4638      	mov	r0, r7
 80172bc:	f7fc fda2 	bl	8013e04 <_printf_i>
 80172c0:	e7eb      	b.n	801729a <_svfiprintf_r+0x1c2>
 80172c2:	bf00      	nop
 80172c4:	0801988c 	.word	0x0801988c
 80172c8:	08019896 	.word	0x08019896
 80172cc:	080138bd 	.word	0x080138bd
 80172d0:	08017023 	.word	0x08017023
 80172d4:	08019892 	.word	0x08019892

080172d8 <_read_r>:
 80172d8:	b538      	push	{r3, r4, r5, lr}
 80172da:	4d07      	ldr	r5, [pc, #28]	; (80172f8 <_read_r+0x20>)
 80172dc:	4604      	mov	r4, r0
 80172de:	4608      	mov	r0, r1
 80172e0:	4611      	mov	r1, r2
 80172e2:	2200      	movs	r2, #0
 80172e4:	602a      	str	r2, [r5, #0]
 80172e6:	461a      	mov	r2, r3
 80172e8:	f7ef fd38 	bl	8006d5c <_read>
 80172ec:	1c43      	adds	r3, r0, #1
 80172ee:	d102      	bne.n	80172f6 <_read_r+0x1e>
 80172f0:	682b      	ldr	r3, [r5, #0]
 80172f2:	b103      	cbz	r3, 80172f6 <_read_r+0x1e>
 80172f4:	6023      	str	r3, [r4, #0]
 80172f6:	bd38      	pop	{r3, r4, r5, pc}
 80172f8:	200085e4 	.word	0x200085e4
 80172fc:	00000000 	.word	0x00000000

08017300 <nan>:
 8017300:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017308 <nan+0x8>
 8017304:	4770      	bx	lr
 8017306:	bf00      	nop
 8017308:	00000000 	.word	0x00000000
 801730c:	7ff80000 	.word	0x7ff80000

08017310 <__ascii_wctomb>:
 8017310:	b149      	cbz	r1, 8017326 <__ascii_wctomb+0x16>
 8017312:	2aff      	cmp	r2, #255	; 0xff
 8017314:	bf85      	ittet	hi
 8017316:	238a      	movhi	r3, #138	; 0x8a
 8017318:	6003      	strhi	r3, [r0, #0]
 801731a:	700a      	strbls	r2, [r1, #0]
 801731c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8017320:	bf98      	it	ls
 8017322:	2001      	movls	r0, #1
 8017324:	4770      	bx	lr
 8017326:	4608      	mov	r0, r1
 8017328:	4770      	bx	lr
	...

0801732c <__assert_func>:
 801732c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801732e:	4614      	mov	r4, r2
 8017330:	461a      	mov	r2, r3
 8017332:	4b09      	ldr	r3, [pc, #36]	; (8017358 <__assert_func+0x2c>)
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	4605      	mov	r5, r0
 8017338:	68d8      	ldr	r0, [r3, #12]
 801733a:	b14c      	cbz	r4, 8017350 <__assert_func+0x24>
 801733c:	4b07      	ldr	r3, [pc, #28]	; (801735c <__assert_func+0x30>)
 801733e:	9100      	str	r1, [sp, #0]
 8017340:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017344:	4906      	ldr	r1, [pc, #24]	; (8017360 <__assert_func+0x34>)
 8017346:	462b      	mov	r3, r5
 8017348:	f000 f80e 	bl	8017368 <fiprintf>
 801734c:	f000 fa80 	bl	8017850 <abort>
 8017350:	4b04      	ldr	r3, [pc, #16]	; (8017364 <__assert_func+0x38>)
 8017352:	461c      	mov	r4, r3
 8017354:	e7f3      	b.n	801733e <__assert_func+0x12>
 8017356:	bf00      	nop
 8017358:	2000018c 	.word	0x2000018c
 801735c:	0801989d 	.word	0x0801989d
 8017360:	080198aa 	.word	0x080198aa
 8017364:	080198d8 	.word	0x080198d8

08017368 <fiprintf>:
 8017368:	b40e      	push	{r1, r2, r3}
 801736a:	b503      	push	{r0, r1, lr}
 801736c:	4601      	mov	r1, r0
 801736e:	ab03      	add	r3, sp, #12
 8017370:	4805      	ldr	r0, [pc, #20]	; (8017388 <fiprintf+0x20>)
 8017372:	f853 2b04 	ldr.w	r2, [r3], #4
 8017376:	6800      	ldr	r0, [r0, #0]
 8017378:	9301      	str	r3, [sp, #4]
 801737a:	f000 f879 	bl	8017470 <_vfiprintf_r>
 801737e:	b002      	add	sp, #8
 8017380:	f85d eb04 	ldr.w	lr, [sp], #4
 8017384:	b003      	add	sp, #12
 8017386:	4770      	bx	lr
 8017388:	2000018c 	.word	0x2000018c

0801738c <memmove>:
 801738c:	4288      	cmp	r0, r1
 801738e:	b510      	push	{r4, lr}
 8017390:	eb01 0402 	add.w	r4, r1, r2
 8017394:	d902      	bls.n	801739c <memmove+0x10>
 8017396:	4284      	cmp	r4, r0
 8017398:	4623      	mov	r3, r4
 801739a:	d807      	bhi.n	80173ac <memmove+0x20>
 801739c:	1e43      	subs	r3, r0, #1
 801739e:	42a1      	cmp	r1, r4
 80173a0:	d008      	beq.n	80173b4 <memmove+0x28>
 80173a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80173a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80173aa:	e7f8      	b.n	801739e <memmove+0x12>
 80173ac:	4402      	add	r2, r0
 80173ae:	4601      	mov	r1, r0
 80173b0:	428a      	cmp	r2, r1
 80173b2:	d100      	bne.n	80173b6 <memmove+0x2a>
 80173b4:	bd10      	pop	{r4, pc}
 80173b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80173ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80173be:	e7f7      	b.n	80173b0 <memmove+0x24>

080173c0 <_realloc_r>:
 80173c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173c4:	4680      	mov	r8, r0
 80173c6:	4614      	mov	r4, r2
 80173c8:	460e      	mov	r6, r1
 80173ca:	b921      	cbnz	r1, 80173d6 <_realloc_r+0x16>
 80173cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80173d0:	4611      	mov	r1, r2
 80173d2:	f7fc b95f 	b.w	8013694 <_malloc_r>
 80173d6:	b92a      	cbnz	r2, 80173e4 <_realloc_r+0x24>
 80173d8:	f7fc f8f0 	bl	80135bc <_free_r>
 80173dc:	4625      	mov	r5, r4
 80173de:	4628      	mov	r0, r5
 80173e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173e4:	f000 faa0 	bl	8017928 <_malloc_usable_size_r>
 80173e8:	4284      	cmp	r4, r0
 80173ea:	4607      	mov	r7, r0
 80173ec:	d802      	bhi.n	80173f4 <_realloc_r+0x34>
 80173ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80173f2:	d812      	bhi.n	801741a <_realloc_r+0x5a>
 80173f4:	4621      	mov	r1, r4
 80173f6:	4640      	mov	r0, r8
 80173f8:	f7fc f94c 	bl	8013694 <_malloc_r>
 80173fc:	4605      	mov	r5, r0
 80173fe:	2800      	cmp	r0, #0
 8017400:	d0ed      	beq.n	80173de <_realloc_r+0x1e>
 8017402:	42bc      	cmp	r4, r7
 8017404:	4622      	mov	r2, r4
 8017406:	4631      	mov	r1, r6
 8017408:	bf28      	it	cs
 801740a:	463a      	movcs	r2, r7
 801740c:	f7fc f8aa 	bl	8013564 <memcpy>
 8017410:	4631      	mov	r1, r6
 8017412:	4640      	mov	r0, r8
 8017414:	f7fc f8d2 	bl	80135bc <_free_r>
 8017418:	e7e1      	b.n	80173de <_realloc_r+0x1e>
 801741a:	4635      	mov	r5, r6
 801741c:	e7df      	b.n	80173de <_realloc_r+0x1e>

0801741e <__sfputc_r>:
 801741e:	6893      	ldr	r3, [r2, #8]
 8017420:	3b01      	subs	r3, #1
 8017422:	2b00      	cmp	r3, #0
 8017424:	b410      	push	{r4}
 8017426:	6093      	str	r3, [r2, #8]
 8017428:	da08      	bge.n	801743c <__sfputc_r+0x1e>
 801742a:	6994      	ldr	r4, [r2, #24]
 801742c:	42a3      	cmp	r3, r4
 801742e:	db01      	blt.n	8017434 <__sfputc_r+0x16>
 8017430:	290a      	cmp	r1, #10
 8017432:	d103      	bne.n	801743c <__sfputc_r+0x1e>
 8017434:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017438:	f000 b94a 	b.w	80176d0 <__swbuf_r>
 801743c:	6813      	ldr	r3, [r2, #0]
 801743e:	1c58      	adds	r0, r3, #1
 8017440:	6010      	str	r0, [r2, #0]
 8017442:	7019      	strb	r1, [r3, #0]
 8017444:	4608      	mov	r0, r1
 8017446:	f85d 4b04 	ldr.w	r4, [sp], #4
 801744a:	4770      	bx	lr

0801744c <__sfputs_r>:
 801744c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801744e:	4606      	mov	r6, r0
 8017450:	460f      	mov	r7, r1
 8017452:	4614      	mov	r4, r2
 8017454:	18d5      	adds	r5, r2, r3
 8017456:	42ac      	cmp	r4, r5
 8017458:	d101      	bne.n	801745e <__sfputs_r+0x12>
 801745a:	2000      	movs	r0, #0
 801745c:	e007      	b.n	801746e <__sfputs_r+0x22>
 801745e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017462:	463a      	mov	r2, r7
 8017464:	4630      	mov	r0, r6
 8017466:	f7ff ffda 	bl	801741e <__sfputc_r>
 801746a:	1c43      	adds	r3, r0, #1
 801746c:	d1f3      	bne.n	8017456 <__sfputs_r+0xa>
 801746e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017470 <_vfiprintf_r>:
 8017470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017474:	460d      	mov	r5, r1
 8017476:	b09d      	sub	sp, #116	; 0x74
 8017478:	4614      	mov	r4, r2
 801747a:	4698      	mov	r8, r3
 801747c:	4606      	mov	r6, r0
 801747e:	b118      	cbz	r0, 8017488 <_vfiprintf_r+0x18>
 8017480:	6983      	ldr	r3, [r0, #24]
 8017482:	b90b      	cbnz	r3, 8017488 <_vfiprintf_r+0x18>
 8017484:	f7fb feec 	bl	8013260 <__sinit>
 8017488:	4b89      	ldr	r3, [pc, #548]	; (80176b0 <_vfiprintf_r+0x240>)
 801748a:	429d      	cmp	r5, r3
 801748c:	d11b      	bne.n	80174c6 <_vfiprintf_r+0x56>
 801748e:	6875      	ldr	r5, [r6, #4]
 8017490:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017492:	07d9      	lsls	r1, r3, #31
 8017494:	d405      	bmi.n	80174a2 <_vfiprintf_r+0x32>
 8017496:	89ab      	ldrh	r3, [r5, #12]
 8017498:	059a      	lsls	r2, r3, #22
 801749a:	d402      	bmi.n	80174a2 <_vfiprintf_r+0x32>
 801749c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801749e:	f7fc f84e 	bl	801353e <__retarget_lock_acquire_recursive>
 80174a2:	89ab      	ldrh	r3, [r5, #12]
 80174a4:	071b      	lsls	r3, r3, #28
 80174a6:	d501      	bpl.n	80174ac <_vfiprintf_r+0x3c>
 80174a8:	692b      	ldr	r3, [r5, #16]
 80174aa:	b9eb      	cbnz	r3, 80174e8 <_vfiprintf_r+0x78>
 80174ac:	4629      	mov	r1, r5
 80174ae:	4630      	mov	r0, r6
 80174b0:	f000 f960 	bl	8017774 <__swsetup_r>
 80174b4:	b1c0      	cbz	r0, 80174e8 <_vfiprintf_r+0x78>
 80174b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80174b8:	07dc      	lsls	r4, r3, #31
 80174ba:	d50e      	bpl.n	80174da <_vfiprintf_r+0x6a>
 80174bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174c0:	b01d      	add	sp, #116	; 0x74
 80174c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174c6:	4b7b      	ldr	r3, [pc, #492]	; (80176b4 <_vfiprintf_r+0x244>)
 80174c8:	429d      	cmp	r5, r3
 80174ca:	d101      	bne.n	80174d0 <_vfiprintf_r+0x60>
 80174cc:	68b5      	ldr	r5, [r6, #8]
 80174ce:	e7df      	b.n	8017490 <_vfiprintf_r+0x20>
 80174d0:	4b79      	ldr	r3, [pc, #484]	; (80176b8 <_vfiprintf_r+0x248>)
 80174d2:	429d      	cmp	r5, r3
 80174d4:	bf08      	it	eq
 80174d6:	68f5      	ldreq	r5, [r6, #12]
 80174d8:	e7da      	b.n	8017490 <_vfiprintf_r+0x20>
 80174da:	89ab      	ldrh	r3, [r5, #12]
 80174dc:	0598      	lsls	r0, r3, #22
 80174de:	d4ed      	bmi.n	80174bc <_vfiprintf_r+0x4c>
 80174e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80174e2:	f7fc f82d 	bl	8013540 <__retarget_lock_release_recursive>
 80174e6:	e7e9      	b.n	80174bc <_vfiprintf_r+0x4c>
 80174e8:	2300      	movs	r3, #0
 80174ea:	9309      	str	r3, [sp, #36]	; 0x24
 80174ec:	2320      	movs	r3, #32
 80174ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80174f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80174f6:	2330      	movs	r3, #48	; 0x30
 80174f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80176bc <_vfiprintf_r+0x24c>
 80174fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017500:	f04f 0901 	mov.w	r9, #1
 8017504:	4623      	mov	r3, r4
 8017506:	469a      	mov	sl, r3
 8017508:	f813 2b01 	ldrb.w	r2, [r3], #1
 801750c:	b10a      	cbz	r2, 8017512 <_vfiprintf_r+0xa2>
 801750e:	2a25      	cmp	r2, #37	; 0x25
 8017510:	d1f9      	bne.n	8017506 <_vfiprintf_r+0x96>
 8017512:	ebba 0b04 	subs.w	fp, sl, r4
 8017516:	d00b      	beq.n	8017530 <_vfiprintf_r+0xc0>
 8017518:	465b      	mov	r3, fp
 801751a:	4622      	mov	r2, r4
 801751c:	4629      	mov	r1, r5
 801751e:	4630      	mov	r0, r6
 8017520:	f7ff ff94 	bl	801744c <__sfputs_r>
 8017524:	3001      	adds	r0, #1
 8017526:	f000 80aa 	beq.w	801767e <_vfiprintf_r+0x20e>
 801752a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801752c:	445a      	add	r2, fp
 801752e:	9209      	str	r2, [sp, #36]	; 0x24
 8017530:	f89a 3000 	ldrb.w	r3, [sl]
 8017534:	2b00      	cmp	r3, #0
 8017536:	f000 80a2 	beq.w	801767e <_vfiprintf_r+0x20e>
 801753a:	2300      	movs	r3, #0
 801753c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017544:	f10a 0a01 	add.w	sl, sl, #1
 8017548:	9304      	str	r3, [sp, #16]
 801754a:	9307      	str	r3, [sp, #28]
 801754c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017550:	931a      	str	r3, [sp, #104]	; 0x68
 8017552:	4654      	mov	r4, sl
 8017554:	2205      	movs	r2, #5
 8017556:	f814 1b01 	ldrb.w	r1, [r4], #1
 801755a:	4858      	ldr	r0, [pc, #352]	; (80176bc <_vfiprintf_r+0x24c>)
 801755c:	f7e8 fe40 	bl	80001e0 <memchr>
 8017560:	9a04      	ldr	r2, [sp, #16]
 8017562:	b9d8      	cbnz	r0, 801759c <_vfiprintf_r+0x12c>
 8017564:	06d1      	lsls	r1, r2, #27
 8017566:	bf44      	itt	mi
 8017568:	2320      	movmi	r3, #32
 801756a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801756e:	0713      	lsls	r3, r2, #28
 8017570:	bf44      	itt	mi
 8017572:	232b      	movmi	r3, #43	; 0x2b
 8017574:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017578:	f89a 3000 	ldrb.w	r3, [sl]
 801757c:	2b2a      	cmp	r3, #42	; 0x2a
 801757e:	d015      	beq.n	80175ac <_vfiprintf_r+0x13c>
 8017580:	9a07      	ldr	r2, [sp, #28]
 8017582:	4654      	mov	r4, sl
 8017584:	2000      	movs	r0, #0
 8017586:	f04f 0c0a 	mov.w	ip, #10
 801758a:	4621      	mov	r1, r4
 801758c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017590:	3b30      	subs	r3, #48	; 0x30
 8017592:	2b09      	cmp	r3, #9
 8017594:	d94e      	bls.n	8017634 <_vfiprintf_r+0x1c4>
 8017596:	b1b0      	cbz	r0, 80175c6 <_vfiprintf_r+0x156>
 8017598:	9207      	str	r2, [sp, #28]
 801759a:	e014      	b.n	80175c6 <_vfiprintf_r+0x156>
 801759c:	eba0 0308 	sub.w	r3, r0, r8
 80175a0:	fa09 f303 	lsl.w	r3, r9, r3
 80175a4:	4313      	orrs	r3, r2
 80175a6:	9304      	str	r3, [sp, #16]
 80175a8:	46a2      	mov	sl, r4
 80175aa:	e7d2      	b.n	8017552 <_vfiprintf_r+0xe2>
 80175ac:	9b03      	ldr	r3, [sp, #12]
 80175ae:	1d19      	adds	r1, r3, #4
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	9103      	str	r1, [sp, #12]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	bfbb      	ittet	lt
 80175b8:	425b      	neglt	r3, r3
 80175ba:	f042 0202 	orrlt.w	r2, r2, #2
 80175be:	9307      	strge	r3, [sp, #28]
 80175c0:	9307      	strlt	r3, [sp, #28]
 80175c2:	bfb8      	it	lt
 80175c4:	9204      	strlt	r2, [sp, #16]
 80175c6:	7823      	ldrb	r3, [r4, #0]
 80175c8:	2b2e      	cmp	r3, #46	; 0x2e
 80175ca:	d10c      	bne.n	80175e6 <_vfiprintf_r+0x176>
 80175cc:	7863      	ldrb	r3, [r4, #1]
 80175ce:	2b2a      	cmp	r3, #42	; 0x2a
 80175d0:	d135      	bne.n	801763e <_vfiprintf_r+0x1ce>
 80175d2:	9b03      	ldr	r3, [sp, #12]
 80175d4:	1d1a      	adds	r2, r3, #4
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	9203      	str	r2, [sp, #12]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	bfb8      	it	lt
 80175de:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80175e2:	3402      	adds	r4, #2
 80175e4:	9305      	str	r3, [sp, #20]
 80175e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80176cc <_vfiprintf_r+0x25c>
 80175ea:	7821      	ldrb	r1, [r4, #0]
 80175ec:	2203      	movs	r2, #3
 80175ee:	4650      	mov	r0, sl
 80175f0:	f7e8 fdf6 	bl	80001e0 <memchr>
 80175f4:	b140      	cbz	r0, 8017608 <_vfiprintf_r+0x198>
 80175f6:	2340      	movs	r3, #64	; 0x40
 80175f8:	eba0 000a 	sub.w	r0, r0, sl
 80175fc:	fa03 f000 	lsl.w	r0, r3, r0
 8017600:	9b04      	ldr	r3, [sp, #16]
 8017602:	4303      	orrs	r3, r0
 8017604:	3401      	adds	r4, #1
 8017606:	9304      	str	r3, [sp, #16]
 8017608:	f814 1b01 	ldrb.w	r1, [r4], #1
 801760c:	482c      	ldr	r0, [pc, #176]	; (80176c0 <_vfiprintf_r+0x250>)
 801760e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017612:	2206      	movs	r2, #6
 8017614:	f7e8 fde4 	bl	80001e0 <memchr>
 8017618:	2800      	cmp	r0, #0
 801761a:	d03f      	beq.n	801769c <_vfiprintf_r+0x22c>
 801761c:	4b29      	ldr	r3, [pc, #164]	; (80176c4 <_vfiprintf_r+0x254>)
 801761e:	bb1b      	cbnz	r3, 8017668 <_vfiprintf_r+0x1f8>
 8017620:	9b03      	ldr	r3, [sp, #12]
 8017622:	3307      	adds	r3, #7
 8017624:	f023 0307 	bic.w	r3, r3, #7
 8017628:	3308      	adds	r3, #8
 801762a:	9303      	str	r3, [sp, #12]
 801762c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801762e:	443b      	add	r3, r7
 8017630:	9309      	str	r3, [sp, #36]	; 0x24
 8017632:	e767      	b.n	8017504 <_vfiprintf_r+0x94>
 8017634:	fb0c 3202 	mla	r2, ip, r2, r3
 8017638:	460c      	mov	r4, r1
 801763a:	2001      	movs	r0, #1
 801763c:	e7a5      	b.n	801758a <_vfiprintf_r+0x11a>
 801763e:	2300      	movs	r3, #0
 8017640:	3401      	adds	r4, #1
 8017642:	9305      	str	r3, [sp, #20]
 8017644:	4619      	mov	r1, r3
 8017646:	f04f 0c0a 	mov.w	ip, #10
 801764a:	4620      	mov	r0, r4
 801764c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017650:	3a30      	subs	r2, #48	; 0x30
 8017652:	2a09      	cmp	r2, #9
 8017654:	d903      	bls.n	801765e <_vfiprintf_r+0x1ee>
 8017656:	2b00      	cmp	r3, #0
 8017658:	d0c5      	beq.n	80175e6 <_vfiprintf_r+0x176>
 801765a:	9105      	str	r1, [sp, #20]
 801765c:	e7c3      	b.n	80175e6 <_vfiprintf_r+0x176>
 801765e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017662:	4604      	mov	r4, r0
 8017664:	2301      	movs	r3, #1
 8017666:	e7f0      	b.n	801764a <_vfiprintf_r+0x1da>
 8017668:	ab03      	add	r3, sp, #12
 801766a:	9300      	str	r3, [sp, #0]
 801766c:	462a      	mov	r2, r5
 801766e:	4b16      	ldr	r3, [pc, #88]	; (80176c8 <_vfiprintf_r+0x258>)
 8017670:	a904      	add	r1, sp, #16
 8017672:	4630      	mov	r0, r6
 8017674:	f7fc f922 	bl	80138bc <_printf_float>
 8017678:	4607      	mov	r7, r0
 801767a:	1c78      	adds	r0, r7, #1
 801767c:	d1d6      	bne.n	801762c <_vfiprintf_r+0x1bc>
 801767e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017680:	07d9      	lsls	r1, r3, #31
 8017682:	d405      	bmi.n	8017690 <_vfiprintf_r+0x220>
 8017684:	89ab      	ldrh	r3, [r5, #12]
 8017686:	059a      	lsls	r2, r3, #22
 8017688:	d402      	bmi.n	8017690 <_vfiprintf_r+0x220>
 801768a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801768c:	f7fb ff58 	bl	8013540 <__retarget_lock_release_recursive>
 8017690:	89ab      	ldrh	r3, [r5, #12]
 8017692:	065b      	lsls	r3, r3, #25
 8017694:	f53f af12 	bmi.w	80174bc <_vfiprintf_r+0x4c>
 8017698:	9809      	ldr	r0, [sp, #36]	; 0x24
 801769a:	e711      	b.n	80174c0 <_vfiprintf_r+0x50>
 801769c:	ab03      	add	r3, sp, #12
 801769e:	9300      	str	r3, [sp, #0]
 80176a0:	462a      	mov	r2, r5
 80176a2:	4b09      	ldr	r3, [pc, #36]	; (80176c8 <_vfiprintf_r+0x258>)
 80176a4:	a904      	add	r1, sp, #16
 80176a6:	4630      	mov	r0, r6
 80176a8:	f7fc fbac 	bl	8013e04 <_printf_i>
 80176ac:	e7e4      	b.n	8017678 <_vfiprintf_r+0x208>
 80176ae:	bf00      	nop
 80176b0:	0801955c 	.word	0x0801955c
 80176b4:	0801957c 	.word	0x0801957c
 80176b8:	0801953c 	.word	0x0801953c
 80176bc:	0801988c 	.word	0x0801988c
 80176c0:	08019896 	.word	0x08019896
 80176c4:	080138bd 	.word	0x080138bd
 80176c8:	0801744d 	.word	0x0801744d
 80176cc:	08019892 	.word	0x08019892

080176d0 <__swbuf_r>:
 80176d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176d2:	460e      	mov	r6, r1
 80176d4:	4614      	mov	r4, r2
 80176d6:	4605      	mov	r5, r0
 80176d8:	b118      	cbz	r0, 80176e2 <__swbuf_r+0x12>
 80176da:	6983      	ldr	r3, [r0, #24]
 80176dc:	b90b      	cbnz	r3, 80176e2 <__swbuf_r+0x12>
 80176de:	f7fb fdbf 	bl	8013260 <__sinit>
 80176e2:	4b21      	ldr	r3, [pc, #132]	; (8017768 <__swbuf_r+0x98>)
 80176e4:	429c      	cmp	r4, r3
 80176e6:	d12b      	bne.n	8017740 <__swbuf_r+0x70>
 80176e8:	686c      	ldr	r4, [r5, #4]
 80176ea:	69a3      	ldr	r3, [r4, #24]
 80176ec:	60a3      	str	r3, [r4, #8]
 80176ee:	89a3      	ldrh	r3, [r4, #12]
 80176f0:	071a      	lsls	r2, r3, #28
 80176f2:	d52f      	bpl.n	8017754 <__swbuf_r+0x84>
 80176f4:	6923      	ldr	r3, [r4, #16]
 80176f6:	b36b      	cbz	r3, 8017754 <__swbuf_r+0x84>
 80176f8:	6923      	ldr	r3, [r4, #16]
 80176fa:	6820      	ldr	r0, [r4, #0]
 80176fc:	1ac0      	subs	r0, r0, r3
 80176fe:	6963      	ldr	r3, [r4, #20]
 8017700:	b2f6      	uxtb	r6, r6
 8017702:	4283      	cmp	r3, r0
 8017704:	4637      	mov	r7, r6
 8017706:	dc04      	bgt.n	8017712 <__swbuf_r+0x42>
 8017708:	4621      	mov	r1, r4
 801770a:	4628      	mov	r0, r5
 801770c:	f7fe fbe8 	bl	8015ee0 <_fflush_r>
 8017710:	bb30      	cbnz	r0, 8017760 <__swbuf_r+0x90>
 8017712:	68a3      	ldr	r3, [r4, #8]
 8017714:	3b01      	subs	r3, #1
 8017716:	60a3      	str	r3, [r4, #8]
 8017718:	6823      	ldr	r3, [r4, #0]
 801771a:	1c5a      	adds	r2, r3, #1
 801771c:	6022      	str	r2, [r4, #0]
 801771e:	701e      	strb	r6, [r3, #0]
 8017720:	6963      	ldr	r3, [r4, #20]
 8017722:	3001      	adds	r0, #1
 8017724:	4283      	cmp	r3, r0
 8017726:	d004      	beq.n	8017732 <__swbuf_r+0x62>
 8017728:	89a3      	ldrh	r3, [r4, #12]
 801772a:	07db      	lsls	r3, r3, #31
 801772c:	d506      	bpl.n	801773c <__swbuf_r+0x6c>
 801772e:	2e0a      	cmp	r6, #10
 8017730:	d104      	bne.n	801773c <__swbuf_r+0x6c>
 8017732:	4621      	mov	r1, r4
 8017734:	4628      	mov	r0, r5
 8017736:	f7fe fbd3 	bl	8015ee0 <_fflush_r>
 801773a:	b988      	cbnz	r0, 8017760 <__swbuf_r+0x90>
 801773c:	4638      	mov	r0, r7
 801773e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017740:	4b0a      	ldr	r3, [pc, #40]	; (801776c <__swbuf_r+0x9c>)
 8017742:	429c      	cmp	r4, r3
 8017744:	d101      	bne.n	801774a <__swbuf_r+0x7a>
 8017746:	68ac      	ldr	r4, [r5, #8]
 8017748:	e7cf      	b.n	80176ea <__swbuf_r+0x1a>
 801774a:	4b09      	ldr	r3, [pc, #36]	; (8017770 <__swbuf_r+0xa0>)
 801774c:	429c      	cmp	r4, r3
 801774e:	bf08      	it	eq
 8017750:	68ec      	ldreq	r4, [r5, #12]
 8017752:	e7ca      	b.n	80176ea <__swbuf_r+0x1a>
 8017754:	4621      	mov	r1, r4
 8017756:	4628      	mov	r0, r5
 8017758:	f000 f80c 	bl	8017774 <__swsetup_r>
 801775c:	2800      	cmp	r0, #0
 801775e:	d0cb      	beq.n	80176f8 <__swbuf_r+0x28>
 8017760:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017764:	e7ea      	b.n	801773c <__swbuf_r+0x6c>
 8017766:	bf00      	nop
 8017768:	0801955c 	.word	0x0801955c
 801776c:	0801957c 	.word	0x0801957c
 8017770:	0801953c 	.word	0x0801953c

08017774 <__swsetup_r>:
 8017774:	4b32      	ldr	r3, [pc, #200]	; (8017840 <__swsetup_r+0xcc>)
 8017776:	b570      	push	{r4, r5, r6, lr}
 8017778:	681d      	ldr	r5, [r3, #0]
 801777a:	4606      	mov	r6, r0
 801777c:	460c      	mov	r4, r1
 801777e:	b125      	cbz	r5, 801778a <__swsetup_r+0x16>
 8017780:	69ab      	ldr	r3, [r5, #24]
 8017782:	b913      	cbnz	r3, 801778a <__swsetup_r+0x16>
 8017784:	4628      	mov	r0, r5
 8017786:	f7fb fd6b 	bl	8013260 <__sinit>
 801778a:	4b2e      	ldr	r3, [pc, #184]	; (8017844 <__swsetup_r+0xd0>)
 801778c:	429c      	cmp	r4, r3
 801778e:	d10f      	bne.n	80177b0 <__swsetup_r+0x3c>
 8017790:	686c      	ldr	r4, [r5, #4]
 8017792:	89a3      	ldrh	r3, [r4, #12]
 8017794:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017798:	0719      	lsls	r1, r3, #28
 801779a:	d42c      	bmi.n	80177f6 <__swsetup_r+0x82>
 801779c:	06dd      	lsls	r5, r3, #27
 801779e:	d411      	bmi.n	80177c4 <__swsetup_r+0x50>
 80177a0:	2309      	movs	r3, #9
 80177a2:	6033      	str	r3, [r6, #0]
 80177a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80177a8:	81a3      	strh	r3, [r4, #12]
 80177aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80177ae:	e03e      	b.n	801782e <__swsetup_r+0xba>
 80177b0:	4b25      	ldr	r3, [pc, #148]	; (8017848 <__swsetup_r+0xd4>)
 80177b2:	429c      	cmp	r4, r3
 80177b4:	d101      	bne.n	80177ba <__swsetup_r+0x46>
 80177b6:	68ac      	ldr	r4, [r5, #8]
 80177b8:	e7eb      	b.n	8017792 <__swsetup_r+0x1e>
 80177ba:	4b24      	ldr	r3, [pc, #144]	; (801784c <__swsetup_r+0xd8>)
 80177bc:	429c      	cmp	r4, r3
 80177be:	bf08      	it	eq
 80177c0:	68ec      	ldreq	r4, [r5, #12]
 80177c2:	e7e6      	b.n	8017792 <__swsetup_r+0x1e>
 80177c4:	0758      	lsls	r0, r3, #29
 80177c6:	d512      	bpl.n	80177ee <__swsetup_r+0x7a>
 80177c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80177ca:	b141      	cbz	r1, 80177de <__swsetup_r+0x6a>
 80177cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80177d0:	4299      	cmp	r1, r3
 80177d2:	d002      	beq.n	80177da <__swsetup_r+0x66>
 80177d4:	4630      	mov	r0, r6
 80177d6:	f7fb fef1 	bl	80135bc <_free_r>
 80177da:	2300      	movs	r3, #0
 80177dc:	6363      	str	r3, [r4, #52]	; 0x34
 80177de:	89a3      	ldrh	r3, [r4, #12]
 80177e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80177e4:	81a3      	strh	r3, [r4, #12]
 80177e6:	2300      	movs	r3, #0
 80177e8:	6063      	str	r3, [r4, #4]
 80177ea:	6923      	ldr	r3, [r4, #16]
 80177ec:	6023      	str	r3, [r4, #0]
 80177ee:	89a3      	ldrh	r3, [r4, #12]
 80177f0:	f043 0308 	orr.w	r3, r3, #8
 80177f4:	81a3      	strh	r3, [r4, #12]
 80177f6:	6923      	ldr	r3, [r4, #16]
 80177f8:	b94b      	cbnz	r3, 801780e <__swsetup_r+0x9a>
 80177fa:	89a3      	ldrh	r3, [r4, #12]
 80177fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017804:	d003      	beq.n	801780e <__swsetup_r+0x9a>
 8017806:	4621      	mov	r1, r4
 8017808:	4630      	mov	r0, r6
 801780a:	f000 f84d 	bl	80178a8 <__smakebuf_r>
 801780e:	89a0      	ldrh	r0, [r4, #12]
 8017810:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017814:	f010 0301 	ands.w	r3, r0, #1
 8017818:	d00a      	beq.n	8017830 <__swsetup_r+0xbc>
 801781a:	2300      	movs	r3, #0
 801781c:	60a3      	str	r3, [r4, #8]
 801781e:	6963      	ldr	r3, [r4, #20]
 8017820:	425b      	negs	r3, r3
 8017822:	61a3      	str	r3, [r4, #24]
 8017824:	6923      	ldr	r3, [r4, #16]
 8017826:	b943      	cbnz	r3, 801783a <__swsetup_r+0xc6>
 8017828:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801782c:	d1ba      	bne.n	80177a4 <__swsetup_r+0x30>
 801782e:	bd70      	pop	{r4, r5, r6, pc}
 8017830:	0781      	lsls	r1, r0, #30
 8017832:	bf58      	it	pl
 8017834:	6963      	ldrpl	r3, [r4, #20]
 8017836:	60a3      	str	r3, [r4, #8]
 8017838:	e7f4      	b.n	8017824 <__swsetup_r+0xb0>
 801783a:	2000      	movs	r0, #0
 801783c:	e7f7      	b.n	801782e <__swsetup_r+0xba>
 801783e:	bf00      	nop
 8017840:	2000018c 	.word	0x2000018c
 8017844:	0801955c 	.word	0x0801955c
 8017848:	0801957c 	.word	0x0801957c
 801784c:	0801953c 	.word	0x0801953c

08017850 <abort>:
 8017850:	b508      	push	{r3, lr}
 8017852:	2006      	movs	r0, #6
 8017854:	f000 f898 	bl	8017988 <raise>
 8017858:	2001      	movs	r0, #1
 801785a:	f7ef fa75 	bl	8006d48 <_exit>

0801785e <__swhatbuf_r>:
 801785e:	b570      	push	{r4, r5, r6, lr}
 8017860:	460e      	mov	r6, r1
 8017862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017866:	2900      	cmp	r1, #0
 8017868:	b096      	sub	sp, #88	; 0x58
 801786a:	4614      	mov	r4, r2
 801786c:	461d      	mov	r5, r3
 801786e:	da08      	bge.n	8017882 <__swhatbuf_r+0x24>
 8017870:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017874:	2200      	movs	r2, #0
 8017876:	602a      	str	r2, [r5, #0]
 8017878:	061a      	lsls	r2, r3, #24
 801787a:	d410      	bmi.n	801789e <__swhatbuf_r+0x40>
 801787c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017880:	e00e      	b.n	80178a0 <__swhatbuf_r+0x42>
 8017882:	466a      	mov	r2, sp
 8017884:	f000 f89c 	bl	80179c0 <_fstat_r>
 8017888:	2800      	cmp	r0, #0
 801788a:	dbf1      	blt.n	8017870 <__swhatbuf_r+0x12>
 801788c:	9a01      	ldr	r2, [sp, #4]
 801788e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017892:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017896:	425a      	negs	r2, r3
 8017898:	415a      	adcs	r2, r3
 801789a:	602a      	str	r2, [r5, #0]
 801789c:	e7ee      	b.n	801787c <__swhatbuf_r+0x1e>
 801789e:	2340      	movs	r3, #64	; 0x40
 80178a0:	2000      	movs	r0, #0
 80178a2:	6023      	str	r3, [r4, #0]
 80178a4:	b016      	add	sp, #88	; 0x58
 80178a6:	bd70      	pop	{r4, r5, r6, pc}

080178a8 <__smakebuf_r>:
 80178a8:	898b      	ldrh	r3, [r1, #12]
 80178aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80178ac:	079d      	lsls	r5, r3, #30
 80178ae:	4606      	mov	r6, r0
 80178b0:	460c      	mov	r4, r1
 80178b2:	d507      	bpl.n	80178c4 <__smakebuf_r+0x1c>
 80178b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80178b8:	6023      	str	r3, [r4, #0]
 80178ba:	6123      	str	r3, [r4, #16]
 80178bc:	2301      	movs	r3, #1
 80178be:	6163      	str	r3, [r4, #20]
 80178c0:	b002      	add	sp, #8
 80178c2:	bd70      	pop	{r4, r5, r6, pc}
 80178c4:	ab01      	add	r3, sp, #4
 80178c6:	466a      	mov	r2, sp
 80178c8:	f7ff ffc9 	bl	801785e <__swhatbuf_r>
 80178cc:	9900      	ldr	r1, [sp, #0]
 80178ce:	4605      	mov	r5, r0
 80178d0:	4630      	mov	r0, r6
 80178d2:	f7fb fedf 	bl	8013694 <_malloc_r>
 80178d6:	b948      	cbnz	r0, 80178ec <__smakebuf_r+0x44>
 80178d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178dc:	059a      	lsls	r2, r3, #22
 80178de:	d4ef      	bmi.n	80178c0 <__smakebuf_r+0x18>
 80178e0:	f023 0303 	bic.w	r3, r3, #3
 80178e4:	f043 0302 	orr.w	r3, r3, #2
 80178e8:	81a3      	strh	r3, [r4, #12]
 80178ea:	e7e3      	b.n	80178b4 <__smakebuf_r+0xc>
 80178ec:	4b0d      	ldr	r3, [pc, #52]	; (8017924 <__smakebuf_r+0x7c>)
 80178ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80178f0:	89a3      	ldrh	r3, [r4, #12]
 80178f2:	6020      	str	r0, [r4, #0]
 80178f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80178f8:	81a3      	strh	r3, [r4, #12]
 80178fa:	9b00      	ldr	r3, [sp, #0]
 80178fc:	6163      	str	r3, [r4, #20]
 80178fe:	9b01      	ldr	r3, [sp, #4]
 8017900:	6120      	str	r0, [r4, #16]
 8017902:	b15b      	cbz	r3, 801791c <__smakebuf_r+0x74>
 8017904:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017908:	4630      	mov	r0, r6
 801790a:	f000 f86b 	bl	80179e4 <_isatty_r>
 801790e:	b128      	cbz	r0, 801791c <__smakebuf_r+0x74>
 8017910:	89a3      	ldrh	r3, [r4, #12]
 8017912:	f023 0303 	bic.w	r3, r3, #3
 8017916:	f043 0301 	orr.w	r3, r3, #1
 801791a:	81a3      	strh	r3, [r4, #12]
 801791c:	89a0      	ldrh	r0, [r4, #12]
 801791e:	4305      	orrs	r5, r0
 8017920:	81a5      	strh	r5, [r4, #12]
 8017922:	e7cd      	b.n	80178c0 <__smakebuf_r+0x18>
 8017924:	080131f9 	.word	0x080131f9

08017928 <_malloc_usable_size_r>:
 8017928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801792c:	1f18      	subs	r0, r3, #4
 801792e:	2b00      	cmp	r3, #0
 8017930:	bfbc      	itt	lt
 8017932:	580b      	ldrlt	r3, [r1, r0]
 8017934:	18c0      	addlt	r0, r0, r3
 8017936:	4770      	bx	lr

08017938 <_raise_r>:
 8017938:	291f      	cmp	r1, #31
 801793a:	b538      	push	{r3, r4, r5, lr}
 801793c:	4604      	mov	r4, r0
 801793e:	460d      	mov	r5, r1
 8017940:	d904      	bls.n	801794c <_raise_r+0x14>
 8017942:	2316      	movs	r3, #22
 8017944:	6003      	str	r3, [r0, #0]
 8017946:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801794a:	bd38      	pop	{r3, r4, r5, pc}
 801794c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801794e:	b112      	cbz	r2, 8017956 <_raise_r+0x1e>
 8017950:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017954:	b94b      	cbnz	r3, 801796a <_raise_r+0x32>
 8017956:	4620      	mov	r0, r4
 8017958:	f000 f830 	bl	80179bc <_getpid_r>
 801795c:	462a      	mov	r2, r5
 801795e:	4601      	mov	r1, r0
 8017960:	4620      	mov	r0, r4
 8017962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017966:	f000 b817 	b.w	8017998 <_kill_r>
 801796a:	2b01      	cmp	r3, #1
 801796c:	d00a      	beq.n	8017984 <_raise_r+0x4c>
 801796e:	1c59      	adds	r1, r3, #1
 8017970:	d103      	bne.n	801797a <_raise_r+0x42>
 8017972:	2316      	movs	r3, #22
 8017974:	6003      	str	r3, [r0, #0]
 8017976:	2001      	movs	r0, #1
 8017978:	e7e7      	b.n	801794a <_raise_r+0x12>
 801797a:	2400      	movs	r4, #0
 801797c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017980:	4628      	mov	r0, r5
 8017982:	4798      	blx	r3
 8017984:	2000      	movs	r0, #0
 8017986:	e7e0      	b.n	801794a <_raise_r+0x12>

08017988 <raise>:
 8017988:	4b02      	ldr	r3, [pc, #8]	; (8017994 <raise+0xc>)
 801798a:	4601      	mov	r1, r0
 801798c:	6818      	ldr	r0, [r3, #0]
 801798e:	f7ff bfd3 	b.w	8017938 <_raise_r>
 8017992:	bf00      	nop
 8017994:	2000018c 	.word	0x2000018c

08017998 <_kill_r>:
 8017998:	b538      	push	{r3, r4, r5, lr}
 801799a:	4d07      	ldr	r5, [pc, #28]	; (80179b8 <_kill_r+0x20>)
 801799c:	2300      	movs	r3, #0
 801799e:	4604      	mov	r4, r0
 80179a0:	4608      	mov	r0, r1
 80179a2:	4611      	mov	r1, r2
 80179a4:	602b      	str	r3, [r5, #0]
 80179a6:	f7ef f9bf 	bl	8006d28 <_kill>
 80179aa:	1c43      	adds	r3, r0, #1
 80179ac:	d102      	bne.n	80179b4 <_kill_r+0x1c>
 80179ae:	682b      	ldr	r3, [r5, #0]
 80179b0:	b103      	cbz	r3, 80179b4 <_kill_r+0x1c>
 80179b2:	6023      	str	r3, [r4, #0]
 80179b4:	bd38      	pop	{r3, r4, r5, pc}
 80179b6:	bf00      	nop
 80179b8:	200085e4 	.word	0x200085e4

080179bc <_getpid_r>:
 80179bc:	f7ef b9ac 	b.w	8006d18 <_getpid>

080179c0 <_fstat_r>:
 80179c0:	b538      	push	{r3, r4, r5, lr}
 80179c2:	4d07      	ldr	r5, [pc, #28]	; (80179e0 <_fstat_r+0x20>)
 80179c4:	2300      	movs	r3, #0
 80179c6:	4604      	mov	r4, r0
 80179c8:	4608      	mov	r0, r1
 80179ca:	4611      	mov	r1, r2
 80179cc:	602b      	str	r3, [r5, #0]
 80179ce:	f7ef fa0a 	bl	8006de6 <_fstat>
 80179d2:	1c43      	adds	r3, r0, #1
 80179d4:	d102      	bne.n	80179dc <_fstat_r+0x1c>
 80179d6:	682b      	ldr	r3, [r5, #0]
 80179d8:	b103      	cbz	r3, 80179dc <_fstat_r+0x1c>
 80179da:	6023      	str	r3, [r4, #0]
 80179dc:	bd38      	pop	{r3, r4, r5, pc}
 80179de:	bf00      	nop
 80179e0:	200085e4 	.word	0x200085e4

080179e4 <_isatty_r>:
 80179e4:	b538      	push	{r3, r4, r5, lr}
 80179e6:	4d06      	ldr	r5, [pc, #24]	; (8017a00 <_isatty_r+0x1c>)
 80179e8:	2300      	movs	r3, #0
 80179ea:	4604      	mov	r4, r0
 80179ec:	4608      	mov	r0, r1
 80179ee:	602b      	str	r3, [r5, #0]
 80179f0:	f7ef fa09 	bl	8006e06 <_isatty>
 80179f4:	1c43      	adds	r3, r0, #1
 80179f6:	d102      	bne.n	80179fe <_isatty_r+0x1a>
 80179f8:	682b      	ldr	r3, [r5, #0]
 80179fa:	b103      	cbz	r3, 80179fe <_isatty_r+0x1a>
 80179fc:	6023      	str	r3, [r4, #0]
 80179fe:	bd38      	pop	{r3, r4, r5, pc}
 8017a00:	200085e4 	.word	0x200085e4

08017a04 <_init>:
 8017a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a06:	bf00      	nop
 8017a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a0a:	bc08      	pop	{r3}
 8017a0c:	469e      	mov	lr, r3
 8017a0e:	4770      	bx	lr

08017a10 <_fini>:
 8017a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a12:	bf00      	nop
 8017a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a16:	bc08      	pop	{r3}
 8017a18:	469e      	mov	lr, r3
 8017a1a:	4770      	bx	lr
