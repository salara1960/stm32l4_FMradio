
stm32l4_probe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001830c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000220c  080184a0  080184a0  000284a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a6ac  0801a6ac  00030400  2**0
                  CONTENTS
  4 .ARM          00000008  0801a6ac  0801a6ac  0002a6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a6b4  0801a6b4  00030400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a6b4  0801a6b4  0002a6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a6b8  0801a6b8  0002a6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000400  20000000  0801a6bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008024  20000400  0801aabc  00030400  2**3
                  ALLOC
 10 ._user_heap_stack 00001004  20008424  0801aabc  00038424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030400  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d29c  00000000  00000000  00030430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000555d  00000000  00000000  0005d6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023f8  00000000  00000000  00062c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002268  00000000  00000000  00065028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d6ce  00000000  00000000  00067290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029fe5  00000000  00000000  0009495e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010dcf3  00000000  00000000  000be943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cc636  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000af0c  00000000  00000000  001cc688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000400 	.word	0x20000400
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018484 	.word	0x08018484

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000404 	.word	0x20000404
 80001cc:	08018484 	.word	0x08018484

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cc6:	f000 b9f5 	b.w	80010b4 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f883 	bl	8000de4 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f876 	bl	8000de4 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f865 	bl	8000de4 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f857 	bl	8000de4 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d5c:	f000 b9aa 	b.w	80010b4 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f83c 	bl	8000de4 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_d2lz>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	460d      	mov	r5, r1
 8000d82:	f7ff febb 	bl	8000afc <__aeabi_dcmplt>
 8000d86:	b928      	cbnz	r0, 8000d94 <__aeabi_d2lz+0x1c>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d90:	f000 b80a 	b.w	8000da8 <__aeabi_d2ulz>
 8000d94:	4620      	mov	r0, r4
 8000d96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d9a:	f000 f805 	bl	8000da8 <__aeabi_d2ulz>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	bd38      	pop	{r3, r4, r5, pc}
 8000da6:	bf00      	nop

08000da8 <__aeabi_d2ulz>:
 8000da8:	b5d0      	push	{r4, r6, r7, lr}
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <__aeabi_d2ulz+0x34>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	4606      	mov	r6, r0
 8000db0:	460f      	mov	r7, r1
 8000db2:	f7ff fc31 	bl	8000618 <__aeabi_dmul>
 8000db6:	f7ff ff07 	bl	8000bc8 <__aeabi_d2uiz>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	f7ff fbb2 	bl	8000524 <__aeabi_ui2d>
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <__aeabi_d2ulz+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f7ff fc28 	bl	8000618 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4639      	mov	r1, r7
 8000dd0:	f7ff fa6a 	bl	80002a8 <__aeabi_dsub>
 8000dd4:	f7ff fef8 	bl	8000bc8 <__aeabi_d2uiz>
 8000dd8:	4621      	mov	r1, r4
 8000dda:	bdd0      	pop	{r4, r6, r7, pc}
 8000ddc:	3df00000 	.word	0x3df00000
 8000de0:	41f00000 	.word	0x41f00000

08000de4 <__udivmoddi4>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	9d08      	ldr	r5, [sp, #32]
 8000dea:	4604      	mov	r4, r0
 8000dec:	468e      	mov	lr, r1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d14d      	bne.n	8000e8e <__udivmoddi4+0xaa>
 8000df2:	428a      	cmp	r2, r1
 8000df4:	4694      	mov	ip, r2
 8000df6:	d969      	bls.n	8000ecc <__udivmoddi4+0xe8>
 8000df8:	fab2 f282 	clz	r2, r2
 8000dfc:	b152      	cbz	r2, 8000e14 <__udivmoddi4+0x30>
 8000dfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000e02:	f1c2 0120 	rsb	r1, r2, #32
 8000e06:	fa20 f101 	lsr.w	r1, r0, r1
 8000e0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e12:	4094      	lsls	r4, r2
 8000e14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e18:	0c21      	lsrs	r1, r4, #16
 8000e1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e1e:	fa1f f78c 	uxth.w	r7, ip
 8000e22:	fb08 e316 	mls	r3, r8, r6, lr
 8000e26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e2a:	fb06 f107 	mul.w	r1, r6, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d90a      	bls.n	8000e48 <__udivmoddi4+0x64>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e3a:	f080 811f 	bcs.w	800107c <__udivmoddi4+0x298>
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	f240 811c 	bls.w	800107c <__udivmoddi4+0x298>
 8000e44:	3e02      	subs	r6, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1a5b      	subs	r3, r3, r1
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e58:	fb00 f707 	mul.w	r7, r0, r7
 8000e5c:	42a7      	cmp	r7, r4
 8000e5e:	d90a      	bls.n	8000e76 <__udivmoddi4+0x92>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e68:	f080 810a 	bcs.w	8001080 <__udivmoddi4+0x29c>
 8000e6c:	42a7      	cmp	r7, r4
 8000e6e:	f240 8107 	bls.w	8001080 <__udivmoddi4+0x29c>
 8000e72:	4464      	add	r4, ip
 8000e74:	3802      	subs	r0, #2
 8000e76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e7a:	1be4      	subs	r4, r4, r7
 8000e7c:	2600      	movs	r6, #0
 8000e7e:	b11d      	cbz	r5, 8000e88 <__udivmoddi4+0xa4>
 8000e80:	40d4      	lsrs	r4, r2
 8000e82:	2300      	movs	r3, #0
 8000e84:	e9c5 4300 	strd	r4, r3, [r5]
 8000e88:	4631      	mov	r1, r6
 8000e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d909      	bls.n	8000ea6 <__udivmoddi4+0xc2>
 8000e92:	2d00      	cmp	r5, #0
 8000e94:	f000 80ef 	beq.w	8001076 <__udivmoddi4+0x292>
 8000e98:	2600      	movs	r6, #0
 8000e9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	4631      	mov	r1, r6
 8000ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea6:	fab3 f683 	clz	r6, r3
 8000eaa:	2e00      	cmp	r6, #0
 8000eac:	d14a      	bne.n	8000f44 <__udivmoddi4+0x160>
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0xd4>
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	f200 80f9 	bhi.w	80010aa <__udivmoddi4+0x2c6>
 8000eb8:	1a84      	subs	r4, r0, r2
 8000eba:	eb61 0303 	sbc.w	r3, r1, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	469e      	mov	lr, r3
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d0e0      	beq.n	8000e88 <__udivmoddi4+0xa4>
 8000ec6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eca:	e7dd      	b.n	8000e88 <__udivmoddi4+0xa4>
 8000ecc:	b902      	cbnz	r2, 8000ed0 <__udivmoddi4+0xec>
 8000ece:	deff      	udf	#255	; 0xff
 8000ed0:	fab2 f282 	clz	r2, r2
 8000ed4:	2a00      	cmp	r2, #0
 8000ed6:	f040 8092 	bne.w	8000ffe <__udivmoddi4+0x21a>
 8000eda:	eba1 010c 	sub.w	r1, r1, ip
 8000ede:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee2:	fa1f fe8c 	uxth.w	lr, ip
 8000ee6:	2601      	movs	r6, #1
 8000ee8:	0c20      	lsrs	r0, r4, #16
 8000eea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000eee:	fb07 1113 	mls	r1, r7, r3, r1
 8000ef2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef6:	fb0e f003 	mul.w	r0, lr, r3
 8000efa:	4288      	cmp	r0, r1
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x12c>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x12a>
 8000f08:	4288      	cmp	r0, r1
 8000f0a:	f200 80cb 	bhi.w	80010a4 <__udivmoddi4+0x2c0>
 8000f0e:	4643      	mov	r3, r8
 8000f10:	1a09      	subs	r1, r1, r0
 8000f12:	b2a4      	uxth	r4, r4
 8000f14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f18:	fb07 1110 	mls	r1, r7, r0, r1
 8000f1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f20:	fb0e fe00 	mul.w	lr, lr, r0
 8000f24:	45a6      	cmp	lr, r4
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x156>
 8000f28:	eb1c 0404 	adds.w	r4, ip, r4
 8000f2c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f30:	d202      	bcs.n	8000f38 <__udivmoddi4+0x154>
 8000f32:	45a6      	cmp	lr, r4
 8000f34:	f200 80bb 	bhi.w	80010ae <__udivmoddi4+0x2ca>
 8000f38:	4608      	mov	r0, r1
 8000f3a:	eba4 040e 	sub.w	r4, r4, lr
 8000f3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f42:	e79c      	b.n	8000e7e <__udivmoddi4+0x9a>
 8000f44:	f1c6 0720 	rsb	r7, r6, #32
 8000f48:	40b3      	lsls	r3, r6
 8000f4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f52:	fa20 f407 	lsr.w	r4, r0, r7
 8000f56:	fa01 f306 	lsl.w	r3, r1, r6
 8000f5a:	431c      	orrs	r4, r3
 8000f5c:	40f9      	lsrs	r1, r7
 8000f5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f62:	fa00 f306 	lsl.w	r3, r0, r6
 8000f66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f6a:	0c20      	lsrs	r0, r4, #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fb09 1118 	mls	r1, r9, r8, r1
 8000f74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f78:	fb08 f00e 	mul.w	r0, r8, lr
 8000f7c:	4288      	cmp	r0, r1
 8000f7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f82:	d90b      	bls.n	8000f9c <__udivmoddi4+0x1b8>
 8000f84:	eb1c 0101 	adds.w	r1, ip, r1
 8000f88:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f8c:	f080 8088 	bcs.w	80010a0 <__udivmoddi4+0x2bc>
 8000f90:	4288      	cmp	r0, r1
 8000f92:	f240 8085 	bls.w	80010a0 <__udivmoddi4+0x2bc>
 8000f96:	f1a8 0802 	sub.w	r8, r8, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1a09      	subs	r1, r1, r0
 8000f9e:	b2a4      	uxth	r4, r4
 8000fa0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fa4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fa8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fb0:	458e      	cmp	lr, r1
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x1e2>
 8000fb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000fbc:	d26c      	bcs.n	8001098 <__udivmoddi4+0x2b4>
 8000fbe:	458e      	cmp	lr, r1
 8000fc0:	d96a      	bls.n	8001098 <__udivmoddi4+0x2b4>
 8000fc2:	3802      	subs	r0, #2
 8000fc4:	4461      	add	r1, ip
 8000fc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fca:	fba0 9402 	umull	r9, r4, r0, r2
 8000fce:	eba1 010e 	sub.w	r1, r1, lr
 8000fd2:	42a1      	cmp	r1, r4
 8000fd4:	46c8      	mov	r8, r9
 8000fd6:	46a6      	mov	lr, r4
 8000fd8:	d356      	bcc.n	8001088 <__udivmoddi4+0x2a4>
 8000fda:	d053      	beq.n	8001084 <__udivmoddi4+0x2a0>
 8000fdc:	b15d      	cbz	r5, 8000ff6 <__udivmoddi4+0x212>
 8000fde:	ebb3 0208 	subs.w	r2, r3, r8
 8000fe2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fe6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fea:	fa22 f306 	lsr.w	r3, r2, r6
 8000fee:	40f1      	lsrs	r1, r6
 8000ff0:	431f      	orrs	r7, r3
 8000ff2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ff6:	2600      	movs	r6, #0
 8000ff8:	4631      	mov	r1, r6
 8000ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ffe:	f1c2 0320 	rsb	r3, r2, #32
 8001002:	40d8      	lsrs	r0, r3
 8001004:	fa0c fc02 	lsl.w	ip, ip, r2
 8001008:	fa21 f303 	lsr.w	r3, r1, r3
 800100c:	4091      	lsls	r1, r2
 800100e:	4301      	orrs	r1, r0
 8001010:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001014:	fa1f fe8c 	uxth.w	lr, ip
 8001018:	fbb3 f0f7 	udiv	r0, r3, r7
 800101c:	fb07 3610 	mls	r6, r7, r0, r3
 8001020:	0c0b      	lsrs	r3, r1, #16
 8001022:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001026:	fb00 f60e 	mul.w	r6, r0, lr
 800102a:	429e      	cmp	r6, r3
 800102c:	fa04 f402 	lsl.w	r4, r4, r2
 8001030:	d908      	bls.n	8001044 <__udivmoddi4+0x260>
 8001032:	eb1c 0303 	adds.w	r3, ip, r3
 8001036:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800103a:	d22f      	bcs.n	800109c <__udivmoddi4+0x2b8>
 800103c:	429e      	cmp	r6, r3
 800103e:	d92d      	bls.n	800109c <__udivmoddi4+0x2b8>
 8001040:	3802      	subs	r0, #2
 8001042:	4463      	add	r3, ip
 8001044:	1b9b      	subs	r3, r3, r6
 8001046:	b289      	uxth	r1, r1
 8001048:	fbb3 f6f7 	udiv	r6, r3, r7
 800104c:	fb07 3316 	mls	r3, r7, r6, r3
 8001050:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001054:	fb06 f30e 	mul.w	r3, r6, lr
 8001058:	428b      	cmp	r3, r1
 800105a:	d908      	bls.n	800106e <__udivmoddi4+0x28a>
 800105c:	eb1c 0101 	adds.w	r1, ip, r1
 8001060:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001064:	d216      	bcs.n	8001094 <__udivmoddi4+0x2b0>
 8001066:	428b      	cmp	r3, r1
 8001068:	d914      	bls.n	8001094 <__udivmoddi4+0x2b0>
 800106a:	3e02      	subs	r6, #2
 800106c:	4461      	add	r1, ip
 800106e:	1ac9      	subs	r1, r1, r3
 8001070:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001074:	e738      	b.n	8000ee8 <__udivmoddi4+0x104>
 8001076:	462e      	mov	r6, r5
 8001078:	4628      	mov	r0, r5
 800107a:	e705      	b.n	8000e88 <__udivmoddi4+0xa4>
 800107c:	4606      	mov	r6, r0
 800107e:	e6e3      	b.n	8000e48 <__udivmoddi4+0x64>
 8001080:	4618      	mov	r0, r3
 8001082:	e6f8      	b.n	8000e76 <__udivmoddi4+0x92>
 8001084:	454b      	cmp	r3, r9
 8001086:	d2a9      	bcs.n	8000fdc <__udivmoddi4+0x1f8>
 8001088:	ebb9 0802 	subs.w	r8, r9, r2
 800108c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001090:	3801      	subs	r0, #1
 8001092:	e7a3      	b.n	8000fdc <__udivmoddi4+0x1f8>
 8001094:	4646      	mov	r6, r8
 8001096:	e7ea      	b.n	800106e <__udivmoddi4+0x28a>
 8001098:	4620      	mov	r0, r4
 800109a:	e794      	b.n	8000fc6 <__udivmoddi4+0x1e2>
 800109c:	4640      	mov	r0, r8
 800109e:	e7d1      	b.n	8001044 <__udivmoddi4+0x260>
 80010a0:	46d0      	mov	r8, sl
 80010a2:	e77b      	b.n	8000f9c <__udivmoddi4+0x1b8>
 80010a4:	3b02      	subs	r3, #2
 80010a6:	4461      	add	r1, ip
 80010a8:	e732      	b.n	8000f10 <__udivmoddi4+0x12c>
 80010aa:	4630      	mov	r0, r6
 80010ac:	e709      	b.n	8000ec2 <__udivmoddi4+0xde>
 80010ae:	4464      	add	r4, ip
 80010b0:	3802      	subs	r0, #2
 80010b2:	e742      	b.n	8000f3a <__udivmoddi4+0x156>

080010b4 <__aeabi_idiv0>:
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop

080010b8 <decodeIRED>:
volatile irparams_t irparams;
decode_results results;

//-----------------------------------------------------------------------------
int16_t decodeIRED(decode_results *results)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	if (irparams.rcvstate != STATE_STOP) return 0;
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <decodeIRED+0x64>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b05      	cmp	r3, #5
 80010c8:	d001      	beq.n	80010ce <decodeIRED+0x16>
 80010ca:	2300      	movs	r3, #0
 80010cc:	e021      	b.n	8001112 <decodeIRED+0x5a>

	results->rawbuf = irparams.rawbuf;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a13      	ldr	r2, [pc, #76]	; (8001120 <decodeIRED+0x68>)
 80010d2:	609a      	str	r2, [r3, #8]
	results->rawlen = irparams.rawlen;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <decodeIRED+0x64>)
 80010d6:	785b      	ldrb	r3, [r3, #1]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	b21a      	sxth	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	819a      	strh	r2, [r3, #12]
	results->overflow = irparams.overflow;
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <decodeIRED+0x64>)
 80010e2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	81da      	strh	r2, [r3, #14]

	if(irparams.rcvstate != STATE_STOP) return false;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <decodeIRED+0x64>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b05      	cmp	r3, #5
 80010f6:	d001      	beq.n	80010fc <decodeIRED+0x44>
 80010f8:	2300      	movs	r3, #0
 80010fa:	e00a      	b.n	8001112 <decodeIRED+0x5a>

	if (decodeHashIRED(results)) return 1;
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f000 f883 	bl	8001208 <decodeHashIRED>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <decodeIRED+0x54>
 8001108:	2301      	movs	r3, #1
 800110a:	e002      	b.n	8001112 <decodeIRED+0x5a>

	enIntIRED();
 800110c:	f000 f80a 	bl	8001124 <enIntIRED>

	return 0;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000041c 	.word	0x2000041c
 8001120:	20000420 	.word	0x20000420

08001124 <enIntIRED>:
//-----------------------------------------------------------------------------
void enIntIRED()
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <enIntIRED+0x28>)
 800112a:	2202      	movs	r2, #2
 800112c:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <enIntIRED+0x28>)
 8001130:	2200      	movs	r2, #0
 8001132:	705a      	strb	r2, [r3, #1]

	__HAL_TIM_SET_COUNTER(portIRED, 0x0000);
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <enIntIRED+0x2c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Start_IT(portIRED);
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <enIntIRED+0x2c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f00c fe88 	bl	800de58 <HAL_TIM_Base_Start_IT>
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000041c 	.word	0x2000041c
 8001150:	20000148 	.word	0x20000148

08001154 <resumeIRED>:
//-----------------------------------------------------------------------------
void resumeIRED() // Restart the ISR state machine
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <resumeIRED+0x1c>)
 800115a:	2202      	movs	r2, #2
 800115c:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <resumeIRED+0x1c>)
 8001160:	2200      	movs	r2, #0
 8001162:	705a      	strb	r2, [r3, #1]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	2000041c 	.word	0x2000041c
 8001174:	00000000 	.word	0x00000000

08001178 <compareIRED>:
//-----------------------------------------------------------------------------
int16_t compareIRED(uint16_t oldval, uint16_t newval)
{
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	460a      	mov	r2, r1
 8001182:	80fb      	strh	r3, [r7, #6]
 8001184:	4613      	mov	r3, r2
 8001186:	80bb      	strh	r3, [r7, #4]
	     if (newval < oldval * .8) return 0;
 8001188:	88bb      	ldrh	r3, [r7, #4]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f9da 	bl	8000544 <__aeabi_i2d>
 8001190:	4604      	mov	r4, r0
 8001192:	460d      	mov	r5, r1
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f9d4 	bl	8000544 <__aeabi_i2d>
 800119c:	a318      	add	r3, pc, #96	; (adr r3, 8001200 <compareIRED+0x88>)
 800119e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a2:	f7ff fa39 	bl	8000618 <__aeabi_dmul>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4620      	mov	r0, r4
 80011ac:	4629      	mov	r1, r5
 80011ae:	f7ff fca5 	bl	8000afc <__aeabi_dcmplt>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <compareIRED+0x44>
 80011b8:	2300      	movs	r3, #0
 80011ba:	e01a      	b.n	80011f2 <compareIRED+0x7a>
	else if (oldval < newval * .8) return 2;
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f9c0 	bl	8000544 <__aeabi_i2d>
 80011c4:	4604      	mov	r4, r0
 80011c6:	460d      	mov	r5, r1
 80011c8:	88bb      	ldrh	r3, [r7, #4]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f9ba 	bl	8000544 <__aeabi_i2d>
 80011d0:	a30b      	add	r3, pc, #44	; (adr r3, 8001200 <compareIRED+0x88>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f7ff fa1f 	bl	8000618 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4620      	mov	r0, r4
 80011e0:	4629      	mov	r1, r5
 80011e2:	f7ff fc8b 	bl	8000afc <__aeabi_dcmplt>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <compareIRED+0x78>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e000      	b.n	80011f2 <compareIRED+0x7a>
	else return 1;
 80011f0:	2301      	movs	r3, #1
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bdb0      	pop	{r4, r5, r7, pc}
 80011fa:	bf00      	nop
 80011fc:	f3af 8000 	nop.w
 8001200:	9999999a 	.word	0x9999999a
 8001204:	3fe99999 	.word	0x3fe99999

08001208 <decodeHashIRED>:
//-----------------------------------------------------------------------------
int32_t decodeHashIRED(decode_results *results)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	int32_t hash = FNV_BASIS_32;
 8001210:	4b21      	ldr	r3, [pc, #132]	; (8001298 <decodeHashIRED+0x90>)
 8001212:	60fb      	str	r3, [r7, #12]

	if (results->rawlen < 6) return 0;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800121a:	2b05      	cmp	r3, #5
 800121c:	dc01      	bgt.n	8001222 <decodeHashIRED+0x1a>
 800121e:	2300      	movs	r3, #0
 8001220:	e035      	b.n	800128e <decodeHashIRED+0x86>

	for (int16_t i = 1; (i + 2) < results->rawlen; i++) {
 8001222:	2301      	movs	r3, #1
 8001224:	817b      	strh	r3, [r7, #10]
 8001226:	e023      	b.n	8001270 <decodeHashIRED+0x68>
		int16_t value = compareIRED(results->rawbuf[i], results->rawbuf[i + 2]);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	b298      	uxth	r0, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001240:	3302      	adds	r3, #2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	b29b      	uxth	r3, r3
 800124a:	4619      	mov	r1, r3
 800124c:	f7ff ff94 	bl	8001178 <compareIRED>
 8001250:	4603      	mov	r3, r0
 8001252:	813b      	strh	r3, [r7, #8]
		hash = (hash * FNV_PRIME_32) ^ value;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4a11      	ldr	r2, [pc, #68]	; (800129c <decodeHashIRED+0x94>)
 8001258:	fb03 f202 	mul.w	r2, r3, r2
 800125c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001260:	4053      	eors	r3, r2
 8001262:	60fb      	str	r3, [r7, #12]
	for (int16_t i = 1; (i + 2) < results->rawlen; i++) {
 8001264:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001268:	b29b      	uxth	r3, r3
 800126a:	3301      	adds	r3, #1
 800126c:	b29b      	uxth	r3, r3
 800126e:	817b      	strh	r3, [r7, #10]
 8001270:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001274:	3302      	adds	r3, #2
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800127c:	4293      	cmp	r3, r2
 800127e:	dbd3      	blt.n	8001228 <decodeHashIRED+0x20>
	}

	results->value = hash;
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	601a      	str	r2, [r3, #0]
	results->bits = 32;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2220      	movs	r2, #32
 800128a:	809a      	strh	r2, [r3, #4]

	return 1;
 800128c:	2301      	movs	r3, #1
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	811c9dc5 	.word	0x811c9dc5
 800129c:	01000193 	.word	0x01000193

080012a0 <ST7565_Select>:
volatile uint8_t lcdRdy = 1;

//------------------------------------------------------------------------------

inline static void ST7565_Select()
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
 80012a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012ac:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
	#endif
	//-----------------------------------------------------
#endif
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <ST7565_Unselect>:

//------------------------------------------------------------------------------

inline static void ST7565_Unselect()
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
		CS_GPIO_Port->BSRR = CS_Pin;
 80012bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012c0:	2210      	movs	r2, #16
 80012c2:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = CS_Pin;
	#endif
	//-----------------------------------------------------
#endif
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <ST7565_Reset>:
	* @brief	 ( описание ):  аппарвтный сброс дисплея
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Reset()
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	RES_GPIO_Port->BSRR = (RES_Pin << 16);//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET );
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <ST7565_Reset+0x24>)
 80012d6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012da:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80012dc:	2001      	movs	r0, #1
 80012de:	f007 f841 	bl	8008364 <HAL_Delay>
	
	RES_GPIO_Port->BSRR = RES_Pin;//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET );
 80012e2:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <ST7565_Reset+0x24>)
 80012e4:	2204      	movs	r2, #4
 80012e6:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80012e8:	2001      	movs	r0, #1
 80012ea:	f007 f83b 	bl	8008364 <HAL_Delay>
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	48000c00 	.word	0x48000c00

080012f8 <ST7565_w_dats>:
//--------------------------------------------------------------------------------
#ifdef SET_NEW_PROC
inline static void ST7565_w_dats(uint8_t *Data, uint16_t len)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = DC_Pin;//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001304:	4b1e      	ldr	r3, [pc, #120]	; (8001380 <ST7565_w_dats+0x88>)
 8001306:	2220      	movs	r2, #32
 8001308:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <ST7565_w_dats+0x8c>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d019      	beq.n	8001346 <ST7565_w_dats+0x4e>
		lcdRdy = 0;
 8001312:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <ST7565_w_dats+0x90>)
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Data, len) != HAL_OK) devError |= devLCD;
 8001318:	887b      	ldrh	r3, [r7, #2]
 800131a:	461a      	mov	r2, r3
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	481b      	ldr	r0, [pc, #108]	; (800138c <ST7565_w_dats+0x94>)
 8001320:	f00b fe8c 	bl	800d03c <HAL_SPI_Transmit_DMA>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d006      	beq.n	8001338 <ST7565_w_dats+0x40>
 800132a:	4b19      	ldr	r3, [pc, #100]	; (8001390 <ST7565_w_dats+0x98>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001332:	b29a      	uxth	r2, r3
 8001334:	4b16      	ldr	r3, [pc, #88]	; (8001390 <ST7565_w_dats+0x98>)
 8001336:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 8001338:	bf00      	nop
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <ST7565_w_dats+0x90>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0fa      	beq.n	800133a <ST7565_w_dats+0x42>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 8001344:	e017      	b.n	8001376 <ST7565_w_dats+0x7e>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 8001346:	887a      	ldrh	r2, [r7, #2]
 8001348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	480f      	ldr	r0, [pc, #60]	; (800138c <ST7565_w_dats+0x94>)
 8001350:	f00b f9c3 	bl	800c6da <HAL_SPI_Transmit>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d006      	beq.n	8001368 <ST7565_w_dats+0x70>
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <ST7565_w_dats+0x98>)
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001362:	b29a      	uxth	r2, r3
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <ST7565_w_dats+0x98>)
 8001366:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 8001368:	bf00      	nop
 800136a:	4808      	ldr	r0, [pc, #32]	; (800138c <ST7565_w_dats+0x94>)
 800136c:	f00c fa04 	bl	800d778 <HAL_SPI_GetState>
 8001370:	4603      	mov	r3, r0
 8001372:	2b01      	cmp	r3, #1
 8001374:	d1f9      	bne.n	800136a <ST7565_w_dats+0x72>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	48000400 	.word	0x48000400
 8001384:	20000a34 	.word	0x20000a34
 8001388:	20000000 	.word	0x20000000
 800138c:	20000b40 	.word	0x20000b40
 8001390:	20001bf4 	.word	0x20001bf4

08001394 <ST7565_w_cmds>:
//
inline static void ST7565_w_cmds(uint8_t *Command, uint16_t len)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = (DC_Pin << 16);//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80013a0:	4b1e      	ldr	r3, [pc, #120]	; (800141c <ST7565_w_cmds+0x88>)
 80013a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80013a6:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <ST7565_w_cmds+0x8c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d019      	beq.n	80013e4 <ST7565_w_cmds+0x50>
		lcdRdy = 0;
 80013b0:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <ST7565_w_cmds+0x90>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Command, len) != HAL_OK) devError |= devLCD;
 80013b6:	887b      	ldrh	r3, [r7, #2]
 80013b8:	461a      	mov	r2, r3
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	481a      	ldr	r0, [pc, #104]	; (8001428 <ST7565_w_cmds+0x94>)
 80013be:	f00b fe3d 	bl	800d03c <HAL_SPI_Transmit_DMA>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d006      	beq.n	80013d6 <ST7565_w_cmds+0x42>
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <ST7565_w_cmds+0x98>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <ST7565_w_cmds+0x98>)
 80013d4:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 80013d6:	bf00      	nop
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <ST7565_w_cmds+0x90>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0fa      	beq.n	80013d8 <ST7565_w_cmds+0x44>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 80013e2:	e017      	b.n	8001414 <ST7565_w_cmds+0x80>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 80013e4:	887a      	ldrh	r2, [r7, #2]
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	480e      	ldr	r0, [pc, #56]	; (8001428 <ST7565_w_cmds+0x94>)
 80013ee:	f00b f974 	bl	800c6da <HAL_SPI_Transmit>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d006      	beq.n	8001406 <ST7565_w_cmds+0x72>
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <ST7565_w_cmds+0x98>)
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001400:	b29a      	uxth	r2, r3
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <ST7565_w_cmds+0x98>)
 8001404:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 8001406:	bf00      	nop
 8001408:	4807      	ldr	r0, [pc, #28]	; (8001428 <ST7565_w_cmds+0x94>)
 800140a:	f00c f9b5 	bl	800d778 <HAL_SPI_GetState>
 800140e:	4603      	mov	r3, r0
 8001410:	2b01      	cmp	r3, #1
 8001412:	d1f9      	bne.n	8001408 <ST7565_w_cmds+0x74>
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	48000400 	.word	0x48000400
 8001420:	20000a34 	.word	0x20000a34
 8001424:	20000000 	.word	0x20000000
 8001428:	20000b40 	.word	0x20000b40
 800142c:	20001bf4 	.word	0x20001bf4

08001430 <ST7565_SetX>:
inline static void ST7565_SetX(uint8_t x)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
	uint8_t bytes[] = { ((x & 0xf0) >> 4) | 0x10, x & 0x0f };
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	b2db      	uxtb	r3, r3
 8001440:	f043 0310 	orr.w	r3, r3, #16
 8001444:	b2db      	uxtb	r3, r3
 8001446:	733b      	strb	r3, [r7, #12]
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	b2db      	uxtb	r3, r3
 8001450:	737b      	strb	r3, [r7, #13]
	ST7565_w_cmds(bytes, 2);
 8001452:	f107 030c 	add.w	r3, r7, #12
 8001456:	2102      	movs	r1, #2
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff9b 	bl	8001394 <ST7565_w_cmds>
}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <ST7565_SetY>:
//
inline static void ST7565_SetY(uint8_t y)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b084      	sub	sp, #16
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	71fb      	strb	r3, [r7, #7]
	uint8_t byte = (y & 0x07) | 0xB0;
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	b25b      	sxtb	r3, r3
 800147a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800147e:	b25b      	sxtb	r3, r3
 8001480:	b2db      	uxtb	r3, r3
 8001482:	73fb      	strb	r3, [r7, #15]
	ST7565_w_cmds(&byte, 1);
 8001484:	f107 030f 	add.w	r3, r7, #15
 8001488:	2101      	movs	r1, #1
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ff82 	bl	8001394 <ST7565_w_cmds>
}
 8001490:	bf00      	nop
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <ST7565_Display_fill>:
								( данные отправляются сразу на дисплей и записываются в буфер кадра )
								Функцию ST7565_Update() вызывать не нужно
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Display_fill(uint8_t fill)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
uint8_t page;//, column;
	
	memset(ST7565_buffer, fill, (SCREEN_WIDTH * SCREEN_HEIGHT / 8));	// отчистка памяти заполняем массив значением 0x00
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a8:	4619      	mov	r1, r3
 80014aa:	4814      	ldr	r0, [pc, #80]	; (80014fc <ST7565_Display_fill+0x64>)
 80014ac:	f012 fdaf 	bl	801400e <memset>
	
	ST7565_Select();
 80014b0:	f7ff fef6 	bl	80012a0 <ST7565_Select>
#ifdef SET_NEW_PROC
	uint8_t dta[] = {0, 0x10, 0};
 80014b4:	4a12      	ldr	r2, [pc, #72]	; (8001500 <ST7565_Display_fill+0x68>)
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	4611      	mov	r1, r2
 80014be:	8019      	strh	r1, [r3, #0]
 80014c0:	3302      	adds	r3, #2
 80014c2:	0c12      	lsrs	r2, r2, #16
 80014c4:	701a      	strb	r2, [r3, #0]
#endif
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80014c6:	23b7      	movs	r3, #183	; 0xb7
 80014c8:	73fb      	strb	r3, [r7, #15]
 80014ca:	e00e      	b.n	80014ea <ST7565_Display_fill+0x52>
		ST7565_w_cmd(page);  //set page address
		ST7565_w_cmd(0x10);  //set Column address MSB   
		ST7565_w_cmd(0x00);  //set column address LSB
		for (column = 0; column < 131; column++) ST7565_w_dat(fill);
#else
		dta[0] = page;
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	733b      	strb	r3, [r7, #12]
		ST7565_w_cmds(dta, sizeof(dta));
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	2103      	movs	r1, #3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ff5c 	bl	8001394 <ST7565_w_cmds>
		ST7565_w_dats(ST7565_buffer, 131);
 80014dc:	2183      	movs	r1, #131	; 0x83
 80014de:	4807      	ldr	r0, [pc, #28]	; (80014fc <ST7565_Display_fill+0x64>)
 80014e0:	f7ff ff0a 	bl	80012f8 <ST7565_w_dats>
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	2baf      	cmp	r3, #175	; 0xaf
 80014ee:	d8ed      	bhi.n	80014cc <ST7565_Display_fill+0x34>
#endif
    }
		
	ST7565_Unselect();
 80014f0:	f7ff fee2 	bl	80012b8 <ST7565_Unselect>
}
 80014f4:	bf00      	nop
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000634 	.word	0x20000634
 8001500:	080184a0 	.word	0x080184a0

08001504 <ST7565_Init>:
	* @brief	 ( описание ):  инициализация дисплея ( при другой инициализации можно поменять параметры внутри функции )
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Init()
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
	ST7565_Select();
 800150a:	f7ff fec9 	bl	80012a0 <ST7565_Select>
	ST7565_w_cmd(CMD_DISPLAY_ON);    		//Display on
	// Инвертирование экрана CMD_SET_DISP_NORMAL - OFF    CMD_SET_DISP_REVERSE - ON
	ST7565_w_cmd(CMD_SET_DISP_NORMAL);
	//HAL_Delay(1);//1
#else
	uint8_t dta[] = {
 800150e:	4a09      	ldr	r2, [pc, #36]	; (8001534 <ST7565_Init+0x30>)
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	ca07      	ldmia	r2, {r0, r1, r2}
 8001514:	c303      	stmia	r3!, {r0, r1}
 8001516:	801a      	strh	r2, [r3, #0]
	};
	#if defined (SCREEN_ORIENTATION_180)
		dta[1] = CMD_SET_ADC_REVERSE;    	//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
		dta[2] = CMD_SET_COM_NORMAL;    		//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
	#endif
	ST7565_w_cmds(dta, sizeof(dta));
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	210a      	movs	r1, #10
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff39 	bl	8001394 <ST7565_w_cmds>
#endif
	
	ST7565_Display_fill(0);
 8001522:	2000      	movs	r0, #0
 8001524:	f7ff ffb8 	bl	8001498 <ST7565_Display_fill>
	
	ST7565_Unselect();
 8001528:	f7ff fec6 	bl	80012b8 <ST7565_Unselect>
   
}
 800152c:	bf00      	nop
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	080184a4 	.word	0x080184a4

08001538 <ST7565_CMD_DISPLAY>:
//--------------------------------------------------------------------------------
void ST7565_CMD_DISPLAY(uint8_t byte)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
#ifdef SET_NEW_PROC
	ST7565_w_cmds(&byte, 1);
 8001542:	1dfb      	adds	r3, r7, #7
 8001544:	2101      	movs	r1, #1
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff24 	bl	8001394 <ST7565_w_cmds>

	if (byte == CMD_DISPLAY_OFF) OFF_DISPLAY();
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	2bae      	cmp	r3, #174	; 0xae
 8001550:	d103      	bne.n	800155a <ST7565_CMD_DISPLAY+0x22>
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <ST7565_CMD_DISPLAY+0x34>)
 8001554:	2201      	movs	r2, #1
 8001556:	619a      	str	r2, [r3, #24]
							else ON_DISPLAY();
#else
	ST7565_w_cmd(byte);
#endif
}
 8001558:	e003      	b.n	8001562 <ST7565_CMD_DISPLAY+0x2a>
							else ON_DISPLAY();
 800155a:	4b04      	ldr	r3, [pc, #16]	; (800156c <ST7565_CMD_DISPLAY+0x34>)
 800155c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001560:	619a      	str	r2, [r3, #24]
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	48000800 	.word	0x48000800

08001570 <ST7565_Draw_pixel>:
	* @param	( параметры ):	координата X(0 - 127) и координата Y(0 - 63)  color 1 or 0
	* @return  ( возвращает ):	
*******************************************************************************/
// X(0 - 127)  Y(0 - 63)
void ST7565_Draw_pixel(int16_t x, int16_t y, uint8_t color)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	80fb      	strh	r3, [r7, #6]
 800157a:	460b      	mov	r3, r1
 800157c:	80bb      	strh	r3, [r7, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	70fb      	strb	r3, [r7, #3]
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 8001582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001586:	2b7f      	cmp	r3, #127	; 0x7f
 8001588:	dc4c      	bgt.n	8001624 <ST7565_Draw_pixel+0xb4>
 800158a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db48      	blt.n	8001624 <ST7565_Draw_pixel+0xb4>
 8001592:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001596:	2b3f      	cmp	r3, #63	; 0x3f
 8001598:	dc44      	bgt.n	8001624 <ST7565_Draw_pixel+0xb4>
 800159a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	db40      	blt.n	8001624 <ST7565_Draw_pixel+0xb4>

    uint16_t array_pos = x + ((y >> 3) * SCREEN_WIDTH );
 80015a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015a6:	10db      	asrs	r3, r3, #3
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	01db      	lsls	r3, r3, #7
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	4413      	add	r3, r2
 80015b4:	81fb      	strh	r3, [r7, #14]

    if (color) {
 80015b6:	78fb      	ldrb	r3, [r7, #3]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d018      	beq.n	80015ee <ST7565_Draw_pixel+0x7e>
        ST7565_buffer[array_pos] |= 1 << (y % 8);
 80015bc:	89fb      	ldrh	r3, [r7, #14]
 80015be:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <ST7565_Draw_pixel+0xc0>)
 80015c0:	5cd3      	ldrb	r3, [r2, r3]
 80015c2:	b25a      	sxtb	r2, r3
 80015c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015c8:	4259      	negs	r1, r3
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	f001 0107 	and.w	r1, r1, #7
 80015d2:	bf58      	it	pl
 80015d4:	424b      	negpl	r3, r1
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4619      	mov	r1, r3
 80015da:	2301      	movs	r3, #1
 80015dc:	408b      	lsls	r3, r1
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b25a      	sxtb	r2, r3
 80015e4:	89fb      	ldrh	r3, [r7, #14]
 80015e6:	b2d1      	uxtb	r1, r2
 80015e8:	4a11      	ldr	r2, [pc, #68]	; (8001630 <ST7565_Draw_pixel+0xc0>)
 80015ea:	54d1      	strb	r1, [r2, r3]
 80015ec:	e01b      	b.n	8001626 <ST7565_Draw_pixel+0xb6>
    } else {
        ST7565_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 80015ee:	89fb      	ldrh	r3, [r7, #14]
 80015f0:	4a0f      	ldr	r2, [pc, #60]	; (8001630 <ST7565_Draw_pixel+0xc0>)
 80015f2:	5cd3      	ldrb	r3, [r2, r3]
 80015f4:	b25a      	sxtb	r2, r3
 80015f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015fa:	4259      	negs	r1, r3
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	f001 0107 	and.w	r1, r1, #7
 8001604:	bf58      	it	pl
 8001606:	424b      	negpl	r3, r1
 8001608:	b21b      	sxth	r3, r3
 800160a:	4619      	mov	r1, r3
 800160c:	2301      	movs	r3, #1
 800160e:	408b      	lsls	r3, r1
 8001610:	b25b      	sxtb	r3, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	b25b      	sxtb	r3, r3
 8001616:	4013      	ands	r3, r2
 8001618:	b25a      	sxtb	r2, r3
 800161a:	89fb      	ldrh	r3, [r7, #14]
 800161c:	b2d1      	uxtb	r1, r2
 800161e:	4a04      	ldr	r2, [pc, #16]	; (8001630 <ST7565_Draw_pixel+0xc0>)
 8001620:	54d1      	strb	r1, [r2, r3]
 8001622:	e000      	b.n	8001626 <ST7565_Draw_pixel+0xb6>
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 8001624:	bf00      	nop
    }
}
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	20000634 	.word	0x20000634

08001634 <ST7565_Update>:
	* @brief	 ( описание ):  вывод буффера кадра на дисплей
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Update()
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
uint8_t x, y;
		
	ST7565_Select();
 800163a:	f7ff fe31 	bl	80012a0 <ST7565_Select>

  	for (y = 0; y < 8; y++) {
 800163e:	2300      	movs	r3, #0
 8001640:	71bb      	strb	r3, [r7, #6]
 8001642:	e01d      	b.n	8001680 <ST7565_Update+0x4c>
		ST7565_SetX(0);	
 8001644:	2000      	movs	r0, #0
 8001646:	f7ff fef3 	bl	8001430 <ST7565_SetX>
		ST7565_SetY(y);
 800164a:	79bb      	ldrb	r3, [r7, #6]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff0a 	bl	8001466 <ST7565_SetY>
		for (x = 0; x < 128; x++) {
 8001652:	2300      	movs	r3, #0
 8001654:	71fb      	strb	r3, [r7, #7]
 8001656:	e00c      	b.n	8001672 <ST7565_Update+0x3e>
			ST7565_w_dats(&ST7565_buffer[x + 128 * y], 1);
 8001658:	79fa      	ldrb	r2, [r7, #7]
 800165a:	79bb      	ldrb	r3, [r7, #6]
 800165c:	01db      	lsls	r3, r3, #7
 800165e:	4413      	add	r3, r2
 8001660:	4a0d      	ldr	r2, [pc, #52]	; (8001698 <ST7565_Update+0x64>)
 8001662:	4413      	add	r3, r2
 8001664:	2101      	movs	r1, #1
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fe46 	bl	80012f8 <ST7565_w_dats>
		for (x = 0; x < 128; x++) {
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	3301      	adds	r3, #1
 8001670:	71fb      	strb	r3, [r7, #7]
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	2b00      	cmp	r3, #0
 8001678:	daee      	bge.n	8001658 <ST7565_Update+0x24>
  	for (y = 0; y < 8; y++) {
 800167a:	79bb      	ldrb	r3, [r7, #6]
 800167c:	3301      	adds	r3, #1
 800167e:	71bb      	strb	r3, [r7, #6]
 8001680:	79bb      	ldrb	r3, [r7, #6]
 8001682:	2b07      	cmp	r3, #7
 8001684:	d9de      	bls.n	8001644 <ST7565_Update+0x10>
		}
	}
	
	ST7565_Unselect();
 8001686:	f7ff fe17 	bl	80012b8 <ST7565_Unselect>
	HAL_Delay(50);//(100);
 800168a:	2032      	movs	r0, #50	; 0x32
 800168c:	f006 fe6a 	bl	8008364 <HAL_Delay>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000634 	.word	0x20000634

0800169c <ST7565_DrawChar>:
	* @brief	 ( описание ):  функция записывает 1 символ в буфер кадра
	* @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawChar(int16_t x, int16_t y, unsigned char ch, FontDef_t* Font, uint8_t multiplier, uint8_t color)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	4603      	mov	r3, r0
 80016a6:	81fb      	strh	r3, [r7, #14]
 80016a8:	460b      	mov	r3, r1
 80016aa:	81bb      	strh	r3, [r7, #12]
 80016ac:	4613      	mov	r3, r2
 80016ae:	72fb      	strb	r3, [r7, #11]
uint16_t i, j;
uint16_t b;
int16_t X = x, Y = y;
 80016b0:	89fb      	ldrh	r3, [r7, #14]
 80016b2:	833b      	strh	r3, [r7, #24]
 80016b4:	89bb      	ldrh	r3, [r7, #12]
 80016b6:	82fb      	strh	r3, [r7, #22]
int16_t xx, yy;
	
	if (multiplier < 1) multiplier = 1;
 80016b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d102      	bne.n	80016c6 <ST7565_DrawChar+0x2a>
 80016c0:	2301      	movs	r3, #1
 80016c2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	
	// Check available space in LCD
	if (SCREEN_WIDTH >= ( x + Font->FontWidth) || SCREEN_HEIGHT >= ( y + Font->FontHeight)) {
 80016c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	7812      	ldrb	r2, [r2, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	2b80      	cmp	r3, #128	; 0x80
 80016d2:	dd07      	ble.n	80016e4 <ST7565_DrawChar+0x48>
 80016d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	7852      	ldrb	r2, [r2, #1]
 80016dc:	4413      	add	r3, r2
 80016de:	2b40      	cmp	r3, #64	; 0x40
 80016e0:	f300 8154 	bgt.w	800198c <ST7565_DrawChar+0x2f0>
		// Go through font
		for (i = 0; i < Font->FontHeight; i++) {
 80016e4:	2300      	movs	r3, #0
 80016e6:	83fb      	strh	r3, [r7, #30]
 80016e8:	e149      	b.n	800197e <ST7565_DrawChar+0x2e2>
			if (ch < 127) {
 80016ea:	7afb      	ldrb	r3, [r7, #11]
 80016ec:	2b7e      	cmp	r3, #126	; 0x7e
 80016ee:	d80f      	bhi.n	8001710 <ST7565_DrawChar+0x74>
				b = Font->data[(ch - 32) * Font->FontHeight + i];
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80016f6:	7afb      	ldrb	r3, [r7, #11]
 80016f8:	3b20      	subs	r3, #32
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	7849      	ldrb	r1, [r1, #1]
 80016fe:	fb03 f101 	mul.w	r1, r3, r1
 8001702:	8bfb      	ldrh	r3, [r7, #30]
 8001704:	440b      	add	r3, r1
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4413      	add	r3, r2
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	837b      	strh	r3, [r7, #26]
 800170e:	e0af      	b.n	8001870 <ST7565_DrawChar+0x1d4>
			} else if (ch > 191) {
 8001710:	7afb      	ldrb	r3, [r7, #11]
 8001712:	2bbf      	cmp	r3, #191	; 0xbf
 8001714:	d90f      	bls.n	8001736 <ST7565_DrawChar+0x9a>
				// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
				// и если в шрифте который содержит сперва латиницу и спец символы и потом 
				// только кирилицу то нужно добавлять 95 если шрифт 
				// содержит только кирилицу то +96 не нужно
				b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800171c:	7afb      	ldrb	r3, [r7, #11]
 800171e:	3b60      	subs	r3, #96	; 0x60
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	7849      	ldrb	r1, [r1, #1]
 8001724:	fb03 f101 	mul.w	r1, r3, r1
 8001728:	8bfb      	ldrh	r3, [r7, #30]
 800172a:	440b      	add	r3, r1
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	837b      	strh	r3, [r7, #26]
 8001734:	e09c      	b.n	8001870 <ST7565_DrawChar+0x1d4>
			} else if (ch == 168) {	// 168 символ по ASCII - Ё
 8001736:	7afb      	ldrb	r3, [r7, #11]
 8001738:	2ba8      	cmp	r3, #168	; 0xa8
 800173a:	d111      	bne.n	8001760 <ST7565_DrawChar+0xc4>
				// 160 эллемент ( символ Ё ) 
				b = Font->data[160 * Font->FontHeight + i];
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	785b      	ldrb	r3, [r3, #1]
 8001746:	4619      	mov	r1, r3
 8001748:	460b      	mov	r3, r1
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	015b      	lsls	r3, r3, #5
 8001750:	4619      	mov	r1, r3
 8001752:	8bfb      	ldrh	r3, [r7, #30]
 8001754:	440b      	add	r3, r1
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	837b      	strh	r3, [r7, #26]
 800175e:	e087      	b.n	8001870 <ST7565_DrawChar+0x1d4>
			} else if (ch == 184) {	// 184 символ по ASCII - ё
 8001760:	7afb      	ldrb	r3, [r7, #11]
 8001762:	2bb8      	cmp	r3, #184	; 0xb8
 8001764:	d111      	bne.n	800178a <ST7565_DrawChar+0xee>
				// 161 эллемент  ( символ ё ) 
				b = Font->data[161 * Font->FontHeight + i];
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f8d3 1002 	ldr.w	r1, [r3, #2]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	785b      	ldrb	r3, [r3, #1]
 8001770:	461a      	mov	r2, r3
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	015b      	lsls	r3, r3, #5
 800177a:	441a      	add	r2, r3
 800177c:	8bfb      	ldrh	r3, [r7, #30]
 800177e:	4413      	add	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	440b      	add	r3, r1
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	837b      	strh	r3, [r7, #26]
 8001788:	e072      	b.n	8001870 <ST7565_DrawChar+0x1d4>
			} else if (ch == 170) {	// 168 символ по ASCII - Є
 800178a:	7afb      	ldrb	r3, [r7, #11]
 800178c:	2baa      	cmp	r3, #170	; 0xaa
 800178e:	d10f      	bne.n	80017b0 <ST7565_DrawChar+0x114>
				// 162 эллемент ( символ Є )
				b = Font->data[162 * Font->FontHeight + i];
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	785b      	ldrb	r3, [r3, #1]
 800179a:	4619      	mov	r1, r3
 800179c:	23a2      	movs	r3, #162	; 0xa2
 800179e:	fb03 f101 	mul.w	r1, r3, r1
 80017a2:	8bfb      	ldrh	r3, [r7, #30]
 80017a4:	440b      	add	r3, r1
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	837b      	strh	r3, [r7, #26]
 80017ae:	e05f      	b.n	8001870 <ST7565_DrawChar+0x1d4>
			} else if (ch == 175) {	// 184 символ по ASCII - Ї
 80017b0:	7afb      	ldrb	r3, [r7, #11]
 80017b2:	2baf      	cmp	r3, #175	; 0xaf
 80017b4:	d10f      	bne.n	80017d6 <ST7565_DrawChar+0x13a>
				// 163 эллемент  ( символ Ї )
				b = Font->data[163 * Font->FontHeight + i];
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	785b      	ldrb	r3, [r3, #1]
 80017c0:	4619      	mov	r1, r3
 80017c2:	23a3      	movs	r3, #163	; 0xa3
 80017c4:	fb03 f101 	mul.w	r1, r3, r1
 80017c8:	8bfb      	ldrh	r3, [r7, #30]
 80017ca:	440b      	add	r3, r1
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4413      	add	r3, r2
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	837b      	strh	r3, [r7, #26]
 80017d4:	e04c      	b.n	8001870 <ST7565_DrawChar+0x1d4>
			} else if (ch == 178) {	// 168 символ по ASCII - І
 80017d6:	7afb      	ldrb	r3, [r7, #11]
 80017d8:	2bb2      	cmp	r3, #178	; 0xb2
 80017da:	d10f      	bne.n	80017fc <ST7565_DrawChar+0x160>
				// 164 эллемент ( символ І )
				b = Font->data[164 * Font->FontHeight + i];
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	785b      	ldrb	r3, [r3, #1]
 80017e6:	4619      	mov	r1, r3
 80017e8:	23a4      	movs	r3, #164	; 0xa4
 80017ea:	fb03 f101 	mul.w	r1, r3, r1
 80017ee:	8bfb      	ldrh	r3, [r7, #30]
 80017f0:	440b      	add	r3, r1
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	837b      	strh	r3, [r7, #26]
 80017fa:	e039      	b.n	8001870 <ST7565_DrawChar+0x1d4>
			}
			else if (ch == 179) {	// 184 символ по ASCII - і
 80017fc:	7afb      	ldrb	r3, [r7, #11]
 80017fe:	2bb3      	cmp	r3, #179	; 0xb3
 8001800:	d111      	bne.n	8001826 <ST7565_DrawChar+0x18a>
				// 165 эллемент  ( символ і )
				b = Font->data[165 * Font->FontHeight + i];
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	785b      	ldrb	r3, [r3, #1]
 800180c:	4619      	mov	r1, r3
 800180e:	460b      	mov	r3, r1
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	0159      	lsls	r1, r3, #5
 8001816:	4419      	add	r1, r3
 8001818:	8bfb      	ldrh	r3, [r7, #30]
 800181a:	440b      	add	r3, r1
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4413      	add	r3, r2
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	837b      	strh	r3, [r7, #26]
 8001824:	e024      	b.n	8001870 <ST7565_DrawChar+0x1d4>
			} else if (ch == 186) {	// 184 символ по ASCII - є
 8001826:	7afb      	ldrb	r3, [r7, #11]
 8001828:	2bba      	cmp	r3, #186	; 0xba
 800182a:	d10f      	bne.n	800184c <ST7565_DrawChar+0x1b0>
				// 166 эллемент  ( символ є )
				b = Font->data[166 * Font->FontHeight + i];
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	785b      	ldrb	r3, [r3, #1]
 8001836:	4619      	mov	r1, r3
 8001838:	23a6      	movs	r3, #166	; 0xa6
 800183a:	fb03 f101 	mul.w	r1, r3, r1
 800183e:	8bfb      	ldrh	r3, [r7, #30]
 8001840:	440b      	add	r3, r1
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	837b      	strh	r3, [r7, #26]
 800184a:	e011      	b.n	8001870 <ST7565_DrawChar+0x1d4>
			} else if (ch == 191) {	// 168 символ по ASCII - ї
 800184c:	7afb      	ldrb	r3, [r7, #11]
 800184e:	2bbf      	cmp	r3, #191	; 0xbf
 8001850:	d10e      	bne.n	8001870 <ST7565_DrawChar+0x1d4>
				// 167 эллемент ( символ ї )
				b = Font->data[167 * Font->FontHeight + i];
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	785b      	ldrb	r3, [r3, #1]
 800185c:	4619      	mov	r1, r3
 800185e:	23a7      	movs	r3, #167	; 0xa7
 8001860:	fb03 f101 	mul.w	r1, r3, r1
 8001864:	8bfb      	ldrh	r3, [r7, #30]
 8001866:	440b      	add	r3, r1
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	4413      	add	r3, r2
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	837b      	strh	r3, [r7, #26]
			}
			//-----------------------------------------------------------------------------
			
			for (j = 0; j < Font->FontWidth; j++) {
 8001870:	2300      	movs	r3, #0
 8001872:	83bb      	strh	r3, [r7, #28]
 8001874:	e071      	b.n	800195a <ST7565_DrawChar+0x2be>
				if ((b << j) & 0x8000) {
 8001876:	8b7a      	ldrh	r2, [r7, #26]
 8001878:	8bbb      	ldrh	r3, [r7, #28]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d02d      	beq.n	80018e2 <ST7565_DrawChar+0x246>
					for (yy = 0; yy < multiplier; yy++){
 8001886:	2300      	movs	r3, #0
 8001888:	827b      	strh	r3, [r7, #18]
 800188a:	e023      	b.n	80018d4 <ST7565_DrawChar+0x238>
						for (xx = 0; xx < multiplier; xx++){
 800188c:	2300      	movs	r3, #0
 800188e:	82bb      	strh	r3, [r7, #20]
 8001890:	e014      	b.n	80018bc <ST7565_DrawChar+0x220>
							ST7565_Draw_pixel(X + xx, Y + yy, color);
 8001892:	8b3a      	ldrh	r2, [r7, #24]
 8001894:	8abb      	ldrh	r3, [r7, #20]
 8001896:	4413      	add	r3, r2
 8001898:	b29b      	uxth	r3, r3
 800189a:	b218      	sxth	r0, r3
 800189c:	8afa      	ldrh	r2, [r7, #22]
 800189e:	8a7b      	ldrh	r3, [r7, #18]
 80018a0:	4413      	add	r3, r2
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80018aa:	4619      	mov	r1, r3
 80018ac:	f7ff fe60 	bl	8001570 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 80018b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	3301      	adds	r3, #1
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	82bb      	strh	r3, [r7, #20]
 80018bc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80018c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018c4:	429a      	cmp	r2, r3
 80018c6:	dbe4      	blt.n	8001892 <ST7565_DrawChar+0x1f6>
					for (yy = 0; yy < multiplier; yy++){
 80018c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	3301      	adds	r3, #1
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	827b      	strh	r3, [r7, #18]
 80018d4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80018d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018dc:	429a      	cmp	r2, r3
 80018de:	dbd5      	blt.n	800188c <ST7565_DrawChar+0x1f0>
 80018e0:	e031      	b.n	8001946 <ST7565_DrawChar+0x2aa>
						}
					}
				} else {// если фон очищать то оставляем если чтоб фон оставался старый то коментируем эту часть -------------
					for (yy = 0; yy < multiplier; yy++){
 80018e2:	2300      	movs	r3, #0
 80018e4:	827b      	strh	r3, [r7, #18]
 80018e6:	e028      	b.n	800193a <ST7565_DrawChar+0x29e>
						for (xx = 0; xx < multiplier; xx++){
 80018e8:	2300      	movs	r3, #0
 80018ea:	82bb      	strh	r3, [r7, #20]
 80018ec:	e019      	b.n	8001922 <ST7565_DrawChar+0x286>
							ST7565_Draw_pixel(X + xx, Y + yy, !color);
 80018ee:	8b3a      	ldrh	r2, [r7, #24]
 80018f0:	8abb      	ldrh	r3, [r7, #20]
 80018f2:	4413      	add	r3, r2
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	b218      	sxth	r0, r3
 80018f8:	8afa      	ldrh	r2, [r7, #22]
 80018fa:	8a7b      	ldrh	r3, [r7, #18]
 80018fc:	4413      	add	r3, r2
 80018fe:	b29b      	uxth	r3, r3
 8001900:	b219      	sxth	r1, r3
 8001902:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001906:	2b00      	cmp	r3, #0
 8001908:	bf0c      	ite	eq
 800190a:	2301      	moveq	r3, #1
 800190c:	2300      	movne	r3, #0
 800190e:	b2db      	uxtb	r3, r3
 8001910:	461a      	mov	r2, r3
 8001912:	f7ff fe2d 	bl	8001570 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 8001916:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800191a:	b29b      	uxth	r3, r3
 800191c:	3301      	adds	r3, #1
 800191e:	b29b      	uxth	r3, r3
 8001920:	82bb      	strh	r3, [r7, #20]
 8001922:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001926:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800192a:	429a      	cmp	r2, r3
 800192c:	dbdf      	blt.n	80018ee <ST7565_DrawChar+0x252>
					for (yy = 0; yy < multiplier; yy++){
 800192e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001932:	b29b      	uxth	r3, r3
 8001934:	3301      	adds	r3, #1
 8001936:	b29b      	uxth	r3, r3
 8001938:	827b      	strh	r3, [r7, #18]
 800193a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800193e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001942:	429a      	cmp	r2, r3
 8001944:	dbd0      	blt.n	80018e8 <ST7565_DrawChar+0x24c>
						}
					}
				}
				//----------------------------------------------------------------------------------------------------
				X += multiplier;
 8001946:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800194a:	b29a      	uxth	r2, r3
 800194c:	8b3b      	ldrh	r3, [r7, #24]
 800194e:	4413      	add	r3, r2
 8001950:	b29b      	uxth	r3, r3
 8001952:	833b      	strh	r3, [r7, #24]
			for (j = 0; j < Font->FontWidth; j++) {
 8001954:	8bbb      	ldrh	r3, [r7, #28]
 8001956:	3301      	adds	r3, #1
 8001958:	83bb      	strh	r3, [r7, #28]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b29b      	uxth	r3, r3
 8001960:	8bba      	ldrh	r2, [r7, #28]
 8001962:	429a      	cmp	r2, r3
 8001964:	d387      	bcc.n	8001876 <ST7565_DrawChar+0x1da>
			}
			X = x;
 8001966:	89fb      	ldrh	r3, [r7, #14]
 8001968:	833b      	strh	r3, [r7, #24]
			Y += multiplier;
 800196a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800196e:	b29a      	uxth	r2, r3
 8001970:	8afb      	ldrh	r3, [r7, #22]
 8001972:	4413      	add	r3, r2
 8001974:	b29b      	uxth	r3, r3
 8001976:	82fb      	strh	r3, [r7, #22]
		for (i = 0; i < Font->FontHeight; i++) {
 8001978:	8bfb      	ldrh	r3, [r7, #30]
 800197a:	3301      	adds	r3, #1
 800197c:	83fb      	strh	r3, [r7, #30]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	785b      	ldrb	r3, [r3, #1]
 8001982:	b29b      	uxth	r3, r3
 8001984:	8bfa      	ldrh	r2, [r7, #30]
 8001986:	429a      	cmp	r2, r3
 8001988:	f4ff aeaf 	bcc.w	80016ea <ST7565_DrawChar+0x4e>
		}
		
	}
}
 800198c:	bf00      	nop
 800198e:	3720      	adds	r7, #32
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <ST7565_Print>:
 * @brief	 ( описание ):  функция записывает строку в буфер кадра ( поддерживает кириллицу ( в том числе и Укр. язык) и латиницу
 * @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
 * @return  ( возвращает ):
*******************************************************************************/
void ST7565_Print(int16_t x, int16_t y, char *str, FontDef_t *Font, uint8_t multiplier, uint8_t color)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af02      	add	r7, sp, #8
 800199a:	60ba      	str	r2, [r7, #8]
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	4603      	mov	r3, r0
 80019a0:	81fb      	strh	r3, [r7, #14]
 80019a2:	460b      	mov	r3, r1
 80019a4:	81bb      	strh	r3, [r7, #12]
unsigned char buff_char;
uint16_t len = strlen(str);
 80019a6:	68b8      	ldr	r0, [r7, #8]
 80019a8:	f7fe fc1c 	bl	80001e4 <strlen>
 80019ac:	4603      	mov	r3, r0
 80019ae:	82bb      	strh	r3, [r7, #20]

	if (multiplier < 1) multiplier = 1;
 80019b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f040 809c 	bne.w	8001af2 <ST7565_Print+0x15e>
 80019ba:	2301      	movs	r3, #1
 80019bc:	f887 3020 	strb.w	r3, [r7, #32]
	
	while (len--) {
 80019c0:	e097      	b.n	8001af2 <ST7565_Print+0x15e>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ) {	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2bbf      	cmp	r3, #191	; 0xbf
 80019c8:	d974      	bls.n	8001ab4 <ST7565_Print+0x120>
			// проверяем какой именно байт первый 0xD0 либо 0xD1
			switch ((uint8_t)*str) {
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2bd0      	cmp	r3, #208	; 0xd0
 80019d0:	d002      	beq.n	80019d8 <ST7565_Print+0x44>
 80019d2:	2bd1      	cmp	r3, #209	; 0xd1
 80019d4:	d02c      	beq.n	8001a30 <ST7565_Print+0x9c>
 80019d6:	e05b      	b.n	8001a90 <ST7565_Print+0xfc>
				case 0xD0:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	3301      	adds	r3, #1
 80019dc:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b81      	cmp	r3, #129	; 0x81
 80019e4:	d102      	bne.n	80019ec <ST7565_Print+0x58>
 80019e6:	23a8      	movs	r3, #168	; 0xa8
 80019e8:	75fb      	strb	r3, [r7, #23]
 80019ea:	e051      	b.n	8001a90 <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF) { buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b8f      	cmp	r3, #143	; 0x8f
 80019f2:	d908      	bls.n	8001a06 <ST7565_Print+0x72>
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2bbf      	cmp	r3, #191	; 0xbf
 80019fa:	d804      	bhi.n	8001a06 <ST7565_Print+0x72>
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	3330      	adds	r3, #48	; 0x30
 8001a02:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 8001a04:	e041      	b.n	8001a8a <ST7565_Print+0xf6>
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b84      	cmp	r3, #132	; 0x84
 8001a0c:	d102      	bne.n	8001a14 <ST7565_Print+0x80>
 8001a0e:	23aa      	movs	r3, #170	; 0xaa
 8001a10:	75fb      	strb	r3, [r7, #23]
 8001a12:	e03d      	b.n	8001a90 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b86      	cmp	r3, #134	; 0x86
 8001a1a:	d102      	bne.n	8001a22 <ST7565_Print+0x8e>
 8001a1c:	23b2      	movs	r3, #178	; 0xb2
 8001a1e:	75fb      	strb	r3, [r7, #23]
 8001a20:	e036      	b.n	8001a90 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b87      	cmp	r3, #135	; 0x87
 8001a28:	d12f      	bne.n	8001a8a <ST7565_Print+0xf6>
 8001a2a:	23af      	movs	r3, #175	; 0xaf
 8001a2c:	75fb      	strb	r3, [r7, #23]
 8001a2e:	e02f      	b.n	8001a90 <ST7565_Print+0xfc>
				//}
				case 0xD1:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	3301      	adds	r3, #1
 8001a34:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b91      	cmp	r3, #145	; 0x91
 8001a3c:	d102      	bne.n	8001a44 <ST7565_Print+0xb0>
 8001a3e:	23b8      	movs	r3, #184	; 0xb8
 8001a40:	75fb      	strb	r3, [r7, #23]
 8001a42:	e025      	b.n	8001a90 <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F) { buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	b25b      	sxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	da08      	bge.n	8001a60 <ST7565_Print+0xcc>
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b8f      	cmp	r3, #143	; 0x8f
 8001a54:	d804      	bhi.n	8001a60 <ST7565_Print+0xcc>
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	3370      	adds	r3, #112	; 0x70
 8001a5c:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 8001a5e:	e016      	b.n	8001a8e <ST7565_Print+0xfa>
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b94      	cmp	r3, #148	; 0x94
 8001a66:	d102      	bne.n	8001a6e <ST7565_Print+0xda>
 8001a68:	23ba      	movs	r3, #186	; 0xba
 8001a6a:	75fb      	strb	r3, [r7, #23]
 8001a6c:	e010      	b.n	8001a90 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b96      	cmp	r3, #150	; 0x96
 8001a74:	d102      	bne.n	8001a7c <ST7565_Print+0xe8>
 8001a76:	23b3      	movs	r3, #179	; 0xb3
 8001a78:	75fb      	strb	r3, [r7, #23]
 8001a7a:	e009      	b.n	8001a90 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b97      	cmp	r3, #151	; 0x97
 8001a82:	d104      	bne.n	8001a8e <ST7565_Print+0xfa>
 8001a84:	23bf      	movs	r3, #191	; 0xbf
 8001a86:	75fb      	strb	r3, [r7, #23]
 8001a88:	e002      	b.n	8001a90 <ST7565_Print+0xfc>
				break;
 8001a8a:	bf00      	nop
 8001a8c:	e000      	b.n	8001a90 <ST7565_Print+0xfc>
				break;
 8001a8e:	bf00      	nop
				//}
			}
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 8001a90:	8abb      	ldrh	r3, [r7, #20]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	82bb      	strh	r3, [r7, #20]
			ST7565_DrawChar(x, y, buff_char, Font, multiplier, color);
 8001a96:	7dfa      	ldrb	r2, [r7, #23]
 8001a98:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001a9c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001aa0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f7ff fdf5 	bl	800169c <ST7565_DrawChar>
 8001ab2:	e00e      	b.n	8001ad2 <ST7565_Print+0x13e>
		} else {
			ST7565_DrawChar(x, y, *str, Font, multiplier, color);
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001abc:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001ac0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f7ff fde5 	bl	800169c <ST7565_DrawChar>
		}
		
		x += (Font->FontWidth * multiplier);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	fb12 f303 	smulbb	r3, r2, r3
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	89fb      	ldrh	r3, [r7, #14]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	81fb      	strh	r3, [r7, #14]
		str++;
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	3301      	adds	r3, #1
 8001af0:	60bb      	str	r3, [r7, #8]
	while (len--) {
 8001af2:	8abb      	ldrh	r3, [r7, #20]
 8001af4:	1e5a      	subs	r2, r3, #1
 8001af6:	82ba      	strh	r2, [r7, #20]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f47f af62 	bne.w	80019c2 <ST7565_Print+0x2e>
	}
}
 8001afe:	bf00      	nop
 8001b00:	bf00      	nop
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <ST7565_DrawLine>:
	* @param	( параметры ):	координаты начальной точки и конечной и цвет 0 или 1
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint8_t c)
{
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b087      	sub	sp, #28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4604      	mov	r4, r0
 8001b10:	4608      	mov	r0, r1
 8001b12:	4611      	mov	r1, r2
 8001b14:	461a      	mov	r2, r3
 8001b16:	4623      	mov	r3, r4
 8001b18:	80fb      	strh	r3, [r7, #6]
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	80bb      	strh	r3, [r7, #4]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	807b      	strh	r3, [r7, #2]
 8001b22:	4613      	mov	r3, r2
 8001b24:	803b      	strh	r3, [r7, #0]
int16_t dx, dy, sx, sy, err, e2, i, tmp;
	
	/* Check for overflow */
	if (x0 >= SCREEN_WIDTH)  x0 = SCREEN_WIDTH  - 1;
 8001b26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b2a:	2b7f      	cmp	r3, #127	; 0x7f
 8001b2c:	dd01      	ble.n	8001b32 <ST7565_DrawLine+0x2a>
 8001b2e:	237f      	movs	r3, #127	; 0x7f
 8001b30:	80fb      	strh	r3, [r7, #6]
	if (x1 >= SCREEN_WIDTH)  x1 = SCREEN_WIDTH  - 1;
 8001b32:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b36:	2b7f      	cmp	r3, #127	; 0x7f
 8001b38:	dd01      	ble.n	8001b3e <ST7565_DrawLine+0x36>
 8001b3a:	237f      	movs	r3, #127	; 0x7f
 8001b3c:	807b      	strh	r3, [r7, #2]
	if (y0 >= SCREEN_HEIGHT) y0 = SCREEN_HEIGHT - 1;
 8001b3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b42:	2b3f      	cmp	r3, #63	; 0x3f
 8001b44:	dd01      	ble.n	8001b4a <ST7565_DrawLine+0x42>
 8001b46:	233f      	movs	r3, #63	; 0x3f
 8001b48:	80bb      	strh	r3, [r7, #4]
	if (y1 >= SCREEN_HEIGHT) y1 = SCREEN_HEIGHT - 1;
 8001b4a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b4e:	2b3f      	cmp	r3, #63	; 0x3f
 8001b50:	dd01      	ble.n	8001b56 <ST7565_DrawLine+0x4e>
 8001b52:	233f      	movs	r3, #63	; 0x3f
 8001b54:	803b      	strh	r3, [r7, #0]
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001b56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	da05      	bge.n	8001b6e <ST7565_DrawLine+0x66>
 8001b62:	887a      	ldrh	r2, [r7, #2]
 8001b64:	88fb      	ldrh	r3, [r7, #6]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	e004      	b.n	8001b78 <ST7565_DrawLine+0x70>
 8001b6e:	88fa      	ldrh	r2, [r7, #6]
 8001b70:	887b      	ldrh	r3, [r7, #2]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001b7a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b7e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	da05      	bge.n	8001b92 <ST7565_DrawLine+0x8a>
 8001b86:	883a      	ldrh	r2, [r7, #0]
 8001b88:	88bb      	ldrh	r3, [r7, #4]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	b21b      	sxth	r3, r3
 8001b90:	e004      	b.n	8001b9c <ST7565_DrawLine+0x94>
 8001b92:	88ba      	ldrh	r2, [r7, #4]
 8001b94:	883b      	ldrh	r3, [r7, #0]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001b9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ba2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	da01      	bge.n	8001bae <ST7565_DrawLine+0xa6>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e001      	b.n	8001bb2 <ST7565_DrawLine+0xaa>
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bb2:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001bb4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001bb8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	da01      	bge.n	8001bc4 <ST7565_DrawLine+0xbc>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e001      	b.n	8001bc8 <ST7565_DrawLine+0xc0>
 8001bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bc8:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001bca:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001bce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	dd06      	ble.n	8001be4 <ST7565_DrawLine+0xdc>
 8001bd6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bda:	0fda      	lsrs	r2, r3, #31
 8001bdc:	4413      	add	r3, r2
 8001bde:	105b      	asrs	r3, r3, #1
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	e006      	b.n	8001bf2 <ST7565_DrawLine+0xea>
 8001be4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001be8:	0fda      	lsrs	r2, r3, #31
 8001bea:	4413      	add	r3, r2
 8001bec:	105b      	asrs	r3, r3, #1
 8001bee:	425b      	negs	r3, r3
 8001bf0:	b21b      	sxth	r3, r3
 8001bf2:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001bf4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d130      	bne.n	8001c5e <ST7565_DrawLine+0x156>
		if (y1 < y0) {
 8001bfc:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001c00:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	da05      	bge.n	8001c14 <ST7565_DrawLine+0x10c>
			tmp = y1;
 8001c08:	883b      	ldrh	r3, [r7, #0]
 8001c0a:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001c0c:	88bb      	ldrh	r3, [r7, #4]
 8001c0e:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001c10:	893b      	ldrh	r3, [r7, #8]
 8001c12:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001c14:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001c18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	da05      	bge.n	8001c2c <ST7565_DrawLine+0x124>
			tmp = x1;
 8001c20:	887b      	ldrh	r3, [r7, #2]
 8001c22:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001c28:	893b      	ldrh	r3, [r7, #8]
 8001c2a:	80fb      	strh	r3, [r7, #6]
		}
		
		// Vertical line
		for (i = y0; i <= y1; i++) ST7565_Draw_pixel(x0, i, c);
 8001c2c:	88bb      	ldrh	r3, [r7, #4]
 8001c2e:	82bb      	strh	r3, [r7, #20]
 8001c30:	e00e      	b.n	8001c50 <ST7565_DrawLine+0x148>
 8001c32:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001c36:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8001c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fc96 	bl	8001570 <ST7565_Draw_pixel>
 8001c44:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	82bb      	strh	r3, [r7, #20]
 8001c50:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001c54:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	ddea      	ble.n	8001c32 <ST7565_DrawLine+0x12a>
		
		return;
 8001c5c:	e06e      	b.n	8001d3c <ST7565_DrawLine+0x234>
	}
	
	if (dy == 0) {
 8001c5e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d130      	bne.n	8001cc8 <ST7565_DrawLine+0x1c0>
		if (y1 < y0) {
 8001c66:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001c6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	da05      	bge.n	8001c7e <ST7565_DrawLine+0x176>
			tmp = y1;
 8001c72:	883b      	ldrh	r3, [r7, #0]
 8001c74:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001c76:	88bb      	ldrh	r3, [r7, #4]
 8001c78:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001c7a:	893b      	ldrh	r3, [r7, #8]
 8001c7c:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001c7e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	da05      	bge.n	8001c96 <ST7565_DrawLine+0x18e>
			tmp = x1;
 8001c8a:	887b      	ldrh	r3, [r7, #2]
 8001c8c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001c8e:	88fb      	ldrh	r3, [r7, #6]
 8001c90:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001c92:	893b      	ldrh	r3, [r7, #8]
 8001c94:	80fb      	strh	r3, [r7, #6]
		}
		
		// Horizontal line
		for (i = x0; i <= x1; i++) ST7565_Draw_pixel(i, y0, c);
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	82bb      	strh	r3, [r7, #20]
 8001c9a:	e00e      	b.n	8001cba <ST7565_DrawLine+0x1b2>
 8001c9c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001ca0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001ca4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fc61 	bl	8001570 <ST7565_Draw_pixel>
 8001cae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	82bb      	strh	r3, [r7, #20]
 8001cba:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001cbe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	ddea      	ble.n	8001c9c <ST7565_DrawLine+0x194>
		
		return;
 8001cc6:	e039      	b.n	8001d3c <ST7565_DrawLine+0x234>
	}
	
	while (1) {
		ST7565_Draw_pixel(x0, y0, c);
 8001cc8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001ccc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001cd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fc4b 	bl	8001570 <ST7565_Draw_pixel>
		if (x0 == x1 && y0 == y1) break;
 8001cda:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001cde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d105      	bne.n	8001cf2 <ST7565_DrawLine+0x1ea>
 8001ce6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001cea:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d023      	beq.n	8001d3a <ST7565_DrawLine+0x232>

		e2 = err; 
 8001cf2:	8afb      	ldrh	r3, [r7, #22]
 8001cf4:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001cf6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001cfa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001cfe:	425b      	negs	r3, r3
 8001d00:	429a      	cmp	r2, r3
 8001d02:	dd09      	ble.n	8001d18 <ST7565_DrawLine+0x210>
			err -= dy;
 8001d04:	8afa      	ldrh	r2, [r7, #22]
 8001d06:	8a3b      	ldrh	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001d0e:	88fa      	ldrh	r2, [r7, #6]
 8001d10:	89fb      	ldrh	r3, [r7, #14]
 8001d12:	4413      	add	r3, r2
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001d18:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001d1c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	dad1      	bge.n	8001cc8 <ST7565_DrawLine+0x1c0>
			err += dx;
 8001d24:	8afa      	ldrh	r2, [r7, #22]
 8001d26:	8a7b      	ldrh	r3, [r7, #18]
 8001d28:	4413      	add	r3, r2
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001d2e:	88ba      	ldrh	r2, [r7, #4]
 8001d30:	89bb      	ldrh	r3, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	80bb      	strh	r3, [r7, #4]
		ST7565_Draw_pixel(x0, y0, c);
 8001d38:	e7c6      	b.n	8001cc8 <ST7565_DrawLine+0x1c0>
		if (x0 == x1 && y0 == y1) break;
 8001d3a:	bf00      	nop
		} 
	}
}
 8001d3c:	371c      	adds	r7, #28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd90      	pop	{r4, r7, pc}

08001d42 <ST7565_DrawRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001d42:	b590      	push	{r4, r7, lr}
 8001d44:	b085      	sub	sp, #20
 8001d46:	af02      	add	r7, sp, #8
 8001d48:	4604      	mov	r4, r0
 8001d4a:	4608      	mov	r0, r1
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4623      	mov	r3, r4
 8001d52:	80fb      	strh	r3, [r7, #6]
 8001d54:	4603      	mov	r3, r0
 8001d56:	80bb      	strh	r3, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	803b      	strh	r3, [r7, #0]
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001d60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d64:	2b7f      	cmp	r3, #127	; 0x7f
 8001d66:	dc6a      	bgt.n	8001e3e <ST7565_DrawRectangle+0xfc>
 8001d68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d6c:	2b3f      	cmp	r3, #63	; 0x3f
 8001d6e:	dc66      	bgt.n	8001e3e <ST7565_DrawRectangle+0xfc>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001d70:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d78:	4413      	add	r3, r2
 8001d7a:	2b7f      	cmp	r3, #127	; 0x7f
 8001d7c:	dd04      	ble.n	8001d88 <ST7565_DrawRectangle+0x46>
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001d88:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001d8c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001d90:	4413      	add	r3, r2
 8001d92:	2b3f      	cmp	r3, #63	; 0x3f
 8001d94:	dd04      	ble.n	8001da0 <ST7565_DrawRectangle+0x5e>
 8001d96:	88bb      	ldrh	r3, [r7, #4]
 8001d98:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	803b      	strh	r3, [r7, #0]
	
	// Draw 4 lines
	ST7565_DrawLine(x, y, x + w, y, c);         // Top line
 8001da0:	88fa      	ldrh	r2, [r7, #6]
 8001da2:	887b      	ldrh	r3, [r7, #2]
 8001da4:	4413      	add	r3, r2
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b21a      	sxth	r2, r3
 8001daa:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001dae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001db2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001db6:	7e3b      	ldrb	r3, [r7, #24]
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	4623      	mov	r3, r4
 8001dbc:	f7ff fea4 	bl	8001b08 <ST7565_DrawLine>
	ST7565_DrawLine(x, y + h, x + w, y + h, c); // Bottom line
 8001dc0:	88ba      	ldrh	r2, [r7, #4]
 8001dc2:	883b      	ldrh	r3, [r7, #0]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	b219      	sxth	r1, r3
 8001dca:	88fa      	ldrh	r2, [r7, #6]
 8001dcc:	887b      	ldrh	r3, [r7, #2]
 8001dce:	4413      	add	r3, r2
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	b21c      	sxth	r4, r3
 8001dd4:	88ba      	ldrh	r2, [r7, #4]
 8001dd6:	883b      	ldrh	r3, [r7, #0]
 8001dd8:	4413      	add	r3, r2
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	b21a      	sxth	r2, r3
 8001dde:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001de2:	7e3b      	ldrb	r3, [r7, #24]
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	4613      	mov	r3, r2
 8001de8:	4622      	mov	r2, r4
 8001dea:	f7ff fe8d 	bl	8001b08 <ST7565_DrawLine>
	ST7565_DrawLine(x, y, x, y + h, c);         // Left line
 8001dee:	88ba      	ldrh	r2, [r7, #4]
 8001df0:	883b      	ldrh	r3, [r7, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	b21c      	sxth	r4, r3
 8001df8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001dfc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001e00:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001e04:	7e3b      	ldrb	r3, [r7, #24]
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	4623      	mov	r3, r4
 8001e0a:	f7ff fe7d 	bl	8001b08 <ST7565_DrawLine>
	ST7565_DrawLine(x + w, y, x + w, y + h, c); // Right line
 8001e0e:	88fa      	ldrh	r2, [r7, #6]
 8001e10:	887b      	ldrh	r3, [r7, #2]
 8001e12:	4413      	add	r3, r2
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	b218      	sxth	r0, r3
 8001e18:	88fa      	ldrh	r2, [r7, #6]
 8001e1a:	887b      	ldrh	r3, [r7, #2]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	b21c      	sxth	r4, r3
 8001e22:	88ba      	ldrh	r2, [r7, #4]
 8001e24:	883b      	ldrh	r3, [r7, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	b21a      	sxth	r2, r3
 8001e2c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001e30:	7e3b      	ldrb	r3, [r7, #24]
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	4613      	mov	r3, r2
 8001e36:	4622      	mov	r2, r4
 8001e38:	f7ff fe66 	bl	8001b08 <ST7565_DrawLine>
 8001e3c:	e000      	b.n	8001e40 <ST7565_DrawRectangle+0xfe>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001e3e:	bf00      	nop
}
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd90      	pop	{r4, r7, pc}

08001e46 <ST7565_DrawFilledRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawFilledRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001e46:	b590      	push	{r4, r7, lr}
 8001e48:	b087      	sub	sp, #28
 8001e4a:	af02      	add	r7, sp, #8
 8001e4c:	4604      	mov	r4, r0
 8001e4e:	4608      	mov	r0, r1
 8001e50:	4611      	mov	r1, r2
 8001e52:	461a      	mov	r2, r3
 8001e54:	4623      	mov	r3, r4
 8001e56:	80fb      	strh	r3, [r7, #6]
 8001e58:	4603      	mov	r3, r0
 8001e5a:	80bb      	strh	r3, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]
 8001e60:	4613      	mov	r3, r2
 8001e62:	803b      	strh	r3, [r7, #0]
uint8_t i;
	
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001e64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e68:	2b7f      	cmp	r3, #127	; 0x7f
 8001e6a:	dc41      	bgt.n	8001ef0 <ST7565_DrawFilledRectangle+0xaa>
 8001e6c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e70:	2b3f      	cmp	r3, #63	; 0x3f
 8001e72:	dc3d      	bgt.n	8001ef0 <ST7565_DrawFilledRectangle+0xaa>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001e74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	2b7f      	cmp	r3, #127	; 0x7f
 8001e80:	dd04      	ble.n	8001e8c <ST7565_DrawFilledRectangle+0x46>
 8001e82:	88fb      	ldrh	r3, [r7, #6]
 8001e84:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001e8c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001e90:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001e94:	4413      	add	r3, r2
 8001e96:	2b3f      	cmp	r3, #63	; 0x3f
 8001e98:	dd04      	ble.n	8001ea4 <ST7565_DrawFilledRectangle+0x5e>
 8001e9a:	88bb      	ldrh	r3, [r7, #4]
 8001e9c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	803b      	strh	r3, [r7, #0]
	
	for (i = 0; i <= h; i++) ST7565_DrawLine(x, y + i, x + w, y + i, c);
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	73fb      	strb	r3, [r7, #15]
 8001ea8:	e01c      	b.n	8001ee4 <ST7565_DrawFilledRectangle+0x9e>
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	88bb      	ldrh	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	b219      	sxth	r1, r3
 8001eb6:	88fa      	ldrh	r2, [r7, #6]
 8001eb8:	887b      	ldrh	r3, [r7, #2]
 8001eba:	4413      	add	r3, r2
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	b21c      	sxth	r4, r3
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	88bb      	ldrh	r3, [r7, #4]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	b21a      	sxth	r2, r3
 8001ecc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001ed0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	4622      	mov	r2, r4
 8001eda:	f7ff fe15 	bl	8001b08 <ST7565_DrawLine>
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	dddd      	ble.n	8001eaa <ST7565_DrawFilledRectangle+0x64>
 8001eee:	e000      	b.n	8001ef2 <ST7565_DrawFilledRectangle+0xac>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001ef0:	bf00      	nop
}
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd90      	pop	{r4, r7, pc}

08001ef8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001efc:	f3bf 8f4f 	dsb	sy
}
 8001f00:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <__NVIC_SystemReset+0x24>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001f0a:	4904      	ldr	r1, [pc, #16]	; (8001f1c <__NVIC_SystemReset+0x24>)
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <__NVIC_SystemReset+0x28>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f12:	f3bf 8f4f 	dsb	sy
}
 8001f16:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001f18:	bf00      	nop
 8001f1a:	e7fd      	b.n	8001f18 <__NVIC_SystemReset+0x20>
 8001f1c:	e000ed00 	.word	0xe000ed00
 8001f20:	05fa0004 	.word	0x05fa0004

08001f24 <showCfg>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//------------------------------------------------------------------------------------------
void showCfg()
{
 8001f24:	b5b0      	push	{r4, r5, r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af04      	add	r7, sp, #16
	*strf = '\0';
 8001f2a:	4b20      	ldr	r3, [pc, #128]	; (8001fac <showCfg+0x88>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_LIST; i++) {
 8001f30:	2300      	movs	r3, #0
 8001f32:	607b      	str	r3, [r7, #4]
 8001f34:	e02d      	b.n	8001f92 <showCfg+0x6e>
		sprintf(strf+strlen(strf), "%u:%.1f:%s\r\n", list[i].band, list[i].freq, list[i].name);
 8001f36:	481d      	ldr	r0, [pc, #116]	; (8001fac <showCfg+0x88>)
 8001f38:	f7fe f954 	bl	80001e4 <strlen>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	4a1b      	ldr	r2, [pc, #108]	; (8001fac <showCfg+0x88>)
 8001f40:	189c      	adds	r4, r3, r2
 8001f42:	491b      	ldr	r1, [pc, #108]	; (8001fb0 <showCfg+0x8c>)
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	461d      	mov	r5, r3
 8001f54:	4916      	ldr	r1, [pc, #88]	; (8001fb0 <showCfg+0x8c>)
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fafe 	bl	8000568 <__aeabi_f2d>
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4a0e      	ldr	r2, [pc, #56]	; (8001fb0 <showCfg+0x8c>)
 8001f78:	4413      	add	r3, r2
 8001f7a:	3305      	adds	r3, #5
 8001f7c:	9302      	str	r3, [sp, #8]
 8001f7e:	e9cd 0100 	strd	r0, r1, [sp]
 8001f82:	462a      	mov	r2, r5
 8001f84:	490b      	ldr	r1, [pc, #44]	; (8001fb4 <showCfg+0x90>)
 8001f86:	4620      	mov	r0, r4
 8001f88:	f012 fdc2 	bl	8014b10 <siprintf>
	for (int i = 0; i < MAX_LIST; i++) {
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b19      	cmp	r3, #25
 8001f96:	ddce      	ble.n	8001f36 <showCfg+0x12>
	}
	Report(0, "%s", strf);
 8001f98:	4a04      	ldr	r2, [pc, #16]	; (8001fac <showCfg+0x88>)
 8001f9a:	4907      	ldr	r1, [pc, #28]	; (8001fb8 <showCfg+0x94>)
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f001 f90d 	bl	80031bc <Report>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200017f4 	.word	0x200017f4
 8001fb0:	2000305c 	.word	0x2000305c
 8001fb4:	080188c4 	.word	0x080188c4
 8001fb8:	080188d4 	.word	0x080188d4

08001fbc <errName>:
//------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------
static char *errName(uint16_t err)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	80fb      	strh	r3, [r7, #6]

	switch (err) {
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fcc:	d06b      	beq.n	80020a6 <errName+0xea>
 8001fce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fd2:	dc6a      	bgt.n	80020aa <errName+0xee>
 8001fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fd8:	d063      	beq.n	80020a2 <errName+0xe6>
 8001fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fde:	dc64      	bgt.n	80020aa <errName+0xee>
 8001fe0:	2b80      	cmp	r3, #128	; 0x80
 8001fe2:	d05c      	beq.n	800209e <errName+0xe2>
 8001fe4:	2b80      	cmp	r3, #128	; 0x80
 8001fe6:	dc60      	bgt.n	80020aa <errName+0xee>
 8001fe8:	2b20      	cmp	r3, #32
 8001fea:	dc47      	bgt.n	800207c <errName+0xc0>
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	dd5c      	ble.n	80020aa <errName+0xee>
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	2b1f      	cmp	r3, #31
 8001ff4:	d859      	bhi.n	80020aa <errName+0xee>
 8001ff6:	a201      	add	r2, pc, #4	; (adr r2, 8001ffc <errName+0x40>)
 8001ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffc:	08002083 	.word	0x08002083
 8002000:	08002087 	.word	0x08002087
 8002004:	080020ab 	.word	0x080020ab
 8002008:	0800208b 	.word	0x0800208b
 800200c:	080020ab 	.word	0x080020ab
 8002010:	080020ab 	.word	0x080020ab
 8002014:	080020ab 	.word	0x080020ab
 8002018:	0800208f 	.word	0x0800208f
 800201c:	080020ab 	.word	0x080020ab
 8002020:	080020ab 	.word	0x080020ab
 8002024:	080020ab 	.word	0x080020ab
 8002028:	080020ab 	.word	0x080020ab
 800202c:	080020ab 	.word	0x080020ab
 8002030:	080020ab 	.word	0x080020ab
 8002034:	080020ab 	.word	0x080020ab
 8002038:	08002093 	.word	0x08002093
 800203c:	080020ab 	.word	0x080020ab
 8002040:	080020ab 	.word	0x080020ab
 8002044:	080020ab 	.word	0x080020ab
 8002048:	080020ab 	.word	0x080020ab
 800204c:	080020ab 	.word	0x080020ab
 8002050:	080020ab 	.word	0x080020ab
 8002054:	080020ab 	.word	0x080020ab
 8002058:	080020ab 	.word	0x080020ab
 800205c:	080020ab 	.word	0x080020ab
 8002060:	080020ab 	.word	0x080020ab
 8002064:	080020ab 	.word	0x080020ab
 8002068:	080020ab 	.word	0x080020ab
 800206c:	080020ab 	.word	0x080020ab
 8002070:	080020ab 	.word	0x080020ab
 8002074:	080020ab 	.word	0x080020ab
 8002078:	08002097 	.word	0x08002097
 800207c:	2b40      	cmp	r3, #64	; 0x40
 800207e:	d00c      	beq.n	800209a <errName+0xde>
 8002080:	e013      	b.n	80020aa <errName+0xee>
		case devTIK:// = 1,
			return "devTIK";
 8002082:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <errName+0xfc>)
 8002084:	e012      	b.n	80020ac <errName+0xf0>
		case devUART:// = 2,
			return "devUART";
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <errName+0x100>)
 8002088:	e010      	b.n	80020ac <errName+0xf0>
		case devMEM://= 4,
			return "devMEM";
 800208a:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <errName+0x104>)
 800208c:	e00e      	b.n	80020ac <errName+0xf0>
		case devRTC:// = 8,
			return "devRTC";
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <errName+0x108>)
 8002090:	e00c      	b.n	80020ac <errName+0xf0>
		case devEVT:// = 0x10,
			return "devEVT";
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <errName+0x10c>)
 8002094:	e00a      	b.n	80020ac <errName+0xf0>
		case devSYS:// = 0x20,
			return "devSYS";
 8002096:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <errName+0x110>)
 8002098:	e008      	b.n	80020ac <errName+0xf0>
		case devSPI:// = 0x40,
			return "devSPI";
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <errName+0x114>)
 800209c:	e006      	b.n	80020ac <errName+0xf0>
		case devLCD:// = 0x80,
			return "devLCD";
 800209e:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <errName+0x118>)
 80020a0:	e004      	b.n	80020ac <errName+0xf0>
		case devRDA:// = 0x100,
			return "devRDA";
 80020a2:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <errName+0x11c>)
 80020a4:	e002      	b.n	80020ac <errName+0xf0>
		case devFS:// = 0x200
			return "devFS";
 80020a6:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <errName+0x120>)
 80020a8:	e000      	b.n	80020ac <errName+0xf0>
		case devQUE:// = 0x800
			return "devQUE";
#endif
	}

	return "???";
 80020aa:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <errName+0x124>)
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	080188d8 	.word	0x080188d8
 80020bc:	080188e0 	.word	0x080188e0
 80020c0:	080188e8 	.word	0x080188e8
 80020c4:	080188f0 	.word	0x080188f0
 80020c8:	080188f8 	.word	0x080188f8
 80020cc:	08018900 	.word	0x08018900
 80020d0:	08018908 	.word	0x08018908
 80020d4:	08018910 	.word	0x08018910
 80020d8:	08018918 	.word	0x08018918
 80020dc:	08018920 	.word	0x08018920
 80020e0:	080186f8 	.word	0x080186f8

080020e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020ea:	f006 f902 	bl	80082f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020ee:	f000 f8b3 	bl	8002258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020f2:	f000 fbb3 	bl	800285c <MX_GPIO_Init>
  MX_TIM4_Init();
 80020f6:	f000 fa19 	bl	800252c <MX_TIM4_Init>
  MX_DMA_Init();
 80020fa:	f000 fb55 	bl	80027a8 <MX_DMA_Init>
  MX_RTC_Init();
 80020fe:	f000 f93d 	bl	800237c <MX_RTC_Init>
  MX_USART2_UART_Init();
 8002102:	f000 faf1 	bl	80026e8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8002106:	f000 f9d3 	bl	80024b0 <MX_SPI2_Init>
  MX_SPI1_Init();
 800210a:	f000 f993 	bl	8002434 <MX_SPI1_Init>
  MX_I2C1_Init();
 800210e:	f000 f8f5 	bl	80022fc <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8002112:	f000 fb19 	bl	8002748 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8002116:	f000 fa57 	bl	80025c8 <MX_TIM6_Init>
  MX_TIM8_Init();
 800211a:	f000 fa8b 	bl	8002634 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */


    if (HAL_TIM_Base_Start_IT(tikPort) != HAL_OK) devError |= devTIK;
 800211e:	4b3c      	ldr	r3, [pc, #240]	; (8002210 <main+0x12c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f00b fe98 	bl	800de58 <HAL_TIM_Base_Start_IT>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d006      	beq.n	800213c <main+0x58>
 800212e:	4b39      	ldr	r3, [pc, #228]	; (8002214 <main+0x130>)
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	4b36      	ldr	r3, [pc, #216]	; (8002214 <main+0x130>)
 800213a:	801a      	strh	r2, [r3, #0]

    if (HAL_UART_Receive_IT(cmdPort, &rxByte, 1) != HAL_OK) devError |= devUART;
 800213c:	4b36      	ldr	r3, [pc, #216]	; (8002218 <main+0x134>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2201      	movs	r2, #1
 8002142:	4936      	ldr	r1, [pc, #216]	; (800221c <main+0x138>)
 8002144:	4618      	mov	r0, r3
 8002146:	f00c fca9 	bl	800ea9c <HAL_UART_Receive_IT>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d006      	beq.n	800215e <main+0x7a>
 8002150:	4b30      	ldr	r3, [pc, #192]	; (8002214 <main+0x130>)
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	f043 0302 	orr.w	r3, r3, #2
 8002158:	b29a      	uxth	r2, r3
 800215a:	4b2e      	ldr	r3, [pc, #184]	; (8002214 <main+0x130>)
 800215c:	801a      	strh	r2, [r3, #0]
#if defined(SET_BLE) || defined(SET_AUDIO)
    if (HAL_UART_Receive_IT(blePort, &rxbByte, 1) != HAL_OK) devError |= devBLE;
#endif

#ifdef SET_ENC
    HAL_TIM_Encoder_Start_IT(encPort, TIM_CHANNEL_ALL);
 800215e:	4b30      	ldr	r3, [pc, #192]	; (8002220 <main+0x13c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	213c      	movs	r1, #60	; 0x3c
 8002164:	4618      	mov	r0, r3
 8002166:	f00b ff8d 	bl	800e084 <HAL_TIM_Encoder_Start_IT>
    HAL_Delay(100);
 800216a:	2064      	movs	r0, #100	; 0x64
 800216c:	f006 f8fa 	bl	8008364 <HAL_Delay>
    lastEncoder = Encoder = encPort->Instance->CNT;//TIM8->CNT;
 8002170:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <main+0x13c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	4a2a      	ldr	r2, [pc, #168]	; (8002224 <main+0x140>)
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	4b29      	ldr	r3, [pc, #164]	; (8002224 <main+0x140>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a29      	ldr	r2, [pc, #164]	; (8002228 <main+0x144>)
 8002182:	6013      	str	r3, [r2, #0]
#endif


    for (int8_t i = 0; i < 4; i++) {
 8002184:	2300      	movs	r3, #0
 8002186:	71fb      	strb	r3, [r7, #7]
 8002188:	e011      	b.n	80021ae <main+0xca>
    	errLedOn(true);
 800218a:	2001      	movs	r0, #1
 800218c:	f000 fea2 	bl	8002ed4 <errLedOn>
    	HAL_Delay(100);
 8002190:	2064      	movs	r0, #100	; 0x64
 8002192:	f006 f8e7 	bl	8008364 <HAL_Delay>
    	errLedOn(false);
 8002196:	2000      	movs	r0, #0
 8002198:	f000 fe9c 	bl	8002ed4 <errLedOn>
    	HAL_Delay(100);
 800219c:	2064      	movs	r0, #100	; 0x64
 800219e:	f006 f8e1 	bl	8008364 <HAL_Delay>
    for (int8_t i = 0; i < 4; i++) {
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	71fb      	strb	r3, [r7, #7]
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	dde9      	ble.n	800218a <main+0xa6>
    }

    set_Date(epoch);
 80021b6:	4b1d      	ldr	r3, [pc, #116]	; (800222c <main+0x148>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 ff04 	bl	8002fc8 <set_Date>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80021c0:	f00e f88c 	bl	80102dc <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of itSem */
  itSemHandle = osSemaphoreNew(1, 1, &itSem_attributes);
 80021c4:	4a1a      	ldr	r2, [pc, #104]	; (8002230 <main+0x14c>)
 80021c6:	2101      	movs	r1, #1
 80021c8:	2001      	movs	r0, #1
 80021ca:	f00e f965 	bl	8010498 <osSemaphoreNew>
 80021ce:	4603      	mov	r3, r0
 80021d0:	4a18      	ldr	r2, [pc, #96]	; (8002234 <main+0x150>)
 80021d2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of evtQue */
  evtQueHandle = osMessageQueueNew (8, sizeof(rec_evt_t), &evtQue_attributes);
 80021d4:	4a18      	ldr	r2, [pc, #96]	; (8002238 <main+0x154>)
 80021d6:	2108      	movs	r1, #8
 80021d8:	2008      	movs	r0, #8
 80021da:	f00e fa7d 	bl	80106d8 <osMessageQueueNew>
 80021de:	4603      	mov	r3, r0
 80021e0:	4a16      	ldr	r2, [pc, #88]	; (800223c <main+0x158>)
 80021e2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(StartTask, NULL, &defTask_attributes);
 80021e4:	4a16      	ldr	r2, [pc, #88]	; (8002240 <main+0x15c>)
 80021e6:	2100      	movs	r1, #0
 80021e8:	4816      	ldr	r0, [pc, #88]	; (8002244 <main+0x160>)
 80021ea:	f00e f8c3 	bl	8010374 <osThreadNew>
 80021ee:	4603      	mov	r3, r0
 80021f0:	4a15      	ldr	r2, [pc, #84]	; (8002248 <main+0x164>)
 80021f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_Delay(250);
 80021f4:	20fa      	movs	r0, #250	; 0xfa
 80021f6:	f006 f8b5 	bl	8008364 <HAL_Delay>
  irdTaskHandle = osThreadNew(irdTask, NULL, &irdTask_attributes);
 80021fa:	4a14      	ldr	r2, [pc, #80]	; (800224c <main+0x168>)
 80021fc:	2100      	movs	r1, #0
 80021fe:	4814      	ldr	r0, [pc, #80]	; (8002250 <main+0x16c>)
 8002200:	f00e f8b8 	bl	8010374 <osThreadNew>
 8002204:	4603      	mov	r3, r0
 8002206:	4a13      	ldr	r2, [pc, #76]	; (8002254 <main+0x170>)
 8002208:	6013      	str	r3, [r2, #0]
  /* add events, ... */
  //osStat = osKernelStart();
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800220a:	f00e f88d 	bl	8010328 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800220e:	e7fe      	b.n	800220e <main+0x12a>
 8002210:	2000000c 	.word	0x2000000c
 8002214:	20001bf4 	.word	0x20001bf4
 8002218:	20000014 	.word	0x20000014
 800221c:	20001c08 	.word	0x20001c08
 8002220:	200001d4 	.word	0x200001d4
 8002224:	20003460 	.word	0x20003460
 8002228:	20003464 	.word	0x20003464
 800222c:	2000001c 	.word	0x2000001c
 8002230:	08019c9c 	.word	0x08019c9c
 8002234:	20000f6c 	.word	0x20000f6c
 8002238:	08019c84 	.word	0x08019c84
 800223c:	20000f60 	.word	0x20000f60
 8002240:	08019c60 	.word	0x08019c60
 8002244:	080040f1 	.word	0x080040f1
 8002248:	20000f5c 	.word	0x20000f5c
 800224c:	08019cac 	.word	0x08019cac
 8002250:	08003c71 	.word	0x08003c71
 8002254:	20000f70 	.word	0x20000f70

08002258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b096      	sub	sp, #88	; 0x58
 800225c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800225e:	f107 0314 	add.w	r3, r7, #20
 8002262:	2244      	movs	r2, #68	; 0x44
 8002264:	2100      	movs	r1, #0
 8002266:	4618      	mov	r0, r3
 8002268:	f011 fed1 	bl	801400e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800226c:	463b      	mov	r3, r7
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	60da      	str	r2, [r3, #12]
 8002278:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800227a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800227e:	f008 fae3 	bl	800a848 <HAL_PWREx_ControlVoltageScaling>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002288:	f004 f806 	bl	8006298 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800228c:	2309      	movs	r3, #9
 800228e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002294:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002296:	2301      	movs	r3, #1
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800229a:	2302      	movs	r3, #2
 800229c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800229e:	2303      	movs	r3, #3
 80022a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80022a2:	2301      	movs	r3, #1
 80022a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80022a6:	2314      	movs	r3, #20
 80022a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80022aa:	2307      	movs	r3, #7
 80022ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80022ae:	2302      	movs	r3, #2
 80022b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022b2:	2302      	movs	r3, #2
 80022b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	4618      	mov	r0, r3
 80022bc:	f008 fb62 	bl	800a984 <HAL_RCC_OscConfig>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80022c6:	f003 ffe7 	bl	8006298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ca:	230f      	movs	r3, #15
 80022cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022ce:	2303      	movs	r3, #3
 80022d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80022de:	463b      	mov	r3, r7
 80022e0:	2104      	movs	r1, #4
 80022e2:	4618      	mov	r0, r3
 80022e4:	f008 ff2a 	bl	800b13c <HAL_RCC_ClockConfig>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80022ee:	f003 ffd3 	bl	8006298 <Error_Handler>
  }
}
 80022f2:	bf00      	nop
 80022f4:	3758      	adds	r7, #88	; 0x58
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002300:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <MX_I2C1_Init+0x74>)
 8002302:	4a1c      	ldr	r2, [pc, #112]	; (8002374 <MX_I2C1_Init+0x78>)
 8002304:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702D95;
 8002306:	4b1a      	ldr	r3, [pc, #104]	; (8002370 <MX_I2C1_Init+0x74>)
 8002308:	4a1b      	ldr	r2, [pc, #108]	; (8002378 <MX_I2C1_Init+0x7c>)
 800230a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800230c:	4b18      	ldr	r3, [pc, #96]	; (8002370 <MX_I2C1_Init+0x74>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002312:	4b17      	ldr	r3, [pc, #92]	; (8002370 <MX_I2C1_Init+0x74>)
 8002314:	2201      	movs	r2, #1
 8002316:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002318:	4b15      	ldr	r3, [pc, #84]	; (8002370 <MX_I2C1_Init+0x74>)
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800231e:	4b14      	ldr	r3, [pc, #80]	; (8002370 <MX_I2C1_Init+0x74>)
 8002320:	2200      	movs	r2, #0
 8002322:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <MX_I2C1_Init+0x74>)
 8002326:	2200      	movs	r2, #0
 8002328:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800232a:	4b11      	ldr	r3, [pc, #68]	; (8002370 <MX_I2C1_Init+0x74>)
 800232c:	2200      	movs	r2, #0
 800232e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <MX_I2C1_Init+0x74>)
 8002332:	2200      	movs	r2, #0
 8002334:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002336:	480e      	ldr	r0, [pc, #56]	; (8002370 <MX_I2C1_Init+0x74>)
 8002338:	f006 fdaa 	bl	8008e90 <HAL_I2C_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002342:	f003 ffa9 	bl	8006298 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8002346:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800234a:	4809      	ldr	r0, [pc, #36]	; (8002370 <MX_I2C1_Init+0x74>)
 800234c:	f008 f962 	bl	800a614 <HAL_I2CEx_ConfigAnalogFilter>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002356:	f003 ff9f 	bl	8006298 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800235a:	2100      	movs	r1, #0
 800235c:	4804      	ldr	r0, [pc, #16]	; (8002370 <MX_I2C1_Init+0x74>)
 800235e:	f008 f9a4 	bl	800a6aa <HAL_I2CEx_ConfigDigitalFilter>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002368:	f003 ff96 	bl	8006298 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800236c:	bf00      	nop
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000a38 	.word	0x20000a38
 8002374:	40005400 	.word	0x40005400
 8002378:	00702d95 	.word	0x00702d95

0800237c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002390:	2300      	movs	r3, #0
 8002392:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002394:	4b25      	ldr	r3, [pc, #148]	; (800242c <MX_RTC_Init+0xb0>)
 8002396:	4a26      	ldr	r2, [pc, #152]	; (8002430 <MX_RTC_Init+0xb4>)
 8002398:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800239a:	4b24      	ldr	r3, [pc, #144]	; (800242c <MX_RTC_Init+0xb0>)
 800239c:	2200      	movs	r2, #0
 800239e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80023a0:	4b22      	ldr	r3, [pc, #136]	; (800242c <MX_RTC_Init+0xb0>)
 80023a2:	227f      	movs	r2, #127	; 0x7f
 80023a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80023a6:	4b21      	ldr	r3, [pc, #132]	; (800242c <MX_RTC_Init+0xb0>)
 80023a8:	22ff      	movs	r2, #255	; 0xff
 80023aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80023ac:	4b1f      	ldr	r3, [pc, #124]	; (800242c <MX_RTC_Init+0xb0>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80023b2:	4b1e      	ldr	r3, [pc, #120]	; (800242c <MX_RTC_Init+0xb0>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80023b8:	4b1c      	ldr	r3, [pc, #112]	; (800242c <MX_RTC_Init+0xb0>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80023be:	4b1b      	ldr	r3, [pc, #108]	; (800242c <MX_RTC_Init+0xb0>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80023c4:	4819      	ldr	r0, [pc, #100]	; (800242c <MX_RTC_Init+0xb0>)
 80023c6:	f009 fdcb 	bl	800bf60 <HAL_RTC_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80023d0:	f003 ff62 	bl	8006298 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80023d8:	2300      	movs	r3, #0
 80023da:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80023dc:	2300      	movs	r3, #0
 80023de:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80023e0:	2300      	movs	r3, #0
 80023e2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	2201      	movs	r2, #1
 80023ec:	4619      	mov	r1, r3
 80023ee:	480f      	ldr	r0, [pc, #60]	; (800242c <MX_RTC_Init+0xb0>)
 80023f0:	f009 fe31 	bl	800c056 <HAL_RTC_SetTime>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80023fa:	f003 ff4d 	bl	8006298 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80023fe:	2303      	movs	r3, #3
 8002400:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8002402:	2307      	movs	r3, #7
 8002404:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 8002406:	2306      	movs	r3, #6
 8002408:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 800240a:	2322      	movs	r3, #34	; 0x22
 800240c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800240e:	463b      	mov	r3, r7
 8002410:	2201      	movs	r2, #1
 8002412:	4619      	mov	r1, r3
 8002414:	4805      	ldr	r0, [pc, #20]	; (800242c <MX_RTC_Init+0xb0>)
 8002416:	f009 ff17 	bl	800c248 <HAL_RTC_SetDate>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8002420:	f003 ff3a 	bl	8006298 <Error_Handler>

  //set_Date(epoch);

  /* USER CODE END RTC_Init 2 */

}
 8002424:	bf00      	nop
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000b1c 	.word	0x20000b1c
 8002430:	40002800 	.word	0x40002800

08002434 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002438:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <MX_SPI1_Init+0x74>)
 800243a:	4a1c      	ldr	r2, [pc, #112]	; (80024ac <MX_SPI1_Init+0x78>)
 800243c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800243e:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <MX_SPI1_Init+0x74>)
 8002440:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002444:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002446:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <MX_SPI1_Init+0x74>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800244c:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <MX_SPI1_Init+0x74>)
 800244e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002452:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002454:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <MX_SPI1_Init+0x74>)
 8002456:	2200      	movs	r2, #0
 8002458:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800245a:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <MX_SPI1_Init+0x74>)
 800245c:	2200      	movs	r2, #0
 800245e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <MX_SPI1_Init+0x74>)
 8002462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002466:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <MX_SPI1_Init+0x74>)
 800246a:	2208      	movs	r2, #8
 800246c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800246e:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <MX_SPI1_Init+0x74>)
 8002470:	2200      	movs	r2, #0
 8002472:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <MX_SPI1_Init+0x74>)
 8002476:	2200      	movs	r2, #0
 8002478:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800247a:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <MX_SPI1_Init+0x74>)
 800247c:	2200      	movs	r2, #0
 800247e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <MX_SPI1_Init+0x74>)
 8002482:	2207      	movs	r2, #7
 8002484:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <MX_SPI1_Init+0x74>)
 8002488:	2200      	movs	r2, #0
 800248a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <MX_SPI1_Init+0x74>)
 800248e:	2200      	movs	r2, #0
 8002490:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002492:	4805      	ldr	r0, [pc, #20]	; (80024a8 <MX_SPI1_Init+0x74>)
 8002494:	f00a f87e 	bl	800c594 <HAL_SPI_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800249e:	f003 fefb 	bl	8006298 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000b40 	.word	0x20000b40
 80024ac:	40013000 	.word	0x40013000

080024b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80024b4:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <MX_SPI2_Init+0x74>)
 80024b6:	4a1c      	ldr	r2, [pc, #112]	; (8002528 <MX_SPI2_Init+0x78>)
 80024b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80024ba:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <MX_SPI2_Init+0x74>)
 80024bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80024c2:	4b18      	ldr	r3, [pc, #96]	; (8002524 <MX_SPI2_Init+0x74>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80024c8:	4b16      	ldr	r3, [pc, #88]	; (8002524 <MX_SPI2_Init+0x74>)
 80024ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80024ce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024d0:	4b14      	ldr	r3, [pc, #80]	; (8002524 <MX_SPI2_Init+0x74>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024d6:	4b13      	ldr	r3, [pc, #76]	; (8002524 <MX_SPI2_Init+0x74>)
 80024d8:	2200      	movs	r2, #0
 80024da:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <MX_SPI2_Init+0x74>)
 80024de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024e2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024e4:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <MX_SPI2_Init+0x74>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <MX_SPI2_Init+0x74>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024f0:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <MX_SPI2_Init+0x74>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024f6:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <MX_SPI2_Init+0x74>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <MX_SPI2_Init+0x74>)
 80024fe:	2207      	movs	r2, #7
 8002500:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002502:	4b08      	ldr	r3, [pc, #32]	; (8002524 <MX_SPI2_Init+0x74>)
 8002504:	2200      	movs	r2, #0
 8002506:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <MX_SPI2_Init+0x74>)
 800250a:	2200      	movs	r2, #0
 800250c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800250e:	4805      	ldr	r0, [pc, #20]	; (8002524 <MX_SPI2_Init+0x74>)
 8002510:	f00a f840 	bl	800c594 <HAL_SPI_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800251a:	f003 febd 	bl	8006298 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000ba4 	.word	0x20000ba4
 8002528:	40003800 	.word	0x40003800

0800252c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002532:	f107 0310 	add.w	r3, r7, #16
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
 800253c:	609a      	str	r2, [r3, #8]
 800253e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN TIM4_Init 1 */

  // interupt every 10 ms

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800254a:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <MX_TIM4_Init+0x94>)
 800254c:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <MX_TIM4_Init+0x98>)
 800254e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8002550:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <MX_TIM4_Init+0x94>)
 8002552:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002556:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002558:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <MX_TIM4_Init+0x94>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800255e:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <MX_TIM4_Init+0x94>)
 8002560:	2263      	movs	r2, #99	; 0x63
 8002562:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002564:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <MX_TIM4_Init+0x94>)
 8002566:	2200      	movs	r2, #0
 8002568:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800256a:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <MX_TIM4_Init+0x94>)
 800256c:	2280      	movs	r2, #128	; 0x80
 800256e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002570:	4813      	ldr	r0, [pc, #76]	; (80025c0 <MX_TIM4_Init+0x94>)
 8002572:	f00b fc19 	bl	800dda8 <HAL_TIM_Base_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800257c:	f003 fe8c 	bl	8006298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002584:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002586:	f107 0310 	add.w	r3, r7, #16
 800258a:	4619      	mov	r1, r3
 800258c:	480c      	ldr	r0, [pc, #48]	; (80025c0 <MX_TIM4_Init+0x94>)
 800258e:	f00b ff46 	bl	800e41e <HAL_TIM_ConfigClockSource>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002598:	f003 fe7e 	bl	8006298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800259c:	2300      	movs	r3, #0
 800259e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025a4:	1d3b      	adds	r3, r7, #4
 80025a6:	4619      	mov	r1, r3
 80025a8:	4805      	ldr	r0, [pc, #20]	; (80025c0 <MX_TIM4_Init+0x94>)
 80025aa:	f00c f983 	bl	800e8b4 <HAL_TIMEx_MasterConfigSynchronization>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80025b4:	f003 fe70 	bl	8006298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80025b8:	bf00      	nop
 80025ba:	3720      	adds	r7, #32
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000ce0 	.word	0x20000ce0
 80025c4:	40000800 	.word	0x40000800

080025c8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ce:	1d3b      	adds	r3, r7, #4
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80025d8:	4b14      	ldr	r3, [pc, #80]	; (800262c <MX_TIM6_Init+0x64>)
 80025da:	4a15      	ldr	r2, [pc, #84]	; (8002630 <MX_TIM6_Init+0x68>)
 80025dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 399;
 80025de:	4b13      	ldr	r3, [pc, #76]	; (800262c <MX_TIM6_Init+0x64>)
 80025e0:	f240 128f 	movw	r2, #399	; 0x18f
 80025e4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <MX_TIM6_Init+0x64>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4;
 80025ec:	4b0f      	ldr	r3, [pc, #60]	; (800262c <MX_TIM6_Init+0x64>)
 80025ee:	2204      	movs	r2, #4
 80025f0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025f2:	4b0e      	ldr	r3, [pc, #56]	; (800262c <MX_TIM6_Init+0x64>)
 80025f4:	2280      	movs	r2, #128	; 0x80
 80025f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025f8:	480c      	ldr	r0, [pc, #48]	; (800262c <MX_TIM6_Init+0x64>)
 80025fa:	f00b fbd5 	bl	800dda8 <HAL_TIM_Base_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002604:	f003 fe48 	bl	8006298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002608:	2300      	movs	r3, #0
 800260a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	4619      	mov	r1, r3
 8002614:	4805      	ldr	r0, [pc, #20]	; (800262c <MX_TIM6_Init+0x64>)
 8002616:	f00c f94d 	bl	800e8b4 <HAL_TIMEx_MasterConfigSynchronization>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002620:	f003 fe3a 	bl	8006298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20000d2c 	.word	0x20000d2c
 8002630:	40001000 	.word	0x40001000

08002634 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08c      	sub	sp, #48	; 0x30
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800263a:	f107 030c 	add.w	r3, r7, #12
 800263e:	2224      	movs	r2, #36	; 0x24
 8002640:	2100      	movs	r1, #0
 8002642:	4618      	mov	r0, r3
 8002644:	f011 fce3 	bl	801400e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002648:	463b      	mov	r3, r7
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002652:	4b23      	ldr	r3, [pc, #140]	; (80026e0 <MX_TIM8_Init+0xac>)
 8002654:	4a23      	ldr	r2, [pc, #140]	; (80026e4 <MX_TIM8_Init+0xb0>)
 8002656:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = MIN_ENC_VALUE;
 8002658:	4b21      	ldr	r3, [pc, #132]	; (80026e0 <MX_TIM8_Init+0xac>)
 800265a:	2200      	movs	r2, #0
 800265c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800265e:	4b20      	ldr	r3, [pc, #128]	; (80026e0 <MX_TIM8_Init+0xac>)
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = MAX_ENC_VALUE;
 8002664:	4b1e      	ldr	r3, [pc, #120]	; (80026e0 <MX_TIM8_Init+0xac>)
 8002666:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800266a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800266c:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <MX_TIM8_Init+0xac>)
 800266e:	2200      	movs	r2, #0
 8002670:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002672:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <MX_TIM8_Init+0xac>)
 8002674:	2200      	movs	r2, #0
 8002676:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <MX_TIM8_Init+0xac>)
 800267a:	2280      	movs	r2, #128	; 0x80
 800267c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800267e:	2301      	movs	r3, #1
 8002680:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002686:	2301      	movs	r3, #1
 8002688:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800268a:	2300      	movs	r3, #0
 800268c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 800268e:	2305      	movs	r3, #5
 8002690:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002692:	2300      	movs	r3, #0
 8002694:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002696:	2301      	movs	r3, #1
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800269a:	2300      	movs	r3, #0
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 800269e:	2305      	movs	r3, #5
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80026a2:	f107 030c 	add.w	r3, r7, #12
 80026a6:	4619      	mov	r1, r3
 80026a8:	480d      	ldr	r0, [pc, #52]	; (80026e0 <MX_TIM8_Init+0xac>)
 80026aa:	f00b fc45 	bl	800df38 <HAL_TIM_Encoder_Init>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80026b4:	f003 fdf0 	bl	8006298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026b8:	2300      	movs	r3, #0
 80026ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026bc:	2300      	movs	r3, #0
 80026be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026c4:	463b      	mov	r3, r7
 80026c6:	4619      	mov	r1, r3
 80026c8:	4805      	ldr	r0, [pc, #20]	; (80026e0 <MX_TIM8_Init+0xac>)
 80026ca:	f00c f8f3 	bl	800e8b4 <HAL_TIMEx_MasterConfigSynchronization>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80026d4:	f003 fde0 	bl	8006298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80026d8:	bf00      	nop
 80026da:	3730      	adds	r7, #48	; 0x30
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000d78 	.word	0x20000d78
 80026e4:	40013400 	.word	0x40013400

080026e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026ec:	4b14      	ldr	r3, [pc, #80]	; (8002740 <MX_USART2_UART_Init+0x58>)
 80026ee:	4a15      	ldr	r2, [pc, #84]	; (8002744 <MX_USART2_UART_Init+0x5c>)
 80026f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <MX_USART2_UART_Init+0x58>)
 80026f4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80026f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <MX_USART2_UART_Init+0x58>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002700:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <MX_USART2_UART_Init+0x58>)
 8002702:	2200      	movs	r2, #0
 8002704:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002706:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <MX_USART2_UART_Init+0x58>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <MX_USART2_UART_Init+0x58>)
 800270e:	220c      	movs	r2, #12
 8002710:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <MX_USART2_UART_Init+0x58>)
 8002714:	2200      	movs	r2, #0
 8002716:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <MX_USART2_UART_Init+0x58>)
 800271a:	2200      	movs	r2, #0
 800271c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800271e:	4b08      	ldr	r3, [pc, #32]	; (8002740 <MX_USART2_UART_Init+0x58>)
 8002720:	2200      	movs	r2, #0
 8002722:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <MX_USART2_UART_Init+0x58>)
 8002726:	2200      	movs	r2, #0
 8002728:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800272a:	4805      	ldr	r0, [pc, #20]	; (8002740 <MX_USART2_UART_Init+0x58>)
 800272c:	f00c f968 	bl	800ea00 <HAL_UART_Init>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002736:	f003 fdaf 	bl	8006298 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000dc4 	.word	0x20000dc4
 8002744:	40004400 	.word	0x40004400

08002748 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800274c:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <MX_USART3_UART_Init+0x58>)
 800274e:	4a15      	ldr	r2, [pc, #84]	; (80027a4 <MX_USART3_UART_Init+0x5c>)
 8002750:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002752:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <MX_USART3_UART_Init+0x58>)
 8002754:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002758:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800275a:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <MX_USART3_UART_Init+0x58>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <MX_USART3_UART_Init+0x58>)
 8002762:	2200      	movs	r2, #0
 8002764:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002766:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <MX_USART3_UART_Init+0x58>)
 8002768:	2200      	movs	r2, #0
 800276a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <MX_USART3_UART_Init+0x58>)
 800276e:	220c      	movs	r2, #12
 8002770:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002772:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <MX_USART3_UART_Init+0x58>)
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <MX_USART3_UART_Init+0x58>)
 800277a:	2200      	movs	r2, #0
 800277c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800277e:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <MX_USART3_UART_Init+0x58>)
 8002780:	2200      	movs	r2, #0
 8002782:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <MX_USART3_UART_Init+0x58>)
 8002786:	2200      	movs	r2, #0
 8002788:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800278a:	4805      	ldr	r0, [pc, #20]	; (80027a0 <MX_USART3_UART_Init+0x58>)
 800278c:	f00c f938 	bl	800ea00 <HAL_UART_Init>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002796:	f003 fd7f 	bl	8006298 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000e48 	.word	0x20000e48
 80027a4:	40004800 	.word	0x40004800

080027a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027ae:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <MX_DMA_Init+0xb0>)
 80027b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b2:	4a29      	ldr	r2, [pc, #164]	; (8002858 <MX_DMA_Init+0xb0>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6493      	str	r3, [r2, #72]	; 0x48
 80027ba:	4b27      	ldr	r3, [pc, #156]	; (8002858 <MX_DMA_Init+0xb0>)
 80027bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	607b      	str	r3, [r7, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027c6:	4b24      	ldr	r3, [pc, #144]	; (8002858 <MX_DMA_Init+0xb0>)
 80027c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ca:	4a23      	ldr	r2, [pc, #140]	; (8002858 <MX_DMA_Init+0xb0>)
 80027cc:	f043 0302 	orr.w	r3, r3, #2
 80027d0:	6493      	str	r3, [r2, #72]	; 0x48
 80027d2:	4b21      	ldr	r3, [pc, #132]	; (8002858 <MX_DMA_Init+0xb0>)
 80027d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2105      	movs	r1, #5
 80027e2:	200c      	movs	r0, #12
 80027e4:	f005 fe9a 	bl	800851c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80027e8:	200c      	movs	r0, #12
 80027ea:	f005 feb3 	bl	8008554 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	2105      	movs	r1, #5
 80027f2:	200e      	movs	r0, #14
 80027f4:	f005 fe92 	bl	800851c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80027f8:	200e      	movs	r0, #14
 80027fa:	f005 feab 	bl	8008554 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80027fe:	2200      	movs	r2, #0
 8002800:	2105      	movs	r1, #5
 8002802:	200f      	movs	r0, #15
 8002804:	f005 fe8a 	bl	800851c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002808:	200f      	movs	r0, #15
 800280a:	f005 fea3 	bl	8008554 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800280e:	2200      	movs	r2, #0
 8002810:	2105      	movs	r1, #5
 8002812:	2010      	movs	r0, #16
 8002814:	f005 fe82 	bl	800851c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002818:	2010      	movs	r0, #16
 800281a:	f005 fe9b 	bl	8008554 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800281e:	2200      	movs	r2, #0
 8002820:	2105      	movs	r1, #5
 8002822:	2011      	movs	r0, #17
 8002824:	f005 fe7a 	bl	800851c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002828:	2011      	movs	r0, #17
 800282a:	f005 fe93 	bl	8008554 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	2105      	movs	r1, #5
 8002832:	203b      	movs	r0, #59	; 0x3b
 8002834:	f005 fe72 	bl	800851c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002838:	203b      	movs	r0, #59	; 0x3b
 800283a:	f005 fe8b 	bl	8008554 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 5, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	2105      	movs	r1, #5
 8002842:	2044      	movs	r0, #68	; 0x44
 8002844:	f005 fe6a 	bl	800851c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8002848:	2044      	movs	r0, #68	; 0x44
 800284a:	f005 fe83 	bl	8008554 <HAL_NVIC_EnableIRQ>

}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40021000 	.word	0x40021000

0800285c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002862:	f107 0314 	add.w	r3, r7, #20
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	60da      	str	r2, [r3, #12]
 8002870:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002872:	4b8b      	ldr	r3, [pc, #556]	; (8002aa0 <MX_GPIO_Init+0x244>)
 8002874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002876:	4a8a      	ldr	r2, [pc, #552]	; (8002aa0 <MX_GPIO_Init+0x244>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800287e:	4b88      	ldr	r3, [pc, #544]	; (8002aa0 <MX_GPIO_Init+0x244>)
 8002880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800288a:	4b85      	ldr	r3, [pc, #532]	; (8002aa0 <MX_GPIO_Init+0x244>)
 800288c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288e:	4a84      	ldr	r2, [pc, #528]	; (8002aa0 <MX_GPIO_Init+0x244>)
 8002890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002896:	4b82      	ldr	r3, [pc, #520]	; (8002aa0 <MX_GPIO_Init+0x244>)
 8002898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a2:	4b7f      	ldr	r3, [pc, #508]	; (8002aa0 <MX_GPIO_Init+0x244>)
 80028a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a6:	4a7e      	ldr	r2, [pc, #504]	; (8002aa0 <MX_GPIO_Init+0x244>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ae:	4b7c      	ldr	r3, [pc, #496]	; (8002aa0 <MX_GPIO_Init+0x244>)
 80028b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ba:	4b79      	ldr	r3, [pc, #484]	; (8002aa0 <MX_GPIO_Init+0x244>)
 80028bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028be:	4a78      	ldr	r2, [pc, #480]	; (8002aa0 <MX_GPIO_Init+0x244>)
 80028c0:	f043 0302 	orr.w	r3, r3, #2
 80028c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028c6:	4b76      	ldr	r3, [pc, #472]	; (8002aa0 <MX_GPIO_Init+0x244>)
 80028c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	607b      	str	r3, [r7, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028d2:	4b73      	ldr	r3, [pc, #460]	; (8002aa0 <MX_GPIO_Init+0x244>)
 80028d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d6:	4a72      	ldr	r2, [pc, #456]	; (8002aa0 <MX_GPIO_Init+0x244>)
 80028d8:	f043 0308 	orr.w	r3, r3, #8
 80028dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028de:	4b70      	ldr	r3, [pc, #448]	; (8002aa0 <MX_GPIO_Init+0x244>)
 80028e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISPLAY_ON_Pin|ERR_LED_Pin, GPIO_PIN_RESET);
 80028ea:	2200      	movs	r2, #0
 80028ec:	2109      	movs	r1, #9
 80028ee:	486d      	ldr	r0, [pc, #436]	; (8002aa4 <MX_GPIO_Init+0x248>)
 80028f0:	f006 fa84 	bl	8008dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIK_LED_GPIO_Port, TIK_LED_Pin, GPIO_PIN_RESET);
 80028f4:	2200      	movs	r2, #0
 80028f6:	2102      	movs	r1, #2
 80028f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028fc:	f006 fa7e 	bl	8008dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002900:	2201      	movs	r2, #1
 8002902:	2110      	movs	r1, #16
 8002904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002908:	f006 fa78 	bl	8008dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|SPI1_DC_Pin, GPIO_PIN_SET);
 800290c:	2201      	movs	r2, #1
 800290e:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8002912:	4865      	ldr	r0, [pc, #404]	; (8002aa8 <MX_GPIO_Init+0x24c>)
 8002914:	f006 fa72 	bl	8008dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8002918:	2201      	movs	r2, #1
 800291a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800291e:	4861      	ldr	r0, [pc, #388]	; (8002aa4 <MX_GPIO_Init+0x248>)
 8002920:	f006 fa6c 	bl	8008dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_SET);
 8002924:	2201      	movs	r2, #1
 8002926:	2104      	movs	r1, #4
 8002928:	4860      	ldr	r0, [pc, #384]	; (8002aac <MX_GPIO_Init+0x250>)
 800292a:	f006 fa67 	bl	8008dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DISPLAY_ON_Pin */
  GPIO_InitStruct.Pin = DISPLAY_ON_Pin;
 800292e:	2301      	movs	r3, #1
 8002930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002932:	2301      	movs	r3, #1
 8002934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002936:	2302      	movs	r3, #2
 8002938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293a:	2300      	movs	r3, #0
 800293c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPLAY_ON_GPIO_Port, &GPIO_InitStruct);
 800293e:	f107 0314 	add.w	r3, r7, #20
 8002942:	4619      	mov	r1, r3
 8002944:	4857      	ldr	r0, [pc, #348]	; (8002aa4 <MX_GPIO_Init+0x248>)
 8002946:	f006 f897 	bl	8008a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 800294a:	2306      	movs	r3, #6
 800294c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800294e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002954:	2301      	movs	r3, #1
 8002956:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002958:	f107 0314 	add.w	r3, r7, #20
 800295c:	4619      	mov	r1, r3
 800295e:	4851      	ldr	r0, [pc, #324]	; (8002aa4 <MX_GPIO_Init+0x248>)
 8002960:	f006 f88a 	bl	8008a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ERR_LED_Pin */
  GPIO_InitStruct.Pin = ERR_LED_Pin;
 8002964:	2308      	movs	r3, #8
 8002966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002968:	2301      	movs	r3, #1
 800296a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002970:	2301      	movs	r3, #1
 8002972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERR_LED_GPIO_Port, &GPIO_InitStruct);
 8002974:	f107 0314 	add.w	r3, r7, #20
 8002978:	4619      	mov	r1, r3
 800297a:	484a      	ldr	r0, [pc, #296]	; (8002aa4 <MX_GPIO_Init+0x248>)
 800297c:	f006 f87c 	bl	8008a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIK_LED_Pin */
  GPIO_InitStruct.Pin = TIK_LED_Pin;
 8002980:	2302      	movs	r3, #2
 8002982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002984:	2301      	movs	r3, #1
 8002986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIK_LED_GPIO_Port, &GPIO_InitStruct);
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	4619      	mov	r1, r3
 8002996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800299a:	f006 f86d 	bl	8008a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800299e:	2310      	movs	r3, #16
 80029a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a2:	2301      	movs	r3, #1
 80029a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029aa:	2302      	movs	r3, #2
 80029ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80029ae:	f107 0314 	add.w	r3, r7, #20
 80029b2:	4619      	mov	r1, r3
 80029b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029b8:	f006 f85e 	bl	8008a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80029bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c2:	2301      	movs	r3, #1
 80029c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029c6:	2301      	movs	r3, #1
 80029c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ca:	2302      	movs	r3, #2
 80029cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80029ce:	f107 0314 	add.w	r3, r7, #20
 80029d2:	4619      	mov	r1, r3
 80029d4:	4834      	ldr	r0, [pc, #208]	; (8002aa8 <MX_GPIO_Init+0x24c>)
 80029d6:	f006 f84f 	bl	8008a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_KEY_Pin */
  GPIO_InitStruct.Pin = ENC_KEY_Pin;
 80029da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80029e0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80029e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029e6:	2301      	movs	r3, #1
 80029e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_KEY_GPIO_Port, &GPIO_InitStruct);
 80029ea:	f107 0314 	add.w	r3, r7, #20
 80029ee:	4619      	mov	r1, r3
 80029f0:	482c      	ldr	r0, [pc, #176]	; (8002aa4 <MX_GPIO_Init+0x248>)
 80029f2:	f006 f841 	bl	8008a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRED_Pin */
  GPIO_InitStruct.Pin = IRED_Pin;
 80029f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a00:	2301      	movs	r3, #1
 8002a02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRED_GPIO_Port, &GPIO_InitStruct);
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4826      	ldr	r0, [pc, #152]	; (8002aa4 <MX_GPIO_Init+0x248>)
 8002a0c:	f006 f834 	bl	8008a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8002a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a16:	2301      	movs	r3, #1
 8002a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	4619      	mov	r1, r3
 8002a28:	481e      	ldr	r0, [pc, #120]	; (8002aa4 <MX_GPIO_Init+0x248>)
 8002a2a:	f006 f825 	bl	8008a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_RST_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin;
 8002a2e:	2304      	movs	r3, #4
 8002a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a32:	2301      	movs	r3, #1
 8002a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a36:	2301      	movs	r3, #1
 8002a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_RST_GPIO_Port, &GPIO_InitStruct);
 8002a3e:	f107 0314 	add.w	r3, r7, #20
 8002a42:	4619      	mov	r1, r3
 8002a44:	4819      	ldr	r0, [pc, #100]	; (8002aac <MX_GPIO_Init+0x250>)
 8002a46:	f006 f817 	bl	8008a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_DC_Pin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin;
 8002a4a:	2320      	movs	r3, #32
 8002a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a56:	2302      	movs	r3, #2
 8002a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_DC_GPIO_Port, &GPIO_InitStruct);
 8002a5a:	f107 0314 	add.w	r3, r7, #20
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4811      	ldr	r0, [pc, #68]	; (8002aa8 <MX_GPIO_Init+0x24c>)
 8002a62:	f006 f809 	bl	8008a78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002a66:	2200      	movs	r2, #0
 8002a68:	2105      	movs	r1, #5
 8002a6a:	2007      	movs	r0, #7
 8002a6c:	f005 fd56 	bl	800851c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002a70:	2007      	movs	r0, #7
 8002a72:	f005 fd6f 	bl	8008554 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002a76:	2200      	movs	r2, #0
 8002a78:	2105      	movs	r1, #5
 8002a7a:	2008      	movs	r0, #8
 8002a7c:	f005 fd4e 	bl	800851c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002a80:	2008      	movs	r0, #8
 8002a82:	f005 fd67 	bl	8008554 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2106      	movs	r1, #6
 8002a8a:	2017      	movs	r0, #23
 8002a8c:	f005 fd46 	bl	800851c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002a90:	2017      	movs	r0, #23
 8002a92:	f005 fd5f 	bl	8008554 <HAL_NVIC_EnableIRQ>

}
 8002a96:	bf00      	nop
 8002a98:	3728      	adds	r7, #40	; 0x28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	48000800 	.word	0x48000800
 8002aa8:	48000400 	.word	0x48000400
 8002aac:	48000c00 	.word	0x48000c00

08002ab0 <hexToBin>:

//-------------------------------------------------------------------------------------------
//      Преобразует два символа строки из hex-формата в двоичный
//
uint8_t hexToBin(char *sc)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
char st = 0, ml = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	73fb      	strb	r3, [r7, #15]
 8002abc:	2300      	movs	r3, #0
 8002abe:	73bb      	strb	r3, [r7, #14]

	if ((sc[0] >= '0') && (sc[0] <= '9')) st = (sc[0] - 0x30);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b2f      	cmp	r3, #47	; 0x2f
 8002ac6:	d908      	bls.n	8002ada <hexToBin+0x2a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b39      	cmp	r3, #57	; 0x39
 8002ace:	d804      	bhi.n	8002ada <hexToBin+0x2a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	3b30      	subs	r3, #48	; 0x30
 8002ad6:	73fb      	strb	r3, [r7, #15]
 8002ad8:	e018      	b.n	8002b0c <hexToBin+0x5c>
	else
	if ((sc[0] >= 'A') && (sc[0] <= 'F')) st = (sc[0] - 0x37);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b40      	cmp	r3, #64	; 0x40
 8002ae0:	d908      	bls.n	8002af4 <hexToBin+0x44>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b46      	cmp	r3, #70	; 0x46
 8002ae8:	d804      	bhi.n	8002af4 <hexToBin+0x44>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	3b37      	subs	r3, #55	; 0x37
 8002af0:	73fb      	strb	r3, [r7, #15]
 8002af2:	e00b      	b.n	8002b0c <hexToBin+0x5c>
	else
	if ((sc[0] >= 'a') && (sc[0] <= 'f')) st = (sc[0] - 0x57);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b60      	cmp	r3, #96	; 0x60
 8002afa:	d907      	bls.n	8002b0c <hexToBin+0x5c>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b66      	cmp	r3, #102	; 0x66
 8002b02:	d803      	bhi.n	8002b0c <hexToBin+0x5c>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	3b57      	subs	r3, #87	; 0x57
 8002b0a:	73fb      	strb	r3, [r7, #15]

	if ((sc[1] >= '0') && (sc[1] <= '9')) ml = (sc[1] - 0x30);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b2f      	cmp	r3, #47	; 0x2f
 8002b14:	d90a      	bls.n	8002b2c <hexToBin+0x7c>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b39      	cmp	r3, #57	; 0x39
 8002b1e:	d805      	bhi.n	8002b2c <hexToBin+0x7c>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3301      	adds	r3, #1
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	3b30      	subs	r3, #48	; 0x30
 8002b28:	73bb      	strb	r3, [r7, #14]
 8002b2a:	e01e      	b.n	8002b6a <hexToBin+0xba>
	else
	if ((sc[1] >= 'A') && (sc[1] <= 'F')) ml = (sc[1] - 0x37);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b40      	cmp	r3, #64	; 0x40
 8002b34:	d90a      	bls.n	8002b4c <hexToBin+0x9c>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b46      	cmp	r3, #70	; 0x46
 8002b3e:	d805      	bhi.n	8002b4c <hexToBin+0x9c>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3301      	adds	r3, #1
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	3b37      	subs	r3, #55	; 0x37
 8002b48:	73bb      	strb	r3, [r7, #14]
 8002b4a:	e00e      	b.n	8002b6a <hexToBin+0xba>
	else
	if ((sc[1] >= 'a') && (sc[1] <= 'f')) ml = (sc[1] - 0x57);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b60      	cmp	r3, #96	; 0x60
 8002b54:	d909      	bls.n	8002b6a <hexToBin+0xba>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b66      	cmp	r3, #102	; 0x66
 8002b5e:	d804      	bhi.n	8002b6a <hexToBin+0xba>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3301      	adds	r3, #1
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	3b57      	subs	r3, #87	; 0x57
 8002b68:	73bb      	strb	r3, [r7, #14]

	return ((st << 4) | (ml & 0x0f));
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	b25a      	sxtb	r2, r3
 8002b70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b74:	f003 030f 	and.w	r3, r3, #15
 8002b78:	b25b      	sxtb	r3, r3
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3

}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <getQueCount>:
//-------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------
uint32_t getQueCount(osMessageQueueId_t que)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	return osMessageQueueGetCount(que);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f00d fed1 	bl	801093c <osMessageQueueGetCount>
 8002b9a:	4603      	mov	r3, r0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <nameStation>:
//-------------------------------------------------------------------------------------------
#ifdef SET_DISPLAY

//-------------------------------------------------------------------------------------------
const char *nameStation(float fr)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	ed87 0a01 	vstr	s0, [r7, #4]
int8_t ik = -1;
 8002bae:	23ff      	movs	r3, #255	; 0xff
 8002bb0:	73fb      	strb	r3, [r7, #15]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	73bb      	strb	r3, [r7, #14]
 8002bb6:	e01b      	b.n	8002bf0 <nameStation+0x4c>
		if (list[i].freq == fr) {
 8002bb8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002bbc:	491a      	ldr	r1, [pc, #104]	; (8002c28 <nameStation+0x84>)
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002bcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bd0:	ee07 3a10 	vmov	s14, r3
 8002bd4:	eef4 7a47 	vcmp.f32	s15, s14
 8002bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bdc:	d102      	bne.n	8002be4 <nameStation+0x40>
			ik = i;
 8002bde:	7bbb      	ldrb	r3, [r7, #14]
 8002be0:	73fb      	strb	r3, [r7, #15]
			break;
 8002be2:	e009      	b.n	8002bf8 <nameStation+0x54>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 8002be4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	3301      	adds	r3, #1
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	73bb      	strb	r3, [r7, #14]
 8002bf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bf4:	2b19      	cmp	r3, #25
 8002bf6:	dddf      	ble.n	8002bb8 <nameStation+0x14>
		}
	}

	if (ik != -1) return list[ik].name;
 8002bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c00:	d009      	beq.n	8002c16 <nameStation+0x72>
 8002c02:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4a06      	ldr	r2, [pc, #24]	; (8002c28 <nameStation+0x84>)
 8002c10:	4413      	add	r3, r2
 8002c12:	3305      	adds	r3, #5
 8002c14:	e001      	b.n	8002c1a <nameStation+0x76>
			 else return noneStation;
 8002c16:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <nameStation+0x88>)
 8002c18:	681b      	ldr	r3, [r3, #0]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	2000305c 	.word	0x2000305c
 8002c2c:	20000134 	.word	0x20000134

08002c30 <getNextList>:
//-------------------------------------------------------------------------------------------
float getNextList(float fr, uint8_t up, uint8_t *band)
{
 8002c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c34:	b08e      	sub	sp, #56	; 0x38
 8002c36:	af08      	add	r7, sp, #32
 8002c38:	ed87 0a03 	vstr	s0, [r7, #12]
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	6079      	str	r1, [r7, #4]
 8002c40:	72fb      	strb	r3, [r7, #11]
float ret = fr;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	613b      	str	r3, [r7, #16]
int8_t ik = -1;
 8002c46:	23ff      	movs	r3, #255	; 0xff
 8002c48:	75fb      	strb	r3, [r7, #23]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	75bb      	strb	r3, [r7, #22]
 8002c4e:	e01b      	b.n	8002c88 <getNextList+0x58>
		if (list[i].freq == fr) {
 8002c50:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8002c54:	4965      	ldr	r1, [pc, #404]	; (8002dec <getNextList+0x1bc>)
 8002c56:	4613      	mov	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002c64:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c68:	ee07 3a10 	vmov	s14, r3
 8002c6c:	eef4 7a47 	vcmp.f32	s15, s14
 8002c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c74:	d102      	bne.n	8002c7c <getNextList+0x4c>
			ik = i;
 8002c76:	7dbb      	ldrb	r3, [r7, #22]
 8002c78:	75fb      	strb	r3, [r7, #23]
			break;
 8002c7a:	e009      	b.n	8002c90 <getNextList+0x60>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 8002c7c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	3301      	adds	r3, #1
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	75bb      	strb	r3, [r7, #22]
 8002c88:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002c8c:	2b19      	cmp	r3, #25
 8002c8e:	dddf      	ble.n	8002c50 <getNextList+0x20>
		}
	}
	if (ik != -1) {
 8002c90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c98:	d01b      	beq.n	8002cd2 <getNextList+0xa2>
		if (up) {
 8002c9a:	7afb      	ldrb	r3, [r7, #11]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00a      	beq.n	8002cb6 <getNextList+0x86>
			if (++ik == MAX_LIST) ik = 0;
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	75fb      	strb	r3, [r7, #23]
 8002ca8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cac:	2b1a      	cmp	r3, #26
 8002cae:	d161      	bne.n	8002d74 <getNextList+0x144>
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	75fb      	strb	r3, [r7, #23]
 8002cb4:	e05e      	b.n	8002d74 <getNextList+0x144>
		} else {
			if (ik != 0) ik--; else ik = MAX_LIST - 1;
 8002cb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d006      	beq.n	8002ccc <getNextList+0x9c>
 8002cbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	75fb      	strb	r3, [r7, #23]
 8002cca:	e053      	b.n	8002d74 <getNextList+0x144>
 8002ccc:	2319      	movs	r3, #25
 8002cce:	75fb      	strb	r3, [r7, #23]
 8002cd0:	e050      	b.n	8002d74 <getNextList+0x144>
		}
	} else {
		if (up) {// seek_up
 8002cd2:	7afb      	ldrb	r3, [r7, #11]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d023      	beq.n	8002d20 <getNextList+0xf0>
			for (int8_t i = ik; i < MAX_LIST; i++) {
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
 8002cda:	757b      	strb	r3, [r7, #21]
 8002cdc:	e01b      	b.n	8002d16 <getNextList+0xe6>
				if (list[i].freq > fr) {
 8002cde:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002ce2:	4942      	ldr	r1, [pc, #264]	; (8002dec <getNextList+0x1bc>)
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002cf2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cf6:	ee07 3a10 	vmov	s14, r3
 8002cfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d02:	d502      	bpl.n	8002d0a <getNextList+0xda>
					ik = i;
 8002d04:	7d7b      	ldrb	r3, [r7, #21]
 8002d06:	75fb      	strb	r3, [r7, #23]
					break;
 8002d08:	e02d      	b.n	8002d66 <getNextList+0x136>
			for (int8_t i = ik; i < MAX_LIST; i++) {
 8002d0a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	3301      	adds	r3, #1
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	757b      	strb	r3, [r7, #21]
 8002d16:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002d1a:	2b19      	cmp	r3, #25
 8002d1c:	dddf      	ble.n	8002cde <getNextList+0xae>
 8002d1e:	e022      	b.n	8002d66 <getNextList+0x136>
				}
			}
		} else {// seek_down
			for (int8_t i = ik; i <= 0; i--) {
 8002d20:	7dfb      	ldrb	r3, [r7, #23]
 8002d22:	753b      	strb	r3, [r7, #20]
 8002d24:	e01b      	b.n	8002d5e <getNextList+0x12e>
				if (list[i].freq < fr) {
 8002d26:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002d2a:	4930      	ldr	r1, [pc, #192]	; (8002dec <getNextList+0x1bc>)
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002d3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d3e:	ee07 3a10 	vmov	s14, r3
 8002d42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4a:	dd02      	ble.n	8002d52 <getNextList+0x122>
					ik = i;
 8002d4c:	7d3b      	ldrb	r3, [r7, #20]
 8002d4e:	75fb      	strb	r3, [r7, #23]
					break;
 8002d50:	e009      	b.n	8002d66 <getNextList+0x136>
			for (int8_t i = ik; i <= 0; i--) {
 8002d52:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	753b      	strb	r3, [r7, #20]
 8002d5e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	dddf      	ble.n	8002d26 <getNextList+0xf6>
				}
			}
		}
		if (ik == -1) ik = 0;
 8002d66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d6e:	d101      	bne.n	8002d74 <getNextList+0x144>
 8002d70:	2300      	movs	r3, #0
 8002d72:	75fb      	strb	r3, [r7, #23]
	}
	ret = list[ik].freq;
 8002d74:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002d78:	491c      	ldr	r1, [pc, #112]	; (8002dec <getNextList+0x1bc>)
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002d88:	613b      	str	r3, [r7, #16]
	*band = list[ik].band;
 8002d8a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002d8e:	4917      	ldr	r1, [pc, #92]	; (8002dec <getNextList+0x1bc>)
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	781a      	ldrb	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	701a      	strb	r2, [r3, #0]
	Report(1, "[%s] up=%u ik=%d, fr=%.1f ret=%.1f band=%u\r\n", __func__, up, ik, fr, ret, *band);
 8002da0:	f897 800b 	ldrb.w	r8, [r7, #11]
 8002da4:	f997 6017 	ldrsb.w	r6, [r7, #23]
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f7fd fbdd 	bl	8000568 <__aeabi_f2d>
 8002dae:	4604      	mov	r4, r0
 8002db0:	460d      	mov	r5, r1
 8002db2:	6938      	ldr	r0, [r7, #16]
 8002db4:	f7fd fbd8 	bl	8000568 <__aeabi_f2d>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	7809      	ldrb	r1, [r1, #0]
 8002dc0:	9106      	str	r1, [sp, #24]
 8002dc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002dc6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002dca:	9600      	str	r6, [sp, #0]
 8002dcc:	4643      	mov	r3, r8
 8002dce:	4a08      	ldr	r2, [pc, #32]	; (8002df0 <getNextList+0x1c0>)
 8002dd0:	4908      	ldr	r1, [pc, #32]	; (8002df4 <getNextList+0x1c4>)
 8002dd2:	2001      	movs	r0, #1
 8002dd4:	f000 f9f2 	bl	80031bc <Report>

	return ret;
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	ee07 3a90 	vmov	s15, r3
}
 8002dde:	eeb0 0a67 	vmov.f32	s0, s15
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dea:	bf00      	nop
 8002dec:	2000305c 	.word	0x2000305c
 8002df0:	0801a188 	.word	0x0801a188
 8002df4:	08018928 	.word	0x08018928

08002df8 <showLine>:
//-------------------------------------------------------------------------------------------
void showLine(char *msg, uint16_t lin, int *last_len, bool update)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08a      	sub	sp, #40	; 0x28
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	461a      	mov	r2, r3
 8002e04:	460b      	mov	r3, r1
 8002e06:	817b      	strh	r3, [r7, #10]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	727b      	strb	r3, [r7, #9]
int il = strlen(msg);
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7fd f9e9 	bl	80001e4 <strlen>
 8002e12:	4603      	mov	r3, r0
 8002e14:	617b      	str	r3, [r7, #20]
int xf = ( (SCREEN_WIDTH - (lfnt->FontWidth * il) ) >> 1);// & 0x7f;
 8002e16:	4b2e      	ldr	r3, [pc, #184]	; (8002ed0 <showLine+0xd8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	fb02 f303 	mul.w	r3, r2, r3
 8002e24:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002e28:	105b      	asrs	r3, r3, #1
 8002e2a:	61fb      	str	r3, [r7, #28]
bool yes = false;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	76fb      	strb	r3, [r7, #27]

	if (*last_len > il) {
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	da0d      	bge.n	8002e56 <showLine+0x5e>
		ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 8002e3a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002e3e:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <showLine+0xd8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	785b      	ldrb	r3, [r3, #1]
 8002e44:	b21b      	sxth	r3, r3
 8002e46:	2200      	movs	r2, #0
 8002e48:	9200      	str	r2, [sp, #0]
 8002e4a:	227c      	movs	r2, #124	; 0x7c
 8002e4c:	2002      	movs	r0, #2
 8002e4e:	f7fe fffa 	bl	8001e46 <ST7565_DrawFilledRectangle>
		yes = true;
 8002e52:	2301      	movs	r3, #1
 8002e54:	76fb      	strb	r3, [r7, #27]
	}
	*last_len = il;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	601a      	str	r2, [r3, #0]
	if (*msg > 0x7f) {
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	b25b      	sxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	da03      	bge.n	8002e6e <showLine+0x76>
		xf += il;
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	61fb      	str	r3, [r7, #28]
	}
	if (!yes) ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 8002e6e:	7efb      	ldrb	r3, [r7, #27]
 8002e70:	f083 0301 	eor.w	r3, r3, #1
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00b      	beq.n	8002e92 <showLine+0x9a>
 8002e7a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002e7e:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <showLine+0xd8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	785b      	ldrb	r3, [r3, #1]
 8002e84:	b21b      	sxth	r3, r3
 8002e86:	2200      	movs	r2, #0
 8002e88:	9200      	str	r2, [sp, #0]
 8002e8a:	227c      	movs	r2, #124	; 0x7c
 8002e8c:	2002      	movs	r0, #2
 8002e8e:	f7fe ffda 	bl	8001e46 <ST7565_DrawFilledRectangle>

	if ((!xf) || (xf > (SCREEN_WIDTH - 4))) xf = 1;
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <showLine+0xa6>
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	2b7c      	cmp	r3, #124	; 0x7c
 8002e9c:	dd01      	ble.n	8002ea2 <showLine+0xaa>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	61fb      	str	r3, [r7, #28]
	ST7565_Print(xf, lin, msg, lfnt, 1, PIX_ON);
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	b218      	sxth	r0, r3
 8002ea6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <showLine+0xd8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	9201      	str	r2, [sp, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	9200      	str	r2, [sp, #0]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	f7fe fd6c 	bl	8001994 <ST7565_Print>
	if (update) ST7565_Update();
 8002ebc:	7a7b      	ldrb	r3, [r7, #9]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <showLine+0xce>
 8002ec2:	f7fe fbb7 	bl	8001634 <ST7565_Update>
}
 8002ec6:	bf00      	nop
 8002ec8:	3720      	adds	r7, #32
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20003038 	.word	0x20003038

08002ed4 <errLedOn>:
#endif
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	71fb      	strb	r3, [r7, #7]
	if (on)
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <errLedOn+0x1c>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_SET);//LED ON
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	2108      	movs	r1, #8
 8002ee8:	4806      	ldr	r0, [pc, #24]	; (8002f04 <errLedOn+0x30>)
 8002eea:	f005 ff87 	bl	8008dfc <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
}
 8002eee:	e004      	b.n	8002efa <errLedOn+0x26>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2108      	movs	r1, #8
 8002ef4:	4803      	ldr	r0, [pc, #12]	; (8002f04 <errLedOn+0x30>)
 8002ef6:	f005 ff81 	bl	8008dfc <HAL_GPIO_WritePin>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	48000800 	.word	0x48000800

08002f08 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
	return secCounter;
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <get_secCounter+0x14>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	20001bf8 	.word	0x20001bf8

08002f20 <get_msCounter>:
{
	secCounter++;
}
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
	return msCounter;
 8002f24:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <get_msCounter+0x18>)
 8002f26:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20001c00 	.word	0x20001c00

08002f3c <get_tmr>:
{
	msCounter++;
}
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 8002f44:	f7ff ffe0 	bl	8002f08 <get_secCounter>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4413      	add	r3, r2
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 8002f5e:	f7ff ffd3 	bl	8002f08 <get_secCounter>
 8002f62:	4602      	mov	r2, r0
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4293      	cmp	r3, r2
 8002f68:	bf94      	ite	ls
 8002f6a:	2301      	movls	r3, #1
 8002f6c:	2300      	movhi	r3, #0
 8002f6e:	b2db      	uxtb	r3, r3
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <get_mstmr>:
//------------------------------------------------------------------------------------------
uint64_t get_mstmr(uint64_t hs)
{
 8002f78:	b5b0      	push	{r4, r5, r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	e9c7 0100 	strd	r0, r1, [r7]
	return (get_msCounter() + hs);
 8002f82:	f7ff ffcd 	bl	8002f20 <get_msCounter>
 8002f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f8a:	1884      	adds	r4, r0, r2
 8002f8c:	eb41 0503 	adc.w	r5, r1, r3
 8002f90:	4622      	mov	r2, r4
 8002f92:	462b      	mov	r3, r5
}
 8002f94:	4610      	mov	r0, r2
 8002f96:	4619      	mov	r1, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bdb0      	pop	{r4, r5, r7, pc}

08002f9e <check_mstmr>:
//------------------------------------------------------------------------------------------
bool check_mstmr(uint64_t hs)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	e9c7 0100 	strd	r0, r1, [r7]
	return (get_msCounter() >= hs ? true : false);
 8002fa8:	f7ff ffba 	bl	8002f20 <get_msCounter>
 8002fac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fb0:	4290      	cmp	r0, r2
 8002fb2:	eb71 0303 	sbcs.w	r3, r1, r3
 8002fb6:	bf2c      	ite	cs
 8002fb8:	2301      	movcs	r3, #1
 8002fba:	2300      	movcc	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <set_Date>:

    for (i = 0; i < strlen(st); i++) *(st + i) = toupper(*(st + i));
}
//------------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b094      	sub	sp, #80	; 0x50
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	460a      	mov	r2, r1
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 8002fdc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002fe0:	f107 0320 	add.w	r3, r7, #32
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f010 ff30 	bl	8013e4c <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 8002fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 8002ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 8003002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003004:	b2db      	uxtb	r3, r3
 8003006:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 8003008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300a:	b2da      	uxtb	r2, r3
 800300c:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <set_Date+0xb0>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	4413      	add	r3, r2
 8003012:	b2db      	uxtb	r3, r3
 8003014:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 8003016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003018:	b2db      	uxtb	r3, r3
 800301a:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 800301c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301e:	b2db      	uxtb	r3, r3
 8003020:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8003022:	f107 030c 	add.w	r3, r7, #12
 8003026:	2200      	movs	r2, #0
 8003028:	4619      	mov	r1, r3
 800302a:	4814      	ldr	r0, [pc, #80]	; (800307c <set_Date+0xb4>)
 800302c:	f009 f813 	bl	800c056 <HAL_RTC_SetTime>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <set_Date+0x7e>
 8003036:	4b12      	ldr	r3, [pc, #72]	; (8003080 <set_Date+0xb8>)
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	f043 0308 	orr.w	r3, r3, #8
 800303e:	b29a      	uxth	r2, r3
 8003040:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <set_Date+0xb8>)
 8003042:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 8003044:	e014      	b.n	8003070 <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8003046:	f107 0308 	add.w	r3, r7, #8
 800304a:	2200      	movs	r2, #0
 800304c:	4619      	mov	r1, r3
 800304e:	480b      	ldr	r0, [pc, #44]	; (800307c <set_Date+0xb4>)
 8003050:	f009 f8fa 	bl	800c248 <HAL_RTC_SetDate>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <set_Date+0xa2>
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <set_Date+0xb8>)
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	f043 0308 	orr.w	r3, r3, #8
 8003062:	b29a      	uxth	r2, r3
 8003064:	4b06      	ldr	r3, [pc, #24]	; (8003080 <set_Date+0xb8>)
 8003066:	801a      	strh	r2, [r3, #0]
}
 8003068:	e002      	b.n	8003070 <set_Date+0xa8>
			setDate = true;
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <set_Date+0xbc>)
 800306c:	2201      	movs	r2, #1
 800306e:	701a      	strb	r2, [r3, #0]
}
 8003070:	bf00      	nop
 8003072:	3750      	adds	r7, #80	; 0x50
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	2000200e 	.word	0x2000200e
 800307c:	20000b1c 	.word	0x20000b1c
 8003080:	20001bf4 	.word	0x20001bf4
 8003084:	2000200d 	.word	0x2000200d

08003088 <sec2str>:

	return ep;
}
//------------------------------------------------------------------------------------------
int sec2str(char *st)
{
 8003088:	b590      	push	{r4, r7, lr}
 800308a:	b093      	sub	sp, #76	; 0x4c
 800308c:	af04      	add	r7, sp, #16
 800308e:	6078      	str	r0, [r7, #4]
int ret = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8003094:	4b40      	ldr	r3, [pc, #256]	; (8003198 <sec2str+0x110>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	f083 0301 	eor.w	r3, r3, #1
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d040      	beq.n	8003124 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 80030a2:	f7ff ff31 	bl	8002f08 <get_secCounter>
 80030a6:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 80030a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030aa:	4a3c      	ldr	r2, [pc, #240]	; (800319c <sec2str+0x114>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	0c1b      	lsrs	r3, r3, #16
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 80030b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b6:	4a39      	ldr	r2, [pc, #228]	; (800319c <sec2str+0x114>)
 80030b8:	fba2 1203 	umull	r1, r2, r2, r3
 80030bc:	0c12      	lsrs	r2, r2, #16
 80030be:	4938      	ldr	r1, [pc, #224]	; (80031a0 <sec2str+0x118>)
 80030c0:	fb01 f202 	mul.w	r2, r1, r2
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 80030c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ca:	4a36      	ldr	r2, [pc, #216]	; (80031a4 <sec2str+0x11c>)
 80030cc:	fba2 2303 	umull	r2, r3, r2, r3
 80030d0:	0adb      	lsrs	r3, r3, #11
 80030d2:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 80030d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d6:	4a33      	ldr	r2, [pc, #204]	; (80031a4 <sec2str+0x11c>)
 80030d8:	fba2 1203 	umull	r1, r2, r2, r3
 80030dc:	0ad2      	lsrs	r2, r2, #11
 80030de:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80030e2:	fb01 f202 	mul.w	r2, r1, r2
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 80030ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ec:	4a2e      	ldr	r2, [pc, #184]	; (80031a8 <sec2str+0x120>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 80030f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030f8:	4b2b      	ldr	r3, [pc, #172]	; (80031a8 <sec2str+0x120>)
 80030fa:	fba3 1302 	umull	r1, r3, r3, r2
 80030fe:	0959      	lsrs	r1, r3, #5
 8003100:	460b      	mov	r3, r1
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	1a5b      	subs	r3, r3, r1
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 800310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310e:	9301      	str	r3, [sp, #4]
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003118:	4924      	ldr	r1, [pc, #144]	; (80031ac <sec2str+0x124>)
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f011 fcf8 	bl	8014b10 <siprintf>
 8003120:	6378      	str	r0, [r7, #52]	; 0x34
 8003122:	e034      	b.n	800318e <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8003124:	f107 030c 	add.w	r3, r7, #12
 8003128:	2200      	movs	r2, #0
 800312a:	4619      	mov	r1, r3
 800312c:	4820      	ldr	r0, [pc, #128]	; (80031b0 <sec2str+0x128>)
 800312e:	f009 f912 	bl	800c356 <HAL_RTC_GetDate>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d007      	beq.n	8003148 <sec2str+0xc0>
 8003138:	4b1e      	ldr	r3, [pc, #120]	; (80031b4 <sec2str+0x12c>)
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	f043 0308 	orr.w	r3, r3, #8
 8003140:	b29a      	uxth	r2, r3
 8003142:	4b1c      	ldr	r3, [pc, #112]	; (80031b4 <sec2str+0x12c>)
 8003144:	801a      	strh	r2, [r3, #0]
 8003146:	e022      	b.n	800318e <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 8003148:	f107 0310 	add.w	r3, r7, #16
 800314c:	2200      	movs	r2, #0
 800314e:	4619      	mov	r1, r3
 8003150:	4817      	ldr	r0, [pc, #92]	; (80031b0 <sec2str+0x128>)
 8003152:	f009 f81d 	bl	800c190 <HAL_RTC_GetTime>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d007      	beq.n	800316c <sec2str+0xe4>
 800315c:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <sec2str+0x12c>)
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	f043 0308 	orr.w	r3, r3, #8
 8003164:	b29a      	uxth	r2, r3
 8003166:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <sec2str+0x12c>)
 8003168:	801a      	strh	r2, [r3, #0]
 800316a:	e010      	b.n	800318e <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 800316c:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 800316e:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 8003170:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8003172:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8003174:	7c3b      	ldrb	r3, [r7, #16]
 8003176:	7c7a      	ldrb	r2, [r7, #17]
 8003178:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 800317a:	9102      	str	r1, [sp, #8]
 800317c:	9201      	str	r2, [sp, #4]
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	4623      	mov	r3, r4
 8003182:	4602      	mov	r2, r0
 8003184:	490c      	ldr	r1, [pc, #48]	; (80031b8 <sec2str+0x130>)
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f011 fcc2 	bl	8014b10 <siprintf>
 800318c:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 800318e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003190:	4618      	mov	r0, r3
 8003192:	373c      	adds	r7, #60	; 0x3c
 8003194:	46bd      	mov	sp, r7
 8003196:	bd90      	pop	{r4, r7, pc}
 8003198:	2000200d 	.word	0x2000200d
 800319c:	c22e4507 	.word	0xc22e4507
 80031a0:	00015180 	.word	0x00015180
 80031a4:	91a2b3c5 	.word	0x91a2b3c5
 80031a8:	88888889 	.word	0x88888889
 80031ac:	08018958 	.word	0x08018958
 80031b0:	20000b1c 	.word	0x20000b1c
 80031b4:	20001bf4 	.word	0x20001bf4
 80031b8:	08018970 	.word	0x08018970

080031bc <Report>:
//--------------------------------------------------------------------------------------------
void Report(const uint8_t addTime, const char *fmt, ...)
{
 80031bc:	b40e      	push	{r1, r2, r3}
 80031be:	b590      	push	{r4, r7, lr}
 80031c0:	b086      	sub	sp, #24
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	4603      	mov	r3, r0
 80031c6:	71fb      	strb	r3, [r7, #7]
#if defined(SET_BLE) || defined(SET_AUDIO)
	if(sleep_mode) return;
#endif


	size_t len = MAX_UART_BUF;
 80031c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031cc:	613b      	str	r3, [r7, #16]
	char *buf = &cmdBuf[0];
 80031ce:	4b2e      	ldr	r3, [pc, #184]	; (8003288 <Report+0xcc>)
 80031d0:	60fb      	str	r3, [r7, #12]
			cnt--;
		}
	}
*/
	//if (buf) {
		*buf = '\0';
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	701a      	strb	r2, [r3, #0]
		int dl = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]
		if (addTime) {
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d010      	beq.n	8003204 <Report+0x48>
			dl = sec2str(buf);
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f7ff ff50 	bl	8003088 <sec2str>
 80031e8:	6178      	str	r0, [r7, #20]
			strcat(buf, " | ");
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f7fc fffa 	bl	80001e4 <strlen>
 80031f0:	4603      	mov	r3, r0
 80031f2:	461a      	mov	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4413      	add	r3, r2
 80031f8:	4a24      	ldr	r2, [pc, #144]	; (800328c <Report+0xd0>)
 80031fa:	6810      	ldr	r0, [r2, #0]
 80031fc:	6018      	str	r0, [r3, #0]
			dl += 3;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	3303      	adds	r3, #3
 8003202:	617b      	str	r3, [r7, #20]
		}

		va_list args;
		va_start(args, fmt);
 8003204:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003208:	60bb      	str	r3, [r7, #8]
		vsnprintf(buf + dl, len - dl, fmt, args);
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	18d0      	adds	r0, r2, r3
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	1ad1      	subs	r1, r2, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800321a:	f012 fc03 	bl	8015a24 <vsniprintf>

		uartRdy = false;
 800321e:	4b1c      	ldr	r3, [pc, #112]	; (8003290 <Report+0xd4>)
 8003220:	2200      	movs	r2, #0
 8003222:	701a      	strb	r2, [r3, #0]
		if (osSemaphoreAcquire(itSemHandle, 2000) == osOK) {
 8003224:	4b1b      	ldr	r3, [pc, #108]	; (8003294 <Report+0xd8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800322c:	4618      	mov	r0, r3
 800322e:	f00d f9bd 	bl	80105ac <osSemaphoreAcquire>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d120      	bne.n	800327a <Report+0xbe>
			if (HAL_UART_Transmit_DMA(cmdPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8003238:	4b17      	ldr	r3, [pc, #92]	; (8003298 <Report+0xdc>)
 800323a:	681c      	ldr	r4, [r3, #0]
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f7fc ffd1 	bl	80001e4 <strlen>
 8003242:	4603      	mov	r3, r0
 8003244:	b29b      	uxth	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	68f9      	ldr	r1, [r7, #12]
 800324a:	4620      	mov	r0, r4
 800324c:	f00b fc7c 	bl	800eb48 <HAL_UART_Transmit_DMA>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d006      	beq.n	8003264 <Report+0xa8>
 8003256:	4b11      	ldr	r3, [pc, #68]	; (800329c <Report+0xe0>)
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	f043 0302 	orr.w	r3, r3, #2
 800325e:	b29a      	uxth	r2, r3
 8003260:	4b0e      	ldr	r3, [pc, #56]	; (800329c <Report+0xe0>)
 8003262:	801a      	strh	r2, [r3, #0]
			while (!uartRdy) {} //HAL_Delay(1)
 8003264:	bf00      	nop
 8003266:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <Report+0xd4>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0fa      	beq.n	8003266 <Report+0xaa>
			osSemaphoreRelease(itSemHandle);
 8003270:	4b08      	ldr	r3, [pc, #32]	; (8003294 <Report+0xd8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f00d f9eb 	bl	8010650 <osSemaphoreRelease>
	//	free(buf);
	//} else {
	//	devError |= devMEM;
	//}

}
 800327a:	bf00      	nop
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003284:	b003      	add	sp, #12
 8003286:	4770      	bx	lr
 8003288:	200013f4 	.word	0x200013f4
 800328c:	0801898c 	.word	0x0801898c
 8003290:	20000018 	.word	0x20000018
 8003294:	20000f6c 	.word	0x20000f6c
 8003298:	20000014 	.word	0x20000014
 800329c:	20001bf4 	.word	0x20001bf4

080032a0 <MJDDecode>:
//-------------------------------------------------------------------------------------------
#ifdef SET_RDS
//-------------------------------------------------------------------------------------------
void MJDDecode(unsigned long MJD, uint16_t *y, uint8_t *m, uint8_t *d)
{
 80032a0:	b5b0      	push	{r4, r5, r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	603b      	str	r3, [r7, #0]
unsigned long L = 2400000 + MJD + 68570;
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4b5b      	ldr	r3, [pc, #364]	; (8003420 <MJDDecode+0x180>)
 80032b2:	4413      	add	r3, r2
 80032b4:	61fb      	str	r3, [r7, #28]
unsigned long N = (L * 4) / 146097;
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4a5a      	ldr	r2, [pc, #360]	; (8003424 <MJDDecode+0x184>)
 80032bc:	fba2 2303 	umull	r2, r3, r2, r3
 80032c0:	0bdb      	lsrs	r3, r3, #15
 80032c2:	61bb      	str	r3, [r7, #24]

	L -= ((146097.0 * N + 3) / 4);
 80032c4:	69f8      	ldr	r0, [r7, #28]
 80032c6:	f7fd f92d 	bl	8000524 <__aeabi_ui2d>
 80032ca:	4604      	mov	r4, r0
 80032cc:	460d      	mov	r5, r1
 80032ce:	69b8      	ldr	r0, [r7, #24]
 80032d0:	f7fd f928 	bl	8000524 <__aeabi_ui2d>
 80032d4:	a34e      	add	r3, pc, #312	; (adr r3, 8003410 <MJDDecode+0x170>)
 80032d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032da:	f7fd f99d 	bl	8000618 <__aeabi_dmul>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4610      	mov	r0, r2
 80032e4:	4619      	mov	r1, r3
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	4b4f      	ldr	r3, [pc, #316]	; (8003428 <MJDDecode+0x188>)
 80032ec:	f7fc ffde 	bl	80002ac <__adddf3>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4610      	mov	r0, r2
 80032f6:	4619      	mov	r1, r3
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	4b4b      	ldr	r3, [pc, #300]	; (800342c <MJDDecode+0x18c>)
 80032fe:	f7fd fab5 	bl	800086c <__aeabi_ddiv>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4620      	mov	r0, r4
 8003308:	4629      	mov	r1, r5
 800330a:	f7fc ffcd 	bl	80002a8 <__aeabi_dsub>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	4610      	mov	r0, r2
 8003314:	4619      	mov	r1, r3
 8003316:	f7fd fc57 	bl	8000bc8 <__aeabi_d2uiz>
 800331a:	4603      	mov	r3, r0
 800331c:	61fb      	str	r3, [r7, #28]
	uint16_t year = 4000 * (L + 1) / 1461001;
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	3301      	adds	r3, #1
 8003322:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003326:	fb02 f303 	mul.w	r3, r2, r3
 800332a:	4a41      	ldr	r2, [pc, #260]	; (8003430 <MJDDecode+0x190>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	0d1b      	lsrs	r3, r3, #20
 8003332:	82fb      	strh	r3, [r7, #22]
	L -= (1461 * year / 4 + 31);
 8003334:	8afb      	ldrh	r3, [r7, #22]
 8003336:	f240 52b5 	movw	r2, #1461	; 0x5b5
 800333a:	fb02 f303 	mul.w	r3, r2, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	da00      	bge.n	8003344 <MJDDecode+0xa4>
 8003342:	3303      	adds	r3, #3
 8003344:	109b      	asrs	r3, r3, #2
 8003346:	461a      	mov	r2, r3
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	3b1f      	subs	r3, #31
 800334e:	61fb      	str	r3, [r7, #28]
	uint8_t month = 80.0 * L / 2447.0;
 8003350:	69f8      	ldr	r0, [r7, #28]
 8003352:	f7fd f8e7 	bl	8000524 <__aeabi_ui2d>
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	4b36      	ldr	r3, [pc, #216]	; (8003434 <MJDDecode+0x194>)
 800335c:	f7fd f95c 	bl	8000618 <__aeabi_dmul>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4610      	mov	r0, r2
 8003366:	4619      	mov	r1, r3
 8003368:	a32b      	add	r3, pc, #172	; (adr r3, 8003418 <MJDDecode+0x178>)
 800336a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336e:	f7fd fa7d 	bl	800086c <__aeabi_ddiv>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	4610      	mov	r0, r2
 8003378:	4619      	mov	r1, r3
 800337a:	f7fd fc25 	bl	8000bc8 <__aeabi_d2uiz>
 800337e:	4603      	mov	r3, r0
 8003380:	757b      	strb	r3, [r7, #21]
	uint8_t day = L - 2447 * month / 80;
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	7d7b      	ldrb	r3, [r7, #21]
 8003388:	f640 118f 	movw	r1, #2447	; 0x98f
 800338c:	fb01 f303 	mul.w	r3, r1, r3
 8003390:	4929      	ldr	r1, [pc, #164]	; (8003438 <MJDDecode+0x198>)
 8003392:	fb81 0103 	smull	r0, r1, r1, r3
 8003396:	1149      	asrs	r1, r1, #5
 8003398:	17db      	asrs	r3, r3, #31
 800339a:	1acb      	subs	r3, r1, r3
 800339c:	b2db      	uxtb	r3, r3
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	753b      	strb	r3, [r7, #20]
	L = month / 11;
 80033a2:	7d7b      	ldrb	r3, [r7, #21]
 80033a4:	4a25      	ldr	r2, [pc, #148]	; (800343c <MJDDecode+0x19c>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	08db      	lsrs	r3, r3, #3
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	61fb      	str	r3, [r7, #28]
	month = month + 2 - 12 * L;
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	0052      	lsls	r2, r2, #1
 80033b8:	4413      	add	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	7d7a      	ldrb	r2, [r7, #21]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	3302      	adds	r3, #2
 80033c6:	757b      	strb	r3, [r7, #21]
	year = 100 * (N - 49) + year + L;
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	461a      	mov	r2, r3
 80033ce:	0092      	lsls	r2, r2, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	461a      	mov	r2, r3
 80033d4:	0091      	lsls	r1, r2, #2
 80033d6:	461a      	mov	r2, r3
 80033d8:	460b      	mov	r3, r1
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	b29a      	uxth	r2, r3
 80033e0:	8afb      	ldrh	r3, [r7, #22]
 80033e2:	4413      	add	r3, r2
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	4413      	add	r3, r2
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	f5a3 5399 	sub.w	r3, r3, #4896	; 0x1320
 80033f2:	3b04      	subs	r3, #4
 80033f4:	82fb      	strh	r3, [r7, #22]
	*y = year;
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	8afa      	ldrh	r2, [r7, #22]
 80033fa:	801a      	strh	r2, [r3, #0]
	*m = month;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	7d7a      	ldrb	r2, [r7, #21]
 8003400:	701a      	strb	r2, [r3, #0]
	*d = day;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	7d3a      	ldrb	r2, [r7, #20]
 8003406:	701a      	strb	r2, [r3, #0]
}
 8003408:	bf00      	nop
 800340a:	3720      	adds	r7, #32
 800340c:	46bd      	mov	sp, r7
 800340e:	bdb0      	pop	{r4, r5, r7, pc}
 8003410:	00000000 	.word	0x00000000
 8003414:	4101d588 	.word	0x4101d588
 8003418:	00000000 	.word	0x00000000
 800341c:	40a31e00 	.word	0x40a31e00
 8003420:	0025aada 	.word	0x0025aada
 8003424:	396b06bd 	.word	0x396b06bd
 8003428:	40080000 	.word	0x40080000
 800342c:	40100000 	.word	0x40100000
 8003430:	b7bbe2dd 	.word	0xb7bbe2dd
 8003434:	40540000 	.word	0x40540000
 8003438:	66666667 	.word	0x66666667
 800343c:	ba2e8ba3 	.word	0xba2e8ba3

08003440 <rds_init>:
//-------------------------------------------------------------------------------------------
void rds_init()
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
//
	sID = 0;
 8003444:	4b16      	ldr	r3, [pc, #88]	; (80034a0 <rds_init+0x60>)
 8003446:	2200      	movs	r2, #0
 8003448:	801a      	strh	r2, [r3, #0]
	MaybeThisIDIsReal = 0;
 800344a:	4b16      	ldr	r3, [pc, #88]	; (80034a4 <rds_init+0x64>)
 800344c:	2200      	movs	r2, #0
 800344e:	801a      	strh	r2, [r3, #0]
	IDRepeatCounter = 0;
 8003450:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <rds_init+0x68>)
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
	errLevelB = 0, errLevelC = 0, errLevelD = 0, groupType = 0, groupVer = 0;
 8003456:	4b15      	ldr	r3, [pc, #84]	; (80034ac <rds_init+0x6c>)
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
 800345c:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <rds_init+0x70>)
 800345e:	2200      	movs	r2, #0
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	4b14      	ldr	r3, [pc, #80]	; (80034b4 <rds_init+0x74>)
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
 8003468:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <rds_init+0x78>)
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]
 800346e:	4b13      	ldr	r3, [pc, #76]	; (80034bc <rds_init+0x7c>)
 8003470:	2200      	movs	r2, #0
 8003472:	701a      	strb	r2, [r3, #0]
	PTy = 255;
 8003474:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <rds_init+0x80>)
 8003476:	22ff      	movs	r2, #255	; 0xff
 8003478:	701a      	strb	r2, [r3, #0]
	PTy_printed = false;
 800347a:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <rds_init+0x84>)
 800347c:	2200      	movs	r2, #0
 800347e:	701a      	strb	r2, [r3, #0]
	memset(PSName, 0, sizeof(PSName)); // Значение PSName
 8003480:	2209      	movs	r2, #9
 8003482:	2100      	movs	r1, #0
 8003484:	4810      	ldr	r0, [pc, #64]	; (80034c8 <rds_init+0x88>)
 8003486:	f010 fdc2 	bl	801400e <memset>
	memset(PSName_prev, 0, sizeof(PSName));
 800348a:	2209      	movs	r2, #9
 800348c:	2100      	movs	r1, #0
 800348e:	480f      	ldr	r0, [pc, #60]	; (80034cc <rds_init+0x8c>)
 8003490:	f010 fdbd 	bl	801400e <memset>
	PSNameUpdated = 0;
 8003494:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <rds_init+0x90>)
 8003496:	2200      	movs	r2, #0
 8003498:	701a      	strb	r2, [r3, #0]
//
}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20003432 	.word	0x20003432
 80034a4:	20003434 	.word	0x20003434
 80034a8:	20003436 	.word	0x20003436
 80034ac:	20003437 	.word	0x20003437
 80034b0:	20003438 	.word	0x20003438
 80034b4:	20003439 	.word	0x20003439
 80034b8:	2000343a 	.word	0x2000343a
 80034bc:	2000343b 	.word	0x2000343b
 80034c0:	200001d0 	.word	0x200001d0
 80034c4:	2000343c 	.word	0x2000343c
 80034c8:	20003440 	.word	0x20003440
 80034cc:	2000344c 	.word	0x2000344c
 80034d0:	20003455 	.word	0x20003455

080034d4 <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a05      	ldr	r2, [pc, #20]	; (80034f8 <HAL_UART_TxCpltCallback+0x24>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d102      	bne.n	80034ec <HAL_UART_TxCpltCallback+0x18>
		uartRdy = 1;
 80034e6:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_UART_TxCpltCallback+0x28>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	701a      	strb	r2, [r3, #0]
	else
	if (huart->Instance == USART3) {
		bleRdy = 1;
	}
#endif
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	40004400 	.word	0x40004400
 80034fc:	20000018 	.word	0x20000018

08003500 <HAL_UART_ErrorCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a07      	ldr	r2, [pc, #28]	; (800352c <HAL_UART_ErrorCallback+0x2c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d106      	bne.n	8003520 <HAL_UART_ErrorCallback+0x20>
		devError |= devUART;
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <HAL_UART_ErrorCallback+0x30>)
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	f043 0302 	orr.w	r3, r3, #2
 800351a:	b29a      	uxth	r2, r3
 800351c:	4b04      	ldr	r3, [pc, #16]	; (8003530 <HAL_UART_ErrorCallback+0x30>)
 800351e:	801a      	strh	r2, [r3, #0]
	else
	if (huart->Instance == USART3) {
		devError |= devBLE;
	}
#endif
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	40004400 	.word	0x40004400
 8003530:	20001bf4 	.word	0x20001bf4

08003534 <HAL_UART_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003534:	b590      	push	{r4, r7, lr}
 8003536:	b08d      	sub	sp, #52	; 0x34
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
		//
		if (HAL_UART_Receive_IT(huart, &rxbByte, 1) != HAL_OK) devError |= devBLE;
	}
	else
#endif
	if (huart->Instance == USART2) {
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4aae      	ldr	r2, [pc, #696]	; (80037fc <HAL_UART_RxCpltCallback+0x2c8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	f040 8266 	bne.w	8003a14 <HAL_UART_RxCpltCallback+0x4e0>
		rxBuf[rxInd++] = (char)rxByte;
 8003548:	4bad      	ldr	r3, [pc, #692]	; (8003800 <HAL_UART_RxCpltCallback+0x2cc>)
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	b291      	uxth	r1, r2
 8003550:	4aab      	ldr	r2, [pc, #684]	; (8003800 <HAL_UART_RxCpltCallback+0x2cc>)
 8003552:	8011      	strh	r1, [r2, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	4bab      	ldr	r3, [pc, #684]	; (8003804 <HAL_UART_RxCpltCallback+0x2d0>)
 8003558:	7819      	ldrb	r1, [r3, #0]
 800355a:	4bab      	ldr	r3, [pc, #684]	; (8003808 <HAL_UART_RxCpltCallback+0x2d4>)
 800355c:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 800355e:	4ba9      	ldr	r3, [pc, #676]	; (8003804 <HAL_UART_RxCpltCallback+0x2d0>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b0a      	cmp	r3, #10
 8003564:	f040 8247 	bne.w	80039f6 <HAL_UART_RxCpltCallback+0x4c2>
			rxBuf[--rxInd] = '\0';
 8003568:	4ba5      	ldr	r3, [pc, #660]	; (8003800 <HAL_UART_RxCpltCallback+0x2cc>)
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	4ba3      	ldr	r3, [pc, #652]	; (8003800 <HAL_UART_RxCpltCallback+0x2cc>)
 8003572:	801a      	strh	r2, [r3, #0]
 8003574:	4ba2      	ldr	r3, [pc, #648]	; (8003800 <HAL_UART_RxCpltCallback+0x2cc>)
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	4ba3      	ldr	r3, [pc, #652]	; (8003808 <HAL_UART_RxCpltCallback+0x2d4>)
 800357c:	2100      	movs	r1, #0
 800357e:	5499      	strb	r1, [r3, r2]

			int i, ev = -1;
 8003580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003584:	60bb      	str	r3, [r7, #8]
			if (strlen(rxBuf) > 2) {
 8003586:	48a0      	ldr	r0, [pc, #640]	; (8003808 <HAL_UART_RxCpltCallback+0x2d4>)
 8003588:	f7fc fe2c 	bl	80001e4 <strlen>
 800358c:	4603      	mov	r3, r0
 800358e:	2b02      	cmp	r3, #2
 8003590:	f240 822b 	bls.w	80039ea <HAL_UART_RxCpltCallback+0x4b6>
						devError |= devMEM;
					}
					ev = -2;
				} else {
#endif
					for (i = 0; i < MAX_CMDS; i++) {
 8003594:	2300      	movs	r3, #0
 8003596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003598:	e205      	b.n	80039a6 <HAL_UART_RxCpltCallback+0x472>
						if (!strncmp(rxBuf, s_cmds[i], strlen(s_cmds[i]))) {
 800359a:	4a9c      	ldr	r2, [pc, #624]	; (800380c <HAL_UART_RxCpltCallback+0x2d8>)
 800359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80035a2:	4a9a      	ldr	r2, [pc, #616]	; (800380c <HAL_UART_RxCpltCallback+0x2d8>)
 80035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fc fe1a 	bl	80001e4 <strlen>
 80035b0:	4603      	mov	r3, r0
 80035b2:	461a      	mov	r2, r3
 80035b4:	4621      	mov	r1, r4
 80035b6:	4894      	ldr	r0, [pc, #592]	; (8003808 <HAL_UART_RxCpltCallback+0x2d4>)
 80035b8:	f011 fb22 	bl	8014c00 <strncmp>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f040 81ee 	bne.w	80039a0 <HAL_UART_RxCpltCallback+0x46c>
							char *uk = rxBuf + strlen(s_cmds[i]);
 80035c4:	4a91      	ldr	r2, [pc, #580]	; (800380c <HAL_UART_RxCpltCallback+0x2d8>)
 80035c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fc fe09 	bl	80001e4 <strlen>
 80035d2:	4603      	mov	r3, r0
 80035d4:	4a8c      	ldr	r2, [pc, #560]	; (8003808 <HAL_UART_RxCpltCallback+0x2d4>)
 80035d6:	4413      	add	r3, r2
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
							ev = -1;
 80035da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035de:	60bb      	str	r3, [r7, #8]
							switch (i) {
 80035e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e2:	2b1a      	cmp	r3, #26
 80035e4:	f200 81e4 	bhi.w	80039b0 <HAL_UART_RxCpltCallback+0x47c>
 80035e8:	a201      	add	r2, pc, #4	; (adr r2, 80035f0 <HAL_UART_RxCpltCallback+0xbc>)
 80035ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ee:	bf00      	nop
 80035f0:	08003797 	.word	0x08003797
 80035f4:	08003797 	.word	0x08003797
 80035f8:	0800379d 	.word	0x0800379d
 80035fc:	080039b1 	.word	0x080039b1
 8003600:	080037ef 	.word	0x080037ef
 8003604:	080037ef 	.word	0x080037ef
 8003608:	08003943 	.word	0x08003943
 800360c:	080038a7 	.word	0x080038a7
 8003610:	080039b1 	.word	0x080039b1
 8003614:	08003797 	.word	0x08003797
 8003618:	08003797 	.word	0x08003797
 800361c:	08003755 	.word	0x08003755
 8003620:	08003711 	.word	0x08003711
 8003624:	08003689 	.word	0x08003689
 8003628:	08003797 	.word	0x08003797
 800362c:	080036f3 	.word	0x080036f3
 8003630:	08003755 	.word	0x08003755
 8003634:	0800365d 	.word	0x0800365d
 8003638:	08003797 	.word	0x08003797
 800363c:	080039b1 	.word	0x080039b1
 8003640:	08003797 	.word	0x08003797
 8003644:	080039b1 	.word	0x080039b1
 8003648:	08003797 	.word	0x08003797
 800364c:	08003797 	.word	0x08003797
 8003650:	08003797 	.word	0x08003797
 8003654:	08003797 	.word	0x08003797
 8003658:	08003797 	.word	0x08003797
								case cmdBand://"band:2"
									if (strlen(uk) >= 1) {
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 818b 	beq.w	800397c <HAL_UART_RxCpltCallback+0x448>
										newBand = atol(uk);
 8003666:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003668:	f010 faef 	bl	8013c4a <atol>
 800366c:	4603      	mov	r3, r0
 800366e:	b2da      	uxtb	r2, r3
 8003670:	4b67      	ldr	r3, [pc, #412]	; (8003810 <HAL_UART_RxCpltCallback+0x2dc>)
 8003672:	701a      	strb	r2, [r3, #0]
										if (newBand != Band) {
 8003674:	4b66      	ldr	r3, [pc, #408]	; (8003810 <HAL_UART_RxCpltCallback+0x2dc>)
 8003676:	781a      	ldrb	r2, [r3, #0]
 8003678:	4b66      	ldr	r3, [pc, #408]	; (8003814 <HAL_UART_RxCpltCallback+0x2e0>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	f000 817d 	beq.w	800397c <HAL_UART_RxCpltCallback+0x448>
											ev = i;
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003684:	60bb      	str	r3, [r7, #8]
										}
									}
								break;
 8003686:	e179      	b.n	800397c <HAL_UART_RxCpltCallback+0x448>
								case cmdVol:
									if (strlen(uk) >= 1) {
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 8177 	beq.w	8003980 <HAL_UART_RxCpltCallback+0x44c>
										uint8_t nv = Volume;
 8003692:	4b61      	ldr	r3, [pc, #388]	; (8003818 <HAL_UART_RxCpltCallback+0x2e4>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
										if (strstr(uk, "up")) {
 800369a:	4960      	ldr	r1, [pc, #384]	; (800381c <HAL_UART_RxCpltCallback+0x2e8>)
 800369c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800369e:	f011 fac3 	bl	8014c28 <strstr>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <HAL_UART_RxCpltCallback+0x180>
											nv++;
 80036a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036ac:	3301      	adds	r3, #1
 80036ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036b2:	e012      	b.n	80036da <HAL_UART_RxCpltCallback+0x1a6>
										} else if (strstr(uk, "down")) {
 80036b4:	495a      	ldr	r1, [pc, #360]	; (8003820 <HAL_UART_RxCpltCallback+0x2ec>)
 80036b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036b8:	f011 fab6 	bl	8014c28 <strstr>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_UART_RxCpltCallback+0x19a>
											nv--;
 80036c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036c6:	3b01      	subs	r3, #1
 80036c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036cc:	e005      	b.n	80036da <HAL_UART_RxCpltCallback+0x1a6>
										} else {
											nv = (uint8_t)atol(uk);
 80036ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036d0:	f010 fabb 	bl	8013c4a <atol>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
										}
										if ((nv >= 0) && (nv <= 15)) {
 80036da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036de:	2b0f      	cmp	r3, #15
 80036e0:	f200 814e 	bhi.w	8003980 <HAL_UART_RxCpltCallback+0x44c>
											newVolume = nv;
 80036e4:	4a4f      	ldr	r2, [pc, #316]	; (8003824 <HAL_UART_RxCpltCallback+0x2f0>)
 80036e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036ea:	7013      	strb	r3, [r2, #0]
											ev = i;
 80036ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ee:	60bb      	str	r3, [r7, #8]
										}
									}
								break;
 80036f0:	e146      	b.n	8003980 <HAL_UART_RxCpltCallback+0x44c>
								case cmdBass:
									if (strlen(uk) >= 1) {
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 8144 	beq.w	8003984 <HAL_UART_RxCpltCallback+0x450>
										newBassBoost = (uint8_t)atol(uk);
 80036fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036fe:	f010 faa4 	bl	8013c4a <atol>
 8003702:	4603      	mov	r3, r0
 8003704:	b2da      	uxtb	r2, r3
 8003706:	4b48      	ldr	r3, [pc, #288]	; (8003828 <HAL_UART_RxCpltCallback+0x2f4>)
 8003708:	701a      	strb	r2, [r3, #0]
										ev = i;
 800370a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370c:	60bb      	str	r3, [r7, #8]
									}
								break;
 800370e:	e139      	b.n	8003984 <HAL_UART_RxCpltCallback+0x450>
								case cmdFreq://"freq:95.1"
									if (strlen(uk) >= 2) {
 8003710:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003712:	f7fc fd67 	bl	80001e4 <strlen>
 8003716:	4603      	mov	r3, r0
 8003718:	2b01      	cmp	r3, #1
 800371a:	f240 8135 	bls.w	8003988 <HAL_UART_RxCpltCallback+0x454>
										newFreq = (float)atof(uk);
 800371e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003720:	f010 fa8c 	bl	8013c3c <atof>
 8003724:	ec53 2b10 	vmov	r2, r3, d0
 8003728:	4610      	mov	r0, r2
 800372a:	4619      	mov	r1, r3
 800372c:	f7fd fa6c 	bl	8000c08 <__aeabi_d2f>
 8003730:	4603      	mov	r3, r0
 8003732:	4a3e      	ldr	r2, [pc, #248]	; (800382c <HAL_UART_RxCpltCallback+0x2f8>)
 8003734:	6013      	str	r3, [r2, #0]
										if (newFreq != Freq) {
 8003736:	4b3d      	ldr	r3, [pc, #244]	; (800382c <HAL_UART_RxCpltCallback+0x2f8>)
 8003738:	ed93 7a00 	vldr	s14, [r3]
 800373c:	4b3c      	ldr	r3, [pc, #240]	; (8003830 <HAL_UART_RxCpltCallback+0x2fc>)
 800373e:	edd3 7a00 	vldr	s15, [r3]
 8003742:	eeb4 7a67 	vcmp.f32	s14, s15
 8003746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374a:	f000 811d 	beq.w	8003988 <HAL_UART_RxCpltCallback+0x454>
											ev = i;
 800374e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003750:	60bb      	str	r3, [r7, #8]
										}
									}
								break;
 8003752:	e119      	b.n	8003988 <HAL_UART_RxCpltCallback+0x454>
								case cmdScan://"scan"
								case cmdList://"list"
									seek_up = 1;
 8003754:	4b37      	ldr	r3, [pc, #220]	; (8003834 <HAL_UART_RxCpltCallback+0x300>)
 8003756:	2201      	movs	r2, #1
 8003758:	701a      	strb	r2, [r3, #0]
									ev = i;
 800375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375c:	60bb      	str	r3, [r7, #8]
									char *uki = strchr(uk, ':');
 800375e:	213a      	movs	r1, #58	; 0x3a
 8003760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003762:	f011 fa38 	bl	8014bd6 <strchr>
 8003766:	6238      	str	r0, [r7, #32]
									if (uki) {
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 810e 	beq.w	800398c <HAL_UART_RxCpltCallback+0x458>
										if ((*(char *)(uki + 1) == '0') || strstr(uki + 1, "down")) seek_up = 0;
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	3301      	adds	r3, #1
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b30      	cmp	r3, #48	; 0x30
 8003778:	d009      	beq.n	800378e <HAL_UART_RxCpltCallback+0x25a>
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	3301      	adds	r3, #1
 800377e:	4928      	ldr	r1, [pc, #160]	; (8003820 <HAL_UART_RxCpltCallback+0x2ec>)
 8003780:	4618      	mov	r0, r3
 8003782:	f011 fa51 	bl	8014c28 <strstr>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 80ff 	beq.w	800398c <HAL_UART_RxCpltCallback+0x458>
 800378e:	4b29      	ldr	r3, [pc, #164]	; (8003834 <HAL_UART_RxCpltCallback+0x300>)
 8003790:	2200      	movs	r2, #0
 8003792:	701a      	strb	r2, [r3, #0]
									}
								break;
 8003794:	e0fa      	b.n	800398c <HAL_UART_RxCpltCallback+0x458>
								case cmdAck://"qack"
								case cmdCmd://"qcmd"
#ifdef SET_IRED
								case cmdiRed://"ired"
#endif
									ev = i;
 8003796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003798:	60bb      	str	r3, [r7, #8]
								break;
 800379a:	e100      	b.n	800399e <HAL_UART_RxCpltCallback+0x46a>
								case cmdEpoch://"epoch:1657191323"
									if (strlen(uk) >= 10) {
 800379c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800379e:	f7fc fd21 	bl	80001e4 <strlen>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b09      	cmp	r3, #9
 80037a6:	f240 80f3 	bls.w	8003990 <HAL_UART_RxCpltCallback+0x45c>
										char *uki = strchr(uk, ':');
 80037aa:	213a      	movs	r1, #58	; 0x3a
 80037ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037ae:	f011 fa12 	bl	8014bd6 <strchr>
 80037b2:	60f8      	str	r0, [r7, #12]
										if (uki) {
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00c      	beq.n	80037d4 <HAL_UART_RxCpltCallback+0x2a0>
											tZone = (uint8_t)atol(uki + 1);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	3301      	adds	r3, #1
 80037be:	4618      	mov	r0, r3
 80037c0:	f010 fa43 	bl	8013c4a <atol>
 80037c4:	4603      	mov	r3, r0
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <HAL_UART_RxCpltCallback+0x304>)
 80037ca:	701a      	strb	r2, [r3, #0]
											*uki = '\0';
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	701a      	strb	r2, [r3, #0]
 80037d2:	e002      	b.n	80037da <HAL_UART_RxCpltCallback+0x2a6>
										} else {
											tZone = 0;
 80037d4:	4b18      	ldr	r3, [pc, #96]	; (8003838 <HAL_UART_RxCpltCallback+0x304>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	701a      	strb	r2, [r3, #0]
										}
										epoch = (uint32_t)atol(uk);
 80037da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037dc:	f010 fa35 	bl	8013c4a <atol>
 80037e0:	4603      	mov	r3, r0
 80037e2:	461a      	mov	r2, r3
 80037e4:	4b15      	ldr	r3, [pc, #84]	; (800383c <HAL_UART_RxCpltCallback+0x308>)
 80037e6:	601a      	str	r2, [r3, #0]
										ev = i;
 80037e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ea:	60bb      	str	r3, [r7, #8]
									}
								break;
 80037ec:	e0d0      	b.n	8003990 <HAL_UART_RxCpltCallback+0x45c>
								case cmdsRead:// read:0
								case cmdsErase:// erase:0
									if (i == cmdsRead) cmd_sector = cmdsRead;
 80037ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d127      	bne.n	8003844 <HAL_UART_RxCpltCallback+0x310>
 80037f4:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_UART_RxCpltCallback+0x30c>)
 80037f6:	2204      	movs	r2, #4
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e026      	b.n	800384a <HAL_UART_RxCpltCallback+0x316>
 80037fc:	40004400 	.word	0x40004400
 8003800:	20001c0a 	.word	0x20001c0a
 8003804:	20001c08 	.word	0x20001c08
 8003808:	20001c0c 	.word	0x20001c0c
 800380c:	20000020 	.word	0x20000020
 8003810:	2000012d 	.word	0x2000012d
 8003814:	2000012c 	.word	0x2000012c
 8003818:	2000012f 	.word	0x2000012f
 800381c:	08018990 	.word	0x08018990
 8003820:	08018994 	.word	0x08018994
 8003824:	20000130 	.word	0x20000130
 8003828:	2000304b 	.word	0x2000304b
 800382c:	20000128 	.word	0x20000128
 8003830:	20000124 	.word	0x20000124
 8003834:	2000012e 	.word	0x2000012e
 8003838:	2000200e 	.word	0x2000200e
 800383c:	2000001c 	.word	0x2000001c
 8003840:	20000118 	.word	0x20000118
												  else cmd_sector = cmdsErase;
 8003844:	4b75      	ldr	r3, [pc, #468]	; (8003a1c <HAL_UART_RxCpltCallback+0x4e8>)
 8003846:	2205      	movs	r2, #5
 8003848:	601a      	str	r2, [r3, #0]
									if (*uk == ':') {
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b3a      	cmp	r3, #58	; 0x3a
 8003850:	f040 80a0 	bne.w	8003994 <HAL_UART_RxCpltCallback+0x460>
										int sek = atoi(++uk);
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	3301      	adds	r3, #1
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
 800385a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800385c:	f010 f9f1 	bl	8013c42 <atoi>
 8003860:	6138      	str	r0, [r7, #16]
										if ( ((sek >= 0) && (sek < W25qxx_getSectorCount())) || (sek == -1) ) {
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	db05      	blt.n	8003874 <HAL_UART_RxCpltCallback+0x340>
 8003868:	f004 f990 	bl	8007b8c <W25qxx_getSectorCount>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	429a      	cmp	r2, r3
 8003872:	d804      	bhi.n	800387e <HAL_UART_RxCpltCallback+0x34a>
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800387a:	f040 808b 	bne.w	8003994 <HAL_UART_RxCpltCallback+0x460>
											adr_sector = sek;
 800387e:	4a68      	ldr	r2, [pc, #416]	; (8003a20 <HAL_UART_RxCpltCallback+0x4ec>)
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	6013      	str	r3, [r2, #0]
											offset_sector = 0;
 8003884:	4b67      	ldr	r3, [pc, #412]	; (8003a24 <HAL_UART_RxCpltCallback+0x4f0>)
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]
											if (sek == -1) {
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003890:	d106      	bne.n	80038a0 <HAL_UART_RxCpltCallback+0x36c>
												if (cmd_sector == cmdsErase) ev = i;
 8003892:	4b62      	ldr	r3, [pc, #392]	; (8003a1c <HAL_UART_RxCpltCallback+0x4e8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b05      	cmp	r3, #5
 8003898:	d17c      	bne.n	8003994 <HAL_UART_RxCpltCallback+0x460>
 800389a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389c:	60bb      	str	r3, [r7, #8]
											} else {
												ev = i;
											}
										}
									}
								break;
 800389e:	e079      	b.n	8003994 <HAL_UART_RxCpltCallback+0x460>
												ev = i;
 80038a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a2:	60bb      	str	r3, [r7, #8]
								break;
 80038a4:	e076      	b.n	8003994 <HAL_UART_RxCpltCallback+0x460>
								case cmdsWrite:// write:0:a5 | write:0:a5:256
									if (*uk == ':') {
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b3a      	cmp	r3, #58	; 0x3a
 80038ac:	d174      	bne.n	8003998 <HAL_UART_RxCpltCallback+0x464>
										uk++;
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	3301      	adds	r3, #1
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
										int sek = atoi(uk);
 80038b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038b6:	f010 f9c4 	bl	8013c42 <atoi>
 80038ba:	61f8      	str	r0, [r7, #28]
										if ((sek >= 0) && (sek < W25qxx_getSectorCount())) {
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	db6a      	blt.n	8003998 <HAL_UART_RxCpltCallback+0x464>
 80038c2:	f004 f963 	bl	8007b8c <W25qxx_getSectorCount>
 80038c6:	4602      	mov	r2, r0
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d964      	bls.n	8003998 <HAL_UART_RxCpltCallback+0x464>
											char *ukn = strchr(uk, ':');
 80038ce:	213a      	movs	r1, #58	; 0x3a
 80038d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038d2:	f011 f980 	bl	8014bd6 <strchr>
 80038d6:	61b8      	str	r0, [r7, #24]
											if (ukn) {
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d05c      	beq.n	8003998 <HAL_UART_RxCpltCallback+0x464>
												len_write = -1;
 80038de:	4b52      	ldr	r3, [pc, #328]	; (8003a28 <HAL_UART_RxCpltCallback+0x4f4>)
 80038e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038e4:	601a      	str	r2, [r3, #0]
												ukn++;
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	3301      	adds	r3, #1
 80038ea:	61bb      	str	r3, [r7, #24]
												byte_write = hexToBin(ukn);
 80038ec:	69b8      	ldr	r0, [r7, #24]
 80038ee:	f7ff f8df 	bl	8002ab0 <hexToBin>
 80038f2:	4603      	mov	r3, r0
 80038f4:	461a      	mov	r2, r3
 80038f6:	4b4d      	ldr	r3, [pc, #308]	; (8003a2c <HAL_UART_RxCpltCallback+0x4f8>)
 80038f8:	701a      	strb	r2, [r3, #0]
												uk = strchr(ukn, ':');
 80038fa:	213a      	movs	r1, #58	; 0x3a
 80038fc:	69b8      	ldr	r0, [r7, #24]
 80038fe:	f011 f96a 	bl	8014bd6 <strchr>
 8003902:	6278      	str	r0, [r7, #36]	; 0x24
												if (uk) {
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	2b00      	cmp	r3, #0
 8003908:	d012      	beq.n	8003930 <HAL_UART_RxCpltCallback+0x3fc>
													int l = atoi(++uk);
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	3301      	adds	r3, #1
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
 8003910:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003912:	f010 f996 	bl	8013c42 <atoi>
 8003916:	6178      	str	r0, [r7, #20]
													if ((l > 0) && (l < W25qxx_getSectorSize())) len_write = l;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	2b00      	cmp	r3, #0
 800391c:	dd08      	ble.n	8003930 <HAL_UART_RxCpltCallback+0x3fc>
 800391e:	f004 f941 	bl	8007ba4 <W25qxx_getSectorSize>
 8003922:	4602      	mov	r2, r0
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	429a      	cmp	r2, r3
 8003928:	d902      	bls.n	8003930 <HAL_UART_RxCpltCallback+0x3fc>
 800392a:	4a3f      	ldr	r2, [pc, #252]	; (8003a28 <HAL_UART_RxCpltCallback+0x4f4>)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	6013      	str	r3, [r2, #0]
												}
												adr_sector = sek;
 8003930:	4a3b      	ldr	r2, [pc, #236]	; (8003a20 <HAL_UART_RxCpltCallback+0x4ec>)
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	6013      	str	r3, [r2, #0]
												offset_sector = 0;
 8003936:	4b3b      	ldr	r3, [pc, #236]	; (8003a24 <HAL_UART_RxCpltCallback+0x4f0>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
												ev = i;//flag_sector = true;
 800393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393e:	60bb      	str	r3, [r7, #8]
											}
										}
									}
								break;
 8003940:	e02a      	b.n	8003998 <HAL_UART_RxCpltCallback+0x464>
								case cmdsNext:// next
									if ((last_cmd_sector == cmdsRead) || (last_cmd_sector == cmdsNext)) {
 8003942:	4b3b      	ldr	r3, [pc, #236]	; (8003a30 <HAL_UART_RxCpltCallback+0x4fc>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b04      	cmp	r3, #4
 8003948:	d003      	beq.n	8003952 <HAL_UART_RxCpltCallback+0x41e>
 800394a:	4b39      	ldr	r3, [pc, #228]	; (8003a30 <HAL_UART_RxCpltCallback+0x4fc>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b06      	cmp	r3, #6
 8003950:	d124      	bne.n	800399c <HAL_UART_RxCpltCallback+0x468>
										if ((offset_sector + list_sector) < W25qxx_getSectorSize()) {
 8003952:	4b34      	ldr	r3, [pc, #208]	; (8003a24 <HAL_UART_RxCpltCallback+0x4f0>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4b37      	ldr	r3, [pc, #220]	; (8003a34 <HAL_UART_RxCpltCallback+0x500>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4413      	add	r3, r2
 800395c:	461c      	mov	r4, r3
 800395e:	f004 f921 	bl	8007ba4 <W25qxx_getSectorSize>
 8003962:	4603      	mov	r3, r0
 8003964:	429c      	cmp	r4, r3
 8003966:	d219      	bcs.n	800399c <HAL_UART_RxCpltCallback+0x468>
											offset_sector += list_sector;
 8003968:	4b2e      	ldr	r3, [pc, #184]	; (8003a24 <HAL_UART_RxCpltCallback+0x4f0>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b31      	ldr	r3, [pc, #196]	; (8003a34 <HAL_UART_RxCpltCallback+0x500>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4413      	add	r3, r2
 8003972:	4a2c      	ldr	r2, [pc, #176]	; (8003a24 <HAL_UART_RxCpltCallback+0x4f0>)
 8003974:	6013      	str	r3, [r2, #0]
											ev = i;//flag_sector = true;
 8003976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003978:	60bb      	str	r3, [r7, #8]
										}
									}
								break;
 800397a:	e00f      	b.n	800399c <HAL_UART_RxCpltCallback+0x468>
								break;
 800397c:	bf00      	nop
 800397e:	e017      	b.n	80039b0 <HAL_UART_RxCpltCallback+0x47c>
								break;
 8003980:	bf00      	nop
 8003982:	e015      	b.n	80039b0 <HAL_UART_RxCpltCallback+0x47c>
								break;
 8003984:	bf00      	nop
 8003986:	e013      	b.n	80039b0 <HAL_UART_RxCpltCallback+0x47c>
								break;
 8003988:	bf00      	nop
 800398a:	e011      	b.n	80039b0 <HAL_UART_RxCpltCallback+0x47c>
								break;
 800398c:	bf00      	nop
 800398e:	e00f      	b.n	80039b0 <HAL_UART_RxCpltCallback+0x47c>
								break;
 8003990:	bf00      	nop
 8003992:	e00d      	b.n	80039b0 <HAL_UART_RxCpltCallback+0x47c>
								break;
 8003994:	bf00      	nop
 8003996:	e00b      	b.n	80039b0 <HAL_UART_RxCpltCallback+0x47c>
								break;
 8003998:	bf00      	nop
 800399a:	e009      	b.n	80039b0 <HAL_UART_RxCpltCallback+0x47c>
								break;
 800399c:	bf00      	nop
							}
							break;
 800399e:	e007      	b.n	80039b0 <HAL_UART_RxCpltCallback+0x47c>
					for (i = 0; i < MAX_CMDS; i++) {
 80039a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a2:	3301      	adds	r3, #1
 80039a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a8:	2b1d      	cmp	r3, #29
 80039aa:	f77f adf6 	ble.w	800359a <HAL_UART_RxCpltCallback+0x66>
 80039ae:	e000      	b.n	80039b2 <HAL_UART_RxCpltCallback+0x47e>
							break;
 80039b0:	bf00      	nop
					}
#if defined(SET_BLE) || defined(SET_AUDIO)
				}
#endif
				//
				if (ev != -2) {
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f113 0f02 	cmn.w	r3, #2
 80039b8:	d017      	beq.n	80039ea <HAL_UART_RxCpltCallback+0x4b6>
					if (ev == -1) ev = cmdErr;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039c0:	d101      	bne.n	80039c6 <HAL_UART_RxCpltCallback+0x492>
 80039c2:	2303      	movs	r3, #3
 80039c4:	60bb      	str	r3, [r7, #8]
					if (osMessageQueuePut(evtQueHandle, (const void *)&ev, 0, 0) != osOK) devError |= devEVT;
 80039c6:	4b1c      	ldr	r3, [pc, #112]	; (8003a38 <HAL_UART_RxCpltCallback+0x504>)
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	f107 0108 	add.w	r1, r7, #8
 80039ce:	2300      	movs	r3, #0
 80039d0:	2200      	movs	r2, #0
 80039d2:	f00c fef5 	bl	80107c0 <osMessageQueuePut>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d006      	beq.n	80039ea <HAL_UART_RxCpltCallback+0x4b6>
 80039dc:	4b17      	ldr	r3, [pc, #92]	; (8003a3c <HAL_UART_RxCpltCallback+0x508>)
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	f043 0310 	orr.w	r3, r3, #16
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	4b15      	ldr	r3, [pc, #84]	; (8003a3c <HAL_UART_RxCpltCallback+0x508>)
 80039e8:	801a      	strh	r2, [r3, #0]
				}
				//
			}

			rxInd = 0;
 80039ea:	4b15      	ldr	r3, [pc, #84]	; (8003a40 <HAL_UART_RxCpltCallback+0x50c>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 80039f0:	4b14      	ldr	r3, [pc, #80]	; (8003a44 <HAL_UART_RxCpltCallback+0x510>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_UART_Receive_IT(huart, &rxByte, 1) != HAL_OK) devError |= devUART;
 80039f6:	2201      	movs	r2, #1
 80039f8:	4913      	ldr	r1, [pc, #76]	; (8003a48 <HAL_UART_RxCpltCallback+0x514>)
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f00b f84e 	bl	800ea9c <HAL_UART_Receive_IT>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d006      	beq.n	8003a14 <HAL_UART_RxCpltCallback+0x4e0>
 8003a06:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <HAL_UART_RxCpltCallback+0x508>)
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	f043 0302 	orr.w	r3, r3, #2
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <HAL_UART_RxCpltCallback+0x508>)
 8003a12:	801a      	strh	r2, [r3, #0]
	}
}
 8003a14:	bf00      	nop
 8003a16:	3734      	adds	r7, #52	; 0x34
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd90      	pop	{r4, r7, pc}
 8003a1c:	20000118 	.word	0x20000118
 8003a20:	20002010 	.word	0x20002010
 8003a24:	20002014 	.word	0x20002014
 8003a28:	2000201c 	.word	0x2000201c
 8003a2c:	20000120 	.word	0x20000120
 8003a30:	2000011c 	.word	0x2000011c
 8003a34:	20002018 	.word	0x20002018
 8003a38:	20000f60 	.word	0x20000f60
 8003a3c:	20001bf4 	.word	0x20001bf4
 8003a40:	20001c0a 	.word	0x20001c0a
 8003a44:	20001c0c 	.word	0x20001c0c
 8003a48:	20001c08 	.word	0x20001c08

08003a4c <spiDone>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//    Функция устанавливает в начальное состояние 'готов' служебные параметры порта SPI1:
//
void spiDone(SPI_HandleTypeDef *hspi)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
#ifdef SET_W25FLASH
	if (hspi->Instance == SPI2) {
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a0a      	ldr	r2, [pc, #40]	; (8003a84 <spiDone+0x38>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d105      	bne.n	8003a6a <spiDone+0x1e>
		W25_UNSELECT();
 8003a5e:	f003 feb9 	bl	80077d4 <W25_UNSELECT>
		spiRdy = 1;
 8003a62:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <spiDone+0x3c>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	701a      	strb	r2, [r3, #0]
	else
	if (hspi->Instance == SPI1) {
		lcdRdy = 1;
	}
#endif
}
 8003a68:	e007      	b.n	8003a7a <spiDone+0x2e>
	if (hspi->Instance == SPI1) {
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a07      	ldr	r2, [pc, #28]	; (8003a8c <spiDone+0x40>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d102      	bne.n	8003a7a <spiDone+0x2e>
		lcdRdy = 1;
 8003a74:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <spiDone+0x44>)
 8003a76:	2201      	movs	r2, #1
 8003a78:	701a      	strb	r2, [r3, #0]
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40003800 	.word	0x40003800
 8003a88:	20000114 	.word	0x20000114
 8003a8c:	40013000 	.word	0x40013000
 8003a90:	20000000 	.word	0x20000000

08003a94 <HAL_SPI_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема данных от порта SPI
//
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff ffd5 	bl	8003a4c <spiDone>
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении передачи данных в порт SPI
//
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff ffca 	bl	8003a4c <spiDone>
}
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_SPI_TxRxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема/передачи данных порта SPI
//
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff ffbf 	bl	8003a4c <spiDone>
}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <HAL_SPI_ErrorCallback>:
//--------------------------------------------------------------------------------------------
//    CallBack функция, вызывается при возникновении ошибки у модуля SPI
//
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff ffb3 	bl	8003a4c <spiDone>
	devError |= devSPI;
 8003ae6:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HAL_SPI_ErrorCallback+0x24>)
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	4b02      	ldr	r3, [pc, #8]	; (8003afc <HAL_SPI_ErrorCallback+0x24>)
 8003af2:	801a      	strh	r2, [r3, #0]
}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	20001bf4 	.word	0x20001bf4

08003b00 <HAL_I2C_ErrorCallback>:
{
	if (hi2c->Instance == I2C1) i2cRdy = 1;
}
//--------------------------------------------------------------------------------------------
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) devError |= devRDA;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a07      	ldr	r2, [pc, #28]	; (8003b2c <HAL_I2C_ErrorCallback+0x2c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d106      	bne.n	8003b20 <HAL_I2C_ErrorCallback+0x20>
 8003b12:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <HAL_I2C_ErrorCallback+0x30>)
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <HAL_I2C_ErrorCallback+0x30>)
 8003b1e:	801a      	strh	r2, [r3, #0]
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	40005400 	.word	0x40005400
 8003b30:	20001bf4 	.word	0x20001bf4

08003b34 <HAL_GPIO_EXTI_Callback>:
//--------------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	80fb      	strh	r3, [r7, #6]
	rec_evt_t ev = {cmdNone, 0};
 8003b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	2300      	movs	r3, #0
 8003b46:	60fb      	str	r3, [r7, #12]
#ifdef SET_ENC
	if (GPIO_Pin == ENC_KEY_Pin) {
 8003b48:	88fb      	ldrh	r3, [r7, #6]
 8003b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b4e:	d133      	bne.n	8003bb8 <HAL_GPIO_EXTI_Callback+0x84>
			encState = HAL_GPIO_ReadPin(ENC_KEY_GPIO_Port, ENC_KEY_Pin);
 8003b50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b54:	483d      	ldr	r0, [pc, #244]	; (8003c4c <HAL_GPIO_EXTI_Callback+0x118>)
 8003b56:	f005 f939 	bl	8008dcc <HAL_GPIO_ReadPin>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	4b3c      	ldr	r3, [pc, #240]	; (8003c50 <HAL_GPIO_EXTI_Callback+0x11c>)
 8003b60:	701a      	strb	r2, [r3, #0]
			if (encState == GPIO_PIN_SET) {//released key
 8003b62:	4b3b      	ldr	r3, [pc, #236]	; (8003c50 <HAL_GPIO_EXTI_Callback+0x11c>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d119      	bne.n	8003b9e <HAL_GPIO_EXTI_Callback+0x6a>
				if (tikStart) {
 8003b6a:	4b3a      	ldr	r3, [pc, #232]	; (8003c54 <HAL_GPIO_EXTI_Callback+0x120>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d051      	beq.n	8003c16 <HAL_GPIO_EXTI_Callback+0xe2>
					if ((HAL_GetTick() - tikStart) > TIME_encKeyPressed) {
 8003b72:	f004 fbeb 	bl	800834c <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	4b36      	ldr	r3, [pc, #216]	; (8003c54 <HAL_GPIO_EXTI_Callback+0x120>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b4b      	cmp	r3, #75	; 0x4b
 8003b80:	d949      	bls.n	8003c16 <HAL_GPIO_EXTI_Callback+0xe2>
						tikStart = 0;
 8003b82:	4b34      	ldr	r3, [pc, #208]	; (8003c54 <HAL_GPIO_EXTI_Callback+0x120>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
						encKeyPressed = false;
 8003b88:	4b33      	ldr	r3, [pc, #204]	; (8003c58 <HAL_GPIO_EXTI_Callback+0x124>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	701a      	strb	r2, [r3, #0]
						encKeyCnt++;
 8003b8e:	4b33      	ldr	r3, [pc, #204]	; (8003c5c <HAL_GPIO_EXTI_Callback+0x128>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3301      	adds	r3, #1
 8003b94:	4a31      	ldr	r2, [pc, #196]	; (8003c5c <HAL_GPIO_EXTI_Callback+0x128>)
 8003b96:	6013      	str	r3, [r2, #0]
						ev.evt = cmdEncKey;
 8003b98:	231b      	movs	r3, #27
 8003b9a:	60bb      	str	r3, [r7, #8]
 8003b9c:	e03b      	b.n	8003c16 <HAL_GPIO_EXTI_Callback+0xe2>
					}
				}
			} else {//pressed key
				encKeyPressed = true;
 8003b9e:	4b2e      	ldr	r3, [pc, #184]	; (8003c58 <HAL_GPIO_EXTI_Callback+0x124>)
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	701a      	strb	r2, [r3, #0]
				if (!tikStart) tikStart = HAL_GetTick();
 8003ba4:	4b2b      	ldr	r3, [pc, #172]	; (8003c54 <HAL_GPIO_EXTI_Callback+0x120>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d134      	bne.n	8003c16 <HAL_GPIO_EXTI_Callback+0xe2>
 8003bac:	f004 fbce 	bl	800834c <HAL_GetTick>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	4a28      	ldr	r2, [pc, #160]	; (8003c54 <HAL_GPIO_EXTI_Callback+0x120>)
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	e02e      	b.n	8003c16 <HAL_GPIO_EXTI_Callback+0xe2>
			}
			//HAL_GPIO_WritePin(ENC_LED_GPIO_Port, ENC_LED_Pin, encKeyPressed);
	} else {
#endif
#ifdef SET_SLEEP
		if (sleep_mode) {
 8003bb8:	4b29      	ldr	r3, [pc, #164]	; (8003c60 <HAL_GPIO_EXTI_Callback+0x12c>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d015      	beq.n	8003bec <HAL_GPIO_EXTI_Callback+0xb8>
			if ((HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_SET) ||
 8003bc0:	2102      	movs	r1, #2
 8003bc2:	4822      	ldr	r0, [pc, #136]	; (8003c4c <HAL_GPIO_EXTI_Callback+0x118>)
 8003bc4:	f005 f902 	bl	8008dcc <HAL_GPIO_ReadPin>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d006      	beq.n	8003bdc <HAL_GPIO_EXTI_Callback+0xa8>
					(HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_SET)) {
 8003bce:	2104      	movs	r1, #4
 8003bd0:	481e      	ldr	r0, [pc, #120]	; (8003c4c <HAL_GPIO_EXTI_Callback+0x118>)
 8003bd2:	f005 f8fb 	bl	8008dcc <HAL_GPIO_ReadPin>
 8003bd6:	4603      	mov	r3, r0
			if ((HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_SET) ||
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d133      	bne.n	8003c44 <HAL_GPIO_EXTI_Callback+0x110>
				sleep_mode = false;
 8003bdc:	4b20      	ldr	r3, [pc, #128]	; (8003c60 <HAL_GPIO_EXTI_Callback+0x12c>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	701a      	strb	r2, [r3, #0]
				HAL_PWR_DisableSleepOnExit();
 8003be2:	f006 fe13 	bl	800a80c <HAL_PWR_DisableSleepOnExit>
				ev.evt = cmdExitSleep;
 8003be6:	2313      	movs	r3, #19
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	e02c      	b.n	8003c46 <HAL_GPIO_EXTI_Callback+0x112>
			}
			return;
		}
#endif
		if ((GPIO_Pin == KEY0_Pin) || (GPIO_Pin == KEY1_Pin)) {
 8003bec:	88fb      	ldrh	r3, [r7, #6]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d002      	beq.n	8003bf8 <HAL_GPIO_EXTI_Callback+0xc4>
 8003bf2:	88fb      	ldrh	r3, [r7, #6]
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d10e      	bne.n	8003c16 <HAL_GPIO_EXTI_Callback+0xe2>
			if (GPIO_Pin == KEY0_Pin) seek_up = 1;
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d103      	bne.n	8003c06 <HAL_GPIO_EXTI_Callback+0xd2>
 8003bfe:	4b19      	ldr	r3, [pc, #100]	; (8003c64 <HAL_GPIO_EXTI_Callback+0x130>)
 8003c00:	2201      	movs	r2, #1
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	e005      	b.n	8003c12 <HAL_GPIO_EXTI_Callback+0xde>
			else
			if (GPIO_Pin == KEY1_Pin) seek_up = 0;
 8003c06:	88fb      	ldrh	r3, [r7, #6]
 8003c08:	2b04      	cmp	r3, #4
 8003c0a:	d102      	bne.n	8003c12 <HAL_GPIO_EXTI_Callback+0xde>
 8003c0c:	4b15      	ldr	r3, [pc, #84]	; (8003c64 <HAL_GPIO_EXTI_Callback+0x130>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	701a      	strb	r2, [r3, #0]
			ev.evt = cmdScan;
 8003c12:	230b      	movs	r3, #11
 8003c14:	60bb      	str	r3, [r7, #8]
		}
#ifdef SET_ENC
	}
#endif
	if (ev.evt != cmdNone) {
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c1c:	d013      	beq.n	8003c46 <HAL_GPIO_EXTI_Callback+0x112>
		if (osMessageQueuePut(evtQueHandle, (const void *)&ev, 0, 0)) devError |= devEVT;
 8003c1e:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <HAL_GPIO_EXTI_Callback+0x134>)
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	f107 0108 	add.w	r1, r7, #8
 8003c26:	2300      	movs	r3, #0
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f00c fdc9 	bl	80107c0 <osMessageQueuePut>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <HAL_GPIO_EXTI_Callback+0x112>
 8003c34:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <HAL_GPIO_EXTI_Callback+0x138>)
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	f043 0310 	orr.w	r3, r3, #16
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_GPIO_EXTI_Callback+0x138>)
 8003c40:	801a      	strh	r2, [r3, #0]
 8003c42:	e000      	b.n	8003c46 <HAL_GPIO_EXTI_Callback+0x112>
			return;
 8003c44:	bf00      	nop
	}
}
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	48000800 	.word	0x48000800
 8003c50:	200001d8 	.word	0x200001d8
 8003c54:	20003458 	.word	0x20003458
 8003c58:	2000345c 	.word	0x2000345c
 8003c5c:	20003468 	.word	0x20003468
 8003c60:	20003406 	.word	0x20003406
 8003c64:	2000012e 	.word	0x2000012e
 8003c68:	20000f60 	.word	0x20000f60
 8003c6c:	20001bf4 	.word	0x20001bf4

08003c70 <irdTask>:
//--------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------
void irdTask(void *argument)
{
 8003c70:	b5b0      	push	{r4, r5, r7, lr}
 8003c72:	b08e      	sub	sp, #56	; 0x38
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	6078      	str	r0, [r7, #4]
#ifdef SET_IRED

	ird_exit = false;
 8003c78:	4bb1      	ldr	r3, [pc, #708]	; (8003f40 <irdTask+0x2d0>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	701a      	strb	r2, [r3, #0]

	bool ep_start = false;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	char ep_str[16] = {0};
 8003c84:	2300      	movs	r3, #0
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	f107 0314 	add.w	r3, r7, #20
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	605a      	str	r2, [r3, #4]
 8003c92:	609a      	str	r2, [r3, #8]
	uint32_t ep_tmr = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t tmr_ired = 0;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24


	if (waitBit);

	enIntIRED();
 8003c9c:	f7fd fa42 	bl	8001124 <enIntIRED>


  while (!restart) {
 8003ca0:	e204      	b.n	80040ac <irdTask+0x43c>

	if (!tmr_ired) {
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f040 81db 	bne.w	8004060 <irdTask+0x3f0>
		if (decodeIRED(&results)) {
 8003caa:	48a6      	ldr	r0, [pc, #664]	; (8003f44 <irdTask+0x2d4>)
 8003cac:	f7fd fa04 	bl	80010b8 <decodeIRED>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 81d4 	beq.w	8004060 <irdTask+0x3f0>

			tmr_ired = get_mstmr(_300ms);
 8003cb8:	f04f 001e 	mov.w	r0, #30
 8003cbc:	f04f 0100 	mov.w	r1, #0
 8003cc0:	f7ff f95a 	bl	8002f78 <get_mstmr>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4613      	mov	r3, r2
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cd2:	489d      	ldr	r0, [pc, #628]	; (8003f48 <irdTask+0x2d8>)
 8003cd4:	f005 f892 	bl	8008dfc <HAL_GPIO_WritePin>
			int8_t kid = -1;
 8003cd8:	23ff      	movs	r3, #255	; 0xff
 8003cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			for (int8_t i = 0; i < MAX_IRED_KEY; i++) {
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ce4:	e019      	b.n	8003d1a <irdTask+0xaa>
				if (results.value == keyAll[i].code) {
 8003ce6:	4b97      	ldr	r3, [pc, #604]	; (8003f44 <irdTask+0x2d4>)
 8003ce8:	6819      	ldr	r1, [r3, #0]
 8003cea:	f997 2022 	ldrsb.w	r2, [r7, #34]	; 0x22
 8003cee:	4897      	ldr	r0, [pc, #604]	; (8003f4c <irdTask+0x2dc>)
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4403      	add	r3, r0
 8003cfa:	3308      	adds	r3, #8
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4299      	cmp	r1, r3
 8003d00:	d104      	bne.n	8003d0c <irdTask+0x9c>
					kid = i;
 8003d02:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					break;
 8003d0a:	e00a      	b.n	8003d22 <irdTask+0xb2>
			for (int8_t i = 0; i < MAX_IRED_KEY; i++) {
 8003d0c:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	3301      	adds	r3, #1
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d1a:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003d1e:	2b14      	cmp	r3, #20
 8003d20:	dde1      	ble.n	8003ce6 <irdTask+0x76>
				}
			}
			//
			stline[0] = '\0';
 8003d22:	4b8b      	ldr	r3, [pc, #556]	; (8003f50 <irdTask+0x2e0>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	701a      	strb	r2, [r3, #0]
			if (kid == -1) {
 8003d28:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d30:	d10b      	bne.n	8003d4a <irdTask+0xda>
				if (ired_show) sprintf(stline, "CODE:%08lX", results.value);
 8003d32:	4b88      	ldr	r3, [pc, #544]	; (8003f54 <irdTask+0x2e4>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d014      	beq.n	8003d64 <irdTask+0xf4>
 8003d3a:	4b82      	ldr	r3, [pc, #520]	; (8003f44 <irdTask+0x2d4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	4985      	ldr	r1, [pc, #532]	; (8003f58 <irdTask+0x2e8>)
 8003d42:	4883      	ldr	r0, [pc, #524]	; (8003f50 <irdTask+0x2e0>)
 8003d44:	f010 fee4 	bl	8014b10 <siprintf>
 8003d48:	e00c      	b.n	8003d64 <irdTask+0xf4>
			} else {
				sprintf(stline, "irKEY: %s", keyAll[kid].name);
 8003d4a:	f997 2023 	ldrsb.w	r2, [r7, #35]	; 0x23
 8003d4e:	4613      	mov	r3, r2
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4a7d      	ldr	r2, [pc, #500]	; (8003f4c <irdTask+0x2dc>)
 8003d58:	4413      	add	r3, r2
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	497f      	ldr	r1, [pc, #508]	; (8003f5c <irdTask+0x2ec>)
 8003d5e:	487c      	ldr	r0, [pc, #496]	; (8003f50 <irdTask+0x2e0>)
 8003d60:	f010 fed6 	bl	8014b10 <siprintf>
			}
			if (strlen(stline)) Report(1, "[que:%u] %s\r\n", cntEvt, stline);
 8003d64:	4b7a      	ldr	r3, [pc, #488]	; (8003f50 <irdTask+0x2e0>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <irdTask+0x10e>
 8003d6c:	4b7c      	ldr	r3, [pc, #496]	; (8003f60 <irdTask+0x2f0>)
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	461a      	mov	r2, r3
 8003d74:	4b76      	ldr	r3, [pc, #472]	; (8003f50 <irdTask+0x2e0>)
 8003d76:	497b      	ldr	r1, [pc, #492]	; (8003f64 <irdTask+0x2f4>)
 8003d78:	2001      	movs	r0, #1
 8003d7a:	f7ff fa1f 	bl	80031bc <Report>
			//
			if (kid != -1) {
 8003d7e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003d82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d86:	f000 816b 	beq.w	8004060 <irdTask+0x3f0>
				int ird = evt_None;
 8003d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d8e:	60fb      	str	r3, [r7, #12]
				switch (kid) {
 8003d90:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003d94:	2b14      	cmp	r3, #20
 8003d96:	f200 814d 	bhi.w	8004034 <irdTask+0x3c4>
 8003d9a:	a201      	add	r2, pc, #4	; (adr r2, 8003da0 <irdTask+0x130>)
 8003d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da0:	08003e07 	.word	0x08003e07
 8003da4:	08003df5 	.word	0x08003df5
 8003da8:	08003dfb 	.word	0x08003dfb
 8003dac:	08003e4b 	.word	0x08003e4b
 8003db0:	08003e57 	.word	0x08003e57
 8003db4:	08003e69 	.word	0x08003e69
 8003db8:	08003e13 	.word	0x08003e13
 8003dbc:	08003e2f 	.word	0x08003e2f
 8003dc0:	08003e63 	.word	0x08003e63
 8003dc4:	08003f0b 	.word	0x08003f0b
 8003dc8:	08003f27 	.word	0x08003f27
 8003dcc:	08003f8d 	.word	0x08003f8d
 8003dd0:	08003f8d 	.word	0x08003f8d
 8003dd4:	08003f8d 	.word	0x08003f8d
 8003dd8:	08003f8d 	.word	0x08003f8d
 8003ddc:	08003f8d 	.word	0x08003f8d
 8003de0:	08003f8d 	.word	0x08003f8d
 8003de4:	08003f8d 	.word	0x08003f8d
 8003de8:	08003f8d 	.word	0x08003f8d
 8003dec:	08003f8d 	.word	0x08003f8d
 8003df0:	08003f8d 	.word	0x08003f8d
					case key_ch:
						ird = evt_Restart;
 8003df4:	2301      	movs	r3, #1
 8003df6:	60fb      	str	r3, [r7, #12]
					break;
 8003df8:	e11c      	b.n	8004034 <irdTask+0x3c4>
					case key_ch_plus:
						seek_up = 1;
 8003dfa:	4b5b      	ldr	r3, [pc, #364]	; (8003f68 <irdTask+0x2f8>)
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	701a      	strb	r2, [r3, #0]
						ird = evt_Scan;
 8003e00:	230b      	movs	r3, #11
 8003e02:	60fb      	str	r3, [r7, #12]
					break;
 8003e04:	e116      	b.n	8004034 <irdTask+0x3c4>
					case key_ch_minus:
						seek_up = 0;
 8003e06:	4b58      	ldr	r3, [pc, #352]	; (8003f68 <irdTask+0x2f8>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	701a      	strb	r2, [r3, #0]
						ird = evt_Scan;
 8003e0c:	230b      	movs	r3, #11
 8003e0e:	60fb      	str	r3, [r7, #12]
					break;
 8003e10:	e110      	b.n	8004034 <irdTask+0x3c4>
					case key_minus:
						if (Volume) {
 8003e12:	4b56      	ldr	r3, [pc, #344]	; (8003f6c <irdTask+0x2fc>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 8103 	beq.w	8004022 <irdTask+0x3b2>
							newVolume = Volume - 1;
 8003e1c:	4b53      	ldr	r3, [pc, #332]	; (8003f6c <irdTask+0x2fc>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	4b52      	ldr	r3, [pc, #328]	; (8003f70 <irdTask+0x300>)
 8003e26:	701a      	strb	r2, [r3, #0]
							ird = evt_Vol;
 8003e28:	230d      	movs	r3, #13
 8003e2a:	60fb      	str	r3, [r7, #12]
						}
					break;
 8003e2c:	e0f9      	b.n	8004022 <irdTask+0x3b2>
					case key_plus:
						if (Volume < 15) {
 8003e2e:	4b4f      	ldr	r3, [pc, #316]	; (8003f6c <irdTask+0x2fc>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b0e      	cmp	r3, #14
 8003e34:	f200 80f7 	bhi.w	8004026 <irdTask+0x3b6>
							newVolume = Volume + 1;
 8003e38:	4b4c      	ldr	r3, [pc, #304]	; (8003f6c <irdTask+0x2fc>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	4b4b      	ldr	r3, [pc, #300]	; (8003f70 <irdTask+0x300>)
 8003e42:	701a      	strb	r2, [r3, #0]
							ird = evt_Vol;
 8003e44:	230d      	movs	r3, #13
 8003e46:	60fb      	str	r3, [r7, #12]
						}
					break;
 8003e48:	e0ed      	b.n	8004026 <irdTask+0x3b6>
					case key_left:
						seek_up = 0;
 8003e4a:	4b47      	ldr	r3, [pc, #284]	; (8003f68 <irdTask+0x2f8>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	701a      	strb	r2, [r3, #0]
						ird = evt_List;
 8003e50:	2310      	movs	r3, #16
 8003e52:	60fb      	str	r3, [r7, #12]
					break;
 8003e54:	e0ee      	b.n	8004034 <irdTask+0x3c4>
					case key_right:
						seek_up = 1;
 8003e56:	4b44      	ldr	r3, [pc, #272]	; (8003f68 <irdTask+0x2f8>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	701a      	strb	r2, [r3, #0]
						ird = evt_List;
 8003e5c:	2310      	movs	r3, #16
 8003e5e:	60fb      	str	r3, [r7, #12]
					break;
 8003e60:	e0e8      	b.n	8004034 <irdTask+0x3c4>
					case key_eq:// enable/disable print via uart
						ird = evt_Mute;//evt_Sleep);
 8003e62:	230e      	movs	r3, #14
 8003e64:	60fb      	str	r3, [r7, #12]
					break;
 8003e66:	e0e5      	b.n	8004034 <irdTask+0x3c4>
					case key_sp:
						if (!ep_start) {
 8003e68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e6c:	f083 0301 	eor.w	r3, r3, #1
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d038      	beq.n	8003ee8 <irdTask+0x278>
							ep_start = true;
 8003e76:	2301      	movs	r3, #1
 8003e78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							memset(ep_str, 0, sizeof(ep_str));
 8003e7c:	f107 0310 	add.w	r3, r7, #16
 8003e80:	2210      	movs	r2, #16
 8003e82:	2100      	movs	r1, #0
 8003e84:	4618      	mov	r0, r3
 8003e86:	f010 f8c2 	bl	801400e <memset>
							ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - lfnt->FontHeight, SCREEN_WIDTH - 1, lfnt->FontHeight, PIX_OFF);
 8003e8a:	4b3a      	ldr	r3, [pc, #232]	; (8003f74 <irdTask+0x304>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	785b      	ldrb	r3, [r3, #1]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	b219      	sxth	r1, r3
 8003e9a:	4b36      	ldr	r3, [pc, #216]	; (8003f74 <irdTask+0x304>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	785b      	ldrb	r3, [r3, #1]
 8003ea0:	b21b      	sxth	r3, r3
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	9200      	str	r2, [sp, #0]
 8003ea6:	227f      	movs	r2, #127	; 0x7f
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	f7fd ffcc 	bl	8001e46 <ST7565_DrawFilledRectangle>
							sprintf(tmp, "Time:");
 8003eae:	4932      	ldr	r1, [pc, #200]	; (8003f78 <irdTask+0x308>)
 8003eb0:	4832      	ldr	r0, [pc, #200]	; (8003f7c <irdTask+0x30c>)
 8003eb2:	f010 fe2d 	bl	8014b10 <siprintf>
							ST7565_Print(0, SCREEN_HEIGHT - lfnt->FontHeight, tmp, lfnt, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8003eb6:	4b2f      	ldr	r3, [pc, #188]	; (8003f74 <irdTask+0x304>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	785b      	ldrb	r3, [r3, #1]
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	b219      	sxth	r1, r3
 8003ec6:	4b2b      	ldr	r3, [pc, #172]	; (8003f74 <irdTask+0x304>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	9201      	str	r2, [sp, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	9200      	str	r2, [sp, #0]
 8003ed2:	4a2a      	ldr	r2, [pc, #168]	; (8003f7c <irdTask+0x30c>)
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	f7fd fd5d 	bl	8001994 <ST7565_Print>
							ST7565_Update();
 8003eda:	f7fd fbab 	bl	8001634 <ST7565_Update>
							ep_tmr = get_tmr(20);
 8003ede:	2014      	movs	r0, #20
 8003ee0:	f7ff f82c 	bl	8002f3c <get_tmr>
 8003ee4:	62b8      	str	r0, [r7, #40]	; 0x28
							ep_start = false;
							ep_tmr = 0;
							epoch = atoi(ep_str);
							ird = evt_Epoch;
						}
					break;
 8003ee6:	e0a5      	b.n	8004034 <irdTask+0x3c4>
							ep_start = false;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							ep_tmr = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	62bb      	str	r3, [r7, #40]	; 0x28
							epoch = atoi(ep_str);
 8003ef2:	f107 0310 	add.w	r3, r7, #16
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f00f fea3 	bl	8013c42 <atoi>
 8003efc:	4603      	mov	r3, r0
 8003efe:	461a      	mov	r2, r3
 8003f00:	4b1f      	ldr	r3, [pc, #124]	; (8003f80 <irdTask+0x310>)
 8003f02:	601a      	str	r2, [r3, #0]
							ird = evt_Epoch;
 8003f04:	2302      	movs	r3, #2
 8003f06:	60fb      	str	r3, [r7, #12]
					break;
 8003f08:	e094      	b.n	8004034 <irdTask+0x3c4>
					case key_100://bandUp();
						if (Band < MAX_BAND) {
 8003f0a:	4b1e      	ldr	r3, [pc, #120]	; (8003f84 <irdTask+0x314>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	f200 808b 	bhi.w	800402a <irdTask+0x3ba>
							newBand = Band + 1;
 8003f14:	4b1b      	ldr	r3, [pc, #108]	; (8003f84 <irdTask+0x314>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	4b1a      	ldr	r3, [pc, #104]	; (8003f88 <irdTask+0x318>)
 8003f1e:	701a      	strb	r2, [r3, #0]
							ird = evt_Band;
 8003f20:	2311      	movs	r3, #17
 8003f22:	60fb      	str	r3, [r7, #12]
						}
					break;
 8003f24:	e081      	b.n	800402a <irdTask+0x3ba>
					case key_200://bandDown();
						if (Band) {
 8003f26:	4b17      	ldr	r3, [pc, #92]	; (8003f84 <irdTask+0x314>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d07f      	beq.n	800402e <irdTask+0x3be>
							newBand = Band - 1;
 8003f2e:	4b15      	ldr	r3, [pc, #84]	; (8003f84 <irdTask+0x314>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <irdTask+0x318>)
 8003f38:	701a      	strb	r2, [r3, #0]
							ird = evt_Band;
 8003f3a:	2311      	movs	r3, #17
 8003f3c:	60fb      	str	r3, [r7, #12]
						}
					break;
 8003f3e:	e076      	b.n	800402e <irdTask+0x3be>
 8003f40:	2000014d 	.word	0x2000014d
 8003f44:	20000624 	.word	0x20000624
 8003f48:	48000800 	.word	0x48000800
 8003f4c:	0801a08c 	.word	0x0801a08c
 8003f50:	20003408 	.word	0x20003408
 8003f54:	2000014c 	.word	0x2000014c
 8003f58:	0801899c 	.word	0x0801899c
 8003f5c:	080189a8 	.word	0x080189a8
 8003f60:	2000200f 	.word	0x2000200f
 8003f64:	080189b4 	.word	0x080189b4
 8003f68:	2000012e 	.word	0x2000012e
 8003f6c:	2000012f 	.word	0x2000012f
 8003f70:	20000130 	.word	0x20000130
 8003f74:	20003038 	.word	0x20003038
 8003f78:	080189c4 	.word	0x080189c4
 8003f7c:	20001374 	.word	0x20001374
 8003f80:	2000001c 	.word	0x2000001c
 8003f84:	2000012c 	.word	0x2000012c
 8003f88:	2000012d 	.word	0x2000012d
					case key_5:
					case key_6:
					case key_7:
					case key_8:
					case key_9:
						if (ep_start) {
 8003f8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d035      	beq.n	8004000 <irdTask+0x390>
							if (strlen(ep_str) < 10) {
 8003f94:	f107 0310 	add.w	r3, r7, #16
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fc f923 	bl	80001e4 <strlen>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b09      	cmp	r3, #9
 8003fa2:	d846      	bhi.n	8004032 <irdTask+0x3c2>
								char ch = (kid - key_0) + 0x30;
 8003fa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fa8:	3325      	adds	r3, #37	; 0x25
 8003faa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
								sprintf(ep_str+strlen(ep_str), "%c", ch);
 8003fae:	f107 0310 	add.w	r3, r7, #16
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fc f916 	bl	80001e4 <strlen>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	f107 0310 	add.w	r3, r7, #16
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8003fc4:	4941      	ldr	r1, [pc, #260]	; (80040cc <irdTask+0x45c>)
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f010 fda2 	bl	8014b10 <siprintf>
								ST7565_Print(32, SCREEN_HEIGHT - lfnt->FontHeight, ep_str, lfnt, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8003fcc:	4b40      	ldr	r3, [pc, #256]	; (80040d0 <irdTask+0x460>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	785b      	ldrb	r3, [r3, #1]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	b219      	sxth	r1, r3
 8003fdc:	4b3c      	ldr	r3, [pc, #240]	; (80040d0 <irdTask+0x460>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f107 0210 	add.w	r2, r7, #16
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	9001      	str	r0, [sp, #4]
 8003fe8:	2001      	movs	r0, #1
 8003fea:	9000      	str	r0, [sp, #0]
 8003fec:	2020      	movs	r0, #32
 8003fee:	f7fd fcd1 	bl	8001994 <ST7565_Print>
								ST7565_Update();
 8003ff2:	f7fd fb1f 	bl	8001634 <ST7565_Update>
								ep_tmr = get_tmr(20);
 8003ff6:	2014      	movs	r0, #20
 8003ff8:	f7fe ffa0 	bl	8002f3c <get_tmr>
 8003ffc:	62b8      	str	r0, [r7, #40]	; 0x28
							}
						} else {
							newFreq = list[kid - key_0 + 2].freq;//for band=2 only !!!
							ird = evt_Freq;
						}
					break;
 8003ffe:	e018      	b.n	8004032 <irdTask+0x3c2>
							newFreq = list[kid - key_0 + 2].freq;//for band=2 only !!!
 8004000:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8004004:	f1a3 0209 	sub.w	r2, r3, #9
 8004008:	4932      	ldr	r1, [pc, #200]	; (80040d4 <irdTask+0x464>)
 800400a:	4613      	mov	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8004018:	4a2f      	ldr	r2, [pc, #188]	; (80040d8 <irdTask+0x468>)
 800401a:	6013      	str	r3, [r2, #0]
							ird = evt_Freq;
 800401c:	230c      	movs	r3, #12
 800401e:	60fb      	str	r3, [r7, #12]
					break;
 8004020:	e007      	b.n	8004032 <irdTask+0x3c2>
					break;
 8004022:	bf00      	nop
 8004024:	e006      	b.n	8004034 <irdTask+0x3c4>
					break;
 8004026:	bf00      	nop
 8004028:	e004      	b.n	8004034 <irdTask+0x3c4>
					break;
 800402a:	bf00      	nop
 800402c:	e002      	b.n	8004034 <irdTask+0x3c4>
					break;
 800402e:	bf00      	nop
 8004030:	e000      	b.n	8004034 <irdTask+0x3c4>
					break;
 8004032:	bf00      	nop
				}//switch (kid)
				if (ird != evt_None) {
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800403a:	d011      	beq.n	8004060 <irdTask+0x3f0>
					if (osMessageQueuePut(evtQueHandle, (const void *)&ird, 0, 0) != osOK) devError |= devEVT;
 800403c:	4b27      	ldr	r3, [pc, #156]	; (80040dc <irdTask+0x46c>)
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	f107 010c 	add.w	r1, r7, #12
 8004044:	2300      	movs	r3, #0
 8004046:	2200      	movs	r2, #0
 8004048:	f00c fbba 	bl	80107c0 <osMessageQueuePut>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d006      	beq.n	8004060 <irdTask+0x3f0>
 8004052:	4b23      	ldr	r3, [pc, #140]	; (80040e0 <irdTask+0x470>)
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	f043 0310 	orr.w	r3, r3, #16
 800405a:	b29a      	uxth	r2, r3
 800405c:	4b20      	ldr	r3, [pc, #128]	; (80040e0 <irdTask+0x470>)
 800405e:	801a      	strh	r2, [r3, #0]
				}
			}//if (kid != -1)
		}//if (decodeIRED(&results))
	}

	if (ep_tmr) {
 8004060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <irdTask+0x40c>
		if (check_tmr(ep_tmr)) {
 8004066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004068:	f7fe ff75 	bl	8002f56 <check_tmr>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d004      	beq.n	800407c <irdTask+0x40c>
			ep_tmr = 0;
 8004072:	2300      	movs	r3, #0
 8004074:	62bb      	str	r3, [r7, #40]	; 0x28
			ep_start = false;
 8004076:	2300      	movs	r3, #0
 8004078:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
	}
	if (tmr_ired) {
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	2b00      	cmp	r3, #0
 8004080:	d014      	beq.n	80040ac <irdTask+0x43c>
		if (check_mstmr(tmr_ired)) {
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	2200      	movs	r2, #0
 8004086:	461c      	mov	r4, r3
 8004088:	4615      	mov	r5, r2
 800408a:	4620      	mov	r0, r4
 800408c:	4629      	mov	r1, r5
 800408e:	f7fe ff86 	bl	8002f9e <check_mstmr>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d009      	beq.n	80040ac <irdTask+0x43c>
			tmr_ired = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	627b      	str	r3, [r7, #36]	; 0x24
			resumeIRED();
 800409c:	f7fd f85a 	bl	8001154 <resumeIRED>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 80040a0:	2201      	movs	r2, #1
 80040a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040a6:	480f      	ldr	r0, [pc, #60]	; (80040e4 <irdTask+0x474>)
 80040a8:	f004 fea8 	bl	8008dfc <HAL_GPIO_WritePin>
  while (!restart) {
 80040ac:	4b0e      	ldr	r3, [pc, #56]	; (80040e8 <irdTask+0x478>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f43f adf5 	beq.w	8003ca2 <irdTask+0x32>
		}
	}

  }//while

  ird_exit = true;
 80040b8:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <irdTask+0x47c>)
 80040ba:	2201      	movs	r2, #1
 80040bc:	701a      	strb	r2, [r3, #0]

  vTaskDelete(NULL);//osThreadExit();
 80040be:	2000      	movs	r0, #0
 80040c0:	f00d ff46 	bl	8011f50 <vTaskDelete>

#endif
}
 80040c4:	bf00      	nop
 80040c6:	3730      	adds	r7, #48	; 0x30
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bdb0      	pop	{r4, r5, r7, pc}
 80040cc:	080189cc 	.word	0x080189cc
 80040d0:	20003038 	.word	0x20003038
 80040d4:	2000305c 	.word	0x2000305c
 80040d8:	20000128 	.word	0x20000128
 80040dc:	20000f60 	.word	0x20000f60
 80040e0:	20001bf4 	.word	0x20001bf4
 80040e4:	48000800 	.word	0x48000800
 80040e8:	2000200c 	.word	0x2000200c
 80040ec:	2000014d 	.word	0x2000014d

080040f0 <StartTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask */
void StartTask(void *argument)
{
 80040f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040f4:	b0d8      	sub	sp, #352	; 0x160
 80040f6:	af08      	add	r7, sp, #32
 80040f8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80040fc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004100:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */


    Report(1, "[que:%u] Start application ver.%s\r\n", getQueCount(evtQueHandle), ver);
 8004102:	4b47      	ldr	r3, [pc, #284]	; (8004220 <StartTask+0x130>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7fe fd40 	bl	8002b8c <getQueCount>
 800410c:	4602      	mov	r2, r0
 800410e:	4b45      	ldr	r3, [pc, #276]	; (8004224 <StartTask+0x134>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4945      	ldr	r1, [pc, #276]	; (8004228 <StartTask+0x138>)
 8004114:	2001      	movs	r0, #1
 8004116:	f7ff f851 	bl	80031bc <Report>

    uint16_t lastErr = devOK;
 800411a:	2300      	movs	r3, #0
 800411c:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
    int evt;
    rec_evt_t evts = {cmdNone, 0};
 8004120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004124:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004128:	2300      	movs	r3, #0
 800412a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

#ifdef SET_W25FLASH
    chipPresent = W25qxx_Init();
 800412e:	f003 fc67 	bl	8007a00 <W25qxx_Init>
 8004132:	4603      	mov	r3, r0
 8004134:	461a      	mov	r2, r3
 8004136:	4b3d      	ldr	r3, [pc, #244]	; (800422c <StartTask+0x13c>)
 8004138:	701a      	strb	r2, [r3, #0]
    uint32_t cid = W25qxx_getChipID();
 800413a:	f003 fd1b 	bl	8007b74 <W25qxx_getChipID>
 800413e:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
    if ( chipPresent && ((cid >= W25Q10) && (cid <= W25Q128)) ) validChipID = true;
 8004142:	4b3a      	ldr	r3, [pc, #232]	; (800422c <StartTask+0x13c>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <StartTask+0x70>
 800414a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800414e:	2b00      	cmp	r3, #0
 8004150:	d006      	beq.n	8004160 <StartTask+0x70>
 8004152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004156:	2b08      	cmp	r3, #8
 8004158:	d802      	bhi.n	8004160 <StartTask+0x70>
 800415a:	4b35      	ldr	r3, [pc, #212]	; (8004230 <StartTask+0x140>)
 800415c:	2201      	movs	r2, #1
 800415e:	701a      	strb	r2, [r3, #0]
    list_sector = W25qxx_getPageSize() << 1;
 8004160:	f003 fd2c 	bl	8007bbc <W25qxx_getPageSize>
 8004164:	4603      	mov	r3, r0
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	461a      	mov	r2, r3
 800416a:	4b32      	ldr	r3, [pc, #200]	; (8004234 <StartTask+0x144>)
 800416c:	601a      	str	r2, [r3, #0]
    //
    listSize = sizeof(rec_t) * MAX_LIST;
 800416e:	4b32      	ldr	r3, [pc, #200]	; (8004238 <StartTask+0x148>)
 8004170:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8004174:	801a      	strh	r2, [r3, #0]
    memset((uint8_t *)&list[0].band, 0, listSize);
 8004176:	4b30      	ldr	r3, [pc, #192]	; (8004238 <StartTask+0x148>)
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	2100      	movs	r1, #0
 800417e:	482f      	ldr	r0, [pc, #188]	; (800423c <StartTask+0x14c>)
 8004180:	f00f ff45 	bl	801400e <memset>
    //
    cfgSector = W25qxx_getSectorCount() - 1;
 8004184:	f003 fd02 	bl	8007b8c <W25qxx_getSectorCount>
 8004188:	4603      	mov	r3, r0
 800418a:	3b01      	subs	r3, #1
 800418c:	4a2c      	ldr	r2, [pc, #176]	; (8004240 <StartTask+0x150>)
 800418e:	6013      	str	r3, [r2, #0]
    if (W25qxx_IsEmptySector(cfgSector, 0, listSize)) {//sector is empty -> need write data to sector
 8004190:	4b2b      	ldr	r3, [pc, #172]	; (8004240 <StartTask+0x150>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a28      	ldr	r2, [pc, #160]	; (8004238 <StartTask+0x148>)
 8004196:	8812      	ldrh	r2, [r2, #0]
 8004198:	2100      	movs	r1, #0
 800419a:	4618      	mov	r0, r3
 800419c:	f003 fd78 	bl	8007c90 <W25qxx_IsEmptySector>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d016      	beq.n	80041d4 <StartTask+0xe4>
    	if (!(devError & devSPI)) {
 80041a6:	4b27      	ldr	r3, [pc, #156]	; (8004244 <StartTask+0x154>)
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d110      	bne.n	80041d4 <StartTask+0xe4>
    		W25qxx_WriteSector((uint8_t *)&def_list[0].band, cfgSector, 0, listSize);
 80041b2:	4b23      	ldr	r3, [pc, #140]	; (8004240 <StartTask+0x150>)
 80041b4:	6819      	ldr	r1, [r3, #0]
 80041b6:	4b20      	ldr	r3, [pc, #128]	; (8004238 <StartTask+0x148>)
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	2200      	movs	r2, #0
 80041bc:	4822      	ldr	r0, [pc, #136]	; (8004248 <StartTask+0x158>)
 80041be:	f003 fedb 	bl	8007f78 <W25qxx_WriteSector>
    		Report(1, "Writen cfg_stations_data (%lu bytes) to cfgSector #%lu\r\n", listSize, cfgSector);
 80041c2:	4b1d      	ldr	r3, [pc, #116]	; (8004238 <StartTask+0x148>)
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	4b1d      	ldr	r3, [pc, #116]	; (8004240 <StartTask+0x150>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	491f      	ldr	r1, [pc, #124]	; (800424c <StartTask+0x15c>)
 80041ce:	2001      	movs	r0, #1
 80041d0:	f7fe fff4 	bl	80031bc <Report>
      	}
    }
    if (!W25qxx_IsEmptySector(cfgSector, 0, listSize)) {//in sector	present any data
 80041d4:	4b1a      	ldr	r3, [pc, #104]	; (8004240 <StartTask+0x150>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a17      	ldr	r2, [pc, #92]	; (8004238 <StartTask+0x148>)
 80041da:	8812      	ldrh	r2, [r2, #0]
 80041dc:	2100      	movs	r1, #0
 80041de:	4618      	mov	r0, r3
 80041e0:	f003 fd56 	bl	8007c90 <W25qxx_IsEmptySector>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f083 0301 	eor.w	r3, r3, #1
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d03f      	beq.n	8004270 <StartTask+0x180>
    	if (!(devError & devSPI)) {
 80041f0:	4b14      	ldr	r3, [pc, #80]	; (8004244 <StartTask+0x154>)
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d12b      	bne.n	8004254 <StartTask+0x164>
    		W25qxx_ReadSector((uint8_t *)&list[0].band, cfgSector, 0, listSize);
 80041fc:	4b10      	ldr	r3, [pc, #64]	; (8004240 <StartTask+0x150>)
 80041fe:	6819      	ldr	r1, [r3, #0]
 8004200:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <StartTask+0x148>)
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	2200      	movs	r2, #0
 8004206:	480d      	ldr	r0, [pc, #52]	; (800423c <StartTask+0x14c>)
 8004208:	f003 ffde 	bl	80081c8 <W25qxx_ReadSector>
    		Report(1, "Readed cfg_stations_data (%lu bytes) from cfgSector #%lu\r\n", listSize, cfgSector);
 800420c:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <StartTask+0x148>)
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <StartTask+0x150>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	490e      	ldr	r1, [pc, #56]	; (8004250 <StartTask+0x160>)
 8004218:	2001      	movs	r0, #1
 800421a:	f7fe ffcf 	bl	80031bc <Report>
 800421e:	e027      	b.n	8004270 <StartTask+0x180>
 8004220:	20000f60 	.word	0x20000f60
 8004224:	20000004 	.word	0x20000004
 8004228:	080189d0 	.word	0x080189d0
 800422c:	20003024 	.word	0x20003024
 8004230:	20003025 	.word	0x20003025
 8004234:	20002018 	.word	0x20002018
 8004238:	20003404 	.word	0x20003404
 800423c:	2000305c 	.word	0x2000305c
 8004240:	20003030 	.word	0x20003030
 8004244:	20001bf4 	.word	0x20001bf4
 8004248:	08019ce4 	.word	0x08019ce4
 800424c:	080189f4 	.word	0x080189f4
 8004250:	08018a30 	.word	0x08018a30
    	} else {
    		memcpy((uint8_t *)&list[0].band, (uint8_t *)&def_list[0].band, listSize);
 8004254:	4bb1      	ldr	r3, [pc, #708]	; (800451c <StartTask+0x42c>)
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	49b1      	ldr	r1, [pc, #708]	; (8004520 <StartTask+0x430>)
 800425c:	48b1      	ldr	r0, [pc, #708]	; (8004524 <StartTask+0x434>)
 800425e:	f00f fec8 	bl	8013ff2 <memcpy>
    		Report(1, "Copy cfg_stations_data (%lu bytes) from def_list\r\n", listSize);
 8004262:	4bae      	ldr	r3, [pc, #696]	; (800451c <StartTask+0x42c>)
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	49af      	ldr	r1, [pc, #700]	; (8004528 <StartTask+0x438>)
 800426a:	2001      	movs	r0, #1
 800426c:	f7fe ffa6 	bl	80031bc <Report>
    	}
    }
#endif


rdaID = rda5807_init(&Freq);
 8004270:	48ae      	ldr	r0, [pc, #696]	; (800452c <StartTask+0x43c>)
 8004272:	f002 f823 	bl	80062bc <rda5807_init>
 8004276:	4603      	mov	r3, r0
 8004278:	461a      	mov	r2, r3
 800427a:	4bad      	ldr	r3, [pc, #692]	; (8004530 <StartTask+0x440>)
 800427c:	701a      	strb	r2, [r3, #0]
RSSI = rda5807_rssi();
 800427e:	f002 f88b 	bl	8006398 <rda5807_rssi>
 8004282:	4603      	mov	r3, r0
 8004284:	461a      	mov	r2, r3
 8004286:	4bab      	ldr	r3, [pc, #684]	; (8004534 <StartTask+0x444>)
 8004288:	801a      	strh	r2, [r3, #0]
rda5807_SetVolume(Volume);
 800428a:	4bab      	ldr	r3, [pc, #684]	; (8004538 <StartTask+0x448>)
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f002 fa62 	bl	8006758 <rda5807_SetVolume>
rda5807_SetBassBoost(BassBoost);
 8004294:	4ba9      	ldr	r3, [pc, #676]	; (800453c <StartTask+0x44c>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f002 faa5 	bl	80067e8 <rda5807_SetBassBoost>
stereo = rda5807_Get_StereoMonoFlag();
 800429e:	f002 fbb9 	bl	8006a14 <rda5807_Get_StereoMonoFlag>
 80042a2:	4603      	mov	r3, r0
 80042a4:	461a      	mov	r2, r3
 80042a6:	4ba6      	ldr	r3, [pc, #664]	; (8004540 <StartTask+0x450>)
 80042a8:	701a      	strb	r2, [r3, #0]
Chan = rda5807_Get_Channel();
 80042aa:	f002 fbcb 	bl	8006a44 <rda5807_Get_Channel>
 80042ae:	4603      	mov	r3, r0
 80042b0:	461a      	mov	r2, r3
 80042b2:	4ba4      	ldr	r3, [pc, #656]	; (8004544 <StartTask+0x454>)
 80042b4:	801a      	strh	r2, [r3, #0]


#ifdef SET_DISPLAY

	#ifdef FONT_6x8
  		FontDef_t Font_6x8 = { 6, 8, Font6x8 };
 80042b6:	4aa4      	ldr	r2, [pc, #656]	; (8004548 <StartTask+0x458>)
 80042b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80042bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042c0:	6018      	str	r0, [r3, #0]
 80042c2:	3304      	adds	r3, #4
 80042c4:	8019      	strh	r1, [r3, #0]
  		lfnt = &Font_6x8;
 80042c6:	4aa1      	ldr	r2, [pc, #644]	; (800454c <StartTask+0x45c>)
 80042c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80042cc:	6013      	str	r3, [r2, #0]
	#endif

  	uint16_t lin1 = 1;
 80042ce:	2301      	movs	r3, #1
 80042d0:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
  	uint16_t lin2 = lin1 + Font_6x8.FontHeight;//chipID...
 80042d4:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80042d8:	b29a      	uxth	r2, r3
 80042da:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 80042de:	4413      	add	r3, r2
 80042e0:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
  	uint16_t lin3 = lin2 + Font_6x8.FontHeight + 1;//Band...
 80042e4:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 80042ee:	4413      	add	r3, r2
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3301      	adds	r3, #1
 80042f4:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
  	uint16_t lin4 = lin3 + Font_6x8.FontHeight + 1;//Volume...//Freq...
 80042f8:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8004302:	4413      	add	r3, r2
 8004304:	b29b      	uxth	r3, r3
 8004306:	3301      	adds	r3, #1
 8004308:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
  	uint16_t lin5 = lin4 + Font_6x8.FontHeight + 1;//Freq...//Volume...
 800430c:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8004310:	b29a      	uxth	r2, r3
 8004312:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8004316:	4413      	add	r3, r2
 8004318:	b29b      	uxth	r3, r3
 800431a:	3301      	adds	r3, #1
 800431c:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
  	uint16_t lin6 = lin5 + Font_6x8.FontHeight + 1;//Station
 8004320:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8004324:	b29a      	uxth	r2, r3
 8004326:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 800432a:	4413      	add	r3, r2
 800432c:	b29b      	uxth	r3, r3
 800432e:	3301      	adds	r3, #1
 8004330:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
  	char st[64];
  	char sta[32];
  	char stb[32];

  	ST7565_Reset();
 8004334:	f7fc ffcc 	bl	80012d0 <ST7565_Reset>
  	ST7565_Init();
 8004338:	f7fd f8e4 	bl	8001504 <ST7565_Init>

    int dl = sprintf(tmp, "Ver.%s", ver);
 800433c:	4b84      	ldr	r3, [pc, #528]	; (8004550 <StartTask+0x460>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	461a      	mov	r2, r3
 8004342:	4984      	ldr	r1, [pc, #528]	; (8004554 <StartTask+0x464>)
 8004344:	4884      	ldr	r0, [pc, #528]	; (8004558 <StartTask+0x468>)
 8004346:	f010 fbe3 	bl	8014b10 <siprintf>
 800434a:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
    uint16_t x = ((SCREEN_WIDTH - (lfnt->FontWidth * dl)) >> 1) & 0x7f;
 800434e:	4b7f      	ldr	r3, [pc, #508]	; (800454c <StartTask+0x45c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	461a      	mov	r2, r3
 8004356:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800435a:	fb02 f303 	mul.w	r3, r2, r3
 800435e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004362:	105b      	asrs	r3, r3, #1
 8004364:	b29b      	uxth	r3, r3
 8004366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800436a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    ST7565_Print(x, SCREEN_HEIGHT - lfnt->FontHeight, tmp, lfnt, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 800436e:	f9b7 00f6 	ldrsh.w	r0, [r7, #246]	; 0xf6
 8004372:	4b76      	ldr	r3, [pc, #472]	; (800454c <StartTask+0x45c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	785b      	ldrb	r3, [r3, #1]
 8004378:	b29b      	uxth	r3, r3
 800437a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800437e:	b29b      	uxth	r3, r3
 8004380:	b219      	sxth	r1, r3
 8004382:	4b72      	ldr	r3, [pc, #456]	; (800454c <StartTask+0x45c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2201      	movs	r2, #1
 8004388:	9201      	str	r2, [sp, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	9200      	str	r2, [sp, #0]
 800438e:	4a72      	ldr	r2, [pc, #456]	; (8004558 <StartTask+0x468>)
 8004390:	f7fd fb00 	bl	8001994 <ST7565_Print>

    int il = sprintf(st, "RDA5807 chipID:0x%x", rdaID);
 8004394:	4b66      	ldr	r3, [pc, #408]	; (8004530 <StartTask+0x440>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	461a      	mov	r2, r3
 800439a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800439e:	496f      	ldr	r1, [pc, #444]	; (800455c <StartTask+0x46c>)
 80043a0:	4618      	mov	r0, r3
 80043a2:	f010 fbb5 	bl	8014b10 <siprintf>
 80043a6:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
    uint16_t xf = ((SCREEN_WIDTH - (lfnt->FontWidth * il)) >> 1) & 0x7f;
 80043aa:	4b68      	ldr	r3, [pc, #416]	; (800454c <StartTask+0x45c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80043b6:	fb02 f303 	mul.w	r3, r2, r3
 80043ba:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80043be:	105b      	asrs	r3, r3, #1
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043c6:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
    if (!xf) xf = 1;
 80043ca:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d102      	bne.n	80043d8 <StartTask+0x2e8>
 80043d2:	2301      	movs	r3, #1
 80043d4:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
    ST7565_Print(xf, lin2, st, lfnt, 1, PIX_ON);
 80043d8:	f9b7 0132 	ldrsh.w	r0, [r7, #306]	; 0x132
 80043dc:	f9b7 1100 	ldrsh.w	r1, [r7, #256]	; 0x100
 80043e0:	4b5a      	ldr	r3, [pc, #360]	; (800454c <StartTask+0x45c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80043e8:	2401      	movs	r4, #1
 80043ea:	9401      	str	r4, [sp, #4]
 80043ec:	2401      	movs	r4, #1
 80043ee:	9400      	str	r4, [sp, #0]
 80043f0:	f7fd fad0 	bl	8001994 <ST7565_Print>

    int it = sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 80043f4:	4b5a      	ldr	r3, [pc, #360]	; (8004560 <StartTask+0x470>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	4b5a      	ldr	r3, [pc, #360]	; (8004564 <StartTask+0x474>)
 80043fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004400:	f107 031c 	add.w	r3, r7, #28
 8004404:	4958      	ldr	r1, [pc, #352]	; (8004568 <StartTask+0x478>)
 8004406:	4618      	mov	r0, r3
 8004408:	f010 fb82 	bl	8014b10 <siprintf>
 800440c:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    int lit = it;
 8004410:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004414:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004418:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800441c:	601a      	str	r2, [r3, #0]
    xf = ((SCREEN_WIDTH - (lfnt->FontWidth * it)) >> 1) & 0x7f;
 800441e:	4b4b      	ldr	r3, [pc, #300]	; (800454c <StartTask+0x45c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800442a:	fb02 f303 	mul.w	r3, r2, r3
 800442e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004432:	105b      	asrs	r3, r3, #1
 8004434:	b29b      	uxth	r3, r3
 8004436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800443a:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
    if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 800443e:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <StartTask+0x35e>
 8004446:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 800444a:	2b7d      	cmp	r3, #125	; 0x7d
 800444c:	d902      	bls.n	8004454 <StartTask+0x364>
 800444e:	2301      	movs	r3, #1
 8004450:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
    ST7565_Print(xf, lin3, stb, lfnt, 1, PIX_ON);
 8004454:	f9b7 0132 	ldrsh.w	r0, [r7, #306]	; 0x132
 8004458:	f9b7 10fe 	ldrsh.w	r1, [r7, #254]	; 0xfe
 800445c:	4b3b      	ldr	r3, [pc, #236]	; (800454c <StartTask+0x45c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f107 021c 	add.w	r2, r7, #28
 8004464:	2401      	movs	r4, #1
 8004466:	9401      	str	r4, [sp, #4]
 8004468:	2401      	movs	r4, #1
 800446a:	9400      	str	r4, [sp, #0]
 800446c:	f7fd fa92 	bl	8001994 <ST7565_Print>

    int im = sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8004470:	4b32      	ldr	r3, [pc, #200]	; (800453c <StartTask+0x44c>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	4b30      	ldr	r3, [pc, #192]	; (8004538 <StartTask+0x448>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800447e:	493b      	ldr	r1, [pc, #236]	; (800456c <StartTask+0x47c>)
 8004480:	f010 fb46 	bl	8014b10 <siprintf>
 8004484:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
    int lim = im;
 8004488:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800448c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004490:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004494:	601a      	str	r2, [r3, #0]
    xf = ((SCREEN_WIDTH - (lfnt->FontWidth * im)) >> 1) & 0x7f;
 8004496:	4b2d      	ldr	r3, [pc, #180]	; (800454c <StartTask+0x45c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80044a2:	fb02 f303 	mul.w	r3, r2, r3
 80044a6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80044aa:	105b      	asrs	r3, r3, #1
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044b2:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
    if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 80044b6:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <StartTask+0x3d6>
 80044be:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 80044c2:	2b7d      	cmp	r3, #125	; 0x7d
 80044c4:	d902      	bls.n	80044cc <StartTask+0x3dc>
 80044c6:	2301      	movs	r3, #1
 80044c8:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
    ST7565_Print(xf, lin4, st, lfnt, 1, PIX_ON);
 80044cc:	f9b7 0132 	ldrsh.w	r0, [r7, #306]	; 0x132
 80044d0:	f9b7 10fc 	ldrsh.w	r1, [r7, #252]	; 0xfc
 80044d4:	4b1d      	ldr	r3, [pc, #116]	; (800454c <StartTask+0x45c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80044dc:	2401      	movs	r4, #1
 80044de:	9401      	str	r4, [sp, #4]
 80044e0:	2401      	movs	r4, #1
 80044e2:	9400      	str	r4, [sp, #0]
 80044e4:	f7fd fa56 	bl	8001994 <ST7565_Print>

    if (stereo)
 80044e8:	4b15      	ldr	r3, [pc, #84]	; (8004540 <StartTask+0x450>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d041      	beq.n	8004574 <StartTask+0x484>
    	il = sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 80044f0:	4b10      	ldr	r3, [pc, #64]	; (8004534 <StartTask+0x444>)
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	461c      	mov	r4, r3
 80044f6:	4b0d      	ldr	r3, [pc, #52]	; (800452c <StartTask+0x43c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fc f834 	bl	8000568 <__aeabi_f2d>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8004508:	e9cd 2300 	strd	r2, r3, [sp]
 800450c:	4622      	mov	r2, r4
 800450e:	4918      	ldr	r1, [pc, #96]	; (8004570 <StartTask+0x480>)
 8004510:	f010 fafe 	bl	8014b10 <siprintf>
 8004514:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
 8004518:	e040      	b.n	800459c <StartTask+0x4ac>
 800451a:	bf00      	nop
 800451c:	20003404 	.word	0x20003404
 8004520:	08019ce4 	.word	0x08019ce4
 8004524:	2000305c 	.word	0x2000305c
 8004528:	08018a6c 	.word	0x08018a6c
 800452c:	20000124 	.word	0x20000124
 8004530:	20003048 	.word	0x20003048
 8004534:	20003046 	.word	0x20003046
 8004538:	2000012f 	.word	0x2000012f
 800453c:	2000304a 	.word	0x2000304a
 8004540:	2000304c 	.word	0x2000304c
 8004544:	20003044 	.word	0x20003044
 8004548:	08019074 	.word	0x08019074
 800454c:	20003038 	.word	0x20003038
 8004550:	20000004 	.word	0x20000004
 8004554:	08018aa0 	.word	0x08018aa0
 8004558:	20001374 	.word	0x20001374
 800455c:	08018aa8 	.word	0x08018aa8
 8004560:	2000012c 	.word	0x2000012c
 8004564:	20000138 	.word	0x20000138
 8004568:	08018abc 	.word	0x08018abc
 800456c:	08018ac8 	.word	0x08018ac8
 8004570:	08018ad8 	.word	0x08018ad8
    else
    	il = sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8004574:	4b8a      	ldr	r3, [pc, #552]	; (80047a0 <StartTask+0x6b0>)
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	461c      	mov	r4, r3
 800457a:	4b8a      	ldr	r3, [pc, #552]	; (80047a4 <StartTask+0x6b4>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f7fb fff2 	bl	8000568 <__aeabi_f2d>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800458c:	e9cd 2300 	strd	r2, r3, [sp]
 8004590:	4622      	mov	r2, r4
 8004592:	4985      	ldr	r1, [pc, #532]	; (80047a8 <StartTask+0x6b8>)
 8004594:	f010 fabc 	bl	8014b10 <siprintf>
 8004598:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
    int lil = il;
 800459c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80045a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045a4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80045a8:	601a      	str	r2, [r3, #0]
    xf = ((SCREEN_WIDTH - (lfnt->FontWidth * il)) >> 1) & 0x7f;
 80045aa:	4b80      	ldr	r3, [pc, #512]	; (80047ac <StartTask+0x6bc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80045b6:	fb02 f303 	mul.w	r3, r2, r3
 80045ba:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80045be:	105b      	asrs	r3, r3, #1
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045c6:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
    if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 80045ca:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <StartTask+0x4ea>
 80045d2:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 80045d6:	2b7d      	cmp	r3, #125	; 0x7d
 80045d8:	d902      	bls.n	80045e0 <StartTask+0x4f0>
 80045da:	2301      	movs	r3, #1
 80045dc:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
    ST7565_Print(xf, lin5, st, lfnt, 1, PIX_ON);
 80045e0:	f9b7 0132 	ldrsh.w	r0, [r7, #306]	; 0x132
 80045e4:	f9b7 10fa 	ldrsh.w	r1, [r7, #250]	; 0xfa
 80045e8:	4b70      	ldr	r3, [pc, #448]	; (80047ac <StartTask+0x6bc>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80045f0:	2401      	movs	r4, #1
 80045f2:	9401      	str	r4, [sp, #4]
 80045f4:	2401      	movs	r4, #1
 80045f6:	9400      	str	r4, [sp, #0]
 80045f8:	f7fd f9cc 	bl	8001994 <ST7565_Print>

    int ia = sprintf(sta, "%s", nameStation(Freq));
 80045fc:	4b69      	ldr	r3, [pc, #420]	; (80047a4 <StartTask+0x6b4>)
 80045fe:	edd3 7a00 	vldr	s15, [r3]
 8004602:	eeb0 0a67 	vmov.f32	s0, s15
 8004606:	f7fe facd 	bl	8002ba4 <nameStation>
 800460a:	4602      	mov	r2, r0
 800460c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004610:	4967      	ldr	r1, [pc, #412]	; (80047b0 <StartTask+0x6c0>)
 8004612:	4618      	mov	r0, r3
 8004614:	f010 fa7c 	bl	8014b10 <siprintf>
 8004618:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
    int lia = ia;
 800461c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004620:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004624:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8004628:	601a      	str	r2, [r3, #0]
    xf = ((SCREEN_WIDTH - (lfnt->FontWidth * ia)) >> 1) & 0x7f;
 800462a:	4b60      	ldr	r3, [pc, #384]	; (80047ac <StartTask+0x6bc>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	461a      	mov	r2, r3
 8004632:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004636:	fb02 f303 	mul.w	r3, r2, r3
 800463a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800463e:	105b      	asrs	r3, r3, #1
 8004640:	b29b      	uxth	r3, r3
 8004642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004646:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
    if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 800464a:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <StartTask+0x56a>
 8004652:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8004656:	2b7d      	cmp	r3, #125	; 0x7d
 8004658:	d902      	bls.n	8004660 <StartTask+0x570>
 800465a:	2301      	movs	r3, #1
 800465c:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
    ST7565_Print(xf, lin6, sta, lfnt, 1, PIX_ON);
 8004660:	f9b7 0132 	ldrsh.w	r0, [r7, #306]	; 0x132
 8004664:	f9b7 10f8 	ldrsh.w	r1, [r7, #248]	; 0xf8
 8004668:	4b50      	ldr	r3, [pc, #320]	; (80047ac <StartTask+0x6bc>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004670:	2401      	movs	r4, #1
 8004672:	9401      	str	r4, [sp, #4]
 8004674:	2401      	movs	r4, #1
 8004676:	9400      	str	r4, [sp, #0]
 8004678:	f7fd f98c 	bl	8001994 <ST7565_Print>

    Report(1, "ChipID:0x%x Chan:%u Freq:%.2f %s RSSI:%u Band:%s Vol:%u BassEn:%u\r\n",
 800467c:	4b4d      	ldr	r3, [pc, #308]	; (80047b4 <StartTask+0x6c4>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	461e      	mov	r6, r3
 8004682:	4b4d      	ldr	r3, [pc, #308]	; (80047b8 <StartTask+0x6c8>)
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	4698      	mov	r8, r3
 8004688:	4b46      	ldr	r3, [pc, #280]	; (80047a4 <StartTask+0x6b4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f7fb ff6b 	bl	8000568 <__aeabi_f2d>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4942      	ldr	r1, [pc, #264]	; (80047a0 <StartTask+0x6b0>)
 8004698:	8809      	ldrh	r1, [r1, #0]
 800469a:	460c      	mov	r4, r1
 800469c:	4947      	ldr	r1, [pc, #284]	; (80047bc <StartTask+0x6cc>)
 800469e:	7809      	ldrb	r1, [r1, #0]
 80046a0:	4608      	mov	r0, r1
 80046a2:	4947      	ldr	r1, [pc, #284]	; (80047c0 <StartTask+0x6d0>)
 80046a4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80046a8:	4846      	ldr	r0, [pc, #280]	; (80047c4 <StartTask+0x6d4>)
 80046aa:	7800      	ldrb	r0, [r0, #0]
 80046ac:	4605      	mov	r5, r0
 80046ae:	4846      	ldr	r0, [pc, #280]	; (80047c8 <StartTask+0x6d8>)
 80046b0:	7800      	ldrb	r0, [r0, #0]
 80046b2:	9006      	str	r0, [sp, #24]
 80046b4:	9505      	str	r5, [sp, #20]
 80046b6:	9104      	str	r1, [sp, #16]
 80046b8:	9403      	str	r4, [sp, #12]
 80046ba:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80046be:	9102      	str	r1, [sp, #8]
 80046c0:	e9cd 2300 	strd	r2, r3, [sp]
 80046c4:	4643      	mov	r3, r8
 80046c6:	4632      	mov	r2, r6
 80046c8:	4940      	ldr	r1, [pc, #256]	; (80047cc <StartTask+0x6dc>)
 80046ca:	2001      	movs	r0, #1
 80046cc:	f7fe fd76 	bl	80031bc <Report>
    			rdaID, Chan, Freq, sta, RSSI, allBands[Band], Volume, BassBoost);

    ST7565_DrawRectangle(0, lfnt->FontHeight, SCREEN_WIDTH - 1, SCREEN_HEIGHT - (lfnt->FontHeight << 1) - 2, PIX_ON);
 80046d0:	4b36      	ldr	r3, [pc, #216]	; (80047ac <StartTask+0x6bc>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	785b      	ldrb	r3, [r3, #1]
 80046d6:	b219      	sxth	r1, r3
 80046d8:	4b34      	ldr	r3, [pc, #208]	; (80047ac <StartTask+0x6bc>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	785b      	ldrb	r3, [r3, #1]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	b21b      	sxth	r3, r3
 80046ec:	2201      	movs	r2, #1
 80046ee:	9200      	str	r2, [sp, #0]
 80046f0:	227f      	movs	r2, #127	; 0x7f
 80046f2:	2000      	movs	r0, #0
 80046f4:	f7fd fb25 	bl	8001d42 <ST7565_DrawRectangle>
    ST7565_DrawFilledRectangle(0, 0, SCREEN_WIDTH - 1, lfnt->FontHeight, PIX_ON);
 80046f8:	4b2c      	ldr	r3, [pc, #176]	; (80047ac <StartTask+0x6bc>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	785b      	ldrb	r3, [r3, #1]
 80046fe:	b21b      	sxth	r3, r3
 8004700:	2201      	movs	r2, #1
 8004702:	9200      	str	r2, [sp, #0]
 8004704:	227f      	movs	r2, #127	; 0x7f
 8004706:	2100      	movs	r1, #0
 8004708:	2000      	movs	r0, #0
 800470a:	f7fd fb9c 	bl	8001e46 <ST7565_DrawFilledRectangle>
    ST7565_Update();
 800470e:	f7fc ff91 	bl	8001634 <ST7565_Update>

    startSec = true;
 8004712:	4b2f      	ldr	r3, [pc, #188]	; (80047d0 <StartTask+0x6e0>)
 8004714:	2201      	movs	r2, #1
 8004716:	701a      	strb	r2, [r3, #0]

#endif


#ifdef SET_IRED
    waitBit = false;
 8004718:	4b2e      	ldr	r3, [pc, #184]	; (80047d4 <StartTask+0x6e4>)
 800471a:	2200      	movs	r2, #0
 800471c:	701a      	strb	r2, [r3, #0]
#endif

#ifdef SET_RDS
    blocks_t *blk = NULL;
 800471e:	2300      	movs	r3, #0
 8004720:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    const uint64_t rdsWait = _30ms;
 8004724:	f04f 0203 	mov.w	r2, #3
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
    bool rdsFlag = false;
 8004730:	2300      	movs	r3, #0
 8004732:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
    uint64_t rdsTime = 0;
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
    //rds_init();
    //
    evts.evt = evt_Rds;
 8004742:	2316      	movs	r3, #22
 8004744:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (osMessageQueuePut(evtQueHandle, (const void *)&evts, prio, 20) != osOK) devError |= devEVT;
 8004748:	4b23      	ldr	r3, [pc, #140]	; (80047d8 <StartTask+0x6e8>)
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	4b23      	ldr	r3, [pc, #140]	; (80047dc <StartTask+0x6ec>)
 800474e:	781a      	ldrb	r2, [r3, #0]
 8004750:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8004754:	2314      	movs	r3, #20
 8004756:	f00c f833 	bl	80107c0 <osMessageQueuePut>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d006      	beq.n	800476e <StartTask+0x67e>
 8004760:	4b1f      	ldr	r3, [pc, #124]	; (80047e0 <StartTask+0x6f0>)
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	f043 0310 	orr.w	r3, r3, #16
 8004768:	b29a      	uxth	r2, r3
 800476a:	4b1d      	ldr	r3, [pc, #116]	; (80047e0 <StartTask+0x6f0>)
 800476c:	801a      	strh	r2, [r3, #0]
#endif

	evts.evt = evt_Freq;
 800476e:	230c      	movs	r3, #12
 8004770:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if (osMessageQueuePut(evtQueHandle, (const void *)&evts, prio, 20) != osOK) devError |= devEVT;
 8004774:	4b18      	ldr	r3, [pc, #96]	; (80047d8 <StartTask+0x6e8>)
 8004776:	6818      	ldr	r0, [r3, #0]
 8004778:	4b18      	ldr	r3, [pc, #96]	; (80047dc <StartTask+0x6ec>)
 800477a:	781a      	ldrb	r2, [r3, #0]
 800477c:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8004780:	2314      	movs	r3, #20
 8004782:	f00c f81d 	bl	80107c0 <osMessageQueuePut>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	f001 83bf 	beq.w	8005f0c <StartTask+0x1e1c>
 800478e:	4b14      	ldr	r3, [pc, #80]	; (80047e0 <StartTask+0x6f0>)
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	f043 0310 	orr.w	r3, r3, #16
 8004796:	b29a      	uxth	r2, r3
 8004798:	4b11      	ldr	r3, [pc, #68]	; (80047e0 <StartTask+0x6f0>)
 800479a:	801a      	strh	r2, [r3, #0]


    while (!restart) {
 800479c:	f001 bbb6 	b.w	8005f0c <StartTask+0x1e1c>
 80047a0:	20003046 	.word	0x20003046
 80047a4:	20000124 	.word	0x20000124
 80047a8:	08018aec 	.word	0x08018aec
 80047ac:	20003038 	.word	0x20003038
 80047b0:	080188d4 	.word	0x080188d4
 80047b4:	20003048 	.word	0x20003048
 80047b8:	20003044 	.word	0x20003044
 80047bc:	2000012c 	.word	0x2000012c
 80047c0:	20000138 	.word	0x20000138
 80047c4:	2000012f 	.word	0x2000012f
 80047c8:	2000304a 	.word	0x2000304a
 80047cc:	08018b00 	.word	0x08018b00
 80047d0:	20003034 	.word	0x20003034
 80047d4:	20000008 	.word	0x20000008
 80047d8:	20000f60 	.word	0x20000f60
 80047dc:	20003430 	.word	0x20003430
 80047e0:	20001bf4 	.word	0x20001bf4

		evts.evt = evt_None;
 80047e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		if (osMessageQueueGet(evtQueHandle, &evts, NULL, 1) == osOK) {
 80047ec:	4bc0      	ldr	r3, [pc, #768]	; (8004af0 <StartTask+0xa00>)
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80047f4:	2301      	movs	r3, #1
 80047f6:	2200      	movs	r2, #0
 80047f8:	f00c f842 	bl	8010880 <osMessageQueueGet>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f040 87b9 	bne.w	8005776 <StartTask+0x1686>
			evt = evts.evt;
 8004804:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004808:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    		cntEvt = getQueCount(evtQueHandle);
 800480c:	4bb8      	ldr	r3, [pc, #736]	; (8004af0 <StartTask+0xa00>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4618      	mov	r0, r3
 8004812:	f7fe f9bb 	bl	8002b8c <getQueCount>
 8004816:	4603      	mov	r3, r0
 8004818:	b2da      	uxtb	r2, r3
 800481a:	4bb6      	ldr	r3, [pc, #728]	; (8004af4 <StartTask+0xa04>)
 800481c:	701a      	strb	r2, [r3, #0]
    		if (evt != evt_Sec) {
 800481e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004822:	2b08      	cmp	r3, #8
 8004824:	d046      	beq.n	80048b4 <StartTask+0x7c4>
    			//Report(1, "[que:%u] get event '%s'\r\n", cntEvt, str_cmds[evt]);
	#ifdef SET_DISPLAY
    			ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - lfnt->FontHeight, SCREEN_WIDTH - 1, lfnt->FontHeight, PIX_OFF);
 8004826:	4bb4      	ldr	r3, [pc, #720]	; (8004af8 <StartTask+0xa08>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	785b      	ldrb	r3, [r3, #1]
 800482c:	b29b      	uxth	r3, r3
 800482e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004832:	b29b      	uxth	r3, r3
 8004834:	b219      	sxth	r1, r3
 8004836:	4bb0      	ldr	r3, [pc, #704]	; (8004af8 <StartTask+0xa08>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	785b      	ldrb	r3, [r3, #1]
 800483c:	b21b      	sxth	r3, r3
 800483e:	2200      	movs	r2, #0
 8004840:	9200      	str	r2, [sp, #0]
 8004842:	227f      	movs	r2, #127	; 0x7f
 8004844:	2000      	movs	r0, #0
 8004846:	f7fd fafe 	bl	8001e46 <ST7565_DrawFilledRectangle>
    			int dl = sprintf(tmp, "evt(%u) : %s", cntEvt, str_cmds[evt]);
 800484a:	4baa      	ldr	r3, [pc, #680]	; (8004af4 <StartTask+0xa04>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	b2db      	uxtb	r3, r3
 8004850:	4619      	mov	r1, r3
 8004852:	4aaa      	ldr	r2, [pc, #680]	; (8004afc <StartTask+0xa0c>)
 8004854:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800485c:	460a      	mov	r2, r1
 800485e:	49a8      	ldr	r1, [pc, #672]	; (8004b00 <StartTask+0xa10>)
 8004860:	48a8      	ldr	r0, [pc, #672]	; (8004b04 <StartTask+0xa14>)
 8004862:	f010 f955 	bl	8014b10 <siprintf>
 8004866:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    			int x = ((SCREEN_WIDTH - (lfnt->FontWidth * dl)) >> 1) & 0x7f;
 800486a:	4ba3      	ldr	r3, [pc, #652]	; (8004af8 <StartTask+0xa08>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	461a      	mov	r2, r3
 8004872:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004876:	fb02 f303 	mul.w	r3, r2, r3
 800487a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800487e:	105b      	asrs	r3, r3, #1
 8004880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    			ST7565_Print(x, SCREEN_HEIGHT - lfnt->FontHeight, tmp, lfnt, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8004888:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800488c:	b218      	sxth	r0, r3
 800488e:	4b9a      	ldr	r3, [pc, #616]	; (8004af8 <StartTask+0xa08>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	785b      	ldrb	r3, [r3, #1]
 8004894:	b29b      	uxth	r3, r3
 8004896:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800489a:	b29b      	uxth	r3, r3
 800489c:	b219      	sxth	r1, r3
 800489e:	4b96      	ldr	r3, [pc, #600]	; (8004af8 <StartTask+0xa08>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2201      	movs	r2, #1
 80048a4:	9201      	str	r2, [sp, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	9200      	str	r2, [sp, #0]
 80048aa:	4a96      	ldr	r2, [pc, #600]	; (8004b04 <StartTask+0xa14>)
 80048ac:	f7fd f872 	bl	8001994 <ST7565_Print>
    			ST7565_Update();
 80048b0:	f7fc fec0 	bl	8001634 <ST7565_Update>
	#endif
    		}
    		switch (evt) {
 80048b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048b8:	2b1d      	cmp	r3, #29
 80048ba:	f200 874c 	bhi.w	8005756 <StartTask+0x1666>
 80048be:	a201      	add	r2, pc, #4	; (adr r2, 80048c4 <StartTask+0x7d4>)
 80048c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c4:	080053f9 	.word	0x080053f9
 80048c8:	080054a9 	.word	0x080054a9
 80048cc:	080054c1 	.word	0x080054c1
 80048d0:	080054e1 	.word	0x080054e1
 80048d4:	080054f3 	.word	0x080054f3
 80048d8:	08005697 	.word	0x08005697
 80048dc:	080054f3 	.word	0x080054f3
 80048e0:	08005615 	.word	0x08005615
 80048e4:	08005135 	.word	0x08005135
 80048e8:	080050c3 	.word	0x080050c3
 80048ec:	080053e1 	.word	0x080053e1
 80048f0:	080050a3 	.word	0x080050a3
 80048f4:	08004f39 	.word	0x08004f39
 80048f8:	08004e31 	.word	0x08004e31
 80048fc:	08004ead 	.word	0x08004ead
 8004900:	08004d4d 	.word	0x08004d4d
 8004904:	08004c83 	.word	0x08004c83
 8004908:	08004b5f 	.word	0x08004b5f
 800490c:	08004c7b 	.word	0x08004c7b
 8004910:	08004b41 	.word	0x08004b41
 8004914:	08004a91 	.word	0x08004a91
 8004918:	08004a73 	.word	0x08004a73
 800491c:	08004a15 	.word	0x08004a15
 8004920:	08005399 	.word	0x08005399
 8004924:	080053b1 	.word	0x080053b1
 8004928:	080053c9 	.word	0x080053c9
 800492c:	080049d9 	.word	0x080049d9
 8004930:	0800493d 	.word	0x0800493d
 8004934:	08004951 	.word	0x08004951
 8004938:	08004995 	.word	0x08004995
#ifdef SET_ENC
    			case evt_EncKey:
    				Report(1, "[que:%u] encKey released now\r\n", cntEvt);
 800493c:	4b6d      	ldr	r3, [pc, #436]	; (8004af4 <StartTask+0xa04>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	b2db      	uxtb	r3, r3
 8004942:	461a      	mov	r2, r3
 8004944:	4970      	ldr	r1, [pc, #448]	; (8004b08 <StartTask+0xa18>)
 8004946:	2001      	movs	r0, #1
 8004948:	f7fe fc38 	bl	80031bc <Report>
    			break;
 800494c:	f000 bf03 	b.w	8005756 <StartTask+0x1666>
    			case evt_IncFreq:
    				Report(1, "[que:%u] incFreq %.2f + step 100Khz = %.2f\r\n", cntEvt, Freq, Freq + 0.1);
 8004950:	4b68      	ldr	r3, [pc, #416]	; (8004af4 <StartTask+0xa04>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	b2db      	uxtb	r3, r3
 8004956:	461e      	mov	r6, r3
 8004958:	4b6c      	ldr	r3, [pc, #432]	; (8004b0c <StartTask+0xa1c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4618      	mov	r0, r3
 800495e:	f7fb fe03 	bl	8000568 <__aeabi_f2d>
 8004962:	4604      	mov	r4, r0
 8004964:	460d      	mov	r5, r1
 8004966:	4b69      	ldr	r3, [pc, #420]	; (8004b0c <StartTask+0xa1c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f7fb fdfc 	bl	8000568 <__aeabi_f2d>
 8004970:	a35d      	add	r3, pc, #372	; (adr r3, 8004ae8 <StartTask+0x9f8>)
 8004972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004976:	f7fb fc99 	bl	80002ac <__adddf3>
 800497a:	4602      	mov	r2, r0
 800497c:	460b      	mov	r3, r1
 800497e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004982:	e9cd 4500 	strd	r4, r5, [sp]
 8004986:	4632      	mov	r2, r6
 8004988:	4961      	ldr	r1, [pc, #388]	; (8004b10 <StartTask+0xa20>)
 800498a:	2001      	movs	r0, #1
 800498c:	f7fe fc16 	bl	80031bc <Report>
    			break;
 8004990:	f000 bee1 	b.w	8005756 <StartTask+0x1666>
    			case evt_DecFreq:
    				Report(1, "[que:%u] decFreq %.2f - step 100Khz = %.2f\r\n", cntEvt, Freq, Freq - 0.1);
 8004994:	4b57      	ldr	r3, [pc, #348]	; (8004af4 <StartTask+0xa04>)
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	461e      	mov	r6, r3
 800499c:	4b5b      	ldr	r3, [pc, #364]	; (8004b0c <StartTask+0xa1c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fb fde1 	bl	8000568 <__aeabi_f2d>
 80049a6:	4604      	mov	r4, r0
 80049a8:	460d      	mov	r5, r1
 80049aa:	4b58      	ldr	r3, [pc, #352]	; (8004b0c <StartTask+0xa1c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fb fdda 	bl	8000568 <__aeabi_f2d>
 80049b4:	a34c      	add	r3, pc, #304	; (adr r3, 8004ae8 <StartTask+0x9f8>)
 80049b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ba:	f7fb fc75 	bl	80002a8 <__aeabi_dsub>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80049c6:	e9cd 4500 	strd	r4, r5, [sp]
 80049ca:	4632      	mov	r2, r6
 80049cc:	4951      	ldr	r1, [pc, #324]	; (8004b14 <StartTask+0xa24>)
 80049ce:	2001      	movs	r0, #1
 80049d0:	f7fe fbf4 	bl	80031bc <Report>
    			break;
 80049d4:	f000 bebf 	b.w	8005756 <StartTask+0x1666>
#endif
#ifdef SET_IRED
    			case evt_iRed:
    				if (ired_show) {
 80049d8:	4b4f      	ldr	r3, [pc, #316]	; (8004b18 <StartTask+0xa28>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00c      	beq.n	80049fa <StartTask+0x90a>
    					ired_show = false;
 80049e0:	4b4d      	ldr	r3, [pc, #308]	; (8004b18 <StartTask+0xa28>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	701a      	strb	r2, [r3, #0]
    					Report(1, "[que:%u] iRed Show code is hide\r\n", cntEvt);
 80049e6:	4b43      	ldr	r3, [pc, #268]	; (8004af4 <StartTask+0xa04>)
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	461a      	mov	r2, r3
 80049ee:	494b      	ldr	r1, [pc, #300]	; (8004b1c <StartTask+0xa2c>)
 80049f0:	2001      	movs	r0, #1
 80049f2:	f7fe fbe3 	bl	80031bc <Report>
    				} else {
    					ired_show = true;
    					Report(1, "[que:%u] iRed Show code is show\r\n", cntEvt);
    				}
    			break;
 80049f6:	f000 beae 	b.w	8005756 <StartTask+0x1666>
    					ired_show = true;
 80049fa:	4b47      	ldr	r3, [pc, #284]	; (8004b18 <StartTask+0xa28>)
 80049fc:	2201      	movs	r2, #1
 80049fe:	701a      	strb	r2, [r3, #0]
    					Report(1, "[que:%u] iRed Show code is show\r\n", cntEvt);
 8004a00:	4b3c      	ldr	r3, [pc, #240]	; (8004af4 <StartTask+0xa04>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	461a      	mov	r2, r3
 8004a08:	4945      	ldr	r1, [pc, #276]	; (8004b20 <StartTask+0xa30>)
 8004a0a:	2001      	movs	r0, #1
 8004a0c:	f7fe fbd6 	bl	80031bc <Report>
    			break;
 8004a10:	f000 bea1 	b.w	8005756 <StartTask+0x1666>
#endif
#ifdef SET_RDS
    			case evt_Rds:
    				rds_init();
 8004a14:	f7fe fd14 	bl	8003440 <rds_init>
    				if (!rdsFlag) {
 8004a18:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 8004a1c:	f083 0301 	eor.w	r3, r3, #1
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d012      	beq.n	8004a4c <StartTask+0x95c>
    					Report(1, "[que:%u] RDS monitoring start\r\n", cntEvt);
 8004a26:	4b33      	ldr	r3, [pc, #204]	; (8004af4 <StartTask+0xa04>)
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	493d      	ldr	r1, [pc, #244]	; (8004b24 <StartTask+0xa34>)
 8004a30:	2001      	movs	r0, #1
 8004a32:	f7fe fbc3 	bl	80031bc <Report>
    					rdsFlag = true;
 8004a36:	2301      	movs	r3, #1
 8004a38:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
    					rdsTime = get_mstmr(rdsWait);
 8004a3c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004a40:	f7fe fa9a 	bl	8002f78 <get_mstmr>
 8004a44:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128
    				} else {
    					Report(1, "[que:%u] RDS monitoring stop\r\n", cntEvt);
    					rdsFlag = false;
    					rdsTime = 0;
    				}
    			break;
 8004a48:	f000 be85 	b.w	8005756 <StartTask+0x1666>
    					Report(1, "[que:%u] RDS monitoring stop\r\n", cntEvt);
 8004a4c:	4b29      	ldr	r3, [pc, #164]	; (8004af4 <StartTask+0xa04>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	461a      	mov	r2, r3
 8004a54:	4934      	ldr	r1, [pc, #208]	; (8004b28 <StartTask+0xa38>)
 8004a56:	2001      	movs	r0, #1
 8004a58:	f7fe fbb0 	bl	80031bc <Report>
    					rdsFlag = false;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
    					rdsTime = 0;
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
    			break;
 8004a6e:	f000 be72 	b.w	8005756 <StartTask+0x1666>
#endif
    			case evt_SleepCont:
    				sleep_mode = true;
 8004a72:	4b2e      	ldr	r3, [pc, #184]	; (8004b2c <StartTask+0xa3c>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	701a      	strb	r2, [r3, #0]
    				//
    				HAL_SuspendTick();
 8004a78:	f002 fcd8 	bl	800742c <HAL_SuspendTick>
    				HAL_PWR_EnableSleepOnExit();
 8004a7c:	f005 feb6 	bl	800a7ec <HAL_PWR_EnableSleepOnExit>
    				HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8004a80:	2101      	movs	r1, #1
 8004a82:	2000      	movs	r0, #0
 8004a84:	f005 fe7e 	bl	800a784 <HAL_PWR_EnterSLEEPMode>
    				HAL_ResumeTick();
 8004a88:	f002 fce2 	bl	8007450 <HAL_ResumeTick>
    			break;
 8004a8c:	f000 be63 	b.w	8005756 <StartTask+0x1666>
    			case evt_Sleep:
    				Report(1, "Going into SLEEP MODE...\r\n");// in 1 second\r\n");
 8004a90:	4927      	ldr	r1, [pc, #156]	; (8004b30 <StartTask+0xa40>)
 8004a92:	2001      	movs	r0, #1
 8004a94:	f7fe fb92 	bl	80031bc <Report>
	#ifdef SET_BLE
    				bleWrite("AT+SLEEP1\r\n", 1);
	#endif
	#ifdef SET_DISPLAY
    				ST7565_CMD_DISPLAY(CMD_DISPLAY_OFF);
 8004a98:	20ae      	movs	r0, #174	; 0xae
 8004a9a:	f7fc fd4d 	bl	8001538 <ST7565_CMD_DISPLAY>
	#endif
    				HAL_Delay(250);
 8004a9e:	20fa      	movs	r0, #250	; 0xfa
 8004aa0:	f003 fc60 	bl	8008364 <HAL_Delay>
    				HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004aaa:	4822      	ldr	r0, [pc, #136]	; (8004b34 <StartTask+0xa44>)
 8004aac:	f004 f9a6 	bl	8008dfc <HAL_GPIO_WritePin>
    				evts.evt = evt_SleepCont;
 8004ab0:	2315      	movs	r3, #21
 8004ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    				if (osMessageQueuePut(evtQueHandle, (const void *)&evts, prio, 10) != osOK) devError |= devEVT;
 8004ab6:	4b0e      	ldr	r3, [pc, #56]	; (8004af0 <StartTask+0xa00>)
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	4b1f      	ldr	r3, [pc, #124]	; (8004b38 <StartTask+0xa48>)
 8004abc:	781a      	ldrb	r2, [r3, #0]
 8004abe:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8004ac2:	230a      	movs	r3, #10
 8004ac4:	f00b fe7c 	bl	80107c0 <osMessageQueuePut>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 8602 	beq.w	80056d4 <StartTask+0x15e4>
 8004ad0:	4b1a      	ldr	r3, [pc, #104]	; (8004b3c <StartTask+0xa4c>)
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	f043 0310 	orr.w	r3, r3, #16
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	4b18      	ldr	r3, [pc, #96]	; (8004b3c <StartTask+0xa4c>)
 8004adc:	801a      	strh	r2, [r3, #0]
    			break;
 8004ade:	f000 bdf9 	b.w	80056d4 <StartTask+0x15e4>
 8004ae2:	bf00      	nop
 8004ae4:	f3af 8000 	nop.w
 8004ae8:	9999999a 	.word	0x9999999a
 8004aec:	3fb99999 	.word	0x3fb99999
 8004af0:	20000f60 	.word	0x20000f60
 8004af4:	2000200f 	.word	0x2000200f
 8004af8:	20003038 	.word	0x20003038
 8004afc:	20000098 	.word	0x20000098
 8004b00:	08018b44 	.word	0x08018b44
 8004b04:	20001374 	.word	0x20001374
 8004b08:	08018b54 	.word	0x08018b54
 8004b0c:	20000124 	.word	0x20000124
 8004b10:	08018b74 	.word	0x08018b74
 8004b14:	08018ba4 	.word	0x08018ba4
 8004b18:	2000014c 	.word	0x2000014c
 8004b1c:	08018bd4 	.word	0x08018bd4
 8004b20:	08018bf8 	.word	0x08018bf8
 8004b24:	08018c1c 	.word	0x08018c1c
 8004b28:	08018c3c 	.word	0x08018c3c
 8004b2c:	20003406 	.word	0x20003406
 8004b30:	08018c5c 	.word	0x08018c5c
 8004b34:	48000800 	.word	0x48000800
 8004b38:	20003430 	.word	0x20003430
 8004b3c:	20001bf4 	.word	0x20001bf4
    			case evt_ExitSleep:
    				HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8004b40:	2201      	movs	r2, #1
 8004b42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b46:	48a0      	ldr	r0, [pc, #640]	; (8004dc8 <StartTask+0xcd8>)
 8004b48:	f004 f958 	bl	8008dfc <HAL_GPIO_WritePin>
	#ifdef SET_DISPLAY
    				ST7565_CMD_DISPLAY(CMD_DISPLAY_ON);
 8004b4c:	20af      	movs	r0, #175	; 0xaf
 8004b4e:	f7fc fcf3 	bl	8001538 <ST7565_CMD_DISPLAY>
	#endif
	#ifdef SET_BLE
    				bleWakeUp();
	#endif
    				Report(1, "Exit from SLEEP MODE\r\n");
 8004b52:	499e      	ldr	r1, [pc, #632]	; (8004dcc <StartTask+0xcdc>)
 8004b54:	2001      	movs	r0, #1
 8004b56:	f7fe fb31 	bl	80031bc <Report>
    			break;
 8004b5a:	f000 bdfc 	b.w	8005756 <StartTask+0x1666>
    			case evt_WakeUp:
    				bleWakeUp();
    			break;
	#endif
    			case evt_Band:
    				Band = newBand;
 8004b5e:	4b9c      	ldr	r3, [pc, #624]	; (8004dd0 <StartTask+0xce0>)
 8004b60:	781a      	ldrb	r2, [r3, #0]
 8004b62:	4b9c      	ldr	r3, [pc, #624]	; (8004dd4 <StartTask+0xce4>)
 8004b64:	701a      	strb	r2, [r3, #0]
    				if (!rda5807_Set_Band(Band)) {
 8004b66:	4b9b      	ldr	r3, [pc, #620]	; (8004dd4 <StartTask+0xce4>)
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f001 ff7c 	bl	8006a68 <rda5807_Set_Band>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f040 85b0 	bne.w	80056d8 <StartTask+0x15e8>
    					sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 8004b78:	4b96      	ldr	r3, [pc, #600]	; (8004dd4 <StartTask+0xce4>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	4b96      	ldr	r3, [pc, #600]	; (8004dd8 <StartTask+0xce8>)
 8004b80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004b84:	f107 031c 	add.w	r3, r7, #28
 8004b88:	4994      	ldr	r1, [pc, #592]	; (8004ddc <StartTask+0xcec>)
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f00f ffc0 	bl	8014b10 <siprintf>
    					showLine(stb, lin3, &lit, true);
 8004b90:	f107 0218 	add.w	r2, r7, #24
 8004b94:	f8b7 10fe 	ldrh.w	r1, [r7, #254]	; 0xfe
 8004b98:	f107 001c 	add.w	r0, r7, #28
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	f7fe f92b 	bl	8002df8 <showLine>
    					Report(1, "[que:%u] set new band=%u '%s'\r\n", cntEvt, Band, allBands[Band]);
 8004ba2:	4b8f      	ldr	r3, [pc, #572]	; (8004de0 <StartTask+0xcf0>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4b8a      	ldr	r3, [pc, #552]	; (8004dd4 <StartTask+0xce4>)
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	4b88      	ldr	r3, [pc, #544]	; (8004dd4 <StartTask+0xce4>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	4b88      	ldr	r3, [pc, #544]	; (8004dd8 <StartTask+0xce8>)
 8004bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	460a      	mov	r2, r1
 8004bc2:	4988      	ldr	r1, [pc, #544]	; (8004de4 <StartTask+0xcf4>)
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	f7fe faf9 	bl	80031bc <Report>
    					if (next_evt == evt) {
 8004bca:	4b87      	ldr	r3, [pc, #540]	; (8004de8 <StartTask+0xcf8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d134      	bne.n	8004c40 <StartTask+0xb50>
    						if ((Freq < lBand) || (Freq > rBand)) {
 8004bd6:	4b85      	ldr	r3, [pc, #532]	; (8004dec <StartTask+0xcfc>)
 8004bd8:	ed93 7a00 	vldr	s14, [r3]
 8004bdc:	4b84      	ldr	r3, [pc, #528]	; (8004df0 <StartTask+0xd00>)
 8004bde:	edd3 7a00 	vldr	s15, [r3]
 8004be2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bea:	d40c      	bmi.n	8004c06 <StartTask+0xb16>
 8004bec:	4b7f      	ldr	r3, [pc, #508]	; (8004dec <StartTask+0xcfc>)
 8004bee:	ed93 7a00 	vldr	s14, [r3]
 8004bf2:	4b80      	ldr	r3, [pc, #512]	; (8004df4 <StartTask+0xd04>)
 8004bf4:	edd3 7a00 	vldr	s15, [r3]
 8004bf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c00:	dc01      	bgt.n	8004c06 <StartTask+0xb16>
    						next_evt = evt;
    						evts.evt = evt_Freq;
    						if (osMessageQueuePut(evtQueHandle, (const void *)&evts, prio, 10) != osOK) devError |= devEVT;
    					}
    				}
    			break;
 8004c02:	f000 bd69 	b.w	80056d8 <StartTask+0x15e8>
    							newFreq = lBand;
 8004c06:	4b7a      	ldr	r3, [pc, #488]	; (8004df0 <StartTask+0xd00>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a7b      	ldr	r2, [pc, #492]	; (8004df8 <StartTask+0xd08>)
 8004c0c:	6013      	str	r3, [r2, #0]
    							evts.evt = evt_Freq;
 8004c0e:	230c      	movs	r3, #12
 8004c10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    							if (osMessageQueuePut(evtQueHandle, (const void *)&evts, prio, 10) != osOK) devError |= devEVT;
 8004c14:	4b79      	ldr	r3, [pc, #484]	; (8004dfc <StartTask+0xd0c>)
 8004c16:	6818      	ldr	r0, [r3, #0]
 8004c18:	4b79      	ldr	r3, [pc, #484]	; (8004e00 <StartTask+0xd10>)
 8004c1a:	781a      	ldrb	r2, [r3, #0]
 8004c1c:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8004c20:	230a      	movs	r3, #10
 8004c22:	f00b fdcd 	bl	80107c0 <osMessageQueuePut>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8555 	beq.w	80056d8 <StartTask+0x15e8>
 8004c2e:	4b75      	ldr	r3, [pc, #468]	; (8004e04 <StartTask+0xd14>)
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	f043 0310 	orr.w	r3, r3, #16
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	4b72      	ldr	r3, [pc, #456]	; (8004e04 <StartTask+0xd14>)
 8004c3a:	801a      	strh	r2, [r3, #0]
    			break;
 8004c3c:	f000 bd4c 	b.w	80056d8 <StartTask+0x15e8>
    						next_evt = evt;
 8004c40:	4a69      	ldr	r2, [pc, #420]	; (8004de8 <StartTask+0xcf8>)
 8004c42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c46:	6013      	str	r3, [r2, #0]
    						evts.evt = evt_Freq;
 8004c48:	230c      	movs	r3, #12
 8004c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    						if (osMessageQueuePut(evtQueHandle, (const void *)&evts, prio, 10) != osOK) devError |= devEVT;
 8004c4e:	4b6b      	ldr	r3, [pc, #428]	; (8004dfc <StartTask+0xd0c>)
 8004c50:	6818      	ldr	r0, [r3, #0]
 8004c52:	4b6b      	ldr	r3, [pc, #428]	; (8004e00 <StartTask+0xd10>)
 8004c54:	781a      	ldrb	r2, [r3, #0]
 8004c56:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8004c5a:	230a      	movs	r3, #10
 8004c5c:	f00b fdb0 	bl	80107c0 <osMessageQueuePut>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 8538 	beq.w	80056d8 <StartTask+0x15e8>
 8004c68:	4b66      	ldr	r3, [pc, #408]	; (8004e04 <StartTask+0xd14>)
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	f043 0310 	orr.w	r3, r3, #16
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	4b64      	ldr	r3, [pc, #400]	; (8004e04 <StartTask+0xd14>)
 8004c74:	801a      	strh	r2, [r3, #0]
    			break;
 8004c76:	f000 bd2f 	b.w	80056d8 <StartTask+0x15e8>
    			case evt_Cfg:
    				showCfg();
 8004c7a:	f7fd f953 	bl	8001f24 <showCfg>
    			break;
 8004c7e:	f000 bd6a 	b.w	8005756 <StartTask+0x1666>
    			case evt_List:
    				next_evt = evt_Freq;
 8004c82:	4b59      	ldr	r3, [pc, #356]	; (8004de8 <StartTask+0xcf8>)
 8004c84:	220c      	movs	r2, #12
 8004c86:	601a      	str	r2, [r3, #0]
    				newFreq = getNextList(Freq, seek_up, &newBand);
 8004c88:	4b58      	ldr	r3, [pc, #352]	; (8004dec <StartTask+0xcfc>)
 8004c8a:	edd3 7a00 	vldr	s15, [r3]
 8004c8e:	4b5e      	ldr	r3, [pc, #376]	; (8004e08 <StartTask+0xd18>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	494e      	ldr	r1, [pc, #312]	; (8004dd0 <StartTask+0xce0>)
 8004c96:	4618      	mov	r0, r3
 8004c98:	eeb0 0a67 	vmov.f32	s0, s15
 8004c9c:	f7fd ffc8 	bl	8002c30 <getNextList>
 8004ca0:	eef0 7a40 	vmov.f32	s15, s0
 8004ca4:	4b54      	ldr	r3, [pc, #336]	; (8004df8 <StartTask+0xd08>)
 8004ca6:	edc3 7a00 	vstr	s15, [r3]
					if (newBand == Band) {
 8004caa:	4b49      	ldr	r3, [pc, #292]	; (8004dd0 <StartTask+0xce0>)
 8004cac:	781a      	ldrb	r2, [r3, #0]
 8004cae:	4b49      	ldr	r3, [pc, #292]	; (8004dd4 <StartTask+0xce4>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d118      	bne.n	8004ce8 <StartTask+0xbf8>
						Report(1, "Band = newBand = %u -> goto set newFreq to %.1f (up = %u)\r\n", newBand, newFreq, seek_up);
 8004cb6:	4b46      	ldr	r3, [pc, #280]	; (8004dd0 <StartTask+0xce0>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	461c      	mov	r4, r3
 8004cbc:	4b4e      	ldr	r3, [pc, #312]	; (8004df8 <StartTask+0xd08>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fb fc51 	bl	8000568 <__aeabi_f2d>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	494f      	ldr	r1, [pc, #316]	; (8004e08 <StartTask+0xd18>)
 8004ccc:	7809      	ldrb	r1, [r1, #0]
 8004cce:	b2c9      	uxtb	r1, r1
 8004cd0:	9102      	str	r1, [sp, #8]
 8004cd2:	e9cd 2300 	strd	r2, r3, [sp]
 8004cd6:	4622      	mov	r2, r4
 8004cd8:	494c      	ldr	r1, [pc, #304]	; (8004e0c <StartTask+0xd1c>)
 8004cda:	2001      	movs	r0, #1
 8004cdc:	f7fe fa6e 	bl	80031bc <Report>
						evts.evt = evt_Freq;
 8004ce0:	230c      	movs	r3, #12
 8004ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004ce6:	e01b      	b.n	8004d20 <StartTask+0xc30>
					} else {
						Report(1, "Band = %u -> goto set newBand to %u (newFreq to %.1f up = %u)\r\n", Band, newBand, newFreq, seek_up);
 8004ce8:	4b3a      	ldr	r3, [pc, #232]	; (8004dd4 <StartTask+0xce4>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	461c      	mov	r4, r3
 8004cee:	4b38      	ldr	r3, [pc, #224]	; (8004dd0 <StartTask+0xce0>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	461d      	mov	r5, r3
 8004cf4:	4b40      	ldr	r3, [pc, #256]	; (8004df8 <StartTask+0xd08>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7fb fc35 	bl	8000568 <__aeabi_f2d>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4941      	ldr	r1, [pc, #260]	; (8004e08 <StartTask+0xd18>)
 8004d04:	7809      	ldrb	r1, [r1, #0]
 8004d06:	b2c9      	uxtb	r1, r1
 8004d08:	9102      	str	r1, [sp, #8]
 8004d0a:	e9cd 2300 	strd	r2, r3, [sp]
 8004d0e:	462b      	mov	r3, r5
 8004d10:	4622      	mov	r2, r4
 8004d12:	493f      	ldr	r1, [pc, #252]	; (8004e10 <StartTask+0xd20>)
 8004d14:	2001      	movs	r0, #1
 8004d16:	f7fe fa51 	bl	80031bc <Report>
						evts.evt = evt_Band;
 8004d1a:	2311      	movs	r3, #17
 8004d1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					}
					if (osMessageQueuePut(evtQueHandle, (const void *)&evts, prio, 10) != osOK) devError |= devEVT;
 8004d20:	4b36      	ldr	r3, [pc, #216]	; (8004dfc <StartTask+0xd0c>)
 8004d22:	6818      	ldr	r0, [r3, #0]
 8004d24:	4b36      	ldr	r3, [pc, #216]	; (8004e00 <StartTask+0xd10>)
 8004d26:	781a      	ldrb	r2, [r3, #0]
 8004d28:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8004d2c:	230a      	movs	r3, #10
 8004d2e:	f00b fd47 	bl	80107c0 <osMessageQueuePut>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 84d1 	beq.w	80056dc <StartTask+0x15ec>
 8004d3a:	4b32      	ldr	r3, [pc, #200]	; (8004e04 <StartTask+0xd14>)
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	f043 0310 	orr.w	r3, r3, #16
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	4b2f      	ldr	r3, [pc, #188]	; (8004e04 <StartTask+0xd14>)
 8004d46:	801a      	strh	r2, [r3, #0]
    			break;
 8004d48:	f000 bcc8 	b.w	80056dc <StartTask+0x15ec>
    			case evt_Bass:
    				if (newBassBoost != BassBoost) {
 8004d4c:	4b31      	ldr	r3, [pc, #196]	; (8004e14 <StartTask+0xd24>)
 8004d4e:	781a      	ldrb	r2, [r3, #0]
 8004d50:	4b31      	ldr	r3, [pc, #196]	; (8004e18 <StartTask+0xd28>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	f000 84c3 	beq.w	80056e0 <StartTask+0x15f0>
    					BassBoost = newBassBoost;
 8004d5a:	4b2e      	ldr	r3, [pc, #184]	; (8004e14 <StartTask+0xd24>)
 8004d5c:	781a      	ldrb	r2, [r3, #0]
 8004d5e:	4b2e      	ldr	r3, [pc, #184]	; (8004e18 <StartTask+0xd28>)
 8004d60:	701a      	strb	r2, [r3, #0]
    					rda5807_SetBassBoost(BassBoost);
 8004d62:	4b2d      	ldr	r3, [pc, #180]	; (8004e18 <StartTask+0xd28>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f001 fd3e 	bl	80067e8 <rda5807_SetBassBoost>
    					//
    					if (noMute)
 8004d6c:	4b2b      	ldr	r3, [pc, #172]	; (8004e1c <StartTask+0xd2c>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00a      	beq.n	8004d8a <StartTask+0xc9a>
    						sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8004d74:	4b28      	ldr	r3, [pc, #160]	; (8004e18 <StartTask+0xd28>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	4b29      	ldr	r3, [pc, #164]	; (8004e20 <StartTask+0xd30>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8004d82:	4928      	ldr	r1, [pc, #160]	; (8004e24 <StartTask+0xd34>)
 8004d84:	f00f fec4 	bl	8014b10 <siprintf>
 8004d88:	e009      	b.n	8004d9e <StartTask+0xcae>
    					else
    						sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 8004d8a:	4b23      	ldr	r3, [pc, #140]	; (8004e18 <StartTask+0xd28>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	4b23      	ldr	r3, [pc, #140]	; (8004e20 <StartTask+0xd30>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8004d98:	4923      	ldr	r1, [pc, #140]	; (8004e28 <StartTask+0xd38>)
 8004d9a:	f00f feb9 	bl	8014b10 <siprintf>
    					showLine(st, lin4, &lim, true);
 8004d9e:	f107 0214 	add.w	r2, r7, #20
 8004da2:	f8b7 10fc 	ldrh.w	r1, [r7, #252]	; 0xfc
 8004da6:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8004daa:	2301      	movs	r3, #1
 8004dac:	f7fe f824 	bl	8002df8 <showLine>
    					Report(1, "[que:%u] set new BassBoost to %u\r\n", cntEvt, BassBoost);
 8004db0:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <StartTask+0xcf0>)
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	461a      	mov	r2, r3
 8004db8:	4b17      	ldr	r3, [pc, #92]	; (8004e18 <StartTask+0xd28>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	491b      	ldr	r1, [pc, #108]	; (8004e2c <StartTask+0xd3c>)
 8004dbe:	2001      	movs	r0, #1
 8004dc0:	f7fe f9fc 	bl	80031bc <Report>
    				}
    			break;
 8004dc4:	f000 bc8c 	b.w	80056e0 <StartTask+0x15f0>
 8004dc8:	48000800 	.word	0x48000800
 8004dcc:	08018c78 	.word	0x08018c78
 8004dd0:	2000012d 	.word	0x2000012d
 8004dd4:	2000012c 	.word	0x2000012c
 8004dd8:	20000138 	.word	0x20000138
 8004ddc:	08018abc 	.word	0x08018abc
 8004de0:	2000200f 	.word	0x2000200f
 8004de4:	08018c90 	.word	0x08018c90
 8004de8:	20000110 	.word	0x20000110
 8004dec:	20000124 	.word	0x20000124
 8004df0:	2000303c 	.word	0x2000303c
 8004df4:	20003040 	.word	0x20003040
 8004df8:	20000128 	.word	0x20000128
 8004dfc:	20000f60 	.word	0x20000f60
 8004e00:	20003430 	.word	0x20003430
 8004e04:	20001bf4 	.word	0x20001bf4
 8004e08:	2000012e 	.word	0x2000012e
 8004e0c:	08018cb0 	.word	0x08018cb0
 8004e10:	08018cec 	.word	0x08018cec
 8004e14:	2000304b 	.word	0x2000304b
 8004e18:	2000304a 	.word	0x2000304a
 8004e1c:	20000131 	.word	0x20000131
 8004e20:	2000012f 	.word	0x2000012f
 8004e24:	08018ac8 	.word	0x08018ac8
 8004e28:	08018d2c 	.word	0x08018d2c
 8004e2c:	08018d40 	.word	0x08018d40
    			case evt_Vol:
    				if (newVolume != Volume) {
 8004e30:	4ba8      	ldr	r3, [pc, #672]	; (80050d4 <StartTask+0xfe4>)
 8004e32:	781a      	ldrb	r2, [r3, #0]
 8004e34:	4ba8      	ldr	r3, [pc, #672]	; (80050d8 <StartTask+0xfe8>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	f000 8453 	beq.w	80056e4 <StartTask+0x15f4>
    					Volume = newVolume;
 8004e3e:	4ba5      	ldr	r3, [pc, #660]	; (80050d4 <StartTask+0xfe4>)
 8004e40:	781a      	ldrb	r2, [r3, #0]
 8004e42:	4ba5      	ldr	r3, [pc, #660]	; (80050d8 <StartTask+0xfe8>)
 8004e44:	701a      	strb	r2, [r3, #0]
    					rda5807_SetVolume(Volume);
 8004e46:	4ba4      	ldr	r3, [pc, #656]	; (80050d8 <StartTask+0xfe8>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f001 fc84 	bl	8006758 <rda5807_SetVolume>
    					//
    					if (noMute)
 8004e50:	4ba2      	ldr	r3, [pc, #648]	; (80050dc <StartTask+0xfec>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <StartTask+0xd7e>
    						sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8004e58:	4ba1      	ldr	r3, [pc, #644]	; (80050e0 <StartTask+0xff0>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4b9e      	ldr	r3, [pc, #632]	; (80050d8 <StartTask+0xfe8>)
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8004e66:	499f      	ldr	r1, [pc, #636]	; (80050e4 <StartTask+0xff4>)
 8004e68:	f00f fe52 	bl	8014b10 <siprintf>
 8004e6c:	e009      	b.n	8004e82 <StartTask+0xd92>
    					else
    						sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 8004e6e:	4b9c      	ldr	r3, [pc, #624]	; (80050e0 <StartTask+0xff0>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	461a      	mov	r2, r3
 8004e74:	4b98      	ldr	r3, [pc, #608]	; (80050d8 <StartTask+0xfe8>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8004e7c:	499a      	ldr	r1, [pc, #616]	; (80050e8 <StartTask+0xff8>)
 8004e7e:	f00f fe47 	bl	8014b10 <siprintf>
    					showLine(st, lin4, &lim, true);
 8004e82:	f107 0214 	add.w	r2, r7, #20
 8004e86:	f8b7 10fc 	ldrh.w	r1, [r7, #252]	; 0xfc
 8004e8a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f7fd ffb2 	bl	8002df8 <showLine>
    					Report(1, "[que:%u] set new Volume to %u\r\n", cntEvt, Volume);
 8004e94:	4b95      	ldr	r3, [pc, #596]	; (80050ec <StartTask+0xffc>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	4b8e      	ldr	r3, [pc, #568]	; (80050d8 <StartTask+0xfe8>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	4993      	ldr	r1, [pc, #588]	; (80050f0 <StartTask+0x1000>)
 8004ea2:	2001      	movs	r0, #1
 8004ea4:	f7fe f98a 	bl	80031bc <Report>
    				}
    			break;
 8004ea8:	f000 bc1c 	b.w	80056e4 <StartTask+0x15f4>
    			case evt_Mute:
    				noMute = (~noMute) & 1;
 8004eac:	4b8b      	ldr	r3, [pc, #556]	; (80050dc <StartTask+0xfec>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	bf0c      	ite	eq
 8004eb8:	2301      	moveq	r3, #1
 8004eba:	2300      	movne	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	4b86      	ldr	r3, [pc, #536]	; (80050dc <StartTask+0xfec>)
 8004ec2:	701a      	strb	r2, [r3, #0]
    				rda5807_Set_Mute(noMute);
 8004ec4:	4b85      	ldr	r3, [pc, #532]	; (80050dc <StartTask+0xfec>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f001 fe39 	bl	8006b40 <rda5807_Set_Mute>
    				//
    				if (noMute)
 8004ece:	4b83      	ldr	r3, [pc, #524]	; (80050dc <StartTask+0xfec>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <StartTask+0xdfc>
    					sprintf(st, "Bass:%u Vol:%u", BassBoost, Volume);
 8004ed6:	4b82      	ldr	r3, [pc, #520]	; (80050e0 <StartTask+0xff0>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	4b7e      	ldr	r3, [pc, #504]	; (80050d8 <StartTask+0xfe8>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8004ee4:	497f      	ldr	r1, [pc, #508]	; (80050e4 <StartTask+0xff4>)
 8004ee6:	f00f fe13 	bl	8014b10 <siprintf>
 8004eea:	e009      	b.n	8004f00 <StartTask+0xe10>
    				else
    					sprintf(st, "Bass:%u Vol:%u M", BassBoost, Volume);
 8004eec:	4b7c      	ldr	r3, [pc, #496]	; (80050e0 <StartTask+0xff0>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	4b79      	ldr	r3, [pc, #484]	; (80050d8 <StartTask+0xfe8>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8004efa:	497b      	ldr	r1, [pc, #492]	; (80050e8 <StartTask+0xff8>)
 8004efc:	f00f fe08 	bl	8014b10 <siprintf>
    				showLine(st, lin4, &lim, true);
 8004f00:	f107 0214 	add.w	r2, r7, #20
 8004f04:	f8b7 10fc 	ldrh.w	r1, [r7, #252]	; 0xfc
 8004f08:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	f7fd ff73 	bl	8002df8 <showLine>
    				Report(1, "[que:%u] set Mute to %u\r\n", cntEvt, (~noMute) & 1);
 8004f12:	4b76      	ldr	r3, [pc, #472]	; (80050ec <StartTask+0xffc>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4b70      	ldr	r3, [pc, #448]	; (80050dc <StartTask+0xfec>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	bf0c      	ite	eq
 8004f26:	2301      	moveq	r3, #1
 8004f28:	2300      	movne	r3, #0
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	4971      	ldr	r1, [pc, #452]	; (80050f4 <StartTask+0x1004>)
 8004f2e:	2001      	movs	r0, #1
 8004f30:	f7fe f944 	bl	80031bc <Report>
    			break;
 8004f34:	f000 bc0f 	b.w	8005756 <StartTask+0x1666>
    			case evt_Freq:
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 8004f38:	4b6f      	ldr	r3, [pc, #444]	; (80050f8 <StartTask+0x1008>)
 8004f3a:	ed93 7a00 	vldr	s14, [r3]
 8004f3e:	4b6f      	ldr	r3, [pc, #444]	; (80050fc <StartTask+0x100c>)
 8004f40:	edd3 7a00 	vldr	s15, [r3]
 8004f44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4c:	da00      	bge.n	8004f50 <StartTask+0xe60>
    							rdsTime = get_mstmr(rdsWait);
    						}
#endif
    					}
    				}
				break;
 8004f4e:	e3cb      	b.n	80056e8 <StartTask+0x15f8>
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 8004f50:	4b69      	ldr	r3, [pc, #420]	; (80050f8 <StartTask+0x1008>)
 8004f52:	ed93 7a00 	vldr	s14, [r3]
 8004f56:	4b6a      	ldr	r3, [pc, #424]	; (8005100 <StartTask+0x1010>)
 8004f58:	edd3 7a00 	vldr	s15, [r3]
 8004f5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f64:	d900      	bls.n	8004f68 <StartTask+0xe78>
				break;
 8004f66:	e3bf      	b.n	80056e8 <StartTask+0x15f8>
    					if (newFreq != Freq) {
 8004f68:	4b63      	ldr	r3, [pc, #396]	; (80050f8 <StartTask+0x1008>)
 8004f6a:	ed93 7a00 	vldr	s14, [r3]
 8004f6e:	4b65      	ldr	r3, [pc, #404]	; (8005104 <StartTask+0x1014>)
 8004f70:	edd3 7a00 	vldr	s15, [r3]
 8004f74:	eeb4 7a67 	vcmp.f32	s14, s15
 8004f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f7c:	f000 83b4 	beq.w	80056e8 <StartTask+0x15f8>
    						Freq = newFreq;
 8004f80:	4b5d      	ldr	r3, [pc, #372]	; (80050f8 <StartTask+0x1008>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a5f      	ldr	r2, [pc, #380]	; (8005104 <StartTask+0x1014>)
 8004f86:	6013      	str	r3, [r2, #0]
    						uint16_t fr = (uint16_t)(Freq * 10);
 8004f88:	4b5e      	ldr	r3, [pc, #376]	; (8005104 <StartTask+0x1014>)
 8004f8a:	edd3 7a00 	vldr	s15, [r3]
 8004f8e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f9a:	ee17 3a90 	vmov	r3, s15
 8004f9e:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
    						rda5807_SetFreq_In100Khz(fr);
 8004fa2:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f001 fc3e 	bl	8006828 <rda5807_SetFreq_In100Khz>
    						stereo = rda5807_Get_StereoMonoFlag();
 8004fac:	f001 fd32 	bl	8006a14 <rda5807_Get_StereoMonoFlag>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	4b54      	ldr	r3, [pc, #336]	; (8005108 <StartTask+0x1018>)
 8004fb6:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 8004fb8:	f001 fd44 	bl	8006a44 <rda5807_Get_Channel>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	4b52      	ldr	r3, [pc, #328]	; (800510c <StartTask+0x101c>)
 8004fc2:	801a      	strh	r2, [r3, #0]
    						if (stereo)
 8004fc4:	4b50      	ldr	r3, [pc, #320]	; (8005108 <StartTask+0x1018>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d012      	beq.n	8004ff2 <StartTask+0xf02>
    							sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 8004fcc:	4b50      	ldr	r3, [pc, #320]	; (8005110 <StartTask+0x1020>)
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	461c      	mov	r4, r3
 8004fd2:	4b4c      	ldr	r3, [pc, #304]	; (8005104 <StartTask+0x1014>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fb fac6 	bl	8000568 <__aeabi_f2d>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8004fe4:	e9cd 2300 	strd	r2, r3, [sp]
 8004fe8:	4622      	mov	r2, r4
 8004fea:	494a      	ldr	r1, [pc, #296]	; (8005114 <StartTask+0x1024>)
 8004fec:	f00f fd90 	bl	8014b10 <siprintf>
 8004ff0:	e011      	b.n	8005016 <StartTask+0xf26>
    							sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8004ff2:	4b47      	ldr	r3, [pc, #284]	; (8005110 <StartTask+0x1020>)
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	461c      	mov	r4, r3
 8004ff8:	4b42      	ldr	r3, [pc, #264]	; (8005104 <StartTask+0x1014>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7fb fab3 	bl	8000568 <__aeabi_f2d>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800500a:	e9cd 2300 	strd	r2, r3, [sp]
 800500e:	4622      	mov	r2, r4
 8005010:	4941      	ldr	r1, [pc, #260]	; (8005118 <StartTask+0x1028>)
 8005012:	f00f fd7d 	bl	8014b10 <siprintf>
    						showLine(st, lin5, &lil, false);
 8005016:	f107 0210 	add.w	r2, r7, #16
 800501a:	f8b7 10fa 	ldrh.w	r1, [r7, #250]	; 0xfa
 800501e:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8005022:	2300      	movs	r3, #0
 8005024:	f7fd fee8 	bl	8002df8 <showLine>
    						sprintf(sta, "%s", nameStation(Freq));
 8005028:	4b36      	ldr	r3, [pc, #216]	; (8005104 <StartTask+0x1014>)
 800502a:	edd3 7a00 	vldr	s15, [r3]
 800502e:	eeb0 0a67 	vmov.f32	s0, s15
 8005032:	f7fd fdb7 	bl	8002ba4 <nameStation>
 8005036:	4602      	mov	r2, r0
 8005038:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800503c:	4937      	ldr	r1, [pc, #220]	; (800511c <StartTask+0x102c>)
 800503e:	4618      	mov	r0, r3
 8005040:	f00f fd66 	bl	8014b10 <siprintf>
    						showLine(sta, lin6, &lia, true);
 8005044:	f107 020c 	add.w	r2, r7, #12
 8005048:	f8b7 10f8 	ldrh.w	r1, [r7, #248]	; 0xf8
 800504c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8005050:	2301      	movs	r3, #1
 8005052:	f7fd fed1 	bl	8002df8 <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f '%s' (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 8005056:	4b25      	ldr	r3, [pc, #148]	; (80050ec <StartTask+0xffc>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	461c      	mov	r4, r3
 800505e:	4b29      	ldr	r3, [pc, #164]	; (8005104 <StartTask+0x1014>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f7fb fa80 	bl	8000568 <__aeabi_f2d>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	4927      	ldr	r1, [pc, #156]	; (800510c <StartTask+0x101c>)
 800506e:	8809      	ldrh	r1, [r1, #0]
 8005070:	9103      	str	r1, [sp, #12]
 8005072:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005076:	9102      	str	r1, [sp, #8]
 8005078:	e9cd 2300 	strd	r2, r3, [sp]
 800507c:	4622      	mov	r2, r4
 800507e:	4928      	ldr	r1, [pc, #160]	; (8005120 <StartTask+0x1030>)
 8005080:	2001      	movs	r0, #1
 8005082:	f7fe f89b 	bl	80031bc <Report>
    						if (rdsFlag) {
 8005086:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 832c 	beq.w	80056e8 <StartTask+0x15f8>
    							rds_init();
 8005090:	f7fe f9d6 	bl	8003440 <rds_init>
    							rdsTime = get_mstmr(rdsWait);
 8005094:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005098:	f7fd ff6e 	bl	8002f78 <get_mstmr>
 800509c:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128
				break;
 80050a0:	e322      	b.n	80056e8 <StartTask+0x15f8>
    			case evt_Scan:
    				if (!scan) {
 80050a2:	4b20      	ldr	r3, [pc, #128]	; (8005124 <StartTask+0x1034>)
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f040 8353 	bne.w	8005754 <StartTask+0x1664>
    					scan = 1;
 80050ae:	4b1d      	ldr	r3, [pc, #116]	; (8005124 <StartTask+0x1034>)
 80050b0:	2201      	movs	r2, #1
 80050b2:	701a      	strb	r2, [r3, #0]
    					rda5807_StartSeek(seek_up);
 80050b4:	4b1c      	ldr	r3, [pc, #112]	; (8005128 <StartTask+0x1038>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	4618      	mov	r0, r3
 80050bc:	f001 fc6e 	bl	800699c <rda5807_StartSeek>
    				}
    			break;
 80050c0:	e348      	b.n	8005754 <StartTask+0x1664>
    			case evt_Ver:
    				Report(1, "Ver.%s\r\n", ver);
 80050c2:	4b1a      	ldr	r3, [pc, #104]	; (800512c <StartTask+0x103c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	4919      	ldr	r1, [pc, #100]	; (8005130 <StartTask+0x1040>)
 80050ca:	2001      	movs	r0, #1
 80050cc:	f7fe f876 	bl	80031bc <Report>
    			break;
 80050d0:	e341      	b.n	8005756 <StartTask+0x1666>
 80050d2:	bf00      	nop
 80050d4:	20000130 	.word	0x20000130
 80050d8:	2000012f 	.word	0x2000012f
 80050dc:	20000131 	.word	0x20000131
 80050e0:	2000304a 	.word	0x2000304a
 80050e4:	08018ac8 	.word	0x08018ac8
 80050e8:	08018d2c 	.word	0x08018d2c
 80050ec:	2000200f 	.word	0x2000200f
 80050f0:	08018d64 	.word	0x08018d64
 80050f4:	08018d84 	.word	0x08018d84
 80050f8:	20000128 	.word	0x20000128
 80050fc:	2000303c 	.word	0x2000303c
 8005100:	20003040 	.word	0x20003040
 8005104:	20000124 	.word	0x20000124
 8005108:	2000304c 	.word	0x2000304c
 800510c:	20003044 	.word	0x20003044
 8005110:	20003046 	.word	0x20003046
 8005114:	08018ad8 	.word	0x08018ad8
 8005118:	08018aec 	.word	0x08018aec
 800511c:	080188d4 	.word	0x080188d4
 8005120:	08018da0 	.word	0x08018da0
 8005124:	20003049 	.word	0x20003049
 8005128:	2000012e 	.word	0x2000012e
 800512c:	20000004 	.word	0x20000004
 8005130:	08018dd0 	.word	0x08018dd0
    			case evt_Sec:
    			{
	#ifdef SET_DISPLAY
    				dl = sec2str(st);
 8005134:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005138:	4618      	mov	r0, r3
 800513a:	f7fd ffa5 	bl	8003088 <sec2str>
 800513e:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
    				x = ((SCREEN_WIDTH - (lfnt->FontWidth * dl)) >> 1) & 0x7f;
 8005142:	4bb1      	ldr	r3, [pc, #708]	; (8005408 <StartTask+0x1318>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800514e:	fb02 f303 	mul.w	r3, r2, r3
 8005152:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8005156:	105b      	asrs	r3, r3, #1
 8005158:	b29b      	uxth	r3, r3
 800515a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800515e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    				ST7565_Print(x, lin1, st, lfnt, 0, PIX_OFF);
 8005162:	f9b7 00f6 	ldrsh.w	r0, [r7, #246]	; 0xf6
 8005166:	f9b7 1102 	ldrsh.w	r1, [r7, #258]	; 0x102
 800516a:	4ba7      	ldr	r3, [pc, #668]	; (8005408 <StartTask+0x1318>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005172:	2400      	movs	r4, #0
 8005174:	9401      	str	r4, [sp, #4]
 8005176:	2400      	movs	r4, #0
 8005178:	9400      	str	r4, [sp, #0]
 800517a:	f7fc fc0b 	bl	8001994 <ST7565_Print>
	#endif
    				//
    				if (scan) {
 800517e:	4ba3      	ldr	r3, [pc, #652]	; (800540c <StartTask+0x131c>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d05c      	beq.n	8005242 <StartTask+0x1152>
    					if (rda5807_Get_SeekTuneReadyFlag()) {
 8005188:	f001 fc32 	bl	80069f0 <rda5807_Get_SeekTuneReadyFlag>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d057      	beq.n	8005242 <StartTask+0x1152>
    						Freq = (float)rda5807_GetFreq_In100Khz();
 8005192:	f001 fbc3 	bl	800691c <rda5807_GetFreq_In100Khz>
 8005196:	4603      	mov	r3, r0
 8005198:	ee07 3a90 	vmov	s15, r3
 800519c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a0:	4b9b      	ldr	r3, [pc, #620]	; (8005410 <StartTask+0x1320>)
 80051a2:	edc3 7a00 	vstr	s15, [r3]
    						Freq /= 10;
 80051a6:	4b9a      	ldr	r3, [pc, #616]	; (8005410 <StartTask+0x1320>)
 80051a8:	ed93 7a00 	vldr	s14, [r3]
 80051ac:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80051b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051b4:	4b96      	ldr	r3, [pc, #600]	; (8005410 <StartTask+0x1320>)
 80051b6:	edc3 7a00 	vstr	s15, [r3]
    						scan = 0;
 80051ba:	4b94      	ldr	r3, [pc, #592]	; (800540c <StartTask+0x131c>)
 80051bc:	2200      	movs	r2, #0
 80051be:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 80051c0:	f001 fc40 	bl	8006a44 <rda5807_Get_Channel>
 80051c4:	4603      	mov	r3, r0
 80051c6:	461a      	mov	r2, r3
 80051c8:	4b92      	ldr	r3, [pc, #584]	; (8005414 <StartTask+0x1324>)
 80051ca:	801a      	strh	r2, [r3, #0]
    						sprintf(sta, "%s", nameStation(Freq));
 80051cc:	4b90      	ldr	r3, [pc, #576]	; (8005410 <StartTask+0x1320>)
 80051ce:	edd3 7a00 	vldr	s15, [r3]
 80051d2:	eeb0 0a67 	vmov.f32	s0, s15
 80051d6:	f7fd fce5 	bl	8002ba4 <nameStation>
 80051da:	4602      	mov	r2, r0
 80051dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80051e0:	498d      	ldr	r1, [pc, #564]	; (8005418 <StartTask+0x1328>)
 80051e2:	4618      	mov	r0, r3
 80051e4:	f00f fc94 	bl	8014b10 <siprintf>
    						showLine(sta, lin6, &lia, true);
 80051e8:	f107 020c 	add.w	r2, r7, #12
 80051ec:	f8b7 10f8 	ldrh.w	r1, [r7, #248]	; 0xf8
 80051f0:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80051f4:	2301      	movs	r3, #1
 80051f6:	f7fd fdff 	bl	8002df8 <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 80051fa:	4b88      	ldr	r3, [pc, #544]	; (800541c <StartTask+0x132c>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	461c      	mov	r4, r3
 8005202:	4b83      	ldr	r3, [pc, #524]	; (8005410 <StartTask+0x1320>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4618      	mov	r0, r3
 8005208:	f7fb f9ae 	bl	8000568 <__aeabi_f2d>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4980      	ldr	r1, [pc, #512]	; (8005414 <StartTask+0x1324>)
 8005212:	8809      	ldrh	r1, [r1, #0]
 8005214:	9103      	str	r1, [sp, #12]
 8005216:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800521a:	9102      	str	r1, [sp, #8]
 800521c:	e9cd 2300 	strd	r2, r3, [sp]
 8005220:	4622      	mov	r2, r4
 8005222:	497f      	ldr	r1, [pc, #508]	; (8005420 <StartTask+0x1330>)
 8005224:	2001      	movs	r0, #1
 8005226:	f7fd ffc9 	bl	80031bc <Report>
    						//
#ifdef SET_RDS
    						if (rdsFlag) {
 800522a:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 800522e:	2b00      	cmp	r3, #0
 8005230:	d007      	beq.n	8005242 <StartTask+0x1152>
    							rds_init();
 8005232:	f7fe f905 	bl	8003440 <rds_init>
    							rdsTime = get_mstmr(rdsWait);
 8005236:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800523a:	f7fd fe9d 	bl	8002f78 <get_mstmr>
 800523e:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128
    						}
#endif
    					}
    				}
    				//
    				uint16_t rssi = rda5807_rssi();
 8005242:	f001 f8a9 	bl	8006398 <rda5807_rssi>
 8005246:	4603      	mov	r3, r0
 8005248:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
    				if (rssi != RSSI) {
 800524c:	4b75      	ldr	r3, [pc, #468]	; (8005424 <StartTask+0x1334>)
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8005254:	429a      	cmp	r2, r3
 8005256:	d03b      	beq.n	80052d0 <StartTask+0x11e0>
    					RSSI = rssi;
 8005258:	4a72      	ldr	r2, [pc, #456]	; (8005424 <StartTask+0x1334>)
 800525a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800525e:	8013      	strh	r3, [r2, #0]
    					stereo = rda5807_Get_StereoMonoFlag();
 8005260:	f001 fbd8 	bl	8006a14 <rda5807_Get_StereoMonoFlag>
 8005264:	4603      	mov	r3, r0
 8005266:	461a      	mov	r2, r3
 8005268:	4b6f      	ldr	r3, [pc, #444]	; (8005428 <StartTask+0x1338>)
 800526a:	701a      	strb	r2, [r3, #0]
	#ifdef SET_DISPLAY
    					if (stereo)
 800526c:	4b6e      	ldr	r3, [pc, #440]	; (8005428 <StartTask+0x1338>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d012      	beq.n	800529a <StartTask+0x11aa>
    						sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 8005274:	4b6b      	ldr	r3, [pc, #428]	; (8005424 <StartTask+0x1334>)
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	461c      	mov	r4, r3
 800527a:	4b65      	ldr	r3, [pc, #404]	; (8005410 <StartTask+0x1320>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f7fb f972 	bl	8000568 <__aeabi_f2d>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800528c:	e9cd 2300 	strd	r2, r3, [sp]
 8005290:	4622      	mov	r2, r4
 8005292:	4966      	ldr	r1, [pc, #408]	; (800542c <StartTask+0x133c>)
 8005294:	f00f fc3c 	bl	8014b10 <siprintf>
 8005298:	e011      	b.n	80052be <StartTask+0x11ce>
    					else
    						sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 800529a:	4b62      	ldr	r3, [pc, #392]	; (8005424 <StartTask+0x1334>)
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	461c      	mov	r4, r3
 80052a0:	4b5b      	ldr	r3, [pc, #364]	; (8005410 <StartTask+0x1320>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fb f95f 	bl	8000568 <__aeabi_f2d>
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80052b2:	e9cd 2300 	strd	r2, r3, [sp]
 80052b6:	4622      	mov	r2, r4
 80052b8:	495d      	ldr	r1, [pc, #372]	; (8005430 <StartTask+0x1340>)
 80052ba:	f00f fc29 	bl	8014b10 <siprintf>
    					showLine(st, lin5, &lil, false);
 80052be:	f107 0210 	add.w	r2, r7, #16
 80052c2:	f8b7 10fa 	ldrh.w	r1, [r7, #250]	; 0xfa
 80052c6:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80052ca:	2300      	movs	r3, #0
 80052cc:	f7fd fd94 	bl	8002df8 <showLine>
    					//showLine(sta, lin6, &lia, true);
    					////Report(1, "ChipID:0x%x Chan:%u Freq:%.2f RSSI:%u\r\n", rdaID, Chan, Freq, RSSI);
	#endif
    				}
    				//
    				if (devError) {
 80052d0:	4b58      	ldr	r3, [pc, #352]	; (8005434 <StartTask+0x1344>)
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00d      	beq.n	80052f4 <StartTask+0x1204>
    					dl = sprintf(tmp, "devError : 0x%04X", devError);
 80052d8:	4b56      	ldr	r3, [pc, #344]	; (8005434 <StartTask+0x1344>)
 80052da:	881b      	ldrh	r3, [r3, #0]
 80052dc:	461a      	mov	r2, r3
 80052de:	4956      	ldr	r1, [pc, #344]	; (8005438 <StartTask+0x1348>)
 80052e0:	4856      	ldr	r0, [pc, #344]	; (800543c <StartTask+0x134c>)
 80052e2:	f00f fc15 	bl	8014b10 <siprintf>
 80052e6:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
    					lastErr = devError;
 80052ea:	4b52      	ldr	r3, [pc, #328]	; (8005434 <StartTask+0x1344>)
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80052f2:	e013      	b.n	800531c <StartTask+0x122c>
    				} else {
    					if (lastErr) {
 80052f4:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00c      	beq.n	8005316 <StartTask+0x1226>
    						dl = sprintf(tmp, "Ver.%s", ver);
 80052fc:	4b50      	ldr	r3, [pc, #320]	; (8005440 <StartTask+0x1350>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	461a      	mov	r2, r3
 8005302:	4950      	ldr	r1, [pc, #320]	; (8005444 <StartTask+0x1354>)
 8005304:	484d      	ldr	r0, [pc, #308]	; (800543c <StartTask+0x134c>)
 8005306:	f00f fc03 	bl	8014b10 <siprintf>
 800530a:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
    						lastErr = devOK;
 800530e:	2300      	movs	r3, #0
 8005310:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005314:	e002      	b.n	800531c <StartTask+0x122c>
    					} else dl = 0;
 8005316:	2300      	movs	r3, #0
 8005318:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    				}
	#ifdef SET_DISPLAY
    				if (dl) {
 800531c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005320:	2b00      	cmp	r3, #0
 8005322:	d036      	beq.n	8005392 <StartTask+0x12a2>
    					ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - lfnt->FontHeight, SCREEN_WIDTH - 1, lfnt->FontHeight, PIX_OFF);
 8005324:	4b38      	ldr	r3, [pc, #224]	; (8005408 <StartTask+0x1318>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	785b      	ldrb	r3, [r3, #1]
 800532a:	b29b      	uxth	r3, r3
 800532c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005330:	b29b      	uxth	r3, r3
 8005332:	b219      	sxth	r1, r3
 8005334:	4b34      	ldr	r3, [pc, #208]	; (8005408 <StartTask+0x1318>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	785b      	ldrb	r3, [r3, #1]
 800533a:	b21b      	sxth	r3, r3
 800533c:	2200      	movs	r2, #0
 800533e:	9200      	str	r2, [sp, #0]
 8005340:	227f      	movs	r2, #127	; 0x7f
 8005342:	2000      	movs	r0, #0
 8005344:	f7fc fd7f 	bl	8001e46 <ST7565_DrawFilledRectangle>
    					x = ((SCREEN_WIDTH - (lfnt->FontWidth * dl)) >> 1) & 0x7f;
 8005348:	4b2f      	ldr	r3, [pc, #188]	; (8005408 <StartTask+0x1318>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005354:	fb02 f303 	mul.w	r3, r2, r3
 8005358:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800535c:	105b      	asrs	r3, r3, #1
 800535e:	b29b      	uxth	r3, r3
 8005360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005364:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    					ST7565_Print(x, SCREEN_HEIGHT - lfnt->FontHeight, tmp, lfnt, 1, PIX_ON);
 8005368:	f9b7 00f6 	ldrsh.w	r0, [r7, #246]	; 0xf6
 800536c:	4b26      	ldr	r3, [pc, #152]	; (8005408 <StartTask+0x1318>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	785b      	ldrb	r3, [r3, #1]
 8005372:	b29b      	uxth	r3, r3
 8005374:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005378:	b29b      	uxth	r3, r3
 800537a:	b219      	sxth	r1, r3
 800537c:	4b22      	ldr	r3, [pc, #136]	; (8005408 <StartTask+0x1318>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2201      	movs	r2, #1
 8005382:	9201      	str	r2, [sp, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	9200      	str	r2, [sp, #0]
 8005388:	4a2c      	ldr	r2, [pc, #176]	; (800543c <StartTask+0x134c>)
 800538a:	f7fc fb03 	bl	8001994 <ST7565_Print>
    					ST7565_Update();
 800538e:	f7fc f951 	bl	8001634 <ST7565_Update>
    				}
    				//
    				ST7565_Update();
 8005392:	f7fc f94f 	bl	8001634 <ST7565_Update>
	#endif
    			}
    			break;
 8005396:	e1de      	b.n	8005756 <StartTask+0x1666>
    			case evt_Evt:
    				Report(1, "evtQueue counter : %u\r\n", getQueCount(evtQueHandle));
 8005398:	4b2b      	ldr	r3, [pc, #172]	; (8005448 <StartTask+0x1358>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4618      	mov	r0, r3
 800539e:	f7fd fbf5 	bl	8002b8c <getQueCount>
 80053a2:	4603      	mov	r3, r0
 80053a4:	461a      	mov	r2, r3
 80053a6:	4929      	ldr	r1, [pc, #164]	; (800544c <StartTask+0x135c>)
 80053a8:	2001      	movs	r0, #1
 80053aa:	f7fd ff07 	bl	80031bc <Report>
    			break;
 80053ae:	e1d2      	b.n	8005756 <StartTask+0x1666>
    			case evt_Ack:
    				Report(1, "ackQueue counter : %u\r\n", getQueCount(ackQueHandle));
 80053b0:	4b27      	ldr	r3, [pc, #156]	; (8005450 <StartTask+0x1360>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7fd fbe9 	bl	8002b8c <getQueCount>
 80053ba:	4603      	mov	r3, r0
 80053bc:	461a      	mov	r2, r3
 80053be:	4925      	ldr	r1, [pc, #148]	; (8005454 <StartTask+0x1364>)
 80053c0:	2001      	movs	r0, #1
 80053c2:	f7fd fefb 	bl	80031bc <Report>
    			break;
 80053c6:	e1c6      	b.n	8005756 <StartTask+0x1666>
    			case evt_Cmd:
    				Report(1, "cmdQueue counter : %u\r\n", getQueCount(cmdQueHandle));
 80053c8:	4b23      	ldr	r3, [pc, #140]	; (8005458 <StartTask+0x1368>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fd fbdd 	bl	8002b8c <getQueCount>
 80053d2:	4603      	mov	r3, r0
 80053d4:	461a      	mov	r2, r3
 80053d6:	4921      	ldr	r1, [pc, #132]	; (800545c <StartTask+0x136c>)
 80053d8:	2001      	movs	r0, #1
 80053da:	f7fd feef 	bl	80031bc <Report>
    			break;
 80053de:	e1ba      	b.n	8005756 <StartTask+0x1666>
    			case evt_Clr:
    				devError = devOK;
 80053e0:	4b14      	ldr	r3, [pc, #80]	; (8005434 <StartTask+0x1344>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	801a      	strh	r2, [r3, #0]
    				Report(1, "[que:%u] Clear all Errors...\r\n", cntEvt);
 80053e6:	4b0d      	ldr	r3, [pc, #52]	; (800541c <StartTask+0x132c>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	461a      	mov	r2, r3
 80053ee:	491c      	ldr	r1, [pc, #112]	; (8005460 <StartTask+0x1370>)
 80053f0:	2001      	movs	r0, #1
 80053f2:	f7fd fee3 	bl	80031bc <Report>
    			break;
 80053f6:	e1ae      	b.n	8005756 <StartTask+0x1666>
    			case evt_Help:
    				stx[0] = '\0';
 80053f8:	4b1a      	ldr	r3, [pc, #104]	; (8005464 <StartTask+0x1374>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	701a      	strb	r2, [r3, #0]
    				for (int8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t%s\r\n", s_cmds[i]);
 80053fe:	2300      	movs	r3, #0
 8005400:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 8005404:	e046      	b.n	8005494 <StartTask+0x13a4>
 8005406:	bf00      	nop
 8005408:	20003038 	.word	0x20003038
 800540c:	20003049 	.word	0x20003049
 8005410:	20000124 	.word	0x20000124
 8005414:	20003044 	.word	0x20003044
 8005418:	080188d4 	.word	0x080188d4
 800541c:	2000200f 	.word	0x2000200f
 8005420:	08018ddc 	.word	0x08018ddc
 8005424:	20003046 	.word	0x20003046
 8005428:	2000304c 	.word	0x2000304c
 800542c:	08018ad8 	.word	0x08018ad8
 8005430:	08018aec 	.word	0x08018aec
 8005434:	20001bf4 	.word	0x20001bf4
 8005438:	08018e0c 	.word	0x08018e0c
 800543c:	20001374 	.word	0x20001374
 8005440:	20000004 	.word	0x20000004
 8005444:	08018aa0 	.word	0x08018aa0
 8005448:	20000f60 	.word	0x20000f60
 800544c:	08018e20 	.word	0x08018e20
 8005450:	20000f68 	.word	0x20000f68
 8005454:	08018e38 	.word	0x08018e38
 8005458:	20000f64 	.word	0x20000f64
 800545c:	08018e50 	.word	0x08018e50
 8005460:	08018e68 	.word	0x08018e68
 8005464:	20000f74 	.word	0x20000f74
 8005468:	48a0      	ldr	r0, [pc, #640]	; (80056ec <StartTask+0x15fc>)
 800546a:	f7fa febb 	bl	80001e4 <strlen>
 800546e:	4603      	mov	r3, r0
 8005470:	4a9e      	ldr	r2, [pc, #632]	; (80056ec <StartTask+0x15fc>)
 8005472:	1898      	adds	r0, r3, r2
 8005474:	f997 3127 	ldrsb.w	r3, [r7, #295]	; 0x127
 8005478:	4a9d      	ldr	r2, [pc, #628]	; (80056f0 <StartTask+0x1600>)
 800547a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800547e:	461a      	mov	r2, r3
 8005480:	499c      	ldr	r1, [pc, #624]	; (80056f4 <StartTask+0x1604>)
 8005482:	f00f fb45 	bl	8014b10 <siprintf>
 8005486:	f997 3127 	ldrsb.w	r3, [r7, #295]	; 0x127
 800548a:	b2db      	uxtb	r3, r3
 800548c:	3301      	adds	r3, #1
 800548e:	b2db      	uxtb	r3, r3
 8005490:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 8005494:	f997 3127 	ldrsb.w	r3, [r7, #295]	; 0x127
 8005498:	2b1d      	cmp	r3, #29
 800549a:	dde5      	ble.n	8005468 <StartTask+0x1378>
    				Report(0, "%s", stx);
 800549c:	4a93      	ldr	r2, [pc, #588]	; (80056ec <StartTask+0x15fc>)
 800549e:	4996      	ldr	r1, [pc, #600]	; (80056f8 <StartTask+0x1608>)
 80054a0:	2000      	movs	r0, #0
 80054a2:	f7fd fe8b 	bl	80031bc <Report>
    			break;
 80054a6:	e156      	b.n	8005756 <StartTask+0x1666>
    			case evt_Restart:
    				restart = 1;
 80054a8:	4b94      	ldr	r3, [pc, #592]	; (80056fc <StartTask+0x160c>)
 80054aa:	2201      	movs	r2, #1
 80054ac:	701a      	strb	r2, [r3, #0]
    				Report(1, "[que:%u] Restart system...\r\n", cntEvt);
 80054ae:	4b94      	ldr	r3, [pc, #592]	; (8005700 <StartTask+0x1610>)
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	4993      	ldr	r1, [pc, #588]	; (8005704 <StartTask+0x1614>)
 80054b8:	2001      	movs	r0, #1
 80054ba:	f7fd fe7f 	bl	80031bc <Report>
    			break;
 80054be:	e14a      	b.n	8005756 <StartTask+0x1666>
    			case evt_Epoch:
    				set_Date(epoch);
 80054c0:	4b91      	ldr	r3, [pc, #580]	; (8005708 <StartTask+0x1618>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fd fd7f 	bl	8002fc8 <set_Date>
    				Report(1, "[que:%u] Set Unix TimeStamp to %lu\r\n", cntEvt, epoch);
 80054ca:	4b8d      	ldr	r3, [pc, #564]	; (8005700 <StartTask+0x1610>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	461a      	mov	r2, r3
 80054d2:	4b8d      	ldr	r3, [pc, #564]	; (8005708 <StartTask+0x1618>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	498d      	ldr	r1, [pc, #564]	; (800570c <StartTask+0x161c>)
 80054d8:	2001      	movs	r0, #1
 80054da:	f7fd fe6f 	bl	80031bc <Report>
    			break;
 80054de:	e13a      	b.n	8005756 <StartTask+0x1666>
    			case evt_Err:
    				Report(1, "[que:%u] Error input from uart\r\n", cntEvt);
 80054e0:	4b87      	ldr	r3, [pc, #540]	; (8005700 <StartTask+0x1610>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	461a      	mov	r2, r3
 80054e8:	4989      	ldr	r1, [pc, #548]	; (8005710 <StartTask+0x1620>)
 80054ea:	2001      	movs	r0, #1
 80054ec:	f7fd fe66 	bl	80031bc <Report>
    			break;
 80054f0:	e131      	b.n	8005756 <StartTask+0x1666>
	#ifdef SET_W25FLASH
    			case evt_sRead:
    			case evt_sNext:
    			{
    				uint32_t w25_adr = (adr_sector * W25qxx_getSectorSize()) + offset_sector;
 80054f2:	f002 fb57 	bl	8007ba4 <W25qxx_getSectorSize>
 80054f6:	4603      	mov	r3, r0
 80054f8:	4a86      	ldr	r2, [pc, #536]	; (8005714 <StartTask+0x1624>)
 80054fa:	6812      	ldr	r2, [r2, #0]
 80054fc:	fb02 f303 	mul.w	r3, r2, r3
 8005500:	4a85      	ldr	r2, [pc, #532]	; (8005718 <StartTask+0x1628>)
 8005502:	6812      	ldr	r2, [r2, #0]
 8005504:	4413      	add	r3, r2
 8005506:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    				uint32_t dlin = list_sector;
 800550a:	4b84      	ldr	r3, [pc, #528]	; (800571c <StartTask+0x162c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    				int step = 32;
 8005512:	2320      	movs	r3, #32
 8005514:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    				uint32_t ind = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    				W25qxx_ReadSector(fs_work, adr_sector, offset_sector, dlin);
 800551e:	4b7d      	ldr	r3, [pc, #500]	; (8005714 <StartTask+0x1624>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4619      	mov	r1, r3
 8005524:	4b7c      	ldr	r3, [pc, #496]	; (8005718 <StartTask+0x1628>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	461a      	mov	r2, r3
 800552a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800552e:	487c      	ldr	r0, [pc, #496]	; (8005720 <StartTask+0x1630>)
 8005530:	f002 fe4a 	bl	80081c8 <W25qxx_ReadSector>
    				Report(0, "Read sector:%d offset:%d len:%u\r\n", adr_sector, offset_sector, dlin);
 8005534:	4b77      	ldr	r3, [pc, #476]	; (8005714 <StartTask+0x1624>)
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	4b77      	ldr	r3, [pc, #476]	; (8005718 <StartTask+0x1628>)
 800553a:	6819      	ldr	r1, [r3, #0]
 800553c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	460b      	mov	r3, r1
 8005544:	4977      	ldr	r1, [pc, #476]	; (8005724 <StartTask+0x1634>)
 8005546:	2000      	movs	r0, #0
 8005548:	f7fd fe38 	bl	80031bc <Report>
    				while (ind < dlin) {
 800554c:	e05b      	b.n	8005606 <StartTask+0x1516>
    					strf[0] = '\0';
 800554e:	4b76      	ldr	r3, [pc, #472]	; (8005728 <StartTask+0x1638>)
 8005550:	2200      	movs	r2, #0
 8005552:	701a      	strb	r2, [r3, #0]
    					while (1) {
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 8005554:	4874      	ldr	r0, [pc, #464]	; (8005728 <StartTask+0x1638>)
 8005556:	f7fa fe45 	bl	80001e4 <strlen>
 800555a:	4603      	mov	r3, r0
 800555c:	4a72      	ldr	r2, [pc, #456]	; (8005728 <StartTask+0x1638>)
 800555e:	4413      	add	r3, r2
 8005560:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8005564:	4971      	ldr	r1, [pc, #452]	; (800572c <StartTask+0x163c>)
 8005566:	4618      	mov	r0, r3
 8005568:	f00f fad2 	bl	8014b10 <siprintf>
    						for (int i = 0; i < step; i++) sprintf(strf+strlen(strf), " %02X", fs_work[i + ind]);
 800556c:	2300      	movs	r3, #0
 800556e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005572:	e015      	b.n	80055a0 <StartTask+0x14b0>
 8005574:	486c      	ldr	r0, [pc, #432]	; (8005728 <StartTask+0x1638>)
 8005576:	f7fa fe35 	bl	80001e4 <strlen>
 800557a:	4603      	mov	r3, r0
 800557c:	4a6a      	ldr	r2, [pc, #424]	; (8005728 <StartTask+0x1638>)
 800557e:	1898      	adds	r0, r3, r2
 8005580:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005584:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005588:	4413      	add	r3, r2
 800558a:	4a65      	ldr	r2, [pc, #404]	; (8005720 <StartTask+0x1630>)
 800558c:	5cd3      	ldrb	r3, [r2, r3]
 800558e:	461a      	mov	r2, r3
 8005590:	4967      	ldr	r1, [pc, #412]	; (8005730 <StartTask+0x1640>)
 8005592:	f00f fabd 	bl	8014b10 <siprintf>
 8005596:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800559a:	3301      	adds	r3, #1
 800559c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80055a0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80055a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055a8:	429a      	cmp	r2, r3
 80055aa:	dbe3      	blt.n	8005574 <StartTask+0x1484>
    						strcat(strf, "\r\n");
 80055ac:	485e      	ldr	r0, [pc, #376]	; (8005728 <StartTask+0x1638>)
 80055ae:	f7fa fe19 	bl	80001e4 <strlen>
 80055b2:	4603      	mov	r3, r0
 80055b4:	461a      	mov	r2, r3
 80055b6:	4b5c      	ldr	r3, [pc, #368]	; (8005728 <StartTask+0x1638>)
 80055b8:	4413      	add	r3, r2
 80055ba:	4a5e      	ldr	r2, [pc, #376]	; (8005734 <StartTask+0x1644>)
 80055bc:	8811      	ldrh	r1, [r2, #0]
 80055be:	7892      	ldrb	r2, [r2, #2]
 80055c0:	8019      	strh	r1, [r3, #0]
 80055c2:	709a      	strb	r2, [r3, #2]
    						w25_adr += step;
 80055c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055c8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80055cc:	4413      	add	r3, r2
 80055ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    						ind += step;
 80055d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055d6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80055da:	4413      	add	r3, r2
 80055dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    						if (!(ind % W25qxx_getPageSize())) break;
 80055e0:	f002 faec 	bl	8007bbc <W25qxx_getPageSize>
 80055e4:	4602      	mov	r2, r0
 80055e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80055ee:	fb01 f202 	mul.w	r2, r1, r2
 80055f2:	1a9b      	subs	r3, r3, r2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d000      	beq.n	80055fa <StartTask+0x150a>
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 80055f8:	e7ac      	b.n	8005554 <StartTask+0x1464>
    						if (!(ind % W25qxx_getPageSize())) break;
 80055fa:	bf00      	nop
    					}
    					Report(0, "%s", strf);
 80055fc:	4a4a      	ldr	r2, [pc, #296]	; (8005728 <StartTask+0x1638>)
 80055fe:	493e      	ldr	r1, [pc, #248]	; (80056f8 <StartTask+0x1608>)
 8005600:	2000      	movs	r0, #0
 8005602:	f7fd fddb 	bl	80031bc <Report>
    				while (ind < dlin) {
 8005606:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800560a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800560e:	429a      	cmp	r2, r3
 8005610:	d39d      	bcc.n	800554e <StartTask+0x145e>
    				}
    			}
    			break;
 8005612:	e0a0      	b.n	8005756 <StartTask+0x1666>
    			case evt_sWrite:
    			{
    				uint32_t ss = W25qxx_getSectorSize();
 8005614:	f002 fac6 	bl	8007ba4 <W25qxx_getSectorSize>
 8005618:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
    				if (!W25qxx_IsEmptySector(adr_sector, 0, ss)) W25qxx_EraseSector(adr_sector);
 800561c:	4b3d      	ldr	r3, [pc, #244]	; (8005714 <StartTask+0x1624>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005624:	2100      	movs	r1, #0
 8005626:	4618      	mov	r0, r3
 8005628:	f002 fb32 	bl	8007c90 <W25qxx_IsEmptySector>
 800562c:	4603      	mov	r3, r0
 800562e:	f083 0301 	eor.w	r3, r3, #1
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d004      	beq.n	8005642 <StartTask+0x1552>
 8005638:	4b36      	ldr	r3, [pc, #216]	; (8005714 <StartTask+0x1624>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4618      	mov	r0, r3
 800563e:	f002 facb 	bl	8007bd8 <W25qxx_EraseSector>
    				memset(fs_work, byte_write, ss);
 8005642:	4b3d      	ldr	r3, [pc, #244]	; (8005738 <StartTask+0x1648>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800564a:	4619      	mov	r1, r3
 800564c:	4834      	ldr	r0, [pc, #208]	; (8005720 <StartTask+0x1630>)
 800564e:	f00e fcde 	bl	801400e <memset>
    				if (len_write != -1) ss = len_write;
 8005652:	4b3a      	ldr	r3, [pc, #232]	; (800573c <StartTask+0x164c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800565a:	d003      	beq.n	8005664 <StartTask+0x1574>
 800565c:	4b37      	ldr	r3, [pc, #220]	; (800573c <StartTask+0x164c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    				W25qxx_WriteSector(fs_work, adr_sector, offset_sector, ss);
 8005664:	4b2b      	ldr	r3, [pc, #172]	; (8005714 <StartTask+0x1624>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4619      	mov	r1, r3
 800566a:	4b2b      	ldr	r3, [pc, #172]	; (8005718 <StartTask+0x1628>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	461a      	mov	r2, r3
 8005670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005674:	482a      	ldr	r0, [pc, #168]	; (8005720 <StartTask+0x1630>)
 8005676:	f002 fc7f 	bl	8007f78 <W25qxx_WriteSector>
    				Report(0, "Fill sector:%d byte:%02X len:%d done\r\n", adr_sector, byte_write, ss);
 800567a:	4b26      	ldr	r3, [pc, #152]	; (8005714 <StartTask+0x1624>)
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	4b2e      	ldr	r3, [pc, #184]	; (8005738 <StartTask+0x1648>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	4619      	mov	r1, r3
 8005684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	460b      	mov	r3, r1
 800568c:	492c      	ldr	r1, [pc, #176]	; (8005740 <StartTask+0x1650>)
 800568e:	2000      	movs	r0, #0
 8005690:	f7fd fd94 	bl	80031bc <Report>
    			}
    			break;
 8005694:	e05f      	b.n	8005756 <StartTask+0x1666>
    			case evt_sErase:
    				if (adr_sector == -1) {
 8005696:	4b1f      	ldr	r3, [pc, #124]	; (8005714 <StartTask+0x1624>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800569e:	d10c      	bne.n	80056ba <StartTask+0x15ca>
    					Report(1, "Erase flash");
 80056a0:	4928      	ldr	r1, [pc, #160]	; (8005744 <StartTask+0x1654>)
 80056a2:	2001      	movs	r0, #1
 80056a4:	f7fd fd8a 	bl	80031bc <Report>
    					flag_sector = true;
 80056a8:	4b27      	ldr	r3, [pc, #156]	; (8005748 <StartTask+0x1658>)
 80056aa:	2201      	movs	r2, #1
 80056ac:	701a      	strb	r2, [r3, #0]
    					btime = HAL_GetTick();
 80056ae:	f002 fe4d 	bl	800834c <HAL_GetTick>
 80056b2:	4603      	mov	r3, r0
 80056b4:	4a25      	ldr	r2, [pc, #148]	; (800574c <StartTask+0x165c>)
 80056b6:	6013      	str	r3, [r2, #0]
    				} else {
    					W25qxx_EraseSector(adr_sector);
    					Report(1, "Erase sector:%d done\r\n", adr_sector);
    				}
    			break;
 80056b8:	e04d      	b.n	8005756 <StartTask+0x1666>
    					W25qxx_EraseSector(adr_sector);
 80056ba:	4b16      	ldr	r3, [pc, #88]	; (8005714 <StartTask+0x1624>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4618      	mov	r0, r3
 80056c0:	f002 fa8a 	bl	8007bd8 <W25qxx_EraseSector>
    					Report(1, "Erase sector:%d done\r\n", adr_sector);
 80056c4:	4b13      	ldr	r3, [pc, #76]	; (8005714 <StartTask+0x1624>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	461a      	mov	r2, r3
 80056ca:	4921      	ldr	r1, [pc, #132]	; (8005750 <StartTask+0x1660>)
 80056cc:	2001      	movs	r0, #1
 80056ce:	f7fd fd75 	bl	80031bc <Report>
    			break;
 80056d2:	e040      	b.n	8005756 <StartTask+0x1666>
    			break;
 80056d4:	bf00      	nop
 80056d6:	e03e      	b.n	8005756 <StartTask+0x1666>
    			break;
 80056d8:	bf00      	nop
 80056da:	e03c      	b.n	8005756 <StartTask+0x1666>
    			break;
 80056dc:	bf00      	nop
 80056de:	e03a      	b.n	8005756 <StartTask+0x1666>
    			break;
 80056e0:	bf00      	nop
 80056e2:	e038      	b.n	8005756 <StartTask+0x1666>
    			break;
 80056e4:	bf00      	nop
 80056e6:	e036      	b.n	8005756 <StartTask+0x1666>
				break;
 80056e8:	bf00      	nop
 80056ea:	e034      	b.n	8005756 <StartTask+0x1666>
 80056ec:	20000f74 	.word	0x20000f74
 80056f0:	20000020 	.word	0x20000020
 80056f4:	08018e88 	.word	0x08018e88
 80056f8:	080188d4 	.word	0x080188d4
 80056fc:	2000200c 	.word	0x2000200c
 8005700:	2000200f 	.word	0x2000200f
 8005704:	08018e90 	.word	0x08018e90
 8005708:	2000001c 	.word	0x2000001c
 800570c:	08018eb0 	.word	0x08018eb0
 8005710:	08018ed8 	.word	0x08018ed8
 8005714:	20002010 	.word	0x20002010
 8005718:	20002014 	.word	0x20002014
 800571c:	20002018 	.word	0x20002018
 8005720:	20002024 	.word	0x20002024
 8005724:	08018efc 	.word	0x08018efc
 8005728:	200017f4 	.word	0x200017f4
 800572c:	08018f20 	.word	0x08018f20
 8005730:	08018f28 	.word	0x08018f28
 8005734:	08018f30 	.word	0x08018f30
 8005738:	20000120 	.word	0x20000120
 800573c:	2000201c 	.word	0x2000201c
 8005740:	08018f34 	.word	0x08018f34
 8005744:	08018f5c 	.word	0x08018f5c
 8005748:	20002020 	.word	0x20002020
 800574c:	20003028 	.word	0x20003028
 8005750:	08018f68 	.word	0x08018f68
    			break;
 8005754:	bf00      	nop
	#endif
    		}
    		if ((evt >= evt_sRead) && (evt <= evt_sWrite)) {
 8005756:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800575a:	2b03      	cmp	r3, #3
 800575c:	dd0b      	ble.n	8005776 <StartTask+0x1686>
 800575e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005762:	2b07      	cmp	r3, #7
 8005764:	dc07      	bgt.n	8005776 <StartTask+0x1686>
    			last_cmd_sector =  evt;//cmd_sector;
 8005766:	4aad      	ldr	r2, [pc, #692]	; (8005a1c <StartTask+0x192c>)
 8005768:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800576c:	6013      	str	r3, [r2, #0]
    			cmd_sector = sNone;
 800576e:	4bac      	ldr	r3, [pc, #688]	; (8005a20 <StartTask+0x1930>)
 8005770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005774:	601a      	str	r2, [r3, #0]
    		}
    	}//evtQueueGet(....)


#ifdef SET_W25FLASH
    	if (flag_sector) {
 8005776:	4bab      	ldr	r3, [pc, #684]	; (8005a24 <StartTask+0x1934>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d031      	beq.n	80057e2 <StartTask+0x16f2>
    		adr_sector++;
 800577e:	4baa      	ldr	r3, [pc, #680]	; (8005a28 <StartTask+0x1938>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3301      	adds	r3, #1
 8005784:	4aa8      	ldr	r2, [pc, #672]	; (8005a28 <StartTask+0x1938>)
 8005786:	6013      	str	r3, [r2, #0]
    		if (adr_sector >= W25qxx_getSectorCount()) {
 8005788:	f002 fa00 	bl	8007b8c <W25qxx_getSectorCount>
 800578c:	4603      	mov	r3, r0
 800578e:	4aa6      	ldr	r2, [pc, #664]	; (8005a28 <StartTask+0x1938>)
 8005790:	6812      	ldr	r2, [r2, #0]
 8005792:	4293      	cmp	r3, r2
 8005794:	d816      	bhi.n	80057c4 <StartTask+0x16d4>
    			flag_sector = false;
 8005796:	4ba3      	ldr	r3, [pc, #652]	; (8005a24 <StartTask+0x1934>)
 8005798:	2200      	movs	r2, #0
 800579a:	701a      	strb	r2, [r3, #0]
    			etime = HAL_GetTick();
 800579c:	f002 fdd6 	bl	800834c <HAL_GetTick>
 80057a0:	4603      	mov	r3, r0
 80057a2:	4aa2      	ldr	r2, [pc, #648]	; (8005a2c <StartTask+0x193c>)
 80057a4:	6013      	str	r3, [r2, #0]
    			Report(0, " done (%lu sec)\r\n", (etime - btime) / 1000);
 80057a6:	4ba1      	ldr	r3, [pc, #644]	; (8005a2c <StartTask+0x193c>)
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	4ba1      	ldr	r3, [pc, #644]	; (8005a30 <StartTask+0x1940>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	4aa0      	ldr	r2, [pc, #640]	; (8005a34 <StartTask+0x1944>)
 80057b2:	fba2 2303 	umull	r2, r3, r2, r3
 80057b6:	099b      	lsrs	r3, r3, #6
 80057b8:	461a      	mov	r2, r3
 80057ba:	499f      	ldr	r1, [pc, #636]	; (8005a38 <StartTask+0x1948>)
 80057bc:	2000      	movs	r0, #0
 80057be:	f7fd fcfd 	bl	80031bc <Report>
 80057c2:	e00e      	b.n	80057e2 <StartTask+0x16f2>
    		} else {
    			W25qxx_EraseSector(adr_sector);
 80057c4:	4b98      	ldr	r3, [pc, #608]	; (8005a28 <StartTask+0x1938>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f002 fa05 	bl	8007bd8 <W25qxx_EraseSector>
    			if (!(adr_sector % 8)) Report(0, ".");
 80057ce:	4b96      	ldr	r3, [pc, #600]	; (8005a28 <StartTask+0x1938>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d103      	bne.n	80057e2 <StartTask+0x16f2>
 80057da:	4998      	ldr	r1, [pc, #608]	; (8005a3c <StartTask+0x194c>)
 80057dc:	2000      	movs	r0, #0
 80057de:	f7fd fced 	bl	80031bc <Report>
#endif
    	//
    	//
    	//
#ifdef SET_RDS
    	if (rdsFlag && rdsTime) {
 80057e2:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 8332 	beq.w	8005e50 <StartTask+0x1d60>
 80057ec:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f000 832d 	beq.w	8005e50 <StartTask+0x1d60>
    		if (check_mstmr(rdsTime)) {
 80057f6:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80057fa:	f7fd fbd0 	bl	8002f9e <check_mstmr>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 8325 	beq.w	8005e50 <StartTask+0x1d60>
    			rdsTime = get_mstmr(rdsWait);
 8005806:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800580a:	f7fd fbb5 	bl	8002f78 <get_mstmr>
 800580e:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128
    			if (!readyRds && rda5807_Get_RDSReady()) {
 8005812:	4b8b      	ldr	r3, [pc, #556]	; (8005a40 <StartTask+0x1950>)
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	f083 0301 	eor.w	r3, r3, #1
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 8311 	beq.w	8005e44 <StartTask+0x1d54>
 8005822:	f001 f9ab 	bl	8006b7c <rda5807_Get_RDSReady>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 830b 	beq.w	8005e44 <StartTask+0x1d54>
    				memset(dataRDS, 0, sizeof(dataRDS));
 800582e:	2208      	movs	r2, #8
 8005830:	2100      	movs	r1, #0
 8005832:	4884      	ldr	r0, [pc, #528]	; (8005a44 <StartTask+0x1954>)
 8005834:	f00e fbeb 	bl	801400e <memset>
    				blk = (blocks_t *)&dataRDS;
 8005838:	4b82      	ldr	r3, [pc, #520]	; (8005a44 <StartTask+0x1954>)
 800583a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    				blk->blockA = rda5807_Get_reg(RDA5807M_REG_BLOCK_A);
 800583e:	200c      	movs	r0, #12
 8005840:	f001 f9ba 	bl	8006bb8 <rda5807_Get_reg>
 8005844:	4603      	mov	r3, r0
 8005846:	461a      	mov	r2, r3
 8005848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800584c:	801a      	strh	r2, [r3, #0]
    				//Report(1, "[RDS] %04X %04X %04X %04X\r\n", blk->blockA, blk->blockB, blk->blockC, blk->blockD);
    				//

    				// Сравним содержимое блока A (ID станции) с предыдущим значением
    				if (blk->blockA == MaybeThisIDIsReal) {
 800584e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b29a      	uxth	r2, r3
 8005856:	4b7c      	ldr	r3, [pc, #496]	; (8005a48 <StartTask+0x1958>)
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d112      	bne.n	8005884 <StartTask+0x1794>
    					if (IDRepeatCounter < REPEATS_TO_BE_REAL_ID) {
 800585e:	4b7b      	ldr	r3, [pc, #492]	; (8005a4c <StartTask+0x195c>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b02      	cmp	r3, #2
 8005864:	d817      	bhi.n	8005896 <StartTask+0x17a6>
    						IDRepeatCounter++; // Значения совпадают, отразим это в счетчике
 8005866:	4b79      	ldr	r3, [pc, #484]	; (8005a4c <StartTask+0x195c>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	3301      	adds	r3, #1
 800586c:	b2da      	uxtb	r2, r3
 800586e:	4b77      	ldr	r3, [pc, #476]	; (8005a4c <StartTask+0x195c>)
 8005870:	701a      	strb	r2, [r3, #0]
    						if (IDRepeatCounter == REPEATS_TO_BE_REAL_ID) sID = MaybeThisIDIsReal;// Определились с ID станции
 8005872:	4b76      	ldr	r3, [pc, #472]	; (8005a4c <StartTask+0x195c>)
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	2b03      	cmp	r3, #3
 8005878:	d10d      	bne.n	8005896 <StartTask+0x17a6>
 800587a:	4b73      	ldr	r3, [pc, #460]	; (8005a48 <StartTask+0x1958>)
 800587c:	881a      	ldrh	r2, [r3, #0]
 800587e:	4b74      	ldr	r3, [pc, #464]	; (8005a50 <StartTask+0x1960>)
 8005880:	801a      	strh	r2, [r3, #0]
 8005882:	e008      	b.n	8005896 <StartTask+0x17a6>
    				    }
    				} else {
    					IDRepeatCounter = 0; // Значения не совпадают, считаем заново
 8005884:	4b71      	ldr	r3, [pc, #452]	; (8005a4c <StartTask+0x195c>)
 8005886:	2200      	movs	r2, #0
 8005888:	701a      	strb	r2, [r3, #0]
    					MaybeThisIDIsReal = blk->blockA;
 800588a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	b29a      	uxth	r2, r3
 8005892:	4b6d      	ldr	r3, [pc, #436]	; (8005a48 <StartTask+0x1958>)
 8005894:	801a      	strh	r2, [r3, #0]
    				}
    				//
    				if (!sID || (blk->blockA != sID)) {//Пока не определимся с ID, разбирать RDS не будем
 8005896:	4b6e      	ldr	r3, [pc, #440]	; (8005a50 <StartTask+0x1960>)
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 8336 	beq.w	8005f0c <StartTask+0x1e1c>
 80058a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	4b69      	ldr	r3, [pc, #420]	; (8005a50 <StartTask+0x1960>)
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d000      	beq.n	80058b2 <StartTask+0x17c2>
    												   //ID не совпадает. Пропустим эту RDS группу
    					continue;
 80058b0:	e32c      	b.n	8005f0c <StartTask+0x1e1c>
    				}
    				// ID станции не скачет, вероятность корректности группы в целом выше
    				//Report(1, "[RDS] ID:0x%X\r\n", sID);
    				//
    				errLevelB = rda5807_Get_reg(0x0B) & RDA5807M_BLERB_MASK;
 80058b2:	200b      	movs	r0, #11
 80058b4:	f001 f980 	bl	8006bb8 <rda5807_Get_reg>
 80058b8:	4603      	mov	r3, r0
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	f003 0303 	and.w	r3, r3, #3
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	4b64      	ldr	r3, [pc, #400]	; (8005a54 <StartTask+0x1964>)
 80058c4:	701a      	strb	r2, [r3, #0]
    				if (errLevelB < 3) {
 80058c6:	4b63      	ldr	r3, [pc, #396]	; (8005a54 <StartTask+0x1964>)
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	f200 82ba 	bhi.w	8005e44 <StartTask+0x1d54>
    					// Блок B корректный, можем определить тип и версию группы
    					blk->blockB = rda5807_Get_reg(RDA5807M_REG_BLOCK_B);
 80058d0:	200d      	movs	r0, #13
 80058d2:	f001 f971 	bl	8006bb8 <rda5807_Get_reg>
 80058d6:	4603      	mov	r3, r0
 80058d8:	461a      	mov	r2, r3
 80058da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058de:	805a      	strh	r2, [r3, #2]
    					if (!PTy_printed) { // Но сначала считаем PTy
 80058e0:	4b5d      	ldr	r3, [pc, #372]	; (8005a58 <StartTask+0x1968>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	f083 0301 	eor.w	r3, r3, #1
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d025      	beq.n	800593a <StartTask+0x184a>
    						if (PTy == (blk->blockB & RDS_ALL_PTY_MASK) >> RDS_ALL_PTY_SHIFT) {
 80058ee:	4b5b      	ldr	r3, [pc, #364]	; (8005a5c <StartTask+0x196c>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f8:	885b      	ldrh	r3, [r3, #2]
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	115b      	asrs	r3, r3, #5
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	429a      	cmp	r2, r3
 8005904:	d10e      	bne.n	8005924 <StartTask+0x1834>
    							Report(1, "[RDS] PlayType: %s\r\n", namePTy[PTy]);
 8005906:	4b55      	ldr	r3, [pc, #340]	; (8005a5c <StartTask+0x196c>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	461a      	mov	r2, r3
 800590c:	4b54      	ldr	r3, [pc, #336]	; (8005a60 <StartTask+0x1970>)
 800590e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005912:	461a      	mov	r2, r3
 8005914:	4953      	ldr	r1, [pc, #332]	; (8005a64 <StartTask+0x1974>)
 8005916:	2001      	movs	r0, #1
 8005918:	f7fd fc50 	bl	80031bc <Report>
    							PTy_printed = true;
 800591c:	4b4e      	ldr	r3, [pc, #312]	; (8005a58 <StartTask+0x1968>)
 800591e:	2201      	movs	r2, #1
 8005920:	701a      	strb	r2, [r3, #0]
 8005922:	e00a      	b.n	800593a <StartTask+0x184a>
    						} else {
    							PTy = (blk->blockB & RDS_ALL_PTY_MASK) >> RDS_ALL_PTY_SHIFT;
 8005924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005928:	885b      	ldrh	r3, [r3, #2]
 800592a:	b29b      	uxth	r3, r3
 800592c:	115b      	asrs	r3, r3, #5
 800592e:	b2db      	uxtb	r3, r3
 8005930:	f003 031f 	and.w	r3, r3, #31
 8005934:	b2da      	uxtb	r2, r3
 8005936:	4b49      	ldr	r3, [pc, #292]	; (8005a5c <StartTask+0x196c>)
 8005938:	701a      	strb	r2, [r3, #0]
    				        }
    				    }
    					groupType = (blk->blockB & RDS_ALL_GROUPTYPE_MASK) >> RDS_ALL_GROUPTYPE_SHIFT;
 800593a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800593e:	885b      	ldrh	r3, [r3, #2]
 8005940:	b29b      	uxth	r3, r3
 8005942:	0b1b      	lsrs	r3, r3, #12
 8005944:	b29b      	uxth	r3, r3
 8005946:	b2da      	uxtb	r2, r3
 8005948:	4b47      	ldr	r3, [pc, #284]	; (8005a68 <StartTask+0x1978>)
 800594a:	701a      	strb	r2, [r3, #0]
    					groupVer = (blk->blockB & RDS_ALL_GROUPVER) > 0;
 800594c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005950:	885b      	ldrh	r3, [r3, #2]
 8005952:	b29b      	uxth	r3, r3
 8005954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005958:	2b00      	cmp	r3, #0
 800595a:	bfcc      	ite	gt
 800595c:	2301      	movgt	r3, #1
 800595e:	2300      	movle	r3, #0
 8005960:	b2db      	uxtb	r3, r3
 8005962:	461a      	mov	r2, r3
 8005964:	4b41      	ldr	r3, [pc, #260]	; (8005a6c <StartTask+0x197c>)
 8005966:	701a      	strb	r2, [r3, #0]
    					uint16_t reg10 = rda5807_Get_reg(RDA5807M_REG_BLER_CD);//getRegister(RDA5807M_REG_BLER_CD);
 8005968:	2010      	movs	r0, #16
 800596a:	f001 f925 	bl	8006bb8 <rda5807_Get_reg>
 800596e:	4603      	mov	r3, r0
 8005970:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
    					errLevelC = (reg10 & RDA5807M_BLERC_MASK) >> RDA5807M_BLERC_SHIFT;
 8005974:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005978:	0b9b      	lsrs	r3, r3, #14
 800597a:	b29b      	uxth	r3, r3
 800597c:	b2da      	uxtb	r2, r3
 800597e:	4b3c      	ldr	r3, [pc, #240]	; (8005a70 <StartTask+0x1980>)
 8005980:	701a      	strb	r2, [r3, #0]
    					errLevelD = (reg10 & RDA5807M_BLERD_MASK) >> RDA5807M_BLERD_SHIFT;
 8005982:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005986:	131b      	asrs	r3, r3, #12
 8005988:	b2db      	uxtb	r3, r3
 800598a:	f003 0303 	and.w	r3, r3, #3
 800598e:	b2da      	uxtb	r2, r3
 8005990:	4b38      	ldr	r3, [pc, #224]	; (8005a74 <StartTask+0x1984>)
 8005992:	701a      	strb	r2, [r3, #0]
    					// ************* 0A, 0B - PSName, PTY ************
    					if ((groupType == 0) && (errLevelD < 3)) {
 8005994:	4b34      	ldr	r3, [pc, #208]	; (8005a68 <StartTask+0x1978>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	f040 8118 	bne.w	8005bce <StartTask+0x1ade>
 800599e:	4b35      	ldr	r3, [pc, #212]	; (8005a74 <StartTask+0x1984>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	f200 8113 	bhi.w	8005bce <StartTask+0x1ade>
    						// Сравним новые символы PSName со старыми:
    						blk->blockD = rda5807_Get_reg(RDA5807M_REG_BLOCK_D);
 80059a8:	200f      	movs	r0, #15
 80059aa:	f001 f905 	bl	8006bb8 <rda5807_Get_reg>
 80059ae:	4603      	mov	r3, r0
 80059b0:	461a      	mov	r2, r3
 80059b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b6:	80da      	strh	r2, [r3, #6]
    						char c = blk->blockD >> 8; // новый символ
 80059b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059bc:	88db      	ldrh	r3, [r3, #6]
 80059be:	b29b      	uxth	r3, r3
 80059c0:	0a1b      	lsrs	r3, r3, #8
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
    						uint8_t i = (blk->blockB & RDS_GROUP0_C1C0_MASK) << 1; // его позиция в PSName
 80059c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059cc:	885b      	ldrh	r3, [r3, #2]
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	f003 0306 	and.w	r3, r3, #6
 80059d8:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
    						if (PSName[i] != c) { // символы различаются
 80059dc:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 80059e0:	4a25      	ldr	r2, [pc, #148]	; (8005a78 <StartTask+0x1988>)
 80059e2:	5cd3      	ldrb	r3, [r2, r3]
 80059e4:	f897 20bd 	ldrb.w	r2, [r7, #189]	; 0xbd
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d049      	beq.n	8005a80 <StartTask+0x1990>
    							PSNameUpdated &= ~(1 << i);//!(1 << i); // сбросим флаг в PSNameUpdated
 80059ec:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 80059f0:	2201      	movs	r2, #1
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	b25b      	sxtb	r3, r3
 80059f8:	43db      	mvns	r3, r3
 80059fa:	b25a      	sxtb	r2, r3
 80059fc:	4b1f      	ldr	r3, [pc, #124]	; (8005a7c <StartTask+0x198c>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	b25b      	sxtb	r3, r3
 8005a02:	4013      	ands	r3, r2
 8005a04:	b25b      	sxtb	r3, r3
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	4b1c      	ldr	r3, [pc, #112]	; (8005a7c <StartTask+0x198c>)
 8005a0a:	701a      	strb	r2, [r3, #0]
    							PSName[i] = c;
 8005a0c:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8005a10:	4919      	ldr	r1, [pc, #100]	; (8005a78 <StartTask+0x1988>)
 8005a12:	f897 20bd 	ldrb.w	r2, [r7, #189]	; 0xbd
 8005a16:	54ca      	strb	r2, [r1, r3]
 8005a18:	e040      	b.n	8005a9c <StartTask+0x19ac>
 8005a1a:	bf00      	nop
 8005a1c:	2000011c 	.word	0x2000011c
 8005a20:	20000118 	.word	0x20000118
 8005a24:	20002020 	.word	0x20002020
 8005a28:	20002010 	.word	0x20002010
 8005a2c:	2000302c 	.word	0x2000302c
 8005a30:	20003028 	.word	0x20003028
 8005a34:	10624dd3 	.word	0x10624dd3
 8005a38:	08018f80 	.word	0x08018f80
 8005a3c:	08018f94 	.word	0x08018f94
 8005a40:	20003058 	.word	0x20003058
 8005a44:	20003050 	.word	0x20003050
 8005a48:	20003434 	.word	0x20003434
 8005a4c:	20003436 	.word	0x20003436
 8005a50:	20003432 	.word	0x20003432
 8005a54:	20003437 	.word	0x20003437
 8005a58:	2000343c 	.word	0x2000343c
 8005a5c:	200001d0 	.word	0x200001d0
 8005a60:	20000150 	.word	0x20000150
 8005a64:	08018f98 	.word	0x08018f98
 8005a68:	2000343a 	.word	0x2000343a
 8005a6c:	2000343b 	.word	0x2000343b
 8005a70:	20003438 	.word	0x20003438
 8005a74:	20003439 	.word	0x20003439
 8005a78:	20003440 	.word	0x20003440
 8005a7c:	20003455 	.word	0x20003455
    						} else {// символы совпадают, установим флаг в PSNameUpdated:
    							PSNameUpdated |= 1 << i;
 8005a80:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8005a84:	2201      	movs	r2, #1
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	b25a      	sxtb	r2, r3
 8005a8c:	4ba7      	ldr	r3, [pc, #668]	; (8005d2c <StartTask+0x1c3c>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	b25b      	sxtb	r3, r3
 8005a92:	4313      	orrs	r3, r2
 8005a94:	b25b      	sxtb	r3, r3
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	4ba4      	ldr	r3, [pc, #656]	; (8005d2c <StartTask+0x1c3c>)
 8005a9a:	701a      	strb	r2, [r3, #0]
    				        }
    						// Аналогично для второго символа
    						c = blk->blockD & 255;
 8005a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa0:	88db      	ldrh	r3, [r3, #6]
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
    						i++;
 8005aa8:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8005aac:	3301      	adds	r3, #1
 8005aae:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
    						if (PSName[i] != c) {
 8005ab2:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8005ab6:	4a9e      	ldr	r2, [pc, #632]	; (8005d30 <StartTask+0x1c40>)
 8005ab8:	5cd3      	ldrb	r3, [r2, r3]
 8005aba:	f897 20bd 	ldrb.w	r2, [r7, #189]	; 0xbd
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d016      	beq.n	8005af0 <StartTask+0x1a00>
    							PSNameUpdated &= ~(1 << i);//!(1 << i);
 8005ac2:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8005acc:	b25b      	sxtb	r3, r3
 8005ace:	43db      	mvns	r3, r3
 8005ad0:	b25a      	sxtb	r2, r3
 8005ad2:	4b96      	ldr	r3, [pc, #600]	; (8005d2c <StartTask+0x1c3c>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	b25b      	sxtb	r3, r3
 8005ad8:	4013      	ands	r3, r2
 8005ada:	b25b      	sxtb	r3, r3
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	4b93      	ldr	r3, [pc, #588]	; (8005d2c <StartTask+0x1c3c>)
 8005ae0:	701a      	strb	r2, [r3, #0]
    							PSName[i] = c;
 8005ae2:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8005ae6:	4992      	ldr	r1, [pc, #584]	; (8005d30 <StartTask+0x1c40>)
 8005ae8:	f897 20bd 	ldrb.w	r2, [r7, #189]	; 0xbd
 8005aec:	54ca      	strb	r2, [r1, r3]
 8005aee:	e00d      	b.n	8005b0c <StartTask+0x1a1c>
    				        } else {
    				        	PSNameUpdated |= 1 << i;
 8005af0:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8005af4:	2201      	movs	r2, #1
 8005af6:	fa02 f303 	lsl.w	r3, r2, r3
 8005afa:	b25a      	sxtb	r2, r3
 8005afc:	4b8b      	ldr	r3, [pc, #556]	; (8005d2c <StartTask+0x1c3c>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	b25b      	sxtb	r3, r3
 8005b02:	4313      	orrs	r3, r2
 8005b04:	b25b      	sxtb	r3, r3
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	4b88      	ldr	r3, [pc, #544]	; (8005d2c <StartTask+0x1c3c>)
 8005b0a:	701a      	strb	r2, [r3, #0]
    				        }
    						// Когда все 8 флагов в PSNameUpdated установлены, считаем что PSName получено полностью
    						if (PSNameUpdated == 255) {
 8005b0c:	4b87      	ldr	r3, [pc, #540]	; (8005d2c <StartTask+0x1c3c>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2bff      	cmp	r3, #255	; 0xff
 8005b12:	d15c      	bne.n	8005bce <StartTask+0x1ade>
    							// Дополнительное сравнение с предыдущим значением
    							if (strcmp(PSName, PSName_prev) != 0) {
 8005b14:	4987      	ldr	r1, [pc, #540]	; (8005d34 <StartTask+0x1c44>)
 8005b16:	4886      	ldr	r0, [pc, #536]	; (8005d30 <StartTask+0x1c40>)
 8005b18:	f7fa fb5a 	bl	80001d0 <strcmp>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d055      	beq.n	8005bce <StartTask+0x1ade>
    								Report(1, "[RDS] Station: %s\r\n", PSName);
 8005b22:	4a83      	ldr	r2, [pc, #524]	; (8005d30 <StartTask+0x1c40>)
 8005b24:	4984      	ldr	r1, [pc, #528]	; (8005d38 <StartTask+0x1c48>)
 8005b26:	2001      	movs	r0, #1
 8005b28:	f7fd fb48 	bl	80031bc <Report>
    								strcpy(PSName_prev, PSName);
 8005b2c:	4980      	ldr	r1, [pc, #512]	; (8005d30 <StartTask+0x1c40>)
 8005b2e:	4881      	ldr	r0, [pc, #516]	; (8005d34 <StartTask+0x1c44>)
 8005b30:	f00f f85e 	bl	8014bf0 <strcpy>
    								//
#ifdef SET_DISPLAY
    								int lens = strlen(PSName);
 8005b34:	487e      	ldr	r0, [pc, #504]	; (8005d30 <StartTask+0x1c40>)
 8005b36:	f7fa fb55 	bl	80001e4 <strlen>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    								if (lens > 15) lens = 15;
 8005b40:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b44:	2b0f      	cmp	r3, #15
 8005b46:	dd02      	ble.n	8005b4e <StartTask+0x1a5e>
 8005b48:	230f      	movs	r3, #15
 8005b4a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    								ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - lfnt->FontHeight, SCREEN_WIDTH - 1, lfnt->FontHeight, PIX_OFF);
 8005b4e:	4b7b      	ldr	r3, [pc, #492]	; (8005d3c <StartTask+0x1c4c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	785b      	ldrb	r3, [r3, #1]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	b219      	sxth	r1, r3
 8005b5e:	4b77      	ldr	r3, [pc, #476]	; (8005d3c <StartTask+0x1c4c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	785b      	ldrb	r3, [r3, #1]
 8005b64:	b21b      	sxth	r3, r3
 8005b66:	2200      	movs	r2, #0
 8005b68:	9200      	str	r2, [sp, #0]
 8005b6a:	227f      	movs	r2, #127	; 0x7f
 8005b6c:	2000      	movs	r0, #0
 8005b6e:	f7fc f96a 	bl	8001e46 <ST7565_DrawFilledRectangle>
    								int dl = sprintf(tmp, "RDS : %.*s", lens, PSName);
 8005b72:	4b6f      	ldr	r3, [pc, #444]	; (8005d30 <StartTask+0x1c40>)
 8005b74:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8005b78:	4971      	ldr	r1, [pc, #452]	; (8005d40 <StartTask+0x1c50>)
 8005b7a:	4872      	ldr	r0, [pc, #456]	; (8005d44 <StartTask+0x1c54>)
 8005b7c:	f00e ffc8 	bl	8014b10 <siprintf>
 8005b80:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    								int x = ((SCREEN_WIDTH - (lfnt->FontWidth * dl)) >> 1) & 0x7f;
 8005b84:	4b6d      	ldr	r3, [pc, #436]	; (8005d3c <StartTask+0x1c4c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b90:	fb02 f303 	mul.w	r3, r2, r3
 8005b94:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8005b98:	105b      	asrs	r3, r3, #1
 8005b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    								ST7565_Print(x, SCREEN_HEIGHT - lfnt->FontHeight, tmp, lfnt, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8005ba2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ba6:	b218      	sxth	r0, r3
 8005ba8:	4b64      	ldr	r3, [pc, #400]	; (8005d3c <StartTask+0x1c4c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	785b      	ldrb	r3, [r3, #1]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	b219      	sxth	r1, r3
 8005bb8:	4b60      	ldr	r3, [pc, #384]	; (8005d3c <StartTask+0x1c4c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	9201      	str	r2, [sp, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	9200      	str	r2, [sp, #0]
 8005bc4:	4a5f      	ldr	r2, [pc, #380]	; (8005d44 <StartTask+0x1c54>)
 8005bc6:	f7fb fee5 	bl	8001994 <ST7565_Print>
    								ST7565_Update();
 8005bca:	f7fb fd33 	bl	8001634 <ST7565_Update>
    								//
    				        	}
    				        }
    				    } // PSName, PTy end
    					// ******** 4A - Clock time and date ********
    					if ((groupType == 4) && (groupVer == 0) && (errLevelC < 3) && (errLevelD < 3)) {
 8005bce:	4b5e      	ldr	r3, [pc, #376]	; (8005d48 <StartTask+0x1c58>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	f040 8136 	bne.w	8005e44 <StartTask+0x1d54>
 8005bd8:	4b5c      	ldr	r3, [pc, #368]	; (8005d4c <StartTask+0x1c5c>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f040 8131 	bne.w	8005e44 <StartTask+0x1d54>
 8005be2:	4b5b      	ldr	r3, [pc, #364]	; (8005d50 <StartTask+0x1c60>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	f200 812c 	bhi.w	8005e44 <StartTask+0x1d54>
 8005bec:	4b59      	ldr	r3, [pc, #356]	; (8005d54 <StartTask+0x1c64>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	f200 8127 	bhi.w	8005e44 <StartTask+0x1d54>
    						blk->blockC = rda5807_Get_reg(RDA5807M_REG_BLOCK_C);
 8005bf6:	200e      	movs	r0, #14
 8005bf8:	f000 ffde 	bl	8006bb8 <rda5807_Get_reg>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c04:	809a      	strh	r2, [r3, #4]
    						blk->blockD = rda5807_Get_reg(RDA5807M_REG_BLOCK_D);
 8005c06:	200f      	movs	r0, #15
 8005c08:	f000 ffd6 	bl	8006bb8 <rda5807_Get_reg>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c14:	80da      	strh	r2, [r3, #6]
    						uint16_t year;
    						uint8_t month, day;
    						unsigned long MJD = (blk->blockB & RDS_GROUP4A_MJD15_16_MASK);
 8005c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1a:	885b      	ldrh	r3, [r3, #2]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    						MJD = (MJD << 15) | (blk->blockC >> RDS_GROUP4A_MJD0_14_SHIFT);
 8005c26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005c2a:	03db      	lsls	r3, r3, #15
 8005c2c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005c30:	8892      	ldrh	r2, [r2, #4]
 8005c32:	b292      	uxth	r2, r2
 8005c34:	0852      	lsrs	r2, r2, #1
 8005c36:	b292      	uxth	r2, r2
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    						Report(1, "[RDS] Date: ");
 8005c3e:	4946      	ldr	r1, [pc, #280]	; (8005d58 <StartTask+0x1c68>)
 8005c40:	2001      	movs	r0, #1
 8005c42:	f7fd fabb 	bl	80031bc <Report>
    						if ((MJD < 58844) || (MJD > 62497)) {
 8005c46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005c4a:	f24e 52db 	movw	r2, #58843	; 0xe5db
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d905      	bls.n	8005c5e <StartTask+0x1b6e>
 8005c52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005c56:	f24f 4221 	movw	r2, #62497	; 0xf421
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d904      	bls.n	8005c68 <StartTask+0x1b78>
    							Report(0, "decode error\r\n");
 8005c5e:	493f      	ldr	r1, [pc, #252]	; (8005d5c <StartTask+0x1c6c>)
 8005c60:	2000      	movs	r0, #0
 8005c62:	f7fd faab 	bl	80031bc <Report>
 8005c66:	e033      	b.n	8005cd0 <StartTask+0x1be0>
    				        } else {
    				        	MJDDecode(MJD, &year, &month, &day);
 8005c68:	f107 0308 	add.w	r3, r7, #8
 8005c6c:	f107 0209 	add.w	r2, r7, #9
 8005c70:	f107 010a 	add.w	r1, r7, #10
 8005c74:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8005c78:	f7fd fb12 	bl	80032a0 <MJDDecode>
    				        	if ((day <= 31) && (month <= 12)) {
 8005c7c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005c80:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b1f      	cmp	r3, #31
 8005c88:	d81e      	bhi.n	8005cc8 <StartTask+0x1bd8>
 8005c8a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005c8e:	f2a3 1337 	subw	r3, r3, #311	; 0x137
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b0c      	cmp	r3, #12
 8005c96:	d817      	bhi.n	8005cc8 <StartTask+0x1bd8>
    				        		Report(0, "%02u.%02u.%04u\r\n", day, month, year);
 8005c98:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005c9c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005ca8:	f2a3 1337 	subw	r3, r3, #311	; 0x137
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005cb4:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4928      	ldr	r1, [pc, #160]	; (8005d60 <StartTask+0x1c70>)
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	f7fd fa7b 	bl	80031bc <Report>
 8005cc6:	e003      	b.n	8005cd0 <StartTask+0x1be0>
    				            } else {
    				            	Report(0, "decode error\r\n");
 8005cc8:	4924      	ldr	r1, [pc, #144]	; (8005d5c <StartTask+0x1c6c>)
 8005cca:	2000      	movs	r0, #0
 8005ccc:	f7fd fa76 	bl	80031bc <Report>
    				            }
    				        }
    						uint8_t hours = (blk->blockC & RDS_GROUP4A_HOURS4_MASK) << 4;
 8005cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd4:	889b      	ldrh	r3, [r3, #4]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	011b      	lsls	r3, r3, #4
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    						hours |= (blk->blockD & RDS_GROUP4A_HOURS0_3_MASK) >> RDS_GROUP4A_HOURS0_3_SHIFT;
 8005ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ce8:	88db      	ldrh	r3, [r3, #6]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	0b1b      	lsrs	r3, r3, #12
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    						uint8_t minutes = (blk->blockD & RDS_GROUP4A_MINUTES_MASK) >> RDS_GROUP4A_MINUTES_SHIFT;
 8005cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d00:	88db      	ldrh	r3, [r3, #6]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	119b      	asrs	r3, r3, #6
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d0c:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
    						if ((hours > 23) || (minutes > 59))
 8005d10:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8005d14:	2b17      	cmp	r3, #23
 8005d16:	d803      	bhi.n	8005d20 <StartTask+0x1c30>
 8005d18:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8005d1c:	2b3b      	cmp	r3, #59	; 0x3b
 8005d1e:	d923      	bls.n	8005d68 <StartTask+0x1c78>
    							Report(1, "[RDS] Time: decode error\r\n");
 8005d20:	4910      	ldr	r1, [pc, #64]	; (8005d64 <StartTask+0x1c74>)
 8005d22:	2001      	movs	r0, #1
 8005d24:	f7fd fa4a 	bl	80031bc <Report>
 8005d28:	e08c      	b.n	8005e44 <StartTask+0x1d54>
 8005d2a:	bf00      	nop
 8005d2c:	20003455 	.word	0x20003455
 8005d30:	20003440 	.word	0x20003440
 8005d34:	2000344c 	.word	0x2000344c
 8005d38:	08018fb0 	.word	0x08018fb0
 8005d3c:	20003038 	.word	0x20003038
 8005d40:	08018fc4 	.word	0x08018fc4
 8005d44:	20001374 	.word	0x20001374
 8005d48:	2000343a 	.word	0x2000343a
 8005d4c:	2000343b 	.word	0x2000343b
 8005d50:	20003438 	.word	0x20003438
 8005d54:	20003439 	.word	0x20003439
 8005d58:	08018fd0 	.word	0x08018fd0
 8005d5c:	08018fe0 	.word	0x08018fe0
 8005d60:	08018ff0 	.word	0x08018ff0
 8005d64:	08019004 	.word	0x08019004
    				        else {
    				        	long timeInMinutes = hours * 60 + minutes;
 8005d68:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	1a9b      	subs	r3, r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	461a      	mov	r2, r3
 8005d76:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    				        	//uint8_t LTO = blk->blockD & RDS_GROUP4A_LTO_MASK;
    				        	if (blk->blockD & RDS_GROUP4A_LTO_SIGN_MASK) {
 8005d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d84:	88db      	ldrh	r3, [r3, #6]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	f003 0320 	and.w	r3, r3, #32
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01a      	beq.n	8005dc6 <StartTask+0x1cd6>
    				        		timeInMinutes -= (blk->blockD & RDS_GROUP4A_LTO_MASK) * 30;
 8005d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d94:	88db      	ldrh	r3, [r3, #6]
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	f003 021f 	and.w	r2, r3, #31
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	0112      	lsls	r2, r2, #4
 8005da0:	1a9b      	subs	r3, r3, r2
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	461a      	mov	r2, r3
 8005da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005daa:	4413      	add	r3, r2
 8005dac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    				        		if (timeInMinutes < 0) timeInMinutes += 60 * 24;
 8005db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	da21      	bge.n	8005dfc <StartTask+0x1d0c>
 8005db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dbc:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8005dc0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005dc4:	e01a      	b.n	8005dfc <StartTask+0x1d0c>
    				            } else {
    				            	timeInMinutes += (blk->blockD & RDS_GROUP4A_LTO_MASK) * 30;
 8005dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dca:	88db      	ldrh	r3, [r3, #6]
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	f003 021f 	and.w	r2, r3, #31
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	011b      	lsls	r3, r3, #4
 8005dd6:	1a9b      	subs	r3, r3, r2
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005de0:	4413      	add	r3, r2
 8005de2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    				            	if (timeInMinutes > 60 * 24) timeInMinutes -= 60 * 24;
 8005de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dea:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8005dee:	dd05      	ble.n	8005dfc <StartTask+0x1d0c>
 8005df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005df4:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 8005df8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    				            }
    				        	hours = timeInMinutes / 60;
 8005dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e00:	4a59      	ldr	r2, [pc, #356]	; (8005f68 <StartTask+0x1e78>)
 8005e02:	fb82 1203 	smull	r1, r2, r2, r3
 8005e06:	441a      	add	r2, r3
 8005e08:	1152      	asrs	r2, r2, #5
 8005e0a:	17db      	asrs	r3, r3, #31
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    				        	minutes = timeInMinutes % 60;
 8005e12:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005e16:	4b54      	ldr	r3, [pc, #336]	; (8005f68 <StartTask+0x1e78>)
 8005e18:	fb83 1302 	smull	r1, r3, r3, r2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	1159      	asrs	r1, r3, #5
 8005e20:	17d3      	asrs	r3, r2, #31
 8005e22:	1ac9      	subs	r1, r1, r3
 8005e24:	460b      	mov	r3, r1
 8005e26:	011b      	lsls	r3, r3, #4
 8005e28:	1a5b      	subs	r3, r3, r1
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	1ad1      	subs	r1, r2, r3
 8005e2e:	460b      	mov	r3, r1
 8005e30:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
    				        	Report(1, "[RDS] Time: %02u:%02u\r\n", hours, minutes);
 8005e34:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8005e38:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8005e3c:	494b      	ldr	r1, [pc, #300]	; (8005f6c <StartTask+0x1e7c>)
 8005e3e:	2001      	movs	r0, #1
 8005e40:	f7fd f9bc 	bl	80031bc <Report>
    				        }
    				    }
    				}
    			}
    			readyRds = rda5807_Get_RDSReady();
 8005e44:	f000 fe9a 	bl	8006b7c <rda5807_Get_RDSReady>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	4b48      	ldr	r3, [pc, #288]	; (8005f70 <StartTask+0x1e80>)
 8005e4e:	701a      	strb	r2, [r3, #0]
    	}
#endif
    	//
    	//
    	//
    	if (devError) {
 8005e50:	4b48      	ldr	r3, [pc, #288]	; (8005f74 <StartTask+0x1e84>)
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d04f      	beq.n	8005ef8 <StartTask+0x1e08>
    		errLedOn(true);
 8005e58:	2001      	movs	r0, #1
 8005e5a:	f7fd f83b 	bl	8002ed4 <errLedOn>
    		HAL_Delay(50);
 8005e5e:	2032      	movs	r0, #50	; 0x32
 8005e60:	f002 fa80 	bl	8008364 <HAL_Delay>
    		errLedOn(false);
 8005e64:	2000      	movs	r0, #0
 8005e66:	f7fd f835 	bl	8002ed4 <errLedOn>
    		if (last_devError != devError) {
 8005e6a:	4b43      	ldr	r3, [pc, #268]	; (8005f78 <StartTask+0x1e88>)
 8005e6c:	881a      	ldrh	r2, [r3, #0]
 8005e6e:	4b41      	ldr	r3, [pc, #260]	; (8005f74 <StartTask+0x1e84>)
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d04a      	beq.n	8005f0c <StartTask+0x1e1c>
    			last_devError = devError;
 8005e76:	4b3f      	ldr	r3, [pc, #252]	; (8005f74 <StartTask+0x1e84>)
 8005e78:	881a      	ldrh	r2, [r3, #0]
 8005e7a:	4b3f      	ldr	r3, [pc, #252]	; (8005f78 <StartTask+0x1e88>)
 8005e7c:	801a      	strh	r2, [r3, #0]
    			tmp[0] = '\0';
 8005e7e:	4b3f      	ldr	r3, [pc, #252]	; (8005f7c <StartTask+0x1e8c>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	701a      	strb	r2, [r3, #0]
    			uint16_t er = 0;
 8005e84:	2300      	movs	r3, #0
 8005e86:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
    			for (int8_t i = 0; i < MAX_ERR_CODE; i++) {
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 8005e90:	e025      	b.n	8005ede <StartTask+0x1dee>
    				er = devError & all_devErr[i];
 8005e92:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8005e96:	4a3a      	ldr	r2, [pc, #232]	; (8005f80 <StartTask+0x1e90>)
 8005e98:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005e9c:	4b35      	ldr	r3, [pc, #212]	; (8005f74 <StartTask+0x1e84>)
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
    				if (er) sprintf(tmp+strlen(tmp), " '%s'", errName(er));
 8005ea6:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d010      	beq.n	8005ed0 <StartTask+0x1de0>
 8005eae:	4833      	ldr	r0, [pc, #204]	; (8005f7c <StartTask+0x1e8c>)
 8005eb0:	f7fa f998 	bl	80001e4 <strlen>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	4a31      	ldr	r2, [pc, #196]	; (8005f7c <StartTask+0x1e8c>)
 8005eb8:	189c      	adds	r4, r3, r2
 8005eba:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fc f87c 	bl	8001fbc <errName>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	492e      	ldr	r1, [pc, #184]	; (8005f84 <StartTask+0x1e94>)
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f00e fe20 	bl	8014b10 <siprintf>
    			for (int8_t i = 0; i < MAX_ERR_CODE; i++) {
 8005ed0:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 8005ede:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8005ee2:	2b09      	cmp	r3, #9
 8005ee4:	ddd5      	ble.n	8005e92 <StartTask+0x1da2>
    			}
    			Report(1, "Error 0x%04X %s\r\n", devError, tmp);
 8005ee6:	4b23      	ldr	r3, [pc, #140]	; (8005f74 <StartTask+0x1e84>)
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	461a      	mov	r2, r3
 8005eec:	4b23      	ldr	r3, [pc, #140]	; (8005f7c <StartTask+0x1e8c>)
 8005eee:	4926      	ldr	r1, [pc, #152]	; (8005f88 <StartTask+0x1e98>)
 8005ef0:	2001      	movs	r0, #1
 8005ef2:	f7fd f963 	bl	80031bc <Report>
 8005ef6:	e009      	b.n	8005f0c <StartTask+0x1e1c>
    		}
    	} else {
    		if (HAL_GPIO_ReadPin(ERR_LED_GPIO_Port, ERR_LED_Pin)) errLedOn(false);
 8005ef8:	2108      	movs	r1, #8
 8005efa:	4824      	ldr	r0, [pc, #144]	; (8005f8c <StartTask+0x1e9c>)
 8005efc:	f002 ff66 	bl	8008dcc <HAL_GPIO_ReadPin>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <StartTask+0x1e1c>
 8005f06:	2000      	movs	r0, #0
 8005f08:	f7fc ffe4 	bl	8002ed4 <errLedOn>
    while (!restart) {
 8005f0c:	4b20      	ldr	r3, [pc, #128]	; (8005f90 <StartTask+0x1ea0>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f43e ac66 	beq.w	80047e4 <StartTask+0x6f4>
    	//
    	//
    	//
    }//while (!restart)

    uint8_t sch = 3;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    while (!ird_exit && sch) {
 8005f1e:	e008      	b.n	8005f32 <StartTask+0x1e42>
    	HAL_Delay(1000);
 8005f20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f24:	f002 fa1e 	bl	8008364 <HAL_Delay>
    	sch--;
 8005f28:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    while (!ird_exit && sch) {
 8005f32:	4b18      	ldr	r3, [pc, #96]	; (8005f94 <StartTask+0x1ea4>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	f083 0301 	eor.w	r3, r3, #1
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <StartTask+0x1e5a>
 8005f42:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1ea      	bne.n	8005f20 <StartTask+0x1e30>
    }

    Report(1, "[que:%u] Stop application...\r\n", cntEvt);
 8005f4a:	4b13      	ldr	r3, [pc, #76]	; (8005f98 <StartTask+0x1ea8>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	4912      	ldr	r1, [pc, #72]	; (8005f9c <StartTask+0x1eac>)
 8005f54:	2001      	movs	r0, #1
 8005f56:	f7fd f931 	bl	80031bc <Report>

    HAL_Delay(350);
 8005f5a:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8005f5e:	f002 fa01 	bl	8008364 <HAL_Delay>


    NVIC_SystemReset();
 8005f62:	f7fb ffc9 	bl	8001ef8 <__NVIC_SystemReset>
 8005f66:	bf00      	nop
 8005f68:	88888889 	.word	0x88888889
 8005f6c:	08019020 	.word	0x08019020
 8005f70:	20003058 	.word	0x20003058
 8005f74:	20001bf4 	.word	0x20001bf4
 8005f78:	20001bf6 	.word	0x20001bf6
 8005f7c:	20001374 	.word	0x20001374
 8005f80:	08019cd0 	.word	0x08019cd0
 8005f84:	08019038 	.word	0x08019038
 8005f88:	08019040 	.word	0x08019040
 8005f8c:	48000800 	.word	0x48000800
 8005f90:	2000200c 	.word	0x2000200c
 8005f94:	2000014d 	.word	0x2000014d
 8005f98:	2000200f 	.word	0x2000200f
 8005f9c:	08019054 	.word	0x08019054

08005fa0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b5b0      	push	{r4, r5, r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4aa1      	ldr	r2, [pc, #644]	; (8006234 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d102      	bne.n	8005fb8 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8005fb2:	f002 f9b7 	bl	8008324 <HAL_IncTick>
		}
		//
	}
#endif
  /* USER CODE END Callback 1 */
}
 8005fb6:	e168      	b.n	800628a <HAL_TIM_PeriodElapsedCallback+0x2ea>
	if (htim->Instance == TIM4) {
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a9e      	ldr	r2, [pc, #632]	; (8006238 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	f040 809d 	bne.w	80060fe <HAL_TIM_PeriodElapsedCallback+0x15e>
		msCounter++;//inc_msCounter();
 8005fc4:	4b9d      	ldr	r3, [pc, #628]	; (800623c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8005fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fca:	1c54      	adds	r4, r2, #1
 8005fcc:	f143 0500 	adc.w	r5, r3, #0
 8005fd0:	4b9a      	ldr	r3, [pc, #616]	; (800623c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8005fd2:	e9c3 4500 	strd	r4, r5, [r3]
		rec_evt_t ev = {cmdNone, 0};
 8005fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	2300      	movs	r3, #0
 8005fde:	613b      	str	r3, [r7, #16]
		if (!(msCounter % _300ms)) {
 8005fe0:	4b96      	ldr	r3, [pc, #600]	; (800623c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8005fe2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fe6:	f04f 021e 	mov.w	r2, #30
 8005fea:	f04f 0300 	mov.w	r3, #0
 8005fee:	f7fa feab 	bl	8000d48 <__aeabi_uldivmod>
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	d151      	bne.n	800609a <HAL_TIM_PeriodElapsedCallback+0xfa>
			Encoder = (encPort->Instance->CNT) >> 1;
 8005ff6:	4b92      	ldr	r3, [pc, #584]	; (8006240 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	085b      	lsrs	r3, r3, #1
 8006000:	4a90      	ldr	r2, [pc, #576]	; (8006244 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8006002:	6013      	str	r3, [r2, #0]
			if (lastEncoder != Encoder) {
 8006004:	4b90      	ldr	r3, [pc, #576]	; (8006248 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	4b8e      	ldr	r3, [pc, #568]	; (8006244 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	429a      	cmp	r2, r3
 800600e:	d044      	beq.n	800609a <HAL_TIM_PeriodElapsedCallback+0xfa>
				if ((lastEncoder== MIN_ENC_VALUE) && (Encoder == MAX_ENC_VALUE)) ev.evt = cmdDecFreq;//dec
 8006010:	4b8d      	ldr	r3, [pc, #564]	; (8006248 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d108      	bne.n	800602a <HAL_TIM_PeriodElapsedCallback+0x8a>
 8006018:	4b8a      	ldr	r3, [pc, #552]	; (8006244 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006020:	4293      	cmp	r3, r2
 8006022:	d102      	bne.n	800602a <HAL_TIM_PeriodElapsedCallback+0x8a>
 8006024:	231d      	movs	r3, #29
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	e01d      	b.n	8006066 <HAL_TIM_PeriodElapsedCallback+0xc6>
				if ((lastEncoder == MAX_ENC_VALUE) && (Encoder == MIN_ENC_VALUE)) ev.evt = cmdIncFreq;//inc
 800602a:	4b87      	ldr	r3, [pc, #540]	; (8006248 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006032:	4293      	cmp	r3, r2
 8006034:	d106      	bne.n	8006044 <HAL_TIM_PeriodElapsedCallback+0xa4>
 8006036:	4b83      	ldr	r3, [pc, #524]	; (8006244 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d102      	bne.n	8006044 <HAL_TIM_PeriodElapsedCallback+0xa4>
 800603e:	231c      	movs	r3, #28
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	e010      	b.n	8006066 <HAL_TIM_PeriodElapsedCallback+0xc6>
				if (lastEncoder < Encoder) ev.evt = cmdIncFreq;//inc
 8006044:	4b80      	ldr	r3, [pc, #512]	; (8006248 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	4b7e      	ldr	r3, [pc, #504]	; (8006244 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	429a      	cmp	r2, r3
 800604e:	d202      	bcs.n	8006056 <HAL_TIM_PeriodElapsedCallback+0xb6>
 8006050:	231c      	movs	r3, #28
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	e007      	b.n	8006066 <HAL_TIM_PeriodElapsedCallback+0xc6>
				if (lastEncoder > Encoder) ev.evt = cmdDecFreq;//dec
 8006056:	4b7c      	ldr	r3, [pc, #496]	; (8006248 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	4b7a      	ldr	r3, [pc, #488]	; (8006244 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	d901      	bls.n	8006066 <HAL_TIM_PeriodElapsedCallback+0xc6>
 8006062:	231d      	movs	r3, #29
 8006064:	60fb      	str	r3, [r7, #12]
				lastEncoder = Encoder;
 8006066:	4b77      	ldr	r3, [pc, #476]	; (8006244 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a77      	ldr	r2, [pc, #476]	; (8006248 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800606c:	6013      	str	r3, [r2, #0]
				if (ev.evt != cmdNone)	{
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006074:	d011      	beq.n	800609a <HAL_TIM_PeriodElapsedCallback+0xfa>
					if (osMessageQueuePut(evtQueHandle, (const void *)&ev, 0, 0) != osOK) devError |= devEVT;
 8006076:	4b75      	ldr	r3, [pc, #468]	; (800624c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8006078:	6818      	ldr	r0, [r3, #0]
 800607a:	f107 010c 	add.w	r1, r7, #12
 800607e:	2300      	movs	r3, #0
 8006080:	2200      	movs	r2, #0
 8006082:	f00a fb9d 	bl	80107c0 <osMessageQueuePut>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d006      	beq.n	800609a <HAL_TIM_PeriodElapsedCallback+0xfa>
 800608c:	4b70      	ldr	r3, [pc, #448]	; (8006250 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800608e:	881b      	ldrh	r3, [r3, #0]
 8006090:	f043 0310 	orr.w	r3, r3, #16
 8006094:	b29a      	uxth	r2, r3
 8006096:	4b6e      	ldr	r3, [pc, #440]	; (8006250 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8006098:	801a      	strh	r2, [r3, #0]
		if (!(msCounter % _1s)) {// 1 seconda
 800609a:	4b68      	ldr	r3, [pc, #416]	; (800623c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800609c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060a0:	f04f 0264 	mov.w	r2, #100	; 0x64
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	f7fa fe4e 	bl	8000d48 <__aeabi_uldivmod>
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f040 80ec 	bne.w	800628a <HAL_TIM_PeriodElapsedCallback+0x2ea>
			secCounter++;
 80060b2:	4b68      	ldr	r3, [pc, #416]	; (8006254 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3301      	adds	r3, #1
 80060b8:	4a66      	ldr	r2, [pc, #408]	; (8006254 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80060ba:	6013      	str	r3, [r2, #0]
		  	HAL_GPIO_TogglePin(TIK_LED_GPIO_Port, TIK_LED_Pin);
 80060bc:	2102      	movs	r1, #2
 80060be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060c2:	f002 feb3 	bl	8008e2c <HAL_GPIO_TogglePin>
		  	if (startSec) {
 80060c6:	4b64      	ldr	r3, [pc, #400]	; (8006258 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 80dc 	beq.w	800628a <HAL_TIM_PeriodElapsedCallback+0x2ea>
		  		ev.evt = evt_Sec;
 80060d2:	2308      	movs	r3, #8
 80060d4:	60fb      	str	r3, [r7, #12]
		  		if (osMessageQueuePut(evtQueHandle, (const void *)&ev, 0, 0) != osOK) devError |= devEVT;
 80060d6:	4b5d      	ldr	r3, [pc, #372]	; (800624c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80060d8:	6818      	ldr	r0, [r3, #0]
 80060da:	f107 010c 	add.w	r1, r7, #12
 80060de:	2300      	movs	r3, #0
 80060e0:	2200      	movs	r2, #0
 80060e2:	f00a fb6d 	bl	80107c0 <osMessageQueuePut>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 80ce 	beq.w	800628a <HAL_TIM_PeriodElapsedCallback+0x2ea>
 80060ee:	4b58      	ldr	r3, [pc, #352]	; (8006250 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80060f0:	881b      	ldrh	r3, [r3, #0]
 80060f2:	f043 0310 	orr.w	r3, r3, #16
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	4b55      	ldr	r3, [pc, #340]	; (8006250 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80060fa:	801a      	strh	r2, [r3, #0]
}
 80060fc:	e0c5      	b.n	800628a <HAL_TIM_PeriodElapsedCallback+0x2ea>
	if (htim->Instance == TIM6) {
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a56      	ldr	r2, [pc, #344]	; (800625c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8006104:	4293      	cmp	r3, r2
 8006106:	f040 80b7 	bne.w	8006278 <HAL_TIM_PeriodElapsedCallback+0x2d8>
		uint8_t irdata = RECIV_PIN; // пин для приёма
 800610a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800610e:	4854      	ldr	r0, [pc, #336]	; (8006260 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8006110:	f002 fe5c 	bl	8008dcc <HAL_GPIO_ReadPin>
 8006114:	4603      	mov	r3, r0
 8006116:	75fb      	strb	r3, [r7, #23]
		irparams.timer++;  // One more 50uS tick
 8006118:	4b52      	ldr	r3, [pc, #328]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800611a:	885b      	ldrh	r3, [r3, #2]
 800611c:	b29b      	uxth	r3, r3
 800611e:	3301      	adds	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	4b50      	ldr	r3, [pc, #320]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8006124:	805a      	strh	r2, [r3, #2]
		if (irparams.rawlen >= RAWBUF) irparams.rcvstate = STATE_OVERFLOW;  // Buffer overflow
 8006126:	4b4f      	ldr	r3, [pc, #316]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8006128:	785b      	ldrb	r3, [r3, #1]
		switch (irparams.rcvstate) {
 800612a:	4b4e      	ldr	r3, [pc, #312]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	b2db      	uxtb	r3, r3
 8006130:	3b02      	subs	r3, #2
 8006132:	2b04      	cmp	r3, #4
 8006134:	f200 80a9 	bhi.w	800628a <HAL_TIM_PeriodElapsedCallback+0x2ea>
 8006138:	a201      	add	r2, pc, #4	; (adr r2, 8006140 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800613a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613e:	bf00      	nop
 8006140:	08006155 	.word	0x08006155
 8006144:	080061ab 	.word	0x080061ab
 8006148:	080061df 	.word	0x080061df
 800614c:	08006225 	.word	0x08006225
 8006150:	08006269 	.word	0x08006269
				if (irdata == MARK) {
 8006154:	7dfb      	ldrb	r3, [r7, #23]
 8006156:	2b00      	cmp	r3, #0
 8006158:	f040 8090 	bne.w	800627c <HAL_TIM_PeriodElapsedCallback+0x2dc>
					if (irparams.timer < GAP_TICKS) { // Not big enough to be a gap.
 800615c:	4b41      	ldr	r3, [pc, #260]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800615e:	885b      	ldrh	r3, [r3, #2]
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b63      	cmp	r3, #99	; 0x63
 8006164:	d803      	bhi.n	800616e <HAL_TIM_PeriodElapsedCallback+0x1ce>
						irparams.timer = 0;
 8006166:	4b3f      	ldr	r3, [pc, #252]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8006168:	2200      	movs	r2, #0
 800616a:	805a      	strh	r2, [r3, #2]
			break;
 800616c:	e086      	b.n	800627c <HAL_TIM_PeriodElapsedCallback+0x2dc>
						irparams.overflow = 0;
 800616e:	4b3d      	ldr	r3, [pc, #244]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						irparams.rawlen  = 0;
 8006176:	4b3b      	ldr	r3, [pc, #236]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8006178:	2200      	movs	r2, #0
 800617a:	705a      	strb	r2, [r3, #1]
						irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 800617c:	4b39      	ldr	r3, [pc, #228]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800617e:	785b      	ldrb	r3, [r3, #1]
 8006180:	b2db      	uxtb	r3, r3
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	b2d1      	uxtb	r1, r2
 8006186:	4a37      	ldr	r2, [pc, #220]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8006188:	7051      	strb	r1, [r2, #1]
 800618a:	4618      	mov	r0, r3
 800618c:	4b35      	ldr	r3, [pc, #212]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800618e:	885b      	ldrh	r3, [r3, #2]
 8006190:	b299      	uxth	r1, r3
 8006192:	4a34      	ldr	r2, [pc, #208]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8006194:	0043      	lsls	r3, r0, #1
 8006196:	4413      	add	r3, r2
 8006198:	460a      	mov	r2, r1
 800619a:	809a      	strh	r2, [r3, #4]
						irparams.timer = 0;
 800619c:	4b31      	ldr	r3, [pc, #196]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800619e:	2200      	movs	r2, #0
 80061a0:	805a      	strh	r2, [r3, #2]
						irparams.rcvstate = STATE_MARK;
 80061a2:	4b30      	ldr	r3, [pc, #192]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80061a4:	2203      	movs	r2, #3
 80061a6:	701a      	strb	r2, [r3, #0]
			break;
 80061a8:	e068      	b.n	800627c <HAL_TIM_PeriodElapsedCallback+0x2dc>
				if (irdata == SPACE) {// Mark ended; Record time
 80061aa:	7dfb      	ldrb	r3, [r7, #23]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d167      	bne.n	8006280 <HAL_TIM_PeriodElapsedCallback+0x2e0>
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 80061b0:	4b2c      	ldr	r3, [pc, #176]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80061b2:	785b      	ldrb	r3, [r3, #1]
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	b2d1      	uxtb	r1, r2
 80061ba:	4a2a      	ldr	r2, [pc, #168]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80061bc:	7051      	strb	r1, [r2, #1]
 80061be:	4618      	mov	r0, r3
 80061c0:	4b28      	ldr	r3, [pc, #160]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80061c2:	885b      	ldrh	r3, [r3, #2]
 80061c4:	b299      	uxth	r1, r3
 80061c6:	4a27      	ldr	r2, [pc, #156]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80061c8:	0043      	lsls	r3, r0, #1
 80061ca:	4413      	add	r3, r2
 80061cc:	460a      	mov	r2, r1
 80061ce:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 80061d0:	4b24      	ldr	r3, [pc, #144]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_SPACE;
 80061d6:	4b23      	ldr	r3, [pc, #140]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80061d8:	2204      	movs	r2, #4
 80061da:	701a      	strb	r2, [r3, #0]
			break;
 80061dc:	e050      	b.n	8006280 <HAL_TIM_PeriodElapsedCallback+0x2e0>
				if (irdata == MARK) {// Space just ended; Record time
 80061de:	7dfb      	ldrb	r3, [r7, #23]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d116      	bne.n	8006212 <HAL_TIM_PeriodElapsedCallback+0x272>
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 80061e4:	4b1f      	ldr	r3, [pc, #124]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80061e6:	785b      	ldrb	r3, [r3, #1]
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	1c5a      	adds	r2, r3, #1
 80061ec:	b2d1      	uxtb	r1, r2
 80061ee:	4a1d      	ldr	r2, [pc, #116]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80061f0:	7051      	strb	r1, [r2, #1]
 80061f2:	4618      	mov	r0, r3
 80061f4:	4b1b      	ldr	r3, [pc, #108]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80061f6:	885b      	ldrh	r3, [r3, #2]
 80061f8:	b299      	uxth	r1, r3
 80061fa:	4a1a      	ldr	r2, [pc, #104]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80061fc:	0043      	lsls	r3, r0, #1
 80061fe:	4413      	add	r3, r2
 8006200:	460a      	mov	r2, r1
 8006202:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 8006204:	4b17      	ldr	r3, [pc, #92]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8006206:	2200      	movs	r2, #0
 8006208:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_MARK;
 800620a:	4b16      	ldr	r3, [pc, #88]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800620c:	2203      	movs	r2, #3
 800620e:	701a      	strb	r2, [r3, #0]
			break;
 8006210:	e038      	b.n	8006284 <HAL_TIM_PeriodElapsedCallback+0x2e4>
				} else if (irparams.timer > GAP_TICKS) {// Space
 8006212:	4b14      	ldr	r3, [pc, #80]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8006214:	885b      	ldrh	r3, [r3, #2]
 8006216:	b29b      	uxth	r3, r3
 8006218:	2b64      	cmp	r3, #100	; 0x64
 800621a:	d933      	bls.n	8006284 <HAL_TIM_PeriodElapsedCallback+0x2e4>
					irparams.rcvstate = STATE_STOP;
 800621c:	4b11      	ldr	r3, [pc, #68]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800621e:	2205      	movs	r2, #5
 8006220:	701a      	strb	r2, [r3, #0]
			break;
 8006222:	e02f      	b.n	8006284 <HAL_TIM_PeriodElapsedCallback+0x2e4>
			 	if (irdata == MARK) irparams.timer = 0;  // Reset gap timer
 8006224:	7dfb      	ldrb	r3, [r7, #23]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d12e      	bne.n	8006288 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 800622a:	4b0e      	ldr	r3, [pc, #56]	; (8006264 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800622c:	2200      	movs	r2, #0
 800622e:	805a      	strh	r2, [r3, #2]
			break;
 8006230:	e02a      	b.n	8006288 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 8006232:	bf00      	nop
 8006234:	40012c00 	.word	0x40012c00
 8006238:	40000800 	.word	0x40000800
 800623c:	20001c00 	.word	0x20001c00
 8006240:	200001d4 	.word	0x200001d4
 8006244:	20003460 	.word	0x20003460
 8006248:	20003464 	.word	0x20003464
 800624c:	20000f60 	.word	0x20000f60
 8006250:	20001bf4 	.word	0x20001bf4
 8006254:	20001bf8 	.word	0x20001bf8
 8006258:	20003034 	.word	0x20003034
 800625c:	40001000 	.word	0x40001000
 8006260:	48000800 	.word	0x48000800
 8006264:	2000041c 	.word	0x2000041c
				irparams.overflow = 1;
 8006268:	4b0a      	ldr	r3, [pc, #40]	; (8006294 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				irparams.rcvstate = STATE_STOP;
 8006270:	4b08      	ldr	r3, [pc, #32]	; (8006294 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8006272:	2205      	movs	r2, #5
 8006274:	701a      	strb	r2, [r3, #0]
			break;
 8006276:	e008      	b.n	800628a <HAL_TIM_PeriodElapsedCallback+0x2ea>
	}
 8006278:	bf00      	nop
 800627a:	e006      	b.n	800628a <HAL_TIM_PeriodElapsedCallback+0x2ea>
			break;
 800627c:	bf00      	nop
 800627e:	e004      	b.n	800628a <HAL_TIM_PeriodElapsedCallback+0x2ea>
			break;
 8006280:	bf00      	nop
 8006282:	e002      	b.n	800628a <HAL_TIM_PeriodElapsedCallback+0x2ea>
			break;
 8006284:	bf00      	nop
 8006286:	e000      	b.n	800628a <HAL_TIM_PeriodElapsedCallback+0x2ea>
			break;
 8006288:	bf00      	nop
}
 800628a:	bf00      	nop
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bdb0      	pop	{r4, r5, r7, pc}
 8006292:	bf00      	nop
 8006294:	2000041c 	.word	0x2000041c

08006298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800629c:	b672      	cpsid	i
}
 800629e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  devError |= devSYS;
 80062a0:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <Error_Handler+0x20>)
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	f043 0320 	orr.w	r3, r3, #32
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	4b03      	ldr	r3, [pc, #12]	; (80062b8 <Error_Handler+0x20>)
 80062ac:	801a      	strh	r2, [r3, #0]
	  errLedOn(true);
 80062ae:	2001      	movs	r0, #1
 80062b0:	f7fc fe10 	bl	8002ed4 <errLedOn>
	  devError |= devSYS;
 80062b4:	e7f4      	b.n	80062a0 <Error_Handler+0x8>
 80062b6:	bf00      	nop
 80062b8:	20001bf4 	.word	0x20001bf4

080062bc <rda5807_init>:

//==============================================================================
// Инициализация rda5807
//==============================================================================
uint8_t rda5807_init(float *freq)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b088      	sub	sp, #32
 80062c0:	af04      	add	r7, sp, #16
 80062c2:	6078      	str	r0, [r7, #4]
uint8_t buf[2] = {0, 0};
 80062c4:	2300      	movs	r3, #0
 80062c6:	813b      	strh	r3, [r7, #8]
uint8_t *id = &buf[0];
 80062c8:	f107 0308 	add.w	r3, r7, #8
 80062cc:	60fb      	str	r3, [r7, #12]

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr, 0, I2C_MEMADD_SIZE_8BIT, buf, 2, RDA5807_TO) != HAL_OK) {
 80062ce:	4b30      	ldr	r3, [pc, #192]	; (8006390 <rda5807_init+0xd4>)
 80062d0:	6818      	ldr	r0, [r3, #0]
 80062d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062d6:	9302      	str	r3, [sp, #8]
 80062d8:	2302      	movs	r3, #2
 80062da:	9301      	str	r3, [sp, #4]
 80062dc:	f107 0308 	add.w	r3, r7, #8
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	2301      	movs	r3, #1
 80062e4:	2200      	movs	r2, #0
 80062e6:	2122      	movs	r1, #34	; 0x22
 80062e8:	f003 f86a 	bl	80093c0 <HAL_I2C_Mem_Read>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d13c      	bne.n	800636c <rda5807_init+0xb0>
    stx[0] = '\0';
    for (int i = 0; i < 64; i++) sprintf(stx+strlen(stx)," %02x", buf11[i]);
    Report(1, "[%s] %s\r\n", __func__, stx);
#endif

    rda5807_SoftReset();
 80062f2:	f000 f927 	bl	8006544 <rda5807_SoftReset>
    if (devError & devRDA) goto err_out;
 80062f6:	4b27      	ldr	r3, [pc, #156]	; (8006394 <rda5807_init+0xd8>)
 80062f8:	881b      	ldrh	r3, [r3, #0]
 80062fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d136      	bne.n	8006370 <rda5807_init+0xb4>

    rda5807_SetupDefault();
 8006302:	f000 f949 	bl	8006598 <rda5807_SetupDefault>
    if (devError & devRDA) goto err_out;
 8006306:	4b23      	ldr	r3, [pc, #140]	; (8006394 <rda5807_init+0xd8>)
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630e:	2b00      	cmp	r3, #0
 8006310:	d130      	bne.n	8006374 <rda5807_init+0xb8>

    uint16_t fr = (uint16_t)(*freq * 10);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	edd3 7a00 	vldr	s15, [r3]
 8006318:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800631c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006324:	ee17 3a90 	vmov	r3, s15
 8006328:	817b      	strh	r3, [r7, #10]
    rda5807_SetFreq_In100Khz(fr);
 800632a:	897b      	ldrh	r3, [r7, #10]
 800632c:	4618      	mov	r0, r3
 800632e:	f000 fa7b 	bl	8006828 <rda5807_SetFreq_In100Khz>
    //
    HAL_Delay(200);
 8006332:	20c8      	movs	r0, #200	; 0xc8
 8006334:	f002 f816 	bl	8008364 <HAL_Delay>
    //
    *freq = (float)rda5807_GetFreq_In100Khz();
 8006338:	f000 faf0 	bl	800691c <rda5807_GetFreq_In100Khz>
 800633c:	4603      	mov	r3, r0
 800633e:	ee07 3a90 	vmov	s15, r3
 8006342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	edc3 7a00 	vstr	s15, [r3]
    *freq /= 10;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	ed93 7a00 	vldr	s14, [r3]
 8006352:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006356:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	edc3 7a00 	vstr	s15, [r3]
#ifdef SET_RDA_DEBUG
    Report(1, "[%s] Freq: %.2f\r\n", __func__, *freq);//rda5807_GetFreq_In100Khz());
#endif

    HAL_Delay(100);
 8006360:	2064      	movs	r0, #100	; 0x64
 8006362:	f001 ffff 	bl	8008364 <HAL_Delay>

    return *id;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	e00d      	b.n	8006388 <rda5807_init+0xcc>
    	goto err_out;
 800636c:	bf00      	nop
 800636e:	e002      	b.n	8006376 <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 8006370:	bf00      	nop
 8006372:	e000      	b.n	8006376 <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 8006374:	bf00      	nop

err_out:
	devError |= devRDA;
 8006376:	4b07      	ldr	r3, [pc, #28]	; (8006394 <rda5807_init+0xd8>)
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800637e:	b29a      	uxth	r2, r3
 8006380:	4b04      	ldr	r3, [pc, #16]	; (8006394 <rda5807_init+0xd8>)
 8006382:	801a      	strh	r2, [r3, #0]
    return *id;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	781b      	ldrb	r3, [r3, #0]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	200001dc 	.word	0x200001dc
 8006394:	20001bf4 	.word	0x20001bf4

08006398 <rda5807_rssi>:
//==============================================================================
uint16_t rda5807_rssi()
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
uint16_t word = 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	80fb      	strh	r3, [r7, #6]

    rda5807_read(0x0B, &word, 1);
 80063a2:	1dbb      	adds	r3, r7, #6
 80063a4:	2201      	movs	r2, #1
 80063a6:	4619      	mov	r1, r3
 80063a8:	200b      	movs	r0, #11
 80063aa:	f000 f85d 	bl	8006468 <rda5807_read>

    return (word >> 9);
 80063ae:	88fb      	ldrh	r3, [r7, #6]
 80063b0:	0a5b      	lsrs	r3, r3, #9
 80063b2:	b29b      	uxth	r3, r3
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <rda5807_bytes_change>:

//==============================================================================
// Процедура меняет местами байты попарно в буфере pBuff 
//==============================================================================
void rda5807_bytes_change(uint8_t *pBuff, uint8_t count)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 80063c8:	e010      	b.n	80063ec <rda5807_bytes_change+0x30>
        uint8_t Temp = *(pBuff + 1);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	785b      	ldrb	r3, [r3, #1]
 80063ce:	73fb      	strb	r3, [r7, #15]
        *(pBuff + 1) = *pBuff;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3301      	adds	r3, #1
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	7812      	ldrb	r2, [r2, #0]
 80063d8:	701a      	strb	r2, [r3, #0]
        *pBuff = Temp;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	7bfa      	ldrb	r2, [r7, #15]
 80063de:	701a      	strb	r2, [r3, #0]
        pBuff += 2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	3302      	adds	r3, #2
 80063e4:	607b      	str	r3, [r7, #4]
        count -= 2;
 80063e6:	78fb      	ldrb	r3, [r7, #3]
 80063e8:	3b02      	subs	r3, #2
 80063ea:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 80063ec:	78fb      	ldrb	r3, [r7, #3]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d8eb      	bhi.n	80063ca <rda5807_bytes_change+0xe>
    }
}
 80063f2:	bf00      	nop
 80063f4:	bf00      	nop
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <rda5807_write_regfile>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с 0x02
// Используется I2C-адрес RDA5807_SeqAccess_Addr
//==============================================================================
void rda5807_write_regfile(uint16_t *pBuff, uint8_t RegNum)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af02      	add	r7, sp, #8
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	460b      	mov	r3, r1
 800640a:	70fb      	strb	r3, [r7, #3]
    err = i2cm_Start(I2Cx, RDA5807_SeqAccess_Addr, 0, RDA5807_TO);
    if (err) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 800640c:	78fb      	ldrb	r3, [r7, #3]
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	b2db      	uxtb	r3, r3
 8006412:	4619      	mov	r1, r3
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff ffd1 	bl	80063bc <rda5807_bytes_change>

//    err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
//    i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Master_Transmit(i2cRDA, (uint16_t)RDA5807_SeqAccess_Addr, (uint8_t *)pBuff, RegNum << 1, RDA5807_TO) != HAL_OK) {
 800641a:	4b11      	ldr	r3, [pc, #68]	; (8006460 <rda5807_write_regfile+0x60>)
 800641c:	6818      	ldr	r0, [r3, #0]
 800641e:	78fb      	ldrb	r3, [r7, #3]
 8006420:	b29b      	uxth	r3, r3
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	b29b      	uxth	r3, r3
 8006426:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800642a:	9200      	str	r2, [sp, #0]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	2120      	movs	r1, #32
 8006430:	f002 fdbe 	bl	8008fb0 <HAL_I2C_Master_Transmit>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d006      	beq.n	8006448 <rda5807_write_regfile+0x48>
    	devError |= devRDA;
 800643a:	4b0a      	ldr	r3, [pc, #40]	; (8006464 <rda5807_write_regfile+0x64>)
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006442:	b29a      	uxth	r2, r3
 8006444:	4b07      	ldr	r3, [pc, #28]	; (8006464 <rda5807_write_regfile+0x64>)
 8006446:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8006448:	78fb      	ldrb	r3, [r7, #3]
 800644a:	005b      	lsls	r3, r3, #1
 800644c:	b2db      	uxtb	r3, r3
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7ff ffb3 	bl	80063bc <rda5807_bytes_change>
}
 8006456:	bf00      	nop
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	200001dc 	.word	0x200001dc
 8006464:	20001bf4 	.word	0x20001bf4

08006468 <rda5807_read>:
//==============================================================================
// Процедура читает из rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_read(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af04      	add	r7, sp, #16
 800646e:	4603      	mov	r3, r0
 8006470:	6039      	str	r1, [r7, #0]
 8006472:	71fb      	strb	r3, [r7, #7]
 8006474:	4613      	mov	r3, r2
 8006476:	71bb      	strb	r3, [r7, #6]
        Error_Handler();
    }
    // Читаем
    i2cm_ReadBuffAndStop(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO); //*/

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr,
 8006478:	4b13      	ldr	r3, [pc, #76]	; (80064c8 <rda5807_read+0x60>)
 800647a:	6818      	ldr	r0, [r3, #0]
 800647c:	79fb      	ldrb	r3, [r7, #7]
 800647e:	b29a      	uxth	r2, r3
 8006480:	79bb      	ldrb	r3, [r7, #6]
 8006482:	b29b      	uxth	r3, r3
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	b29b      	uxth	r3, r3
 8006488:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800648c:	9102      	str	r1, [sp, #8]
 800648e:	9301      	str	r3, [sp, #4]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	2301      	movs	r3, #1
 8006496:	2122      	movs	r1, #34	; 0x22
 8006498:	f002 ff92 	bl	80093c0 <HAL_I2C_Mem_Read>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d006      	beq.n	80064b0 <rda5807_read+0x48>
    				     RegAddr, I2C_MEMADD_SIZE_8BIT,
						 (uint8_t *)pBuff, RegNum << 1,
						 RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 80064a2:	4b0a      	ldr	r3, [pc, #40]	; (80064cc <rda5807_read+0x64>)
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	4b07      	ldr	r3, [pc, #28]	; (80064cc <rda5807_read+0x64>)
 80064ae:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 80064b0:	79bb      	ldrb	r3, [r7, #6]
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	4619      	mov	r1, r3
 80064b8:	6838      	ldr	r0, [r7, #0]
 80064ba:	f7ff ff7f 	bl	80063bc <rda5807_bytes_change>
}
 80064be:	bf00      	nop
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	200001dc 	.word	0x200001dc
 80064cc:	20001bf4 	.word	0x20001bf4

080064d0 <rda5807_write>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_write(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af04      	add	r7, sp, #16
 80064d6:	4603      	mov	r3, r0
 80064d8:	6039      	str	r1, [r7, #0]
 80064da:	71fb      	strb	r3, [r7, #7]
 80064dc:	4613      	mov	r3, r2
 80064de:	71bb      	strb	r3, [r7, #6]

    if (i2cm_WriteBuff(I2Cx, &RegAddr, 1, RDA5807_TO)) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 80064e0:	79bb      	ldrb	r3, [r7, #6]
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	4619      	mov	r1, r3
 80064e8:	6838      	ldr	r0, [r7, #0]
 80064ea:	f7ff ff67 	bl	80063bc <rda5807_bytes_change>

    //err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
    //i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Mem_Write(i2cRDA,
 80064ee:	4b13      	ldr	r3, [pc, #76]	; (800653c <rda5807_write+0x6c>)
 80064f0:	6818      	ldr	r0, [r3, #0]
 80064f2:	79fb      	ldrb	r3, [r7, #7]
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	79bb      	ldrb	r3, [r7, #6]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	005b      	lsls	r3, r3, #1
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006502:	9102      	str	r1, [sp, #8]
 8006504:	9301      	str	r3, [sp, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	2301      	movs	r3, #1
 800650c:	2122      	movs	r1, #34	; 0x22
 800650e:	f002 fe43 	bl	8009198 <HAL_I2C_Mem_Write>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d006      	beq.n	8006526 <rda5807_write+0x56>
    					  RDA5807_RandAccess_Addr,
						  RegAddr, I2C_MEMADD_SIZE_8BIT,
						  (uint8_t *)pBuff, RegNum << 1,
						  RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 8006518:	4b09      	ldr	r3, [pc, #36]	; (8006540 <rda5807_write+0x70>)
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006520:	b29a      	uxth	r2, r3
 8006522:	4b07      	ldr	r3, [pc, #28]	; (8006540 <rda5807_write+0x70>)
 8006524:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8006526:	79bb      	ldrb	r3, [r7, #6]
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	b2db      	uxtb	r3, r3
 800652c:	4619      	mov	r1, r3
 800652e:	6838      	ldr	r0, [r7, #0]
 8006530:	f7ff ff44 	bl	80063bc <rda5807_bytes_change>
}
 8006534:	bf00      	nop
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	200001dc 	.word	0x200001dc
 8006540:	20001bf4 	.word	0x20001bf4

08006544 <rda5807_SoftReset>:

//==============================================================================
// Процедура делает программный сброс rda5807
//==============================================================================
void rda5807_SoftReset()
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
tReg02h reg02;

    rda5807_read(2, (uint16_t *)&reg02, 1);
 800654a:	1d3b      	adds	r3, r7, #4
 800654c:	2201      	movs	r2, #1
 800654e:	4619      	mov	r1, r3
 8006550:	2002      	movs	r0, #2
 8006552:	f7ff ff89 	bl	8006468 <rda5807_read>

	reg02.bENABLE = 1;
 8006556:	793b      	ldrb	r3, [r7, #4]
 8006558:	f043 0301 	orr.w	r3, r3, #1
 800655c:	713b      	strb	r3, [r7, #4]
	reg02.bSOFT_RESET = 1;
 800655e:	793b      	ldrb	r3, [r7, #4]
 8006560:	f043 0302 	orr.w	r3, r3, #2
 8006564:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 8006566:	1d3b      	adds	r3, r7, #4
 8006568:	2201      	movs	r2, #1
 800656a:	4619      	mov	r1, r3
 800656c:	2002      	movs	r0, #2
 800656e:	f7ff ffaf 	bl	80064d0 <rda5807_write>

    reg02.bENABLE = 1;
 8006572:	793b      	ldrb	r3, [r7, #4]
 8006574:	f043 0301 	orr.w	r3, r3, #1
 8006578:	713b      	strb	r3, [r7, #4]
    reg02.bSOFT_RESET = 0;
 800657a:	793b      	ldrb	r3, [r7, #4]
 800657c:	f36f 0341 	bfc	r3, #1, #1
 8006580:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 8006582:	1d3b      	adds	r3, r7, #4
 8006584:	2201      	movs	r2, #1
 8006586:	4619      	mov	r1, r3
 8006588:	2002      	movs	r0, #2
 800658a:	f7ff ffa1 	bl	80064d0 <rda5807_write>
}
 800658e:	bf00      	nop
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <rda5807_SetupDefault>:

//==============================================================================
// Процедура производит начальную настройку rda5807
//==============================================================================
void rda5807_SetupDefault()
{
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
	tReg06h Reg06;
	tReg07h Reg07;
} Buffs;*/

    // Регистр 0x02
    Buffs.Reg02.bENABLE = 1;
 800659c:	4a6c      	ldr	r2, [pc, #432]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 800659e:	7813      	ldrb	r3, [r2, #0]
 80065a0:	f043 0301 	orr.w	r3, r3, #1
 80065a4:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSOFT_RESET = 0;
 80065a6:	4a6a      	ldr	r2, [pc, #424]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 80065a8:	7813      	ldrb	r3, [r2, #0]
 80065aa:	f36f 0341 	bfc	r3, #1, #1
 80065ae:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bNEW_METHOD = 1;
 80065b0:	4a67      	ldr	r2, [pc, #412]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 80065b2:	7813      	ldrb	r3, [r2, #0]
 80065b4:	f043 0304 	orr.w	r3, r3, #4
 80065b8:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bRDS_EN = 1;
 80065ba:	4a65      	ldr	r2, [pc, #404]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 80065bc:	7813      	ldrb	r3, [r2, #0]
 80065be:	f043 0308 	orr.w	r3, r3, #8
 80065c2:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bCLK_MODE = 0;        // 32.768
 80065c4:	4a62      	ldr	r2, [pc, #392]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 80065c6:	7813      	ldrb	r3, [r2, #0]
 80065c8:	f36f 1306 	bfc	r3, #4, #3
 80065cc:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSKMODE = 0;
 80065ce:	4a60      	ldr	r2, [pc, #384]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 80065d0:	7813      	ldrb	r3, [r2, #0]
 80065d2:	f36f 13c7 	bfc	r3, #7, #1
 80065d6:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 0;
 80065d8:	4a5d      	ldr	r2, [pc, #372]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 80065da:	7853      	ldrb	r3, [r2, #1]
 80065dc:	f36f 0300 	bfc	r3, #0, #1
 80065e0:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = 1;
 80065e2:	4a5b      	ldr	r2, [pc, #364]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 80065e4:	7853      	ldrb	r3, [r2, #1]
 80065e6:	f043 0302 	orr.w	r3, r3, #2
 80065ea:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_DirectInput = 0;
 80065ec:	4a58      	ldr	r2, [pc, #352]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 80065ee:	7853      	ldrb	r3, [r2, #1]
 80065f0:	f36f 0382 	bfc	r3, #2, #1
 80065f4:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_NonCalibMode = 0;
 80065f6:	4a56      	ldr	r2, [pc, #344]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 80065f8:	7853      	ldrb	r3, [r2, #1]
 80065fa:	f36f 03c3 	bfc	r3, #3, #1
 80065fe:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bBASS = 0;
 8006600:	4a53      	ldr	r2, [pc, #332]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 8006602:	7853      	ldrb	r3, [r2, #1]
 8006604:	f36f 1304 	bfc	r3, #4, #1
 8006608:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bMONO = 0;
 800660a:	4a51      	ldr	r2, [pc, #324]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 800660c:	7853      	ldrb	r3, [r2, #1]
 800660e:	f36f 1345 	bfc	r3, #5, #1
 8006612:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDMUTE = 1;
 8006614:	4a4e      	ldr	r2, [pc, #312]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 8006616:	7853      	ldrb	r3, [r2, #1]
 8006618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800661c:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDHIZ = 1;
 800661e:	4a4c      	ldr	r2, [pc, #304]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 8006620:	7853      	ldrb	r3, [r2, #1]
 8006622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006626:	7053      	strb	r3, [r2, #1]
    // Регистр 0x03
    Buffs.Reg03.bSPACE = 0;//Step;//0;   // Шаг настройки - 0 = 100 КГц
 8006628:	4a49      	ldr	r2, [pc, #292]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 800662a:	7893      	ldrb	r3, [r2, #2]
 800662c:	f36f 0301 	bfc	r3, #0, #2
 8006630:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bBAND = Band;//2;//0;    // Диапазон 2 - 76–108 MHz
 8006632:	4b48      	ldr	r3, [pc, #288]	; (8006754 <rda5807_SetupDefault+0x1bc>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	f003 0303 	and.w	r3, r3, #3
 800663a:	b2d9      	uxtb	r1, r3
 800663c:	4a44      	ldr	r2, [pc, #272]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 800663e:	7893      	ldrb	r3, [r2, #2]
 8006640:	f361 0383 	bfi	r3, r1, #2, #2
 8006644:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bTUNE = 1;
 8006646:	4a42      	ldr	r2, [pc, #264]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 8006648:	7893      	ldrb	r3, [r2, #2]
 800664a:	f043 0310 	orr.w	r3, r3, #16
 800664e:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bDIRECT_MODE = 0;
 8006650:	4a3f      	ldr	r2, [pc, #252]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 8006652:	7893      	ldrb	r3, [r2, #2]
 8006654:	f36f 1345 	bfc	r3, #5, #1
 8006658:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bCHAN = 0;
 800665a:	4a3d      	ldr	r2, [pc, #244]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 800665c:	8853      	ldrh	r3, [r2, #2]
 800665e:	f36f 138f 	bfc	r3, #6, #10
 8006662:	8053      	strh	r3, [r2, #2]
    // Регистр 0x04
    Buffs.Reg04.bRSVD1 = 0;
 8006664:	4b3a      	ldr	r3, [pc, #232]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 8006666:	2200      	movs	r2, #0
 8006668:	711a      	strb	r2, [r3, #4]
    Buffs.Reg04.bAFCD = 0;
 800666a:	4a39      	ldr	r2, [pc, #228]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 800666c:	7953      	ldrb	r3, [r2, #5]
 800666e:	f36f 0300 	bfc	r3, #0, #1
 8006672:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bSOFTMUTE_EN = 1;
 8006674:	4a36      	ldr	r2, [pc, #216]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 8006676:	7953      	ldrb	r3, [r2, #5]
 8006678:	f043 0302 	orr.w	r3, r3, #2
 800667c:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD2 = 0;
 800667e:	4a34      	ldr	r2, [pc, #208]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 8006680:	7953      	ldrb	r3, [r2, #5]
 8006682:	f36f 0382 	bfc	r3, #2, #1
 8006686:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bDE = 0;
 8006688:	4a31      	ldr	r2, [pc, #196]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 800668a:	7953      	ldrb	r3, [r2, #5]
 800668c:	f36f 03c3 	bfc	r3, #3, #1
 8006690:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD3 = 0;
 8006692:	4a2f      	ldr	r2, [pc, #188]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 8006694:	7953      	ldrb	r3, [r2, #5]
 8006696:	f36f 1307 	bfc	r3, #4, #4
 800669a:	7153      	strb	r3, [r2, #5]
    // Регистр 0x05
    Buffs.Reg05.bVOLUME = 0;
 800669c:	4a2c      	ldr	r2, [pc, #176]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 800669e:	7993      	ldrb	r3, [r2, #6]
 80066a0:	f36f 0303 	bfc	r3, #0, #4
 80066a4:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_GAIN = 1;//0;
 80066a6:	4a2a      	ldr	r2, [pc, #168]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 80066a8:	7993      	ldrb	r3, [r2, #6]
 80066aa:	2101      	movs	r1, #1
 80066ac:	f361 1305 	bfi	r3, r1, #4, #2
 80066b0:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_TYPE = ANT_TYPE_External;//ANT_TYPE_Headphones;//ANT_TYPE_Both;
 80066b2:	4a27      	ldr	r2, [pc, #156]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 80066b4:	7993      	ldrb	r3, [r2, #6]
 80066b6:	2102      	movs	r1, #2
 80066b8:	f361 1387 	bfi	r3, r1, #6, #2
 80066bc:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bSEEKTH = 6;//8;
 80066be:	4a24      	ldr	r2, [pc, #144]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 80066c0:	79d3      	ldrb	r3, [r2, #7]
 80066c2:	2106      	movs	r1, #6
 80066c4:	f361 0303 	bfi	r3, r1, #0, #4
 80066c8:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bRSVD3 = 0;
 80066ca:	4a21      	ldr	r2, [pc, #132]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 80066cc:	79d3      	ldrb	r3, [r2, #7]
 80066ce:	f36f 1306 	bfc	r3, #4, #3
 80066d2:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bINT_MODE = 0;//1;
 80066d4:	4a1e      	ldr	r2, [pc, #120]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 80066d6:	79d3      	ldrb	r3, [r2, #7]
 80066d8:	f36f 13c7 	bfc	r3, #7, #1
 80066dc:	71d3      	strb	r3, [r2, #7]
    // Регистр 0x06
    Buffs.Reg06.bRSVD1 = 0;
 80066de:	4a1c      	ldr	r2, [pc, #112]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 80066e0:	8913      	ldrh	r3, [r2, #8]
 80066e2:	f36f 030c 	bfc	r3, #0, #13
 80066e6:	8113      	strh	r3, [r2, #8]
    Buffs.Reg06.bOPEN_MODE = 0;
 80066e8:	4a19      	ldr	r2, [pc, #100]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 80066ea:	7a53      	ldrb	r3, [r2, #9]
 80066ec:	f36f 1346 	bfc	r3, #5, #2
 80066f0:	7253      	strb	r3, [r2, #9]
    Buffs.Reg06.bRSVD2 = 0;
 80066f2:	4a17      	ldr	r2, [pc, #92]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 80066f4:	7a53      	ldrb	r3, [r2, #9]
 80066f6:	f36f 13c7 	bfc	r3, #7, #1
 80066fa:	7253      	strb	r3, [r2, #9]
    // Регистр 0x07
    Buffs.Reg07.bFREQ_MODE = 0;
 80066fc:	4a14      	ldr	r2, [pc, #80]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 80066fe:	7a93      	ldrb	r3, [r2, #10]
 8006700:	f36f 0300 	bfc	r3, #0, #1
 8006704:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSOFTBLEND_EN = 1;
 8006706:	4a12      	ldr	r2, [pc, #72]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 8006708:	7a93      	ldrb	r3, [r2, #10]
 800670a:	f043 0302 	orr.w	r3, r3, #2
 800670e:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSEEK_TH_OLD = 0;
 8006710:	4a0f      	ldr	r2, [pc, #60]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 8006712:	7a93      	ldrb	r3, [r2, #10]
 8006714:	f36f 0387 	bfc	r3, #2, #6
 8006718:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bRSVD1 = 0;
 800671a:	4a0d      	ldr	r2, [pc, #52]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 800671c:	7ad3      	ldrb	r3, [r2, #11]
 800671e:	f36f 0300 	bfc	r3, #0, #1
 8006722:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.b65M_50M_MODE = 1;
 8006724:	4a0a      	ldr	r2, [pc, #40]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 8006726:	7ad3      	ldrb	r3, [r2, #11]
 8006728:	f043 0302 	orr.w	r3, r3, #2
 800672c:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bTH_SOFRBLEND = 16;
 800672e:	4a08      	ldr	r2, [pc, #32]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 8006730:	7ad3      	ldrb	r3, [r2, #11]
 8006732:	2110      	movs	r1, #16
 8006734:	f361 0386 	bfi	r3, r1, #2, #5
 8006738:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bRSVD2 = 0;
 800673a:	4a05      	ldr	r2, [pc, #20]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 800673c:	7ad3      	ldrb	r3, [r2, #11]
 800673e:	f36f 13c7 	bfc	r3, #7, #1
 8006742:	72d3      	strb	r3, [r2, #11]

    // Пишем регистры функцией записи регистрового файла
    rda5807_write_regfile((uint16_t *)&(Buffs.Reg02), 6);
 8006744:	2106      	movs	r1, #6
 8006746:	4802      	ldr	r0, [pc, #8]	; (8006750 <rda5807_SetupDefault+0x1b8>)
 8006748:	f7ff fe5a 	bl	8006400 <rda5807_write_regfile>
}
 800674c:	bf00      	nop
 800674e:	bd80      	pop	{r7, pc}
 8006750:	2000346c 	.word	0x2000346c
 8006754:	2000012c 	.word	0x2000012c

08006758 <rda5807_SetVolume>:

//==============================================================================
// Процедура устанавливает уровень громкости (0..16) выхода rda5807. При Value=0 включает MUTE
//==============================================================================
void rda5807_SetVolume(uint8_t Value)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	4603      	mov	r3, r0
 8006760:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;
//tReg05h Reg05;
uint8_t Mute = Value ? 0 : 1;
 8006762:	79fb      	ldrb	r3, [r7, #7]
 8006764:	2b00      	cmp	r3, #0
 8006766:	bf0c      	ite	eq
 8006768:	2301      	moveq	r3, #1
 800676a:	2300      	movne	r3, #0
 800676c:	b2db      	uxtb	r3, r3
 800676e:	73fb      	strb	r3, [r7, #15]

    if (Value > 16) Value = 16;
 8006770:	79fb      	ldrb	r3, [r7, #7]
 8006772:	2b10      	cmp	r3, #16
 8006774:	d901      	bls.n	800677a <rda5807_SetVolume+0x22>
 8006776:	2310      	movs	r3, #16
 8006778:	71fb      	strb	r3, [r7, #7]

    Value--;    // Значение для поля Volume на 1 меньше, чем входной параметр функции
 800677a:	79fb      	ldrb	r3, [r7, #7]
 800677c:	3b01      	subs	r3, #1
 800677e:	71fb      	strb	r3, [r7, #7]

    if (!Mute) {
 8006780:	7bfb      	ldrb	r3, [r7, #15]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d112      	bne.n	80067ac <rda5807_SetVolume+0x54>
        // Читаем регистр 0x05
        rda5807_read(5, (uint16_t *)&Buffs.Reg05, 1);
 8006786:	2201      	movs	r2, #1
 8006788:	4915      	ldr	r1, [pc, #84]	; (80067e0 <rda5807_SetVolume+0x88>)
 800678a:	2005      	movs	r0, #5
 800678c:	f7ff fe6c 	bl	8006468 <rda5807_read>
        // Меняем значение поля VOLUME
        Buffs.Reg05.bVOLUME = Value;
 8006790:	79fb      	ldrb	r3, [r7, #7]
 8006792:	f003 030f 	and.w	r3, r3, #15
 8006796:	b2d9      	uxtb	r1, r3
 8006798:	4a12      	ldr	r2, [pc, #72]	; (80067e4 <rda5807_SetVolume+0x8c>)
 800679a:	7993      	ldrb	r3, [r2, #6]
 800679c:	f361 0303 	bfi	r3, r1, #0, #4
 80067a0:	7193      	strb	r3, [r2, #6]
        // Пишем регистр 0x05
        rda5807_write(5, (uint16_t *)&Buffs.Reg05, 1);
 80067a2:	2201      	movs	r2, #1
 80067a4:	490e      	ldr	r1, [pc, #56]	; (80067e0 <rda5807_SetVolume+0x88>)
 80067a6:	2005      	movs	r0, #5
 80067a8:	f7ff fe92 	bl	80064d0 <rda5807_write>
    }

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 80067ac:	2201      	movs	r2, #1
 80067ae:	490d      	ldr	r1, [pc, #52]	; (80067e4 <rda5807_SetVolume+0x8c>)
 80067b0:	2002      	movs	r0, #2
 80067b2:	f7ff fe59 	bl	8006468 <rda5807_read>
    // Меняем значение поля VOLUME
    Buffs.Reg02.bDMUTE = Mute ? 0 : 1;
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	bf0c      	ite	eq
 80067bc:	2301      	moveq	r3, #1
 80067be:	2300      	movne	r3, #0
 80067c0:	b2d9      	uxtb	r1, r3
 80067c2:	4a08      	ldr	r2, [pc, #32]	; (80067e4 <rda5807_SetVolume+0x8c>)
 80067c4:	7853      	ldrb	r3, [r2, #1]
 80067c6:	f361 1386 	bfi	r3, r1, #6, #1
 80067ca:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 80067cc:	2201      	movs	r2, #1
 80067ce:	4905      	ldr	r1, [pc, #20]	; (80067e4 <rda5807_SetVolume+0x8c>)
 80067d0:	2002      	movs	r0, #2
 80067d2:	f7ff fe7d 	bl	80064d0 <rda5807_write>
}
 80067d6:	bf00      	nop
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20003472 	.word	0x20003472
 80067e4:	2000346c 	.word	0x2000346c

080067e8 <rda5807_SetBassBoost>:

//==============================================================================
// Процедура включает/выключает BassBoost
//==============================================================================
void rda5807_SetBassBoost(uint8_t Value)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	4603      	mov	r3, r0
 80067f0:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 80067f2:	2201      	movs	r2, #1
 80067f4:	490b      	ldr	r1, [pc, #44]	; (8006824 <rda5807_SetBassBoost+0x3c>)
 80067f6:	2002      	movs	r0, #2
 80067f8:	f7ff fe36 	bl	8006468 <rda5807_read>
    // Меняем значение поля BASS
    Buffs.Reg02.bBASS = (Value) ? 1 : 0;
 80067fc:	79fb      	ldrb	r3, [r7, #7]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	bf14      	ite	ne
 8006802:	2301      	movne	r3, #1
 8006804:	2300      	moveq	r3, #0
 8006806:	b2d9      	uxtb	r1, r3
 8006808:	4a06      	ldr	r2, [pc, #24]	; (8006824 <rda5807_SetBassBoost+0x3c>)
 800680a:	7853      	ldrb	r3, [r2, #1]
 800680c:	f361 1304 	bfi	r3, r1, #4, #1
 8006810:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8006812:	2201      	movs	r2, #1
 8006814:	4903      	ldr	r1, [pc, #12]	; (8006824 <rda5807_SetBassBoost+0x3c>)
 8006816:	2002      	movs	r0, #2
 8006818:	f7ff fe5a 	bl	80064d0 <rda5807_write>
}
 800681c:	bf00      	nop
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	2000346c 	.word	0x2000346c

08006828 <rda5807_SetFreq_In100Khz>:
//==============================================================================
// Процедура устанавливает текущую частоту Freq100kHz и стартует перенастройку rda5807 на эту частоту.
// Окончание процесса можно установки можно проконтроллировать по обнулению бита STR в регистре 0x0A (функцией rda5807_Get_SeekTuneReadyFlag)
//==============================================================================
void rda5807_SetFreq_In100Khz(uint16_t Freq100kHz)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	4603      	mov	r3, r0
 8006830:	80fb      	strh	r3, [r7, #6]
//tReg03h Reg03;
uint16_t l = 870, r = 1080;
 8006832:	f240 3366 	movw	r3, #870	; 0x366
 8006836:	81fb      	strh	r3, [r7, #14]
 8006838:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800683c:	81bb      	strh	r3, [r7, #12]

    // Проверка входного параметра для диапазона Buffs.Reg03.bBAND
	switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 800683e:	4b33      	ldr	r3, [pc, #204]	; (800690c <rda5807_SetFreq_In100Khz+0xe4>)
 8006840:	789b      	ldrb	r3, [r3, #2]
 8006842:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b03      	cmp	r3, #3
 800684a:	d011      	beq.n	8006870 <rda5807_SetFreq_In100Khz+0x48>
 800684c:	2b03      	cmp	r3, #3
 800684e:	dc16      	bgt.n	800687e <rda5807_SetFreq_In100Khz+0x56>
 8006850:	2b01      	cmp	r3, #1
 8006852:	d002      	beq.n	800685a <rda5807_SetFreq_In100Khz+0x32>
 8006854:	2b02      	cmp	r3, #2
 8006856:	d007      	beq.n	8006868 <rda5807_SetFreq_In100Khz+0x40>
 8006858:	e011      	b.n	800687e <rda5807_SetFreq_In100Khz+0x56>
		//case 0:// 00 = 87–108 MHz (US/Europe)
		//break;
		case 1:// 01 = 76–91 MHz (Japan)
			l = 760;
 800685a:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 800685e:	81fb      	strh	r3, [r7, #14]
			r = 910;
 8006860:	f240 338e 	movw	r3, #910	; 0x38e
 8006864:	81bb      	strh	r3, [r7, #12]
		break;
 8006866:	e00a      	b.n	800687e <rda5807_SetFreq_In100Khz+0x56>
		case 2:// 10 = 76–108 MHz (world wide)
			l = 760;
 8006868:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 800686c:	81fb      	strh	r3, [r7, #14]
		break;
 800686e:	e006      	b.n	800687e <rda5807_SetFreq_In100Khz+0x56>
		case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
			l = 650;
 8006870:	f240 238a 	movw	r3, #650	; 0x28a
 8006874:	81fb      	strh	r3, [r7, #14]
			r = 760;
 8006876:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 800687a:	81bb      	strh	r3, [r7, #12]
		break;
 800687c:	bf00      	nop
	}
	lBand = ((float)l) / 10;
 800687e:	89fb      	ldrh	r3, [r7, #14]
 8006880:	ee07 3a90 	vmov	s15, r3
 8006884:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006888:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800688c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006890:	4b1f      	ldr	r3, [pc, #124]	; (8006910 <rda5807_SetFreq_In100Khz+0xe8>)
 8006892:	edc3 7a00 	vstr	s15, [r3]
	rBand = ((float)r) / 10;
 8006896:	89bb      	ldrh	r3, [r7, #12]
 8006898:	ee07 3a90 	vmov	s15, r3
 800689c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80068a0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80068a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80068a8:	4b1a      	ldr	r3, [pc, #104]	; (8006914 <rda5807_SetFreq_In100Khz+0xec>)
 80068aa:	edc3 7a00 	vstr	s15, [r3]

    if (Freq100kHz < l)  Freq100kHz = l;
 80068ae:	88fa      	ldrh	r2, [r7, #6]
 80068b0:	89fb      	ldrh	r3, [r7, #14]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d201      	bcs.n	80068ba <rda5807_SetFreq_In100Khz+0x92>
 80068b6:	89fb      	ldrh	r3, [r7, #14]
 80068b8:	80fb      	strh	r3, [r7, #6]
    if (Freq100kHz > r) Freq100kHz = r;
 80068ba:	88fa      	ldrh	r2, [r7, #6]
 80068bc:	89bb      	ldrh	r3, [r7, #12]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d901      	bls.n	80068c6 <rda5807_SetFreq_In100Khz+0x9e>
 80068c2:	89bb      	ldrh	r3, [r7, #12]
 80068c4:	80fb      	strh	r3, [r7, #6]

    // Вычитаем начало диапазона (left)
    Freq100kHz -= l;
 80068c6:	88fa      	ldrh	r2, [r7, #6]
 80068c8:	89fb      	ldrh	r3, [r7, #14]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	80fb      	strh	r3, [r7, #6]

    // Читаем регистр 0x03
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 80068ce:	2201      	movs	r2, #1
 80068d0:	4911      	ldr	r1, [pc, #68]	; (8006918 <rda5807_SetFreq_In100Khz+0xf0>)
 80068d2:	2003      	movs	r0, #3
 80068d4:	f7ff fdc8 	bl	8006468 <rda5807_read>
    // Меняем значение поля CHAN
    Buffs.Reg03.bCHAN = Freq100kHz;
 80068d8:	88fb      	ldrh	r3, [r7, #6]
 80068da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068de:	b299      	uxth	r1, r3
 80068e0:	4a0a      	ldr	r2, [pc, #40]	; (800690c <rda5807_SetFreq_In100Khz+0xe4>)
 80068e2:	8853      	ldrh	r3, [r2, #2]
 80068e4:	f361 138f 	bfi	r3, r1, #6, #10
 80068e8:	8053      	strh	r3, [r2, #2]
    // Выставляем флаг начала перенастройки на канал
    Buffs.Reg03.bTUNE = 1;
 80068ea:	4a08      	ldr	r2, [pc, #32]	; (800690c <rda5807_SetFreq_In100Khz+0xe4>)
 80068ec:	7893      	ldrb	r3, [r2, #2]
 80068ee:	f043 0310 	orr.w	r3, r3, #16
 80068f2:	7093      	strb	r3, [r2, #2]
    // Пишем регистр 0x03
    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 80068f4:	2201      	movs	r2, #1
 80068f6:	4908      	ldr	r1, [pc, #32]	; (8006918 <rda5807_SetFreq_In100Khz+0xf0>)
 80068f8:	2003      	movs	r0, #3
 80068fa:	f7ff fde9 	bl	80064d0 <rda5807_write>

    HAL_Delay(50);
 80068fe:	2032      	movs	r0, #50	; 0x32
 8006900:	f001 fd30 	bl	8008364 <HAL_Delay>
}
 8006904:	bf00      	nop
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	2000346c 	.word	0x2000346c
 8006910:	2000303c 	.word	0x2000303c
 8006914:	20003040 	.word	0x20003040
 8006918:	2000346e 	.word	0x2000346e

0800691c <rda5807_GetFreq_In100Khz>:

//==============================================================================
// Функция читает текущую частоту, на которую настроен rda5807
//==============================================================================
uint16_t rda5807_GetFreq_In100Khz()
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8006922:	2201      	movs	r2, #1
 8006924:	491b      	ldr	r1, [pc, #108]	; (8006994 <rda5807_GetFreq_In100Khz+0x78>)
 8006926:	200a      	movs	r0, #10
 8006928:	f7ff fd9e 	bl	8006468 <rda5807_read>

    uint16_t Freq100kHz = Buffs.Reg0A.bREADCHAN;
 800692c:	4b1a      	ldr	r3, [pc, #104]	; (8006998 <rda5807_GetFreq_In100Khz+0x7c>)
 800692e:	8a1b      	ldrh	r3, [r3, #16]
 8006930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006934:	b29b      	uxth	r3, r3
 8006936:	80bb      	strh	r3, [r7, #4]

    if (Freq100kHz == 319) return 0;
 8006938:	88bb      	ldrh	r3, [r7, #4]
 800693a:	f240 123f 	movw	r2, #319	; 0x13f
 800693e:	4293      	cmp	r3, r2
 8006940:	d101      	bne.n	8006946 <rda5807_GetFreq_In100Khz+0x2a>
 8006942:	2300      	movs	r3, #0
 8006944:	e021      	b.n	800698a <rda5807_GetFreq_In100Khz+0x6e>

    // Прибавляем начало диапазона (87 МГц)
    uint16_t left = 870;
 8006946:	f240 3366 	movw	r3, #870	; 0x366
 800694a:	80fb      	strh	r3, [r7, #6]
    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 800694c:	4b12      	ldr	r3, [pc, #72]	; (8006998 <rda5807_GetFreq_In100Khz+0x7c>)
 800694e:	789b      	ldrb	r3, [r3, #2]
 8006950:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b03      	cmp	r3, #3
 8006958:	d00e      	beq.n	8006978 <rda5807_GetFreq_In100Khz+0x5c>
 800695a:	2b03      	cmp	r3, #3
 800695c:	dc10      	bgt.n	8006980 <rda5807_GetFreq_In100Khz+0x64>
 800695e:	2b01      	cmp	r3, #1
 8006960:	d002      	beq.n	8006968 <rda5807_GetFreq_In100Khz+0x4c>
 8006962:	2b02      	cmp	r3, #2
 8006964:	d004      	beq.n	8006970 <rda5807_GetFreq_In100Khz+0x54>
 8006966:	e00b      	b.n	8006980 <rda5807_GetFreq_In100Khz+0x64>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		left = 760;
 8006968:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 800696c:	80fb      	strh	r3, [r7, #6]
    	break;
 800696e:	e007      	b.n	8006980 <rda5807_GetFreq_In100Khz+0x64>
    	case 2:// 10 = 76–108 MHz (world wide)
    		left = 760;
 8006970:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8006974:	80fb      	strh	r3, [r7, #6]
    	break;
 8006976:	e003      	b.n	8006980 <rda5807_GetFreq_In100Khz+0x64>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		left = 650;
 8006978:	f240 238a 	movw	r3, #650	; 0x28a
 800697c:	80fb      	strh	r3, [r7, #6]
    	break;
 800697e:	bf00      	nop
    }
    Freq100kHz += left;
 8006980:	88ba      	ldrh	r2, [r7, #4]
 8006982:	88fb      	ldrh	r3, [r7, #6]
 8006984:	4413      	add	r3, r2
 8006986:	80bb      	strh	r3, [r7, #4]

    return Freq100kHz;
 8006988:	88bb      	ldrh	r3, [r7, #4]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	2000347c 	.word	0x2000347c
 8006998:	2000346c 	.word	0x2000346c

0800699c <rda5807_StartSeek>:

//==============================================================================
// Процедура стартует поиск радиостанции вверх/вниз
//==============================================================================
void rda5807_StartSeek(uint8_t Up)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	4603      	mov	r3, r0
 80069a4:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 80069a6:	2201      	movs	r2, #1
 80069a8:	4910      	ldr	r1, [pc, #64]	; (80069ec <rda5807_StartSeek+0x50>)
 80069aa:	2002      	movs	r0, #2
 80069ac:	f7ff fd5c 	bl	8006468 <rda5807_read>

    Buffs.Reg02.bSKMODE = 1;          // 07 Seek Mode (0 = wrap at the upper or lower band limit and continue seeking; 1 = stop seeking at the upper or lower band limit)
 80069b0:	4a0e      	ldr	r2, [pc, #56]	; (80069ec <rda5807_StartSeek+0x50>)
 80069b2:	7813      	ldrb	r3, [r2, #0]
 80069b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b8:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 1;            // 08 Seek (0 = Disable stop seek; 1 = Enable)
 80069ba:	4a0c      	ldr	r2, [pc, #48]	; (80069ec <rda5807_StartSeek+0x50>)
 80069bc:	7853      	ldrb	r3, [r2, #1]
 80069be:	f043 0301 	orr.w	r3, r3, #1
 80069c2:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = Up ? 1 : 0; // 09 Seek Up (0 = Seek down; 1 = Seek up)
 80069c4:	79fb      	ldrb	r3, [r7, #7]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	bf14      	ite	ne
 80069ca:	2301      	movne	r3, #1
 80069cc:	2300      	moveq	r3, #0
 80069ce:	b2d9      	uxtb	r1, r3
 80069d0:	4a06      	ldr	r2, [pc, #24]	; (80069ec <rda5807_StartSeek+0x50>)
 80069d2:	7853      	ldrb	r3, [r2, #1]
 80069d4:	f361 0341 	bfi	r3, r1, #1, #1
 80069d8:	7053      	strb	r3, [r2, #1]

    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 80069da:	2201      	movs	r2, #1
 80069dc:	4903      	ldr	r1, [pc, #12]	; (80069ec <rda5807_StartSeek+0x50>)
 80069de:	2002      	movs	r0, #2
 80069e0:	f7ff fd76 	bl	80064d0 <rda5807_write>
}
 80069e4:	bf00      	nop
 80069e6:	3708      	adds	r7, #8
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	2000346c 	.word	0x2000346c

080069f0 <rda5807_Get_SeekTuneReadyFlag>:
//==============================================================================
// Функция возвращает состояние бита STR (SeekTuneReadyFlag)
// SeekTuneReadyFlag=1 пока идёт процесс настройки на частоту или поиск радиостанции.
//==============================================================================
uint8_t rda5807_Get_SeekTuneReadyFlag()
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 80069f4:	2201      	movs	r2, #1
 80069f6:	4905      	ldr	r1, [pc, #20]	; (8006a0c <rda5807_Get_SeekTuneReadyFlag+0x1c>)
 80069f8:	200a      	movs	r0, #10
 80069fa:	f7ff fd35 	bl	8006468 <rda5807_read>

    return Buffs.Reg0A.bSTC;
 80069fe:	4b04      	ldr	r3, [pc, #16]	; (8006a10 <rda5807_Get_SeekTuneReadyFlag+0x20>)
 8006a00:	7c5b      	ldrb	r3, [r3, #17]
 8006a02:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006a06:	b2db      	uxtb	r3, r3
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	2000347c 	.word	0x2000347c
 8006a10:	2000346c 	.word	0x2000346c

08006a14 <rda5807_Get_StereoMonoFlag>:
//==============================================================================
//==============================================================================
bool rda5807_Get_StereoMonoFlag()
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8006a18:	2201      	movs	r2, #1
 8006a1a:	4908      	ldr	r1, [pc, #32]	; (8006a3c <rda5807_Get_StereoMonoFlag+0x28>)
 8006a1c:	200a      	movs	r0, #10
 8006a1e:	f7ff fd23 	bl	8006468 <rda5807_read>

    return Buffs.Reg0A.bST;     // Stereo Indicator (0 = Mono; 1 = Stereo)
 8006a22:	4b07      	ldr	r3, [pc, #28]	; (8006a40 <rda5807_Get_StereoMonoFlag+0x2c>)
 8006a24:	7c5b      	ldrb	r3, [r3, #17]
 8006a26:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	bf14      	ite	ne
 8006a30:	2301      	movne	r3, #1
 8006a32:	2300      	moveq	r3, #0
 8006a34:	b2db      	uxtb	r3, r3
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	2000347c 	.word	0x2000347c
 8006a40:	2000346c 	.word	0x2000346c

08006a44 <rda5807_Get_Channel>:
//==============================================================================
uint16_t rda5807_Get_Channel()
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8006a48:	2201      	movs	r2, #1
 8006a4a:	4905      	ldr	r1, [pc, #20]	; (8006a60 <rda5807_Get_Channel+0x1c>)
 8006a4c:	200a      	movs	r0, #10
 8006a4e:	f7ff fd0b 	bl	8006468 <rda5807_read>

    return Buffs.Reg0A.bREADCHAN;    // 0-9 Read Channel.
 8006a52:	4b04      	ldr	r3, [pc, #16]	; (8006a64 <rda5807_Get_Channel+0x20>)
 8006a54:	8a1b      	ldrh	r3, [r3, #16]
 8006a56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a5a:	b29b      	uxth	r3, r3
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	2000347c 	.word	0x2000347c
 8006a64:	2000346c 	.word	0x2000346c

08006a68 <rda5807_Set_Band>:
//==============================================================================
uint8_t rda5807_Set_Band(uint8_t band)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	4603      	mov	r3, r0
 8006a70:	71fb      	strb	r3, [r7, #7]
	if (band > 3) return 1;
 8006a72:	79fb      	ldrb	r3, [r7, #7]
 8006a74:	2b03      	cmp	r3, #3
 8006a76:	d901      	bls.n	8006a7c <rda5807_Set_Band+0x14>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e054      	b.n	8006b26 <rda5807_Set_Band+0xbe>

    // Читаем регистр 3
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	492c      	ldr	r1, [pc, #176]	; (8006b30 <rda5807_Set_Band+0xc8>)
 8006a80:	2003      	movs	r0, #3
 8006a82:	f7ff fcf1 	bl	8006468 <rda5807_read>

    Buffs.Reg03.bBAND = band;
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	f003 0303 	and.w	r3, r3, #3
 8006a8c:	b2d9      	uxtb	r1, r3
 8006a8e:	4a29      	ldr	r2, [pc, #164]	; (8006b34 <rda5807_Set_Band+0xcc>)
 8006a90:	7893      	ldrb	r3, [r2, #2]
 8006a92:	f361 0383 	bfi	r3, r1, #2, #2
 8006a96:	7093      	strb	r3, [r2, #2]

    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 8006a98:	2201      	movs	r2, #1
 8006a9a:	4925      	ldr	r1, [pc, #148]	; (8006b30 <rda5807_Set_Band+0xc8>)
 8006a9c:	2003      	movs	r0, #3
 8006a9e:	f7ff fd17 	bl	80064d0 <rda5807_write>

    uint16_t l = 870, r = 1080;
 8006aa2:	f240 3366 	movw	r3, #870	; 0x366
 8006aa6:	81fb      	strh	r3, [r7, #14]
 8006aa8:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8006aac:	81bb      	strh	r3, [r7, #12]

    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 8006aae:	4b21      	ldr	r3, [pc, #132]	; (8006b34 <rda5807_Set_Band+0xcc>)
 8006ab0:	789b      	ldrb	r3, [r3, #2]
 8006ab2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b03      	cmp	r3, #3
 8006aba:	d011      	beq.n	8006ae0 <rda5807_Set_Band+0x78>
 8006abc:	2b03      	cmp	r3, #3
 8006abe:	dc16      	bgt.n	8006aee <rda5807_Set_Band+0x86>
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d002      	beq.n	8006aca <rda5807_Set_Band+0x62>
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d007      	beq.n	8006ad8 <rda5807_Set_Band+0x70>
 8006ac8:	e011      	b.n	8006aee <rda5807_Set_Band+0x86>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		l = 760;
 8006aca:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8006ace:	81fb      	strh	r3, [r7, #14]
    		r = 910;
 8006ad0:	f240 338e 	movw	r3, #910	; 0x38e
 8006ad4:	81bb      	strh	r3, [r7, #12]
    	break;
 8006ad6:	e00a      	b.n	8006aee <rda5807_Set_Band+0x86>
    	case 2:// 10 = 76–108 MHz (world wide)
    		l = 760;
 8006ad8:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8006adc:	81fb      	strh	r3, [r7, #14]
    	break;
 8006ade:	e006      	b.n	8006aee <rda5807_Set_Band+0x86>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		l = 650;
 8006ae0:	f240 238a 	movw	r3, #650	; 0x28a
 8006ae4:	81fb      	strh	r3, [r7, #14]
    		r = 760;
 8006ae6:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8006aea:	81bb      	strh	r3, [r7, #12]
    	break;
 8006aec:	bf00      	nop
    }
    lBand = ((float)l) / 10;
 8006aee:	89fb      	ldrh	r3, [r7, #14]
 8006af0:	ee07 3a90 	vmov	s15, r3
 8006af4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006af8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006afc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b00:	4b0d      	ldr	r3, [pc, #52]	; (8006b38 <rda5807_Set_Band+0xd0>)
 8006b02:	edc3 7a00 	vstr	s15, [r3]
    rBand = ((float)r) / 10;
 8006b06:	89bb      	ldrh	r3, [r7, #12]
 8006b08:	ee07 3a90 	vmov	s15, r3
 8006b0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b10:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006b14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b18:	4b08      	ldr	r3, [pc, #32]	; (8006b3c <rda5807_Set_Band+0xd4>)
 8006b1a:	edc3 7a00 	vstr	s15, [r3]

    HAL_Delay(50);
 8006b1e:	2032      	movs	r0, #50	; 0x32
 8006b20:	f001 fc20 	bl	8008364 <HAL_Delay>

    return 0;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	2000346e 	.word	0x2000346e
 8006b34:	2000346c 	.word	0x2000346c
 8006b38:	2000303c 	.word	0x2000303c
 8006b3c:	20003040 	.word	0x20003040

08006b40 <rda5807_Set_Mute>:
//==============================================================================
void rda5807_Set_Mute(uint8_t mute)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	4603      	mov	r3, r0
 8006b48:	71fb      	strb	r3, [r7, #7]
	// Читаем регистр 2
	rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	490a      	ldr	r1, [pc, #40]	; (8006b78 <rda5807_Set_Mute+0x38>)
 8006b4e:	2002      	movs	r0, #2
 8006b50:	f7ff fc8a 	bl	8006468 <rda5807_read>

	Buffs.Reg02.bDMUTE = mute & 1;
 8006b54:	79fb      	ldrb	r3, [r7, #7]
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	b2d9      	uxtb	r1, r3
 8006b5c:	4a06      	ldr	r2, [pc, #24]	; (8006b78 <rda5807_Set_Mute+0x38>)
 8006b5e:	7853      	ldrb	r3, [r2, #1]
 8006b60:	f361 1386 	bfi	r3, r1, #6, #1
 8006b64:	7053      	strb	r3, [r2, #1]

	rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8006b66:	2201      	movs	r2, #1
 8006b68:	4903      	ldr	r1, [pc, #12]	; (8006b78 <rda5807_Set_Mute+0x38>)
 8006b6a:	2002      	movs	r0, #2
 8006b6c:	f7ff fcb0 	bl	80064d0 <rda5807_write>
}
 8006b70:	bf00      	nop
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	2000346c 	.word	0x2000346c

08006b7c <rda5807_Get_RDSReady>:
//==============================================================================
bool rda5807_Get_RDSReady()
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	af00      	add	r7, sp, #0
	rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8006b80:	2201      	movs	r2, #1
 8006b82:	490b      	ldr	r1, [pc, #44]	; (8006bb0 <rda5807_Get_RDSReady+0x34>)
 8006b84:	200a      	movs	r0, #10
 8006b86:	f7ff fc6f 	bl	8006468 <rda5807_read>

	if (Buffs.Reg0A.bRDSS && Buffs.Reg0A.bRDSR)
 8006b8a:	4b0a      	ldr	r3, [pc, #40]	; (8006bb4 <rda5807_Get_RDSReady+0x38>)
 8006b8c:	7c5b      	ldrb	r3, [r3, #17]
 8006b8e:	f003 0310 	and.w	r3, r3, #16
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d008      	beq.n	8006baa <rda5807_Get_RDSReady+0x2e>
 8006b98:	4b06      	ldr	r3, [pc, #24]	; (8006bb4 <rda5807_Get_RDSReady+0x38>)
 8006b9a:	7c5b      	ldrb	r3, [r3, #17]
 8006b9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <rda5807_Get_RDSReady+0x2e>
		return true;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e000      	b.n	8006bac <rda5807_Get_RDSReady+0x30>
	else
		return false;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	2000347c 	.word	0x2000347c
 8006bb4:	2000346c 	.word	0x2000346c

08006bb8 <rda5807_Get_reg>:
    return ret;
}
*/
//==============================================================================
uint16_t rda5807_Get_reg(uint8_t reg)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	71fb      	strb	r3, [r7, #7]
uint16_t ret = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	81fb      	strh	r3, [r7, #14]

	rda5807_read(reg, &ret, 1);
 8006bc6:	f107 010e 	add.w	r1, r7, #14
 8006bca:	79fb      	ldrb	r3, [r7, #7]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7ff fc4a 	bl	8006468 <rda5807_read>

	return ret;
 8006bd4:	89fb      	ldrh	r3, [r7, #14]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
	...

08006be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006be6:	4b11      	ldr	r3, [pc, #68]	; (8006c2c <HAL_MspInit+0x4c>)
 8006be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bea:	4a10      	ldr	r2, [pc, #64]	; (8006c2c <HAL_MspInit+0x4c>)
 8006bec:	f043 0301 	orr.w	r3, r3, #1
 8006bf0:	6613      	str	r3, [r2, #96]	; 0x60
 8006bf2:	4b0e      	ldr	r3, [pc, #56]	; (8006c2c <HAL_MspInit+0x4c>)
 8006bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	607b      	str	r3, [r7, #4]
 8006bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006bfe:	4b0b      	ldr	r3, [pc, #44]	; (8006c2c <HAL_MspInit+0x4c>)
 8006c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c02:	4a0a      	ldr	r2, [pc, #40]	; (8006c2c <HAL_MspInit+0x4c>)
 8006c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c08:	6593      	str	r3, [r2, #88]	; 0x58
 8006c0a:	4b08      	ldr	r3, [pc, #32]	; (8006c2c <HAL_MspInit+0x4c>)
 8006c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c12:	603b      	str	r3, [r7, #0]
 8006c14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006c16:	2200      	movs	r2, #0
 8006c18:	210f      	movs	r1, #15
 8006c1a:	f06f 0001 	mvn.w	r0, #1
 8006c1e:	f001 fc7d 	bl	800851c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006c22:	bf00      	nop
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	40021000 	.word	0x40021000

08006c30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b0ac      	sub	sp, #176	; 0xb0
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	601a      	str	r2, [r3, #0]
 8006c40:	605a      	str	r2, [r3, #4]
 8006c42:	609a      	str	r2, [r3, #8]
 8006c44:	60da      	str	r2, [r3, #12]
 8006c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006c48:	f107 0314 	add.w	r3, r7, #20
 8006c4c:	2288      	movs	r2, #136	; 0x88
 8006c4e:	2100      	movs	r1, #0
 8006c50:	4618      	mov	r0, r3
 8006c52:	f00d f9dc 	bl	801400e <memset>
  if(hi2c->Instance==I2C1)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a57      	ldr	r2, [pc, #348]	; (8006db8 <HAL_I2C_MspInit+0x188>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	f040 80a7 	bne.w	8006db0 <HAL_I2C_MspInit+0x180>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006c62:	2340      	movs	r3, #64	; 0x40
 8006c64:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006c66:	2300      	movs	r3, #0
 8006c68:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006c6a:	f107 0314 	add.w	r3, r7, #20
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f004 fcba 	bl	800b5e8 <HAL_RCCEx_PeriphCLKConfig>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d001      	beq.n	8006c7e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8006c7a:	f7ff fb0d 	bl	8006298 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c7e:	4b4f      	ldr	r3, [pc, #316]	; (8006dbc <HAL_I2C_MspInit+0x18c>)
 8006c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c82:	4a4e      	ldr	r2, [pc, #312]	; (8006dbc <HAL_I2C_MspInit+0x18c>)
 8006c84:	f043 0302 	orr.w	r3, r3, #2
 8006c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c8a:	4b4c      	ldr	r3, [pc, #304]	; (8006dbc <HAL_I2C_MspInit+0x18c>)
 8006c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	613b      	str	r3, [r7, #16]
 8006c94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006c96:	23c0      	movs	r3, #192	; 0xc0
 8006c98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c9c:	2312      	movs	r3, #18
 8006c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006ca8:	2302      	movs	r3, #2
 8006caa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006cae:	2304      	movs	r3, #4
 8006cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cb4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4841      	ldr	r0, [pc, #260]	; (8006dc0 <HAL_I2C_MspInit+0x190>)
 8006cbc:	f001 fedc 	bl	8008a78 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB6);
 8006cc0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006cc4:	f003 fd3e 	bl	800a744 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 8006cc8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006ccc:	f003 fd3a 	bl	800a744 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006cd0:	4b3a      	ldr	r3, [pc, #232]	; (8006dbc <HAL_I2C_MspInit+0x18c>)
 8006cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd4:	4a39      	ldr	r2, [pc, #228]	; (8006dbc <HAL_I2C_MspInit+0x18c>)
 8006cd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006cda:	6593      	str	r3, [r2, #88]	; 0x58
 8006cdc:	4b37      	ldr	r3, [pc, #220]	; (8006dbc <HAL_I2C_MspInit+0x18c>)
 8006cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ce4:	60fb      	str	r3, [r7, #12]
 8006ce6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA2_Channel6;
 8006ce8:	4b36      	ldr	r3, [pc, #216]	; (8006dc4 <HAL_I2C_MspInit+0x194>)
 8006cea:	4a37      	ldr	r2, [pc, #220]	; (8006dc8 <HAL_I2C_MspInit+0x198>)
 8006cec:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_5;
 8006cee:	4b35      	ldr	r3, [pc, #212]	; (8006dc4 <HAL_I2C_MspInit+0x194>)
 8006cf0:	2205      	movs	r2, #5
 8006cf2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006cf4:	4b33      	ldr	r3, [pc, #204]	; (8006dc4 <HAL_I2C_MspInit+0x194>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cfa:	4b32      	ldr	r3, [pc, #200]	; (8006dc4 <HAL_I2C_MspInit+0x194>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006d00:	4b30      	ldr	r3, [pc, #192]	; (8006dc4 <HAL_I2C_MspInit+0x194>)
 8006d02:	2280      	movs	r2, #128	; 0x80
 8006d04:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d06:	4b2f      	ldr	r3, [pc, #188]	; (8006dc4 <HAL_I2C_MspInit+0x194>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d0c:	4b2d      	ldr	r3, [pc, #180]	; (8006dc4 <HAL_I2C_MspInit+0x194>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8006d12:	4b2c      	ldr	r3, [pc, #176]	; (8006dc4 <HAL_I2C_MspInit+0x194>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006d18:	4b2a      	ldr	r3, [pc, #168]	; (8006dc4 <HAL_I2C_MspInit+0x194>)
 8006d1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8006d20:	4828      	ldr	r0, [pc, #160]	; (8006dc4 <HAL_I2C_MspInit+0x194>)
 8006d22:	f001 fc25 	bl	8008570 <HAL_DMA_Init>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <HAL_I2C_MspInit+0x100>
    {
      Error_Handler();
 8006d2c:	f7ff fab4 	bl	8006298 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a24      	ldr	r2, [pc, #144]	; (8006dc4 <HAL_I2C_MspInit+0x194>)
 8006d34:	63da      	str	r2, [r3, #60]	; 0x3c
 8006d36:	4a23      	ldr	r2, [pc, #140]	; (8006dc4 <HAL_I2C_MspInit+0x194>)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8006d3c:	4b23      	ldr	r3, [pc, #140]	; (8006dcc <HAL_I2C_MspInit+0x19c>)
 8006d3e:	4a24      	ldr	r2, [pc, #144]	; (8006dd0 <HAL_I2C_MspInit+0x1a0>)
 8006d40:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8006d42:	4b22      	ldr	r3, [pc, #136]	; (8006dcc <HAL_I2C_MspInit+0x19c>)
 8006d44:	2203      	movs	r2, #3
 8006d46:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d48:	4b20      	ldr	r3, [pc, #128]	; (8006dcc <HAL_I2C_MspInit+0x19c>)
 8006d4a:	2210      	movs	r2, #16
 8006d4c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d4e:	4b1f      	ldr	r3, [pc, #124]	; (8006dcc <HAL_I2C_MspInit+0x19c>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d54:	4b1d      	ldr	r3, [pc, #116]	; (8006dcc <HAL_I2C_MspInit+0x19c>)
 8006d56:	2280      	movs	r2, #128	; 0x80
 8006d58:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d5a:	4b1c      	ldr	r3, [pc, #112]	; (8006dcc <HAL_I2C_MspInit+0x19c>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d60:	4b1a      	ldr	r3, [pc, #104]	; (8006dcc <HAL_I2C_MspInit+0x19c>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8006d66:	4b19      	ldr	r3, [pc, #100]	; (8006dcc <HAL_I2C_MspInit+0x19c>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006d6c:	4b17      	ldr	r3, [pc, #92]	; (8006dcc <HAL_I2C_MspInit+0x19c>)
 8006d6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8006d74:	4815      	ldr	r0, [pc, #84]	; (8006dcc <HAL_I2C_MspInit+0x19c>)
 8006d76:	f001 fbfb 	bl	8008570 <HAL_DMA_Init>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <HAL_I2C_MspInit+0x154>
    {
      Error_Handler();
 8006d80:	f7ff fa8a 	bl	8006298 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a11      	ldr	r2, [pc, #68]	; (8006dcc <HAL_I2C_MspInit+0x19c>)
 8006d88:	639a      	str	r2, [r3, #56]	; 0x38
 8006d8a:	4a10      	ldr	r2, [pc, #64]	; (8006dcc <HAL_I2C_MspInit+0x19c>)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8006d90:	2200      	movs	r2, #0
 8006d92:	2105      	movs	r1, #5
 8006d94:	201f      	movs	r0, #31
 8006d96:	f001 fbc1 	bl	800851c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006d9a:	201f      	movs	r0, #31
 8006d9c:	f001 fbda 	bl	8008554 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8006da0:	2200      	movs	r2, #0
 8006da2:	2105      	movs	r1, #5
 8006da4:	2020      	movs	r0, #32
 8006da6:	f001 fbb9 	bl	800851c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8006daa:	2020      	movs	r0, #32
 8006dac:	f001 fbd2 	bl	8008554 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006db0:	bf00      	nop
 8006db2:	37b0      	adds	r7, #176	; 0xb0
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	40005400 	.word	0x40005400
 8006dbc:	40021000 	.word	0x40021000
 8006dc0:	48000400 	.word	0x48000400
 8006dc4:	20000a8c 	.word	0x20000a8c
 8006dc8:	4002046c 	.word	0x4002046c
 8006dcc:	20000ad4 	.word	0x20000ad4
 8006dd0:	4002006c 	.word	0x4002006c

08006dd4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b0a4      	sub	sp, #144	; 0x90
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006ddc:	f107 0308 	add.w	r3, r7, #8
 8006de0:	2288      	movs	r2, #136	; 0x88
 8006de2:	2100      	movs	r1, #0
 8006de4:	4618      	mov	r0, r3
 8006de6:	f00d f912 	bl	801400e <memset>
  if(hrtc->Instance==RTC)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a10      	ldr	r2, [pc, #64]	; (8006e30 <HAL_RTC_MspInit+0x5c>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d118      	bne.n	8006e26 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006df4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006df8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e02:	f107 0308 	add.w	r3, r7, #8
 8006e06:	4618      	mov	r0, r3
 8006e08:	f004 fbee 	bl	800b5e8 <HAL_RCCEx_PeriphCLKConfig>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8006e12:	f7ff fa41 	bl	8006298 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006e16:	4b07      	ldr	r3, [pc, #28]	; (8006e34 <HAL_RTC_MspInit+0x60>)
 8006e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e1c:	4a05      	ldr	r2, [pc, #20]	; (8006e34 <HAL_RTC_MspInit+0x60>)
 8006e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006e26:	bf00      	nop
 8006e28:	3790      	adds	r7, #144	; 0x90
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	40002800 	.word	0x40002800
 8006e34:	40021000 	.word	0x40021000

08006e38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b08c      	sub	sp, #48	; 0x30
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e40:	f107 031c 	add.w	r3, r7, #28
 8006e44:	2200      	movs	r2, #0
 8006e46:	601a      	str	r2, [r3, #0]
 8006e48:	605a      	str	r2, [r3, #4]
 8006e4a:	609a      	str	r2, [r3, #8]
 8006e4c:	60da      	str	r2, [r3, #12]
 8006e4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a76      	ldr	r2, [pc, #472]	; (8007030 <HAL_SPI_MspInit+0x1f8>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d15b      	bne.n	8006f12 <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006e5a:	4b76      	ldr	r3, [pc, #472]	; (8007034 <HAL_SPI_MspInit+0x1fc>)
 8006e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e5e:	4a75      	ldr	r2, [pc, #468]	; (8007034 <HAL_SPI_MspInit+0x1fc>)
 8006e60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e64:	6613      	str	r3, [r2, #96]	; 0x60
 8006e66:	4b73      	ldr	r3, [pc, #460]	; (8007034 <HAL_SPI_MspInit+0x1fc>)
 8006e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e6e:	61bb      	str	r3, [r7, #24]
 8006e70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e72:	4b70      	ldr	r3, [pc, #448]	; (8007034 <HAL_SPI_MspInit+0x1fc>)
 8006e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e76:	4a6f      	ldr	r2, [pc, #444]	; (8007034 <HAL_SPI_MspInit+0x1fc>)
 8006e78:	f043 0301 	orr.w	r3, r3, #1
 8006e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e7e:	4b6d      	ldr	r3, [pc, #436]	; (8007034 <HAL_SPI_MspInit+0x1fc>)
 8006e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	617b      	str	r3, [r7, #20]
 8006e88:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8006e8a:	23a0      	movs	r3, #160	; 0xa0
 8006e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e8e:	2302      	movs	r3, #2
 8006e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e92:	2300      	movs	r3, #0
 8006e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e96:	2303      	movs	r3, #3
 8006e98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006e9a:	2305      	movs	r3, #5
 8006e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e9e:	f107 031c 	add.w	r3, r7, #28
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ea8:	f001 fde6 	bl	8008a78 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Channel4;
 8006eac:	4b62      	ldr	r3, [pc, #392]	; (8007038 <HAL_SPI_MspInit+0x200>)
 8006eae:	4a63      	ldr	r2, [pc, #396]	; (800703c <HAL_SPI_MspInit+0x204>)
 8006eb0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_4;
 8006eb2:	4b61      	ldr	r3, [pc, #388]	; (8007038 <HAL_SPI_MspInit+0x200>)
 8006eb4:	2204      	movs	r2, #4
 8006eb6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006eb8:	4b5f      	ldr	r3, [pc, #380]	; (8007038 <HAL_SPI_MspInit+0x200>)
 8006eba:	2210      	movs	r2, #16
 8006ebc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ebe:	4b5e      	ldr	r3, [pc, #376]	; (8007038 <HAL_SPI_MspInit+0x200>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006ec4:	4b5c      	ldr	r3, [pc, #368]	; (8007038 <HAL_SPI_MspInit+0x200>)
 8006ec6:	2280      	movs	r2, #128	; 0x80
 8006ec8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006eca:	4b5b      	ldr	r3, [pc, #364]	; (8007038 <HAL_SPI_MspInit+0x200>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006ed0:	4b59      	ldr	r3, [pc, #356]	; (8007038 <HAL_SPI_MspInit+0x200>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006ed6:	4b58      	ldr	r3, [pc, #352]	; (8007038 <HAL_SPI_MspInit+0x200>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006edc:	4b56      	ldr	r3, [pc, #344]	; (8007038 <HAL_SPI_MspInit+0x200>)
 8006ede:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006ee2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8006ee4:	4854      	ldr	r0, [pc, #336]	; (8007038 <HAL_SPI_MspInit+0x200>)
 8006ee6:	f001 fb43 	bl	8008570 <HAL_DMA_Init>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8006ef0:	f7ff f9d2 	bl	8006298 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a50      	ldr	r2, [pc, #320]	; (8007038 <HAL_SPI_MspInit+0x200>)
 8006ef8:	655a      	str	r2, [r3, #84]	; 0x54
 8006efa:	4a4f      	ldr	r2, [pc, #316]	; (8007038 <HAL_SPI_MspInit+0x200>)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8006f00:	2200      	movs	r2, #0
 8006f02:	2105      	movs	r1, #5
 8006f04:	2023      	movs	r0, #35	; 0x23
 8006f06:	f001 fb09 	bl	800851c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8006f0a:	2023      	movs	r0, #35	; 0x23
 8006f0c:	f001 fb22 	bl	8008554 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006f10:	e08a      	b.n	8007028 <HAL_SPI_MspInit+0x1f0>
  else if(hspi->Instance==SPI2)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a4a      	ldr	r2, [pc, #296]	; (8007040 <HAL_SPI_MspInit+0x208>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	f040 8085 	bne.w	8007028 <HAL_SPI_MspInit+0x1f0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006f1e:	4b45      	ldr	r3, [pc, #276]	; (8007034 <HAL_SPI_MspInit+0x1fc>)
 8006f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f22:	4a44      	ldr	r2, [pc, #272]	; (8007034 <HAL_SPI_MspInit+0x1fc>)
 8006f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f28:	6593      	str	r3, [r2, #88]	; 0x58
 8006f2a:	4b42      	ldr	r3, [pc, #264]	; (8007034 <HAL_SPI_MspInit+0x1fc>)
 8006f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f32:	613b      	str	r3, [r7, #16]
 8006f34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f36:	4b3f      	ldr	r3, [pc, #252]	; (8007034 <HAL_SPI_MspInit+0x1fc>)
 8006f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f3a:	4a3e      	ldr	r2, [pc, #248]	; (8007034 <HAL_SPI_MspInit+0x1fc>)
 8006f3c:	f043 0302 	orr.w	r3, r3, #2
 8006f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f42:	4b3c      	ldr	r3, [pc, #240]	; (8007034 <HAL_SPI_MspInit+0x1fc>)
 8006f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006f4e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f54:	2302      	movs	r3, #2
 8006f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006f60:	2305      	movs	r3, #5
 8006f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f64:	f107 031c 	add.w	r3, r7, #28
 8006f68:	4619      	mov	r1, r3
 8006f6a:	4836      	ldr	r0, [pc, #216]	; (8007044 <HAL_SPI_MspInit+0x20c>)
 8006f6c:	f001 fd84 	bl	8008a78 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8006f70:	4b35      	ldr	r3, [pc, #212]	; (8007048 <HAL_SPI_MspInit+0x210>)
 8006f72:	4a36      	ldr	r2, [pc, #216]	; (800704c <HAL_SPI_MspInit+0x214>)
 8006f74:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8006f76:	4b34      	ldr	r3, [pc, #208]	; (8007048 <HAL_SPI_MspInit+0x210>)
 8006f78:	2201      	movs	r2, #1
 8006f7a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f7c:	4b32      	ldr	r3, [pc, #200]	; (8007048 <HAL_SPI_MspInit+0x210>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f82:	4b31      	ldr	r3, [pc, #196]	; (8007048 <HAL_SPI_MspInit+0x210>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006f88:	4b2f      	ldr	r3, [pc, #188]	; (8007048 <HAL_SPI_MspInit+0x210>)
 8006f8a:	2280      	movs	r2, #128	; 0x80
 8006f8c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f8e:	4b2e      	ldr	r3, [pc, #184]	; (8007048 <HAL_SPI_MspInit+0x210>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f94:	4b2c      	ldr	r3, [pc, #176]	; (8007048 <HAL_SPI_MspInit+0x210>)
 8006f96:	2200      	movs	r2, #0
 8006f98:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8006f9a:	4b2b      	ldr	r3, [pc, #172]	; (8007048 <HAL_SPI_MspInit+0x210>)
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006fa0:	4b29      	ldr	r3, [pc, #164]	; (8007048 <HAL_SPI_MspInit+0x210>)
 8006fa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006fa6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8006fa8:	4827      	ldr	r0, [pc, #156]	; (8007048 <HAL_SPI_MspInit+0x210>)
 8006faa:	f001 fae1 	bl	8008570 <HAL_DMA_Init>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d001      	beq.n	8006fb8 <HAL_SPI_MspInit+0x180>
      Error_Handler();
 8006fb4:	f7ff f970 	bl	8006298 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a23      	ldr	r2, [pc, #140]	; (8007048 <HAL_SPI_MspInit+0x210>)
 8006fbc:	659a      	str	r2, [r3, #88]	; 0x58
 8006fbe:	4a22      	ldr	r2, [pc, #136]	; (8007048 <HAL_SPI_MspInit+0x210>)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8006fc4:	4b22      	ldr	r3, [pc, #136]	; (8007050 <HAL_SPI_MspInit+0x218>)
 8006fc6:	4a23      	ldr	r2, [pc, #140]	; (8007054 <HAL_SPI_MspInit+0x21c>)
 8006fc8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8006fca:	4b21      	ldr	r3, [pc, #132]	; (8007050 <HAL_SPI_MspInit+0x218>)
 8006fcc:	2201      	movs	r2, #1
 8006fce:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006fd0:	4b1f      	ldr	r3, [pc, #124]	; (8007050 <HAL_SPI_MspInit+0x218>)
 8006fd2:	2210      	movs	r2, #16
 8006fd4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006fd6:	4b1e      	ldr	r3, [pc, #120]	; (8007050 <HAL_SPI_MspInit+0x218>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006fdc:	4b1c      	ldr	r3, [pc, #112]	; (8007050 <HAL_SPI_MspInit+0x218>)
 8006fde:	2280      	movs	r2, #128	; 0x80
 8006fe0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006fe2:	4b1b      	ldr	r3, [pc, #108]	; (8007050 <HAL_SPI_MspInit+0x218>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006fe8:	4b19      	ldr	r3, [pc, #100]	; (8007050 <HAL_SPI_MspInit+0x218>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8006fee:	4b18      	ldr	r3, [pc, #96]	; (8007050 <HAL_SPI_MspInit+0x218>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006ff4:	4b16      	ldr	r3, [pc, #88]	; (8007050 <HAL_SPI_MspInit+0x218>)
 8006ff6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006ffa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8006ffc:	4814      	ldr	r0, [pc, #80]	; (8007050 <HAL_SPI_MspInit+0x218>)
 8006ffe:	f001 fab7 	bl	8008570 <HAL_DMA_Init>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <HAL_SPI_MspInit+0x1d4>
      Error_Handler();
 8007008:	f7ff f946 	bl	8006298 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a10      	ldr	r2, [pc, #64]	; (8007050 <HAL_SPI_MspInit+0x218>)
 8007010:	655a      	str	r2, [r3, #84]	; 0x54
 8007012:	4a0f      	ldr	r2, [pc, #60]	; (8007050 <HAL_SPI_MspInit+0x218>)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8007018:	2200      	movs	r2, #0
 800701a:	2105      	movs	r1, #5
 800701c:	2024      	movs	r0, #36	; 0x24
 800701e:	f001 fa7d 	bl	800851c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007022:	2024      	movs	r0, #36	; 0x24
 8007024:	f001 fa96 	bl	8008554 <HAL_NVIC_EnableIRQ>
}
 8007028:	bf00      	nop
 800702a:	3730      	adds	r7, #48	; 0x30
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	40013000 	.word	0x40013000
 8007034:	40021000 	.word	0x40021000
 8007038:	20000c08 	.word	0x20000c08
 800703c:	40020444 	.word	0x40020444
 8007040:	40003800 	.word	0x40003800
 8007044:	48000400 	.word	0x48000400
 8007048:	20000c50 	.word	0x20000c50
 800704c:	40020044 	.word	0x40020044
 8007050:	20000c98 	.word	0x20000c98
 8007054:	40020058 	.word	0x40020058

08007058 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a1a      	ldr	r2, [pc, #104]	; (80070d0 <HAL_TIM_Base_MspInit+0x78>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d114      	bne.n	8007094 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800706a:	4b1a      	ldr	r3, [pc, #104]	; (80070d4 <HAL_TIM_Base_MspInit+0x7c>)
 800706c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800706e:	4a19      	ldr	r2, [pc, #100]	; (80070d4 <HAL_TIM_Base_MspInit+0x7c>)
 8007070:	f043 0304 	orr.w	r3, r3, #4
 8007074:	6593      	str	r3, [r2, #88]	; 0x58
 8007076:	4b17      	ldr	r3, [pc, #92]	; (80070d4 <HAL_TIM_Base_MspInit+0x7c>)
 8007078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800707a:	f003 0304 	and.w	r3, r3, #4
 800707e:	60fb      	str	r3, [r7, #12]
 8007080:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8007082:	2200      	movs	r2, #0
 8007084:	2105      	movs	r1, #5
 8007086:	201e      	movs	r0, #30
 8007088:	f001 fa48 	bl	800851c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800708c:	201e      	movs	r0, #30
 800708e:	f001 fa61 	bl	8008554 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8007092:	e018      	b.n	80070c6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a0f      	ldr	r2, [pc, #60]	; (80070d8 <HAL_TIM_Base_MspInit+0x80>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d113      	bne.n	80070c6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800709e:	4b0d      	ldr	r3, [pc, #52]	; (80070d4 <HAL_TIM_Base_MspInit+0x7c>)
 80070a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a2:	4a0c      	ldr	r2, [pc, #48]	; (80070d4 <HAL_TIM_Base_MspInit+0x7c>)
 80070a4:	f043 0310 	orr.w	r3, r3, #16
 80070a8:	6593      	str	r3, [r2, #88]	; 0x58
 80070aa:	4b0a      	ldr	r3, [pc, #40]	; (80070d4 <HAL_TIM_Base_MspInit+0x7c>)
 80070ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ae:	f003 0310 	and.w	r3, r3, #16
 80070b2:	60bb      	str	r3, [r7, #8]
 80070b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 7, 0);
 80070b6:	2200      	movs	r2, #0
 80070b8:	2107      	movs	r1, #7
 80070ba:	2036      	movs	r0, #54	; 0x36
 80070bc:	f001 fa2e 	bl	800851c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80070c0:	2036      	movs	r0, #54	; 0x36
 80070c2:	f001 fa47 	bl	8008554 <HAL_NVIC_EnableIRQ>
}
 80070c6:	bf00      	nop
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	40000800 	.word	0x40000800
 80070d4:	40021000 	.word	0x40021000
 80070d8:	40001000 	.word	0x40001000

080070dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b08a      	sub	sp, #40	; 0x28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070e4:	f107 0314 	add.w	r3, r7, #20
 80070e8:	2200      	movs	r2, #0
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	605a      	str	r2, [r3, #4]
 80070ee:	609a      	str	r2, [r3, #8]
 80070f0:	60da      	str	r2, [r3, #12]
 80070f2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a17      	ldr	r2, [pc, #92]	; (8007158 <HAL_TIM_Encoder_MspInit+0x7c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d127      	bne.n	800714e <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80070fe:	4b17      	ldr	r3, [pc, #92]	; (800715c <HAL_TIM_Encoder_MspInit+0x80>)
 8007100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007102:	4a16      	ldr	r2, [pc, #88]	; (800715c <HAL_TIM_Encoder_MspInit+0x80>)
 8007104:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007108:	6613      	str	r3, [r2, #96]	; 0x60
 800710a:	4b14      	ldr	r3, [pc, #80]	; (800715c <HAL_TIM_Encoder_MspInit+0x80>)
 800710c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800710e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007112:	613b      	str	r3, [r7, #16]
 8007114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007116:	4b11      	ldr	r3, [pc, #68]	; (800715c <HAL_TIM_Encoder_MspInit+0x80>)
 8007118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800711a:	4a10      	ldr	r2, [pc, #64]	; (800715c <HAL_TIM_Encoder_MspInit+0x80>)
 800711c:	f043 0304 	orr.w	r3, r3, #4
 8007120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007122:	4b0e      	ldr	r3, [pc, #56]	; (800715c <HAL_TIM_Encoder_MspInit+0x80>)
 8007124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007126:	f003 0304 	and.w	r3, r3, #4
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800712e:	23c0      	movs	r3, #192	; 0xc0
 8007130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007132:	2302      	movs	r3, #2
 8007134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007136:	2300      	movs	r3, #0
 8007138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800713a:	2301      	movs	r3, #1
 800713c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800713e:	2303      	movs	r3, #3
 8007140:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007142:	f107 0314 	add.w	r3, r7, #20
 8007146:	4619      	mov	r1, r3
 8007148:	4805      	ldr	r0, [pc, #20]	; (8007160 <HAL_TIM_Encoder_MspInit+0x84>)
 800714a:	f001 fc95 	bl	8008a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800714e:	bf00      	nop
 8007150:	3728      	adds	r7, #40	; 0x28
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	40013400 	.word	0x40013400
 800715c:	40021000 	.word	0x40021000
 8007160:	48000800 	.word	0x48000800

08007164 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b0ae      	sub	sp, #184	; 0xb8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800716c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	605a      	str	r2, [r3, #4]
 8007176:	609a      	str	r2, [r3, #8]
 8007178:	60da      	str	r2, [r3, #12]
 800717a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800717c:	f107 031c 	add.w	r3, r7, #28
 8007180:	2288      	movs	r2, #136	; 0x88
 8007182:	2100      	movs	r1, #0
 8007184:	4618      	mov	r0, r3
 8007186:	f00c ff42 	bl	801400e <memset>
  if(huart->Instance==USART2)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a74      	ldr	r2, [pc, #464]	; (8007360 <HAL_UART_MspInit+0x1fc>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d16e      	bne.n	8007272 <HAL_UART_MspInit+0x10e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007194:	2302      	movs	r3, #2
 8007196:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007198:	2300      	movs	r3, #0
 800719a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800719c:	f107 031c 	add.w	r3, r7, #28
 80071a0:	4618      	mov	r0, r3
 80071a2:	f004 fa21 	bl	800b5e8 <HAL_RCCEx_PeriphCLKConfig>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d001      	beq.n	80071b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80071ac:	f7ff f874 	bl	8006298 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80071b0:	4b6c      	ldr	r3, [pc, #432]	; (8007364 <HAL_UART_MspInit+0x200>)
 80071b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b4:	4a6b      	ldr	r2, [pc, #428]	; (8007364 <HAL_UART_MspInit+0x200>)
 80071b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071ba:	6593      	str	r3, [r2, #88]	; 0x58
 80071bc:	4b69      	ldr	r3, [pc, #420]	; (8007364 <HAL_UART_MspInit+0x200>)
 80071be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071c4:	61bb      	str	r3, [r7, #24]
 80071c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071c8:	4b66      	ldr	r3, [pc, #408]	; (8007364 <HAL_UART_MspInit+0x200>)
 80071ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071cc:	4a65      	ldr	r2, [pc, #404]	; (8007364 <HAL_UART_MspInit+0x200>)
 80071ce:	f043 0301 	orr.w	r3, r3, #1
 80071d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071d4:	4b63      	ldr	r3, [pc, #396]	; (8007364 <HAL_UART_MspInit+0x200>)
 80071d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	617b      	str	r3, [r7, #20]
 80071de:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOG_TX_Pin|LOG_RX_Pin;
 80071e0:	230c      	movs	r3, #12
 80071e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071e6:	2302      	movs	r3, #2
 80071e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ec:	2300      	movs	r3, #0
 80071ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071f2:	2303      	movs	r3, #3
 80071f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80071f8:	2307      	movs	r3, #7
 80071fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007202:	4619      	mov	r1, r3
 8007204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007208:	f001 fc36 	bl	8008a78 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800720c:	4b56      	ldr	r3, [pc, #344]	; (8007368 <HAL_UART_MspInit+0x204>)
 800720e:	4a57      	ldr	r2, [pc, #348]	; (800736c <HAL_UART_MspInit+0x208>)
 8007210:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8007212:	4b55      	ldr	r3, [pc, #340]	; (8007368 <HAL_UART_MspInit+0x204>)
 8007214:	2202      	movs	r2, #2
 8007216:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007218:	4b53      	ldr	r3, [pc, #332]	; (8007368 <HAL_UART_MspInit+0x204>)
 800721a:	2210      	movs	r2, #16
 800721c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800721e:	4b52      	ldr	r3, [pc, #328]	; (8007368 <HAL_UART_MspInit+0x204>)
 8007220:	2200      	movs	r2, #0
 8007222:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007224:	4b50      	ldr	r3, [pc, #320]	; (8007368 <HAL_UART_MspInit+0x204>)
 8007226:	2280      	movs	r2, #128	; 0x80
 8007228:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800722a:	4b4f      	ldr	r3, [pc, #316]	; (8007368 <HAL_UART_MspInit+0x204>)
 800722c:	2200      	movs	r2, #0
 800722e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007230:	4b4d      	ldr	r3, [pc, #308]	; (8007368 <HAL_UART_MspInit+0x204>)
 8007232:	2200      	movs	r2, #0
 8007234:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8007236:	4b4c      	ldr	r3, [pc, #304]	; (8007368 <HAL_UART_MspInit+0x204>)
 8007238:	2200      	movs	r2, #0
 800723a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800723c:	4b4a      	ldr	r3, [pc, #296]	; (8007368 <HAL_UART_MspInit+0x204>)
 800723e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007242:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007244:	4848      	ldr	r0, [pc, #288]	; (8007368 <HAL_UART_MspInit+0x204>)
 8007246:	f001 f993 	bl	8008570 <HAL_DMA_Init>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d001      	beq.n	8007254 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8007250:	f7ff f822 	bl	8006298 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a44      	ldr	r2, [pc, #272]	; (8007368 <HAL_UART_MspInit+0x204>)
 8007258:	66da      	str	r2, [r3, #108]	; 0x6c
 800725a:	4a43      	ldr	r2, [pc, #268]	; (8007368 <HAL_UART_MspInit+0x204>)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8007260:	2200      	movs	r2, #0
 8007262:	2105      	movs	r1, #5
 8007264:	2026      	movs	r0, #38	; 0x26
 8007266:	f001 f959 	bl	800851c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800726a:	2026      	movs	r0, #38	; 0x26
 800726c:	f001 f972 	bl	8008554 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007270:	e071      	b.n	8007356 <HAL_UART_MspInit+0x1f2>
  else if(huart->Instance==USART3)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a3e      	ldr	r2, [pc, #248]	; (8007370 <HAL_UART_MspInit+0x20c>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d16c      	bne.n	8007356 <HAL_UART_MspInit+0x1f2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800727c:	2304      	movs	r3, #4
 800727e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8007280:	2300      	movs	r3, #0
 8007282:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007284:	f107 031c 	add.w	r3, r7, #28
 8007288:	4618      	mov	r0, r3
 800728a:	f004 f9ad 	bl	800b5e8 <HAL_RCCEx_PeriphCLKConfig>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d001      	beq.n	8007298 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8007294:	f7ff f800 	bl	8006298 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007298:	4b32      	ldr	r3, [pc, #200]	; (8007364 <HAL_UART_MspInit+0x200>)
 800729a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800729c:	4a31      	ldr	r2, [pc, #196]	; (8007364 <HAL_UART_MspInit+0x200>)
 800729e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072a2:	6593      	str	r3, [r2, #88]	; 0x58
 80072a4:	4b2f      	ldr	r3, [pc, #188]	; (8007364 <HAL_UART_MspInit+0x200>)
 80072a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072ac:	613b      	str	r3, [r7, #16]
 80072ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80072b0:	4b2c      	ldr	r3, [pc, #176]	; (8007364 <HAL_UART_MspInit+0x200>)
 80072b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072b4:	4a2b      	ldr	r2, [pc, #172]	; (8007364 <HAL_UART_MspInit+0x200>)
 80072b6:	f043 0304 	orr.w	r3, r3, #4
 80072ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80072bc:	4b29      	ldr	r3, [pc, #164]	; (8007364 <HAL_UART_MspInit+0x200>)
 80072be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	60fb      	str	r3, [r7, #12]
 80072c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80072c8:	2330      	movs	r3, #48	; 0x30
 80072ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072ce:	2302      	movs	r3, #2
 80072d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072d4:	2300      	movs	r3, #0
 80072d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072da:	2303      	movs	r3, #3
 80072dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80072e0:	2307      	movs	r3, #7
 80072e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80072ea:	4619      	mov	r1, r3
 80072ec:	4821      	ldr	r0, [pc, #132]	; (8007374 <HAL_UART_MspInit+0x210>)
 80072ee:	f001 fbc3 	bl	8008a78 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80072f2:	4b21      	ldr	r3, [pc, #132]	; (8007378 <HAL_UART_MspInit+0x214>)
 80072f4:	4a21      	ldr	r2, [pc, #132]	; (800737c <HAL_UART_MspInit+0x218>)
 80072f6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 80072f8:	4b1f      	ldr	r3, [pc, #124]	; (8007378 <HAL_UART_MspInit+0x214>)
 80072fa:	2202      	movs	r2, #2
 80072fc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80072fe:	4b1e      	ldr	r3, [pc, #120]	; (8007378 <HAL_UART_MspInit+0x214>)
 8007300:	2210      	movs	r2, #16
 8007302:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007304:	4b1c      	ldr	r3, [pc, #112]	; (8007378 <HAL_UART_MspInit+0x214>)
 8007306:	2200      	movs	r2, #0
 8007308:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800730a:	4b1b      	ldr	r3, [pc, #108]	; (8007378 <HAL_UART_MspInit+0x214>)
 800730c:	2280      	movs	r2, #128	; 0x80
 800730e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007310:	4b19      	ldr	r3, [pc, #100]	; (8007378 <HAL_UART_MspInit+0x214>)
 8007312:	2200      	movs	r2, #0
 8007314:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007316:	4b18      	ldr	r3, [pc, #96]	; (8007378 <HAL_UART_MspInit+0x214>)
 8007318:	2200      	movs	r2, #0
 800731a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800731c:	4b16      	ldr	r3, [pc, #88]	; (8007378 <HAL_UART_MspInit+0x214>)
 800731e:	2200      	movs	r2, #0
 8007320:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007322:	4b15      	ldr	r3, [pc, #84]	; (8007378 <HAL_UART_MspInit+0x214>)
 8007324:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007328:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800732a:	4813      	ldr	r0, [pc, #76]	; (8007378 <HAL_UART_MspInit+0x214>)
 800732c:	f001 f920 	bl	8008570 <HAL_DMA_Init>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 8007336:	f7fe ffaf 	bl	8006298 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a0e      	ldr	r2, [pc, #56]	; (8007378 <HAL_UART_MspInit+0x214>)
 800733e:	66da      	str	r2, [r3, #108]	; 0x6c
 8007340:	4a0d      	ldr	r2, [pc, #52]	; (8007378 <HAL_UART_MspInit+0x214>)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8007346:	2200      	movs	r2, #0
 8007348:	2105      	movs	r1, #5
 800734a:	2027      	movs	r0, #39	; 0x27
 800734c:	f001 f8e6 	bl	800851c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007350:	2027      	movs	r0, #39	; 0x27
 8007352:	f001 f8ff 	bl	8008554 <HAL_NVIC_EnableIRQ>
}
 8007356:	bf00      	nop
 8007358:	37b8      	adds	r7, #184	; 0xb8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	40004400 	.word	0x40004400
 8007364:	40021000 	.word	0x40021000
 8007368:	20000ecc 	.word	0x20000ecc
 800736c:	40020080 	.word	0x40020080
 8007370:	40004800 	.word	0x40004800
 8007374:	48000800 	.word	0x48000800
 8007378:	20000f14 	.word	0x20000f14
 800737c:	4002001c 	.word	0x4002001c

08007380 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b08c      	sub	sp, #48	; 0x30
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007388:	2300      	movs	r3, #0
 800738a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800738c:	2300      	movs	r3, #0
 800738e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8007390:	2200      	movs	r2, #0
 8007392:	6879      	ldr	r1, [r7, #4]
 8007394:	2019      	movs	r0, #25
 8007396:	f001 f8c1 	bl	800851c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800739a:	2019      	movs	r0, #25
 800739c:	f001 f8da 	bl	8008554 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80073a0:	4b1e      	ldr	r3, [pc, #120]	; (800741c <HAL_InitTick+0x9c>)
 80073a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073a4:	4a1d      	ldr	r2, [pc, #116]	; (800741c <HAL_InitTick+0x9c>)
 80073a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80073aa:	6613      	str	r3, [r2, #96]	; 0x60
 80073ac:	4b1b      	ldr	r3, [pc, #108]	; (800741c <HAL_InitTick+0x9c>)
 80073ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073b4:	60fb      	str	r3, [r7, #12]
 80073b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80073b8:	f107 0210 	add.w	r2, r7, #16
 80073bc:	f107 0314 	add.w	r3, r7, #20
 80073c0:	4611      	mov	r1, r2
 80073c2:	4618      	mov	r0, r3
 80073c4:	f004 f87e 	bl	800b4c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80073c8:	f004 f866 	bl	800b498 <HAL_RCC_GetPCLK2Freq>
 80073cc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80073ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d0:	4a13      	ldr	r2, [pc, #76]	; (8007420 <HAL_InitTick+0xa0>)
 80073d2:	fba2 2303 	umull	r2, r3, r2, r3
 80073d6:	0c9b      	lsrs	r3, r3, #18
 80073d8:	3b01      	subs	r3, #1
 80073da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80073dc:	4b11      	ldr	r3, [pc, #68]	; (8007424 <HAL_InitTick+0xa4>)
 80073de:	4a12      	ldr	r2, [pc, #72]	; (8007428 <HAL_InitTick+0xa8>)
 80073e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80073e2:	4b10      	ldr	r3, [pc, #64]	; (8007424 <HAL_InitTick+0xa4>)
 80073e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80073e8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80073ea:	4a0e      	ldr	r2, [pc, #56]	; (8007424 <HAL_InitTick+0xa4>)
 80073ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80073f0:	4b0c      	ldr	r3, [pc, #48]	; (8007424 <HAL_InitTick+0xa4>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80073f6:	4b0b      	ldr	r3, [pc, #44]	; (8007424 <HAL_InitTick+0xa4>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80073fc:	4809      	ldr	r0, [pc, #36]	; (8007424 <HAL_InitTick+0xa4>)
 80073fe:	f006 fcd3 	bl	800dda8 <HAL_TIM_Base_Init>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d104      	bne.n	8007412 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8007408:	4806      	ldr	r0, [pc, #24]	; (8007424 <HAL_InitTick+0xa4>)
 800740a:	f006 fd25 	bl	800de58 <HAL_TIM_Base_Start_IT>
 800740e:	4603      	mov	r3, r0
 8007410:	e000      	b.n	8007414 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
}
 8007414:	4618      	mov	r0, r3
 8007416:	3730      	adds	r7, #48	; 0x30
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	40021000 	.word	0x40021000
 8007420:	431bde83 	.word	0x431bde83
 8007424:	20003480 	.word	0x20003480
 8007428:	40012c00 	.word	0x40012c00

0800742c <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 800742c:	b480      	push	{r7}
 800742e:	af00      	add	r7, sp, #0
  /* Disable TIM1 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE);
 8007430:	4b06      	ldr	r3, [pc, #24]	; (800744c <HAL_SuspendTick+0x20>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68da      	ldr	r2, [r3, #12]
 8007436:	4b05      	ldr	r3, [pc, #20]	; (800744c <HAL_SuspendTick+0x20>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f022 0201 	bic.w	r2, r2, #1
 800743e:	60da      	str	r2, [r3, #12]
}
 8007440:	bf00      	nop
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	20003480 	.word	0x20003480

08007450 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8007450:	b480      	push	{r7}
 8007452:	af00      	add	r7, sp, #0
  /* Enable TIM1 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8007454:	4b06      	ldr	r3, [pc, #24]	; (8007470 <HAL_ResumeTick+0x20>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68da      	ldr	r2, [r3, #12]
 800745a:	4b05      	ldr	r3, [pc, #20]	; (8007470 <HAL_ResumeTick+0x20>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f042 0201 	orr.w	r2, r2, #1
 8007462:	60da      	str	r2, [r3, #12]
}
 8007464:	bf00      	nop
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	20003480 	.word	0x20003480

08007474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007474:	b480      	push	{r7}
 8007476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007478:	e7fe      	b.n	8007478 <NMI_Handler+0x4>

0800747a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800747a:	b480      	push	{r7}
 800747c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800747e:	e7fe      	b.n	800747e <HardFault_Handler+0x4>

08007480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007480:	b480      	push	{r7}
 8007482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007484:	e7fe      	b.n	8007484 <MemManage_Handler+0x4>

08007486 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007486:	b480      	push	{r7}
 8007488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800748a:	e7fe      	b.n	800748a <BusFault_Handler+0x4>

0800748c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800748c:	b480      	push	{r7}
 800748e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007490:	e7fe      	b.n	8007490 <UsageFault_Handler+0x4>

08007492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007492:	b480      	push	{r7}
 8007494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007496:	bf00      	nop
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 80074a4:	2002      	movs	r0, #2
 80074a6:	f001 fcdb 	bl	8008e60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80074aa:	bf00      	nop
 80074ac:	bd80      	pop	{r7, pc}

080074ae <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 80074b2:	2004      	movs	r0, #4
 80074b4:	f001 fcd4 	bl	8008e60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80074b8:	bf00      	nop
 80074ba:	bd80      	pop	{r7, pc}

080074bc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80074c0:	4802      	ldr	r0, [pc, #8]	; (80074cc <DMA1_Channel2_IRQHandler+0x10>)
 80074c2:	f001 f9ec 	bl	800889e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80074c6:	bf00      	nop
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	20000f14 	.word	0x20000f14

080074d0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80074d4:	4802      	ldr	r0, [pc, #8]	; (80074e0 <DMA1_Channel4_IRQHandler+0x10>)
 80074d6:	f001 f9e2 	bl	800889e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80074da:	bf00      	nop
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	20000c50 	.word	0x20000c50

080074e4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80074e8:	4802      	ldr	r0, [pc, #8]	; (80074f4 <DMA1_Channel5_IRQHandler+0x10>)
 80074ea:	f001 f9d8 	bl	800889e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80074ee:	bf00      	nop
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	20000c98 	.word	0x20000c98

080074f8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80074fc:	4802      	ldr	r0, [pc, #8]	; (8007508 <DMA1_Channel6_IRQHandler+0x10>)
 80074fe:	f001 f9ce 	bl	800889e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8007502:	bf00      	nop
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20000ad4 	.word	0x20000ad4

0800750c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007510:	4802      	ldr	r0, [pc, #8]	; (800751c <DMA1_Channel7_IRQHandler+0x10>)
 8007512:	f001 f9c4 	bl	800889e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8007516:	bf00      	nop
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	20000ecc 	.word	0x20000ecc

08007520 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_KEY_Pin);
 8007524:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007528:	f001 fc9a 	bl	8008e60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800752c:	bf00      	nop
 800752e:	bd80      	pop	{r7, pc}

08007530 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007534:	4802      	ldr	r0, [pc, #8]	; (8007540 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8007536:	f006 fe53 	bl	800e1e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800753a:	bf00      	nop
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	20003480 	.word	0x20003480

08007544 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007548:	4802      	ldr	r0, [pc, #8]	; (8007554 <TIM4_IRQHandler+0x10>)
 800754a:	f006 fe49 	bl	800e1e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800754e:	bf00      	nop
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	20000ce0 	.word	0x20000ce0

08007558 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800755c:	4802      	ldr	r0, [pc, #8]	; (8007568 <I2C1_EV_IRQHandler+0x10>)
 800755e:	f002 f849 	bl	80095f4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8007562:	bf00      	nop
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	20000a38 	.word	0x20000a38

0800756c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8007570:	4802      	ldr	r0, [pc, #8]	; (800757c <I2C1_ER_IRQHandler+0x10>)
 8007572:	f002 f859 	bl	8009628 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8007576:	bf00      	nop
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	20000a38 	.word	0x20000a38

08007580 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8007584:	4802      	ldr	r0, [pc, #8]	; (8007590 <SPI1_IRQHandler+0x10>)
 8007586:	f005 ffd9 	bl	800d53c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800758a:	bf00      	nop
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	20000b40 	.word	0x20000b40

08007594 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8007598:	4802      	ldr	r0, [pc, #8]	; (80075a4 <SPI2_IRQHandler+0x10>)
 800759a:	f005 ffcf 	bl	800d53c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800759e:	bf00      	nop
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	20000ba4 	.word	0x20000ba4

080075a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80075ac:	4802      	ldr	r0, [pc, #8]	; (80075b8 <USART2_IRQHandler+0x10>)
 80075ae:	f007 fb5b 	bl	800ec68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80075b2:	bf00      	nop
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	20000dc4 	.word	0x20000dc4

080075bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80075c0:	4802      	ldr	r0, [pc, #8]	; (80075cc <USART3_IRQHandler+0x10>)
 80075c2:	f007 fb51 	bl	800ec68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80075c6:	bf00      	nop
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	20000e48 	.word	0x20000e48

080075d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80075d4:	4802      	ldr	r0, [pc, #8]	; (80075e0 <TIM6_DAC_IRQHandler+0x10>)
 80075d6:	f006 fe03 	bl	800e1e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80075da:	bf00      	nop
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	20000d2c 	.word	0x20000d2c

080075e4 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80075e8:	4802      	ldr	r0, [pc, #8]	; (80075f4 <DMA2_Channel4_IRQHandler+0x10>)
 80075ea:	f001 f958 	bl	800889e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80075ee:	bf00      	nop
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	20000c08 	.word	0x20000c08

080075f8 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80075fc:	4802      	ldr	r0, [pc, #8]	; (8007608 <DMA2_Channel6_IRQHandler+0x10>)
 80075fe:	f001 f94e 	bl	800889e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8007602:	bf00      	nop
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	20000a8c 	.word	0x20000a8c

0800760c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800760c:	b480      	push	{r7}
 800760e:	af00      	add	r7, sp, #0
	return 1;
 8007610:	2301      	movs	r3, #1
}
 8007612:	4618      	mov	r0, r3
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <_kill>:

int _kill(int pid, int sig)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007626:	f00c fb15 	bl	8013c54 <__errno>
 800762a:	4603      	mov	r3, r0
 800762c:	2216      	movs	r2, #22
 800762e:	601a      	str	r2, [r3, #0]
	return -1;
 8007630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007634:	4618      	mov	r0, r3
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <_exit>:

void _exit (int status)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007644:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f7ff ffe7 	bl	800761c <_kill>
	while (1) {}		/* Make sure we hang here */
 800764e:	e7fe      	b.n	800764e <_exit+0x12>

08007650 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800765c:	2300      	movs	r3, #0
 800765e:	617b      	str	r3, [r7, #20]
 8007660:	e00a      	b.n	8007678 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007662:	f3af 8000 	nop.w
 8007666:	4601      	mov	r1, r0
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	1c5a      	adds	r2, r3, #1
 800766c:	60ba      	str	r2, [r7, #8]
 800766e:	b2ca      	uxtb	r2, r1
 8007670:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	3301      	adds	r3, #1
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	429a      	cmp	r2, r3
 800767e:	dbf0      	blt.n	8007662 <_read+0x12>
	}

return len;
 8007680:	687b      	ldr	r3, [r7, #4]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3718      	adds	r7, #24
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b086      	sub	sp, #24
 800768e:	af00      	add	r7, sp, #0
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	60b9      	str	r1, [r7, #8]
 8007694:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007696:	2300      	movs	r3, #0
 8007698:	617b      	str	r3, [r7, #20]
 800769a:	e009      	b.n	80076b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	60ba      	str	r2, [r7, #8]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	3301      	adds	r3, #1
 80076ae:	617b      	str	r3, [r7, #20]
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	dbf1      	blt.n	800769c <_write+0x12>
	}
	return len;
 80076b8:	687b      	ldr	r3, [r7, #4]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3718      	adds	r7, #24
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <_close>:

int _close(int file)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
	return -1;
 80076ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80076da:	b480      	push	{r7}
 80076dc:	b083      	sub	sp, #12
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80076ea:	605a      	str	r2, [r3, #4]
	return 0;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <_isatty>:

int _isatty(int file)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
	return 1;
 8007702:	2301      	movs	r3, #1
}
 8007704:	4618      	mov	r0, r3
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
	return 0;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
	...

0800772c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007734:	4a14      	ldr	r2, [pc, #80]	; (8007788 <_sbrk+0x5c>)
 8007736:	4b15      	ldr	r3, [pc, #84]	; (800778c <_sbrk+0x60>)
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007740:	4b13      	ldr	r3, [pc, #76]	; (8007790 <_sbrk+0x64>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d102      	bne.n	800774e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007748:	4b11      	ldr	r3, [pc, #68]	; (8007790 <_sbrk+0x64>)
 800774a:	4a12      	ldr	r2, [pc, #72]	; (8007794 <_sbrk+0x68>)
 800774c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800774e:	4b10      	ldr	r3, [pc, #64]	; (8007790 <_sbrk+0x64>)
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4413      	add	r3, r2
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	429a      	cmp	r2, r3
 800775a:	d207      	bcs.n	800776c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800775c:	f00c fa7a 	bl	8013c54 <__errno>
 8007760:	4603      	mov	r3, r0
 8007762:	220c      	movs	r2, #12
 8007764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800776a:	e009      	b.n	8007780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800776c:	4b08      	ldr	r3, [pc, #32]	; (8007790 <_sbrk+0x64>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007772:	4b07      	ldr	r3, [pc, #28]	; (8007790 <_sbrk+0x64>)
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4413      	add	r3, r2
 800777a:	4a05      	ldr	r2, [pc, #20]	; (8007790 <_sbrk+0x64>)
 800777c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800777e:	68fb      	ldr	r3, [r7, #12]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3718      	adds	r7, #24
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	20018000 	.word	0x20018000
 800778c:	00000c00 	.word	0x00000c00
 8007790:	200034cc 	.word	0x200034cc
 8007794:	20008428 	.word	0x20008428

08007798 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8007798:	b480      	push	{r7}
 800779a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800779c:	4b06      	ldr	r3, [pc, #24]	; (80077b8 <SystemInit+0x20>)
 800779e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a2:	4a05      	ldr	r2, [pc, #20]	; (80077b8 <SystemInit+0x20>)
 80077a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80077ac:	bf00      	nop
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	e000ed00 	.word	0xe000ed00

080077bc <W25_SELECT>:

extern void Report(const uint8_t addTime, const char *fmt, ...);

//------------------------------------------------------------------------------------------

void W25_SELECT()   { W25_SEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET);//set to 0
 80077bc:	b580      	push	{r7, lr}
 80077be:	af00      	add	r7, sp, #0
 80077c0:	2200      	movs	r2, #0
 80077c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80077c6:	4802      	ldr	r0, [pc, #8]	; (80077d0 <W25_SELECT+0x14>)
 80077c8:	f001 fb18 	bl	8008dfc <HAL_GPIO_WritePin>
 80077cc:	bf00      	nop
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	48000400 	.word	0x48000400

080077d4 <W25_UNSELECT>:
void W25_UNSELECT() { W25_UNSEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET);//set to 1
 80077d4:	b580      	push	{r7, lr}
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	2201      	movs	r2, #1
 80077da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80077de:	4802      	ldr	r0, [pc, #8]	; (80077e8 <W25_UNSELECT+0x14>)
 80077e0:	f001 fb0c 	bl	8008dfc <HAL_GPIO_WritePin>
 80077e4:	bf00      	nop
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	48000400 	.word	0x48000400

080077ec <W25qxx_Spi>:
//void W25_SELECT()   { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET); }//set to 0
//void W25_UNSELECT() { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET); }//set to 1

//------------------------------------------------------------------------------------------
uint8_t W25qxx_Spi(uint8_t Data)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	4603      	mov	r3, r0
 80077f4:	71fb      	strb	r3, [r7, #7]
uint8_t ret;

    if (HAL_SPI_TransmitReceive(portFLASH, &Data, &ret, 1, min_wait_ms) != HAL_OK) devError |= devSPI;
 80077f6:	4b0c      	ldr	r3, [pc, #48]	; (8007828 <W25qxx_Spi+0x3c>)
 80077f8:	6818      	ldr	r0, [r3, #0]
 80077fa:	23fa      	movs	r3, #250	; 0xfa
 80077fc:	f107 020f 	add.w	r2, r7, #15
 8007800:	1df9      	adds	r1, r7, #7
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	2301      	movs	r3, #1
 8007806:	f005 fa06 	bl	800cc16 <HAL_SPI_TransmitReceive>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d006      	beq.n	800781e <W25qxx_Spi+0x32>
 8007810:	4b06      	ldr	r3, [pc, #24]	; (800782c <W25qxx_Spi+0x40>)
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007818:	b29a      	uxth	r2, r3
 800781a:	4b04      	ldr	r3, [pc, #16]	; (800782c <W25qxx_Spi+0x40>)
 800781c:	801a      	strh	r2, [r3, #0]

    return ret;
 800781e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	20000010 	.word	0x20000010
 800782c:	20001bf4 	.word	0x20001bf4

08007830 <W25qxx_Reset>:
//------------------------------------------------------------------------------------------
void W25qxx_Reset(void)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
	W25qxx_Delay(100);
 8007834:	2064      	movs	r0, #100	; 0x64
 8007836:	f000 fd95 	bl	8008364 <HAL_Delay>

	W25_SELECT();
 800783a:	f7ff ffbf 	bl	80077bc <W25_SELECT>
		W25qxx_Spi(EN_RESET);
 800783e:	2066      	movs	r0, #102	; 0x66
 8007840:	f7ff ffd4 	bl	80077ec <W25qxx_Spi>
		W25qxx_Spi(CHIP_RESET);
 8007844:	2099      	movs	r0, #153	; 0x99
 8007846:	f7ff ffd1 	bl	80077ec <W25qxx_Spi>
	W25_UNSELECT();
 800784a:	f7ff ffc3 	bl	80077d4 <W25_UNSELECT>

	W25qxx_Delay(100);
 800784e:	2064      	movs	r0, #100	; 0x64
 8007850:	f000 fd88 	bl	8008364 <HAL_Delay>
}
 8007854:	bf00      	nop
 8007856:	bd80      	pop	{r7, pc}

08007858 <W25qxx_ReadID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_ReadID(void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
uint32_t Temp[3] = {0};
 800785e:	1d3b      	adds	r3, r7, #4
 8007860:	2200      	movs	r2, #0
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	605a      	str	r2, [r3, #4]
 8007866:	609a      	str	r2, [r3, #8]

    W25_SELECT();//set to 0
 8007868:	f7ff ffa8 	bl	80077bc <W25_SELECT>

    W25qxx_Spi(JEDEC_ID);
 800786c:	209f      	movs	r0, #159	; 0x9f
 800786e:	f7ff ffbd 	bl	80077ec <W25qxx_Spi>
    Temp[0] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8007872:	20a5      	movs	r0, #165	; 0xa5
 8007874:	f7ff ffba 	bl	80077ec <W25qxx_Spi>
 8007878:	4603      	mov	r3, r0
 800787a:	607b      	str	r3, [r7, #4]
    Temp[1] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800787c:	20a5      	movs	r0, #165	; 0xa5
 800787e:	f7ff ffb5 	bl	80077ec <W25qxx_Spi>
 8007882:	4603      	mov	r3, r0
 8007884:	60bb      	str	r3, [r7, #8]
    Temp[2] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8007886:	20a5      	movs	r0, #165	; 0xa5
 8007888:	f7ff ffb0 	bl	80077ec <W25qxx_Spi>
 800788c:	4603      	mov	r3, r0
 800788e:	60fb      	str	r3, [r7, #12]

    W25_UNSELECT();//set to 1
 8007890:	f7ff ffa0 	bl	80077d4 <W25_UNSELECT>

    return ((Temp[0] << 16) | (Temp[1] << 8) | Temp[2]);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	041a      	lsls	r2, r3, #16
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	021b      	lsls	r3, r3, #8
 800789c:	431a      	orrs	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	4313      	orrs	r3, r2
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
	...

080078ac <W25qxx_ReadUniqID>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadUniqID(void)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
	uint8_t dat[] = {READ_UID, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE};
 80078b2:	4a18      	ldr	r2, [pc, #96]	; (8007914 <W25qxx_ReadUniqID+0x68>)
 80078b4:	463b      	mov	r3, r7
 80078b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80078ba:	6018      	str	r0, [r3, #0]
 80078bc:	3304      	adds	r3, #4
 80078be:	7019      	strb	r1, [r3, #0]
    W25_SELECT();
 80078c0:	f7ff ff7c 	bl	80077bc <W25_SELECT>

    //W25qxx_Spi(READ_UID);
    //for (uint8_t i = 0; i < 4; i++) W25qxx_Spi(W25QXX_DUMMY_BYTE);
    //for (uint8_t i = 0; i < 8; i++) w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
    if (HAL_SPI_Transmit(portFLASH, dat, sizeof(dat), min_wait_ms) != HAL_OK) devError |= devSPI;
 80078c4:	4b14      	ldr	r3, [pc, #80]	; (8007918 <W25qxx_ReadUniqID+0x6c>)
 80078c6:	6818      	ldr	r0, [r3, #0]
 80078c8:	23fa      	movs	r3, #250	; 0xfa
 80078ca:	4639      	mov	r1, r7
 80078cc:	2205      	movs	r2, #5
 80078ce:	f004 ff04 	bl	800c6da <HAL_SPI_Transmit>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d006      	beq.n	80078e6 <W25qxx_ReadUniqID+0x3a>
 80078d8:	4b10      	ldr	r3, [pc, #64]	; (800791c <W25qxx_ReadUniqID+0x70>)
 80078da:	881b      	ldrh	r3, [r3, #0]
 80078dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	4b0e      	ldr	r3, [pc, #56]	; (800791c <W25qxx_ReadUniqID+0x70>)
 80078e4:	801a      	strh	r2, [r3, #0]
    if (HAL_SPI_Receive(portFLASH, w25qxx.UniqID, 8, min_wait_ms) != HAL_OK) devError |= devSPI;
 80078e6:	4b0c      	ldr	r3, [pc, #48]	; (8007918 <W25qxx_ReadUniqID+0x6c>)
 80078e8:	6818      	ldr	r0, [r3, #0]
 80078ea:	23fa      	movs	r3, #250	; 0xfa
 80078ec:	2208      	movs	r2, #8
 80078ee:	490c      	ldr	r1, [pc, #48]	; (8007920 <W25qxx_ReadUniqID+0x74>)
 80078f0:	f005 f861 	bl	800c9b6 <HAL_SPI_Receive>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d006      	beq.n	8007908 <W25qxx_ReadUniqID+0x5c>
 80078fa:	4b08      	ldr	r3, [pc, #32]	; (800791c <W25qxx_ReadUniqID+0x70>)
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007902:	b29a      	uxth	r2, r3
 8007904:	4b05      	ldr	r3, [pc, #20]	; (800791c <W25qxx_ReadUniqID+0x70>)
 8007906:	801a      	strh	r2, [r3, #0]

    W25_UNSELECT();
 8007908:	f7ff ff64 	bl	80077d4 <W25_UNSELECT>
}
 800790c:	bf00      	nop
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	080190d0 	.word	0x080190d0
 8007918:	20000010 	.word	0x20000010
 800791c:	20001bf4 	.word	0x20001bf4
 8007920:	200034d1 	.word	0x200034d1

08007924 <W25qxx_WriteEnable>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteEnable(void)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	af00      	add	r7, sp, #0
    W25_SELECT();
 8007928:	f7ff ff48 	bl	80077bc <W25_SELECT>

    W25qxx_Spi(WRITE_ENABLE);
 800792c:	2006      	movs	r0, #6
 800792e:	f7ff ff5d 	bl	80077ec <W25qxx_Spi>

    W25_UNSELECT();
 8007932:	f7ff ff4f 	bl	80077d4 <W25_UNSELECT>

    W25qxx_Delay(1);
 8007936:	2001      	movs	r0, #1
 8007938:	f000 fd14 	bl	8008364 <HAL_Delay>
}
 800793c:	bf00      	nop
 800793e:	bd80      	pop	{r7, pc}

08007940 <W25qxx_ReadStatusRegister>:

    W25qxx_Delay(1);
}
//------------------------------------------------------------------------------------------
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusReg)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	71fb      	strb	r3, [r7, #7]
uint8_t status = 0;
 800794a:	2300      	movs	r3, #0
 800794c:	73fb      	strb	r3, [r7, #15]

    W25_SELECT();
 800794e:	f7ff ff35 	bl	80077bc <W25_SELECT>

    switch (SelectStatusReg) {
 8007952:	79fb      	ldrb	r3, [r7, #7]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d002      	beq.n	800795e <W25qxx_ReadStatusRegister+0x1e>
 8007958:	2b02      	cmp	r3, #2
 800795a:	d00d      	beq.n	8007978 <W25qxx_ReadStatusRegister+0x38>
 800795c:	e019      	b.n	8007992 <W25qxx_ReadStatusRegister+0x52>
        case 1:
            W25qxx_Spi(READ_STAT_REG1);
 800795e:	2005      	movs	r0, #5
 8007960:	f7ff ff44 	bl	80077ec <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8007964:	20a5      	movs	r0, #165	; 0xa5
 8007966:	f7ff ff41 	bl	80077ec <W25qxx_Spi>
 800796a:	4603      	mov	r3, r0
 800796c:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister1 = status;
 800796e:	4a12      	ldr	r2, [pc, #72]	; (80079b8 <W25qxx_ReadStatusRegister+0x78>)
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
        break;
 8007976:	e018      	b.n	80079aa <W25qxx_ReadStatusRegister+0x6a>
        case 2:
            W25qxx_Spi(READ_STAT_REG2);
 8007978:	2035      	movs	r0, #53	; 0x35
 800797a:	f7ff ff37 	bl	80077ec <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800797e:	20a5      	movs	r0, #165	; 0xa5
 8007980:	f7ff ff34 	bl	80077ec <W25qxx_Spi>
 8007984:	4603      	mov	r3, r0
 8007986:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister2 = status;
 8007988:	4a0b      	ldr	r2, [pc, #44]	; (80079b8 <W25qxx_ReadStatusRegister+0x78>)
 800798a:	7bfb      	ldrb	r3, [r7, #15]
 800798c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        break;
 8007990:	e00b      	b.n	80079aa <W25qxx_ReadStatusRegister+0x6a>
        default : {
            W25qxx_Spi(READ_STAT_REG3);
 8007992:	2015      	movs	r0, #21
 8007994:	f7ff ff2a 	bl	80077ec <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8007998:	20a5      	movs	r0, #165	; 0xa5
 800799a:	f7ff ff27 	bl	80077ec <W25qxx_Spi>
 800799e:	4603      	mov	r3, r0
 80079a0:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister3 = status;
 80079a2:	4a05      	ldr	r2, [pc, #20]	; (80079b8 <W25qxx_ReadStatusRegister+0x78>)
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
 80079a6:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        }
    }

    W25_UNSELECT();
 80079aa:	f7ff ff13 	bl	80077d4 <W25_UNSELECT>

    return status;
 80079ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	200034d0 	.word	0x200034d0

080079bc <W25qxx_WaitForWriteEnd>:

    W25_UNSELECT();
}
//------------------------------------------------------------------------------------------
void W25qxx_WaitForWriteEnd(void)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	af00      	add	r7, sp, #0
    W25qxx_Delay(1);
 80079c0:	2001      	movs	r0, #1
 80079c2:	f000 fccf 	bl	8008364 <HAL_Delay>

    W25_SELECT();
 80079c6:	f7ff fef9 	bl	80077bc <W25_SELECT>

    W25qxx_Spi(READ_STAT_REG1);
 80079ca:	2005      	movs	r0, #5
 80079cc:	f7ff ff0e 	bl	80077ec <W25qxx_Spi>
    do
    {
        w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80079d0:	20a5      	movs	r0, #165	; 0xa5
 80079d2:	f7ff ff0b 	bl	80077ec <W25qxx_Spi>
 80079d6:	4603      	mov	r3, r0
 80079d8:	461a      	mov	r2, r3
 80079da:	4b08      	ldr	r3, [pc, #32]	; (80079fc <W25qxx_WaitForWriteEnd+0x40>)
 80079dc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        W25qxx_Delay(1);
 80079e0:	2001      	movs	r0, #1
 80079e2:	f000 fcbf 	bl	8008364 <HAL_Delay>
    } while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80079e6:	4b05      	ldr	r3, [pc, #20]	; (80079fc <W25qxx_WaitForWriteEnd+0x40>)
 80079e8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80079ec:	f003 0301 	and.w	r3, r3, #1
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1ed      	bne.n	80079d0 <W25qxx_WaitForWriteEnd+0x14>

    W25_UNSELECT();
 80079f4:	f7ff feee 	bl	80077d4 <W25_UNSELECT>
}
 80079f8:	bf00      	nop
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	200034d0 	.word	0x200034d0

08007a00 <W25qxx_Init>:
//------------------------------------------------------------------------------------------
bool W25qxx_Init(void)
{
 8007a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a02:	b089      	sub	sp, #36	; 0x24
 8007a04:	af06      	add	r7, sp, #24

	W25qxx_Reset();
 8007a06:	f7ff ff13 	bl	8007830 <W25qxx_Reset>


    w25qxx.Lock = 1;
 8007a0a:	4b54      	ldr	r3, [pc, #336]	; (8007b5c <W25qxx_Init+0x15c>)
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    bool ret = false;
 8007a12:	2300      	movs	r3, #0
 8007a14:	71fb      	strb	r3, [r7, #7]

    W25_UNSELECT();
 8007a16:	f7ff fedd 	bl	80077d4 <W25_UNSELECT>

    uint32_t id = W25qxx_ReadID() & 0xffff;
 8007a1a:	f7ff ff1d 	bl	8007858 <W25qxx_ReadID>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	603b      	str	r3, [r7, #0]
//#ifdef W25QXX_DEBUG
    Report(1, "w25qxx Init Begin... Chip ID:0x%X\r\n", id);
 8007a24:	683a      	ldr	r2, [r7, #0]
 8007a26:	494e      	ldr	r1, [pc, #312]	; (8007b60 <W25qxx_Init+0x160>)
 8007a28:	2001      	movs	r0, #1
 8007a2a:	f7fb fbc7 	bl	80031bc <Report>
//#endif
    id &= 0xff;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	603b      	str	r3, [r7, #0]
    id -= 0x10;//0x4010;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	3b10      	subs	r3, #16
 8007a38:	603b      	str	r3, [r7, #0]
    if (id > 0x0a) id = 0;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b0a      	cmp	r3, #10
 8007a3e:	d901      	bls.n	8007a44 <W25qxx_Init+0x44>
 8007a40:	2300      	movs	r3, #0
 8007a42:	603b      	str	r3, [r7, #0]
    w25qxx.ID         = id;              //W25Q10..W25Q512
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	4b44      	ldr	r3, [pc, #272]	; (8007b5c <W25qxx_Init+0x15c>)
 8007a4a:	701a      	strb	r2, [r3, #0]
    w25qxx.BlockCount = all_chipBLK[id]; //0..1024;
 8007a4c:	4a45      	ldr	r2, [pc, #276]	; (8007b64 <W25qxx_Init+0x164>)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a54:	4a41      	ldr	r2, [pc, #260]	; (8007b5c <W25qxx_Init+0x15c>)
 8007a56:	f8c2 301b 	str.w	r3, [r2, #27]
//#ifdef W25QXX_DEBUG
    Report(1, "Chip %s\r\n", all_chipID[id]);
 8007a5a:	4a43      	ldr	r2, [pc, #268]	; (8007b68 <W25qxx_Init+0x168>)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a62:	461a      	mov	r2, r3
 8007a64:	4941      	ldr	r1, [pc, #260]	; (8007b6c <W25qxx_Init+0x16c>)
 8007a66:	2001      	movs	r0, #1
 8007a68:	f7fb fba8 	bl	80031bc <Report>
//#endif

    if (id) {
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d06b      	beq.n	8007b4a <W25qxx_Init+0x14a>
    	w25qxx.PageSize = 256;
 8007a72:	4b3a      	ldr	r3, [pc, #232]	; (8007b5c <W25qxx_Init+0x15c>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	725a      	strb	r2, [r3, #9]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f042 0201 	orr.w	r2, r2, #1
 8007a7e:	729a      	strb	r2, [r3, #10]
    	w25qxx.SectorSize = 0x1000;
 8007a80:	4b36      	ldr	r3, [pc, #216]	; (8007b5c <W25qxx_Init+0x15c>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	73da      	strb	r2, [r3, #15]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f042 0210 	orr.w	r2, r2, #16
 8007a8c:	741a      	strb	r2, [r3, #16]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	745a      	strb	r2, [r3, #17]
 8007a92:	2200      	movs	r2, #0
 8007a94:	749a      	strb	r2, [r3, #18]
    	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8007a96:	4b31      	ldr	r3, [pc, #196]	; (8007b5c <W25qxx_Init+0x15c>)
 8007a98:	f8d3 301b 	ldr.w	r3, [r3, #27]
 8007a9c:	011b      	lsls	r3, r3, #4
 8007a9e:	4a2f      	ldr	r2, [pc, #188]	; (8007b5c <W25qxx_Init+0x15c>)
 8007aa0:	f8c2 3013 	str.w	r3, [r2, #19]
    	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8007aa4:	4b2d      	ldr	r3, [pc, #180]	; (8007b5c <W25qxx_Init+0x15c>)
 8007aa6:	f8d3 3013 	ldr.w	r3, [r3, #19]
 8007aaa:	4a2c      	ldr	r2, [pc, #176]	; (8007b5c <W25qxx_Init+0x15c>)
 8007aac:	f8d2 200f 	ldr.w	r2, [r2, #15]
 8007ab0:	fb02 f303 	mul.w	r3, r2, r3
 8007ab4:	4a29      	ldr	r2, [pc, #164]	; (8007b5c <W25qxx_Init+0x15c>)
 8007ab6:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8007aba:	b292      	uxth	r2, r2
 8007abc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ac0:	4a26      	ldr	r2, [pc, #152]	; (8007b5c <W25qxx_Init+0x15c>)
 8007ac2:	f8c2 300b 	str.w	r3, [r2, #11]
    	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8007ac6:	4b25      	ldr	r3, [pc, #148]	; (8007b5c <W25qxx_Init+0x15c>)
 8007ac8:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007acc:	011b      	lsls	r3, r3, #4
 8007ace:	4a23      	ldr	r2, [pc, #140]	; (8007b5c <W25qxx_Init+0x15c>)
 8007ad0:	f8c2 3017 	str.w	r3, [r2, #23]
    	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8007ad4:	4b21      	ldr	r3, [pc, #132]	; (8007b5c <W25qxx_Init+0x15c>)
 8007ad6:	f8d3 3013 	ldr.w	r3, [r3, #19]
 8007ada:	4a20      	ldr	r2, [pc, #128]	; (8007b5c <W25qxx_Init+0x15c>)
 8007adc:	f8d2 200f 	ldr.w	r2, [r2, #15]
 8007ae0:	fb02 f303 	mul.w	r3, r2, r3
 8007ae4:	0a9b      	lsrs	r3, r3, #10
 8007ae6:	4a1d      	ldr	r2, [pc, #116]	; (8007b5c <W25qxx_Init+0x15c>)
 8007ae8:	f8c2 301f 	str.w	r3, [r2, #31]
    	W25qxx_ReadUniqID();
 8007aec:	f7ff fede 	bl	80078ac <W25qxx_ReadUniqID>
    	W25qxx_ReadStatusRegister(1);
 8007af0:	2001      	movs	r0, #1
 8007af2:	f7ff ff25 	bl	8007940 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(2);
 8007af6:	2002      	movs	r0, #2
 8007af8:	f7ff ff22 	bl	8007940 <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(3);
 8007afc:	2003      	movs	r0, #3
 8007afe:	f7ff ff1f 	bl	8007940 <W25qxx_ReadStatusRegister>
    	ret = true;
 8007b02:	2301      	movs	r3, #1
 8007b04:	71fb      	strb	r3, [r7, #7]
                 "\tSector Size:\t%u bytes\r\n"
                 "\tSector Count:\t%u\r\n"
                 "\tBlock Size:\t%u bytes\r\n"
                 "\tBlock Count:\t%u\r\n"
                 "\tCapacity:\t%u KBytes\r\n",
                 w25qxx.PageSize,
 8007b06:	4b15      	ldr	r3, [pc, #84]	; (8007b5c <W25qxx_Init+0x15c>)
 8007b08:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007b0c:	b29b      	uxth	r3, r3
    	Report(0,"\tPage Size:\t%u bytes\r\n"
 8007b0e:	461e      	mov	r6, r3
 8007b10:	4b12      	ldr	r3, [pc, #72]	; (8007b5c <W25qxx_Init+0x15c>)
 8007b12:	f8d3 500b 	ldr.w	r5, [r3, #11]
 8007b16:	4b11      	ldr	r3, [pc, #68]	; (8007b5c <W25qxx_Init+0x15c>)
 8007b18:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007b1c:	4a0f      	ldr	r2, [pc, #60]	; (8007b5c <W25qxx_Init+0x15c>)
 8007b1e:	f8d2 2013 	ldr.w	r2, [r2, #19]
 8007b22:	490e      	ldr	r1, [pc, #56]	; (8007b5c <W25qxx_Init+0x15c>)
 8007b24:	f8d1 1017 	ldr.w	r1, [r1, #23]
 8007b28:	480c      	ldr	r0, [pc, #48]	; (8007b5c <W25qxx_Init+0x15c>)
 8007b2a:	f8d0 001b 	ldr.w	r0, [r0, #27]
 8007b2e:	4c0b      	ldr	r4, [pc, #44]	; (8007b5c <W25qxx_Init+0x15c>)
 8007b30:	f8d4 401f 	ldr.w	r4, [r4, #31]
 8007b34:	9404      	str	r4, [sp, #16]
 8007b36:	9003      	str	r0, [sp, #12]
 8007b38:	9102      	str	r1, [sp, #8]
 8007b3a:	9201      	str	r2, [sp, #4]
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	462b      	mov	r3, r5
 8007b40:	4632      	mov	r2, r6
 8007b42:	490b      	ldr	r1, [pc, #44]	; (8007b70 <W25qxx_Init+0x170>)
 8007b44:	2000      	movs	r0, #0
 8007b46:	f7fb fb39 	bl	80031bc <Report>
                 w25qxx.BlockCount,
                 w25qxx.CapacityInKiloByte);
//#endif
    }

    w25qxx.Lock = 0;
 8007b4a:	4b04      	ldr	r3, [pc, #16]	; (8007b5c <W25qxx_Init+0x15c>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return ret;
 8007b52:	79fb      	ldrb	r3, [r7, #7]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b5c:	200034d0 	.word	0x200034d0
 8007b60:	080190d8 	.word	0x080190d8
 8007b64:	0801a1dc 	.word	0x0801a1dc
 8007b68:	200001e4 	.word	0x200001e4
 8007b6c:	080190fc 	.word	0x080190fc
 8007b70:	08019108 	.word	0x08019108

08007b74 <W25qxx_getChipID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_getChipID()
{
 8007b74:	b480      	push	{r7}
 8007b76:	af00      	add	r7, sp, #0
	return (uint32_t)w25qxx.ID;
 8007b78:	4b03      	ldr	r3, [pc, #12]	; (8007b88 <W25qxx_getChipID+0x14>)
 8007b7a:	781b      	ldrb	r3, [r3, #0]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	200034d0 	.word	0x200034d0

08007b8c <W25qxx_getSectorCount>:
uint32_t W25qxx_getSectorCount()
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	af00      	add	r7, sp, #0
	return w25qxx.SectorCount;
 8007b90:	4b03      	ldr	r3, [pc, #12]	; (8007ba0 <W25qxx_getSectorCount+0x14>)
 8007b92:	f8d3 3013 	ldr.w	r3, [r3, #19]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	200034d0 	.word	0x200034d0

08007ba4 <W25qxx_getSectorSize>:
uint32_t W25qxx_getSectorSize()
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	af00      	add	r7, sp, #0
	return w25qxx.SectorSize;
 8007ba8:	4b03      	ldr	r3, [pc, #12]	; (8007bb8 <W25qxx_getSectorSize+0x14>)
 8007baa:	f8d3 300f 	ldr.w	r3, [r3, #15]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr
 8007bb8:	200034d0 	.word	0x200034d0

08007bbc <W25qxx_getPageSize>:
uint32_t W25qxx_getPageCount()
{
	return w25qxx.PageCount;
}
uint32_t W25qxx_getPageSize()
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	af00      	add	r7, sp, #0
	return w25qxx.PageSize;
 8007bc0:	4b04      	ldr	r3, [pc, #16]	; (8007bd4 <W25qxx_getPageSize+0x18>)
 8007bc2:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007bc6:	b29b      	uxth	r3, r3
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	200034d0 	.word	0x200034d0

08007bd8 <W25qxx_EraseSector>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8007be0:	e002      	b.n	8007be8 <W25qxx_EraseSector+0x10>
 8007be2:	2001      	movs	r0, #1
 8007be4:	f000 fbbe 	bl	8008364 <HAL_Delay>
 8007be8:	4b1c      	ldr	r3, [pc, #112]	; (8007c5c <W25qxx_EraseSector+0x84>)
 8007bea:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1f7      	bne.n	8007be2 <W25qxx_EraseSector+0xa>

    w25qxx.Lock = 1;
 8007bf2:	4b1a      	ldr	r3, [pc, #104]	; (8007c5c <W25qxx_EraseSector+0x84>)
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#ifdef W25QXX_DEBUG
    uint32_t StartTime = HAL_GetTick();
    Report(1, "%u Begin...", SectorAddr);
#endif

    W25qxx_WaitForWriteEnd();
 8007bfa:	f7ff fedf 	bl	80079bc <W25qxx_WaitForWriteEnd>
    SectorAddr = SectorAddr * w25qxx.SectorSize;
 8007bfe:	4b17      	ldr	r3, [pc, #92]	; (8007c5c <W25qxx_EraseSector+0x84>)
 8007c00:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	fb02 f303 	mul.w	r3, r2, r3
 8007c0a:	607b      	str	r3, [r7, #4]
    W25qxx_WriteEnable();
 8007c0c:	f7ff fe8a 	bl	8007924 <W25qxx_WriteEnable>

    W25_SELECT();
 8007c10:	f7ff fdd4 	bl	80077bc <W25_SELECT>
    W25qxx_Spi(SECTOR_ERASE);
 8007c14:	2020      	movs	r0, #32
 8007c16:	f7ff fde9 	bl	80077ec <W25qxx_Spi>
    //if (w25qxx.ID >= W25Q256) W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
    W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	0c1b      	lsrs	r3, r3, #16
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7ff fde3 	bl	80077ec <W25qxx_Spi>
    W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	0a1b      	lsrs	r3, r3, #8
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7ff fddd 	bl	80077ec <W25qxx_Spi>
    W25qxx_Spi(SectorAddr & 0xFF);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7ff fdd8 	bl	80077ec <W25qxx_Spi>
    W25_UNSELECT();
 8007c3c:	f7ff fdca 	bl	80077d4 <W25_UNSELECT>

    W25qxx_WaitForWriteEnd();
 8007c40:	f7ff febc 	bl	80079bc <W25qxx_WaitForWriteEnd>

#ifdef W25QXX_DEBUG
    uint32_t dur = HAL_GetTick() - StartTime;
    Report(0, " done after %u ms (%u sec)!\r\n", dur, dur / 1000);
#endif
    W25qxx_Delay(1);
 8007c44:	2001      	movs	r0, #1
 8007c46:	f000 fb8d 	bl	8008364 <HAL_Delay>

    w25qxx.Lock = 0;
 8007c4a:	4b04      	ldr	r3, [pc, #16]	; (8007c5c <W25qxx_EraseSector+0x84>)
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8007c52:	bf00      	nop
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	200034d0 	.word	0x200034d0

08007c60 <W25qxx_SectorToPage>:
{
    return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//------------------------------------------------------------------------------------------
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
    return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8007c68:	4b08      	ldr	r3, [pc, #32]	; (8007c8c <W25qxx_SectorToPage+0x2c>)
 8007c6a:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	fb02 f303 	mul.w	r3, r2, r3
 8007c74:	4a05      	ldr	r2, [pc, #20]	; (8007c8c <W25qxx_SectorToPage+0x2c>)
 8007c76:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8007c7a:	b292      	uxth	r2, r2
 8007c7c:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	200034d0 	.word	0x200034d0

08007c90 <W25qxx_IsEmptySector>:

    return false;
}
//------------------------------------------------------------------------------------------
bool W25qxx_IsEmptySector(uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToCheck_up_to_SectorSize)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b090      	sub	sp, #64	; 0x40
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8007c9c:	e002      	b.n	8007ca4 <W25qxx_IsEmptySector+0x14>
 8007c9e:	2001      	movs	r0, #1
 8007ca0:	f000 fb60 	bl	8008364 <HAL_Delay>
 8007ca4:	4b59      	ldr	r3, [pc, #356]	; (8007e0c <W25qxx_IsEmptySector+0x17c>)
 8007ca6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1f7      	bne.n	8007c9e <W25qxx_IsEmptySector+0xe>

    w25qxx.Lock = 1;
 8007cae:	4b57      	ldr	r3, [pc, #348]	; (8007e0c <W25qxx_IsEmptySector+0x17c>)
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( (NumByteToCheck_up_to_SectorSize > w25qxx.SectorSize) || (!NumByteToCheck_up_to_SectorSize) )
 8007cb6:	4b55      	ldr	r3, [pc, #340]	; (8007e0c <W25qxx_IsEmptySector+0x17c>)
 8007cb8:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d802      	bhi.n	8007cc8 <W25qxx_IsEmptySector+0x38>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d103      	bne.n	8007cd0 <W25qxx_IsEmptySector+0x40>
                NumByteToCheck_up_to_SectorSize = w25qxx.SectorSize;
 8007cc8:	4b50      	ldr	r3, [pc, #320]	; (8007e0c <W25qxx_IsEmptySector+0x17c>)
 8007cca:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007cce:	607b      	str	r3, [r7, #4]
    uint32_t StartTime = HAL_GetTick();
#endif

    uint8_t pBuffer[32];
    uint32_t i, WorkAddress;
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cd4:	e040      	b.n	8007d58 <W25qxx_IsEmptySector+0xc8>

    	W25_SELECT();
 8007cd6:	f7ff fd71 	bl	80077bc <W25_SELECT>
        WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 8007cda:	4b4c      	ldr	r3, [pc, #304]	; (8007e0c <W25qxx_IsEmptySector+0x17c>)
 8007cdc:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	fb02 f303 	mul.w	r3, r2, r3
 8007ce6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ce8:	4413      	add	r3, r2
 8007cea:	637b      	str	r3, [r7, #52]	; 0x34
        W25qxx_Spi(DATA_READ);//FAST_READ);
 8007cec:	2003      	movs	r0, #3
 8007cee:	f7ff fd7d 	bl	80077ec <W25qxx_Spi>
        //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
        W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8007cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf4:	0c1b      	lsrs	r3, r3, #16
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7ff fd77 	bl	80077ec <W25qxx_Spi>
        W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8007cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d00:	0a1b      	lsrs	r3, r3, #8
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7ff fd71 	bl	80077ec <W25qxx_Spi>
        W25qxx_Spi(WorkAddress & 0xFF);
 8007d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7ff fd6c 	bl	80077ec <W25qxx_Spi>
        //W25qxx_Spi(0);
        HAL_SPI_Receive(portFLASH, pBuffer, sizeof(pBuffer), min_wait_ms);
 8007d14:	4b3e      	ldr	r3, [pc, #248]	; (8007e10 <W25qxx_IsEmptySector+0x180>)
 8007d16:	6818      	ldr	r0, [r3, #0]
 8007d18:	23fa      	movs	r3, #250	; 0xfa
 8007d1a:	f107 0114 	add.w	r1, r7, #20
 8007d1e:	2220      	movs	r2, #32
 8007d20:	f004 fe49 	bl	800c9b6 <HAL_SPI_Receive>
        W25_UNSELECT();
 8007d24:	f7ff fd56 	bl	80077d4 <W25_UNSELECT>

        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 8007d28:	2300      	movs	r3, #0
 8007d2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d2e:	e00c      	b.n	8007d4a <W25qxx_IsEmptySector+0xba>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 8007d30:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007d34:	3340      	adds	r3, #64	; 0x40
 8007d36:	443b      	add	r3, r7
 8007d38:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8007d3c:	2bff      	cmp	r3, #255	; 0xff
 8007d3e:	d159      	bne.n	8007df4 <W25qxx_IsEmptySector+0x164>
        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 8007d40:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007d44:	3301      	adds	r3, #1
 8007d46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d4a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007d4e:	2b1f      	cmp	r3, #31
 8007d50:	d9ee      	bls.n	8007d30 <W25qxx_IsEmptySector+0xa0>
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 8007d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d54:	3320      	adds	r3, #32
 8007d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d58:	4b2c      	ldr	r3, [pc, #176]	; (8007e0c <W25qxx_IsEmptySector+0x17c>)
 8007d5a:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007d5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d3b8      	bcc.n	8007cd6 <W25qxx_IsEmptySector+0x46>
        }
    }
    if ((w25qxx.SectorSize + OffsetInByte) % sizeof(pBuffer) != 0) {
 8007d64:	4b29      	ldr	r3, [pc, #164]	; (8007e0c <W25qxx_IsEmptySector+0x17c>)
 8007d66:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f003 031f 	and.w	r3, r3, #31
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d038      	beq.n	8007de8 <W25qxx_IsEmptySector+0x158>
        i -= sizeof(pBuffer);
 8007d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d78:	3b20      	subs	r3, #32
 8007d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for( ; i < w25qxx.SectorSize; i++) {
 8007d7c:	e02e      	b.n	8007ddc <W25qxx_IsEmptySector+0x14c>

            W25_SELECT();
 8007d7e:	f7ff fd1d 	bl	80077bc <W25_SELECT>
            WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 8007d82:	4b22      	ldr	r3, [pc, #136]	; (8007e0c <W25qxx_IsEmptySector+0x17c>)
 8007d84:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	fb02 f303 	mul.w	r3, r2, r3
 8007d8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d90:	4413      	add	r3, r2
 8007d92:	637b      	str	r3, [r7, #52]	; 0x34
            W25qxx_Spi(DATA_READ);//FAST_READ);
 8007d94:	2003      	movs	r0, #3
 8007d96:	f7ff fd29 	bl	80077ec <W25qxx_Spi>
            //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
            W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8007d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9c:	0c1b      	lsrs	r3, r3, #16
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7ff fd23 	bl	80077ec <W25qxx_Spi>
            W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8007da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da8:	0a1b      	lsrs	r3, r3, #8
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7ff fd1d 	bl	80077ec <W25qxx_Spi>
            W25qxx_Spi(WorkAddress & 0xFF);
 8007db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7ff fd18 	bl	80077ec <W25qxx_Spi>
            //W25qxx_Spi(0);
            HAL_SPI_Receive(portFLASH, pBuffer, 1, min_wait_ms);
 8007dbc:	4b14      	ldr	r3, [pc, #80]	; (8007e10 <W25qxx_IsEmptySector+0x180>)
 8007dbe:	6818      	ldr	r0, [r3, #0]
 8007dc0:	23fa      	movs	r3, #250	; 0xfa
 8007dc2:	f107 0114 	add.w	r1, r7, #20
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f004 fdf5 	bl	800c9b6 <HAL_SPI_Receive>
            W25_UNSELECT();
 8007dcc:	f7ff fd02 	bl	80077d4 <W25_UNSELECT>

            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 8007dd0:	7d3b      	ldrb	r3, [r7, #20]
 8007dd2:	2bff      	cmp	r3, #255	; 0xff
 8007dd4:	d110      	bne.n	8007df8 <W25qxx_IsEmptySector+0x168>
        for( ; i < w25qxx.SectorSize; i++) {
 8007dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd8:	3301      	adds	r3, #1
 8007dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ddc:	4b0b      	ldr	r3, [pc, #44]	; (8007e0c <W25qxx_IsEmptySector+0x17c>)
 8007dde:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007de2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d3ca      	bcc.n	8007d7e <W25qxx_IsEmptySector+0xee>
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 8007de8:	4b08      	ldr	r3, [pc, #32]	; (8007e0c <W25qxx_IsEmptySector+0x17c>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return true;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e007      	b.n	8007e04 <W25qxx_IsEmptySector+0x174>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 8007df4:	bf00      	nop
 8007df6:	e000      	b.n	8007dfa <W25qxx_IsEmptySector+0x16a>
            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 8007df8:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Not Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 8007dfa:	4b04      	ldr	r3, [pc, #16]	; (8007e0c <W25qxx_IsEmptySector+0x17c>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return false;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3740      	adds	r7, #64	; 0x40
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	200034d0 	.word	0x200034d0
 8007e10:	20000010 	.word	0x20000010

08007e14 <W25qxx_WritePage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
 8007e20:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8007e22:	e002      	b.n	8007e2a <W25qxx_WritePage+0x16>
 8007e24:	2001      	movs	r0, #1
 8007e26:	f000 fa9d 	bl	8008364 <HAL_Delay>
 8007e2a:	4b4d      	ldr	r3, [pc, #308]	; (8007f60 <W25qxx_WritePage+0x14c>)
 8007e2c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1f7      	bne.n	8007e24 <W25qxx_WritePage+0x10>

    w25qxx.Lock = 1;
 8007e34:	4b4a      	ldr	r3, [pc, #296]	; (8007f60 <W25qxx_WritePage+0x14c>)
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( ((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || !NumByteToWrite_up_to_PageSize )
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4413      	add	r3, r2
 8007e42:	4a47      	ldr	r2, [pc, #284]	; (8007f60 <W25qxx_WritePage+0x14c>)
 8007e44:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8007e48:	b292      	uxth	r2, r2
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d802      	bhi.n	8007e54 <W25qxx_WritePage+0x40>
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d107      	bne.n	8007e64 <W25qxx_WritePage+0x50>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8007e54:	4b42      	ldr	r3, [pc, #264]	; (8007f60 <W25qxx_WritePage+0x14c>)
 8007e56:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	603b      	str	r3, [r7, #0]
    if ( (OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize )
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	4413      	add	r3, r2
 8007e6a:	4a3d      	ldr	r2, [pc, #244]	; (8007f60 <W25qxx_WritePage+0x14c>)
 8007e6c:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8007e70:	b292      	uxth	r2, r2
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d907      	bls.n	8007e86 <W25qxx_WritePage+0x72>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8007e76:	4b3a      	ldr	r3, [pc, #232]	; (8007f60 <W25qxx_WritePage+0x14c>)
 8007e78:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	461a      	mov	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	603b      	str	r3, [r7, #0]
    Report(1, "%s WritePage:0x%X(%u), Offset:%u ,Writes %u Bytes, begin...\r\n",
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
    uint32_t StartTime = HAL_GetTick();
#endif

    W25qxx_WaitForWriteEnd();
 8007e86:	f7ff fd99 	bl	80079bc <W25qxx_WaitForWriteEnd>
    W25qxx_WriteEnable();
 8007e8a:	f7ff fd4b 	bl	8007924 <W25qxx_WriteEnable>

    Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8007e8e:	4b34      	ldr	r3, [pc, #208]	; (8007f60 <W25qxx_WritePage+0x14c>)
 8007e90:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	461a      	mov	r2, r3
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	fb02 f303 	mul.w	r3, r2, r3
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi((Page_Address & 0xFF00) >> 8);
    W25qxx_Spi(Page_Address&0xFF);
    HAL_SPI_Transmit(portFLASH, pBuffer, NumByteToWrite_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();*/

    uint16_t lens = NumByteToWrite_up_to_PageSize + PAGE_HDR_BYTES;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	3304      	adds	r3, #4
 8007eaa:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = PAGE_PROG;
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	1c5a      	adds	r2, r3, #1
 8007eb4:	613a      	str	r2, [r7, #16]
 8007eb6:	4a2b      	ldr	r2, [pc, #172]	; (8007f64 <W25qxx_WritePage+0x150>)
 8007eb8:	2102      	movs	r1, #2
 8007eba:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	0c19      	lsrs	r1, r3, #16
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	1c5a      	adds	r2, r3, #1
 8007ec4:	613a      	str	r2, [r7, #16]
 8007ec6:	b2c9      	uxtb	r1, r1
 8007ec8:	4a26      	ldr	r2, [pc, #152]	; (8007f64 <W25qxx_WritePage+0x150>)
 8007eca:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	0a19      	lsrs	r1, r3, #8
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	1c5a      	adds	r2, r3, #1
 8007ed4:	613a      	str	r2, [r7, #16]
 8007ed6:	b2c9      	uxtb	r1, r1
 8007ed8:	4a22      	ldr	r2, [pc, #136]	; (8007f64 <W25qxx_WritePage+0x150>)
 8007eda:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	1c5a      	adds	r2, r3, #1
 8007ee0:	613a      	str	r2, [r7, #16]
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	b2d1      	uxtb	r1, r2
 8007ee6:	4a1f      	ldr	r2, [pc, #124]	; (8007f64 <W25qxx_WritePage+0x150>)
 8007ee8:	54d1      	strb	r1, [r2, r3]
    memcpy(&pageTmp[PAGE_HDR_BYTES], pBuffer, NumByteToWrite_up_to_PageSize);//w25qxx.PageSize);
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	68f9      	ldr	r1, [r7, #12]
 8007eee:	481e      	ldr	r0, [pc, #120]	; (8007f68 <W25qxx_WritePage+0x154>)
 8007ef0:	f00c f87f 	bl	8013ff2 <memcpy>

    spiRdy = 0;
 8007ef4:	4b1d      	ldr	r3, [pc, #116]	; (8007f6c <W25qxx_WritePage+0x158>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 8007efa:	4b1d      	ldr	r3, [pc, #116]	; (8007f70 <W25qxx_WritePage+0x15c>)
 8007efc:	2201      	movs	r2, #1
 8007efe:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 8007f00:	f7ff fc5c 	bl	80077bc <W25_SELECT>
    if (w25_withDMA) {
 8007f04:	4b1a      	ldr	r3, [pc, #104]	; (8007f70 <W25qxx_WritePage+0x15c>)
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d013      	beq.n	8007f34 <W25qxx_WritePage+0x120>
    	HAL_SPI_Transmit_DMA(portFLASH, pageTmp, lens);
 8007f0c:	4b19      	ldr	r3, [pc, #100]	; (8007f74 <W25qxx_WritePage+0x160>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	8afa      	ldrh	r2, [r7, #22]
 8007f12:	4914      	ldr	r1, [pc, #80]	; (8007f64 <W25qxx_WritePage+0x150>)
 8007f14:	4618      	mov	r0, r3
 8007f16:	f005 f891 	bl	800d03c <HAL_SPI_Transmit_DMA>
    	while (!spiRdy) {
 8007f1a:	e002      	b.n	8007f22 <W25qxx_WritePage+0x10e>
    		W25qxx_Delay(1);
 8007f1c:	2001      	movs	r0, #1
 8007f1e:	f000 fa21 	bl	8008364 <HAL_Delay>
    	while (!spiRdy) {
 8007f22:	4b12      	ldr	r3, [pc, #72]	; (8007f6c <W25qxx_WritePage+0x158>)
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d0f7      	beq.n	8007f1c <W25qxx_WritePage+0x108>
    	}
w25_withDMA = 0;
 8007f2c:	4b10      	ldr	r3, [pc, #64]	; (8007f70 <W25qxx_WritePage+0x15c>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	701a      	strb	r2, [r3, #0]
 8007f32:	e00d      	b.n	8007f50 <W25qxx_WritePage+0x13c>
    } else {
    	HAL_SPI_Transmit(portFLASH, pageTmp, lens, min_wait_ms);
 8007f34:	4b0f      	ldr	r3, [pc, #60]	; (8007f74 <W25qxx_WritePage+0x160>)
 8007f36:	6818      	ldr	r0, [r3, #0]
 8007f38:	23fa      	movs	r3, #250	; 0xfa
 8007f3a:	8afa      	ldrh	r2, [r7, #22]
 8007f3c:	4909      	ldr	r1, [pc, #36]	; (8007f64 <W25qxx_WritePage+0x150>)
 8007f3e:	f004 fbcc 	bl	800c6da <HAL_SPI_Transmit>

    	W25_UNSELECT();
 8007f42:	f7ff fc47 	bl	80077d4 <W25_UNSELECT>

    	W25qxx_WaitForWriteEnd();
 8007f46:	f7ff fd39 	bl	80079bc <W25qxx_WaitForWriteEnd>

    	spiRdy = 1;
 8007f4a:	4b08      	ldr	r3, [pc, #32]	; (8007f6c <W25qxx_WritePage+0x158>)
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	701a      	strb	r2, [r3, #0]
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif
    }

    w25qxx.Lock = 0;
 8007f50:	4b03      	ldr	r3, [pc, #12]	; (8007f60 <W25qxx_WritePage+0x14c>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8007f58:	bf00      	nop
 8007f5a:	3718      	adds	r7, #24
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	200034d0 	.word	0x200034d0
 8007f64:	200034f8 	.word	0x200034f8
 8007f68:	200034fc 	.word	0x200034fc
 8007f6c:	20000114 	.word	0x20000114
 8007f70:	200035fd 	.word	0x200035fd
 8007f74:	20000010 	.word	0x20000010

08007f78 <W25qxx_WriteSector>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b088      	sub	sp, #32
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
 8007f84:	603b      	str	r3, [r7, #0]
    if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToWrite_up_to_SectorSize)
 8007f86:	4b31      	ldr	r3, [pc, #196]	; (800804c <W25qxx_WriteSector+0xd4>)
 8007f88:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d802      	bhi.n	8007f98 <W25qxx_WriteSector+0x20>
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d103      	bne.n	8007fa0 <W25qxx_WriteSector+0x28>
                NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8007f98:	4b2c      	ldr	r3, [pc, #176]	; (800804c <W25qxx_WriteSector+0xd4>)
 8007f9a:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007f9e:	603b      	str	r3, [r7, #0]
    Report(1, "%s WriteSector:0x%X(%u), Offset:%u ,Write %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 8007fa0:	4b2a      	ldr	r3, [pc, #168]	; (800804c <W25qxx_WriteSector+0xd4>)
 8007fa2:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d24b      	bcs.n	8008044 <W25qxx_WriteSector+0xcc>
        return;
    }

    int32_t BytesToWrite;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	441a      	add	r2, r3
 8007fb2:	4b26      	ldr	r3, [pc, #152]	; (800804c <W25qxx_WriteSector+0xd4>)
 8007fb4:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d906      	bls.n	8007fca <W25qxx_WriteSector+0x52>
        BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8007fbc:	4b23      	ldr	r3, [pc, #140]	; (800804c <W25qxx_WriteSector+0xd4>)
 8007fbe:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	61fb      	str	r3, [r7, #28]
 8007fc8:	e001      	b.n	8007fce <W25qxx_WriteSector+0x56>
    else
        BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8007fce:	68b8      	ldr	r0, [r7, #8]
 8007fd0:	f7ff fe46 	bl	8007c60 <W25qxx_SectorToPage>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	4b1d      	ldr	r3, [pc, #116]	; (800804c <W25qxx_WriteSector+0xd4>)
 8007fd8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	4619      	mov	r1, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fe6:	4413      	add	r3, r2
 8007fe8:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 8007fea:	4b18      	ldr	r3, [pc, #96]	; (800804c <W25qxx_WriteSector+0xd4>)
 8007fec:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ffa:	fb01 f202 	mul.w	r2, r1, r2
 8007ffe:	1a9b      	subs	r3, r3, r2
 8008000:	61bb      	str	r3, [r7, #24]

    do
    {
        W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	69ba      	ldr	r2, [r7, #24]
 8008006:	6979      	ldr	r1, [r7, #20]
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f7ff ff03 	bl	8007e14 <W25qxx_WritePage>
        StartPage++;
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	3301      	adds	r3, #1
 8008012:	617b      	str	r3, [r7, #20]
        BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8008014:	4b0d      	ldr	r3, [pc, #52]	; (800804c <W25qxx_WriteSector+0xd4>)
 8008016:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800801a:	b29b      	uxth	r3, r3
 800801c:	461a      	mov	r2, r3
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	1a9a      	subs	r2, r3, r2
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	4413      	add	r3, r2
 8008026:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 8008028:	4b08      	ldr	r3, [pc, #32]	; (800804c <W25qxx_WriteSector+0xd4>)
 800802a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800802e:	b29b      	uxth	r3, r3
 8008030:	461a      	mov	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	4413      	add	r3, r2
 8008036:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 8008038:	2300      	movs	r3, #0
 800803a:	61bb      	str	r3, [r7, #24]
    } while(BytesToWrite > 0);
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	2b00      	cmp	r3, #0
 8008040:	dcdf      	bgt.n	8008002 <W25qxx_WriteSector+0x8a>
 8008042:	e000      	b.n	8008046 <W25qxx_WriteSector+0xce>
        return;
 8008044:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s Done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 8008046:	3720      	adds	r7, #32
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	200034d0 	.word	0x200034d0

08008050 <W25qxx_ReadPage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b088      	sub	sp, #32
 8008054:	af02      	add	r7, sp, #8
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
 800805c:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 800805e:	e002      	b.n	8008066 <W25qxx_ReadPage+0x16>
 8008060:	2001      	movs	r0, #1
 8008062:	f000 f97f 	bl	8008364 <HAL_Delay>
 8008066:	4b51      	ldr	r3, [pc, #324]	; (80081ac <W25qxx_ReadPage+0x15c>)
 8008068:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1f7      	bne.n	8008060 <W25qxx_ReadPage+0x10>

    w25qxx.Lock = 1;
 8008070:	4b4e      	ldr	r3, [pc, #312]	; (80081ac <W25qxx_ReadPage+0x15c>)
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || !NumByteToRead_up_to_PageSize)
 8008078:	4b4c      	ldr	r3, [pc, #304]	; (80081ac <W25qxx_ReadPage+0x15c>)
 800807a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800807e:	b29b      	uxth	r3, r3
 8008080:	461a      	mov	r2, r3
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	4293      	cmp	r3, r2
 8008086:	d802      	bhi.n	800808e <W25qxx_ReadPage+0x3e>
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d104      	bne.n	8008098 <W25qxx_ReadPage+0x48>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800808e:	4b47      	ldr	r3, [pc, #284]	; (80081ac <W25qxx_ReadPage+0x15c>)
 8008090:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8008094:	b29b      	uxth	r3, r3
 8008096:	603b      	str	r3, [r7, #0]
    if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	4413      	add	r3, r2
 800809e:	4a43      	ldr	r2, [pc, #268]	; (80081ac <W25qxx_ReadPage+0x15c>)
 80080a0:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 80080a4:	b292      	uxth	r2, r2
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d907      	bls.n	80080ba <W25qxx_ReadPage+0x6a>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80080aa:	4b40      	ldr	r3, [pc, #256]	; (80081ac <W25qxx_ReadPage+0x15c>)
 80080ac:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	461a      	mov	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	603b      	str	r3, [r7, #0]
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
    //W25qxx_Delay(100);
    uint32_t StartTime = HAL_GetTick();
#endif

    Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80080ba:	4b3c      	ldr	r3, [pc, #240]	; (80081ac <W25qxx_ReadPage+0x15c>)
 80080bc:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	461a      	mov	r2, r3
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	fb02 f303 	mul.w	r3, r2, r3
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	4413      	add	r3, r2
 80080ce:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi(Page_Address & 0xFF);
    //W25qxx_Spi(0);
    HAL_SPI_Receive(portFLASH, pBuffer, NumByteToRead_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();
    */
    memset(pageTmp, 0, sizeof(pageTmp));
 80080d0:	f240 1205 	movw	r2, #261	; 0x105
 80080d4:	2100      	movs	r1, #0
 80080d6:	4836      	ldr	r0, [pc, #216]	; (80081b0 <W25qxx_ReadPage+0x160>)
 80080d8:	f00b ff99 	bl	801400e <memset>
    uint16_t lens = NumByteToRead_up_to_PageSize + PAGE_HDR_BYTES;// + 1;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	b29b      	uxth	r3, r3
 80080e0:	3304      	adds	r3, #4
 80080e2:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 80080e4:	2300      	movs	r3, #0
 80080e6:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = DATA_READ;//FAST_READ;
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	1c5a      	adds	r2, r3, #1
 80080ec:	613a      	str	r2, [r7, #16]
 80080ee:	4a30      	ldr	r2, [pc, #192]	; (80081b0 <W25qxx_ReadPage+0x160>)
 80080f0:	2103      	movs	r1, #3
 80080f2:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	0c19      	lsrs	r1, r3, #16
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	1c5a      	adds	r2, r3, #1
 80080fc:	613a      	str	r2, [r7, #16]
 80080fe:	b2c9      	uxtb	r1, r1
 8008100:	4a2b      	ldr	r2, [pc, #172]	; (80081b0 <W25qxx_ReadPage+0x160>)
 8008102:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	0a19      	lsrs	r1, r3, #8
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	1c5a      	adds	r2, r3, #1
 800810c:	613a      	str	r2, [r7, #16]
 800810e:	b2c9      	uxtb	r1, r1
 8008110:	4a27      	ldr	r2, [pc, #156]	; (80081b0 <W25qxx_ReadPage+0x160>)
 8008112:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	1c5a      	adds	r2, r3, #1
 8008118:	613a      	str	r2, [r7, #16]
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	b2d1      	uxtb	r1, r2
 800811e:	4a24      	ldr	r2, [pc, #144]	; (80081b0 <W25qxx_ReadPage+0x160>)
 8008120:	54d1      	strb	r1, [r2, r3]
    //pageTmp[idx++] = 0;
    spiRdy = 0;
 8008122:	4b24      	ldr	r3, [pc, #144]	; (80081b4 <W25qxx_ReadPage+0x164>)
 8008124:	2200      	movs	r2, #0
 8008126:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 8008128:	4b23      	ldr	r3, [pc, #140]	; (80081b8 <W25qxx_ReadPage+0x168>)
 800812a:	2201      	movs	r2, #1
 800812c:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 800812e:	f7ff fb45 	bl	80077bc <W25_SELECT>
    if (w25_withDMA) {
 8008132:	4b21      	ldr	r3, [pc, #132]	; (80081b8 <W25qxx_ReadPage+0x168>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d013      	beq.n	8008162 <W25qxx_ReadPage+0x112>
    	HAL_SPI_TransmitReceive_DMA(portFLASH, pageTmp, pageTmp, lens);
 800813a:	4b20      	ldr	r3, [pc, #128]	; (80081bc <W25qxx_ReadPage+0x16c>)
 800813c:	6818      	ldr	r0, [r3, #0]
 800813e:	8afb      	ldrh	r3, [r7, #22]
 8008140:	4a1b      	ldr	r2, [pc, #108]	; (80081b0 <W25qxx_ReadPage+0x160>)
 8008142:	491b      	ldr	r1, [pc, #108]	; (80081b0 <W25qxx_ReadPage+0x160>)
 8008144:	f005 f86e 	bl	800d224 <HAL_SPI_TransmitReceive_DMA>
    	while (!spiRdy) {
 8008148:	e002      	b.n	8008150 <W25qxx_ReadPage+0x100>
    		W25qxx_Delay(1);
 800814a:	2001      	movs	r0, #1
 800814c:	f000 f90a 	bl	8008364 <HAL_Delay>
    	while (!spiRdy) {
 8008150:	4b18      	ldr	r3, [pc, #96]	; (80081b4 <W25qxx_ReadPage+0x164>)
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d0f7      	beq.n	800814a <W25qxx_ReadPage+0xfa>
    	}
w25_withDMA = 0;
 800815a:	4b17      	ldr	r3, [pc, #92]	; (80081b8 <W25qxx_ReadPage+0x168>)
 800815c:	2200      	movs	r2, #0
 800815e:	701a      	strb	r2, [r3, #0]
 8008160:	e017      	b.n	8008192 <W25qxx_ReadPage+0x142>
    } else {
    	if (HAL_SPI_TransmitReceive(portFLASH, pageTmp, pageTmp, lens, min_wait_ms) != HAL_OK) devError |= devSPI;
 8008162:	4b16      	ldr	r3, [pc, #88]	; (80081bc <W25qxx_ReadPage+0x16c>)
 8008164:	6818      	ldr	r0, [r3, #0]
 8008166:	22fa      	movs	r2, #250	; 0xfa
 8008168:	8afb      	ldrh	r3, [r7, #22]
 800816a:	9200      	str	r2, [sp, #0]
 800816c:	4a10      	ldr	r2, [pc, #64]	; (80081b0 <W25qxx_ReadPage+0x160>)
 800816e:	4910      	ldr	r1, [pc, #64]	; (80081b0 <W25qxx_ReadPage+0x160>)
 8008170:	f004 fd51 	bl	800cc16 <HAL_SPI_TransmitReceive>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d006      	beq.n	8008188 <W25qxx_ReadPage+0x138>
 800817a:	4b11      	ldr	r3, [pc, #68]	; (80081c0 <W25qxx_ReadPage+0x170>)
 800817c:	881b      	ldrh	r3, [r3, #0]
 800817e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008182:	b29a      	uxth	r2, r3
 8008184:	4b0e      	ldr	r3, [pc, #56]	; (80081c0 <W25qxx_ReadPage+0x170>)
 8008186:	801a      	strh	r2, [r3, #0]
    	W25_UNSELECT();
 8008188:	f7ff fb24 	bl	80077d4 <W25_UNSELECT>

    	spiRdy = 1;
 800818c:	4b09      	ldr	r3, [pc, #36]	; (80081b4 <W25qxx_ReadPage+0x164>)
 800818e:	2201      	movs	r2, #1
 8008190:	701a      	strb	r2, [r3, #0]
    }
	memcpy(pBuffer, &pageTmp[PAGE_HDR_BYTES], NumByteToRead_up_to_PageSize);//w25qxx.PageSize);
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	490b      	ldr	r1, [pc, #44]	; (80081c4 <W25qxx_ReadPage+0x174>)
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f00b ff2b 	bl	8013ff2 <memcpy>
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif


    w25qxx.Lock = 0;
 800819c:	4b03      	ldr	r3, [pc, #12]	; (80081ac <W25qxx_ReadPage+0x15c>)
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80081a4:	bf00      	nop
 80081a6:	3718      	adds	r7, #24
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	200034d0 	.word	0x200034d0
 80081b0:	200034f8 	.word	0x200034f8
 80081b4:	20000114 	.word	0x20000114
 80081b8:	200035fd 	.word	0x200035fd
 80081bc:	20000010 	.word	0x20000010
 80081c0:	20001bf4 	.word	0x20001bf4
 80081c4:	200034fc 	.word	0x200034fc

080081c8 <W25qxx_ReadSector>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b088      	sub	sp, #32
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	603b      	str	r3, [r7, #0]
    if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToRead_up_to_SectorSize)
 80081d6:	4b31      	ldr	r3, [pc, #196]	; (800829c <W25qxx_ReadSector+0xd4>)
 80081d8:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d802      	bhi.n	80081e8 <W25qxx_ReadSector+0x20>
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d103      	bne.n	80081f0 <W25qxx_ReadSector+0x28>
                NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80081e8:	4b2c      	ldr	r3, [pc, #176]	; (800829c <W25qxx_ReadSector+0xd4>)
 80081ea:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80081ee:	603b      	str	r3, [r7, #0]
    Report(1, "%s:0x%X(%u), Offset:%u ,Read %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 80081f0:	4b2a      	ldr	r3, [pc, #168]	; (800829c <W25qxx_ReadSector+0xd4>)
 80081f2:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d24b      	bcs.n	8008294 <W25qxx_ReadSector+0xcc>
        return;
    }

    int32_t BytesToRead;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	441a      	add	r2, r3
 8008202:	4b26      	ldr	r3, [pc, #152]	; (800829c <W25qxx_ReadSector+0xd4>)
 8008204:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8008208:	429a      	cmp	r2, r3
 800820a:	d906      	bls.n	800821a <W25qxx_ReadSector+0x52>
        BytesToRead = w25qxx.SectorSize - OffsetInByte;
 800820c:	4b23      	ldr	r3, [pc, #140]	; (800829c <W25qxx_ReadSector+0xd4>)
 800820e:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	61fb      	str	r3, [r7, #28]
 8008218:	e001      	b.n	800821e <W25qxx_ReadSector+0x56>
    else
        BytesToRead = NumByteToRead_up_to_SectorSize;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800821e:	68b8      	ldr	r0, [r7, #8]
 8008220:	f7ff fd1e 	bl	8007c60 <W25qxx_SectorToPage>
 8008224:	4602      	mov	r2, r0
 8008226:	4b1d      	ldr	r3, [pc, #116]	; (800829c <W25qxx_ReadSector+0xd4>)
 8008228:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800822c:	b29b      	uxth	r3, r3
 800822e:	4619      	mov	r1, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	fbb3 f3f1 	udiv	r3, r3, r1
 8008236:	4413      	add	r3, r2
 8008238:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 800823a:	4b18      	ldr	r3, [pc, #96]	; (800829c <W25qxx_ReadSector+0xd4>)
 800823c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8008240:	b29b      	uxth	r3, r3
 8008242:	461a      	mov	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	fbb3 f1f2 	udiv	r1, r3, r2
 800824a:	fb01 f202 	mul.w	r2, r1, r2
 800824e:	1a9b      	subs	r3, r3, r2
 8008250:	61bb      	str	r3, [r7, #24]
    do {
        W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	6979      	ldr	r1, [r7, #20]
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f7ff fef9 	bl	8008050 <W25qxx_ReadPage>
        StartPage++;
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	3301      	adds	r3, #1
 8008262:	617b      	str	r3, [r7, #20]
        BytesToRead -= w25qxx.PageSize - LocalOffset;
 8008264:	4b0d      	ldr	r3, [pc, #52]	; (800829c <W25qxx_ReadSector+0xd4>)
 8008266:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800826a:	b29b      	uxth	r3, r3
 800826c:	461a      	mov	r2, r3
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	1a9a      	subs	r2, r3, r2
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	4413      	add	r3, r2
 8008276:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 8008278:	4b08      	ldr	r3, [pc, #32]	; (800829c <W25qxx_ReadSector+0xd4>)
 800827a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800827e:	b29b      	uxth	r3, r3
 8008280:	461a      	mov	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	4413      	add	r3, r2
 8008286:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 8008288:	2300      	movs	r3, #0
 800828a:	61bb      	str	r3, [r7, #24]
    } while(BytesToRead > 0);
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	2b00      	cmp	r3, #0
 8008290:	dcdf      	bgt.n	8008252 <W25qxx_ReadSector+0x8a>
 8008292:	e000      	b.n	8008296 <W25qxx_ReadSector+0xce>
        return;
 8008294:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 8008296:	3720      	adds	r7, #32
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	200034d0 	.word	0x200034d0

080082a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80082a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80082d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80082a4:	f7ff fa78 	bl	8007798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80082a8:	480c      	ldr	r0, [pc, #48]	; (80082dc <LoopForever+0x6>)
  ldr r1, =_edata
 80082aa:	490d      	ldr	r1, [pc, #52]	; (80082e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80082ac:	4a0d      	ldr	r2, [pc, #52]	; (80082e4 <LoopForever+0xe>)
  movs r3, #0
 80082ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80082b0:	e002      	b.n	80082b8 <LoopCopyDataInit>

080082b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80082b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80082b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80082b6:	3304      	adds	r3, #4

080082b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80082b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80082ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80082bc:	d3f9      	bcc.n	80082b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80082be:	4a0a      	ldr	r2, [pc, #40]	; (80082e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80082c0:	4c0a      	ldr	r4, [pc, #40]	; (80082ec <LoopForever+0x16>)
  movs r3, #0
 80082c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80082c4:	e001      	b.n	80082ca <LoopFillZerobss>

080082c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80082c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80082c8:	3204      	adds	r2, #4

080082ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80082ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80082cc:	d3fb      	bcc.n	80082c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80082ce:	f00b fe69 	bl	8013fa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80082d2:	f7f9 ff07 	bl	80020e4 <main>

080082d6 <LoopForever>:

LoopForever:
    b LoopForever
 80082d6:	e7fe      	b.n	80082d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80082d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80082dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80082e0:	20000400 	.word	0x20000400
  ldr r2, =_sidata
 80082e4:	0801a6bc 	.word	0x0801a6bc
  ldr r2, =_sbss
 80082e8:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 80082ec:	20008424 	.word	0x20008424

080082f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80082f0:	e7fe      	b.n	80082f0 <ADC1_2_IRQHandler>

080082f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b082      	sub	sp, #8
 80082f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80082fc:	2003      	movs	r0, #3
 80082fe:	f000 f902 	bl	8008506 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008302:	200f      	movs	r0, #15
 8008304:	f7ff f83c 	bl	8007380 <HAL_InitTick>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d002      	beq.n	8008314 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	71fb      	strb	r3, [r7, #7]
 8008312:	e001      	b.n	8008318 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008314:	f7fe fc64 	bl	8006be0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008318:	79fb      	ldrb	r3, [r7, #7]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3708      	adds	r7, #8
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
	...

08008324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008324:	b480      	push	{r7}
 8008326:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008328:	4b06      	ldr	r3, [pc, #24]	; (8008344 <HAL_IncTick+0x20>)
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	461a      	mov	r2, r3
 800832e:	4b06      	ldr	r3, [pc, #24]	; (8008348 <HAL_IncTick+0x24>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4413      	add	r3, r2
 8008334:	4a04      	ldr	r2, [pc, #16]	; (8008348 <HAL_IncTick+0x24>)
 8008336:	6013      	str	r3, [r2, #0]
}
 8008338:	bf00      	nop
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	20000214 	.word	0x20000214
 8008348:	20003600 	.word	0x20003600

0800834c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800834c:	b480      	push	{r7}
 800834e:	af00      	add	r7, sp, #0
  return uwTick;
 8008350:	4b03      	ldr	r3, [pc, #12]	; (8008360 <HAL_GetTick+0x14>)
 8008352:	681b      	ldr	r3, [r3, #0]
}
 8008354:	4618      	mov	r0, r3
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	20003600 	.word	0x20003600

08008364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800836c:	f7ff ffee 	bl	800834c <HAL_GetTick>
 8008370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800837c:	d005      	beq.n	800838a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800837e:	4b0a      	ldr	r3, [pc, #40]	; (80083a8 <HAL_Delay+0x44>)
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	461a      	mov	r2, r3
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	4413      	add	r3, r2
 8008388:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800838a:	bf00      	nop
 800838c:	f7ff ffde 	bl	800834c <HAL_GetTick>
 8008390:	4602      	mov	r2, r0
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	429a      	cmp	r2, r3
 800839a:	d8f7      	bhi.n	800838c <HAL_Delay+0x28>
  {
  }
}
 800839c:	bf00      	nop
 800839e:	bf00      	nop
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	20000214 	.word	0x20000214

080083ac <__NVIC_SetPriorityGrouping>:
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f003 0307 	and.w	r3, r3, #7
 80083ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80083bc:	4b0c      	ldr	r3, [pc, #48]	; (80083f0 <__NVIC_SetPriorityGrouping+0x44>)
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80083c8:	4013      	ands	r3, r2
 80083ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80083d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80083d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80083de:	4a04      	ldr	r2, [pc, #16]	; (80083f0 <__NVIC_SetPriorityGrouping+0x44>)
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	60d3      	str	r3, [r2, #12]
}
 80083e4:	bf00      	nop
 80083e6:	3714      	adds	r7, #20
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	e000ed00 	.word	0xe000ed00

080083f4 <__NVIC_GetPriorityGrouping>:
{
 80083f4:	b480      	push	{r7}
 80083f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80083f8:	4b04      	ldr	r3, [pc, #16]	; (800840c <__NVIC_GetPriorityGrouping+0x18>)
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	0a1b      	lsrs	r3, r3, #8
 80083fe:	f003 0307 	and.w	r3, r3, #7
}
 8008402:	4618      	mov	r0, r3
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr
 800840c:	e000ed00 	.word	0xe000ed00

08008410 <__NVIC_EnableIRQ>:
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	4603      	mov	r3, r0
 8008418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800841a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800841e:	2b00      	cmp	r3, #0
 8008420:	db0b      	blt.n	800843a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008422:	79fb      	ldrb	r3, [r7, #7]
 8008424:	f003 021f 	and.w	r2, r3, #31
 8008428:	4907      	ldr	r1, [pc, #28]	; (8008448 <__NVIC_EnableIRQ+0x38>)
 800842a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800842e:	095b      	lsrs	r3, r3, #5
 8008430:	2001      	movs	r0, #1
 8008432:	fa00 f202 	lsl.w	r2, r0, r2
 8008436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800843a:	bf00      	nop
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	e000e100 	.word	0xe000e100

0800844c <__NVIC_SetPriority>:
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	4603      	mov	r3, r0
 8008454:	6039      	str	r1, [r7, #0]
 8008456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800845c:	2b00      	cmp	r3, #0
 800845e:	db0a      	blt.n	8008476 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	b2da      	uxtb	r2, r3
 8008464:	490c      	ldr	r1, [pc, #48]	; (8008498 <__NVIC_SetPriority+0x4c>)
 8008466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800846a:	0112      	lsls	r2, r2, #4
 800846c:	b2d2      	uxtb	r2, r2
 800846e:	440b      	add	r3, r1
 8008470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008474:	e00a      	b.n	800848c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	b2da      	uxtb	r2, r3
 800847a:	4908      	ldr	r1, [pc, #32]	; (800849c <__NVIC_SetPriority+0x50>)
 800847c:	79fb      	ldrb	r3, [r7, #7]
 800847e:	f003 030f 	and.w	r3, r3, #15
 8008482:	3b04      	subs	r3, #4
 8008484:	0112      	lsls	r2, r2, #4
 8008486:	b2d2      	uxtb	r2, r2
 8008488:	440b      	add	r3, r1
 800848a:	761a      	strb	r2, [r3, #24]
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr
 8008498:	e000e100 	.word	0xe000e100
 800849c:	e000ed00 	.word	0xe000ed00

080084a0 <NVIC_EncodePriority>:
{
 80084a0:	b480      	push	{r7}
 80084a2:	b089      	sub	sp, #36	; 0x24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f003 0307 	and.w	r3, r3, #7
 80084b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	f1c3 0307 	rsb	r3, r3, #7
 80084ba:	2b04      	cmp	r3, #4
 80084bc:	bf28      	it	cs
 80084be:	2304      	movcs	r3, #4
 80084c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	3304      	adds	r3, #4
 80084c6:	2b06      	cmp	r3, #6
 80084c8:	d902      	bls.n	80084d0 <NVIC_EncodePriority+0x30>
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	3b03      	subs	r3, #3
 80084ce:	e000      	b.n	80084d2 <NVIC_EncodePriority+0x32>
 80084d0:	2300      	movs	r3, #0
 80084d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	fa02 f303 	lsl.w	r3, r2, r3
 80084de:	43da      	mvns	r2, r3
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	401a      	ands	r2, r3
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80084e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	fa01 f303 	lsl.w	r3, r1, r3
 80084f2:	43d9      	mvns	r1, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084f8:	4313      	orrs	r3, r2
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3724      	adds	r7, #36	; 0x24
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr

08008506 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b082      	sub	sp, #8
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f7ff ff4c 	bl	80083ac <__NVIC_SetPriorityGrouping>
}
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b086      	sub	sp, #24
 8008520:	af00      	add	r7, sp, #0
 8008522:	4603      	mov	r3, r0
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
 8008528:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800852a:	2300      	movs	r3, #0
 800852c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800852e:	f7ff ff61 	bl	80083f4 <__NVIC_GetPriorityGrouping>
 8008532:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	68b9      	ldr	r1, [r7, #8]
 8008538:	6978      	ldr	r0, [r7, #20]
 800853a:	f7ff ffb1 	bl	80084a0 <NVIC_EncodePriority>
 800853e:	4602      	mov	r2, r0
 8008540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008544:	4611      	mov	r1, r2
 8008546:	4618      	mov	r0, r3
 8008548:	f7ff ff80 	bl	800844c <__NVIC_SetPriority>
}
 800854c:	bf00      	nop
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	4603      	mov	r3, r0
 800855c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800855e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008562:	4618      	mov	r0, r3
 8008564:	f7ff ff54 	bl	8008410 <__NVIC_EnableIRQ>
}
 8008568:	bf00      	nop
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e098      	b.n	80086b4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	4b4d      	ldr	r3, [pc, #308]	; (80086c0 <HAL_DMA_Init+0x150>)
 800858a:	429a      	cmp	r2, r3
 800858c:	d80f      	bhi.n	80085ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	461a      	mov	r2, r3
 8008594:	4b4b      	ldr	r3, [pc, #300]	; (80086c4 <HAL_DMA_Init+0x154>)
 8008596:	4413      	add	r3, r2
 8008598:	4a4b      	ldr	r2, [pc, #300]	; (80086c8 <HAL_DMA_Init+0x158>)
 800859a:	fba2 2303 	umull	r2, r3, r2, r3
 800859e:	091b      	lsrs	r3, r3, #4
 80085a0:	009a      	lsls	r2, r3, #2
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a48      	ldr	r2, [pc, #288]	; (80086cc <HAL_DMA_Init+0x15c>)
 80085aa:	641a      	str	r2, [r3, #64]	; 0x40
 80085ac:	e00e      	b.n	80085cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	461a      	mov	r2, r3
 80085b4:	4b46      	ldr	r3, [pc, #280]	; (80086d0 <HAL_DMA_Init+0x160>)
 80085b6:	4413      	add	r3, r2
 80085b8:	4a43      	ldr	r2, [pc, #268]	; (80086c8 <HAL_DMA_Init+0x158>)
 80085ba:	fba2 2303 	umull	r2, r3, r2, r3
 80085be:	091b      	lsrs	r3, r3, #4
 80085c0:	009a      	lsls	r2, r3, #2
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a42      	ldr	r2, [pc, #264]	; (80086d4 <HAL_DMA_Init+0x164>)
 80085ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2202      	movs	r2, #2
 80085d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80085e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80085f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	699b      	ldr	r3, [r3, #24]
 8008602:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008608:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a1b      	ldr	r3, [r3, #32]
 800860e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	4313      	orrs	r3, r2
 8008614:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008626:	d039      	beq.n	800869c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862c:	4a27      	ldr	r2, [pc, #156]	; (80086cc <HAL_DMA_Init+0x15c>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d11a      	bne.n	8008668 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008632:	4b29      	ldr	r3, [pc, #164]	; (80086d8 <HAL_DMA_Init+0x168>)
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800863a:	f003 031c 	and.w	r3, r3, #28
 800863e:	210f      	movs	r1, #15
 8008640:	fa01 f303 	lsl.w	r3, r1, r3
 8008644:	43db      	mvns	r3, r3
 8008646:	4924      	ldr	r1, [pc, #144]	; (80086d8 <HAL_DMA_Init+0x168>)
 8008648:	4013      	ands	r3, r2
 800864a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800864c:	4b22      	ldr	r3, [pc, #136]	; (80086d8 <HAL_DMA_Init+0x168>)
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6859      	ldr	r1, [r3, #4]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008658:	f003 031c 	and.w	r3, r3, #28
 800865c:	fa01 f303 	lsl.w	r3, r1, r3
 8008660:	491d      	ldr	r1, [pc, #116]	; (80086d8 <HAL_DMA_Init+0x168>)
 8008662:	4313      	orrs	r3, r2
 8008664:	600b      	str	r3, [r1, #0]
 8008666:	e019      	b.n	800869c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008668:	4b1c      	ldr	r3, [pc, #112]	; (80086dc <HAL_DMA_Init+0x16c>)
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008670:	f003 031c 	and.w	r3, r3, #28
 8008674:	210f      	movs	r1, #15
 8008676:	fa01 f303 	lsl.w	r3, r1, r3
 800867a:	43db      	mvns	r3, r3
 800867c:	4917      	ldr	r1, [pc, #92]	; (80086dc <HAL_DMA_Init+0x16c>)
 800867e:	4013      	ands	r3, r2
 8008680:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8008682:	4b16      	ldr	r3, [pc, #88]	; (80086dc <HAL_DMA_Init+0x16c>)
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6859      	ldr	r1, [r3, #4]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800868e:	f003 031c 	and.w	r3, r3, #28
 8008692:	fa01 f303 	lsl.w	r3, r1, r3
 8008696:	4911      	ldr	r1, [pc, #68]	; (80086dc <HAL_DMA_Init+0x16c>)
 8008698:	4313      	orrs	r3, r2
 800869a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	40020407 	.word	0x40020407
 80086c4:	bffdfff8 	.word	0xbffdfff8
 80086c8:	cccccccd 	.word	0xcccccccd
 80086cc:	40020000 	.word	0x40020000
 80086d0:	bffdfbf8 	.word	0xbffdfbf8
 80086d4:	40020400 	.word	0x40020400
 80086d8:	400200a8 	.word	0x400200a8
 80086dc:	400204a8 	.word	0x400204a8

080086e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
 80086ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d101      	bne.n	8008700 <HAL_DMA_Start_IT+0x20>
 80086fc:	2302      	movs	r3, #2
 80086fe:	e04b      	b.n	8008798 <HAL_DMA_Start_IT+0xb8>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800870e:	b2db      	uxtb	r3, r3
 8008710:	2b01      	cmp	r3, #1
 8008712:	d13a      	bne.n	800878a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2202      	movs	r2, #2
 8008718:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f022 0201 	bic.w	r2, r2, #1
 8008730:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	68b9      	ldr	r1, [r7, #8]
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f000 f96d 	bl	8008a18 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008742:	2b00      	cmp	r3, #0
 8008744:	d008      	beq.n	8008758 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f042 020e 	orr.w	r2, r2, #14
 8008754:	601a      	str	r2, [r3, #0]
 8008756:	e00f      	b.n	8008778 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f022 0204 	bic.w	r2, r2, #4
 8008766:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f042 020a 	orr.w	r2, r2, #10
 8008776:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f042 0201 	orr.w	r2, r2, #1
 8008786:	601a      	str	r2, [r3, #0]
 8008788:	e005      	b.n	8008796 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008792:	2302      	movs	r3, #2
 8008794:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008796:	7dfb      	ldrb	r3, [r7, #23]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3718      	adds	r7, #24
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d008      	beq.n	80087ca <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2204      	movs	r2, #4
 80087bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e022      	b.n	8008810 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f022 020e 	bic.w	r2, r2, #14
 80087d8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f022 0201 	bic.w	r2, r2, #1
 80087e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ee:	f003 021c 	and.w	r2, r3, #28
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f6:	2101      	movs	r1, #1
 80087f8:	fa01 f202 	lsl.w	r2, r1, r2
 80087fc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800880e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8008810:	4618      	mov	r0, r3
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800882e:	b2db      	uxtb	r3, r3
 8008830:	2b02      	cmp	r3, #2
 8008832:	d005      	beq.n	8008840 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2204      	movs	r2, #4
 8008838:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	73fb      	strb	r3, [r7, #15]
 800883e:	e029      	b.n	8008894 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f022 020e 	bic.w	r2, r2, #14
 800884e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f022 0201 	bic.w	r2, r2, #1
 800885e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008864:	f003 021c 	and.w	r2, r3, #28
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886c:	2101      	movs	r1, #1
 800886e:	fa01 f202 	lsl.w	r2, r1, r2
 8008872:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008888:	2b00      	cmp	r3, #0
 800888a:	d003      	beq.n	8008894 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	4798      	blx	r3
    }
  }
  return status;
 8008894:	7bfb      	ldrb	r3, [r7, #15]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b084      	sub	sp, #16
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ba:	f003 031c 	and.w	r3, r3, #28
 80088be:	2204      	movs	r2, #4
 80088c0:	409a      	lsls	r2, r3
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	4013      	ands	r3, r2
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d026      	beq.n	8008918 <HAL_DMA_IRQHandler+0x7a>
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	f003 0304 	and.w	r3, r3, #4
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d021      	beq.n	8008918 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 0320 	and.w	r3, r3, #32
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d107      	bne.n	80088f2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f022 0204 	bic.w	r2, r2, #4
 80088f0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088f6:	f003 021c 	and.w	r2, r3, #28
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fe:	2104      	movs	r1, #4
 8008900:	fa01 f202 	lsl.w	r2, r1, r2
 8008904:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890a:	2b00      	cmp	r3, #0
 800890c:	d071      	beq.n	80089f2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8008916:	e06c      	b.n	80089f2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800891c:	f003 031c 	and.w	r3, r3, #28
 8008920:	2202      	movs	r2, #2
 8008922:	409a      	lsls	r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	4013      	ands	r3, r2
 8008928:	2b00      	cmp	r3, #0
 800892a:	d02e      	beq.n	800898a <HAL_DMA_IRQHandler+0xec>
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	2b00      	cmp	r3, #0
 8008934:	d029      	beq.n	800898a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0320 	and.w	r3, r3, #32
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10b      	bne.n	800895c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f022 020a 	bic.w	r2, r2, #10
 8008952:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008960:	f003 021c 	and.w	r2, r3, #28
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008968:	2102      	movs	r1, #2
 800896a:	fa01 f202 	lsl.w	r2, r1, r2
 800896e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897c:	2b00      	cmp	r3, #0
 800897e:	d038      	beq.n	80089f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008988:	e033      	b.n	80089f2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800898e:	f003 031c 	and.w	r3, r3, #28
 8008992:	2208      	movs	r2, #8
 8008994:	409a      	lsls	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	4013      	ands	r3, r2
 800899a:	2b00      	cmp	r3, #0
 800899c:	d02a      	beq.n	80089f4 <HAL_DMA_IRQHandler+0x156>
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	f003 0308 	and.w	r3, r3, #8
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d025      	beq.n	80089f4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f022 020e 	bic.w	r2, r2, #14
 80089b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089bc:	f003 021c 	and.w	r2, r3, #28
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c4:	2101      	movs	r1, #1
 80089c6:	fa01 f202 	lsl.w	r2, r1, r2
 80089ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d004      	beq.n	80089f4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80089f2:	bf00      	nop
 80089f4:	bf00      	nop
}
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008a0a:	b2db      	uxtb	r3, r3
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	607a      	str	r2, [r7, #4]
 8008a24:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a2a:	f003 021c 	and.w	r2, r3, #28
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a32:	2101      	movs	r1, #1
 8008a34:	fa01 f202 	lsl.w	r2, r1, r2
 8008a38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	683a      	ldr	r2, [r7, #0]
 8008a40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	2b10      	cmp	r3, #16
 8008a48:	d108      	bne.n	8008a5c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008a5a:	e007      	b.n	8008a6c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68ba      	ldr	r2, [r7, #8]
 8008a62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	60da      	str	r2, [r3, #12]
}
 8008a6c:	bf00      	nop
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b087      	sub	sp, #28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008a82:	2300      	movs	r3, #0
 8008a84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008a86:	e17f      	b.n	8008d88 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	2101      	movs	r1, #1
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	fa01 f303 	lsl.w	r3, r1, r3
 8008a94:	4013      	ands	r3, r2
 8008a96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f000 8171 	beq.w	8008d82 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	f003 0303 	and.w	r3, r3, #3
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d005      	beq.n	8008ab8 <HAL_GPIO_Init+0x40>
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	f003 0303 	and.w	r3, r3, #3
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d130      	bne.n	8008b1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	005b      	lsls	r3, r3, #1
 8008ac2:	2203      	movs	r2, #3
 8008ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac8:	43db      	mvns	r3, r3
 8008aca:	693a      	ldr	r2, [r7, #16]
 8008acc:	4013      	ands	r3, r2
 8008ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	68da      	ldr	r2, [r3, #12]
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	005b      	lsls	r3, r3, #1
 8008ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008aee:	2201      	movs	r2, #1
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	fa02 f303 	lsl.w	r3, r2, r3
 8008af6:	43db      	mvns	r3, r3
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	4013      	ands	r3, r2
 8008afc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	091b      	lsrs	r3, r3, #4
 8008b04:	f003 0201 	and.w	r2, r3, #1
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0e:	693a      	ldr	r2, [r7, #16]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f003 0303 	and.w	r3, r3, #3
 8008b22:	2b03      	cmp	r3, #3
 8008b24:	d118      	bne.n	8008b58 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	fa02 f303 	lsl.w	r3, r2, r3
 8008b34:	43db      	mvns	r3, r3
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	4013      	ands	r3, r2
 8008b3a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	08db      	lsrs	r3, r3, #3
 8008b42:	f003 0201 	and.w	r2, r3, #1
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	f003 0303 	and.w	r3, r3, #3
 8008b60:	2b03      	cmp	r3, #3
 8008b62:	d017      	beq.n	8008b94 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	005b      	lsls	r3, r3, #1
 8008b6e:	2203      	movs	r2, #3
 8008b70:	fa02 f303 	lsl.w	r3, r2, r3
 8008b74:	43db      	mvns	r3, r3
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	4013      	ands	r3, r2
 8008b7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	689a      	ldr	r2, [r3, #8]
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	005b      	lsls	r3, r3, #1
 8008b84:	fa02 f303 	lsl.w	r3, r2, r3
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f003 0303 	and.w	r3, r3, #3
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d123      	bne.n	8008be8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	08da      	lsrs	r2, r3, #3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	3208      	adds	r2, #8
 8008ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	f003 0307 	and.w	r3, r3, #7
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	220f      	movs	r2, #15
 8008bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bbc:	43db      	mvns	r3, r3
 8008bbe:	693a      	ldr	r2, [r7, #16]
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	691a      	ldr	r2, [r3, #16]
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	f003 0307 	and.w	r3, r3, #7
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	08da      	lsrs	r2, r3, #3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	3208      	adds	r2, #8
 8008be2:	6939      	ldr	r1, [r7, #16]
 8008be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	005b      	lsls	r3, r3, #1
 8008bf2:	2203      	movs	r2, #3
 8008bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf8:	43db      	mvns	r3, r3
 8008bfa:	693a      	ldr	r2, [r7, #16]
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	f003 0203 	and.w	r2, r3, #3
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	005b      	lsls	r3, r3, #1
 8008c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f000 80ac 	beq.w	8008d82 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c2a:	4b5f      	ldr	r3, [pc, #380]	; (8008da8 <HAL_GPIO_Init+0x330>)
 8008c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c2e:	4a5e      	ldr	r2, [pc, #376]	; (8008da8 <HAL_GPIO_Init+0x330>)
 8008c30:	f043 0301 	orr.w	r3, r3, #1
 8008c34:	6613      	str	r3, [r2, #96]	; 0x60
 8008c36:	4b5c      	ldr	r3, [pc, #368]	; (8008da8 <HAL_GPIO_Init+0x330>)
 8008c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c3a:	f003 0301 	and.w	r3, r3, #1
 8008c3e:	60bb      	str	r3, [r7, #8]
 8008c40:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008c42:	4a5a      	ldr	r2, [pc, #360]	; (8008dac <HAL_GPIO_Init+0x334>)
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	089b      	lsrs	r3, r3, #2
 8008c48:	3302      	adds	r3, #2
 8008c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	f003 0303 	and.w	r3, r3, #3
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	220f      	movs	r2, #15
 8008c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5e:	43db      	mvns	r3, r3
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	4013      	ands	r3, r2
 8008c64:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008c6c:	d025      	beq.n	8008cba <HAL_GPIO_Init+0x242>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a4f      	ldr	r2, [pc, #316]	; (8008db0 <HAL_GPIO_Init+0x338>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d01f      	beq.n	8008cb6 <HAL_GPIO_Init+0x23e>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a4e      	ldr	r2, [pc, #312]	; (8008db4 <HAL_GPIO_Init+0x33c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d019      	beq.n	8008cb2 <HAL_GPIO_Init+0x23a>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a4d      	ldr	r2, [pc, #308]	; (8008db8 <HAL_GPIO_Init+0x340>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d013      	beq.n	8008cae <HAL_GPIO_Init+0x236>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a4c      	ldr	r2, [pc, #304]	; (8008dbc <HAL_GPIO_Init+0x344>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d00d      	beq.n	8008caa <HAL_GPIO_Init+0x232>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a4b      	ldr	r2, [pc, #300]	; (8008dc0 <HAL_GPIO_Init+0x348>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d007      	beq.n	8008ca6 <HAL_GPIO_Init+0x22e>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a4a      	ldr	r2, [pc, #296]	; (8008dc4 <HAL_GPIO_Init+0x34c>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d101      	bne.n	8008ca2 <HAL_GPIO_Init+0x22a>
 8008c9e:	2306      	movs	r3, #6
 8008ca0:	e00c      	b.n	8008cbc <HAL_GPIO_Init+0x244>
 8008ca2:	2307      	movs	r3, #7
 8008ca4:	e00a      	b.n	8008cbc <HAL_GPIO_Init+0x244>
 8008ca6:	2305      	movs	r3, #5
 8008ca8:	e008      	b.n	8008cbc <HAL_GPIO_Init+0x244>
 8008caa:	2304      	movs	r3, #4
 8008cac:	e006      	b.n	8008cbc <HAL_GPIO_Init+0x244>
 8008cae:	2303      	movs	r3, #3
 8008cb0:	e004      	b.n	8008cbc <HAL_GPIO_Init+0x244>
 8008cb2:	2302      	movs	r3, #2
 8008cb4:	e002      	b.n	8008cbc <HAL_GPIO_Init+0x244>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e000      	b.n	8008cbc <HAL_GPIO_Init+0x244>
 8008cba:	2300      	movs	r3, #0
 8008cbc:	697a      	ldr	r2, [r7, #20]
 8008cbe:	f002 0203 	and.w	r2, r2, #3
 8008cc2:	0092      	lsls	r2, r2, #2
 8008cc4:	4093      	lsls	r3, r2
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008ccc:	4937      	ldr	r1, [pc, #220]	; (8008dac <HAL_GPIO_Init+0x334>)
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	089b      	lsrs	r3, r3, #2
 8008cd2:	3302      	adds	r3, #2
 8008cd4:	693a      	ldr	r2, [r7, #16]
 8008cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008cda:	4b3b      	ldr	r3, [pc, #236]	; (8008dc8 <HAL_GPIO_Init+0x350>)
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	43db      	mvns	r3, r3
 8008ce4:	693a      	ldr	r2, [r7, #16]
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d003      	beq.n	8008cfe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8008cf6:	693a      	ldr	r2, [r7, #16]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008cfe:	4a32      	ldr	r2, [pc, #200]	; (8008dc8 <HAL_GPIO_Init+0x350>)
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008d04:	4b30      	ldr	r3, [pc, #192]	; (8008dc8 <HAL_GPIO_Init+0x350>)
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	43db      	mvns	r3, r3
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	4013      	ands	r3, r2
 8008d12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d003      	beq.n	8008d28 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8008d20:	693a      	ldr	r2, [r7, #16]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008d28:	4a27      	ldr	r2, [pc, #156]	; (8008dc8 <HAL_GPIO_Init+0x350>)
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008d2e:	4b26      	ldr	r3, [pc, #152]	; (8008dc8 <HAL_GPIO_Init+0x350>)
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	43db      	mvns	r3, r3
 8008d38:	693a      	ldr	r2, [r7, #16]
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d003      	beq.n	8008d52 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008d52:	4a1d      	ldr	r2, [pc, #116]	; (8008dc8 <HAL_GPIO_Init+0x350>)
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008d58:	4b1b      	ldr	r3, [pc, #108]	; (8008dc8 <HAL_GPIO_Init+0x350>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	43db      	mvns	r3, r3
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	4013      	ands	r3, r2
 8008d66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d003      	beq.n	8008d7c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8008d74:	693a      	ldr	r2, [r7, #16]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008d7c:	4a12      	ldr	r2, [pc, #72]	; (8008dc8 <HAL_GPIO_Init+0x350>)
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	3301      	adds	r3, #1
 8008d86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f47f ae78 	bne.w	8008a88 <HAL_GPIO_Init+0x10>
  }
}
 8008d98:	bf00      	nop
 8008d9a:	bf00      	nop
 8008d9c:	371c      	adds	r7, #28
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	40021000 	.word	0x40021000
 8008dac:	40010000 	.word	0x40010000
 8008db0:	48000400 	.word	0x48000400
 8008db4:	48000800 	.word	0x48000800
 8008db8:	48000c00 	.word	0x48000c00
 8008dbc:	48001000 	.word	0x48001000
 8008dc0:	48001400 	.word	0x48001400
 8008dc4:	48001800 	.word	0x48001800
 8008dc8:	40010400 	.word	0x40010400

08008dcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	691a      	ldr	r2, [r3, #16]
 8008ddc:	887b      	ldrh	r3, [r7, #2]
 8008dde:	4013      	ands	r3, r2
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d002      	beq.n	8008dea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008de4:	2301      	movs	r3, #1
 8008de6:	73fb      	strb	r3, [r7, #15]
 8008de8:	e001      	b.n	8008dee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008dea:	2300      	movs	r3, #0
 8008dec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3714      	adds	r7, #20
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	460b      	mov	r3, r1
 8008e06:	807b      	strh	r3, [r7, #2]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008e0c:	787b      	ldrb	r3, [r7, #1]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008e12:	887a      	ldrh	r2, [r7, #2]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008e18:	e002      	b.n	8008e20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008e1a:	887a      	ldrh	r2, [r7, #2]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	460b      	mov	r3, r1
 8008e36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	695b      	ldr	r3, [r3, #20]
 8008e3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008e3e:	887a      	ldrh	r2, [r7, #2]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	4013      	ands	r3, r2
 8008e44:	041a      	lsls	r2, r3, #16
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	43d9      	mvns	r1, r3
 8008e4a:	887b      	ldrh	r3, [r7, #2]
 8008e4c:	400b      	ands	r3, r1
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	619a      	str	r2, [r3, #24]
}
 8008e54:	bf00      	nop
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	4603      	mov	r3, r0
 8008e68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008e6a:	4b08      	ldr	r3, [pc, #32]	; (8008e8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008e6c:	695a      	ldr	r2, [r3, #20]
 8008e6e:	88fb      	ldrh	r3, [r7, #6]
 8008e70:	4013      	ands	r3, r2
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d006      	beq.n	8008e84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008e76:	4a05      	ldr	r2, [pc, #20]	; (8008e8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008e78:	88fb      	ldrh	r3, [r7, #6]
 8008e7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008e7c:	88fb      	ldrh	r3, [r7, #6]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7fa fe58 	bl	8003b34 <HAL_GPIO_EXTI_Callback>
  }
}
 8008e84:	bf00      	nop
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	40010400 	.word	0x40010400

08008e90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e081      	b.n	8008fa6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d106      	bne.n	8008ebc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f7fd feba 	bl	8006c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2224      	movs	r2, #36	; 0x24
 8008ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f022 0201 	bic.w	r2, r2, #1
 8008ed2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685a      	ldr	r2, [r3, #4]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008ee0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	689a      	ldr	r2, [r3, #8]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ef0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d107      	bne.n	8008f0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	689a      	ldr	r2, [r3, #8]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f06:	609a      	str	r2, [r3, #8]
 8008f08:	e006      	b.n	8008f18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	689a      	ldr	r2, [r3, #8]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008f16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d104      	bne.n	8008f2a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	6812      	ldr	r2, [r2, #0]
 8008f34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68da      	ldr	r2, [r3, #12]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	691a      	ldr	r2, [r3, #16]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	699b      	ldr	r3, [r3, #24]
 8008f5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	430a      	orrs	r2, r1
 8008f66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	69d9      	ldr	r1, [r3, #28]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a1a      	ldr	r2, [r3, #32]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	430a      	orrs	r2, r1
 8008f76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f042 0201 	orr.w	r2, r2, #1
 8008f86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2220      	movs	r2, #32
 8008f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3708      	adds	r7, #8
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
	...

08008fb0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b088      	sub	sp, #32
 8008fb4:	af02      	add	r7, sp, #8
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	607a      	str	r2, [r7, #4]
 8008fba:	461a      	mov	r2, r3
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	817b      	strh	r3, [r7, #10]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	2b20      	cmp	r3, #32
 8008fce:	f040 80da 	bne.w	8009186 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d101      	bne.n	8008fe0 <HAL_I2C_Master_Transmit+0x30>
 8008fdc:	2302      	movs	r3, #2
 8008fde:	e0d3      	b.n	8009188 <HAL_I2C_Master_Transmit+0x1d8>
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008fe8:	f7ff f9b0 	bl	800834c <HAL_GetTick>
 8008fec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	9300      	str	r3, [sp, #0]
 8008ff2:	2319      	movs	r3, #25
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008ffa:	68f8      	ldr	r0, [r7, #12]
 8008ffc:	f001 f8d1 	bl	800a1a2 <I2C_WaitOnFlagUntilTimeout>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e0be      	b.n	8009188 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2221      	movs	r2, #33	; 0x21
 800900e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2210      	movs	r2, #16
 8009016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	893a      	ldrh	r2, [r7, #8]
 800902a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009036:	b29b      	uxth	r3, r3
 8009038:	2bff      	cmp	r3, #255	; 0xff
 800903a:	d90e      	bls.n	800905a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	22ff      	movs	r2, #255	; 0xff
 8009040:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009046:	b2da      	uxtb	r2, r3
 8009048:	8979      	ldrh	r1, [r7, #10]
 800904a:	4b51      	ldr	r3, [pc, #324]	; (8009190 <HAL_I2C_Master_Transmit+0x1e0>)
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f001 fa4e 	bl	800a4f4 <I2C_TransferConfig>
 8009058:	e06c      	b.n	8009134 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800905e:	b29a      	uxth	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009068:	b2da      	uxtb	r2, r3
 800906a:	8979      	ldrh	r1, [r7, #10]
 800906c:	4b48      	ldr	r3, [pc, #288]	; (8009190 <HAL_I2C_Master_Transmit+0x1e0>)
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f001 fa3d 	bl	800a4f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800907a:	e05b      	b.n	8009134 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800907c:	697a      	ldr	r2, [r7, #20]
 800907e:	6a39      	ldr	r1, [r7, #32]
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f001 f8ce 	bl	800a222 <I2C_WaitOnTXISFlagUntilTimeout>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e07b      	b.n	8009188 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009094:	781a      	ldrb	r2, [r3, #0]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a0:	1c5a      	adds	r2, r3, #1
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	3b01      	subs	r3, #1
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090b8:	3b01      	subs	r3, #1
 80090ba:	b29a      	uxth	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d034      	beq.n	8009134 <HAL_I2C_Master_Transmit+0x184>
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d130      	bne.n	8009134 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	2200      	movs	r2, #0
 80090da:	2180      	movs	r1, #128	; 0x80
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f001 f860 	bl	800a1a2 <I2C_WaitOnFlagUntilTimeout>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e04d      	b.n	8009188 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	2bff      	cmp	r3, #255	; 0xff
 80090f4:	d90e      	bls.n	8009114 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	22ff      	movs	r2, #255	; 0xff
 80090fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009100:	b2da      	uxtb	r2, r3
 8009102:	8979      	ldrh	r1, [r7, #10]
 8009104:	2300      	movs	r3, #0
 8009106:	9300      	str	r3, [sp, #0]
 8009108:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	f001 f9f1 	bl	800a4f4 <I2C_TransferConfig>
 8009112:	e00f      	b.n	8009134 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009118:	b29a      	uxth	r2, r3
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009122:	b2da      	uxtb	r2, r3
 8009124:	8979      	ldrh	r1, [r7, #10]
 8009126:	2300      	movs	r3, #0
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f001 f9e0 	bl	800a4f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009138:	b29b      	uxth	r3, r3
 800913a:	2b00      	cmp	r3, #0
 800913c:	d19e      	bne.n	800907c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800913e:	697a      	ldr	r2, [r7, #20]
 8009140:	6a39      	ldr	r1, [r7, #32]
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f001 f8ad 	bl	800a2a2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d001      	beq.n	8009152 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	e01a      	b.n	8009188 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2220      	movs	r2, #32
 8009158:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	6859      	ldr	r1, [r3, #4]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	4b0b      	ldr	r3, [pc, #44]	; (8009194 <HAL_I2C_Master_Transmit+0x1e4>)
 8009166:	400b      	ands	r3, r1
 8009168:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2220      	movs	r2, #32
 800916e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009182:	2300      	movs	r3, #0
 8009184:	e000      	b.n	8009188 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8009186:	2302      	movs	r3, #2
  }
}
 8009188:	4618      	mov	r0, r3
 800918a:	3718      	adds	r7, #24
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	80002000 	.word	0x80002000
 8009194:	fe00e800 	.word	0xfe00e800

08009198 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b088      	sub	sp, #32
 800919c:	af02      	add	r7, sp, #8
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	4608      	mov	r0, r1
 80091a2:	4611      	mov	r1, r2
 80091a4:	461a      	mov	r2, r3
 80091a6:	4603      	mov	r3, r0
 80091a8:	817b      	strh	r3, [r7, #10]
 80091aa:	460b      	mov	r3, r1
 80091ac:	813b      	strh	r3, [r7, #8]
 80091ae:	4613      	mov	r3, r2
 80091b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	2b20      	cmp	r3, #32
 80091bc:	f040 80f9 	bne.w	80093b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80091c0:	6a3b      	ldr	r3, [r7, #32]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d002      	beq.n	80091cc <HAL_I2C_Mem_Write+0x34>
 80091c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d105      	bne.n	80091d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	e0ed      	b.n	80093b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d101      	bne.n	80091e6 <HAL_I2C_Mem_Write+0x4e>
 80091e2:	2302      	movs	r3, #2
 80091e4:	e0e6      	b.n	80093b4 <HAL_I2C_Mem_Write+0x21c>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80091ee:	f7ff f8ad 	bl	800834c <HAL_GetTick>
 80091f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	2319      	movs	r3, #25
 80091fa:	2201      	movs	r2, #1
 80091fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f000 ffce 	bl	800a1a2 <I2C_WaitOnFlagUntilTimeout>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	e0d1      	b.n	80093b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2221      	movs	r2, #33	; 0x21
 8009214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2240      	movs	r2, #64	; 0x40
 800921c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2200      	movs	r2, #0
 8009224:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6a3a      	ldr	r2, [r7, #32]
 800922a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009230:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009238:	88f8      	ldrh	r0, [r7, #6]
 800923a:	893a      	ldrh	r2, [r7, #8]
 800923c:	8979      	ldrh	r1, [r7, #10]
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	9301      	str	r3, [sp, #4]
 8009242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	4603      	mov	r3, r0
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f000 fb87 	bl	800995c <I2C_RequestMemoryWrite>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d005      	beq.n	8009260 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	e0a9      	b.n	80093b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009264:	b29b      	uxth	r3, r3
 8009266:	2bff      	cmp	r3, #255	; 0xff
 8009268:	d90e      	bls.n	8009288 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	22ff      	movs	r2, #255	; 0xff
 800926e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009274:	b2da      	uxtb	r2, r3
 8009276:	8979      	ldrh	r1, [r7, #10]
 8009278:	2300      	movs	r3, #0
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f001 f937 	bl	800a4f4 <I2C_TransferConfig>
 8009286:	e00f      	b.n	80092a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800928c:	b29a      	uxth	r2, r3
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009296:	b2da      	uxtb	r2, r3
 8009298:	8979      	ldrh	r1, [r7, #10]
 800929a:	2300      	movs	r3, #0
 800929c:	9300      	str	r3, [sp, #0]
 800929e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f001 f926 	bl	800a4f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092a8:	697a      	ldr	r2, [r7, #20]
 80092aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f000 ffb8 	bl	800a222 <I2C_WaitOnTXISFlagUntilTimeout>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d001      	beq.n	80092bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e07b      	b.n	80093b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c0:	781a      	ldrb	r2, [r3, #0]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092cc:	1c5a      	adds	r2, r3, #1
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	3b01      	subs	r3, #1
 80092da:	b29a      	uxth	r2, r3
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092e4:	3b01      	subs	r3, #1
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d034      	beq.n	8009360 <HAL_I2C_Mem_Write+0x1c8>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d130      	bne.n	8009360 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009304:	2200      	movs	r2, #0
 8009306:	2180      	movs	r1, #128	; 0x80
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f000 ff4a 	bl	800a1a2 <I2C_WaitOnFlagUntilTimeout>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e04d      	b.n	80093b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800931c:	b29b      	uxth	r3, r3
 800931e:	2bff      	cmp	r3, #255	; 0xff
 8009320:	d90e      	bls.n	8009340 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	22ff      	movs	r2, #255	; 0xff
 8009326:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800932c:	b2da      	uxtb	r2, r3
 800932e:	8979      	ldrh	r1, [r7, #10]
 8009330:	2300      	movs	r3, #0
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f001 f8db 	bl	800a4f4 <I2C_TransferConfig>
 800933e:	e00f      	b.n	8009360 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009344:	b29a      	uxth	r2, r3
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800934e:	b2da      	uxtb	r2, r3
 8009350:	8979      	ldrh	r1, [r7, #10]
 8009352:	2300      	movs	r3, #0
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f001 f8ca 	bl	800a4f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009364:	b29b      	uxth	r3, r3
 8009366:	2b00      	cmp	r3, #0
 8009368:	d19e      	bne.n	80092a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800936a:	697a      	ldr	r2, [r7, #20]
 800936c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 ff97 	bl	800a2a2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	e01a      	b.n	80093b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2220      	movs	r2, #32
 8009384:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	6859      	ldr	r1, [r3, #4]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	4b0a      	ldr	r3, [pc, #40]	; (80093bc <HAL_I2C_Mem_Write+0x224>)
 8009392:	400b      	ands	r3, r1
 8009394:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2220      	movs	r2, #32
 800939a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80093ae:	2300      	movs	r3, #0
 80093b0:	e000      	b.n	80093b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80093b2:	2302      	movs	r3, #2
  }
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3718      	adds	r7, #24
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	fe00e800 	.word	0xfe00e800

080093c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b088      	sub	sp, #32
 80093c4:	af02      	add	r7, sp, #8
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	4608      	mov	r0, r1
 80093ca:	4611      	mov	r1, r2
 80093cc:	461a      	mov	r2, r3
 80093ce:	4603      	mov	r3, r0
 80093d0:	817b      	strh	r3, [r7, #10]
 80093d2:	460b      	mov	r3, r1
 80093d4:	813b      	strh	r3, [r7, #8]
 80093d6:	4613      	mov	r3, r2
 80093d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	2b20      	cmp	r3, #32
 80093e4:	f040 80fd 	bne.w	80095e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80093e8:	6a3b      	ldr	r3, [r7, #32]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d002      	beq.n	80093f4 <HAL_I2C_Mem_Read+0x34>
 80093ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d105      	bne.n	8009400 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e0f1      	b.n	80095e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009406:	2b01      	cmp	r3, #1
 8009408:	d101      	bne.n	800940e <HAL_I2C_Mem_Read+0x4e>
 800940a:	2302      	movs	r3, #2
 800940c:	e0ea      	b.n	80095e4 <HAL_I2C_Mem_Read+0x224>
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2201      	movs	r2, #1
 8009412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009416:	f7fe ff99 	bl	800834c <HAL_GetTick>
 800941a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	2319      	movs	r3, #25
 8009422:	2201      	movs	r2, #1
 8009424:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f000 feba 	bl	800a1a2 <I2C_WaitOnFlagUntilTimeout>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d001      	beq.n	8009438 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	e0d5      	b.n	80095e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2222      	movs	r2, #34	; 0x22
 800943c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2240      	movs	r2, #64	; 0x40
 8009444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6a3a      	ldr	r2, [r7, #32]
 8009452:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009458:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009460:	88f8      	ldrh	r0, [r7, #6]
 8009462:	893a      	ldrh	r2, [r7, #8]
 8009464:	8979      	ldrh	r1, [r7, #10]
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	9301      	str	r3, [sp, #4]
 800946a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	4603      	mov	r3, r0
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f000 fac7 	bl	8009a04 <I2C_RequestMemoryRead>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d005      	beq.n	8009488 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e0ad      	b.n	80095e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800948c:	b29b      	uxth	r3, r3
 800948e:	2bff      	cmp	r3, #255	; 0xff
 8009490:	d90e      	bls.n	80094b0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	22ff      	movs	r2, #255	; 0xff
 8009496:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800949c:	b2da      	uxtb	r2, r3
 800949e:	8979      	ldrh	r1, [r7, #10]
 80094a0:	4b52      	ldr	r3, [pc, #328]	; (80095ec <HAL_I2C_Mem_Read+0x22c>)
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f001 f823 	bl	800a4f4 <I2C_TransferConfig>
 80094ae:	e00f      	b.n	80094d0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	8979      	ldrh	r1, [r7, #10]
 80094c2:	4b4a      	ldr	r3, [pc, #296]	; (80095ec <HAL_I2C_Mem_Read+0x22c>)
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f001 f812 	bl	800a4f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d6:	2200      	movs	r2, #0
 80094d8:	2104      	movs	r1, #4
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f000 fe61 	bl	800a1a2 <I2C_WaitOnFlagUntilTimeout>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d001      	beq.n	80094ea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e07c      	b.n	80095e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f4:	b2d2      	uxtb	r2, r2
 80094f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fc:	1c5a      	adds	r2, r3, #1
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009506:	3b01      	subs	r3, #1
 8009508:	b29a      	uxth	r2, r3
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009512:	b29b      	uxth	r3, r3
 8009514:	3b01      	subs	r3, #1
 8009516:	b29a      	uxth	r2, r3
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009520:	b29b      	uxth	r3, r3
 8009522:	2b00      	cmp	r3, #0
 8009524:	d034      	beq.n	8009590 <HAL_I2C_Mem_Read+0x1d0>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800952a:	2b00      	cmp	r3, #0
 800952c:	d130      	bne.n	8009590 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	9300      	str	r3, [sp, #0]
 8009532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009534:	2200      	movs	r2, #0
 8009536:	2180      	movs	r1, #128	; 0x80
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f000 fe32 	bl	800a1a2 <I2C_WaitOnFlagUntilTimeout>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d001      	beq.n	8009548 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e04d      	b.n	80095e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800954c:	b29b      	uxth	r3, r3
 800954e:	2bff      	cmp	r3, #255	; 0xff
 8009550:	d90e      	bls.n	8009570 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	22ff      	movs	r2, #255	; 0xff
 8009556:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800955c:	b2da      	uxtb	r2, r3
 800955e:	8979      	ldrh	r1, [r7, #10]
 8009560:	2300      	movs	r3, #0
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f000 ffc3 	bl	800a4f4 <I2C_TransferConfig>
 800956e:	e00f      	b.n	8009590 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009574:	b29a      	uxth	r2, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800957e:	b2da      	uxtb	r2, r3
 8009580:	8979      	ldrh	r1, [r7, #10]
 8009582:	2300      	movs	r3, #0
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f000 ffb2 	bl	800a4f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009594:	b29b      	uxth	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d19a      	bne.n	80094d0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800959a:	697a      	ldr	r2, [r7, #20]
 800959c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f000 fe7f 	bl	800a2a2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e01a      	b.n	80095e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2220      	movs	r2, #32
 80095b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6859      	ldr	r1, [r3, #4]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	4b0b      	ldr	r3, [pc, #44]	; (80095f0 <HAL_I2C_Mem_Read+0x230>)
 80095c2:	400b      	ands	r3, r1
 80095c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2220      	movs	r2, #32
 80095ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80095de:	2300      	movs	r3, #0
 80095e0:	e000      	b.n	80095e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80095e2:	2302      	movs	r3, #2
  }
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3718      	adds	r7, #24
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	80002400 	.word	0x80002400
 80095f0:	fe00e800 	.word	0xfe00e800

080095f4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009610:	2b00      	cmp	r3, #0
 8009612:	d005      	beq.n	8009620 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	68f9      	ldr	r1, [r7, #12]
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	4798      	blx	r3
  }
}
 8009620:	bf00      	nop
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b086      	sub	sp, #24
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	699b      	ldr	r3, [r3, #24]
 8009636:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	0a1b      	lsrs	r3, r3, #8
 8009644:	f003 0301 	and.w	r3, r3, #1
 8009648:	2b00      	cmp	r3, #0
 800964a:	d010      	beq.n	800966e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	09db      	lsrs	r3, r3, #7
 8009650:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00a      	beq.n	800966e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800965c:	f043 0201 	orr.w	r2, r3, #1
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f44f 7280 	mov.w	r2, #256	; 0x100
 800966c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	0a9b      	lsrs	r3, r3, #10
 8009672:	f003 0301 	and.w	r3, r3, #1
 8009676:	2b00      	cmp	r3, #0
 8009678:	d010      	beq.n	800969c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	09db      	lsrs	r3, r3, #7
 800967e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00a      	beq.n	800969c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800968a:	f043 0208 	orr.w	r2, r3, #8
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800969a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	0a5b      	lsrs	r3, r3, #9
 80096a0:	f003 0301 	and.w	r3, r3, #1
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d010      	beq.n	80096ca <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	09db      	lsrs	r3, r3, #7
 80096ac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00a      	beq.n	80096ca <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096b8:	f043 0202 	orr.w	r2, r3, #2
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096c8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ce:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f003 030b 	and.w	r3, r3, #11
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d003      	beq.n	80096e2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80096da:	68f9      	ldr	r1, [r7, #12]
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 fc27 	bl	8009f30 <I2C_ITError>
  }
}
 80096e2:	bf00      	nop
 80096e4:	3718      	adds	r7, #24
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80096ea:	b480      	push	{r7}
 80096ec:	b083      	sub	sp, #12
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80096f2:	bf00      	nop
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80096fe:	b480      	push	{r7}
 8009700:	b083      	sub	sp, #12
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009706:	bf00      	nop
 8009708:	370c      	adds	r7, #12
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr

08009712 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009712:	b480      	push	{r7}
 8009714:	b083      	sub	sp, #12
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	460b      	mov	r3, r1
 800971c:	70fb      	strb	r3, [r7, #3]
 800971e:	4613      	mov	r3, r2
 8009720:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009722:	bf00      	nop
 8009724:	370c      	adds	r7, #12
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr

0800972e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800972e:	b480      	push	{r7}
 8009730:	b083      	sub	sp, #12
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8009736:	bf00      	nop
 8009738:	370c      	adds	r7, #12
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr

08009742 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009742:	b480      	push	{r7}
 8009744:	b083      	sub	sp, #12
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800974a:	bf00      	nop
 800974c:	370c      	adds	r7, #12
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr

08009756 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b086      	sub	sp, #24
 800975a:	af00      	add	r7, sp, #0
 800975c:	60f8      	str	r0, [r7, #12]
 800975e:	60b9      	str	r1, [r7, #8]
 8009760:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009766:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009772:	2b01      	cmp	r3, #1
 8009774:	d101      	bne.n	800977a <I2C_Slave_ISR_IT+0x24>
 8009776:	2302      	movs	r3, #2
 8009778:	e0ec      	b.n	8009954 <I2C_Slave_ISR_IT+0x1fe>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2201      	movs	r2, #1
 800977e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	095b      	lsrs	r3, r3, #5
 8009786:	f003 0301 	and.w	r3, r3, #1
 800978a:	2b00      	cmp	r3, #0
 800978c:	d009      	beq.n	80097a2 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	095b      	lsrs	r3, r3, #5
 8009792:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009796:	2b00      	cmp	r3, #0
 8009798:	d003      	beq.n	80097a2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800979a:	6939      	ldr	r1, [r7, #16]
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f000 fa67 	bl	8009c70 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	091b      	lsrs	r3, r3, #4
 80097a6:	f003 0301 	and.w	r3, r3, #1
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d04d      	beq.n	800984a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	091b      	lsrs	r3, r3, #4
 80097b2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d047      	beq.n	800984a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097be:	b29b      	uxth	r3, r3
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d128      	bne.n	8009816 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	2b28      	cmp	r3, #40	; 0x28
 80097ce:	d108      	bne.n	80097e2 <I2C_Slave_ISR_IT+0x8c>
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097d6:	d104      	bne.n	80097e2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80097d8:	6939      	ldr	r1, [r7, #16]
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f000 fb52 	bl	8009e84 <I2C_ITListenCplt>
 80097e0:	e032      	b.n	8009848 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b29      	cmp	r3, #41	; 0x29
 80097ec:	d10e      	bne.n	800980c <I2C_Slave_ISR_IT+0xb6>
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80097f4:	d00a      	beq.n	800980c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2210      	movs	r2, #16
 80097fc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f000 fc8d 	bl	800a11e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f000 f9d5 	bl	8009bb4 <I2C_ITSlaveSeqCplt>
 800980a:	e01d      	b.n	8009848 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2210      	movs	r2, #16
 8009812:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8009814:	e096      	b.n	8009944 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2210      	movs	r2, #16
 800981c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009822:	f043 0204 	orr.w	r2, r3, #4
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d004      	beq.n	800983a <I2C_Slave_ISR_IT+0xe4>
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009836:	f040 8085 	bne.w	8009944 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800983e:	4619      	mov	r1, r3
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f000 fb75 	bl	8009f30 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009846:	e07d      	b.n	8009944 <I2C_Slave_ISR_IT+0x1ee>
 8009848:	e07c      	b.n	8009944 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	089b      	lsrs	r3, r3, #2
 800984e:	f003 0301 	and.w	r3, r3, #1
 8009852:	2b00      	cmp	r3, #0
 8009854:	d030      	beq.n	80098b8 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	089b      	lsrs	r3, r3, #2
 800985a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800985e:	2b00      	cmp	r3, #0
 8009860:	d02a      	beq.n	80098b8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009866:	b29b      	uxth	r3, r3
 8009868:	2b00      	cmp	r3, #0
 800986a:	d018      	beq.n	800989e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009876:	b2d2      	uxtb	r2, r2
 8009878:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987e:	1c5a      	adds	r2, r3, #1
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009888:	3b01      	subs	r3, #1
 800988a:	b29a      	uxth	r2, r3
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009894:	b29b      	uxth	r3, r3
 8009896:	3b01      	subs	r3, #1
 8009898:	b29a      	uxth	r2, r3
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d14f      	bne.n	8009948 <I2C_Slave_ISR_IT+0x1f2>
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80098ae:	d04b      	beq.n	8009948 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f000 f97f 	bl	8009bb4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80098b6:	e047      	b.n	8009948 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	08db      	lsrs	r3, r3, #3
 80098bc:	f003 0301 	and.w	r3, r3, #1
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00a      	beq.n	80098da <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	08db      	lsrs	r3, r3, #3
 80098c8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d004      	beq.n	80098da <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80098d0:	6939      	ldr	r1, [r7, #16]
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f000 f8ea 	bl	8009aac <I2C_ITAddrCplt>
 80098d8:	e037      	b.n	800994a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	085b      	lsrs	r3, r3, #1
 80098de:	f003 0301 	and.w	r3, r3, #1
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d031      	beq.n	800994a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	085b      	lsrs	r3, r3, #1
 80098ea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d02b      	beq.n	800994a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d018      	beq.n	800992e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009900:	781a      	ldrb	r2, [r3, #0]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990c:	1c5a      	adds	r2, r3, #1
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009916:	b29b      	uxth	r3, r3
 8009918:	3b01      	subs	r3, #1
 800991a:	b29a      	uxth	r2, r3
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009924:	3b01      	subs	r3, #1
 8009926:	b29a      	uxth	r2, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	851a      	strh	r2, [r3, #40]	; 0x28
 800992c:	e00d      	b.n	800994a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009934:	d002      	beq.n	800993c <I2C_Slave_ISR_IT+0x1e6>
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d106      	bne.n	800994a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f000 f939 	bl	8009bb4 <I2C_ITSlaveSeqCplt>
 8009942:	e002      	b.n	800994a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8009944:	bf00      	nop
 8009946:	e000      	b.n	800994a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8009948:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2200      	movs	r2, #0
 800994e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3718      	adds	r7, #24
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b086      	sub	sp, #24
 8009960:	af02      	add	r7, sp, #8
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	4608      	mov	r0, r1
 8009966:	4611      	mov	r1, r2
 8009968:	461a      	mov	r2, r3
 800996a:	4603      	mov	r3, r0
 800996c:	817b      	strh	r3, [r7, #10]
 800996e:	460b      	mov	r3, r1
 8009970:	813b      	strh	r3, [r7, #8]
 8009972:	4613      	mov	r3, r2
 8009974:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009976:	88fb      	ldrh	r3, [r7, #6]
 8009978:	b2da      	uxtb	r2, r3
 800997a:	8979      	ldrh	r1, [r7, #10]
 800997c:	4b20      	ldr	r3, [pc, #128]	; (8009a00 <I2C_RequestMemoryWrite+0xa4>)
 800997e:	9300      	str	r3, [sp, #0]
 8009980:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f000 fdb5 	bl	800a4f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800998a:	69fa      	ldr	r2, [r7, #28]
 800998c:	69b9      	ldr	r1, [r7, #24]
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f000 fc47 	bl	800a222 <I2C_WaitOnTXISFlagUntilTimeout>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d001      	beq.n	800999e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	e02c      	b.n	80099f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800999e:	88fb      	ldrh	r3, [r7, #6]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d105      	bne.n	80099b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80099a4:	893b      	ldrh	r3, [r7, #8]
 80099a6:	b2da      	uxtb	r2, r3
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	629a      	str	r2, [r3, #40]	; 0x28
 80099ae:	e015      	b.n	80099dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80099b0:	893b      	ldrh	r3, [r7, #8]
 80099b2:	0a1b      	lsrs	r3, r3, #8
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	b2da      	uxtb	r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099be:	69fa      	ldr	r2, [r7, #28]
 80099c0:	69b9      	ldr	r1, [r7, #24]
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f000 fc2d 	bl	800a222 <I2C_WaitOnTXISFlagUntilTimeout>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d001      	beq.n	80099d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e012      	b.n	80099f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80099d2:	893b      	ldrh	r3, [r7, #8]
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	9300      	str	r3, [sp, #0]
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	2200      	movs	r2, #0
 80099e4:	2180      	movs	r1, #128	; 0x80
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f000 fbdb 	bl	800a1a2 <I2C_WaitOnFlagUntilTimeout>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d001      	beq.n	80099f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e000      	b.n	80099f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	80002000 	.word	0x80002000

08009a04 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af02      	add	r7, sp, #8
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	4608      	mov	r0, r1
 8009a0e:	4611      	mov	r1, r2
 8009a10:	461a      	mov	r2, r3
 8009a12:	4603      	mov	r3, r0
 8009a14:	817b      	strh	r3, [r7, #10]
 8009a16:	460b      	mov	r3, r1
 8009a18:	813b      	strh	r3, [r7, #8]
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009a1e:	88fb      	ldrh	r3, [r7, #6]
 8009a20:	b2da      	uxtb	r2, r3
 8009a22:	8979      	ldrh	r1, [r7, #10]
 8009a24:	4b20      	ldr	r3, [pc, #128]	; (8009aa8 <I2C_RequestMemoryRead+0xa4>)
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	2300      	movs	r3, #0
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f000 fd62 	bl	800a4f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a30:	69fa      	ldr	r2, [r7, #28]
 8009a32:	69b9      	ldr	r1, [r7, #24]
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f000 fbf4 	bl	800a222 <I2C_WaitOnTXISFlagUntilTimeout>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d001      	beq.n	8009a44 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	e02c      	b.n	8009a9e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a44:	88fb      	ldrh	r3, [r7, #6]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d105      	bne.n	8009a56 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009a4a:	893b      	ldrh	r3, [r7, #8]
 8009a4c:	b2da      	uxtb	r2, r3
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	629a      	str	r2, [r3, #40]	; 0x28
 8009a54:	e015      	b.n	8009a82 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009a56:	893b      	ldrh	r3, [r7, #8]
 8009a58:	0a1b      	lsrs	r3, r3, #8
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	b2da      	uxtb	r2, r3
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a64:	69fa      	ldr	r2, [r7, #28]
 8009a66:	69b9      	ldr	r1, [r7, #24]
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f000 fbda 	bl	800a222 <I2C_WaitOnTXISFlagUntilTimeout>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d001      	beq.n	8009a78 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	e012      	b.n	8009a9e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009a78:	893b      	ldrh	r3, [r7, #8]
 8009a7a:	b2da      	uxtb	r2, r3
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	2140      	movs	r1, #64	; 0x40
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f000 fb88 	bl	800a1a2 <I2C_WaitOnFlagUntilTimeout>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d001      	beq.n	8009a9c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e000      	b.n	8009a9e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	80002000 	.word	0x80002000

08009aac <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009ac2:	2b28      	cmp	r3, #40	; 0x28
 8009ac4:	d16a      	bne.n	8009b9c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	699b      	ldr	r3, [r3, #24]
 8009acc:	0c1b      	lsrs	r3, r3, #16
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	f003 0301 	and.w	r3, r3, #1
 8009ad4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	0c1b      	lsrs	r3, r3, #16
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009ae4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009af2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009b00:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d138      	bne.n	8009b7c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8009b0a:	897b      	ldrh	r3, [r7, #10]
 8009b0c:	09db      	lsrs	r3, r3, #7
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	89bb      	ldrh	r3, [r7, #12]
 8009b12:	4053      	eors	r3, r2
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	f003 0306 	and.w	r3, r3, #6
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d11c      	bne.n	8009b58 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8009b1e:	897b      	ldrh	r3, [r7, #10]
 8009b20:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b26:	1c5a      	adds	r2, r3, #1
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d13b      	bne.n	8009bac <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2208      	movs	r2, #8
 8009b40:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009b4a:	89ba      	ldrh	r2, [r7, #12]
 8009b4c:	7bfb      	ldrb	r3, [r7, #15]
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f7ff fdde 	bl	8009712 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009b56:	e029      	b.n	8009bac <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8009b58:	893b      	ldrh	r3, [r7, #8]
 8009b5a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009b5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 fcf9 	bl	800a558 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009b6e:	89ba      	ldrh	r2, [r7, #12]
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
 8009b72:	4619      	mov	r1, r3
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f7ff fdcc 	bl	8009712 <HAL_I2C_AddrCallback>
}
 8009b7a:	e017      	b.n	8009bac <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009b7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fce9 	bl	800a558 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009b8e:	89ba      	ldrh	r2, [r7, #12]
 8009b90:	7bfb      	ldrb	r3, [r7, #15]
 8009b92:	4619      	mov	r1, r3
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f7ff fdbc 	bl	8009712 <HAL_I2C_AddrCallback>
}
 8009b9a:	e007      	b.n	8009bac <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2208      	movs	r2, #8
 8009ba2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8009bac:	bf00      	nop
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	0b9b      	lsrs	r3, r3, #14
 8009bd0:	f003 0301 	and.w	r3, r3, #1
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d008      	beq.n	8009bea <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009be6:	601a      	str	r2, [r3, #0]
 8009be8:	e00d      	b.n	8009c06 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	0bdb      	lsrs	r3, r3, #15
 8009bee:	f003 0301 	and.w	r3, r3, #1
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d007      	beq.n	8009c06 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009c04:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	2b29      	cmp	r3, #41	; 0x29
 8009c10:	d112      	bne.n	8009c38 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2228      	movs	r2, #40	; 0x28
 8009c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2221      	movs	r2, #33	; 0x21
 8009c1e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009c20:	2101      	movs	r1, #1
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fc98 	bl	800a558 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f7ff fd5a 	bl	80096ea <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009c36:	e017      	b.n	8009c68 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	2b2a      	cmp	r3, #42	; 0x2a
 8009c42:	d111      	bne.n	8009c68 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2228      	movs	r2, #40	; 0x28
 8009c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2222      	movs	r2, #34	; 0x22
 8009c50:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009c52:	2102      	movs	r1, #2
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fc7f 	bl	800a558 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f7ff fd4b 	bl	80096fe <HAL_I2C_SlaveRxCpltCallback>
}
 8009c68:	bf00      	nop
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c8c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2220      	movs	r2, #32
 8009c94:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009c96:	7bfb      	ldrb	r3, [r7, #15]
 8009c98:	2b21      	cmp	r3, #33	; 0x21
 8009c9a:	d002      	beq.n	8009ca2 <I2C_ITSlaveCplt+0x32>
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
 8009c9e:	2b29      	cmp	r3, #41	; 0x29
 8009ca0:	d108      	bne.n	8009cb4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009ca2:	f248 0101 	movw	r1, #32769	; 0x8001
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 fc56 	bl	800a558 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2221      	movs	r2, #33	; 0x21
 8009cb0:	631a      	str	r2, [r3, #48]	; 0x30
 8009cb2:	e00d      	b.n	8009cd0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009cb4:	7bfb      	ldrb	r3, [r7, #15]
 8009cb6:	2b22      	cmp	r3, #34	; 0x22
 8009cb8:	d002      	beq.n	8009cc0 <I2C_ITSlaveCplt+0x50>
 8009cba:	7bfb      	ldrb	r3, [r7, #15]
 8009cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8009cbe:	d107      	bne.n	8009cd0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8009cc0:	f248 0102 	movw	r1, #32770	; 0x8002
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 fc47 	bl	800a558 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2222      	movs	r2, #34	; 0x22
 8009cce:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	685a      	ldr	r2, [r3, #4]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009cde:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	6859      	ldr	r1, [r3, #4]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	4b64      	ldr	r3, [pc, #400]	; (8009e7c <I2C_ITSlaveCplt+0x20c>)
 8009cec:	400b      	ands	r3, r1
 8009cee:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 fa14 	bl	800a11e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	0b9b      	lsrs	r3, r3, #14
 8009cfa:	f003 0301 	and.w	r3, r3, #1
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d013      	beq.n	8009d2a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009d10:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d020      	beq.n	8009d5c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d28:	e018      	b.n	8009d5c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	0bdb      	lsrs	r3, r3, #15
 8009d2e:	f003 0301 	and.w	r3, r3, #1
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d012      	beq.n	8009d5c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d44:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d006      	beq.n	8009d5c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	089b      	lsrs	r3, r3, #2
 8009d60:	f003 0301 	and.w	r3, r3, #1
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d020      	beq.n	8009daa <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	f023 0304 	bic.w	r3, r3, #4
 8009d6e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7a:	b2d2      	uxtb	r2, r2
 8009d7c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d82:	1c5a      	adds	r2, r3, #1
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00c      	beq.n	8009daa <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d94:	3b01      	subs	r3, #1
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	3b01      	subs	r3, #1
 8009da4:	b29a      	uxth	r2, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d005      	beq.n	8009dc0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009db8:	f043 0204 	orr.w	r2, r3, #4
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d010      	beq.n	8009df8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dda:	4619      	mov	r1, r3
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 f8a7 	bl	8009f30 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	2b28      	cmp	r3, #40	; 0x28
 8009dec:	d141      	bne.n	8009e72 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009dee:	6979      	ldr	r1, [r7, #20]
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 f847 	bl	8009e84 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009df6:	e03c      	b.n	8009e72 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009e00:	d014      	beq.n	8009e2c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7ff fed6 	bl	8009bb4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a1d      	ldr	r2, [pc, #116]	; (8009e80 <I2C_ITSlaveCplt+0x210>)
 8009e0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2220      	movs	r2, #32
 8009e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f7ff fc82 	bl	800972e <HAL_I2C_ListenCpltCallback>
}
 8009e2a:	e022      	b.n	8009e72 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	2b22      	cmp	r3, #34	; 0x22
 8009e36:	d10e      	bne.n	8009e56 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2220      	movs	r2, #32
 8009e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7ff fc55 	bl	80096fe <HAL_I2C_SlaveRxCpltCallback>
}
 8009e54:	e00d      	b.n	8009e72 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2220      	movs	r2, #32
 8009e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f7ff fc3c 	bl	80096ea <HAL_I2C_SlaveTxCpltCallback>
}
 8009e72:	bf00      	nop
 8009e74:	3718      	adds	r7, #24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	fe00e800 	.word	0xfe00e800
 8009e80:	ffff0000 	.word	0xffff0000

08009e84 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a26      	ldr	r2, [pc, #152]	; (8009f2c <I2C_ITListenCplt+0xa8>)
 8009e92:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2220      	movs	r2, #32
 8009e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	089b      	lsrs	r3, r3, #2
 8009eb4:	f003 0301 	and.w	r3, r3, #1
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d022      	beq.n	8009f02 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec6:	b2d2      	uxtb	r2, r2
 8009ec8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ece:	1c5a      	adds	r2, r3, #1
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d012      	beq.n	8009f02 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	b29a      	uxth	r2, r3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009efa:	f043 0204 	orr.w	r2, r3, #4
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009f02:	f248 0103 	movw	r1, #32771	; 0x8003
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fb26 	bl	800a558 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2210      	movs	r2, #16
 8009f12:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f7ff fc06 	bl	800972e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009f22:	bf00      	nop
 8009f24:	3708      	adds	r7, #8
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	ffff0000 	.word	0xffff0000

08009f30 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a5d      	ldr	r2, [pc, #372]	; (800a0c4 <I2C_ITError+0x194>)
 8009f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	431a      	orrs	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009f62:	7bfb      	ldrb	r3, [r7, #15]
 8009f64:	2b28      	cmp	r3, #40	; 0x28
 8009f66:	d005      	beq.n	8009f74 <I2C_ITError+0x44>
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
 8009f6a:	2b29      	cmp	r3, #41	; 0x29
 8009f6c:	d002      	beq.n	8009f74 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009f6e:	7bfb      	ldrb	r3, [r7, #15]
 8009f70:	2b2a      	cmp	r3, #42	; 0x2a
 8009f72:	d10b      	bne.n	8009f8c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009f74:	2103      	movs	r1, #3
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 faee 	bl	800a558 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2228      	movs	r2, #40	; 0x28
 8009f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a50      	ldr	r2, [pc, #320]	; (800a0c8 <I2C_ITError+0x198>)
 8009f88:	635a      	str	r2, [r3, #52]	; 0x34
 8009f8a:	e011      	b.n	8009fb0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009f8c:	f248 0103 	movw	r1, #32771	; 0x8003
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fae1 	bl	800a558 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	2b60      	cmp	r3, #96	; 0x60
 8009fa0:	d003      	beq.n	8009faa <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2220      	movs	r2, #32
 8009fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d039      	beq.n	800a032 <I2C_ITError+0x102>
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	2b11      	cmp	r3, #17
 8009fc2:	d002      	beq.n	8009fca <I2C_ITError+0x9a>
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	2b21      	cmp	r3, #33	; 0x21
 8009fc8:	d133      	bne.n	800a032 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fd8:	d107      	bne.n	8009fea <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009fe8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fe fd04 	bl	80089fc <HAL_DMA_GetState>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d017      	beq.n	800a02a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ffe:	4a33      	ldr	r2, [pc, #204]	; (800a0cc <I2C_ITError+0x19c>)
 800a000:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a00e:	4618      	mov	r0, r3
 800a010:	f7fe fc04 	bl	800881c <HAL_DMA_Abort_IT>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d04d      	beq.n	800a0b6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a024:	4610      	mov	r0, r2
 800a026:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a028:	e045      	b.n	800a0b6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 f850 	bl	800a0d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a030:	e041      	b.n	800a0b6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a036:	2b00      	cmp	r3, #0
 800a038:	d039      	beq.n	800a0ae <I2C_ITError+0x17e>
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	2b12      	cmp	r3, #18
 800a03e:	d002      	beq.n	800a046 <I2C_ITError+0x116>
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2b22      	cmp	r3, #34	; 0x22
 800a044:	d133      	bne.n	800a0ae <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a054:	d107      	bne.n	800a066 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a064:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fe fcc6 	bl	80089fc <HAL_DMA_GetState>
 800a070:	4603      	mov	r3, r0
 800a072:	2b01      	cmp	r3, #1
 800a074:	d017      	beq.n	800a0a6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a07a:	4a14      	ldr	r2, [pc, #80]	; (800a0cc <I2C_ITError+0x19c>)
 800a07c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7fe fbc6 	bl	800881c <HAL_DMA_Abort_IT>
 800a090:	4603      	mov	r3, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d011      	beq.n	800a0ba <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a0a0:	4610      	mov	r0, r2
 800a0a2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a0a4:	e009      	b.n	800a0ba <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f812 	bl	800a0d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a0ac:	e005      	b.n	800a0ba <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 f80e 	bl	800a0d0 <I2C_TreatErrorCallback>
  }
}
 800a0b4:	e002      	b.n	800a0bc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a0b6:	bf00      	nop
 800a0b8:	e000      	b.n	800a0bc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a0ba:	bf00      	nop
}
 800a0bc:	bf00      	nop
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	ffff0000 	.word	0xffff0000
 800a0c8:	08009757 	.word	0x08009757
 800a0cc:	0800a167 	.word	0x0800a167

0800a0d0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	2b60      	cmp	r3, #96	; 0x60
 800a0e2:	d10e      	bne.n	800a102 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2220      	movs	r2, #32
 800a0e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f7ff fb21 	bl	8009742 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a100:	e009      	b.n	800a116 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f7f9 fcf5 	bl	8003b00 <HAL_I2C_ErrorCallback>
}
 800a116:	bf00      	nop
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a11e:	b480      	push	{r7}
 800a120:	b083      	sub	sp, #12
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	699b      	ldr	r3, [r3, #24]
 800a12c:	f003 0302 	and.w	r3, r3, #2
 800a130:	2b02      	cmp	r3, #2
 800a132:	d103      	bne.n	800a13c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2200      	movs	r2, #0
 800a13a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	699b      	ldr	r3, [r3, #24]
 800a142:	f003 0301 	and.w	r3, r3, #1
 800a146:	2b01      	cmp	r3, #1
 800a148:	d007      	beq.n	800a15a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	699a      	ldr	r2, [r3, #24]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f042 0201 	orr.w	r2, r2, #1
 800a158:	619a      	str	r2, [r3, #24]
  }
}
 800a15a:	bf00      	nop
 800a15c:	370c      	adds	r7, #12
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr

0800a166 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b084      	sub	sp, #16
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a172:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d003      	beq.n	800a184 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a180:	2200      	movs	r2, #0
 800a182:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d003      	beq.n	800a194 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a190:	2200      	movs	r2, #0
 800a192:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f7ff ff9b 	bl	800a0d0 <I2C_TreatErrorCallback>
}
 800a19a:	bf00      	nop
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b084      	sub	sp, #16
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	60f8      	str	r0, [r7, #12]
 800a1aa:	60b9      	str	r1, [r7, #8]
 800a1ac:	603b      	str	r3, [r7, #0]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a1b2:	e022      	b.n	800a1fa <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1ba:	d01e      	beq.n	800a1fa <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1bc:	f7fe f8c6 	bl	800834c <HAL_GetTick>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	683a      	ldr	r2, [r7, #0]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d302      	bcc.n	800a1d2 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d113      	bne.n	800a1fa <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1d6:	f043 0220 	orr.w	r2, r3, #32
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2220      	movs	r2, #32
 800a1e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e00f      	b.n	800a21a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	699a      	ldr	r2, [r3, #24]
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	4013      	ands	r3, r2
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	429a      	cmp	r2, r3
 800a208:	bf0c      	ite	eq
 800a20a:	2301      	moveq	r3, #1
 800a20c:	2300      	movne	r3, #0
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	461a      	mov	r2, r3
 800a212:	79fb      	ldrb	r3, [r7, #7]
 800a214:	429a      	cmp	r2, r3
 800a216:	d0cd      	beq.n	800a1b4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b084      	sub	sp, #16
 800a226:	af00      	add	r7, sp, #0
 800a228:	60f8      	str	r0, [r7, #12]
 800a22a:	60b9      	str	r1, [r7, #8]
 800a22c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a22e:	e02c      	b.n	800a28a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	68b9      	ldr	r1, [r7, #8]
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 f871 	bl	800a31c <I2C_IsErrorOccurred>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d001      	beq.n	800a244 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	e02a      	b.n	800a29a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a24a:	d01e      	beq.n	800a28a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a24c:	f7fe f87e 	bl	800834c <HAL_GetTick>
 800a250:	4602      	mov	r2, r0
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	1ad3      	subs	r3, r2, r3
 800a256:	68ba      	ldr	r2, [r7, #8]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d302      	bcc.n	800a262 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d113      	bne.n	800a28a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a266:	f043 0220 	orr.w	r2, r3, #32
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2220      	movs	r2, #32
 800a272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2200      	movs	r2, #0
 800a27a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a286:	2301      	movs	r3, #1
 800a288:	e007      	b.n	800a29a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	699b      	ldr	r3, [r3, #24]
 800a290:	f003 0302 	and.w	r3, r3, #2
 800a294:	2b02      	cmp	r3, #2
 800a296:	d1cb      	bne.n	800a230 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b084      	sub	sp, #16
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	60f8      	str	r0, [r7, #12]
 800a2aa:	60b9      	str	r1, [r7, #8]
 800a2ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a2ae:	e028      	b.n	800a302 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	68b9      	ldr	r1, [r7, #8]
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f000 f831 	bl	800a31c <I2C_IsErrorOccurred>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d001      	beq.n	800a2c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e026      	b.n	800a312 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2c4:	f7fe f842 	bl	800834c <HAL_GetTick>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	1ad3      	subs	r3, r2, r3
 800a2ce:	68ba      	ldr	r2, [r7, #8]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d302      	bcc.n	800a2da <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d113      	bne.n	800a302 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2de:	f043 0220 	orr.w	r2, r3, #32
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2220      	movs	r2, #32
 800a2ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e007      	b.n	800a312 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	f003 0320 	and.w	r3, r3, #32
 800a30c:	2b20      	cmp	r3, #32
 800a30e:	d1cf      	bne.n	800a2b0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
	...

0800a31c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b08a      	sub	sp, #40	; 0x28
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	699b      	ldr	r3, [r3, #24]
 800a334:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a336:	2300      	movs	r3, #0
 800a338:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	f003 0310 	and.w	r3, r3, #16
 800a344:	2b00      	cmp	r3, #0
 800a346:	d075      	beq.n	800a434 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2210      	movs	r2, #16
 800a34e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a350:	e056      	b.n	800a400 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a358:	d052      	beq.n	800a400 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a35a:	f7fd fff7 	bl	800834c <HAL_GetTick>
 800a35e:	4602      	mov	r2, r0
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	1ad3      	subs	r3, r2, r3
 800a364:	68ba      	ldr	r2, [r7, #8]
 800a366:	429a      	cmp	r2, r3
 800a368:	d302      	bcc.n	800a370 <I2C_IsErrorOccurred+0x54>
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d147      	bne.n	800a400 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a37a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a382:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	699b      	ldr	r3, [r3, #24]
 800a38a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a38e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a392:	d12e      	bne.n	800a3f2 <I2C_IsErrorOccurred+0xd6>
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a39a:	d02a      	beq.n	800a3f2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800a39c:	7cfb      	ldrb	r3, [r7, #19]
 800a39e:	2b20      	cmp	r3, #32
 800a3a0:	d027      	beq.n	800a3f2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	685a      	ldr	r2, [r3, #4]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a3b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a3b2:	f7fd ffcb 	bl	800834c <HAL_GetTick>
 800a3b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a3b8:	e01b      	b.n	800a3f2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a3ba:	f7fd ffc7 	bl	800834c <HAL_GetTick>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	1ad3      	subs	r3, r2, r3
 800a3c4:	2b19      	cmp	r3, #25
 800a3c6:	d914      	bls.n	800a3f2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3cc:	f043 0220 	orr.w	r2, r3, #32
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2220      	movs	r2, #32
 800a3d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	699b      	ldr	r3, [r3, #24]
 800a3f8:	f003 0320 	and.w	r3, r3, #32
 800a3fc:	2b20      	cmp	r3, #32
 800a3fe:	d1dc      	bne.n	800a3ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	699b      	ldr	r3, [r3, #24]
 800a406:	f003 0320 	and.w	r3, r3, #32
 800a40a:	2b20      	cmp	r3, #32
 800a40c:	d003      	beq.n	800a416 <I2C_IsErrorOccurred+0xfa>
 800a40e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a412:	2b00      	cmp	r3, #0
 800a414:	d09d      	beq.n	800a352 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d103      	bne.n	800a426 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	2220      	movs	r2, #32
 800a424:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a426:	6a3b      	ldr	r3, [r7, #32]
 800a428:	f043 0304 	orr.w	r3, r3, #4
 800a42c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	699b      	ldr	r3, [r3, #24]
 800a43a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00b      	beq.n	800a45e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a446:	6a3b      	ldr	r3, [r7, #32]
 800a448:	f043 0301 	orr.w	r3, r3, #1
 800a44c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a456:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00b      	beq.n	800a480 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a468:	6a3b      	ldr	r3, [r7, #32]
 800a46a:	f043 0308 	orr.w	r3, r3, #8
 800a46e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a478:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a47a:	2301      	movs	r3, #1
 800a47c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00b      	beq.n	800a4a2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a48a:	6a3b      	ldr	r3, [r7, #32]
 800a48c:	f043 0302 	orr.w	r3, r3, #2
 800a490:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a49a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a4a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d01c      	beq.n	800a4e4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f7ff fe37 	bl	800a11e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	6859      	ldr	r1, [r3, #4]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	4b0d      	ldr	r3, [pc, #52]	; (800a4f0 <I2C_IsErrorOccurred+0x1d4>)
 800a4bc:	400b      	ands	r3, r1
 800a4be:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4c4:	6a3b      	ldr	r3, [r7, #32]
 800a4c6:	431a      	orrs	r2, r3
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2220      	movs	r2, #32
 800a4d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a4e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3728      	adds	r7, #40	; 0x28
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	fe00e800 	.word	0xfe00e800

0800a4f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b087      	sub	sp, #28
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	607b      	str	r3, [r7, #4]
 800a4fe:	460b      	mov	r3, r1
 800a500:	817b      	strh	r3, [r7, #10]
 800a502:	4613      	mov	r3, r2
 800a504:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a506:	897b      	ldrh	r3, [r7, #10]
 800a508:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a50c:	7a7b      	ldrb	r3, [r7, #9]
 800a50e:	041b      	lsls	r3, r3, #16
 800a510:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a514:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a51a:	6a3b      	ldr	r3, [r7, #32]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a522:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	685a      	ldr	r2, [r3, #4]
 800a52a:	6a3b      	ldr	r3, [r7, #32]
 800a52c:	0d5b      	lsrs	r3, r3, #21
 800a52e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a532:	4b08      	ldr	r3, [pc, #32]	; (800a554 <I2C_TransferConfig+0x60>)
 800a534:	430b      	orrs	r3, r1
 800a536:	43db      	mvns	r3, r3
 800a538:	ea02 0103 	and.w	r1, r2, r3
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	697a      	ldr	r2, [r7, #20]
 800a542:	430a      	orrs	r2, r1
 800a544:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a546:	bf00      	nop
 800a548:	371c      	adds	r7, #28
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	03ff63ff 	.word	0x03ff63ff

0800a558 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a558:	b480      	push	{r7}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	460b      	mov	r3, r1
 800a562:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a564:	2300      	movs	r3, #0
 800a566:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a568:	887b      	ldrh	r3, [r7, #2]
 800a56a:	f003 0301 	and.w	r3, r3, #1
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00f      	beq.n	800a592 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800a578:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a580:	b2db      	uxtb	r3, r3
 800a582:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a586:	2b28      	cmp	r3, #40	; 0x28
 800a588:	d003      	beq.n	800a592 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a590:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a592:	887b      	ldrh	r3, [r7, #2]
 800a594:	f003 0302 	and.w	r3, r3, #2
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00f      	beq.n	800a5bc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800a5a2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a5b0:	2b28      	cmp	r3, #40	; 0x28
 800a5b2:	d003      	beq.n	800a5bc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a5ba:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a5bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	da03      	bge.n	800a5cc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a5ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a5cc:	887b      	ldrh	r3, [r7, #2]
 800a5ce:	2b10      	cmp	r3, #16
 800a5d0:	d103      	bne.n	800a5da <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a5d8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a5da:	887b      	ldrh	r3, [r7, #2]
 800a5dc:	2b20      	cmp	r3, #32
 800a5de:	d103      	bne.n	800a5e8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f043 0320 	orr.w	r3, r3, #32
 800a5e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a5e8:	887b      	ldrh	r3, [r7, #2]
 800a5ea:	2b40      	cmp	r3, #64	; 0x40
 800a5ec:	d103      	bne.n	800a5f6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5f4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	6819      	ldr	r1, [r3, #0]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	43da      	mvns	r2, r3
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	400a      	ands	r2, r1
 800a606:	601a      	str	r2, [r3, #0]
}
 800a608:	bf00      	nop
 800a60a:	3714      	adds	r7, #20
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a624:	b2db      	uxtb	r3, r3
 800a626:	2b20      	cmp	r3, #32
 800a628:	d138      	bne.n	800a69c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a630:	2b01      	cmp	r3, #1
 800a632:	d101      	bne.n	800a638 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a634:	2302      	movs	r3, #2
 800a636:	e032      	b.n	800a69e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2224      	movs	r2, #36	; 0x24
 800a644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f022 0201 	bic.w	r2, r2, #1
 800a656:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a666:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	6819      	ldr	r1, [r3, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	430a      	orrs	r2, r1
 800a676:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f042 0201 	orr.w	r2, r2, #1
 800a686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2220      	movs	r2, #32
 800a68c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a698:	2300      	movs	r3, #0
 800a69a:	e000      	b.n	800a69e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a69c:	2302      	movs	r3, #2
  }
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	370c      	adds	r7, #12
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	b085      	sub	sp, #20
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
 800a6b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	2b20      	cmp	r3, #32
 800a6be:	d139      	bne.n	800a734 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d101      	bne.n	800a6ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a6ca:	2302      	movs	r3, #2
 800a6cc:	e033      	b.n	800a736 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2224      	movs	r2, #36	; 0x24
 800a6da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f022 0201 	bic.w	r2, r2, #1
 800a6ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a6fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	021b      	lsls	r3, r3, #8
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	4313      	orrs	r3, r2
 800a706:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f042 0201 	orr.w	r2, r2, #1
 800a71e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2220      	movs	r2, #32
 800a724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a730:	2300      	movs	r3, #0
 800a732:	e000      	b.n	800a736 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a734:	2302      	movs	r3, #2
  }
}
 800a736:	4618      	mov	r0, r3
 800a738:	3714      	adds	r7, #20
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
	...

0800a744 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a74c:	4b0b      	ldr	r3, [pc, #44]	; (800a77c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800a74e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a750:	4a0a      	ldr	r2, [pc, #40]	; (800a77c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800a752:	f043 0301 	orr.w	r3, r3, #1
 800a756:	6613      	str	r3, [r2, #96]	; 0x60
 800a758:	4b08      	ldr	r3, [pc, #32]	; (800a77c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800a75a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a75c:	f003 0301 	and.w	r3, r3, #1
 800a760:	60fb      	str	r3, [r7, #12]
 800a762:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800a764:	4b06      	ldr	r3, [pc, #24]	; (800a780 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800a766:	685a      	ldr	r2, [r3, #4]
 800a768:	4905      	ldr	r1, [pc, #20]	; (800a780 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4313      	orrs	r3, r2
 800a76e:	604b      	str	r3, [r1, #4]
}
 800a770:	bf00      	nop
 800a772:	3714      	adds	r7, #20
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr
 800a77c:	40021000 	.word	0x40021000
 800a780:	40010000 	.word	0x40010000

0800a784 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	460b      	mov	r3, r1
 800a78e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10c      	bne.n	800a7b0 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800a796:	4b13      	ldr	r3, [pc, #76]	; (800a7e4 <HAL_PWR_EnterSLEEPMode+0x60>)
 800a798:	695b      	ldr	r3, [r3, #20]
 800a79a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a79e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7a2:	d10e      	bne.n	800a7c2 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800a7a4:	f000 f8b6 	bl	800a914 <HAL_PWREx_DisableLowPowerRunMode>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d009      	beq.n	800a7c2 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 800a7ae:	e016      	b.n	800a7de <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 800a7b0:	4b0c      	ldr	r3, [pc, #48]	; (800a7e4 <HAL_PWR_EnterSLEEPMode+0x60>)
 800a7b2:	695b      	ldr	r3, [r3, #20]
 800a7b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7bc:	d001      	beq.n	800a7c2 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800a7be:	f000 f899 	bl	800a8f4 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a7c2:	4b09      	ldr	r3, [pc, #36]	; (800a7e8 <HAL_PWR_EnterSLEEPMode+0x64>)
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	4a08      	ldr	r2, [pc, #32]	; (800a7e8 <HAL_PWR_EnterSLEEPMode+0x64>)
 800a7c8:	f023 0304 	bic.w	r3, r3, #4
 800a7cc:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800a7ce:	78fb      	ldrb	r3, [r7, #3]
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d101      	bne.n	800a7d8 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800a7d4:	bf30      	wfi
 800a7d6:	e002      	b.n	800a7de <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800a7d8:	bf40      	sev
    __WFE();
 800a7da:	bf20      	wfe
    __WFE();
 800a7dc:	bf20      	wfe
  }

}
 800a7de:	3708      	adds	r7, #8
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	40007000 	.word	0x40007000
 800a7e8:	e000ed00 	.word	0xe000ed00

0800a7ec <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800a7f0:	4b05      	ldr	r3, [pc, #20]	; (800a808 <HAL_PWR_EnableSleepOnExit+0x1c>)
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	4a04      	ldr	r2, [pc, #16]	; (800a808 <HAL_PWR_EnableSleepOnExit+0x1c>)
 800a7f6:	f043 0302 	orr.w	r3, r3, #2
 800a7fa:	6113      	str	r3, [r2, #16]
}
 800a7fc:	bf00      	nop
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr
 800a806:	bf00      	nop
 800a808:	e000ed00 	.word	0xe000ed00

0800a80c <HAL_PWR_DisableSleepOnExit>:
  * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 800a80c:	b480      	push	{r7}
 800a80e:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800a810:	4b05      	ldr	r3, [pc, #20]	; (800a828 <HAL_PWR_DisableSleepOnExit+0x1c>)
 800a812:	691b      	ldr	r3, [r3, #16]
 800a814:	4a04      	ldr	r2, [pc, #16]	; (800a828 <HAL_PWR_DisableSleepOnExit+0x1c>)
 800a816:	f023 0302 	bic.w	r3, r3, #2
 800a81a:	6113      	str	r3, [r2, #16]
}
 800a81c:	bf00      	nop
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop
 800a828:	e000ed00 	.word	0xe000ed00

0800a82c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a82c:	b480      	push	{r7}
 800a82e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a830:	4b04      	ldr	r3, [pc, #16]	; (800a844 <HAL_PWREx_GetVoltageRange+0x18>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800a838:	4618      	mov	r0, r3
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop
 800a844:	40007000 	.word	0x40007000

0800a848 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a848:	b480      	push	{r7}
 800a84a:	b085      	sub	sp, #20
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a856:	d130      	bne.n	800a8ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a858:	4b23      	ldr	r3, [pc, #140]	; (800a8e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a864:	d038      	beq.n	800a8d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a866:	4b20      	ldr	r3, [pc, #128]	; (800a8e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a86e:	4a1e      	ldr	r2, [pc, #120]	; (800a8e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a870:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a874:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a876:	4b1d      	ldr	r3, [pc, #116]	; (800a8ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2232      	movs	r2, #50	; 0x32
 800a87c:	fb02 f303 	mul.w	r3, r2, r3
 800a880:	4a1b      	ldr	r2, [pc, #108]	; (800a8f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a882:	fba2 2303 	umull	r2, r3, r2, r3
 800a886:	0c9b      	lsrs	r3, r3, #18
 800a888:	3301      	adds	r3, #1
 800a88a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a88c:	e002      	b.n	800a894 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	3b01      	subs	r3, #1
 800a892:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a894:	4b14      	ldr	r3, [pc, #80]	; (800a8e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a896:	695b      	ldr	r3, [r3, #20]
 800a898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a89c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8a0:	d102      	bne.n	800a8a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1f2      	bne.n	800a88e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a8a8:	4b0f      	ldr	r3, [pc, #60]	; (800a8e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a8aa:	695b      	ldr	r3, [r3, #20]
 800a8ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8b4:	d110      	bne.n	800a8d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a8b6:	2303      	movs	r3, #3
 800a8b8:	e00f      	b.n	800a8da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a8ba:	4b0b      	ldr	r3, [pc, #44]	; (800a8e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a8c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8c6:	d007      	beq.n	800a8d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a8c8:	4b07      	ldr	r3, [pc, #28]	; (800a8e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a8d0:	4a05      	ldr	r2, [pc, #20]	; (800a8e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a8d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a8d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3714      	adds	r7, #20
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop
 800a8e8:	40007000 	.word	0x40007000
 800a8ec:	200001e0 	.word	0x200001e0
 800a8f0:	431bde83 	.word	0x431bde83

0800a8f4 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800a8f8:	4b05      	ldr	r3, [pc, #20]	; (800a910 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a04      	ldr	r2, [pc, #16]	; (800a910 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800a8fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a902:	6013      	str	r3, [r2, #0]
}
 800a904:	bf00      	nop
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr
 800a90e:	bf00      	nop
 800a910:	40007000 	.word	0x40007000

0800a914 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800a91a:	4b17      	ldr	r3, [pc, #92]	; (800a978 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a16      	ldr	r2, [pc, #88]	; (800a978 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a920:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a924:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a926:	4b15      	ldr	r3, [pc, #84]	; (800a97c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2232      	movs	r2, #50	; 0x32
 800a92c:	fb02 f303 	mul.w	r3, r2, r3
 800a930:	4a13      	ldr	r2, [pc, #76]	; (800a980 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 800a932:	fba2 2303 	umull	r2, r3, r2, r3
 800a936:	0c9b      	lsrs	r3, r3, #18
 800a938:	3301      	adds	r3, #1
 800a93a:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a93c:	e002      	b.n	800a944 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	3b01      	subs	r3, #1
 800a942:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a944:	4b0c      	ldr	r3, [pc, #48]	; (800a978 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a946:	695b      	ldr	r3, [r3, #20]
 800a948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a94c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a950:	d102      	bne.n	800a958 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d1f2      	bne.n	800a93e <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800a958:	4b07      	ldr	r3, [pc, #28]	; (800a978 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a95a:	695b      	ldr	r3, [r3, #20]
 800a95c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a964:	d101      	bne.n	800a96a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800a966:	2303      	movs	r3, #3
 800a968:	e000      	b.n	800a96c <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800a96a:	2300      	movs	r3, #0
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	370c      	adds	r7, #12
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr
 800a978:	40007000 	.word	0x40007000
 800a97c:	200001e0 	.word	0x200001e0
 800a980:	431bde83 	.word	0x431bde83

0800a984 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b088      	sub	sp, #32
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d101      	bne.n	800a996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a992:	2301      	movs	r3, #1
 800a994:	e3ca      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a996:	4b97      	ldr	r3, [pc, #604]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	f003 030c 	and.w	r3, r3, #12
 800a99e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a9a0:	4b94      	ldr	r3, [pc, #592]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	f003 0303 	and.w	r3, r3, #3
 800a9a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f003 0310 	and.w	r3, r3, #16
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	f000 80e4 	beq.w	800ab80 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a9b8:	69bb      	ldr	r3, [r7, #24]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d007      	beq.n	800a9ce <HAL_RCC_OscConfig+0x4a>
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	2b0c      	cmp	r3, #12
 800a9c2:	f040 808b 	bne.w	800aadc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	f040 8087 	bne.w	800aadc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a9ce:	4b89      	ldr	r3, [pc, #548]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f003 0302 	and.w	r3, r3, #2
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d005      	beq.n	800a9e6 <HAL_RCC_OscConfig+0x62>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	699b      	ldr	r3, [r3, #24]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d101      	bne.n	800a9e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e3a2      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6a1a      	ldr	r2, [r3, #32]
 800a9ea:	4b82      	ldr	r3, [pc, #520]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f003 0308 	and.w	r3, r3, #8
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d004      	beq.n	800aa00 <HAL_RCC_OscConfig+0x7c>
 800a9f6:	4b7f      	ldr	r3, [pc, #508]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9fe:	e005      	b.n	800aa0c <HAL_RCC_OscConfig+0x88>
 800aa00:	4b7c      	ldr	r3, [pc, #496]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800aa02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa06:	091b      	lsrs	r3, r3, #4
 800aa08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d223      	bcs.n	800aa58 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a1b      	ldr	r3, [r3, #32]
 800aa14:	4618      	mov	r0, r3
 800aa16:	f000 fd87 	bl	800b528 <RCC_SetFlashLatencyFromMSIRange>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d001      	beq.n	800aa24 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800aa20:	2301      	movs	r3, #1
 800aa22:	e383      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800aa24:	4b73      	ldr	r3, [pc, #460]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a72      	ldr	r2, [pc, #456]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800aa2a:	f043 0308 	orr.w	r3, r3, #8
 800aa2e:	6013      	str	r3, [r2, #0]
 800aa30:	4b70      	ldr	r3, [pc, #448]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6a1b      	ldr	r3, [r3, #32]
 800aa3c:	496d      	ldr	r1, [pc, #436]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800aa42:	4b6c      	ldr	r3, [pc, #432]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	69db      	ldr	r3, [r3, #28]
 800aa4e:	021b      	lsls	r3, r3, #8
 800aa50:	4968      	ldr	r1, [pc, #416]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800aa52:	4313      	orrs	r3, r2
 800aa54:	604b      	str	r3, [r1, #4]
 800aa56:	e025      	b.n	800aaa4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800aa58:	4b66      	ldr	r3, [pc, #408]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a65      	ldr	r2, [pc, #404]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800aa5e:	f043 0308 	orr.w	r3, r3, #8
 800aa62:	6013      	str	r3, [r2, #0]
 800aa64:	4b63      	ldr	r3, [pc, #396]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6a1b      	ldr	r3, [r3, #32]
 800aa70:	4960      	ldr	r1, [pc, #384]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800aa72:	4313      	orrs	r3, r2
 800aa74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800aa76:	4b5f      	ldr	r3, [pc, #380]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	69db      	ldr	r3, [r3, #28]
 800aa82:	021b      	lsls	r3, r3, #8
 800aa84:	495b      	ldr	r1, [pc, #364]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800aa86:	4313      	orrs	r3, r2
 800aa88:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800aa8a:	69bb      	ldr	r3, [r7, #24]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d109      	bne.n	800aaa4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a1b      	ldr	r3, [r3, #32]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f000 fd47 	bl	800b528 <RCC_SetFlashLatencyFromMSIRange>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d001      	beq.n	800aaa4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e343      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aaa4:	f000 fc4a 	bl	800b33c <HAL_RCC_GetSysClockFreq>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	4b52      	ldr	r3, [pc, #328]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	091b      	lsrs	r3, r3, #4
 800aab0:	f003 030f 	and.w	r3, r3, #15
 800aab4:	4950      	ldr	r1, [pc, #320]	; (800abf8 <HAL_RCC_OscConfig+0x274>)
 800aab6:	5ccb      	ldrb	r3, [r1, r3]
 800aab8:	f003 031f 	and.w	r3, r3, #31
 800aabc:	fa22 f303 	lsr.w	r3, r2, r3
 800aac0:	4a4e      	ldr	r2, [pc, #312]	; (800abfc <HAL_RCC_OscConfig+0x278>)
 800aac2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800aac4:	4b4e      	ldr	r3, [pc, #312]	; (800ac00 <HAL_RCC_OscConfig+0x27c>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7fc fc59 	bl	8007380 <HAL_InitTick>
 800aace:	4603      	mov	r3, r0
 800aad0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800aad2:	7bfb      	ldrb	r3, [r7, #15]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d052      	beq.n	800ab7e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800aad8:	7bfb      	ldrb	r3, [r7, #15]
 800aada:	e327      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	699b      	ldr	r3, [r3, #24]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d032      	beq.n	800ab4a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800aae4:	4b43      	ldr	r3, [pc, #268]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a42      	ldr	r2, [pc, #264]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800aaea:	f043 0301 	orr.w	r3, r3, #1
 800aaee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800aaf0:	f7fd fc2c 	bl	800834c <HAL_GetTick>
 800aaf4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800aaf6:	e008      	b.n	800ab0a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800aaf8:	f7fd fc28 	bl	800834c <HAL_GetTick>
 800aafc:	4602      	mov	r2, r0
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	1ad3      	subs	r3, r2, r3
 800ab02:	2b02      	cmp	r3, #2
 800ab04:	d901      	bls.n	800ab0a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800ab06:	2303      	movs	r3, #3
 800ab08:	e310      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ab0a:	4b3a      	ldr	r3, [pc, #232]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f003 0302 	and.w	r3, r3, #2
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d0f0      	beq.n	800aaf8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ab16:	4b37      	ldr	r3, [pc, #220]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a36      	ldr	r2, [pc, #216]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800ab1c:	f043 0308 	orr.w	r3, r3, #8
 800ab20:	6013      	str	r3, [r2, #0]
 800ab22:	4b34      	ldr	r3, [pc, #208]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a1b      	ldr	r3, [r3, #32]
 800ab2e:	4931      	ldr	r1, [pc, #196]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800ab30:	4313      	orrs	r3, r2
 800ab32:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ab34:	4b2f      	ldr	r3, [pc, #188]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	69db      	ldr	r3, [r3, #28]
 800ab40:	021b      	lsls	r3, r3, #8
 800ab42:	492c      	ldr	r1, [pc, #176]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800ab44:	4313      	orrs	r3, r2
 800ab46:	604b      	str	r3, [r1, #4]
 800ab48:	e01a      	b.n	800ab80 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ab4a:	4b2a      	ldr	r3, [pc, #168]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a29      	ldr	r2, [pc, #164]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800ab50:	f023 0301 	bic.w	r3, r3, #1
 800ab54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ab56:	f7fd fbf9 	bl	800834c <HAL_GetTick>
 800ab5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ab5c:	e008      	b.n	800ab70 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ab5e:	f7fd fbf5 	bl	800834c <HAL_GetTick>
 800ab62:	4602      	mov	r2, r0
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	d901      	bls.n	800ab70 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	e2dd      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ab70:	4b20      	ldr	r3, [pc, #128]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f003 0302 	and.w	r3, r3, #2
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d1f0      	bne.n	800ab5e <HAL_RCC_OscConfig+0x1da>
 800ab7c:	e000      	b.n	800ab80 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ab7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 0301 	and.w	r3, r3, #1
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d074      	beq.n	800ac76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800ab8c:	69bb      	ldr	r3, [r7, #24]
 800ab8e:	2b08      	cmp	r3, #8
 800ab90:	d005      	beq.n	800ab9e <HAL_RCC_OscConfig+0x21a>
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	2b0c      	cmp	r3, #12
 800ab96:	d10e      	bne.n	800abb6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	2b03      	cmp	r3, #3
 800ab9c:	d10b      	bne.n	800abb6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab9e:	4b15      	ldr	r3, [pc, #84]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d064      	beq.n	800ac74 <HAL_RCC_OscConfig+0x2f0>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d160      	bne.n	800ac74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	e2ba      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abbe:	d106      	bne.n	800abce <HAL_RCC_OscConfig+0x24a>
 800abc0:	4b0c      	ldr	r3, [pc, #48]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a0b      	ldr	r2, [pc, #44]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800abc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abca:	6013      	str	r3, [r2, #0]
 800abcc:	e026      	b.n	800ac1c <HAL_RCC_OscConfig+0x298>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800abd6:	d115      	bne.n	800ac04 <HAL_RCC_OscConfig+0x280>
 800abd8:	4b06      	ldr	r3, [pc, #24]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a05      	ldr	r2, [pc, #20]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800abde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800abe2:	6013      	str	r3, [r2, #0]
 800abe4:	4b03      	ldr	r3, [pc, #12]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a02      	ldr	r2, [pc, #8]	; (800abf4 <HAL_RCC_OscConfig+0x270>)
 800abea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abee:	6013      	str	r3, [r2, #0]
 800abf0:	e014      	b.n	800ac1c <HAL_RCC_OscConfig+0x298>
 800abf2:	bf00      	nop
 800abf4:	40021000 	.word	0x40021000
 800abf8:	0801a194 	.word	0x0801a194
 800abfc:	200001e0 	.word	0x200001e0
 800ac00:	20000210 	.word	0x20000210
 800ac04:	4ba0      	ldr	r3, [pc, #640]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a9f      	ldr	r2, [pc, #636]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800ac0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac0e:	6013      	str	r3, [r2, #0]
 800ac10:	4b9d      	ldr	r3, [pc, #628]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a9c      	ldr	r2, [pc, #624]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800ac16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d013      	beq.n	800ac4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac24:	f7fd fb92 	bl	800834c <HAL_GetTick>
 800ac28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ac2a:	e008      	b.n	800ac3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ac2c:	f7fd fb8e 	bl	800834c <HAL_GetTick>
 800ac30:	4602      	mov	r2, r0
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	1ad3      	subs	r3, r2, r3
 800ac36:	2b64      	cmp	r3, #100	; 0x64
 800ac38:	d901      	bls.n	800ac3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800ac3a:	2303      	movs	r3, #3
 800ac3c:	e276      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ac3e:	4b92      	ldr	r3, [pc, #584]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d0f0      	beq.n	800ac2c <HAL_RCC_OscConfig+0x2a8>
 800ac4a:	e014      	b.n	800ac76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac4c:	f7fd fb7e 	bl	800834c <HAL_GetTick>
 800ac50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ac52:	e008      	b.n	800ac66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ac54:	f7fd fb7a 	bl	800834c <HAL_GetTick>
 800ac58:	4602      	mov	r2, r0
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	1ad3      	subs	r3, r2, r3
 800ac5e:	2b64      	cmp	r3, #100	; 0x64
 800ac60:	d901      	bls.n	800ac66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ac62:	2303      	movs	r3, #3
 800ac64:	e262      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ac66:	4b88      	ldr	r3, [pc, #544]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d1f0      	bne.n	800ac54 <HAL_RCC_OscConfig+0x2d0>
 800ac72:	e000      	b.n	800ac76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f003 0302 	and.w	r3, r3, #2
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d060      	beq.n	800ad44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	2b04      	cmp	r3, #4
 800ac86:	d005      	beq.n	800ac94 <HAL_RCC_OscConfig+0x310>
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	2b0c      	cmp	r3, #12
 800ac8c:	d119      	bne.n	800acc2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	2b02      	cmp	r3, #2
 800ac92:	d116      	bne.n	800acc2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ac94:	4b7c      	ldr	r3, [pc, #496]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d005      	beq.n	800acac <HAL_RCC_OscConfig+0x328>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d101      	bne.n	800acac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	e23f      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800acac:	4b76      	ldr	r3, [pc, #472]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	691b      	ldr	r3, [r3, #16]
 800acb8:	061b      	lsls	r3, r3, #24
 800acba:	4973      	ldr	r1, [pc, #460]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800acbc:	4313      	orrs	r3, r2
 800acbe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800acc0:	e040      	b.n	800ad44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d023      	beq.n	800ad12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800acca:	4b6f      	ldr	r3, [pc, #444]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a6e      	ldr	r2, [pc, #440]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800acd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acd6:	f7fd fb39 	bl	800834c <HAL_GetTick>
 800acda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800acdc:	e008      	b.n	800acf0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800acde:	f7fd fb35 	bl	800834c <HAL_GetTick>
 800ace2:	4602      	mov	r2, r0
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	1ad3      	subs	r3, r2, r3
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d901      	bls.n	800acf0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800acec:	2303      	movs	r3, #3
 800acee:	e21d      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800acf0:	4b65      	ldr	r3, [pc, #404]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d0f0      	beq.n	800acde <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800acfc:	4b62      	ldr	r3, [pc, #392]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	691b      	ldr	r3, [r3, #16]
 800ad08:	061b      	lsls	r3, r3, #24
 800ad0a:	495f      	ldr	r1, [pc, #380]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	604b      	str	r3, [r1, #4]
 800ad10:	e018      	b.n	800ad44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ad12:	4b5d      	ldr	r3, [pc, #372]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a5c      	ldr	r2, [pc, #368]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800ad18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad1e:	f7fd fb15 	bl	800834c <HAL_GetTick>
 800ad22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ad24:	e008      	b.n	800ad38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad26:	f7fd fb11 	bl	800834c <HAL_GetTick>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	1ad3      	subs	r3, r2, r3
 800ad30:	2b02      	cmp	r3, #2
 800ad32:	d901      	bls.n	800ad38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800ad34:	2303      	movs	r3, #3
 800ad36:	e1f9      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ad38:	4b53      	ldr	r3, [pc, #332]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1f0      	bne.n	800ad26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f003 0308 	and.w	r3, r3, #8
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d03c      	beq.n	800adca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	695b      	ldr	r3, [r3, #20]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d01c      	beq.n	800ad92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ad58:	4b4b      	ldr	r3, [pc, #300]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800ad5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad5e:	4a4a      	ldr	r2, [pc, #296]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800ad60:	f043 0301 	orr.w	r3, r3, #1
 800ad64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad68:	f7fd faf0 	bl	800834c <HAL_GetTick>
 800ad6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ad6e:	e008      	b.n	800ad82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad70:	f7fd faec 	bl	800834c <HAL_GetTick>
 800ad74:	4602      	mov	r2, r0
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	1ad3      	subs	r3, r2, r3
 800ad7a:	2b02      	cmp	r3, #2
 800ad7c:	d901      	bls.n	800ad82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800ad7e:	2303      	movs	r3, #3
 800ad80:	e1d4      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ad82:	4b41      	ldr	r3, [pc, #260]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800ad84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad88:	f003 0302 	and.w	r3, r3, #2
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d0ef      	beq.n	800ad70 <HAL_RCC_OscConfig+0x3ec>
 800ad90:	e01b      	b.n	800adca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ad92:	4b3d      	ldr	r3, [pc, #244]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800ad94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad98:	4a3b      	ldr	r2, [pc, #236]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800ad9a:	f023 0301 	bic.w	r3, r3, #1
 800ad9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ada2:	f7fd fad3 	bl	800834c <HAL_GetTick>
 800ada6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ada8:	e008      	b.n	800adbc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800adaa:	f7fd facf 	bl	800834c <HAL_GetTick>
 800adae:	4602      	mov	r2, r0
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	1ad3      	subs	r3, r2, r3
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	d901      	bls.n	800adbc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800adb8:	2303      	movs	r3, #3
 800adba:	e1b7      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800adbc:	4b32      	ldr	r3, [pc, #200]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800adbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800adc2:	f003 0302 	and.w	r3, r3, #2
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1ef      	bne.n	800adaa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f003 0304 	and.w	r3, r3, #4
 800add2:	2b00      	cmp	r3, #0
 800add4:	f000 80a6 	beq.w	800af24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800add8:	2300      	movs	r3, #0
 800adda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800addc:	4b2a      	ldr	r3, [pc, #168]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800adde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ade0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10d      	bne.n	800ae04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ade8:	4b27      	ldr	r3, [pc, #156]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800adea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adec:	4a26      	ldr	r2, [pc, #152]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800adee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800adf2:	6593      	str	r3, [r2, #88]	; 0x58
 800adf4:	4b24      	ldr	r3, [pc, #144]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800adf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adfc:	60bb      	str	r3, [r7, #8]
 800adfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae00:	2301      	movs	r3, #1
 800ae02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ae04:	4b21      	ldr	r3, [pc, #132]	; (800ae8c <HAL_RCC_OscConfig+0x508>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d118      	bne.n	800ae42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae10:	4b1e      	ldr	r3, [pc, #120]	; (800ae8c <HAL_RCC_OscConfig+0x508>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a1d      	ldr	r2, [pc, #116]	; (800ae8c <HAL_RCC_OscConfig+0x508>)
 800ae16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ae1c:	f7fd fa96 	bl	800834c <HAL_GetTick>
 800ae20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ae22:	e008      	b.n	800ae36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae24:	f7fd fa92 	bl	800834c <HAL_GetTick>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	1ad3      	subs	r3, r2, r3
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	d901      	bls.n	800ae36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800ae32:	2303      	movs	r3, #3
 800ae34:	e17a      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ae36:	4b15      	ldr	r3, [pc, #84]	; (800ae8c <HAL_RCC_OscConfig+0x508>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d0f0      	beq.n	800ae24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d108      	bne.n	800ae5c <HAL_RCC_OscConfig+0x4d8>
 800ae4a:	4b0f      	ldr	r3, [pc, #60]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800ae4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae50:	4a0d      	ldr	r2, [pc, #52]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800ae52:	f043 0301 	orr.w	r3, r3, #1
 800ae56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ae5a:	e029      	b.n	800aeb0 <HAL_RCC_OscConfig+0x52c>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	2b05      	cmp	r3, #5
 800ae62:	d115      	bne.n	800ae90 <HAL_RCC_OscConfig+0x50c>
 800ae64:	4b08      	ldr	r3, [pc, #32]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800ae66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae6a:	4a07      	ldr	r2, [pc, #28]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800ae6c:	f043 0304 	orr.w	r3, r3, #4
 800ae70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ae74:	4b04      	ldr	r3, [pc, #16]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800ae76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae7a:	4a03      	ldr	r2, [pc, #12]	; (800ae88 <HAL_RCC_OscConfig+0x504>)
 800ae7c:	f043 0301 	orr.w	r3, r3, #1
 800ae80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ae84:	e014      	b.n	800aeb0 <HAL_RCC_OscConfig+0x52c>
 800ae86:	bf00      	nop
 800ae88:	40021000 	.word	0x40021000
 800ae8c:	40007000 	.word	0x40007000
 800ae90:	4b9c      	ldr	r3, [pc, #624]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800ae92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae96:	4a9b      	ldr	r2, [pc, #620]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800ae98:	f023 0301 	bic.w	r3, r3, #1
 800ae9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aea0:	4b98      	ldr	r3, [pc, #608]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800aea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aea6:	4a97      	ldr	r2, [pc, #604]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800aea8:	f023 0304 	bic.w	r3, r3, #4
 800aeac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d016      	beq.n	800aee6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aeb8:	f7fd fa48 	bl	800834c <HAL_GetTick>
 800aebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aebe:	e00a      	b.n	800aed6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aec0:	f7fd fa44 	bl	800834c <HAL_GetTick>
 800aec4:	4602      	mov	r2, r0
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	1ad3      	subs	r3, r2, r3
 800aeca:	f241 3288 	movw	r2, #5000	; 0x1388
 800aece:	4293      	cmp	r3, r2
 800aed0:	d901      	bls.n	800aed6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800aed2:	2303      	movs	r3, #3
 800aed4:	e12a      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aed6:	4b8b      	ldr	r3, [pc, #556]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800aed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aedc:	f003 0302 	and.w	r3, r3, #2
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d0ed      	beq.n	800aec0 <HAL_RCC_OscConfig+0x53c>
 800aee4:	e015      	b.n	800af12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aee6:	f7fd fa31 	bl	800834c <HAL_GetTick>
 800aeea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aeec:	e00a      	b.n	800af04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aeee:	f7fd fa2d 	bl	800834c <HAL_GetTick>
 800aef2:	4602      	mov	r2, r0
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	1ad3      	subs	r3, r2, r3
 800aef8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d901      	bls.n	800af04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800af00:	2303      	movs	r3, #3
 800af02:	e113      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800af04:	4b7f      	ldr	r3, [pc, #508]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800af06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af0a:	f003 0302 	and.w	r3, r3, #2
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1ed      	bne.n	800aeee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800af12:	7ffb      	ldrb	r3, [r7, #31]
 800af14:	2b01      	cmp	r3, #1
 800af16:	d105      	bne.n	800af24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af18:	4b7a      	ldr	r3, [pc, #488]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800af1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af1c:	4a79      	ldr	r2, [pc, #484]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800af1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af22:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f000 80fe 	beq.w	800b12a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af32:	2b02      	cmp	r3, #2
 800af34:	f040 80d0 	bne.w	800b0d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800af38:	4b72      	ldr	r3, [pc, #456]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	f003 0203 	and.w	r2, r3, #3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af48:	429a      	cmp	r2, r3
 800af4a:	d130      	bne.n	800afae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af56:	3b01      	subs	r3, #1
 800af58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d127      	bne.n	800afae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af68:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d11f      	bne.n	800afae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800af78:	2a07      	cmp	r2, #7
 800af7a:	bf14      	ite	ne
 800af7c:	2201      	movne	r2, #1
 800af7e:	2200      	moveq	r2, #0
 800af80:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800af82:	4293      	cmp	r3, r2
 800af84:	d113      	bne.n	800afae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af90:	085b      	lsrs	r3, r3, #1
 800af92:	3b01      	subs	r3, #1
 800af94:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800af96:	429a      	cmp	r2, r3
 800af98:	d109      	bne.n	800afae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa4:	085b      	lsrs	r3, r3, #1
 800afa6:	3b01      	subs	r3, #1
 800afa8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800afaa:	429a      	cmp	r2, r3
 800afac:	d06e      	beq.n	800b08c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	2b0c      	cmp	r3, #12
 800afb2:	d069      	beq.n	800b088 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800afb4:	4b53      	ldr	r3, [pc, #332]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d105      	bne.n	800afcc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800afc0:	4b50      	ldr	r3, [pc, #320]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d001      	beq.n	800afd0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	e0ad      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800afd0:	4b4c      	ldr	r3, [pc, #304]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a4b      	ldr	r2, [pc, #300]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800afd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800afda:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800afdc:	f7fd f9b6 	bl	800834c <HAL_GetTick>
 800afe0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800afe2:	e008      	b.n	800aff6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afe4:	f7fd f9b2 	bl	800834c <HAL_GetTick>
 800afe8:	4602      	mov	r2, r0
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	1ad3      	subs	r3, r2, r3
 800afee:	2b02      	cmp	r3, #2
 800aff0:	d901      	bls.n	800aff6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800aff2:	2303      	movs	r3, #3
 800aff4:	e09a      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aff6:	4b43      	ldr	r3, [pc, #268]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800affe:	2b00      	cmp	r3, #0
 800b000:	d1f0      	bne.n	800afe4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b002:	4b40      	ldr	r3, [pc, #256]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800b004:	68da      	ldr	r2, [r3, #12]
 800b006:	4b40      	ldr	r3, [pc, #256]	; (800b108 <HAL_RCC_OscConfig+0x784>)
 800b008:	4013      	ands	r3, r2
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b012:	3a01      	subs	r2, #1
 800b014:	0112      	lsls	r2, r2, #4
 800b016:	4311      	orrs	r1, r2
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b01c:	0212      	lsls	r2, r2, #8
 800b01e:	4311      	orrs	r1, r2
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b024:	0852      	lsrs	r2, r2, #1
 800b026:	3a01      	subs	r2, #1
 800b028:	0552      	lsls	r2, r2, #21
 800b02a:	4311      	orrs	r1, r2
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b030:	0852      	lsrs	r2, r2, #1
 800b032:	3a01      	subs	r2, #1
 800b034:	0652      	lsls	r2, r2, #25
 800b036:	4311      	orrs	r1, r2
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b03c:	0912      	lsrs	r2, r2, #4
 800b03e:	0452      	lsls	r2, r2, #17
 800b040:	430a      	orrs	r2, r1
 800b042:	4930      	ldr	r1, [pc, #192]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800b044:	4313      	orrs	r3, r2
 800b046:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b048:	4b2e      	ldr	r3, [pc, #184]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a2d      	ldr	r2, [pc, #180]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800b04e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b052:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b054:	4b2b      	ldr	r3, [pc, #172]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800b056:	68db      	ldr	r3, [r3, #12]
 800b058:	4a2a      	ldr	r2, [pc, #168]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800b05a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b05e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b060:	f7fd f974 	bl	800834c <HAL_GetTick>
 800b064:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b066:	e008      	b.n	800b07a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b068:	f7fd f970 	bl	800834c <HAL_GetTick>
 800b06c:	4602      	mov	r2, r0
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	2b02      	cmp	r3, #2
 800b074:	d901      	bls.n	800b07a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800b076:	2303      	movs	r3, #3
 800b078:	e058      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b07a:	4b22      	ldr	r3, [pc, #136]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b082:	2b00      	cmp	r3, #0
 800b084:	d0f0      	beq.n	800b068 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b086:	e050      	b.n	800b12a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	e04f      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b08c:	4b1d      	ldr	r3, [pc, #116]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b094:	2b00      	cmp	r3, #0
 800b096:	d148      	bne.n	800b12a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b098:	4b1a      	ldr	r3, [pc, #104]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a19      	ldr	r2, [pc, #100]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800b09e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b0a4:	4b17      	ldr	r3, [pc, #92]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	4a16      	ldr	r2, [pc, #88]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800b0aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b0b0:	f7fd f94c 	bl	800834c <HAL_GetTick>
 800b0b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b0b6:	e008      	b.n	800b0ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0b8:	f7fd f948 	bl	800834c <HAL_GetTick>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	1ad3      	subs	r3, r2, r3
 800b0c2:	2b02      	cmp	r3, #2
 800b0c4:	d901      	bls.n	800b0ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800b0c6:	2303      	movs	r3, #3
 800b0c8:	e030      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b0ca:	4b0e      	ldr	r3, [pc, #56]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d0f0      	beq.n	800b0b8 <HAL_RCC_OscConfig+0x734>
 800b0d6:	e028      	b.n	800b12a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	2b0c      	cmp	r3, #12
 800b0dc:	d023      	beq.n	800b126 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0de:	4b09      	ldr	r3, [pc, #36]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a08      	ldr	r2, [pc, #32]	; (800b104 <HAL_RCC_OscConfig+0x780>)
 800b0e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b0e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0ea:	f7fd f92f 	bl	800834c <HAL_GetTick>
 800b0ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b0f0:	e00c      	b.n	800b10c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0f2:	f7fd f92b 	bl	800834c <HAL_GetTick>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	1ad3      	subs	r3, r2, r3
 800b0fc:	2b02      	cmp	r3, #2
 800b0fe:	d905      	bls.n	800b10c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800b100:	2303      	movs	r3, #3
 800b102:	e013      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
 800b104:	40021000 	.word	0x40021000
 800b108:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b10c:	4b09      	ldr	r3, [pc, #36]	; (800b134 <HAL_RCC_OscConfig+0x7b0>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b114:	2b00      	cmp	r3, #0
 800b116:	d1ec      	bne.n	800b0f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800b118:	4b06      	ldr	r3, [pc, #24]	; (800b134 <HAL_RCC_OscConfig+0x7b0>)
 800b11a:	68da      	ldr	r2, [r3, #12]
 800b11c:	4905      	ldr	r1, [pc, #20]	; (800b134 <HAL_RCC_OscConfig+0x7b0>)
 800b11e:	4b06      	ldr	r3, [pc, #24]	; (800b138 <HAL_RCC_OscConfig+0x7b4>)
 800b120:	4013      	ands	r3, r2
 800b122:	60cb      	str	r3, [r1, #12]
 800b124:	e001      	b.n	800b12a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b126:	2301      	movs	r3, #1
 800b128:	e000      	b.n	800b12c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3720      	adds	r7, #32
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}
 800b134:	40021000 	.word	0x40021000
 800b138:	feeefffc 	.word	0xfeeefffc

0800b13c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d101      	bne.n	800b150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b14c:	2301      	movs	r3, #1
 800b14e:	e0e7      	b.n	800b320 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b150:	4b75      	ldr	r3, [pc, #468]	; (800b328 <HAL_RCC_ClockConfig+0x1ec>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f003 0307 	and.w	r3, r3, #7
 800b158:	683a      	ldr	r2, [r7, #0]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d910      	bls.n	800b180 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b15e:	4b72      	ldr	r3, [pc, #456]	; (800b328 <HAL_RCC_ClockConfig+0x1ec>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f023 0207 	bic.w	r2, r3, #7
 800b166:	4970      	ldr	r1, [pc, #448]	; (800b328 <HAL_RCC_ClockConfig+0x1ec>)
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	4313      	orrs	r3, r2
 800b16c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b16e:	4b6e      	ldr	r3, [pc, #440]	; (800b328 <HAL_RCC_ClockConfig+0x1ec>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f003 0307 	and.w	r3, r3, #7
 800b176:	683a      	ldr	r2, [r7, #0]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d001      	beq.n	800b180 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b17c:	2301      	movs	r3, #1
 800b17e:	e0cf      	b.n	800b320 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f003 0302 	and.w	r3, r3, #2
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d010      	beq.n	800b1ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	689a      	ldr	r2, [r3, #8]
 800b190:	4b66      	ldr	r3, [pc, #408]	; (800b32c <HAL_RCC_ClockConfig+0x1f0>)
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b198:	429a      	cmp	r2, r3
 800b19a:	d908      	bls.n	800b1ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b19c:	4b63      	ldr	r3, [pc, #396]	; (800b32c <HAL_RCC_ClockConfig+0x1f0>)
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	4960      	ldr	r1, [pc, #384]	; (800b32c <HAL_RCC_ClockConfig+0x1f0>)
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f003 0301 	and.w	r3, r3, #1
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d04c      	beq.n	800b254 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	2b03      	cmp	r3, #3
 800b1c0:	d107      	bne.n	800b1d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b1c2:	4b5a      	ldr	r3, [pc, #360]	; (800b32c <HAL_RCC_ClockConfig+0x1f0>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d121      	bne.n	800b212 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e0a6      	b.n	800b320 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	2b02      	cmp	r3, #2
 800b1d8:	d107      	bne.n	800b1ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b1da:	4b54      	ldr	r3, [pc, #336]	; (800b32c <HAL_RCC_ClockConfig+0x1f0>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d115      	bne.n	800b212 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	e09a      	b.n	800b320 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d107      	bne.n	800b202 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b1f2:	4b4e      	ldr	r3, [pc, #312]	; (800b32c <HAL_RCC_ClockConfig+0x1f0>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f003 0302 	and.w	r3, r3, #2
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d109      	bne.n	800b212 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b1fe:	2301      	movs	r3, #1
 800b200:	e08e      	b.n	800b320 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b202:	4b4a      	ldr	r3, [pc, #296]	; (800b32c <HAL_RCC_ClockConfig+0x1f0>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d101      	bne.n	800b212 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	e086      	b.n	800b320 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b212:	4b46      	ldr	r3, [pc, #280]	; (800b32c <HAL_RCC_ClockConfig+0x1f0>)
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	f023 0203 	bic.w	r2, r3, #3
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	4943      	ldr	r1, [pc, #268]	; (800b32c <HAL_RCC_ClockConfig+0x1f0>)
 800b220:	4313      	orrs	r3, r2
 800b222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b224:	f7fd f892 	bl	800834c <HAL_GetTick>
 800b228:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b22a:	e00a      	b.n	800b242 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b22c:	f7fd f88e 	bl	800834c <HAL_GetTick>
 800b230:	4602      	mov	r2, r0
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	1ad3      	subs	r3, r2, r3
 800b236:	f241 3288 	movw	r2, #5000	; 0x1388
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d901      	bls.n	800b242 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800b23e:	2303      	movs	r3, #3
 800b240:	e06e      	b.n	800b320 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b242:	4b3a      	ldr	r3, [pc, #232]	; (800b32c <HAL_RCC_ClockConfig+0x1f0>)
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	f003 020c 	and.w	r2, r3, #12
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	429a      	cmp	r2, r3
 800b252:	d1eb      	bne.n	800b22c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f003 0302 	and.w	r3, r3, #2
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d010      	beq.n	800b282 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	689a      	ldr	r2, [r3, #8]
 800b264:	4b31      	ldr	r3, [pc, #196]	; (800b32c <HAL_RCC_ClockConfig+0x1f0>)
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d208      	bcs.n	800b282 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b270:	4b2e      	ldr	r3, [pc, #184]	; (800b32c <HAL_RCC_ClockConfig+0x1f0>)
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	689b      	ldr	r3, [r3, #8]
 800b27c:	492b      	ldr	r1, [pc, #172]	; (800b32c <HAL_RCC_ClockConfig+0x1f0>)
 800b27e:	4313      	orrs	r3, r2
 800b280:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b282:	4b29      	ldr	r3, [pc, #164]	; (800b328 <HAL_RCC_ClockConfig+0x1ec>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f003 0307 	and.w	r3, r3, #7
 800b28a:	683a      	ldr	r2, [r7, #0]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d210      	bcs.n	800b2b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b290:	4b25      	ldr	r3, [pc, #148]	; (800b328 <HAL_RCC_ClockConfig+0x1ec>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f023 0207 	bic.w	r2, r3, #7
 800b298:	4923      	ldr	r1, [pc, #140]	; (800b328 <HAL_RCC_ClockConfig+0x1ec>)
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	4313      	orrs	r3, r2
 800b29e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2a0:	4b21      	ldr	r3, [pc, #132]	; (800b328 <HAL_RCC_ClockConfig+0x1ec>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f003 0307 	and.w	r3, r3, #7
 800b2a8:	683a      	ldr	r2, [r7, #0]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d001      	beq.n	800b2b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e036      	b.n	800b320 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f003 0304 	and.w	r3, r3, #4
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d008      	beq.n	800b2d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b2be:	4b1b      	ldr	r3, [pc, #108]	; (800b32c <HAL_RCC_ClockConfig+0x1f0>)
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	4918      	ldr	r1, [pc, #96]	; (800b32c <HAL_RCC_ClockConfig+0x1f0>)
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f003 0308 	and.w	r3, r3, #8
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d009      	beq.n	800b2f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b2dc:	4b13      	ldr	r3, [pc, #76]	; (800b32c <HAL_RCC_ClockConfig+0x1f0>)
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	691b      	ldr	r3, [r3, #16]
 800b2e8:	00db      	lsls	r3, r3, #3
 800b2ea:	4910      	ldr	r1, [pc, #64]	; (800b32c <HAL_RCC_ClockConfig+0x1f0>)
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b2f0:	f000 f824 	bl	800b33c <HAL_RCC_GetSysClockFreq>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	4b0d      	ldr	r3, [pc, #52]	; (800b32c <HAL_RCC_ClockConfig+0x1f0>)
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	091b      	lsrs	r3, r3, #4
 800b2fc:	f003 030f 	and.w	r3, r3, #15
 800b300:	490b      	ldr	r1, [pc, #44]	; (800b330 <HAL_RCC_ClockConfig+0x1f4>)
 800b302:	5ccb      	ldrb	r3, [r1, r3]
 800b304:	f003 031f 	and.w	r3, r3, #31
 800b308:	fa22 f303 	lsr.w	r3, r2, r3
 800b30c:	4a09      	ldr	r2, [pc, #36]	; (800b334 <HAL_RCC_ClockConfig+0x1f8>)
 800b30e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b310:	4b09      	ldr	r3, [pc, #36]	; (800b338 <HAL_RCC_ClockConfig+0x1fc>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4618      	mov	r0, r3
 800b316:	f7fc f833 	bl	8007380 <HAL_InitTick>
 800b31a:	4603      	mov	r3, r0
 800b31c:	72fb      	strb	r3, [r7, #11]

  return status;
 800b31e:	7afb      	ldrb	r3, [r7, #11]
}
 800b320:	4618      	mov	r0, r3
 800b322:	3710      	adds	r7, #16
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	40022000 	.word	0x40022000
 800b32c:	40021000 	.word	0x40021000
 800b330:	0801a194 	.word	0x0801a194
 800b334:	200001e0 	.word	0x200001e0
 800b338:	20000210 	.word	0x20000210

0800b33c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b089      	sub	sp, #36	; 0x24
 800b340:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b342:	2300      	movs	r3, #0
 800b344:	61fb      	str	r3, [r7, #28]
 800b346:	2300      	movs	r3, #0
 800b348:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b34a:	4b3e      	ldr	r3, [pc, #248]	; (800b444 <HAL_RCC_GetSysClockFreq+0x108>)
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	f003 030c 	and.w	r3, r3, #12
 800b352:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b354:	4b3b      	ldr	r3, [pc, #236]	; (800b444 <HAL_RCC_GetSysClockFreq+0x108>)
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	f003 0303 	and.w	r3, r3, #3
 800b35c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d005      	beq.n	800b370 <HAL_RCC_GetSysClockFreq+0x34>
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	2b0c      	cmp	r3, #12
 800b368:	d121      	bne.n	800b3ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d11e      	bne.n	800b3ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b370:	4b34      	ldr	r3, [pc, #208]	; (800b444 <HAL_RCC_GetSysClockFreq+0x108>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f003 0308 	and.w	r3, r3, #8
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d107      	bne.n	800b38c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b37c:	4b31      	ldr	r3, [pc, #196]	; (800b444 <HAL_RCC_GetSysClockFreq+0x108>)
 800b37e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b382:	0a1b      	lsrs	r3, r3, #8
 800b384:	f003 030f 	and.w	r3, r3, #15
 800b388:	61fb      	str	r3, [r7, #28]
 800b38a:	e005      	b.n	800b398 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b38c:	4b2d      	ldr	r3, [pc, #180]	; (800b444 <HAL_RCC_GetSysClockFreq+0x108>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	091b      	lsrs	r3, r3, #4
 800b392:	f003 030f 	and.w	r3, r3, #15
 800b396:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b398:	4a2b      	ldr	r2, [pc, #172]	; (800b448 <HAL_RCC_GetSysClockFreq+0x10c>)
 800b39a:	69fb      	ldr	r3, [r7, #28]
 800b39c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d10d      	bne.n	800b3c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b3a8:	69fb      	ldr	r3, [r7, #28]
 800b3aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b3ac:	e00a      	b.n	800b3c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	2b04      	cmp	r3, #4
 800b3b2:	d102      	bne.n	800b3ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b3b4:	4b25      	ldr	r3, [pc, #148]	; (800b44c <HAL_RCC_GetSysClockFreq+0x110>)
 800b3b6:	61bb      	str	r3, [r7, #24]
 800b3b8:	e004      	b.n	800b3c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	2b08      	cmp	r3, #8
 800b3be:	d101      	bne.n	800b3c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b3c0:	4b23      	ldr	r3, [pc, #140]	; (800b450 <HAL_RCC_GetSysClockFreq+0x114>)
 800b3c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	2b0c      	cmp	r3, #12
 800b3c8:	d134      	bne.n	800b434 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b3ca:	4b1e      	ldr	r3, [pc, #120]	; (800b444 <HAL_RCC_GetSysClockFreq+0x108>)
 800b3cc:	68db      	ldr	r3, [r3, #12]
 800b3ce:	f003 0303 	and.w	r3, r3, #3
 800b3d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	2b02      	cmp	r3, #2
 800b3d8:	d003      	beq.n	800b3e2 <HAL_RCC_GetSysClockFreq+0xa6>
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	2b03      	cmp	r3, #3
 800b3de:	d003      	beq.n	800b3e8 <HAL_RCC_GetSysClockFreq+0xac>
 800b3e0:	e005      	b.n	800b3ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b3e2:	4b1a      	ldr	r3, [pc, #104]	; (800b44c <HAL_RCC_GetSysClockFreq+0x110>)
 800b3e4:	617b      	str	r3, [r7, #20]
      break;
 800b3e6:	e005      	b.n	800b3f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b3e8:	4b19      	ldr	r3, [pc, #100]	; (800b450 <HAL_RCC_GetSysClockFreq+0x114>)
 800b3ea:	617b      	str	r3, [r7, #20]
      break;
 800b3ec:	e002      	b.n	800b3f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	617b      	str	r3, [r7, #20]
      break;
 800b3f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b3f4:	4b13      	ldr	r3, [pc, #76]	; (800b444 <HAL_RCC_GetSysClockFreq+0x108>)
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	091b      	lsrs	r3, r3, #4
 800b3fa:	f003 0307 	and.w	r3, r3, #7
 800b3fe:	3301      	adds	r3, #1
 800b400:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b402:	4b10      	ldr	r3, [pc, #64]	; (800b444 <HAL_RCC_GetSysClockFreq+0x108>)
 800b404:	68db      	ldr	r3, [r3, #12]
 800b406:	0a1b      	lsrs	r3, r3, #8
 800b408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b40c:	697a      	ldr	r2, [r7, #20]
 800b40e:	fb03 f202 	mul.w	r2, r3, r2
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	fbb2 f3f3 	udiv	r3, r2, r3
 800b418:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b41a:	4b0a      	ldr	r3, [pc, #40]	; (800b444 <HAL_RCC_GetSysClockFreq+0x108>)
 800b41c:	68db      	ldr	r3, [r3, #12]
 800b41e:	0e5b      	lsrs	r3, r3, #25
 800b420:	f003 0303 	and.w	r3, r3, #3
 800b424:	3301      	adds	r3, #1
 800b426:	005b      	lsls	r3, r3, #1
 800b428:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b42a:	697a      	ldr	r2, [r7, #20]
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b432:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b434:	69bb      	ldr	r3, [r7, #24]
}
 800b436:	4618      	mov	r0, r3
 800b438:	3724      	adds	r7, #36	; 0x24
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	40021000 	.word	0x40021000
 800b448:	0801a1ac 	.word	0x0801a1ac
 800b44c:	00f42400 	.word	0x00f42400
 800b450:	007a1200 	.word	0x007a1200

0800b454 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b454:	b480      	push	{r7}
 800b456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b458:	4b03      	ldr	r3, [pc, #12]	; (800b468 <HAL_RCC_GetHCLKFreq+0x14>)
 800b45a:	681b      	ldr	r3, [r3, #0]
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr
 800b466:	bf00      	nop
 800b468:	200001e0 	.word	0x200001e0

0800b46c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b470:	f7ff fff0 	bl	800b454 <HAL_RCC_GetHCLKFreq>
 800b474:	4602      	mov	r2, r0
 800b476:	4b06      	ldr	r3, [pc, #24]	; (800b490 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	0a1b      	lsrs	r3, r3, #8
 800b47c:	f003 0307 	and.w	r3, r3, #7
 800b480:	4904      	ldr	r1, [pc, #16]	; (800b494 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b482:	5ccb      	ldrb	r3, [r1, r3]
 800b484:	f003 031f 	and.w	r3, r3, #31
 800b488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	40021000 	.word	0x40021000
 800b494:	0801a1a4 	.word	0x0801a1a4

0800b498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b49c:	f7ff ffda 	bl	800b454 <HAL_RCC_GetHCLKFreq>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	4b06      	ldr	r3, [pc, #24]	; (800b4bc <HAL_RCC_GetPCLK2Freq+0x24>)
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	0adb      	lsrs	r3, r3, #11
 800b4a8:	f003 0307 	and.w	r3, r3, #7
 800b4ac:	4904      	ldr	r1, [pc, #16]	; (800b4c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b4ae:	5ccb      	ldrb	r3, [r1, r3]
 800b4b0:	f003 031f 	and.w	r3, r3, #31
 800b4b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	40021000 	.word	0x40021000
 800b4c0:	0801a1a4 	.word	0x0801a1a4

0800b4c4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	220f      	movs	r2, #15
 800b4d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800b4d4:	4b12      	ldr	r3, [pc, #72]	; (800b520 <HAL_RCC_GetClockConfig+0x5c>)
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	f003 0203 	and.w	r2, r3, #3
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800b4e0:	4b0f      	ldr	r3, [pc, #60]	; (800b520 <HAL_RCC_GetClockConfig+0x5c>)
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800b4ec:	4b0c      	ldr	r3, [pc, #48]	; (800b520 <HAL_RCC_GetClockConfig+0x5c>)
 800b4ee:	689b      	ldr	r3, [r3, #8]
 800b4f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800b4f8:	4b09      	ldr	r3, [pc, #36]	; (800b520 <HAL_RCC_GetClockConfig+0x5c>)
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	08db      	lsrs	r3, r3, #3
 800b4fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800b506:	4b07      	ldr	r3, [pc, #28]	; (800b524 <HAL_RCC_GetClockConfig+0x60>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f003 0207 	and.w	r2, r3, #7
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	601a      	str	r2, [r3, #0]
}
 800b512:	bf00      	nop
 800b514:	370c      	adds	r7, #12
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	40021000 	.word	0x40021000
 800b524:	40022000 	.word	0x40022000

0800b528 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b086      	sub	sp, #24
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b530:	2300      	movs	r3, #0
 800b532:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b534:	4b2a      	ldr	r3, [pc, #168]	; (800b5e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d003      	beq.n	800b548 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b540:	f7ff f974 	bl	800a82c <HAL_PWREx_GetVoltageRange>
 800b544:	6178      	str	r0, [r7, #20]
 800b546:	e014      	b.n	800b572 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b548:	4b25      	ldr	r3, [pc, #148]	; (800b5e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b54a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b54c:	4a24      	ldr	r2, [pc, #144]	; (800b5e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b54e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b552:	6593      	str	r3, [r2, #88]	; 0x58
 800b554:	4b22      	ldr	r3, [pc, #136]	; (800b5e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b55c:	60fb      	str	r3, [r7, #12]
 800b55e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b560:	f7ff f964 	bl	800a82c <HAL_PWREx_GetVoltageRange>
 800b564:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b566:	4b1e      	ldr	r3, [pc, #120]	; (800b5e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b56a:	4a1d      	ldr	r2, [pc, #116]	; (800b5e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b56c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b570:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b578:	d10b      	bne.n	800b592 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2b80      	cmp	r3, #128	; 0x80
 800b57e:	d919      	bls.n	800b5b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2ba0      	cmp	r3, #160	; 0xa0
 800b584:	d902      	bls.n	800b58c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b586:	2302      	movs	r3, #2
 800b588:	613b      	str	r3, [r7, #16]
 800b58a:	e013      	b.n	800b5b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b58c:	2301      	movs	r3, #1
 800b58e:	613b      	str	r3, [r7, #16]
 800b590:	e010      	b.n	800b5b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2b80      	cmp	r3, #128	; 0x80
 800b596:	d902      	bls.n	800b59e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b598:	2303      	movs	r3, #3
 800b59a:	613b      	str	r3, [r7, #16]
 800b59c:	e00a      	b.n	800b5b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2b80      	cmp	r3, #128	; 0x80
 800b5a2:	d102      	bne.n	800b5aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b5a4:	2302      	movs	r3, #2
 800b5a6:	613b      	str	r3, [r7, #16]
 800b5a8:	e004      	b.n	800b5b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2b70      	cmp	r3, #112	; 0x70
 800b5ae:	d101      	bne.n	800b5b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b5b4:	4b0b      	ldr	r3, [pc, #44]	; (800b5e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f023 0207 	bic.w	r2, r3, #7
 800b5bc:	4909      	ldr	r1, [pc, #36]	; (800b5e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b5c4:	4b07      	ldr	r3, [pc, #28]	; (800b5e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f003 0307 	and.w	r3, r3, #7
 800b5cc:	693a      	ldr	r2, [r7, #16]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d001      	beq.n	800b5d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e000      	b.n	800b5d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3718      	adds	r7, #24
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	40021000 	.word	0x40021000
 800b5e4:	40022000 	.word	0x40022000

0800b5e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b086      	sub	sp, #24
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b600:	2b00      	cmp	r3, #0
 800b602:	d041      	beq.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b608:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b60c:	d02a      	beq.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b60e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b612:	d824      	bhi.n	800b65e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b614:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b618:	d008      	beq.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b61a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b61e:	d81e      	bhi.n	800b65e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b620:	2b00      	cmp	r3, #0
 800b622:	d00a      	beq.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b624:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b628:	d010      	beq.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b62a:	e018      	b.n	800b65e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b62c:	4b86      	ldr	r3, [pc, #536]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	4a85      	ldr	r2, [pc, #532]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b636:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b638:	e015      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	3304      	adds	r3, #4
 800b63e:	2100      	movs	r1, #0
 800b640:	4618      	mov	r0, r3
 800b642:	f000 fabb 	bl	800bbbc <RCCEx_PLLSAI1_Config>
 800b646:	4603      	mov	r3, r0
 800b648:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b64a:	e00c      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	3320      	adds	r3, #32
 800b650:	2100      	movs	r1, #0
 800b652:	4618      	mov	r0, r3
 800b654:	f000 fba6 	bl	800bda4 <RCCEx_PLLSAI2_Config>
 800b658:	4603      	mov	r3, r0
 800b65a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b65c:	e003      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b65e:	2301      	movs	r3, #1
 800b660:	74fb      	strb	r3, [r7, #19]
      break;
 800b662:	e000      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b664:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b666:	7cfb      	ldrb	r3, [r7, #19]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d10b      	bne.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b66c:	4b76      	ldr	r3, [pc, #472]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b66e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b672:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b67a:	4973      	ldr	r1, [pc, #460]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b67c:	4313      	orrs	r3, r2
 800b67e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b682:	e001      	b.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b684:	7cfb      	ldrb	r3, [r7, #19]
 800b686:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b690:	2b00      	cmp	r3, #0
 800b692:	d041      	beq.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b698:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b69c:	d02a      	beq.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800b69e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b6a2:	d824      	bhi.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b6a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6a8:	d008      	beq.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b6aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6ae:	d81e      	bhi.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d00a      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800b6b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b6b8:	d010      	beq.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800b6ba:	e018      	b.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b6bc:	4b62      	ldr	r3, [pc, #392]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	4a61      	ldr	r2, [pc, #388]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b6c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b6c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b6c8:	e015      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	3304      	adds	r3, #4
 800b6ce:	2100      	movs	r1, #0
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f000 fa73 	bl	800bbbc <RCCEx_PLLSAI1_Config>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b6da:	e00c      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	3320      	adds	r3, #32
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f000 fb5e 	bl	800bda4 <RCCEx_PLLSAI2_Config>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b6ec:	e003      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	74fb      	strb	r3, [r7, #19]
      break;
 800b6f2:	e000      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800b6f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6f6:	7cfb      	ldrb	r3, [r7, #19]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d10b      	bne.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b6fc:	4b52      	ldr	r3, [pc, #328]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b6fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b702:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b70a:	494f      	ldr	r1, [pc, #316]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b70c:	4313      	orrs	r3, r2
 800b70e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b712:	e001      	b.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b714:	7cfb      	ldrb	r3, [r7, #19]
 800b716:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b720:	2b00      	cmp	r3, #0
 800b722:	f000 80a0 	beq.w	800b866 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b726:	2300      	movs	r3, #0
 800b728:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b72a:	4b47      	ldr	r3, [pc, #284]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b72c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b72e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b732:	2b00      	cmp	r3, #0
 800b734:	d101      	bne.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0x152>
 800b736:	2301      	movs	r3, #1
 800b738:	e000      	b.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800b73a:	2300      	movs	r3, #0
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d00d      	beq.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b740:	4b41      	ldr	r3, [pc, #260]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b744:	4a40      	ldr	r2, [pc, #256]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b74a:	6593      	str	r3, [r2, #88]	; 0x58
 800b74c:	4b3e      	ldr	r3, [pc, #248]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b74e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b754:	60bb      	str	r3, [r7, #8]
 800b756:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b758:	2301      	movs	r3, #1
 800b75a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b75c:	4b3b      	ldr	r3, [pc, #236]	; (800b84c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a3a      	ldr	r2, [pc, #232]	; (800b84c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b766:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b768:	f7fc fdf0 	bl	800834c <HAL_GetTick>
 800b76c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b76e:	e009      	b.n	800b784 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b770:	f7fc fdec 	bl	800834c <HAL_GetTick>
 800b774:	4602      	mov	r2, r0
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	1ad3      	subs	r3, r2, r3
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	d902      	bls.n	800b784 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800b77e:	2303      	movs	r3, #3
 800b780:	74fb      	strb	r3, [r7, #19]
        break;
 800b782:	e005      	b.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b784:	4b31      	ldr	r3, [pc, #196]	; (800b84c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d0ef      	beq.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800b790:	7cfb      	ldrb	r3, [r7, #19]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d15c      	bne.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b796:	4b2c      	ldr	r3, [pc, #176]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b79c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d01f      	beq.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7ae:	697a      	ldr	r2, [r7, #20]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d019      	beq.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b7b4:	4b24      	ldr	r3, [pc, #144]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b7b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b7c0:	4b21      	ldr	r3, [pc, #132]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b7c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7c6:	4a20      	ldr	r2, [pc, #128]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b7c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b7d0:	4b1d      	ldr	r3, [pc, #116]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b7d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7d6:	4a1c      	ldr	r2, [pc, #112]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b7d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b7e0:	4a19      	ldr	r2, [pc, #100]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	f003 0301 	and.w	r3, r3, #1
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d016      	beq.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7f2:	f7fc fdab 	bl	800834c <HAL_GetTick>
 800b7f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b7f8:	e00b      	b.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7fa:	f7fc fda7 	bl	800834c <HAL_GetTick>
 800b7fe:	4602      	mov	r2, r0
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	1ad3      	subs	r3, r2, r3
 800b804:	f241 3288 	movw	r2, #5000	; 0x1388
 800b808:	4293      	cmp	r3, r2
 800b80a:	d902      	bls.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800b80c:	2303      	movs	r3, #3
 800b80e:	74fb      	strb	r3, [r7, #19]
            break;
 800b810:	e006      	b.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b812:	4b0d      	ldr	r3, [pc, #52]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b818:	f003 0302 	and.w	r3, r3, #2
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d0ec      	beq.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800b820:	7cfb      	ldrb	r3, [r7, #19]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d10c      	bne.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b826:	4b08      	ldr	r3, [pc, #32]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b82c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b836:	4904      	ldr	r1, [pc, #16]	; (800b848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b838:	4313      	orrs	r3, r2
 800b83a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b83e:	e009      	b.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b840:	7cfb      	ldrb	r3, [r7, #19]
 800b842:	74bb      	strb	r3, [r7, #18]
 800b844:	e006      	b.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800b846:	bf00      	nop
 800b848:	40021000 	.word	0x40021000
 800b84c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b850:	7cfb      	ldrb	r3, [r7, #19]
 800b852:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b854:	7c7b      	ldrb	r3, [r7, #17]
 800b856:	2b01      	cmp	r3, #1
 800b858:	d105      	bne.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b85a:	4b9e      	ldr	r3, [pc, #632]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b85c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b85e:	4a9d      	ldr	r2, [pc, #628]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b864:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f003 0301 	and.w	r3, r3, #1
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d00a      	beq.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b872:	4b98      	ldr	r3, [pc, #608]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b878:	f023 0203 	bic.w	r2, r3, #3
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b880:	4994      	ldr	r1, [pc, #592]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b882:	4313      	orrs	r3, r2
 800b884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f003 0302 	and.w	r3, r3, #2
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00a      	beq.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b894:	4b8f      	ldr	r3, [pc, #572]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b89a:	f023 020c 	bic.w	r2, r3, #12
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8a2:	498c      	ldr	r1, [pc, #560]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f003 0304 	and.w	r3, r3, #4
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00a      	beq.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b8b6:	4b87      	ldr	r3, [pc, #540]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b8b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8c4:	4983      	ldr	r1, [pc, #524]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f003 0308 	and.w	r3, r3, #8
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d00a      	beq.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b8d8:	4b7e      	ldr	r3, [pc, #504]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b8da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8e6:	497b      	ldr	r1, [pc, #492]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f003 0310 	and.w	r3, r3, #16
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d00a      	beq.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b8fa:	4b76      	ldr	r3, [pc, #472]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b8fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b900:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b908:	4972      	ldr	r1, [pc, #456]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b90a:	4313      	orrs	r3, r2
 800b90c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f003 0320 	and.w	r3, r3, #32
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00a      	beq.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b91c:	4b6d      	ldr	r3, [pc, #436]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b91e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b922:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b92a:	496a      	ldr	r1, [pc, #424]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b92c:	4313      	orrs	r3, r2
 800b92e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d00a      	beq.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b93e:	4b65      	ldr	r3, [pc, #404]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b944:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b94c:	4961      	ldr	r1, [pc, #388]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b94e:	4313      	orrs	r3, r2
 800b950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d00a      	beq.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b960:	4b5c      	ldr	r3, [pc, #368]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b966:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b96e:	4959      	ldr	r1, [pc, #356]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b970:	4313      	orrs	r3, r2
 800b972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d00a      	beq.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b982:	4b54      	ldr	r3, [pc, #336]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b988:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b990:	4950      	ldr	r1, [pc, #320]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b992:	4313      	orrs	r3, r2
 800b994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d00a      	beq.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b9a4:	4b4b      	ldr	r3, [pc, #300]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b9a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9b2:	4948      	ldr	r1, [pc, #288]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d00a      	beq.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b9c6:	4b43      	ldr	r3, [pc, #268]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b9c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9d4:	493f      	ldr	r1, [pc, #252]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d028      	beq.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b9e8:	4b3a      	ldr	r3, [pc, #232]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b9ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9f6:	4937      	ldr	r1, [pc, #220]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba06:	d106      	bne.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ba08:	4b32      	ldr	r3, [pc, #200]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	4a31      	ldr	r2, [pc, #196]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ba0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba12:	60d3      	str	r3, [r2, #12]
 800ba14:	e011      	b.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba1e:	d10c      	bne.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	3304      	adds	r3, #4
 800ba24:	2101      	movs	r1, #1
 800ba26:	4618      	mov	r0, r3
 800ba28:	f000 f8c8 	bl	800bbbc <RCCEx_PLLSAI1_Config>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800ba30:	7cfb      	ldrb	r3, [r7, #19]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d001      	beq.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800ba36:	7cfb      	ldrb	r3, [r7, #19]
 800ba38:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d028      	beq.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ba46:	4b23      	ldr	r3, [pc, #140]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ba48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba54:	491f      	ldr	r1, [pc, #124]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ba56:	4313      	orrs	r3, r2
 800ba58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba64:	d106      	bne.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ba66:	4b1b      	ldr	r3, [pc, #108]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	4a1a      	ldr	r2, [pc, #104]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ba6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba70:	60d3      	str	r3, [r2, #12]
 800ba72:	e011      	b.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba7c:	d10c      	bne.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	3304      	adds	r3, #4
 800ba82:	2101      	movs	r1, #1
 800ba84:	4618      	mov	r0, r3
 800ba86:	f000 f899 	bl	800bbbc <RCCEx_PLLSAI1_Config>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ba8e:	7cfb      	ldrb	r3, [r7, #19]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d001      	beq.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800ba94:	7cfb      	ldrb	r3, [r7, #19]
 800ba96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d02b      	beq.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800baa4:	4b0b      	ldr	r3, [pc, #44]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800baa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bab2:	4908      	ldr	r1, [pc, #32]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bab4:	4313      	orrs	r3, r2
 800bab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800babe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bac2:	d109      	bne.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bac4:	4b03      	ldr	r3, [pc, #12]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	4a02      	ldr	r2, [pc, #8]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800baca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bace:	60d3      	str	r3, [r2, #12]
 800bad0:	e014      	b.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x514>
 800bad2:	bf00      	nop
 800bad4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800badc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bae0:	d10c      	bne.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	3304      	adds	r3, #4
 800bae6:	2101      	movs	r1, #1
 800bae8:	4618      	mov	r0, r3
 800baea:	f000 f867 	bl	800bbbc <RCCEx_PLLSAI1_Config>
 800baee:	4603      	mov	r3, r0
 800baf0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800baf2:	7cfb      	ldrb	r3, [r7, #19]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d001      	beq.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800baf8:	7cfb      	ldrb	r3, [r7, #19]
 800bafa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d02f      	beq.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bb08:	4b2b      	ldr	r3, [pc, #172]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bb0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb16:	4928      	ldr	r1, [pc, #160]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb26:	d10d      	bne.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	3304      	adds	r3, #4
 800bb2c:	2102      	movs	r1, #2
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f000 f844 	bl	800bbbc <RCCEx_PLLSAI1_Config>
 800bb34:	4603      	mov	r3, r0
 800bb36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bb38:	7cfb      	ldrb	r3, [r7, #19]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d014      	beq.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800bb3e:	7cfb      	ldrb	r3, [r7, #19]
 800bb40:	74bb      	strb	r3, [r7, #18]
 800bb42:	e011      	b.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb4c:	d10c      	bne.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	3320      	adds	r3, #32
 800bb52:	2102      	movs	r1, #2
 800bb54:	4618      	mov	r0, r3
 800bb56:	f000 f925 	bl	800bda4 <RCCEx_PLLSAI2_Config>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bb5e:	7cfb      	ldrb	r3, [r7, #19]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d001      	beq.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800bb64:	7cfb      	ldrb	r3, [r7, #19]
 800bb66:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00a      	beq.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bb74:	4b10      	ldr	r3, [pc, #64]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bb76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb7a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb82:	490d      	ldr	r1, [pc, #52]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bb84:	4313      	orrs	r3, r2
 800bb86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d00b      	beq.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bb96:	4b08      	ldr	r3, [pc, #32]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bb98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bba6:	4904      	ldr	r1, [pc, #16]	; (800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800bbae:	7cbb      	ldrb	r3, [r7, #18]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3718      	adds	r7, #24
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	40021000 	.word	0x40021000

0800bbbc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800bbca:	4b75      	ldr	r3, [pc, #468]	; (800bda0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bbcc:	68db      	ldr	r3, [r3, #12]
 800bbce:	f003 0303 	and.w	r3, r3, #3
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d018      	beq.n	800bc08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800bbd6:	4b72      	ldr	r3, [pc, #456]	; (800bda0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	f003 0203 	and.w	r2, r3, #3
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d10d      	bne.n	800bc02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
       ||
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d009      	beq.n	800bc02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800bbee:	4b6c      	ldr	r3, [pc, #432]	; (800bda0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	091b      	lsrs	r3, r3, #4
 800bbf4:	f003 0307 	and.w	r3, r3, #7
 800bbf8:	1c5a      	adds	r2, r3, #1
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	685b      	ldr	r3, [r3, #4]
       ||
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d047      	beq.n	800bc92 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800bc02:	2301      	movs	r3, #1
 800bc04:	73fb      	strb	r3, [r7, #15]
 800bc06:	e044      	b.n	800bc92 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	2b03      	cmp	r3, #3
 800bc0e:	d018      	beq.n	800bc42 <RCCEx_PLLSAI1_Config+0x86>
 800bc10:	2b03      	cmp	r3, #3
 800bc12:	d825      	bhi.n	800bc60 <RCCEx_PLLSAI1_Config+0xa4>
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d002      	beq.n	800bc1e <RCCEx_PLLSAI1_Config+0x62>
 800bc18:	2b02      	cmp	r3, #2
 800bc1a:	d009      	beq.n	800bc30 <RCCEx_PLLSAI1_Config+0x74>
 800bc1c:	e020      	b.n	800bc60 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800bc1e:	4b60      	ldr	r3, [pc, #384]	; (800bda0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f003 0302 	and.w	r3, r3, #2
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d11d      	bne.n	800bc66 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bc2e:	e01a      	b.n	800bc66 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800bc30:	4b5b      	ldr	r3, [pc, #364]	; (800bda0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d116      	bne.n	800bc6a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bc40:	e013      	b.n	800bc6a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800bc42:	4b57      	ldr	r3, [pc, #348]	; (800bda0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d10f      	bne.n	800bc6e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800bc4e:	4b54      	ldr	r3, [pc, #336]	; (800bda0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d109      	bne.n	800bc6e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bc5e:	e006      	b.n	800bc6e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	73fb      	strb	r3, [r7, #15]
      break;
 800bc64:	e004      	b.n	800bc70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800bc66:	bf00      	nop
 800bc68:	e002      	b.n	800bc70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800bc6a:	bf00      	nop
 800bc6c:	e000      	b.n	800bc70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800bc6e:	bf00      	nop
    }

    if(status == HAL_OK)
 800bc70:	7bfb      	ldrb	r3, [r7, #15]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d10d      	bne.n	800bc92 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800bc76:	4b4a      	ldr	r3, [pc, #296]	; (800bda0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bc78:	68db      	ldr	r3, [r3, #12]
 800bc7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6819      	ldr	r1, [r3, #0]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	3b01      	subs	r3, #1
 800bc88:	011b      	lsls	r3, r3, #4
 800bc8a:	430b      	orrs	r3, r1
 800bc8c:	4944      	ldr	r1, [pc, #272]	; (800bda0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800bc92:	7bfb      	ldrb	r3, [r7, #15]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d17d      	bne.n	800bd94 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800bc98:	4b41      	ldr	r3, [pc, #260]	; (800bda0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a40      	ldr	r2, [pc, #256]	; (800bda0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bc9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bca2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bca4:	f7fc fb52 	bl	800834c <HAL_GetTick>
 800bca8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800bcaa:	e009      	b.n	800bcc0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bcac:	f7fc fb4e 	bl	800834c <HAL_GetTick>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	1ad3      	subs	r3, r2, r3
 800bcb6:	2b02      	cmp	r3, #2
 800bcb8:	d902      	bls.n	800bcc0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800bcba:	2303      	movs	r3, #3
 800bcbc:	73fb      	strb	r3, [r7, #15]
        break;
 800bcbe:	e005      	b.n	800bccc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800bcc0:	4b37      	ldr	r3, [pc, #220]	; (800bda0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d1ef      	bne.n	800bcac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800bccc:	7bfb      	ldrb	r3, [r7, #15]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d160      	bne.n	800bd94 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d111      	bne.n	800bcfc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bcd8:	4b31      	ldr	r3, [pc, #196]	; (800bda0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800bce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	6892      	ldr	r2, [r2, #8]
 800bce8:	0211      	lsls	r1, r2, #8
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	68d2      	ldr	r2, [r2, #12]
 800bcee:	0912      	lsrs	r2, r2, #4
 800bcf0:	0452      	lsls	r2, r2, #17
 800bcf2:	430a      	orrs	r2, r1
 800bcf4:	492a      	ldr	r1, [pc, #168]	; (800bda0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	610b      	str	r3, [r1, #16]
 800bcfa:	e027      	b.n	800bd4c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d112      	bne.n	800bd28 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bd02:	4b27      	ldr	r3, [pc, #156]	; (800bda0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bd04:	691b      	ldr	r3, [r3, #16]
 800bd06:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800bd0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	6892      	ldr	r2, [r2, #8]
 800bd12:	0211      	lsls	r1, r2, #8
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	6912      	ldr	r2, [r2, #16]
 800bd18:	0852      	lsrs	r2, r2, #1
 800bd1a:	3a01      	subs	r2, #1
 800bd1c:	0552      	lsls	r2, r2, #21
 800bd1e:	430a      	orrs	r2, r1
 800bd20:	491f      	ldr	r1, [pc, #124]	; (800bda0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bd22:	4313      	orrs	r3, r2
 800bd24:	610b      	str	r3, [r1, #16]
 800bd26:	e011      	b.n	800bd4c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bd28:	4b1d      	ldr	r3, [pc, #116]	; (800bda0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bd2a:	691b      	ldr	r3, [r3, #16]
 800bd2c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800bd30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	6892      	ldr	r2, [r2, #8]
 800bd38:	0211      	lsls	r1, r2, #8
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	6952      	ldr	r2, [r2, #20]
 800bd3e:	0852      	lsrs	r2, r2, #1
 800bd40:	3a01      	subs	r2, #1
 800bd42:	0652      	lsls	r2, r2, #25
 800bd44:	430a      	orrs	r2, r1
 800bd46:	4916      	ldr	r1, [pc, #88]	; (800bda0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800bd4c:	4b14      	ldr	r3, [pc, #80]	; (800bda0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4a13      	ldr	r2, [pc, #76]	; (800bda0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bd52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bd56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd58:	f7fc faf8 	bl	800834c <HAL_GetTick>
 800bd5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800bd5e:	e009      	b.n	800bd74 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bd60:	f7fc faf4 	bl	800834c <HAL_GetTick>
 800bd64:	4602      	mov	r2, r0
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	1ad3      	subs	r3, r2, r3
 800bd6a:	2b02      	cmp	r3, #2
 800bd6c:	d902      	bls.n	800bd74 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800bd6e:	2303      	movs	r3, #3
 800bd70:	73fb      	strb	r3, [r7, #15]
          break;
 800bd72:	e005      	b.n	800bd80 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800bd74:	4b0a      	ldr	r3, [pc, #40]	; (800bda0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d0ef      	beq.n	800bd60 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800bd80:	7bfb      	ldrb	r3, [r7, #15]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d106      	bne.n	800bd94 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800bd86:	4b06      	ldr	r3, [pc, #24]	; (800bda0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bd88:	691a      	ldr	r2, [r3, #16]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	699b      	ldr	r3, [r3, #24]
 800bd8e:	4904      	ldr	r1, [pc, #16]	; (800bda0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bd90:	4313      	orrs	r3, r2
 800bd92:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800bd94:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	40021000 	.word	0x40021000

0800bda4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800bdb2:	4b6a      	ldr	r3, [pc, #424]	; (800bf5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	f003 0303 	and.w	r3, r3, #3
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d018      	beq.n	800bdf0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800bdbe:	4b67      	ldr	r3, [pc, #412]	; (800bf5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bdc0:	68db      	ldr	r3, [r3, #12]
 800bdc2:	f003 0203 	and.w	r2, r3, #3
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d10d      	bne.n	800bdea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
       ||
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d009      	beq.n	800bdea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800bdd6:	4b61      	ldr	r3, [pc, #388]	; (800bf5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	091b      	lsrs	r3, r3, #4
 800bddc:	f003 0307 	and.w	r3, r3, #7
 800bde0:	1c5a      	adds	r2, r3, #1
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	685b      	ldr	r3, [r3, #4]
       ||
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d047      	beq.n	800be7a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800bdea:	2301      	movs	r3, #1
 800bdec:	73fb      	strb	r3, [r7, #15]
 800bdee:	e044      	b.n	800be7a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	2b03      	cmp	r3, #3
 800bdf6:	d018      	beq.n	800be2a <RCCEx_PLLSAI2_Config+0x86>
 800bdf8:	2b03      	cmp	r3, #3
 800bdfa:	d825      	bhi.n	800be48 <RCCEx_PLLSAI2_Config+0xa4>
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d002      	beq.n	800be06 <RCCEx_PLLSAI2_Config+0x62>
 800be00:	2b02      	cmp	r3, #2
 800be02:	d009      	beq.n	800be18 <RCCEx_PLLSAI2_Config+0x74>
 800be04:	e020      	b.n	800be48 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800be06:	4b55      	ldr	r3, [pc, #340]	; (800bf5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f003 0302 	and.w	r3, r3, #2
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d11d      	bne.n	800be4e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800be12:	2301      	movs	r3, #1
 800be14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800be16:	e01a      	b.n	800be4e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800be18:	4b50      	ldr	r3, [pc, #320]	; (800bf5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be20:	2b00      	cmp	r3, #0
 800be22:	d116      	bne.n	800be52 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800be24:	2301      	movs	r3, #1
 800be26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800be28:	e013      	b.n	800be52 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800be2a:	4b4c      	ldr	r3, [pc, #304]	; (800bf5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be32:	2b00      	cmp	r3, #0
 800be34:	d10f      	bne.n	800be56 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800be36:	4b49      	ldr	r3, [pc, #292]	; (800bf5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d109      	bne.n	800be56 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800be42:	2301      	movs	r3, #1
 800be44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800be46:	e006      	b.n	800be56 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800be48:	2301      	movs	r3, #1
 800be4a:	73fb      	strb	r3, [r7, #15]
      break;
 800be4c:	e004      	b.n	800be58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800be4e:	bf00      	nop
 800be50:	e002      	b.n	800be58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800be52:	bf00      	nop
 800be54:	e000      	b.n	800be58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800be56:	bf00      	nop
    }

    if(status == HAL_OK)
 800be58:	7bfb      	ldrb	r3, [r7, #15]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d10d      	bne.n	800be7a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800be5e:	4b3f      	ldr	r3, [pc, #252]	; (800bf5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800be60:	68db      	ldr	r3, [r3, #12]
 800be62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6819      	ldr	r1, [r3, #0]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	3b01      	subs	r3, #1
 800be70:	011b      	lsls	r3, r3, #4
 800be72:	430b      	orrs	r3, r1
 800be74:	4939      	ldr	r1, [pc, #228]	; (800bf5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800be76:	4313      	orrs	r3, r2
 800be78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800be7a:	7bfb      	ldrb	r3, [r7, #15]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d167      	bne.n	800bf50 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800be80:	4b36      	ldr	r3, [pc, #216]	; (800bf5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a35      	ldr	r2, [pc, #212]	; (800bf5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800be86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be8c:	f7fc fa5e 	bl	800834c <HAL_GetTick>
 800be90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800be92:	e009      	b.n	800bea8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800be94:	f7fc fa5a 	bl	800834c <HAL_GetTick>
 800be98:	4602      	mov	r2, r0
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	1ad3      	subs	r3, r2, r3
 800be9e:	2b02      	cmp	r3, #2
 800bea0:	d902      	bls.n	800bea8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800bea2:	2303      	movs	r3, #3
 800bea4:	73fb      	strb	r3, [r7, #15]
        break;
 800bea6:	e005      	b.n	800beb4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800bea8:	4b2c      	ldr	r3, [pc, #176]	; (800bf5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d1ef      	bne.n	800be94 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800beb4:	7bfb      	ldrb	r3, [r7, #15]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d14a      	bne.n	800bf50 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d111      	bne.n	800bee4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800bec0:	4b26      	ldr	r3, [pc, #152]	; (800bf5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bec2:	695b      	ldr	r3, [r3, #20]
 800bec4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800bec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	6892      	ldr	r2, [r2, #8]
 800bed0:	0211      	lsls	r1, r2, #8
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	68d2      	ldr	r2, [r2, #12]
 800bed6:	0912      	lsrs	r2, r2, #4
 800bed8:	0452      	lsls	r2, r2, #17
 800beda:	430a      	orrs	r2, r1
 800bedc:	491f      	ldr	r1, [pc, #124]	; (800bf5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bede:	4313      	orrs	r3, r2
 800bee0:	614b      	str	r3, [r1, #20]
 800bee2:	e011      	b.n	800bf08 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800bee4:	4b1d      	ldr	r3, [pc, #116]	; (800bf5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bee6:	695b      	ldr	r3, [r3, #20]
 800bee8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800beec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	6892      	ldr	r2, [r2, #8]
 800bef4:	0211      	lsls	r1, r2, #8
 800bef6:	687a      	ldr	r2, [r7, #4]
 800bef8:	6912      	ldr	r2, [r2, #16]
 800befa:	0852      	lsrs	r2, r2, #1
 800befc:	3a01      	subs	r2, #1
 800befe:	0652      	lsls	r2, r2, #25
 800bf00:	430a      	orrs	r2, r1
 800bf02:	4916      	ldr	r1, [pc, #88]	; (800bf5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bf04:	4313      	orrs	r3, r2
 800bf06:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800bf08:	4b14      	ldr	r3, [pc, #80]	; (800bf5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4a13      	ldr	r2, [pc, #76]	; (800bf5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bf0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf14:	f7fc fa1a 	bl	800834c <HAL_GetTick>
 800bf18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800bf1a:	e009      	b.n	800bf30 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800bf1c:	f7fc fa16 	bl	800834c <HAL_GetTick>
 800bf20:	4602      	mov	r2, r0
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	1ad3      	subs	r3, r2, r3
 800bf26:	2b02      	cmp	r3, #2
 800bf28:	d902      	bls.n	800bf30 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800bf2a:	2303      	movs	r3, #3
 800bf2c:	73fb      	strb	r3, [r7, #15]
          break;
 800bf2e:	e005      	b.n	800bf3c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800bf30:	4b0a      	ldr	r3, [pc, #40]	; (800bf5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d0ef      	beq.n	800bf1c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800bf3c:	7bfb      	ldrb	r3, [r7, #15]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d106      	bne.n	800bf50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800bf42:	4b06      	ldr	r3, [pc, #24]	; (800bf5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bf44:	695a      	ldr	r2, [r3, #20]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	695b      	ldr	r3, [r3, #20]
 800bf4a:	4904      	ldr	r1, [pc, #16]	; (800bf5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800bf50:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	40021000 	.word	0x40021000

0800bf60 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d06c      	beq.n	800c04c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d106      	bne.n	800bf8c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2200      	movs	r2, #0
 800bf82:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f7fa ff24 	bl	8006dd4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2202      	movs	r2, #2
 800bf90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	22ca      	movs	r2, #202	; 0xca
 800bf9a:	625a      	str	r2, [r3, #36]	; 0x24
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	2253      	movs	r2, #83	; 0x53
 800bfa2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fa49 	bl	800c43c <RTC_EnterInitMode>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800bfae:	7bfb      	ldrb	r3, [r7, #15]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d14b      	bne.n	800c04c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	689b      	ldr	r3, [r3, #8]
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	6812      	ldr	r2, [r2, #0]
 800bfbe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bfc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfc6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	6899      	ldr	r1, [r3, #8]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	685a      	ldr	r2, [r3, #4]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	691b      	ldr	r3, [r3, #16]
 800bfd6:	431a      	orrs	r2, r3
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	699b      	ldr	r3, [r3, #24]
 800bfdc:	431a      	orrs	r2, r3
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	430a      	orrs	r2, r1
 800bfe4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	68d2      	ldr	r2, [r2, #12]
 800bfee:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	6919      	ldr	r1, [r3, #16]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	689b      	ldr	r3, [r3, #8]
 800bffa:	041a      	lsls	r2, r3, #16
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	430a      	orrs	r2, r1
 800c002:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 fa4d 	bl	800c4a4 <RTC_ExitInitMode>
 800c00a:	4603      	mov	r3, r0
 800c00c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800c00e:	7bfb      	ldrb	r3, [r7, #15]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d11b      	bne.n	800c04c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f022 0203 	bic.w	r2, r2, #3
 800c022:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	69da      	ldr	r2, [r3, #28]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	695b      	ldr	r3, [r3, #20]
 800c032:	431a      	orrs	r2, r3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	430a      	orrs	r2, r1
 800c03a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	22ff      	movs	r2, #255	; 0xff
 800c042:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2201      	movs	r2, #1
 800c048:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800c04c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3710      	adds	r7, #16
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c056:	b590      	push	{r4, r7, lr}
 800c058:	b087      	sub	sp, #28
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	60f8      	str	r0, [r7, #12]
 800c05e:	60b9      	str	r1, [r7, #8]
 800c060:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d101      	bne.n	800c070 <HAL_RTC_SetTime+0x1a>
 800c06c:	2302      	movs	r3, #2
 800c06e:	e08b      	b.n	800c188 <HAL_RTC_SetTime+0x132>
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2201      	movs	r2, #1
 800c074:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2202      	movs	r2, #2
 800c07c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	22ca      	movs	r2, #202	; 0xca
 800c086:	625a      	str	r2, [r3, #36]	; 0x24
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2253      	movs	r2, #83	; 0x53
 800c08e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c090:	68f8      	ldr	r0, [r7, #12]
 800c092:	f000 f9d3 	bl	800c43c <RTC_EnterInitMode>
 800c096:	4603      	mov	r3, r0
 800c098:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c09a:	7cfb      	ldrb	r3, [r7, #19]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d163      	bne.n	800c168 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d126      	bne.n	800c0f4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	689b      	ldr	r3, [r3, #8]
 800c0ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d102      	bne.n	800c0ba <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f000 fa2e 	bl	800c520 <RTC_ByteToBcd2>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	785b      	ldrb	r3, [r3, #1]
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f000 fa27 	bl	800c520 <RTC_ByteToBcd2>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c0d6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	789b      	ldrb	r3, [r3, #2]
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f000 fa1f 	bl	800c520 <RTC_ByteToBcd2>
 800c0e2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c0e4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	78db      	ldrb	r3, [r3, #3]
 800c0ec:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	617b      	str	r3, [r7, #20]
 800c0f2:	e018      	b.n	800c126 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d102      	bne.n	800c108 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	2200      	movs	r2, #0
 800c106:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	785b      	ldrb	r3, [r3, #1]
 800c112:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c114:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c116:	68ba      	ldr	r2, [r7, #8]
 800c118:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c11a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	78db      	ldrb	r3, [r3, #3]
 800c120:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c122:	4313      	orrs	r3, r2
 800c124:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c130:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c134:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	689a      	ldr	r2, [r3, #8]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c144:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	6899      	ldr	r1, [r3, #8]
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	68da      	ldr	r2, [r3, #12]
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	691b      	ldr	r3, [r3, #16]
 800c154:	431a      	orrs	r2, r3
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	430a      	orrs	r2, r1
 800c15c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c15e:	68f8      	ldr	r0, [r7, #12]
 800c160:	f000 f9a0 	bl	800c4a4 <RTC_ExitInitMode>
 800c164:	4603      	mov	r3, r0
 800c166:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	22ff      	movs	r2, #255	; 0xff
 800c16e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c170:	7cfb      	ldrb	r3, [r7, #19]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d103      	bne.n	800c17e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2201      	movs	r2, #1
 800c17a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2200      	movs	r2, #0
 800c182:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c186:	7cfb      	ldrb	r3, [r7, #19]
}
 800c188:	4618      	mov	r0, r3
 800c18a:	371c      	adds	r7, #28
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd90      	pop	{r4, r7, pc}

0800c190 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b086      	sub	sp, #24
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	691b      	ldr	r3, [r3, #16]
 800c1ac:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c1be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c1c2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	0c1b      	lsrs	r3, r3, #16
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1ce:	b2da      	uxtb	r2, r3
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	0a1b      	lsrs	r3, r3, #8
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1de:	b2da      	uxtb	r2, r3
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	b2db      	uxtb	r3, r3
 800c1e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1ec:	b2da      	uxtb	r2, r3
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	0d9b      	lsrs	r3, r3, #22
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	f003 0301 	and.w	r3, r3, #1
 800c1fc:	b2da      	uxtb	r2, r3
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d11a      	bne.n	800c23e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	4618      	mov	r0, r3
 800c20e:	f000 f9a7 	bl	800c560 <RTC_Bcd2ToByte>
 800c212:	4603      	mov	r3, r0
 800c214:	461a      	mov	r2, r3
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	785b      	ldrb	r3, [r3, #1]
 800c21e:	4618      	mov	r0, r3
 800c220:	f000 f99e 	bl	800c560 <RTC_Bcd2ToByte>
 800c224:	4603      	mov	r3, r0
 800c226:	461a      	mov	r2, r3
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	789b      	ldrb	r3, [r3, #2]
 800c230:	4618      	mov	r0, r3
 800c232:	f000 f995 	bl	800c560 <RTC_Bcd2ToByte>
 800c236:	4603      	mov	r3, r0
 800c238:	461a      	mov	r2, r3
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	3718      	adds	r7, #24
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c248:	b590      	push	{r4, r7, lr}
 800c24a:	b087      	sub	sp, #28
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c25a:	2b01      	cmp	r3, #1
 800c25c:	d101      	bne.n	800c262 <HAL_RTC_SetDate+0x1a>
 800c25e:	2302      	movs	r3, #2
 800c260:	e075      	b.n	800c34e <HAL_RTC_SetDate+0x106>
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2201      	movs	r2, #1
 800c266:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2202      	movs	r2, #2
 800c26e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d10e      	bne.n	800c296 <HAL_RTC_SetDate+0x4e>
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	785b      	ldrb	r3, [r3, #1]
 800c27c:	f003 0310 	and.w	r3, r3, #16
 800c280:	2b00      	cmp	r3, #0
 800c282:	d008      	beq.n	800c296 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	785b      	ldrb	r3, [r3, #1]
 800c288:	f023 0310 	bic.w	r3, r3, #16
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	330a      	adds	r3, #10
 800c290:	b2da      	uxtb	r2, r3
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d11c      	bne.n	800c2d6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	78db      	ldrb	r3, [r3, #3]
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f000 f93d 	bl	800c520 <RTC_ByteToBcd2>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	785b      	ldrb	r3, [r3, #1]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f000 f936 	bl	800c520 <RTC_ByteToBcd2>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c2b8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	789b      	ldrb	r3, [r3, #2]
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f000 f92e 	bl	800c520 <RTC_ByteToBcd2>
 800c2c4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c2c6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	617b      	str	r3, [r7, #20]
 800c2d4:	e00e      	b.n	800c2f4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	78db      	ldrb	r3, [r3, #3]
 800c2da:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	785b      	ldrb	r3, [r3, #1]
 800c2e0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c2e2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800c2e4:	68ba      	ldr	r2, [r7, #8]
 800c2e6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c2e8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	22ca      	movs	r2, #202	; 0xca
 800c2fa:	625a      	str	r2, [r3, #36]	; 0x24
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	2253      	movs	r2, #83	; 0x53
 800c302:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c304:	68f8      	ldr	r0, [r7, #12]
 800c306:	f000 f899 	bl	800c43c <RTC_EnterInitMode>
 800c30a:	4603      	mov	r3, r0
 800c30c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c30e:	7cfb      	ldrb	r3, [r7, #19]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d10c      	bne.n	800c32e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c31e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c322:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c324:	68f8      	ldr	r0, [r7, #12]
 800c326:	f000 f8bd 	bl	800c4a4 <RTC_ExitInitMode>
 800c32a:	4603      	mov	r3, r0
 800c32c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	22ff      	movs	r2, #255	; 0xff
 800c334:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c336:	7cfb      	ldrb	r3, [r7, #19]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d103      	bne.n	800c344 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2201      	movs	r2, #1
 800c340:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2200      	movs	r2, #0
 800c348:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c34c:	7cfb      	ldrb	r3, [r7, #19]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	371c      	adds	r7, #28
 800c352:	46bd      	mov	sp, r7
 800c354:	bd90      	pop	{r4, r7, pc}

0800c356 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b086      	sub	sp, #24
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	60f8      	str	r0, [r7, #12]
 800c35e:	60b9      	str	r1, [r7, #8]
 800c360:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c36c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c370:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	0c1b      	lsrs	r3, r3, #16
 800c376:	b2da      	uxtb	r2, r3
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	0a1b      	lsrs	r3, r3, #8
 800c380:	b2db      	uxtb	r3, r3
 800c382:	f003 031f 	and.w	r3, r3, #31
 800c386:	b2da      	uxtb	r2, r3
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c394:	b2da      	uxtb	r2, r3
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	0b5b      	lsrs	r3, r3, #13
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	f003 0307 	and.w	r3, r3, #7
 800c3a4:	b2da      	uxtb	r2, r3
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d11a      	bne.n	800c3e6 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	78db      	ldrb	r3, [r3, #3]
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f000 f8d3 	bl	800c560 <RTC_Bcd2ToByte>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	461a      	mov	r2, r3
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	785b      	ldrb	r3, [r3, #1]
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f000 f8ca 	bl	800c560 <RTC_Bcd2ToByte>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	789b      	ldrb	r3, [r3, #2]
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f000 f8c1 	bl	800c560 <RTC_Bcd2ToByte>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c3e6:	2300      	movs	r3, #0
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3718      	adds	r7, #24
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	68da      	ldr	r2, [r3, #12]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c406:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800c408:	f7fb ffa0 	bl	800834c <HAL_GetTick>
 800c40c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c40e:	e009      	b.n	800c424 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c410:	f7fb ff9c 	bl	800834c <HAL_GetTick>
 800c414:	4602      	mov	r2, r0
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	1ad3      	subs	r3, r2, r3
 800c41a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c41e:	d901      	bls.n	800c424 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800c420:	2303      	movs	r3, #3
 800c422:	e007      	b.n	800c434 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	68db      	ldr	r3, [r3, #12]
 800c42a:	f003 0320 	and.w	r3, r3, #32
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d0ee      	beq.n	800c410 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800c432:	2300      	movs	r3, #0
}
 800c434:	4618      	mov	r0, r3
 800c436:	3710      	adds	r7, #16
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b084      	sub	sp, #16
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c444:	2300      	movs	r3, #0
 800c446:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	68db      	ldr	r3, [r3, #12]
 800c44e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c452:	2b00      	cmp	r3, #0
 800c454:	d120      	bne.n	800c498 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c45e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c460:	f7fb ff74 	bl	800834c <HAL_GetTick>
 800c464:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c466:	e00d      	b.n	800c484 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c468:	f7fb ff70 	bl	800834c <HAL_GetTick>
 800c46c:	4602      	mov	r2, r0
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	1ad3      	subs	r3, r2, r3
 800c472:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c476:	d905      	bls.n	800c484 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c478:	2303      	movs	r3, #3
 800c47a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2203      	movs	r2, #3
 800c480:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d102      	bne.n	800c498 <RTC_EnterInitMode+0x5c>
 800c492:	7bfb      	ldrb	r3, [r7, #15]
 800c494:	2b03      	cmp	r3, #3
 800c496:	d1e7      	bne.n	800c468 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800c498:	7bfb      	ldrb	r3, [r7, #15]
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3710      	adds	r7, #16
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
	...

0800c4a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800c4b0:	4b1a      	ldr	r3, [pc, #104]	; (800c51c <RTC_ExitInitMode+0x78>)
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	4a19      	ldr	r2, [pc, #100]	; (800c51c <RTC_ExitInitMode+0x78>)
 800c4b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4ba:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c4bc:	4b17      	ldr	r3, [pc, #92]	; (800c51c <RTC_ExitInitMode+0x78>)
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	f003 0320 	and.w	r3, r3, #32
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d10c      	bne.n	800c4e2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f7ff ff91 	bl	800c3f0 <HAL_RTC_WaitForSynchro>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d01e      	beq.n	800c512 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2203      	movs	r2, #3
 800c4d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c4dc:	2303      	movs	r3, #3
 800c4de:	73fb      	strb	r3, [r7, #15]
 800c4e0:	e017      	b.n	800c512 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c4e2:	4b0e      	ldr	r3, [pc, #56]	; (800c51c <RTC_ExitInitMode+0x78>)
 800c4e4:	689b      	ldr	r3, [r3, #8]
 800c4e6:	4a0d      	ldr	r2, [pc, #52]	; (800c51c <RTC_ExitInitMode+0x78>)
 800c4e8:	f023 0320 	bic.w	r3, r3, #32
 800c4ec:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f7ff ff7e 	bl	800c3f0 <HAL_RTC_WaitForSynchro>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d005      	beq.n	800c506 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2203      	movs	r2, #3
 800c4fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c502:	2303      	movs	r3, #3
 800c504:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c506:	4b05      	ldr	r3, [pc, #20]	; (800c51c <RTC_ExitInitMode+0x78>)
 800c508:	689b      	ldr	r3, [r3, #8]
 800c50a:	4a04      	ldr	r2, [pc, #16]	; (800c51c <RTC_ExitInitMode+0x78>)
 800c50c:	f043 0320 	orr.w	r3, r3, #32
 800c510:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c512:	7bfb      	ldrb	r3, [r7, #15]
}
 800c514:	4618      	mov	r0, r3
 800c516:	3710      	adds	r7, #16
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	40002800 	.word	0x40002800

0800c520 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c520:	b480      	push	{r7}
 800c522:	b085      	sub	sp, #20
 800c524:	af00      	add	r7, sp, #0
 800c526:	4603      	mov	r3, r0
 800c528:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c52a:	2300      	movs	r3, #0
 800c52c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800c52e:	79fb      	ldrb	r3, [r7, #7]
 800c530:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800c532:	e005      	b.n	800c540 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	3301      	adds	r3, #1
 800c538:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800c53a:	7afb      	ldrb	r3, [r7, #11]
 800c53c:	3b0a      	subs	r3, #10
 800c53e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800c540:	7afb      	ldrb	r3, [r7, #11]
 800c542:	2b09      	cmp	r3, #9
 800c544:	d8f6      	bhi.n	800c534 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	011b      	lsls	r3, r3, #4
 800c54c:	b2da      	uxtb	r2, r3
 800c54e:	7afb      	ldrb	r3, [r7, #11]
 800c550:	4313      	orrs	r3, r2
 800c552:	b2db      	uxtb	r3, r3
}
 800c554:	4618      	mov	r0, r3
 800c556:	3714      	adds	r7, #20
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr

0800c560 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c560:	b480      	push	{r7}
 800c562:	b085      	sub	sp, #20
 800c564:	af00      	add	r7, sp, #0
 800c566:	4603      	mov	r3, r0
 800c568:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800c56a:	79fb      	ldrb	r3, [r7, #7]
 800c56c:	091b      	lsrs	r3, r3, #4
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	461a      	mov	r2, r3
 800c572:	0092      	lsls	r2, r2, #2
 800c574:	4413      	add	r3, r2
 800c576:	005b      	lsls	r3, r3, #1
 800c578:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800c57a:	79fb      	ldrb	r3, [r7, #7]
 800c57c:	f003 030f 	and.w	r3, r3, #15
 800c580:	b2da      	uxtb	r2, r3
 800c582:	7bfb      	ldrb	r3, [r7, #15]
 800c584:	4413      	add	r3, r2
 800c586:	b2db      	uxtb	r3, r3
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3714      	adds	r7, #20
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr

0800c594 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d101      	bne.n	800c5a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	e095      	b.n	800c6d2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d108      	bne.n	800c5c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	685b      	ldr	r3, [r3, #4]
 800c5b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c5b6:	d009      	beq.n	800c5cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	61da      	str	r2, [r3, #28]
 800c5be:	e005      	b.n	800c5cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c5d8:	b2db      	uxtb	r3, r3
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d106      	bne.n	800c5ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f7fa fc26 	bl	8006e38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2202      	movs	r2, #2
 800c5f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	681a      	ldr	r2, [r3, #0]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c602:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	68db      	ldr	r3, [r3, #12]
 800c608:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c60c:	d902      	bls.n	800c614 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c60e:	2300      	movs	r3, #0
 800c610:	60fb      	str	r3, [r7, #12]
 800c612:	e002      	b.n	800c61a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c618:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c622:	d007      	beq.n	800c634 <HAL_SPI_Init+0xa0>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	68db      	ldr	r3, [r3, #12]
 800c628:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c62c:	d002      	beq.n	800c634 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2200      	movs	r2, #0
 800c632:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	689b      	ldr	r3, [r3, #8]
 800c640:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c644:	431a      	orrs	r2, r3
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	691b      	ldr	r3, [r3, #16]
 800c64a:	f003 0302 	and.w	r3, r3, #2
 800c64e:	431a      	orrs	r2, r3
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	695b      	ldr	r3, [r3, #20]
 800c654:	f003 0301 	and.w	r3, r3, #1
 800c658:	431a      	orrs	r2, r3
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	699b      	ldr	r3, [r3, #24]
 800c65e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c662:	431a      	orrs	r2, r3
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	69db      	ldr	r3, [r3, #28]
 800c668:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c66c:	431a      	orrs	r2, r3
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6a1b      	ldr	r3, [r3, #32]
 800c672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c676:	ea42 0103 	orr.w	r1, r2, r3
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c67e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	430a      	orrs	r2, r1
 800c688:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	699b      	ldr	r3, [r3, #24]
 800c68e:	0c1b      	lsrs	r3, r3, #16
 800c690:	f003 0204 	and.w	r2, r3, #4
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c698:	f003 0310 	and.w	r3, r3, #16
 800c69c:	431a      	orrs	r2, r3
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6a2:	f003 0308 	and.w	r3, r3, #8
 800c6a6:	431a      	orrs	r2, r3
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	68db      	ldr	r3, [r3, #12]
 800c6ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c6b0:	ea42 0103 	orr.w	r1, r2, r3
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	430a      	orrs	r2, r1
 800c6c0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c6d0:	2300      	movs	r3, #0
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3710      	adds	r7, #16
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b088      	sub	sp, #32
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	60f8      	str	r0, [r7, #12]
 800c6e2:	60b9      	str	r1, [r7, #8]
 800c6e4:	603b      	str	r3, [r7, #0]
 800c6e6:	4613      	mov	r3, r2
 800c6e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d101      	bne.n	800c6fc <HAL_SPI_Transmit+0x22>
 800c6f8:	2302      	movs	r3, #2
 800c6fa:	e158      	b.n	800c9ae <HAL_SPI_Transmit+0x2d4>
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2201      	movs	r2, #1
 800c700:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c704:	f7fb fe22 	bl	800834c <HAL_GetTick>
 800c708:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c70a:	88fb      	ldrh	r3, [r7, #6]
 800c70c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c714:	b2db      	uxtb	r3, r3
 800c716:	2b01      	cmp	r3, #1
 800c718:	d002      	beq.n	800c720 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c71a:	2302      	movs	r3, #2
 800c71c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c71e:	e13d      	b.n	800c99c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d002      	beq.n	800c72c <HAL_SPI_Transmit+0x52>
 800c726:	88fb      	ldrh	r3, [r7, #6]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d102      	bne.n	800c732 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c72c:	2301      	movs	r3, #1
 800c72e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c730:	e134      	b.n	800c99c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2203      	movs	r2, #3
 800c736:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2200      	movs	r2, #0
 800c73e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	68ba      	ldr	r2, [r7, #8]
 800c744:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	88fa      	ldrh	r2, [r7, #6]
 800c74a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	88fa      	ldrh	r2, [r7, #6]
 800c750:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2200      	movs	r2, #0
 800c756:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2200      	movs	r2, #0
 800c75c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2200      	movs	r2, #0
 800c764:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2200      	movs	r2, #0
 800c76c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	2200      	movs	r2, #0
 800c772:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	689b      	ldr	r3, [r3, #8]
 800c778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c77c:	d10f      	bne.n	800c79e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c78c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	681a      	ldr	r2, [r3, #0]
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c79c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7a8:	2b40      	cmp	r3, #64	; 0x40
 800c7aa:	d007      	beq.n	800c7bc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c7ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c7c4:	d94b      	bls.n	800c85e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d002      	beq.n	800c7d4 <HAL_SPI_Transmit+0xfa>
 800c7ce:	8afb      	ldrh	r3, [r7, #22]
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d13e      	bne.n	800c852 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7d8:	881a      	ldrh	r2, [r3, #0]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e4:	1c9a      	adds	r2, r3, #2
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	b29a      	uxth	r2, r3
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c7f8:	e02b      	b.n	800c852 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	689b      	ldr	r3, [r3, #8]
 800c800:	f003 0302 	and.w	r3, r3, #2
 800c804:	2b02      	cmp	r3, #2
 800c806:	d112      	bne.n	800c82e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c80c:	881a      	ldrh	r2, [r3, #0]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c818:	1c9a      	adds	r2, r3, #2
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c822:	b29b      	uxth	r3, r3
 800c824:	3b01      	subs	r3, #1
 800c826:	b29a      	uxth	r2, r3
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c82c:	e011      	b.n	800c852 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c82e:	f7fb fd8d 	bl	800834c <HAL_GetTick>
 800c832:	4602      	mov	r2, r0
 800c834:	69bb      	ldr	r3, [r7, #24]
 800c836:	1ad3      	subs	r3, r2, r3
 800c838:	683a      	ldr	r2, [r7, #0]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d803      	bhi.n	800c846 <HAL_SPI_Transmit+0x16c>
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c844:	d102      	bne.n	800c84c <HAL_SPI_Transmit+0x172>
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d102      	bne.n	800c852 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800c84c:	2303      	movs	r3, #3
 800c84e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c850:	e0a4      	b.n	800c99c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c856:	b29b      	uxth	r3, r3
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d1ce      	bne.n	800c7fa <HAL_SPI_Transmit+0x120>
 800c85c:	e07c      	b.n	800c958 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	685b      	ldr	r3, [r3, #4]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d002      	beq.n	800c86c <HAL_SPI_Transmit+0x192>
 800c866:	8afb      	ldrh	r3, [r7, #22]
 800c868:	2b01      	cmp	r3, #1
 800c86a:	d170      	bne.n	800c94e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c870:	b29b      	uxth	r3, r3
 800c872:	2b01      	cmp	r3, #1
 800c874:	d912      	bls.n	800c89c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c87a:	881a      	ldrh	r2, [r3, #0]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c886:	1c9a      	adds	r2, r3, #2
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c890:	b29b      	uxth	r3, r3
 800c892:	3b02      	subs	r3, #2
 800c894:	b29a      	uxth	r2, r3
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c89a:	e058      	b.n	800c94e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	330c      	adds	r3, #12
 800c8a6:	7812      	ldrb	r2, [r2, #0]
 800c8a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ae:	1c5a      	adds	r2, r3, #1
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	3b01      	subs	r3, #1
 800c8bc:	b29a      	uxth	r2, r3
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800c8c2:	e044      	b.n	800c94e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	689b      	ldr	r3, [r3, #8]
 800c8ca:	f003 0302 	and.w	r3, r3, #2
 800c8ce:	2b02      	cmp	r3, #2
 800c8d0:	d12b      	bne.n	800c92a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d912      	bls.n	800c902 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e0:	881a      	ldrh	r2, [r3, #0]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ec:	1c9a      	adds	r2, r3, #2
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	3b02      	subs	r3, #2
 800c8fa:	b29a      	uxth	r2, r3
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c900:	e025      	b.n	800c94e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	330c      	adds	r3, #12
 800c90c:	7812      	ldrb	r2, [r2, #0]
 800c90e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c914:	1c5a      	adds	r2, r3, #1
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c91e:	b29b      	uxth	r3, r3
 800c920:	3b01      	subs	r3, #1
 800c922:	b29a      	uxth	r2, r3
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c928:	e011      	b.n	800c94e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c92a:	f7fb fd0f 	bl	800834c <HAL_GetTick>
 800c92e:	4602      	mov	r2, r0
 800c930:	69bb      	ldr	r3, [r7, #24]
 800c932:	1ad3      	subs	r3, r2, r3
 800c934:	683a      	ldr	r2, [r7, #0]
 800c936:	429a      	cmp	r2, r3
 800c938:	d803      	bhi.n	800c942 <HAL_SPI_Transmit+0x268>
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c940:	d102      	bne.n	800c948 <HAL_SPI_Transmit+0x26e>
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d102      	bne.n	800c94e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800c948:	2303      	movs	r3, #3
 800c94a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c94c:	e026      	b.n	800c99c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c952:	b29b      	uxth	r3, r3
 800c954:	2b00      	cmp	r3, #0
 800c956:	d1b5      	bne.n	800c8c4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c958:	69ba      	ldr	r2, [r7, #24]
 800c95a:	6839      	ldr	r1, [r7, #0]
 800c95c:	68f8      	ldr	r0, [r7, #12]
 800c95e:	f001 f9dd 	bl	800dd1c <SPI_EndRxTxTransaction>
 800c962:	4603      	mov	r3, r0
 800c964:	2b00      	cmp	r3, #0
 800c966:	d002      	beq.n	800c96e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2220      	movs	r2, #32
 800c96c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	689b      	ldr	r3, [r3, #8]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d10a      	bne.n	800c98c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c976:	2300      	movs	r3, #0
 800c978:	613b      	str	r3, [r7, #16]
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	613b      	str	r3, [r7, #16]
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	689b      	ldr	r3, [r3, #8]
 800c988:	613b      	str	r3, [r7, #16]
 800c98a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c990:	2b00      	cmp	r3, #0
 800c992:	d002      	beq.n	800c99a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800c994:	2301      	movs	r3, #1
 800c996:	77fb      	strb	r3, [r7, #31]
 800c998:	e000      	b.n	800c99c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800c99a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	2201      	movs	r2, #1
 800c9a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c9ac:	7ffb      	ldrb	r3, [r7, #31]
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3720      	adds	r7, #32
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}

0800c9b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c9b6:	b580      	push	{r7, lr}
 800c9b8:	b088      	sub	sp, #32
 800c9ba:	af02      	add	r7, sp, #8
 800c9bc:	60f8      	str	r0, [r7, #12]
 800c9be:	60b9      	str	r1, [r7, #8]
 800c9c0:	603b      	str	r3, [r7, #0]
 800c9c2:	4613      	mov	r3, r2
 800c9c4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c9d2:	d112      	bne.n	800c9fa <HAL_SPI_Receive+0x44>
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	689b      	ldr	r3, [r3, #8]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d10e      	bne.n	800c9fa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2204      	movs	r2, #4
 800c9e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c9e4:	88fa      	ldrh	r2, [r7, #6]
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	9300      	str	r3, [sp, #0]
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	68ba      	ldr	r2, [r7, #8]
 800c9ee:	68b9      	ldr	r1, [r7, #8]
 800c9f0:	68f8      	ldr	r0, [r7, #12]
 800c9f2:	f000 f910 	bl	800cc16 <HAL_SPI_TransmitReceive>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	e109      	b.n	800cc0e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d101      	bne.n	800ca08 <HAL_SPI_Receive+0x52>
 800ca04:	2302      	movs	r3, #2
 800ca06:	e102      	b.n	800cc0e <HAL_SPI_Receive+0x258>
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ca10:	f7fb fc9c 	bl	800834c <HAL_GetTick>
 800ca14:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d002      	beq.n	800ca28 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ca22:	2302      	movs	r3, #2
 800ca24:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ca26:	e0e9      	b.n	800cbfc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d002      	beq.n	800ca34 <HAL_SPI_Receive+0x7e>
 800ca2e:	88fb      	ldrh	r3, [r7, #6]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d102      	bne.n	800ca3a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ca34:	2301      	movs	r3, #1
 800ca36:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ca38:	e0e0      	b.n	800cbfc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	2204      	movs	r2, #4
 800ca3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2200      	movs	r2, #0
 800ca46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	68ba      	ldr	r2, [r7, #8]
 800ca4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	88fa      	ldrh	r2, [r7, #6]
 800ca52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	88fa      	ldrh	r2, [r7, #6]
 800ca5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2200      	movs	r2, #0
 800ca62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2200      	movs	r2, #0
 800ca68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2200      	movs	r2, #0
 800ca74:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ca84:	d908      	bls.n	800ca98 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	685a      	ldr	r2, [r3, #4]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ca94:	605a      	str	r2, [r3, #4]
 800ca96:	e007      	b.n	800caa8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	685a      	ldr	r2, [r3, #4]
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800caa6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cab0:	d10f      	bne.n	800cad2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cac0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cad0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cadc:	2b40      	cmp	r3, #64	; 0x40
 800cade:	d007      	beq.n	800caf0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800caee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	68db      	ldr	r3, [r3, #12]
 800caf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800caf8:	d867      	bhi.n	800cbca <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800cafa:	e030      	b.n	800cb5e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	689b      	ldr	r3, [r3, #8]
 800cb02:	f003 0301 	and.w	r3, r3, #1
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d117      	bne.n	800cb3a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f103 020c 	add.w	r2, r3, #12
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb16:	7812      	ldrb	r2, [r2, #0]
 800cb18:	b2d2      	uxtb	r2, r2
 800cb1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb20:	1c5a      	adds	r2, r3, #1
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cb2c:	b29b      	uxth	r3, r3
 800cb2e:	3b01      	subs	r3, #1
 800cb30:	b29a      	uxth	r2, r3
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800cb38:	e011      	b.n	800cb5e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb3a:	f7fb fc07 	bl	800834c <HAL_GetTick>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	1ad3      	subs	r3, r2, r3
 800cb44:	683a      	ldr	r2, [r7, #0]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d803      	bhi.n	800cb52 <HAL_SPI_Receive+0x19c>
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb50:	d102      	bne.n	800cb58 <HAL_SPI_Receive+0x1a2>
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d102      	bne.n	800cb5e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800cb58:	2303      	movs	r3, #3
 800cb5a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800cb5c:	e04e      	b.n	800cbfc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cb64:	b29b      	uxth	r3, r3
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d1c8      	bne.n	800cafc <HAL_SPI_Receive+0x146>
 800cb6a:	e034      	b.n	800cbd6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	689b      	ldr	r3, [r3, #8]
 800cb72:	f003 0301 	and.w	r3, r3, #1
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d115      	bne.n	800cba6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	68da      	ldr	r2, [r3, #12]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb84:	b292      	uxth	r2, r2
 800cb86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb8c:	1c9a      	adds	r2, r3, #2
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cb98:	b29b      	uxth	r3, r3
 800cb9a:	3b01      	subs	r3, #1
 800cb9c:	b29a      	uxth	r2, r3
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800cba4:	e011      	b.n	800cbca <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cba6:	f7fb fbd1 	bl	800834c <HAL_GetTick>
 800cbaa:	4602      	mov	r2, r0
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	1ad3      	subs	r3, r2, r3
 800cbb0:	683a      	ldr	r2, [r7, #0]
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d803      	bhi.n	800cbbe <HAL_SPI_Receive+0x208>
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbbc:	d102      	bne.n	800cbc4 <HAL_SPI_Receive+0x20e>
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d102      	bne.n	800cbca <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800cbc4:	2303      	movs	r3, #3
 800cbc6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800cbc8:	e018      	b.n	800cbfc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d1ca      	bne.n	800cb6c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cbd6:	693a      	ldr	r2, [r7, #16]
 800cbd8:	6839      	ldr	r1, [r7, #0]
 800cbda:	68f8      	ldr	r0, [r7, #12]
 800cbdc:	f001 f846 	bl	800dc6c <SPI_EndRxTransaction>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d002      	beq.n	800cbec <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2220      	movs	r2, #32
 800cbea:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d002      	beq.n	800cbfa <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	75fb      	strb	r3, [r7, #23]
 800cbf8:	e000      	b.n	800cbfc <HAL_SPI_Receive+0x246>
  }

error :
 800cbfa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2201      	movs	r2, #1
 800cc00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2200      	movs	r2, #0
 800cc08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cc0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3718      	adds	r7, #24
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}

0800cc16 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800cc16:	b580      	push	{r7, lr}
 800cc18:	b08a      	sub	sp, #40	; 0x28
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	60f8      	str	r0, [r7, #12]
 800cc1e:	60b9      	str	r1, [r7, #8]
 800cc20:	607a      	str	r2, [r7, #4]
 800cc22:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800cc24:	2301      	movs	r3, #1
 800cc26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d101      	bne.n	800cc3c <HAL_SPI_TransmitReceive+0x26>
 800cc38:	2302      	movs	r3, #2
 800cc3a:	e1fb      	b.n	800d034 <HAL_SPI_TransmitReceive+0x41e>
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2201      	movs	r2, #1
 800cc40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cc44:	f7fb fb82 	bl	800834c <HAL_GetTick>
 800cc48:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cc50:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800cc58:	887b      	ldrh	r3, [r7, #2]
 800cc5a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800cc5c:	887b      	ldrh	r3, [r7, #2]
 800cc5e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cc60:	7efb      	ldrb	r3, [r7, #27]
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	d00e      	beq.n	800cc84 <HAL_SPI_TransmitReceive+0x6e>
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cc6c:	d106      	bne.n	800cc7c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	689b      	ldr	r3, [r3, #8]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d102      	bne.n	800cc7c <HAL_SPI_TransmitReceive+0x66>
 800cc76:	7efb      	ldrb	r3, [r7, #27]
 800cc78:	2b04      	cmp	r3, #4
 800cc7a:	d003      	beq.n	800cc84 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800cc7c:	2302      	movs	r3, #2
 800cc7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800cc82:	e1cd      	b.n	800d020 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d005      	beq.n	800cc96 <HAL_SPI_TransmitReceive+0x80>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d002      	beq.n	800cc96 <HAL_SPI_TransmitReceive+0x80>
 800cc90:	887b      	ldrh	r3, [r7, #2]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d103      	bne.n	800cc9e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800cc96:	2301      	movs	r3, #1
 800cc98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800cc9c:	e1c0      	b.n	800d020 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	2b04      	cmp	r3, #4
 800cca8:	d003      	beq.n	800ccb2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2205      	movs	r2, #5
 800ccae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	887a      	ldrh	r2, [r7, #2]
 800ccc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	887a      	ldrh	r2, [r7, #2]
 800ccca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	68ba      	ldr	r2, [r7, #8]
 800ccd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	887a      	ldrh	r2, [r7, #2]
 800ccd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	887a      	ldrh	r2, [r7, #2]
 800ccde:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2200      	movs	r2, #0
 800cce4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2200      	movs	r2, #0
 800ccea:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ccf4:	d802      	bhi.n	800ccfc <HAL_SPI_TransmitReceive+0xe6>
 800ccf6:	8a3b      	ldrh	r3, [r7, #16]
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	d908      	bls.n	800cd0e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	685a      	ldr	r2, [r3, #4]
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cd0a:	605a      	str	r2, [r3, #4]
 800cd0c:	e007      	b.n	800cd1e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	685a      	ldr	r2, [r3, #4]
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cd1c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd28:	2b40      	cmp	r3, #64	; 0x40
 800cd2a:	d007      	beq.n	800cd3c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	681a      	ldr	r2, [r3, #0]
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	68db      	ldr	r3, [r3, #12]
 800cd40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cd44:	d97c      	bls.n	800ce40 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d002      	beq.n	800cd54 <HAL_SPI_TransmitReceive+0x13e>
 800cd4e:	8a7b      	ldrh	r3, [r7, #18]
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	d169      	bne.n	800ce28 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd58:	881a      	ldrh	r2, [r3, #0]
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd64:	1c9a      	adds	r2, r3, #2
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	3b01      	subs	r3, #1
 800cd72:	b29a      	uxth	r2, r3
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cd78:	e056      	b.n	800ce28 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	689b      	ldr	r3, [r3, #8]
 800cd80:	f003 0302 	and.w	r3, r3, #2
 800cd84:	2b02      	cmp	r3, #2
 800cd86:	d11b      	bne.n	800cdc0 <HAL_SPI_TransmitReceive+0x1aa>
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d016      	beq.n	800cdc0 <HAL_SPI_TransmitReceive+0x1aa>
 800cd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd94:	2b01      	cmp	r3, #1
 800cd96:	d113      	bne.n	800cdc0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd9c:	881a      	ldrh	r2, [r3, #0]
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cda8:	1c9a      	adds	r2, r3, #2
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	3b01      	subs	r3, #1
 800cdb6:	b29a      	uxth	r2, r3
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	689b      	ldr	r3, [r3, #8]
 800cdc6:	f003 0301 	and.w	r3, r3, #1
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	d11c      	bne.n	800ce08 <HAL_SPI_TransmitReceive+0x1f2>
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cdd4:	b29b      	uxth	r3, r3
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d016      	beq.n	800ce08 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	68da      	ldr	r2, [r3, #12]
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cde4:	b292      	uxth	r2, r2
 800cde6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdec:	1c9a      	adds	r2, r3, #2
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	3b01      	subs	r3, #1
 800cdfc:	b29a      	uxth	r2, r3
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ce04:	2301      	movs	r3, #1
 800ce06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ce08:	f7fb faa0 	bl	800834c <HAL_GetTick>
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	69fb      	ldr	r3, [r7, #28]
 800ce10:	1ad3      	subs	r3, r2, r3
 800ce12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d807      	bhi.n	800ce28 <HAL_SPI_TransmitReceive+0x212>
 800ce18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce1e:	d003      	beq.n	800ce28 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800ce20:	2303      	movs	r3, #3
 800ce22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800ce26:	e0fb      	b.n	800d020 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d1a3      	bne.n	800cd7a <HAL_SPI_TransmitReceive+0x164>
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ce38:	b29b      	uxth	r3, r3
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d19d      	bne.n	800cd7a <HAL_SPI_TransmitReceive+0x164>
 800ce3e:	e0df      	b.n	800d000 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d003      	beq.n	800ce50 <HAL_SPI_TransmitReceive+0x23a>
 800ce48:	8a7b      	ldrh	r3, [r7, #18]
 800ce4a:	2b01      	cmp	r3, #1
 800ce4c:	f040 80cb 	bne.w	800cfe6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce54:	b29b      	uxth	r3, r3
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	d912      	bls.n	800ce80 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce5e:	881a      	ldrh	r2, [r3, #0]
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce6a:	1c9a      	adds	r2, r3, #2
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce74:	b29b      	uxth	r3, r3
 800ce76:	3b02      	subs	r3, #2
 800ce78:	b29a      	uxth	r2, r3
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ce7e:	e0b2      	b.n	800cfe6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	330c      	adds	r3, #12
 800ce8a:	7812      	ldrb	r2, [r2, #0]
 800ce8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce92:	1c5a      	adds	r2, r3, #1
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	3b01      	subs	r3, #1
 800cea0:	b29a      	uxth	r2, r3
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cea6:	e09e      	b.n	800cfe6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	689b      	ldr	r3, [r3, #8]
 800ceae:	f003 0302 	and.w	r3, r3, #2
 800ceb2:	2b02      	cmp	r3, #2
 800ceb4:	d134      	bne.n	800cf20 <HAL_SPI_TransmitReceive+0x30a>
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ceba:	b29b      	uxth	r3, r3
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d02f      	beq.n	800cf20 <HAL_SPI_TransmitReceive+0x30a>
 800cec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	d12c      	bne.n	800cf20 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d912      	bls.n	800cef6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ced4:	881a      	ldrh	r2, [r3, #0]
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cee0:	1c9a      	adds	r2, r3, #2
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	3b02      	subs	r3, #2
 800ceee:	b29a      	uxth	r2, r3
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cef4:	e012      	b.n	800cf1c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	330c      	adds	r3, #12
 800cf00:	7812      	ldrb	r2, [r2, #0]
 800cf02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf08:	1c5a      	adds	r2, r3, #1
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	3b01      	subs	r3, #1
 800cf16:	b29a      	uxth	r2, r3
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	689b      	ldr	r3, [r3, #8]
 800cf26:	f003 0301 	and.w	r3, r3, #1
 800cf2a:	2b01      	cmp	r3, #1
 800cf2c:	d148      	bne.n	800cfc0 <HAL_SPI_TransmitReceive+0x3aa>
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cf34:	b29b      	uxth	r3, r3
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d042      	beq.n	800cfc0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d923      	bls.n	800cf8e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	68da      	ldr	r2, [r3, #12]
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf50:	b292      	uxth	r2, r2
 800cf52:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf58:	1c9a      	adds	r2, r3, #2
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cf64:	b29b      	uxth	r3, r3
 800cf66:	3b02      	subs	r3, #2
 800cf68:	b29a      	uxth	r2, r3
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d81f      	bhi.n	800cfbc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	685a      	ldr	r2, [r3, #4]
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cf8a:	605a      	str	r2, [r3, #4]
 800cf8c:	e016      	b.n	800cfbc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f103 020c 	add.w	r2, r3, #12
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf9a:	7812      	ldrb	r2, [r2, #0]
 800cf9c:	b2d2      	uxtb	r2, r2
 800cf9e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfa4:	1c5a      	adds	r2, r3, #1
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	3b01      	subs	r3, #1
 800cfb4:	b29a      	uxth	r2, r3
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800cfc0:	f7fb f9c4 	bl	800834c <HAL_GetTick>
 800cfc4:	4602      	mov	r2, r0
 800cfc6:	69fb      	ldr	r3, [r7, #28]
 800cfc8:	1ad3      	subs	r3, r2, r3
 800cfca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d803      	bhi.n	800cfd8 <HAL_SPI_TransmitReceive+0x3c2>
 800cfd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfd6:	d102      	bne.n	800cfde <HAL_SPI_TransmitReceive+0x3c8>
 800cfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d103      	bne.n	800cfe6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800cfde:	2303      	movs	r3, #3
 800cfe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800cfe4:	e01c      	b.n	800d020 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	f47f af5b 	bne.w	800cea8 <HAL_SPI_TransmitReceive+0x292>
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cff8:	b29b      	uxth	r3, r3
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	f47f af54 	bne.w	800cea8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d000:	69fa      	ldr	r2, [r7, #28]
 800d002:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d004:	68f8      	ldr	r0, [r7, #12]
 800d006:	f000 fe89 	bl	800dd1c <SPI_EndRxTxTransaction>
 800d00a:	4603      	mov	r3, r0
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d006      	beq.n	800d01e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800d010:	2301      	movs	r3, #1
 800d012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2220      	movs	r2, #32
 800d01a:	661a      	str	r2, [r3, #96]	; 0x60
 800d01c:	e000      	b.n	800d020 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800d01e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2201      	movs	r2, #1
 800d024:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2200      	movs	r2, #0
 800d02c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d030:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800d034:	4618      	mov	r0, r3
 800d036:	3728      	adds	r7, #40	; 0x28
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b086      	sub	sp, #24
 800d040:	af00      	add	r7, sp, #0
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	60b9      	str	r1, [r7, #8]
 800d046:	4613      	mov	r3, r2
 800d048:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d04a:	2300      	movs	r3, #0
 800d04c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d054:	2b01      	cmp	r3, #1
 800d056:	d101      	bne.n	800d05c <HAL_SPI_Transmit_DMA+0x20>
 800d058:	2302      	movs	r3, #2
 800d05a:	e0d8      	b.n	800d20e <HAL_SPI_Transmit_DMA+0x1d2>
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2201      	movs	r2, #1
 800d060:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d06a:	b2db      	uxtb	r3, r3
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d002      	beq.n	800d076 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800d070:	2302      	movs	r3, #2
 800d072:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d074:	e0c6      	b.n	800d204 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d002      	beq.n	800d082 <HAL_SPI_Transmit_DMA+0x46>
 800d07c:	88fb      	ldrh	r3, [r7, #6]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d102      	bne.n	800d088 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800d082:	2301      	movs	r3, #1
 800d084:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d086:	e0bd      	b.n	800d204 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2203      	movs	r2, #3
 800d08c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2200      	movs	r2, #0
 800d094:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	68ba      	ldr	r2, [r7, #8]
 800d09a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	88fa      	ldrh	r2, [r7, #6]
 800d0a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	88fa      	ldrh	r2, [r7, #6]
 800d0a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	689b      	ldr	r3, [r3, #8]
 800d0ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0d2:	d10f      	bne.n	800d0f4 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	681a      	ldr	r2, [r3, #0]
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d0e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	681a      	ldr	r2, [r3, #0]
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d0f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0f8:	4a47      	ldr	r2, [pc, #284]	; (800d218 <HAL_SPI_Transmit_DMA+0x1dc>)
 800d0fa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d100:	4a46      	ldr	r2, [pc, #280]	; (800d21c <HAL_SPI_Transmit_DMA+0x1e0>)
 800d102:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d108:	4a45      	ldr	r2, [pc, #276]	; (800d220 <HAL_SPI_Transmit_DMA+0x1e4>)
 800d10a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d110:	2200      	movs	r2, #0
 800d112:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	685a      	ldr	r2, [r3, #4]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d122:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	68db      	ldr	r3, [r3, #12]
 800d128:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d12c:	d82d      	bhi.n	800d18a <HAL_SPI_Transmit_DMA+0x14e>
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d132:	699b      	ldr	r3, [r3, #24]
 800d134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d138:	d127      	bne.n	800d18a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d13e:	b29b      	uxth	r3, r3
 800d140:	f003 0301 	and.w	r3, r3, #1
 800d144:	2b00      	cmp	r3, #0
 800d146:	d10f      	bne.n	800d168 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	685a      	ldr	r2, [r3, #4]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d156:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	085b      	lsrs	r3, r3, #1
 800d160:	b29a      	uxth	r2, r3
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d166:	e010      	b.n	800d18a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	685a      	ldr	r2, [r3, #4]
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d176:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d17c:	b29b      	uxth	r3, r3
 800d17e:	085b      	lsrs	r3, r3, #1
 800d180:	b29b      	uxth	r3, r3
 800d182:	3301      	adds	r3, #1
 800d184:	b29a      	uxth	r2, r3
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d192:	4619      	mov	r1, r3
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	330c      	adds	r3, #12
 800d19a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d1a0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d1a2:	f7fb fa9d 	bl	80086e0 <HAL_DMA_Start_IT>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d00c      	beq.n	800d1c6 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d1b0:	f043 0210 	orr.w	r2, r3, #16
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2201      	movs	r2, #1
 800d1c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800d1c4:	e01e      	b.n	800d204 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1d0:	2b40      	cmp	r3, #64	; 0x40
 800d1d2:	d007      	beq.n	800d1e4 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	681a      	ldr	r2, [r3, #0]
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d1e2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	685a      	ldr	r2, [r3, #4]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f042 0220 	orr.w	r2, r2, #32
 800d1f2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	685a      	ldr	r2, [r3, #4]
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f042 0202 	orr.w	r2, r2, #2
 800d202:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2200      	movs	r2, #0
 800d208:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d20c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3718      	adds	r7, #24
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
 800d216:	bf00      	nop
 800d218:	0800d973 	.word	0x0800d973
 800d21c:	0800d795 	.word	0x0800d795
 800d220:	0800d9c7 	.word	0x0800d9c7

0800d224 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b086      	sub	sp, #24
 800d228:	af00      	add	r7, sp, #0
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	60b9      	str	r1, [r7, #8]
 800d22e:	607a      	str	r2, [r7, #4]
 800d230:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d232:	2300      	movs	r3, #0
 800d234:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d23c:	2b01      	cmp	r3, #1
 800d23e:	d101      	bne.n	800d244 <HAL_SPI_TransmitReceive_DMA+0x20>
 800d240:	2302      	movs	r3, #2
 800d242:	e16c      	b.n	800d51e <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	2201      	movs	r2, #1
 800d248:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d252:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800d25a:	7dbb      	ldrb	r3, [r7, #22]
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	d00d      	beq.n	800d27c <HAL_SPI_TransmitReceive_DMA+0x58>
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d266:	d106      	bne.n	800d276 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	689b      	ldr	r3, [r3, #8]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d102      	bne.n	800d276 <HAL_SPI_TransmitReceive_DMA+0x52>
 800d270:	7dbb      	ldrb	r3, [r7, #22]
 800d272:	2b04      	cmp	r3, #4
 800d274:	d002      	beq.n	800d27c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800d276:	2302      	movs	r3, #2
 800d278:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d27a:	e14b      	b.n	800d514 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d005      	beq.n	800d28e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d002      	beq.n	800d28e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800d288:	887b      	ldrh	r3, [r7, #2]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d102      	bne.n	800d294 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800d28e:	2301      	movs	r3, #1
 800d290:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d292:	e13f      	b.n	800d514 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d29a:	b2db      	uxtb	r3, r3
 800d29c:	2b04      	cmp	r3, #4
 800d29e:	d003      	beq.n	800d2a8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	2205      	movs	r2, #5
 800d2a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	68ba      	ldr	r2, [r7, #8]
 800d2b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	887a      	ldrh	r2, [r7, #2]
 800d2b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	887a      	ldrh	r2, [r7, #2]
 800d2be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	887a      	ldrh	r2, [r7, #2]
 800d2ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	887a      	ldrh	r2, [r7, #2]
 800d2d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	685a      	ldr	r2, [r3, #4]
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800d2f0:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	68db      	ldr	r3, [r3, #12]
 800d2f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d2fa:	d908      	bls.n	800d30e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	685a      	ldr	r2, [r3, #4]
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d30a:	605a      	str	r2, [r3, #4]
 800d30c:	e06f      	b.n	800d3ee <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	685a      	ldr	r2, [r3, #4]
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d31c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d322:	699b      	ldr	r3, [r3, #24]
 800d324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d328:	d126      	bne.n	800d378 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d32e:	f003 0301 	and.w	r3, r3, #1
 800d332:	2b00      	cmp	r3, #0
 800d334:	d10f      	bne.n	800d356 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	685a      	ldr	r2, [r3, #4]
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d344:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	085b      	lsrs	r3, r3, #1
 800d34e:	b29a      	uxth	r2, r3
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d354:	e010      	b.n	800d378 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	685a      	ldr	r2, [r3, #4]
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d364:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	085b      	lsrs	r3, r3, #1
 800d36e:	b29b      	uxth	r3, r3
 800d370:	3301      	adds	r3, #1
 800d372:	b29a      	uxth	r2, r3
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d37c:	699b      	ldr	r3, [r3, #24]
 800d37e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d382:	d134      	bne.n	800d3ee <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	685a      	ldr	r2, [r3, #4]
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d392:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d39a:	b29b      	uxth	r3, r3
 800d39c:	f003 0301 	and.w	r3, r3, #1
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d111      	bne.n	800d3c8 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	685a      	ldr	r2, [r3, #4]
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d3b2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	085b      	lsrs	r3, r3, #1
 800d3be:	b29a      	uxth	r2, r3
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800d3c6:	e012      	b.n	800d3ee <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	685a      	ldr	r2, [r3, #4]
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d3d6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d3de:	b29b      	uxth	r3, r3
 800d3e0:	085b      	lsrs	r3, r3, #1
 800d3e2:	b29b      	uxth	r3, r3
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	b29a      	uxth	r2, r3
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d3f4:	b2db      	uxtb	r3, r3
 800d3f6:	2b04      	cmp	r3, #4
 800d3f8:	d108      	bne.n	800d40c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3fe:	4a4a      	ldr	r2, [pc, #296]	; (800d528 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800d400:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d406:	4a49      	ldr	r2, [pc, #292]	; (800d52c <HAL_SPI_TransmitReceive_DMA+0x308>)
 800d408:	62da      	str	r2, [r3, #44]	; 0x2c
 800d40a:	e007      	b.n	800d41c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d410:	4a47      	ldr	r2, [pc, #284]	; (800d530 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800d412:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d418:	4a46      	ldr	r2, [pc, #280]	; (800d534 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800d41a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d420:	4a45      	ldr	r2, [pc, #276]	; (800d538 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800d422:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d428:	2200      	movs	r2, #0
 800d42a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	330c      	adds	r3, #12
 800d436:	4619      	mov	r1, r3
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d43c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d444:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d446:	f7fb f94b 	bl	80086e0 <HAL_DMA_Start_IT>
 800d44a:	4603      	mov	r3, r0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d00c      	beq.n	800d46a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d454:	f043 0210 	orr.w	r2, r3, #16
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800d45c:	2301      	movs	r3, #1
 800d45e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2201      	movs	r2, #1
 800d464:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800d468:	e054      	b.n	800d514 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	685a      	ldr	r2, [r3, #4]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f042 0201 	orr.w	r2, r2, #1
 800d478:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d47e:	2200      	movs	r2, #0
 800d480:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d486:	2200      	movs	r2, #0
 800d488:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d48e:	2200      	movs	r2, #0
 800d490:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d496:	2200      	movs	r2, #0
 800d498:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	330c      	adds	r3, #12
 800d4aa:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4b0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d4b2:	f7fb f915 	bl	80086e0 <HAL_DMA_Start_IT>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d00c      	beq.n	800d4d6 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4c0:	f043 0210 	orr.w	r2, r3, #16
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800d4d4:	e01e      	b.n	800d514 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4e0:	2b40      	cmp	r3, #64	; 0x40
 800d4e2:	d007      	beq.n	800d4f4 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	681a      	ldr	r2, [r3, #0]
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d4f2:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	685a      	ldr	r2, [r3, #4]
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f042 0220 	orr.w	r2, r2, #32
 800d502:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	685a      	ldr	r2, [r3, #4]
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f042 0202 	orr.w	r2, r2, #2
 800d512:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	2200      	movs	r2, #0
 800d518:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d51c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3718      	adds	r7, #24
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
 800d526:	bf00      	nop
 800d528:	0800d98f 	.word	0x0800d98f
 800d52c:	0800d83b 	.word	0x0800d83b
 800d530:	0800d9ab 	.word	0x0800d9ab
 800d534:	0800d8e3 	.word	0x0800d8e3
 800d538:	0800d9c7 	.word	0x0800d9c7

0800d53c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b088      	sub	sp, #32
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	685b      	ldr	r3, [r3, #4]
 800d54a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	689b      	ldr	r3, [r3, #8]
 800d552:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d554:	69bb      	ldr	r3, [r7, #24]
 800d556:	099b      	lsrs	r3, r3, #6
 800d558:	f003 0301 	and.w	r3, r3, #1
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d10f      	bne.n	800d580 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d560:	69bb      	ldr	r3, [r7, #24]
 800d562:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d566:	2b00      	cmp	r3, #0
 800d568:	d00a      	beq.n	800d580 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d56a:	69fb      	ldr	r3, [r7, #28]
 800d56c:	099b      	lsrs	r3, r3, #6
 800d56e:	f003 0301 	and.w	r3, r3, #1
 800d572:	2b00      	cmp	r3, #0
 800d574:	d004      	beq.n	800d580 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	4798      	blx	r3
    return;
 800d57e:	e0d7      	b.n	800d730 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800d580:	69bb      	ldr	r3, [r7, #24]
 800d582:	085b      	lsrs	r3, r3, #1
 800d584:	f003 0301 	and.w	r3, r3, #1
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d00a      	beq.n	800d5a2 <HAL_SPI_IRQHandler+0x66>
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	09db      	lsrs	r3, r3, #7
 800d590:	f003 0301 	and.w	r3, r3, #1
 800d594:	2b00      	cmp	r3, #0
 800d596:	d004      	beq.n	800d5a2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	4798      	blx	r3
    return;
 800d5a0:	e0c6      	b.n	800d730 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d5a2:	69bb      	ldr	r3, [r7, #24]
 800d5a4:	095b      	lsrs	r3, r3, #5
 800d5a6:	f003 0301 	and.w	r3, r3, #1
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d10c      	bne.n	800d5c8 <HAL_SPI_IRQHandler+0x8c>
 800d5ae:	69bb      	ldr	r3, [r7, #24]
 800d5b0:	099b      	lsrs	r3, r3, #6
 800d5b2:	f003 0301 	and.w	r3, r3, #1
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d106      	bne.n	800d5c8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d5ba:	69bb      	ldr	r3, [r7, #24]
 800d5bc:	0a1b      	lsrs	r3, r3, #8
 800d5be:	f003 0301 	and.w	r3, r3, #1
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	f000 80b4 	beq.w	800d730 <HAL_SPI_IRQHandler+0x1f4>
 800d5c8:	69fb      	ldr	r3, [r7, #28]
 800d5ca:	095b      	lsrs	r3, r3, #5
 800d5cc:	f003 0301 	and.w	r3, r3, #1
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	f000 80ad 	beq.w	800d730 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d5d6:	69bb      	ldr	r3, [r7, #24]
 800d5d8:	099b      	lsrs	r3, r3, #6
 800d5da:	f003 0301 	and.w	r3, r3, #1
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d023      	beq.n	800d62a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	2b03      	cmp	r3, #3
 800d5ec:	d011      	beq.n	800d612 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d5f2:	f043 0204 	orr.w	r2, r3, #4
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	617b      	str	r3, [r7, #20]
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	617b      	str	r3, [r7, #20]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	689b      	ldr	r3, [r3, #8]
 800d60c:	617b      	str	r3, [r7, #20]
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	e00b      	b.n	800d62a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d612:	2300      	movs	r3, #0
 800d614:	613b      	str	r3, [r7, #16]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	68db      	ldr	r3, [r3, #12]
 800d61c:	613b      	str	r3, [r7, #16]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	689b      	ldr	r3, [r3, #8]
 800d624:	613b      	str	r3, [r7, #16]
 800d626:	693b      	ldr	r3, [r7, #16]
        return;
 800d628:	e082      	b.n	800d730 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800d62a:	69bb      	ldr	r3, [r7, #24]
 800d62c:	095b      	lsrs	r3, r3, #5
 800d62e:	f003 0301 	and.w	r3, r3, #1
 800d632:	2b00      	cmp	r3, #0
 800d634:	d014      	beq.n	800d660 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d63a:	f043 0201 	orr.w	r2, r3, #1
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d642:	2300      	movs	r3, #0
 800d644:	60fb      	str	r3, [r7, #12]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	689b      	ldr	r3, [r3, #8]
 800d64c:	60fb      	str	r3, [r7, #12]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	681a      	ldr	r2, [r3, #0]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d65c:	601a      	str	r2, [r3, #0]
 800d65e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	0a1b      	lsrs	r3, r3, #8
 800d664:	f003 0301 	and.w	r3, r3, #1
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d00c      	beq.n	800d686 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d670:	f043 0208 	orr.w	r2, r3, #8
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d678:	2300      	movs	r3, #0
 800d67a:	60bb      	str	r3, [r7, #8]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	689b      	ldr	r3, [r3, #8]
 800d682:	60bb      	str	r3, [r7, #8]
 800d684:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d04f      	beq.n	800d72e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	685a      	ldr	r2, [r3, #4]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d69c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2201      	movs	r2, #1
 800d6a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800d6a6:	69fb      	ldr	r3, [r7, #28]
 800d6a8:	f003 0302 	and.w	r3, r3, #2
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d104      	bne.n	800d6ba <HAL_SPI_IRQHandler+0x17e>
 800d6b0:	69fb      	ldr	r3, [r7, #28]
 800d6b2:	f003 0301 	and.w	r3, r3, #1
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d034      	beq.n	800d724 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	685a      	ldr	r2, [r3, #4]
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	f022 0203 	bic.w	r2, r2, #3
 800d6c8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d011      	beq.n	800d6f6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6d6:	4a18      	ldr	r2, [pc, #96]	; (800d738 <HAL_SPI_IRQHandler+0x1fc>)
 800d6d8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7fb f89c 	bl	800881c <HAL_DMA_Abort_IT>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d005      	beq.n	800d6f6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d6ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d016      	beq.n	800d72c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d702:	4a0d      	ldr	r2, [pc, #52]	; (800d738 <HAL_SPI_IRQHandler+0x1fc>)
 800d704:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7fb f886 	bl	800881c <HAL_DMA_Abort_IT>
 800d710:	4603      	mov	r3, r0
 800d712:	2b00      	cmp	r3, #0
 800d714:	d00a      	beq.n	800d72c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d71a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800d722:	e003      	b.n	800d72c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f7f6 f9d7 	bl	8003ad8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d72a:	e000      	b.n	800d72e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800d72c:	bf00      	nop
    return;
 800d72e:	bf00      	nop
  }
}
 800d730:	3720      	adds	r7, #32
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
 800d736:	bf00      	nop
 800d738:	0800da07 	.word	0x0800da07

0800d73c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b083      	sub	sp, #12
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800d744:	bf00      	nop
 800d746:	370c      	adds	r7, #12
 800d748:	46bd      	mov	sp, r7
 800d74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74e:	4770      	bx	lr

0800d750 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d750:	b480      	push	{r7}
 800d752:	b083      	sub	sp, #12
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800d758:	bf00      	nop
 800d75a:	370c      	adds	r7, #12
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr

0800d764 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800d76c:	bf00      	nop
 800d76e:	370c      	adds	r7, #12
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr

0800d778 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800d778:	b480      	push	{r7}
 800d77a:	b083      	sub	sp, #12
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d786:	b2db      	uxtb	r3, r3
}
 800d788:	4618      	mov	r0, r3
 800d78a:	370c      	adds	r7, #12
 800d78c:	46bd      	mov	sp, r7
 800d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d792:	4770      	bx	lr

0800d794 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b086      	sub	sp, #24
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7a0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d7a2:	f7fa fdd3 	bl	800834c <HAL_GetTick>
 800d7a6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f003 0320 	and.w	r3, r3, #32
 800d7b2:	2b20      	cmp	r3, #32
 800d7b4:	d03b      	beq.n	800d82e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	685a      	ldr	r2, [r3, #4]
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f022 0220 	bic.w	r2, r2, #32
 800d7c4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	685a      	ldr	r2, [r3, #4]
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f022 0202 	bic.w	r2, r2, #2
 800d7d4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d7d6:	693a      	ldr	r2, [r7, #16]
 800d7d8:	2164      	movs	r1, #100	; 0x64
 800d7da:	6978      	ldr	r0, [r7, #20]
 800d7dc:	f000 fa9e 	bl	800dd1c <SPI_EndRxTxTransaction>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d005      	beq.n	800d7f2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7ea:	f043 0220 	orr.w	r2, r3, #32
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	689b      	ldr	r3, [r3, #8]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d10a      	bne.n	800d810 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	60fb      	str	r3, [r7, #12]
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	68db      	ldr	r3, [r3, #12]
 800d804:	60fb      	str	r3, [r7, #12]
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	689b      	ldr	r3, [r3, #8]
 800d80c:	60fb      	str	r3, [r7, #12]
 800d80e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	2200      	movs	r2, #0
 800d814:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	2201      	movs	r2, #1
 800d81a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d822:	2b00      	cmp	r3, #0
 800d824:	d003      	beq.n	800d82e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d826:	6978      	ldr	r0, [r7, #20]
 800d828:	f7f6 f956 	bl	8003ad8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d82c:	e002      	b.n	800d834 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800d82e:	6978      	ldr	r0, [r7, #20]
 800d830:	f7f6 f93b 	bl	8003aaa <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d834:	3718      	adds	r7, #24
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}

0800d83a <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d83a:	b580      	push	{r7, lr}
 800d83c:	b084      	sub	sp, #16
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d846:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d848:	f7fa fd80 	bl	800834c <HAL_GetTick>
 800d84c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	f003 0320 	and.w	r3, r3, #32
 800d858:	2b20      	cmp	r3, #32
 800d85a:	d03c      	beq.n	800d8d6 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	685a      	ldr	r2, [r3, #4]
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f022 0220 	bic.w	r2, r2, #32
 800d86a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	689b      	ldr	r3, [r3, #8]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d10d      	bne.n	800d890 <SPI_DMAReceiveCplt+0x56>
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d87c:	d108      	bne.n	800d890 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	685a      	ldr	r2, [r3, #4]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	f022 0203 	bic.w	r2, r2, #3
 800d88c:	605a      	str	r2, [r3, #4]
 800d88e:	e007      	b.n	800d8a0 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	685a      	ldr	r2, [r3, #4]
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f022 0201 	bic.w	r2, r2, #1
 800d89e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d8a0:	68ba      	ldr	r2, [r7, #8]
 800d8a2:	2164      	movs	r1, #100	; 0x64
 800d8a4:	68f8      	ldr	r0, [r7, #12]
 800d8a6:	f000 f9e1 	bl	800dc6c <SPI_EndRxTransaction>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d002      	beq.n	800d8b6 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	2220      	movs	r2, #32
 800d8b4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2201      	movs	r2, #1
 800d8c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d003      	beq.n	800d8d6 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d8ce:	68f8      	ldr	r0, [r7, #12]
 800d8d0:	f7f6 f902 	bl	8003ad8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d8d4:	e002      	b.n	800d8dc <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800d8d6:	68f8      	ldr	r0, [r7, #12]
 800d8d8:	f7f6 f8dc 	bl	8003a94 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d8dc:	3710      	adds	r7, #16
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}

0800d8e2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d8e2:	b580      	push	{r7, lr}
 800d8e4:	b084      	sub	sp, #16
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ee:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d8f0:	f7fa fd2c 	bl	800834c <HAL_GetTick>
 800d8f4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f003 0320 	and.w	r3, r3, #32
 800d900:	2b20      	cmp	r3, #32
 800d902:	d030      	beq.n	800d966 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	685a      	ldr	r2, [r3, #4]
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f022 0220 	bic.w	r2, r2, #32
 800d912:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d914:	68ba      	ldr	r2, [r7, #8]
 800d916:	2164      	movs	r1, #100	; 0x64
 800d918:	68f8      	ldr	r0, [r7, #12]
 800d91a:	f000 f9ff 	bl	800dd1c <SPI_EndRxTxTransaction>
 800d91e:	4603      	mov	r3, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	d005      	beq.n	800d930 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d928:	f043 0220 	orr.w	r2, r3, #32
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	685a      	ldr	r2, [r3, #4]
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f022 0203 	bic.w	r2, r2, #3
 800d93e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	2200      	movs	r2, #0
 800d944:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	2200      	movs	r2, #0
 800d94a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	2201      	movs	r2, #1
 800d952:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d003      	beq.n	800d966 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d95e:	68f8      	ldr	r0, [r7, #12]
 800d960:	f7f6 f8ba 	bl	8003ad8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d964:	e002      	b.n	800d96c <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800d966:	68f8      	ldr	r0, [r7, #12]
 800d968:	f7f6 f8aa 	bl	8003ac0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d96c:	3710      	adds	r7, #16
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}

0800d972 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d972:	b580      	push	{r7, lr}
 800d974:	b084      	sub	sp, #16
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d97e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f7ff fedb 	bl	800d73c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d986:	bf00      	nop
 800d988:	3710      	adds	r7, #16
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}

0800d98e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d98e:	b580      	push	{r7, lr}
 800d990:	b084      	sub	sp, #16
 800d992:	af00      	add	r7, sp, #0
 800d994:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d99a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800d99c:	68f8      	ldr	r0, [r7, #12]
 800d99e:	f7ff fed7 	bl	800d750 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d9a2:	bf00      	nop
 800d9a4:	3710      	adds	r7, #16
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}

0800d9aa <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d9aa:	b580      	push	{r7, lr}
 800d9ac:	b084      	sub	sp, #16
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9b6:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800d9b8:	68f8      	ldr	r0, [r7, #12]
 800d9ba:	f7ff fed3 	bl	800d764 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d9be:	bf00      	nop
 800d9c0:	3710      	adds	r7, #16
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}

0800d9c6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d9c6:	b580      	push	{r7, lr}
 800d9c8:	b084      	sub	sp, #16
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9d2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	685a      	ldr	r2, [r3, #4]
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f022 0203 	bic.w	r2, r2, #3
 800d9e2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9e8:	f043 0210 	orr.w	r2, r3, #16
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d9f8:	68f8      	ldr	r0, [r7, #12]
 800d9fa:	f7f6 f86d 	bl	8003ad8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d9fe:	bf00      	nop
 800da00:	3710      	adds	r7, #16
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}

0800da06 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800da06:	b580      	push	{r7, lr}
 800da08:	b084      	sub	sp, #16
 800da0a:	af00      	add	r7, sp, #0
 800da0c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da12:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2200      	movs	r2, #0
 800da18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2200      	movs	r2, #0
 800da20:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800da22:	68f8      	ldr	r0, [r7, #12]
 800da24:	f7f6 f858 	bl	8003ad8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800da28:	bf00      	nop
 800da2a:	3710      	adds	r7, #16
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}

0800da30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b088      	sub	sp, #32
 800da34:	af00      	add	r7, sp, #0
 800da36:	60f8      	str	r0, [r7, #12]
 800da38:	60b9      	str	r1, [r7, #8]
 800da3a:	603b      	str	r3, [r7, #0]
 800da3c:	4613      	mov	r3, r2
 800da3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800da40:	f7fa fc84 	bl	800834c <HAL_GetTick>
 800da44:	4602      	mov	r2, r0
 800da46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da48:	1a9b      	subs	r3, r3, r2
 800da4a:	683a      	ldr	r2, [r7, #0]
 800da4c:	4413      	add	r3, r2
 800da4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800da50:	f7fa fc7c 	bl	800834c <HAL_GetTick>
 800da54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800da56:	4b39      	ldr	r3, [pc, #228]	; (800db3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	015b      	lsls	r3, r3, #5
 800da5c:	0d1b      	lsrs	r3, r3, #20
 800da5e:	69fa      	ldr	r2, [r7, #28]
 800da60:	fb02 f303 	mul.w	r3, r2, r3
 800da64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800da66:	e054      	b.n	800db12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da6e:	d050      	beq.n	800db12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800da70:	f7fa fc6c 	bl	800834c <HAL_GetTick>
 800da74:	4602      	mov	r2, r0
 800da76:	69bb      	ldr	r3, [r7, #24]
 800da78:	1ad3      	subs	r3, r2, r3
 800da7a:	69fa      	ldr	r2, [r7, #28]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d902      	bls.n	800da86 <SPI_WaitFlagStateUntilTimeout+0x56>
 800da80:	69fb      	ldr	r3, [r7, #28]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d13d      	bne.n	800db02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	685a      	ldr	r2, [r3, #4]
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800da94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800da9e:	d111      	bne.n	800dac4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800daa8:	d004      	beq.n	800dab4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	689b      	ldr	r3, [r3, #8]
 800daae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dab2:	d107      	bne.n	800dac4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dac2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dacc:	d10f      	bne.n	800daee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	681a      	ldr	r2, [r3, #0]
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dadc:	601a      	str	r2, [r3, #0]
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	681a      	ldr	r2, [r3, #0]
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800daec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2201      	movs	r2, #1
 800daf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2200      	movs	r2, #0
 800dafa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800dafe:	2303      	movs	r3, #3
 800db00:	e017      	b.n	800db32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d101      	bne.n	800db0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800db08:	2300      	movs	r3, #0
 800db0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	3b01      	subs	r3, #1
 800db10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	689a      	ldr	r2, [r3, #8]
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	4013      	ands	r3, r2
 800db1c:	68ba      	ldr	r2, [r7, #8]
 800db1e:	429a      	cmp	r2, r3
 800db20:	bf0c      	ite	eq
 800db22:	2301      	moveq	r3, #1
 800db24:	2300      	movne	r3, #0
 800db26:	b2db      	uxtb	r3, r3
 800db28:	461a      	mov	r2, r3
 800db2a:	79fb      	ldrb	r3, [r7, #7]
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d19b      	bne.n	800da68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800db30:	2300      	movs	r3, #0
}
 800db32:	4618      	mov	r0, r3
 800db34:	3720      	adds	r7, #32
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	200001e0 	.word	0x200001e0

0800db40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b08a      	sub	sp, #40	; 0x28
 800db44:	af00      	add	r7, sp, #0
 800db46:	60f8      	str	r0, [r7, #12]
 800db48:	60b9      	str	r1, [r7, #8]
 800db4a:	607a      	str	r2, [r7, #4]
 800db4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800db4e:	2300      	movs	r3, #0
 800db50:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800db52:	f7fa fbfb 	bl	800834c <HAL_GetTick>
 800db56:	4602      	mov	r2, r0
 800db58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db5a:	1a9b      	subs	r3, r3, r2
 800db5c:	683a      	ldr	r2, [r7, #0]
 800db5e:	4413      	add	r3, r2
 800db60:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800db62:	f7fa fbf3 	bl	800834c <HAL_GetTick>
 800db66:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	330c      	adds	r3, #12
 800db6e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800db70:	4b3d      	ldr	r3, [pc, #244]	; (800dc68 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800db72:	681a      	ldr	r2, [r3, #0]
 800db74:	4613      	mov	r3, r2
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	4413      	add	r3, r2
 800db7a:	00da      	lsls	r2, r3, #3
 800db7c:	1ad3      	subs	r3, r2, r3
 800db7e:	0d1b      	lsrs	r3, r3, #20
 800db80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db82:	fb02 f303 	mul.w	r3, r2, r3
 800db86:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800db88:	e060      	b.n	800dc4c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800db90:	d107      	bne.n	800dba2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d104      	bne.n	800dba2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800db98:	69fb      	ldr	r3, [r7, #28]
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	b2db      	uxtb	r3, r3
 800db9e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800dba0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dba8:	d050      	beq.n	800dc4c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dbaa:	f7fa fbcf 	bl	800834c <HAL_GetTick>
 800dbae:	4602      	mov	r2, r0
 800dbb0:	6a3b      	ldr	r3, [r7, #32]
 800dbb2:	1ad3      	subs	r3, r2, r3
 800dbb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d902      	bls.n	800dbc0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800dbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d13d      	bne.n	800dc3c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	685a      	ldr	r2, [r3, #4]
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800dbce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	685b      	ldr	r3, [r3, #4]
 800dbd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dbd8:	d111      	bne.n	800dbfe <SPI_WaitFifoStateUntilTimeout+0xbe>
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	689b      	ldr	r3, [r3, #8]
 800dbde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dbe2:	d004      	beq.n	800dbee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	689b      	ldr	r3, [r3, #8]
 800dbe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dbec:	d107      	bne.n	800dbfe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	681a      	ldr	r2, [r3, #0]
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dbfc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc06:	d10f      	bne.n	800dc28 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	681a      	ldr	r2, [r3, #0]
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dc16:	601a      	str	r2, [r3, #0]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	681a      	ldr	r2, [r3, #0]
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dc26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	2200      	movs	r2, #0
 800dc34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800dc38:	2303      	movs	r3, #3
 800dc3a:	e010      	b.n	800dc5e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800dc3c:	69bb      	ldr	r3, [r7, #24]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d101      	bne.n	800dc46 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800dc42:	2300      	movs	r3, #0
 800dc44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800dc46:	69bb      	ldr	r3, [r7, #24]
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	689a      	ldr	r2, [r3, #8]
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	4013      	ands	r3, r2
 800dc56:	687a      	ldr	r2, [r7, #4]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d196      	bne.n	800db8a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800dc5c:	2300      	movs	r3, #0
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3728      	adds	r7, #40	; 0x28
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	bf00      	nop
 800dc68:	200001e0 	.word	0x200001e0

0800dc6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b086      	sub	sp, #24
 800dc70:	af02      	add	r7, sp, #8
 800dc72:	60f8      	str	r0, [r7, #12]
 800dc74:	60b9      	str	r1, [r7, #8]
 800dc76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dc80:	d111      	bne.n	800dca6 <SPI_EndRxTransaction+0x3a>
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	689b      	ldr	r3, [r3, #8]
 800dc86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc8a:	d004      	beq.n	800dc96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	689b      	ldr	r3, [r3, #8]
 800dc90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc94:	d107      	bne.n	800dca6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	681a      	ldr	r2, [r3, #0]
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dca4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	9300      	str	r3, [sp, #0]
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	2200      	movs	r2, #0
 800dcae:	2180      	movs	r1, #128	; 0x80
 800dcb0:	68f8      	ldr	r0, [r7, #12]
 800dcb2:	f7ff febd 	bl	800da30 <SPI_WaitFlagStateUntilTimeout>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d007      	beq.n	800dccc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dcc0:	f043 0220 	orr.w	r2, r3, #32
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800dcc8:	2303      	movs	r3, #3
 800dcca:	e023      	b.n	800dd14 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dcd4:	d11d      	bne.n	800dd12 <SPI_EndRxTransaction+0xa6>
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	689b      	ldr	r3, [r3, #8]
 800dcda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dcde:	d004      	beq.n	800dcea <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	689b      	ldr	r3, [r3, #8]
 800dce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dce8:	d113      	bne.n	800dd12 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	9300      	str	r3, [sp, #0]
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800dcf6:	68f8      	ldr	r0, [r7, #12]
 800dcf8:	f7ff ff22 	bl	800db40 <SPI_WaitFifoStateUntilTimeout>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d007      	beq.n	800dd12 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd06:	f043 0220 	orr.w	r2, r3, #32
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800dd0e:	2303      	movs	r3, #3
 800dd10:	e000      	b.n	800dd14 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800dd12:	2300      	movs	r3, #0
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3710      	adds	r7, #16
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}

0800dd1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b086      	sub	sp, #24
 800dd20:	af02      	add	r7, sp, #8
 800dd22:	60f8      	str	r0, [r7, #12]
 800dd24:	60b9      	str	r1, [r7, #8]
 800dd26:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	9300      	str	r3, [sp, #0]
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	2200      	movs	r2, #0
 800dd30:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800dd34:	68f8      	ldr	r0, [r7, #12]
 800dd36:	f7ff ff03 	bl	800db40 <SPI_WaitFifoStateUntilTimeout>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d007      	beq.n	800dd50 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd44:	f043 0220 	orr.w	r2, r3, #32
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800dd4c:	2303      	movs	r3, #3
 800dd4e:	e027      	b.n	800dda0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	2200      	movs	r2, #0
 800dd58:	2180      	movs	r1, #128	; 0x80
 800dd5a:	68f8      	ldr	r0, [r7, #12]
 800dd5c:	f7ff fe68 	bl	800da30 <SPI_WaitFlagStateUntilTimeout>
 800dd60:	4603      	mov	r3, r0
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d007      	beq.n	800dd76 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd6a:	f043 0220 	orr.w	r2, r3, #32
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800dd72:	2303      	movs	r3, #3
 800dd74:	e014      	b.n	800dda0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	9300      	str	r3, [sp, #0]
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800dd82:	68f8      	ldr	r0, [r7, #12]
 800dd84:	f7ff fedc 	bl	800db40 <SPI_WaitFifoStateUntilTimeout>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d007      	beq.n	800dd9e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd92:	f043 0220 	orr.w	r2, r3, #32
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800dd9a:	2303      	movs	r3, #3
 800dd9c:	e000      	b.n	800dda0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800dd9e:	2300      	movs	r3, #0
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3710      	adds	r7, #16
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b082      	sub	sp, #8
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d101      	bne.n	800ddba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	e049      	b.n	800de4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d106      	bne.n	800ddd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2200      	movs	r2, #0
 800ddca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f7f9 f942 	bl	8007058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2202      	movs	r2, #2
 800ddd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681a      	ldr	r2, [r3, #0]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	3304      	adds	r3, #4
 800dde4:	4619      	mov	r1, r3
 800dde6:	4610      	mov	r0, r2
 800dde8:	f000 fc0a 	bl	800e600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2201      	movs	r2, #1
 800ddf0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2201      	movs	r2, #1
 800de00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2201      	movs	r2, #1
 800de08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2201      	movs	r2, #1
 800de10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2201      	movs	r2, #1
 800de18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2201      	movs	r2, #1
 800de20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2201      	movs	r2, #1
 800de28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2201      	movs	r2, #1
 800de30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2201      	movs	r2, #1
 800de38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2201      	movs	r2, #1
 800de40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2201      	movs	r2, #1
 800de48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800de4c:	2300      	movs	r3, #0
}
 800de4e:	4618      	mov	r0, r3
 800de50:	3708      	adds	r7, #8
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}
	...

0800de58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800de58:	b480      	push	{r7}
 800de5a:	b085      	sub	sp, #20
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de66:	b2db      	uxtb	r3, r3
 800de68:	2b01      	cmp	r3, #1
 800de6a:	d001      	beq.n	800de70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800de6c:	2301      	movs	r3, #1
 800de6e:	e04f      	b.n	800df10 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2202      	movs	r2, #2
 800de74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	68da      	ldr	r2, [r3, #12]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	f042 0201 	orr.w	r2, r2, #1
 800de86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	4a23      	ldr	r2, [pc, #140]	; (800df1c <HAL_TIM_Base_Start_IT+0xc4>)
 800de8e:	4293      	cmp	r3, r2
 800de90:	d01d      	beq.n	800dece <HAL_TIM_Base_Start_IT+0x76>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de9a:	d018      	beq.n	800dece <HAL_TIM_Base_Start_IT+0x76>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	4a1f      	ldr	r2, [pc, #124]	; (800df20 <HAL_TIM_Base_Start_IT+0xc8>)
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d013      	beq.n	800dece <HAL_TIM_Base_Start_IT+0x76>
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	4a1e      	ldr	r2, [pc, #120]	; (800df24 <HAL_TIM_Base_Start_IT+0xcc>)
 800deac:	4293      	cmp	r3, r2
 800deae:	d00e      	beq.n	800dece <HAL_TIM_Base_Start_IT+0x76>
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	4a1c      	ldr	r2, [pc, #112]	; (800df28 <HAL_TIM_Base_Start_IT+0xd0>)
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d009      	beq.n	800dece <HAL_TIM_Base_Start_IT+0x76>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	4a1b      	ldr	r2, [pc, #108]	; (800df2c <HAL_TIM_Base_Start_IT+0xd4>)
 800dec0:	4293      	cmp	r3, r2
 800dec2:	d004      	beq.n	800dece <HAL_TIM_Base_Start_IT+0x76>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	4a19      	ldr	r2, [pc, #100]	; (800df30 <HAL_TIM_Base_Start_IT+0xd8>)
 800deca:	4293      	cmp	r3, r2
 800decc:	d115      	bne.n	800defa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	689a      	ldr	r2, [r3, #8]
 800ded4:	4b17      	ldr	r3, [pc, #92]	; (800df34 <HAL_TIM_Base_Start_IT+0xdc>)
 800ded6:	4013      	ands	r3, r2
 800ded8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2b06      	cmp	r3, #6
 800dede:	d015      	beq.n	800df0c <HAL_TIM_Base_Start_IT+0xb4>
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dee6:	d011      	beq.n	800df0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	681a      	ldr	r2, [r3, #0]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	f042 0201 	orr.w	r2, r2, #1
 800def6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800def8:	e008      	b.n	800df0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	681a      	ldr	r2, [r3, #0]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	f042 0201 	orr.w	r2, r2, #1
 800df08:	601a      	str	r2, [r3, #0]
 800df0a:	e000      	b.n	800df0e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800df0e:	2300      	movs	r3, #0
}
 800df10:	4618      	mov	r0, r3
 800df12:	3714      	adds	r7, #20
 800df14:	46bd      	mov	sp, r7
 800df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1a:	4770      	bx	lr
 800df1c:	40012c00 	.word	0x40012c00
 800df20:	40000400 	.word	0x40000400
 800df24:	40000800 	.word	0x40000800
 800df28:	40000c00 	.word	0x40000c00
 800df2c:	40013400 	.word	0x40013400
 800df30:	40014000 	.word	0x40014000
 800df34:	00010007 	.word	0x00010007

0800df38 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b086      	sub	sp, #24
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d101      	bne.n	800df4c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800df48:	2301      	movs	r3, #1
 800df4a:	e097      	b.n	800e07c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df52:	b2db      	uxtb	r3, r3
 800df54:	2b00      	cmp	r3, #0
 800df56:	d106      	bne.n	800df66 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2200      	movs	r2, #0
 800df5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f7f9 f8bb 	bl	80070dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2202      	movs	r2, #2
 800df6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	689b      	ldr	r3, [r3, #8]
 800df74:	687a      	ldr	r2, [r7, #4]
 800df76:	6812      	ldr	r2, [r2, #0]
 800df78:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800df7c:	f023 0307 	bic.w	r3, r3, #7
 800df80:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681a      	ldr	r2, [r3, #0]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	3304      	adds	r3, #4
 800df8a:	4619      	mov	r1, r3
 800df8c:	4610      	mov	r0, r2
 800df8e:	f000 fb37 	bl	800e600 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	689b      	ldr	r3, [r3, #8]
 800df98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	699b      	ldr	r3, [r3, #24]
 800dfa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	6a1b      	ldr	r3, [r3, #32]
 800dfa8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	697a      	ldr	r2, [r7, #20]
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dfba:	f023 0303 	bic.w	r3, r3, #3
 800dfbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	689a      	ldr	r2, [r3, #8]
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	699b      	ldr	r3, [r3, #24]
 800dfc8:	021b      	lsls	r3, r3, #8
 800dfca:	4313      	orrs	r3, r2
 800dfcc:	693a      	ldr	r2, [r7, #16]
 800dfce:	4313      	orrs	r3, r2
 800dfd0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800dfd8:	f023 030c 	bic.w	r3, r3, #12
 800dfdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dfe4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dfe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	68da      	ldr	r2, [r3, #12]
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	69db      	ldr	r3, [r3, #28]
 800dff2:	021b      	lsls	r3, r3, #8
 800dff4:	4313      	orrs	r3, r2
 800dff6:	693a      	ldr	r2, [r7, #16]
 800dff8:	4313      	orrs	r3, r2
 800dffa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	691b      	ldr	r3, [r3, #16]
 800e000:	011a      	lsls	r2, r3, #4
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	6a1b      	ldr	r3, [r3, #32]
 800e006:	031b      	lsls	r3, r3, #12
 800e008:	4313      	orrs	r3, r2
 800e00a:	693a      	ldr	r2, [r7, #16]
 800e00c:	4313      	orrs	r3, r2
 800e00e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e016:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e01e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	685a      	ldr	r2, [r3, #4]
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	695b      	ldr	r3, [r3, #20]
 800e028:	011b      	lsls	r3, r3, #4
 800e02a:	4313      	orrs	r3, r2
 800e02c:	68fa      	ldr	r2, [r7, #12]
 800e02e:	4313      	orrs	r3, r2
 800e030:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	697a      	ldr	r2, [r7, #20]
 800e038:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	693a      	ldr	r2, [r7, #16]
 800e040:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	68fa      	ldr	r2, [r7, #12]
 800e048:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2201      	movs	r2, #1
 800e04e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2201      	movs	r2, #1
 800e056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2201      	movs	r2, #1
 800e05e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2201      	movs	r2, #1
 800e066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2201      	movs	r2, #1
 800e06e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2201      	movs	r2, #1
 800e076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e07a:	2300      	movs	r3, #0
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3718      	adds	r7, #24
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e094:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e09c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e0a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e0ac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d110      	bne.n	800e0d6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e0b4:	7bfb      	ldrb	r3, [r7, #15]
 800e0b6:	2b01      	cmp	r3, #1
 800e0b8:	d102      	bne.n	800e0c0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800e0ba:	7b7b      	ldrb	r3, [r7, #13]
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	d001      	beq.n	800e0c4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	e089      	b.n	800e1d8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2202      	movs	r2, #2
 800e0c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2202      	movs	r2, #2
 800e0d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e0d4:	e031      	b.n	800e13a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	2b04      	cmp	r3, #4
 800e0da:	d110      	bne.n	800e0fe <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e0dc:	7bbb      	ldrb	r3, [r7, #14]
 800e0de:	2b01      	cmp	r3, #1
 800e0e0:	d102      	bne.n	800e0e8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e0e2:	7b3b      	ldrb	r3, [r7, #12]
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	d001      	beq.n	800e0ec <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	e075      	b.n	800e1d8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2202      	movs	r2, #2
 800e0f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2202      	movs	r2, #2
 800e0f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e0fc:	e01d      	b.n	800e13a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e0fe:	7bfb      	ldrb	r3, [r7, #15]
 800e100:	2b01      	cmp	r3, #1
 800e102:	d108      	bne.n	800e116 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e104:	7bbb      	ldrb	r3, [r7, #14]
 800e106:	2b01      	cmp	r3, #1
 800e108:	d105      	bne.n	800e116 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e10a:	7b7b      	ldrb	r3, [r7, #13]
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d102      	bne.n	800e116 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e110:	7b3b      	ldrb	r3, [r7, #12]
 800e112:	2b01      	cmp	r3, #1
 800e114:	d001      	beq.n	800e11a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800e116:	2301      	movs	r3, #1
 800e118:	e05e      	b.n	800e1d8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2202      	movs	r2, #2
 800e11e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2202      	movs	r2, #2
 800e126:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2202      	movs	r2, #2
 800e12e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2202      	movs	r2, #2
 800e136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d003      	beq.n	800e148 <HAL_TIM_Encoder_Start_IT+0xc4>
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	2b04      	cmp	r3, #4
 800e144:	d010      	beq.n	800e168 <HAL_TIM_Encoder_Start_IT+0xe4>
 800e146:	e01f      	b.n	800e188 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	2201      	movs	r2, #1
 800e14e:	2100      	movs	r1, #0
 800e150:	4618      	mov	r0, r3
 800e152:	f000 fb89 	bl	800e868 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	68da      	ldr	r2, [r3, #12]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f042 0202 	orr.w	r2, r2, #2
 800e164:	60da      	str	r2, [r3, #12]
      break;
 800e166:	e02e      	b.n	800e1c6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	2201      	movs	r2, #1
 800e16e:	2104      	movs	r1, #4
 800e170:	4618      	mov	r0, r3
 800e172:	f000 fb79 	bl	800e868 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	68da      	ldr	r2, [r3, #12]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	f042 0204 	orr.w	r2, r2, #4
 800e184:	60da      	str	r2, [r3, #12]
      break;
 800e186:	e01e      	b.n	800e1c6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	2201      	movs	r2, #1
 800e18e:	2100      	movs	r1, #0
 800e190:	4618      	mov	r0, r3
 800e192:	f000 fb69 	bl	800e868 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2201      	movs	r2, #1
 800e19c:	2104      	movs	r1, #4
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f000 fb62 	bl	800e868 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	68da      	ldr	r2, [r3, #12]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f042 0202 	orr.w	r2, r2, #2
 800e1b2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	68da      	ldr	r2, [r3, #12]
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	f042 0204 	orr.w	r2, r2, #4
 800e1c2:	60da      	str	r2, [r3, #12]
      break;
 800e1c4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	681a      	ldr	r2, [r3, #0]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	f042 0201 	orr.w	r2, r2, #1
 800e1d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e1d6:	2300      	movs	r3, #0
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3710      	adds	r7, #16
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}

0800e1e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	691b      	ldr	r3, [r3, #16]
 800e1ee:	f003 0302 	and.w	r3, r3, #2
 800e1f2:	2b02      	cmp	r3, #2
 800e1f4:	d122      	bne.n	800e23c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	68db      	ldr	r3, [r3, #12]
 800e1fc:	f003 0302 	and.w	r3, r3, #2
 800e200:	2b02      	cmp	r3, #2
 800e202:	d11b      	bne.n	800e23c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	f06f 0202 	mvn.w	r2, #2
 800e20c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2201      	movs	r2, #1
 800e212:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	699b      	ldr	r3, [r3, #24]
 800e21a:	f003 0303 	and.w	r3, r3, #3
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d003      	beq.n	800e22a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 f9ce 	bl	800e5c4 <HAL_TIM_IC_CaptureCallback>
 800e228:	e005      	b.n	800e236 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f000 f9c0 	bl	800e5b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f000 f9d1 	bl	800e5d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2200      	movs	r2, #0
 800e23a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	691b      	ldr	r3, [r3, #16]
 800e242:	f003 0304 	and.w	r3, r3, #4
 800e246:	2b04      	cmp	r3, #4
 800e248:	d122      	bne.n	800e290 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	68db      	ldr	r3, [r3, #12]
 800e250:	f003 0304 	and.w	r3, r3, #4
 800e254:	2b04      	cmp	r3, #4
 800e256:	d11b      	bne.n	800e290 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	f06f 0204 	mvn.w	r2, #4
 800e260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2202      	movs	r2, #2
 800e266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	699b      	ldr	r3, [r3, #24]
 800e26e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e272:	2b00      	cmp	r3, #0
 800e274:	d003      	beq.n	800e27e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 f9a4 	bl	800e5c4 <HAL_TIM_IC_CaptureCallback>
 800e27c:	e005      	b.n	800e28a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f000 f996 	bl	800e5b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f000 f9a7 	bl	800e5d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2200      	movs	r2, #0
 800e28e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	691b      	ldr	r3, [r3, #16]
 800e296:	f003 0308 	and.w	r3, r3, #8
 800e29a:	2b08      	cmp	r3, #8
 800e29c:	d122      	bne.n	800e2e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	68db      	ldr	r3, [r3, #12]
 800e2a4:	f003 0308 	and.w	r3, r3, #8
 800e2a8:	2b08      	cmp	r3, #8
 800e2aa:	d11b      	bne.n	800e2e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	f06f 0208 	mvn.w	r2, #8
 800e2b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2204      	movs	r2, #4
 800e2ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	69db      	ldr	r3, [r3, #28]
 800e2c2:	f003 0303 	and.w	r3, r3, #3
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d003      	beq.n	800e2d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f000 f97a 	bl	800e5c4 <HAL_TIM_IC_CaptureCallback>
 800e2d0:	e005      	b.n	800e2de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 f96c 	bl	800e5b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f000 f97d 	bl	800e5d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	691b      	ldr	r3, [r3, #16]
 800e2ea:	f003 0310 	and.w	r3, r3, #16
 800e2ee:	2b10      	cmp	r3, #16
 800e2f0:	d122      	bne.n	800e338 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	f003 0310 	and.w	r3, r3, #16
 800e2fc:	2b10      	cmp	r3, #16
 800e2fe:	d11b      	bne.n	800e338 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	f06f 0210 	mvn.w	r2, #16
 800e308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2208      	movs	r2, #8
 800e30e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	69db      	ldr	r3, [r3, #28]
 800e316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d003      	beq.n	800e326 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f000 f950 	bl	800e5c4 <HAL_TIM_IC_CaptureCallback>
 800e324:	e005      	b.n	800e332 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f000 f942 	bl	800e5b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f000 f953 	bl	800e5d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2200      	movs	r2, #0
 800e336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	691b      	ldr	r3, [r3, #16]
 800e33e:	f003 0301 	and.w	r3, r3, #1
 800e342:	2b01      	cmp	r3, #1
 800e344:	d10e      	bne.n	800e364 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	68db      	ldr	r3, [r3, #12]
 800e34c:	f003 0301 	and.w	r3, r3, #1
 800e350:	2b01      	cmp	r3, #1
 800e352:	d107      	bne.n	800e364 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	f06f 0201 	mvn.w	r2, #1
 800e35c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f7f7 fe1e 	bl	8005fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	691b      	ldr	r3, [r3, #16]
 800e36a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e36e:	2b80      	cmp	r3, #128	; 0x80
 800e370:	d10e      	bne.n	800e390 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e37c:	2b80      	cmp	r3, #128	; 0x80
 800e37e:	d107      	bne.n	800e390 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 fb24 	bl	800e9d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	691b      	ldr	r3, [r3, #16]
 800e396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e39a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e39e:	d10e      	bne.n	800e3be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	68db      	ldr	r3, [r3, #12]
 800e3a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3aa:	2b80      	cmp	r3, #128	; 0x80
 800e3ac:	d107      	bne.n	800e3be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e3b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f000 fb17 	bl	800e9ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	691b      	ldr	r3, [r3, #16]
 800e3c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3c8:	2b40      	cmp	r3, #64	; 0x40
 800e3ca:	d10e      	bne.n	800e3ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	68db      	ldr	r3, [r3, #12]
 800e3d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3d6:	2b40      	cmp	r3, #64	; 0x40
 800e3d8:	d107      	bne.n	800e3ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e3e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f000 f901 	bl	800e5ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	691b      	ldr	r3, [r3, #16]
 800e3f0:	f003 0320 	and.w	r3, r3, #32
 800e3f4:	2b20      	cmp	r3, #32
 800e3f6:	d10e      	bne.n	800e416 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	68db      	ldr	r3, [r3, #12]
 800e3fe:	f003 0320 	and.w	r3, r3, #32
 800e402:	2b20      	cmp	r3, #32
 800e404:	d107      	bne.n	800e416 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f06f 0220 	mvn.w	r2, #32
 800e40e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f000 fad7 	bl	800e9c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e416:	bf00      	nop
 800e418:	3708      	adds	r7, #8
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}

0800e41e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e41e:	b580      	push	{r7, lr}
 800e420:	b084      	sub	sp, #16
 800e422:	af00      	add	r7, sp, #0
 800e424:	6078      	str	r0, [r7, #4]
 800e426:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e428:	2300      	movs	r3, #0
 800e42a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e432:	2b01      	cmp	r3, #1
 800e434:	d101      	bne.n	800e43a <HAL_TIM_ConfigClockSource+0x1c>
 800e436:	2302      	movs	r3, #2
 800e438:	e0b6      	b.n	800e5a8 <HAL_TIM_ConfigClockSource+0x18a>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2201      	movs	r2, #1
 800e43e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2202      	movs	r2, #2
 800e446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	689b      	ldr	r3, [r3, #8]
 800e450:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e458:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e45c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e464:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	68ba      	ldr	r2, [r7, #8]
 800e46c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e476:	d03e      	beq.n	800e4f6 <HAL_TIM_ConfigClockSource+0xd8>
 800e478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e47c:	f200 8087 	bhi.w	800e58e <HAL_TIM_ConfigClockSource+0x170>
 800e480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e484:	f000 8086 	beq.w	800e594 <HAL_TIM_ConfigClockSource+0x176>
 800e488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e48c:	d87f      	bhi.n	800e58e <HAL_TIM_ConfigClockSource+0x170>
 800e48e:	2b70      	cmp	r3, #112	; 0x70
 800e490:	d01a      	beq.n	800e4c8 <HAL_TIM_ConfigClockSource+0xaa>
 800e492:	2b70      	cmp	r3, #112	; 0x70
 800e494:	d87b      	bhi.n	800e58e <HAL_TIM_ConfigClockSource+0x170>
 800e496:	2b60      	cmp	r3, #96	; 0x60
 800e498:	d050      	beq.n	800e53c <HAL_TIM_ConfigClockSource+0x11e>
 800e49a:	2b60      	cmp	r3, #96	; 0x60
 800e49c:	d877      	bhi.n	800e58e <HAL_TIM_ConfigClockSource+0x170>
 800e49e:	2b50      	cmp	r3, #80	; 0x50
 800e4a0:	d03c      	beq.n	800e51c <HAL_TIM_ConfigClockSource+0xfe>
 800e4a2:	2b50      	cmp	r3, #80	; 0x50
 800e4a4:	d873      	bhi.n	800e58e <HAL_TIM_ConfigClockSource+0x170>
 800e4a6:	2b40      	cmp	r3, #64	; 0x40
 800e4a8:	d058      	beq.n	800e55c <HAL_TIM_ConfigClockSource+0x13e>
 800e4aa:	2b40      	cmp	r3, #64	; 0x40
 800e4ac:	d86f      	bhi.n	800e58e <HAL_TIM_ConfigClockSource+0x170>
 800e4ae:	2b30      	cmp	r3, #48	; 0x30
 800e4b0:	d064      	beq.n	800e57c <HAL_TIM_ConfigClockSource+0x15e>
 800e4b2:	2b30      	cmp	r3, #48	; 0x30
 800e4b4:	d86b      	bhi.n	800e58e <HAL_TIM_ConfigClockSource+0x170>
 800e4b6:	2b20      	cmp	r3, #32
 800e4b8:	d060      	beq.n	800e57c <HAL_TIM_ConfigClockSource+0x15e>
 800e4ba:	2b20      	cmp	r3, #32
 800e4bc:	d867      	bhi.n	800e58e <HAL_TIM_ConfigClockSource+0x170>
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d05c      	beq.n	800e57c <HAL_TIM_ConfigClockSource+0x15e>
 800e4c2:	2b10      	cmp	r3, #16
 800e4c4:	d05a      	beq.n	800e57c <HAL_TIM_ConfigClockSource+0x15e>
 800e4c6:	e062      	b.n	800e58e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6818      	ldr	r0, [r3, #0]
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	6899      	ldr	r1, [r3, #8]
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	685a      	ldr	r2, [r3, #4]
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	68db      	ldr	r3, [r3, #12]
 800e4d8:	f000 f9a6 	bl	800e828 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	689b      	ldr	r3, [r3, #8]
 800e4e2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e4ea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	68ba      	ldr	r2, [r7, #8]
 800e4f2:	609a      	str	r2, [r3, #8]
      break;
 800e4f4:	e04f      	b.n	800e596 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6818      	ldr	r0, [r3, #0]
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	6899      	ldr	r1, [r3, #8]
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	685a      	ldr	r2, [r3, #4]
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	68db      	ldr	r3, [r3, #12]
 800e506:	f000 f98f 	bl	800e828 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	689a      	ldr	r2, [r3, #8]
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e518:	609a      	str	r2, [r3, #8]
      break;
 800e51a:	e03c      	b.n	800e596 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6818      	ldr	r0, [r3, #0]
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	6859      	ldr	r1, [r3, #4]
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	68db      	ldr	r3, [r3, #12]
 800e528:	461a      	mov	r2, r3
 800e52a:	f000 f903 	bl	800e734 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	2150      	movs	r1, #80	; 0x50
 800e534:	4618      	mov	r0, r3
 800e536:	f000 f95c 	bl	800e7f2 <TIM_ITRx_SetConfig>
      break;
 800e53a:	e02c      	b.n	800e596 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6818      	ldr	r0, [r3, #0]
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	6859      	ldr	r1, [r3, #4]
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	68db      	ldr	r3, [r3, #12]
 800e548:	461a      	mov	r2, r3
 800e54a:	f000 f922 	bl	800e792 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2160      	movs	r1, #96	; 0x60
 800e554:	4618      	mov	r0, r3
 800e556:	f000 f94c 	bl	800e7f2 <TIM_ITRx_SetConfig>
      break;
 800e55a:	e01c      	b.n	800e596 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	6818      	ldr	r0, [r3, #0]
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	6859      	ldr	r1, [r3, #4]
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	68db      	ldr	r3, [r3, #12]
 800e568:	461a      	mov	r2, r3
 800e56a:	f000 f8e3 	bl	800e734 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	2140      	movs	r1, #64	; 0x40
 800e574:	4618      	mov	r0, r3
 800e576:	f000 f93c 	bl	800e7f2 <TIM_ITRx_SetConfig>
      break;
 800e57a:	e00c      	b.n	800e596 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681a      	ldr	r2, [r3, #0]
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	4619      	mov	r1, r3
 800e586:	4610      	mov	r0, r2
 800e588:	f000 f933 	bl	800e7f2 <TIM_ITRx_SetConfig>
      break;
 800e58c:	e003      	b.n	800e596 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800e58e:	2301      	movs	r3, #1
 800e590:	73fb      	strb	r3, [r7, #15]
      break;
 800e592:	e000      	b.n	800e596 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800e594:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2201      	movs	r2, #1
 800e59a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	3710      	adds	r7, #16
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}

0800e5b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e5b0:	b480      	push	{r7}
 800e5b2:	b083      	sub	sp, #12
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e5b8:	bf00      	nop
 800e5ba:	370c      	adds	r7, #12
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c2:	4770      	bx	lr

0800e5c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b083      	sub	sp, #12
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e5cc:	bf00      	nop
 800e5ce:	370c      	adds	r7, #12
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr

0800e5d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e5e0:	bf00      	nop
 800e5e2:	370c      	adds	r7, #12
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr

0800e5ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b083      	sub	sp, #12
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e5f4:	bf00      	nop
 800e5f6:	370c      	adds	r7, #12
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fe:	4770      	bx	lr

0800e600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e600:	b480      	push	{r7}
 800e602:	b085      	sub	sp, #20
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	4a40      	ldr	r2, [pc, #256]	; (800e714 <TIM_Base_SetConfig+0x114>)
 800e614:	4293      	cmp	r3, r2
 800e616:	d013      	beq.n	800e640 <TIM_Base_SetConfig+0x40>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e61e:	d00f      	beq.n	800e640 <TIM_Base_SetConfig+0x40>
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	4a3d      	ldr	r2, [pc, #244]	; (800e718 <TIM_Base_SetConfig+0x118>)
 800e624:	4293      	cmp	r3, r2
 800e626:	d00b      	beq.n	800e640 <TIM_Base_SetConfig+0x40>
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	4a3c      	ldr	r2, [pc, #240]	; (800e71c <TIM_Base_SetConfig+0x11c>)
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d007      	beq.n	800e640 <TIM_Base_SetConfig+0x40>
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	4a3b      	ldr	r2, [pc, #236]	; (800e720 <TIM_Base_SetConfig+0x120>)
 800e634:	4293      	cmp	r3, r2
 800e636:	d003      	beq.n	800e640 <TIM_Base_SetConfig+0x40>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	4a3a      	ldr	r2, [pc, #232]	; (800e724 <TIM_Base_SetConfig+0x124>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d108      	bne.n	800e652 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	685b      	ldr	r3, [r3, #4]
 800e64c:	68fa      	ldr	r2, [r7, #12]
 800e64e:	4313      	orrs	r3, r2
 800e650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	4a2f      	ldr	r2, [pc, #188]	; (800e714 <TIM_Base_SetConfig+0x114>)
 800e656:	4293      	cmp	r3, r2
 800e658:	d01f      	beq.n	800e69a <TIM_Base_SetConfig+0x9a>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e660:	d01b      	beq.n	800e69a <TIM_Base_SetConfig+0x9a>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	4a2c      	ldr	r2, [pc, #176]	; (800e718 <TIM_Base_SetConfig+0x118>)
 800e666:	4293      	cmp	r3, r2
 800e668:	d017      	beq.n	800e69a <TIM_Base_SetConfig+0x9a>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	4a2b      	ldr	r2, [pc, #172]	; (800e71c <TIM_Base_SetConfig+0x11c>)
 800e66e:	4293      	cmp	r3, r2
 800e670:	d013      	beq.n	800e69a <TIM_Base_SetConfig+0x9a>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	4a2a      	ldr	r2, [pc, #168]	; (800e720 <TIM_Base_SetConfig+0x120>)
 800e676:	4293      	cmp	r3, r2
 800e678:	d00f      	beq.n	800e69a <TIM_Base_SetConfig+0x9a>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	4a29      	ldr	r2, [pc, #164]	; (800e724 <TIM_Base_SetConfig+0x124>)
 800e67e:	4293      	cmp	r3, r2
 800e680:	d00b      	beq.n	800e69a <TIM_Base_SetConfig+0x9a>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	4a28      	ldr	r2, [pc, #160]	; (800e728 <TIM_Base_SetConfig+0x128>)
 800e686:	4293      	cmp	r3, r2
 800e688:	d007      	beq.n	800e69a <TIM_Base_SetConfig+0x9a>
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	4a27      	ldr	r2, [pc, #156]	; (800e72c <TIM_Base_SetConfig+0x12c>)
 800e68e:	4293      	cmp	r3, r2
 800e690:	d003      	beq.n	800e69a <TIM_Base_SetConfig+0x9a>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	4a26      	ldr	r2, [pc, #152]	; (800e730 <TIM_Base_SetConfig+0x130>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d108      	bne.n	800e6ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e6a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	68db      	ldr	r3, [r3, #12]
 800e6a6:	68fa      	ldr	r2, [r7, #12]
 800e6a8:	4313      	orrs	r3, r2
 800e6aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	695b      	ldr	r3, [r3, #20]
 800e6b6:	4313      	orrs	r3, r2
 800e6b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	68fa      	ldr	r2, [r7, #12]
 800e6be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	689a      	ldr	r2, [r3, #8]
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	681a      	ldr	r2, [r3, #0]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	4a10      	ldr	r2, [pc, #64]	; (800e714 <TIM_Base_SetConfig+0x114>)
 800e6d4:	4293      	cmp	r3, r2
 800e6d6:	d00f      	beq.n	800e6f8 <TIM_Base_SetConfig+0xf8>
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	4a12      	ldr	r2, [pc, #72]	; (800e724 <TIM_Base_SetConfig+0x124>)
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d00b      	beq.n	800e6f8 <TIM_Base_SetConfig+0xf8>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	4a11      	ldr	r2, [pc, #68]	; (800e728 <TIM_Base_SetConfig+0x128>)
 800e6e4:	4293      	cmp	r3, r2
 800e6e6:	d007      	beq.n	800e6f8 <TIM_Base_SetConfig+0xf8>
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	4a10      	ldr	r2, [pc, #64]	; (800e72c <TIM_Base_SetConfig+0x12c>)
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d003      	beq.n	800e6f8 <TIM_Base_SetConfig+0xf8>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	4a0f      	ldr	r2, [pc, #60]	; (800e730 <TIM_Base_SetConfig+0x130>)
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d103      	bne.n	800e700 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	691a      	ldr	r2, [r3, #16]
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2201      	movs	r2, #1
 800e704:	615a      	str	r2, [r3, #20]
}
 800e706:	bf00      	nop
 800e708:	3714      	adds	r7, #20
 800e70a:	46bd      	mov	sp, r7
 800e70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e710:	4770      	bx	lr
 800e712:	bf00      	nop
 800e714:	40012c00 	.word	0x40012c00
 800e718:	40000400 	.word	0x40000400
 800e71c:	40000800 	.word	0x40000800
 800e720:	40000c00 	.word	0x40000c00
 800e724:	40013400 	.word	0x40013400
 800e728:	40014000 	.word	0x40014000
 800e72c:	40014400 	.word	0x40014400
 800e730:	40014800 	.word	0x40014800

0800e734 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e734:	b480      	push	{r7}
 800e736:	b087      	sub	sp, #28
 800e738:	af00      	add	r7, sp, #0
 800e73a:	60f8      	str	r0, [r7, #12]
 800e73c:	60b9      	str	r1, [r7, #8]
 800e73e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	6a1b      	ldr	r3, [r3, #32]
 800e744:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	6a1b      	ldr	r3, [r3, #32]
 800e74a:	f023 0201 	bic.w	r2, r3, #1
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	699b      	ldr	r3, [r3, #24]
 800e756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e75e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	011b      	lsls	r3, r3, #4
 800e764:	693a      	ldr	r2, [r7, #16]
 800e766:	4313      	orrs	r3, r2
 800e768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	f023 030a 	bic.w	r3, r3, #10
 800e770:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e772:	697a      	ldr	r2, [r7, #20]
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	4313      	orrs	r3, r2
 800e778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	693a      	ldr	r2, [r7, #16]
 800e77e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	697a      	ldr	r2, [r7, #20]
 800e784:	621a      	str	r2, [r3, #32]
}
 800e786:	bf00      	nop
 800e788:	371c      	adds	r7, #28
 800e78a:	46bd      	mov	sp, r7
 800e78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e790:	4770      	bx	lr

0800e792 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e792:	b480      	push	{r7}
 800e794:	b087      	sub	sp, #28
 800e796:	af00      	add	r7, sp, #0
 800e798:	60f8      	str	r0, [r7, #12]
 800e79a:	60b9      	str	r1, [r7, #8]
 800e79c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	6a1b      	ldr	r3, [r3, #32]
 800e7a2:	f023 0210 	bic.w	r2, r3, #16
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	699b      	ldr	r3, [r3, #24]
 800e7ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	6a1b      	ldr	r3, [r3, #32]
 800e7b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e7bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	031b      	lsls	r3, r3, #12
 800e7c2:	697a      	ldr	r2, [r7, #20]
 800e7c4:	4313      	orrs	r3, r2
 800e7c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e7ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	011b      	lsls	r3, r3, #4
 800e7d4:	693a      	ldr	r2, [r7, #16]
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	697a      	ldr	r2, [r7, #20]
 800e7de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	693a      	ldr	r2, [r7, #16]
 800e7e4:	621a      	str	r2, [r3, #32]
}
 800e7e6:	bf00      	nop
 800e7e8:	371c      	adds	r7, #28
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f0:	4770      	bx	lr

0800e7f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e7f2:	b480      	push	{r7}
 800e7f4:	b085      	sub	sp, #20
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
 800e7fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	689b      	ldr	r3, [r3, #8]
 800e800:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e808:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e80a:	683a      	ldr	r2, [r7, #0]
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	4313      	orrs	r3, r2
 800e810:	f043 0307 	orr.w	r3, r3, #7
 800e814:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	68fa      	ldr	r2, [r7, #12]
 800e81a:	609a      	str	r2, [r3, #8]
}
 800e81c:	bf00      	nop
 800e81e:	3714      	adds	r7, #20
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr

0800e828 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e828:	b480      	push	{r7}
 800e82a:	b087      	sub	sp, #28
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	60f8      	str	r0, [r7, #12]
 800e830:	60b9      	str	r1, [r7, #8]
 800e832:	607a      	str	r2, [r7, #4]
 800e834:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	689b      	ldr	r3, [r3, #8]
 800e83a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e842:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	021a      	lsls	r2, r3, #8
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	431a      	orrs	r2, r3
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	4313      	orrs	r3, r2
 800e850:	697a      	ldr	r2, [r7, #20]
 800e852:	4313      	orrs	r3, r2
 800e854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	697a      	ldr	r2, [r7, #20]
 800e85a:	609a      	str	r2, [r3, #8]
}
 800e85c:	bf00      	nop
 800e85e:	371c      	adds	r7, #28
 800e860:	46bd      	mov	sp, r7
 800e862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e866:	4770      	bx	lr

0800e868 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e868:	b480      	push	{r7}
 800e86a:	b087      	sub	sp, #28
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	60b9      	str	r1, [r7, #8]
 800e872:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	f003 031f 	and.w	r3, r3, #31
 800e87a:	2201      	movs	r2, #1
 800e87c:	fa02 f303 	lsl.w	r3, r2, r3
 800e880:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	6a1a      	ldr	r2, [r3, #32]
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	43db      	mvns	r3, r3
 800e88a:	401a      	ands	r2, r3
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	6a1a      	ldr	r2, [r3, #32]
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	f003 031f 	and.w	r3, r3, #31
 800e89a:	6879      	ldr	r1, [r7, #4]
 800e89c:	fa01 f303 	lsl.w	r3, r1, r3
 800e8a0:	431a      	orrs	r2, r3
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	621a      	str	r2, [r3, #32]
}
 800e8a6:	bf00      	nop
 800e8a8:	371c      	adds	r7, #28
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b0:	4770      	bx	lr
	...

0800e8b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b085      	sub	sp, #20
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e8c4:	2b01      	cmp	r3, #1
 800e8c6:	d101      	bne.n	800e8cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e8c8:	2302      	movs	r3, #2
 800e8ca:	e068      	b.n	800e99e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2201      	movs	r2, #1
 800e8d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2202      	movs	r2, #2
 800e8d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	685b      	ldr	r3, [r3, #4]
 800e8e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	689b      	ldr	r3, [r3, #8]
 800e8ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4a2e      	ldr	r2, [pc, #184]	; (800e9ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d004      	beq.n	800e900 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	4a2d      	ldr	r2, [pc, #180]	; (800e9b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d108      	bne.n	800e912 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e906:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	685b      	ldr	r3, [r3, #4]
 800e90c:	68fa      	ldr	r2, [r7, #12]
 800e90e:	4313      	orrs	r3, r2
 800e910:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e918:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	68fa      	ldr	r2, [r7, #12]
 800e920:	4313      	orrs	r3, r2
 800e922:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	68fa      	ldr	r2, [r7, #12]
 800e92a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	4a1e      	ldr	r2, [pc, #120]	; (800e9ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800e932:	4293      	cmp	r3, r2
 800e934:	d01d      	beq.n	800e972 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e93e:	d018      	beq.n	800e972 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	4a1b      	ldr	r2, [pc, #108]	; (800e9b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e946:	4293      	cmp	r3, r2
 800e948:	d013      	beq.n	800e972 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	4a1a      	ldr	r2, [pc, #104]	; (800e9b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e950:	4293      	cmp	r3, r2
 800e952:	d00e      	beq.n	800e972 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	4a18      	ldr	r2, [pc, #96]	; (800e9bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d009      	beq.n	800e972 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	4a13      	ldr	r2, [pc, #76]	; (800e9b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800e964:	4293      	cmp	r3, r2
 800e966:	d004      	beq.n	800e972 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	4a14      	ldr	r2, [pc, #80]	; (800e9c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d10c      	bne.n	800e98c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e978:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	689b      	ldr	r3, [r3, #8]
 800e97e:	68ba      	ldr	r2, [r7, #8]
 800e980:	4313      	orrs	r3, r2
 800e982:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	68ba      	ldr	r2, [r7, #8]
 800e98a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2201      	movs	r2, #1
 800e990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2200      	movs	r2, #0
 800e998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e99c:	2300      	movs	r3, #0
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3714      	adds	r7, #20
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a8:	4770      	bx	lr
 800e9aa:	bf00      	nop
 800e9ac:	40012c00 	.word	0x40012c00
 800e9b0:	40013400 	.word	0x40013400
 800e9b4:	40000400 	.word	0x40000400
 800e9b8:	40000800 	.word	0x40000800
 800e9bc:	40000c00 	.word	0x40000c00
 800e9c0:	40014000 	.word	0x40014000

0800e9c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e9c4:	b480      	push	{r7}
 800e9c6:	b083      	sub	sp, #12
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e9cc:	bf00      	nop
 800e9ce:	370c      	adds	r7, #12
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d6:	4770      	bx	lr

0800e9d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b083      	sub	sp, #12
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e9e0:	bf00      	nop
 800e9e2:	370c      	adds	r7, #12
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ea:	4770      	bx	lr

0800e9ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b083      	sub	sp, #12
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e9f4:	bf00      	nop
 800e9f6:	370c      	adds	r7, #12
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fe:	4770      	bx	lr

0800ea00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b082      	sub	sp, #8
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d101      	bne.n	800ea12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ea0e:	2301      	movs	r3, #1
 800ea10:	e040      	b.n	800ea94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d106      	bne.n	800ea28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f7f8 fb9e 	bl	8007164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2224      	movs	r2, #36	; 0x24
 800ea2c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	681a      	ldr	r2, [r3, #0]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	f022 0201 	bic.w	r2, r2, #1
 800ea3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f000 fc0a 	bl	800f258 <UART_SetConfig>
 800ea44:	4603      	mov	r3, r0
 800ea46:	2b01      	cmp	r3, #1
 800ea48:	d101      	bne.n	800ea4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	e022      	b.n	800ea94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d002      	beq.n	800ea5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	f000 feb6 	bl	800f7c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	685a      	ldr	r2, [r3, #4]
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ea6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	689a      	ldr	r2, [r3, #8]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ea7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	681a      	ldr	r2, [r3, #0]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	f042 0201 	orr.w	r2, r2, #1
 800ea8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f000 ff3d 	bl	800f90c <UART_CheckIdleState>
 800ea92:	4603      	mov	r3, r0
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3708      	adds	r7, #8
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b08a      	sub	sp, #40	; 0x28
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	60f8      	str	r0, [r7, #12]
 800eaa4:	60b9      	str	r1, [r7, #8]
 800eaa6:	4613      	mov	r3, r2
 800eaa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eaae:	2b20      	cmp	r3, #32
 800eab0:	d142      	bne.n	800eb38 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d002      	beq.n	800eabe <HAL_UART_Receive_IT+0x22>
 800eab8:	88fb      	ldrh	r3, [r7, #6]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d101      	bne.n	800eac2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800eabe:	2301      	movs	r3, #1
 800eac0:	e03b      	b.n	800eb3a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800eac8:	2b01      	cmp	r3, #1
 800eaca:	d101      	bne.n	800ead0 <HAL_UART_Receive_IT+0x34>
 800eacc:	2302      	movs	r3, #2
 800eace:	e034      	b.n	800eb3a <HAL_UART_Receive_IT+0x9e>
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2201      	movs	r2, #1
 800ead4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2200      	movs	r2, #0
 800eadc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	4a18      	ldr	r2, [pc, #96]	; (800eb44 <HAL_UART_Receive_IT+0xa8>)
 800eae4:	4293      	cmp	r3, r2
 800eae6:	d01f      	beq.n	800eb28 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	685b      	ldr	r3, [r3, #4]
 800eaee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d018      	beq.n	800eb28 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	e853 3f00 	ldrex	r3, [r3]
 800eb02:	613b      	str	r3, [r7, #16]
   return(result);
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800eb0a:	627b      	str	r3, [r7, #36]	; 0x24
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	461a      	mov	r2, r3
 800eb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb14:	623b      	str	r3, [r7, #32]
 800eb16:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb18:	69f9      	ldr	r1, [r7, #28]
 800eb1a:	6a3a      	ldr	r2, [r7, #32]
 800eb1c:	e841 2300 	strex	r3, r2, [r1]
 800eb20:	61bb      	str	r3, [r7, #24]
   return(result);
 800eb22:	69bb      	ldr	r3, [r7, #24]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d1e6      	bne.n	800eaf6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800eb28:	88fb      	ldrh	r3, [r7, #6]
 800eb2a:	461a      	mov	r2, r3
 800eb2c:	68b9      	ldr	r1, [r7, #8]
 800eb2e:	68f8      	ldr	r0, [r7, #12]
 800eb30:	f000 fffa 	bl	800fb28 <UART_Start_Receive_IT>
 800eb34:	4603      	mov	r3, r0
 800eb36:	e000      	b.n	800eb3a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800eb38:	2302      	movs	r3, #2
  }
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3728      	adds	r7, #40	; 0x28
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}
 800eb42:	bf00      	nop
 800eb44:	40008000 	.word	0x40008000

0800eb48 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b08a      	sub	sp, #40	; 0x28
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	60f8      	str	r0, [r7, #12]
 800eb50:	60b9      	str	r1, [r7, #8]
 800eb52:	4613      	mov	r3, r2
 800eb54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb5a:	2b20      	cmp	r3, #32
 800eb5c:	d178      	bne.n	800ec50 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d002      	beq.n	800eb6a <HAL_UART_Transmit_DMA+0x22>
 800eb64:	88fb      	ldrh	r3, [r7, #6]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d101      	bne.n	800eb6e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	e071      	b.n	800ec52 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800eb74:	2b01      	cmp	r3, #1
 800eb76:	d101      	bne.n	800eb7c <HAL_UART_Transmit_DMA+0x34>
 800eb78:	2302      	movs	r3, #2
 800eb7a:	e06a      	b.n	800ec52 <HAL_UART_Transmit_DMA+0x10a>
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	2201      	movs	r2, #1
 800eb80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	68ba      	ldr	r2, [r7, #8]
 800eb88:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	88fa      	ldrh	r2, [r7, #6]
 800eb8e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	88fa      	ldrh	r2, [r7, #6]
 800eb96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	2221      	movs	r2, #33	; 0x21
 800eba6:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d02b      	beq.n	800ec08 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebb4:	4a29      	ldr	r2, [pc, #164]	; (800ec5c <HAL_UART_Transmit_DMA+0x114>)
 800ebb6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebbc:	4a28      	ldr	r2, [pc, #160]	; (800ec60 <HAL_UART_Transmit_DMA+0x118>)
 800ebbe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebc4:	4a27      	ldr	r2, [pc, #156]	; (800ec64 <HAL_UART_Transmit_DMA+0x11c>)
 800ebc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebcc:	2200      	movs	r2, #0
 800ebce:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ebd8:	4619      	mov	r1, r3
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	3328      	adds	r3, #40	; 0x28
 800ebe0:	461a      	mov	r2, r3
 800ebe2:	88fb      	ldrh	r3, [r7, #6]
 800ebe4:	f7f9 fd7c 	bl	80086e0 <HAL_DMA_Start_IT>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d00c      	beq.n	800ec08 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2210      	movs	r2, #16
 800ebf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	2220      	movs	r2, #32
 800ec02:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800ec04:	2301      	movs	r3, #1
 800ec06:	e024      	b.n	800ec52 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	2240      	movs	r2, #64	; 0x40
 800ec0e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	2200      	movs	r2, #0
 800ec14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	3308      	adds	r3, #8
 800ec1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	e853 3f00 	ldrex	r3, [r3]
 800ec26:	613b      	str	r3, [r7, #16]
   return(result);
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec2e:	627b      	str	r3, [r7, #36]	; 0x24
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	3308      	adds	r3, #8
 800ec36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec38:	623a      	str	r2, [r7, #32]
 800ec3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec3c:	69f9      	ldr	r1, [r7, #28]
 800ec3e:	6a3a      	ldr	r2, [r7, #32]
 800ec40:	e841 2300 	strex	r3, r2, [r1]
 800ec44:	61bb      	str	r3, [r7, #24]
   return(result);
 800ec46:	69bb      	ldr	r3, [r7, #24]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d1e5      	bne.n	800ec18 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	e000      	b.n	800ec52 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800ec50:	2302      	movs	r3, #2
  }
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3728      	adds	r7, #40	; 0x28
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	0800fdcf 	.word	0x0800fdcf
 800ec60:	0800fe69 	.word	0x0800fe69
 800ec64:	0800fe85 	.word	0x0800fe85

0800ec68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b0ba      	sub	sp, #232	; 0xe8
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	69db      	ldr	r3, [r3, #28]
 800ec76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	689b      	ldr	r3, [r3, #8]
 800ec8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ec8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ec92:	f640 030f 	movw	r3, #2063	; 0x80f
 800ec96:	4013      	ands	r3, r2
 800ec98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ec9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d115      	bne.n	800ecd0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800eca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eca8:	f003 0320 	and.w	r3, r3, #32
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d00f      	beq.n	800ecd0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ecb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ecb4:	f003 0320 	and.w	r3, r3, #32
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d009      	beq.n	800ecd0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	f000 82a6 	beq.w	800f212 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	4798      	blx	r3
      }
      return;
 800ecce:	e2a0      	b.n	800f212 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800ecd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	f000 8117 	beq.w	800ef08 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ecda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ecde:	f003 0301 	and.w	r3, r3, #1
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d106      	bne.n	800ecf4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ece6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ecea:	4b85      	ldr	r3, [pc, #532]	; (800ef00 <HAL_UART_IRQHandler+0x298>)
 800ecec:	4013      	ands	r3, r2
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	f000 810a 	beq.w	800ef08 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ecf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecf8:	f003 0301 	and.w	r3, r3, #1
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d011      	beq.n	800ed24 <HAL_UART_IRQHandler+0xbc>
 800ed00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d00b      	beq.n	800ed24 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	2201      	movs	r2, #1
 800ed12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed1a:	f043 0201 	orr.w	r2, r3, #1
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed28:	f003 0302 	and.w	r3, r3, #2
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d011      	beq.n	800ed54 <HAL_UART_IRQHandler+0xec>
 800ed30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed34:	f003 0301 	and.w	r3, r3, #1
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d00b      	beq.n	800ed54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	2202      	movs	r2, #2
 800ed42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed4a:	f043 0204 	orr.w	r2, r3, #4
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed58:	f003 0304 	and.w	r3, r3, #4
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d011      	beq.n	800ed84 <HAL_UART_IRQHandler+0x11c>
 800ed60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed64:	f003 0301 	and.w	r3, r3, #1
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d00b      	beq.n	800ed84 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	2204      	movs	r2, #4
 800ed72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed7a:	f043 0202 	orr.w	r2, r3, #2
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ed84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed88:	f003 0308 	and.w	r3, r3, #8
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d017      	beq.n	800edc0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ed90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed94:	f003 0320 	and.w	r3, r3, #32
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d105      	bne.n	800eda8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ed9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eda0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d00b      	beq.n	800edc0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	2208      	movs	r2, #8
 800edae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800edb6:	f043 0208 	orr.w	r2, r3, #8
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800edc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d012      	beq.n	800edf2 <HAL_UART_IRQHandler+0x18a>
 800edcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800edd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d00c      	beq.n	800edf2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ede0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ede8:	f043 0220 	orr.w	r2, r3, #32
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	f000 820c 	beq.w	800f216 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800edfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee02:	f003 0320 	and.w	r3, r3, #32
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d00d      	beq.n	800ee26 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ee0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee0e:	f003 0320 	and.w	r3, r3, #32
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d007      	beq.n	800ee26 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d003      	beq.n	800ee26 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	689b      	ldr	r3, [r3, #8]
 800ee36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee3a:	2b40      	cmp	r3, #64	; 0x40
 800ee3c:	d005      	beq.n	800ee4a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ee3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ee42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d04f      	beq.n	800eeea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f000 ff5c 	bl	800fd08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	689b      	ldr	r3, [r3, #8]
 800ee56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee5a:	2b40      	cmp	r3, #64	; 0x40
 800ee5c:	d141      	bne.n	800eee2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	3308      	adds	r3, #8
 800ee64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ee6c:	e853 3f00 	ldrex	r3, [r3]
 800ee70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ee74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ee78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	3308      	adds	r3, #8
 800ee86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ee8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ee8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ee96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ee9a:	e841 2300 	strex	r3, r2, [r1]
 800ee9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800eea2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d1d9      	bne.n	800ee5e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d013      	beq.n	800eeda <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eeb6:	4a13      	ldr	r2, [pc, #76]	; (800ef04 <HAL_UART_IRQHandler+0x29c>)
 800eeb8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7f9 fcac 	bl	800881c <HAL_DMA_Abort_IT>
 800eec4:	4603      	mov	r3, r0
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d017      	beq.n	800eefa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eed0:	687a      	ldr	r2, [r7, #4]
 800eed2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800eed4:	4610      	mov	r0, r2
 800eed6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eed8:	e00f      	b.n	800eefa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800eeda:	6878      	ldr	r0, [r7, #4]
 800eedc:	f7f4 fb10 	bl	8003500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eee0:	e00b      	b.n	800eefa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f7f4 fb0c 	bl	8003500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eee8:	e007      	b.n	800eefa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f7f4 fb08 	bl	8003500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2200      	movs	r2, #0
 800eef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800eef8:	e18d      	b.n	800f216 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eefa:	bf00      	nop
    return;
 800eefc:	e18b      	b.n	800f216 <HAL_UART_IRQHandler+0x5ae>
 800eefe:	bf00      	nop
 800ef00:	04000120 	.word	0x04000120
 800ef04:	0800ff01 	.word	0x0800ff01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	f040 8146 	bne.w	800f19e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ef12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef16:	f003 0310 	and.w	r3, r3, #16
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	f000 813f 	beq.w	800f19e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ef20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef24:	f003 0310 	and.w	r3, r3, #16
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	f000 8138 	beq.w	800f19e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	2210      	movs	r2, #16
 800ef34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	689b      	ldr	r3, [r3, #8]
 800ef3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef40:	2b40      	cmp	r3, #64	; 0x40
 800ef42:	f040 80b4 	bne.w	800f0ae <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ef52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	f000 815f 	beq.w	800f21a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ef62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ef66:	429a      	cmp	r2, r3
 800ef68:	f080 8157 	bcs.w	800f21a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ef72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f003 0320 	and.w	r3, r3, #32
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	f040 8085 	bne.w	800f092 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ef94:	e853 3f00 	ldrex	r3, [r3]
 800ef98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ef9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800efa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800efa4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	461a      	mov	r2, r3
 800efae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800efb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800efb6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800efbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800efc2:	e841 2300 	strex	r3, r2, [r1]
 800efc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800efca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d1da      	bne.n	800ef88 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	3308      	adds	r3, #8
 800efd8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800efdc:	e853 3f00 	ldrex	r3, [r3]
 800efe0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800efe2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800efe4:	f023 0301 	bic.w	r3, r3, #1
 800efe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	3308      	adds	r3, #8
 800eff2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800eff6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800effa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800effc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800effe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f002:	e841 2300 	strex	r3, r2, [r1]
 800f006:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f008:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d1e1      	bne.n	800efd2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	3308      	adds	r3, #8
 800f014:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f016:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f018:	e853 3f00 	ldrex	r3, [r3]
 800f01c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f01e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f024:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	3308      	adds	r3, #8
 800f02e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f032:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f034:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f036:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f038:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f03a:	e841 2300 	strex	r3, r2, [r1]
 800f03e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f040:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f042:	2b00      	cmp	r3, #0
 800f044:	d1e3      	bne.n	800f00e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2220      	movs	r2, #32
 800f04a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2200      	movs	r2, #0
 800f050:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f05a:	e853 3f00 	ldrex	r3, [r3]
 800f05e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f062:	f023 0310 	bic.w	r3, r3, #16
 800f066:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	461a      	mov	r2, r3
 800f070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f074:	65bb      	str	r3, [r7, #88]	; 0x58
 800f076:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f078:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f07a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f07c:	e841 2300 	strex	r3, r2, [r1]
 800f080:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f084:	2b00      	cmp	r3, #0
 800f086:	d1e4      	bne.n	800f052 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f08c:	4618      	mov	r0, r3
 800f08e:	f7f9 fb87 	bl	80087a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	1ad3      	subs	r3, r2, r3
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f000 f8ca 	bl	800f240 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f0ac:	e0b5      	b.n	800f21a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f0ba:	b29b      	uxth	r3, r3
 800f0bc:	1ad3      	subs	r3, r2, r3
 800f0be:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f0c8:	b29b      	uxth	r3, r3
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	f000 80a7 	beq.w	800f21e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800f0d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	f000 80a2 	beq.w	800f21e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e2:	e853 3f00 	ldrex	r3, [r3]
 800f0e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f0ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	461a      	mov	r2, r3
 800f0f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f0fc:	647b      	str	r3, [r7, #68]	; 0x44
 800f0fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f100:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f102:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f104:	e841 2300 	strex	r3, r2, [r1]
 800f108:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f10a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d1e4      	bne.n	800f0da <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	3308      	adds	r3, #8
 800f116:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f11a:	e853 3f00 	ldrex	r3, [r3]
 800f11e:	623b      	str	r3, [r7, #32]
   return(result);
 800f120:	6a3b      	ldr	r3, [r7, #32]
 800f122:	f023 0301 	bic.w	r3, r3, #1
 800f126:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	3308      	adds	r3, #8
 800f130:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f134:	633a      	str	r2, [r7, #48]	; 0x30
 800f136:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f138:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f13a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f13c:	e841 2300 	strex	r3, r2, [r1]
 800f140:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f144:	2b00      	cmp	r3, #0
 800f146:	d1e3      	bne.n	800f110 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2220      	movs	r2, #32
 800f14c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2200      	movs	r2, #0
 800f152:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2200      	movs	r2, #0
 800f158:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f160:	693b      	ldr	r3, [r7, #16]
 800f162:	e853 3f00 	ldrex	r3, [r3]
 800f166:	60fb      	str	r3, [r7, #12]
   return(result);
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f023 0310 	bic.w	r3, r3, #16
 800f16e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	461a      	mov	r2, r3
 800f178:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f17c:	61fb      	str	r3, [r7, #28]
 800f17e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f180:	69b9      	ldr	r1, [r7, #24]
 800f182:	69fa      	ldr	r2, [r7, #28]
 800f184:	e841 2300 	strex	r3, r2, [r1]
 800f188:	617b      	str	r3, [r7, #20]
   return(result);
 800f18a:	697b      	ldr	r3, [r7, #20]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d1e4      	bne.n	800f15a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f190:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f194:	4619      	mov	r1, r3
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f000 f852 	bl	800f240 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f19c:	e03f      	b.n	800f21e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f19e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d00e      	beq.n	800f1c8 <HAL_UART_IRQHandler+0x560>
 800f1aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f1ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d008      	beq.n	800f1c8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f1be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	f001 f83d 	bl	8010240 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f1c6:	e02d      	b.n	800f224 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800f1c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d00e      	beq.n	800f1f2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800f1d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f1d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d008      	beq.n	800f1f2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d01c      	beq.n	800f222 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	4798      	blx	r3
    }
    return;
 800f1f0:	e017      	b.n	800f222 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f1f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d012      	beq.n	800f224 <HAL_UART_IRQHandler+0x5bc>
 800f1fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f206:	2b00      	cmp	r3, #0
 800f208:	d00c      	beq.n	800f224 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f000 fe8e 	bl	800ff2c <UART_EndTransmit_IT>
    return;
 800f210:	e008      	b.n	800f224 <HAL_UART_IRQHandler+0x5bc>
      return;
 800f212:	bf00      	nop
 800f214:	e006      	b.n	800f224 <HAL_UART_IRQHandler+0x5bc>
    return;
 800f216:	bf00      	nop
 800f218:	e004      	b.n	800f224 <HAL_UART_IRQHandler+0x5bc>
      return;
 800f21a:	bf00      	nop
 800f21c:	e002      	b.n	800f224 <HAL_UART_IRQHandler+0x5bc>
      return;
 800f21e:	bf00      	nop
 800f220:	e000      	b.n	800f224 <HAL_UART_IRQHandler+0x5bc>
    return;
 800f222:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800f224:	37e8      	adds	r7, #232	; 0xe8
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop

0800f22c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f22c:	b480      	push	{r7}
 800f22e:	b083      	sub	sp, #12
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800f234:	bf00      	nop
 800f236:	370c      	adds	r7, #12
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr

0800f240 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f240:	b480      	push	{r7}
 800f242:	b083      	sub	sp, #12
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
 800f248:	460b      	mov	r3, r1
 800f24a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f24c:	bf00      	nop
 800f24e:	370c      	adds	r7, #12
 800f250:	46bd      	mov	sp, r7
 800f252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f256:	4770      	bx	lr

0800f258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f25c:	b08a      	sub	sp, #40	; 0x28
 800f25e:	af00      	add	r7, sp, #0
 800f260:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f262:	2300      	movs	r3, #0
 800f264:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	689a      	ldr	r2, [r3, #8]
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	691b      	ldr	r3, [r3, #16]
 800f270:	431a      	orrs	r2, r3
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	695b      	ldr	r3, [r3, #20]
 800f276:	431a      	orrs	r2, r3
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	69db      	ldr	r3, [r3, #28]
 800f27c:	4313      	orrs	r3, r2
 800f27e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	681a      	ldr	r2, [r3, #0]
 800f286:	4ba4      	ldr	r3, [pc, #656]	; (800f518 <UART_SetConfig+0x2c0>)
 800f288:	4013      	ands	r3, r2
 800f28a:	68fa      	ldr	r2, [r7, #12]
 800f28c:	6812      	ldr	r2, [r2, #0]
 800f28e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f290:	430b      	orrs	r3, r1
 800f292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	68da      	ldr	r2, [r3, #12]
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	430a      	orrs	r2, r1
 800f2a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	699b      	ldr	r3, [r3, #24]
 800f2ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	4a99      	ldr	r2, [pc, #612]	; (800f51c <UART_SetConfig+0x2c4>)
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	d004      	beq.n	800f2c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	6a1b      	ldr	r3, [r3, #32]
 800f2be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2c0:	4313      	orrs	r3, r2
 800f2c2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	689b      	ldr	r3, [r3, #8]
 800f2ca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2d4:	430a      	orrs	r2, r1
 800f2d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	4a90      	ldr	r2, [pc, #576]	; (800f520 <UART_SetConfig+0x2c8>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d126      	bne.n	800f330 <UART_SetConfig+0xd8>
 800f2e2:	4b90      	ldr	r3, [pc, #576]	; (800f524 <UART_SetConfig+0x2cc>)
 800f2e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f2e8:	f003 0303 	and.w	r3, r3, #3
 800f2ec:	2b03      	cmp	r3, #3
 800f2ee:	d81b      	bhi.n	800f328 <UART_SetConfig+0xd0>
 800f2f0:	a201      	add	r2, pc, #4	; (adr r2, 800f2f8 <UART_SetConfig+0xa0>)
 800f2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2f6:	bf00      	nop
 800f2f8:	0800f309 	.word	0x0800f309
 800f2fc:	0800f319 	.word	0x0800f319
 800f300:	0800f311 	.word	0x0800f311
 800f304:	0800f321 	.word	0x0800f321
 800f308:	2301      	movs	r3, #1
 800f30a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f30e:	e116      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f310:	2302      	movs	r3, #2
 800f312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f316:	e112      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f318:	2304      	movs	r3, #4
 800f31a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f31e:	e10e      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f320:	2308      	movs	r3, #8
 800f322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f326:	e10a      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f328:	2310      	movs	r3, #16
 800f32a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f32e:	e106      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	4a7c      	ldr	r2, [pc, #496]	; (800f528 <UART_SetConfig+0x2d0>)
 800f336:	4293      	cmp	r3, r2
 800f338:	d138      	bne.n	800f3ac <UART_SetConfig+0x154>
 800f33a:	4b7a      	ldr	r3, [pc, #488]	; (800f524 <UART_SetConfig+0x2cc>)
 800f33c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f340:	f003 030c 	and.w	r3, r3, #12
 800f344:	2b0c      	cmp	r3, #12
 800f346:	d82d      	bhi.n	800f3a4 <UART_SetConfig+0x14c>
 800f348:	a201      	add	r2, pc, #4	; (adr r2, 800f350 <UART_SetConfig+0xf8>)
 800f34a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f34e:	bf00      	nop
 800f350:	0800f385 	.word	0x0800f385
 800f354:	0800f3a5 	.word	0x0800f3a5
 800f358:	0800f3a5 	.word	0x0800f3a5
 800f35c:	0800f3a5 	.word	0x0800f3a5
 800f360:	0800f395 	.word	0x0800f395
 800f364:	0800f3a5 	.word	0x0800f3a5
 800f368:	0800f3a5 	.word	0x0800f3a5
 800f36c:	0800f3a5 	.word	0x0800f3a5
 800f370:	0800f38d 	.word	0x0800f38d
 800f374:	0800f3a5 	.word	0x0800f3a5
 800f378:	0800f3a5 	.word	0x0800f3a5
 800f37c:	0800f3a5 	.word	0x0800f3a5
 800f380:	0800f39d 	.word	0x0800f39d
 800f384:	2300      	movs	r3, #0
 800f386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f38a:	e0d8      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f38c:	2302      	movs	r3, #2
 800f38e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f392:	e0d4      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f394:	2304      	movs	r3, #4
 800f396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f39a:	e0d0      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f39c:	2308      	movs	r3, #8
 800f39e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f3a2:	e0cc      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f3a4:	2310      	movs	r3, #16
 800f3a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f3aa:	e0c8      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	4a5e      	ldr	r2, [pc, #376]	; (800f52c <UART_SetConfig+0x2d4>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d125      	bne.n	800f402 <UART_SetConfig+0x1aa>
 800f3b6:	4b5b      	ldr	r3, [pc, #364]	; (800f524 <UART_SetConfig+0x2cc>)
 800f3b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f3c0:	2b30      	cmp	r3, #48	; 0x30
 800f3c2:	d016      	beq.n	800f3f2 <UART_SetConfig+0x19a>
 800f3c4:	2b30      	cmp	r3, #48	; 0x30
 800f3c6:	d818      	bhi.n	800f3fa <UART_SetConfig+0x1a2>
 800f3c8:	2b20      	cmp	r3, #32
 800f3ca:	d00a      	beq.n	800f3e2 <UART_SetConfig+0x18a>
 800f3cc:	2b20      	cmp	r3, #32
 800f3ce:	d814      	bhi.n	800f3fa <UART_SetConfig+0x1a2>
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d002      	beq.n	800f3da <UART_SetConfig+0x182>
 800f3d4:	2b10      	cmp	r3, #16
 800f3d6:	d008      	beq.n	800f3ea <UART_SetConfig+0x192>
 800f3d8:	e00f      	b.n	800f3fa <UART_SetConfig+0x1a2>
 800f3da:	2300      	movs	r3, #0
 800f3dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f3e0:	e0ad      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f3e2:	2302      	movs	r3, #2
 800f3e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f3e8:	e0a9      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f3ea:	2304      	movs	r3, #4
 800f3ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f3f0:	e0a5      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f3f2:	2308      	movs	r3, #8
 800f3f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f3f8:	e0a1      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f3fa:	2310      	movs	r3, #16
 800f3fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f400:	e09d      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	4a4a      	ldr	r2, [pc, #296]	; (800f530 <UART_SetConfig+0x2d8>)
 800f408:	4293      	cmp	r3, r2
 800f40a:	d125      	bne.n	800f458 <UART_SetConfig+0x200>
 800f40c:	4b45      	ldr	r3, [pc, #276]	; (800f524 <UART_SetConfig+0x2cc>)
 800f40e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f412:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f416:	2bc0      	cmp	r3, #192	; 0xc0
 800f418:	d016      	beq.n	800f448 <UART_SetConfig+0x1f0>
 800f41a:	2bc0      	cmp	r3, #192	; 0xc0
 800f41c:	d818      	bhi.n	800f450 <UART_SetConfig+0x1f8>
 800f41e:	2b80      	cmp	r3, #128	; 0x80
 800f420:	d00a      	beq.n	800f438 <UART_SetConfig+0x1e0>
 800f422:	2b80      	cmp	r3, #128	; 0x80
 800f424:	d814      	bhi.n	800f450 <UART_SetConfig+0x1f8>
 800f426:	2b00      	cmp	r3, #0
 800f428:	d002      	beq.n	800f430 <UART_SetConfig+0x1d8>
 800f42a:	2b40      	cmp	r3, #64	; 0x40
 800f42c:	d008      	beq.n	800f440 <UART_SetConfig+0x1e8>
 800f42e:	e00f      	b.n	800f450 <UART_SetConfig+0x1f8>
 800f430:	2300      	movs	r3, #0
 800f432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f436:	e082      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f438:	2302      	movs	r3, #2
 800f43a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f43e:	e07e      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f440:	2304      	movs	r3, #4
 800f442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f446:	e07a      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f448:	2308      	movs	r3, #8
 800f44a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f44e:	e076      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f450:	2310      	movs	r3, #16
 800f452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f456:	e072      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	4a35      	ldr	r2, [pc, #212]	; (800f534 <UART_SetConfig+0x2dc>)
 800f45e:	4293      	cmp	r3, r2
 800f460:	d12a      	bne.n	800f4b8 <UART_SetConfig+0x260>
 800f462:	4b30      	ldr	r3, [pc, #192]	; (800f524 <UART_SetConfig+0x2cc>)
 800f464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f46c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f470:	d01a      	beq.n	800f4a8 <UART_SetConfig+0x250>
 800f472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f476:	d81b      	bhi.n	800f4b0 <UART_SetConfig+0x258>
 800f478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f47c:	d00c      	beq.n	800f498 <UART_SetConfig+0x240>
 800f47e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f482:	d815      	bhi.n	800f4b0 <UART_SetConfig+0x258>
 800f484:	2b00      	cmp	r3, #0
 800f486:	d003      	beq.n	800f490 <UART_SetConfig+0x238>
 800f488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f48c:	d008      	beq.n	800f4a0 <UART_SetConfig+0x248>
 800f48e:	e00f      	b.n	800f4b0 <UART_SetConfig+0x258>
 800f490:	2300      	movs	r3, #0
 800f492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f496:	e052      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f498:	2302      	movs	r3, #2
 800f49a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f49e:	e04e      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f4a0:	2304      	movs	r3, #4
 800f4a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f4a6:	e04a      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f4a8:	2308      	movs	r3, #8
 800f4aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f4ae:	e046      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f4b0:	2310      	movs	r3, #16
 800f4b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f4b6:	e042      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	4a17      	ldr	r2, [pc, #92]	; (800f51c <UART_SetConfig+0x2c4>)
 800f4be:	4293      	cmp	r3, r2
 800f4c0:	d13a      	bne.n	800f538 <UART_SetConfig+0x2e0>
 800f4c2:	4b18      	ldr	r3, [pc, #96]	; (800f524 <UART_SetConfig+0x2cc>)
 800f4c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f4c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f4cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f4d0:	d01a      	beq.n	800f508 <UART_SetConfig+0x2b0>
 800f4d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f4d6:	d81b      	bhi.n	800f510 <UART_SetConfig+0x2b8>
 800f4d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f4dc:	d00c      	beq.n	800f4f8 <UART_SetConfig+0x2a0>
 800f4de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f4e2:	d815      	bhi.n	800f510 <UART_SetConfig+0x2b8>
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d003      	beq.n	800f4f0 <UART_SetConfig+0x298>
 800f4e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f4ec:	d008      	beq.n	800f500 <UART_SetConfig+0x2a8>
 800f4ee:	e00f      	b.n	800f510 <UART_SetConfig+0x2b8>
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f4f6:	e022      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f4f8:	2302      	movs	r3, #2
 800f4fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f4fe:	e01e      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f500:	2304      	movs	r3, #4
 800f502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f506:	e01a      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f508:	2308      	movs	r3, #8
 800f50a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f50e:	e016      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f510:	2310      	movs	r3, #16
 800f512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f516:	e012      	b.n	800f53e <UART_SetConfig+0x2e6>
 800f518:	efff69f3 	.word	0xefff69f3
 800f51c:	40008000 	.word	0x40008000
 800f520:	40013800 	.word	0x40013800
 800f524:	40021000 	.word	0x40021000
 800f528:	40004400 	.word	0x40004400
 800f52c:	40004800 	.word	0x40004800
 800f530:	40004c00 	.word	0x40004c00
 800f534:	40005000 	.word	0x40005000
 800f538:	2310      	movs	r3, #16
 800f53a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	4a9f      	ldr	r2, [pc, #636]	; (800f7c0 <UART_SetConfig+0x568>)
 800f544:	4293      	cmp	r3, r2
 800f546:	d17a      	bne.n	800f63e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f548:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f54c:	2b08      	cmp	r3, #8
 800f54e:	d824      	bhi.n	800f59a <UART_SetConfig+0x342>
 800f550:	a201      	add	r2, pc, #4	; (adr r2, 800f558 <UART_SetConfig+0x300>)
 800f552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f556:	bf00      	nop
 800f558:	0800f57d 	.word	0x0800f57d
 800f55c:	0800f59b 	.word	0x0800f59b
 800f560:	0800f585 	.word	0x0800f585
 800f564:	0800f59b 	.word	0x0800f59b
 800f568:	0800f58b 	.word	0x0800f58b
 800f56c:	0800f59b 	.word	0x0800f59b
 800f570:	0800f59b 	.word	0x0800f59b
 800f574:	0800f59b 	.word	0x0800f59b
 800f578:	0800f593 	.word	0x0800f593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f57c:	f7fb ff76 	bl	800b46c <HAL_RCC_GetPCLK1Freq>
 800f580:	61f8      	str	r0, [r7, #28]
        break;
 800f582:	e010      	b.n	800f5a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f584:	4b8f      	ldr	r3, [pc, #572]	; (800f7c4 <UART_SetConfig+0x56c>)
 800f586:	61fb      	str	r3, [r7, #28]
        break;
 800f588:	e00d      	b.n	800f5a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f58a:	f7fb fed7 	bl	800b33c <HAL_RCC_GetSysClockFreq>
 800f58e:	61f8      	str	r0, [r7, #28]
        break;
 800f590:	e009      	b.n	800f5a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f596:	61fb      	str	r3, [r7, #28]
        break;
 800f598:	e005      	b.n	800f5a6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800f59a:	2300      	movs	r3, #0
 800f59c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800f59e:	2301      	movs	r3, #1
 800f5a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800f5a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f5a6:	69fb      	ldr	r3, [r7, #28]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f000 80fb 	beq.w	800f7a4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	685a      	ldr	r2, [r3, #4]
 800f5b2:	4613      	mov	r3, r2
 800f5b4:	005b      	lsls	r3, r3, #1
 800f5b6:	4413      	add	r3, r2
 800f5b8:	69fa      	ldr	r2, [r7, #28]
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d305      	bcc.n	800f5ca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	685b      	ldr	r3, [r3, #4]
 800f5c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800f5c4:	69fa      	ldr	r2, [r7, #28]
 800f5c6:	429a      	cmp	r2, r3
 800f5c8:	d903      	bls.n	800f5d2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f5d0:	e0e8      	b.n	800f7a4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800f5d2:	69fb      	ldr	r3, [r7, #28]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	461c      	mov	r4, r3
 800f5d8:	4615      	mov	r5, r2
 800f5da:	f04f 0200 	mov.w	r2, #0
 800f5de:	f04f 0300 	mov.w	r3, #0
 800f5e2:	022b      	lsls	r3, r5, #8
 800f5e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800f5e8:	0222      	lsls	r2, r4, #8
 800f5ea:	68f9      	ldr	r1, [r7, #12]
 800f5ec:	6849      	ldr	r1, [r1, #4]
 800f5ee:	0849      	lsrs	r1, r1, #1
 800f5f0:	2000      	movs	r0, #0
 800f5f2:	4688      	mov	r8, r1
 800f5f4:	4681      	mov	r9, r0
 800f5f6:	eb12 0a08 	adds.w	sl, r2, r8
 800f5fa:	eb43 0b09 	adc.w	fp, r3, r9
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	685b      	ldr	r3, [r3, #4]
 800f602:	2200      	movs	r2, #0
 800f604:	603b      	str	r3, [r7, #0]
 800f606:	607a      	str	r2, [r7, #4]
 800f608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f60c:	4650      	mov	r0, sl
 800f60e:	4659      	mov	r1, fp
 800f610:	f7f1 fb9a 	bl	8000d48 <__aeabi_uldivmod>
 800f614:	4602      	mov	r2, r0
 800f616:	460b      	mov	r3, r1
 800f618:	4613      	mov	r3, r2
 800f61a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f61c:	69bb      	ldr	r3, [r7, #24]
 800f61e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f622:	d308      	bcc.n	800f636 <UART_SetConfig+0x3de>
 800f624:	69bb      	ldr	r3, [r7, #24]
 800f626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f62a:	d204      	bcs.n	800f636 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	69ba      	ldr	r2, [r7, #24]
 800f632:	60da      	str	r2, [r3, #12]
 800f634:	e0b6      	b.n	800f7a4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800f636:	2301      	movs	r3, #1
 800f638:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f63c:	e0b2      	b.n	800f7a4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	69db      	ldr	r3, [r3, #28]
 800f642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f646:	d15e      	bne.n	800f706 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800f648:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f64c:	2b08      	cmp	r3, #8
 800f64e:	d828      	bhi.n	800f6a2 <UART_SetConfig+0x44a>
 800f650:	a201      	add	r2, pc, #4	; (adr r2, 800f658 <UART_SetConfig+0x400>)
 800f652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f656:	bf00      	nop
 800f658:	0800f67d 	.word	0x0800f67d
 800f65c:	0800f685 	.word	0x0800f685
 800f660:	0800f68d 	.word	0x0800f68d
 800f664:	0800f6a3 	.word	0x0800f6a3
 800f668:	0800f693 	.word	0x0800f693
 800f66c:	0800f6a3 	.word	0x0800f6a3
 800f670:	0800f6a3 	.word	0x0800f6a3
 800f674:	0800f6a3 	.word	0x0800f6a3
 800f678:	0800f69b 	.word	0x0800f69b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f67c:	f7fb fef6 	bl	800b46c <HAL_RCC_GetPCLK1Freq>
 800f680:	61f8      	str	r0, [r7, #28]
        break;
 800f682:	e014      	b.n	800f6ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f684:	f7fb ff08 	bl	800b498 <HAL_RCC_GetPCLK2Freq>
 800f688:	61f8      	str	r0, [r7, #28]
        break;
 800f68a:	e010      	b.n	800f6ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f68c:	4b4d      	ldr	r3, [pc, #308]	; (800f7c4 <UART_SetConfig+0x56c>)
 800f68e:	61fb      	str	r3, [r7, #28]
        break;
 800f690:	e00d      	b.n	800f6ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f692:	f7fb fe53 	bl	800b33c <HAL_RCC_GetSysClockFreq>
 800f696:	61f8      	str	r0, [r7, #28]
        break;
 800f698:	e009      	b.n	800f6ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f69a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f69e:	61fb      	str	r3, [r7, #28]
        break;
 800f6a0:	e005      	b.n	800f6ae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800f6ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f6ae:	69fb      	ldr	r3, [r7, #28]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d077      	beq.n	800f7a4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f6b4:	69fb      	ldr	r3, [r7, #28]
 800f6b6:	005a      	lsls	r2, r3, #1
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	685b      	ldr	r3, [r3, #4]
 800f6bc:	085b      	lsrs	r3, r3, #1
 800f6be:	441a      	add	r2, r3
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	685b      	ldr	r3, [r3, #4]
 800f6c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f6ca:	69bb      	ldr	r3, [r7, #24]
 800f6cc:	2b0f      	cmp	r3, #15
 800f6ce:	d916      	bls.n	800f6fe <UART_SetConfig+0x4a6>
 800f6d0:	69bb      	ldr	r3, [r7, #24]
 800f6d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6d6:	d212      	bcs.n	800f6fe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f6d8:	69bb      	ldr	r3, [r7, #24]
 800f6da:	b29b      	uxth	r3, r3
 800f6dc:	f023 030f 	bic.w	r3, r3, #15
 800f6e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f6e2:	69bb      	ldr	r3, [r7, #24]
 800f6e4:	085b      	lsrs	r3, r3, #1
 800f6e6:	b29b      	uxth	r3, r3
 800f6e8:	f003 0307 	and.w	r3, r3, #7
 800f6ec:	b29a      	uxth	r2, r3
 800f6ee:	8afb      	ldrh	r3, [r7, #22]
 800f6f0:	4313      	orrs	r3, r2
 800f6f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	8afa      	ldrh	r2, [r7, #22]
 800f6fa:	60da      	str	r2, [r3, #12]
 800f6fc:	e052      	b.n	800f7a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800f6fe:	2301      	movs	r3, #1
 800f700:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f704:	e04e      	b.n	800f7a4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f706:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f70a:	2b08      	cmp	r3, #8
 800f70c:	d827      	bhi.n	800f75e <UART_SetConfig+0x506>
 800f70e:	a201      	add	r2, pc, #4	; (adr r2, 800f714 <UART_SetConfig+0x4bc>)
 800f710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f714:	0800f739 	.word	0x0800f739
 800f718:	0800f741 	.word	0x0800f741
 800f71c:	0800f749 	.word	0x0800f749
 800f720:	0800f75f 	.word	0x0800f75f
 800f724:	0800f74f 	.word	0x0800f74f
 800f728:	0800f75f 	.word	0x0800f75f
 800f72c:	0800f75f 	.word	0x0800f75f
 800f730:	0800f75f 	.word	0x0800f75f
 800f734:	0800f757 	.word	0x0800f757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f738:	f7fb fe98 	bl	800b46c <HAL_RCC_GetPCLK1Freq>
 800f73c:	61f8      	str	r0, [r7, #28]
        break;
 800f73e:	e014      	b.n	800f76a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f740:	f7fb feaa 	bl	800b498 <HAL_RCC_GetPCLK2Freq>
 800f744:	61f8      	str	r0, [r7, #28]
        break;
 800f746:	e010      	b.n	800f76a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f748:	4b1e      	ldr	r3, [pc, #120]	; (800f7c4 <UART_SetConfig+0x56c>)
 800f74a:	61fb      	str	r3, [r7, #28]
        break;
 800f74c:	e00d      	b.n	800f76a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f74e:	f7fb fdf5 	bl	800b33c <HAL_RCC_GetSysClockFreq>
 800f752:	61f8      	str	r0, [r7, #28]
        break;
 800f754:	e009      	b.n	800f76a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f75a:	61fb      	str	r3, [r7, #28]
        break;
 800f75c:	e005      	b.n	800f76a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800f75e:	2300      	movs	r3, #0
 800f760:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800f762:	2301      	movs	r3, #1
 800f764:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800f768:	bf00      	nop
    }

    if (pclk != 0U)
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d019      	beq.n	800f7a4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	685b      	ldr	r3, [r3, #4]
 800f774:	085a      	lsrs	r2, r3, #1
 800f776:	69fb      	ldr	r3, [r7, #28]
 800f778:	441a      	add	r2, r3
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f782:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f784:	69bb      	ldr	r3, [r7, #24]
 800f786:	2b0f      	cmp	r3, #15
 800f788:	d909      	bls.n	800f79e <UART_SetConfig+0x546>
 800f78a:	69bb      	ldr	r3, [r7, #24]
 800f78c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f790:	d205      	bcs.n	800f79e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f792:	69bb      	ldr	r3, [r7, #24]
 800f794:	b29a      	uxth	r2, r3
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	60da      	str	r2, [r3, #12]
 800f79c:	e002      	b.n	800f7a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800f79e:	2301      	movs	r3, #1
 800f7a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800f7b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	3728      	adds	r7, #40	; 0x28
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f7be:	bf00      	nop
 800f7c0:	40008000 	.word	0x40008000
 800f7c4:	00f42400 	.word	0x00f42400

0800f7c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f7c8:	b480      	push	{r7}
 800f7ca:	b083      	sub	sp, #12
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d4:	f003 0301 	and.w	r3, r3, #1
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d00a      	beq.n	800f7f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	685b      	ldr	r3, [r3, #4]
 800f7e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	430a      	orrs	r2, r1
 800f7f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7f6:	f003 0302 	and.w	r3, r3, #2
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d00a      	beq.n	800f814 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	685b      	ldr	r3, [r3, #4]
 800f804:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	430a      	orrs	r2, r1
 800f812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f818:	f003 0304 	and.w	r3, r3, #4
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d00a      	beq.n	800f836 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	685b      	ldr	r3, [r3, #4]
 800f826:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	430a      	orrs	r2, r1
 800f834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f83a:	f003 0308 	and.w	r3, r3, #8
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d00a      	beq.n	800f858 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	685b      	ldr	r3, [r3, #4]
 800f848:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	430a      	orrs	r2, r1
 800f856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f85c:	f003 0310 	and.w	r3, r3, #16
 800f860:	2b00      	cmp	r3, #0
 800f862:	d00a      	beq.n	800f87a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	689b      	ldr	r3, [r3, #8]
 800f86a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	430a      	orrs	r2, r1
 800f878:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f87e:	f003 0320 	and.w	r3, r3, #32
 800f882:	2b00      	cmp	r3, #0
 800f884:	d00a      	beq.n	800f89c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	689b      	ldr	r3, [r3, #8]
 800f88c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	430a      	orrs	r2, r1
 800f89a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d01a      	beq.n	800f8de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	685b      	ldr	r3, [r3, #4]
 800f8ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	430a      	orrs	r2, r1
 800f8bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f8c6:	d10a      	bne.n	800f8de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	685b      	ldr	r3, [r3, #4]
 800f8ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	430a      	orrs	r2, r1
 800f8dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d00a      	beq.n	800f900 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	685b      	ldr	r3, [r3, #4]
 800f8f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	430a      	orrs	r2, r1
 800f8fe:	605a      	str	r2, [r3, #4]
  }
}
 800f900:	bf00      	nop
 800f902:	370c      	adds	r7, #12
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr

0800f90c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b086      	sub	sp, #24
 800f910:	af02      	add	r7, sp, #8
 800f912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2200      	movs	r2, #0
 800f918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f91c:	f7f8 fd16 	bl	800834c <HAL_GetTick>
 800f920:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	f003 0308 	and.w	r3, r3, #8
 800f92c:	2b08      	cmp	r3, #8
 800f92e:	d10e      	bne.n	800f94e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f930:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f934:	9300      	str	r3, [sp, #0]
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	2200      	movs	r2, #0
 800f93a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f000 f82d 	bl	800f99e <UART_WaitOnFlagUntilTimeout>
 800f944:	4603      	mov	r3, r0
 800f946:	2b00      	cmp	r3, #0
 800f948:	d001      	beq.n	800f94e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f94a:	2303      	movs	r3, #3
 800f94c:	e023      	b.n	800f996 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	f003 0304 	and.w	r3, r3, #4
 800f958:	2b04      	cmp	r3, #4
 800f95a:	d10e      	bne.n	800f97a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f95c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f960:	9300      	str	r3, [sp, #0]
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	2200      	movs	r2, #0
 800f966:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f96a:	6878      	ldr	r0, [r7, #4]
 800f96c:	f000 f817 	bl	800f99e <UART_WaitOnFlagUntilTimeout>
 800f970:	4603      	mov	r3, r0
 800f972:	2b00      	cmp	r3, #0
 800f974:	d001      	beq.n	800f97a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f976:	2303      	movs	r3, #3
 800f978:	e00d      	b.n	800f996 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2220      	movs	r2, #32
 800f97e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2220      	movs	r2, #32
 800f984:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	2200      	movs	r2, #0
 800f98a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2200      	movs	r2, #0
 800f990:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800f994:	2300      	movs	r3, #0
}
 800f996:	4618      	mov	r0, r3
 800f998:	3710      	adds	r7, #16
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}

0800f99e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f99e:	b580      	push	{r7, lr}
 800f9a0:	b09c      	sub	sp, #112	; 0x70
 800f9a2:	af00      	add	r7, sp, #0
 800f9a4:	60f8      	str	r0, [r7, #12]
 800f9a6:	60b9      	str	r1, [r7, #8]
 800f9a8:	603b      	str	r3, [r7, #0]
 800f9aa:	4613      	mov	r3, r2
 800f9ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f9ae:	e0a5      	b.n	800fafc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f9b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f9b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9b6:	f000 80a1 	beq.w	800fafc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f9ba:	f7f8 fcc7 	bl	800834c <HAL_GetTick>
 800f9be:	4602      	mov	r2, r0
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	1ad3      	subs	r3, r2, r3
 800f9c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d302      	bcc.n	800f9d0 <UART_WaitOnFlagUntilTimeout+0x32>
 800f9ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d13e      	bne.n	800fa4e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9d8:	e853 3f00 	ldrex	r3, [r3]
 800f9dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f9de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f9e4:	667b      	str	r3, [r7, #100]	; 0x64
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	461a      	mov	r2, r3
 800f9ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f9f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f9f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f9f6:	e841 2300 	strex	r3, r2, [r1]
 800f9fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f9fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d1e6      	bne.n	800f9d0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	3308      	adds	r3, #8
 800fa08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa0c:	e853 3f00 	ldrex	r3, [r3]
 800fa10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fa12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa14:	f023 0301 	bic.w	r3, r3, #1
 800fa18:	663b      	str	r3, [r7, #96]	; 0x60
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	3308      	adds	r3, #8
 800fa20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fa22:	64ba      	str	r2, [r7, #72]	; 0x48
 800fa24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa2a:	e841 2300 	strex	r3, r2, [r1]
 800fa2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fa30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d1e5      	bne.n	800fa02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	2220      	movs	r2, #32
 800fa3a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	2220      	movs	r2, #32
 800fa40:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	2200      	movs	r2, #0
 800fa46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800fa4a:	2303      	movs	r3, #3
 800fa4c:	e067      	b.n	800fb1e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	f003 0304 	and.w	r3, r3, #4
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d04f      	beq.n	800fafc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	69db      	ldr	r3, [r3, #28]
 800fa62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fa66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fa6a:	d147      	bne.n	800fafc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fa74:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa7e:	e853 3f00 	ldrex	r3, [r3]
 800fa82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800fa8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	461a      	mov	r2, r3
 800fa92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa94:	637b      	str	r3, [r7, #52]	; 0x34
 800fa96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fa9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa9c:	e841 2300 	strex	r3, r2, [r1]
 800faa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800faa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d1e6      	bne.n	800fa76 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	3308      	adds	r3, #8
 800faae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	e853 3f00 	ldrex	r3, [r3]
 800fab6:	613b      	str	r3, [r7, #16]
   return(result);
 800fab8:	693b      	ldr	r3, [r7, #16]
 800faba:	f023 0301 	bic.w	r3, r3, #1
 800fabe:	66bb      	str	r3, [r7, #104]	; 0x68
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	3308      	adds	r3, #8
 800fac6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fac8:	623a      	str	r2, [r7, #32]
 800faca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800facc:	69f9      	ldr	r1, [r7, #28]
 800face:	6a3a      	ldr	r2, [r7, #32]
 800fad0:	e841 2300 	strex	r3, r2, [r1]
 800fad4:	61bb      	str	r3, [r7, #24]
   return(result);
 800fad6:	69bb      	ldr	r3, [r7, #24]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d1e5      	bne.n	800faa8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	2220      	movs	r2, #32
 800fae0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	2220      	movs	r2, #32
 800fae6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2220      	movs	r2, #32
 800faec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	2200      	movs	r2, #0
 800faf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800faf8:	2303      	movs	r3, #3
 800fafa:	e010      	b.n	800fb1e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	69da      	ldr	r2, [r3, #28]
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	4013      	ands	r3, r2
 800fb06:	68ba      	ldr	r2, [r7, #8]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	bf0c      	ite	eq
 800fb0c:	2301      	moveq	r3, #1
 800fb0e:	2300      	movne	r3, #0
 800fb10:	b2db      	uxtb	r3, r3
 800fb12:	461a      	mov	r2, r3
 800fb14:	79fb      	ldrb	r3, [r7, #7]
 800fb16:	429a      	cmp	r2, r3
 800fb18:	f43f af4a 	beq.w	800f9b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fb1c:	2300      	movs	r3, #0
}
 800fb1e:	4618      	mov	r0, r3
 800fb20:	3770      	adds	r7, #112	; 0x70
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}
	...

0800fb28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fb28:	b480      	push	{r7}
 800fb2a:	b097      	sub	sp, #92	; 0x5c
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	60f8      	str	r0, [r7, #12]
 800fb30:	60b9      	str	r1, [r7, #8]
 800fb32:	4613      	mov	r3, r2
 800fb34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	68ba      	ldr	r2, [r7, #8]
 800fb3a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	88fa      	ldrh	r2, [r7, #6]
 800fb40:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	88fa      	ldrh	r2, [r7, #6]
 800fb48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	689b      	ldr	r3, [r3, #8]
 800fb56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb5a:	d10e      	bne.n	800fb7a <UART_Start_Receive_IT+0x52>
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	691b      	ldr	r3, [r3, #16]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d105      	bne.n	800fb70 <UART_Start_Receive_IT+0x48>
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fb6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800fb6e:	e02d      	b.n	800fbcc <UART_Start_Receive_IT+0xa4>
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	22ff      	movs	r2, #255	; 0xff
 800fb74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800fb78:	e028      	b.n	800fbcc <UART_Start_Receive_IT+0xa4>
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	689b      	ldr	r3, [r3, #8]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d10d      	bne.n	800fb9e <UART_Start_Receive_IT+0x76>
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	691b      	ldr	r3, [r3, #16]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d104      	bne.n	800fb94 <UART_Start_Receive_IT+0x6c>
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	22ff      	movs	r2, #255	; 0xff
 800fb8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800fb92:	e01b      	b.n	800fbcc <UART_Start_Receive_IT+0xa4>
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	227f      	movs	r2, #127	; 0x7f
 800fb98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800fb9c:	e016      	b.n	800fbcc <UART_Start_Receive_IT+0xa4>
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	689b      	ldr	r3, [r3, #8]
 800fba2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fba6:	d10d      	bne.n	800fbc4 <UART_Start_Receive_IT+0x9c>
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	691b      	ldr	r3, [r3, #16]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d104      	bne.n	800fbba <UART_Start_Receive_IT+0x92>
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	227f      	movs	r2, #127	; 0x7f
 800fbb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800fbb8:	e008      	b.n	800fbcc <UART_Start_Receive_IT+0xa4>
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	223f      	movs	r2, #63	; 0x3f
 800fbbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800fbc2:	e003      	b.n	800fbcc <UART_Start_Receive_IT+0xa4>
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	2200      	movs	r2, #0
 800fbd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	2222      	movs	r2, #34	; 0x22
 800fbd8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	3308      	adds	r3, #8
 800fbe0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbe4:	e853 3f00 	ldrex	r3, [r3]
 800fbe8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbec:	f043 0301 	orr.w	r3, r3, #1
 800fbf0:	657b      	str	r3, [r7, #84]	; 0x54
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	3308      	adds	r3, #8
 800fbf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fbfa:	64ba      	str	r2, [r7, #72]	; 0x48
 800fbfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fc00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc02:	e841 2300 	strex	r3, r2, [r1]
 800fc06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fc08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d1e5      	bne.n	800fbda <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	689b      	ldr	r3, [r3, #8]
 800fc12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc16:	d107      	bne.n	800fc28 <UART_Start_Receive_IT+0x100>
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	691b      	ldr	r3, [r3, #16]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d103      	bne.n	800fc28 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	4a24      	ldr	r2, [pc, #144]	; (800fcb4 <UART_Start_Receive_IT+0x18c>)
 800fc24:	665a      	str	r2, [r3, #100]	; 0x64
 800fc26:	e002      	b.n	800fc2e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	4a23      	ldr	r2, [pc, #140]	; (800fcb8 <UART_Start_Receive_IT+0x190>)
 800fc2c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	2200      	movs	r2, #0
 800fc32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	691b      	ldr	r3, [r3, #16]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d019      	beq.n	800fc72 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc46:	e853 3f00 	ldrex	r3, [r3]
 800fc4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc4e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800fc52:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	461a      	mov	r2, r3
 800fc5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc5c:	637b      	str	r3, [r7, #52]	; 0x34
 800fc5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fc62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc64:	e841 2300 	strex	r3, r2, [r1]
 800fc68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d1e6      	bne.n	800fc3e <UART_Start_Receive_IT+0x116>
 800fc70:	e018      	b.n	800fca4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	e853 3f00 	ldrex	r3, [r3]
 800fc7e:	613b      	str	r3, [r7, #16]
   return(result);
 800fc80:	693b      	ldr	r3, [r7, #16]
 800fc82:	f043 0320 	orr.w	r3, r3, #32
 800fc86:	653b      	str	r3, [r7, #80]	; 0x50
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	461a      	mov	r2, r3
 800fc8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc90:	623b      	str	r3, [r7, #32]
 800fc92:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc94:	69f9      	ldr	r1, [r7, #28]
 800fc96:	6a3a      	ldr	r2, [r7, #32]
 800fc98:	e841 2300 	strex	r3, r2, [r1]
 800fc9c:	61bb      	str	r3, [r7, #24]
   return(result);
 800fc9e:	69bb      	ldr	r3, [r7, #24]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d1e6      	bne.n	800fc72 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800fca4:	2300      	movs	r3, #0
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	375c      	adds	r7, #92	; 0x5c
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb0:	4770      	bx	lr
 800fcb2:	bf00      	nop
 800fcb4:	080100e1 	.word	0x080100e1
 800fcb8:	0800ff81 	.word	0x0800ff81

0800fcbc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b089      	sub	sp, #36	; 0x24
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	e853 3f00 	ldrex	r3, [r3]
 800fcd0:	60bb      	str	r3, [r7, #8]
   return(result);
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fcd8:	61fb      	str	r3, [r7, #28]
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	461a      	mov	r2, r3
 800fce0:	69fb      	ldr	r3, [r7, #28]
 800fce2:	61bb      	str	r3, [r7, #24]
 800fce4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fce6:	6979      	ldr	r1, [r7, #20]
 800fce8:	69ba      	ldr	r2, [r7, #24]
 800fcea:	e841 2300 	strex	r3, r2, [r1]
 800fcee:	613b      	str	r3, [r7, #16]
   return(result);
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d1e6      	bne.n	800fcc4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2220      	movs	r2, #32
 800fcfa:	679a      	str	r2, [r3, #120]	; 0x78
}
 800fcfc:	bf00      	nop
 800fcfe:	3724      	adds	r7, #36	; 0x24
 800fd00:	46bd      	mov	sp, r7
 800fd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd06:	4770      	bx	lr

0800fd08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b095      	sub	sp, #84	; 0x54
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd18:	e853 3f00 	ldrex	r3, [r3]
 800fd1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fd24:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	461a      	mov	r2, r3
 800fd2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd2e:	643b      	str	r3, [r7, #64]	; 0x40
 800fd30:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fd34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fd36:	e841 2300 	strex	r3, r2, [r1]
 800fd3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d1e6      	bne.n	800fd10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	3308      	adds	r3, #8
 800fd48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd4a:	6a3b      	ldr	r3, [r7, #32]
 800fd4c:	e853 3f00 	ldrex	r3, [r3]
 800fd50:	61fb      	str	r3, [r7, #28]
   return(result);
 800fd52:	69fb      	ldr	r3, [r7, #28]
 800fd54:	f023 0301 	bic.w	r3, r3, #1
 800fd58:	64bb      	str	r3, [r7, #72]	; 0x48
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	3308      	adds	r3, #8
 800fd60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd62:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fd64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd6a:	e841 2300 	strex	r3, r2, [r1]
 800fd6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d1e5      	bne.n	800fd42 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fd7a:	2b01      	cmp	r3, #1
 800fd7c:	d118      	bne.n	800fdb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	e853 3f00 	ldrex	r3, [r3]
 800fd8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	f023 0310 	bic.w	r3, r3, #16
 800fd92:	647b      	str	r3, [r7, #68]	; 0x44
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	461a      	mov	r2, r3
 800fd9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd9c:	61bb      	str	r3, [r7, #24]
 800fd9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fda0:	6979      	ldr	r1, [r7, #20]
 800fda2:	69ba      	ldr	r2, [r7, #24]
 800fda4:	e841 2300 	strex	r3, r2, [r1]
 800fda8:	613b      	str	r3, [r7, #16]
   return(result);
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d1e6      	bne.n	800fd7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2220      	movs	r2, #32
 800fdb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2200      	movs	r2, #0
 800fdba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	665a      	str	r2, [r3, #100]	; 0x64
}
 800fdc2:	bf00      	nop
 800fdc4:	3754      	adds	r7, #84	; 0x54
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdcc:	4770      	bx	lr

0800fdce <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fdce:	b580      	push	{r7, lr}
 800fdd0:	b090      	sub	sp, #64	; 0x40
 800fdd2:	af00      	add	r7, sp, #0
 800fdd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdda:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	f003 0320 	and.w	r3, r3, #32
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d137      	bne.n	800fe5a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800fdea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdec:	2200      	movs	r2, #0
 800fdee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fdf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	3308      	adds	r3, #8
 800fdf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdfc:	e853 3f00 	ldrex	r3, [r3]
 800fe00:	623b      	str	r3, [r7, #32]
   return(result);
 800fe02:	6a3b      	ldr	r3, [r7, #32]
 800fe04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe08:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	3308      	adds	r3, #8
 800fe10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe12:	633a      	str	r2, [r7, #48]	; 0x30
 800fe14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe1a:	e841 2300 	strex	r3, r2, [r1]
 800fe1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fe20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d1e5      	bne.n	800fdf2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fe26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe2c:	693b      	ldr	r3, [r7, #16]
 800fe2e:	e853 3f00 	ldrex	r3, [r3]
 800fe32:	60fb      	str	r3, [r7, #12]
   return(result);
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe3a:	637b      	str	r3, [r7, #52]	; 0x34
 800fe3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	461a      	mov	r2, r3
 800fe42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe44:	61fb      	str	r3, [r7, #28]
 800fe46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe48:	69b9      	ldr	r1, [r7, #24]
 800fe4a:	69fa      	ldr	r2, [r7, #28]
 800fe4c:	e841 2300 	strex	r3, r2, [r1]
 800fe50:	617b      	str	r3, [r7, #20]
   return(result);
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d1e6      	bne.n	800fe26 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fe58:	e002      	b.n	800fe60 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800fe5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fe5c:	f7f3 fb3a 	bl	80034d4 <HAL_UART_TxCpltCallback>
}
 800fe60:	bf00      	nop
 800fe62:	3740      	adds	r7, #64	; 0x40
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}

0800fe68 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b084      	sub	sp, #16
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe74:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800fe76:	68f8      	ldr	r0, [r7, #12]
 800fe78:	f7ff f9d8 	bl	800f22c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe7c:	bf00      	nop
 800fe7e:	3710      	adds	r7, #16
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b086      	sub	sp, #24
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe90:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe96:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe9c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	689b      	ldr	r3, [r3, #8]
 800fea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fea8:	2b80      	cmp	r3, #128	; 0x80
 800feaa:	d109      	bne.n	800fec0 <UART_DMAError+0x3c>
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	2b21      	cmp	r3, #33	; 0x21
 800feb0:	d106      	bne.n	800fec0 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800feb2:	697b      	ldr	r3, [r7, #20]
 800feb4:	2200      	movs	r2, #0
 800feb6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800feba:	6978      	ldr	r0, [r7, #20]
 800febc:	f7ff fefe 	bl	800fcbc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	689b      	ldr	r3, [r3, #8]
 800fec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800feca:	2b40      	cmp	r3, #64	; 0x40
 800fecc:	d109      	bne.n	800fee2 <UART_DMAError+0x5e>
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	2b22      	cmp	r3, #34	; 0x22
 800fed2:	d106      	bne.n	800fee2 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	2200      	movs	r2, #0
 800fed8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800fedc:	6978      	ldr	r0, [r7, #20]
 800fede:	f7ff ff13 	bl	800fd08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fee2:	697b      	ldr	r3, [r7, #20]
 800fee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fee8:	f043 0210 	orr.w	r2, r3, #16
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fef2:	6978      	ldr	r0, [r7, #20]
 800fef4:	f7f3 fb04 	bl	8003500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fef8:	bf00      	nop
 800fefa:	3718      	adds	r7, #24
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}

0800ff00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b084      	sub	sp, #16
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	2200      	movs	r2, #0
 800ff12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ff1e:	68f8      	ldr	r0, [r7, #12]
 800ff20:	f7f3 faee 	bl	8003500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff24:	bf00      	nop
 800ff26:	3710      	adds	r7, #16
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}

0800ff2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b088      	sub	sp, #32
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	e853 3f00 	ldrex	r3, [r3]
 800ff40:	60bb      	str	r3, [r7, #8]
   return(result);
 800ff42:	68bb      	ldr	r3, [r7, #8]
 800ff44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff48:	61fb      	str	r3, [r7, #28]
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	461a      	mov	r2, r3
 800ff50:	69fb      	ldr	r3, [r7, #28]
 800ff52:	61bb      	str	r3, [r7, #24]
 800ff54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff56:	6979      	ldr	r1, [r7, #20]
 800ff58:	69ba      	ldr	r2, [r7, #24]
 800ff5a:	e841 2300 	strex	r3, r2, [r1]
 800ff5e:	613b      	str	r3, [r7, #16]
   return(result);
 800ff60:	693b      	ldr	r3, [r7, #16]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d1e6      	bne.n	800ff34 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2220      	movs	r2, #32
 800ff6a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f7f3 faae 	bl	80034d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff78:	bf00      	nop
 800ff7a:	3720      	adds	r7, #32
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}

0800ff80 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b096      	sub	sp, #88	; 0x58
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ff8e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff96:	2b22      	cmp	r3, #34	; 0x22
 800ff98:	f040 8094 	bne.w	80100c4 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ffa2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ffa6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800ffaa:	b2d9      	uxtb	r1, r3
 800ffac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ffb0:	b2da      	uxtb	r2, r3
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffb6:	400a      	ands	r2, r1
 800ffb8:	b2d2      	uxtb	r2, r2
 800ffba:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffc0:	1c5a      	adds	r2, r3, #1
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ffcc:	b29b      	uxth	r3, r3
 800ffce:	3b01      	subs	r3, #1
 800ffd0:	b29a      	uxth	r2, r3
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ffde:	b29b      	uxth	r3, r3
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d179      	bne.n	80100d8 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffec:	e853 3f00 	ldrex	r3, [r3]
 800fff0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fff4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fff8:	653b      	str	r3, [r7, #80]	; 0x50
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	461a      	mov	r2, r3
 8010000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010002:	647b      	str	r3, [r7, #68]	; 0x44
 8010004:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010006:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010008:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801000a:	e841 2300 	strex	r3, r2, [r1]
 801000e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010012:	2b00      	cmp	r3, #0
 8010014:	d1e6      	bne.n	800ffe4 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	3308      	adds	r3, #8
 801001c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801001e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010020:	e853 3f00 	ldrex	r3, [r3]
 8010024:	623b      	str	r3, [r7, #32]
   return(result);
 8010026:	6a3b      	ldr	r3, [r7, #32]
 8010028:	f023 0301 	bic.w	r3, r3, #1
 801002c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	3308      	adds	r3, #8
 8010034:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010036:	633a      	str	r2, [r7, #48]	; 0x30
 8010038:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801003a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801003c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801003e:	e841 2300 	strex	r3, r2, [r1]
 8010042:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010046:	2b00      	cmp	r3, #0
 8010048:	d1e5      	bne.n	8010016 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2220      	movs	r2, #32
 801004e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2200      	movs	r2, #0
 8010054:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801005a:	2b01      	cmp	r3, #1
 801005c:	d12e      	bne.n	80100bc <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	2200      	movs	r2, #0
 8010062:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801006a:	693b      	ldr	r3, [r7, #16]
 801006c:	e853 3f00 	ldrex	r3, [r3]
 8010070:	60fb      	str	r3, [r7, #12]
   return(result);
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	f023 0310 	bic.w	r3, r3, #16
 8010078:	64bb      	str	r3, [r7, #72]	; 0x48
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	461a      	mov	r2, r3
 8010080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010082:	61fb      	str	r3, [r7, #28]
 8010084:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010086:	69b9      	ldr	r1, [r7, #24]
 8010088:	69fa      	ldr	r2, [r7, #28]
 801008a:	e841 2300 	strex	r3, r2, [r1]
 801008e:	617b      	str	r3, [r7, #20]
   return(result);
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d1e6      	bne.n	8010064 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	69db      	ldr	r3, [r3, #28]
 801009c:	f003 0310 	and.w	r3, r3, #16
 80100a0:	2b10      	cmp	r3, #16
 80100a2:	d103      	bne.n	80100ac <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	2210      	movs	r2, #16
 80100aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80100b2:	4619      	mov	r1, r3
 80100b4:	6878      	ldr	r0, [r7, #4]
 80100b6:	f7ff f8c3 	bl	800f240 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80100ba:	e00d      	b.n	80100d8 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f7f3 fa39 	bl	8003534 <HAL_UART_RxCpltCallback>
}
 80100c2:	e009      	b.n	80100d8 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	8b1b      	ldrh	r3, [r3, #24]
 80100ca:	b29a      	uxth	r2, r3
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	f042 0208 	orr.w	r2, r2, #8
 80100d4:	b292      	uxth	r2, r2
 80100d6:	831a      	strh	r2, [r3, #24]
}
 80100d8:	bf00      	nop
 80100da:	3758      	adds	r7, #88	; 0x58
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}

080100e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b096      	sub	sp, #88	; 0x58
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80100ee:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100f6:	2b22      	cmp	r3, #34	; 0x22
 80100f8:	f040 8094 	bne.w	8010224 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010102:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801010a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 801010c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8010110:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010114:	4013      	ands	r3, r2
 8010116:	b29a      	uxth	r2, r3
 8010118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801011a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010120:	1c9a      	adds	r2, r3, #2
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801012c:	b29b      	uxth	r3, r3
 801012e:	3b01      	subs	r3, #1
 8010130:	b29a      	uxth	r2, r3
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801013e:	b29b      	uxth	r3, r3
 8010140:	2b00      	cmp	r3, #0
 8010142:	d179      	bne.n	8010238 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801014a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801014c:	e853 3f00 	ldrex	r3, [r3]
 8010150:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010154:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010158:	64fb      	str	r3, [r7, #76]	; 0x4c
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	461a      	mov	r2, r3
 8010160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010162:	643b      	str	r3, [r7, #64]	; 0x40
 8010164:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010166:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010168:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801016a:	e841 2300 	strex	r3, r2, [r1]
 801016e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010172:	2b00      	cmp	r3, #0
 8010174:	d1e6      	bne.n	8010144 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	3308      	adds	r3, #8
 801017c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801017e:	6a3b      	ldr	r3, [r7, #32]
 8010180:	e853 3f00 	ldrex	r3, [r3]
 8010184:	61fb      	str	r3, [r7, #28]
   return(result);
 8010186:	69fb      	ldr	r3, [r7, #28]
 8010188:	f023 0301 	bic.w	r3, r3, #1
 801018c:	64bb      	str	r3, [r7, #72]	; 0x48
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	3308      	adds	r3, #8
 8010194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010196:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010198:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801019a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801019c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801019e:	e841 2300 	strex	r3, r2, [r1]
 80101a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80101a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d1e5      	bne.n	8010176 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	2220      	movs	r2, #32
 80101ae:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2200      	movs	r2, #0
 80101b4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80101ba:	2b01      	cmp	r3, #1
 80101bc:	d12e      	bne.n	801021c <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	2200      	movs	r2, #0
 80101c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	e853 3f00 	ldrex	r3, [r3]
 80101d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80101d2:	68bb      	ldr	r3, [r7, #8]
 80101d4:	f023 0310 	bic.w	r3, r3, #16
 80101d8:	647b      	str	r3, [r7, #68]	; 0x44
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	461a      	mov	r2, r3
 80101e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101e2:	61bb      	str	r3, [r7, #24]
 80101e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101e6:	6979      	ldr	r1, [r7, #20]
 80101e8:	69ba      	ldr	r2, [r7, #24]
 80101ea:	e841 2300 	strex	r3, r2, [r1]
 80101ee:	613b      	str	r3, [r7, #16]
   return(result);
 80101f0:	693b      	ldr	r3, [r7, #16]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d1e6      	bne.n	80101c4 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	69db      	ldr	r3, [r3, #28]
 80101fc:	f003 0310 	and.w	r3, r3, #16
 8010200:	2b10      	cmp	r3, #16
 8010202:	d103      	bne.n	801020c <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	2210      	movs	r2, #16
 801020a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010212:	4619      	mov	r1, r3
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f7ff f813 	bl	800f240 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801021a:	e00d      	b.n	8010238 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f7f3 f989 	bl	8003534 <HAL_UART_RxCpltCallback>
}
 8010222:	e009      	b.n	8010238 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	8b1b      	ldrh	r3, [r3, #24]
 801022a:	b29a      	uxth	r2, r3
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	f042 0208 	orr.w	r2, r2, #8
 8010234:	b292      	uxth	r2, r2
 8010236:	831a      	strh	r2, [r3, #24]
}
 8010238:	bf00      	nop
 801023a:	3758      	adds	r7, #88	; 0x58
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}

08010240 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010240:	b480      	push	{r7}
 8010242:	b083      	sub	sp, #12
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010248:	bf00      	nop
 801024a:	370c      	adds	r7, #12
 801024c:	46bd      	mov	sp, r7
 801024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010252:	4770      	bx	lr

08010254 <__NVIC_SetPriority>:
{
 8010254:	b480      	push	{r7}
 8010256:	b083      	sub	sp, #12
 8010258:	af00      	add	r7, sp, #0
 801025a:	4603      	mov	r3, r0
 801025c:	6039      	str	r1, [r7, #0]
 801025e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010264:	2b00      	cmp	r3, #0
 8010266:	db0a      	blt.n	801027e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010268:	683b      	ldr	r3, [r7, #0]
 801026a:	b2da      	uxtb	r2, r3
 801026c:	490c      	ldr	r1, [pc, #48]	; (80102a0 <__NVIC_SetPriority+0x4c>)
 801026e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010272:	0112      	lsls	r2, r2, #4
 8010274:	b2d2      	uxtb	r2, r2
 8010276:	440b      	add	r3, r1
 8010278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801027c:	e00a      	b.n	8010294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801027e:	683b      	ldr	r3, [r7, #0]
 8010280:	b2da      	uxtb	r2, r3
 8010282:	4908      	ldr	r1, [pc, #32]	; (80102a4 <__NVIC_SetPriority+0x50>)
 8010284:	79fb      	ldrb	r3, [r7, #7]
 8010286:	f003 030f 	and.w	r3, r3, #15
 801028a:	3b04      	subs	r3, #4
 801028c:	0112      	lsls	r2, r2, #4
 801028e:	b2d2      	uxtb	r2, r2
 8010290:	440b      	add	r3, r1
 8010292:	761a      	strb	r2, [r3, #24]
}
 8010294:	bf00      	nop
 8010296:	370c      	adds	r7, #12
 8010298:	46bd      	mov	sp, r7
 801029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029e:	4770      	bx	lr
 80102a0:	e000e100 	.word	0xe000e100
 80102a4:	e000ed00 	.word	0xe000ed00

080102a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80102a8:	b580      	push	{r7, lr}
 80102aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80102ac:	4b05      	ldr	r3, [pc, #20]	; (80102c4 <SysTick_Handler+0x1c>)
 80102ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80102b0:	f002 fb1c 	bl	80128ec <xTaskGetSchedulerState>
 80102b4:	4603      	mov	r3, r0
 80102b6:	2b01      	cmp	r3, #1
 80102b8:	d001      	beq.n	80102be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80102ba:	f003 fa05 	bl	80136c8 <xPortSysTickHandler>
  }
}
 80102be:	bf00      	nop
 80102c0:	bd80      	pop	{r7, pc}
 80102c2:	bf00      	nop
 80102c4:	e000e010 	.word	0xe000e010

080102c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80102c8:	b580      	push	{r7, lr}
 80102ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80102cc:	2100      	movs	r1, #0
 80102ce:	f06f 0004 	mvn.w	r0, #4
 80102d2:	f7ff ffbf 	bl	8010254 <__NVIC_SetPriority>
#endif
}
 80102d6:	bf00      	nop
 80102d8:	bd80      	pop	{r7, pc}
	...

080102dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80102dc:	b580      	push	{r7, lr}
 80102de:	b082      	sub	sp, #8
 80102e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102e2:	f3ef 8305 	mrs	r3, IPSR
 80102e6:	603b      	str	r3, [r7, #0]
  return(result);
 80102e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d003      	beq.n	80102f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80102ee:	f06f 0305 	mvn.w	r3, #5
 80102f2:	607b      	str	r3, [r7, #4]
 80102f4:	e00f      	b.n	8010316 <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 80102f6:	4b0a      	ldr	r3, [pc, #40]	; (8010320 <osKernelInitialize+0x44>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d108      	bne.n	8010310 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 80102fe:	4809      	ldr	r0, [pc, #36]	; (8010324 <osKernelInitialize+0x48>)
 8010300:	f003 fbd2 	bl	8013aa8 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 8010304:	4b06      	ldr	r3, [pc, #24]	; (8010320 <osKernelInitialize+0x44>)
 8010306:	2201      	movs	r2, #1
 8010308:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801030a:	2300      	movs	r3, #0
 801030c:	607b      	str	r3, [r7, #4]
 801030e:	e002      	b.n	8010316 <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 8010310:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010314:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010316:	687b      	ldr	r3, [r7, #4]
}
 8010318:	4618      	mov	r0, r3
 801031a:	3708      	adds	r7, #8
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}
 8010320:	20003604 	.word	0x20003604
 8010324:	20000218 	.word	0x20000218

08010328 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010328:	b580      	push	{r7, lr}
 801032a:	b082      	sub	sp, #8
 801032c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801032e:	f3ef 8305 	mrs	r3, IPSR
 8010332:	603b      	str	r3, [r7, #0]
  return(result);
 8010334:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010336:	2b00      	cmp	r3, #0
 8010338:	d003      	beq.n	8010342 <osKernelStart+0x1a>
    stat = osErrorISR;
 801033a:	f06f 0305 	mvn.w	r3, #5
 801033e:	607b      	str	r3, [r7, #4]
 8010340:	e010      	b.n	8010364 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010342:	4b0b      	ldr	r3, [pc, #44]	; (8010370 <osKernelStart+0x48>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	2b01      	cmp	r3, #1
 8010348:	d109      	bne.n	801035e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801034a:	f7ff ffbd 	bl	80102c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801034e:	4b08      	ldr	r3, [pc, #32]	; (8010370 <osKernelStart+0x48>)
 8010350:	2202      	movs	r2, #2
 8010352:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010354:	f001 fe6e 	bl	8012034 <vTaskStartScheduler>
      stat = osOK;
 8010358:	2300      	movs	r3, #0
 801035a:	607b      	str	r3, [r7, #4]
 801035c:	e002      	b.n	8010364 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801035e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010362:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010364:	687b      	ldr	r3, [r7, #4]
}
 8010366:	4618      	mov	r0, r3
 8010368:	3708      	adds	r7, #8
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}
 801036e:	bf00      	nop
 8010370:	20003604 	.word	0x20003604

08010374 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010374:	b580      	push	{r7, lr}
 8010376:	b08e      	sub	sp, #56	; 0x38
 8010378:	af04      	add	r7, sp, #16
 801037a:	60f8      	str	r0, [r7, #12]
 801037c:	60b9      	str	r1, [r7, #8]
 801037e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010380:	2300      	movs	r3, #0
 8010382:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010384:	f3ef 8305 	mrs	r3, IPSR
 8010388:	617b      	str	r3, [r7, #20]
  return(result);
 801038a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801038c:	2b00      	cmp	r3, #0
 801038e:	d17e      	bne.n	801048e <osThreadNew+0x11a>
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d07b      	beq.n	801048e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8010396:	2380      	movs	r3, #128	; 0x80
 8010398:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801039a:	2318      	movs	r3, #24
 801039c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801039e:	2300      	movs	r3, #0
 80103a0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80103a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80103a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d045      	beq.n	801043a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d002      	beq.n	80103bc <osThreadNew+0x48>
        name = attr->name;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	699b      	ldr	r3, [r3, #24]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d002      	beq.n	80103ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	699b      	ldr	r3, [r3, #24]
 80103c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80103ca:	69fb      	ldr	r3, [r7, #28]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d008      	beq.n	80103e2 <osThreadNew+0x6e>
 80103d0:	69fb      	ldr	r3, [r7, #28]
 80103d2:	2b38      	cmp	r3, #56	; 0x38
 80103d4:	d805      	bhi.n	80103e2 <osThreadNew+0x6e>
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	685b      	ldr	r3, [r3, #4]
 80103da:	f003 0301 	and.w	r3, r3, #1
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d001      	beq.n	80103e6 <osThreadNew+0x72>
        return (NULL);
 80103e2:	2300      	movs	r3, #0
 80103e4:	e054      	b.n	8010490 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	695b      	ldr	r3, [r3, #20]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d003      	beq.n	80103f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	695b      	ldr	r3, [r3, #20]
 80103f2:	089b      	lsrs	r3, r3, #2
 80103f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	689b      	ldr	r3, [r3, #8]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d00e      	beq.n	801041c <osThreadNew+0xa8>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	68db      	ldr	r3, [r3, #12]
 8010402:	2bbb      	cmp	r3, #187	; 0xbb
 8010404:	d90a      	bls.n	801041c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801040a:	2b00      	cmp	r3, #0
 801040c:	d006      	beq.n	801041c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	695b      	ldr	r3, [r3, #20]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d002      	beq.n	801041c <osThreadNew+0xa8>
        mem = 1;
 8010416:	2301      	movs	r3, #1
 8010418:	61bb      	str	r3, [r7, #24]
 801041a:	e010      	b.n	801043e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	689b      	ldr	r3, [r3, #8]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d10c      	bne.n	801043e <osThreadNew+0xca>
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	68db      	ldr	r3, [r3, #12]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d108      	bne.n	801043e <osThreadNew+0xca>
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	691b      	ldr	r3, [r3, #16]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d104      	bne.n	801043e <osThreadNew+0xca>
          mem = 0;
 8010434:	2300      	movs	r3, #0
 8010436:	61bb      	str	r3, [r7, #24]
 8010438:	e001      	b.n	801043e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801043a:	2300      	movs	r3, #0
 801043c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801043e:	69bb      	ldr	r3, [r7, #24]
 8010440:	2b01      	cmp	r3, #1
 8010442:	d110      	bne.n	8010466 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010448:	687a      	ldr	r2, [r7, #4]
 801044a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801044c:	9202      	str	r2, [sp, #8]
 801044e:	9301      	str	r3, [sp, #4]
 8010450:	69fb      	ldr	r3, [r7, #28]
 8010452:	9300      	str	r3, [sp, #0]
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	6a3a      	ldr	r2, [r7, #32]
 8010458:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801045a:	68f8      	ldr	r0, [r7, #12]
 801045c:	f001 fbc0 	bl	8011be0 <xTaskCreateStatic>
 8010460:	4603      	mov	r3, r0
 8010462:	613b      	str	r3, [r7, #16]
 8010464:	e013      	b.n	801048e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8010466:	69bb      	ldr	r3, [r7, #24]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d110      	bne.n	801048e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801046c:	6a3b      	ldr	r3, [r7, #32]
 801046e:	b29a      	uxth	r2, r3
 8010470:	f107 0310 	add.w	r3, r7, #16
 8010474:	9301      	str	r3, [sp, #4]
 8010476:	69fb      	ldr	r3, [r7, #28]
 8010478:	9300      	str	r3, [sp, #0]
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801047e:	68f8      	ldr	r0, [r7, #12]
 8010480:	f001 fc0b 	bl	8011c9a <xTaskCreate>
 8010484:	4603      	mov	r3, r0
 8010486:	2b01      	cmp	r3, #1
 8010488:	d001      	beq.n	801048e <osThreadNew+0x11a>
            hTask = NULL;
 801048a:	2300      	movs	r3, #0
 801048c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801048e:	693b      	ldr	r3, [r7, #16]
}
 8010490:	4618      	mov	r0, r3
 8010492:	3728      	adds	r7, #40	; 0x28
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}

08010498 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010498:	b580      	push	{r7, lr}
 801049a:	b08a      	sub	sp, #40	; 0x28
 801049c:	af02      	add	r7, sp, #8
 801049e:	60f8      	str	r0, [r7, #12]
 80104a0:	60b9      	str	r1, [r7, #8]
 80104a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80104a4:	2300      	movs	r3, #0
 80104a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104a8:	f3ef 8305 	mrs	r3, IPSR
 80104ac:	613b      	str	r3, [r7, #16]
  return(result);
 80104ae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d175      	bne.n	80105a0 <osSemaphoreNew+0x108>
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d072      	beq.n	80105a0 <osSemaphoreNew+0x108>
 80104ba:	68ba      	ldr	r2, [r7, #8]
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	429a      	cmp	r2, r3
 80104c0:	d86e      	bhi.n	80105a0 <osSemaphoreNew+0x108>
    mem = -1;
 80104c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d015      	beq.n	80104fa <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	689b      	ldr	r3, [r3, #8]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d006      	beq.n	80104e4 <osSemaphoreNew+0x4c>
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	68db      	ldr	r3, [r3, #12]
 80104da:	2b4f      	cmp	r3, #79	; 0x4f
 80104dc:	d902      	bls.n	80104e4 <osSemaphoreNew+0x4c>
        mem = 1;
 80104de:	2301      	movs	r3, #1
 80104e0:	61bb      	str	r3, [r7, #24]
 80104e2:	e00c      	b.n	80104fe <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	689b      	ldr	r3, [r3, #8]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d108      	bne.n	80104fe <osSemaphoreNew+0x66>
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	68db      	ldr	r3, [r3, #12]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d104      	bne.n	80104fe <osSemaphoreNew+0x66>
          mem = 0;
 80104f4:	2300      	movs	r3, #0
 80104f6:	61bb      	str	r3, [r7, #24]
 80104f8:	e001      	b.n	80104fe <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80104fa:	2300      	movs	r3, #0
 80104fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80104fe:	69bb      	ldr	r3, [r7, #24]
 8010500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010504:	d04c      	beq.n	80105a0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	2b01      	cmp	r3, #1
 801050a:	d128      	bne.n	801055e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 801050c:	69bb      	ldr	r3, [r7, #24]
 801050e:	2b01      	cmp	r3, #1
 8010510:	d10a      	bne.n	8010528 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	689b      	ldr	r3, [r3, #8]
 8010516:	2203      	movs	r2, #3
 8010518:	9200      	str	r2, [sp, #0]
 801051a:	2200      	movs	r2, #0
 801051c:	2100      	movs	r1, #0
 801051e:	2001      	movs	r0, #1
 8010520:	f000 fb7c 	bl	8010c1c <xQueueGenericCreateStatic>
 8010524:	61f8      	str	r0, [r7, #28]
 8010526:	e005      	b.n	8010534 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8010528:	2203      	movs	r2, #3
 801052a:	2100      	movs	r1, #0
 801052c:	2001      	movs	r0, #1
 801052e:	f000 fbed 	bl	8010d0c <xQueueGenericCreate>
 8010532:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010534:	69fb      	ldr	r3, [r7, #28]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d022      	beq.n	8010580 <osSemaphoreNew+0xe8>
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d01f      	beq.n	8010580 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010540:	2300      	movs	r3, #0
 8010542:	2200      	movs	r2, #0
 8010544:	2100      	movs	r1, #0
 8010546:	69f8      	ldr	r0, [r7, #28]
 8010548:	f000 fca8 	bl	8010e9c <xQueueGenericSend>
 801054c:	4603      	mov	r3, r0
 801054e:	2b01      	cmp	r3, #1
 8010550:	d016      	beq.n	8010580 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8010552:	69f8      	ldr	r0, [r7, #28]
 8010554:	f001 f970 	bl	8011838 <vQueueDelete>
            hSemaphore = NULL;
 8010558:	2300      	movs	r3, #0
 801055a:	61fb      	str	r3, [r7, #28]
 801055c:	e010      	b.n	8010580 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 801055e:	69bb      	ldr	r3, [r7, #24]
 8010560:	2b01      	cmp	r3, #1
 8010562:	d108      	bne.n	8010576 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	689b      	ldr	r3, [r3, #8]
 8010568:	461a      	mov	r2, r3
 801056a:	68b9      	ldr	r1, [r7, #8]
 801056c:	68f8      	ldr	r0, [r7, #12]
 801056e:	f000 fc2a 	bl	8010dc6 <xQueueCreateCountingSemaphoreStatic>
 8010572:	61f8      	str	r0, [r7, #28]
 8010574:	e004      	b.n	8010580 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010576:	68b9      	ldr	r1, [r7, #8]
 8010578:	68f8      	ldr	r0, [r7, #12]
 801057a:	f000 fc5b 	bl	8010e34 <xQueueCreateCountingSemaphore>
 801057e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8010580:	69fb      	ldr	r3, [r7, #28]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d00c      	beq.n	80105a0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d003      	beq.n	8010594 <osSemaphoreNew+0xfc>
          name = attr->name;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	617b      	str	r3, [r7, #20]
 8010592:	e001      	b.n	8010598 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8010594:	2300      	movs	r3, #0
 8010596:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8010598:	6979      	ldr	r1, [r7, #20]
 801059a:	69f8      	ldr	r0, [r7, #28]
 801059c:	f001 fa98 	bl	8011ad0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80105a0:	69fb      	ldr	r3, [r7, #28]
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3720      	adds	r7, #32
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}
	...

080105ac <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b086      	sub	sp, #24
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80105ba:	2300      	movs	r3, #0
 80105bc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80105be:	693b      	ldr	r3, [r7, #16]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d103      	bne.n	80105cc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80105c4:	f06f 0303 	mvn.w	r3, #3
 80105c8:	617b      	str	r3, [r7, #20]
 80105ca:	e039      	b.n	8010640 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80105cc:	f3ef 8305 	mrs	r3, IPSR
 80105d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80105d2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d022      	beq.n	801061e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d003      	beq.n	80105e6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80105de:	f06f 0303 	mvn.w	r3, #3
 80105e2:	617b      	str	r3, [r7, #20]
 80105e4:	e02c      	b.n	8010640 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80105e6:	2300      	movs	r3, #0
 80105e8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80105ea:	f107 0308 	add.w	r3, r7, #8
 80105ee:	461a      	mov	r2, r3
 80105f0:	2100      	movs	r1, #0
 80105f2:	6938      	ldr	r0, [r7, #16]
 80105f4:	f001 f864 	bl	80116c0 <xQueueReceiveFromISR>
 80105f8:	4603      	mov	r3, r0
 80105fa:	2b01      	cmp	r3, #1
 80105fc:	d003      	beq.n	8010606 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80105fe:	f06f 0302 	mvn.w	r3, #2
 8010602:	617b      	str	r3, [r7, #20]
 8010604:	e01c      	b.n	8010640 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d019      	beq.n	8010640 <osSemaphoreAcquire+0x94>
 801060c:	4b0f      	ldr	r3, [pc, #60]	; (801064c <osSemaphoreAcquire+0xa0>)
 801060e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010612:	601a      	str	r2, [r3, #0]
 8010614:	f3bf 8f4f 	dsb	sy
 8010618:	f3bf 8f6f 	isb	sy
 801061c:	e010      	b.n	8010640 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801061e:	6839      	ldr	r1, [r7, #0]
 8010620:	6938      	ldr	r0, [r7, #16]
 8010622:	f000 ff41 	bl	80114a8 <xQueueSemaphoreTake>
 8010626:	4603      	mov	r3, r0
 8010628:	2b01      	cmp	r3, #1
 801062a:	d009      	beq.n	8010640 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d003      	beq.n	801063a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8010632:	f06f 0301 	mvn.w	r3, #1
 8010636:	617b      	str	r3, [r7, #20]
 8010638:	e002      	b.n	8010640 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 801063a:	f06f 0302 	mvn.w	r3, #2
 801063e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8010640:	697b      	ldr	r3, [r7, #20]
}
 8010642:	4618      	mov	r0, r3
 8010644:	3718      	adds	r7, #24
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}
 801064a:	bf00      	nop
 801064c:	e000ed04 	.word	0xe000ed04

08010650 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010650:	b580      	push	{r7, lr}
 8010652:	b086      	sub	sp, #24
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801065c:	2300      	movs	r3, #0
 801065e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8010660:	693b      	ldr	r3, [r7, #16]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d103      	bne.n	801066e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8010666:	f06f 0303 	mvn.w	r3, #3
 801066a:	617b      	str	r3, [r7, #20]
 801066c:	e02c      	b.n	80106c8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801066e:	f3ef 8305 	mrs	r3, IPSR
 8010672:	60fb      	str	r3, [r7, #12]
  return(result);
 8010674:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010676:	2b00      	cmp	r3, #0
 8010678:	d01a      	beq.n	80106b0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801067a:	2300      	movs	r3, #0
 801067c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801067e:	f107 0308 	add.w	r3, r7, #8
 8010682:	4619      	mov	r1, r3
 8010684:	6938      	ldr	r0, [r7, #16]
 8010686:	f000 fda2 	bl	80111ce <xQueueGiveFromISR>
 801068a:	4603      	mov	r3, r0
 801068c:	2b01      	cmp	r3, #1
 801068e:	d003      	beq.n	8010698 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8010690:	f06f 0302 	mvn.w	r3, #2
 8010694:	617b      	str	r3, [r7, #20]
 8010696:	e017      	b.n	80106c8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d014      	beq.n	80106c8 <osSemaphoreRelease+0x78>
 801069e:	4b0d      	ldr	r3, [pc, #52]	; (80106d4 <osSemaphoreRelease+0x84>)
 80106a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106a4:	601a      	str	r2, [r3, #0]
 80106a6:	f3bf 8f4f 	dsb	sy
 80106aa:	f3bf 8f6f 	isb	sy
 80106ae:	e00b      	b.n	80106c8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80106b0:	2300      	movs	r3, #0
 80106b2:	2200      	movs	r2, #0
 80106b4:	2100      	movs	r1, #0
 80106b6:	6938      	ldr	r0, [r7, #16]
 80106b8:	f000 fbf0 	bl	8010e9c <xQueueGenericSend>
 80106bc:	4603      	mov	r3, r0
 80106be:	2b01      	cmp	r3, #1
 80106c0:	d002      	beq.n	80106c8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80106c2:	f06f 0302 	mvn.w	r3, #2
 80106c6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80106c8:	697b      	ldr	r3, [r7, #20]
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3718      	adds	r7, #24
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}
 80106d2:	bf00      	nop
 80106d4:	e000ed04 	.word	0xe000ed04

080106d8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80106d8:	b580      	push	{r7, lr}
 80106da:	b08a      	sub	sp, #40	; 0x28
 80106dc:	af02      	add	r7, sp, #8
 80106de:	60f8      	str	r0, [r7, #12]
 80106e0:	60b9      	str	r1, [r7, #8]
 80106e2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80106e4:	2300      	movs	r3, #0
 80106e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80106e8:	f3ef 8305 	mrs	r3, IPSR
 80106ec:	613b      	str	r3, [r7, #16]
  return(result);
 80106ee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d15f      	bne.n	80107b4 <osMessageQueueNew+0xdc>
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d05c      	beq.n	80107b4 <osMessageQueueNew+0xdc>
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d059      	beq.n	80107b4 <osMessageQueueNew+0xdc>
    mem = -1;
 8010700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010704:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d029      	beq.n	8010760 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	689b      	ldr	r3, [r3, #8]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d012      	beq.n	801073a <osMessageQueueNew+0x62>
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	68db      	ldr	r3, [r3, #12]
 8010718:	2b4f      	cmp	r3, #79	; 0x4f
 801071a:	d90e      	bls.n	801073a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010720:	2b00      	cmp	r3, #0
 8010722:	d00a      	beq.n	801073a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	695a      	ldr	r2, [r3, #20]
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	68b9      	ldr	r1, [r7, #8]
 801072c:	fb01 f303 	mul.w	r3, r1, r3
 8010730:	429a      	cmp	r2, r3
 8010732:	d302      	bcc.n	801073a <osMessageQueueNew+0x62>
        mem = 1;
 8010734:	2301      	movs	r3, #1
 8010736:	61bb      	str	r3, [r7, #24]
 8010738:	e014      	b.n	8010764 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	689b      	ldr	r3, [r3, #8]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d110      	bne.n	8010764 <osMessageQueueNew+0x8c>
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	68db      	ldr	r3, [r3, #12]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d10c      	bne.n	8010764 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801074e:	2b00      	cmp	r3, #0
 8010750:	d108      	bne.n	8010764 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	695b      	ldr	r3, [r3, #20]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d104      	bne.n	8010764 <osMessageQueueNew+0x8c>
          mem = 0;
 801075a:	2300      	movs	r3, #0
 801075c:	61bb      	str	r3, [r7, #24]
 801075e:	e001      	b.n	8010764 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8010760:	2300      	movs	r3, #0
 8010762:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010764:	69bb      	ldr	r3, [r7, #24]
 8010766:	2b01      	cmp	r3, #1
 8010768:	d10b      	bne.n	8010782 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	691a      	ldr	r2, [r3, #16]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	689b      	ldr	r3, [r3, #8]
 8010772:	2100      	movs	r1, #0
 8010774:	9100      	str	r1, [sp, #0]
 8010776:	68b9      	ldr	r1, [r7, #8]
 8010778:	68f8      	ldr	r0, [r7, #12]
 801077a:	f000 fa4f 	bl	8010c1c <xQueueGenericCreateStatic>
 801077e:	61f8      	str	r0, [r7, #28]
 8010780:	e008      	b.n	8010794 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8010782:	69bb      	ldr	r3, [r7, #24]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d105      	bne.n	8010794 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8010788:	2200      	movs	r2, #0
 801078a:	68b9      	ldr	r1, [r7, #8]
 801078c:	68f8      	ldr	r0, [r7, #12]
 801078e:	f000 fabd 	bl	8010d0c <xQueueGenericCreate>
 8010792:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010794:	69fb      	ldr	r3, [r7, #28]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d00c      	beq.n	80107b4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d003      	beq.n	80107a8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	617b      	str	r3, [r7, #20]
 80107a6:	e001      	b.n	80107ac <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80107a8:	2300      	movs	r3, #0
 80107aa:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80107ac:	6979      	ldr	r1, [r7, #20]
 80107ae:	69f8      	ldr	r0, [r7, #28]
 80107b0:	f001 f98e 	bl	8011ad0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80107b4:	69fb      	ldr	r3, [r7, #28]
}
 80107b6:	4618      	mov	r0, r3
 80107b8:	3720      	adds	r7, #32
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}
	...

080107c0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b088      	sub	sp, #32
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	60f8      	str	r0, [r7, #12]
 80107c8:	60b9      	str	r1, [r7, #8]
 80107ca:	603b      	str	r3, [r7, #0]
 80107cc:	4613      	mov	r3, r2
 80107ce:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80107d4:	2300      	movs	r3, #0
 80107d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80107d8:	f3ef 8305 	mrs	r3, IPSR
 80107dc:	617b      	str	r3, [r7, #20]
  return(result);
 80107de:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d028      	beq.n	8010836 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80107e4:	69bb      	ldr	r3, [r7, #24]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d005      	beq.n	80107f6 <osMessageQueuePut+0x36>
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d002      	beq.n	80107f6 <osMessageQueuePut+0x36>
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d003      	beq.n	80107fe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80107f6:	f06f 0303 	mvn.w	r3, #3
 80107fa:	61fb      	str	r3, [r7, #28]
 80107fc:	e038      	b.n	8010870 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80107fe:	2300      	movs	r3, #0
 8010800:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010802:	f107 0210 	add.w	r2, r7, #16
 8010806:	2300      	movs	r3, #0
 8010808:	68b9      	ldr	r1, [r7, #8]
 801080a:	69b8      	ldr	r0, [r7, #24]
 801080c:	f000 fc44 	bl	8011098 <xQueueGenericSendFromISR>
 8010810:	4603      	mov	r3, r0
 8010812:	2b01      	cmp	r3, #1
 8010814:	d003      	beq.n	801081e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8010816:	f06f 0302 	mvn.w	r3, #2
 801081a:	61fb      	str	r3, [r7, #28]
 801081c:	e028      	b.n	8010870 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801081e:	693b      	ldr	r3, [r7, #16]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d025      	beq.n	8010870 <osMessageQueuePut+0xb0>
 8010824:	4b15      	ldr	r3, [pc, #84]	; (801087c <osMessageQueuePut+0xbc>)
 8010826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801082a:	601a      	str	r2, [r3, #0]
 801082c:	f3bf 8f4f 	dsb	sy
 8010830:	f3bf 8f6f 	isb	sy
 8010834:	e01c      	b.n	8010870 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010836:	69bb      	ldr	r3, [r7, #24]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d002      	beq.n	8010842 <osMessageQueuePut+0x82>
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d103      	bne.n	801084a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8010842:	f06f 0303 	mvn.w	r3, #3
 8010846:	61fb      	str	r3, [r7, #28]
 8010848:	e012      	b.n	8010870 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801084a:	2300      	movs	r3, #0
 801084c:	683a      	ldr	r2, [r7, #0]
 801084e:	68b9      	ldr	r1, [r7, #8]
 8010850:	69b8      	ldr	r0, [r7, #24]
 8010852:	f000 fb23 	bl	8010e9c <xQueueGenericSend>
 8010856:	4603      	mov	r3, r0
 8010858:	2b01      	cmp	r3, #1
 801085a:	d009      	beq.n	8010870 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d003      	beq.n	801086a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8010862:	f06f 0301 	mvn.w	r3, #1
 8010866:	61fb      	str	r3, [r7, #28]
 8010868:	e002      	b.n	8010870 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801086a:	f06f 0302 	mvn.w	r3, #2
 801086e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010870:	69fb      	ldr	r3, [r7, #28]
}
 8010872:	4618      	mov	r0, r3
 8010874:	3720      	adds	r7, #32
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}
 801087a:	bf00      	nop
 801087c:	e000ed04 	.word	0xe000ed04

08010880 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010880:	b580      	push	{r7, lr}
 8010882:	b088      	sub	sp, #32
 8010884:	af00      	add	r7, sp, #0
 8010886:	60f8      	str	r0, [r7, #12]
 8010888:	60b9      	str	r1, [r7, #8]
 801088a:	607a      	str	r2, [r7, #4]
 801088c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010892:	2300      	movs	r3, #0
 8010894:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010896:	f3ef 8305 	mrs	r3, IPSR
 801089a:	617b      	str	r3, [r7, #20]
  return(result);
 801089c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d028      	beq.n	80108f4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80108a2:	69bb      	ldr	r3, [r7, #24]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d005      	beq.n	80108b4 <osMessageQueueGet+0x34>
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d002      	beq.n	80108b4 <osMessageQueueGet+0x34>
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d003      	beq.n	80108bc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80108b4:	f06f 0303 	mvn.w	r3, #3
 80108b8:	61fb      	str	r3, [r7, #28]
 80108ba:	e037      	b.n	801092c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80108bc:	2300      	movs	r3, #0
 80108be:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80108c0:	f107 0310 	add.w	r3, r7, #16
 80108c4:	461a      	mov	r2, r3
 80108c6:	68b9      	ldr	r1, [r7, #8]
 80108c8:	69b8      	ldr	r0, [r7, #24]
 80108ca:	f000 fef9 	bl	80116c0 <xQueueReceiveFromISR>
 80108ce:	4603      	mov	r3, r0
 80108d0:	2b01      	cmp	r3, #1
 80108d2:	d003      	beq.n	80108dc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80108d4:	f06f 0302 	mvn.w	r3, #2
 80108d8:	61fb      	str	r3, [r7, #28]
 80108da:	e027      	b.n	801092c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80108dc:	693b      	ldr	r3, [r7, #16]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d024      	beq.n	801092c <osMessageQueueGet+0xac>
 80108e2:	4b15      	ldr	r3, [pc, #84]	; (8010938 <osMessageQueueGet+0xb8>)
 80108e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108e8:	601a      	str	r2, [r3, #0]
 80108ea:	f3bf 8f4f 	dsb	sy
 80108ee:	f3bf 8f6f 	isb	sy
 80108f2:	e01b      	b.n	801092c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80108f4:	69bb      	ldr	r3, [r7, #24]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d002      	beq.n	8010900 <osMessageQueueGet+0x80>
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d103      	bne.n	8010908 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8010900:	f06f 0303 	mvn.w	r3, #3
 8010904:	61fb      	str	r3, [r7, #28]
 8010906:	e011      	b.n	801092c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010908:	683a      	ldr	r2, [r7, #0]
 801090a:	68b9      	ldr	r1, [r7, #8]
 801090c:	69b8      	ldr	r0, [r7, #24]
 801090e:	f000 fceb 	bl	80112e8 <xQueueReceive>
 8010912:	4603      	mov	r3, r0
 8010914:	2b01      	cmp	r3, #1
 8010916:	d009      	beq.n	801092c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d003      	beq.n	8010926 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801091e:	f06f 0301 	mvn.w	r3, #1
 8010922:	61fb      	str	r3, [r7, #28]
 8010924:	e002      	b.n	801092c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8010926:	f06f 0302 	mvn.w	r3, #2
 801092a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801092c:	69fb      	ldr	r3, [r7, #28]
}
 801092e:	4618      	mov	r0, r3
 8010930:	3720      	adds	r7, #32
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
 8010936:	bf00      	nop
 8010938:	e000ed04 	.word	0xe000ed04

0801093c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 801093c:	b580      	push	{r7, lr}
 801093e:	b086      	sub	sp, #24
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8010948:	693b      	ldr	r3, [r7, #16]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d102      	bne.n	8010954 <osMessageQueueGetCount+0x18>
    count = 0U;
 801094e:	2300      	movs	r3, #0
 8010950:	617b      	str	r3, [r7, #20]
 8010952:	e00e      	b.n	8010972 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010954:	f3ef 8305 	mrs	r3, IPSR
 8010958:	60fb      	str	r3, [r7, #12]
  return(result);
 801095a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801095c:	2b00      	cmp	r3, #0
 801095e:	d004      	beq.n	801096a <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8010960:	6938      	ldr	r0, [r7, #16]
 8010962:	f000 ff4b 	bl	80117fc <uxQueueMessagesWaitingFromISR>
 8010966:	6178      	str	r0, [r7, #20]
 8010968:	e003      	b.n	8010972 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 801096a:	6938      	ldr	r0, [r7, #16]
 801096c:	f000 ff28 	bl	80117c0 <uxQueueMessagesWaiting>
 8010970:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8010972:	697b      	ldr	r3, [r7, #20]
}
 8010974:	4618      	mov	r0, r3
 8010976:	3718      	adds	r7, #24
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}

0801097c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801097c:	b480      	push	{r7}
 801097e:	b085      	sub	sp, #20
 8010980:	af00      	add	r7, sp, #0
 8010982:	60f8      	str	r0, [r7, #12]
 8010984:	60b9      	str	r1, [r7, #8]
 8010986:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	4a07      	ldr	r2, [pc, #28]	; (80109a8 <vApplicationGetIdleTaskMemory+0x2c>)
 801098c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	4a06      	ldr	r2, [pc, #24]	; (80109ac <vApplicationGetIdleTaskMemory+0x30>)
 8010992:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	2280      	movs	r2, #128	; 0x80
 8010998:	601a      	str	r2, [r3, #0]
}
 801099a:	bf00      	nop
 801099c:	3714      	adds	r7, #20
 801099e:	46bd      	mov	sp, r7
 80109a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a4:	4770      	bx	lr
 80109a6:	bf00      	nop
 80109a8:	20007608 	.word	0x20007608
 80109ac:	200076c4 	.word	0x200076c4

080109b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80109b0:	b480      	push	{r7}
 80109b2:	b085      	sub	sp, #20
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	60f8      	str	r0, [r7, #12]
 80109b8:	60b9      	str	r1, [r7, #8]
 80109ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	4a07      	ldr	r2, [pc, #28]	; (80109dc <vApplicationGetTimerTaskMemory+0x2c>)
 80109c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	4a06      	ldr	r2, [pc, #24]	; (80109e0 <vApplicationGetTimerTaskMemory+0x30>)
 80109c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80109ce:	601a      	str	r2, [r3, #0]
}
 80109d0:	bf00      	nop
 80109d2:	3714      	adds	r7, #20
 80109d4:	46bd      	mov	sp, r7
 80109d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109da:	4770      	bx	lr
 80109dc:	200078c4 	.word	0x200078c4
 80109e0:	20007980 	.word	0x20007980

080109e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80109e4:	b480      	push	{r7}
 80109e6:	b083      	sub	sp, #12
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f103 0208 	add.w	r2, r3, #8
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80109fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	f103 0208 	add.w	r2, r3, #8
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f103 0208 	add.w	r2, r3, #8
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2200      	movs	r2, #0
 8010a16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010a18:	bf00      	nop
 8010a1a:	370c      	adds	r7, #12
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr

08010a24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010a24:	b480      	push	{r7}
 8010a26:	b083      	sub	sp, #12
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2200      	movs	r2, #0
 8010a30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010a32:	bf00      	nop
 8010a34:	370c      	adds	r7, #12
 8010a36:	46bd      	mov	sp, r7
 8010a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3c:	4770      	bx	lr

08010a3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010a3e:	b480      	push	{r7}
 8010a40:	b085      	sub	sp, #20
 8010a42:	af00      	add	r7, sp, #0
 8010a44:	6078      	str	r0, [r7, #4]
 8010a46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	685b      	ldr	r3, [r3, #4]
 8010a4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	68fa      	ldr	r2, [r7, #12]
 8010a52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	689a      	ldr	r2, [r3, #8]
 8010a58:	683b      	ldr	r3, [r7, #0]
 8010a5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	689b      	ldr	r3, [r3, #8]
 8010a60:	683a      	ldr	r2, [r7, #0]
 8010a62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	683a      	ldr	r2, [r7, #0]
 8010a68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010a6a:	683b      	ldr	r3, [r7, #0]
 8010a6c:	687a      	ldr	r2, [r7, #4]
 8010a6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	1c5a      	adds	r2, r3, #1
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	601a      	str	r2, [r3, #0]
}
 8010a7a:	bf00      	nop
 8010a7c:	3714      	adds	r7, #20
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a84:	4770      	bx	lr

08010a86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010a86:	b480      	push	{r7}
 8010a88:	b085      	sub	sp, #20
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	6078      	str	r0, [r7, #4]
 8010a8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010a96:	68bb      	ldr	r3, [r7, #8]
 8010a98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a9c:	d103      	bne.n	8010aa6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	691b      	ldr	r3, [r3, #16]
 8010aa2:	60fb      	str	r3, [r7, #12]
 8010aa4:	e00c      	b.n	8010ac0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	3308      	adds	r3, #8
 8010aaa:	60fb      	str	r3, [r7, #12]
 8010aac:	e002      	b.n	8010ab4 <vListInsert+0x2e>
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	685b      	ldr	r3, [r3, #4]
 8010ab2:	60fb      	str	r3, [r7, #12]
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	685b      	ldr	r3, [r3, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	68ba      	ldr	r2, [r7, #8]
 8010abc:	429a      	cmp	r2, r3
 8010abe:	d2f6      	bcs.n	8010aae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	685a      	ldr	r2, [r3, #4]
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010ac8:	683b      	ldr	r3, [r7, #0]
 8010aca:	685b      	ldr	r3, [r3, #4]
 8010acc:	683a      	ldr	r2, [r7, #0]
 8010ace:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	68fa      	ldr	r2, [r7, #12]
 8010ad4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	683a      	ldr	r2, [r7, #0]
 8010ada:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	687a      	ldr	r2, [r7, #4]
 8010ae0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	1c5a      	adds	r2, r3, #1
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	601a      	str	r2, [r3, #0]
}
 8010aec:	bf00      	nop
 8010aee:	3714      	adds	r7, #20
 8010af0:	46bd      	mov	sp, r7
 8010af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af6:	4770      	bx	lr

08010af8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010af8:	b480      	push	{r7}
 8010afa:	b085      	sub	sp, #20
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	691b      	ldr	r3, [r3, #16]
 8010b04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	685b      	ldr	r3, [r3, #4]
 8010b0a:	687a      	ldr	r2, [r7, #4]
 8010b0c:	6892      	ldr	r2, [r2, #8]
 8010b0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	689b      	ldr	r3, [r3, #8]
 8010b14:	687a      	ldr	r2, [r7, #4]
 8010b16:	6852      	ldr	r2, [r2, #4]
 8010b18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	685b      	ldr	r3, [r3, #4]
 8010b1e:	687a      	ldr	r2, [r7, #4]
 8010b20:	429a      	cmp	r2, r3
 8010b22:	d103      	bne.n	8010b2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	689a      	ldr	r2, [r3, #8]
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	1e5a      	subs	r2, r3, #1
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	681b      	ldr	r3, [r3, #0]
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	3714      	adds	r7, #20
 8010b44:	46bd      	mov	sp, r7
 8010b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4a:	4770      	bx	lr

08010b4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b084      	sub	sp, #16
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
 8010b54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d10a      	bne.n	8010b76 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b64:	f383 8811 	msr	BASEPRI, r3
 8010b68:	f3bf 8f6f 	isb	sy
 8010b6c:	f3bf 8f4f 	dsb	sy
 8010b70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010b72:	bf00      	nop
 8010b74:	e7fe      	b.n	8010b74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010b76:	f002 fd15 	bl	80135a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	681a      	ldr	r2, [r3, #0]
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b82:	68f9      	ldr	r1, [r7, #12]
 8010b84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010b86:	fb01 f303 	mul.w	r3, r1, r3
 8010b8a:	441a      	add	r2, r3
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	2200      	movs	r2, #0
 8010b94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	681a      	ldr	r2, [r3, #0]
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ba6:	3b01      	subs	r3, #1
 8010ba8:	68f9      	ldr	r1, [r7, #12]
 8010baa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010bac:	fb01 f303 	mul.w	r3, r1, r3
 8010bb0:	441a      	add	r2, r3
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	22ff      	movs	r2, #255	; 0xff
 8010bba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	22ff      	movs	r2, #255	; 0xff
 8010bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d114      	bne.n	8010bf6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	691b      	ldr	r3, [r3, #16]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d01a      	beq.n	8010c0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	3310      	adds	r3, #16
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f001 fcc5 	bl	8012568 <xTaskRemoveFromEventList>
 8010bde:	4603      	mov	r3, r0
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d012      	beq.n	8010c0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010be4:	4b0c      	ldr	r3, [pc, #48]	; (8010c18 <xQueueGenericReset+0xcc>)
 8010be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bea:	601a      	str	r2, [r3, #0]
 8010bec:	f3bf 8f4f 	dsb	sy
 8010bf0:	f3bf 8f6f 	isb	sy
 8010bf4:	e009      	b.n	8010c0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	3310      	adds	r3, #16
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f7ff fef2 	bl	80109e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	3324      	adds	r3, #36	; 0x24
 8010c04:	4618      	mov	r0, r3
 8010c06:	f7ff feed 	bl	80109e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010c0a:	f002 fcfb 	bl	8013604 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010c0e:	2301      	movs	r3, #1
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	3710      	adds	r7, #16
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}
 8010c18:	e000ed04 	.word	0xe000ed04

08010c1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b08e      	sub	sp, #56	; 0x38
 8010c20:	af02      	add	r7, sp, #8
 8010c22:	60f8      	str	r0, [r7, #12]
 8010c24:	60b9      	str	r1, [r7, #8]
 8010c26:	607a      	str	r2, [r7, #4]
 8010c28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d10a      	bne.n	8010c46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c34:	f383 8811 	msr	BASEPRI, r3
 8010c38:	f3bf 8f6f 	isb	sy
 8010c3c:	f3bf 8f4f 	dsb	sy
 8010c40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010c42:	bf00      	nop
 8010c44:	e7fe      	b.n	8010c44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d10a      	bne.n	8010c62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c50:	f383 8811 	msr	BASEPRI, r3
 8010c54:	f3bf 8f6f 	isb	sy
 8010c58:	f3bf 8f4f 	dsb	sy
 8010c5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010c5e:	bf00      	nop
 8010c60:	e7fe      	b.n	8010c60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d002      	beq.n	8010c6e <xQueueGenericCreateStatic+0x52>
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d001      	beq.n	8010c72 <xQueueGenericCreateStatic+0x56>
 8010c6e:	2301      	movs	r3, #1
 8010c70:	e000      	b.n	8010c74 <xQueueGenericCreateStatic+0x58>
 8010c72:	2300      	movs	r3, #0
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d10a      	bne.n	8010c8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c7c:	f383 8811 	msr	BASEPRI, r3
 8010c80:	f3bf 8f6f 	isb	sy
 8010c84:	f3bf 8f4f 	dsb	sy
 8010c88:	623b      	str	r3, [r7, #32]
}
 8010c8a:	bf00      	nop
 8010c8c:	e7fe      	b.n	8010c8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d102      	bne.n	8010c9a <xQueueGenericCreateStatic+0x7e>
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d101      	bne.n	8010c9e <xQueueGenericCreateStatic+0x82>
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	e000      	b.n	8010ca0 <xQueueGenericCreateStatic+0x84>
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d10a      	bne.n	8010cba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ca8:	f383 8811 	msr	BASEPRI, r3
 8010cac:	f3bf 8f6f 	isb	sy
 8010cb0:	f3bf 8f4f 	dsb	sy
 8010cb4:	61fb      	str	r3, [r7, #28]
}
 8010cb6:	bf00      	nop
 8010cb8:	e7fe      	b.n	8010cb8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010cba:	2350      	movs	r3, #80	; 0x50
 8010cbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010cbe:	697b      	ldr	r3, [r7, #20]
 8010cc0:	2b50      	cmp	r3, #80	; 0x50
 8010cc2:	d00a      	beq.n	8010cda <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc8:	f383 8811 	msr	BASEPRI, r3
 8010ccc:	f3bf 8f6f 	isb	sy
 8010cd0:	f3bf 8f4f 	dsb	sy
 8010cd4:	61bb      	str	r3, [r7, #24]
}
 8010cd6:	bf00      	nop
 8010cd8:	e7fe      	b.n	8010cd8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010cda:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010cdc:	683b      	ldr	r3, [r7, #0]
 8010cde:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d00d      	beq.n	8010d02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ce8:	2201      	movs	r2, #1
 8010cea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010cee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf4:	9300      	str	r3, [sp, #0]
 8010cf6:	4613      	mov	r3, r2
 8010cf8:	687a      	ldr	r2, [r7, #4]
 8010cfa:	68b9      	ldr	r1, [r7, #8]
 8010cfc:	68f8      	ldr	r0, [r7, #12]
 8010cfe:	f000 f83f 	bl	8010d80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010d04:	4618      	mov	r0, r3
 8010d06:	3730      	adds	r7, #48	; 0x30
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}

08010d0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b08a      	sub	sp, #40	; 0x28
 8010d10:	af02      	add	r7, sp, #8
 8010d12:	60f8      	str	r0, [r7, #12]
 8010d14:	60b9      	str	r1, [r7, #8]
 8010d16:	4613      	mov	r3, r2
 8010d18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d10a      	bne.n	8010d36 <xQueueGenericCreate+0x2a>
	__asm volatile
 8010d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d24:	f383 8811 	msr	BASEPRI, r3
 8010d28:	f3bf 8f6f 	isb	sy
 8010d2c:	f3bf 8f4f 	dsb	sy
 8010d30:	613b      	str	r3, [r7, #16]
}
 8010d32:	bf00      	nop
 8010d34:	e7fe      	b.n	8010d34 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	68ba      	ldr	r2, [r7, #8]
 8010d3a:	fb02 f303 	mul.w	r3, r2, r3
 8010d3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010d40:	69fb      	ldr	r3, [r7, #28]
 8010d42:	3350      	adds	r3, #80	; 0x50
 8010d44:	4618      	mov	r0, r3
 8010d46:	f002 fd4f 	bl	80137e8 <pvPortMalloc>
 8010d4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010d4c:	69bb      	ldr	r3, [r7, #24]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d011      	beq.n	8010d76 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010d52:	69bb      	ldr	r3, [r7, #24]
 8010d54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010d56:	697b      	ldr	r3, [r7, #20]
 8010d58:	3350      	adds	r3, #80	; 0x50
 8010d5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010d5c:	69bb      	ldr	r3, [r7, #24]
 8010d5e:	2200      	movs	r2, #0
 8010d60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010d64:	79fa      	ldrb	r2, [r7, #7]
 8010d66:	69bb      	ldr	r3, [r7, #24]
 8010d68:	9300      	str	r3, [sp, #0]
 8010d6a:	4613      	mov	r3, r2
 8010d6c:	697a      	ldr	r2, [r7, #20]
 8010d6e:	68b9      	ldr	r1, [r7, #8]
 8010d70:	68f8      	ldr	r0, [r7, #12]
 8010d72:	f000 f805 	bl	8010d80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010d76:	69bb      	ldr	r3, [r7, #24]
	}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	3720      	adds	r7, #32
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd80      	pop	{r7, pc}

08010d80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b084      	sub	sp, #16
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	60f8      	str	r0, [r7, #12]
 8010d88:	60b9      	str	r1, [r7, #8]
 8010d8a:	607a      	str	r2, [r7, #4]
 8010d8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010d8e:	68bb      	ldr	r3, [r7, #8]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d103      	bne.n	8010d9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010d94:	69bb      	ldr	r3, [r7, #24]
 8010d96:	69ba      	ldr	r2, [r7, #24]
 8010d98:	601a      	str	r2, [r3, #0]
 8010d9a:	e002      	b.n	8010da2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010d9c:	69bb      	ldr	r3, [r7, #24]
 8010d9e:	687a      	ldr	r2, [r7, #4]
 8010da0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010da2:	69bb      	ldr	r3, [r7, #24]
 8010da4:	68fa      	ldr	r2, [r7, #12]
 8010da6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010da8:	69bb      	ldr	r3, [r7, #24]
 8010daa:	68ba      	ldr	r2, [r7, #8]
 8010dac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010dae:	2101      	movs	r1, #1
 8010db0:	69b8      	ldr	r0, [r7, #24]
 8010db2:	f7ff fecb 	bl	8010b4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010db6:	69bb      	ldr	r3, [r7, #24]
 8010db8:	78fa      	ldrb	r2, [r7, #3]
 8010dba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010dbe:	bf00      	nop
 8010dc0:	3710      	adds	r7, #16
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}

08010dc6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010dc6:	b580      	push	{r7, lr}
 8010dc8:	b08a      	sub	sp, #40	; 0x28
 8010dca:	af02      	add	r7, sp, #8
 8010dcc:	60f8      	str	r0, [r7, #12]
 8010dce:	60b9      	str	r1, [r7, #8]
 8010dd0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d10a      	bne.n	8010dee <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8010dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ddc:	f383 8811 	msr	BASEPRI, r3
 8010de0:	f3bf 8f6f 	isb	sy
 8010de4:	f3bf 8f4f 	dsb	sy
 8010de8:	61bb      	str	r3, [r7, #24]
}
 8010dea:	bf00      	nop
 8010dec:	e7fe      	b.n	8010dec <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010dee:	68ba      	ldr	r2, [r7, #8]
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	429a      	cmp	r2, r3
 8010df4:	d90a      	bls.n	8010e0c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8010df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dfa:	f383 8811 	msr	BASEPRI, r3
 8010dfe:	f3bf 8f6f 	isb	sy
 8010e02:	f3bf 8f4f 	dsb	sy
 8010e06:	617b      	str	r3, [r7, #20]
}
 8010e08:	bf00      	nop
 8010e0a:	e7fe      	b.n	8010e0a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010e0c:	2302      	movs	r3, #2
 8010e0e:	9300      	str	r3, [sp, #0]
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2200      	movs	r2, #0
 8010e14:	2100      	movs	r1, #0
 8010e16:	68f8      	ldr	r0, [r7, #12]
 8010e18:	f7ff ff00 	bl	8010c1c <xQueueGenericCreateStatic>
 8010e1c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8010e1e:	69fb      	ldr	r3, [r7, #28]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d002      	beq.n	8010e2a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010e24:	69fb      	ldr	r3, [r7, #28]
 8010e26:	68ba      	ldr	r2, [r7, #8]
 8010e28:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010e2a:	69fb      	ldr	r3, [r7, #28]
	}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3720      	adds	r7, #32
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b086      	sub	sp, #24
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
 8010e3c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d10a      	bne.n	8010e5a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8010e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e48:	f383 8811 	msr	BASEPRI, r3
 8010e4c:	f3bf 8f6f 	isb	sy
 8010e50:	f3bf 8f4f 	dsb	sy
 8010e54:	613b      	str	r3, [r7, #16]
}
 8010e56:	bf00      	nop
 8010e58:	e7fe      	b.n	8010e58 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010e5a:	683a      	ldr	r2, [r7, #0]
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	d90a      	bls.n	8010e78 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8010e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e66:	f383 8811 	msr	BASEPRI, r3
 8010e6a:	f3bf 8f6f 	isb	sy
 8010e6e:	f3bf 8f4f 	dsb	sy
 8010e72:	60fb      	str	r3, [r7, #12]
}
 8010e74:	bf00      	nop
 8010e76:	e7fe      	b.n	8010e76 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010e78:	2202      	movs	r2, #2
 8010e7a:	2100      	movs	r1, #0
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f7ff ff45 	bl	8010d0c <xQueueGenericCreate>
 8010e82:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8010e84:	697b      	ldr	r3, [r7, #20]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d002      	beq.n	8010e90 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	683a      	ldr	r2, [r7, #0]
 8010e8e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010e90:	697b      	ldr	r3, [r7, #20]
	}
 8010e92:	4618      	mov	r0, r3
 8010e94:	3718      	adds	r7, #24
 8010e96:	46bd      	mov	sp, r7
 8010e98:	bd80      	pop	{r7, pc}
	...

08010e9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b08e      	sub	sp, #56	; 0x38
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	60f8      	str	r0, [r7, #12]
 8010ea4:	60b9      	str	r1, [r7, #8]
 8010ea6:	607a      	str	r2, [r7, #4]
 8010ea8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010eaa:	2300      	movs	r3, #0
 8010eac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d10a      	bne.n	8010ece <xQueueGenericSend+0x32>
	__asm volatile
 8010eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ebc:	f383 8811 	msr	BASEPRI, r3
 8010ec0:	f3bf 8f6f 	isb	sy
 8010ec4:	f3bf 8f4f 	dsb	sy
 8010ec8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010eca:	bf00      	nop
 8010ecc:	e7fe      	b.n	8010ecc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d103      	bne.n	8010edc <xQueueGenericSend+0x40>
 8010ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d101      	bne.n	8010ee0 <xQueueGenericSend+0x44>
 8010edc:	2301      	movs	r3, #1
 8010ede:	e000      	b.n	8010ee2 <xQueueGenericSend+0x46>
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d10a      	bne.n	8010efc <xQueueGenericSend+0x60>
	__asm volatile
 8010ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eea:	f383 8811 	msr	BASEPRI, r3
 8010eee:	f3bf 8f6f 	isb	sy
 8010ef2:	f3bf 8f4f 	dsb	sy
 8010ef6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010ef8:	bf00      	nop
 8010efa:	e7fe      	b.n	8010efa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	2b02      	cmp	r3, #2
 8010f00:	d103      	bne.n	8010f0a <xQueueGenericSend+0x6e>
 8010f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f06:	2b01      	cmp	r3, #1
 8010f08:	d101      	bne.n	8010f0e <xQueueGenericSend+0x72>
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	e000      	b.n	8010f10 <xQueueGenericSend+0x74>
 8010f0e:	2300      	movs	r3, #0
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d10a      	bne.n	8010f2a <xQueueGenericSend+0x8e>
	__asm volatile
 8010f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f18:	f383 8811 	msr	BASEPRI, r3
 8010f1c:	f3bf 8f6f 	isb	sy
 8010f20:	f3bf 8f4f 	dsb	sy
 8010f24:	623b      	str	r3, [r7, #32]
}
 8010f26:	bf00      	nop
 8010f28:	e7fe      	b.n	8010f28 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010f2a:	f001 fcdf 	bl	80128ec <xTaskGetSchedulerState>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d102      	bne.n	8010f3a <xQueueGenericSend+0x9e>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d101      	bne.n	8010f3e <xQueueGenericSend+0xa2>
 8010f3a:	2301      	movs	r3, #1
 8010f3c:	e000      	b.n	8010f40 <xQueueGenericSend+0xa4>
 8010f3e:	2300      	movs	r3, #0
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d10a      	bne.n	8010f5a <xQueueGenericSend+0xbe>
	__asm volatile
 8010f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f48:	f383 8811 	msr	BASEPRI, r3
 8010f4c:	f3bf 8f6f 	isb	sy
 8010f50:	f3bf 8f4f 	dsb	sy
 8010f54:	61fb      	str	r3, [r7, #28]
}
 8010f56:	bf00      	nop
 8010f58:	e7fe      	b.n	8010f58 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010f5a:	f002 fb23 	bl	80135a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f66:	429a      	cmp	r2, r3
 8010f68:	d302      	bcc.n	8010f70 <xQueueGenericSend+0xd4>
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	2b02      	cmp	r3, #2
 8010f6e:	d129      	bne.n	8010fc4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010f70:	683a      	ldr	r2, [r7, #0]
 8010f72:	68b9      	ldr	r1, [r7, #8]
 8010f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f76:	f000 fc9a 	bl	80118ae <prvCopyDataToQueue>
 8010f7a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d010      	beq.n	8010fa6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f86:	3324      	adds	r3, #36	; 0x24
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f001 faed 	bl	8012568 <xTaskRemoveFromEventList>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d013      	beq.n	8010fbc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010f94:	4b3f      	ldr	r3, [pc, #252]	; (8011094 <xQueueGenericSend+0x1f8>)
 8010f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f9a:	601a      	str	r2, [r3, #0]
 8010f9c:	f3bf 8f4f 	dsb	sy
 8010fa0:	f3bf 8f6f 	isb	sy
 8010fa4:	e00a      	b.n	8010fbc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d007      	beq.n	8010fbc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010fac:	4b39      	ldr	r3, [pc, #228]	; (8011094 <xQueueGenericSend+0x1f8>)
 8010fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fb2:	601a      	str	r2, [r3, #0]
 8010fb4:	f3bf 8f4f 	dsb	sy
 8010fb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010fbc:	f002 fb22 	bl	8013604 <vPortExitCritical>
				return pdPASS;
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	e063      	b.n	801108c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d103      	bne.n	8010fd2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010fca:	f002 fb1b 	bl	8013604 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010fce:	2300      	movs	r3, #0
 8010fd0:	e05c      	b.n	801108c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d106      	bne.n	8010fe6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010fd8:	f107 0314 	add.w	r3, r7, #20
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f001 fb27 	bl	8012630 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010fe6:	f002 fb0d 	bl	8013604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010fea:	f001 f893 	bl	8012114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010fee:	f002 fad9 	bl	80135a4 <vPortEnterCritical>
 8010ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ff8:	b25b      	sxtb	r3, r3
 8010ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010ffe:	d103      	bne.n	8011008 <xQueueGenericSend+0x16c>
 8011000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011002:	2200      	movs	r2, #0
 8011004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801100a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801100e:	b25b      	sxtb	r3, r3
 8011010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011014:	d103      	bne.n	801101e <xQueueGenericSend+0x182>
 8011016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011018:	2200      	movs	r2, #0
 801101a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801101e:	f002 faf1 	bl	8013604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011022:	1d3a      	adds	r2, r7, #4
 8011024:	f107 0314 	add.w	r3, r7, #20
 8011028:	4611      	mov	r1, r2
 801102a:	4618      	mov	r0, r3
 801102c:	f001 fb16 	bl	801265c <xTaskCheckForTimeOut>
 8011030:	4603      	mov	r3, r0
 8011032:	2b00      	cmp	r3, #0
 8011034:	d124      	bne.n	8011080 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011036:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011038:	f000 fd31 	bl	8011a9e <prvIsQueueFull>
 801103c:	4603      	mov	r3, r0
 801103e:	2b00      	cmp	r3, #0
 8011040:	d018      	beq.n	8011074 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011044:	3310      	adds	r3, #16
 8011046:	687a      	ldr	r2, [r7, #4]
 8011048:	4611      	mov	r1, r2
 801104a:	4618      	mov	r0, r3
 801104c:	f001 fa3c 	bl	80124c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011052:	f000 fcbc 	bl	80119ce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011056:	f001 f86b 	bl	8012130 <xTaskResumeAll>
 801105a:	4603      	mov	r3, r0
 801105c:	2b00      	cmp	r3, #0
 801105e:	f47f af7c 	bne.w	8010f5a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011062:	4b0c      	ldr	r3, [pc, #48]	; (8011094 <xQueueGenericSend+0x1f8>)
 8011064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011068:	601a      	str	r2, [r3, #0]
 801106a:	f3bf 8f4f 	dsb	sy
 801106e:	f3bf 8f6f 	isb	sy
 8011072:	e772      	b.n	8010f5a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011076:	f000 fcaa 	bl	80119ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801107a:	f001 f859 	bl	8012130 <xTaskResumeAll>
 801107e:	e76c      	b.n	8010f5a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011082:	f000 fca4 	bl	80119ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011086:	f001 f853 	bl	8012130 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801108a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801108c:	4618      	mov	r0, r3
 801108e:	3738      	adds	r7, #56	; 0x38
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}
 8011094:	e000ed04 	.word	0xe000ed04

08011098 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b090      	sub	sp, #64	; 0x40
 801109c:	af00      	add	r7, sp, #0
 801109e:	60f8      	str	r0, [r7, #12]
 80110a0:	60b9      	str	r1, [r7, #8]
 80110a2:	607a      	str	r2, [r7, #4]
 80110a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80110aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d10a      	bne.n	80110c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80110b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b4:	f383 8811 	msr	BASEPRI, r3
 80110b8:	f3bf 8f6f 	isb	sy
 80110bc:	f3bf 8f4f 	dsb	sy
 80110c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80110c2:	bf00      	nop
 80110c4:	e7fe      	b.n	80110c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80110c6:	68bb      	ldr	r3, [r7, #8]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d103      	bne.n	80110d4 <xQueueGenericSendFromISR+0x3c>
 80110cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d101      	bne.n	80110d8 <xQueueGenericSendFromISR+0x40>
 80110d4:	2301      	movs	r3, #1
 80110d6:	e000      	b.n	80110da <xQueueGenericSendFromISR+0x42>
 80110d8:	2300      	movs	r3, #0
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d10a      	bne.n	80110f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80110de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110e2:	f383 8811 	msr	BASEPRI, r3
 80110e6:	f3bf 8f6f 	isb	sy
 80110ea:	f3bf 8f4f 	dsb	sy
 80110ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80110f0:	bf00      	nop
 80110f2:	e7fe      	b.n	80110f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	2b02      	cmp	r3, #2
 80110f8:	d103      	bne.n	8011102 <xQueueGenericSendFromISR+0x6a>
 80110fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110fe:	2b01      	cmp	r3, #1
 8011100:	d101      	bne.n	8011106 <xQueueGenericSendFromISR+0x6e>
 8011102:	2301      	movs	r3, #1
 8011104:	e000      	b.n	8011108 <xQueueGenericSendFromISR+0x70>
 8011106:	2300      	movs	r3, #0
 8011108:	2b00      	cmp	r3, #0
 801110a:	d10a      	bne.n	8011122 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801110c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011110:	f383 8811 	msr	BASEPRI, r3
 8011114:	f3bf 8f6f 	isb	sy
 8011118:	f3bf 8f4f 	dsb	sy
 801111c:	623b      	str	r3, [r7, #32]
}
 801111e:	bf00      	nop
 8011120:	e7fe      	b.n	8011120 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011122:	f002 fb21 	bl	8013768 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011126:	f3ef 8211 	mrs	r2, BASEPRI
 801112a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801112e:	f383 8811 	msr	BASEPRI, r3
 8011132:	f3bf 8f6f 	isb	sy
 8011136:	f3bf 8f4f 	dsb	sy
 801113a:	61fa      	str	r2, [r7, #28]
 801113c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801113e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011140:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801114a:	429a      	cmp	r2, r3
 801114c:	d302      	bcc.n	8011154 <xQueueGenericSendFromISR+0xbc>
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	2b02      	cmp	r3, #2
 8011152:	d12f      	bne.n	80111b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801115a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801115e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011162:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011164:	683a      	ldr	r2, [r7, #0]
 8011166:	68b9      	ldr	r1, [r7, #8]
 8011168:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801116a:	f000 fba0 	bl	80118ae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801116e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8011172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011176:	d112      	bne.n	801119e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801117a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801117c:	2b00      	cmp	r3, #0
 801117e:	d016      	beq.n	80111ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011182:	3324      	adds	r3, #36	; 0x24
 8011184:	4618      	mov	r0, r3
 8011186:	f001 f9ef 	bl	8012568 <xTaskRemoveFromEventList>
 801118a:	4603      	mov	r3, r0
 801118c:	2b00      	cmp	r3, #0
 801118e:	d00e      	beq.n	80111ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d00b      	beq.n	80111ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	2201      	movs	r2, #1
 801119a:	601a      	str	r2, [r3, #0]
 801119c:	e007      	b.n	80111ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801119e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80111a2:	3301      	adds	r3, #1
 80111a4:	b2db      	uxtb	r3, r3
 80111a6:	b25a      	sxtb	r2, r3
 80111a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80111ae:	2301      	movs	r3, #1
 80111b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80111b2:	e001      	b.n	80111b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80111b4:	2300      	movs	r3, #0
 80111b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80111bc:	697b      	ldr	r3, [r7, #20]
 80111be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80111c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80111c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	3740      	adds	r7, #64	; 0x40
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}

080111ce <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80111ce:	b580      	push	{r7, lr}
 80111d0:	b08e      	sub	sp, #56	; 0x38
 80111d2:	af00      	add	r7, sp, #0
 80111d4:	6078      	str	r0, [r7, #4]
 80111d6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80111dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d10a      	bne.n	80111f8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80111e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111e6:	f383 8811 	msr	BASEPRI, r3
 80111ea:	f3bf 8f6f 	isb	sy
 80111ee:	f3bf 8f4f 	dsb	sy
 80111f2:	623b      	str	r3, [r7, #32]
}
 80111f4:	bf00      	nop
 80111f6:	e7fe      	b.n	80111f6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80111f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d00a      	beq.n	8011216 <xQueueGiveFromISR+0x48>
	__asm volatile
 8011200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011204:	f383 8811 	msr	BASEPRI, r3
 8011208:	f3bf 8f6f 	isb	sy
 801120c:	f3bf 8f4f 	dsb	sy
 8011210:	61fb      	str	r3, [r7, #28]
}
 8011212:	bf00      	nop
 8011214:	e7fe      	b.n	8011214 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d103      	bne.n	8011226 <xQueueGiveFromISR+0x58>
 801121e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011220:	689b      	ldr	r3, [r3, #8]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d101      	bne.n	801122a <xQueueGiveFromISR+0x5c>
 8011226:	2301      	movs	r3, #1
 8011228:	e000      	b.n	801122c <xQueueGiveFromISR+0x5e>
 801122a:	2300      	movs	r3, #0
 801122c:	2b00      	cmp	r3, #0
 801122e:	d10a      	bne.n	8011246 <xQueueGiveFromISR+0x78>
	__asm volatile
 8011230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011234:	f383 8811 	msr	BASEPRI, r3
 8011238:	f3bf 8f6f 	isb	sy
 801123c:	f3bf 8f4f 	dsb	sy
 8011240:	61bb      	str	r3, [r7, #24]
}
 8011242:	bf00      	nop
 8011244:	e7fe      	b.n	8011244 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011246:	f002 fa8f 	bl	8013768 <vPortValidateInterruptPriority>
	__asm volatile
 801124a:	f3ef 8211 	mrs	r2, BASEPRI
 801124e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011252:	f383 8811 	msr	BASEPRI, r3
 8011256:	f3bf 8f6f 	isb	sy
 801125a:	f3bf 8f4f 	dsb	sy
 801125e:	617a      	str	r2, [r7, #20]
 8011260:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011262:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011264:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801126a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801126c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801126e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011272:	429a      	cmp	r2, r3
 8011274:	d22b      	bcs.n	80112ce <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801127c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011282:	1c5a      	adds	r2, r3, #1
 8011284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011286:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011288:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801128c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011290:	d112      	bne.n	80112b8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011296:	2b00      	cmp	r3, #0
 8011298:	d016      	beq.n	80112c8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801129a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801129c:	3324      	adds	r3, #36	; 0x24
 801129e:	4618      	mov	r0, r3
 80112a0:	f001 f962 	bl	8012568 <xTaskRemoveFromEventList>
 80112a4:	4603      	mov	r3, r0
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d00e      	beq.n	80112c8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d00b      	beq.n	80112c8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	2201      	movs	r2, #1
 80112b4:	601a      	str	r2, [r3, #0]
 80112b6:	e007      	b.n	80112c8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80112b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112bc:	3301      	adds	r3, #1
 80112be:	b2db      	uxtb	r3, r3
 80112c0:	b25a      	sxtb	r2, r3
 80112c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80112c8:	2301      	movs	r3, #1
 80112ca:	637b      	str	r3, [r7, #52]	; 0x34
 80112cc:	e001      	b.n	80112d2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80112ce:	2300      	movs	r3, #0
 80112d0:	637b      	str	r3, [r7, #52]	; 0x34
 80112d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	f383 8811 	msr	BASEPRI, r3
}
 80112dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80112de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	3738      	adds	r7, #56	; 0x38
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}

080112e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b08c      	sub	sp, #48	; 0x30
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	60f8      	str	r0, [r7, #12]
 80112f0:	60b9      	str	r1, [r7, #8]
 80112f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80112f4:	2300      	movs	r3, #0
 80112f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80112fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d10a      	bne.n	8011318 <xQueueReceive+0x30>
	__asm volatile
 8011302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011306:	f383 8811 	msr	BASEPRI, r3
 801130a:	f3bf 8f6f 	isb	sy
 801130e:	f3bf 8f4f 	dsb	sy
 8011312:	623b      	str	r3, [r7, #32]
}
 8011314:	bf00      	nop
 8011316:	e7fe      	b.n	8011316 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011318:	68bb      	ldr	r3, [r7, #8]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d103      	bne.n	8011326 <xQueueReceive+0x3e>
 801131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011322:	2b00      	cmp	r3, #0
 8011324:	d101      	bne.n	801132a <xQueueReceive+0x42>
 8011326:	2301      	movs	r3, #1
 8011328:	e000      	b.n	801132c <xQueueReceive+0x44>
 801132a:	2300      	movs	r3, #0
 801132c:	2b00      	cmp	r3, #0
 801132e:	d10a      	bne.n	8011346 <xQueueReceive+0x5e>
	__asm volatile
 8011330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011334:	f383 8811 	msr	BASEPRI, r3
 8011338:	f3bf 8f6f 	isb	sy
 801133c:	f3bf 8f4f 	dsb	sy
 8011340:	61fb      	str	r3, [r7, #28]
}
 8011342:	bf00      	nop
 8011344:	e7fe      	b.n	8011344 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011346:	f001 fad1 	bl	80128ec <xTaskGetSchedulerState>
 801134a:	4603      	mov	r3, r0
 801134c:	2b00      	cmp	r3, #0
 801134e:	d102      	bne.n	8011356 <xQueueReceive+0x6e>
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d101      	bne.n	801135a <xQueueReceive+0x72>
 8011356:	2301      	movs	r3, #1
 8011358:	e000      	b.n	801135c <xQueueReceive+0x74>
 801135a:	2300      	movs	r3, #0
 801135c:	2b00      	cmp	r3, #0
 801135e:	d10a      	bne.n	8011376 <xQueueReceive+0x8e>
	__asm volatile
 8011360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011364:	f383 8811 	msr	BASEPRI, r3
 8011368:	f3bf 8f6f 	isb	sy
 801136c:	f3bf 8f4f 	dsb	sy
 8011370:	61bb      	str	r3, [r7, #24]
}
 8011372:	bf00      	nop
 8011374:	e7fe      	b.n	8011374 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011376:	f002 f915 	bl	80135a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801137a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801137c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801137e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011382:	2b00      	cmp	r3, #0
 8011384:	d01f      	beq.n	80113c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011386:	68b9      	ldr	r1, [r7, #8]
 8011388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801138a:	f000 fafa 	bl	8011982 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011390:	1e5a      	subs	r2, r3, #1
 8011392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011394:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011398:	691b      	ldr	r3, [r3, #16]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d00f      	beq.n	80113be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801139e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113a0:	3310      	adds	r3, #16
 80113a2:	4618      	mov	r0, r3
 80113a4:	f001 f8e0 	bl	8012568 <xTaskRemoveFromEventList>
 80113a8:	4603      	mov	r3, r0
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d007      	beq.n	80113be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80113ae:	4b3d      	ldr	r3, [pc, #244]	; (80114a4 <xQueueReceive+0x1bc>)
 80113b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113b4:	601a      	str	r2, [r3, #0]
 80113b6:	f3bf 8f4f 	dsb	sy
 80113ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80113be:	f002 f921 	bl	8013604 <vPortExitCritical>
				return pdPASS;
 80113c2:	2301      	movs	r3, #1
 80113c4:	e069      	b.n	801149a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d103      	bne.n	80113d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80113cc:	f002 f91a 	bl	8013604 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80113d0:	2300      	movs	r3, #0
 80113d2:	e062      	b.n	801149a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80113d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d106      	bne.n	80113e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80113da:	f107 0310 	add.w	r3, r7, #16
 80113de:	4618      	mov	r0, r3
 80113e0:	f001 f926 	bl	8012630 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80113e4:	2301      	movs	r3, #1
 80113e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80113e8:	f002 f90c 	bl	8013604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80113ec:	f000 fe92 	bl	8012114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80113f0:	f002 f8d8 	bl	80135a4 <vPortEnterCritical>
 80113f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80113fa:	b25b      	sxtb	r3, r3
 80113fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011400:	d103      	bne.n	801140a <xQueueReceive+0x122>
 8011402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011404:	2200      	movs	r2, #0
 8011406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801140a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011410:	b25b      	sxtb	r3, r3
 8011412:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011416:	d103      	bne.n	8011420 <xQueueReceive+0x138>
 8011418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801141a:	2200      	movs	r2, #0
 801141c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011420:	f002 f8f0 	bl	8013604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011424:	1d3a      	adds	r2, r7, #4
 8011426:	f107 0310 	add.w	r3, r7, #16
 801142a:	4611      	mov	r1, r2
 801142c:	4618      	mov	r0, r3
 801142e:	f001 f915 	bl	801265c <xTaskCheckForTimeOut>
 8011432:	4603      	mov	r3, r0
 8011434:	2b00      	cmp	r3, #0
 8011436:	d123      	bne.n	8011480 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801143a:	f000 fb1a 	bl	8011a72 <prvIsQueueEmpty>
 801143e:	4603      	mov	r3, r0
 8011440:	2b00      	cmp	r3, #0
 8011442:	d017      	beq.n	8011474 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011446:	3324      	adds	r3, #36	; 0x24
 8011448:	687a      	ldr	r2, [r7, #4]
 801144a:	4611      	mov	r1, r2
 801144c:	4618      	mov	r0, r3
 801144e:	f001 f83b 	bl	80124c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011454:	f000 fabb 	bl	80119ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011458:	f000 fe6a 	bl	8012130 <xTaskResumeAll>
 801145c:	4603      	mov	r3, r0
 801145e:	2b00      	cmp	r3, #0
 8011460:	d189      	bne.n	8011376 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8011462:	4b10      	ldr	r3, [pc, #64]	; (80114a4 <xQueueReceive+0x1bc>)
 8011464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011468:	601a      	str	r2, [r3, #0]
 801146a:	f3bf 8f4f 	dsb	sy
 801146e:	f3bf 8f6f 	isb	sy
 8011472:	e780      	b.n	8011376 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011476:	f000 faaa 	bl	80119ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801147a:	f000 fe59 	bl	8012130 <xTaskResumeAll>
 801147e:	e77a      	b.n	8011376 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011482:	f000 faa4 	bl	80119ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011486:	f000 fe53 	bl	8012130 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801148a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801148c:	f000 faf1 	bl	8011a72 <prvIsQueueEmpty>
 8011490:	4603      	mov	r3, r0
 8011492:	2b00      	cmp	r3, #0
 8011494:	f43f af6f 	beq.w	8011376 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011498:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801149a:	4618      	mov	r0, r3
 801149c:	3730      	adds	r7, #48	; 0x30
 801149e:	46bd      	mov	sp, r7
 80114a0:	bd80      	pop	{r7, pc}
 80114a2:	bf00      	nop
 80114a4:	e000ed04 	.word	0xe000ed04

080114a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b08e      	sub	sp, #56	; 0x38
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
 80114b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80114b2:	2300      	movs	r3, #0
 80114b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80114ba:	2300      	movs	r3, #0
 80114bc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80114be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d10a      	bne.n	80114da <xQueueSemaphoreTake+0x32>
	__asm volatile
 80114c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114c8:	f383 8811 	msr	BASEPRI, r3
 80114cc:	f3bf 8f6f 	isb	sy
 80114d0:	f3bf 8f4f 	dsb	sy
 80114d4:	623b      	str	r3, [r7, #32]
}
 80114d6:	bf00      	nop
 80114d8:	e7fe      	b.n	80114d8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80114da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d00a      	beq.n	80114f8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80114e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114e6:	f383 8811 	msr	BASEPRI, r3
 80114ea:	f3bf 8f6f 	isb	sy
 80114ee:	f3bf 8f4f 	dsb	sy
 80114f2:	61fb      	str	r3, [r7, #28]
}
 80114f4:	bf00      	nop
 80114f6:	e7fe      	b.n	80114f6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80114f8:	f001 f9f8 	bl	80128ec <xTaskGetSchedulerState>
 80114fc:	4603      	mov	r3, r0
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d102      	bne.n	8011508 <xQueueSemaphoreTake+0x60>
 8011502:	683b      	ldr	r3, [r7, #0]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d101      	bne.n	801150c <xQueueSemaphoreTake+0x64>
 8011508:	2301      	movs	r3, #1
 801150a:	e000      	b.n	801150e <xQueueSemaphoreTake+0x66>
 801150c:	2300      	movs	r3, #0
 801150e:	2b00      	cmp	r3, #0
 8011510:	d10a      	bne.n	8011528 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8011512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011516:	f383 8811 	msr	BASEPRI, r3
 801151a:	f3bf 8f6f 	isb	sy
 801151e:	f3bf 8f4f 	dsb	sy
 8011522:	61bb      	str	r3, [r7, #24]
}
 8011524:	bf00      	nop
 8011526:	e7fe      	b.n	8011526 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011528:	f002 f83c 	bl	80135a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801152c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801152e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011530:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011534:	2b00      	cmp	r3, #0
 8011536:	d024      	beq.n	8011582 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801153a:	1e5a      	subs	r2, r3, #1
 801153c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801153e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d104      	bne.n	8011552 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011548:	f001 fb46 	bl	8012bd8 <pvTaskIncrementMutexHeldCount>
 801154c:	4602      	mov	r2, r0
 801154e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011550:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011554:	691b      	ldr	r3, [r3, #16]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d00f      	beq.n	801157a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801155a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801155c:	3310      	adds	r3, #16
 801155e:	4618      	mov	r0, r3
 8011560:	f001 f802 	bl	8012568 <xTaskRemoveFromEventList>
 8011564:	4603      	mov	r3, r0
 8011566:	2b00      	cmp	r3, #0
 8011568:	d007      	beq.n	801157a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801156a:	4b54      	ldr	r3, [pc, #336]	; (80116bc <xQueueSemaphoreTake+0x214>)
 801156c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011570:	601a      	str	r2, [r3, #0]
 8011572:	f3bf 8f4f 	dsb	sy
 8011576:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801157a:	f002 f843 	bl	8013604 <vPortExitCritical>
				return pdPASS;
 801157e:	2301      	movs	r3, #1
 8011580:	e097      	b.n	80116b2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011582:	683b      	ldr	r3, [r7, #0]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d111      	bne.n	80115ac <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801158a:	2b00      	cmp	r3, #0
 801158c:	d00a      	beq.n	80115a4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801158e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011592:	f383 8811 	msr	BASEPRI, r3
 8011596:	f3bf 8f6f 	isb	sy
 801159a:	f3bf 8f4f 	dsb	sy
 801159e:	617b      	str	r3, [r7, #20]
}
 80115a0:	bf00      	nop
 80115a2:	e7fe      	b.n	80115a2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80115a4:	f002 f82e 	bl	8013604 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80115a8:	2300      	movs	r3, #0
 80115aa:	e082      	b.n	80116b2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80115ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d106      	bne.n	80115c0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80115b2:	f107 030c 	add.w	r3, r7, #12
 80115b6:	4618      	mov	r0, r3
 80115b8:	f001 f83a 	bl	8012630 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80115bc:	2301      	movs	r3, #1
 80115be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80115c0:	f002 f820 	bl	8013604 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80115c4:	f000 fda6 	bl	8012114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80115c8:	f001 ffec 	bl	80135a4 <vPortEnterCritical>
 80115cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80115d2:	b25b      	sxtb	r3, r3
 80115d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80115d8:	d103      	bne.n	80115e2 <xQueueSemaphoreTake+0x13a>
 80115da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115dc:	2200      	movs	r2, #0
 80115de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80115e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80115e8:	b25b      	sxtb	r3, r3
 80115ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80115ee:	d103      	bne.n	80115f8 <xQueueSemaphoreTake+0x150>
 80115f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115f2:	2200      	movs	r2, #0
 80115f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80115f8:	f002 f804 	bl	8013604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80115fc:	463a      	mov	r2, r7
 80115fe:	f107 030c 	add.w	r3, r7, #12
 8011602:	4611      	mov	r1, r2
 8011604:	4618      	mov	r0, r3
 8011606:	f001 f829 	bl	801265c <xTaskCheckForTimeOut>
 801160a:	4603      	mov	r3, r0
 801160c:	2b00      	cmp	r3, #0
 801160e:	d132      	bne.n	8011676 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011610:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011612:	f000 fa2e 	bl	8011a72 <prvIsQueueEmpty>
 8011616:	4603      	mov	r3, r0
 8011618:	2b00      	cmp	r3, #0
 801161a:	d026      	beq.n	801166a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801161c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d109      	bne.n	8011638 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8011624:	f001 ffbe 	bl	80135a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801162a:	689b      	ldr	r3, [r3, #8]
 801162c:	4618      	mov	r0, r3
 801162e:	f001 f97b 	bl	8012928 <xTaskPriorityInherit>
 8011632:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011634:	f001 ffe6 	bl	8013604 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801163a:	3324      	adds	r3, #36	; 0x24
 801163c:	683a      	ldr	r2, [r7, #0]
 801163e:	4611      	mov	r1, r2
 8011640:	4618      	mov	r0, r3
 8011642:	f000 ff41 	bl	80124c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011646:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011648:	f000 f9c1 	bl	80119ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801164c:	f000 fd70 	bl	8012130 <xTaskResumeAll>
 8011650:	4603      	mov	r3, r0
 8011652:	2b00      	cmp	r3, #0
 8011654:	f47f af68 	bne.w	8011528 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8011658:	4b18      	ldr	r3, [pc, #96]	; (80116bc <xQueueSemaphoreTake+0x214>)
 801165a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801165e:	601a      	str	r2, [r3, #0]
 8011660:	f3bf 8f4f 	dsb	sy
 8011664:	f3bf 8f6f 	isb	sy
 8011668:	e75e      	b.n	8011528 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801166a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801166c:	f000 f9af 	bl	80119ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011670:	f000 fd5e 	bl	8012130 <xTaskResumeAll>
 8011674:	e758      	b.n	8011528 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011676:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011678:	f000 f9a9 	bl	80119ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801167c:	f000 fd58 	bl	8012130 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011680:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011682:	f000 f9f6 	bl	8011a72 <prvIsQueueEmpty>
 8011686:	4603      	mov	r3, r0
 8011688:	2b00      	cmp	r3, #0
 801168a:	f43f af4d 	beq.w	8011528 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801168e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011690:	2b00      	cmp	r3, #0
 8011692:	d00d      	beq.n	80116b0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8011694:	f001 ff86 	bl	80135a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011698:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801169a:	f000 f8f0 	bl	801187e <prvGetDisinheritPriorityAfterTimeout>
 801169e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80116a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116a2:	689b      	ldr	r3, [r3, #8]
 80116a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80116a6:	4618      	mov	r0, r3
 80116a8:	f001 fa14 	bl	8012ad4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80116ac:	f001 ffaa 	bl	8013604 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80116b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80116b2:	4618      	mov	r0, r3
 80116b4:	3738      	adds	r7, #56	; 0x38
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}
 80116ba:	bf00      	nop
 80116bc:	e000ed04 	.word	0xe000ed04

080116c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b08e      	sub	sp, #56	; 0x38
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	60f8      	str	r0, [r7, #12]
 80116c8:	60b9      	str	r1, [r7, #8]
 80116ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80116d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d10a      	bne.n	80116ec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80116d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116da:	f383 8811 	msr	BASEPRI, r3
 80116de:	f3bf 8f6f 	isb	sy
 80116e2:	f3bf 8f4f 	dsb	sy
 80116e6:	623b      	str	r3, [r7, #32]
}
 80116e8:	bf00      	nop
 80116ea:	e7fe      	b.n	80116ea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80116ec:	68bb      	ldr	r3, [r7, #8]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d103      	bne.n	80116fa <xQueueReceiveFromISR+0x3a>
 80116f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d101      	bne.n	80116fe <xQueueReceiveFromISR+0x3e>
 80116fa:	2301      	movs	r3, #1
 80116fc:	e000      	b.n	8011700 <xQueueReceiveFromISR+0x40>
 80116fe:	2300      	movs	r3, #0
 8011700:	2b00      	cmp	r3, #0
 8011702:	d10a      	bne.n	801171a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8011704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011708:	f383 8811 	msr	BASEPRI, r3
 801170c:	f3bf 8f6f 	isb	sy
 8011710:	f3bf 8f4f 	dsb	sy
 8011714:	61fb      	str	r3, [r7, #28]
}
 8011716:	bf00      	nop
 8011718:	e7fe      	b.n	8011718 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801171a:	f002 f825 	bl	8013768 <vPortValidateInterruptPriority>
	__asm volatile
 801171e:	f3ef 8211 	mrs	r2, BASEPRI
 8011722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011726:	f383 8811 	msr	BASEPRI, r3
 801172a:	f3bf 8f6f 	isb	sy
 801172e:	f3bf 8f4f 	dsb	sy
 8011732:	61ba      	str	r2, [r7, #24]
 8011734:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011736:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011738:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801173a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801173c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801173e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011742:	2b00      	cmp	r3, #0
 8011744:	d02f      	beq.n	80117a6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011748:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801174c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011750:	68b9      	ldr	r1, [r7, #8]
 8011752:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011754:	f000 f915 	bl	8011982 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801175a:	1e5a      	subs	r2, r3, #1
 801175c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801175e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011760:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011768:	d112      	bne.n	8011790 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801176a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801176c:	691b      	ldr	r3, [r3, #16]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d016      	beq.n	80117a0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011774:	3310      	adds	r3, #16
 8011776:	4618      	mov	r0, r3
 8011778:	f000 fef6 	bl	8012568 <xTaskRemoveFromEventList>
 801177c:	4603      	mov	r3, r0
 801177e:	2b00      	cmp	r3, #0
 8011780:	d00e      	beq.n	80117a0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d00b      	beq.n	80117a0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2201      	movs	r2, #1
 801178c:	601a      	str	r2, [r3, #0]
 801178e:	e007      	b.n	80117a0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011794:	3301      	adds	r3, #1
 8011796:	b2db      	uxtb	r3, r3
 8011798:	b25a      	sxtb	r2, r3
 801179a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801179c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80117a0:	2301      	movs	r3, #1
 80117a2:	637b      	str	r3, [r7, #52]	; 0x34
 80117a4:	e001      	b.n	80117aa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80117a6:	2300      	movs	r3, #0
 80117a8:	637b      	str	r3, [r7, #52]	; 0x34
 80117aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 80117ae:	693b      	ldr	r3, [r7, #16]
 80117b0:	f383 8811 	msr	BASEPRI, r3
}
 80117b4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80117b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80117b8:	4618      	mov	r0, r3
 80117ba:	3738      	adds	r7, #56	; 0x38
 80117bc:	46bd      	mov	sp, r7
 80117be:	bd80      	pop	{r7, pc}

080117c0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b084      	sub	sp, #16
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d10a      	bne.n	80117e4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80117ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117d2:	f383 8811 	msr	BASEPRI, r3
 80117d6:	f3bf 8f6f 	isb	sy
 80117da:	f3bf 8f4f 	dsb	sy
 80117de:	60bb      	str	r3, [r7, #8]
}
 80117e0:	bf00      	nop
 80117e2:	e7fe      	b.n	80117e2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80117e4:	f001 fede 	bl	80135a4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117ec:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80117ee:	f001 ff09 	bl	8013604 <vPortExitCritical>

	return uxReturn;
 80117f2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80117f4:	4618      	mov	r0, r3
 80117f6:	3710      	adds	r7, #16
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}

080117fc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80117fc:	b480      	push	{r7}
 80117fe:	b087      	sub	sp, #28
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8011808:	697b      	ldr	r3, [r7, #20]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d10a      	bne.n	8011824 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 801180e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011812:	f383 8811 	msr	BASEPRI, r3
 8011816:	f3bf 8f6f 	isb	sy
 801181a:	f3bf 8f4f 	dsb	sy
 801181e:	60fb      	str	r3, [r7, #12]
}
 8011820:	bf00      	nop
 8011822:	e7fe      	b.n	8011822 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8011824:	697b      	ldr	r3, [r7, #20]
 8011826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011828:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801182a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801182c:	4618      	mov	r0, r3
 801182e:	371c      	adds	r7, #28
 8011830:	46bd      	mov	sp, r7
 8011832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011836:	4770      	bx	lr

08011838 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b084      	sub	sp, #16
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d10a      	bne.n	8011860 <vQueueDelete+0x28>
	__asm volatile
 801184a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801184e:	f383 8811 	msr	BASEPRI, r3
 8011852:	f3bf 8f6f 	isb	sy
 8011856:	f3bf 8f4f 	dsb	sy
 801185a:	60bb      	str	r3, [r7, #8]
}
 801185c:	bf00      	nop
 801185e:	e7fe      	b.n	801185e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011860:	68f8      	ldr	r0, [r7, #12]
 8011862:	f000 f95f 	bl	8011b24 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801186c:	2b00      	cmp	r3, #0
 801186e:	d102      	bne.n	8011876 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8011870:	68f8      	ldr	r0, [r7, #12]
 8011872:	f002 f85d 	bl	8013930 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011876:	bf00      	nop
 8011878:	3710      	adds	r7, #16
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}

0801187e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801187e:	b480      	push	{r7}
 8011880:	b085      	sub	sp, #20
 8011882:	af00      	add	r7, sp, #0
 8011884:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801188a:	2b00      	cmp	r3, #0
 801188c:	d006      	beq.n	801189c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011898:	60fb      	str	r3, [r7, #12]
 801189a:	e001      	b.n	80118a0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801189c:	2300      	movs	r3, #0
 801189e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80118a0:	68fb      	ldr	r3, [r7, #12]
	}
 80118a2:	4618      	mov	r0, r3
 80118a4:	3714      	adds	r7, #20
 80118a6:	46bd      	mov	sp, r7
 80118a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ac:	4770      	bx	lr

080118ae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80118ae:	b580      	push	{r7, lr}
 80118b0:	b086      	sub	sp, #24
 80118b2:	af00      	add	r7, sp, #0
 80118b4:	60f8      	str	r0, [r7, #12]
 80118b6:	60b9      	str	r1, [r7, #8]
 80118b8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80118ba:	2300      	movs	r3, #0
 80118bc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118c2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d10d      	bne.n	80118e8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d14d      	bne.n	8011970 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	689b      	ldr	r3, [r3, #8]
 80118d8:	4618      	mov	r0, r3
 80118da:	f001 f88d 	bl	80129f8 <xTaskPriorityDisinherit>
 80118de:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	2200      	movs	r2, #0
 80118e4:	609a      	str	r2, [r3, #8]
 80118e6:	e043      	b.n	8011970 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d119      	bne.n	8011922 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	6858      	ldr	r0, [r3, #4]
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118f6:	461a      	mov	r2, r3
 80118f8:	68b9      	ldr	r1, [r7, #8]
 80118fa:	f002 fb7a 	bl	8013ff2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	685a      	ldr	r2, [r3, #4]
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011906:	441a      	add	r2, r3
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	685a      	ldr	r2, [r3, #4]
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	689b      	ldr	r3, [r3, #8]
 8011914:	429a      	cmp	r2, r3
 8011916:	d32b      	bcc.n	8011970 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	681a      	ldr	r2, [r3, #0]
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	605a      	str	r2, [r3, #4]
 8011920:	e026      	b.n	8011970 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	68d8      	ldr	r0, [r3, #12]
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801192a:	461a      	mov	r2, r3
 801192c:	68b9      	ldr	r1, [r7, #8]
 801192e:	f002 fb60 	bl	8013ff2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	68da      	ldr	r2, [r3, #12]
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801193a:	425b      	negs	r3, r3
 801193c:	441a      	add	r2, r3
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	68da      	ldr	r2, [r3, #12]
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	429a      	cmp	r2, r3
 801194c:	d207      	bcs.n	801195e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	689a      	ldr	r2, [r3, #8]
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011956:	425b      	negs	r3, r3
 8011958:	441a      	add	r2, r3
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2b02      	cmp	r3, #2
 8011962:	d105      	bne.n	8011970 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011964:	693b      	ldr	r3, [r7, #16]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d002      	beq.n	8011970 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	3b01      	subs	r3, #1
 801196e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	1c5a      	adds	r2, r3, #1
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011978:	697b      	ldr	r3, [r7, #20]
}
 801197a:	4618      	mov	r0, r3
 801197c:	3718      	adds	r7, #24
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}

08011982 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011982:	b580      	push	{r7, lr}
 8011984:	b082      	sub	sp, #8
 8011986:	af00      	add	r7, sp, #0
 8011988:	6078      	str	r0, [r7, #4]
 801198a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011990:	2b00      	cmp	r3, #0
 8011992:	d018      	beq.n	80119c6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	68da      	ldr	r2, [r3, #12]
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801199c:	441a      	add	r2, r3
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	68da      	ldr	r2, [r3, #12]
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	689b      	ldr	r3, [r3, #8]
 80119aa:	429a      	cmp	r2, r3
 80119ac:	d303      	bcc.n	80119b6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	681a      	ldr	r2, [r3, #0]
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	68d9      	ldr	r1, [r3, #12]
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119be:	461a      	mov	r2, r3
 80119c0:	6838      	ldr	r0, [r7, #0]
 80119c2:	f002 fb16 	bl	8013ff2 <memcpy>
	}
}
 80119c6:	bf00      	nop
 80119c8:	3708      	adds	r7, #8
 80119ca:	46bd      	mov	sp, r7
 80119cc:	bd80      	pop	{r7, pc}

080119ce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80119ce:	b580      	push	{r7, lr}
 80119d0:	b084      	sub	sp, #16
 80119d2:	af00      	add	r7, sp, #0
 80119d4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80119d6:	f001 fde5 	bl	80135a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80119e0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80119e2:	e011      	b.n	8011a08 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d012      	beq.n	8011a12 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	3324      	adds	r3, #36	; 0x24
 80119f0:	4618      	mov	r0, r3
 80119f2:	f000 fdb9 	bl	8012568 <xTaskRemoveFromEventList>
 80119f6:	4603      	mov	r3, r0
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d001      	beq.n	8011a00 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80119fc:	f000 fe90 	bl	8012720 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011a00:	7bfb      	ldrb	r3, [r7, #15]
 8011a02:	3b01      	subs	r3, #1
 8011a04:	b2db      	uxtb	r3, r3
 8011a06:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	dce9      	bgt.n	80119e4 <prvUnlockQueue+0x16>
 8011a10:	e000      	b.n	8011a14 <prvUnlockQueue+0x46>
					break;
 8011a12:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	22ff      	movs	r2, #255	; 0xff
 8011a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011a1c:	f001 fdf2 	bl	8013604 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011a20:	f001 fdc0 	bl	80135a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011a2a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011a2c:	e011      	b.n	8011a52 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	691b      	ldr	r3, [r3, #16]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d012      	beq.n	8011a5c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	3310      	adds	r3, #16
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f000 fd94 	bl	8012568 <xTaskRemoveFromEventList>
 8011a40:	4603      	mov	r3, r0
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d001      	beq.n	8011a4a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011a46:	f000 fe6b 	bl	8012720 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011a4a:	7bbb      	ldrb	r3, [r7, #14]
 8011a4c:	3b01      	subs	r3, #1
 8011a4e:	b2db      	uxtb	r3, r3
 8011a50:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011a52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	dce9      	bgt.n	8011a2e <prvUnlockQueue+0x60>
 8011a5a:	e000      	b.n	8011a5e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011a5c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	22ff      	movs	r2, #255	; 0xff
 8011a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011a66:	f001 fdcd 	bl	8013604 <vPortExitCritical>
}
 8011a6a:	bf00      	nop
 8011a6c:	3710      	adds	r7, #16
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bd80      	pop	{r7, pc}

08011a72 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011a72:	b580      	push	{r7, lr}
 8011a74:	b084      	sub	sp, #16
 8011a76:	af00      	add	r7, sp, #0
 8011a78:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011a7a:	f001 fd93 	bl	80135a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d102      	bne.n	8011a8c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011a86:	2301      	movs	r3, #1
 8011a88:	60fb      	str	r3, [r7, #12]
 8011a8a:	e001      	b.n	8011a90 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011a90:	f001 fdb8 	bl	8013604 <vPortExitCritical>

	return xReturn;
 8011a94:	68fb      	ldr	r3, [r7, #12]
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3710      	adds	r7, #16
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}

08011a9e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011a9e:	b580      	push	{r7, lr}
 8011aa0:	b084      	sub	sp, #16
 8011aa2:	af00      	add	r7, sp, #0
 8011aa4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011aa6:	f001 fd7d 	bl	80135a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	d102      	bne.n	8011abc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	60fb      	str	r3, [r7, #12]
 8011aba:	e001      	b.n	8011ac0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011abc:	2300      	movs	r3, #0
 8011abe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011ac0:	f001 fda0 	bl	8013604 <vPortExitCritical>

	return xReturn;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3710      	adds	r7, #16
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}
	...

08011ad0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011ad0:	b480      	push	{r7}
 8011ad2:	b085      	sub	sp, #20
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
 8011ad8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011ada:	2300      	movs	r3, #0
 8011adc:	60fb      	str	r3, [r7, #12]
 8011ade:	e014      	b.n	8011b0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011ae0:	4a0f      	ldr	r2, [pc, #60]	; (8011b20 <vQueueAddToRegistry+0x50>)
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d10b      	bne.n	8011b04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011aec:	490c      	ldr	r1, [pc, #48]	; (8011b20 <vQueueAddToRegistry+0x50>)
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	683a      	ldr	r2, [r7, #0]
 8011af2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011af6:	4a0a      	ldr	r2, [pc, #40]	; (8011b20 <vQueueAddToRegistry+0x50>)
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	00db      	lsls	r3, r3, #3
 8011afc:	4413      	add	r3, r2
 8011afe:	687a      	ldr	r2, [r7, #4]
 8011b00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011b02:	e006      	b.n	8011b12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	3301      	adds	r3, #1
 8011b08:	60fb      	str	r3, [r7, #12]
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	2b07      	cmp	r3, #7
 8011b0e:	d9e7      	bls.n	8011ae0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011b10:	bf00      	nop
 8011b12:	bf00      	nop
 8011b14:	3714      	adds	r7, #20
 8011b16:	46bd      	mov	sp, r7
 8011b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1c:	4770      	bx	lr
 8011b1e:	bf00      	nop
 8011b20:	20007d80 	.word	0x20007d80

08011b24 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011b24:	b480      	push	{r7}
 8011b26:	b085      	sub	sp, #20
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	60fb      	str	r3, [r7, #12]
 8011b30:	e016      	b.n	8011b60 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011b32:	4a10      	ldr	r2, [pc, #64]	; (8011b74 <vQueueUnregisterQueue+0x50>)
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	00db      	lsls	r3, r3, #3
 8011b38:	4413      	add	r3, r2
 8011b3a:	685b      	ldr	r3, [r3, #4]
 8011b3c:	687a      	ldr	r2, [r7, #4]
 8011b3e:	429a      	cmp	r2, r3
 8011b40:	d10b      	bne.n	8011b5a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011b42:	4a0c      	ldr	r2, [pc, #48]	; (8011b74 <vQueueUnregisterQueue+0x50>)
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	2100      	movs	r1, #0
 8011b48:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011b4c:	4a09      	ldr	r2, [pc, #36]	; (8011b74 <vQueueUnregisterQueue+0x50>)
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	00db      	lsls	r3, r3, #3
 8011b52:	4413      	add	r3, r2
 8011b54:	2200      	movs	r2, #0
 8011b56:	605a      	str	r2, [r3, #4]
				break;
 8011b58:	e006      	b.n	8011b68 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	3301      	adds	r3, #1
 8011b5e:	60fb      	str	r3, [r7, #12]
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	2b07      	cmp	r3, #7
 8011b64:	d9e5      	bls.n	8011b32 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011b66:	bf00      	nop
 8011b68:	bf00      	nop
 8011b6a:	3714      	adds	r7, #20
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b72:	4770      	bx	lr
 8011b74:	20007d80 	.word	0x20007d80

08011b78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b086      	sub	sp, #24
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	60f8      	str	r0, [r7, #12]
 8011b80:	60b9      	str	r1, [r7, #8]
 8011b82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011b88:	f001 fd0c 	bl	80135a4 <vPortEnterCritical>
 8011b8c:	697b      	ldr	r3, [r7, #20]
 8011b8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011b92:	b25b      	sxtb	r3, r3
 8011b94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011b98:	d103      	bne.n	8011ba2 <vQueueWaitForMessageRestricted+0x2a>
 8011b9a:	697b      	ldr	r3, [r7, #20]
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011ba2:	697b      	ldr	r3, [r7, #20]
 8011ba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011ba8:	b25b      	sxtb	r3, r3
 8011baa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011bae:	d103      	bne.n	8011bb8 <vQueueWaitForMessageRestricted+0x40>
 8011bb0:	697b      	ldr	r3, [r7, #20]
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011bb8:	f001 fd24 	bl	8013604 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011bbc:	697b      	ldr	r3, [r7, #20]
 8011bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d106      	bne.n	8011bd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011bc4:	697b      	ldr	r3, [r7, #20]
 8011bc6:	3324      	adds	r3, #36	; 0x24
 8011bc8:	687a      	ldr	r2, [r7, #4]
 8011bca:	68b9      	ldr	r1, [r7, #8]
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f000 fc9f 	bl	8012510 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011bd2:	6978      	ldr	r0, [r7, #20]
 8011bd4:	f7ff fefb 	bl	80119ce <prvUnlockQueue>
	}
 8011bd8:	bf00      	nop
 8011bda:	3718      	adds	r7, #24
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}

08011be0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b08e      	sub	sp, #56	; 0x38
 8011be4:	af04      	add	r7, sp, #16
 8011be6:	60f8      	str	r0, [r7, #12]
 8011be8:	60b9      	str	r1, [r7, #8]
 8011bea:	607a      	str	r2, [r7, #4]
 8011bec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d10a      	bne.n	8011c0a <xTaskCreateStatic+0x2a>
	__asm volatile
 8011bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bf8:	f383 8811 	msr	BASEPRI, r3
 8011bfc:	f3bf 8f6f 	isb	sy
 8011c00:	f3bf 8f4f 	dsb	sy
 8011c04:	623b      	str	r3, [r7, #32]
}
 8011c06:	bf00      	nop
 8011c08:	e7fe      	b.n	8011c08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d10a      	bne.n	8011c26 <xTaskCreateStatic+0x46>
	__asm volatile
 8011c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c14:	f383 8811 	msr	BASEPRI, r3
 8011c18:	f3bf 8f6f 	isb	sy
 8011c1c:	f3bf 8f4f 	dsb	sy
 8011c20:	61fb      	str	r3, [r7, #28]
}
 8011c22:	bf00      	nop
 8011c24:	e7fe      	b.n	8011c24 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011c26:	23bc      	movs	r3, #188	; 0xbc
 8011c28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011c2a:	693b      	ldr	r3, [r7, #16]
 8011c2c:	2bbc      	cmp	r3, #188	; 0xbc
 8011c2e:	d00a      	beq.n	8011c46 <xTaskCreateStatic+0x66>
	__asm volatile
 8011c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c34:	f383 8811 	msr	BASEPRI, r3
 8011c38:	f3bf 8f6f 	isb	sy
 8011c3c:	f3bf 8f4f 	dsb	sy
 8011c40:	61bb      	str	r3, [r7, #24]
}
 8011c42:	bf00      	nop
 8011c44:	e7fe      	b.n	8011c44 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011c46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d01e      	beq.n	8011c8c <xTaskCreateStatic+0xac>
 8011c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d01b      	beq.n	8011c8c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c60:	2202      	movs	r2, #2
 8011c62:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011c66:	2300      	movs	r3, #0
 8011c68:	9303      	str	r3, [sp, #12]
 8011c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c6c:	9302      	str	r3, [sp, #8]
 8011c6e:	f107 0314 	add.w	r3, r7, #20
 8011c72:	9301      	str	r3, [sp, #4]
 8011c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c76:	9300      	str	r3, [sp, #0]
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	687a      	ldr	r2, [r7, #4]
 8011c7c:	68b9      	ldr	r1, [r7, #8]
 8011c7e:	68f8      	ldr	r0, [r7, #12]
 8011c80:	f000 f850 	bl	8011d24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011c84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c86:	f000 f8f3 	bl	8011e70 <prvAddNewTaskToReadyList>
 8011c8a:	e001      	b.n	8011c90 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011c90:	697b      	ldr	r3, [r7, #20]
	}
 8011c92:	4618      	mov	r0, r3
 8011c94:	3728      	adds	r7, #40	; 0x28
 8011c96:	46bd      	mov	sp, r7
 8011c98:	bd80      	pop	{r7, pc}

08011c9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011c9a:	b580      	push	{r7, lr}
 8011c9c:	b08c      	sub	sp, #48	; 0x30
 8011c9e:	af04      	add	r7, sp, #16
 8011ca0:	60f8      	str	r0, [r7, #12]
 8011ca2:	60b9      	str	r1, [r7, #8]
 8011ca4:	603b      	str	r3, [r7, #0]
 8011ca6:	4613      	mov	r3, r2
 8011ca8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011caa:	88fb      	ldrh	r3, [r7, #6]
 8011cac:	009b      	lsls	r3, r3, #2
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f001 fd9a 	bl	80137e8 <pvPortMalloc>
 8011cb4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011cb6:	697b      	ldr	r3, [r7, #20]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d00e      	beq.n	8011cda <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011cbc:	20bc      	movs	r0, #188	; 0xbc
 8011cbe:	f001 fd93 	bl	80137e8 <pvPortMalloc>
 8011cc2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011cc4:	69fb      	ldr	r3, [r7, #28]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d003      	beq.n	8011cd2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011cca:	69fb      	ldr	r3, [r7, #28]
 8011ccc:	697a      	ldr	r2, [r7, #20]
 8011cce:	631a      	str	r2, [r3, #48]	; 0x30
 8011cd0:	e005      	b.n	8011cde <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011cd2:	6978      	ldr	r0, [r7, #20]
 8011cd4:	f001 fe2c 	bl	8013930 <vPortFree>
 8011cd8:	e001      	b.n	8011cde <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011cda:	2300      	movs	r3, #0
 8011cdc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011cde:	69fb      	ldr	r3, [r7, #28]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d017      	beq.n	8011d14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011ce4:	69fb      	ldr	r3, [r7, #28]
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011cec:	88fa      	ldrh	r2, [r7, #6]
 8011cee:	2300      	movs	r3, #0
 8011cf0:	9303      	str	r3, [sp, #12]
 8011cf2:	69fb      	ldr	r3, [r7, #28]
 8011cf4:	9302      	str	r3, [sp, #8]
 8011cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cf8:	9301      	str	r3, [sp, #4]
 8011cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cfc:	9300      	str	r3, [sp, #0]
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	68b9      	ldr	r1, [r7, #8]
 8011d02:	68f8      	ldr	r0, [r7, #12]
 8011d04:	f000 f80e 	bl	8011d24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011d08:	69f8      	ldr	r0, [r7, #28]
 8011d0a:	f000 f8b1 	bl	8011e70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011d0e:	2301      	movs	r3, #1
 8011d10:	61bb      	str	r3, [r7, #24]
 8011d12:	e002      	b.n	8011d1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011d1a:	69bb      	ldr	r3, [r7, #24]
	}
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	3720      	adds	r7, #32
 8011d20:	46bd      	mov	sp, r7
 8011d22:	bd80      	pop	{r7, pc}

08011d24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b088      	sub	sp, #32
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	60f8      	str	r0, [r7, #12]
 8011d2c:	60b9      	str	r1, [r7, #8]
 8011d2e:	607a      	str	r2, [r7, #4]
 8011d30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	009b      	lsls	r3, r3, #2
 8011d3a:	461a      	mov	r2, r3
 8011d3c:	21a5      	movs	r1, #165	; 0xa5
 8011d3e:	f002 f966 	bl	801400e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011d4c:	3b01      	subs	r3, #1
 8011d4e:	009b      	lsls	r3, r3, #2
 8011d50:	4413      	add	r3, r2
 8011d52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011d54:	69bb      	ldr	r3, [r7, #24]
 8011d56:	f023 0307 	bic.w	r3, r3, #7
 8011d5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011d5c:	69bb      	ldr	r3, [r7, #24]
 8011d5e:	f003 0307 	and.w	r3, r3, #7
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d00a      	beq.n	8011d7c <prvInitialiseNewTask+0x58>
	__asm volatile
 8011d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d6a:	f383 8811 	msr	BASEPRI, r3
 8011d6e:	f3bf 8f6f 	isb	sy
 8011d72:	f3bf 8f4f 	dsb	sy
 8011d76:	617b      	str	r3, [r7, #20]
}
 8011d78:	bf00      	nop
 8011d7a:	e7fe      	b.n	8011d7a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d01f      	beq.n	8011dc2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011d82:	2300      	movs	r3, #0
 8011d84:	61fb      	str	r3, [r7, #28]
 8011d86:	e012      	b.n	8011dae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011d88:	68ba      	ldr	r2, [r7, #8]
 8011d8a:	69fb      	ldr	r3, [r7, #28]
 8011d8c:	4413      	add	r3, r2
 8011d8e:	7819      	ldrb	r1, [r3, #0]
 8011d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d92:	69fb      	ldr	r3, [r7, #28]
 8011d94:	4413      	add	r3, r2
 8011d96:	3334      	adds	r3, #52	; 0x34
 8011d98:	460a      	mov	r2, r1
 8011d9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011d9c:	68ba      	ldr	r2, [r7, #8]
 8011d9e:	69fb      	ldr	r3, [r7, #28]
 8011da0:	4413      	add	r3, r2
 8011da2:	781b      	ldrb	r3, [r3, #0]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d006      	beq.n	8011db6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011da8:	69fb      	ldr	r3, [r7, #28]
 8011daa:	3301      	adds	r3, #1
 8011dac:	61fb      	str	r3, [r7, #28]
 8011dae:	69fb      	ldr	r3, [r7, #28]
 8011db0:	2b0f      	cmp	r3, #15
 8011db2:	d9e9      	bls.n	8011d88 <prvInitialiseNewTask+0x64>
 8011db4:	e000      	b.n	8011db8 <prvInitialiseNewTask+0x94>
			{
				break;
 8011db6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dba:	2200      	movs	r2, #0
 8011dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011dc0:	e003      	b.n	8011dca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dc4:	2200      	movs	r2, #0
 8011dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dcc:	2b37      	cmp	r3, #55	; 0x37
 8011dce:	d901      	bls.n	8011dd4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011dd0:	2337      	movs	r3, #55	; 0x37
 8011dd2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011dd8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011dde:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de2:	2200      	movs	r2, #0
 8011de4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de8:	3304      	adds	r3, #4
 8011dea:	4618      	mov	r0, r3
 8011dec:	f7fe fe1a 	bl	8010a24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011df2:	3318      	adds	r3, #24
 8011df4:	4618      	mov	r0, r3
 8011df6:	f7fe fe15 	bl	8010a24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011dfe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e12:	2200      	movs	r2, #0
 8011e14:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e22:	3354      	adds	r3, #84	; 0x54
 8011e24:	2260      	movs	r2, #96	; 0x60
 8011e26:	2100      	movs	r1, #0
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f002 f8f0 	bl	801400e <memset>
 8011e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e30:	4a0c      	ldr	r2, [pc, #48]	; (8011e64 <prvInitialiseNewTask+0x140>)
 8011e32:	659a      	str	r2, [r3, #88]	; 0x58
 8011e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e36:	4a0c      	ldr	r2, [pc, #48]	; (8011e68 <prvInitialiseNewTask+0x144>)
 8011e38:	65da      	str	r2, [r3, #92]	; 0x5c
 8011e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e3c:	4a0b      	ldr	r2, [pc, #44]	; (8011e6c <prvInitialiseNewTask+0x148>)
 8011e3e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011e40:	683a      	ldr	r2, [r7, #0]
 8011e42:	68f9      	ldr	r1, [r7, #12]
 8011e44:	69b8      	ldr	r0, [r7, #24]
 8011e46:	f001 fa7d 	bl	8013344 <pxPortInitialiseStack>
 8011e4a:	4602      	mov	r2, r0
 8011e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e4e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d002      	beq.n	8011e5c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011e5c:	bf00      	nop
 8011e5e:	3720      	adds	r7, #32
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}
 8011e64:	0801a32c 	.word	0x0801a32c
 8011e68:	0801a34c 	.word	0x0801a34c
 8011e6c:	0801a30c 	.word	0x0801a30c

08011e70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b082      	sub	sp, #8
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011e78:	f001 fb94 	bl	80135a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011e7c:	4b2d      	ldr	r3, [pc, #180]	; (8011f34 <prvAddNewTaskToReadyList+0xc4>)
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	3301      	adds	r3, #1
 8011e82:	4a2c      	ldr	r2, [pc, #176]	; (8011f34 <prvAddNewTaskToReadyList+0xc4>)
 8011e84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011e86:	4b2c      	ldr	r3, [pc, #176]	; (8011f38 <prvAddNewTaskToReadyList+0xc8>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d109      	bne.n	8011ea2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011e8e:	4a2a      	ldr	r2, [pc, #168]	; (8011f38 <prvAddNewTaskToReadyList+0xc8>)
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011e94:	4b27      	ldr	r3, [pc, #156]	; (8011f34 <prvAddNewTaskToReadyList+0xc4>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	2b01      	cmp	r3, #1
 8011e9a:	d110      	bne.n	8011ebe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011e9c:	f000 fc64 	bl	8012768 <prvInitialiseTaskLists>
 8011ea0:	e00d      	b.n	8011ebe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011ea2:	4b26      	ldr	r3, [pc, #152]	; (8011f3c <prvAddNewTaskToReadyList+0xcc>)
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d109      	bne.n	8011ebe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011eaa:	4b23      	ldr	r3, [pc, #140]	; (8011f38 <prvAddNewTaskToReadyList+0xc8>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eb4:	429a      	cmp	r2, r3
 8011eb6:	d802      	bhi.n	8011ebe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011eb8:	4a1f      	ldr	r2, [pc, #124]	; (8011f38 <prvAddNewTaskToReadyList+0xc8>)
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011ebe:	4b20      	ldr	r3, [pc, #128]	; (8011f40 <prvAddNewTaskToReadyList+0xd0>)
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	3301      	adds	r3, #1
 8011ec4:	4a1e      	ldr	r2, [pc, #120]	; (8011f40 <prvAddNewTaskToReadyList+0xd0>)
 8011ec6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011ec8:	4b1d      	ldr	r3, [pc, #116]	; (8011f40 <prvAddNewTaskToReadyList+0xd0>)
 8011eca:	681a      	ldr	r2, [r3, #0]
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ed4:	4b1b      	ldr	r3, [pc, #108]	; (8011f44 <prvAddNewTaskToReadyList+0xd4>)
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	429a      	cmp	r2, r3
 8011eda:	d903      	bls.n	8011ee4 <prvAddNewTaskToReadyList+0x74>
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ee0:	4a18      	ldr	r2, [pc, #96]	; (8011f44 <prvAddNewTaskToReadyList+0xd4>)
 8011ee2:	6013      	str	r3, [r2, #0]
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ee8:	4613      	mov	r3, r2
 8011eea:	009b      	lsls	r3, r3, #2
 8011eec:	4413      	add	r3, r2
 8011eee:	009b      	lsls	r3, r3, #2
 8011ef0:	4a15      	ldr	r2, [pc, #84]	; (8011f48 <prvAddNewTaskToReadyList+0xd8>)
 8011ef2:	441a      	add	r2, r3
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	3304      	adds	r3, #4
 8011ef8:	4619      	mov	r1, r3
 8011efa:	4610      	mov	r0, r2
 8011efc:	f7fe fd9f 	bl	8010a3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011f00:	f001 fb80 	bl	8013604 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011f04:	4b0d      	ldr	r3, [pc, #52]	; (8011f3c <prvAddNewTaskToReadyList+0xcc>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d00e      	beq.n	8011f2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011f0c:	4b0a      	ldr	r3, [pc, #40]	; (8011f38 <prvAddNewTaskToReadyList+0xc8>)
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f16:	429a      	cmp	r2, r3
 8011f18:	d207      	bcs.n	8011f2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011f1a:	4b0c      	ldr	r3, [pc, #48]	; (8011f4c <prvAddNewTaskToReadyList+0xdc>)
 8011f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f20:	601a      	str	r2, [r3, #0]
 8011f22:	f3bf 8f4f 	dsb	sy
 8011f26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011f2a:	bf00      	nop
 8011f2c:	3708      	adds	r7, #8
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	bd80      	pop	{r7, pc}
 8011f32:	bf00      	nop
 8011f34:	20008294 	.word	0x20008294
 8011f38:	20007dc0 	.word	0x20007dc0
 8011f3c:	200082a0 	.word	0x200082a0
 8011f40:	200082b0 	.word	0x200082b0
 8011f44:	2000829c 	.word	0x2000829c
 8011f48:	20007dc4 	.word	0x20007dc4
 8011f4c:	e000ed04 	.word	0xe000ed04

08011f50 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b084      	sub	sp, #16
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8011f58:	f001 fb24 	bl	80135a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d102      	bne.n	8011f68 <vTaskDelete+0x18>
 8011f62:	4b2c      	ldr	r3, [pc, #176]	; (8012014 <vTaskDelete+0xc4>)
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	e000      	b.n	8011f6a <vTaskDelete+0x1a>
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	3304      	adds	r3, #4
 8011f70:	4618      	mov	r0, r3
 8011f72:	f7fe fdc1 	bl	8010af8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d004      	beq.n	8011f88 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	3318      	adds	r3, #24
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7fe fdb8 	bl	8010af8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8011f88:	4b23      	ldr	r3, [pc, #140]	; (8012018 <vTaskDelete+0xc8>)
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	3301      	adds	r3, #1
 8011f8e:	4a22      	ldr	r2, [pc, #136]	; (8012018 <vTaskDelete+0xc8>)
 8011f90:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8011f92:	4b20      	ldr	r3, [pc, #128]	; (8012014 <vTaskDelete+0xc4>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	68fa      	ldr	r2, [r7, #12]
 8011f98:	429a      	cmp	r2, r3
 8011f9a:	d10b      	bne.n	8011fb4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	3304      	adds	r3, #4
 8011fa0:	4619      	mov	r1, r3
 8011fa2:	481e      	ldr	r0, [pc, #120]	; (801201c <vTaskDelete+0xcc>)
 8011fa4:	f7fe fd4b 	bl	8010a3e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8011fa8:	4b1d      	ldr	r3, [pc, #116]	; (8012020 <vTaskDelete+0xd0>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	3301      	adds	r3, #1
 8011fae:	4a1c      	ldr	r2, [pc, #112]	; (8012020 <vTaskDelete+0xd0>)
 8011fb0:	6013      	str	r3, [r2, #0]
 8011fb2:	e009      	b.n	8011fc8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8011fb4:	4b1b      	ldr	r3, [pc, #108]	; (8012024 <vTaskDelete+0xd4>)
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	3b01      	subs	r3, #1
 8011fba:	4a1a      	ldr	r2, [pc, #104]	; (8012024 <vTaskDelete+0xd4>)
 8011fbc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8011fbe:	68f8      	ldr	r0, [r7, #12]
 8011fc0:	f000 fc40 	bl	8012844 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8011fc4:	f000 fc72 	bl	80128ac <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8011fc8:	f001 fb1c 	bl	8013604 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8011fcc:	4b16      	ldr	r3, [pc, #88]	; (8012028 <vTaskDelete+0xd8>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d01b      	beq.n	801200c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8011fd4:	4b0f      	ldr	r3, [pc, #60]	; (8012014 <vTaskDelete+0xc4>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	68fa      	ldr	r2, [r7, #12]
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	d116      	bne.n	801200c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8011fde:	4b13      	ldr	r3, [pc, #76]	; (801202c <vTaskDelete+0xdc>)
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d00a      	beq.n	8011ffc <vTaskDelete+0xac>
	__asm volatile
 8011fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fea:	f383 8811 	msr	BASEPRI, r3
 8011fee:	f3bf 8f6f 	isb	sy
 8011ff2:	f3bf 8f4f 	dsb	sy
 8011ff6:	60bb      	str	r3, [r7, #8]
}
 8011ff8:	bf00      	nop
 8011ffa:	e7fe      	b.n	8011ffa <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8011ffc:	4b0c      	ldr	r3, [pc, #48]	; (8012030 <vTaskDelete+0xe0>)
 8011ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012002:	601a      	str	r2, [r3, #0]
 8012004:	f3bf 8f4f 	dsb	sy
 8012008:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801200c:	bf00      	nop
 801200e:	3710      	adds	r7, #16
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}
 8012014:	20007dc0 	.word	0x20007dc0
 8012018:	200082b0 	.word	0x200082b0
 801201c:	20008268 	.word	0x20008268
 8012020:	2000827c 	.word	0x2000827c
 8012024:	20008294 	.word	0x20008294
 8012028:	200082a0 	.word	0x200082a0
 801202c:	200082bc 	.word	0x200082bc
 8012030:	e000ed04 	.word	0xe000ed04

08012034 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b08a      	sub	sp, #40	; 0x28
 8012038:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801203a:	2300      	movs	r3, #0
 801203c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801203e:	2300      	movs	r3, #0
 8012040:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012042:	463a      	mov	r2, r7
 8012044:	1d39      	adds	r1, r7, #4
 8012046:	f107 0308 	add.w	r3, r7, #8
 801204a:	4618      	mov	r0, r3
 801204c:	f7fe fc96 	bl	801097c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012050:	6839      	ldr	r1, [r7, #0]
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	68ba      	ldr	r2, [r7, #8]
 8012056:	9202      	str	r2, [sp, #8]
 8012058:	9301      	str	r3, [sp, #4]
 801205a:	2300      	movs	r3, #0
 801205c:	9300      	str	r3, [sp, #0]
 801205e:	2300      	movs	r3, #0
 8012060:	460a      	mov	r2, r1
 8012062:	4924      	ldr	r1, [pc, #144]	; (80120f4 <vTaskStartScheduler+0xc0>)
 8012064:	4824      	ldr	r0, [pc, #144]	; (80120f8 <vTaskStartScheduler+0xc4>)
 8012066:	f7ff fdbb 	bl	8011be0 <xTaskCreateStatic>
 801206a:	4603      	mov	r3, r0
 801206c:	4a23      	ldr	r2, [pc, #140]	; (80120fc <vTaskStartScheduler+0xc8>)
 801206e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012070:	4b22      	ldr	r3, [pc, #136]	; (80120fc <vTaskStartScheduler+0xc8>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d002      	beq.n	801207e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012078:	2301      	movs	r3, #1
 801207a:	617b      	str	r3, [r7, #20]
 801207c:	e001      	b.n	8012082 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801207e:	2300      	movs	r3, #0
 8012080:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012082:	697b      	ldr	r3, [r7, #20]
 8012084:	2b01      	cmp	r3, #1
 8012086:	d102      	bne.n	801208e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012088:	f000 fe0e 	bl	8012ca8 <xTimerCreateTimerTask>
 801208c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801208e:	697b      	ldr	r3, [r7, #20]
 8012090:	2b01      	cmp	r3, #1
 8012092:	d11b      	bne.n	80120cc <vTaskStartScheduler+0x98>
	__asm volatile
 8012094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012098:	f383 8811 	msr	BASEPRI, r3
 801209c:	f3bf 8f6f 	isb	sy
 80120a0:	f3bf 8f4f 	dsb	sy
 80120a4:	613b      	str	r3, [r7, #16]
}
 80120a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80120a8:	4b15      	ldr	r3, [pc, #84]	; (8012100 <vTaskStartScheduler+0xcc>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	3354      	adds	r3, #84	; 0x54
 80120ae:	4a15      	ldr	r2, [pc, #84]	; (8012104 <vTaskStartScheduler+0xd0>)
 80120b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80120b2:	4b15      	ldr	r3, [pc, #84]	; (8012108 <vTaskStartScheduler+0xd4>)
 80120b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80120b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80120ba:	4b14      	ldr	r3, [pc, #80]	; (801210c <vTaskStartScheduler+0xd8>)
 80120bc:	2201      	movs	r2, #1
 80120be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80120c0:	4b13      	ldr	r3, [pc, #76]	; (8012110 <vTaskStartScheduler+0xdc>)
 80120c2:	2200      	movs	r2, #0
 80120c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80120c6:	f001 f9cb 	bl	8013460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80120ca:	e00e      	b.n	80120ea <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80120cc:	697b      	ldr	r3, [r7, #20]
 80120ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80120d2:	d10a      	bne.n	80120ea <vTaskStartScheduler+0xb6>
	__asm volatile
 80120d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d8:	f383 8811 	msr	BASEPRI, r3
 80120dc:	f3bf 8f6f 	isb	sy
 80120e0:	f3bf 8f4f 	dsb	sy
 80120e4:	60fb      	str	r3, [r7, #12]
}
 80120e6:	bf00      	nop
 80120e8:	e7fe      	b.n	80120e8 <vTaskStartScheduler+0xb4>
}
 80120ea:	bf00      	nop
 80120ec:	3718      	adds	r7, #24
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}
 80120f2:	bf00      	nop
 80120f4:	080191c8 	.word	0x080191c8
 80120f8:	08012739 	.word	0x08012739
 80120fc:	200082b8 	.word	0x200082b8
 8012100:	20007dc0 	.word	0x20007dc0
 8012104:	2000022c 	.word	0x2000022c
 8012108:	200082b4 	.word	0x200082b4
 801210c:	200082a0 	.word	0x200082a0
 8012110:	20008298 	.word	0x20008298

08012114 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012114:	b480      	push	{r7}
 8012116:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012118:	4b04      	ldr	r3, [pc, #16]	; (801212c <vTaskSuspendAll+0x18>)
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	3301      	adds	r3, #1
 801211e:	4a03      	ldr	r2, [pc, #12]	; (801212c <vTaskSuspendAll+0x18>)
 8012120:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012122:	bf00      	nop
 8012124:	46bd      	mov	sp, r7
 8012126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212a:	4770      	bx	lr
 801212c:	200082bc 	.word	0x200082bc

08012130 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b084      	sub	sp, #16
 8012134:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012136:	2300      	movs	r3, #0
 8012138:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801213a:	2300      	movs	r3, #0
 801213c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801213e:	4b42      	ldr	r3, [pc, #264]	; (8012248 <xTaskResumeAll+0x118>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d10a      	bne.n	801215c <xTaskResumeAll+0x2c>
	__asm volatile
 8012146:	f04f 0350 	mov.w	r3, #80	; 0x50
 801214a:	f383 8811 	msr	BASEPRI, r3
 801214e:	f3bf 8f6f 	isb	sy
 8012152:	f3bf 8f4f 	dsb	sy
 8012156:	603b      	str	r3, [r7, #0]
}
 8012158:	bf00      	nop
 801215a:	e7fe      	b.n	801215a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801215c:	f001 fa22 	bl	80135a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012160:	4b39      	ldr	r3, [pc, #228]	; (8012248 <xTaskResumeAll+0x118>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	3b01      	subs	r3, #1
 8012166:	4a38      	ldr	r2, [pc, #224]	; (8012248 <xTaskResumeAll+0x118>)
 8012168:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801216a:	4b37      	ldr	r3, [pc, #220]	; (8012248 <xTaskResumeAll+0x118>)
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d162      	bne.n	8012238 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012172:	4b36      	ldr	r3, [pc, #216]	; (801224c <xTaskResumeAll+0x11c>)
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d05e      	beq.n	8012238 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801217a:	e02f      	b.n	80121dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801217c:	4b34      	ldr	r3, [pc, #208]	; (8012250 <xTaskResumeAll+0x120>)
 801217e:	68db      	ldr	r3, [r3, #12]
 8012180:	68db      	ldr	r3, [r3, #12]
 8012182:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	3318      	adds	r3, #24
 8012188:	4618      	mov	r0, r3
 801218a:	f7fe fcb5 	bl	8010af8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	3304      	adds	r3, #4
 8012192:	4618      	mov	r0, r3
 8012194:	f7fe fcb0 	bl	8010af8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801219c:	4b2d      	ldr	r3, [pc, #180]	; (8012254 <xTaskResumeAll+0x124>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	429a      	cmp	r2, r3
 80121a2:	d903      	bls.n	80121ac <xTaskResumeAll+0x7c>
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121a8:	4a2a      	ldr	r2, [pc, #168]	; (8012254 <xTaskResumeAll+0x124>)
 80121aa:	6013      	str	r3, [r2, #0]
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121b0:	4613      	mov	r3, r2
 80121b2:	009b      	lsls	r3, r3, #2
 80121b4:	4413      	add	r3, r2
 80121b6:	009b      	lsls	r3, r3, #2
 80121b8:	4a27      	ldr	r2, [pc, #156]	; (8012258 <xTaskResumeAll+0x128>)
 80121ba:	441a      	add	r2, r3
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	3304      	adds	r3, #4
 80121c0:	4619      	mov	r1, r3
 80121c2:	4610      	mov	r0, r2
 80121c4:	f7fe fc3b 	bl	8010a3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121cc:	4b23      	ldr	r3, [pc, #140]	; (801225c <xTaskResumeAll+0x12c>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121d2:	429a      	cmp	r2, r3
 80121d4:	d302      	bcc.n	80121dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80121d6:	4b22      	ldr	r3, [pc, #136]	; (8012260 <xTaskResumeAll+0x130>)
 80121d8:	2201      	movs	r2, #1
 80121da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80121dc:	4b1c      	ldr	r3, [pc, #112]	; (8012250 <xTaskResumeAll+0x120>)
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d1cb      	bne.n	801217c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d001      	beq.n	80121ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80121ea:	f000 fb5f 	bl	80128ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80121ee:	4b1d      	ldr	r3, [pc, #116]	; (8012264 <xTaskResumeAll+0x134>)
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d010      	beq.n	801221c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80121fa:	f000 f847 	bl	801228c <xTaskIncrementTick>
 80121fe:	4603      	mov	r3, r0
 8012200:	2b00      	cmp	r3, #0
 8012202:	d002      	beq.n	801220a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012204:	4b16      	ldr	r3, [pc, #88]	; (8012260 <xTaskResumeAll+0x130>)
 8012206:	2201      	movs	r2, #1
 8012208:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	3b01      	subs	r3, #1
 801220e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d1f1      	bne.n	80121fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8012216:	4b13      	ldr	r3, [pc, #76]	; (8012264 <xTaskResumeAll+0x134>)
 8012218:	2200      	movs	r2, #0
 801221a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801221c:	4b10      	ldr	r3, [pc, #64]	; (8012260 <xTaskResumeAll+0x130>)
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d009      	beq.n	8012238 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012224:	2301      	movs	r3, #1
 8012226:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012228:	4b0f      	ldr	r3, [pc, #60]	; (8012268 <xTaskResumeAll+0x138>)
 801222a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801222e:	601a      	str	r2, [r3, #0]
 8012230:	f3bf 8f4f 	dsb	sy
 8012234:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012238:	f001 f9e4 	bl	8013604 <vPortExitCritical>

	return xAlreadyYielded;
 801223c:	68bb      	ldr	r3, [r7, #8]
}
 801223e:	4618      	mov	r0, r3
 8012240:	3710      	adds	r7, #16
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}
 8012246:	bf00      	nop
 8012248:	200082bc 	.word	0x200082bc
 801224c:	20008294 	.word	0x20008294
 8012250:	20008254 	.word	0x20008254
 8012254:	2000829c 	.word	0x2000829c
 8012258:	20007dc4 	.word	0x20007dc4
 801225c:	20007dc0 	.word	0x20007dc0
 8012260:	200082a8 	.word	0x200082a8
 8012264:	200082a4 	.word	0x200082a4
 8012268:	e000ed04 	.word	0xe000ed04

0801226c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801226c:	b480      	push	{r7}
 801226e:	b083      	sub	sp, #12
 8012270:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012272:	4b05      	ldr	r3, [pc, #20]	; (8012288 <xTaskGetTickCount+0x1c>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012278:	687b      	ldr	r3, [r7, #4]
}
 801227a:	4618      	mov	r0, r3
 801227c:	370c      	adds	r7, #12
 801227e:	46bd      	mov	sp, r7
 8012280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012284:	4770      	bx	lr
 8012286:	bf00      	nop
 8012288:	20008298 	.word	0x20008298

0801228c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b086      	sub	sp, #24
 8012290:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012292:	2300      	movs	r3, #0
 8012294:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012296:	4b4f      	ldr	r3, [pc, #316]	; (80123d4 <xTaskIncrementTick+0x148>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	2b00      	cmp	r3, #0
 801229c:	f040 808f 	bne.w	80123be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80122a0:	4b4d      	ldr	r3, [pc, #308]	; (80123d8 <xTaskIncrementTick+0x14c>)
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	3301      	adds	r3, #1
 80122a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80122a8:	4a4b      	ldr	r2, [pc, #300]	; (80123d8 <xTaskIncrementTick+0x14c>)
 80122aa:	693b      	ldr	r3, [r7, #16]
 80122ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80122ae:	693b      	ldr	r3, [r7, #16]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d120      	bne.n	80122f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80122b4:	4b49      	ldr	r3, [pc, #292]	; (80123dc <xTaskIncrementTick+0x150>)
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d00a      	beq.n	80122d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80122be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122c2:	f383 8811 	msr	BASEPRI, r3
 80122c6:	f3bf 8f6f 	isb	sy
 80122ca:	f3bf 8f4f 	dsb	sy
 80122ce:	603b      	str	r3, [r7, #0]
}
 80122d0:	bf00      	nop
 80122d2:	e7fe      	b.n	80122d2 <xTaskIncrementTick+0x46>
 80122d4:	4b41      	ldr	r3, [pc, #260]	; (80123dc <xTaskIncrementTick+0x150>)
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	60fb      	str	r3, [r7, #12]
 80122da:	4b41      	ldr	r3, [pc, #260]	; (80123e0 <xTaskIncrementTick+0x154>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	4a3f      	ldr	r2, [pc, #252]	; (80123dc <xTaskIncrementTick+0x150>)
 80122e0:	6013      	str	r3, [r2, #0]
 80122e2:	4a3f      	ldr	r2, [pc, #252]	; (80123e0 <xTaskIncrementTick+0x154>)
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	6013      	str	r3, [r2, #0]
 80122e8:	4b3e      	ldr	r3, [pc, #248]	; (80123e4 <xTaskIncrementTick+0x158>)
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	3301      	adds	r3, #1
 80122ee:	4a3d      	ldr	r2, [pc, #244]	; (80123e4 <xTaskIncrementTick+0x158>)
 80122f0:	6013      	str	r3, [r2, #0]
 80122f2:	f000 fadb 	bl	80128ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80122f6:	4b3c      	ldr	r3, [pc, #240]	; (80123e8 <xTaskIncrementTick+0x15c>)
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	693a      	ldr	r2, [r7, #16]
 80122fc:	429a      	cmp	r2, r3
 80122fe:	d349      	bcc.n	8012394 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012300:	4b36      	ldr	r3, [pc, #216]	; (80123dc <xTaskIncrementTick+0x150>)
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d104      	bne.n	8012314 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801230a:	4b37      	ldr	r3, [pc, #220]	; (80123e8 <xTaskIncrementTick+0x15c>)
 801230c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012310:	601a      	str	r2, [r3, #0]
					break;
 8012312:	e03f      	b.n	8012394 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012314:	4b31      	ldr	r3, [pc, #196]	; (80123dc <xTaskIncrementTick+0x150>)
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	68db      	ldr	r3, [r3, #12]
 801231a:	68db      	ldr	r3, [r3, #12]
 801231c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801231e:	68bb      	ldr	r3, [r7, #8]
 8012320:	685b      	ldr	r3, [r3, #4]
 8012322:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012324:	693a      	ldr	r2, [r7, #16]
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	429a      	cmp	r2, r3
 801232a:	d203      	bcs.n	8012334 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801232c:	4a2e      	ldr	r2, [pc, #184]	; (80123e8 <xTaskIncrementTick+0x15c>)
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012332:	e02f      	b.n	8012394 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012334:	68bb      	ldr	r3, [r7, #8]
 8012336:	3304      	adds	r3, #4
 8012338:	4618      	mov	r0, r3
 801233a:	f7fe fbdd 	bl	8010af8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801233e:	68bb      	ldr	r3, [r7, #8]
 8012340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012342:	2b00      	cmp	r3, #0
 8012344:	d004      	beq.n	8012350 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012346:	68bb      	ldr	r3, [r7, #8]
 8012348:	3318      	adds	r3, #24
 801234a:	4618      	mov	r0, r3
 801234c:	f7fe fbd4 	bl	8010af8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012350:	68bb      	ldr	r3, [r7, #8]
 8012352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012354:	4b25      	ldr	r3, [pc, #148]	; (80123ec <xTaskIncrementTick+0x160>)
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	429a      	cmp	r2, r3
 801235a:	d903      	bls.n	8012364 <xTaskIncrementTick+0xd8>
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012360:	4a22      	ldr	r2, [pc, #136]	; (80123ec <xTaskIncrementTick+0x160>)
 8012362:	6013      	str	r3, [r2, #0]
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012368:	4613      	mov	r3, r2
 801236a:	009b      	lsls	r3, r3, #2
 801236c:	4413      	add	r3, r2
 801236e:	009b      	lsls	r3, r3, #2
 8012370:	4a1f      	ldr	r2, [pc, #124]	; (80123f0 <xTaskIncrementTick+0x164>)
 8012372:	441a      	add	r2, r3
 8012374:	68bb      	ldr	r3, [r7, #8]
 8012376:	3304      	adds	r3, #4
 8012378:	4619      	mov	r1, r3
 801237a:	4610      	mov	r0, r2
 801237c:	f7fe fb5f 	bl	8010a3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012384:	4b1b      	ldr	r3, [pc, #108]	; (80123f4 <xTaskIncrementTick+0x168>)
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801238a:	429a      	cmp	r2, r3
 801238c:	d3b8      	bcc.n	8012300 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801238e:	2301      	movs	r3, #1
 8012390:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012392:	e7b5      	b.n	8012300 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012394:	4b17      	ldr	r3, [pc, #92]	; (80123f4 <xTaskIncrementTick+0x168>)
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801239a:	4915      	ldr	r1, [pc, #84]	; (80123f0 <xTaskIncrementTick+0x164>)
 801239c:	4613      	mov	r3, r2
 801239e:	009b      	lsls	r3, r3, #2
 80123a0:	4413      	add	r3, r2
 80123a2:	009b      	lsls	r3, r3, #2
 80123a4:	440b      	add	r3, r1
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	2b01      	cmp	r3, #1
 80123aa:	d901      	bls.n	80123b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80123ac:	2301      	movs	r3, #1
 80123ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80123b0:	4b11      	ldr	r3, [pc, #68]	; (80123f8 <xTaskIncrementTick+0x16c>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d007      	beq.n	80123c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80123b8:	2301      	movs	r3, #1
 80123ba:	617b      	str	r3, [r7, #20]
 80123bc:	e004      	b.n	80123c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80123be:	4b0f      	ldr	r3, [pc, #60]	; (80123fc <xTaskIncrementTick+0x170>)
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	3301      	adds	r3, #1
 80123c4:	4a0d      	ldr	r2, [pc, #52]	; (80123fc <xTaskIncrementTick+0x170>)
 80123c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80123c8:	697b      	ldr	r3, [r7, #20]
}
 80123ca:	4618      	mov	r0, r3
 80123cc:	3718      	adds	r7, #24
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}
 80123d2:	bf00      	nop
 80123d4:	200082bc 	.word	0x200082bc
 80123d8:	20008298 	.word	0x20008298
 80123dc:	2000824c 	.word	0x2000824c
 80123e0:	20008250 	.word	0x20008250
 80123e4:	200082ac 	.word	0x200082ac
 80123e8:	200082b4 	.word	0x200082b4
 80123ec:	2000829c 	.word	0x2000829c
 80123f0:	20007dc4 	.word	0x20007dc4
 80123f4:	20007dc0 	.word	0x20007dc0
 80123f8:	200082a8 	.word	0x200082a8
 80123fc:	200082a4 	.word	0x200082a4

08012400 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012400:	b480      	push	{r7}
 8012402:	b085      	sub	sp, #20
 8012404:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012406:	4b2a      	ldr	r3, [pc, #168]	; (80124b0 <vTaskSwitchContext+0xb0>)
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d003      	beq.n	8012416 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801240e:	4b29      	ldr	r3, [pc, #164]	; (80124b4 <vTaskSwitchContext+0xb4>)
 8012410:	2201      	movs	r2, #1
 8012412:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012414:	e046      	b.n	80124a4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8012416:	4b27      	ldr	r3, [pc, #156]	; (80124b4 <vTaskSwitchContext+0xb4>)
 8012418:	2200      	movs	r2, #0
 801241a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801241c:	4b26      	ldr	r3, [pc, #152]	; (80124b8 <vTaskSwitchContext+0xb8>)
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	60fb      	str	r3, [r7, #12]
 8012422:	e010      	b.n	8012446 <vTaskSwitchContext+0x46>
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d10a      	bne.n	8012440 <vTaskSwitchContext+0x40>
	__asm volatile
 801242a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801242e:	f383 8811 	msr	BASEPRI, r3
 8012432:	f3bf 8f6f 	isb	sy
 8012436:	f3bf 8f4f 	dsb	sy
 801243a:	607b      	str	r3, [r7, #4]
}
 801243c:	bf00      	nop
 801243e:	e7fe      	b.n	801243e <vTaskSwitchContext+0x3e>
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	3b01      	subs	r3, #1
 8012444:	60fb      	str	r3, [r7, #12]
 8012446:	491d      	ldr	r1, [pc, #116]	; (80124bc <vTaskSwitchContext+0xbc>)
 8012448:	68fa      	ldr	r2, [r7, #12]
 801244a:	4613      	mov	r3, r2
 801244c:	009b      	lsls	r3, r3, #2
 801244e:	4413      	add	r3, r2
 8012450:	009b      	lsls	r3, r3, #2
 8012452:	440b      	add	r3, r1
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d0e4      	beq.n	8012424 <vTaskSwitchContext+0x24>
 801245a:	68fa      	ldr	r2, [r7, #12]
 801245c:	4613      	mov	r3, r2
 801245e:	009b      	lsls	r3, r3, #2
 8012460:	4413      	add	r3, r2
 8012462:	009b      	lsls	r3, r3, #2
 8012464:	4a15      	ldr	r2, [pc, #84]	; (80124bc <vTaskSwitchContext+0xbc>)
 8012466:	4413      	add	r3, r2
 8012468:	60bb      	str	r3, [r7, #8]
 801246a:	68bb      	ldr	r3, [r7, #8]
 801246c:	685b      	ldr	r3, [r3, #4]
 801246e:	685a      	ldr	r2, [r3, #4]
 8012470:	68bb      	ldr	r3, [r7, #8]
 8012472:	605a      	str	r2, [r3, #4]
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	685a      	ldr	r2, [r3, #4]
 8012478:	68bb      	ldr	r3, [r7, #8]
 801247a:	3308      	adds	r3, #8
 801247c:	429a      	cmp	r2, r3
 801247e:	d104      	bne.n	801248a <vTaskSwitchContext+0x8a>
 8012480:	68bb      	ldr	r3, [r7, #8]
 8012482:	685b      	ldr	r3, [r3, #4]
 8012484:	685a      	ldr	r2, [r3, #4]
 8012486:	68bb      	ldr	r3, [r7, #8]
 8012488:	605a      	str	r2, [r3, #4]
 801248a:	68bb      	ldr	r3, [r7, #8]
 801248c:	685b      	ldr	r3, [r3, #4]
 801248e:	68db      	ldr	r3, [r3, #12]
 8012490:	4a0b      	ldr	r2, [pc, #44]	; (80124c0 <vTaskSwitchContext+0xc0>)
 8012492:	6013      	str	r3, [r2, #0]
 8012494:	4a08      	ldr	r2, [pc, #32]	; (80124b8 <vTaskSwitchContext+0xb8>)
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801249a:	4b09      	ldr	r3, [pc, #36]	; (80124c0 <vTaskSwitchContext+0xc0>)
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	3354      	adds	r3, #84	; 0x54
 80124a0:	4a08      	ldr	r2, [pc, #32]	; (80124c4 <vTaskSwitchContext+0xc4>)
 80124a2:	6013      	str	r3, [r2, #0]
}
 80124a4:	bf00      	nop
 80124a6:	3714      	adds	r7, #20
 80124a8:	46bd      	mov	sp, r7
 80124aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ae:	4770      	bx	lr
 80124b0:	200082bc 	.word	0x200082bc
 80124b4:	200082a8 	.word	0x200082a8
 80124b8:	2000829c 	.word	0x2000829c
 80124bc:	20007dc4 	.word	0x20007dc4
 80124c0:	20007dc0 	.word	0x20007dc0
 80124c4:	2000022c 	.word	0x2000022c

080124c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b084      	sub	sp, #16
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
 80124d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d10a      	bne.n	80124ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80124d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124dc:	f383 8811 	msr	BASEPRI, r3
 80124e0:	f3bf 8f6f 	isb	sy
 80124e4:	f3bf 8f4f 	dsb	sy
 80124e8:	60fb      	str	r3, [r7, #12]
}
 80124ea:	bf00      	nop
 80124ec:	e7fe      	b.n	80124ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80124ee:	4b07      	ldr	r3, [pc, #28]	; (801250c <vTaskPlaceOnEventList+0x44>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	3318      	adds	r3, #24
 80124f4:	4619      	mov	r1, r3
 80124f6:	6878      	ldr	r0, [r7, #4]
 80124f8:	f7fe fac5 	bl	8010a86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80124fc:	2101      	movs	r1, #1
 80124fe:	6838      	ldr	r0, [r7, #0]
 8012500:	f000 fb7e 	bl	8012c00 <prvAddCurrentTaskToDelayedList>
}
 8012504:	bf00      	nop
 8012506:	3710      	adds	r7, #16
 8012508:	46bd      	mov	sp, r7
 801250a:	bd80      	pop	{r7, pc}
 801250c:	20007dc0 	.word	0x20007dc0

08012510 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012510:	b580      	push	{r7, lr}
 8012512:	b086      	sub	sp, #24
 8012514:	af00      	add	r7, sp, #0
 8012516:	60f8      	str	r0, [r7, #12]
 8012518:	60b9      	str	r1, [r7, #8]
 801251a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d10a      	bne.n	8012538 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8012522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012526:	f383 8811 	msr	BASEPRI, r3
 801252a:	f3bf 8f6f 	isb	sy
 801252e:	f3bf 8f4f 	dsb	sy
 8012532:	617b      	str	r3, [r7, #20]
}
 8012534:	bf00      	nop
 8012536:	e7fe      	b.n	8012536 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012538:	4b0a      	ldr	r3, [pc, #40]	; (8012564 <vTaskPlaceOnEventListRestricted+0x54>)
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	3318      	adds	r3, #24
 801253e:	4619      	mov	r1, r3
 8012540:	68f8      	ldr	r0, [r7, #12]
 8012542:	f7fe fa7c 	bl	8010a3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d002      	beq.n	8012552 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801254c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012550:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012552:	6879      	ldr	r1, [r7, #4]
 8012554:	68b8      	ldr	r0, [r7, #8]
 8012556:	f000 fb53 	bl	8012c00 <prvAddCurrentTaskToDelayedList>
	}
 801255a:	bf00      	nop
 801255c:	3718      	adds	r7, #24
 801255e:	46bd      	mov	sp, r7
 8012560:	bd80      	pop	{r7, pc}
 8012562:	bf00      	nop
 8012564:	20007dc0 	.word	0x20007dc0

08012568 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b086      	sub	sp, #24
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	68db      	ldr	r3, [r3, #12]
 8012574:	68db      	ldr	r3, [r3, #12]
 8012576:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012578:	693b      	ldr	r3, [r7, #16]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d10a      	bne.n	8012594 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801257e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012582:	f383 8811 	msr	BASEPRI, r3
 8012586:	f3bf 8f6f 	isb	sy
 801258a:	f3bf 8f4f 	dsb	sy
 801258e:	60fb      	str	r3, [r7, #12]
}
 8012590:	bf00      	nop
 8012592:	e7fe      	b.n	8012592 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012594:	693b      	ldr	r3, [r7, #16]
 8012596:	3318      	adds	r3, #24
 8012598:	4618      	mov	r0, r3
 801259a:	f7fe faad 	bl	8010af8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801259e:	4b1e      	ldr	r3, [pc, #120]	; (8012618 <xTaskRemoveFromEventList+0xb0>)
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d11d      	bne.n	80125e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80125a6:	693b      	ldr	r3, [r7, #16]
 80125a8:	3304      	adds	r3, #4
 80125aa:	4618      	mov	r0, r3
 80125ac:	f7fe faa4 	bl	8010af8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80125b0:	693b      	ldr	r3, [r7, #16]
 80125b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125b4:	4b19      	ldr	r3, [pc, #100]	; (801261c <xTaskRemoveFromEventList+0xb4>)
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	429a      	cmp	r2, r3
 80125ba:	d903      	bls.n	80125c4 <xTaskRemoveFromEventList+0x5c>
 80125bc:	693b      	ldr	r3, [r7, #16]
 80125be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125c0:	4a16      	ldr	r2, [pc, #88]	; (801261c <xTaskRemoveFromEventList+0xb4>)
 80125c2:	6013      	str	r3, [r2, #0]
 80125c4:	693b      	ldr	r3, [r7, #16]
 80125c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125c8:	4613      	mov	r3, r2
 80125ca:	009b      	lsls	r3, r3, #2
 80125cc:	4413      	add	r3, r2
 80125ce:	009b      	lsls	r3, r3, #2
 80125d0:	4a13      	ldr	r2, [pc, #76]	; (8012620 <xTaskRemoveFromEventList+0xb8>)
 80125d2:	441a      	add	r2, r3
 80125d4:	693b      	ldr	r3, [r7, #16]
 80125d6:	3304      	adds	r3, #4
 80125d8:	4619      	mov	r1, r3
 80125da:	4610      	mov	r0, r2
 80125dc:	f7fe fa2f 	bl	8010a3e <vListInsertEnd>
 80125e0:	e005      	b.n	80125ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80125e2:	693b      	ldr	r3, [r7, #16]
 80125e4:	3318      	adds	r3, #24
 80125e6:	4619      	mov	r1, r3
 80125e8:	480e      	ldr	r0, [pc, #56]	; (8012624 <xTaskRemoveFromEventList+0xbc>)
 80125ea:	f7fe fa28 	bl	8010a3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80125ee:	693b      	ldr	r3, [r7, #16]
 80125f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125f2:	4b0d      	ldr	r3, [pc, #52]	; (8012628 <xTaskRemoveFromEventList+0xc0>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125f8:	429a      	cmp	r2, r3
 80125fa:	d905      	bls.n	8012608 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80125fc:	2301      	movs	r3, #1
 80125fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012600:	4b0a      	ldr	r3, [pc, #40]	; (801262c <xTaskRemoveFromEventList+0xc4>)
 8012602:	2201      	movs	r2, #1
 8012604:	601a      	str	r2, [r3, #0]
 8012606:	e001      	b.n	801260c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012608:	2300      	movs	r3, #0
 801260a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801260c:	697b      	ldr	r3, [r7, #20]
}
 801260e:	4618      	mov	r0, r3
 8012610:	3718      	adds	r7, #24
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}
 8012616:	bf00      	nop
 8012618:	200082bc 	.word	0x200082bc
 801261c:	2000829c 	.word	0x2000829c
 8012620:	20007dc4 	.word	0x20007dc4
 8012624:	20008254 	.word	0x20008254
 8012628:	20007dc0 	.word	0x20007dc0
 801262c:	200082a8 	.word	0x200082a8

08012630 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012630:	b480      	push	{r7}
 8012632:	b083      	sub	sp, #12
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012638:	4b06      	ldr	r3, [pc, #24]	; (8012654 <vTaskInternalSetTimeOutState+0x24>)
 801263a:	681a      	ldr	r2, [r3, #0]
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012640:	4b05      	ldr	r3, [pc, #20]	; (8012658 <vTaskInternalSetTimeOutState+0x28>)
 8012642:	681a      	ldr	r2, [r3, #0]
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	605a      	str	r2, [r3, #4]
}
 8012648:	bf00      	nop
 801264a:	370c      	adds	r7, #12
 801264c:	46bd      	mov	sp, r7
 801264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012652:	4770      	bx	lr
 8012654:	200082ac 	.word	0x200082ac
 8012658:	20008298 	.word	0x20008298

0801265c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b088      	sub	sp, #32
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
 8012664:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d10a      	bne.n	8012682 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801266c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012670:	f383 8811 	msr	BASEPRI, r3
 8012674:	f3bf 8f6f 	isb	sy
 8012678:	f3bf 8f4f 	dsb	sy
 801267c:	613b      	str	r3, [r7, #16]
}
 801267e:	bf00      	nop
 8012680:	e7fe      	b.n	8012680 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012682:	683b      	ldr	r3, [r7, #0]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d10a      	bne.n	801269e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012688:	f04f 0350 	mov.w	r3, #80	; 0x50
 801268c:	f383 8811 	msr	BASEPRI, r3
 8012690:	f3bf 8f6f 	isb	sy
 8012694:	f3bf 8f4f 	dsb	sy
 8012698:	60fb      	str	r3, [r7, #12]
}
 801269a:	bf00      	nop
 801269c:	e7fe      	b.n	801269c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801269e:	f000 ff81 	bl	80135a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80126a2:	4b1d      	ldr	r3, [pc, #116]	; (8012718 <xTaskCheckForTimeOut+0xbc>)
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	685b      	ldr	r3, [r3, #4]
 80126ac:	69ba      	ldr	r2, [r7, #24]
 80126ae:	1ad3      	subs	r3, r2, r3
 80126b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80126b2:	683b      	ldr	r3, [r7, #0]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80126ba:	d102      	bne.n	80126c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80126bc:	2300      	movs	r3, #0
 80126be:	61fb      	str	r3, [r7, #28]
 80126c0:	e023      	b.n	801270a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	681a      	ldr	r2, [r3, #0]
 80126c6:	4b15      	ldr	r3, [pc, #84]	; (801271c <xTaskCheckForTimeOut+0xc0>)
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	429a      	cmp	r2, r3
 80126cc:	d007      	beq.n	80126de <xTaskCheckForTimeOut+0x82>
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	685b      	ldr	r3, [r3, #4]
 80126d2:	69ba      	ldr	r2, [r7, #24]
 80126d4:	429a      	cmp	r2, r3
 80126d6:	d302      	bcc.n	80126de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80126d8:	2301      	movs	r3, #1
 80126da:	61fb      	str	r3, [r7, #28]
 80126dc:	e015      	b.n	801270a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	697a      	ldr	r2, [r7, #20]
 80126e4:	429a      	cmp	r2, r3
 80126e6:	d20b      	bcs.n	8012700 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	681a      	ldr	r2, [r3, #0]
 80126ec:	697b      	ldr	r3, [r7, #20]
 80126ee:	1ad2      	subs	r2, r2, r3
 80126f0:	683b      	ldr	r3, [r7, #0]
 80126f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f7ff ff9b 	bl	8012630 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80126fa:	2300      	movs	r3, #0
 80126fc:	61fb      	str	r3, [r7, #28]
 80126fe:	e004      	b.n	801270a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	2200      	movs	r2, #0
 8012704:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012706:	2301      	movs	r3, #1
 8012708:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801270a:	f000 ff7b 	bl	8013604 <vPortExitCritical>

	return xReturn;
 801270e:	69fb      	ldr	r3, [r7, #28]
}
 8012710:	4618      	mov	r0, r3
 8012712:	3720      	adds	r7, #32
 8012714:	46bd      	mov	sp, r7
 8012716:	bd80      	pop	{r7, pc}
 8012718:	20008298 	.word	0x20008298
 801271c:	200082ac 	.word	0x200082ac

08012720 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012720:	b480      	push	{r7}
 8012722:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012724:	4b03      	ldr	r3, [pc, #12]	; (8012734 <vTaskMissedYield+0x14>)
 8012726:	2201      	movs	r2, #1
 8012728:	601a      	str	r2, [r3, #0]
}
 801272a:	bf00      	nop
 801272c:	46bd      	mov	sp, r7
 801272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012732:	4770      	bx	lr
 8012734:	200082a8 	.word	0x200082a8

08012738 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b082      	sub	sp, #8
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012740:	f000 f852 	bl	80127e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012744:	4b06      	ldr	r3, [pc, #24]	; (8012760 <prvIdleTask+0x28>)
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	2b01      	cmp	r3, #1
 801274a:	d9f9      	bls.n	8012740 <prvIdleTask+0x8>
			{
				taskYIELD();
 801274c:	4b05      	ldr	r3, [pc, #20]	; (8012764 <prvIdleTask+0x2c>)
 801274e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012752:	601a      	str	r2, [r3, #0]
 8012754:	f3bf 8f4f 	dsb	sy
 8012758:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801275c:	e7f0      	b.n	8012740 <prvIdleTask+0x8>
 801275e:	bf00      	nop
 8012760:	20007dc4 	.word	0x20007dc4
 8012764:	e000ed04 	.word	0xe000ed04

08012768 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b082      	sub	sp, #8
 801276c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801276e:	2300      	movs	r3, #0
 8012770:	607b      	str	r3, [r7, #4]
 8012772:	e00c      	b.n	801278e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012774:	687a      	ldr	r2, [r7, #4]
 8012776:	4613      	mov	r3, r2
 8012778:	009b      	lsls	r3, r3, #2
 801277a:	4413      	add	r3, r2
 801277c:	009b      	lsls	r3, r3, #2
 801277e:	4a12      	ldr	r2, [pc, #72]	; (80127c8 <prvInitialiseTaskLists+0x60>)
 8012780:	4413      	add	r3, r2
 8012782:	4618      	mov	r0, r3
 8012784:	f7fe f92e 	bl	80109e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	3301      	adds	r3, #1
 801278c:	607b      	str	r3, [r7, #4]
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	2b37      	cmp	r3, #55	; 0x37
 8012792:	d9ef      	bls.n	8012774 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012794:	480d      	ldr	r0, [pc, #52]	; (80127cc <prvInitialiseTaskLists+0x64>)
 8012796:	f7fe f925 	bl	80109e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801279a:	480d      	ldr	r0, [pc, #52]	; (80127d0 <prvInitialiseTaskLists+0x68>)
 801279c:	f7fe f922 	bl	80109e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80127a0:	480c      	ldr	r0, [pc, #48]	; (80127d4 <prvInitialiseTaskLists+0x6c>)
 80127a2:	f7fe f91f 	bl	80109e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80127a6:	480c      	ldr	r0, [pc, #48]	; (80127d8 <prvInitialiseTaskLists+0x70>)
 80127a8:	f7fe f91c 	bl	80109e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80127ac:	480b      	ldr	r0, [pc, #44]	; (80127dc <prvInitialiseTaskLists+0x74>)
 80127ae:	f7fe f919 	bl	80109e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80127b2:	4b0b      	ldr	r3, [pc, #44]	; (80127e0 <prvInitialiseTaskLists+0x78>)
 80127b4:	4a05      	ldr	r2, [pc, #20]	; (80127cc <prvInitialiseTaskLists+0x64>)
 80127b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80127b8:	4b0a      	ldr	r3, [pc, #40]	; (80127e4 <prvInitialiseTaskLists+0x7c>)
 80127ba:	4a05      	ldr	r2, [pc, #20]	; (80127d0 <prvInitialiseTaskLists+0x68>)
 80127bc:	601a      	str	r2, [r3, #0]
}
 80127be:	bf00      	nop
 80127c0:	3708      	adds	r7, #8
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bd80      	pop	{r7, pc}
 80127c6:	bf00      	nop
 80127c8:	20007dc4 	.word	0x20007dc4
 80127cc:	20008224 	.word	0x20008224
 80127d0:	20008238 	.word	0x20008238
 80127d4:	20008254 	.word	0x20008254
 80127d8:	20008268 	.word	0x20008268
 80127dc:	20008280 	.word	0x20008280
 80127e0:	2000824c 	.word	0x2000824c
 80127e4:	20008250 	.word	0x20008250

080127e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b082      	sub	sp, #8
 80127ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80127ee:	e019      	b.n	8012824 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80127f0:	f000 fed8 	bl	80135a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80127f4:	4b10      	ldr	r3, [pc, #64]	; (8012838 <prvCheckTasksWaitingTermination+0x50>)
 80127f6:	68db      	ldr	r3, [r3, #12]
 80127f8:	68db      	ldr	r3, [r3, #12]
 80127fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	3304      	adds	r3, #4
 8012800:	4618      	mov	r0, r3
 8012802:	f7fe f979 	bl	8010af8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012806:	4b0d      	ldr	r3, [pc, #52]	; (801283c <prvCheckTasksWaitingTermination+0x54>)
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	3b01      	subs	r3, #1
 801280c:	4a0b      	ldr	r2, [pc, #44]	; (801283c <prvCheckTasksWaitingTermination+0x54>)
 801280e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012810:	4b0b      	ldr	r3, [pc, #44]	; (8012840 <prvCheckTasksWaitingTermination+0x58>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	3b01      	subs	r3, #1
 8012816:	4a0a      	ldr	r2, [pc, #40]	; (8012840 <prvCheckTasksWaitingTermination+0x58>)
 8012818:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801281a:	f000 fef3 	bl	8013604 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801281e:	6878      	ldr	r0, [r7, #4]
 8012820:	f000 f810 	bl	8012844 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012824:	4b06      	ldr	r3, [pc, #24]	; (8012840 <prvCheckTasksWaitingTermination+0x58>)
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d1e1      	bne.n	80127f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801282c:	bf00      	nop
 801282e:	bf00      	nop
 8012830:	3708      	adds	r7, #8
 8012832:	46bd      	mov	sp, r7
 8012834:	bd80      	pop	{r7, pc}
 8012836:	bf00      	nop
 8012838:	20008268 	.word	0x20008268
 801283c:	20008294 	.word	0x20008294
 8012840:	2000827c 	.word	0x2000827c

08012844 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012844:	b580      	push	{r7, lr}
 8012846:	b084      	sub	sp, #16
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	3354      	adds	r3, #84	; 0x54
 8012850:	4618      	mov	r0, r3
 8012852:	f002 f8f1 	bl	8014a38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801285c:	2b00      	cmp	r3, #0
 801285e:	d108      	bne.n	8012872 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012864:	4618      	mov	r0, r3
 8012866:	f001 f863 	bl	8013930 <vPortFree>
				vPortFree( pxTCB );
 801286a:	6878      	ldr	r0, [r7, #4]
 801286c:	f001 f860 	bl	8013930 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012870:	e018      	b.n	80128a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8012878:	2b01      	cmp	r3, #1
 801287a:	d103      	bne.n	8012884 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801287c:	6878      	ldr	r0, [r7, #4]
 801287e:	f001 f857 	bl	8013930 <vPortFree>
	}
 8012882:	e00f      	b.n	80128a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801288a:	2b02      	cmp	r3, #2
 801288c:	d00a      	beq.n	80128a4 <prvDeleteTCB+0x60>
	__asm volatile
 801288e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012892:	f383 8811 	msr	BASEPRI, r3
 8012896:	f3bf 8f6f 	isb	sy
 801289a:	f3bf 8f4f 	dsb	sy
 801289e:	60fb      	str	r3, [r7, #12]
}
 80128a0:	bf00      	nop
 80128a2:	e7fe      	b.n	80128a2 <prvDeleteTCB+0x5e>
	}
 80128a4:	bf00      	nop
 80128a6:	3710      	adds	r7, #16
 80128a8:	46bd      	mov	sp, r7
 80128aa:	bd80      	pop	{r7, pc}

080128ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80128ac:	b480      	push	{r7}
 80128ae:	b083      	sub	sp, #12
 80128b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80128b2:	4b0c      	ldr	r3, [pc, #48]	; (80128e4 <prvResetNextTaskUnblockTime+0x38>)
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d104      	bne.n	80128c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80128bc:	4b0a      	ldr	r3, [pc, #40]	; (80128e8 <prvResetNextTaskUnblockTime+0x3c>)
 80128be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80128c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80128c4:	e008      	b.n	80128d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80128c6:	4b07      	ldr	r3, [pc, #28]	; (80128e4 <prvResetNextTaskUnblockTime+0x38>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	68db      	ldr	r3, [r3, #12]
 80128cc:	68db      	ldr	r3, [r3, #12]
 80128ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	685b      	ldr	r3, [r3, #4]
 80128d4:	4a04      	ldr	r2, [pc, #16]	; (80128e8 <prvResetNextTaskUnblockTime+0x3c>)
 80128d6:	6013      	str	r3, [r2, #0]
}
 80128d8:	bf00      	nop
 80128da:	370c      	adds	r7, #12
 80128dc:	46bd      	mov	sp, r7
 80128de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e2:	4770      	bx	lr
 80128e4:	2000824c 	.word	0x2000824c
 80128e8:	200082b4 	.word	0x200082b4

080128ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80128ec:	b480      	push	{r7}
 80128ee:	b083      	sub	sp, #12
 80128f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80128f2:	4b0b      	ldr	r3, [pc, #44]	; (8012920 <xTaskGetSchedulerState+0x34>)
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d102      	bne.n	8012900 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80128fa:	2301      	movs	r3, #1
 80128fc:	607b      	str	r3, [r7, #4]
 80128fe:	e008      	b.n	8012912 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012900:	4b08      	ldr	r3, [pc, #32]	; (8012924 <xTaskGetSchedulerState+0x38>)
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d102      	bne.n	801290e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012908:	2302      	movs	r3, #2
 801290a:	607b      	str	r3, [r7, #4]
 801290c:	e001      	b.n	8012912 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801290e:	2300      	movs	r3, #0
 8012910:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012912:	687b      	ldr	r3, [r7, #4]
	}
 8012914:	4618      	mov	r0, r3
 8012916:	370c      	adds	r7, #12
 8012918:	46bd      	mov	sp, r7
 801291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291e:	4770      	bx	lr
 8012920:	200082a0 	.word	0x200082a0
 8012924:	200082bc 	.word	0x200082bc

08012928 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012928:	b580      	push	{r7, lr}
 801292a:	b084      	sub	sp, #16
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012934:	2300      	movs	r3, #0
 8012936:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d051      	beq.n	80129e2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801293e:	68bb      	ldr	r3, [r7, #8]
 8012940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012942:	4b2a      	ldr	r3, [pc, #168]	; (80129ec <xTaskPriorityInherit+0xc4>)
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012948:	429a      	cmp	r2, r3
 801294a:	d241      	bcs.n	80129d0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801294c:	68bb      	ldr	r3, [r7, #8]
 801294e:	699b      	ldr	r3, [r3, #24]
 8012950:	2b00      	cmp	r3, #0
 8012952:	db06      	blt.n	8012962 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012954:	4b25      	ldr	r3, [pc, #148]	; (80129ec <xTaskPriorityInherit+0xc4>)
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801295a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801295e:	68bb      	ldr	r3, [r7, #8]
 8012960:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012962:	68bb      	ldr	r3, [r7, #8]
 8012964:	6959      	ldr	r1, [r3, #20]
 8012966:	68bb      	ldr	r3, [r7, #8]
 8012968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801296a:	4613      	mov	r3, r2
 801296c:	009b      	lsls	r3, r3, #2
 801296e:	4413      	add	r3, r2
 8012970:	009b      	lsls	r3, r3, #2
 8012972:	4a1f      	ldr	r2, [pc, #124]	; (80129f0 <xTaskPriorityInherit+0xc8>)
 8012974:	4413      	add	r3, r2
 8012976:	4299      	cmp	r1, r3
 8012978:	d122      	bne.n	80129c0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801297a:	68bb      	ldr	r3, [r7, #8]
 801297c:	3304      	adds	r3, #4
 801297e:	4618      	mov	r0, r3
 8012980:	f7fe f8ba 	bl	8010af8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012984:	4b19      	ldr	r3, [pc, #100]	; (80129ec <xTaskPriorityInherit+0xc4>)
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801298a:	68bb      	ldr	r3, [r7, #8]
 801298c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801298e:	68bb      	ldr	r3, [r7, #8]
 8012990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012992:	4b18      	ldr	r3, [pc, #96]	; (80129f4 <xTaskPriorityInherit+0xcc>)
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	429a      	cmp	r2, r3
 8012998:	d903      	bls.n	80129a2 <xTaskPriorityInherit+0x7a>
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801299e:	4a15      	ldr	r2, [pc, #84]	; (80129f4 <xTaskPriorityInherit+0xcc>)
 80129a0:	6013      	str	r3, [r2, #0]
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129a6:	4613      	mov	r3, r2
 80129a8:	009b      	lsls	r3, r3, #2
 80129aa:	4413      	add	r3, r2
 80129ac:	009b      	lsls	r3, r3, #2
 80129ae:	4a10      	ldr	r2, [pc, #64]	; (80129f0 <xTaskPriorityInherit+0xc8>)
 80129b0:	441a      	add	r2, r3
 80129b2:	68bb      	ldr	r3, [r7, #8]
 80129b4:	3304      	adds	r3, #4
 80129b6:	4619      	mov	r1, r3
 80129b8:	4610      	mov	r0, r2
 80129ba:	f7fe f840 	bl	8010a3e <vListInsertEnd>
 80129be:	e004      	b.n	80129ca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80129c0:	4b0a      	ldr	r3, [pc, #40]	; (80129ec <xTaskPriorityInherit+0xc4>)
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129c6:	68bb      	ldr	r3, [r7, #8]
 80129c8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80129ca:	2301      	movs	r3, #1
 80129cc:	60fb      	str	r3, [r7, #12]
 80129ce:	e008      	b.n	80129e2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80129d0:	68bb      	ldr	r3, [r7, #8]
 80129d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80129d4:	4b05      	ldr	r3, [pc, #20]	; (80129ec <xTaskPriorityInherit+0xc4>)
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129da:	429a      	cmp	r2, r3
 80129dc:	d201      	bcs.n	80129e2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80129de:	2301      	movs	r3, #1
 80129e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80129e2:	68fb      	ldr	r3, [r7, #12]
	}
 80129e4:	4618      	mov	r0, r3
 80129e6:	3710      	adds	r7, #16
 80129e8:	46bd      	mov	sp, r7
 80129ea:	bd80      	pop	{r7, pc}
 80129ec:	20007dc0 	.word	0x20007dc0
 80129f0:	20007dc4 	.word	0x20007dc4
 80129f4:	2000829c 	.word	0x2000829c

080129f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b086      	sub	sp, #24
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012a04:	2300      	movs	r3, #0
 8012a06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d056      	beq.n	8012abc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012a0e:	4b2e      	ldr	r3, [pc, #184]	; (8012ac8 <xTaskPriorityDisinherit+0xd0>)
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	693a      	ldr	r2, [r7, #16]
 8012a14:	429a      	cmp	r2, r3
 8012a16:	d00a      	beq.n	8012a2e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a1c:	f383 8811 	msr	BASEPRI, r3
 8012a20:	f3bf 8f6f 	isb	sy
 8012a24:	f3bf 8f4f 	dsb	sy
 8012a28:	60fb      	str	r3, [r7, #12]
}
 8012a2a:	bf00      	nop
 8012a2c:	e7fe      	b.n	8012a2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012a2e:	693b      	ldr	r3, [r7, #16]
 8012a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d10a      	bne.n	8012a4c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a3a:	f383 8811 	msr	BASEPRI, r3
 8012a3e:	f3bf 8f6f 	isb	sy
 8012a42:	f3bf 8f4f 	dsb	sy
 8012a46:	60bb      	str	r3, [r7, #8]
}
 8012a48:	bf00      	nop
 8012a4a:	e7fe      	b.n	8012a4a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012a4c:	693b      	ldr	r3, [r7, #16]
 8012a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a50:	1e5a      	subs	r2, r3, #1
 8012a52:	693b      	ldr	r3, [r7, #16]
 8012a54:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012a56:	693b      	ldr	r3, [r7, #16]
 8012a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a5a:	693b      	ldr	r3, [r7, #16]
 8012a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012a5e:	429a      	cmp	r2, r3
 8012a60:	d02c      	beq.n	8012abc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012a62:	693b      	ldr	r3, [r7, #16]
 8012a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d128      	bne.n	8012abc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012a6a:	693b      	ldr	r3, [r7, #16]
 8012a6c:	3304      	adds	r3, #4
 8012a6e:	4618      	mov	r0, r3
 8012a70:	f7fe f842 	bl	8010af8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012a74:	693b      	ldr	r3, [r7, #16]
 8012a76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012a78:	693b      	ldr	r3, [r7, #16]
 8012a7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a7c:	693b      	ldr	r3, [r7, #16]
 8012a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012a84:	693b      	ldr	r3, [r7, #16]
 8012a86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012a88:	693b      	ldr	r3, [r7, #16]
 8012a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a8c:	4b0f      	ldr	r3, [pc, #60]	; (8012acc <xTaskPriorityDisinherit+0xd4>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	429a      	cmp	r2, r3
 8012a92:	d903      	bls.n	8012a9c <xTaskPriorityDisinherit+0xa4>
 8012a94:	693b      	ldr	r3, [r7, #16]
 8012a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a98:	4a0c      	ldr	r2, [pc, #48]	; (8012acc <xTaskPriorityDisinherit+0xd4>)
 8012a9a:	6013      	str	r3, [r2, #0]
 8012a9c:	693b      	ldr	r3, [r7, #16]
 8012a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012aa0:	4613      	mov	r3, r2
 8012aa2:	009b      	lsls	r3, r3, #2
 8012aa4:	4413      	add	r3, r2
 8012aa6:	009b      	lsls	r3, r3, #2
 8012aa8:	4a09      	ldr	r2, [pc, #36]	; (8012ad0 <xTaskPriorityDisinherit+0xd8>)
 8012aaa:	441a      	add	r2, r3
 8012aac:	693b      	ldr	r3, [r7, #16]
 8012aae:	3304      	adds	r3, #4
 8012ab0:	4619      	mov	r1, r3
 8012ab2:	4610      	mov	r0, r2
 8012ab4:	f7fd ffc3 	bl	8010a3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012ab8:	2301      	movs	r3, #1
 8012aba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012abc:	697b      	ldr	r3, [r7, #20]
	}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	3718      	adds	r7, #24
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}
 8012ac6:	bf00      	nop
 8012ac8:	20007dc0 	.word	0x20007dc0
 8012acc:	2000829c 	.word	0x2000829c
 8012ad0:	20007dc4 	.word	0x20007dc4

08012ad4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b088      	sub	sp, #32
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
 8012adc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012ae2:	2301      	movs	r3, #1
 8012ae4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d06a      	beq.n	8012bc2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012aec:	69bb      	ldr	r3, [r7, #24]
 8012aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d10a      	bne.n	8012b0a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8012af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012af8:	f383 8811 	msr	BASEPRI, r3
 8012afc:	f3bf 8f6f 	isb	sy
 8012b00:	f3bf 8f4f 	dsb	sy
 8012b04:	60fb      	str	r3, [r7, #12]
}
 8012b06:	bf00      	nop
 8012b08:	e7fe      	b.n	8012b08 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012b0a:	69bb      	ldr	r3, [r7, #24]
 8012b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b0e:	683a      	ldr	r2, [r7, #0]
 8012b10:	429a      	cmp	r2, r3
 8012b12:	d902      	bls.n	8012b1a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	61fb      	str	r3, [r7, #28]
 8012b18:	e002      	b.n	8012b20 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012b1a:	69bb      	ldr	r3, [r7, #24]
 8012b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b1e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012b20:	69bb      	ldr	r3, [r7, #24]
 8012b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b24:	69fa      	ldr	r2, [r7, #28]
 8012b26:	429a      	cmp	r2, r3
 8012b28:	d04b      	beq.n	8012bc2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012b2a:	69bb      	ldr	r3, [r7, #24]
 8012b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b2e:	697a      	ldr	r2, [r7, #20]
 8012b30:	429a      	cmp	r2, r3
 8012b32:	d146      	bne.n	8012bc2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012b34:	4b25      	ldr	r3, [pc, #148]	; (8012bcc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	69ba      	ldr	r2, [r7, #24]
 8012b3a:	429a      	cmp	r2, r3
 8012b3c:	d10a      	bne.n	8012b54 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8012b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b42:	f383 8811 	msr	BASEPRI, r3
 8012b46:	f3bf 8f6f 	isb	sy
 8012b4a:	f3bf 8f4f 	dsb	sy
 8012b4e:	60bb      	str	r3, [r7, #8]
}
 8012b50:	bf00      	nop
 8012b52:	e7fe      	b.n	8012b52 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012b54:	69bb      	ldr	r3, [r7, #24]
 8012b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b58:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012b5a:	69bb      	ldr	r3, [r7, #24]
 8012b5c:	69fa      	ldr	r2, [r7, #28]
 8012b5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012b60:	69bb      	ldr	r3, [r7, #24]
 8012b62:	699b      	ldr	r3, [r3, #24]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	db04      	blt.n	8012b72 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b68:	69fb      	ldr	r3, [r7, #28]
 8012b6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012b6e:	69bb      	ldr	r3, [r7, #24]
 8012b70:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012b72:	69bb      	ldr	r3, [r7, #24]
 8012b74:	6959      	ldr	r1, [r3, #20]
 8012b76:	693a      	ldr	r2, [r7, #16]
 8012b78:	4613      	mov	r3, r2
 8012b7a:	009b      	lsls	r3, r3, #2
 8012b7c:	4413      	add	r3, r2
 8012b7e:	009b      	lsls	r3, r3, #2
 8012b80:	4a13      	ldr	r2, [pc, #76]	; (8012bd0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012b82:	4413      	add	r3, r2
 8012b84:	4299      	cmp	r1, r3
 8012b86:	d11c      	bne.n	8012bc2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012b88:	69bb      	ldr	r3, [r7, #24]
 8012b8a:	3304      	adds	r3, #4
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f7fd ffb3 	bl	8010af8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012b92:	69bb      	ldr	r3, [r7, #24]
 8012b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b96:	4b0f      	ldr	r3, [pc, #60]	; (8012bd4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	429a      	cmp	r2, r3
 8012b9c:	d903      	bls.n	8012ba6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8012b9e:	69bb      	ldr	r3, [r7, #24]
 8012ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ba2:	4a0c      	ldr	r2, [pc, #48]	; (8012bd4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012ba4:	6013      	str	r3, [r2, #0]
 8012ba6:	69bb      	ldr	r3, [r7, #24]
 8012ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012baa:	4613      	mov	r3, r2
 8012bac:	009b      	lsls	r3, r3, #2
 8012bae:	4413      	add	r3, r2
 8012bb0:	009b      	lsls	r3, r3, #2
 8012bb2:	4a07      	ldr	r2, [pc, #28]	; (8012bd0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012bb4:	441a      	add	r2, r3
 8012bb6:	69bb      	ldr	r3, [r7, #24]
 8012bb8:	3304      	adds	r3, #4
 8012bba:	4619      	mov	r1, r3
 8012bbc:	4610      	mov	r0, r2
 8012bbe:	f7fd ff3e 	bl	8010a3e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012bc2:	bf00      	nop
 8012bc4:	3720      	adds	r7, #32
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	bd80      	pop	{r7, pc}
 8012bca:	bf00      	nop
 8012bcc:	20007dc0 	.word	0x20007dc0
 8012bd0:	20007dc4 	.word	0x20007dc4
 8012bd4:	2000829c 	.word	0x2000829c

08012bd8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012bd8:	b480      	push	{r7}
 8012bda:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012bdc:	4b07      	ldr	r3, [pc, #28]	; (8012bfc <pvTaskIncrementMutexHeldCount+0x24>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d004      	beq.n	8012bee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012be4:	4b05      	ldr	r3, [pc, #20]	; (8012bfc <pvTaskIncrementMutexHeldCount+0x24>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012bea:	3201      	adds	r2, #1
 8012bec:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8012bee:	4b03      	ldr	r3, [pc, #12]	; (8012bfc <pvTaskIncrementMutexHeldCount+0x24>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
	}
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfa:	4770      	bx	lr
 8012bfc:	20007dc0 	.word	0x20007dc0

08012c00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b084      	sub	sp, #16
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
 8012c08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012c0a:	4b21      	ldr	r3, [pc, #132]	; (8012c90 <prvAddCurrentTaskToDelayedList+0x90>)
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012c10:	4b20      	ldr	r3, [pc, #128]	; (8012c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	3304      	adds	r3, #4
 8012c16:	4618      	mov	r0, r3
 8012c18:	f7fd ff6e 	bl	8010af8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c22:	d10a      	bne.n	8012c3a <prvAddCurrentTaskToDelayedList+0x3a>
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d007      	beq.n	8012c3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c2a:	4b1a      	ldr	r3, [pc, #104]	; (8012c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	3304      	adds	r3, #4
 8012c30:	4619      	mov	r1, r3
 8012c32:	4819      	ldr	r0, [pc, #100]	; (8012c98 <prvAddCurrentTaskToDelayedList+0x98>)
 8012c34:	f7fd ff03 	bl	8010a3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012c38:	e026      	b.n	8012c88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012c3a:	68fa      	ldr	r2, [r7, #12]
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	4413      	add	r3, r2
 8012c40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012c42:	4b14      	ldr	r3, [pc, #80]	; (8012c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	68ba      	ldr	r2, [r7, #8]
 8012c48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012c4a:	68ba      	ldr	r2, [r7, #8]
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	d209      	bcs.n	8012c66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c52:	4b12      	ldr	r3, [pc, #72]	; (8012c9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8012c54:	681a      	ldr	r2, [r3, #0]
 8012c56:	4b0f      	ldr	r3, [pc, #60]	; (8012c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	3304      	adds	r3, #4
 8012c5c:	4619      	mov	r1, r3
 8012c5e:	4610      	mov	r0, r2
 8012c60:	f7fd ff11 	bl	8010a86 <vListInsert>
}
 8012c64:	e010      	b.n	8012c88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c66:	4b0e      	ldr	r3, [pc, #56]	; (8012ca0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012c68:	681a      	ldr	r2, [r3, #0]
 8012c6a:	4b0a      	ldr	r3, [pc, #40]	; (8012c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	3304      	adds	r3, #4
 8012c70:	4619      	mov	r1, r3
 8012c72:	4610      	mov	r0, r2
 8012c74:	f7fd ff07 	bl	8010a86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012c78:	4b0a      	ldr	r3, [pc, #40]	; (8012ca4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	68ba      	ldr	r2, [r7, #8]
 8012c7e:	429a      	cmp	r2, r3
 8012c80:	d202      	bcs.n	8012c88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012c82:	4a08      	ldr	r2, [pc, #32]	; (8012ca4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012c84:	68bb      	ldr	r3, [r7, #8]
 8012c86:	6013      	str	r3, [r2, #0]
}
 8012c88:	bf00      	nop
 8012c8a:	3710      	adds	r7, #16
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	bd80      	pop	{r7, pc}
 8012c90:	20008298 	.word	0x20008298
 8012c94:	20007dc0 	.word	0x20007dc0
 8012c98:	20008280 	.word	0x20008280
 8012c9c:	20008250 	.word	0x20008250
 8012ca0:	2000824c 	.word	0x2000824c
 8012ca4:	200082b4 	.word	0x200082b4

08012ca8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b08a      	sub	sp, #40	; 0x28
 8012cac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012cae:	2300      	movs	r3, #0
 8012cb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012cb2:	f000 fb07 	bl	80132c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012cb6:	4b1c      	ldr	r3, [pc, #112]	; (8012d28 <xTimerCreateTimerTask+0x80>)
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d021      	beq.n	8012d02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012cc6:	1d3a      	adds	r2, r7, #4
 8012cc8:	f107 0108 	add.w	r1, r7, #8
 8012ccc:	f107 030c 	add.w	r3, r7, #12
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	f7fd fe6d 	bl	80109b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012cd6:	6879      	ldr	r1, [r7, #4]
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	68fa      	ldr	r2, [r7, #12]
 8012cdc:	9202      	str	r2, [sp, #8]
 8012cde:	9301      	str	r3, [sp, #4]
 8012ce0:	2302      	movs	r3, #2
 8012ce2:	9300      	str	r3, [sp, #0]
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	460a      	mov	r2, r1
 8012ce8:	4910      	ldr	r1, [pc, #64]	; (8012d2c <xTimerCreateTimerTask+0x84>)
 8012cea:	4811      	ldr	r0, [pc, #68]	; (8012d30 <xTimerCreateTimerTask+0x88>)
 8012cec:	f7fe ff78 	bl	8011be0 <xTaskCreateStatic>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	4a10      	ldr	r2, [pc, #64]	; (8012d34 <xTimerCreateTimerTask+0x8c>)
 8012cf4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012cf6:	4b0f      	ldr	r3, [pc, #60]	; (8012d34 <xTimerCreateTimerTask+0x8c>)
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d001      	beq.n	8012d02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012cfe:	2301      	movs	r3, #1
 8012d00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d10a      	bne.n	8012d1e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8012d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d0c:	f383 8811 	msr	BASEPRI, r3
 8012d10:	f3bf 8f6f 	isb	sy
 8012d14:	f3bf 8f4f 	dsb	sy
 8012d18:	613b      	str	r3, [r7, #16]
}
 8012d1a:	bf00      	nop
 8012d1c:	e7fe      	b.n	8012d1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012d1e:	697b      	ldr	r3, [r7, #20]
}
 8012d20:	4618      	mov	r0, r3
 8012d22:	3718      	adds	r7, #24
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bd80      	pop	{r7, pc}
 8012d28:	200082f0 	.word	0x200082f0
 8012d2c:	080191d0 	.word	0x080191d0
 8012d30:	08012e6d 	.word	0x08012e6d
 8012d34:	200082f4 	.word	0x200082f4

08012d38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b08a      	sub	sp, #40	; 0x28
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	60f8      	str	r0, [r7, #12]
 8012d40:	60b9      	str	r1, [r7, #8]
 8012d42:	607a      	str	r2, [r7, #4]
 8012d44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012d46:	2300      	movs	r3, #0
 8012d48:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d10a      	bne.n	8012d66 <xTimerGenericCommand+0x2e>
	__asm volatile
 8012d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d54:	f383 8811 	msr	BASEPRI, r3
 8012d58:	f3bf 8f6f 	isb	sy
 8012d5c:	f3bf 8f4f 	dsb	sy
 8012d60:	623b      	str	r3, [r7, #32]
}
 8012d62:	bf00      	nop
 8012d64:	e7fe      	b.n	8012d64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012d66:	4b1a      	ldr	r3, [pc, #104]	; (8012dd0 <xTimerGenericCommand+0x98>)
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d02a      	beq.n	8012dc4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012d6e:	68bb      	ldr	r3, [r7, #8]
 8012d70:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012d7a:	68bb      	ldr	r3, [r7, #8]
 8012d7c:	2b05      	cmp	r3, #5
 8012d7e:	dc18      	bgt.n	8012db2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012d80:	f7ff fdb4 	bl	80128ec <xTaskGetSchedulerState>
 8012d84:	4603      	mov	r3, r0
 8012d86:	2b02      	cmp	r3, #2
 8012d88:	d109      	bne.n	8012d9e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012d8a:	4b11      	ldr	r3, [pc, #68]	; (8012dd0 <xTimerGenericCommand+0x98>)
 8012d8c:	6818      	ldr	r0, [r3, #0]
 8012d8e:	f107 0110 	add.w	r1, r7, #16
 8012d92:	2300      	movs	r3, #0
 8012d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d96:	f7fe f881 	bl	8010e9c <xQueueGenericSend>
 8012d9a:	6278      	str	r0, [r7, #36]	; 0x24
 8012d9c:	e012      	b.n	8012dc4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012d9e:	4b0c      	ldr	r3, [pc, #48]	; (8012dd0 <xTimerGenericCommand+0x98>)
 8012da0:	6818      	ldr	r0, [r3, #0]
 8012da2:	f107 0110 	add.w	r1, r7, #16
 8012da6:	2300      	movs	r3, #0
 8012da8:	2200      	movs	r2, #0
 8012daa:	f7fe f877 	bl	8010e9c <xQueueGenericSend>
 8012dae:	6278      	str	r0, [r7, #36]	; 0x24
 8012db0:	e008      	b.n	8012dc4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012db2:	4b07      	ldr	r3, [pc, #28]	; (8012dd0 <xTimerGenericCommand+0x98>)
 8012db4:	6818      	ldr	r0, [r3, #0]
 8012db6:	f107 0110 	add.w	r1, r7, #16
 8012dba:	2300      	movs	r3, #0
 8012dbc:	683a      	ldr	r2, [r7, #0]
 8012dbe:	f7fe f96b 	bl	8011098 <xQueueGenericSendFromISR>
 8012dc2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	3728      	adds	r7, #40	; 0x28
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	bf00      	nop
 8012dd0:	200082f0 	.word	0x200082f0

08012dd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b088      	sub	sp, #32
 8012dd8:	af02      	add	r7, sp, #8
 8012dda:	6078      	str	r0, [r7, #4]
 8012ddc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012dde:	4b22      	ldr	r3, [pc, #136]	; (8012e68 <prvProcessExpiredTimer+0x94>)
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	68db      	ldr	r3, [r3, #12]
 8012de4:	68db      	ldr	r3, [r3, #12]
 8012de6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012de8:	697b      	ldr	r3, [r7, #20]
 8012dea:	3304      	adds	r3, #4
 8012dec:	4618      	mov	r0, r3
 8012dee:	f7fd fe83 	bl	8010af8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012df2:	697b      	ldr	r3, [r7, #20]
 8012df4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012df8:	f003 0304 	and.w	r3, r3, #4
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d022      	beq.n	8012e46 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012e00:	697b      	ldr	r3, [r7, #20]
 8012e02:	699a      	ldr	r2, [r3, #24]
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	18d1      	adds	r1, r2, r3
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	683a      	ldr	r2, [r7, #0]
 8012e0c:	6978      	ldr	r0, [r7, #20]
 8012e0e:	f000 f8d1 	bl	8012fb4 <prvInsertTimerInActiveList>
 8012e12:	4603      	mov	r3, r0
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d01f      	beq.n	8012e58 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012e18:	2300      	movs	r3, #0
 8012e1a:	9300      	str	r3, [sp, #0]
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	687a      	ldr	r2, [r7, #4]
 8012e20:	2100      	movs	r1, #0
 8012e22:	6978      	ldr	r0, [r7, #20]
 8012e24:	f7ff ff88 	bl	8012d38 <xTimerGenericCommand>
 8012e28:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012e2a:	693b      	ldr	r3, [r7, #16]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d113      	bne.n	8012e58 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e34:	f383 8811 	msr	BASEPRI, r3
 8012e38:	f3bf 8f6f 	isb	sy
 8012e3c:	f3bf 8f4f 	dsb	sy
 8012e40:	60fb      	str	r3, [r7, #12]
}
 8012e42:	bf00      	nop
 8012e44:	e7fe      	b.n	8012e44 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012e46:	697b      	ldr	r3, [r7, #20]
 8012e48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e4c:	f023 0301 	bic.w	r3, r3, #1
 8012e50:	b2da      	uxtb	r2, r3
 8012e52:	697b      	ldr	r3, [r7, #20]
 8012e54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012e58:	697b      	ldr	r3, [r7, #20]
 8012e5a:	6a1b      	ldr	r3, [r3, #32]
 8012e5c:	6978      	ldr	r0, [r7, #20]
 8012e5e:	4798      	blx	r3
}
 8012e60:	bf00      	nop
 8012e62:	3718      	adds	r7, #24
 8012e64:	46bd      	mov	sp, r7
 8012e66:	bd80      	pop	{r7, pc}
 8012e68:	200082e8 	.word	0x200082e8

08012e6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b084      	sub	sp, #16
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012e74:	f107 0308 	add.w	r3, r7, #8
 8012e78:	4618      	mov	r0, r3
 8012e7a:	f000 f857 	bl	8012f2c <prvGetNextExpireTime>
 8012e7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012e80:	68bb      	ldr	r3, [r7, #8]
 8012e82:	4619      	mov	r1, r3
 8012e84:	68f8      	ldr	r0, [r7, #12]
 8012e86:	f000 f803 	bl	8012e90 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012e8a:	f000 f8d5 	bl	8013038 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012e8e:	e7f1      	b.n	8012e74 <prvTimerTask+0x8>

08012e90 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b084      	sub	sp, #16
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
 8012e98:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012e9a:	f7ff f93b 	bl	8012114 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012e9e:	f107 0308 	add.w	r3, r7, #8
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	f000 f866 	bl	8012f74 <prvSampleTimeNow>
 8012ea8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012eaa:	68bb      	ldr	r3, [r7, #8]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d130      	bne.n	8012f12 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012eb0:	683b      	ldr	r3, [r7, #0]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d10a      	bne.n	8012ecc <prvProcessTimerOrBlockTask+0x3c>
 8012eb6:	687a      	ldr	r2, [r7, #4]
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	429a      	cmp	r2, r3
 8012ebc:	d806      	bhi.n	8012ecc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012ebe:	f7ff f937 	bl	8012130 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012ec2:	68f9      	ldr	r1, [r7, #12]
 8012ec4:	6878      	ldr	r0, [r7, #4]
 8012ec6:	f7ff ff85 	bl	8012dd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012eca:	e024      	b.n	8012f16 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012ecc:	683b      	ldr	r3, [r7, #0]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d008      	beq.n	8012ee4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012ed2:	4b13      	ldr	r3, [pc, #76]	; (8012f20 <prvProcessTimerOrBlockTask+0x90>)
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d101      	bne.n	8012ee0 <prvProcessTimerOrBlockTask+0x50>
 8012edc:	2301      	movs	r3, #1
 8012ede:	e000      	b.n	8012ee2 <prvProcessTimerOrBlockTask+0x52>
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012ee4:	4b0f      	ldr	r3, [pc, #60]	; (8012f24 <prvProcessTimerOrBlockTask+0x94>)
 8012ee6:	6818      	ldr	r0, [r3, #0]
 8012ee8:	687a      	ldr	r2, [r7, #4]
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	1ad3      	subs	r3, r2, r3
 8012eee:	683a      	ldr	r2, [r7, #0]
 8012ef0:	4619      	mov	r1, r3
 8012ef2:	f7fe fe41 	bl	8011b78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012ef6:	f7ff f91b 	bl	8012130 <xTaskResumeAll>
 8012efa:	4603      	mov	r3, r0
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d10a      	bne.n	8012f16 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012f00:	4b09      	ldr	r3, [pc, #36]	; (8012f28 <prvProcessTimerOrBlockTask+0x98>)
 8012f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f06:	601a      	str	r2, [r3, #0]
 8012f08:	f3bf 8f4f 	dsb	sy
 8012f0c:	f3bf 8f6f 	isb	sy
}
 8012f10:	e001      	b.n	8012f16 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012f12:	f7ff f90d 	bl	8012130 <xTaskResumeAll>
}
 8012f16:	bf00      	nop
 8012f18:	3710      	adds	r7, #16
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	bd80      	pop	{r7, pc}
 8012f1e:	bf00      	nop
 8012f20:	200082ec 	.word	0x200082ec
 8012f24:	200082f0 	.word	0x200082f0
 8012f28:	e000ed04 	.word	0xe000ed04

08012f2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012f2c:	b480      	push	{r7}
 8012f2e:	b085      	sub	sp, #20
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012f34:	4b0e      	ldr	r3, [pc, #56]	; (8012f70 <prvGetNextExpireTime+0x44>)
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d101      	bne.n	8012f42 <prvGetNextExpireTime+0x16>
 8012f3e:	2201      	movs	r2, #1
 8012f40:	e000      	b.n	8012f44 <prvGetNextExpireTime+0x18>
 8012f42:	2200      	movs	r2, #0
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d105      	bne.n	8012f5c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012f50:	4b07      	ldr	r3, [pc, #28]	; (8012f70 <prvGetNextExpireTime+0x44>)
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	68db      	ldr	r3, [r3, #12]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	60fb      	str	r3, [r7, #12]
 8012f5a:	e001      	b.n	8012f60 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012f60:	68fb      	ldr	r3, [r7, #12]
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	3714      	adds	r7, #20
 8012f66:	46bd      	mov	sp, r7
 8012f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6c:	4770      	bx	lr
 8012f6e:	bf00      	nop
 8012f70:	200082e8 	.word	0x200082e8

08012f74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b084      	sub	sp, #16
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012f7c:	f7ff f976 	bl	801226c <xTaskGetTickCount>
 8012f80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012f82:	4b0b      	ldr	r3, [pc, #44]	; (8012fb0 <prvSampleTimeNow+0x3c>)
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	68fa      	ldr	r2, [r7, #12]
 8012f88:	429a      	cmp	r2, r3
 8012f8a:	d205      	bcs.n	8012f98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012f8c:	f000 f936 	bl	80131fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	2201      	movs	r2, #1
 8012f94:	601a      	str	r2, [r3, #0]
 8012f96:	e002      	b.n	8012f9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012f9e:	4a04      	ldr	r2, [pc, #16]	; (8012fb0 <prvSampleTimeNow+0x3c>)
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012fa4:	68fb      	ldr	r3, [r7, #12]
}
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	3710      	adds	r7, #16
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bd80      	pop	{r7, pc}
 8012fae:	bf00      	nop
 8012fb0:	200082f8 	.word	0x200082f8

08012fb4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b086      	sub	sp, #24
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	60f8      	str	r0, [r7, #12]
 8012fbc:	60b9      	str	r1, [r7, #8]
 8012fbe:	607a      	str	r2, [r7, #4]
 8012fc0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	68ba      	ldr	r2, [r7, #8]
 8012fca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	68fa      	ldr	r2, [r7, #12]
 8012fd0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012fd2:	68ba      	ldr	r2, [r7, #8]
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	429a      	cmp	r2, r3
 8012fd8:	d812      	bhi.n	8013000 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012fda:	687a      	ldr	r2, [r7, #4]
 8012fdc:	683b      	ldr	r3, [r7, #0]
 8012fde:	1ad2      	subs	r2, r2, r3
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	699b      	ldr	r3, [r3, #24]
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	d302      	bcc.n	8012fee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012fe8:	2301      	movs	r3, #1
 8012fea:	617b      	str	r3, [r7, #20]
 8012fec:	e01b      	b.n	8013026 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012fee:	4b10      	ldr	r3, [pc, #64]	; (8013030 <prvInsertTimerInActiveList+0x7c>)
 8012ff0:	681a      	ldr	r2, [r3, #0]
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	3304      	adds	r3, #4
 8012ff6:	4619      	mov	r1, r3
 8012ff8:	4610      	mov	r0, r2
 8012ffa:	f7fd fd44 	bl	8010a86 <vListInsert>
 8012ffe:	e012      	b.n	8013026 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013000:	687a      	ldr	r2, [r7, #4]
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	429a      	cmp	r2, r3
 8013006:	d206      	bcs.n	8013016 <prvInsertTimerInActiveList+0x62>
 8013008:	68ba      	ldr	r2, [r7, #8]
 801300a:	683b      	ldr	r3, [r7, #0]
 801300c:	429a      	cmp	r2, r3
 801300e:	d302      	bcc.n	8013016 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013010:	2301      	movs	r3, #1
 8013012:	617b      	str	r3, [r7, #20]
 8013014:	e007      	b.n	8013026 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013016:	4b07      	ldr	r3, [pc, #28]	; (8013034 <prvInsertTimerInActiveList+0x80>)
 8013018:	681a      	ldr	r2, [r3, #0]
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	3304      	adds	r3, #4
 801301e:	4619      	mov	r1, r3
 8013020:	4610      	mov	r0, r2
 8013022:	f7fd fd30 	bl	8010a86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013026:	697b      	ldr	r3, [r7, #20]
}
 8013028:	4618      	mov	r0, r3
 801302a:	3718      	adds	r7, #24
 801302c:	46bd      	mov	sp, r7
 801302e:	bd80      	pop	{r7, pc}
 8013030:	200082ec 	.word	0x200082ec
 8013034:	200082e8 	.word	0x200082e8

08013038 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b08e      	sub	sp, #56	; 0x38
 801303c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801303e:	e0ca      	b.n	80131d6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2b00      	cmp	r3, #0
 8013044:	da18      	bge.n	8013078 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013046:	1d3b      	adds	r3, r7, #4
 8013048:	3304      	adds	r3, #4
 801304a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801304c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801304e:	2b00      	cmp	r3, #0
 8013050:	d10a      	bne.n	8013068 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8013052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013056:	f383 8811 	msr	BASEPRI, r3
 801305a:	f3bf 8f6f 	isb	sy
 801305e:	f3bf 8f4f 	dsb	sy
 8013062:	61fb      	str	r3, [r7, #28]
}
 8013064:	bf00      	nop
 8013066:	e7fe      	b.n	8013066 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801306e:	6850      	ldr	r0, [r2, #4]
 8013070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013072:	6892      	ldr	r2, [r2, #8]
 8013074:	4611      	mov	r1, r2
 8013076:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	2b00      	cmp	r3, #0
 801307c:	f2c0 80aa 	blt.w	80131d4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013086:	695b      	ldr	r3, [r3, #20]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d004      	beq.n	8013096 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801308e:	3304      	adds	r3, #4
 8013090:	4618      	mov	r0, r3
 8013092:	f7fd fd31 	bl	8010af8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013096:	463b      	mov	r3, r7
 8013098:	4618      	mov	r0, r3
 801309a:	f7ff ff6b 	bl	8012f74 <prvSampleTimeNow>
 801309e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2b09      	cmp	r3, #9
 80130a4:	f200 8097 	bhi.w	80131d6 <prvProcessReceivedCommands+0x19e>
 80130a8:	a201      	add	r2, pc, #4	; (adr r2, 80130b0 <prvProcessReceivedCommands+0x78>)
 80130aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130ae:	bf00      	nop
 80130b0:	080130d9 	.word	0x080130d9
 80130b4:	080130d9 	.word	0x080130d9
 80130b8:	080130d9 	.word	0x080130d9
 80130bc:	0801314d 	.word	0x0801314d
 80130c0:	08013161 	.word	0x08013161
 80130c4:	080131ab 	.word	0x080131ab
 80130c8:	080130d9 	.word	0x080130d9
 80130cc:	080130d9 	.word	0x080130d9
 80130d0:	0801314d 	.word	0x0801314d
 80130d4:	08013161 	.word	0x08013161
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80130d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80130de:	f043 0301 	orr.w	r3, r3, #1
 80130e2:	b2da      	uxtb	r2, r3
 80130e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80130ea:	68ba      	ldr	r2, [r7, #8]
 80130ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ee:	699b      	ldr	r3, [r3, #24]
 80130f0:	18d1      	adds	r1, r2, r3
 80130f2:	68bb      	ldr	r3, [r7, #8]
 80130f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130f8:	f7ff ff5c 	bl	8012fb4 <prvInsertTimerInActiveList>
 80130fc:	4603      	mov	r3, r0
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d069      	beq.n	80131d6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013104:	6a1b      	ldr	r3, [r3, #32]
 8013106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013108:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801310a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801310c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013110:	f003 0304 	and.w	r3, r3, #4
 8013114:	2b00      	cmp	r3, #0
 8013116:	d05e      	beq.n	80131d6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013118:	68ba      	ldr	r2, [r7, #8]
 801311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801311c:	699b      	ldr	r3, [r3, #24]
 801311e:	441a      	add	r2, r3
 8013120:	2300      	movs	r3, #0
 8013122:	9300      	str	r3, [sp, #0]
 8013124:	2300      	movs	r3, #0
 8013126:	2100      	movs	r1, #0
 8013128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801312a:	f7ff fe05 	bl	8012d38 <xTimerGenericCommand>
 801312e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013130:	6a3b      	ldr	r3, [r7, #32]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d14f      	bne.n	80131d6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8013136:	f04f 0350 	mov.w	r3, #80	; 0x50
 801313a:	f383 8811 	msr	BASEPRI, r3
 801313e:	f3bf 8f6f 	isb	sy
 8013142:	f3bf 8f4f 	dsb	sy
 8013146:	61bb      	str	r3, [r7, #24]
}
 8013148:	bf00      	nop
 801314a:	e7fe      	b.n	801314a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801314c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801314e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013152:	f023 0301 	bic.w	r3, r3, #1
 8013156:	b2da      	uxtb	r2, r3
 8013158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801315a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801315e:	e03a      	b.n	80131d6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013166:	f043 0301 	orr.w	r3, r3, #1
 801316a:	b2da      	uxtb	r2, r3
 801316c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801316e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013172:	68ba      	ldr	r2, [r7, #8]
 8013174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013176:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801317a:	699b      	ldr	r3, [r3, #24]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d10a      	bne.n	8013196 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8013180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013184:	f383 8811 	msr	BASEPRI, r3
 8013188:	f3bf 8f6f 	isb	sy
 801318c:	f3bf 8f4f 	dsb	sy
 8013190:	617b      	str	r3, [r7, #20]
}
 8013192:	bf00      	nop
 8013194:	e7fe      	b.n	8013194 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013198:	699a      	ldr	r2, [r3, #24]
 801319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801319c:	18d1      	adds	r1, r2, r3
 801319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80131a4:	f7ff ff06 	bl	8012fb4 <prvInsertTimerInActiveList>
					break;
 80131a8:	e015      	b.n	80131d6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80131aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131b0:	f003 0302 	and.w	r3, r3, #2
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d103      	bne.n	80131c0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80131b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80131ba:	f000 fbb9 	bl	8013930 <vPortFree>
 80131be:	e00a      	b.n	80131d6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80131c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131c6:	f023 0301 	bic.w	r3, r3, #1
 80131ca:	b2da      	uxtb	r2, r3
 80131cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80131d2:	e000      	b.n	80131d6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80131d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80131d6:	4b08      	ldr	r3, [pc, #32]	; (80131f8 <prvProcessReceivedCommands+0x1c0>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	1d39      	adds	r1, r7, #4
 80131dc:	2200      	movs	r2, #0
 80131de:	4618      	mov	r0, r3
 80131e0:	f7fe f882 	bl	80112e8 <xQueueReceive>
 80131e4:	4603      	mov	r3, r0
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	f47f af2a 	bne.w	8013040 <prvProcessReceivedCommands+0x8>
	}
}
 80131ec:	bf00      	nop
 80131ee:	bf00      	nop
 80131f0:	3730      	adds	r7, #48	; 0x30
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bd80      	pop	{r7, pc}
 80131f6:	bf00      	nop
 80131f8:	200082f0 	.word	0x200082f0

080131fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b088      	sub	sp, #32
 8013200:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013202:	e048      	b.n	8013296 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013204:	4b2d      	ldr	r3, [pc, #180]	; (80132bc <prvSwitchTimerLists+0xc0>)
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	68db      	ldr	r3, [r3, #12]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801320e:	4b2b      	ldr	r3, [pc, #172]	; (80132bc <prvSwitchTimerLists+0xc0>)
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	68db      	ldr	r3, [r3, #12]
 8013214:	68db      	ldr	r3, [r3, #12]
 8013216:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	3304      	adds	r3, #4
 801321c:	4618      	mov	r0, r3
 801321e:	f7fd fc6b 	bl	8010af8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	6a1b      	ldr	r3, [r3, #32]
 8013226:	68f8      	ldr	r0, [r7, #12]
 8013228:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013230:	f003 0304 	and.w	r3, r3, #4
 8013234:	2b00      	cmp	r3, #0
 8013236:	d02e      	beq.n	8013296 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	699b      	ldr	r3, [r3, #24]
 801323c:	693a      	ldr	r2, [r7, #16]
 801323e:	4413      	add	r3, r2
 8013240:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013242:	68ba      	ldr	r2, [r7, #8]
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	429a      	cmp	r2, r3
 8013248:	d90e      	bls.n	8013268 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	68ba      	ldr	r2, [r7, #8]
 801324e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	68fa      	ldr	r2, [r7, #12]
 8013254:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013256:	4b19      	ldr	r3, [pc, #100]	; (80132bc <prvSwitchTimerLists+0xc0>)
 8013258:	681a      	ldr	r2, [r3, #0]
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	3304      	adds	r3, #4
 801325e:	4619      	mov	r1, r3
 8013260:	4610      	mov	r0, r2
 8013262:	f7fd fc10 	bl	8010a86 <vListInsert>
 8013266:	e016      	b.n	8013296 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013268:	2300      	movs	r3, #0
 801326a:	9300      	str	r3, [sp, #0]
 801326c:	2300      	movs	r3, #0
 801326e:	693a      	ldr	r2, [r7, #16]
 8013270:	2100      	movs	r1, #0
 8013272:	68f8      	ldr	r0, [r7, #12]
 8013274:	f7ff fd60 	bl	8012d38 <xTimerGenericCommand>
 8013278:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d10a      	bne.n	8013296 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8013280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013284:	f383 8811 	msr	BASEPRI, r3
 8013288:	f3bf 8f6f 	isb	sy
 801328c:	f3bf 8f4f 	dsb	sy
 8013290:	603b      	str	r3, [r7, #0]
}
 8013292:	bf00      	nop
 8013294:	e7fe      	b.n	8013294 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013296:	4b09      	ldr	r3, [pc, #36]	; (80132bc <prvSwitchTimerLists+0xc0>)
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d1b1      	bne.n	8013204 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80132a0:	4b06      	ldr	r3, [pc, #24]	; (80132bc <prvSwitchTimerLists+0xc0>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80132a6:	4b06      	ldr	r3, [pc, #24]	; (80132c0 <prvSwitchTimerLists+0xc4>)
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	4a04      	ldr	r2, [pc, #16]	; (80132bc <prvSwitchTimerLists+0xc0>)
 80132ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80132ae:	4a04      	ldr	r2, [pc, #16]	; (80132c0 <prvSwitchTimerLists+0xc4>)
 80132b0:	697b      	ldr	r3, [r7, #20]
 80132b2:	6013      	str	r3, [r2, #0]
}
 80132b4:	bf00      	nop
 80132b6:	3718      	adds	r7, #24
 80132b8:	46bd      	mov	sp, r7
 80132ba:	bd80      	pop	{r7, pc}
 80132bc:	200082e8 	.word	0x200082e8
 80132c0:	200082ec 	.word	0x200082ec

080132c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b082      	sub	sp, #8
 80132c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80132ca:	f000 f96b 	bl	80135a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80132ce:	4b15      	ldr	r3, [pc, #84]	; (8013324 <prvCheckForValidListAndQueue+0x60>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d120      	bne.n	8013318 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80132d6:	4814      	ldr	r0, [pc, #80]	; (8013328 <prvCheckForValidListAndQueue+0x64>)
 80132d8:	f7fd fb84 	bl	80109e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80132dc:	4813      	ldr	r0, [pc, #76]	; (801332c <prvCheckForValidListAndQueue+0x68>)
 80132de:	f7fd fb81 	bl	80109e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80132e2:	4b13      	ldr	r3, [pc, #76]	; (8013330 <prvCheckForValidListAndQueue+0x6c>)
 80132e4:	4a10      	ldr	r2, [pc, #64]	; (8013328 <prvCheckForValidListAndQueue+0x64>)
 80132e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80132e8:	4b12      	ldr	r3, [pc, #72]	; (8013334 <prvCheckForValidListAndQueue+0x70>)
 80132ea:	4a10      	ldr	r2, [pc, #64]	; (801332c <prvCheckForValidListAndQueue+0x68>)
 80132ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80132ee:	2300      	movs	r3, #0
 80132f0:	9300      	str	r3, [sp, #0]
 80132f2:	4b11      	ldr	r3, [pc, #68]	; (8013338 <prvCheckForValidListAndQueue+0x74>)
 80132f4:	4a11      	ldr	r2, [pc, #68]	; (801333c <prvCheckForValidListAndQueue+0x78>)
 80132f6:	2110      	movs	r1, #16
 80132f8:	200a      	movs	r0, #10
 80132fa:	f7fd fc8f 	bl	8010c1c <xQueueGenericCreateStatic>
 80132fe:	4603      	mov	r3, r0
 8013300:	4a08      	ldr	r2, [pc, #32]	; (8013324 <prvCheckForValidListAndQueue+0x60>)
 8013302:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013304:	4b07      	ldr	r3, [pc, #28]	; (8013324 <prvCheckForValidListAndQueue+0x60>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d005      	beq.n	8013318 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801330c:	4b05      	ldr	r3, [pc, #20]	; (8013324 <prvCheckForValidListAndQueue+0x60>)
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	490b      	ldr	r1, [pc, #44]	; (8013340 <prvCheckForValidListAndQueue+0x7c>)
 8013312:	4618      	mov	r0, r3
 8013314:	f7fe fbdc 	bl	8011ad0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013318:	f000 f974 	bl	8013604 <vPortExitCritical>
}
 801331c:	bf00      	nop
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}
 8013322:	bf00      	nop
 8013324:	200082f0 	.word	0x200082f0
 8013328:	200082c0 	.word	0x200082c0
 801332c:	200082d4 	.word	0x200082d4
 8013330:	200082e8 	.word	0x200082e8
 8013334:	200082ec 	.word	0x200082ec
 8013338:	2000839c 	.word	0x2000839c
 801333c:	200082fc 	.word	0x200082fc
 8013340:	080191d8 	.word	0x080191d8

08013344 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013344:	b480      	push	{r7}
 8013346:	b085      	sub	sp, #20
 8013348:	af00      	add	r7, sp, #0
 801334a:	60f8      	str	r0, [r7, #12]
 801334c:	60b9      	str	r1, [r7, #8]
 801334e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	3b04      	subs	r3, #4
 8013354:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801335c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	3b04      	subs	r3, #4
 8013362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013364:	68bb      	ldr	r3, [r7, #8]
 8013366:	f023 0201 	bic.w	r2, r3, #1
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	3b04      	subs	r3, #4
 8013372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013374:	4a0c      	ldr	r2, [pc, #48]	; (80133a8 <pxPortInitialiseStack+0x64>)
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	3b14      	subs	r3, #20
 801337e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013380:	687a      	ldr	r2, [r7, #4]
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	3b04      	subs	r3, #4
 801338a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	f06f 0202 	mvn.w	r2, #2
 8013392:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	3b20      	subs	r3, #32
 8013398:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801339a:	68fb      	ldr	r3, [r7, #12]
}
 801339c:	4618      	mov	r0, r3
 801339e:	3714      	adds	r7, #20
 80133a0:	46bd      	mov	sp, r7
 80133a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a6:	4770      	bx	lr
 80133a8:	080133ad 	.word	0x080133ad

080133ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80133ac:	b480      	push	{r7}
 80133ae:	b085      	sub	sp, #20
 80133b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80133b2:	2300      	movs	r3, #0
 80133b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80133b6:	4b12      	ldr	r3, [pc, #72]	; (8013400 <prvTaskExitError+0x54>)
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80133be:	d00a      	beq.n	80133d6 <prvTaskExitError+0x2a>
	__asm volatile
 80133c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133c4:	f383 8811 	msr	BASEPRI, r3
 80133c8:	f3bf 8f6f 	isb	sy
 80133cc:	f3bf 8f4f 	dsb	sy
 80133d0:	60fb      	str	r3, [r7, #12]
}
 80133d2:	bf00      	nop
 80133d4:	e7fe      	b.n	80133d4 <prvTaskExitError+0x28>
	__asm volatile
 80133d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133da:	f383 8811 	msr	BASEPRI, r3
 80133de:	f3bf 8f6f 	isb	sy
 80133e2:	f3bf 8f4f 	dsb	sy
 80133e6:	60bb      	str	r3, [r7, #8]
}
 80133e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80133ea:	bf00      	nop
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d0fc      	beq.n	80133ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80133f2:	bf00      	nop
 80133f4:	bf00      	nop
 80133f6:	3714      	adds	r7, #20
 80133f8:	46bd      	mov	sp, r7
 80133fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fe:	4770      	bx	lr
 8013400:	20000228 	.word	0x20000228
	...

08013410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013410:	4b07      	ldr	r3, [pc, #28]	; (8013430 <pxCurrentTCBConst2>)
 8013412:	6819      	ldr	r1, [r3, #0]
 8013414:	6808      	ldr	r0, [r1, #0]
 8013416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801341a:	f380 8809 	msr	PSP, r0
 801341e:	f3bf 8f6f 	isb	sy
 8013422:	f04f 0000 	mov.w	r0, #0
 8013426:	f380 8811 	msr	BASEPRI, r0
 801342a:	4770      	bx	lr
 801342c:	f3af 8000 	nop.w

08013430 <pxCurrentTCBConst2>:
 8013430:	20007dc0 	.word	0x20007dc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013434:	bf00      	nop
 8013436:	bf00      	nop

08013438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013438:	4808      	ldr	r0, [pc, #32]	; (801345c <prvPortStartFirstTask+0x24>)
 801343a:	6800      	ldr	r0, [r0, #0]
 801343c:	6800      	ldr	r0, [r0, #0]
 801343e:	f380 8808 	msr	MSP, r0
 8013442:	f04f 0000 	mov.w	r0, #0
 8013446:	f380 8814 	msr	CONTROL, r0
 801344a:	b662      	cpsie	i
 801344c:	b661      	cpsie	f
 801344e:	f3bf 8f4f 	dsb	sy
 8013452:	f3bf 8f6f 	isb	sy
 8013456:	df00      	svc	0
 8013458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801345a:	bf00      	nop
 801345c:	e000ed08 	.word	0xe000ed08

08013460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013460:	b580      	push	{r7, lr}
 8013462:	b086      	sub	sp, #24
 8013464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013466:	4b46      	ldr	r3, [pc, #280]	; (8013580 <xPortStartScheduler+0x120>)
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	4a46      	ldr	r2, [pc, #280]	; (8013584 <xPortStartScheduler+0x124>)
 801346c:	4293      	cmp	r3, r2
 801346e:	d10a      	bne.n	8013486 <xPortStartScheduler+0x26>
	__asm volatile
 8013470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013474:	f383 8811 	msr	BASEPRI, r3
 8013478:	f3bf 8f6f 	isb	sy
 801347c:	f3bf 8f4f 	dsb	sy
 8013480:	613b      	str	r3, [r7, #16]
}
 8013482:	bf00      	nop
 8013484:	e7fe      	b.n	8013484 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013486:	4b3e      	ldr	r3, [pc, #248]	; (8013580 <xPortStartScheduler+0x120>)
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	4a3f      	ldr	r2, [pc, #252]	; (8013588 <xPortStartScheduler+0x128>)
 801348c:	4293      	cmp	r3, r2
 801348e:	d10a      	bne.n	80134a6 <xPortStartScheduler+0x46>
	__asm volatile
 8013490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013494:	f383 8811 	msr	BASEPRI, r3
 8013498:	f3bf 8f6f 	isb	sy
 801349c:	f3bf 8f4f 	dsb	sy
 80134a0:	60fb      	str	r3, [r7, #12]
}
 80134a2:	bf00      	nop
 80134a4:	e7fe      	b.n	80134a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80134a6:	4b39      	ldr	r3, [pc, #228]	; (801358c <xPortStartScheduler+0x12c>)
 80134a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80134aa:	697b      	ldr	r3, [r7, #20]
 80134ac:	781b      	ldrb	r3, [r3, #0]
 80134ae:	b2db      	uxtb	r3, r3
 80134b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80134b2:	697b      	ldr	r3, [r7, #20]
 80134b4:	22ff      	movs	r2, #255	; 0xff
 80134b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80134b8:	697b      	ldr	r3, [r7, #20]
 80134ba:	781b      	ldrb	r3, [r3, #0]
 80134bc:	b2db      	uxtb	r3, r3
 80134be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80134c0:	78fb      	ldrb	r3, [r7, #3]
 80134c2:	b2db      	uxtb	r3, r3
 80134c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80134c8:	b2da      	uxtb	r2, r3
 80134ca:	4b31      	ldr	r3, [pc, #196]	; (8013590 <xPortStartScheduler+0x130>)
 80134cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80134ce:	4b31      	ldr	r3, [pc, #196]	; (8013594 <xPortStartScheduler+0x134>)
 80134d0:	2207      	movs	r2, #7
 80134d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80134d4:	e009      	b.n	80134ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80134d6:	4b2f      	ldr	r3, [pc, #188]	; (8013594 <xPortStartScheduler+0x134>)
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	3b01      	subs	r3, #1
 80134dc:	4a2d      	ldr	r2, [pc, #180]	; (8013594 <xPortStartScheduler+0x134>)
 80134de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80134e0:	78fb      	ldrb	r3, [r7, #3]
 80134e2:	b2db      	uxtb	r3, r3
 80134e4:	005b      	lsls	r3, r3, #1
 80134e6:	b2db      	uxtb	r3, r3
 80134e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80134ea:	78fb      	ldrb	r3, [r7, #3]
 80134ec:	b2db      	uxtb	r3, r3
 80134ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80134f2:	2b80      	cmp	r3, #128	; 0x80
 80134f4:	d0ef      	beq.n	80134d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80134f6:	4b27      	ldr	r3, [pc, #156]	; (8013594 <xPortStartScheduler+0x134>)
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	f1c3 0307 	rsb	r3, r3, #7
 80134fe:	2b04      	cmp	r3, #4
 8013500:	d00a      	beq.n	8013518 <xPortStartScheduler+0xb8>
	__asm volatile
 8013502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013506:	f383 8811 	msr	BASEPRI, r3
 801350a:	f3bf 8f6f 	isb	sy
 801350e:	f3bf 8f4f 	dsb	sy
 8013512:	60bb      	str	r3, [r7, #8]
}
 8013514:	bf00      	nop
 8013516:	e7fe      	b.n	8013516 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013518:	4b1e      	ldr	r3, [pc, #120]	; (8013594 <xPortStartScheduler+0x134>)
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	021b      	lsls	r3, r3, #8
 801351e:	4a1d      	ldr	r2, [pc, #116]	; (8013594 <xPortStartScheduler+0x134>)
 8013520:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013522:	4b1c      	ldr	r3, [pc, #112]	; (8013594 <xPortStartScheduler+0x134>)
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801352a:	4a1a      	ldr	r2, [pc, #104]	; (8013594 <xPortStartScheduler+0x134>)
 801352c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	b2da      	uxtb	r2, r3
 8013532:	697b      	ldr	r3, [r7, #20]
 8013534:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013536:	4b18      	ldr	r3, [pc, #96]	; (8013598 <xPortStartScheduler+0x138>)
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	4a17      	ldr	r2, [pc, #92]	; (8013598 <xPortStartScheduler+0x138>)
 801353c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013540:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013542:	4b15      	ldr	r3, [pc, #84]	; (8013598 <xPortStartScheduler+0x138>)
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	4a14      	ldr	r2, [pc, #80]	; (8013598 <xPortStartScheduler+0x138>)
 8013548:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801354c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801354e:	f000 f8dd 	bl	801370c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013552:	4b12      	ldr	r3, [pc, #72]	; (801359c <xPortStartScheduler+0x13c>)
 8013554:	2200      	movs	r2, #0
 8013556:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013558:	f000 f8fc 	bl	8013754 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801355c:	4b10      	ldr	r3, [pc, #64]	; (80135a0 <xPortStartScheduler+0x140>)
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	4a0f      	ldr	r2, [pc, #60]	; (80135a0 <xPortStartScheduler+0x140>)
 8013562:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013566:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013568:	f7ff ff66 	bl	8013438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801356c:	f7fe ff48 	bl	8012400 <vTaskSwitchContext>
	prvTaskExitError();
 8013570:	f7ff ff1c 	bl	80133ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013574:	2300      	movs	r3, #0
}
 8013576:	4618      	mov	r0, r3
 8013578:	3718      	adds	r7, #24
 801357a:	46bd      	mov	sp, r7
 801357c:	bd80      	pop	{r7, pc}
 801357e:	bf00      	nop
 8013580:	e000ed00 	.word	0xe000ed00
 8013584:	410fc271 	.word	0x410fc271
 8013588:	410fc270 	.word	0x410fc270
 801358c:	e000e400 	.word	0xe000e400
 8013590:	200083ec 	.word	0x200083ec
 8013594:	200083f0 	.word	0x200083f0
 8013598:	e000ed20 	.word	0xe000ed20
 801359c:	20000228 	.word	0x20000228
 80135a0:	e000ef34 	.word	0xe000ef34

080135a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80135a4:	b480      	push	{r7}
 80135a6:	b083      	sub	sp, #12
 80135a8:	af00      	add	r7, sp, #0
	__asm volatile
 80135aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135ae:	f383 8811 	msr	BASEPRI, r3
 80135b2:	f3bf 8f6f 	isb	sy
 80135b6:	f3bf 8f4f 	dsb	sy
 80135ba:	607b      	str	r3, [r7, #4]
}
 80135bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80135be:	4b0f      	ldr	r3, [pc, #60]	; (80135fc <vPortEnterCritical+0x58>)
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	3301      	adds	r3, #1
 80135c4:	4a0d      	ldr	r2, [pc, #52]	; (80135fc <vPortEnterCritical+0x58>)
 80135c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80135c8:	4b0c      	ldr	r3, [pc, #48]	; (80135fc <vPortEnterCritical+0x58>)
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	2b01      	cmp	r3, #1
 80135ce:	d10f      	bne.n	80135f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80135d0:	4b0b      	ldr	r3, [pc, #44]	; (8013600 <vPortEnterCritical+0x5c>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	b2db      	uxtb	r3, r3
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d00a      	beq.n	80135f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80135da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135de:	f383 8811 	msr	BASEPRI, r3
 80135e2:	f3bf 8f6f 	isb	sy
 80135e6:	f3bf 8f4f 	dsb	sy
 80135ea:	603b      	str	r3, [r7, #0]
}
 80135ec:	bf00      	nop
 80135ee:	e7fe      	b.n	80135ee <vPortEnterCritical+0x4a>
	}
}
 80135f0:	bf00      	nop
 80135f2:	370c      	adds	r7, #12
 80135f4:	46bd      	mov	sp, r7
 80135f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fa:	4770      	bx	lr
 80135fc:	20000228 	.word	0x20000228
 8013600:	e000ed04 	.word	0xe000ed04

08013604 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013604:	b480      	push	{r7}
 8013606:	b083      	sub	sp, #12
 8013608:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801360a:	4b12      	ldr	r3, [pc, #72]	; (8013654 <vPortExitCritical+0x50>)
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d10a      	bne.n	8013628 <vPortExitCritical+0x24>
	__asm volatile
 8013612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013616:	f383 8811 	msr	BASEPRI, r3
 801361a:	f3bf 8f6f 	isb	sy
 801361e:	f3bf 8f4f 	dsb	sy
 8013622:	607b      	str	r3, [r7, #4]
}
 8013624:	bf00      	nop
 8013626:	e7fe      	b.n	8013626 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013628:	4b0a      	ldr	r3, [pc, #40]	; (8013654 <vPortExitCritical+0x50>)
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	3b01      	subs	r3, #1
 801362e:	4a09      	ldr	r2, [pc, #36]	; (8013654 <vPortExitCritical+0x50>)
 8013630:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013632:	4b08      	ldr	r3, [pc, #32]	; (8013654 <vPortExitCritical+0x50>)
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d105      	bne.n	8013646 <vPortExitCritical+0x42>
 801363a:	2300      	movs	r3, #0
 801363c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801363e:	683b      	ldr	r3, [r7, #0]
 8013640:	f383 8811 	msr	BASEPRI, r3
}
 8013644:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013646:	bf00      	nop
 8013648:	370c      	adds	r7, #12
 801364a:	46bd      	mov	sp, r7
 801364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013650:	4770      	bx	lr
 8013652:	bf00      	nop
 8013654:	20000228 	.word	0x20000228
	...

08013660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013660:	f3ef 8009 	mrs	r0, PSP
 8013664:	f3bf 8f6f 	isb	sy
 8013668:	4b15      	ldr	r3, [pc, #84]	; (80136c0 <pxCurrentTCBConst>)
 801366a:	681a      	ldr	r2, [r3, #0]
 801366c:	f01e 0f10 	tst.w	lr, #16
 8013670:	bf08      	it	eq
 8013672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801367a:	6010      	str	r0, [r2, #0]
 801367c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013680:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013684:	f380 8811 	msr	BASEPRI, r0
 8013688:	f3bf 8f4f 	dsb	sy
 801368c:	f3bf 8f6f 	isb	sy
 8013690:	f7fe feb6 	bl	8012400 <vTaskSwitchContext>
 8013694:	f04f 0000 	mov.w	r0, #0
 8013698:	f380 8811 	msr	BASEPRI, r0
 801369c:	bc09      	pop	{r0, r3}
 801369e:	6819      	ldr	r1, [r3, #0]
 80136a0:	6808      	ldr	r0, [r1, #0]
 80136a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136a6:	f01e 0f10 	tst.w	lr, #16
 80136aa:	bf08      	it	eq
 80136ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80136b0:	f380 8809 	msr	PSP, r0
 80136b4:	f3bf 8f6f 	isb	sy
 80136b8:	4770      	bx	lr
 80136ba:	bf00      	nop
 80136bc:	f3af 8000 	nop.w

080136c0 <pxCurrentTCBConst>:
 80136c0:	20007dc0 	.word	0x20007dc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80136c4:	bf00      	nop
 80136c6:	bf00      	nop

080136c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b082      	sub	sp, #8
 80136cc:	af00      	add	r7, sp, #0
	__asm volatile
 80136ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136d2:	f383 8811 	msr	BASEPRI, r3
 80136d6:	f3bf 8f6f 	isb	sy
 80136da:	f3bf 8f4f 	dsb	sy
 80136de:	607b      	str	r3, [r7, #4]
}
 80136e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80136e2:	f7fe fdd3 	bl	801228c <xTaskIncrementTick>
 80136e6:	4603      	mov	r3, r0
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d003      	beq.n	80136f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80136ec:	4b06      	ldr	r3, [pc, #24]	; (8013708 <xPortSysTickHandler+0x40>)
 80136ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136f2:	601a      	str	r2, [r3, #0]
 80136f4:	2300      	movs	r3, #0
 80136f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80136f8:	683b      	ldr	r3, [r7, #0]
 80136fa:	f383 8811 	msr	BASEPRI, r3
}
 80136fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013700:	bf00      	nop
 8013702:	3708      	adds	r7, #8
 8013704:	46bd      	mov	sp, r7
 8013706:	bd80      	pop	{r7, pc}
 8013708:	e000ed04 	.word	0xe000ed04

0801370c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801370c:	b480      	push	{r7}
 801370e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013710:	4b0b      	ldr	r3, [pc, #44]	; (8013740 <vPortSetupTimerInterrupt+0x34>)
 8013712:	2200      	movs	r2, #0
 8013714:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013716:	4b0b      	ldr	r3, [pc, #44]	; (8013744 <vPortSetupTimerInterrupt+0x38>)
 8013718:	2200      	movs	r2, #0
 801371a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801371c:	4b0a      	ldr	r3, [pc, #40]	; (8013748 <vPortSetupTimerInterrupt+0x3c>)
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	4a0a      	ldr	r2, [pc, #40]	; (801374c <vPortSetupTimerInterrupt+0x40>)
 8013722:	fba2 2303 	umull	r2, r3, r2, r3
 8013726:	099b      	lsrs	r3, r3, #6
 8013728:	4a09      	ldr	r2, [pc, #36]	; (8013750 <vPortSetupTimerInterrupt+0x44>)
 801372a:	3b01      	subs	r3, #1
 801372c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801372e:	4b04      	ldr	r3, [pc, #16]	; (8013740 <vPortSetupTimerInterrupt+0x34>)
 8013730:	2207      	movs	r2, #7
 8013732:	601a      	str	r2, [r3, #0]
}
 8013734:	bf00      	nop
 8013736:	46bd      	mov	sp, r7
 8013738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801373c:	4770      	bx	lr
 801373e:	bf00      	nop
 8013740:	e000e010 	.word	0xe000e010
 8013744:	e000e018 	.word	0xe000e018
 8013748:	200001e0 	.word	0x200001e0
 801374c:	10624dd3 	.word	0x10624dd3
 8013750:	e000e014 	.word	0xe000e014

08013754 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013754:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013764 <vPortEnableVFP+0x10>
 8013758:	6801      	ldr	r1, [r0, #0]
 801375a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801375e:	6001      	str	r1, [r0, #0]
 8013760:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013762:	bf00      	nop
 8013764:	e000ed88 	.word	0xe000ed88

08013768 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013768:	b480      	push	{r7}
 801376a:	b085      	sub	sp, #20
 801376c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801376e:	f3ef 8305 	mrs	r3, IPSR
 8013772:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	2b0f      	cmp	r3, #15
 8013778:	d914      	bls.n	80137a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801377a:	4a17      	ldr	r2, [pc, #92]	; (80137d8 <vPortValidateInterruptPriority+0x70>)
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	4413      	add	r3, r2
 8013780:	781b      	ldrb	r3, [r3, #0]
 8013782:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013784:	4b15      	ldr	r3, [pc, #84]	; (80137dc <vPortValidateInterruptPriority+0x74>)
 8013786:	781b      	ldrb	r3, [r3, #0]
 8013788:	7afa      	ldrb	r2, [r7, #11]
 801378a:	429a      	cmp	r2, r3
 801378c:	d20a      	bcs.n	80137a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801378e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013792:	f383 8811 	msr	BASEPRI, r3
 8013796:	f3bf 8f6f 	isb	sy
 801379a:	f3bf 8f4f 	dsb	sy
 801379e:	607b      	str	r3, [r7, #4]
}
 80137a0:	bf00      	nop
 80137a2:	e7fe      	b.n	80137a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80137a4:	4b0e      	ldr	r3, [pc, #56]	; (80137e0 <vPortValidateInterruptPriority+0x78>)
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80137ac:	4b0d      	ldr	r3, [pc, #52]	; (80137e4 <vPortValidateInterruptPriority+0x7c>)
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	429a      	cmp	r2, r3
 80137b2:	d90a      	bls.n	80137ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80137b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137b8:	f383 8811 	msr	BASEPRI, r3
 80137bc:	f3bf 8f6f 	isb	sy
 80137c0:	f3bf 8f4f 	dsb	sy
 80137c4:	603b      	str	r3, [r7, #0]
}
 80137c6:	bf00      	nop
 80137c8:	e7fe      	b.n	80137c8 <vPortValidateInterruptPriority+0x60>
	}
 80137ca:	bf00      	nop
 80137cc:	3714      	adds	r7, #20
 80137ce:	46bd      	mov	sp, r7
 80137d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d4:	4770      	bx	lr
 80137d6:	bf00      	nop
 80137d8:	e000e3f0 	.word	0xe000e3f0
 80137dc:	200083ec 	.word	0x200083ec
 80137e0:	e000ed0c 	.word	0xe000ed0c
 80137e4:	200083f0 	.word	0x200083f0

080137e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b088      	sub	sp, #32
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80137f0:	2300      	movs	r3, #0
 80137f2:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 80137f4:	4b48      	ldr	r3, [pc, #288]	; (8013918 <pvPortMalloc+0x130>)
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d10a      	bne.n	8013812 <pvPortMalloc+0x2a>
	__asm volatile
 80137fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013800:	f383 8811 	msr	BASEPRI, r3
 8013804:	f3bf 8f6f 	isb	sy
 8013808:	f3bf 8f4f 	dsb	sy
 801380c:	60fb      	str	r3, [r7, #12]
}
 801380e:	bf00      	nop
 8013810:	e7fe      	b.n	8013810 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 8013812:	f7fe fc7f 	bl	8012114 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013816:	4b41      	ldr	r3, [pc, #260]	; (801391c <pvPortMalloc+0x134>)
 8013818:	681a      	ldr	r2, [r3, #0]
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	4013      	ands	r3, r2
 801381e:	2b00      	cmp	r3, #0
 8013820:	d172      	bne.n	8013908 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d00d      	beq.n	8013844 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8013828:	2208      	movs	r2, #8
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	4413      	add	r3, r2
 801382e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	f003 0307 	and.w	r3, r3, #7
 8013836:	2b00      	cmp	r3, #0
 8013838:	d004      	beq.n	8013844 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	f023 0307 	bic.w	r3, r3, #7
 8013840:	3308      	adds	r3, #8
 8013842:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d05e      	beq.n	8013908 <pvPortMalloc+0x120>
 801384a:	4b35      	ldr	r3, [pc, #212]	; (8013920 <pvPortMalloc+0x138>)
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	687a      	ldr	r2, [r7, #4]
 8013850:	429a      	cmp	r2, r3
 8013852:	d859      	bhi.n	8013908 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013854:	4b33      	ldr	r3, [pc, #204]	; (8013924 <pvPortMalloc+0x13c>)
 8013856:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 8013858:	4b32      	ldr	r3, [pc, #200]	; (8013924 <pvPortMalloc+0x13c>)
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801385e:	e004      	b.n	801386a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8013860:	69fb      	ldr	r3, [r7, #28]
 8013862:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013864:	69fb      	ldr	r3, [r7, #28]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801386a:	69fb      	ldr	r3, [r7, #28]
 801386c:	685b      	ldr	r3, [r3, #4]
 801386e:	687a      	ldr	r2, [r7, #4]
 8013870:	429a      	cmp	r2, r3
 8013872:	d903      	bls.n	801387c <pvPortMalloc+0x94>
 8013874:	69fb      	ldr	r3, [r7, #28]
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d1f1      	bne.n	8013860 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801387c:	4b26      	ldr	r3, [pc, #152]	; (8013918 <pvPortMalloc+0x130>)
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	69fa      	ldr	r2, [r7, #28]
 8013882:	429a      	cmp	r2, r3
 8013884:	d040      	beq.n	8013908 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013886:	69bb      	ldr	r3, [r7, #24]
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	2208      	movs	r2, #8
 801388c:	4413      	add	r3, r2
 801388e:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013890:	69fb      	ldr	r3, [r7, #28]
 8013892:	681a      	ldr	r2, [r3, #0]
 8013894:	69bb      	ldr	r3, [r7, #24]
 8013896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013898:	69fb      	ldr	r3, [r7, #28]
 801389a:	685a      	ldr	r2, [r3, #4]
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	1ad2      	subs	r2, r2, r3
 80138a0:	2308      	movs	r3, #8
 80138a2:	005b      	lsls	r3, r3, #1
 80138a4:	429a      	cmp	r2, r3
 80138a6:	d90f      	bls.n	80138c8 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80138a8:	69fa      	ldr	r2, [r7, #28]
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	4413      	add	r3, r2
 80138ae:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80138b0:	69fb      	ldr	r3, [r7, #28]
 80138b2:	685a      	ldr	r2, [r3, #4]
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	1ad2      	subs	r2, r2, r3
 80138b8:	693b      	ldr	r3, [r7, #16]
 80138ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80138bc:	69fb      	ldr	r3, [r7, #28]
 80138be:	687a      	ldr	r2, [r7, #4]
 80138c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80138c2:	6938      	ldr	r0, [r7, #16]
 80138c4:	f000 f896 	bl	80139f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80138c8:	4b15      	ldr	r3, [pc, #84]	; (8013920 <pvPortMalloc+0x138>)
 80138ca:	681a      	ldr	r2, [r3, #0]
 80138cc:	69fb      	ldr	r3, [r7, #28]
 80138ce:	685b      	ldr	r3, [r3, #4]
 80138d0:	1ad3      	subs	r3, r2, r3
 80138d2:	4a13      	ldr	r2, [pc, #76]	; (8013920 <pvPortMalloc+0x138>)
 80138d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80138d6:	4b12      	ldr	r3, [pc, #72]	; (8013920 <pvPortMalloc+0x138>)
 80138d8:	681a      	ldr	r2, [r3, #0]
 80138da:	4b13      	ldr	r3, [pc, #76]	; (8013928 <pvPortMalloc+0x140>)
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	429a      	cmp	r2, r3
 80138e0:	d203      	bcs.n	80138ea <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80138e2:	4b0f      	ldr	r3, [pc, #60]	; (8013920 <pvPortMalloc+0x138>)
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	4a10      	ldr	r2, [pc, #64]	; (8013928 <pvPortMalloc+0x140>)
 80138e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80138ea:	69fb      	ldr	r3, [r7, #28]
 80138ec:	685a      	ldr	r2, [r3, #4]
 80138ee:	4b0b      	ldr	r3, [pc, #44]	; (801391c <pvPortMalloc+0x134>)
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	431a      	orrs	r2, r3
 80138f4:	69fb      	ldr	r3, [r7, #28]
 80138f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80138f8:	69fb      	ldr	r3, [r7, #28]
 80138fa:	2200      	movs	r2, #0
 80138fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80138fe:	4b0b      	ldr	r3, [pc, #44]	; (801392c <pvPortMalloc+0x144>)
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	3301      	adds	r3, #1
 8013904:	4a09      	ldr	r2, [pc, #36]	; (801392c <pvPortMalloc+0x144>)
 8013906:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013908:	f7fe fc12 	bl	8012130 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 801390c:	697b      	ldr	r3, [r7, #20]
}
 801390e:	4618      	mov	r0, r3
 8013910:	3720      	adds	r7, #32
 8013912:	46bd      	mov	sp, r7
 8013914:	bd80      	pop	{r7, pc}
 8013916:	bf00      	nop
 8013918:	200083fc 	.word	0x200083fc
 801391c:	20008410 	.word	0x20008410
 8013920:	20008400 	.word	0x20008400
 8013924:	200083f4 	.word	0x200083f4
 8013928:	20008404 	.word	0x20008404
 801392c:	20008408 	.word	0x20008408

08013930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b086      	sub	sp, #24
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d04d      	beq.n	80139de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013942:	2308      	movs	r3, #8
 8013944:	425b      	negs	r3, r3
 8013946:	697a      	ldr	r2, [r7, #20]
 8013948:	4413      	add	r3, r2
 801394a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013950:	693b      	ldr	r3, [r7, #16]
 8013952:	685a      	ldr	r2, [r3, #4]
 8013954:	4b24      	ldr	r3, [pc, #144]	; (80139e8 <vPortFree+0xb8>)
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	4013      	ands	r3, r2
 801395a:	2b00      	cmp	r3, #0
 801395c:	d10a      	bne.n	8013974 <vPortFree+0x44>
	__asm volatile
 801395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013962:	f383 8811 	msr	BASEPRI, r3
 8013966:	f3bf 8f6f 	isb	sy
 801396a:	f3bf 8f4f 	dsb	sy
 801396e:	60fb      	str	r3, [r7, #12]
}
 8013970:	bf00      	nop
 8013972:	e7fe      	b.n	8013972 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013974:	693b      	ldr	r3, [r7, #16]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d00a      	beq.n	8013992 <vPortFree+0x62>
	__asm volatile
 801397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013980:	f383 8811 	msr	BASEPRI, r3
 8013984:	f3bf 8f6f 	isb	sy
 8013988:	f3bf 8f4f 	dsb	sy
 801398c:	60bb      	str	r3, [r7, #8]
}
 801398e:	bf00      	nop
 8013990:	e7fe      	b.n	8013990 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013992:	693b      	ldr	r3, [r7, #16]
 8013994:	685a      	ldr	r2, [r3, #4]
 8013996:	4b14      	ldr	r3, [pc, #80]	; (80139e8 <vPortFree+0xb8>)
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	4013      	ands	r3, r2
 801399c:	2b00      	cmp	r3, #0
 801399e:	d01e      	beq.n	80139de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80139a0:	693b      	ldr	r3, [r7, #16]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d11a      	bne.n	80139de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80139a8:	693b      	ldr	r3, [r7, #16]
 80139aa:	685a      	ldr	r2, [r3, #4]
 80139ac:	4b0e      	ldr	r3, [pc, #56]	; (80139e8 <vPortFree+0xb8>)
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	43db      	mvns	r3, r3
 80139b2:	401a      	ands	r2, r3
 80139b4:	693b      	ldr	r3, [r7, #16]
 80139b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80139b8:	f7fe fbac 	bl	8012114 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80139bc:	693b      	ldr	r3, [r7, #16]
 80139be:	685a      	ldr	r2, [r3, #4]
 80139c0:	4b0a      	ldr	r3, [pc, #40]	; (80139ec <vPortFree+0xbc>)
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	4413      	add	r3, r2
 80139c6:	4a09      	ldr	r2, [pc, #36]	; (80139ec <vPortFree+0xbc>)
 80139c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80139ca:	6938      	ldr	r0, [r7, #16]
 80139cc:	f000 f812 	bl	80139f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80139d0:	4b07      	ldr	r3, [pc, #28]	; (80139f0 <vPortFree+0xc0>)
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	3301      	adds	r3, #1
 80139d6:	4a06      	ldr	r2, [pc, #24]	; (80139f0 <vPortFree+0xc0>)
 80139d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80139da:	f7fe fba9 	bl	8012130 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80139de:	bf00      	nop
 80139e0:	3718      	adds	r7, #24
 80139e2:	46bd      	mov	sp, r7
 80139e4:	bd80      	pop	{r7, pc}
 80139e6:	bf00      	nop
 80139e8:	20008410 	.word	0x20008410
 80139ec:	20008400 	.word	0x20008400
 80139f0:	2000840c 	.word	0x2000840c

080139f4 <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80139f4:	b480      	push	{r7}
 80139f6:	b085      	sub	sp, #20
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80139fc:	4b28      	ldr	r3, [pc, #160]	; (8013aa0 <prvInsertBlockIntoFreeList+0xac>)
 80139fe:	60fb      	str	r3, [r7, #12]
 8013a00:	e002      	b.n	8013a08 <prvInsertBlockIntoFreeList+0x14>
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	60fb      	str	r3, [r7, #12]
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	687a      	ldr	r2, [r7, #4]
 8013a0e:	429a      	cmp	r2, r3
 8013a10:	d8f7      	bhi.n	8013a02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	685b      	ldr	r3, [r3, #4]
 8013a1a:	68ba      	ldr	r2, [r7, #8]
 8013a1c:	4413      	add	r3, r2
 8013a1e:	687a      	ldr	r2, [r7, #4]
 8013a20:	429a      	cmp	r2, r3
 8013a22:	d108      	bne.n	8013a36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	685a      	ldr	r2, [r3, #4]
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	685b      	ldr	r3, [r3, #4]
 8013a2c:	441a      	add	r2, r3
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	685b      	ldr	r3, [r3, #4]
 8013a3e:	68ba      	ldr	r2, [r7, #8]
 8013a40:	441a      	add	r2, r3
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	429a      	cmp	r2, r3
 8013a48:	d118      	bne.n	8013a7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	681a      	ldr	r2, [r3, #0]
 8013a4e:	4b15      	ldr	r3, [pc, #84]	; (8013aa4 <prvInsertBlockIntoFreeList+0xb0>)
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	429a      	cmp	r2, r3
 8013a54:	d00d      	beq.n	8013a72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	685a      	ldr	r2, [r3, #4]
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	685b      	ldr	r3, [r3, #4]
 8013a60:	441a      	add	r2, r3
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	681a      	ldr	r2, [r3, #0]
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	601a      	str	r2, [r3, #0]
 8013a70:	e008      	b.n	8013a84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013a72:	4b0c      	ldr	r3, [pc, #48]	; (8013aa4 <prvInsertBlockIntoFreeList+0xb0>)
 8013a74:	681a      	ldr	r2, [r3, #0]
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	601a      	str	r2, [r3, #0]
 8013a7a:	e003      	b.n	8013a84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	681a      	ldr	r2, [r3, #0]
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013a84:	68fa      	ldr	r2, [r7, #12]
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	429a      	cmp	r2, r3
 8013a8a:	d002      	beq.n	8013a92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	687a      	ldr	r2, [r7, #4]
 8013a90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a92:	bf00      	nop
 8013a94:	3714      	adds	r7, #20
 8013a96:	46bd      	mov	sp, r7
 8013a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9c:	4770      	bx	lr
 8013a9e:	bf00      	nop
 8013aa0:	200083f4 	.word	0x200083f4
 8013aa4:	200083fc 	.word	0x200083fc

08013aa8 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 8013aa8:	b480      	push	{r7}
 8013aaa:	b08f      	sub	sp, #60	; 0x3c
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 8013ab8:	2300      	movs	r3, #0
 8013aba:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 8013abc:	4b5a      	ldr	r3, [pc, #360]	; (8013c28 <vPortDefineHeapRegions+0x180>)
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d00a      	beq.n	8013ada <vPortDefineHeapRegions+0x32>
	__asm volatile
 8013ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ac8:	f383 8811 	msr	BASEPRI, r3
 8013acc:	f3bf 8f6f 	isb	sy
 8013ad0:	f3bf 8f4f 	dsb	sy
 8013ad4:	617b      	str	r3, [r7, #20]
}
 8013ad6:	bf00      	nop
 8013ad8:	e7fe      	b.n	8013ad8 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8013ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013adc:	00db      	lsls	r3, r3, #3
 8013ade:	687a      	ldr	r2, [r7, #4]
 8013ae0:	4413      	add	r3, r2
 8013ae2:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 8013ae4:	e07d      	b.n	8013be2 <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 8013ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae8:	685b      	ldr	r3, [r3, #4]
 8013aea:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 8013aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013af4:	f003 0307 	and.w	r3, r3, #7
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d00e      	beq.n	8013b1a <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 8013afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013afe:	3307      	adds	r3, #7
 8013b00:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8013b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b04:	f023 0307 	bic.w	r3, r3, #7
 8013b08:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 8013b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	461a      	mov	r2, r3
 8013b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b12:	1ad3      	subs	r3, r2, r3
 8013b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b16:	4413      	add	r3, r2
 8013b18:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 8013b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b1c:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 8013b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d106      	bne.n	8013b32 <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 8013b24:	69fb      	ldr	r3, [r7, #28]
 8013b26:	4a41      	ldr	r2, [pc, #260]	; (8013c2c <vPortDefineHeapRegions+0x184>)
 8013b28:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 8013b2a:	4b40      	ldr	r3, [pc, #256]	; (8013c2c <vPortDefineHeapRegions+0x184>)
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	605a      	str	r2, [r3, #4]
 8013b30:	e01f      	b.n	8013b72 <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 8013b32:	4b3d      	ldr	r3, [pc, #244]	; (8013c28 <vPortDefineHeapRegions+0x180>)
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d10a      	bne.n	8013b50 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 8013b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b3e:	f383 8811 	msr	BASEPRI, r3
 8013b42:	f3bf 8f6f 	isb	sy
 8013b46:	f3bf 8f4f 	dsb	sy
 8013b4a:	613b      	str	r3, [r7, #16]
}
 8013b4c:	bf00      	nop
 8013b4e:	e7fe      	b.n	8013b4e <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 8013b50:	4b35      	ldr	r3, [pc, #212]	; (8013c28 <vPortDefineHeapRegions+0x180>)
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	461a      	mov	r2, r3
 8013b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b58:	4293      	cmp	r3, r2
 8013b5a:	d80a      	bhi.n	8013b72 <vPortDefineHeapRegions+0xca>
	__asm volatile
 8013b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b60:	f383 8811 	msr	BASEPRI, r3
 8013b64:	f3bf 8f6f 	isb	sy
 8013b68:	f3bf 8f4f 	dsb	sy
 8013b6c:	60fb      	str	r3, [r7, #12]
}
 8013b6e:	bf00      	nop
 8013b70:	e7fe      	b.n	8013b70 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 8013b72:	4b2d      	ldr	r3, [pc, #180]	; (8013c28 <vPortDefineHeapRegions+0x180>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 8013b78:	69fa      	ldr	r2, [r7, #28]
 8013b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b7c:	4413      	add	r3, r2
 8013b7e:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 8013b80:	2208      	movs	r2, #8
 8013b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b84:	1a9b      	subs	r3, r3, r2
 8013b86:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8013b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b8a:	f023 0307 	bic.w	r3, r3, #7
 8013b8e:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 8013b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b92:	4a25      	ldr	r2, [pc, #148]	; (8013c28 <vPortDefineHeapRegions+0x180>)
 8013b94:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 8013b96:	4b24      	ldr	r3, [pc, #144]	; (8013c28 <vPortDefineHeapRegions+0x180>)
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 8013b9e:	4b22      	ldr	r3, [pc, #136]	; (8013c28 <vPortDefineHeapRegions+0x180>)
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 8013ba6:	69fb      	ldr	r3, [r7, #28]
 8013ba8:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 8013baa:	6a3b      	ldr	r3, [r7, #32]
 8013bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bae:	1ad2      	subs	r2, r2, r3
 8013bb0:	6a3b      	ldr	r3, [r7, #32]
 8013bb2:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 8013bb4:	4b1c      	ldr	r3, [pc, #112]	; (8013c28 <vPortDefineHeapRegions+0x180>)
 8013bb6:	681a      	ldr	r2, [r3, #0]
 8013bb8:	6a3b      	ldr	r3, [r7, #32]
 8013bba:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 8013bbc:	69bb      	ldr	r3, [r7, #24]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d002      	beq.n	8013bc8 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 8013bc2:	69bb      	ldr	r3, [r7, #24]
 8013bc4:	6a3a      	ldr	r2, [r7, #32]
 8013bc6:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8013bc8:	6a3b      	ldr	r3, [r7, #32]
 8013bca:	685b      	ldr	r3, [r3, #4]
 8013bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013bce:	4413      	add	r3, r2
 8013bd0:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 8013bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bd4:	3301      	adds	r3, #1
 8013bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8013bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bda:	00db      	lsls	r3, r3, #3
 8013bdc:	687a      	ldr	r2, [r7, #4]
 8013bde:	4413      	add	r3, r2
 8013be0:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 8013be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be4:	685b      	ldr	r3, [r3, #4]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	f47f af7d 	bne.w	8013ae6 <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8013bec:	4a10      	ldr	r2, [pc, #64]	; (8013c30 <vPortDefineHeapRegions+0x188>)
 8013bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bf0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 8013bf2:	4a10      	ldr	r2, [pc, #64]	; (8013c34 <vPortDefineHeapRegions+0x18c>)
 8013bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bf6:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 8013bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d10a      	bne.n	8013c14 <vPortDefineHeapRegions+0x16c>
	__asm volatile
 8013bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c02:	f383 8811 	msr	BASEPRI, r3
 8013c06:	f3bf 8f6f 	isb	sy
 8013c0a:	f3bf 8f4f 	dsb	sy
 8013c0e:	60bb      	str	r3, [r7, #8]
}
 8013c10:	bf00      	nop
 8013c12:	e7fe      	b.n	8013c12 <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013c14:	4b08      	ldr	r3, [pc, #32]	; (8013c38 <vPortDefineHeapRegions+0x190>)
 8013c16:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013c1a:	601a      	str	r2, [r3, #0]
}
 8013c1c:	bf00      	nop
 8013c1e:	373c      	adds	r7, #60	; 0x3c
 8013c20:	46bd      	mov	sp, r7
 8013c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c26:	4770      	bx	lr
 8013c28:	200083fc 	.word	0x200083fc
 8013c2c:	200083f4 	.word	0x200083f4
 8013c30:	20008404 	.word	0x20008404
 8013c34:	20008400 	.word	0x20008400
 8013c38:	20008410 	.word	0x20008410

08013c3c <atof>:
 8013c3c:	2100      	movs	r1, #0
 8013c3e:	f001 be2d 	b.w	801589c <strtod>

08013c42 <atoi>:
 8013c42:	220a      	movs	r2, #10
 8013c44:	2100      	movs	r1, #0
 8013c46:	f001 beb7 	b.w	80159b8 <strtol>

08013c4a <atol>:
 8013c4a:	220a      	movs	r2, #10
 8013c4c:	2100      	movs	r1, #0
 8013c4e:	f001 beb3 	b.w	80159b8 <strtol>
	...

08013c54 <__errno>:
 8013c54:	4b01      	ldr	r3, [pc, #4]	; (8013c5c <__errno+0x8>)
 8013c56:	6818      	ldr	r0, [r3, #0]
 8013c58:	4770      	bx	lr
 8013c5a:	bf00      	nop
 8013c5c:	2000022c 	.word	0x2000022c

08013c60 <std>:
 8013c60:	2300      	movs	r3, #0
 8013c62:	b510      	push	{r4, lr}
 8013c64:	4604      	mov	r4, r0
 8013c66:	e9c0 3300 	strd	r3, r3, [r0]
 8013c6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013c6e:	6083      	str	r3, [r0, #8]
 8013c70:	8181      	strh	r1, [r0, #12]
 8013c72:	6643      	str	r3, [r0, #100]	; 0x64
 8013c74:	81c2      	strh	r2, [r0, #14]
 8013c76:	6183      	str	r3, [r0, #24]
 8013c78:	4619      	mov	r1, r3
 8013c7a:	2208      	movs	r2, #8
 8013c7c:	305c      	adds	r0, #92	; 0x5c
 8013c7e:	f000 f9c6 	bl	801400e <memset>
 8013c82:	4b05      	ldr	r3, [pc, #20]	; (8013c98 <std+0x38>)
 8013c84:	6263      	str	r3, [r4, #36]	; 0x24
 8013c86:	4b05      	ldr	r3, [pc, #20]	; (8013c9c <std+0x3c>)
 8013c88:	62a3      	str	r3, [r4, #40]	; 0x28
 8013c8a:	4b05      	ldr	r3, [pc, #20]	; (8013ca0 <std+0x40>)
 8013c8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013c8e:	4b05      	ldr	r3, [pc, #20]	; (8013ca4 <std+0x44>)
 8013c90:	6224      	str	r4, [r4, #32]
 8013c92:	6323      	str	r3, [r4, #48]	; 0x30
 8013c94:	bd10      	pop	{r4, pc}
 8013c96:	bf00      	nop
 8013c98:	08014b51 	.word	0x08014b51
 8013c9c:	08014b73 	.word	0x08014b73
 8013ca0:	08014bab 	.word	0x08014bab
 8013ca4:	08014bcf 	.word	0x08014bcf

08013ca8 <_cleanup_r>:
 8013ca8:	4901      	ldr	r1, [pc, #4]	; (8013cb0 <_cleanup_r+0x8>)
 8013caa:	f000 b8af 	b.w	8013e0c <_fwalk_reent>
 8013cae:	bf00      	nop
 8013cb0:	08016889 	.word	0x08016889

08013cb4 <__sfmoreglue>:
 8013cb4:	b570      	push	{r4, r5, r6, lr}
 8013cb6:	2268      	movs	r2, #104	; 0x68
 8013cb8:	1e4d      	subs	r5, r1, #1
 8013cba:	4355      	muls	r5, r2
 8013cbc:	460e      	mov	r6, r1
 8013cbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013cc2:	f000 f9cd 	bl	8014060 <_malloc_r>
 8013cc6:	4604      	mov	r4, r0
 8013cc8:	b140      	cbz	r0, 8013cdc <__sfmoreglue+0x28>
 8013cca:	2100      	movs	r1, #0
 8013ccc:	e9c0 1600 	strd	r1, r6, [r0]
 8013cd0:	300c      	adds	r0, #12
 8013cd2:	60a0      	str	r0, [r4, #8]
 8013cd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013cd8:	f000 f999 	bl	801400e <memset>
 8013cdc:	4620      	mov	r0, r4
 8013cde:	bd70      	pop	{r4, r5, r6, pc}

08013ce0 <__sfp_lock_acquire>:
 8013ce0:	4801      	ldr	r0, [pc, #4]	; (8013ce8 <__sfp_lock_acquire+0x8>)
 8013ce2:	f000 b984 	b.w	8013fee <__retarget_lock_acquire_recursive>
 8013ce6:	bf00      	nop
 8013ce8:	20008415 	.word	0x20008415

08013cec <__sfp_lock_release>:
 8013cec:	4801      	ldr	r0, [pc, #4]	; (8013cf4 <__sfp_lock_release+0x8>)
 8013cee:	f000 b97f 	b.w	8013ff0 <__retarget_lock_release_recursive>
 8013cf2:	bf00      	nop
 8013cf4:	20008415 	.word	0x20008415

08013cf8 <__sinit_lock_acquire>:
 8013cf8:	4801      	ldr	r0, [pc, #4]	; (8013d00 <__sinit_lock_acquire+0x8>)
 8013cfa:	f000 b978 	b.w	8013fee <__retarget_lock_acquire_recursive>
 8013cfe:	bf00      	nop
 8013d00:	20008416 	.word	0x20008416

08013d04 <__sinit_lock_release>:
 8013d04:	4801      	ldr	r0, [pc, #4]	; (8013d0c <__sinit_lock_release+0x8>)
 8013d06:	f000 b973 	b.w	8013ff0 <__retarget_lock_release_recursive>
 8013d0a:	bf00      	nop
 8013d0c:	20008416 	.word	0x20008416

08013d10 <__sinit>:
 8013d10:	b510      	push	{r4, lr}
 8013d12:	4604      	mov	r4, r0
 8013d14:	f7ff fff0 	bl	8013cf8 <__sinit_lock_acquire>
 8013d18:	69a3      	ldr	r3, [r4, #24]
 8013d1a:	b11b      	cbz	r3, 8013d24 <__sinit+0x14>
 8013d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d20:	f7ff bff0 	b.w	8013d04 <__sinit_lock_release>
 8013d24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013d28:	6523      	str	r3, [r4, #80]	; 0x50
 8013d2a:	4b13      	ldr	r3, [pc, #76]	; (8013d78 <__sinit+0x68>)
 8013d2c:	4a13      	ldr	r2, [pc, #76]	; (8013d7c <__sinit+0x6c>)
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	62a2      	str	r2, [r4, #40]	; 0x28
 8013d32:	42a3      	cmp	r3, r4
 8013d34:	bf04      	itt	eq
 8013d36:	2301      	moveq	r3, #1
 8013d38:	61a3      	streq	r3, [r4, #24]
 8013d3a:	4620      	mov	r0, r4
 8013d3c:	f000 f820 	bl	8013d80 <__sfp>
 8013d40:	6060      	str	r0, [r4, #4]
 8013d42:	4620      	mov	r0, r4
 8013d44:	f000 f81c 	bl	8013d80 <__sfp>
 8013d48:	60a0      	str	r0, [r4, #8]
 8013d4a:	4620      	mov	r0, r4
 8013d4c:	f000 f818 	bl	8013d80 <__sfp>
 8013d50:	2200      	movs	r2, #0
 8013d52:	60e0      	str	r0, [r4, #12]
 8013d54:	2104      	movs	r1, #4
 8013d56:	6860      	ldr	r0, [r4, #4]
 8013d58:	f7ff ff82 	bl	8013c60 <std>
 8013d5c:	68a0      	ldr	r0, [r4, #8]
 8013d5e:	2201      	movs	r2, #1
 8013d60:	2109      	movs	r1, #9
 8013d62:	f7ff ff7d 	bl	8013c60 <std>
 8013d66:	68e0      	ldr	r0, [r4, #12]
 8013d68:	2202      	movs	r2, #2
 8013d6a:	2112      	movs	r1, #18
 8013d6c:	f7ff ff78 	bl	8013c60 <std>
 8013d70:	2301      	movs	r3, #1
 8013d72:	61a3      	str	r3, [r4, #24]
 8013d74:	e7d2      	b.n	8013d1c <__sinit+0xc>
 8013d76:	bf00      	nop
 8013d78:	0801a36c 	.word	0x0801a36c
 8013d7c:	08013ca9 	.word	0x08013ca9

08013d80 <__sfp>:
 8013d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d82:	4607      	mov	r7, r0
 8013d84:	f7ff ffac 	bl	8013ce0 <__sfp_lock_acquire>
 8013d88:	4b1e      	ldr	r3, [pc, #120]	; (8013e04 <__sfp+0x84>)
 8013d8a:	681e      	ldr	r6, [r3, #0]
 8013d8c:	69b3      	ldr	r3, [r6, #24]
 8013d8e:	b913      	cbnz	r3, 8013d96 <__sfp+0x16>
 8013d90:	4630      	mov	r0, r6
 8013d92:	f7ff ffbd 	bl	8013d10 <__sinit>
 8013d96:	3648      	adds	r6, #72	; 0x48
 8013d98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013d9c:	3b01      	subs	r3, #1
 8013d9e:	d503      	bpl.n	8013da8 <__sfp+0x28>
 8013da0:	6833      	ldr	r3, [r6, #0]
 8013da2:	b30b      	cbz	r3, 8013de8 <__sfp+0x68>
 8013da4:	6836      	ldr	r6, [r6, #0]
 8013da6:	e7f7      	b.n	8013d98 <__sfp+0x18>
 8013da8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013dac:	b9d5      	cbnz	r5, 8013de4 <__sfp+0x64>
 8013dae:	4b16      	ldr	r3, [pc, #88]	; (8013e08 <__sfp+0x88>)
 8013db0:	60e3      	str	r3, [r4, #12]
 8013db2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013db6:	6665      	str	r5, [r4, #100]	; 0x64
 8013db8:	f000 f918 	bl	8013fec <__retarget_lock_init_recursive>
 8013dbc:	f7ff ff96 	bl	8013cec <__sfp_lock_release>
 8013dc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013dc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013dc8:	6025      	str	r5, [r4, #0]
 8013dca:	61a5      	str	r5, [r4, #24]
 8013dcc:	2208      	movs	r2, #8
 8013dce:	4629      	mov	r1, r5
 8013dd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013dd4:	f000 f91b 	bl	801400e <memset>
 8013dd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013ddc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013de0:	4620      	mov	r0, r4
 8013de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013de4:	3468      	adds	r4, #104	; 0x68
 8013de6:	e7d9      	b.n	8013d9c <__sfp+0x1c>
 8013de8:	2104      	movs	r1, #4
 8013dea:	4638      	mov	r0, r7
 8013dec:	f7ff ff62 	bl	8013cb4 <__sfmoreglue>
 8013df0:	4604      	mov	r4, r0
 8013df2:	6030      	str	r0, [r6, #0]
 8013df4:	2800      	cmp	r0, #0
 8013df6:	d1d5      	bne.n	8013da4 <__sfp+0x24>
 8013df8:	f7ff ff78 	bl	8013cec <__sfp_lock_release>
 8013dfc:	230c      	movs	r3, #12
 8013dfe:	603b      	str	r3, [r7, #0]
 8013e00:	e7ee      	b.n	8013de0 <__sfp+0x60>
 8013e02:	bf00      	nop
 8013e04:	0801a36c 	.word	0x0801a36c
 8013e08:	ffff0001 	.word	0xffff0001

08013e0c <_fwalk_reent>:
 8013e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e10:	4606      	mov	r6, r0
 8013e12:	4688      	mov	r8, r1
 8013e14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013e18:	2700      	movs	r7, #0
 8013e1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013e1e:	f1b9 0901 	subs.w	r9, r9, #1
 8013e22:	d505      	bpl.n	8013e30 <_fwalk_reent+0x24>
 8013e24:	6824      	ldr	r4, [r4, #0]
 8013e26:	2c00      	cmp	r4, #0
 8013e28:	d1f7      	bne.n	8013e1a <_fwalk_reent+0xe>
 8013e2a:	4638      	mov	r0, r7
 8013e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e30:	89ab      	ldrh	r3, [r5, #12]
 8013e32:	2b01      	cmp	r3, #1
 8013e34:	d907      	bls.n	8013e46 <_fwalk_reent+0x3a>
 8013e36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013e3a:	3301      	adds	r3, #1
 8013e3c:	d003      	beq.n	8013e46 <_fwalk_reent+0x3a>
 8013e3e:	4629      	mov	r1, r5
 8013e40:	4630      	mov	r0, r6
 8013e42:	47c0      	blx	r8
 8013e44:	4307      	orrs	r7, r0
 8013e46:	3568      	adds	r5, #104	; 0x68
 8013e48:	e7e9      	b.n	8013e1e <_fwalk_reent+0x12>
	...

08013e4c <gmtime_r>:
 8013e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e50:	e9d0 6700 	ldrd	r6, r7, [r0]
 8013e54:	460c      	mov	r4, r1
 8013e56:	4a4f      	ldr	r2, [pc, #316]	; (8013f94 <gmtime_r+0x148>)
 8013e58:	2300      	movs	r3, #0
 8013e5a:	4630      	mov	r0, r6
 8013e5c:	4639      	mov	r1, r7
 8013e5e:	f7ec ff23 	bl	8000ca8 <__aeabi_ldivmod>
 8013e62:	4639      	mov	r1, r7
 8013e64:	4605      	mov	r5, r0
 8013e66:	4a4b      	ldr	r2, [pc, #300]	; (8013f94 <gmtime_r+0x148>)
 8013e68:	4630      	mov	r0, r6
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	f7ec ff1c 	bl	8000ca8 <__aeabi_ldivmod>
 8013e70:	2a00      	cmp	r2, #0
 8013e72:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8013e76:	bfb7      	itett	lt
 8013e78:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8013e7c:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8013e80:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8013e84:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8013e88:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8013e8c:	fbb2 f1f0 	udiv	r1, r2, r0
 8013e90:	fb00 2211 	mls	r2, r0, r1, r2
 8013e94:	203c      	movs	r0, #60	; 0x3c
 8013e96:	60a1      	str	r1, [r4, #8]
 8013e98:	fbb2 f1f0 	udiv	r1, r2, r0
 8013e9c:	fb00 2211 	mls	r2, r0, r1, r2
 8013ea0:	6061      	str	r1, [r4, #4]
 8013ea2:	6022      	str	r2, [r4, #0]
 8013ea4:	2107      	movs	r1, #7
 8013ea6:	1cda      	adds	r2, r3, #3
 8013ea8:	fb92 f1f1 	sdiv	r1, r2, r1
 8013eac:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8013eb0:	1a52      	subs	r2, r2, r1
 8013eb2:	bf48      	it	mi
 8013eb4:	3207      	addmi	r2, #7
 8013eb6:	4d38      	ldr	r5, [pc, #224]	; (8013f98 <gmtime_r+0x14c>)
 8013eb8:	4838      	ldr	r0, [pc, #224]	; (8013f9c <gmtime_r+0x150>)
 8013eba:	61a2      	str	r2, [r4, #24]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	bfb7      	itett	lt
 8013ec0:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8013ec4:	fb93 f5f5 	sdivge	r5, r3, r5
 8013ec8:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8013ecc:	fb92 f5f5 	sdivlt	r5, r2, r5
 8013ed0:	fb00 3005 	mla	r0, r0, r5, r3
 8013ed4:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8013ed8:	fbb0 f2f2 	udiv	r2, r0, r2
 8013edc:	4402      	add	r2, r0
 8013ede:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8013ee2:	fbb0 f1f3 	udiv	r1, r0, r3
 8013ee6:	1a52      	subs	r2, r2, r1
 8013ee8:	f240 1c6d 	movw	ip, #365	; 0x16d
 8013eec:	492c      	ldr	r1, [pc, #176]	; (8013fa0 <gmtime_r+0x154>)
 8013eee:	fbb0 f1f1 	udiv	r1, r0, r1
 8013ef2:	2764      	movs	r7, #100	; 0x64
 8013ef4:	1a52      	subs	r2, r2, r1
 8013ef6:	fbb2 f1fc 	udiv	r1, r2, ip
 8013efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8013efe:	fbb1 f6f7 	udiv	r6, r1, r7
 8013f02:	1af3      	subs	r3, r6, r3
 8013f04:	4403      	add	r3, r0
 8013f06:	fb0c 3311 	mls	r3, ip, r1, r3
 8013f0a:	2299      	movs	r2, #153	; 0x99
 8013f0c:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8013f10:	f10e 0e02 	add.w	lr, lr, #2
 8013f14:	f103 0c01 	add.w	ip, r3, #1
 8013f18:	fbbe f0f2 	udiv	r0, lr, r2
 8013f1c:	4342      	muls	r2, r0
 8013f1e:	3202      	adds	r2, #2
 8013f20:	f04f 0805 	mov.w	r8, #5
 8013f24:	fbb2 f2f8 	udiv	r2, r2, r8
 8013f28:	ebac 0c02 	sub.w	ip, ip, r2
 8013f2c:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8013f30:	4596      	cmp	lr, r2
 8013f32:	bf94      	ite	ls
 8013f34:	2202      	movls	r2, #2
 8013f36:	f06f 0209 	mvnhi.w	r2, #9
 8013f3a:	4410      	add	r0, r2
 8013f3c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8013f40:	fb02 1505 	mla	r5, r2, r5, r1
 8013f44:	2801      	cmp	r0, #1
 8013f46:	bf98      	it	ls
 8013f48:	3501      	addls	r5, #1
 8013f4a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8013f4e:	d30d      	bcc.n	8013f6c <gmtime_r+0x120>
 8013f50:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8013f54:	61e3      	str	r3, [r4, #28]
 8013f56:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8013f60:	f8c4 c00c 	str.w	ip, [r4, #12]
 8013f64:	6223      	str	r3, [r4, #32]
 8013f66:	4620      	mov	r0, r4
 8013f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f6c:	078a      	lsls	r2, r1, #30
 8013f6e:	d102      	bne.n	8013f76 <gmtime_r+0x12a>
 8013f70:	fb07 1616 	mls	r6, r7, r6, r1
 8013f74:	b95e      	cbnz	r6, 8013f8e <gmtime_r+0x142>
 8013f76:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8013f7a:	fbb1 f6f2 	udiv	r6, r1, r2
 8013f7e:	fb02 1216 	mls	r2, r2, r6, r1
 8013f82:	fab2 f282 	clz	r2, r2
 8013f86:	0952      	lsrs	r2, r2, #5
 8013f88:	333b      	adds	r3, #59	; 0x3b
 8013f8a:	4413      	add	r3, r2
 8013f8c:	e7e2      	b.n	8013f54 <gmtime_r+0x108>
 8013f8e:	2201      	movs	r2, #1
 8013f90:	e7fa      	b.n	8013f88 <gmtime_r+0x13c>
 8013f92:	bf00      	nop
 8013f94:	00015180 	.word	0x00015180
 8013f98:	00023ab1 	.word	0x00023ab1
 8013f9c:	fffdc54f 	.word	0xfffdc54f
 8013fa0:	00023ab0 	.word	0x00023ab0

08013fa4 <__libc_init_array>:
 8013fa4:	b570      	push	{r4, r5, r6, lr}
 8013fa6:	4d0d      	ldr	r5, [pc, #52]	; (8013fdc <__libc_init_array+0x38>)
 8013fa8:	4c0d      	ldr	r4, [pc, #52]	; (8013fe0 <__libc_init_array+0x3c>)
 8013faa:	1b64      	subs	r4, r4, r5
 8013fac:	10a4      	asrs	r4, r4, #2
 8013fae:	2600      	movs	r6, #0
 8013fb0:	42a6      	cmp	r6, r4
 8013fb2:	d109      	bne.n	8013fc8 <__libc_init_array+0x24>
 8013fb4:	4d0b      	ldr	r5, [pc, #44]	; (8013fe4 <__libc_init_array+0x40>)
 8013fb6:	4c0c      	ldr	r4, [pc, #48]	; (8013fe8 <__libc_init_array+0x44>)
 8013fb8:	f004 fa64 	bl	8018484 <_init>
 8013fbc:	1b64      	subs	r4, r4, r5
 8013fbe:	10a4      	asrs	r4, r4, #2
 8013fc0:	2600      	movs	r6, #0
 8013fc2:	42a6      	cmp	r6, r4
 8013fc4:	d105      	bne.n	8013fd2 <__libc_init_array+0x2e>
 8013fc6:	bd70      	pop	{r4, r5, r6, pc}
 8013fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8013fcc:	4798      	blx	r3
 8013fce:	3601      	adds	r6, #1
 8013fd0:	e7ee      	b.n	8013fb0 <__libc_init_array+0xc>
 8013fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8013fd6:	4798      	blx	r3
 8013fd8:	3601      	adds	r6, #1
 8013fda:	e7f2      	b.n	8013fc2 <__libc_init_array+0x1e>
 8013fdc:	0801a6b4 	.word	0x0801a6b4
 8013fe0:	0801a6b4 	.word	0x0801a6b4
 8013fe4:	0801a6b4 	.word	0x0801a6b4
 8013fe8:	0801a6b8 	.word	0x0801a6b8

08013fec <__retarget_lock_init_recursive>:
 8013fec:	4770      	bx	lr

08013fee <__retarget_lock_acquire_recursive>:
 8013fee:	4770      	bx	lr

08013ff0 <__retarget_lock_release_recursive>:
 8013ff0:	4770      	bx	lr

08013ff2 <memcpy>:
 8013ff2:	440a      	add	r2, r1
 8013ff4:	4291      	cmp	r1, r2
 8013ff6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013ffa:	d100      	bne.n	8013ffe <memcpy+0xc>
 8013ffc:	4770      	bx	lr
 8013ffe:	b510      	push	{r4, lr}
 8014000:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014004:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014008:	4291      	cmp	r1, r2
 801400a:	d1f9      	bne.n	8014000 <memcpy+0xe>
 801400c:	bd10      	pop	{r4, pc}

0801400e <memset>:
 801400e:	4402      	add	r2, r0
 8014010:	4603      	mov	r3, r0
 8014012:	4293      	cmp	r3, r2
 8014014:	d100      	bne.n	8014018 <memset+0xa>
 8014016:	4770      	bx	lr
 8014018:	f803 1b01 	strb.w	r1, [r3], #1
 801401c:	e7f9      	b.n	8014012 <memset+0x4>
	...

08014020 <sbrk_aligned>:
 8014020:	b570      	push	{r4, r5, r6, lr}
 8014022:	4e0e      	ldr	r6, [pc, #56]	; (801405c <sbrk_aligned+0x3c>)
 8014024:	460c      	mov	r4, r1
 8014026:	6831      	ldr	r1, [r6, #0]
 8014028:	4605      	mov	r5, r0
 801402a:	b911      	cbnz	r1, 8014032 <sbrk_aligned+0x12>
 801402c:	f000 fd60 	bl	8014af0 <_sbrk_r>
 8014030:	6030      	str	r0, [r6, #0]
 8014032:	4621      	mov	r1, r4
 8014034:	4628      	mov	r0, r5
 8014036:	f000 fd5b 	bl	8014af0 <_sbrk_r>
 801403a:	1c43      	adds	r3, r0, #1
 801403c:	d00a      	beq.n	8014054 <sbrk_aligned+0x34>
 801403e:	1cc4      	adds	r4, r0, #3
 8014040:	f024 0403 	bic.w	r4, r4, #3
 8014044:	42a0      	cmp	r0, r4
 8014046:	d007      	beq.n	8014058 <sbrk_aligned+0x38>
 8014048:	1a21      	subs	r1, r4, r0
 801404a:	4628      	mov	r0, r5
 801404c:	f000 fd50 	bl	8014af0 <_sbrk_r>
 8014050:	3001      	adds	r0, #1
 8014052:	d101      	bne.n	8014058 <sbrk_aligned+0x38>
 8014054:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014058:	4620      	mov	r0, r4
 801405a:	bd70      	pop	{r4, r5, r6, pc}
 801405c:	2000841c 	.word	0x2000841c

08014060 <_malloc_r>:
 8014060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014064:	1ccd      	adds	r5, r1, #3
 8014066:	f025 0503 	bic.w	r5, r5, #3
 801406a:	3508      	adds	r5, #8
 801406c:	2d0c      	cmp	r5, #12
 801406e:	bf38      	it	cc
 8014070:	250c      	movcc	r5, #12
 8014072:	2d00      	cmp	r5, #0
 8014074:	4607      	mov	r7, r0
 8014076:	db01      	blt.n	801407c <_malloc_r+0x1c>
 8014078:	42a9      	cmp	r1, r5
 801407a:	d905      	bls.n	8014088 <_malloc_r+0x28>
 801407c:	230c      	movs	r3, #12
 801407e:	603b      	str	r3, [r7, #0]
 8014080:	2600      	movs	r6, #0
 8014082:	4630      	mov	r0, r6
 8014084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014088:	4e2e      	ldr	r6, [pc, #184]	; (8014144 <_malloc_r+0xe4>)
 801408a:	f002 ffd9 	bl	8017040 <__malloc_lock>
 801408e:	6833      	ldr	r3, [r6, #0]
 8014090:	461c      	mov	r4, r3
 8014092:	bb34      	cbnz	r4, 80140e2 <_malloc_r+0x82>
 8014094:	4629      	mov	r1, r5
 8014096:	4638      	mov	r0, r7
 8014098:	f7ff ffc2 	bl	8014020 <sbrk_aligned>
 801409c:	1c43      	adds	r3, r0, #1
 801409e:	4604      	mov	r4, r0
 80140a0:	d14d      	bne.n	801413e <_malloc_r+0xde>
 80140a2:	6834      	ldr	r4, [r6, #0]
 80140a4:	4626      	mov	r6, r4
 80140a6:	2e00      	cmp	r6, #0
 80140a8:	d140      	bne.n	801412c <_malloc_r+0xcc>
 80140aa:	6823      	ldr	r3, [r4, #0]
 80140ac:	4631      	mov	r1, r6
 80140ae:	4638      	mov	r0, r7
 80140b0:	eb04 0803 	add.w	r8, r4, r3
 80140b4:	f000 fd1c 	bl	8014af0 <_sbrk_r>
 80140b8:	4580      	cmp	r8, r0
 80140ba:	d13a      	bne.n	8014132 <_malloc_r+0xd2>
 80140bc:	6821      	ldr	r1, [r4, #0]
 80140be:	3503      	adds	r5, #3
 80140c0:	1a6d      	subs	r5, r5, r1
 80140c2:	f025 0503 	bic.w	r5, r5, #3
 80140c6:	3508      	adds	r5, #8
 80140c8:	2d0c      	cmp	r5, #12
 80140ca:	bf38      	it	cc
 80140cc:	250c      	movcc	r5, #12
 80140ce:	4629      	mov	r1, r5
 80140d0:	4638      	mov	r0, r7
 80140d2:	f7ff ffa5 	bl	8014020 <sbrk_aligned>
 80140d6:	3001      	adds	r0, #1
 80140d8:	d02b      	beq.n	8014132 <_malloc_r+0xd2>
 80140da:	6823      	ldr	r3, [r4, #0]
 80140dc:	442b      	add	r3, r5
 80140de:	6023      	str	r3, [r4, #0]
 80140e0:	e00e      	b.n	8014100 <_malloc_r+0xa0>
 80140e2:	6822      	ldr	r2, [r4, #0]
 80140e4:	1b52      	subs	r2, r2, r5
 80140e6:	d41e      	bmi.n	8014126 <_malloc_r+0xc6>
 80140e8:	2a0b      	cmp	r2, #11
 80140ea:	d916      	bls.n	801411a <_malloc_r+0xba>
 80140ec:	1961      	adds	r1, r4, r5
 80140ee:	42a3      	cmp	r3, r4
 80140f0:	6025      	str	r5, [r4, #0]
 80140f2:	bf18      	it	ne
 80140f4:	6059      	strne	r1, [r3, #4]
 80140f6:	6863      	ldr	r3, [r4, #4]
 80140f8:	bf08      	it	eq
 80140fa:	6031      	streq	r1, [r6, #0]
 80140fc:	5162      	str	r2, [r4, r5]
 80140fe:	604b      	str	r3, [r1, #4]
 8014100:	4638      	mov	r0, r7
 8014102:	f104 060b 	add.w	r6, r4, #11
 8014106:	f002 ffa1 	bl	801704c <__malloc_unlock>
 801410a:	f026 0607 	bic.w	r6, r6, #7
 801410e:	1d23      	adds	r3, r4, #4
 8014110:	1af2      	subs	r2, r6, r3
 8014112:	d0b6      	beq.n	8014082 <_malloc_r+0x22>
 8014114:	1b9b      	subs	r3, r3, r6
 8014116:	50a3      	str	r3, [r4, r2]
 8014118:	e7b3      	b.n	8014082 <_malloc_r+0x22>
 801411a:	6862      	ldr	r2, [r4, #4]
 801411c:	42a3      	cmp	r3, r4
 801411e:	bf0c      	ite	eq
 8014120:	6032      	streq	r2, [r6, #0]
 8014122:	605a      	strne	r2, [r3, #4]
 8014124:	e7ec      	b.n	8014100 <_malloc_r+0xa0>
 8014126:	4623      	mov	r3, r4
 8014128:	6864      	ldr	r4, [r4, #4]
 801412a:	e7b2      	b.n	8014092 <_malloc_r+0x32>
 801412c:	4634      	mov	r4, r6
 801412e:	6876      	ldr	r6, [r6, #4]
 8014130:	e7b9      	b.n	80140a6 <_malloc_r+0x46>
 8014132:	230c      	movs	r3, #12
 8014134:	603b      	str	r3, [r7, #0]
 8014136:	4638      	mov	r0, r7
 8014138:	f002 ff88 	bl	801704c <__malloc_unlock>
 801413c:	e7a1      	b.n	8014082 <_malloc_r+0x22>
 801413e:	6025      	str	r5, [r4, #0]
 8014140:	e7de      	b.n	8014100 <_malloc_r+0xa0>
 8014142:	bf00      	nop
 8014144:	20008418 	.word	0x20008418

08014148 <__cvt>:
 8014148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801414c:	ec55 4b10 	vmov	r4, r5, d0
 8014150:	2d00      	cmp	r5, #0
 8014152:	460e      	mov	r6, r1
 8014154:	4619      	mov	r1, r3
 8014156:	462b      	mov	r3, r5
 8014158:	bfbb      	ittet	lt
 801415a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801415e:	461d      	movlt	r5, r3
 8014160:	2300      	movge	r3, #0
 8014162:	232d      	movlt	r3, #45	; 0x2d
 8014164:	700b      	strb	r3, [r1, #0]
 8014166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014168:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801416c:	4691      	mov	r9, r2
 801416e:	f023 0820 	bic.w	r8, r3, #32
 8014172:	bfbc      	itt	lt
 8014174:	4622      	movlt	r2, r4
 8014176:	4614      	movlt	r4, r2
 8014178:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801417c:	d005      	beq.n	801418a <__cvt+0x42>
 801417e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014182:	d100      	bne.n	8014186 <__cvt+0x3e>
 8014184:	3601      	adds	r6, #1
 8014186:	2102      	movs	r1, #2
 8014188:	e000      	b.n	801418c <__cvt+0x44>
 801418a:	2103      	movs	r1, #3
 801418c:	ab03      	add	r3, sp, #12
 801418e:	9301      	str	r3, [sp, #4]
 8014190:	ab02      	add	r3, sp, #8
 8014192:	9300      	str	r3, [sp, #0]
 8014194:	ec45 4b10 	vmov	d0, r4, r5
 8014198:	4653      	mov	r3, sl
 801419a:	4632      	mov	r2, r6
 801419c:	f001 fd00 	bl	8015ba0 <_dtoa_r>
 80141a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80141a4:	4607      	mov	r7, r0
 80141a6:	d102      	bne.n	80141ae <__cvt+0x66>
 80141a8:	f019 0f01 	tst.w	r9, #1
 80141ac:	d022      	beq.n	80141f4 <__cvt+0xac>
 80141ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80141b2:	eb07 0906 	add.w	r9, r7, r6
 80141b6:	d110      	bne.n	80141da <__cvt+0x92>
 80141b8:	783b      	ldrb	r3, [r7, #0]
 80141ba:	2b30      	cmp	r3, #48	; 0x30
 80141bc:	d10a      	bne.n	80141d4 <__cvt+0x8c>
 80141be:	2200      	movs	r2, #0
 80141c0:	2300      	movs	r3, #0
 80141c2:	4620      	mov	r0, r4
 80141c4:	4629      	mov	r1, r5
 80141c6:	f7ec fc8f 	bl	8000ae8 <__aeabi_dcmpeq>
 80141ca:	b918      	cbnz	r0, 80141d4 <__cvt+0x8c>
 80141cc:	f1c6 0601 	rsb	r6, r6, #1
 80141d0:	f8ca 6000 	str.w	r6, [sl]
 80141d4:	f8da 3000 	ldr.w	r3, [sl]
 80141d8:	4499      	add	r9, r3
 80141da:	2200      	movs	r2, #0
 80141dc:	2300      	movs	r3, #0
 80141de:	4620      	mov	r0, r4
 80141e0:	4629      	mov	r1, r5
 80141e2:	f7ec fc81 	bl	8000ae8 <__aeabi_dcmpeq>
 80141e6:	b108      	cbz	r0, 80141ec <__cvt+0xa4>
 80141e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80141ec:	2230      	movs	r2, #48	; 0x30
 80141ee:	9b03      	ldr	r3, [sp, #12]
 80141f0:	454b      	cmp	r3, r9
 80141f2:	d307      	bcc.n	8014204 <__cvt+0xbc>
 80141f4:	9b03      	ldr	r3, [sp, #12]
 80141f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80141f8:	1bdb      	subs	r3, r3, r7
 80141fa:	4638      	mov	r0, r7
 80141fc:	6013      	str	r3, [r2, #0]
 80141fe:	b004      	add	sp, #16
 8014200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014204:	1c59      	adds	r1, r3, #1
 8014206:	9103      	str	r1, [sp, #12]
 8014208:	701a      	strb	r2, [r3, #0]
 801420a:	e7f0      	b.n	80141ee <__cvt+0xa6>

0801420c <__exponent>:
 801420c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801420e:	4603      	mov	r3, r0
 8014210:	2900      	cmp	r1, #0
 8014212:	bfb8      	it	lt
 8014214:	4249      	neglt	r1, r1
 8014216:	f803 2b02 	strb.w	r2, [r3], #2
 801421a:	bfb4      	ite	lt
 801421c:	222d      	movlt	r2, #45	; 0x2d
 801421e:	222b      	movge	r2, #43	; 0x2b
 8014220:	2909      	cmp	r1, #9
 8014222:	7042      	strb	r2, [r0, #1]
 8014224:	dd2a      	ble.n	801427c <__exponent+0x70>
 8014226:	f10d 0407 	add.w	r4, sp, #7
 801422a:	46a4      	mov	ip, r4
 801422c:	270a      	movs	r7, #10
 801422e:	46a6      	mov	lr, r4
 8014230:	460a      	mov	r2, r1
 8014232:	fb91 f6f7 	sdiv	r6, r1, r7
 8014236:	fb07 1516 	mls	r5, r7, r6, r1
 801423a:	3530      	adds	r5, #48	; 0x30
 801423c:	2a63      	cmp	r2, #99	; 0x63
 801423e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8014242:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8014246:	4631      	mov	r1, r6
 8014248:	dcf1      	bgt.n	801422e <__exponent+0x22>
 801424a:	3130      	adds	r1, #48	; 0x30
 801424c:	f1ae 0502 	sub.w	r5, lr, #2
 8014250:	f804 1c01 	strb.w	r1, [r4, #-1]
 8014254:	1c44      	adds	r4, r0, #1
 8014256:	4629      	mov	r1, r5
 8014258:	4561      	cmp	r1, ip
 801425a:	d30a      	bcc.n	8014272 <__exponent+0x66>
 801425c:	f10d 0209 	add.w	r2, sp, #9
 8014260:	eba2 020e 	sub.w	r2, r2, lr
 8014264:	4565      	cmp	r5, ip
 8014266:	bf88      	it	hi
 8014268:	2200      	movhi	r2, #0
 801426a:	4413      	add	r3, r2
 801426c:	1a18      	subs	r0, r3, r0
 801426e:	b003      	add	sp, #12
 8014270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014272:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014276:	f804 2f01 	strb.w	r2, [r4, #1]!
 801427a:	e7ed      	b.n	8014258 <__exponent+0x4c>
 801427c:	2330      	movs	r3, #48	; 0x30
 801427e:	3130      	adds	r1, #48	; 0x30
 8014280:	7083      	strb	r3, [r0, #2]
 8014282:	70c1      	strb	r1, [r0, #3]
 8014284:	1d03      	adds	r3, r0, #4
 8014286:	e7f1      	b.n	801426c <__exponent+0x60>

08014288 <_printf_float>:
 8014288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801428c:	ed2d 8b02 	vpush	{d8}
 8014290:	b08d      	sub	sp, #52	; 0x34
 8014292:	460c      	mov	r4, r1
 8014294:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014298:	4616      	mov	r6, r2
 801429a:	461f      	mov	r7, r3
 801429c:	4605      	mov	r5, r0
 801429e:	f002 fe9f 	bl	8016fe0 <_localeconv_r>
 80142a2:	f8d0 a000 	ldr.w	sl, [r0]
 80142a6:	4650      	mov	r0, sl
 80142a8:	f7eb ff9c 	bl	80001e4 <strlen>
 80142ac:	2300      	movs	r3, #0
 80142ae:	930a      	str	r3, [sp, #40]	; 0x28
 80142b0:	6823      	ldr	r3, [r4, #0]
 80142b2:	9305      	str	r3, [sp, #20]
 80142b4:	f8d8 3000 	ldr.w	r3, [r8]
 80142b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80142bc:	3307      	adds	r3, #7
 80142be:	f023 0307 	bic.w	r3, r3, #7
 80142c2:	f103 0208 	add.w	r2, r3, #8
 80142c6:	f8c8 2000 	str.w	r2, [r8]
 80142ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80142d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80142d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80142da:	9307      	str	r3, [sp, #28]
 80142dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80142e0:	ee08 0a10 	vmov	s16, r0
 80142e4:	4b9f      	ldr	r3, [pc, #636]	; (8014564 <_printf_float+0x2dc>)
 80142e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80142ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80142ee:	f7ec fc2d 	bl	8000b4c <__aeabi_dcmpun>
 80142f2:	bb88      	cbnz	r0, 8014358 <_printf_float+0xd0>
 80142f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80142f8:	4b9a      	ldr	r3, [pc, #616]	; (8014564 <_printf_float+0x2dc>)
 80142fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80142fe:	f7ec fc07 	bl	8000b10 <__aeabi_dcmple>
 8014302:	bb48      	cbnz	r0, 8014358 <_printf_float+0xd0>
 8014304:	2200      	movs	r2, #0
 8014306:	2300      	movs	r3, #0
 8014308:	4640      	mov	r0, r8
 801430a:	4649      	mov	r1, r9
 801430c:	f7ec fbf6 	bl	8000afc <__aeabi_dcmplt>
 8014310:	b110      	cbz	r0, 8014318 <_printf_float+0x90>
 8014312:	232d      	movs	r3, #45	; 0x2d
 8014314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014318:	4b93      	ldr	r3, [pc, #588]	; (8014568 <_printf_float+0x2e0>)
 801431a:	4894      	ldr	r0, [pc, #592]	; (801456c <_printf_float+0x2e4>)
 801431c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014320:	bf94      	ite	ls
 8014322:	4698      	movls	r8, r3
 8014324:	4680      	movhi	r8, r0
 8014326:	2303      	movs	r3, #3
 8014328:	6123      	str	r3, [r4, #16]
 801432a:	9b05      	ldr	r3, [sp, #20]
 801432c:	f023 0204 	bic.w	r2, r3, #4
 8014330:	6022      	str	r2, [r4, #0]
 8014332:	f04f 0900 	mov.w	r9, #0
 8014336:	9700      	str	r7, [sp, #0]
 8014338:	4633      	mov	r3, r6
 801433a:	aa0b      	add	r2, sp, #44	; 0x2c
 801433c:	4621      	mov	r1, r4
 801433e:	4628      	mov	r0, r5
 8014340:	f000 f9d8 	bl	80146f4 <_printf_common>
 8014344:	3001      	adds	r0, #1
 8014346:	f040 8090 	bne.w	801446a <_printf_float+0x1e2>
 801434a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801434e:	b00d      	add	sp, #52	; 0x34
 8014350:	ecbd 8b02 	vpop	{d8}
 8014354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014358:	4642      	mov	r2, r8
 801435a:	464b      	mov	r3, r9
 801435c:	4640      	mov	r0, r8
 801435e:	4649      	mov	r1, r9
 8014360:	f7ec fbf4 	bl	8000b4c <__aeabi_dcmpun>
 8014364:	b140      	cbz	r0, 8014378 <_printf_float+0xf0>
 8014366:	464b      	mov	r3, r9
 8014368:	2b00      	cmp	r3, #0
 801436a:	bfbc      	itt	lt
 801436c:	232d      	movlt	r3, #45	; 0x2d
 801436e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014372:	487f      	ldr	r0, [pc, #508]	; (8014570 <_printf_float+0x2e8>)
 8014374:	4b7f      	ldr	r3, [pc, #508]	; (8014574 <_printf_float+0x2ec>)
 8014376:	e7d1      	b.n	801431c <_printf_float+0x94>
 8014378:	6863      	ldr	r3, [r4, #4]
 801437a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801437e:	9206      	str	r2, [sp, #24]
 8014380:	1c5a      	adds	r2, r3, #1
 8014382:	d13f      	bne.n	8014404 <_printf_float+0x17c>
 8014384:	2306      	movs	r3, #6
 8014386:	6063      	str	r3, [r4, #4]
 8014388:	9b05      	ldr	r3, [sp, #20]
 801438a:	6861      	ldr	r1, [r4, #4]
 801438c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014390:	2300      	movs	r3, #0
 8014392:	9303      	str	r3, [sp, #12]
 8014394:	ab0a      	add	r3, sp, #40	; 0x28
 8014396:	e9cd b301 	strd	fp, r3, [sp, #4]
 801439a:	ab09      	add	r3, sp, #36	; 0x24
 801439c:	ec49 8b10 	vmov	d0, r8, r9
 80143a0:	9300      	str	r3, [sp, #0]
 80143a2:	6022      	str	r2, [r4, #0]
 80143a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80143a8:	4628      	mov	r0, r5
 80143aa:	f7ff fecd 	bl	8014148 <__cvt>
 80143ae:	9b06      	ldr	r3, [sp, #24]
 80143b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80143b2:	2b47      	cmp	r3, #71	; 0x47
 80143b4:	4680      	mov	r8, r0
 80143b6:	d108      	bne.n	80143ca <_printf_float+0x142>
 80143b8:	1cc8      	adds	r0, r1, #3
 80143ba:	db02      	blt.n	80143c2 <_printf_float+0x13a>
 80143bc:	6863      	ldr	r3, [r4, #4]
 80143be:	4299      	cmp	r1, r3
 80143c0:	dd41      	ble.n	8014446 <_printf_float+0x1be>
 80143c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80143c6:	fa5f fb8b 	uxtb.w	fp, fp
 80143ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80143ce:	d820      	bhi.n	8014412 <_printf_float+0x18a>
 80143d0:	3901      	subs	r1, #1
 80143d2:	465a      	mov	r2, fp
 80143d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80143d8:	9109      	str	r1, [sp, #36]	; 0x24
 80143da:	f7ff ff17 	bl	801420c <__exponent>
 80143de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80143e0:	1813      	adds	r3, r2, r0
 80143e2:	2a01      	cmp	r2, #1
 80143e4:	4681      	mov	r9, r0
 80143e6:	6123      	str	r3, [r4, #16]
 80143e8:	dc02      	bgt.n	80143f0 <_printf_float+0x168>
 80143ea:	6822      	ldr	r2, [r4, #0]
 80143ec:	07d2      	lsls	r2, r2, #31
 80143ee:	d501      	bpl.n	80143f4 <_printf_float+0x16c>
 80143f0:	3301      	adds	r3, #1
 80143f2:	6123      	str	r3, [r4, #16]
 80143f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d09c      	beq.n	8014336 <_printf_float+0xae>
 80143fc:	232d      	movs	r3, #45	; 0x2d
 80143fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014402:	e798      	b.n	8014336 <_printf_float+0xae>
 8014404:	9a06      	ldr	r2, [sp, #24]
 8014406:	2a47      	cmp	r2, #71	; 0x47
 8014408:	d1be      	bne.n	8014388 <_printf_float+0x100>
 801440a:	2b00      	cmp	r3, #0
 801440c:	d1bc      	bne.n	8014388 <_printf_float+0x100>
 801440e:	2301      	movs	r3, #1
 8014410:	e7b9      	b.n	8014386 <_printf_float+0xfe>
 8014412:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8014416:	d118      	bne.n	801444a <_printf_float+0x1c2>
 8014418:	2900      	cmp	r1, #0
 801441a:	6863      	ldr	r3, [r4, #4]
 801441c:	dd0b      	ble.n	8014436 <_printf_float+0x1ae>
 801441e:	6121      	str	r1, [r4, #16]
 8014420:	b913      	cbnz	r3, 8014428 <_printf_float+0x1a0>
 8014422:	6822      	ldr	r2, [r4, #0]
 8014424:	07d0      	lsls	r0, r2, #31
 8014426:	d502      	bpl.n	801442e <_printf_float+0x1a6>
 8014428:	3301      	adds	r3, #1
 801442a:	440b      	add	r3, r1
 801442c:	6123      	str	r3, [r4, #16]
 801442e:	65a1      	str	r1, [r4, #88]	; 0x58
 8014430:	f04f 0900 	mov.w	r9, #0
 8014434:	e7de      	b.n	80143f4 <_printf_float+0x16c>
 8014436:	b913      	cbnz	r3, 801443e <_printf_float+0x1b6>
 8014438:	6822      	ldr	r2, [r4, #0]
 801443a:	07d2      	lsls	r2, r2, #31
 801443c:	d501      	bpl.n	8014442 <_printf_float+0x1ba>
 801443e:	3302      	adds	r3, #2
 8014440:	e7f4      	b.n	801442c <_printf_float+0x1a4>
 8014442:	2301      	movs	r3, #1
 8014444:	e7f2      	b.n	801442c <_printf_float+0x1a4>
 8014446:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801444a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801444c:	4299      	cmp	r1, r3
 801444e:	db05      	blt.n	801445c <_printf_float+0x1d4>
 8014450:	6823      	ldr	r3, [r4, #0]
 8014452:	6121      	str	r1, [r4, #16]
 8014454:	07d8      	lsls	r0, r3, #31
 8014456:	d5ea      	bpl.n	801442e <_printf_float+0x1a6>
 8014458:	1c4b      	adds	r3, r1, #1
 801445a:	e7e7      	b.n	801442c <_printf_float+0x1a4>
 801445c:	2900      	cmp	r1, #0
 801445e:	bfd4      	ite	le
 8014460:	f1c1 0202 	rsble	r2, r1, #2
 8014464:	2201      	movgt	r2, #1
 8014466:	4413      	add	r3, r2
 8014468:	e7e0      	b.n	801442c <_printf_float+0x1a4>
 801446a:	6823      	ldr	r3, [r4, #0]
 801446c:	055a      	lsls	r2, r3, #21
 801446e:	d407      	bmi.n	8014480 <_printf_float+0x1f8>
 8014470:	6923      	ldr	r3, [r4, #16]
 8014472:	4642      	mov	r2, r8
 8014474:	4631      	mov	r1, r6
 8014476:	4628      	mov	r0, r5
 8014478:	47b8      	blx	r7
 801447a:	3001      	adds	r0, #1
 801447c:	d12c      	bne.n	80144d8 <_printf_float+0x250>
 801447e:	e764      	b.n	801434a <_printf_float+0xc2>
 8014480:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014484:	f240 80e0 	bls.w	8014648 <_printf_float+0x3c0>
 8014488:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801448c:	2200      	movs	r2, #0
 801448e:	2300      	movs	r3, #0
 8014490:	f7ec fb2a 	bl	8000ae8 <__aeabi_dcmpeq>
 8014494:	2800      	cmp	r0, #0
 8014496:	d034      	beq.n	8014502 <_printf_float+0x27a>
 8014498:	4a37      	ldr	r2, [pc, #220]	; (8014578 <_printf_float+0x2f0>)
 801449a:	2301      	movs	r3, #1
 801449c:	4631      	mov	r1, r6
 801449e:	4628      	mov	r0, r5
 80144a0:	47b8      	blx	r7
 80144a2:	3001      	adds	r0, #1
 80144a4:	f43f af51 	beq.w	801434a <_printf_float+0xc2>
 80144a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80144ac:	429a      	cmp	r2, r3
 80144ae:	db02      	blt.n	80144b6 <_printf_float+0x22e>
 80144b0:	6823      	ldr	r3, [r4, #0]
 80144b2:	07d8      	lsls	r0, r3, #31
 80144b4:	d510      	bpl.n	80144d8 <_printf_float+0x250>
 80144b6:	ee18 3a10 	vmov	r3, s16
 80144ba:	4652      	mov	r2, sl
 80144bc:	4631      	mov	r1, r6
 80144be:	4628      	mov	r0, r5
 80144c0:	47b8      	blx	r7
 80144c2:	3001      	adds	r0, #1
 80144c4:	f43f af41 	beq.w	801434a <_printf_float+0xc2>
 80144c8:	f04f 0800 	mov.w	r8, #0
 80144cc:	f104 091a 	add.w	r9, r4, #26
 80144d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144d2:	3b01      	subs	r3, #1
 80144d4:	4543      	cmp	r3, r8
 80144d6:	dc09      	bgt.n	80144ec <_printf_float+0x264>
 80144d8:	6823      	ldr	r3, [r4, #0]
 80144da:	079b      	lsls	r3, r3, #30
 80144dc:	f100 8105 	bmi.w	80146ea <_printf_float+0x462>
 80144e0:	68e0      	ldr	r0, [r4, #12]
 80144e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80144e4:	4298      	cmp	r0, r3
 80144e6:	bfb8      	it	lt
 80144e8:	4618      	movlt	r0, r3
 80144ea:	e730      	b.n	801434e <_printf_float+0xc6>
 80144ec:	2301      	movs	r3, #1
 80144ee:	464a      	mov	r2, r9
 80144f0:	4631      	mov	r1, r6
 80144f2:	4628      	mov	r0, r5
 80144f4:	47b8      	blx	r7
 80144f6:	3001      	adds	r0, #1
 80144f8:	f43f af27 	beq.w	801434a <_printf_float+0xc2>
 80144fc:	f108 0801 	add.w	r8, r8, #1
 8014500:	e7e6      	b.n	80144d0 <_printf_float+0x248>
 8014502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014504:	2b00      	cmp	r3, #0
 8014506:	dc39      	bgt.n	801457c <_printf_float+0x2f4>
 8014508:	4a1b      	ldr	r2, [pc, #108]	; (8014578 <_printf_float+0x2f0>)
 801450a:	2301      	movs	r3, #1
 801450c:	4631      	mov	r1, r6
 801450e:	4628      	mov	r0, r5
 8014510:	47b8      	blx	r7
 8014512:	3001      	adds	r0, #1
 8014514:	f43f af19 	beq.w	801434a <_printf_float+0xc2>
 8014518:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801451c:	4313      	orrs	r3, r2
 801451e:	d102      	bne.n	8014526 <_printf_float+0x29e>
 8014520:	6823      	ldr	r3, [r4, #0]
 8014522:	07d9      	lsls	r1, r3, #31
 8014524:	d5d8      	bpl.n	80144d8 <_printf_float+0x250>
 8014526:	ee18 3a10 	vmov	r3, s16
 801452a:	4652      	mov	r2, sl
 801452c:	4631      	mov	r1, r6
 801452e:	4628      	mov	r0, r5
 8014530:	47b8      	blx	r7
 8014532:	3001      	adds	r0, #1
 8014534:	f43f af09 	beq.w	801434a <_printf_float+0xc2>
 8014538:	f04f 0900 	mov.w	r9, #0
 801453c:	f104 0a1a 	add.w	sl, r4, #26
 8014540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014542:	425b      	negs	r3, r3
 8014544:	454b      	cmp	r3, r9
 8014546:	dc01      	bgt.n	801454c <_printf_float+0x2c4>
 8014548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801454a:	e792      	b.n	8014472 <_printf_float+0x1ea>
 801454c:	2301      	movs	r3, #1
 801454e:	4652      	mov	r2, sl
 8014550:	4631      	mov	r1, r6
 8014552:	4628      	mov	r0, r5
 8014554:	47b8      	blx	r7
 8014556:	3001      	adds	r0, #1
 8014558:	f43f aef7 	beq.w	801434a <_printf_float+0xc2>
 801455c:	f109 0901 	add.w	r9, r9, #1
 8014560:	e7ee      	b.n	8014540 <_printf_float+0x2b8>
 8014562:	bf00      	nop
 8014564:	7fefffff 	.word	0x7fefffff
 8014568:	0801a370 	.word	0x0801a370
 801456c:	0801a374 	.word	0x0801a374
 8014570:	0801a37c 	.word	0x0801a37c
 8014574:	0801a378 	.word	0x0801a378
 8014578:	0801a380 	.word	0x0801a380
 801457c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801457e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014580:	429a      	cmp	r2, r3
 8014582:	bfa8      	it	ge
 8014584:	461a      	movge	r2, r3
 8014586:	2a00      	cmp	r2, #0
 8014588:	4691      	mov	r9, r2
 801458a:	dc37      	bgt.n	80145fc <_printf_float+0x374>
 801458c:	f04f 0b00 	mov.w	fp, #0
 8014590:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014594:	f104 021a 	add.w	r2, r4, #26
 8014598:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801459a:	9305      	str	r3, [sp, #20]
 801459c:	eba3 0309 	sub.w	r3, r3, r9
 80145a0:	455b      	cmp	r3, fp
 80145a2:	dc33      	bgt.n	801460c <_printf_float+0x384>
 80145a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80145a8:	429a      	cmp	r2, r3
 80145aa:	db3b      	blt.n	8014624 <_printf_float+0x39c>
 80145ac:	6823      	ldr	r3, [r4, #0]
 80145ae:	07da      	lsls	r2, r3, #31
 80145b0:	d438      	bmi.n	8014624 <_printf_float+0x39c>
 80145b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145b4:	9a05      	ldr	r2, [sp, #20]
 80145b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80145b8:	1a9a      	subs	r2, r3, r2
 80145ba:	eba3 0901 	sub.w	r9, r3, r1
 80145be:	4591      	cmp	r9, r2
 80145c0:	bfa8      	it	ge
 80145c2:	4691      	movge	r9, r2
 80145c4:	f1b9 0f00 	cmp.w	r9, #0
 80145c8:	dc35      	bgt.n	8014636 <_printf_float+0x3ae>
 80145ca:	f04f 0800 	mov.w	r8, #0
 80145ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80145d2:	f104 0a1a 	add.w	sl, r4, #26
 80145d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80145da:	1a9b      	subs	r3, r3, r2
 80145dc:	eba3 0309 	sub.w	r3, r3, r9
 80145e0:	4543      	cmp	r3, r8
 80145e2:	f77f af79 	ble.w	80144d8 <_printf_float+0x250>
 80145e6:	2301      	movs	r3, #1
 80145e8:	4652      	mov	r2, sl
 80145ea:	4631      	mov	r1, r6
 80145ec:	4628      	mov	r0, r5
 80145ee:	47b8      	blx	r7
 80145f0:	3001      	adds	r0, #1
 80145f2:	f43f aeaa 	beq.w	801434a <_printf_float+0xc2>
 80145f6:	f108 0801 	add.w	r8, r8, #1
 80145fa:	e7ec      	b.n	80145d6 <_printf_float+0x34e>
 80145fc:	4613      	mov	r3, r2
 80145fe:	4631      	mov	r1, r6
 8014600:	4642      	mov	r2, r8
 8014602:	4628      	mov	r0, r5
 8014604:	47b8      	blx	r7
 8014606:	3001      	adds	r0, #1
 8014608:	d1c0      	bne.n	801458c <_printf_float+0x304>
 801460a:	e69e      	b.n	801434a <_printf_float+0xc2>
 801460c:	2301      	movs	r3, #1
 801460e:	4631      	mov	r1, r6
 8014610:	4628      	mov	r0, r5
 8014612:	9205      	str	r2, [sp, #20]
 8014614:	47b8      	blx	r7
 8014616:	3001      	adds	r0, #1
 8014618:	f43f ae97 	beq.w	801434a <_printf_float+0xc2>
 801461c:	9a05      	ldr	r2, [sp, #20]
 801461e:	f10b 0b01 	add.w	fp, fp, #1
 8014622:	e7b9      	b.n	8014598 <_printf_float+0x310>
 8014624:	ee18 3a10 	vmov	r3, s16
 8014628:	4652      	mov	r2, sl
 801462a:	4631      	mov	r1, r6
 801462c:	4628      	mov	r0, r5
 801462e:	47b8      	blx	r7
 8014630:	3001      	adds	r0, #1
 8014632:	d1be      	bne.n	80145b2 <_printf_float+0x32a>
 8014634:	e689      	b.n	801434a <_printf_float+0xc2>
 8014636:	9a05      	ldr	r2, [sp, #20]
 8014638:	464b      	mov	r3, r9
 801463a:	4442      	add	r2, r8
 801463c:	4631      	mov	r1, r6
 801463e:	4628      	mov	r0, r5
 8014640:	47b8      	blx	r7
 8014642:	3001      	adds	r0, #1
 8014644:	d1c1      	bne.n	80145ca <_printf_float+0x342>
 8014646:	e680      	b.n	801434a <_printf_float+0xc2>
 8014648:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801464a:	2a01      	cmp	r2, #1
 801464c:	dc01      	bgt.n	8014652 <_printf_float+0x3ca>
 801464e:	07db      	lsls	r3, r3, #31
 8014650:	d538      	bpl.n	80146c4 <_printf_float+0x43c>
 8014652:	2301      	movs	r3, #1
 8014654:	4642      	mov	r2, r8
 8014656:	4631      	mov	r1, r6
 8014658:	4628      	mov	r0, r5
 801465a:	47b8      	blx	r7
 801465c:	3001      	adds	r0, #1
 801465e:	f43f ae74 	beq.w	801434a <_printf_float+0xc2>
 8014662:	ee18 3a10 	vmov	r3, s16
 8014666:	4652      	mov	r2, sl
 8014668:	4631      	mov	r1, r6
 801466a:	4628      	mov	r0, r5
 801466c:	47b8      	blx	r7
 801466e:	3001      	adds	r0, #1
 8014670:	f43f ae6b 	beq.w	801434a <_printf_float+0xc2>
 8014674:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014678:	2200      	movs	r2, #0
 801467a:	2300      	movs	r3, #0
 801467c:	f7ec fa34 	bl	8000ae8 <__aeabi_dcmpeq>
 8014680:	b9d8      	cbnz	r0, 80146ba <_printf_float+0x432>
 8014682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014684:	f108 0201 	add.w	r2, r8, #1
 8014688:	3b01      	subs	r3, #1
 801468a:	4631      	mov	r1, r6
 801468c:	4628      	mov	r0, r5
 801468e:	47b8      	blx	r7
 8014690:	3001      	adds	r0, #1
 8014692:	d10e      	bne.n	80146b2 <_printf_float+0x42a>
 8014694:	e659      	b.n	801434a <_printf_float+0xc2>
 8014696:	2301      	movs	r3, #1
 8014698:	4652      	mov	r2, sl
 801469a:	4631      	mov	r1, r6
 801469c:	4628      	mov	r0, r5
 801469e:	47b8      	blx	r7
 80146a0:	3001      	adds	r0, #1
 80146a2:	f43f ae52 	beq.w	801434a <_printf_float+0xc2>
 80146a6:	f108 0801 	add.w	r8, r8, #1
 80146aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146ac:	3b01      	subs	r3, #1
 80146ae:	4543      	cmp	r3, r8
 80146b0:	dcf1      	bgt.n	8014696 <_printf_float+0x40e>
 80146b2:	464b      	mov	r3, r9
 80146b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80146b8:	e6dc      	b.n	8014474 <_printf_float+0x1ec>
 80146ba:	f04f 0800 	mov.w	r8, #0
 80146be:	f104 0a1a 	add.w	sl, r4, #26
 80146c2:	e7f2      	b.n	80146aa <_printf_float+0x422>
 80146c4:	2301      	movs	r3, #1
 80146c6:	4642      	mov	r2, r8
 80146c8:	e7df      	b.n	801468a <_printf_float+0x402>
 80146ca:	2301      	movs	r3, #1
 80146cc:	464a      	mov	r2, r9
 80146ce:	4631      	mov	r1, r6
 80146d0:	4628      	mov	r0, r5
 80146d2:	47b8      	blx	r7
 80146d4:	3001      	adds	r0, #1
 80146d6:	f43f ae38 	beq.w	801434a <_printf_float+0xc2>
 80146da:	f108 0801 	add.w	r8, r8, #1
 80146de:	68e3      	ldr	r3, [r4, #12]
 80146e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80146e2:	1a5b      	subs	r3, r3, r1
 80146e4:	4543      	cmp	r3, r8
 80146e6:	dcf0      	bgt.n	80146ca <_printf_float+0x442>
 80146e8:	e6fa      	b.n	80144e0 <_printf_float+0x258>
 80146ea:	f04f 0800 	mov.w	r8, #0
 80146ee:	f104 0919 	add.w	r9, r4, #25
 80146f2:	e7f4      	b.n	80146de <_printf_float+0x456>

080146f4 <_printf_common>:
 80146f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146f8:	4616      	mov	r6, r2
 80146fa:	4699      	mov	r9, r3
 80146fc:	688a      	ldr	r2, [r1, #8]
 80146fe:	690b      	ldr	r3, [r1, #16]
 8014700:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014704:	4293      	cmp	r3, r2
 8014706:	bfb8      	it	lt
 8014708:	4613      	movlt	r3, r2
 801470a:	6033      	str	r3, [r6, #0]
 801470c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014710:	4607      	mov	r7, r0
 8014712:	460c      	mov	r4, r1
 8014714:	b10a      	cbz	r2, 801471a <_printf_common+0x26>
 8014716:	3301      	adds	r3, #1
 8014718:	6033      	str	r3, [r6, #0]
 801471a:	6823      	ldr	r3, [r4, #0]
 801471c:	0699      	lsls	r1, r3, #26
 801471e:	bf42      	ittt	mi
 8014720:	6833      	ldrmi	r3, [r6, #0]
 8014722:	3302      	addmi	r3, #2
 8014724:	6033      	strmi	r3, [r6, #0]
 8014726:	6825      	ldr	r5, [r4, #0]
 8014728:	f015 0506 	ands.w	r5, r5, #6
 801472c:	d106      	bne.n	801473c <_printf_common+0x48>
 801472e:	f104 0a19 	add.w	sl, r4, #25
 8014732:	68e3      	ldr	r3, [r4, #12]
 8014734:	6832      	ldr	r2, [r6, #0]
 8014736:	1a9b      	subs	r3, r3, r2
 8014738:	42ab      	cmp	r3, r5
 801473a:	dc26      	bgt.n	801478a <_printf_common+0x96>
 801473c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014740:	1e13      	subs	r3, r2, #0
 8014742:	6822      	ldr	r2, [r4, #0]
 8014744:	bf18      	it	ne
 8014746:	2301      	movne	r3, #1
 8014748:	0692      	lsls	r2, r2, #26
 801474a:	d42b      	bmi.n	80147a4 <_printf_common+0xb0>
 801474c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014750:	4649      	mov	r1, r9
 8014752:	4638      	mov	r0, r7
 8014754:	47c0      	blx	r8
 8014756:	3001      	adds	r0, #1
 8014758:	d01e      	beq.n	8014798 <_printf_common+0xa4>
 801475a:	6823      	ldr	r3, [r4, #0]
 801475c:	68e5      	ldr	r5, [r4, #12]
 801475e:	6832      	ldr	r2, [r6, #0]
 8014760:	f003 0306 	and.w	r3, r3, #6
 8014764:	2b04      	cmp	r3, #4
 8014766:	bf08      	it	eq
 8014768:	1aad      	subeq	r5, r5, r2
 801476a:	68a3      	ldr	r3, [r4, #8]
 801476c:	6922      	ldr	r2, [r4, #16]
 801476e:	bf0c      	ite	eq
 8014770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014774:	2500      	movne	r5, #0
 8014776:	4293      	cmp	r3, r2
 8014778:	bfc4      	itt	gt
 801477a:	1a9b      	subgt	r3, r3, r2
 801477c:	18ed      	addgt	r5, r5, r3
 801477e:	2600      	movs	r6, #0
 8014780:	341a      	adds	r4, #26
 8014782:	42b5      	cmp	r5, r6
 8014784:	d11a      	bne.n	80147bc <_printf_common+0xc8>
 8014786:	2000      	movs	r0, #0
 8014788:	e008      	b.n	801479c <_printf_common+0xa8>
 801478a:	2301      	movs	r3, #1
 801478c:	4652      	mov	r2, sl
 801478e:	4649      	mov	r1, r9
 8014790:	4638      	mov	r0, r7
 8014792:	47c0      	blx	r8
 8014794:	3001      	adds	r0, #1
 8014796:	d103      	bne.n	80147a0 <_printf_common+0xac>
 8014798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801479c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147a0:	3501      	adds	r5, #1
 80147a2:	e7c6      	b.n	8014732 <_printf_common+0x3e>
 80147a4:	18e1      	adds	r1, r4, r3
 80147a6:	1c5a      	adds	r2, r3, #1
 80147a8:	2030      	movs	r0, #48	; 0x30
 80147aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80147ae:	4422      	add	r2, r4
 80147b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80147b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80147b8:	3302      	adds	r3, #2
 80147ba:	e7c7      	b.n	801474c <_printf_common+0x58>
 80147bc:	2301      	movs	r3, #1
 80147be:	4622      	mov	r2, r4
 80147c0:	4649      	mov	r1, r9
 80147c2:	4638      	mov	r0, r7
 80147c4:	47c0      	blx	r8
 80147c6:	3001      	adds	r0, #1
 80147c8:	d0e6      	beq.n	8014798 <_printf_common+0xa4>
 80147ca:	3601      	adds	r6, #1
 80147cc:	e7d9      	b.n	8014782 <_printf_common+0x8e>
	...

080147d0 <_printf_i>:
 80147d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80147d4:	7e0f      	ldrb	r7, [r1, #24]
 80147d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80147d8:	2f78      	cmp	r7, #120	; 0x78
 80147da:	4691      	mov	r9, r2
 80147dc:	4680      	mov	r8, r0
 80147de:	460c      	mov	r4, r1
 80147e0:	469a      	mov	sl, r3
 80147e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80147e6:	d807      	bhi.n	80147f8 <_printf_i+0x28>
 80147e8:	2f62      	cmp	r7, #98	; 0x62
 80147ea:	d80a      	bhi.n	8014802 <_printf_i+0x32>
 80147ec:	2f00      	cmp	r7, #0
 80147ee:	f000 80d8 	beq.w	80149a2 <_printf_i+0x1d2>
 80147f2:	2f58      	cmp	r7, #88	; 0x58
 80147f4:	f000 80a3 	beq.w	801493e <_printf_i+0x16e>
 80147f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80147fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014800:	e03a      	b.n	8014878 <_printf_i+0xa8>
 8014802:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014806:	2b15      	cmp	r3, #21
 8014808:	d8f6      	bhi.n	80147f8 <_printf_i+0x28>
 801480a:	a101      	add	r1, pc, #4	; (adr r1, 8014810 <_printf_i+0x40>)
 801480c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014810:	08014869 	.word	0x08014869
 8014814:	0801487d 	.word	0x0801487d
 8014818:	080147f9 	.word	0x080147f9
 801481c:	080147f9 	.word	0x080147f9
 8014820:	080147f9 	.word	0x080147f9
 8014824:	080147f9 	.word	0x080147f9
 8014828:	0801487d 	.word	0x0801487d
 801482c:	080147f9 	.word	0x080147f9
 8014830:	080147f9 	.word	0x080147f9
 8014834:	080147f9 	.word	0x080147f9
 8014838:	080147f9 	.word	0x080147f9
 801483c:	08014989 	.word	0x08014989
 8014840:	080148ad 	.word	0x080148ad
 8014844:	0801496b 	.word	0x0801496b
 8014848:	080147f9 	.word	0x080147f9
 801484c:	080147f9 	.word	0x080147f9
 8014850:	080149ab 	.word	0x080149ab
 8014854:	080147f9 	.word	0x080147f9
 8014858:	080148ad 	.word	0x080148ad
 801485c:	080147f9 	.word	0x080147f9
 8014860:	080147f9 	.word	0x080147f9
 8014864:	08014973 	.word	0x08014973
 8014868:	682b      	ldr	r3, [r5, #0]
 801486a:	1d1a      	adds	r2, r3, #4
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	602a      	str	r2, [r5, #0]
 8014870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014874:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014878:	2301      	movs	r3, #1
 801487a:	e0a3      	b.n	80149c4 <_printf_i+0x1f4>
 801487c:	6820      	ldr	r0, [r4, #0]
 801487e:	6829      	ldr	r1, [r5, #0]
 8014880:	0606      	lsls	r6, r0, #24
 8014882:	f101 0304 	add.w	r3, r1, #4
 8014886:	d50a      	bpl.n	801489e <_printf_i+0xce>
 8014888:	680e      	ldr	r6, [r1, #0]
 801488a:	602b      	str	r3, [r5, #0]
 801488c:	2e00      	cmp	r6, #0
 801488e:	da03      	bge.n	8014898 <_printf_i+0xc8>
 8014890:	232d      	movs	r3, #45	; 0x2d
 8014892:	4276      	negs	r6, r6
 8014894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014898:	485e      	ldr	r0, [pc, #376]	; (8014a14 <_printf_i+0x244>)
 801489a:	230a      	movs	r3, #10
 801489c:	e019      	b.n	80148d2 <_printf_i+0x102>
 801489e:	680e      	ldr	r6, [r1, #0]
 80148a0:	602b      	str	r3, [r5, #0]
 80148a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80148a6:	bf18      	it	ne
 80148a8:	b236      	sxthne	r6, r6
 80148aa:	e7ef      	b.n	801488c <_printf_i+0xbc>
 80148ac:	682b      	ldr	r3, [r5, #0]
 80148ae:	6820      	ldr	r0, [r4, #0]
 80148b0:	1d19      	adds	r1, r3, #4
 80148b2:	6029      	str	r1, [r5, #0]
 80148b4:	0601      	lsls	r1, r0, #24
 80148b6:	d501      	bpl.n	80148bc <_printf_i+0xec>
 80148b8:	681e      	ldr	r6, [r3, #0]
 80148ba:	e002      	b.n	80148c2 <_printf_i+0xf2>
 80148bc:	0646      	lsls	r6, r0, #25
 80148be:	d5fb      	bpl.n	80148b8 <_printf_i+0xe8>
 80148c0:	881e      	ldrh	r6, [r3, #0]
 80148c2:	4854      	ldr	r0, [pc, #336]	; (8014a14 <_printf_i+0x244>)
 80148c4:	2f6f      	cmp	r7, #111	; 0x6f
 80148c6:	bf0c      	ite	eq
 80148c8:	2308      	moveq	r3, #8
 80148ca:	230a      	movne	r3, #10
 80148cc:	2100      	movs	r1, #0
 80148ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80148d2:	6865      	ldr	r5, [r4, #4]
 80148d4:	60a5      	str	r5, [r4, #8]
 80148d6:	2d00      	cmp	r5, #0
 80148d8:	bfa2      	ittt	ge
 80148da:	6821      	ldrge	r1, [r4, #0]
 80148dc:	f021 0104 	bicge.w	r1, r1, #4
 80148e0:	6021      	strge	r1, [r4, #0]
 80148e2:	b90e      	cbnz	r6, 80148e8 <_printf_i+0x118>
 80148e4:	2d00      	cmp	r5, #0
 80148e6:	d04d      	beq.n	8014984 <_printf_i+0x1b4>
 80148e8:	4615      	mov	r5, r2
 80148ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80148ee:	fb03 6711 	mls	r7, r3, r1, r6
 80148f2:	5dc7      	ldrb	r7, [r0, r7]
 80148f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80148f8:	4637      	mov	r7, r6
 80148fa:	42bb      	cmp	r3, r7
 80148fc:	460e      	mov	r6, r1
 80148fe:	d9f4      	bls.n	80148ea <_printf_i+0x11a>
 8014900:	2b08      	cmp	r3, #8
 8014902:	d10b      	bne.n	801491c <_printf_i+0x14c>
 8014904:	6823      	ldr	r3, [r4, #0]
 8014906:	07de      	lsls	r6, r3, #31
 8014908:	d508      	bpl.n	801491c <_printf_i+0x14c>
 801490a:	6923      	ldr	r3, [r4, #16]
 801490c:	6861      	ldr	r1, [r4, #4]
 801490e:	4299      	cmp	r1, r3
 8014910:	bfde      	ittt	le
 8014912:	2330      	movle	r3, #48	; 0x30
 8014914:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014918:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801491c:	1b52      	subs	r2, r2, r5
 801491e:	6122      	str	r2, [r4, #16]
 8014920:	f8cd a000 	str.w	sl, [sp]
 8014924:	464b      	mov	r3, r9
 8014926:	aa03      	add	r2, sp, #12
 8014928:	4621      	mov	r1, r4
 801492a:	4640      	mov	r0, r8
 801492c:	f7ff fee2 	bl	80146f4 <_printf_common>
 8014930:	3001      	adds	r0, #1
 8014932:	d14c      	bne.n	80149ce <_printf_i+0x1fe>
 8014934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014938:	b004      	add	sp, #16
 801493a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801493e:	4835      	ldr	r0, [pc, #212]	; (8014a14 <_printf_i+0x244>)
 8014940:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014944:	6829      	ldr	r1, [r5, #0]
 8014946:	6823      	ldr	r3, [r4, #0]
 8014948:	f851 6b04 	ldr.w	r6, [r1], #4
 801494c:	6029      	str	r1, [r5, #0]
 801494e:	061d      	lsls	r5, r3, #24
 8014950:	d514      	bpl.n	801497c <_printf_i+0x1ac>
 8014952:	07df      	lsls	r7, r3, #31
 8014954:	bf44      	itt	mi
 8014956:	f043 0320 	orrmi.w	r3, r3, #32
 801495a:	6023      	strmi	r3, [r4, #0]
 801495c:	b91e      	cbnz	r6, 8014966 <_printf_i+0x196>
 801495e:	6823      	ldr	r3, [r4, #0]
 8014960:	f023 0320 	bic.w	r3, r3, #32
 8014964:	6023      	str	r3, [r4, #0]
 8014966:	2310      	movs	r3, #16
 8014968:	e7b0      	b.n	80148cc <_printf_i+0xfc>
 801496a:	6823      	ldr	r3, [r4, #0]
 801496c:	f043 0320 	orr.w	r3, r3, #32
 8014970:	6023      	str	r3, [r4, #0]
 8014972:	2378      	movs	r3, #120	; 0x78
 8014974:	4828      	ldr	r0, [pc, #160]	; (8014a18 <_printf_i+0x248>)
 8014976:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801497a:	e7e3      	b.n	8014944 <_printf_i+0x174>
 801497c:	0659      	lsls	r1, r3, #25
 801497e:	bf48      	it	mi
 8014980:	b2b6      	uxthmi	r6, r6
 8014982:	e7e6      	b.n	8014952 <_printf_i+0x182>
 8014984:	4615      	mov	r5, r2
 8014986:	e7bb      	b.n	8014900 <_printf_i+0x130>
 8014988:	682b      	ldr	r3, [r5, #0]
 801498a:	6826      	ldr	r6, [r4, #0]
 801498c:	6961      	ldr	r1, [r4, #20]
 801498e:	1d18      	adds	r0, r3, #4
 8014990:	6028      	str	r0, [r5, #0]
 8014992:	0635      	lsls	r5, r6, #24
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	d501      	bpl.n	801499c <_printf_i+0x1cc>
 8014998:	6019      	str	r1, [r3, #0]
 801499a:	e002      	b.n	80149a2 <_printf_i+0x1d2>
 801499c:	0670      	lsls	r0, r6, #25
 801499e:	d5fb      	bpl.n	8014998 <_printf_i+0x1c8>
 80149a0:	8019      	strh	r1, [r3, #0]
 80149a2:	2300      	movs	r3, #0
 80149a4:	6123      	str	r3, [r4, #16]
 80149a6:	4615      	mov	r5, r2
 80149a8:	e7ba      	b.n	8014920 <_printf_i+0x150>
 80149aa:	682b      	ldr	r3, [r5, #0]
 80149ac:	1d1a      	adds	r2, r3, #4
 80149ae:	602a      	str	r2, [r5, #0]
 80149b0:	681d      	ldr	r5, [r3, #0]
 80149b2:	6862      	ldr	r2, [r4, #4]
 80149b4:	2100      	movs	r1, #0
 80149b6:	4628      	mov	r0, r5
 80149b8:	f7eb fc22 	bl	8000200 <memchr>
 80149bc:	b108      	cbz	r0, 80149c2 <_printf_i+0x1f2>
 80149be:	1b40      	subs	r0, r0, r5
 80149c0:	6060      	str	r0, [r4, #4]
 80149c2:	6863      	ldr	r3, [r4, #4]
 80149c4:	6123      	str	r3, [r4, #16]
 80149c6:	2300      	movs	r3, #0
 80149c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80149cc:	e7a8      	b.n	8014920 <_printf_i+0x150>
 80149ce:	6923      	ldr	r3, [r4, #16]
 80149d0:	462a      	mov	r2, r5
 80149d2:	4649      	mov	r1, r9
 80149d4:	4640      	mov	r0, r8
 80149d6:	47d0      	blx	sl
 80149d8:	3001      	adds	r0, #1
 80149da:	d0ab      	beq.n	8014934 <_printf_i+0x164>
 80149dc:	6823      	ldr	r3, [r4, #0]
 80149de:	079b      	lsls	r3, r3, #30
 80149e0:	d413      	bmi.n	8014a0a <_printf_i+0x23a>
 80149e2:	68e0      	ldr	r0, [r4, #12]
 80149e4:	9b03      	ldr	r3, [sp, #12]
 80149e6:	4298      	cmp	r0, r3
 80149e8:	bfb8      	it	lt
 80149ea:	4618      	movlt	r0, r3
 80149ec:	e7a4      	b.n	8014938 <_printf_i+0x168>
 80149ee:	2301      	movs	r3, #1
 80149f0:	4632      	mov	r2, r6
 80149f2:	4649      	mov	r1, r9
 80149f4:	4640      	mov	r0, r8
 80149f6:	47d0      	blx	sl
 80149f8:	3001      	adds	r0, #1
 80149fa:	d09b      	beq.n	8014934 <_printf_i+0x164>
 80149fc:	3501      	adds	r5, #1
 80149fe:	68e3      	ldr	r3, [r4, #12]
 8014a00:	9903      	ldr	r1, [sp, #12]
 8014a02:	1a5b      	subs	r3, r3, r1
 8014a04:	42ab      	cmp	r3, r5
 8014a06:	dcf2      	bgt.n	80149ee <_printf_i+0x21e>
 8014a08:	e7eb      	b.n	80149e2 <_printf_i+0x212>
 8014a0a:	2500      	movs	r5, #0
 8014a0c:	f104 0619 	add.w	r6, r4, #25
 8014a10:	e7f5      	b.n	80149fe <_printf_i+0x22e>
 8014a12:	bf00      	nop
 8014a14:	0801a382 	.word	0x0801a382
 8014a18:	0801a393 	.word	0x0801a393

08014a1c <cleanup_glue>:
 8014a1c:	b538      	push	{r3, r4, r5, lr}
 8014a1e:	460c      	mov	r4, r1
 8014a20:	6809      	ldr	r1, [r1, #0]
 8014a22:	4605      	mov	r5, r0
 8014a24:	b109      	cbz	r1, 8014a2a <cleanup_glue+0xe>
 8014a26:	f7ff fff9 	bl	8014a1c <cleanup_glue>
 8014a2a:	4621      	mov	r1, r4
 8014a2c:	4628      	mov	r0, r5
 8014a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a32:	f002 bfe9 	b.w	8017a08 <_free_r>
	...

08014a38 <_reclaim_reent>:
 8014a38:	4b2c      	ldr	r3, [pc, #176]	; (8014aec <_reclaim_reent+0xb4>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	4283      	cmp	r3, r0
 8014a3e:	b570      	push	{r4, r5, r6, lr}
 8014a40:	4604      	mov	r4, r0
 8014a42:	d051      	beq.n	8014ae8 <_reclaim_reent+0xb0>
 8014a44:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014a46:	b143      	cbz	r3, 8014a5a <_reclaim_reent+0x22>
 8014a48:	68db      	ldr	r3, [r3, #12]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d14a      	bne.n	8014ae4 <_reclaim_reent+0xac>
 8014a4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014a50:	6819      	ldr	r1, [r3, #0]
 8014a52:	b111      	cbz	r1, 8014a5a <_reclaim_reent+0x22>
 8014a54:	4620      	mov	r0, r4
 8014a56:	f002 ffd7 	bl	8017a08 <_free_r>
 8014a5a:	6961      	ldr	r1, [r4, #20]
 8014a5c:	b111      	cbz	r1, 8014a64 <_reclaim_reent+0x2c>
 8014a5e:	4620      	mov	r0, r4
 8014a60:	f002 ffd2 	bl	8017a08 <_free_r>
 8014a64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014a66:	b111      	cbz	r1, 8014a6e <_reclaim_reent+0x36>
 8014a68:	4620      	mov	r0, r4
 8014a6a:	f002 ffcd 	bl	8017a08 <_free_r>
 8014a6e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014a70:	b111      	cbz	r1, 8014a78 <_reclaim_reent+0x40>
 8014a72:	4620      	mov	r0, r4
 8014a74:	f002 ffc8 	bl	8017a08 <_free_r>
 8014a78:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014a7a:	b111      	cbz	r1, 8014a82 <_reclaim_reent+0x4a>
 8014a7c:	4620      	mov	r0, r4
 8014a7e:	f002 ffc3 	bl	8017a08 <_free_r>
 8014a82:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014a84:	b111      	cbz	r1, 8014a8c <_reclaim_reent+0x54>
 8014a86:	4620      	mov	r0, r4
 8014a88:	f002 ffbe 	bl	8017a08 <_free_r>
 8014a8c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8014a8e:	b111      	cbz	r1, 8014a96 <_reclaim_reent+0x5e>
 8014a90:	4620      	mov	r0, r4
 8014a92:	f002 ffb9 	bl	8017a08 <_free_r>
 8014a96:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014a98:	b111      	cbz	r1, 8014aa0 <_reclaim_reent+0x68>
 8014a9a:	4620      	mov	r0, r4
 8014a9c:	f002 ffb4 	bl	8017a08 <_free_r>
 8014aa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014aa2:	b111      	cbz	r1, 8014aaa <_reclaim_reent+0x72>
 8014aa4:	4620      	mov	r0, r4
 8014aa6:	f002 ffaf 	bl	8017a08 <_free_r>
 8014aaa:	69a3      	ldr	r3, [r4, #24]
 8014aac:	b1e3      	cbz	r3, 8014ae8 <_reclaim_reent+0xb0>
 8014aae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014ab0:	4620      	mov	r0, r4
 8014ab2:	4798      	blx	r3
 8014ab4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014ab6:	b1b9      	cbz	r1, 8014ae8 <_reclaim_reent+0xb0>
 8014ab8:	4620      	mov	r0, r4
 8014aba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014abe:	f7ff bfad 	b.w	8014a1c <cleanup_glue>
 8014ac2:	5949      	ldr	r1, [r1, r5]
 8014ac4:	b941      	cbnz	r1, 8014ad8 <_reclaim_reent+0xa0>
 8014ac6:	3504      	adds	r5, #4
 8014ac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014aca:	2d80      	cmp	r5, #128	; 0x80
 8014acc:	68d9      	ldr	r1, [r3, #12]
 8014ace:	d1f8      	bne.n	8014ac2 <_reclaim_reent+0x8a>
 8014ad0:	4620      	mov	r0, r4
 8014ad2:	f002 ff99 	bl	8017a08 <_free_r>
 8014ad6:	e7ba      	b.n	8014a4e <_reclaim_reent+0x16>
 8014ad8:	680e      	ldr	r6, [r1, #0]
 8014ada:	4620      	mov	r0, r4
 8014adc:	f002 ff94 	bl	8017a08 <_free_r>
 8014ae0:	4631      	mov	r1, r6
 8014ae2:	e7ef      	b.n	8014ac4 <_reclaim_reent+0x8c>
 8014ae4:	2500      	movs	r5, #0
 8014ae6:	e7ef      	b.n	8014ac8 <_reclaim_reent+0x90>
 8014ae8:	bd70      	pop	{r4, r5, r6, pc}
 8014aea:	bf00      	nop
 8014aec:	2000022c 	.word	0x2000022c

08014af0 <_sbrk_r>:
 8014af0:	b538      	push	{r3, r4, r5, lr}
 8014af2:	4d06      	ldr	r5, [pc, #24]	; (8014b0c <_sbrk_r+0x1c>)
 8014af4:	2300      	movs	r3, #0
 8014af6:	4604      	mov	r4, r0
 8014af8:	4608      	mov	r0, r1
 8014afa:	602b      	str	r3, [r5, #0]
 8014afc:	f7f2 fe16 	bl	800772c <_sbrk>
 8014b00:	1c43      	adds	r3, r0, #1
 8014b02:	d102      	bne.n	8014b0a <_sbrk_r+0x1a>
 8014b04:	682b      	ldr	r3, [r5, #0]
 8014b06:	b103      	cbz	r3, 8014b0a <_sbrk_r+0x1a>
 8014b08:	6023      	str	r3, [r4, #0]
 8014b0a:	bd38      	pop	{r3, r4, r5, pc}
 8014b0c:	20008420 	.word	0x20008420

08014b10 <siprintf>:
 8014b10:	b40e      	push	{r1, r2, r3}
 8014b12:	b500      	push	{lr}
 8014b14:	b09c      	sub	sp, #112	; 0x70
 8014b16:	ab1d      	add	r3, sp, #116	; 0x74
 8014b18:	9002      	str	r0, [sp, #8]
 8014b1a:	9006      	str	r0, [sp, #24]
 8014b1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014b20:	4809      	ldr	r0, [pc, #36]	; (8014b48 <siprintf+0x38>)
 8014b22:	9107      	str	r1, [sp, #28]
 8014b24:	9104      	str	r1, [sp, #16]
 8014b26:	4909      	ldr	r1, [pc, #36]	; (8014b4c <siprintf+0x3c>)
 8014b28:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b2c:	9105      	str	r1, [sp, #20]
 8014b2e:	6800      	ldr	r0, [r0, #0]
 8014b30:	9301      	str	r3, [sp, #4]
 8014b32:	a902      	add	r1, sp, #8
 8014b34:	f003 f810 	bl	8017b58 <_svfiprintf_r>
 8014b38:	9b02      	ldr	r3, [sp, #8]
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	701a      	strb	r2, [r3, #0]
 8014b3e:	b01c      	add	sp, #112	; 0x70
 8014b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b44:	b003      	add	sp, #12
 8014b46:	4770      	bx	lr
 8014b48:	2000022c 	.word	0x2000022c
 8014b4c:	ffff0208 	.word	0xffff0208

08014b50 <__sread>:
 8014b50:	b510      	push	{r4, lr}
 8014b52:	460c      	mov	r4, r1
 8014b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b58:	f003 f8fe 	bl	8017d58 <_read_r>
 8014b5c:	2800      	cmp	r0, #0
 8014b5e:	bfab      	itete	ge
 8014b60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014b62:	89a3      	ldrhlt	r3, [r4, #12]
 8014b64:	181b      	addge	r3, r3, r0
 8014b66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014b6a:	bfac      	ite	ge
 8014b6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8014b6e:	81a3      	strhlt	r3, [r4, #12]
 8014b70:	bd10      	pop	{r4, pc}

08014b72 <__swrite>:
 8014b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b76:	461f      	mov	r7, r3
 8014b78:	898b      	ldrh	r3, [r1, #12]
 8014b7a:	05db      	lsls	r3, r3, #23
 8014b7c:	4605      	mov	r5, r0
 8014b7e:	460c      	mov	r4, r1
 8014b80:	4616      	mov	r6, r2
 8014b82:	d505      	bpl.n	8014b90 <__swrite+0x1e>
 8014b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b88:	2302      	movs	r3, #2
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	f002 fa2c 	bl	8016fe8 <_lseek_r>
 8014b90:	89a3      	ldrh	r3, [r4, #12]
 8014b92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014b9a:	81a3      	strh	r3, [r4, #12]
 8014b9c:	4632      	mov	r2, r6
 8014b9e:	463b      	mov	r3, r7
 8014ba0:	4628      	mov	r0, r5
 8014ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ba6:	f000 bf4b 	b.w	8015a40 <_write_r>

08014baa <__sseek>:
 8014baa:	b510      	push	{r4, lr}
 8014bac:	460c      	mov	r4, r1
 8014bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bb2:	f002 fa19 	bl	8016fe8 <_lseek_r>
 8014bb6:	1c43      	adds	r3, r0, #1
 8014bb8:	89a3      	ldrh	r3, [r4, #12]
 8014bba:	bf15      	itete	ne
 8014bbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8014bbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014bc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014bc6:	81a3      	strheq	r3, [r4, #12]
 8014bc8:	bf18      	it	ne
 8014bca:	81a3      	strhne	r3, [r4, #12]
 8014bcc:	bd10      	pop	{r4, pc}

08014bce <__sclose>:
 8014bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bd2:	f000 bf47 	b.w	8015a64 <_close_r>

08014bd6 <strchr>:
 8014bd6:	b2c9      	uxtb	r1, r1
 8014bd8:	4603      	mov	r3, r0
 8014bda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014bde:	b11a      	cbz	r2, 8014be8 <strchr+0x12>
 8014be0:	428a      	cmp	r2, r1
 8014be2:	d1f9      	bne.n	8014bd8 <strchr+0x2>
 8014be4:	4618      	mov	r0, r3
 8014be6:	4770      	bx	lr
 8014be8:	2900      	cmp	r1, #0
 8014bea:	bf18      	it	ne
 8014bec:	2300      	movne	r3, #0
 8014bee:	e7f9      	b.n	8014be4 <strchr+0xe>

08014bf0 <strcpy>:
 8014bf0:	4603      	mov	r3, r0
 8014bf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014bf6:	f803 2b01 	strb.w	r2, [r3], #1
 8014bfa:	2a00      	cmp	r2, #0
 8014bfc:	d1f9      	bne.n	8014bf2 <strcpy+0x2>
 8014bfe:	4770      	bx	lr

08014c00 <strncmp>:
 8014c00:	b510      	push	{r4, lr}
 8014c02:	b17a      	cbz	r2, 8014c24 <strncmp+0x24>
 8014c04:	4603      	mov	r3, r0
 8014c06:	3901      	subs	r1, #1
 8014c08:	1884      	adds	r4, r0, r2
 8014c0a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014c0e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014c12:	4290      	cmp	r0, r2
 8014c14:	d101      	bne.n	8014c1a <strncmp+0x1a>
 8014c16:	42a3      	cmp	r3, r4
 8014c18:	d101      	bne.n	8014c1e <strncmp+0x1e>
 8014c1a:	1a80      	subs	r0, r0, r2
 8014c1c:	bd10      	pop	{r4, pc}
 8014c1e:	2800      	cmp	r0, #0
 8014c20:	d1f3      	bne.n	8014c0a <strncmp+0xa>
 8014c22:	e7fa      	b.n	8014c1a <strncmp+0x1a>
 8014c24:	4610      	mov	r0, r2
 8014c26:	e7f9      	b.n	8014c1c <strncmp+0x1c>

08014c28 <strstr>:
 8014c28:	780a      	ldrb	r2, [r1, #0]
 8014c2a:	b570      	push	{r4, r5, r6, lr}
 8014c2c:	b96a      	cbnz	r2, 8014c4a <strstr+0x22>
 8014c2e:	bd70      	pop	{r4, r5, r6, pc}
 8014c30:	429a      	cmp	r2, r3
 8014c32:	d109      	bne.n	8014c48 <strstr+0x20>
 8014c34:	460c      	mov	r4, r1
 8014c36:	4605      	mov	r5, r0
 8014c38:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d0f6      	beq.n	8014c2e <strstr+0x6>
 8014c40:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8014c44:	429e      	cmp	r6, r3
 8014c46:	d0f7      	beq.n	8014c38 <strstr+0x10>
 8014c48:	3001      	adds	r0, #1
 8014c4a:	7803      	ldrb	r3, [r0, #0]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d1ef      	bne.n	8014c30 <strstr+0x8>
 8014c50:	4618      	mov	r0, r3
 8014c52:	e7ec      	b.n	8014c2e <strstr+0x6>

08014c54 <sulp>:
 8014c54:	b570      	push	{r4, r5, r6, lr}
 8014c56:	4604      	mov	r4, r0
 8014c58:	460d      	mov	r5, r1
 8014c5a:	ec45 4b10 	vmov	d0, r4, r5
 8014c5e:	4616      	mov	r6, r2
 8014c60:	f002 fd6c 	bl	801773c <__ulp>
 8014c64:	ec51 0b10 	vmov	r0, r1, d0
 8014c68:	b17e      	cbz	r6, 8014c8a <sulp+0x36>
 8014c6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014c6e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	dd09      	ble.n	8014c8a <sulp+0x36>
 8014c76:	051b      	lsls	r3, r3, #20
 8014c78:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014c7c:	2400      	movs	r4, #0
 8014c7e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014c82:	4622      	mov	r2, r4
 8014c84:	462b      	mov	r3, r5
 8014c86:	f7eb fcc7 	bl	8000618 <__aeabi_dmul>
 8014c8a:	bd70      	pop	{r4, r5, r6, pc}
 8014c8c:	0000      	movs	r0, r0
	...

08014c90 <_strtod_l>:
 8014c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c94:	ed2d 8b02 	vpush	{d8}
 8014c98:	b09d      	sub	sp, #116	; 0x74
 8014c9a:	461f      	mov	r7, r3
 8014c9c:	2300      	movs	r3, #0
 8014c9e:	9318      	str	r3, [sp, #96]	; 0x60
 8014ca0:	4ba2      	ldr	r3, [pc, #648]	; (8014f2c <_strtod_l+0x29c>)
 8014ca2:	9213      	str	r2, [sp, #76]	; 0x4c
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	9305      	str	r3, [sp, #20]
 8014ca8:	4604      	mov	r4, r0
 8014caa:	4618      	mov	r0, r3
 8014cac:	4688      	mov	r8, r1
 8014cae:	f7eb fa99 	bl	80001e4 <strlen>
 8014cb2:	f04f 0a00 	mov.w	sl, #0
 8014cb6:	4605      	mov	r5, r0
 8014cb8:	f04f 0b00 	mov.w	fp, #0
 8014cbc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014cc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014cc2:	781a      	ldrb	r2, [r3, #0]
 8014cc4:	2a2b      	cmp	r2, #43	; 0x2b
 8014cc6:	d04e      	beq.n	8014d66 <_strtod_l+0xd6>
 8014cc8:	d83b      	bhi.n	8014d42 <_strtod_l+0xb2>
 8014cca:	2a0d      	cmp	r2, #13
 8014ccc:	d834      	bhi.n	8014d38 <_strtod_l+0xa8>
 8014cce:	2a08      	cmp	r2, #8
 8014cd0:	d834      	bhi.n	8014d3c <_strtod_l+0xac>
 8014cd2:	2a00      	cmp	r2, #0
 8014cd4:	d03e      	beq.n	8014d54 <_strtod_l+0xc4>
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	930a      	str	r3, [sp, #40]	; 0x28
 8014cda:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8014cdc:	7833      	ldrb	r3, [r6, #0]
 8014cde:	2b30      	cmp	r3, #48	; 0x30
 8014ce0:	f040 80b0 	bne.w	8014e44 <_strtod_l+0x1b4>
 8014ce4:	7873      	ldrb	r3, [r6, #1]
 8014ce6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014cea:	2b58      	cmp	r3, #88	; 0x58
 8014cec:	d168      	bne.n	8014dc0 <_strtod_l+0x130>
 8014cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cf0:	9301      	str	r3, [sp, #4]
 8014cf2:	ab18      	add	r3, sp, #96	; 0x60
 8014cf4:	9702      	str	r7, [sp, #8]
 8014cf6:	9300      	str	r3, [sp, #0]
 8014cf8:	4a8d      	ldr	r2, [pc, #564]	; (8014f30 <_strtod_l+0x2a0>)
 8014cfa:	ab19      	add	r3, sp, #100	; 0x64
 8014cfc:	a917      	add	r1, sp, #92	; 0x5c
 8014cfe:	4620      	mov	r0, r4
 8014d00:	f001 fe66 	bl	80169d0 <__gethex>
 8014d04:	f010 0707 	ands.w	r7, r0, #7
 8014d08:	4605      	mov	r5, r0
 8014d0a:	d005      	beq.n	8014d18 <_strtod_l+0x88>
 8014d0c:	2f06      	cmp	r7, #6
 8014d0e:	d12c      	bne.n	8014d6a <_strtod_l+0xda>
 8014d10:	3601      	adds	r6, #1
 8014d12:	2300      	movs	r3, #0
 8014d14:	9617      	str	r6, [sp, #92]	; 0x5c
 8014d16:	930a      	str	r3, [sp, #40]	; 0x28
 8014d18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	f040 8590 	bne.w	8015840 <_strtod_l+0xbb0>
 8014d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d22:	b1eb      	cbz	r3, 8014d60 <_strtod_l+0xd0>
 8014d24:	4652      	mov	r2, sl
 8014d26:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014d2a:	ec43 2b10 	vmov	d0, r2, r3
 8014d2e:	b01d      	add	sp, #116	; 0x74
 8014d30:	ecbd 8b02 	vpop	{d8}
 8014d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d38:	2a20      	cmp	r2, #32
 8014d3a:	d1cc      	bne.n	8014cd6 <_strtod_l+0x46>
 8014d3c:	3301      	adds	r3, #1
 8014d3e:	9317      	str	r3, [sp, #92]	; 0x5c
 8014d40:	e7be      	b.n	8014cc0 <_strtod_l+0x30>
 8014d42:	2a2d      	cmp	r2, #45	; 0x2d
 8014d44:	d1c7      	bne.n	8014cd6 <_strtod_l+0x46>
 8014d46:	2201      	movs	r2, #1
 8014d48:	920a      	str	r2, [sp, #40]	; 0x28
 8014d4a:	1c5a      	adds	r2, r3, #1
 8014d4c:	9217      	str	r2, [sp, #92]	; 0x5c
 8014d4e:	785b      	ldrb	r3, [r3, #1]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d1c2      	bne.n	8014cda <_strtod_l+0x4a>
 8014d54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014d56:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	f040 856e 	bne.w	801583c <_strtod_l+0xbac>
 8014d60:	4652      	mov	r2, sl
 8014d62:	465b      	mov	r3, fp
 8014d64:	e7e1      	b.n	8014d2a <_strtod_l+0x9a>
 8014d66:	2200      	movs	r2, #0
 8014d68:	e7ee      	b.n	8014d48 <_strtod_l+0xb8>
 8014d6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014d6c:	b13a      	cbz	r2, 8014d7e <_strtod_l+0xee>
 8014d6e:	2135      	movs	r1, #53	; 0x35
 8014d70:	a81a      	add	r0, sp, #104	; 0x68
 8014d72:	f002 fdee 	bl	8017952 <__copybits>
 8014d76:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014d78:	4620      	mov	r0, r4
 8014d7a:	f002 f9ad 	bl	80170d8 <_Bfree>
 8014d7e:	3f01      	subs	r7, #1
 8014d80:	2f04      	cmp	r7, #4
 8014d82:	d806      	bhi.n	8014d92 <_strtod_l+0x102>
 8014d84:	e8df f007 	tbb	[pc, r7]
 8014d88:	1714030a 	.word	0x1714030a
 8014d8c:	0a          	.byte	0x0a
 8014d8d:	00          	.byte	0x00
 8014d8e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8014d92:	0728      	lsls	r0, r5, #28
 8014d94:	d5c0      	bpl.n	8014d18 <_strtod_l+0x88>
 8014d96:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8014d9a:	e7bd      	b.n	8014d18 <_strtod_l+0x88>
 8014d9c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8014da0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014da2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014da6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014daa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014dae:	e7f0      	b.n	8014d92 <_strtod_l+0x102>
 8014db0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8014f34 <_strtod_l+0x2a4>
 8014db4:	e7ed      	b.n	8014d92 <_strtod_l+0x102>
 8014db6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8014dba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8014dbe:	e7e8      	b.n	8014d92 <_strtod_l+0x102>
 8014dc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014dc2:	1c5a      	adds	r2, r3, #1
 8014dc4:	9217      	str	r2, [sp, #92]	; 0x5c
 8014dc6:	785b      	ldrb	r3, [r3, #1]
 8014dc8:	2b30      	cmp	r3, #48	; 0x30
 8014dca:	d0f9      	beq.n	8014dc0 <_strtod_l+0x130>
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d0a3      	beq.n	8014d18 <_strtod_l+0x88>
 8014dd0:	2301      	movs	r3, #1
 8014dd2:	f04f 0900 	mov.w	r9, #0
 8014dd6:	9304      	str	r3, [sp, #16]
 8014dd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014dda:	9308      	str	r3, [sp, #32]
 8014ddc:	f8cd 901c 	str.w	r9, [sp, #28]
 8014de0:	464f      	mov	r7, r9
 8014de2:	220a      	movs	r2, #10
 8014de4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014de6:	7806      	ldrb	r6, [r0, #0]
 8014de8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014dec:	b2d9      	uxtb	r1, r3
 8014dee:	2909      	cmp	r1, #9
 8014df0:	d92a      	bls.n	8014e48 <_strtod_l+0x1b8>
 8014df2:	9905      	ldr	r1, [sp, #20]
 8014df4:	462a      	mov	r2, r5
 8014df6:	f7ff ff03 	bl	8014c00 <strncmp>
 8014dfa:	b398      	cbz	r0, 8014e64 <_strtod_l+0x1d4>
 8014dfc:	2000      	movs	r0, #0
 8014dfe:	4632      	mov	r2, r6
 8014e00:	463d      	mov	r5, r7
 8014e02:	9005      	str	r0, [sp, #20]
 8014e04:	4603      	mov	r3, r0
 8014e06:	2a65      	cmp	r2, #101	; 0x65
 8014e08:	d001      	beq.n	8014e0e <_strtod_l+0x17e>
 8014e0a:	2a45      	cmp	r2, #69	; 0x45
 8014e0c:	d118      	bne.n	8014e40 <_strtod_l+0x1b0>
 8014e0e:	b91d      	cbnz	r5, 8014e18 <_strtod_l+0x188>
 8014e10:	9a04      	ldr	r2, [sp, #16]
 8014e12:	4302      	orrs	r2, r0
 8014e14:	d09e      	beq.n	8014d54 <_strtod_l+0xc4>
 8014e16:	2500      	movs	r5, #0
 8014e18:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8014e1c:	f108 0201 	add.w	r2, r8, #1
 8014e20:	9217      	str	r2, [sp, #92]	; 0x5c
 8014e22:	f898 2001 	ldrb.w	r2, [r8, #1]
 8014e26:	2a2b      	cmp	r2, #43	; 0x2b
 8014e28:	d075      	beq.n	8014f16 <_strtod_l+0x286>
 8014e2a:	2a2d      	cmp	r2, #45	; 0x2d
 8014e2c:	d07b      	beq.n	8014f26 <_strtod_l+0x296>
 8014e2e:	f04f 0c00 	mov.w	ip, #0
 8014e32:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014e36:	2909      	cmp	r1, #9
 8014e38:	f240 8082 	bls.w	8014f40 <_strtod_l+0x2b0>
 8014e3c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014e40:	2600      	movs	r6, #0
 8014e42:	e09d      	b.n	8014f80 <_strtod_l+0x2f0>
 8014e44:	2300      	movs	r3, #0
 8014e46:	e7c4      	b.n	8014dd2 <_strtod_l+0x142>
 8014e48:	2f08      	cmp	r7, #8
 8014e4a:	bfd8      	it	le
 8014e4c:	9907      	ldrle	r1, [sp, #28]
 8014e4e:	f100 0001 	add.w	r0, r0, #1
 8014e52:	bfda      	itte	le
 8014e54:	fb02 3301 	mlale	r3, r2, r1, r3
 8014e58:	9307      	strle	r3, [sp, #28]
 8014e5a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8014e5e:	3701      	adds	r7, #1
 8014e60:	9017      	str	r0, [sp, #92]	; 0x5c
 8014e62:	e7bf      	b.n	8014de4 <_strtod_l+0x154>
 8014e64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014e66:	195a      	adds	r2, r3, r5
 8014e68:	9217      	str	r2, [sp, #92]	; 0x5c
 8014e6a:	5d5a      	ldrb	r2, [r3, r5]
 8014e6c:	2f00      	cmp	r7, #0
 8014e6e:	d037      	beq.n	8014ee0 <_strtod_l+0x250>
 8014e70:	9005      	str	r0, [sp, #20]
 8014e72:	463d      	mov	r5, r7
 8014e74:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014e78:	2b09      	cmp	r3, #9
 8014e7a:	d912      	bls.n	8014ea2 <_strtod_l+0x212>
 8014e7c:	2301      	movs	r3, #1
 8014e7e:	e7c2      	b.n	8014e06 <_strtod_l+0x176>
 8014e80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014e82:	1c5a      	adds	r2, r3, #1
 8014e84:	9217      	str	r2, [sp, #92]	; 0x5c
 8014e86:	785a      	ldrb	r2, [r3, #1]
 8014e88:	3001      	adds	r0, #1
 8014e8a:	2a30      	cmp	r2, #48	; 0x30
 8014e8c:	d0f8      	beq.n	8014e80 <_strtod_l+0x1f0>
 8014e8e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014e92:	2b08      	cmp	r3, #8
 8014e94:	f200 84d9 	bhi.w	801584a <_strtod_l+0xbba>
 8014e98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014e9a:	9005      	str	r0, [sp, #20]
 8014e9c:	2000      	movs	r0, #0
 8014e9e:	9308      	str	r3, [sp, #32]
 8014ea0:	4605      	mov	r5, r0
 8014ea2:	3a30      	subs	r2, #48	; 0x30
 8014ea4:	f100 0301 	add.w	r3, r0, #1
 8014ea8:	d014      	beq.n	8014ed4 <_strtod_l+0x244>
 8014eaa:	9905      	ldr	r1, [sp, #20]
 8014eac:	4419      	add	r1, r3
 8014eae:	9105      	str	r1, [sp, #20]
 8014eb0:	462b      	mov	r3, r5
 8014eb2:	eb00 0e05 	add.w	lr, r0, r5
 8014eb6:	210a      	movs	r1, #10
 8014eb8:	4573      	cmp	r3, lr
 8014eba:	d113      	bne.n	8014ee4 <_strtod_l+0x254>
 8014ebc:	182b      	adds	r3, r5, r0
 8014ebe:	2b08      	cmp	r3, #8
 8014ec0:	f105 0501 	add.w	r5, r5, #1
 8014ec4:	4405      	add	r5, r0
 8014ec6:	dc1c      	bgt.n	8014f02 <_strtod_l+0x272>
 8014ec8:	9907      	ldr	r1, [sp, #28]
 8014eca:	230a      	movs	r3, #10
 8014ecc:	fb03 2301 	mla	r3, r3, r1, r2
 8014ed0:	9307      	str	r3, [sp, #28]
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014ed6:	1c51      	adds	r1, r2, #1
 8014ed8:	9117      	str	r1, [sp, #92]	; 0x5c
 8014eda:	7852      	ldrb	r2, [r2, #1]
 8014edc:	4618      	mov	r0, r3
 8014ede:	e7c9      	b.n	8014e74 <_strtod_l+0x1e4>
 8014ee0:	4638      	mov	r0, r7
 8014ee2:	e7d2      	b.n	8014e8a <_strtod_l+0x1fa>
 8014ee4:	2b08      	cmp	r3, #8
 8014ee6:	dc04      	bgt.n	8014ef2 <_strtod_l+0x262>
 8014ee8:	9e07      	ldr	r6, [sp, #28]
 8014eea:	434e      	muls	r6, r1
 8014eec:	9607      	str	r6, [sp, #28]
 8014eee:	3301      	adds	r3, #1
 8014ef0:	e7e2      	b.n	8014eb8 <_strtod_l+0x228>
 8014ef2:	f103 0c01 	add.w	ip, r3, #1
 8014ef6:	f1bc 0f10 	cmp.w	ip, #16
 8014efa:	bfd8      	it	le
 8014efc:	fb01 f909 	mulle.w	r9, r1, r9
 8014f00:	e7f5      	b.n	8014eee <_strtod_l+0x25e>
 8014f02:	2d10      	cmp	r5, #16
 8014f04:	bfdc      	itt	le
 8014f06:	230a      	movle	r3, #10
 8014f08:	fb03 2909 	mlale	r9, r3, r9, r2
 8014f0c:	e7e1      	b.n	8014ed2 <_strtod_l+0x242>
 8014f0e:	2300      	movs	r3, #0
 8014f10:	9305      	str	r3, [sp, #20]
 8014f12:	2301      	movs	r3, #1
 8014f14:	e77c      	b.n	8014e10 <_strtod_l+0x180>
 8014f16:	f04f 0c00 	mov.w	ip, #0
 8014f1a:	f108 0202 	add.w	r2, r8, #2
 8014f1e:	9217      	str	r2, [sp, #92]	; 0x5c
 8014f20:	f898 2002 	ldrb.w	r2, [r8, #2]
 8014f24:	e785      	b.n	8014e32 <_strtod_l+0x1a2>
 8014f26:	f04f 0c01 	mov.w	ip, #1
 8014f2a:	e7f6      	b.n	8014f1a <_strtod_l+0x28a>
 8014f2c:	0801a4f0 	.word	0x0801a4f0
 8014f30:	0801a3a4 	.word	0x0801a3a4
 8014f34:	7ff00000 	.word	0x7ff00000
 8014f38:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014f3a:	1c51      	adds	r1, r2, #1
 8014f3c:	9117      	str	r1, [sp, #92]	; 0x5c
 8014f3e:	7852      	ldrb	r2, [r2, #1]
 8014f40:	2a30      	cmp	r2, #48	; 0x30
 8014f42:	d0f9      	beq.n	8014f38 <_strtod_l+0x2a8>
 8014f44:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8014f48:	2908      	cmp	r1, #8
 8014f4a:	f63f af79 	bhi.w	8014e40 <_strtod_l+0x1b0>
 8014f4e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014f52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014f54:	9206      	str	r2, [sp, #24]
 8014f56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014f58:	1c51      	adds	r1, r2, #1
 8014f5a:	9117      	str	r1, [sp, #92]	; 0x5c
 8014f5c:	7852      	ldrb	r2, [r2, #1]
 8014f5e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8014f62:	2e09      	cmp	r6, #9
 8014f64:	d937      	bls.n	8014fd6 <_strtod_l+0x346>
 8014f66:	9e06      	ldr	r6, [sp, #24]
 8014f68:	1b89      	subs	r1, r1, r6
 8014f6a:	2908      	cmp	r1, #8
 8014f6c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8014f70:	dc02      	bgt.n	8014f78 <_strtod_l+0x2e8>
 8014f72:	4576      	cmp	r6, lr
 8014f74:	bfa8      	it	ge
 8014f76:	4676      	movge	r6, lr
 8014f78:	f1bc 0f00 	cmp.w	ip, #0
 8014f7c:	d000      	beq.n	8014f80 <_strtod_l+0x2f0>
 8014f7e:	4276      	negs	r6, r6
 8014f80:	2d00      	cmp	r5, #0
 8014f82:	d14d      	bne.n	8015020 <_strtod_l+0x390>
 8014f84:	9904      	ldr	r1, [sp, #16]
 8014f86:	4301      	orrs	r1, r0
 8014f88:	f47f aec6 	bne.w	8014d18 <_strtod_l+0x88>
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	f47f aee1 	bne.w	8014d54 <_strtod_l+0xc4>
 8014f92:	2a69      	cmp	r2, #105	; 0x69
 8014f94:	d027      	beq.n	8014fe6 <_strtod_l+0x356>
 8014f96:	dc24      	bgt.n	8014fe2 <_strtod_l+0x352>
 8014f98:	2a49      	cmp	r2, #73	; 0x49
 8014f9a:	d024      	beq.n	8014fe6 <_strtod_l+0x356>
 8014f9c:	2a4e      	cmp	r2, #78	; 0x4e
 8014f9e:	f47f aed9 	bne.w	8014d54 <_strtod_l+0xc4>
 8014fa2:	499f      	ldr	r1, [pc, #636]	; (8015220 <_strtod_l+0x590>)
 8014fa4:	a817      	add	r0, sp, #92	; 0x5c
 8014fa6:	f001 ff6b 	bl	8016e80 <__match>
 8014faa:	2800      	cmp	r0, #0
 8014fac:	f43f aed2 	beq.w	8014d54 <_strtod_l+0xc4>
 8014fb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014fb2:	781b      	ldrb	r3, [r3, #0]
 8014fb4:	2b28      	cmp	r3, #40	; 0x28
 8014fb6:	d12d      	bne.n	8015014 <_strtod_l+0x384>
 8014fb8:	499a      	ldr	r1, [pc, #616]	; (8015224 <_strtod_l+0x594>)
 8014fba:	aa1a      	add	r2, sp, #104	; 0x68
 8014fbc:	a817      	add	r0, sp, #92	; 0x5c
 8014fbe:	f001 ff73 	bl	8016ea8 <__hexnan>
 8014fc2:	2805      	cmp	r0, #5
 8014fc4:	d126      	bne.n	8015014 <_strtod_l+0x384>
 8014fc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014fc8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8014fcc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014fd0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014fd4:	e6a0      	b.n	8014d18 <_strtod_l+0x88>
 8014fd6:	210a      	movs	r1, #10
 8014fd8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8014fdc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8014fe0:	e7b9      	b.n	8014f56 <_strtod_l+0x2c6>
 8014fe2:	2a6e      	cmp	r2, #110	; 0x6e
 8014fe4:	e7db      	b.n	8014f9e <_strtod_l+0x30e>
 8014fe6:	4990      	ldr	r1, [pc, #576]	; (8015228 <_strtod_l+0x598>)
 8014fe8:	a817      	add	r0, sp, #92	; 0x5c
 8014fea:	f001 ff49 	bl	8016e80 <__match>
 8014fee:	2800      	cmp	r0, #0
 8014ff0:	f43f aeb0 	beq.w	8014d54 <_strtod_l+0xc4>
 8014ff4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014ff6:	498d      	ldr	r1, [pc, #564]	; (801522c <_strtod_l+0x59c>)
 8014ff8:	3b01      	subs	r3, #1
 8014ffa:	a817      	add	r0, sp, #92	; 0x5c
 8014ffc:	9317      	str	r3, [sp, #92]	; 0x5c
 8014ffe:	f001 ff3f 	bl	8016e80 <__match>
 8015002:	b910      	cbnz	r0, 801500a <_strtod_l+0x37a>
 8015004:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015006:	3301      	adds	r3, #1
 8015008:	9317      	str	r3, [sp, #92]	; 0x5c
 801500a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801523c <_strtod_l+0x5ac>
 801500e:	f04f 0a00 	mov.w	sl, #0
 8015012:	e681      	b.n	8014d18 <_strtod_l+0x88>
 8015014:	4886      	ldr	r0, [pc, #536]	; (8015230 <_strtod_l+0x5a0>)
 8015016:	f002 feb3 	bl	8017d80 <nan>
 801501a:	ec5b ab10 	vmov	sl, fp, d0
 801501e:	e67b      	b.n	8014d18 <_strtod_l+0x88>
 8015020:	9b05      	ldr	r3, [sp, #20]
 8015022:	9807      	ldr	r0, [sp, #28]
 8015024:	1af3      	subs	r3, r6, r3
 8015026:	2f00      	cmp	r7, #0
 8015028:	bf08      	it	eq
 801502a:	462f      	moveq	r7, r5
 801502c:	2d10      	cmp	r5, #16
 801502e:	9306      	str	r3, [sp, #24]
 8015030:	46a8      	mov	r8, r5
 8015032:	bfa8      	it	ge
 8015034:	f04f 0810 	movge.w	r8, #16
 8015038:	f7eb fa74 	bl	8000524 <__aeabi_ui2d>
 801503c:	2d09      	cmp	r5, #9
 801503e:	4682      	mov	sl, r0
 8015040:	468b      	mov	fp, r1
 8015042:	dd13      	ble.n	801506c <_strtod_l+0x3dc>
 8015044:	4b7b      	ldr	r3, [pc, #492]	; (8015234 <_strtod_l+0x5a4>)
 8015046:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801504a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801504e:	f7eb fae3 	bl	8000618 <__aeabi_dmul>
 8015052:	4682      	mov	sl, r0
 8015054:	4648      	mov	r0, r9
 8015056:	468b      	mov	fp, r1
 8015058:	f7eb fa64 	bl	8000524 <__aeabi_ui2d>
 801505c:	4602      	mov	r2, r0
 801505e:	460b      	mov	r3, r1
 8015060:	4650      	mov	r0, sl
 8015062:	4659      	mov	r1, fp
 8015064:	f7eb f922 	bl	80002ac <__adddf3>
 8015068:	4682      	mov	sl, r0
 801506a:	468b      	mov	fp, r1
 801506c:	2d0f      	cmp	r5, #15
 801506e:	dc38      	bgt.n	80150e2 <_strtod_l+0x452>
 8015070:	9b06      	ldr	r3, [sp, #24]
 8015072:	2b00      	cmp	r3, #0
 8015074:	f43f ae50 	beq.w	8014d18 <_strtod_l+0x88>
 8015078:	dd24      	ble.n	80150c4 <_strtod_l+0x434>
 801507a:	2b16      	cmp	r3, #22
 801507c:	dc0b      	bgt.n	8015096 <_strtod_l+0x406>
 801507e:	496d      	ldr	r1, [pc, #436]	; (8015234 <_strtod_l+0x5a4>)
 8015080:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015084:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015088:	4652      	mov	r2, sl
 801508a:	465b      	mov	r3, fp
 801508c:	f7eb fac4 	bl	8000618 <__aeabi_dmul>
 8015090:	4682      	mov	sl, r0
 8015092:	468b      	mov	fp, r1
 8015094:	e640      	b.n	8014d18 <_strtod_l+0x88>
 8015096:	9a06      	ldr	r2, [sp, #24]
 8015098:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801509c:	4293      	cmp	r3, r2
 801509e:	db20      	blt.n	80150e2 <_strtod_l+0x452>
 80150a0:	4c64      	ldr	r4, [pc, #400]	; (8015234 <_strtod_l+0x5a4>)
 80150a2:	f1c5 050f 	rsb	r5, r5, #15
 80150a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80150aa:	4652      	mov	r2, sl
 80150ac:	465b      	mov	r3, fp
 80150ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80150b2:	f7eb fab1 	bl	8000618 <__aeabi_dmul>
 80150b6:	9b06      	ldr	r3, [sp, #24]
 80150b8:	1b5d      	subs	r5, r3, r5
 80150ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80150be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80150c2:	e7e3      	b.n	801508c <_strtod_l+0x3fc>
 80150c4:	9b06      	ldr	r3, [sp, #24]
 80150c6:	3316      	adds	r3, #22
 80150c8:	db0b      	blt.n	80150e2 <_strtod_l+0x452>
 80150ca:	9b05      	ldr	r3, [sp, #20]
 80150cc:	1b9e      	subs	r6, r3, r6
 80150ce:	4b59      	ldr	r3, [pc, #356]	; (8015234 <_strtod_l+0x5a4>)
 80150d0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80150d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80150d8:	4650      	mov	r0, sl
 80150da:	4659      	mov	r1, fp
 80150dc:	f7eb fbc6 	bl	800086c <__aeabi_ddiv>
 80150e0:	e7d6      	b.n	8015090 <_strtod_l+0x400>
 80150e2:	9b06      	ldr	r3, [sp, #24]
 80150e4:	eba5 0808 	sub.w	r8, r5, r8
 80150e8:	4498      	add	r8, r3
 80150ea:	f1b8 0f00 	cmp.w	r8, #0
 80150ee:	dd74      	ble.n	80151da <_strtod_l+0x54a>
 80150f0:	f018 030f 	ands.w	r3, r8, #15
 80150f4:	d00a      	beq.n	801510c <_strtod_l+0x47c>
 80150f6:	494f      	ldr	r1, [pc, #316]	; (8015234 <_strtod_l+0x5a4>)
 80150f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80150fc:	4652      	mov	r2, sl
 80150fe:	465b      	mov	r3, fp
 8015100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015104:	f7eb fa88 	bl	8000618 <__aeabi_dmul>
 8015108:	4682      	mov	sl, r0
 801510a:	468b      	mov	fp, r1
 801510c:	f038 080f 	bics.w	r8, r8, #15
 8015110:	d04f      	beq.n	80151b2 <_strtod_l+0x522>
 8015112:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8015116:	dd22      	ble.n	801515e <_strtod_l+0x4ce>
 8015118:	2500      	movs	r5, #0
 801511a:	462e      	mov	r6, r5
 801511c:	9507      	str	r5, [sp, #28]
 801511e:	9505      	str	r5, [sp, #20]
 8015120:	2322      	movs	r3, #34	; 0x22
 8015122:	f8df b118 	ldr.w	fp, [pc, #280]	; 801523c <_strtod_l+0x5ac>
 8015126:	6023      	str	r3, [r4, #0]
 8015128:	f04f 0a00 	mov.w	sl, #0
 801512c:	9b07      	ldr	r3, [sp, #28]
 801512e:	2b00      	cmp	r3, #0
 8015130:	f43f adf2 	beq.w	8014d18 <_strtod_l+0x88>
 8015134:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015136:	4620      	mov	r0, r4
 8015138:	f001 ffce 	bl	80170d8 <_Bfree>
 801513c:	9905      	ldr	r1, [sp, #20]
 801513e:	4620      	mov	r0, r4
 8015140:	f001 ffca 	bl	80170d8 <_Bfree>
 8015144:	4631      	mov	r1, r6
 8015146:	4620      	mov	r0, r4
 8015148:	f001 ffc6 	bl	80170d8 <_Bfree>
 801514c:	9907      	ldr	r1, [sp, #28]
 801514e:	4620      	mov	r0, r4
 8015150:	f001 ffc2 	bl	80170d8 <_Bfree>
 8015154:	4629      	mov	r1, r5
 8015156:	4620      	mov	r0, r4
 8015158:	f001 ffbe 	bl	80170d8 <_Bfree>
 801515c:	e5dc      	b.n	8014d18 <_strtod_l+0x88>
 801515e:	4b36      	ldr	r3, [pc, #216]	; (8015238 <_strtod_l+0x5a8>)
 8015160:	9304      	str	r3, [sp, #16]
 8015162:	2300      	movs	r3, #0
 8015164:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015168:	4650      	mov	r0, sl
 801516a:	4659      	mov	r1, fp
 801516c:	4699      	mov	r9, r3
 801516e:	f1b8 0f01 	cmp.w	r8, #1
 8015172:	dc21      	bgt.n	80151b8 <_strtod_l+0x528>
 8015174:	b10b      	cbz	r3, 801517a <_strtod_l+0x4ea>
 8015176:	4682      	mov	sl, r0
 8015178:	468b      	mov	fp, r1
 801517a:	4b2f      	ldr	r3, [pc, #188]	; (8015238 <_strtod_l+0x5a8>)
 801517c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015180:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8015184:	4652      	mov	r2, sl
 8015186:	465b      	mov	r3, fp
 8015188:	e9d9 0100 	ldrd	r0, r1, [r9]
 801518c:	f7eb fa44 	bl	8000618 <__aeabi_dmul>
 8015190:	4b2a      	ldr	r3, [pc, #168]	; (801523c <_strtod_l+0x5ac>)
 8015192:	460a      	mov	r2, r1
 8015194:	400b      	ands	r3, r1
 8015196:	492a      	ldr	r1, [pc, #168]	; (8015240 <_strtod_l+0x5b0>)
 8015198:	428b      	cmp	r3, r1
 801519a:	4682      	mov	sl, r0
 801519c:	d8bc      	bhi.n	8015118 <_strtod_l+0x488>
 801519e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80151a2:	428b      	cmp	r3, r1
 80151a4:	bf86      	itte	hi
 80151a6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8015244 <_strtod_l+0x5b4>
 80151aa:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80151ae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80151b2:	2300      	movs	r3, #0
 80151b4:	9304      	str	r3, [sp, #16]
 80151b6:	e084      	b.n	80152c2 <_strtod_l+0x632>
 80151b8:	f018 0f01 	tst.w	r8, #1
 80151bc:	d005      	beq.n	80151ca <_strtod_l+0x53a>
 80151be:	9b04      	ldr	r3, [sp, #16]
 80151c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151c4:	f7eb fa28 	bl	8000618 <__aeabi_dmul>
 80151c8:	2301      	movs	r3, #1
 80151ca:	9a04      	ldr	r2, [sp, #16]
 80151cc:	3208      	adds	r2, #8
 80151ce:	f109 0901 	add.w	r9, r9, #1
 80151d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80151d6:	9204      	str	r2, [sp, #16]
 80151d8:	e7c9      	b.n	801516e <_strtod_l+0x4de>
 80151da:	d0ea      	beq.n	80151b2 <_strtod_l+0x522>
 80151dc:	f1c8 0800 	rsb	r8, r8, #0
 80151e0:	f018 020f 	ands.w	r2, r8, #15
 80151e4:	d00a      	beq.n	80151fc <_strtod_l+0x56c>
 80151e6:	4b13      	ldr	r3, [pc, #76]	; (8015234 <_strtod_l+0x5a4>)
 80151e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80151ec:	4650      	mov	r0, sl
 80151ee:	4659      	mov	r1, fp
 80151f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151f4:	f7eb fb3a 	bl	800086c <__aeabi_ddiv>
 80151f8:	4682      	mov	sl, r0
 80151fa:	468b      	mov	fp, r1
 80151fc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015200:	d0d7      	beq.n	80151b2 <_strtod_l+0x522>
 8015202:	f1b8 0f1f 	cmp.w	r8, #31
 8015206:	dd1f      	ble.n	8015248 <_strtod_l+0x5b8>
 8015208:	2500      	movs	r5, #0
 801520a:	462e      	mov	r6, r5
 801520c:	9507      	str	r5, [sp, #28]
 801520e:	9505      	str	r5, [sp, #20]
 8015210:	2322      	movs	r3, #34	; 0x22
 8015212:	f04f 0a00 	mov.w	sl, #0
 8015216:	f04f 0b00 	mov.w	fp, #0
 801521a:	6023      	str	r3, [r4, #0]
 801521c:	e786      	b.n	801512c <_strtod_l+0x49c>
 801521e:	bf00      	nop
 8015220:	0801a37d 	.word	0x0801a37d
 8015224:	0801a3b8 	.word	0x0801a3b8
 8015228:	0801a375 	.word	0x0801a375
 801522c:	0801a3fb 	.word	0x0801a3fb
 8015230:	0801a6a8 	.word	0x0801a6a8
 8015234:	0801a588 	.word	0x0801a588
 8015238:	0801a560 	.word	0x0801a560
 801523c:	7ff00000 	.word	0x7ff00000
 8015240:	7ca00000 	.word	0x7ca00000
 8015244:	7fefffff 	.word	0x7fefffff
 8015248:	f018 0310 	ands.w	r3, r8, #16
 801524c:	bf18      	it	ne
 801524e:	236a      	movne	r3, #106	; 0x6a
 8015250:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8015600 <_strtod_l+0x970>
 8015254:	9304      	str	r3, [sp, #16]
 8015256:	4650      	mov	r0, sl
 8015258:	4659      	mov	r1, fp
 801525a:	2300      	movs	r3, #0
 801525c:	f018 0f01 	tst.w	r8, #1
 8015260:	d004      	beq.n	801526c <_strtod_l+0x5dc>
 8015262:	e9d9 2300 	ldrd	r2, r3, [r9]
 8015266:	f7eb f9d7 	bl	8000618 <__aeabi_dmul>
 801526a:	2301      	movs	r3, #1
 801526c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8015270:	f109 0908 	add.w	r9, r9, #8
 8015274:	d1f2      	bne.n	801525c <_strtod_l+0x5cc>
 8015276:	b10b      	cbz	r3, 801527c <_strtod_l+0x5ec>
 8015278:	4682      	mov	sl, r0
 801527a:	468b      	mov	fp, r1
 801527c:	9b04      	ldr	r3, [sp, #16]
 801527e:	b1c3      	cbz	r3, 80152b2 <_strtod_l+0x622>
 8015280:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8015284:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015288:	2b00      	cmp	r3, #0
 801528a:	4659      	mov	r1, fp
 801528c:	dd11      	ble.n	80152b2 <_strtod_l+0x622>
 801528e:	2b1f      	cmp	r3, #31
 8015290:	f340 8124 	ble.w	80154dc <_strtod_l+0x84c>
 8015294:	2b34      	cmp	r3, #52	; 0x34
 8015296:	bfde      	ittt	le
 8015298:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801529c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80152a0:	fa03 f202 	lslle.w	r2, r3, r2
 80152a4:	f04f 0a00 	mov.w	sl, #0
 80152a8:	bfcc      	ite	gt
 80152aa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80152ae:	ea02 0b01 	andle.w	fp, r2, r1
 80152b2:	2200      	movs	r2, #0
 80152b4:	2300      	movs	r3, #0
 80152b6:	4650      	mov	r0, sl
 80152b8:	4659      	mov	r1, fp
 80152ba:	f7eb fc15 	bl	8000ae8 <__aeabi_dcmpeq>
 80152be:	2800      	cmp	r0, #0
 80152c0:	d1a2      	bne.n	8015208 <_strtod_l+0x578>
 80152c2:	9b07      	ldr	r3, [sp, #28]
 80152c4:	9300      	str	r3, [sp, #0]
 80152c6:	9908      	ldr	r1, [sp, #32]
 80152c8:	462b      	mov	r3, r5
 80152ca:	463a      	mov	r2, r7
 80152cc:	4620      	mov	r0, r4
 80152ce:	f001 ff6b 	bl	80171a8 <__s2b>
 80152d2:	9007      	str	r0, [sp, #28]
 80152d4:	2800      	cmp	r0, #0
 80152d6:	f43f af1f 	beq.w	8015118 <_strtod_l+0x488>
 80152da:	9b05      	ldr	r3, [sp, #20]
 80152dc:	1b9e      	subs	r6, r3, r6
 80152de:	9b06      	ldr	r3, [sp, #24]
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	bfb4      	ite	lt
 80152e4:	4633      	movlt	r3, r6
 80152e6:	2300      	movge	r3, #0
 80152e8:	930c      	str	r3, [sp, #48]	; 0x30
 80152ea:	9b06      	ldr	r3, [sp, #24]
 80152ec:	2500      	movs	r5, #0
 80152ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80152f2:	9312      	str	r3, [sp, #72]	; 0x48
 80152f4:	462e      	mov	r6, r5
 80152f6:	9b07      	ldr	r3, [sp, #28]
 80152f8:	4620      	mov	r0, r4
 80152fa:	6859      	ldr	r1, [r3, #4]
 80152fc:	f001 feac 	bl	8017058 <_Balloc>
 8015300:	9005      	str	r0, [sp, #20]
 8015302:	2800      	cmp	r0, #0
 8015304:	f43f af0c 	beq.w	8015120 <_strtod_l+0x490>
 8015308:	9b07      	ldr	r3, [sp, #28]
 801530a:	691a      	ldr	r2, [r3, #16]
 801530c:	3202      	adds	r2, #2
 801530e:	f103 010c 	add.w	r1, r3, #12
 8015312:	0092      	lsls	r2, r2, #2
 8015314:	300c      	adds	r0, #12
 8015316:	f7fe fe6c 	bl	8013ff2 <memcpy>
 801531a:	ec4b ab10 	vmov	d0, sl, fp
 801531e:	aa1a      	add	r2, sp, #104	; 0x68
 8015320:	a919      	add	r1, sp, #100	; 0x64
 8015322:	4620      	mov	r0, r4
 8015324:	f002 fa86 	bl	8017834 <__d2b>
 8015328:	ec4b ab18 	vmov	d8, sl, fp
 801532c:	9018      	str	r0, [sp, #96]	; 0x60
 801532e:	2800      	cmp	r0, #0
 8015330:	f43f aef6 	beq.w	8015120 <_strtod_l+0x490>
 8015334:	2101      	movs	r1, #1
 8015336:	4620      	mov	r0, r4
 8015338:	f001 ffd0 	bl	80172dc <__i2b>
 801533c:	4606      	mov	r6, r0
 801533e:	2800      	cmp	r0, #0
 8015340:	f43f aeee 	beq.w	8015120 <_strtod_l+0x490>
 8015344:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015346:	9904      	ldr	r1, [sp, #16]
 8015348:	2b00      	cmp	r3, #0
 801534a:	bfab      	itete	ge
 801534c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801534e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8015350:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8015352:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8015356:	bfac      	ite	ge
 8015358:	eb03 0902 	addge.w	r9, r3, r2
 801535c:	1ad7      	sublt	r7, r2, r3
 801535e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015360:	eba3 0801 	sub.w	r8, r3, r1
 8015364:	4490      	add	r8, r2
 8015366:	4ba1      	ldr	r3, [pc, #644]	; (80155ec <_strtod_l+0x95c>)
 8015368:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801536c:	4598      	cmp	r8, r3
 801536e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015372:	f280 80c7 	bge.w	8015504 <_strtod_l+0x874>
 8015376:	eba3 0308 	sub.w	r3, r3, r8
 801537a:	2b1f      	cmp	r3, #31
 801537c:	eba2 0203 	sub.w	r2, r2, r3
 8015380:	f04f 0101 	mov.w	r1, #1
 8015384:	f300 80b1 	bgt.w	80154ea <_strtod_l+0x85a>
 8015388:	fa01 f303 	lsl.w	r3, r1, r3
 801538c:	930d      	str	r3, [sp, #52]	; 0x34
 801538e:	2300      	movs	r3, #0
 8015390:	9308      	str	r3, [sp, #32]
 8015392:	eb09 0802 	add.w	r8, r9, r2
 8015396:	9b04      	ldr	r3, [sp, #16]
 8015398:	45c1      	cmp	r9, r8
 801539a:	4417      	add	r7, r2
 801539c:	441f      	add	r7, r3
 801539e:	464b      	mov	r3, r9
 80153a0:	bfa8      	it	ge
 80153a2:	4643      	movge	r3, r8
 80153a4:	42bb      	cmp	r3, r7
 80153a6:	bfa8      	it	ge
 80153a8:	463b      	movge	r3, r7
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	bfc2      	ittt	gt
 80153ae:	eba8 0803 	subgt.w	r8, r8, r3
 80153b2:	1aff      	subgt	r7, r7, r3
 80153b4:	eba9 0903 	subgt.w	r9, r9, r3
 80153b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	dd17      	ble.n	80153ee <_strtod_l+0x75e>
 80153be:	4631      	mov	r1, r6
 80153c0:	461a      	mov	r2, r3
 80153c2:	4620      	mov	r0, r4
 80153c4:	f002 f84a 	bl	801745c <__pow5mult>
 80153c8:	4606      	mov	r6, r0
 80153ca:	2800      	cmp	r0, #0
 80153cc:	f43f aea8 	beq.w	8015120 <_strtod_l+0x490>
 80153d0:	4601      	mov	r1, r0
 80153d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80153d4:	4620      	mov	r0, r4
 80153d6:	f001 ff97 	bl	8017308 <__multiply>
 80153da:	900b      	str	r0, [sp, #44]	; 0x2c
 80153dc:	2800      	cmp	r0, #0
 80153de:	f43f ae9f 	beq.w	8015120 <_strtod_l+0x490>
 80153e2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80153e4:	4620      	mov	r0, r4
 80153e6:	f001 fe77 	bl	80170d8 <_Bfree>
 80153ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153ec:	9318      	str	r3, [sp, #96]	; 0x60
 80153ee:	f1b8 0f00 	cmp.w	r8, #0
 80153f2:	f300 808c 	bgt.w	801550e <_strtod_l+0x87e>
 80153f6:	9b06      	ldr	r3, [sp, #24]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	dd08      	ble.n	801540e <_strtod_l+0x77e>
 80153fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80153fe:	9905      	ldr	r1, [sp, #20]
 8015400:	4620      	mov	r0, r4
 8015402:	f002 f82b 	bl	801745c <__pow5mult>
 8015406:	9005      	str	r0, [sp, #20]
 8015408:	2800      	cmp	r0, #0
 801540a:	f43f ae89 	beq.w	8015120 <_strtod_l+0x490>
 801540e:	2f00      	cmp	r7, #0
 8015410:	dd08      	ble.n	8015424 <_strtod_l+0x794>
 8015412:	9905      	ldr	r1, [sp, #20]
 8015414:	463a      	mov	r2, r7
 8015416:	4620      	mov	r0, r4
 8015418:	f002 f87a 	bl	8017510 <__lshift>
 801541c:	9005      	str	r0, [sp, #20]
 801541e:	2800      	cmp	r0, #0
 8015420:	f43f ae7e 	beq.w	8015120 <_strtod_l+0x490>
 8015424:	f1b9 0f00 	cmp.w	r9, #0
 8015428:	dd08      	ble.n	801543c <_strtod_l+0x7ac>
 801542a:	4631      	mov	r1, r6
 801542c:	464a      	mov	r2, r9
 801542e:	4620      	mov	r0, r4
 8015430:	f002 f86e 	bl	8017510 <__lshift>
 8015434:	4606      	mov	r6, r0
 8015436:	2800      	cmp	r0, #0
 8015438:	f43f ae72 	beq.w	8015120 <_strtod_l+0x490>
 801543c:	9a05      	ldr	r2, [sp, #20]
 801543e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015440:	4620      	mov	r0, r4
 8015442:	f002 f8f1 	bl	8017628 <__mdiff>
 8015446:	4605      	mov	r5, r0
 8015448:	2800      	cmp	r0, #0
 801544a:	f43f ae69 	beq.w	8015120 <_strtod_l+0x490>
 801544e:	68c3      	ldr	r3, [r0, #12]
 8015450:	930b      	str	r3, [sp, #44]	; 0x2c
 8015452:	2300      	movs	r3, #0
 8015454:	60c3      	str	r3, [r0, #12]
 8015456:	4631      	mov	r1, r6
 8015458:	f002 f8ca 	bl	80175f0 <__mcmp>
 801545c:	2800      	cmp	r0, #0
 801545e:	da60      	bge.n	8015522 <_strtod_l+0x892>
 8015460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015462:	ea53 030a 	orrs.w	r3, r3, sl
 8015466:	f040 8082 	bne.w	801556e <_strtod_l+0x8de>
 801546a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801546e:	2b00      	cmp	r3, #0
 8015470:	d17d      	bne.n	801556e <_strtod_l+0x8de>
 8015472:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015476:	0d1b      	lsrs	r3, r3, #20
 8015478:	051b      	lsls	r3, r3, #20
 801547a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801547e:	d976      	bls.n	801556e <_strtod_l+0x8de>
 8015480:	696b      	ldr	r3, [r5, #20]
 8015482:	b913      	cbnz	r3, 801548a <_strtod_l+0x7fa>
 8015484:	692b      	ldr	r3, [r5, #16]
 8015486:	2b01      	cmp	r3, #1
 8015488:	dd71      	ble.n	801556e <_strtod_l+0x8de>
 801548a:	4629      	mov	r1, r5
 801548c:	2201      	movs	r2, #1
 801548e:	4620      	mov	r0, r4
 8015490:	f002 f83e 	bl	8017510 <__lshift>
 8015494:	4631      	mov	r1, r6
 8015496:	4605      	mov	r5, r0
 8015498:	f002 f8aa 	bl	80175f0 <__mcmp>
 801549c:	2800      	cmp	r0, #0
 801549e:	dd66      	ble.n	801556e <_strtod_l+0x8de>
 80154a0:	9904      	ldr	r1, [sp, #16]
 80154a2:	4a53      	ldr	r2, [pc, #332]	; (80155f0 <_strtod_l+0x960>)
 80154a4:	465b      	mov	r3, fp
 80154a6:	2900      	cmp	r1, #0
 80154a8:	f000 8081 	beq.w	80155ae <_strtod_l+0x91e>
 80154ac:	ea02 010b 	and.w	r1, r2, fp
 80154b0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80154b4:	dc7b      	bgt.n	80155ae <_strtod_l+0x91e>
 80154b6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80154ba:	f77f aea9 	ble.w	8015210 <_strtod_l+0x580>
 80154be:	4b4d      	ldr	r3, [pc, #308]	; (80155f4 <_strtod_l+0x964>)
 80154c0:	4650      	mov	r0, sl
 80154c2:	4659      	mov	r1, fp
 80154c4:	2200      	movs	r2, #0
 80154c6:	f7eb f8a7 	bl	8000618 <__aeabi_dmul>
 80154ca:	460b      	mov	r3, r1
 80154cc:	4303      	orrs	r3, r0
 80154ce:	bf08      	it	eq
 80154d0:	2322      	moveq	r3, #34	; 0x22
 80154d2:	4682      	mov	sl, r0
 80154d4:	468b      	mov	fp, r1
 80154d6:	bf08      	it	eq
 80154d8:	6023      	streq	r3, [r4, #0]
 80154da:	e62b      	b.n	8015134 <_strtod_l+0x4a4>
 80154dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80154e0:	fa02 f303 	lsl.w	r3, r2, r3
 80154e4:	ea03 0a0a 	and.w	sl, r3, sl
 80154e8:	e6e3      	b.n	80152b2 <_strtod_l+0x622>
 80154ea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80154ee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80154f2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80154f6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80154fa:	fa01 f308 	lsl.w	r3, r1, r8
 80154fe:	9308      	str	r3, [sp, #32]
 8015500:	910d      	str	r1, [sp, #52]	; 0x34
 8015502:	e746      	b.n	8015392 <_strtod_l+0x702>
 8015504:	2300      	movs	r3, #0
 8015506:	9308      	str	r3, [sp, #32]
 8015508:	2301      	movs	r3, #1
 801550a:	930d      	str	r3, [sp, #52]	; 0x34
 801550c:	e741      	b.n	8015392 <_strtod_l+0x702>
 801550e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015510:	4642      	mov	r2, r8
 8015512:	4620      	mov	r0, r4
 8015514:	f001 fffc 	bl	8017510 <__lshift>
 8015518:	9018      	str	r0, [sp, #96]	; 0x60
 801551a:	2800      	cmp	r0, #0
 801551c:	f47f af6b 	bne.w	80153f6 <_strtod_l+0x766>
 8015520:	e5fe      	b.n	8015120 <_strtod_l+0x490>
 8015522:	465f      	mov	r7, fp
 8015524:	d16e      	bne.n	8015604 <_strtod_l+0x974>
 8015526:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015528:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801552c:	b342      	cbz	r2, 8015580 <_strtod_l+0x8f0>
 801552e:	4a32      	ldr	r2, [pc, #200]	; (80155f8 <_strtod_l+0x968>)
 8015530:	4293      	cmp	r3, r2
 8015532:	d128      	bne.n	8015586 <_strtod_l+0x8f6>
 8015534:	9b04      	ldr	r3, [sp, #16]
 8015536:	4651      	mov	r1, sl
 8015538:	b1eb      	cbz	r3, 8015576 <_strtod_l+0x8e6>
 801553a:	4b2d      	ldr	r3, [pc, #180]	; (80155f0 <_strtod_l+0x960>)
 801553c:	403b      	ands	r3, r7
 801553e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015542:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015546:	d819      	bhi.n	801557c <_strtod_l+0x8ec>
 8015548:	0d1b      	lsrs	r3, r3, #20
 801554a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801554e:	fa02 f303 	lsl.w	r3, r2, r3
 8015552:	4299      	cmp	r1, r3
 8015554:	d117      	bne.n	8015586 <_strtod_l+0x8f6>
 8015556:	4b29      	ldr	r3, [pc, #164]	; (80155fc <_strtod_l+0x96c>)
 8015558:	429f      	cmp	r7, r3
 801555a:	d102      	bne.n	8015562 <_strtod_l+0x8d2>
 801555c:	3101      	adds	r1, #1
 801555e:	f43f addf 	beq.w	8015120 <_strtod_l+0x490>
 8015562:	4b23      	ldr	r3, [pc, #140]	; (80155f0 <_strtod_l+0x960>)
 8015564:	403b      	ands	r3, r7
 8015566:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801556a:	f04f 0a00 	mov.w	sl, #0
 801556e:	9b04      	ldr	r3, [sp, #16]
 8015570:	2b00      	cmp	r3, #0
 8015572:	d1a4      	bne.n	80154be <_strtod_l+0x82e>
 8015574:	e5de      	b.n	8015134 <_strtod_l+0x4a4>
 8015576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801557a:	e7ea      	b.n	8015552 <_strtod_l+0x8c2>
 801557c:	4613      	mov	r3, r2
 801557e:	e7e8      	b.n	8015552 <_strtod_l+0x8c2>
 8015580:	ea53 030a 	orrs.w	r3, r3, sl
 8015584:	d08c      	beq.n	80154a0 <_strtod_l+0x810>
 8015586:	9b08      	ldr	r3, [sp, #32]
 8015588:	b1db      	cbz	r3, 80155c2 <_strtod_l+0x932>
 801558a:	423b      	tst	r3, r7
 801558c:	d0ef      	beq.n	801556e <_strtod_l+0x8de>
 801558e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015590:	9a04      	ldr	r2, [sp, #16]
 8015592:	4650      	mov	r0, sl
 8015594:	4659      	mov	r1, fp
 8015596:	b1c3      	cbz	r3, 80155ca <_strtod_l+0x93a>
 8015598:	f7ff fb5c 	bl	8014c54 <sulp>
 801559c:	4602      	mov	r2, r0
 801559e:	460b      	mov	r3, r1
 80155a0:	ec51 0b18 	vmov	r0, r1, d8
 80155a4:	f7ea fe82 	bl	80002ac <__adddf3>
 80155a8:	4682      	mov	sl, r0
 80155aa:	468b      	mov	fp, r1
 80155ac:	e7df      	b.n	801556e <_strtod_l+0x8de>
 80155ae:	4013      	ands	r3, r2
 80155b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80155b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80155b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80155bc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80155c0:	e7d5      	b.n	801556e <_strtod_l+0x8de>
 80155c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80155c4:	ea13 0f0a 	tst.w	r3, sl
 80155c8:	e7e0      	b.n	801558c <_strtod_l+0x8fc>
 80155ca:	f7ff fb43 	bl	8014c54 <sulp>
 80155ce:	4602      	mov	r2, r0
 80155d0:	460b      	mov	r3, r1
 80155d2:	ec51 0b18 	vmov	r0, r1, d8
 80155d6:	f7ea fe67 	bl	80002a8 <__aeabi_dsub>
 80155da:	2200      	movs	r2, #0
 80155dc:	2300      	movs	r3, #0
 80155de:	4682      	mov	sl, r0
 80155e0:	468b      	mov	fp, r1
 80155e2:	f7eb fa81 	bl	8000ae8 <__aeabi_dcmpeq>
 80155e6:	2800      	cmp	r0, #0
 80155e8:	d0c1      	beq.n	801556e <_strtod_l+0x8de>
 80155ea:	e611      	b.n	8015210 <_strtod_l+0x580>
 80155ec:	fffffc02 	.word	0xfffffc02
 80155f0:	7ff00000 	.word	0x7ff00000
 80155f4:	39500000 	.word	0x39500000
 80155f8:	000fffff 	.word	0x000fffff
 80155fc:	7fefffff 	.word	0x7fefffff
 8015600:	0801a3d0 	.word	0x0801a3d0
 8015604:	4631      	mov	r1, r6
 8015606:	4628      	mov	r0, r5
 8015608:	f002 f970 	bl	80178ec <__ratio>
 801560c:	ec59 8b10 	vmov	r8, r9, d0
 8015610:	ee10 0a10 	vmov	r0, s0
 8015614:	2200      	movs	r2, #0
 8015616:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801561a:	4649      	mov	r1, r9
 801561c:	f7eb fa78 	bl	8000b10 <__aeabi_dcmple>
 8015620:	2800      	cmp	r0, #0
 8015622:	d07a      	beq.n	801571a <_strtod_l+0xa8a>
 8015624:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015626:	2b00      	cmp	r3, #0
 8015628:	d04a      	beq.n	80156c0 <_strtod_l+0xa30>
 801562a:	4b95      	ldr	r3, [pc, #596]	; (8015880 <_strtod_l+0xbf0>)
 801562c:	2200      	movs	r2, #0
 801562e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015632:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8015880 <_strtod_l+0xbf0>
 8015636:	f04f 0800 	mov.w	r8, #0
 801563a:	4b92      	ldr	r3, [pc, #584]	; (8015884 <_strtod_l+0xbf4>)
 801563c:	403b      	ands	r3, r7
 801563e:	930d      	str	r3, [sp, #52]	; 0x34
 8015640:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015642:	4b91      	ldr	r3, [pc, #580]	; (8015888 <_strtod_l+0xbf8>)
 8015644:	429a      	cmp	r2, r3
 8015646:	f040 80b0 	bne.w	80157aa <_strtod_l+0xb1a>
 801564a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801564e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8015652:	ec4b ab10 	vmov	d0, sl, fp
 8015656:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801565a:	f002 f86f 	bl	801773c <__ulp>
 801565e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015662:	ec53 2b10 	vmov	r2, r3, d0
 8015666:	f7ea ffd7 	bl	8000618 <__aeabi_dmul>
 801566a:	4652      	mov	r2, sl
 801566c:	465b      	mov	r3, fp
 801566e:	f7ea fe1d 	bl	80002ac <__adddf3>
 8015672:	460b      	mov	r3, r1
 8015674:	4983      	ldr	r1, [pc, #524]	; (8015884 <_strtod_l+0xbf4>)
 8015676:	4a85      	ldr	r2, [pc, #532]	; (801588c <_strtod_l+0xbfc>)
 8015678:	4019      	ands	r1, r3
 801567a:	4291      	cmp	r1, r2
 801567c:	4682      	mov	sl, r0
 801567e:	d960      	bls.n	8015742 <_strtod_l+0xab2>
 8015680:	ee18 3a90 	vmov	r3, s17
 8015684:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8015688:	4293      	cmp	r3, r2
 801568a:	d104      	bne.n	8015696 <_strtod_l+0xa06>
 801568c:	ee18 3a10 	vmov	r3, s16
 8015690:	3301      	adds	r3, #1
 8015692:	f43f ad45 	beq.w	8015120 <_strtod_l+0x490>
 8015696:	f8df b200 	ldr.w	fp, [pc, #512]	; 8015898 <_strtod_l+0xc08>
 801569a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801569e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80156a0:	4620      	mov	r0, r4
 80156a2:	f001 fd19 	bl	80170d8 <_Bfree>
 80156a6:	9905      	ldr	r1, [sp, #20]
 80156a8:	4620      	mov	r0, r4
 80156aa:	f001 fd15 	bl	80170d8 <_Bfree>
 80156ae:	4631      	mov	r1, r6
 80156b0:	4620      	mov	r0, r4
 80156b2:	f001 fd11 	bl	80170d8 <_Bfree>
 80156b6:	4629      	mov	r1, r5
 80156b8:	4620      	mov	r0, r4
 80156ba:	f001 fd0d 	bl	80170d8 <_Bfree>
 80156be:	e61a      	b.n	80152f6 <_strtod_l+0x666>
 80156c0:	f1ba 0f00 	cmp.w	sl, #0
 80156c4:	d11b      	bne.n	80156fe <_strtod_l+0xa6e>
 80156c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80156ca:	b9f3      	cbnz	r3, 801570a <_strtod_l+0xa7a>
 80156cc:	4b6c      	ldr	r3, [pc, #432]	; (8015880 <_strtod_l+0xbf0>)
 80156ce:	2200      	movs	r2, #0
 80156d0:	4640      	mov	r0, r8
 80156d2:	4649      	mov	r1, r9
 80156d4:	f7eb fa12 	bl	8000afc <__aeabi_dcmplt>
 80156d8:	b9d0      	cbnz	r0, 8015710 <_strtod_l+0xa80>
 80156da:	4640      	mov	r0, r8
 80156dc:	4649      	mov	r1, r9
 80156de:	4b6c      	ldr	r3, [pc, #432]	; (8015890 <_strtod_l+0xc00>)
 80156e0:	2200      	movs	r2, #0
 80156e2:	f7ea ff99 	bl	8000618 <__aeabi_dmul>
 80156e6:	4680      	mov	r8, r0
 80156e8:	4689      	mov	r9, r1
 80156ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80156ee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80156f2:	9315      	str	r3, [sp, #84]	; 0x54
 80156f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80156f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80156fc:	e79d      	b.n	801563a <_strtod_l+0x9aa>
 80156fe:	f1ba 0f01 	cmp.w	sl, #1
 8015702:	d102      	bne.n	801570a <_strtod_l+0xa7a>
 8015704:	2f00      	cmp	r7, #0
 8015706:	f43f ad83 	beq.w	8015210 <_strtod_l+0x580>
 801570a:	4b62      	ldr	r3, [pc, #392]	; (8015894 <_strtod_l+0xc04>)
 801570c:	2200      	movs	r2, #0
 801570e:	e78e      	b.n	801562e <_strtod_l+0x99e>
 8015710:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8015890 <_strtod_l+0xc00>
 8015714:	f04f 0800 	mov.w	r8, #0
 8015718:	e7e7      	b.n	80156ea <_strtod_l+0xa5a>
 801571a:	4b5d      	ldr	r3, [pc, #372]	; (8015890 <_strtod_l+0xc00>)
 801571c:	4640      	mov	r0, r8
 801571e:	4649      	mov	r1, r9
 8015720:	2200      	movs	r2, #0
 8015722:	f7ea ff79 	bl	8000618 <__aeabi_dmul>
 8015726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015728:	4680      	mov	r8, r0
 801572a:	4689      	mov	r9, r1
 801572c:	b933      	cbnz	r3, 801573c <_strtod_l+0xaac>
 801572e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015732:	900e      	str	r0, [sp, #56]	; 0x38
 8015734:	930f      	str	r3, [sp, #60]	; 0x3c
 8015736:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801573a:	e7dd      	b.n	80156f8 <_strtod_l+0xa68>
 801573c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8015740:	e7f9      	b.n	8015736 <_strtod_l+0xaa6>
 8015742:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8015746:	9b04      	ldr	r3, [sp, #16]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d1a8      	bne.n	801569e <_strtod_l+0xa0e>
 801574c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015750:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015752:	0d1b      	lsrs	r3, r3, #20
 8015754:	051b      	lsls	r3, r3, #20
 8015756:	429a      	cmp	r2, r3
 8015758:	d1a1      	bne.n	801569e <_strtod_l+0xa0e>
 801575a:	4640      	mov	r0, r8
 801575c:	4649      	mov	r1, r9
 801575e:	f7eb fb0b 	bl	8000d78 <__aeabi_d2lz>
 8015762:	f7ea ff2b 	bl	80005bc <__aeabi_l2d>
 8015766:	4602      	mov	r2, r0
 8015768:	460b      	mov	r3, r1
 801576a:	4640      	mov	r0, r8
 801576c:	4649      	mov	r1, r9
 801576e:	f7ea fd9b 	bl	80002a8 <__aeabi_dsub>
 8015772:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015774:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015778:	ea43 030a 	orr.w	r3, r3, sl
 801577c:	4313      	orrs	r3, r2
 801577e:	4680      	mov	r8, r0
 8015780:	4689      	mov	r9, r1
 8015782:	d055      	beq.n	8015830 <_strtod_l+0xba0>
 8015784:	a336      	add	r3, pc, #216	; (adr r3, 8015860 <_strtod_l+0xbd0>)
 8015786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801578a:	f7eb f9b7 	bl	8000afc <__aeabi_dcmplt>
 801578e:	2800      	cmp	r0, #0
 8015790:	f47f acd0 	bne.w	8015134 <_strtod_l+0x4a4>
 8015794:	a334      	add	r3, pc, #208	; (adr r3, 8015868 <_strtod_l+0xbd8>)
 8015796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801579a:	4640      	mov	r0, r8
 801579c:	4649      	mov	r1, r9
 801579e:	f7eb f9cb 	bl	8000b38 <__aeabi_dcmpgt>
 80157a2:	2800      	cmp	r0, #0
 80157a4:	f43f af7b 	beq.w	801569e <_strtod_l+0xa0e>
 80157a8:	e4c4      	b.n	8015134 <_strtod_l+0x4a4>
 80157aa:	9b04      	ldr	r3, [sp, #16]
 80157ac:	b333      	cbz	r3, 80157fc <_strtod_l+0xb6c>
 80157ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80157b0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80157b4:	d822      	bhi.n	80157fc <_strtod_l+0xb6c>
 80157b6:	a32e      	add	r3, pc, #184	; (adr r3, 8015870 <_strtod_l+0xbe0>)
 80157b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157bc:	4640      	mov	r0, r8
 80157be:	4649      	mov	r1, r9
 80157c0:	f7eb f9a6 	bl	8000b10 <__aeabi_dcmple>
 80157c4:	b1a0      	cbz	r0, 80157f0 <_strtod_l+0xb60>
 80157c6:	4649      	mov	r1, r9
 80157c8:	4640      	mov	r0, r8
 80157ca:	f7eb f9fd 	bl	8000bc8 <__aeabi_d2uiz>
 80157ce:	2801      	cmp	r0, #1
 80157d0:	bf38      	it	cc
 80157d2:	2001      	movcc	r0, #1
 80157d4:	f7ea fea6 	bl	8000524 <__aeabi_ui2d>
 80157d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80157da:	4680      	mov	r8, r0
 80157dc:	4689      	mov	r9, r1
 80157de:	bb23      	cbnz	r3, 801582a <_strtod_l+0xb9a>
 80157e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80157e4:	9010      	str	r0, [sp, #64]	; 0x40
 80157e6:	9311      	str	r3, [sp, #68]	; 0x44
 80157e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80157ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80157f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80157f4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80157f8:	1a9b      	subs	r3, r3, r2
 80157fa:	9309      	str	r3, [sp, #36]	; 0x24
 80157fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015800:	eeb0 0a48 	vmov.f32	s0, s16
 8015804:	eef0 0a68 	vmov.f32	s1, s17
 8015808:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801580c:	f001 ff96 	bl	801773c <__ulp>
 8015810:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015814:	ec53 2b10 	vmov	r2, r3, d0
 8015818:	f7ea fefe 	bl	8000618 <__aeabi_dmul>
 801581c:	ec53 2b18 	vmov	r2, r3, d8
 8015820:	f7ea fd44 	bl	80002ac <__adddf3>
 8015824:	4682      	mov	sl, r0
 8015826:	468b      	mov	fp, r1
 8015828:	e78d      	b.n	8015746 <_strtod_l+0xab6>
 801582a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801582e:	e7db      	b.n	80157e8 <_strtod_l+0xb58>
 8015830:	a311      	add	r3, pc, #68	; (adr r3, 8015878 <_strtod_l+0xbe8>)
 8015832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015836:	f7eb f961 	bl	8000afc <__aeabi_dcmplt>
 801583a:	e7b2      	b.n	80157a2 <_strtod_l+0xb12>
 801583c:	2300      	movs	r3, #0
 801583e:	930a      	str	r3, [sp, #40]	; 0x28
 8015840:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015842:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015844:	6013      	str	r3, [r2, #0]
 8015846:	f7ff ba6b 	b.w	8014d20 <_strtod_l+0x90>
 801584a:	2a65      	cmp	r2, #101	; 0x65
 801584c:	f43f ab5f 	beq.w	8014f0e <_strtod_l+0x27e>
 8015850:	2a45      	cmp	r2, #69	; 0x45
 8015852:	f43f ab5c 	beq.w	8014f0e <_strtod_l+0x27e>
 8015856:	2301      	movs	r3, #1
 8015858:	f7ff bb94 	b.w	8014f84 <_strtod_l+0x2f4>
 801585c:	f3af 8000 	nop.w
 8015860:	94a03595 	.word	0x94a03595
 8015864:	3fdfffff 	.word	0x3fdfffff
 8015868:	35afe535 	.word	0x35afe535
 801586c:	3fe00000 	.word	0x3fe00000
 8015870:	ffc00000 	.word	0xffc00000
 8015874:	41dfffff 	.word	0x41dfffff
 8015878:	94a03595 	.word	0x94a03595
 801587c:	3fcfffff 	.word	0x3fcfffff
 8015880:	3ff00000 	.word	0x3ff00000
 8015884:	7ff00000 	.word	0x7ff00000
 8015888:	7fe00000 	.word	0x7fe00000
 801588c:	7c9fffff 	.word	0x7c9fffff
 8015890:	3fe00000 	.word	0x3fe00000
 8015894:	bff00000 	.word	0xbff00000
 8015898:	7fefffff 	.word	0x7fefffff

0801589c <strtod>:
 801589c:	460a      	mov	r2, r1
 801589e:	4601      	mov	r1, r0
 80158a0:	4802      	ldr	r0, [pc, #8]	; (80158ac <strtod+0x10>)
 80158a2:	4b03      	ldr	r3, [pc, #12]	; (80158b0 <strtod+0x14>)
 80158a4:	6800      	ldr	r0, [r0, #0]
 80158a6:	f7ff b9f3 	b.w	8014c90 <_strtod_l>
 80158aa:	bf00      	nop
 80158ac:	2000022c 	.word	0x2000022c
 80158b0:	20000294 	.word	0x20000294

080158b4 <_strtol_l.constprop.0>:
 80158b4:	2b01      	cmp	r3, #1
 80158b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158ba:	d001      	beq.n	80158c0 <_strtol_l.constprop.0+0xc>
 80158bc:	2b24      	cmp	r3, #36	; 0x24
 80158be:	d906      	bls.n	80158ce <_strtol_l.constprop.0+0x1a>
 80158c0:	f7fe f9c8 	bl	8013c54 <__errno>
 80158c4:	2316      	movs	r3, #22
 80158c6:	6003      	str	r3, [r0, #0]
 80158c8:	2000      	movs	r0, #0
 80158ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158ce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80159b4 <_strtol_l.constprop.0+0x100>
 80158d2:	460d      	mov	r5, r1
 80158d4:	462e      	mov	r6, r5
 80158d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80158da:	f814 700c 	ldrb.w	r7, [r4, ip]
 80158de:	f017 0708 	ands.w	r7, r7, #8
 80158e2:	d1f7      	bne.n	80158d4 <_strtol_l.constprop.0+0x20>
 80158e4:	2c2d      	cmp	r4, #45	; 0x2d
 80158e6:	d132      	bne.n	801594e <_strtol_l.constprop.0+0x9a>
 80158e8:	782c      	ldrb	r4, [r5, #0]
 80158ea:	2701      	movs	r7, #1
 80158ec:	1cb5      	adds	r5, r6, #2
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d05b      	beq.n	80159aa <_strtol_l.constprop.0+0xf6>
 80158f2:	2b10      	cmp	r3, #16
 80158f4:	d109      	bne.n	801590a <_strtol_l.constprop.0+0x56>
 80158f6:	2c30      	cmp	r4, #48	; 0x30
 80158f8:	d107      	bne.n	801590a <_strtol_l.constprop.0+0x56>
 80158fa:	782c      	ldrb	r4, [r5, #0]
 80158fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015900:	2c58      	cmp	r4, #88	; 0x58
 8015902:	d14d      	bne.n	80159a0 <_strtol_l.constprop.0+0xec>
 8015904:	786c      	ldrb	r4, [r5, #1]
 8015906:	2310      	movs	r3, #16
 8015908:	3502      	adds	r5, #2
 801590a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801590e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8015912:	f04f 0c00 	mov.w	ip, #0
 8015916:	fbb8 f9f3 	udiv	r9, r8, r3
 801591a:	4666      	mov	r6, ip
 801591c:	fb03 8a19 	mls	sl, r3, r9, r8
 8015920:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8015924:	f1be 0f09 	cmp.w	lr, #9
 8015928:	d816      	bhi.n	8015958 <_strtol_l.constprop.0+0xa4>
 801592a:	4674      	mov	r4, lr
 801592c:	42a3      	cmp	r3, r4
 801592e:	dd24      	ble.n	801597a <_strtol_l.constprop.0+0xc6>
 8015930:	f1bc 0f00 	cmp.w	ip, #0
 8015934:	db1e      	blt.n	8015974 <_strtol_l.constprop.0+0xc0>
 8015936:	45b1      	cmp	r9, r6
 8015938:	d31c      	bcc.n	8015974 <_strtol_l.constprop.0+0xc0>
 801593a:	d101      	bne.n	8015940 <_strtol_l.constprop.0+0x8c>
 801593c:	45a2      	cmp	sl, r4
 801593e:	db19      	blt.n	8015974 <_strtol_l.constprop.0+0xc0>
 8015940:	fb06 4603 	mla	r6, r6, r3, r4
 8015944:	f04f 0c01 	mov.w	ip, #1
 8015948:	f815 4b01 	ldrb.w	r4, [r5], #1
 801594c:	e7e8      	b.n	8015920 <_strtol_l.constprop.0+0x6c>
 801594e:	2c2b      	cmp	r4, #43	; 0x2b
 8015950:	bf04      	itt	eq
 8015952:	782c      	ldrbeq	r4, [r5, #0]
 8015954:	1cb5      	addeq	r5, r6, #2
 8015956:	e7ca      	b.n	80158ee <_strtol_l.constprop.0+0x3a>
 8015958:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801595c:	f1be 0f19 	cmp.w	lr, #25
 8015960:	d801      	bhi.n	8015966 <_strtol_l.constprop.0+0xb2>
 8015962:	3c37      	subs	r4, #55	; 0x37
 8015964:	e7e2      	b.n	801592c <_strtol_l.constprop.0+0x78>
 8015966:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801596a:	f1be 0f19 	cmp.w	lr, #25
 801596e:	d804      	bhi.n	801597a <_strtol_l.constprop.0+0xc6>
 8015970:	3c57      	subs	r4, #87	; 0x57
 8015972:	e7db      	b.n	801592c <_strtol_l.constprop.0+0x78>
 8015974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8015978:	e7e6      	b.n	8015948 <_strtol_l.constprop.0+0x94>
 801597a:	f1bc 0f00 	cmp.w	ip, #0
 801597e:	da05      	bge.n	801598c <_strtol_l.constprop.0+0xd8>
 8015980:	2322      	movs	r3, #34	; 0x22
 8015982:	6003      	str	r3, [r0, #0]
 8015984:	4646      	mov	r6, r8
 8015986:	b942      	cbnz	r2, 801599a <_strtol_l.constprop.0+0xe6>
 8015988:	4630      	mov	r0, r6
 801598a:	e79e      	b.n	80158ca <_strtol_l.constprop.0+0x16>
 801598c:	b107      	cbz	r7, 8015990 <_strtol_l.constprop.0+0xdc>
 801598e:	4276      	negs	r6, r6
 8015990:	2a00      	cmp	r2, #0
 8015992:	d0f9      	beq.n	8015988 <_strtol_l.constprop.0+0xd4>
 8015994:	f1bc 0f00 	cmp.w	ip, #0
 8015998:	d000      	beq.n	801599c <_strtol_l.constprop.0+0xe8>
 801599a:	1e69      	subs	r1, r5, #1
 801599c:	6011      	str	r1, [r2, #0]
 801599e:	e7f3      	b.n	8015988 <_strtol_l.constprop.0+0xd4>
 80159a0:	2430      	movs	r4, #48	; 0x30
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d1b1      	bne.n	801590a <_strtol_l.constprop.0+0x56>
 80159a6:	2308      	movs	r3, #8
 80159a8:	e7af      	b.n	801590a <_strtol_l.constprop.0+0x56>
 80159aa:	2c30      	cmp	r4, #48	; 0x30
 80159ac:	d0a5      	beq.n	80158fa <_strtol_l.constprop.0+0x46>
 80159ae:	230a      	movs	r3, #10
 80159b0:	e7ab      	b.n	801590a <_strtol_l.constprop.0+0x56>
 80159b2:	bf00      	nop
 80159b4:	0801a209 	.word	0x0801a209

080159b8 <strtol>:
 80159b8:	4613      	mov	r3, r2
 80159ba:	460a      	mov	r2, r1
 80159bc:	4601      	mov	r1, r0
 80159be:	4802      	ldr	r0, [pc, #8]	; (80159c8 <strtol+0x10>)
 80159c0:	6800      	ldr	r0, [r0, #0]
 80159c2:	f7ff bf77 	b.w	80158b4 <_strtol_l.constprop.0>
 80159c6:	bf00      	nop
 80159c8:	2000022c 	.word	0x2000022c

080159cc <_vsniprintf_r>:
 80159cc:	b530      	push	{r4, r5, lr}
 80159ce:	4614      	mov	r4, r2
 80159d0:	2c00      	cmp	r4, #0
 80159d2:	b09b      	sub	sp, #108	; 0x6c
 80159d4:	4605      	mov	r5, r0
 80159d6:	461a      	mov	r2, r3
 80159d8:	da05      	bge.n	80159e6 <_vsniprintf_r+0x1a>
 80159da:	238b      	movs	r3, #139	; 0x8b
 80159dc:	6003      	str	r3, [r0, #0]
 80159de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80159e2:	b01b      	add	sp, #108	; 0x6c
 80159e4:	bd30      	pop	{r4, r5, pc}
 80159e6:	f44f 7302 	mov.w	r3, #520	; 0x208
 80159ea:	f8ad 300c 	strh.w	r3, [sp, #12]
 80159ee:	bf14      	ite	ne
 80159f0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80159f4:	4623      	moveq	r3, r4
 80159f6:	9302      	str	r3, [sp, #8]
 80159f8:	9305      	str	r3, [sp, #20]
 80159fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80159fe:	9100      	str	r1, [sp, #0]
 8015a00:	9104      	str	r1, [sp, #16]
 8015a02:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015a06:	4669      	mov	r1, sp
 8015a08:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015a0a:	f002 f8a5 	bl	8017b58 <_svfiprintf_r>
 8015a0e:	1c43      	adds	r3, r0, #1
 8015a10:	bfbc      	itt	lt
 8015a12:	238b      	movlt	r3, #139	; 0x8b
 8015a14:	602b      	strlt	r3, [r5, #0]
 8015a16:	2c00      	cmp	r4, #0
 8015a18:	d0e3      	beq.n	80159e2 <_vsniprintf_r+0x16>
 8015a1a:	9b00      	ldr	r3, [sp, #0]
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	701a      	strb	r2, [r3, #0]
 8015a20:	e7df      	b.n	80159e2 <_vsniprintf_r+0x16>
	...

08015a24 <vsniprintf>:
 8015a24:	b507      	push	{r0, r1, r2, lr}
 8015a26:	9300      	str	r3, [sp, #0]
 8015a28:	4613      	mov	r3, r2
 8015a2a:	460a      	mov	r2, r1
 8015a2c:	4601      	mov	r1, r0
 8015a2e:	4803      	ldr	r0, [pc, #12]	; (8015a3c <vsniprintf+0x18>)
 8015a30:	6800      	ldr	r0, [r0, #0]
 8015a32:	f7ff ffcb 	bl	80159cc <_vsniprintf_r>
 8015a36:	b003      	add	sp, #12
 8015a38:	f85d fb04 	ldr.w	pc, [sp], #4
 8015a3c:	2000022c 	.word	0x2000022c

08015a40 <_write_r>:
 8015a40:	b538      	push	{r3, r4, r5, lr}
 8015a42:	4d07      	ldr	r5, [pc, #28]	; (8015a60 <_write_r+0x20>)
 8015a44:	4604      	mov	r4, r0
 8015a46:	4608      	mov	r0, r1
 8015a48:	4611      	mov	r1, r2
 8015a4a:	2200      	movs	r2, #0
 8015a4c:	602a      	str	r2, [r5, #0]
 8015a4e:	461a      	mov	r2, r3
 8015a50:	f7f1 fe1b 	bl	800768a <_write>
 8015a54:	1c43      	adds	r3, r0, #1
 8015a56:	d102      	bne.n	8015a5e <_write_r+0x1e>
 8015a58:	682b      	ldr	r3, [r5, #0]
 8015a5a:	b103      	cbz	r3, 8015a5e <_write_r+0x1e>
 8015a5c:	6023      	str	r3, [r4, #0]
 8015a5e:	bd38      	pop	{r3, r4, r5, pc}
 8015a60:	20008420 	.word	0x20008420

08015a64 <_close_r>:
 8015a64:	b538      	push	{r3, r4, r5, lr}
 8015a66:	4d06      	ldr	r5, [pc, #24]	; (8015a80 <_close_r+0x1c>)
 8015a68:	2300      	movs	r3, #0
 8015a6a:	4604      	mov	r4, r0
 8015a6c:	4608      	mov	r0, r1
 8015a6e:	602b      	str	r3, [r5, #0]
 8015a70:	f7f1 fe27 	bl	80076c2 <_close>
 8015a74:	1c43      	adds	r3, r0, #1
 8015a76:	d102      	bne.n	8015a7e <_close_r+0x1a>
 8015a78:	682b      	ldr	r3, [r5, #0]
 8015a7a:	b103      	cbz	r3, 8015a7e <_close_r+0x1a>
 8015a7c:	6023      	str	r3, [r4, #0]
 8015a7e:	bd38      	pop	{r3, r4, r5, pc}
 8015a80:	20008420 	.word	0x20008420

08015a84 <quorem>:
 8015a84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a88:	6903      	ldr	r3, [r0, #16]
 8015a8a:	690c      	ldr	r4, [r1, #16]
 8015a8c:	42a3      	cmp	r3, r4
 8015a8e:	4607      	mov	r7, r0
 8015a90:	f2c0 8081 	blt.w	8015b96 <quorem+0x112>
 8015a94:	3c01      	subs	r4, #1
 8015a96:	f101 0814 	add.w	r8, r1, #20
 8015a9a:	f100 0514 	add.w	r5, r0, #20
 8015a9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015aa2:	9301      	str	r3, [sp, #4]
 8015aa4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015aa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015aac:	3301      	adds	r3, #1
 8015aae:	429a      	cmp	r2, r3
 8015ab0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015ab4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015ab8:	fbb2 f6f3 	udiv	r6, r2, r3
 8015abc:	d331      	bcc.n	8015b22 <quorem+0x9e>
 8015abe:	f04f 0e00 	mov.w	lr, #0
 8015ac2:	4640      	mov	r0, r8
 8015ac4:	46ac      	mov	ip, r5
 8015ac6:	46f2      	mov	sl, lr
 8015ac8:	f850 2b04 	ldr.w	r2, [r0], #4
 8015acc:	b293      	uxth	r3, r2
 8015ace:	fb06 e303 	mla	r3, r6, r3, lr
 8015ad2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015ad6:	b29b      	uxth	r3, r3
 8015ad8:	ebaa 0303 	sub.w	r3, sl, r3
 8015adc:	f8dc a000 	ldr.w	sl, [ip]
 8015ae0:	0c12      	lsrs	r2, r2, #16
 8015ae2:	fa13 f38a 	uxtah	r3, r3, sl
 8015ae6:	fb06 e202 	mla	r2, r6, r2, lr
 8015aea:	9300      	str	r3, [sp, #0]
 8015aec:	9b00      	ldr	r3, [sp, #0]
 8015aee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015af2:	b292      	uxth	r2, r2
 8015af4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015af8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015afc:	f8bd 3000 	ldrh.w	r3, [sp]
 8015b00:	4581      	cmp	r9, r0
 8015b02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015b06:	f84c 3b04 	str.w	r3, [ip], #4
 8015b0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015b0e:	d2db      	bcs.n	8015ac8 <quorem+0x44>
 8015b10:	f855 300b 	ldr.w	r3, [r5, fp]
 8015b14:	b92b      	cbnz	r3, 8015b22 <quorem+0x9e>
 8015b16:	9b01      	ldr	r3, [sp, #4]
 8015b18:	3b04      	subs	r3, #4
 8015b1a:	429d      	cmp	r5, r3
 8015b1c:	461a      	mov	r2, r3
 8015b1e:	d32e      	bcc.n	8015b7e <quorem+0xfa>
 8015b20:	613c      	str	r4, [r7, #16]
 8015b22:	4638      	mov	r0, r7
 8015b24:	f001 fd64 	bl	80175f0 <__mcmp>
 8015b28:	2800      	cmp	r0, #0
 8015b2a:	db24      	blt.n	8015b76 <quorem+0xf2>
 8015b2c:	3601      	adds	r6, #1
 8015b2e:	4628      	mov	r0, r5
 8015b30:	f04f 0c00 	mov.w	ip, #0
 8015b34:	f858 2b04 	ldr.w	r2, [r8], #4
 8015b38:	f8d0 e000 	ldr.w	lr, [r0]
 8015b3c:	b293      	uxth	r3, r2
 8015b3e:	ebac 0303 	sub.w	r3, ip, r3
 8015b42:	0c12      	lsrs	r2, r2, #16
 8015b44:	fa13 f38e 	uxtah	r3, r3, lr
 8015b48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015b4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015b50:	b29b      	uxth	r3, r3
 8015b52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015b56:	45c1      	cmp	r9, r8
 8015b58:	f840 3b04 	str.w	r3, [r0], #4
 8015b5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015b60:	d2e8      	bcs.n	8015b34 <quorem+0xb0>
 8015b62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015b66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015b6a:	b922      	cbnz	r2, 8015b76 <quorem+0xf2>
 8015b6c:	3b04      	subs	r3, #4
 8015b6e:	429d      	cmp	r5, r3
 8015b70:	461a      	mov	r2, r3
 8015b72:	d30a      	bcc.n	8015b8a <quorem+0x106>
 8015b74:	613c      	str	r4, [r7, #16]
 8015b76:	4630      	mov	r0, r6
 8015b78:	b003      	add	sp, #12
 8015b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b7e:	6812      	ldr	r2, [r2, #0]
 8015b80:	3b04      	subs	r3, #4
 8015b82:	2a00      	cmp	r2, #0
 8015b84:	d1cc      	bne.n	8015b20 <quorem+0x9c>
 8015b86:	3c01      	subs	r4, #1
 8015b88:	e7c7      	b.n	8015b1a <quorem+0x96>
 8015b8a:	6812      	ldr	r2, [r2, #0]
 8015b8c:	3b04      	subs	r3, #4
 8015b8e:	2a00      	cmp	r2, #0
 8015b90:	d1f0      	bne.n	8015b74 <quorem+0xf0>
 8015b92:	3c01      	subs	r4, #1
 8015b94:	e7eb      	b.n	8015b6e <quorem+0xea>
 8015b96:	2000      	movs	r0, #0
 8015b98:	e7ee      	b.n	8015b78 <quorem+0xf4>
 8015b9a:	0000      	movs	r0, r0
 8015b9c:	0000      	movs	r0, r0
	...

08015ba0 <_dtoa_r>:
 8015ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ba4:	ed2d 8b04 	vpush	{d8-d9}
 8015ba8:	ec57 6b10 	vmov	r6, r7, d0
 8015bac:	b093      	sub	sp, #76	; 0x4c
 8015bae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015bb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015bb4:	9106      	str	r1, [sp, #24]
 8015bb6:	ee10 aa10 	vmov	sl, s0
 8015bba:	4604      	mov	r4, r0
 8015bbc:	9209      	str	r2, [sp, #36]	; 0x24
 8015bbe:	930c      	str	r3, [sp, #48]	; 0x30
 8015bc0:	46bb      	mov	fp, r7
 8015bc2:	b975      	cbnz	r5, 8015be2 <_dtoa_r+0x42>
 8015bc4:	2010      	movs	r0, #16
 8015bc6:	f001 fa21 	bl	801700c <malloc>
 8015bca:	4602      	mov	r2, r0
 8015bcc:	6260      	str	r0, [r4, #36]	; 0x24
 8015bce:	b920      	cbnz	r0, 8015bda <_dtoa_r+0x3a>
 8015bd0:	4ba7      	ldr	r3, [pc, #668]	; (8015e70 <_dtoa_r+0x2d0>)
 8015bd2:	21ea      	movs	r1, #234	; 0xea
 8015bd4:	48a7      	ldr	r0, [pc, #668]	; (8015e74 <_dtoa_r+0x2d4>)
 8015bd6:	f002 f8e9 	bl	8017dac <__assert_func>
 8015bda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015bde:	6005      	str	r5, [r0, #0]
 8015be0:	60c5      	str	r5, [r0, #12]
 8015be2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015be4:	6819      	ldr	r1, [r3, #0]
 8015be6:	b151      	cbz	r1, 8015bfe <_dtoa_r+0x5e>
 8015be8:	685a      	ldr	r2, [r3, #4]
 8015bea:	604a      	str	r2, [r1, #4]
 8015bec:	2301      	movs	r3, #1
 8015bee:	4093      	lsls	r3, r2
 8015bf0:	608b      	str	r3, [r1, #8]
 8015bf2:	4620      	mov	r0, r4
 8015bf4:	f001 fa70 	bl	80170d8 <_Bfree>
 8015bf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015bfa:	2200      	movs	r2, #0
 8015bfc:	601a      	str	r2, [r3, #0]
 8015bfe:	1e3b      	subs	r3, r7, #0
 8015c00:	bfaa      	itet	ge
 8015c02:	2300      	movge	r3, #0
 8015c04:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8015c08:	f8c8 3000 	strge.w	r3, [r8]
 8015c0c:	4b9a      	ldr	r3, [pc, #616]	; (8015e78 <_dtoa_r+0x2d8>)
 8015c0e:	bfbc      	itt	lt
 8015c10:	2201      	movlt	r2, #1
 8015c12:	f8c8 2000 	strlt.w	r2, [r8]
 8015c16:	ea33 030b 	bics.w	r3, r3, fp
 8015c1a:	d11b      	bne.n	8015c54 <_dtoa_r+0xb4>
 8015c1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015c1e:	f242 730f 	movw	r3, #9999	; 0x270f
 8015c22:	6013      	str	r3, [r2, #0]
 8015c24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015c28:	4333      	orrs	r3, r6
 8015c2a:	f000 8592 	beq.w	8016752 <_dtoa_r+0xbb2>
 8015c2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c30:	b963      	cbnz	r3, 8015c4c <_dtoa_r+0xac>
 8015c32:	4b92      	ldr	r3, [pc, #584]	; (8015e7c <_dtoa_r+0x2dc>)
 8015c34:	e022      	b.n	8015c7c <_dtoa_r+0xdc>
 8015c36:	4b92      	ldr	r3, [pc, #584]	; (8015e80 <_dtoa_r+0x2e0>)
 8015c38:	9301      	str	r3, [sp, #4]
 8015c3a:	3308      	adds	r3, #8
 8015c3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015c3e:	6013      	str	r3, [r2, #0]
 8015c40:	9801      	ldr	r0, [sp, #4]
 8015c42:	b013      	add	sp, #76	; 0x4c
 8015c44:	ecbd 8b04 	vpop	{d8-d9}
 8015c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c4c:	4b8b      	ldr	r3, [pc, #556]	; (8015e7c <_dtoa_r+0x2dc>)
 8015c4e:	9301      	str	r3, [sp, #4]
 8015c50:	3303      	adds	r3, #3
 8015c52:	e7f3      	b.n	8015c3c <_dtoa_r+0x9c>
 8015c54:	2200      	movs	r2, #0
 8015c56:	2300      	movs	r3, #0
 8015c58:	4650      	mov	r0, sl
 8015c5a:	4659      	mov	r1, fp
 8015c5c:	f7ea ff44 	bl	8000ae8 <__aeabi_dcmpeq>
 8015c60:	ec4b ab19 	vmov	d9, sl, fp
 8015c64:	4680      	mov	r8, r0
 8015c66:	b158      	cbz	r0, 8015c80 <_dtoa_r+0xe0>
 8015c68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015c6a:	2301      	movs	r3, #1
 8015c6c:	6013      	str	r3, [r2, #0]
 8015c6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	f000 856b 	beq.w	801674c <_dtoa_r+0xbac>
 8015c76:	4883      	ldr	r0, [pc, #524]	; (8015e84 <_dtoa_r+0x2e4>)
 8015c78:	6018      	str	r0, [r3, #0]
 8015c7a:	1e43      	subs	r3, r0, #1
 8015c7c:	9301      	str	r3, [sp, #4]
 8015c7e:	e7df      	b.n	8015c40 <_dtoa_r+0xa0>
 8015c80:	ec4b ab10 	vmov	d0, sl, fp
 8015c84:	aa10      	add	r2, sp, #64	; 0x40
 8015c86:	a911      	add	r1, sp, #68	; 0x44
 8015c88:	4620      	mov	r0, r4
 8015c8a:	f001 fdd3 	bl	8017834 <__d2b>
 8015c8e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8015c92:	ee08 0a10 	vmov	s16, r0
 8015c96:	2d00      	cmp	r5, #0
 8015c98:	f000 8084 	beq.w	8015da4 <_dtoa_r+0x204>
 8015c9c:	ee19 3a90 	vmov	r3, s19
 8015ca0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015ca4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8015ca8:	4656      	mov	r6, sl
 8015caa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8015cae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015cb2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8015cb6:	4b74      	ldr	r3, [pc, #464]	; (8015e88 <_dtoa_r+0x2e8>)
 8015cb8:	2200      	movs	r2, #0
 8015cba:	4630      	mov	r0, r6
 8015cbc:	4639      	mov	r1, r7
 8015cbe:	f7ea faf3 	bl	80002a8 <__aeabi_dsub>
 8015cc2:	a365      	add	r3, pc, #404	; (adr r3, 8015e58 <_dtoa_r+0x2b8>)
 8015cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cc8:	f7ea fca6 	bl	8000618 <__aeabi_dmul>
 8015ccc:	a364      	add	r3, pc, #400	; (adr r3, 8015e60 <_dtoa_r+0x2c0>)
 8015cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cd2:	f7ea faeb 	bl	80002ac <__adddf3>
 8015cd6:	4606      	mov	r6, r0
 8015cd8:	4628      	mov	r0, r5
 8015cda:	460f      	mov	r7, r1
 8015cdc:	f7ea fc32 	bl	8000544 <__aeabi_i2d>
 8015ce0:	a361      	add	r3, pc, #388	; (adr r3, 8015e68 <_dtoa_r+0x2c8>)
 8015ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ce6:	f7ea fc97 	bl	8000618 <__aeabi_dmul>
 8015cea:	4602      	mov	r2, r0
 8015cec:	460b      	mov	r3, r1
 8015cee:	4630      	mov	r0, r6
 8015cf0:	4639      	mov	r1, r7
 8015cf2:	f7ea fadb 	bl	80002ac <__adddf3>
 8015cf6:	4606      	mov	r6, r0
 8015cf8:	460f      	mov	r7, r1
 8015cfa:	f7ea ff3d 	bl	8000b78 <__aeabi_d2iz>
 8015cfe:	2200      	movs	r2, #0
 8015d00:	9000      	str	r0, [sp, #0]
 8015d02:	2300      	movs	r3, #0
 8015d04:	4630      	mov	r0, r6
 8015d06:	4639      	mov	r1, r7
 8015d08:	f7ea fef8 	bl	8000afc <__aeabi_dcmplt>
 8015d0c:	b150      	cbz	r0, 8015d24 <_dtoa_r+0x184>
 8015d0e:	9800      	ldr	r0, [sp, #0]
 8015d10:	f7ea fc18 	bl	8000544 <__aeabi_i2d>
 8015d14:	4632      	mov	r2, r6
 8015d16:	463b      	mov	r3, r7
 8015d18:	f7ea fee6 	bl	8000ae8 <__aeabi_dcmpeq>
 8015d1c:	b910      	cbnz	r0, 8015d24 <_dtoa_r+0x184>
 8015d1e:	9b00      	ldr	r3, [sp, #0]
 8015d20:	3b01      	subs	r3, #1
 8015d22:	9300      	str	r3, [sp, #0]
 8015d24:	9b00      	ldr	r3, [sp, #0]
 8015d26:	2b16      	cmp	r3, #22
 8015d28:	d85a      	bhi.n	8015de0 <_dtoa_r+0x240>
 8015d2a:	9a00      	ldr	r2, [sp, #0]
 8015d2c:	4b57      	ldr	r3, [pc, #348]	; (8015e8c <_dtoa_r+0x2ec>)
 8015d2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d36:	ec51 0b19 	vmov	r0, r1, d9
 8015d3a:	f7ea fedf 	bl	8000afc <__aeabi_dcmplt>
 8015d3e:	2800      	cmp	r0, #0
 8015d40:	d050      	beq.n	8015de4 <_dtoa_r+0x244>
 8015d42:	9b00      	ldr	r3, [sp, #0]
 8015d44:	3b01      	subs	r3, #1
 8015d46:	9300      	str	r3, [sp, #0]
 8015d48:	2300      	movs	r3, #0
 8015d4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015d4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d4e:	1b5d      	subs	r5, r3, r5
 8015d50:	1e6b      	subs	r3, r5, #1
 8015d52:	9305      	str	r3, [sp, #20]
 8015d54:	bf45      	ittet	mi
 8015d56:	f1c5 0301 	rsbmi	r3, r5, #1
 8015d5a:	9304      	strmi	r3, [sp, #16]
 8015d5c:	2300      	movpl	r3, #0
 8015d5e:	2300      	movmi	r3, #0
 8015d60:	bf4c      	ite	mi
 8015d62:	9305      	strmi	r3, [sp, #20]
 8015d64:	9304      	strpl	r3, [sp, #16]
 8015d66:	9b00      	ldr	r3, [sp, #0]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	db3d      	blt.n	8015de8 <_dtoa_r+0x248>
 8015d6c:	9b05      	ldr	r3, [sp, #20]
 8015d6e:	9a00      	ldr	r2, [sp, #0]
 8015d70:	920a      	str	r2, [sp, #40]	; 0x28
 8015d72:	4413      	add	r3, r2
 8015d74:	9305      	str	r3, [sp, #20]
 8015d76:	2300      	movs	r3, #0
 8015d78:	9307      	str	r3, [sp, #28]
 8015d7a:	9b06      	ldr	r3, [sp, #24]
 8015d7c:	2b09      	cmp	r3, #9
 8015d7e:	f200 8089 	bhi.w	8015e94 <_dtoa_r+0x2f4>
 8015d82:	2b05      	cmp	r3, #5
 8015d84:	bfc4      	itt	gt
 8015d86:	3b04      	subgt	r3, #4
 8015d88:	9306      	strgt	r3, [sp, #24]
 8015d8a:	9b06      	ldr	r3, [sp, #24]
 8015d8c:	f1a3 0302 	sub.w	r3, r3, #2
 8015d90:	bfcc      	ite	gt
 8015d92:	2500      	movgt	r5, #0
 8015d94:	2501      	movle	r5, #1
 8015d96:	2b03      	cmp	r3, #3
 8015d98:	f200 8087 	bhi.w	8015eaa <_dtoa_r+0x30a>
 8015d9c:	e8df f003 	tbb	[pc, r3]
 8015da0:	59383a2d 	.word	0x59383a2d
 8015da4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8015da8:	441d      	add	r5, r3
 8015daa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015dae:	2b20      	cmp	r3, #32
 8015db0:	bfc1      	itttt	gt
 8015db2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015db6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8015dba:	fa0b f303 	lslgt.w	r3, fp, r3
 8015dbe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8015dc2:	bfda      	itte	le
 8015dc4:	f1c3 0320 	rsble	r3, r3, #32
 8015dc8:	fa06 f003 	lslle.w	r0, r6, r3
 8015dcc:	4318      	orrgt	r0, r3
 8015dce:	f7ea fba9 	bl	8000524 <__aeabi_ui2d>
 8015dd2:	2301      	movs	r3, #1
 8015dd4:	4606      	mov	r6, r0
 8015dd6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015dda:	3d01      	subs	r5, #1
 8015ddc:	930e      	str	r3, [sp, #56]	; 0x38
 8015dde:	e76a      	b.n	8015cb6 <_dtoa_r+0x116>
 8015de0:	2301      	movs	r3, #1
 8015de2:	e7b2      	b.n	8015d4a <_dtoa_r+0x1aa>
 8015de4:	900b      	str	r0, [sp, #44]	; 0x2c
 8015de6:	e7b1      	b.n	8015d4c <_dtoa_r+0x1ac>
 8015de8:	9b04      	ldr	r3, [sp, #16]
 8015dea:	9a00      	ldr	r2, [sp, #0]
 8015dec:	1a9b      	subs	r3, r3, r2
 8015dee:	9304      	str	r3, [sp, #16]
 8015df0:	4253      	negs	r3, r2
 8015df2:	9307      	str	r3, [sp, #28]
 8015df4:	2300      	movs	r3, #0
 8015df6:	930a      	str	r3, [sp, #40]	; 0x28
 8015df8:	e7bf      	b.n	8015d7a <_dtoa_r+0x1da>
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	9308      	str	r3, [sp, #32]
 8015dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	dc55      	bgt.n	8015eb0 <_dtoa_r+0x310>
 8015e04:	2301      	movs	r3, #1
 8015e06:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015e0a:	461a      	mov	r2, r3
 8015e0c:	9209      	str	r2, [sp, #36]	; 0x24
 8015e0e:	e00c      	b.n	8015e2a <_dtoa_r+0x28a>
 8015e10:	2301      	movs	r3, #1
 8015e12:	e7f3      	b.n	8015dfc <_dtoa_r+0x25c>
 8015e14:	2300      	movs	r3, #0
 8015e16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e18:	9308      	str	r3, [sp, #32]
 8015e1a:	9b00      	ldr	r3, [sp, #0]
 8015e1c:	4413      	add	r3, r2
 8015e1e:	9302      	str	r3, [sp, #8]
 8015e20:	3301      	adds	r3, #1
 8015e22:	2b01      	cmp	r3, #1
 8015e24:	9303      	str	r3, [sp, #12]
 8015e26:	bfb8      	it	lt
 8015e28:	2301      	movlt	r3, #1
 8015e2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015e2c:	2200      	movs	r2, #0
 8015e2e:	6042      	str	r2, [r0, #4]
 8015e30:	2204      	movs	r2, #4
 8015e32:	f102 0614 	add.w	r6, r2, #20
 8015e36:	429e      	cmp	r6, r3
 8015e38:	6841      	ldr	r1, [r0, #4]
 8015e3a:	d93d      	bls.n	8015eb8 <_dtoa_r+0x318>
 8015e3c:	4620      	mov	r0, r4
 8015e3e:	f001 f90b 	bl	8017058 <_Balloc>
 8015e42:	9001      	str	r0, [sp, #4]
 8015e44:	2800      	cmp	r0, #0
 8015e46:	d13b      	bne.n	8015ec0 <_dtoa_r+0x320>
 8015e48:	4b11      	ldr	r3, [pc, #68]	; (8015e90 <_dtoa_r+0x2f0>)
 8015e4a:	4602      	mov	r2, r0
 8015e4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015e50:	e6c0      	b.n	8015bd4 <_dtoa_r+0x34>
 8015e52:	2301      	movs	r3, #1
 8015e54:	e7df      	b.n	8015e16 <_dtoa_r+0x276>
 8015e56:	bf00      	nop
 8015e58:	636f4361 	.word	0x636f4361
 8015e5c:	3fd287a7 	.word	0x3fd287a7
 8015e60:	8b60c8b3 	.word	0x8b60c8b3
 8015e64:	3fc68a28 	.word	0x3fc68a28
 8015e68:	509f79fb 	.word	0x509f79fb
 8015e6c:	3fd34413 	.word	0x3fd34413
 8015e70:	0801a405 	.word	0x0801a405
 8015e74:	0801a41c 	.word	0x0801a41c
 8015e78:	7ff00000 	.word	0x7ff00000
 8015e7c:	0801a401 	.word	0x0801a401
 8015e80:	0801a3f8 	.word	0x0801a3f8
 8015e84:	0801a381 	.word	0x0801a381
 8015e88:	3ff80000 	.word	0x3ff80000
 8015e8c:	0801a588 	.word	0x0801a588
 8015e90:	0801a477 	.word	0x0801a477
 8015e94:	2501      	movs	r5, #1
 8015e96:	2300      	movs	r3, #0
 8015e98:	9306      	str	r3, [sp, #24]
 8015e9a:	9508      	str	r5, [sp, #32]
 8015e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015ea0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015ea4:	2200      	movs	r2, #0
 8015ea6:	2312      	movs	r3, #18
 8015ea8:	e7b0      	b.n	8015e0c <_dtoa_r+0x26c>
 8015eaa:	2301      	movs	r3, #1
 8015eac:	9308      	str	r3, [sp, #32]
 8015eae:	e7f5      	b.n	8015e9c <_dtoa_r+0x2fc>
 8015eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015eb2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015eb6:	e7b8      	b.n	8015e2a <_dtoa_r+0x28a>
 8015eb8:	3101      	adds	r1, #1
 8015eba:	6041      	str	r1, [r0, #4]
 8015ebc:	0052      	lsls	r2, r2, #1
 8015ebe:	e7b8      	b.n	8015e32 <_dtoa_r+0x292>
 8015ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015ec2:	9a01      	ldr	r2, [sp, #4]
 8015ec4:	601a      	str	r2, [r3, #0]
 8015ec6:	9b03      	ldr	r3, [sp, #12]
 8015ec8:	2b0e      	cmp	r3, #14
 8015eca:	f200 809d 	bhi.w	8016008 <_dtoa_r+0x468>
 8015ece:	2d00      	cmp	r5, #0
 8015ed0:	f000 809a 	beq.w	8016008 <_dtoa_r+0x468>
 8015ed4:	9b00      	ldr	r3, [sp, #0]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	dd32      	ble.n	8015f40 <_dtoa_r+0x3a0>
 8015eda:	4ab7      	ldr	r2, [pc, #732]	; (80161b8 <_dtoa_r+0x618>)
 8015edc:	f003 030f 	and.w	r3, r3, #15
 8015ee0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015ee4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015ee8:	9b00      	ldr	r3, [sp, #0]
 8015eea:	05d8      	lsls	r0, r3, #23
 8015eec:	ea4f 1723 	mov.w	r7, r3, asr #4
 8015ef0:	d516      	bpl.n	8015f20 <_dtoa_r+0x380>
 8015ef2:	4bb2      	ldr	r3, [pc, #712]	; (80161bc <_dtoa_r+0x61c>)
 8015ef4:	ec51 0b19 	vmov	r0, r1, d9
 8015ef8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015efc:	f7ea fcb6 	bl	800086c <__aeabi_ddiv>
 8015f00:	f007 070f 	and.w	r7, r7, #15
 8015f04:	4682      	mov	sl, r0
 8015f06:	468b      	mov	fp, r1
 8015f08:	2503      	movs	r5, #3
 8015f0a:	4eac      	ldr	r6, [pc, #688]	; (80161bc <_dtoa_r+0x61c>)
 8015f0c:	b957      	cbnz	r7, 8015f24 <_dtoa_r+0x384>
 8015f0e:	4642      	mov	r2, r8
 8015f10:	464b      	mov	r3, r9
 8015f12:	4650      	mov	r0, sl
 8015f14:	4659      	mov	r1, fp
 8015f16:	f7ea fca9 	bl	800086c <__aeabi_ddiv>
 8015f1a:	4682      	mov	sl, r0
 8015f1c:	468b      	mov	fp, r1
 8015f1e:	e028      	b.n	8015f72 <_dtoa_r+0x3d2>
 8015f20:	2502      	movs	r5, #2
 8015f22:	e7f2      	b.n	8015f0a <_dtoa_r+0x36a>
 8015f24:	07f9      	lsls	r1, r7, #31
 8015f26:	d508      	bpl.n	8015f3a <_dtoa_r+0x39a>
 8015f28:	4640      	mov	r0, r8
 8015f2a:	4649      	mov	r1, r9
 8015f2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015f30:	f7ea fb72 	bl	8000618 <__aeabi_dmul>
 8015f34:	3501      	adds	r5, #1
 8015f36:	4680      	mov	r8, r0
 8015f38:	4689      	mov	r9, r1
 8015f3a:	107f      	asrs	r7, r7, #1
 8015f3c:	3608      	adds	r6, #8
 8015f3e:	e7e5      	b.n	8015f0c <_dtoa_r+0x36c>
 8015f40:	f000 809b 	beq.w	801607a <_dtoa_r+0x4da>
 8015f44:	9b00      	ldr	r3, [sp, #0]
 8015f46:	4f9d      	ldr	r7, [pc, #628]	; (80161bc <_dtoa_r+0x61c>)
 8015f48:	425e      	negs	r6, r3
 8015f4a:	4b9b      	ldr	r3, [pc, #620]	; (80161b8 <_dtoa_r+0x618>)
 8015f4c:	f006 020f 	and.w	r2, r6, #15
 8015f50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f58:	ec51 0b19 	vmov	r0, r1, d9
 8015f5c:	f7ea fb5c 	bl	8000618 <__aeabi_dmul>
 8015f60:	1136      	asrs	r6, r6, #4
 8015f62:	4682      	mov	sl, r0
 8015f64:	468b      	mov	fp, r1
 8015f66:	2300      	movs	r3, #0
 8015f68:	2502      	movs	r5, #2
 8015f6a:	2e00      	cmp	r6, #0
 8015f6c:	d17a      	bne.n	8016064 <_dtoa_r+0x4c4>
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d1d3      	bne.n	8015f1a <_dtoa_r+0x37a>
 8015f72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	f000 8082 	beq.w	801607e <_dtoa_r+0x4de>
 8015f7a:	4b91      	ldr	r3, [pc, #580]	; (80161c0 <_dtoa_r+0x620>)
 8015f7c:	2200      	movs	r2, #0
 8015f7e:	4650      	mov	r0, sl
 8015f80:	4659      	mov	r1, fp
 8015f82:	f7ea fdbb 	bl	8000afc <__aeabi_dcmplt>
 8015f86:	2800      	cmp	r0, #0
 8015f88:	d079      	beq.n	801607e <_dtoa_r+0x4de>
 8015f8a:	9b03      	ldr	r3, [sp, #12]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d076      	beq.n	801607e <_dtoa_r+0x4de>
 8015f90:	9b02      	ldr	r3, [sp, #8]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	dd36      	ble.n	8016004 <_dtoa_r+0x464>
 8015f96:	9b00      	ldr	r3, [sp, #0]
 8015f98:	4650      	mov	r0, sl
 8015f9a:	4659      	mov	r1, fp
 8015f9c:	1e5f      	subs	r7, r3, #1
 8015f9e:	2200      	movs	r2, #0
 8015fa0:	4b88      	ldr	r3, [pc, #544]	; (80161c4 <_dtoa_r+0x624>)
 8015fa2:	f7ea fb39 	bl	8000618 <__aeabi_dmul>
 8015fa6:	9e02      	ldr	r6, [sp, #8]
 8015fa8:	4682      	mov	sl, r0
 8015faa:	468b      	mov	fp, r1
 8015fac:	3501      	adds	r5, #1
 8015fae:	4628      	mov	r0, r5
 8015fb0:	f7ea fac8 	bl	8000544 <__aeabi_i2d>
 8015fb4:	4652      	mov	r2, sl
 8015fb6:	465b      	mov	r3, fp
 8015fb8:	f7ea fb2e 	bl	8000618 <__aeabi_dmul>
 8015fbc:	4b82      	ldr	r3, [pc, #520]	; (80161c8 <_dtoa_r+0x628>)
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	f7ea f974 	bl	80002ac <__adddf3>
 8015fc4:	46d0      	mov	r8, sl
 8015fc6:	46d9      	mov	r9, fp
 8015fc8:	4682      	mov	sl, r0
 8015fca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8015fce:	2e00      	cmp	r6, #0
 8015fd0:	d158      	bne.n	8016084 <_dtoa_r+0x4e4>
 8015fd2:	4b7e      	ldr	r3, [pc, #504]	; (80161cc <_dtoa_r+0x62c>)
 8015fd4:	2200      	movs	r2, #0
 8015fd6:	4640      	mov	r0, r8
 8015fd8:	4649      	mov	r1, r9
 8015fda:	f7ea f965 	bl	80002a8 <__aeabi_dsub>
 8015fde:	4652      	mov	r2, sl
 8015fe0:	465b      	mov	r3, fp
 8015fe2:	4680      	mov	r8, r0
 8015fe4:	4689      	mov	r9, r1
 8015fe6:	f7ea fda7 	bl	8000b38 <__aeabi_dcmpgt>
 8015fea:	2800      	cmp	r0, #0
 8015fec:	f040 8295 	bne.w	801651a <_dtoa_r+0x97a>
 8015ff0:	4652      	mov	r2, sl
 8015ff2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015ff6:	4640      	mov	r0, r8
 8015ff8:	4649      	mov	r1, r9
 8015ffa:	f7ea fd7f 	bl	8000afc <__aeabi_dcmplt>
 8015ffe:	2800      	cmp	r0, #0
 8016000:	f040 8289 	bne.w	8016516 <_dtoa_r+0x976>
 8016004:	ec5b ab19 	vmov	sl, fp, d9
 8016008:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801600a:	2b00      	cmp	r3, #0
 801600c:	f2c0 8148 	blt.w	80162a0 <_dtoa_r+0x700>
 8016010:	9a00      	ldr	r2, [sp, #0]
 8016012:	2a0e      	cmp	r2, #14
 8016014:	f300 8144 	bgt.w	80162a0 <_dtoa_r+0x700>
 8016018:	4b67      	ldr	r3, [pc, #412]	; (80161b8 <_dtoa_r+0x618>)
 801601a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801601e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016024:	2b00      	cmp	r3, #0
 8016026:	f280 80d5 	bge.w	80161d4 <_dtoa_r+0x634>
 801602a:	9b03      	ldr	r3, [sp, #12]
 801602c:	2b00      	cmp	r3, #0
 801602e:	f300 80d1 	bgt.w	80161d4 <_dtoa_r+0x634>
 8016032:	f040 826f 	bne.w	8016514 <_dtoa_r+0x974>
 8016036:	4b65      	ldr	r3, [pc, #404]	; (80161cc <_dtoa_r+0x62c>)
 8016038:	2200      	movs	r2, #0
 801603a:	4640      	mov	r0, r8
 801603c:	4649      	mov	r1, r9
 801603e:	f7ea faeb 	bl	8000618 <__aeabi_dmul>
 8016042:	4652      	mov	r2, sl
 8016044:	465b      	mov	r3, fp
 8016046:	f7ea fd6d 	bl	8000b24 <__aeabi_dcmpge>
 801604a:	9e03      	ldr	r6, [sp, #12]
 801604c:	4637      	mov	r7, r6
 801604e:	2800      	cmp	r0, #0
 8016050:	f040 8245 	bne.w	80164de <_dtoa_r+0x93e>
 8016054:	9d01      	ldr	r5, [sp, #4]
 8016056:	2331      	movs	r3, #49	; 0x31
 8016058:	f805 3b01 	strb.w	r3, [r5], #1
 801605c:	9b00      	ldr	r3, [sp, #0]
 801605e:	3301      	adds	r3, #1
 8016060:	9300      	str	r3, [sp, #0]
 8016062:	e240      	b.n	80164e6 <_dtoa_r+0x946>
 8016064:	07f2      	lsls	r2, r6, #31
 8016066:	d505      	bpl.n	8016074 <_dtoa_r+0x4d4>
 8016068:	e9d7 2300 	ldrd	r2, r3, [r7]
 801606c:	f7ea fad4 	bl	8000618 <__aeabi_dmul>
 8016070:	3501      	adds	r5, #1
 8016072:	2301      	movs	r3, #1
 8016074:	1076      	asrs	r6, r6, #1
 8016076:	3708      	adds	r7, #8
 8016078:	e777      	b.n	8015f6a <_dtoa_r+0x3ca>
 801607a:	2502      	movs	r5, #2
 801607c:	e779      	b.n	8015f72 <_dtoa_r+0x3d2>
 801607e:	9f00      	ldr	r7, [sp, #0]
 8016080:	9e03      	ldr	r6, [sp, #12]
 8016082:	e794      	b.n	8015fae <_dtoa_r+0x40e>
 8016084:	9901      	ldr	r1, [sp, #4]
 8016086:	4b4c      	ldr	r3, [pc, #304]	; (80161b8 <_dtoa_r+0x618>)
 8016088:	4431      	add	r1, r6
 801608a:	910d      	str	r1, [sp, #52]	; 0x34
 801608c:	9908      	ldr	r1, [sp, #32]
 801608e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8016092:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016096:	2900      	cmp	r1, #0
 8016098:	d043      	beq.n	8016122 <_dtoa_r+0x582>
 801609a:	494d      	ldr	r1, [pc, #308]	; (80161d0 <_dtoa_r+0x630>)
 801609c:	2000      	movs	r0, #0
 801609e:	f7ea fbe5 	bl	800086c <__aeabi_ddiv>
 80160a2:	4652      	mov	r2, sl
 80160a4:	465b      	mov	r3, fp
 80160a6:	f7ea f8ff 	bl	80002a8 <__aeabi_dsub>
 80160aa:	9d01      	ldr	r5, [sp, #4]
 80160ac:	4682      	mov	sl, r0
 80160ae:	468b      	mov	fp, r1
 80160b0:	4649      	mov	r1, r9
 80160b2:	4640      	mov	r0, r8
 80160b4:	f7ea fd60 	bl	8000b78 <__aeabi_d2iz>
 80160b8:	4606      	mov	r6, r0
 80160ba:	f7ea fa43 	bl	8000544 <__aeabi_i2d>
 80160be:	4602      	mov	r2, r0
 80160c0:	460b      	mov	r3, r1
 80160c2:	4640      	mov	r0, r8
 80160c4:	4649      	mov	r1, r9
 80160c6:	f7ea f8ef 	bl	80002a8 <__aeabi_dsub>
 80160ca:	3630      	adds	r6, #48	; 0x30
 80160cc:	f805 6b01 	strb.w	r6, [r5], #1
 80160d0:	4652      	mov	r2, sl
 80160d2:	465b      	mov	r3, fp
 80160d4:	4680      	mov	r8, r0
 80160d6:	4689      	mov	r9, r1
 80160d8:	f7ea fd10 	bl	8000afc <__aeabi_dcmplt>
 80160dc:	2800      	cmp	r0, #0
 80160de:	d163      	bne.n	80161a8 <_dtoa_r+0x608>
 80160e0:	4642      	mov	r2, r8
 80160e2:	464b      	mov	r3, r9
 80160e4:	4936      	ldr	r1, [pc, #216]	; (80161c0 <_dtoa_r+0x620>)
 80160e6:	2000      	movs	r0, #0
 80160e8:	f7ea f8de 	bl	80002a8 <__aeabi_dsub>
 80160ec:	4652      	mov	r2, sl
 80160ee:	465b      	mov	r3, fp
 80160f0:	f7ea fd04 	bl	8000afc <__aeabi_dcmplt>
 80160f4:	2800      	cmp	r0, #0
 80160f6:	f040 80b5 	bne.w	8016264 <_dtoa_r+0x6c4>
 80160fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80160fc:	429d      	cmp	r5, r3
 80160fe:	d081      	beq.n	8016004 <_dtoa_r+0x464>
 8016100:	4b30      	ldr	r3, [pc, #192]	; (80161c4 <_dtoa_r+0x624>)
 8016102:	2200      	movs	r2, #0
 8016104:	4650      	mov	r0, sl
 8016106:	4659      	mov	r1, fp
 8016108:	f7ea fa86 	bl	8000618 <__aeabi_dmul>
 801610c:	4b2d      	ldr	r3, [pc, #180]	; (80161c4 <_dtoa_r+0x624>)
 801610e:	4682      	mov	sl, r0
 8016110:	468b      	mov	fp, r1
 8016112:	4640      	mov	r0, r8
 8016114:	4649      	mov	r1, r9
 8016116:	2200      	movs	r2, #0
 8016118:	f7ea fa7e 	bl	8000618 <__aeabi_dmul>
 801611c:	4680      	mov	r8, r0
 801611e:	4689      	mov	r9, r1
 8016120:	e7c6      	b.n	80160b0 <_dtoa_r+0x510>
 8016122:	4650      	mov	r0, sl
 8016124:	4659      	mov	r1, fp
 8016126:	f7ea fa77 	bl	8000618 <__aeabi_dmul>
 801612a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801612c:	9d01      	ldr	r5, [sp, #4]
 801612e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016130:	4682      	mov	sl, r0
 8016132:	468b      	mov	fp, r1
 8016134:	4649      	mov	r1, r9
 8016136:	4640      	mov	r0, r8
 8016138:	f7ea fd1e 	bl	8000b78 <__aeabi_d2iz>
 801613c:	4606      	mov	r6, r0
 801613e:	f7ea fa01 	bl	8000544 <__aeabi_i2d>
 8016142:	3630      	adds	r6, #48	; 0x30
 8016144:	4602      	mov	r2, r0
 8016146:	460b      	mov	r3, r1
 8016148:	4640      	mov	r0, r8
 801614a:	4649      	mov	r1, r9
 801614c:	f7ea f8ac 	bl	80002a8 <__aeabi_dsub>
 8016150:	f805 6b01 	strb.w	r6, [r5], #1
 8016154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016156:	429d      	cmp	r5, r3
 8016158:	4680      	mov	r8, r0
 801615a:	4689      	mov	r9, r1
 801615c:	f04f 0200 	mov.w	r2, #0
 8016160:	d124      	bne.n	80161ac <_dtoa_r+0x60c>
 8016162:	4b1b      	ldr	r3, [pc, #108]	; (80161d0 <_dtoa_r+0x630>)
 8016164:	4650      	mov	r0, sl
 8016166:	4659      	mov	r1, fp
 8016168:	f7ea f8a0 	bl	80002ac <__adddf3>
 801616c:	4602      	mov	r2, r0
 801616e:	460b      	mov	r3, r1
 8016170:	4640      	mov	r0, r8
 8016172:	4649      	mov	r1, r9
 8016174:	f7ea fce0 	bl	8000b38 <__aeabi_dcmpgt>
 8016178:	2800      	cmp	r0, #0
 801617a:	d173      	bne.n	8016264 <_dtoa_r+0x6c4>
 801617c:	4652      	mov	r2, sl
 801617e:	465b      	mov	r3, fp
 8016180:	4913      	ldr	r1, [pc, #76]	; (80161d0 <_dtoa_r+0x630>)
 8016182:	2000      	movs	r0, #0
 8016184:	f7ea f890 	bl	80002a8 <__aeabi_dsub>
 8016188:	4602      	mov	r2, r0
 801618a:	460b      	mov	r3, r1
 801618c:	4640      	mov	r0, r8
 801618e:	4649      	mov	r1, r9
 8016190:	f7ea fcb4 	bl	8000afc <__aeabi_dcmplt>
 8016194:	2800      	cmp	r0, #0
 8016196:	f43f af35 	beq.w	8016004 <_dtoa_r+0x464>
 801619a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801619c:	1e6b      	subs	r3, r5, #1
 801619e:	930f      	str	r3, [sp, #60]	; 0x3c
 80161a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80161a4:	2b30      	cmp	r3, #48	; 0x30
 80161a6:	d0f8      	beq.n	801619a <_dtoa_r+0x5fa>
 80161a8:	9700      	str	r7, [sp, #0]
 80161aa:	e049      	b.n	8016240 <_dtoa_r+0x6a0>
 80161ac:	4b05      	ldr	r3, [pc, #20]	; (80161c4 <_dtoa_r+0x624>)
 80161ae:	f7ea fa33 	bl	8000618 <__aeabi_dmul>
 80161b2:	4680      	mov	r8, r0
 80161b4:	4689      	mov	r9, r1
 80161b6:	e7bd      	b.n	8016134 <_dtoa_r+0x594>
 80161b8:	0801a588 	.word	0x0801a588
 80161bc:	0801a560 	.word	0x0801a560
 80161c0:	3ff00000 	.word	0x3ff00000
 80161c4:	40240000 	.word	0x40240000
 80161c8:	401c0000 	.word	0x401c0000
 80161cc:	40140000 	.word	0x40140000
 80161d0:	3fe00000 	.word	0x3fe00000
 80161d4:	9d01      	ldr	r5, [sp, #4]
 80161d6:	4656      	mov	r6, sl
 80161d8:	465f      	mov	r7, fp
 80161da:	4642      	mov	r2, r8
 80161dc:	464b      	mov	r3, r9
 80161de:	4630      	mov	r0, r6
 80161e0:	4639      	mov	r1, r7
 80161e2:	f7ea fb43 	bl	800086c <__aeabi_ddiv>
 80161e6:	f7ea fcc7 	bl	8000b78 <__aeabi_d2iz>
 80161ea:	4682      	mov	sl, r0
 80161ec:	f7ea f9aa 	bl	8000544 <__aeabi_i2d>
 80161f0:	4642      	mov	r2, r8
 80161f2:	464b      	mov	r3, r9
 80161f4:	f7ea fa10 	bl	8000618 <__aeabi_dmul>
 80161f8:	4602      	mov	r2, r0
 80161fa:	460b      	mov	r3, r1
 80161fc:	4630      	mov	r0, r6
 80161fe:	4639      	mov	r1, r7
 8016200:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8016204:	f7ea f850 	bl	80002a8 <__aeabi_dsub>
 8016208:	f805 6b01 	strb.w	r6, [r5], #1
 801620c:	9e01      	ldr	r6, [sp, #4]
 801620e:	9f03      	ldr	r7, [sp, #12]
 8016210:	1bae      	subs	r6, r5, r6
 8016212:	42b7      	cmp	r7, r6
 8016214:	4602      	mov	r2, r0
 8016216:	460b      	mov	r3, r1
 8016218:	d135      	bne.n	8016286 <_dtoa_r+0x6e6>
 801621a:	f7ea f847 	bl	80002ac <__adddf3>
 801621e:	4642      	mov	r2, r8
 8016220:	464b      	mov	r3, r9
 8016222:	4606      	mov	r6, r0
 8016224:	460f      	mov	r7, r1
 8016226:	f7ea fc87 	bl	8000b38 <__aeabi_dcmpgt>
 801622a:	b9d0      	cbnz	r0, 8016262 <_dtoa_r+0x6c2>
 801622c:	4642      	mov	r2, r8
 801622e:	464b      	mov	r3, r9
 8016230:	4630      	mov	r0, r6
 8016232:	4639      	mov	r1, r7
 8016234:	f7ea fc58 	bl	8000ae8 <__aeabi_dcmpeq>
 8016238:	b110      	cbz	r0, 8016240 <_dtoa_r+0x6a0>
 801623a:	f01a 0f01 	tst.w	sl, #1
 801623e:	d110      	bne.n	8016262 <_dtoa_r+0x6c2>
 8016240:	4620      	mov	r0, r4
 8016242:	ee18 1a10 	vmov	r1, s16
 8016246:	f000 ff47 	bl	80170d8 <_Bfree>
 801624a:	2300      	movs	r3, #0
 801624c:	9800      	ldr	r0, [sp, #0]
 801624e:	702b      	strb	r3, [r5, #0]
 8016250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016252:	3001      	adds	r0, #1
 8016254:	6018      	str	r0, [r3, #0]
 8016256:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016258:	2b00      	cmp	r3, #0
 801625a:	f43f acf1 	beq.w	8015c40 <_dtoa_r+0xa0>
 801625e:	601d      	str	r5, [r3, #0]
 8016260:	e4ee      	b.n	8015c40 <_dtoa_r+0xa0>
 8016262:	9f00      	ldr	r7, [sp, #0]
 8016264:	462b      	mov	r3, r5
 8016266:	461d      	mov	r5, r3
 8016268:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801626c:	2a39      	cmp	r2, #57	; 0x39
 801626e:	d106      	bne.n	801627e <_dtoa_r+0x6de>
 8016270:	9a01      	ldr	r2, [sp, #4]
 8016272:	429a      	cmp	r2, r3
 8016274:	d1f7      	bne.n	8016266 <_dtoa_r+0x6c6>
 8016276:	9901      	ldr	r1, [sp, #4]
 8016278:	2230      	movs	r2, #48	; 0x30
 801627a:	3701      	adds	r7, #1
 801627c:	700a      	strb	r2, [r1, #0]
 801627e:	781a      	ldrb	r2, [r3, #0]
 8016280:	3201      	adds	r2, #1
 8016282:	701a      	strb	r2, [r3, #0]
 8016284:	e790      	b.n	80161a8 <_dtoa_r+0x608>
 8016286:	4ba6      	ldr	r3, [pc, #664]	; (8016520 <_dtoa_r+0x980>)
 8016288:	2200      	movs	r2, #0
 801628a:	f7ea f9c5 	bl	8000618 <__aeabi_dmul>
 801628e:	2200      	movs	r2, #0
 8016290:	2300      	movs	r3, #0
 8016292:	4606      	mov	r6, r0
 8016294:	460f      	mov	r7, r1
 8016296:	f7ea fc27 	bl	8000ae8 <__aeabi_dcmpeq>
 801629a:	2800      	cmp	r0, #0
 801629c:	d09d      	beq.n	80161da <_dtoa_r+0x63a>
 801629e:	e7cf      	b.n	8016240 <_dtoa_r+0x6a0>
 80162a0:	9a08      	ldr	r2, [sp, #32]
 80162a2:	2a00      	cmp	r2, #0
 80162a4:	f000 80d7 	beq.w	8016456 <_dtoa_r+0x8b6>
 80162a8:	9a06      	ldr	r2, [sp, #24]
 80162aa:	2a01      	cmp	r2, #1
 80162ac:	f300 80ba 	bgt.w	8016424 <_dtoa_r+0x884>
 80162b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80162b2:	2a00      	cmp	r2, #0
 80162b4:	f000 80b2 	beq.w	801641c <_dtoa_r+0x87c>
 80162b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80162bc:	9e07      	ldr	r6, [sp, #28]
 80162be:	9d04      	ldr	r5, [sp, #16]
 80162c0:	9a04      	ldr	r2, [sp, #16]
 80162c2:	441a      	add	r2, r3
 80162c4:	9204      	str	r2, [sp, #16]
 80162c6:	9a05      	ldr	r2, [sp, #20]
 80162c8:	2101      	movs	r1, #1
 80162ca:	441a      	add	r2, r3
 80162cc:	4620      	mov	r0, r4
 80162ce:	9205      	str	r2, [sp, #20]
 80162d0:	f001 f804 	bl	80172dc <__i2b>
 80162d4:	4607      	mov	r7, r0
 80162d6:	2d00      	cmp	r5, #0
 80162d8:	dd0c      	ble.n	80162f4 <_dtoa_r+0x754>
 80162da:	9b05      	ldr	r3, [sp, #20]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	dd09      	ble.n	80162f4 <_dtoa_r+0x754>
 80162e0:	42ab      	cmp	r3, r5
 80162e2:	9a04      	ldr	r2, [sp, #16]
 80162e4:	bfa8      	it	ge
 80162e6:	462b      	movge	r3, r5
 80162e8:	1ad2      	subs	r2, r2, r3
 80162ea:	9204      	str	r2, [sp, #16]
 80162ec:	9a05      	ldr	r2, [sp, #20]
 80162ee:	1aed      	subs	r5, r5, r3
 80162f0:	1ad3      	subs	r3, r2, r3
 80162f2:	9305      	str	r3, [sp, #20]
 80162f4:	9b07      	ldr	r3, [sp, #28]
 80162f6:	b31b      	cbz	r3, 8016340 <_dtoa_r+0x7a0>
 80162f8:	9b08      	ldr	r3, [sp, #32]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	f000 80af 	beq.w	801645e <_dtoa_r+0x8be>
 8016300:	2e00      	cmp	r6, #0
 8016302:	dd13      	ble.n	801632c <_dtoa_r+0x78c>
 8016304:	4639      	mov	r1, r7
 8016306:	4632      	mov	r2, r6
 8016308:	4620      	mov	r0, r4
 801630a:	f001 f8a7 	bl	801745c <__pow5mult>
 801630e:	ee18 2a10 	vmov	r2, s16
 8016312:	4601      	mov	r1, r0
 8016314:	4607      	mov	r7, r0
 8016316:	4620      	mov	r0, r4
 8016318:	f000 fff6 	bl	8017308 <__multiply>
 801631c:	ee18 1a10 	vmov	r1, s16
 8016320:	4680      	mov	r8, r0
 8016322:	4620      	mov	r0, r4
 8016324:	f000 fed8 	bl	80170d8 <_Bfree>
 8016328:	ee08 8a10 	vmov	s16, r8
 801632c:	9b07      	ldr	r3, [sp, #28]
 801632e:	1b9a      	subs	r2, r3, r6
 8016330:	d006      	beq.n	8016340 <_dtoa_r+0x7a0>
 8016332:	ee18 1a10 	vmov	r1, s16
 8016336:	4620      	mov	r0, r4
 8016338:	f001 f890 	bl	801745c <__pow5mult>
 801633c:	ee08 0a10 	vmov	s16, r0
 8016340:	2101      	movs	r1, #1
 8016342:	4620      	mov	r0, r4
 8016344:	f000 ffca 	bl	80172dc <__i2b>
 8016348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801634a:	2b00      	cmp	r3, #0
 801634c:	4606      	mov	r6, r0
 801634e:	f340 8088 	ble.w	8016462 <_dtoa_r+0x8c2>
 8016352:	461a      	mov	r2, r3
 8016354:	4601      	mov	r1, r0
 8016356:	4620      	mov	r0, r4
 8016358:	f001 f880 	bl	801745c <__pow5mult>
 801635c:	9b06      	ldr	r3, [sp, #24]
 801635e:	2b01      	cmp	r3, #1
 8016360:	4606      	mov	r6, r0
 8016362:	f340 8081 	ble.w	8016468 <_dtoa_r+0x8c8>
 8016366:	f04f 0800 	mov.w	r8, #0
 801636a:	6933      	ldr	r3, [r6, #16]
 801636c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016370:	6918      	ldr	r0, [r3, #16]
 8016372:	f000 ff63 	bl	801723c <__hi0bits>
 8016376:	f1c0 0020 	rsb	r0, r0, #32
 801637a:	9b05      	ldr	r3, [sp, #20]
 801637c:	4418      	add	r0, r3
 801637e:	f010 001f 	ands.w	r0, r0, #31
 8016382:	f000 8092 	beq.w	80164aa <_dtoa_r+0x90a>
 8016386:	f1c0 0320 	rsb	r3, r0, #32
 801638a:	2b04      	cmp	r3, #4
 801638c:	f340 808a 	ble.w	80164a4 <_dtoa_r+0x904>
 8016390:	f1c0 001c 	rsb	r0, r0, #28
 8016394:	9b04      	ldr	r3, [sp, #16]
 8016396:	4403      	add	r3, r0
 8016398:	9304      	str	r3, [sp, #16]
 801639a:	9b05      	ldr	r3, [sp, #20]
 801639c:	4403      	add	r3, r0
 801639e:	4405      	add	r5, r0
 80163a0:	9305      	str	r3, [sp, #20]
 80163a2:	9b04      	ldr	r3, [sp, #16]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	dd07      	ble.n	80163b8 <_dtoa_r+0x818>
 80163a8:	ee18 1a10 	vmov	r1, s16
 80163ac:	461a      	mov	r2, r3
 80163ae:	4620      	mov	r0, r4
 80163b0:	f001 f8ae 	bl	8017510 <__lshift>
 80163b4:	ee08 0a10 	vmov	s16, r0
 80163b8:	9b05      	ldr	r3, [sp, #20]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	dd05      	ble.n	80163ca <_dtoa_r+0x82a>
 80163be:	4631      	mov	r1, r6
 80163c0:	461a      	mov	r2, r3
 80163c2:	4620      	mov	r0, r4
 80163c4:	f001 f8a4 	bl	8017510 <__lshift>
 80163c8:	4606      	mov	r6, r0
 80163ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d06e      	beq.n	80164ae <_dtoa_r+0x90e>
 80163d0:	ee18 0a10 	vmov	r0, s16
 80163d4:	4631      	mov	r1, r6
 80163d6:	f001 f90b 	bl	80175f0 <__mcmp>
 80163da:	2800      	cmp	r0, #0
 80163dc:	da67      	bge.n	80164ae <_dtoa_r+0x90e>
 80163de:	9b00      	ldr	r3, [sp, #0]
 80163e0:	3b01      	subs	r3, #1
 80163e2:	ee18 1a10 	vmov	r1, s16
 80163e6:	9300      	str	r3, [sp, #0]
 80163e8:	220a      	movs	r2, #10
 80163ea:	2300      	movs	r3, #0
 80163ec:	4620      	mov	r0, r4
 80163ee:	f000 fe95 	bl	801711c <__multadd>
 80163f2:	9b08      	ldr	r3, [sp, #32]
 80163f4:	ee08 0a10 	vmov	s16, r0
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	f000 81b1 	beq.w	8016760 <_dtoa_r+0xbc0>
 80163fe:	2300      	movs	r3, #0
 8016400:	4639      	mov	r1, r7
 8016402:	220a      	movs	r2, #10
 8016404:	4620      	mov	r0, r4
 8016406:	f000 fe89 	bl	801711c <__multadd>
 801640a:	9b02      	ldr	r3, [sp, #8]
 801640c:	2b00      	cmp	r3, #0
 801640e:	4607      	mov	r7, r0
 8016410:	f300 808e 	bgt.w	8016530 <_dtoa_r+0x990>
 8016414:	9b06      	ldr	r3, [sp, #24]
 8016416:	2b02      	cmp	r3, #2
 8016418:	dc51      	bgt.n	80164be <_dtoa_r+0x91e>
 801641a:	e089      	b.n	8016530 <_dtoa_r+0x990>
 801641c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801641e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016422:	e74b      	b.n	80162bc <_dtoa_r+0x71c>
 8016424:	9b03      	ldr	r3, [sp, #12]
 8016426:	1e5e      	subs	r6, r3, #1
 8016428:	9b07      	ldr	r3, [sp, #28]
 801642a:	42b3      	cmp	r3, r6
 801642c:	bfbf      	itttt	lt
 801642e:	9b07      	ldrlt	r3, [sp, #28]
 8016430:	9607      	strlt	r6, [sp, #28]
 8016432:	1af2      	sublt	r2, r6, r3
 8016434:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8016436:	bfb6      	itet	lt
 8016438:	189b      	addlt	r3, r3, r2
 801643a:	1b9e      	subge	r6, r3, r6
 801643c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801643e:	9b03      	ldr	r3, [sp, #12]
 8016440:	bfb8      	it	lt
 8016442:	2600      	movlt	r6, #0
 8016444:	2b00      	cmp	r3, #0
 8016446:	bfb7      	itett	lt
 8016448:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801644c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8016450:	1a9d      	sublt	r5, r3, r2
 8016452:	2300      	movlt	r3, #0
 8016454:	e734      	b.n	80162c0 <_dtoa_r+0x720>
 8016456:	9e07      	ldr	r6, [sp, #28]
 8016458:	9d04      	ldr	r5, [sp, #16]
 801645a:	9f08      	ldr	r7, [sp, #32]
 801645c:	e73b      	b.n	80162d6 <_dtoa_r+0x736>
 801645e:	9a07      	ldr	r2, [sp, #28]
 8016460:	e767      	b.n	8016332 <_dtoa_r+0x792>
 8016462:	9b06      	ldr	r3, [sp, #24]
 8016464:	2b01      	cmp	r3, #1
 8016466:	dc18      	bgt.n	801649a <_dtoa_r+0x8fa>
 8016468:	f1ba 0f00 	cmp.w	sl, #0
 801646c:	d115      	bne.n	801649a <_dtoa_r+0x8fa>
 801646e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016472:	b993      	cbnz	r3, 801649a <_dtoa_r+0x8fa>
 8016474:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016478:	0d1b      	lsrs	r3, r3, #20
 801647a:	051b      	lsls	r3, r3, #20
 801647c:	b183      	cbz	r3, 80164a0 <_dtoa_r+0x900>
 801647e:	9b04      	ldr	r3, [sp, #16]
 8016480:	3301      	adds	r3, #1
 8016482:	9304      	str	r3, [sp, #16]
 8016484:	9b05      	ldr	r3, [sp, #20]
 8016486:	3301      	adds	r3, #1
 8016488:	9305      	str	r3, [sp, #20]
 801648a:	f04f 0801 	mov.w	r8, #1
 801648e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016490:	2b00      	cmp	r3, #0
 8016492:	f47f af6a 	bne.w	801636a <_dtoa_r+0x7ca>
 8016496:	2001      	movs	r0, #1
 8016498:	e76f      	b.n	801637a <_dtoa_r+0x7da>
 801649a:	f04f 0800 	mov.w	r8, #0
 801649e:	e7f6      	b.n	801648e <_dtoa_r+0x8ee>
 80164a0:	4698      	mov	r8, r3
 80164a2:	e7f4      	b.n	801648e <_dtoa_r+0x8ee>
 80164a4:	f43f af7d 	beq.w	80163a2 <_dtoa_r+0x802>
 80164a8:	4618      	mov	r0, r3
 80164aa:	301c      	adds	r0, #28
 80164ac:	e772      	b.n	8016394 <_dtoa_r+0x7f4>
 80164ae:	9b03      	ldr	r3, [sp, #12]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	dc37      	bgt.n	8016524 <_dtoa_r+0x984>
 80164b4:	9b06      	ldr	r3, [sp, #24]
 80164b6:	2b02      	cmp	r3, #2
 80164b8:	dd34      	ble.n	8016524 <_dtoa_r+0x984>
 80164ba:	9b03      	ldr	r3, [sp, #12]
 80164bc:	9302      	str	r3, [sp, #8]
 80164be:	9b02      	ldr	r3, [sp, #8]
 80164c0:	b96b      	cbnz	r3, 80164de <_dtoa_r+0x93e>
 80164c2:	4631      	mov	r1, r6
 80164c4:	2205      	movs	r2, #5
 80164c6:	4620      	mov	r0, r4
 80164c8:	f000 fe28 	bl	801711c <__multadd>
 80164cc:	4601      	mov	r1, r0
 80164ce:	4606      	mov	r6, r0
 80164d0:	ee18 0a10 	vmov	r0, s16
 80164d4:	f001 f88c 	bl	80175f0 <__mcmp>
 80164d8:	2800      	cmp	r0, #0
 80164da:	f73f adbb 	bgt.w	8016054 <_dtoa_r+0x4b4>
 80164de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164e0:	9d01      	ldr	r5, [sp, #4]
 80164e2:	43db      	mvns	r3, r3
 80164e4:	9300      	str	r3, [sp, #0]
 80164e6:	f04f 0800 	mov.w	r8, #0
 80164ea:	4631      	mov	r1, r6
 80164ec:	4620      	mov	r0, r4
 80164ee:	f000 fdf3 	bl	80170d8 <_Bfree>
 80164f2:	2f00      	cmp	r7, #0
 80164f4:	f43f aea4 	beq.w	8016240 <_dtoa_r+0x6a0>
 80164f8:	f1b8 0f00 	cmp.w	r8, #0
 80164fc:	d005      	beq.n	801650a <_dtoa_r+0x96a>
 80164fe:	45b8      	cmp	r8, r7
 8016500:	d003      	beq.n	801650a <_dtoa_r+0x96a>
 8016502:	4641      	mov	r1, r8
 8016504:	4620      	mov	r0, r4
 8016506:	f000 fde7 	bl	80170d8 <_Bfree>
 801650a:	4639      	mov	r1, r7
 801650c:	4620      	mov	r0, r4
 801650e:	f000 fde3 	bl	80170d8 <_Bfree>
 8016512:	e695      	b.n	8016240 <_dtoa_r+0x6a0>
 8016514:	2600      	movs	r6, #0
 8016516:	4637      	mov	r7, r6
 8016518:	e7e1      	b.n	80164de <_dtoa_r+0x93e>
 801651a:	9700      	str	r7, [sp, #0]
 801651c:	4637      	mov	r7, r6
 801651e:	e599      	b.n	8016054 <_dtoa_r+0x4b4>
 8016520:	40240000 	.word	0x40240000
 8016524:	9b08      	ldr	r3, [sp, #32]
 8016526:	2b00      	cmp	r3, #0
 8016528:	f000 80ca 	beq.w	80166c0 <_dtoa_r+0xb20>
 801652c:	9b03      	ldr	r3, [sp, #12]
 801652e:	9302      	str	r3, [sp, #8]
 8016530:	2d00      	cmp	r5, #0
 8016532:	dd05      	ble.n	8016540 <_dtoa_r+0x9a0>
 8016534:	4639      	mov	r1, r7
 8016536:	462a      	mov	r2, r5
 8016538:	4620      	mov	r0, r4
 801653a:	f000 ffe9 	bl	8017510 <__lshift>
 801653e:	4607      	mov	r7, r0
 8016540:	f1b8 0f00 	cmp.w	r8, #0
 8016544:	d05b      	beq.n	80165fe <_dtoa_r+0xa5e>
 8016546:	6879      	ldr	r1, [r7, #4]
 8016548:	4620      	mov	r0, r4
 801654a:	f000 fd85 	bl	8017058 <_Balloc>
 801654e:	4605      	mov	r5, r0
 8016550:	b928      	cbnz	r0, 801655e <_dtoa_r+0x9be>
 8016552:	4b87      	ldr	r3, [pc, #540]	; (8016770 <_dtoa_r+0xbd0>)
 8016554:	4602      	mov	r2, r0
 8016556:	f240 21ea 	movw	r1, #746	; 0x2ea
 801655a:	f7ff bb3b 	b.w	8015bd4 <_dtoa_r+0x34>
 801655e:	693a      	ldr	r2, [r7, #16]
 8016560:	3202      	adds	r2, #2
 8016562:	0092      	lsls	r2, r2, #2
 8016564:	f107 010c 	add.w	r1, r7, #12
 8016568:	300c      	adds	r0, #12
 801656a:	f7fd fd42 	bl	8013ff2 <memcpy>
 801656e:	2201      	movs	r2, #1
 8016570:	4629      	mov	r1, r5
 8016572:	4620      	mov	r0, r4
 8016574:	f000 ffcc 	bl	8017510 <__lshift>
 8016578:	9b01      	ldr	r3, [sp, #4]
 801657a:	f103 0901 	add.w	r9, r3, #1
 801657e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8016582:	4413      	add	r3, r2
 8016584:	9305      	str	r3, [sp, #20]
 8016586:	f00a 0301 	and.w	r3, sl, #1
 801658a:	46b8      	mov	r8, r7
 801658c:	9304      	str	r3, [sp, #16]
 801658e:	4607      	mov	r7, r0
 8016590:	4631      	mov	r1, r6
 8016592:	ee18 0a10 	vmov	r0, s16
 8016596:	f7ff fa75 	bl	8015a84 <quorem>
 801659a:	4641      	mov	r1, r8
 801659c:	9002      	str	r0, [sp, #8]
 801659e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80165a2:	ee18 0a10 	vmov	r0, s16
 80165a6:	f001 f823 	bl	80175f0 <__mcmp>
 80165aa:	463a      	mov	r2, r7
 80165ac:	9003      	str	r0, [sp, #12]
 80165ae:	4631      	mov	r1, r6
 80165b0:	4620      	mov	r0, r4
 80165b2:	f001 f839 	bl	8017628 <__mdiff>
 80165b6:	68c2      	ldr	r2, [r0, #12]
 80165b8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80165bc:	4605      	mov	r5, r0
 80165be:	bb02      	cbnz	r2, 8016602 <_dtoa_r+0xa62>
 80165c0:	4601      	mov	r1, r0
 80165c2:	ee18 0a10 	vmov	r0, s16
 80165c6:	f001 f813 	bl	80175f0 <__mcmp>
 80165ca:	4602      	mov	r2, r0
 80165cc:	4629      	mov	r1, r5
 80165ce:	4620      	mov	r0, r4
 80165d0:	9207      	str	r2, [sp, #28]
 80165d2:	f000 fd81 	bl	80170d8 <_Bfree>
 80165d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80165da:	ea43 0102 	orr.w	r1, r3, r2
 80165de:	9b04      	ldr	r3, [sp, #16]
 80165e0:	430b      	orrs	r3, r1
 80165e2:	464d      	mov	r5, r9
 80165e4:	d10f      	bne.n	8016606 <_dtoa_r+0xa66>
 80165e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80165ea:	d02a      	beq.n	8016642 <_dtoa_r+0xaa2>
 80165ec:	9b03      	ldr	r3, [sp, #12]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	dd02      	ble.n	80165f8 <_dtoa_r+0xa58>
 80165f2:	9b02      	ldr	r3, [sp, #8]
 80165f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80165f8:	f88b a000 	strb.w	sl, [fp]
 80165fc:	e775      	b.n	80164ea <_dtoa_r+0x94a>
 80165fe:	4638      	mov	r0, r7
 8016600:	e7ba      	b.n	8016578 <_dtoa_r+0x9d8>
 8016602:	2201      	movs	r2, #1
 8016604:	e7e2      	b.n	80165cc <_dtoa_r+0xa2c>
 8016606:	9b03      	ldr	r3, [sp, #12]
 8016608:	2b00      	cmp	r3, #0
 801660a:	db04      	blt.n	8016616 <_dtoa_r+0xa76>
 801660c:	9906      	ldr	r1, [sp, #24]
 801660e:	430b      	orrs	r3, r1
 8016610:	9904      	ldr	r1, [sp, #16]
 8016612:	430b      	orrs	r3, r1
 8016614:	d122      	bne.n	801665c <_dtoa_r+0xabc>
 8016616:	2a00      	cmp	r2, #0
 8016618:	ddee      	ble.n	80165f8 <_dtoa_r+0xa58>
 801661a:	ee18 1a10 	vmov	r1, s16
 801661e:	2201      	movs	r2, #1
 8016620:	4620      	mov	r0, r4
 8016622:	f000 ff75 	bl	8017510 <__lshift>
 8016626:	4631      	mov	r1, r6
 8016628:	ee08 0a10 	vmov	s16, r0
 801662c:	f000 ffe0 	bl	80175f0 <__mcmp>
 8016630:	2800      	cmp	r0, #0
 8016632:	dc03      	bgt.n	801663c <_dtoa_r+0xa9c>
 8016634:	d1e0      	bne.n	80165f8 <_dtoa_r+0xa58>
 8016636:	f01a 0f01 	tst.w	sl, #1
 801663a:	d0dd      	beq.n	80165f8 <_dtoa_r+0xa58>
 801663c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016640:	d1d7      	bne.n	80165f2 <_dtoa_r+0xa52>
 8016642:	2339      	movs	r3, #57	; 0x39
 8016644:	f88b 3000 	strb.w	r3, [fp]
 8016648:	462b      	mov	r3, r5
 801664a:	461d      	mov	r5, r3
 801664c:	3b01      	subs	r3, #1
 801664e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016652:	2a39      	cmp	r2, #57	; 0x39
 8016654:	d071      	beq.n	801673a <_dtoa_r+0xb9a>
 8016656:	3201      	adds	r2, #1
 8016658:	701a      	strb	r2, [r3, #0]
 801665a:	e746      	b.n	80164ea <_dtoa_r+0x94a>
 801665c:	2a00      	cmp	r2, #0
 801665e:	dd07      	ble.n	8016670 <_dtoa_r+0xad0>
 8016660:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016664:	d0ed      	beq.n	8016642 <_dtoa_r+0xaa2>
 8016666:	f10a 0301 	add.w	r3, sl, #1
 801666a:	f88b 3000 	strb.w	r3, [fp]
 801666e:	e73c      	b.n	80164ea <_dtoa_r+0x94a>
 8016670:	9b05      	ldr	r3, [sp, #20]
 8016672:	f809 ac01 	strb.w	sl, [r9, #-1]
 8016676:	4599      	cmp	r9, r3
 8016678:	d047      	beq.n	801670a <_dtoa_r+0xb6a>
 801667a:	ee18 1a10 	vmov	r1, s16
 801667e:	2300      	movs	r3, #0
 8016680:	220a      	movs	r2, #10
 8016682:	4620      	mov	r0, r4
 8016684:	f000 fd4a 	bl	801711c <__multadd>
 8016688:	45b8      	cmp	r8, r7
 801668a:	ee08 0a10 	vmov	s16, r0
 801668e:	f04f 0300 	mov.w	r3, #0
 8016692:	f04f 020a 	mov.w	r2, #10
 8016696:	4641      	mov	r1, r8
 8016698:	4620      	mov	r0, r4
 801669a:	d106      	bne.n	80166aa <_dtoa_r+0xb0a>
 801669c:	f000 fd3e 	bl	801711c <__multadd>
 80166a0:	4680      	mov	r8, r0
 80166a2:	4607      	mov	r7, r0
 80166a4:	f109 0901 	add.w	r9, r9, #1
 80166a8:	e772      	b.n	8016590 <_dtoa_r+0x9f0>
 80166aa:	f000 fd37 	bl	801711c <__multadd>
 80166ae:	4639      	mov	r1, r7
 80166b0:	4680      	mov	r8, r0
 80166b2:	2300      	movs	r3, #0
 80166b4:	220a      	movs	r2, #10
 80166b6:	4620      	mov	r0, r4
 80166b8:	f000 fd30 	bl	801711c <__multadd>
 80166bc:	4607      	mov	r7, r0
 80166be:	e7f1      	b.n	80166a4 <_dtoa_r+0xb04>
 80166c0:	9b03      	ldr	r3, [sp, #12]
 80166c2:	9302      	str	r3, [sp, #8]
 80166c4:	9d01      	ldr	r5, [sp, #4]
 80166c6:	ee18 0a10 	vmov	r0, s16
 80166ca:	4631      	mov	r1, r6
 80166cc:	f7ff f9da 	bl	8015a84 <quorem>
 80166d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80166d4:	9b01      	ldr	r3, [sp, #4]
 80166d6:	f805 ab01 	strb.w	sl, [r5], #1
 80166da:	1aea      	subs	r2, r5, r3
 80166dc:	9b02      	ldr	r3, [sp, #8]
 80166de:	4293      	cmp	r3, r2
 80166e0:	dd09      	ble.n	80166f6 <_dtoa_r+0xb56>
 80166e2:	ee18 1a10 	vmov	r1, s16
 80166e6:	2300      	movs	r3, #0
 80166e8:	220a      	movs	r2, #10
 80166ea:	4620      	mov	r0, r4
 80166ec:	f000 fd16 	bl	801711c <__multadd>
 80166f0:	ee08 0a10 	vmov	s16, r0
 80166f4:	e7e7      	b.n	80166c6 <_dtoa_r+0xb26>
 80166f6:	9b02      	ldr	r3, [sp, #8]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	bfc8      	it	gt
 80166fc:	461d      	movgt	r5, r3
 80166fe:	9b01      	ldr	r3, [sp, #4]
 8016700:	bfd8      	it	le
 8016702:	2501      	movle	r5, #1
 8016704:	441d      	add	r5, r3
 8016706:	f04f 0800 	mov.w	r8, #0
 801670a:	ee18 1a10 	vmov	r1, s16
 801670e:	2201      	movs	r2, #1
 8016710:	4620      	mov	r0, r4
 8016712:	f000 fefd 	bl	8017510 <__lshift>
 8016716:	4631      	mov	r1, r6
 8016718:	ee08 0a10 	vmov	s16, r0
 801671c:	f000 ff68 	bl	80175f0 <__mcmp>
 8016720:	2800      	cmp	r0, #0
 8016722:	dc91      	bgt.n	8016648 <_dtoa_r+0xaa8>
 8016724:	d102      	bne.n	801672c <_dtoa_r+0xb8c>
 8016726:	f01a 0f01 	tst.w	sl, #1
 801672a:	d18d      	bne.n	8016648 <_dtoa_r+0xaa8>
 801672c:	462b      	mov	r3, r5
 801672e:	461d      	mov	r5, r3
 8016730:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016734:	2a30      	cmp	r2, #48	; 0x30
 8016736:	d0fa      	beq.n	801672e <_dtoa_r+0xb8e>
 8016738:	e6d7      	b.n	80164ea <_dtoa_r+0x94a>
 801673a:	9a01      	ldr	r2, [sp, #4]
 801673c:	429a      	cmp	r2, r3
 801673e:	d184      	bne.n	801664a <_dtoa_r+0xaaa>
 8016740:	9b00      	ldr	r3, [sp, #0]
 8016742:	3301      	adds	r3, #1
 8016744:	9300      	str	r3, [sp, #0]
 8016746:	2331      	movs	r3, #49	; 0x31
 8016748:	7013      	strb	r3, [r2, #0]
 801674a:	e6ce      	b.n	80164ea <_dtoa_r+0x94a>
 801674c:	4b09      	ldr	r3, [pc, #36]	; (8016774 <_dtoa_r+0xbd4>)
 801674e:	f7ff ba95 	b.w	8015c7c <_dtoa_r+0xdc>
 8016752:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016754:	2b00      	cmp	r3, #0
 8016756:	f47f aa6e 	bne.w	8015c36 <_dtoa_r+0x96>
 801675a:	4b07      	ldr	r3, [pc, #28]	; (8016778 <_dtoa_r+0xbd8>)
 801675c:	f7ff ba8e 	b.w	8015c7c <_dtoa_r+0xdc>
 8016760:	9b02      	ldr	r3, [sp, #8]
 8016762:	2b00      	cmp	r3, #0
 8016764:	dcae      	bgt.n	80166c4 <_dtoa_r+0xb24>
 8016766:	9b06      	ldr	r3, [sp, #24]
 8016768:	2b02      	cmp	r3, #2
 801676a:	f73f aea8 	bgt.w	80164be <_dtoa_r+0x91e>
 801676e:	e7a9      	b.n	80166c4 <_dtoa_r+0xb24>
 8016770:	0801a477 	.word	0x0801a477
 8016774:	0801a380 	.word	0x0801a380
 8016778:	0801a3f8 	.word	0x0801a3f8

0801677c <__sflush_r>:
 801677c:	898a      	ldrh	r2, [r1, #12]
 801677e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016782:	4605      	mov	r5, r0
 8016784:	0710      	lsls	r0, r2, #28
 8016786:	460c      	mov	r4, r1
 8016788:	d458      	bmi.n	801683c <__sflush_r+0xc0>
 801678a:	684b      	ldr	r3, [r1, #4]
 801678c:	2b00      	cmp	r3, #0
 801678e:	dc05      	bgt.n	801679c <__sflush_r+0x20>
 8016790:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016792:	2b00      	cmp	r3, #0
 8016794:	dc02      	bgt.n	801679c <__sflush_r+0x20>
 8016796:	2000      	movs	r0, #0
 8016798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801679c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801679e:	2e00      	cmp	r6, #0
 80167a0:	d0f9      	beq.n	8016796 <__sflush_r+0x1a>
 80167a2:	2300      	movs	r3, #0
 80167a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80167a8:	682f      	ldr	r7, [r5, #0]
 80167aa:	602b      	str	r3, [r5, #0]
 80167ac:	d032      	beq.n	8016814 <__sflush_r+0x98>
 80167ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80167b0:	89a3      	ldrh	r3, [r4, #12]
 80167b2:	075a      	lsls	r2, r3, #29
 80167b4:	d505      	bpl.n	80167c2 <__sflush_r+0x46>
 80167b6:	6863      	ldr	r3, [r4, #4]
 80167b8:	1ac0      	subs	r0, r0, r3
 80167ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80167bc:	b10b      	cbz	r3, 80167c2 <__sflush_r+0x46>
 80167be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80167c0:	1ac0      	subs	r0, r0, r3
 80167c2:	2300      	movs	r3, #0
 80167c4:	4602      	mov	r2, r0
 80167c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80167c8:	6a21      	ldr	r1, [r4, #32]
 80167ca:	4628      	mov	r0, r5
 80167cc:	47b0      	blx	r6
 80167ce:	1c43      	adds	r3, r0, #1
 80167d0:	89a3      	ldrh	r3, [r4, #12]
 80167d2:	d106      	bne.n	80167e2 <__sflush_r+0x66>
 80167d4:	6829      	ldr	r1, [r5, #0]
 80167d6:	291d      	cmp	r1, #29
 80167d8:	d82c      	bhi.n	8016834 <__sflush_r+0xb8>
 80167da:	4a2a      	ldr	r2, [pc, #168]	; (8016884 <__sflush_r+0x108>)
 80167dc:	40ca      	lsrs	r2, r1
 80167de:	07d6      	lsls	r6, r2, #31
 80167e0:	d528      	bpl.n	8016834 <__sflush_r+0xb8>
 80167e2:	2200      	movs	r2, #0
 80167e4:	6062      	str	r2, [r4, #4]
 80167e6:	04d9      	lsls	r1, r3, #19
 80167e8:	6922      	ldr	r2, [r4, #16]
 80167ea:	6022      	str	r2, [r4, #0]
 80167ec:	d504      	bpl.n	80167f8 <__sflush_r+0x7c>
 80167ee:	1c42      	adds	r2, r0, #1
 80167f0:	d101      	bne.n	80167f6 <__sflush_r+0x7a>
 80167f2:	682b      	ldr	r3, [r5, #0]
 80167f4:	b903      	cbnz	r3, 80167f8 <__sflush_r+0x7c>
 80167f6:	6560      	str	r0, [r4, #84]	; 0x54
 80167f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80167fa:	602f      	str	r7, [r5, #0]
 80167fc:	2900      	cmp	r1, #0
 80167fe:	d0ca      	beq.n	8016796 <__sflush_r+0x1a>
 8016800:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016804:	4299      	cmp	r1, r3
 8016806:	d002      	beq.n	801680e <__sflush_r+0x92>
 8016808:	4628      	mov	r0, r5
 801680a:	f001 f8fd 	bl	8017a08 <_free_r>
 801680e:	2000      	movs	r0, #0
 8016810:	6360      	str	r0, [r4, #52]	; 0x34
 8016812:	e7c1      	b.n	8016798 <__sflush_r+0x1c>
 8016814:	6a21      	ldr	r1, [r4, #32]
 8016816:	2301      	movs	r3, #1
 8016818:	4628      	mov	r0, r5
 801681a:	47b0      	blx	r6
 801681c:	1c41      	adds	r1, r0, #1
 801681e:	d1c7      	bne.n	80167b0 <__sflush_r+0x34>
 8016820:	682b      	ldr	r3, [r5, #0]
 8016822:	2b00      	cmp	r3, #0
 8016824:	d0c4      	beq.n	80167b0 <__sflush_r+0x34>
 8016826:	2b1d      	cmp	r3, #29
 8016828:	d001      	beq.n	801682e <__sflush_r+0xb2>
 801682a:	2b16      	cmp	r3, #22
 801682c:	d101      	bne.n	8016832 <__sflush_r+0xb6>
 801682e:	602f      	str	r7, [r5, #0]
 8016830:	e7b1      	b.n	8016796 <__sflush_r+0x1a>
 8016832:	89a3      	ldrh	r3, [r4, #12]
 8016834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016838:	81a3      	strh	r3, [r4, #12]
 801683a:	e7ad      	b.n	8016798 <__sflush_r+0x1c>
 801683c:	690f      	ldr	r7, [r1, #16]
 801683e:	2f00      	cmp	r7, #0
 8016840:	d0a9      	beq.n	8016796 <__sflush_r+0x1a>
 8016842:	0793      	lsls	r3, r2, #30
 8016844:	680e      	ldr	r6, [r1, #0]
 8016846:	bf08      	it	eq
 8016848:	694b      	ldreq	r3, [r1, #20]
 801684a:	600f      	str	r7, [r1, #0]
 801684c:	bf18      	it	ne
 801684e:	2300      	movne	r3, #0
 8016850:	eba6 0807 	sub.w	r8, r6, r7
 8016854:	608b      	str	r3, [r1, #8]
 8016856:	f1b8 0f00 	cmp.w	r8, #0
 801685a:	dd9c      	ble.n	8016796 <__sflush_r+0x1a>
 801685c:	6a21      	ldr	r1, [r4, #32]
 801685e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016860:	4643      	mov	r3, r8
 8016862:	463a      	mov	r2, r7
 8016864:	4628      	mov	r0, r5
 8016866:	47b0      	blx	r6
 8016868:	2800      	cmp	r0, #0
 801686a:	dc06      	bgt.n	801687a <__sflush_r+0xfe>
 801686c:	89a3      	ldrh	r3, [r4, #12]
 801686e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016872:	81a3      	strh	r3, [r4, #12]
 8016874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016878:	e78e      	b.n	8016798 <__sflush_r+0x1c>
 801687a:	4407      	add	r7, r0
 801687c:	eba8 0800 	sub.w	r8, r8, r0
 8016880:	e7e9      	b.n	8016856 <__sflush_r+0xda>
 8016882:	bf00      	nop
 8016884:	20400001 	.word	0x20400001

08016888 <_fflush_r>:
 8016888:	b538      	push	{r3, r4, r5, lr}
 801688a:	690b      	ldr	r3, [r1, #16]
 801688c:	4605      	mov	r5, r0
 801688e:	460c      	mov	r4, r1
 8016890:	b913      	cbnz	r3, 8016898 <_fflush_r+0x10>
 8016892:	2500      	movs	r5, #0
 8016894:	4628      	mov	r0, r5
 8016896:	bd38      	pop	{r3, r4, r5, pc}
 8016898:	b118      	cbz	r0, 80168a2 <_fflush_r+0x1a>
 801689a:	6983      	ldr	r3, [r0, #24]
 801689c:	b90b      	cbnz	r3, 80168a2 <_fflush_r+0x1a>
 801689e:	f7fd fa37 	bl	8013d10 <__sinit>
 80168a2:	4b14      	ldr	r3, [pc, #80]	; (80168f4 <_fflush_r+0x6c>)
 80168a4:	429c      	cmp	r4, r3
 80168a6:	d11b      	bne.n	80168e0 <_fflush_r+0x58>
 80168a8:	686c      	ldr	r4, [r5, #4]
 80168aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d0ef      	beq.n	8016892 <_fflush_r+0xa>
 80168b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80168b4:	07d0      	lsls	r0, r2, #31
 80168b6:	d404      	bmi.n	80168c2 <_fflush_r+0x3a>
 80168b8:	0599      	lsls	r1, r3, #22
 80168ba:	d402      	bmi.n	80168c2 <_fflush_r+0x3a>
 80168bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80168be:	f7fd fb96 	bl	8013fee <__retarget_lock_acquire_recursive>
 80168c2:	4628      	mov	r0, r5
 80168c4:	4621      	mov	r1, r4
 80168c6:	f7ff ff59 	bl	801677c <__sflush_r>
 80168ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80168cc:	07da      	lsls	r2, r3, #31
 80168ce:	4605      	mov	r5, r0
 80168d0:	d4e0      	bmi.n	8016894 <_fflush_r+0xc>
 80168d2:	89a3      	ldrh	r3, [r4, #12]
 80168d4:	059b      	lsls	r3, r3, #22
 80168d6:	d4dd      	bmi.n	8016894 <_fflush_r+0xc>
 80168d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80168da:	f7fd fb89 	bl	8013ff0 <__retarget_lock_release_recursive>
 80168de:	e7d9      	b.n	8016894 <_fflush_r+0xc>
 80168e0:	4b05      	ldr	r3, [pc, #20]	; (80168f8 <_fflush_r+0x70>)
 80168e2:	429c      	cmp	r4, r3
 80168e4:	d101      	bne.n	80168ea <_fflush_r+0x62>
 80168e6:	68ac      	ldr	r4, [r5, #8]
 80168e8:	e7df      	b.n	80168aa <_fflush_r+0x22>
 80168ea:	4b04      	ldr	r3, [pc, #16]	; (80168fc <_fflush_r+0x74>)
 80168ec:	429c      	cmp	r4, r3
 80168ee:	bf08      	it	eq
 80168f0:	68ec      	ldreq	r4, [r5, #12]
 80168f2:	e7da      	b.n	80168aa <_fflush_r+0x22>
 80168f4:	0801a32c 	.word	0x0801a32c
 80168f8:	0801a34c 	.word	0x0801a34c
 80168fc:	0801a30c 	.word	0x0801a30c

08016900 <rshift>:
 8016900:	6903      	ldr	r3, [r0, #16]
 8016902:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016906:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801690a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801690e:	f100 0414 	add.w	r4, r0, #20
 8016912:	dd45      	ble.n	80169a0 <rshift+0xa0>
 8016914:	f011 011f 	ands.w	r1, r1, #31
 8016918:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801691c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016920:	d10c      	bne.n	801693c <rshift+0x3c>
 8016922:	f100 0710 	add.w	r7, r0, #16
 8016926:	4629      	mov	r1, r5
 8016928:	42b1      	cmp	r1, r6
 801692a:	d334      	bcc.n	8016996 <rshift+0x96>
 801692c:	1a9b      	subs	r3, r3, r2
 801692e:	009b      	lsls	r3, r3, #2
 8016930:	1eea      	subs	r2, r5, #3
 8016932:	4296      	cmp	r6, r2
 8016934:	bf38      	it	cc
 8016936:	2300      	movcc	r3, #0
 8016938:	4423      	add	r3, r4
 801693a:	e015      	b.n	8016968 <rshift+0x68>
 801693c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016940:	f1c1 0820 	rsb	r8, r1, #32
 8016944:	40cf      	lsrs	r7, r1
 8016946:	f105 0e04 	add.w	lr, r5, #4
 801694a:	46a1      	mov	r9, r4
 801694c:	4576      	cmp	r6, lr
 801694e:	46f4      	mov	ip, lr
 8016950:	d815      	bhi.n	801697e <rshift+0x7e>
 8016952:	1a9a      	subs	r2, r3, r2
 8016954:	0092      	lsls	r2, r2, #2
 8016956:	3a04      	subs	r2, #4
 8016958:	3501      	adds	r5, #1
 801695a:	42ae      	cmp	r6, r5
 801695c:	bf38      	it	cc
 801695e:	2200      	movcc	r2, #0
 8016960:	18a3      	adds	r3, r4, r2
 8016962:	50a7      	str	r7, [r4, r2]
 8016964:	b107      	cbz	r7, 8016968 <rshift+0x68>
 8016966:	3304      	adds	r3, #4
 8016968:	1b1a      	subs	r2, r3, r4
 801696a:	42a3      	cmp	r3, r4
 801696c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016970:	bf08      	it	eq
 8016972:	2300      	moveq	r3, #0
 8016974:	6102      	str	r2, [r0, #16]
 8016976:	bf08      	it	eq
 8016978:	6143      	streq	r3, [r0, #20]
 801697a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801697e:	f8dc c000 	ldr.w	ip, [ip]
 8016982:	fa0c fc08 	lsl.w	ip, ip, r8
 8016986:	ea4c 0707 	orr.w	r7, ip, r7
 801698a:	f849 7b04 	str.w	r7, [r9], #4
 801698e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016992:	40cf      	lsrs	r7, r1
 8016994:	e7da      	b.n	801694c <rshift+0x4c>
 8016996:	f851 cb04 	ldr.w	ip, [r1], #4
 801699a:	f847 cf04 	str.w	ip, [r7, #4]!
 801699e:	e7c3      	b.n	8016928 <rshift+0x28>
 80169a0:	4623      	mov	r3, r4
 80169a2:	e7e1      	b.n	8016968 <rshift+0x68>

080169a4 <__hexdig_fun>:
 80169a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80169a8:	2b09      	cmp	r3, #9
 80169aa:	d802      	bhi.n	80169b2 <__hexdig_fun+0xe>
 80169ac:	3820      	subs	r0, #32
 80169ae:	b2c0      	uxtb	r0, r0
 80169b0:	4770      	bx	lr
 80169b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80169b6:	2b05      	cmp	r3, #5
 80169b8:	d801      	bhi.n	80169be <__hexdig_fun+0x1a>
 80169ba:	3847      	subs	r0, #71	; 0x47
 80169bc:	e7f7      	b.n	80169ae <__hexdig_fun+0xa>
 80169be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80169c2:	2b05      	cmp	r3, #5
 80169c4:	d801      	bhi.n	80169ca <__hexdig_fun+0x26>
 80169c6:	3827      	subs	r0, #39	; 0x27
 80169c8:	e7f1      	b.n	80169ae <__hexdig_fun+0xa>
 80169ca:	2000      	movs	r0, #0
 80169cc:	4770      	bx	lr
	...

080169d0 <__gethex>:
 80169d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169d4:	ed2d 8b02 	vpush	{d8}
 80169d8:	b089      	sub	sp, #36	; 0x24
 80169da:	ee08 0a10 	vmov	s16, r0
 80169de:	9304      	str	r3, [sp, #16]
 80169e0:	4bb4      	ldr	r3, [pc, #720]	; (8016cb4 <__gethex+0x2e4>)
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	9301      	str	r3, [sp, #4]
 80169e6:	4618      	mov	r0, r3
 80169e8:	468b      	mov	fp, r1
 80169ea:	4690      	mov	r8, r2
 80169ec:	f7e9 fbfa 	bl	80001e4 <strlen>
 80169f0:	9b01      	ldr	r3, [sp, #4]
 80169f2:	f8db 2000 	ldr.w	r2, [fp]
 80169f6:	4403      	add	r3, r0
 80169f8:	4682      	mov	sl, r0
 80169fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80169fe:	9305      	str	r3, [sp, #20]
 8016a00:	1c93      	adds	r3, r2, #2
 8016a02:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016a06:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016a0a:	32fe      	adds	r2, #254	; 0xfe
 8016a0c:	18d1      	adds	r1, r2, r3
 8016a0e:	461f      	mov	r7, r3
 8016a10:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016a14:	9100      	str	r1, [sp, #0]
 8016a16:	2830      	cmp	r0, #48	; 0x30
 8016a18:	d0f8      	beq.n	8016a0c <__gethex+0x3c>
 8016a1a:	f7ff ffc3 	bl	80169a4 <__hexdig_fun>
 8016a1e:	4604      	mov	r4, r0
 8016a20:	2800      	cmp	r0, #0
 8016a22:	d13a      	bne.n	8016a9a <__gethex+0xca>
 8016a24:	9901      	ldr	r1, [sp, #4]
 8016a26:	4652      	mov	r2, sl
 8016a28:	4638      	mov	r0, r7
 8016a2a:	f7fe f8e9 	bl	8014c00 <strncmp>
 8016a2e:	4605      	mov	r5, r0
 8016a30:	2800      	cmp	r0, #0
 8016a32:	d168      	bne.n	8016b06 <__gethex+0x136>
 8016a34:	f817 000a 	ldrb.w	r0, [r7, sl]
 8016a38:	eb07 060a 	add.w	r6, r7, sl
 8016a3c:	f7ff ffb2 	bl	80169a4 <__hexdig_fun>
 8016a40:	2800      	cmp	r0, #0
 8016a42:	d062      	beq.n	8016b0a <__gethex+0x13a>
 8016a44:	4633      	mov	r3, r6
 8016a46:	7818      	ldrb	r0, [r3, #0]
 8016a48:	2830      	cmp	r0, #48	; 0x30
 8016a4a:	461f      	mov	r7, r3
 8016a4c:	f103 0301 	add.w	r3, r3, #1
 8016a50:	d0f9      	beq.n	8016a46 <__gethex+0x76>
 8016a52:	f7ff ffa7 	bl	80169a4 <__hexdig_fun>
 8016a56:	2301      	movs	r3, #1
 8016a58:	fab0 f480 	clz	r4, r0
 8016a5c:	0964      	lsrs	r4, r4, #5
 8016a5e:	4635      	mov	r5, r6
 8016a60:	9300      	str	r3, [sp, #0]
 8016a62:	463a      	mov	r2, r7
 8016a64:	4616      	mov	r6, r2
 8016a66:	3201      	adds	r2, #1
 8016a68:	7830      	ldrb	r0, [r6, #0]
 8016a6a:	f7ff ff9b 	bl	80169a4 <__hexdig_fun>
 8016a6e:	2800      	cmp	r0, #0
 8016a70:	d1f8      	bne.n	8016a64 <__gethex+0x94>
 8016a72:	9901      	ldr	r1, [sp, #4]
 8016a74:	4652      	mov	r2, sl
 8016a76:	4630      	mov	r0, r6
 8016a78:	f7fe f8c2 	bl	8014c00 <strncmp>
 8016a7c:	b980      	cbnz	r0, 8016aa0 <__gethex+0xd0>
 8016a7e:	b94d      	cbnz	r5, 8016a94 <__gethex+0xc4>
 8016a80:	eb06 050a 	add.w	r5, r6, sl
 8016a84:	462a      	mov	r2, r5
 8016a86:	4616      	mov	r6, r2
 8016a88:	3201      	adds	r2, #1
 8016a8a:	7830      	ldrb	r0, [r6, #0]
 8016a8c:	f7ff ff8a 	bl	80169a4 <__hexdig_fun>
 8016a90:	2800      	cmp	r0, #0
 8016a92:	d1f8      	bne.n	8016a86 <__gethex+0xb6>
 8016a94:	1bad      	subs	r5, r5, r6
 8016a96:	00ad      	lsls	r5, r5, #2
 8016a98:	e004      	b.n	8016aa4 <__gethex+0xd4>
 8016a9a:	2400      	movs	r4, #0
 8016a9c:	4625      	mov	r5, r4
 8016a9e:	e7e0      	b.n	8016a62 <__gethex+0x92>
 8016aa0:	2d00      	cmp	r5, #0
 8016aa2:	d1f7      	bne.n	8016a94 <__gethex+0xc4>
 8016aa4:	7833      	ldrb	r3, [r6, #0]
 8016aa6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016aaa:	2b50      	cmp	r3, #80	; 0x50
 8016aac:	d13b      	bne.n	8016b26 <__gethex+0x156>
 8016aae:	7873      	ldrb	r3, [r6, #1]
 8016ab0:	2b2b      	cmp	r3, #43	; 0x2b
 8016ab2:	d02c      	beq.n	8016b0e <__gethex+0x13e>
 8016ab4:	2b2d      	cmp	r3, #45	; 0x2d
 8016ab6:	d02e      	beq.n	8016b16 <__gethex+0x146>
 8016ab8:	1c71      	adds	r1, r6, #1
 8016aba:	f04f 0900 	mov.w	r9, #0
 8016abe:	7808      	ldrb	r0, [r1, #0]
 8016ac0:	f7ff ff70 	bl	80169a4 <__hexdig_fun>
 8016ac4:	1e43      	subs	r3, r0, #1
 8016ac6:	b2db      	uxtb	r3, r3
 8016ac8:	2b18      	cmp	r3, #24
 8016aca:	d82c      	bhi.n	8016b26 <__gethex+0x156>
 8016acc:	f1a0 0210 	sub.w	r2, r0, #16
 8016ad0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016ad4:	f7ff ff66 	bl	80169a4 <__hexdig_fun>
 8016ad8:	1e43      	subs	r3, r0, #1
 8016ada:	b2db      	uxtb	r3, r3
 8016adc:	2b18      	cmp	r3, #24
 8016ade:	d91d      	bls.n	8016b1c <__gethex+0x14c>
 8016ae0:	f1b9 0f00 	cmp.w	r9, #0
 8016ae4:	d000      	beq.n	8016ae8 <__gethex+0x118>
 8016ae6:	4252      	negs	r2, r2
 8016ae8:	4415      	add	r5, r2
 8016aea:	f8cb 1000 	str.w	r1, [fp]
 8016aee:	b1e4      	cbz	r4, 8016b2a <__gethex+0x15a>
 8016af0:	9b00      	ldr	r3, [sp, #0]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	bf14      	ite	ne
 8016af6:	2700      	movne	r7, #0
 8016af8:	2706      	moveq	r7, #6
 8016afa:	4638      	mov	r0, r7
 8016afc:	b009      	add	sp, #36	; 0x24
 8016afe:	ecbd 8b02 	vpop	{d8}
 8016b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b06:	463e      	mov	r6, r7
 8016b08:	4625      	mov	r5, r4
 8016b0a:	2401      	movs	r4, #1
 8016b0c:	e7ca      	b.n	8016aa4 <__gethex+0xd4>
 8016b0e:	f04f 0900 	mov.w	r9, #0
 8016b12:	1cb1      	adds	r1, r6, #2
 8016b14:	e7d3      	b.n	8016abe <__gethex+0xee>
 8016b16:	f04f 0901 	mov.w	r9, #1
 8016b1a:	e7fa      	b.n	8016b12 <__gethex+0x142>
 8016b1c:	230a      	movs	r3, #10
 8016b1e:	fb03 0202 	mla	r2, r3, r2, r0
 8016b22:	3a10      	subs	r2, #16
 8016b24:	e7d4      	b.n	8016ad0 <__gethex+0x100>
 8016b26:	4631      	mov	r1, r6
 8016b28:	e7df      	b.n	8016aea <__gethex+0x11a>
 8016b2a:	1bf3      	subs	r3, r6, r7
 8016b2c:	3b01      	subs	r3, #1
 8016b2e:	4621      	mov	r1, r4
 8016b30:	2b07      	cmp	r3, #7
 8016b32:	dc0b      	bgt.n	8016b4c <__gethex+0x17c>
 8016b34:	ee18 0a10 	vmov	r0, s16
 8016b38:	f000 fa8e 	bl	8017058 <_Balloc>
 8016b3c:	4604      	mov	r4, r0
 8016b3e:	b940      	cbnz	r0, 8016b52 <__gethex+0x182>
 8016b40:	4b5d      	ldr	r3, [pc, #372]	; (8016cb8 <__gethex+0x2e8>)
 8016b42:	4602      	mov	r2, r0
 8016b44:	21de      	movs	r1, #222	; 0xde
 8016b46:	485d      	ldr	r0, [pc, #372]	; (8016cbc <__gethex+0x2ec>)
 8016b48:	f001 f930 	bl	8017dac <__assert_func>
 8016b4c:	3101      	adds	r1, #1
 8016b4e:	105b      	asrs	r3, r3, #1
 8016b50:	e7ee      	b.n	8016b30 <__gethex+0x160>
 8016b52:	f100 0914 	add.w	r9, r0, #20
 8016b56:	f04f 0b00 	mov.w	fp, #0
 8016b5a:	f1ca 0301 	rsb	r3, sl, #1
 8016b5e:	f8cd 9008 	str.w	r9, [sp, #8]
 8016b62:	f8cd b000 	str.w	fp, [sp]
 8016b66:	9306      	str	r3, [sp, #24]
 8016b68:	42b7      	cmp	r7, r6
 8016b6a:	d340      	bcc.n	8016bee <__gethex+0x21e>
 8016b6c:	9802      	ldr	r0, [sp, #8]
 8016b6e:	9b00      	ldr	r3, [sp, #0]
 8016b70:	f840 3b04 	str.w	r3, [r0], #4
 8016b74:	eba0 0009 	sub.w	r0, r0, r9
 8016b78:	1080      	asrs	r0, r0, #2
 8016b7a:	0146      	lsls	r6, r0, #5
 8016b7c:	6120      	str	r0, [r4, #16]
 8016b7e:	4618      	mov	r0, r3
 8016b80:	f000 fb5c 	bl	801723c <__hi0bits>
 8016b84:	1a30      	subs	r0, r6, r0
 8016b86:	f8d8 6000 	ldr.w	r6, [r8]
 8016b8a:	42b0      	cmp	r0, r6
 8016b8c:	dd63      	ble.n	8016c56 <__gethex+0x286>
 8016b8e:	1b87      	subs	r7, r0, r6
 8016b90:	4639      	mov	r1, r7
 8016b92:	4620      	mov	r0, r4
 8016b94:	f000 ff00 	bl	8017998 <__any_on>
 8016b98:	4682      	mov	sl, r0
 8016b9a:	b1a8      	cbz	r0, 8016bc8 <__gethex+0x1f8>
 8016b9c:	1e7b      	subs	r3, r7, #1
 8016b9e:	1159      	asrs	r1, r3, #5
 8016ba0:	f003 021f 	and.w	r2, r3, #31
 8016ba4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8016ba8:	f04f 0a01 	mov.w	sl, #1
 8016bac:	fa0a f202 	lsl.w	r2, sl, r2
 8016bb0:	420a      	tst	r2, r1
 8016bb2:	d009      	beq.n	8016bc8 <__gethex+0x1f8>
 8016bb4:	4553      	cmp	r3, sl
 8016bb6:	dd05      	ble.n	8016bc4 <__gethex+0x1f4>
 8016bb8:	1eb9      	subs	r1, r7, #2
 8016bba:	4620      	mov	r0, r4
 8016bbc:	f000 feec 	bl	8017998 <__any_on>
 8016bc0:	2800      	cmp	r0, #0
 8016bc2:	d145      	bne.n	8016c50 <__gethex+0x280>
 8016bc4:	f04f 0a02 	mov.w	sl, #2
 8016bc8:	4639      	mov	r1, r7
 8016bca:	4620      	mov	r0, r4
 8016bcc:	f7ff fe98 	bl	8016900 <rshift>
 8016bd0:	443d      	add	r5, r7
 8016bd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016bd6:	42ab      	cmp	r3, r5
 8016bd8:	da4c      	bge.n	8016c74 <__gethex+0x2a4>
 8016bda:	ee18 0a10 	vmov	r0, s16
 8016bde:	4621      	mov	r1, r4
 8016be0:	f000 fa7a 	bl	80170d8 <_Bfree>
 8016be4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016be6:	2300      	movs	r3, #0
 8016be8:	6013      	str	r3, [r2, #0]
 8016bea:	27a3      	movs	r7, #163	; 0xa3
 8016bec:	e785      	b.n	8016afa <__gethex+0x12a>
 8016bee:	1e73      	subs	r3, r6, #1
 8016bf0:	9a05      	ldr	r2, [sp, #20]
 8016bf2:	9303      	str	r3, [sp, #12]
 8016bf4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016bf8:	4293      	cmp	r3, r2
 8016bfa:	d019      	beq.n	8016c30 <__gethex+0x260>
 8016bfc:	f1bb 0f20 	cmp.w	fp, #32
 8016c00:	d107      	bne.n	8016c12 <__gethex+0x242>
 8016c02:	9b02      	ldr	r3, [sp, #8]
 8016c04:	9a00      	ldr	r2, [sp, #0]
 8016c06:	f843 2b04 	str.w	r2, [r3], #4
 8016c0a:	9302      	str	r3, [sp, #8]
 8016c0c:	2300      	movs	r3, #0
 8016c0e:	9300      	str	r3, [sp, #0]
 8016c10:	469b      	mov	fp, r3
 8016c12:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016c16:	f7ff fec5 	bl	80169a4 <__hexdig_fun>
 8016c1a:	9b00      	ldr	r3, [sp, #0]
 8016c1c:	f000 000f 	and.w	r0, r0, #15
 8016c20:	fa00 f00b 	lsl.w	r0, r0, fp
 8016c24:	4303      	orrs	r3, r0
 8016c26:	9300      	str	r3, [sp, #0]
 8016c28:	f10b 0b04 	add.w	fp, fp, #4
 8016c2c:	9b03      	ldr	r3, [sp, #12]
 8016c2e:	e00d      	b.n	8016c4c <__gethex+0x27c>
 8016c30:	9b03      	ldr	r3, [sp, #12]
 8016c32:	9a06      	ldr	r2, [sp, #24]
 8016c34:	4413      	add	r3, r2
 8016c36:	42bb      	cmp	r3, r7
 8016c38:	d3e0      	bcc.n	8016bfc <__gethex+0x22c>
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	9901      	ldr	r1, [sp, #4]
 8016c3e:	9307      	str	r3, [sp, #28]
 8016c40:	4652      	mov	r2, sl
 8016c42:	f7fd ffdd 	bl	8014c00 <strncmp>
 8016c46:	9b07      	ldr	r3, [sp, #28]
 8016c48:	2800      	cmp	r0, #0
 8016c4a:	d1d7      	bne.n	8016bfc <__gethex+0x22c>
 8016c4c:	461e      	mov	r6, r3
 8016c4e:	e78b      	b.n	8016b68 <__gethex+0x198>
 8016c50:	f04f 0a03 	mov.w	sl, #3
 8016c54:	e7b8      	b.n	8016bc8 <__gethex+0x1f8>
 8016c56:	da0a      	bge.n	8016c6e <__gethex+0x29e>
 8016c58:	1a37      	subs	r7, r6, r0
 8016c5a:	4621      	mov	r1, r4
 8016c5c:	ee18 0a10 	vmov	r0, s16
 8016c60:	463a      	mov	r2, r7
 8016c62:	f000 fc55 	bl	8017510 <__lshift>
 8016c66:	1bed      	subs	r5, r5, r7
 8016c68:	4604      	mov	r4, r0
 8016c6a:	f100 0914 	add.w	r9, r0, #20
 8016c6e:	f04f 0a00 	mov.w	sl, #0
 8016c72:	e7ae      	b.n	8016bd2 <__gethex+0x202>
 8016c74:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016c78:	42a8      	cmp	r0, r5
 8016c7a:	dd72      	ble.n	8016d62 <__gethex+0x392>
 8016c7c:	1b45      	subs	r5, r0, r5
 8016c7e:	42ae      	cmp	r6, r5
 8016c80:	dc36      	bgt.n	8016cf0 <__gethex+0x320>
 8016c82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016c86:	2b02      	cmp	r3, #2
 8016c88:	d02a      	beq.n	8016ce0 <__gethex+0x310>
 8016c8a:	2b03      	cmp	r3, #3
 8016c8c:	d02c      	beq.n	8016ce8 <__gethex+0x318>
 8016c8e:	2b01      	cmp	r3, #1
 8016c90:	d11c      	bne.n	8016ccc <__gethex+0x2fc>
 8016c92:	42ae      	cmp	r6, r5
 8016c94:	d11a      	bne.n	8016ccc <__gethex+0x2fc>
 8016c96:	2e01      	cmp	r6, #1
 8016c98:	d112      	bne.n	8016cc0 <__gethex+0x2f0>
 8016c9a:	9a04      	ldr	r2, [sp, #16]
 8016c9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016ca0:	6013      	str	r3, [r2, #0]
 8016ca2:	2301      	movs	r3, #1
 8016ca4:	6123      	str	r3, [r4, #16]
 8016ca6:	f8c9 3000 	str.w	r3, [r9]
 8016caa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016cac:	2762      	movs	r7, #98	; 0x62
 8016cae:	601c      	str	r4, [r3, #0]
 8016cb0:	e723      	b.n	8016afa <__gethex+0x12a>
 8016cb2:	bf00      	nop
 8016cb4:	0801a4f0 	.word	0x0801a4f0
 8016cb8:	0801a477 	.word	0x0801a477
 8016cbc:	0801a488 	.word	0x0801a488
 8016cc0:	1e71      	subs	r1, r6, #1
 8016cc2:	4620      	mov	r0, r4
 8016cc4:	f000 fe68 	bl	8017998 <__any_on>
 8016cc8:	2800      	cmp	r0, #0
 8016cca:	d1e6      	bne.n	8016c9a <__gethex+0x2ca>
 8016ccc:	ee18 0a10 	vmov	r0, s16
 8016cd0:	4621      	mov	r1, r4
 8016cd2:	f000 fa01 	bl	80170d8 <_Bfree>
 8016cd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016cd8:	2300      	movs	r3, #0
 8016cda:	6013      	str	r3, [r2, #0]
 8016cdc:	2750      	movs	r7, #80	; 0x50
 8016cde:	e70c      	b.n	8016afa <__gethex+0x12a>
 8016ce0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d1f2      	bne.n	8016ccc <__gethex+0x2fc>
 8016ce6:	e7d8      	b.n	8016c9a <__gethex+0x2ca>
 8016ce8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d1d5      	bne.n	8016c9a <__gethex+0x2ca>
 8016cee:	e7ed      	b.n	8016ccc <__gethex+0x2fc>
 8016cf0:	1e6f      	subs	r7, r5, #1
 8016cf2:	f1ba 0f00 	cmp.w	sl, #0
 8016cf6:	d131      	bne.n	8016d5c <__gethex+0x38c>
 8016cf8:	b127      	cbz	r7, 8016d04 <__gethex+0x334>
 8016cfa:	4639      	mov	r1, r7
 8016cfc:	4620      	mov	r0, r4
 8016cfe:	f000 fe4b 	bl	8017998 <__any_on>
 8016d02:	4682      	mov	sl, r0
 8016d04:	117b      	asrs	r3, r7, #5
 8016d06:	2101      	movs	r1, #1
 8016d08:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016d0c:	f007 071f 	and.w	r7, r7, #31
 8016d10:	fa01 f707 	lsl.w	r7, r1, r7
 8016d14:	421f      	tst	r7, r3
 8016d16:	4629      	mov	r1, r5
 8016d18:	4620      	mov	r0, r4
 8016d1a:	bf18      	it	ne
 8016d1c:	f04a 0a02 	orrne.w	sl, sl, #2
 8016d20:	1b76      	subs	r6, r6, r5
 8016d22:	f7ff fded 	bl	8016900 <rshift>
 8016d26:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016d2a:	2702      	movs	r7, #2
 8016d2c:	f1ba 0f00 	cmp.w	sl, #0
 8016d30:	d048      	beq.n	8016dc4 <__gethex+0x3f4>
 8016d32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016d36:	2b02      	cmp	r3, #2
 8016d38:	d015      	beq.n	8016d66 <__gethex+0x396>
 8016d3a:	2b03      	cmp	r3, #3
 8016d3c:	d017      	beq.n	8016d6e <__gethex+0x39e>
 8016d3e:	2b01      	cmp	r3, #1
 8016d40:	d109      	bne.n	8016d56 <__gethex+0x386>
 8016d42:	f01a 0f02 	tst.w	sl, #2
 8016d46:	d006      	beq.n	8016d56 <__gethex+0x386>
 8016d48:	f8d9 0000 	ldr.w	r0, [r9]
 8016d4c:	ea4a 0a00 	orr.w	sl, sl, r0
 8016d50:	f01a 0f01 	tst.w	sl, #1
 8016d54:	d10e      	bne.n	8016d74 <__gethex+0x3a4>
 8016d56:	f047 0710 	orr.w	r7, r7, #16
 8016d5a:	e033      	b.n	8016dc4 <__gethex+0x3f4>
 8016d5c:	f04f 0a01 	mov.w	sl, #1
 8016d60:	e7d0      	b.n	8016d04 <__gethex+0x334>
 8016d62:	2701      	movs	r7, #1
 8016d64:	e7e2      	b.n	8016d2c <__gethex+0x35c>
 8016d66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016d68:	f1c3 0301 	rsb	r3, r3, #1
 8016d6c:	9315      	str	r3, [sp, #84]	; 0x54
 8016d6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d0f0      	beq.n	8016d56 <__gethex+0x386>
 8016d74:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016d78:	f104 0314 	add.w	r3, r4, #20
 8016d7c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016d80:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016d84:	f04f 0c00 	mov.w	ip, #0
 8016d88:	4618      	mov	r0, r3
 8016d8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d8e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8016d92:	d01c      	beq.n	8016dce <__gethex+0x3fe>
 8016d94:	3201      	adds	r2, #1
 8016d96:	6002      	str	r2, [r0, #0]
 8016d98:	2f02      	cmp	r7, #2
 8016d9a:	f104 0314 	add.w	r3, r4, #20
 8016d9e:	d13f      	bne.n	8016e20 <__gethex+0x450>
 8016da0:	f8d8 2000 	ldr.w	r2, [r8]
 8016da4:	3a01      	subs	r2, #1
 8016da6:	42b2      	cmp	r2, r6
 8016da8:	d10a      	bne.n	8016dc0 <__gethex+0x3f0>
 8016daa:	1171      	asrs	r1, r6, #5
 8016dac:	2201      	movs	r2, #1
 8016dae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016db2:	f006 061f 	and.w	r6, r6, #31
 8016db6:	fa02 f606 	lsl.w	r6, r2, r6
 8016dba:	421e      	tst	r6, r3
 8016dbc:	bf18      	it	ne
 8016dbe:	4617      	movne	r7, r2
 8016dc0:	f047 0720 	orr.w	r7, r7, #32
 8016dc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016dc6:	601c      	str	r4, [r3, #0]
 8016dc8:	9b04      	ldr	r3, [sp, #16]
 8016dca:	601d      	str	r5, [r3, #0]
 8016dcc:	e695      	b.n	8016afa <__gethex+0x12a>
 8016dce:	4299      	cmp	r1, r3
 8016dd0:	f843 cc04 	str.w	ip, [r3, #-4]
 8016dd4:	d8d8      	bhi.n	8016d88 <__gethex+0x3b8>
 8016dd6:	68a3      	ldr	r3, [r4, #8]
 8016dd8:	459b      	cmp	fp, r3
 8016dda:	db19      	blt.n	8016e10 <__gethex+0x440>
 8016ddc:	6861      	ldr	r1, [r4, #4]
 8016dde:	ee18 0a10 	vmov	r0, s16
 8016de2:	3101      	adds	r1, #1
 8016de4:	f000 f938 	bl	8017058 <_Balloc>
 8016de8:	4681      	mov	r9, r0
 8016dea:	b918      	cbnz	r0, 8016df4 <__gethex+0x424>
 8016dec:	4b1a      	ldr	r3, [pc, #104]	; (8016e58 <__gethex+0x488>)
 8016dee:	4602      	mov	r2, r0
 8016df0:	2184      	movs	r1, #132	; 0x84
 8016df2:	e6a8      	b.n	8016b46 <__gethex+0x176>
 8016df4:	6922      	ldr	r2, [r4, #16]
 8016df6:	3202      	adds	r2, #2
 8016df8:	f104 010c 	add.w	r1, r4, #12
 8016dfc:	0092      	lsls	r2, r2, #2
 8016dfe:	300c      	adds	r0, #12
 8016e00:	f7fd f8f7 	bl	8013ff2 <memcpy>
 8016e04:	4621      	mov	r1, r4
 8016e06:	ee18 0a10 	vmov	r0, s16
 8016e0a:	f000 f965 	bl	80170d8 <_Bfree>
 8016e0e:	464c      	mov	r4, r9
 8016e10:	6923      	ldr	r3, [r4, #16]
 8016e12:	1c5a      	adds	r2, r3, #1
 8016e14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016e18:	6122      	str	r2, [r4, #16]
 8016e1a:	2201      	movs	r2, #1
 8016e1c:	615a      	str	r2, [r3, #20]
 8016e1e:	e7bb      	b.n	8016d98 <__gethex+0x3c8>
 8016e20:	6922      	ldr	r2, [r4, #16]
 8016e22:	455a      	cmp	r2, fp
 8016e24:	dd0b      	ble.n	8016e3e <__gethex+0x46e>
 8016e26:	2101      	movs	r1, #1
 8016e28:	4620      	mov	r0, r4
 8016e2a:	f7ff fd69 	bl	8016900 <rshift>
 8016e2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016e32:	3501      	adds	r5, #1
 8016e34:	42ab      	cmp	r3, r5
 8016e36:	f6ff aed0 	blt.w	8016bda <__gethex+0x20a>
 8016e3a:	2701      	movs	r7, #1
 8016e3c:	e7c0      	b.n	8016dc0 <__gethex+0x3f0>
 8016e3e:	f016 061f 	ands.w	r6, r6, #31
 8016e42:	d0fa      	beq.n	8016e3a <__gethex+0x46a>
 8016e44:	4453      	add	r3, sl
 8016e46:	f1c6 0620 	rsb	r6, r6, #32
 8016e4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016e4e:	f000 f9f5 	bl	801723c <__hi0bits>
 8016e52:	42b0      	cmp	r0, r6
 8016e54:	dbe7      	blt.n	8016e26 <__gethex+0x456>
 8016e56:	e7f0      	b.n	8016e3a <__gethex+0x46a>
 8016e58:	0801a477 	.word	0x0801a477

08016e5c <L_shift>:
 8016e5c:	f1c2 0208 	rsb	r2, r2, #8
 8016e60:	0092      	lsls	r2, r2, #2
 8016e62:	b570      	push	{r4, r5, r6, lr}
 8016e64:	f1c2 0620 	rsb	r6, r2, #32
 8016e68:	6843      	ldr	r3, [r0, #4]
 8016e6a:	6804      	ldr	r4, [r0, #0]
 8016e6c:	fa03 f506 	lsl.w	r5, r3, r6
 8016e70:	432c      	orrs	r4, r5
 8016e72:	40d3      	lsrs	r3, r2
 8016e74:	6004      	str	r4, [r0, #0]
 8016e76:	f840 3f04 	str.w	r3, [r0, #4]!
 8016e7a:	4288      	cmp	r0, r1
 8016e7c:	d3f4      	bcc.n	8016e68 <L_shift+0xc>
 8016e7e:	bd70      	pop	{r4, r5, r6, pc}

08016e80 <__match>:
 8016e80:	b530      	push	{r4, r5, lr}
 8016e82:	6803      	ldr	r3, [r0, #0]
 8016e84:	3301      	adds	r3, #1
 8016e86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e8a:	b914      	cbnz	r4, 8016e92 <__match+0x12>
 8016e8c:	6003      	str	r3, [r0, #0]
 8016e8e:	2001      	movs	r0, #1
 8016e90:	bd30      	pop	{r4, r5, pc}
 8016e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016e96:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016e9a:	2d19      	cmp	r5, #25
 8016e9c:	bf98      	it	ls
 8016e9e:	3220      	addls	r2, #32
 8016ea0:	42a2      	cmp	r2, r4
 8016ea2:	d0f0      	beq.n	8016e86 <__match+0x6>
 8016ea4:	2000      	movs	r0, #0
 8016ea6:	e7f3      	b.n	8016e90 <__match+0x10>

08016ea8 <__hexnan>:
 8016ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016eac:	680b      	ldr	r3, [r1, #0]
 8016eae:	115e      	asrs	r6, r3, #5
 8016eb0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016eb4:	f013 031f 	ands.w	r3, r3, #31
 8016eb8:	b087      	sub	sp, #28
 8016eba:	bf18      	it	ne
 8016ebc:	3604      	addne	r6, #4
 8016ebe:	2500      	movs	r5, #0
 8016ec0:	1f37      	subs	r7, r6, #4
 8016ec2:	4690      	mov	r8, r2
 8016ec4:	6802      	ldr	r2, [r0, #0]
 8016ec6:	9301      	str	r3, [sp, #4]
 8016ec8:	4682      	mov	sl, r0
 8016eca:	f846 5c04 	str.w	r5, [r6, #-4]
 8016ece:	46b9      	mov	r9, r7
 8016ed0:	463c      	mov	r4, r7
 8016ed2:	9502      	str	r5, [sp, #8]
 8016ed4:	46ab      	mov	fp, r5
 8016ed6:	7851      	ldrb	r1, [r2, #1]
 8016ed8:	1c53      	adds	r3, r2, #1
 8016eda:	9303      	str	r3, [sp, #12]
 8016edc:	b341      	cbz	r1, 8016f30 <__hexnan+0x88>
 8016ede:	4608      	mov	r0, r1
 8016ee0:	9205      	str	r2, [sp, #20]
 8016ee2:	9104      	str	r1, [sp, #16]
 8016ee4:	f7ff fd5e 	bl	80169a4 <__hexdig_fun>
 8016ee8:	2800      	cmp	r0, #0
 8016eea:	d14f      	bne.n	8016f8c <__hexnan+0xe4>
 8016eec:	9904      	ldr	r1, [sp, #16]
 8016eee:	9a05      	ldr	r2, [sp, #20]
 8016ef0:	2920      	cmp	r1, #32
 8016ef2:	d818      	bhi.n	8016f26 <__hexnan+0x7e>
 8016ef4:	9b02      	ldr	r3, [sp, #8]
 8016ef6:	459b      	cmp	fp, r3
 8016ef8:	dd13      	ble.n	8016f22 <__hexnan+0x7a>
 8016efa:	454c      	cmp	r4, r9
 8016efc:	d206      	bcs.n	8016f0c <__hexnan+0x64>
 8016efe:	2d07      	cmp	r5, #7
 8016f00:	dc04      	bgt.n	8016f0c <__hexnan+0x64>
 8016f02:	462a      	mov	r2, r5
 8016f04:	4649      	mov	r1, r9
 8016f06:	4620      	mov	r0, r4
 8016f08:	f7ff ffa8 	bl	8016e5c <L_shift>
 8016f0c:	4544      	cmp	r4, r8
 8016f0e:	d950      	bls.n	8016fb2 <__hexnan+0x10a>
 8016f10:	2300      	movs	r3, #0
 8016f12:	f1a4 0904 	sub.w	r9, r4, #4
 8016f16:	f844 3c04 	str.w	r3, [r4, #-4]
 8016f1a:	f8cd b008 	str.w	fp, [sp, #8]
 8016f1e:	464c      	mov	r4, r9
 8016f20:	461d      	mov	r5, r3
 8016f22:	9a03      	ldr	r2, [sp, #12]
 8016f24:	e7d7      	b.n	8016ed6 <__hexnan+0x2e>
 8016f26:	2929      	cmp	r1, #41	; 0x29
 8016f28:	d156      	bne.n	8016fd8 <__hexnan+0x130>
 8016f2a:	3202      	adds	r2, #2
 8016f2c:	f8ca 2000 	str.w	r2, [sl]
 8016f30:	f1bb 0f00 	cmp.w	fp, #0
 8016f34:	d050      	beq.n	8016fd8 <__hexnan+0x130>
 8016f36:	454c      	cmp	r4, r9
 8016f38:	d206      	bcs.n	8016f48 <__hexnan+0xa0>
 8016f3a:	2d07      	cmp	r5, #7
 8016f3c:	dc04      	bgt.n	8016f48 <__hexnan+0xa0>
 8016f3e:	462a      	mov	r2, r5
 8016f40:	4649      	mov	r1, r9
 8016f42:	4620      	mov	r0, r4
 8016f44:	f7ff ff8a 	bl	8016e5c <L_shift>
 8016f48:	4544      	cmp	r4, r8
 8016f4a:	d934      	bls.n	8016fb6 <__hexnan+0x10e>
 8016f4c:	f1a8 0204 	sub.w	r2, r8, #4
 8016f50:	4623      	mov	r3, r4
 8016f52:	f853 1b04 	ldr.w	r1, [r3], #4
 8016f56:	f842 1f04 	str.w	r1, [r2, #4]!
 8016f5a:	429f      	cmp	r7, r3
 8016f5c:	d2f9      	bcs.n	8016f52 <__hexnan+0xaa>
 8016f5e:	1b3b      	subs	r3, r7, r4
 8016f60:	f023 0303 	bic.w	r3, r3, #3
 8016f64:	3304      	adds	r3, #4
 8016f66:	3401      	adds	r4, #1
 8016f68:	3e03      	subs	r6, #3
 8016f6a:	42b4      	cmp	r4, r6
 8016f6c:	bf88      	it	hi
 8016f6e:	2304      	movhi	r3, #4
 8016f70:	4443      	add	r3, r8
 8016f72:	2200      	movs	r2, #0
 8016f74:	f843 2b04 	str.w	r2, [r3], #4
 8016f78:	429f      	cmp	r7, r3
 8016f7a:	d2fb      	bcs.n	8016f74 <__hexnan+0xcc>
 8016f7c:	683b      	ldr	r3, [r7, #0]
 8016f7e:	b91b      	cbnz	r3, 8016f88 <__hexnan+0xe0>
 8016f80:	4547      	cmp	r7, r8
 8016f82:	d127      	bne.n	8016fd4 <__hexnan+0x12c>
 8016f84:	2301      	movs	r3, #1
 8016f86:	603b      	str	r3, [r7, #0]
 8016f88:	2005      	movs	r0, #5
 8016f8a:	e026      	b.n	8016fda <__hexnan+0x132>
 8016f8c:	3501      	adds	r5, #1
 8016f8e:	2d08      	cmp	r5, #8
 8016f90:	f10b 0b01 	add.w	fp, fp, #1
 8016f94:	dd06      	ble.n	8016fa4 <__hexnan+0xfc>
 8016f96:	4544      	cmp	r4, r8
 8016f98:	d9c3      	bls.n	8016f22 <__hexnan+0x7a>
 8016f9a:	2300      	movs	r3, #0
 8016f9c:	f844 3c04 	str.w	r3, [r4, #-4]
 8016fa0:	2501      	movs	r5, #1
 8016fa2:	3c04      	subs	r4, #4
 8016fa4:	6822      	ldr	r2, [r4, #0]
 8016fa6:	f000 000f 	and.w	r0, r0, #15
 8016faa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8016fae:	6022      	str	r2, [r4, #0]
 8016fb0:	e7b7      	b.n	8016f22 <__hexnan+0x7a>
 8016fb2:	2508      	movs	r5, #8
 8016fb4:	e7b5      	b.n	8016f22 <__hexnan+0x7a>
 8016fb6:	9b01      	ldr	r3, [sp, #4]
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d0df      	beq.n	8016f7c <__hexnan+0xd4>
 8016fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016fc0:	f1c3 0320 	rsb	r3, r3, #32
 8016fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8016fc8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016fcc:	401a      	ands	r2, r3
 8016fce:	f846 2c04 	str.w	r2, [r6, #-4]
 8016fd2:	e7d3      	b.n	8016f7c <__hexnan+0xd4>
 8016fd4:	3f04      	subs	r7, #4
 8016fd6:	e7d1      	b.n	8016f7c <__hexnan+0xd4>
 8016fd8:	2004      	movs	r0, #4
 8016fda:	b007      	add	sp, #28
 8016fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016fe0 <_localeconv_r>:
 8016fe0:	4800      	ldr	r0, [pc, #0]	; (8016fe4 <_localeconv_r+0x4>)
 8016fe2:	4770      	bx	lr
 8016fe4:	20000384 	.word	0x20000384

08016fe8 <_lseek_r>:
 8016fe8:	b538      	push	{r3, r4, r5, lr}
 8016fea:	4d07      	ldr	r5, [pc, #28]	; (8017008 <_lseek_r+0x20>)
 8016fec:	4604      	mov	r4, r0
 8016fee:	4608      	mov	r0, r1
 8016ff0:	4611      	mov	r1, r2
 8016ff2:	2200      	movs	r2, #0
 8016ff4:	602a      	str	r2, [r5, #0]
 8016ff6:	461a      	mov	r2, r3
 8016ff8:	f7f0 fb8a 	bl	8007710 <_lseek>
 8016ffc:	1c43      	adds	r3, r0, #1
 8016ffe:	d102      	bne.n	8017006 <_lseek_r+0x1e>
 8017000:	682b      	ldr	r3, [r5, #0]
 8017002:	b103      	cbz	r3, 8017006 <_lseek_r+0x1e>
 8017004:	6023      	str	r3, [r4, #0]
 8017006:	bd38      	pop	{r3, r4, r5, pc}
 8017008:	20008420 	.word	0x20008420

0801700c <malloc>:
 801700c:	4b02      	ldr	r3, [pc, #8]	; (8017018 <malloc+0xc>)
 801700e:	4601      	mov	r1, r0
 8017010:	6818      	ldr	r0, [r3, #0]
 8017012:	f7fd b825 	b.w	8014060 <_malloc_r>
 8017016:	bf00      	nop
 8017018:	2000022c 	.word	0x2000022c

0801701c <__ascii_mbtowc>:
 801701c:	b082      	sub	sp, #8
 801701e:	b901      	cbnz	r1, 8017022 <__ascii_mbtowc+0x6>
 8017020:	a901      	add	r1, sp, #4
 8017022:	b142      	cbz	r2, 8017036 <__ascii_mbtowc+0x1a>
 8017024:	b14b      	cbz	r3, 801703a <__ascii_mbtowc+0x1e>
 8017026:	7813      	ldrb	r3, [r2, #0]
 8017028:	600b      	str	r3, [r1, #0]
 801702a:	7812      	ldrb	r2, [r2, #0]
 801702c:	1e10      	subs	r0, r2, #0
 801702e:	bf18      	it	ne
 8017030:	2001      	movne	r0, #1
 8017032:	b002      	add	sp, #8
 8017034:	4770      	bx	lr
 8017036:	4610      	mov	r0, r2
 8017038:	e7fb      	b.n	8017032 <__ascii_mbtowc+0x16>
 801703a:	f06f 0001 	mvn.w	r0, #1
 801703e:	e7f8      	b.n	8017032 <__ascii_mbtowc+0x16>

08017040 <__malloc_lock>:
 8017040:	4801      	ldr	r0, [pc, #4]	; (8017048 <__malloc_lock+0x8>)
 8017042:	f7fc bfd4 	b.w	8013fee <__retarget_lock_acquire_recursive>
 8017046:	bf00      	nop
 8017048:	20008414 	.word	0x20008414

0801704c <__malloc_unlock>:
 801704c:	4801      	ldr	r0, [pc, #4]	; (8017054 <__malloc_unlock+0x8>)
 801704e:	f7fc bfcf 	b.w	8013ff0 <__retarget_lock_release_recursive>
 8017052:	bf00      	nop
 8017054:	20008414 	.word	0x20008414

08017058 <_Balloc>:
 8017058:	b570      	push	{r4, r5, r6, lr}
 801705a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801705c:	4604      	mov	r4, r0
 801705e:	460d      	mov	r5, r1
 8017060:	b976      	cbnz	r6, 8017080 <_Balloc+0x28>
 8017062:	2010      	movs	r0, #16
 8017064:	f7ff ffd2 	bl	801700c <malloc>
 8017068:	4602      	mov	r2, r0
 801706a:	6260      	str	r0, [r4, #36]	; 0x24
 801706c:	b920      	cbnz	r0, 8017078 <_Balloc+0x20>
 801706e:	4b18      	ldr	r3, [pc, #96]	; (80170d0 <_Balloc+0x78>)
 8017070:	4818      	ldr	r0, [pc, #96]	; (80170d4 <_Balloc+0x7c>)
 8017072:	2166      	movs	r1, #102	; 0x66
 8017074:	f000 fe9a 	bl	8017dac <__assert_func>
 8017078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801707c:	6006      	str	r6, [r0, #0]
 801707e:	60c6      	str	r6, [r0, #12]
 8017080:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017082:	68f3      	ldr	r3, [r6, #12]
 8017084:	b183      	cbz	r3, 80170a8 <_Balloc+0x50>
 8017086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017088:	68db      	ldr	r3, [r3, #12]
 801708a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801708e:	b9b8      	cbnz	r0, 80170c0 <_Balloc+0x68>
 8017090:	2101      	movs	r1, #1
 8017092:	fa01 f605 	lsl.w	r6, r1, r5
 8017096:	1d72      	adds	r2, r6, #5
 8017098:	0092      	lsls	r2, r2, #2
 801709a:	4620      	mov	r0, r4
 801709c:	f000 fc9d 	bl	80179da <_calloc_r>
 80170a0:	b160      	cbz	r0, 80170bc <_Balloc+0x64>
 80170a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80170a6:	e00e      	b.n	80170c6 <_Balloc+0x6e>
 80170a8:	2221      	movs	r2, #33	; 0x21
 80170aa:	2104      	movs	r1, #4
 80170ac:	4620      	mov	r0, r4
 80170ae:	f000 fc94 	bl	80179da <_calloc_r>
 80170b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80170b4:	60f0      	str	r0, [r6, #12]
 80170b6:	68db      	ldr	r3, [r3, #12]
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d1e4      	bne.n	8017086 <_Balloc+0x2e>
 80170bc:	2000      	movs	r0, #0
 80170be:	bd70      	pop	{r4, r5, r6, pc}
 80170c0:	6802      	ldr	r2, [r0, #0]
 80170c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80170c6:	2300      	movs	r3, #0
 80170c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80170cc:	e7f7      	b.n	80170be <_Balloc+0x66>
 80170ce:	bf00      	nop
 80170d0:	0801a405 	.word	0x0801a405
 80170d4:	0801a504 	.word	0x0801a504

080170d8 <_Bfree>:
 80170d8:	b570      	push	{r4, r5, r6, lr}
 80170da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80170dc:	4605      	mov	r5, r0
 80170de:	460c      	mov	r4, r1
 80170e0:	b976      	cbnz	r6, 8017100 <_Bfree+0x28>
 80170e2:	2010      	movs	r0, #16
 80170e4:	f7ff ff92 	bl	801700c <malloc>
 80170e8:	4602      	mov	r2, r0
 80170ea:	6268      	str	r0, [r5, #36]	; 0x24
 80170ec:	b920      	cbnz	r0, 80170f8 <_Bfree+0x20>
 80170ee:	4b09      	ldr	r3, [pc, #36]	; (8017114 <_Bfree+0x3c>)
 80170f0:	4809      	ldr	r0, [pc, #36]	; (8017118 <_Bfree+0x40>)
 80170f2:	218a      	movs	r1, #138	; 0x8a
 80170f4:	f000 fe5a 	bl	8017dac <__assert_func>
 80170f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80170fc:	6006      	str	r6, [r0, #0]
 80170fe:	60c6      	str	r6, [r0, #12]
 8017100:	b13c      	cbz	r4, 8017112 <_Bfree+0x3a>
 8017102:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017104:	6862      	ldr	r2, [r4, #4]
 8017106:	68db      	ldr	r3, [r3, #12]
 8017108:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801710c:	6021      	str	r1, [r4, #0]
 801710e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017112:	bd70      	pop	{r4, r5, r6, pc}
 8017114:	0801a405 	.word	0x0801a405
 8017118:	0801a504 	.word	0x0801a504

0801711c <__multadd>:
 801711c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017120:	690d      	ldr	r5, [r1, #16]
 8017122:	4607      	mov	r7, r0
 8017124:	460c      	mov	r4, r1
 8017126:	461e      	mov	r6, r3
 8017128:	f101 0c14 	add.w	ip, r1, #20
 801712c:	2000      	movs	r0, #0
 801712e:	f8dc 3000 	ldr.w	r3, [ip]
 8017132:	b299      	uxth	r1, r3
 8017134:	fb02 6101 	mla	r1, r2, r1, r6
 8017138:	0c1e      	lsrs	r6, r3, #16
 801713a:	0c0b      	lsrs	r3, r1, #16
 801713c:	fb02 3306 	mla	r3, r2, r6, r3
 8017140:	b289      	uxth	r1, r1
 8017142:	3001      	adds	r0, #1
 8017144:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017148:	4285      	cmp	r5, r0
 801714a:	f84c 1b04 	str.w	r1, [ip], #4
 801714e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017152:	dcec      	bgt.n	801712e <__multadd+0x12>
 8017154:	b30e      	cbz	r6, 801719a <__multadd+0x7e>
 8017156:	68a3      	ldr	r3, [r4, #8]
 8017158:	42ab      	cmp	r3, r5
 801715a:	dc19      	bgt.n	8017190 <__multadd+0x74>
 801715c:	6861      	ldr	r1, [r4, #4]
 801715e:	4638      	mov	r0, r7
 8017160:	3101      	adds	r1, #1
 8017162:	f7ff ff79 	bl	8017058 <_Balloc>
 8017166:	4680      	mov	r8, r0
 8017168:	b928      	cbnz	r0, 8017176 <__multadd+0x5a>
 801716a:	4602      	mov	r2, r0
 801716c:	4b0c      	ldr	r3, [pc, #48]	; (80171a0 <__multadd+0x84>)
 801716e:	480d      	ldr	r0, [pc, #52]	; (80171a4 <__multadd+0x88>)
 8017170:	21b5      	movs	r1, #181	; 0xb5
 8017172:	f000 fe1b 	bl	8017dac <__assert_func>
 8017176:	6922      	ldr	r2, [r4, #16]
 8017178:	3202      	adds	r2, #2
 801717a:	f104 010c 	add.w	r1, r4, #12
 801717e:	0092      	lsls	r2, r2, #2
 8017180:	300c      	adds	r0, #12
 8017182:	f7fc ff36 	bl	8013ff2 <memcpy>
 8017186:	4621      	mov	r1, r4
 8017188:	4638      	mov	r0, r7
 801718a:	f7ff ffa5 	bl	80170d8 <_Bfree>
 801718e:	4644      	mov	r4, r8
 8017190:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017194:	3501      	adds	r5, #1
 8017196:	615e      	str	r6, [r3, #20]
 8017198:	6125      	str	r5, [r4, #16]
 801719a:	4620      	mov	r0, r4
 801719c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171a0:	0801a477 	.word	0x0801a477
 80171a4:	0801a504 	.word	0x0801a504

080171a8 <__s2b>:
 80171a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171ac:	460c      	mov	r4, r1
 80171ae:	4615      	mov	r5, r2
 80171b0:	461f      	mov	r7, r3
 80171b2:	2209      	movs	r2, #9
 80171b4:	3308      	adds	r3, #8
 80171b6:	4606      	mov	r6, r0
 80171b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80171bc:	2100      	movs	r1, #0
 80171be:	2201      	movs	r2, #1
 80171c0:	429a      	cmp	r2, r3
 80171c2:	db09      	blt.n	80171d8 <__s2b+0x30>
 80171c4:	4630      	mov	r0, r6
 80171c6:	f7ff ff47 	bl	8017058 <_Balloc>
 80171ca:	b940      	cbnz	r0, 80171de <__s2b+0x36>
 80171cc:	4602      	mov	r2, r0
 80171ce:	4b19      	ldr	r3, [pc, #100]	; (8017234 <__s2b+0x8c>)
 80171d0:	4819      	ldr	r0, [pc, #100]	; (8017238 <__s2b+0x90>)
 80171d2:	21ce      	movs	r1, #206	; 0xce
 80171d4:	f000 fdea 	bl	8017dac <__assert_func>
 80171d8:	0052      	lsls	r2, r2, #1
 80171da:	3101      	adds	r1, #1
 80171dc:	e7f0      	b.n	80171c0 <__s2b+0x18>
 80171de:	9b08      	ldr	r3, [sp, #32]
 80171e0:	6143      	str	r3, [r0, #20]
 80171e2:	2d09      	cmp	r5, #9
 80171e4:	f04f 0301 	mov.w	r3, #1
 80171e8:	6103      	str	r3, [r0, #16]
 80171ea:	dd16      	ble.n	801721a <__s2b+0x72>
 80171ec:	f104 0909 	add.w	r9, r4, #9
 80171f0:	46c8      	mov	r8, r9
 80171f2:	442c      	add	r4, r5
 80171f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80171f8:	4601      	mov	r1, r0
 80171fa:	3b30      	subs	r3, #48	; 0x30
 80171fc:	220a      	movs	r2, #10
 80171fe:	4630      	mov	r0, r6
 8017200:	f7ff ff8c 	bl	801711c <__multadd>
 8017204:	45a0      	cmp	r8, r4
 8017206:	d1f5      	bne.n	80171f4 <__s2b+0x4c>
 8017208:	f1a5 0408 	sub.w	r4, r5, #8
 801720c:	444c      	add	r4, r9
 801720e:	1b2d      	subs	r5, r5, r4
 8017210:	1963      	adds	r3, r4, r5
 8017212:	42bb      	cmp	r3, r7
 8017214:	db04      	blt.n	8017220 <__s2b+0x78>
 8017216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801721a:	340a      	adds	r4, #10
 801721c:	2509      	movs	r5, #9
 801721e:	e7f6      	b.n	801720e <__s2b+0x66>
 8017220:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017224:	4601      	mov	r1, r0
 8017226:	3b30      	subs	r3, #48	; 0x30
 8017228:	220a      	movs	r2, #10
 801722a:	4630      	mov	r0, r6
 801722c:	f7ff ff76 	bl	801711c <__multadd>
 8017230:	e7ee      	b.n	8017210 <__s2b+0x68>
 8017232:	bf00      	nop
 8017234:	0801a477 	.word	0x0801a477
 8017238:	0801a504 	.word	0x0801a504

0801723c <__hi0bits>:
 801723c:	0c03      	lsrs	r3, r0, #16
 801723e:	041b      	lsls	r3, r3, #16
 8017240:	b9d3      	cbnz	r3, 8017278 <__hi0bits+0x3c>
 8017242:	0400      	lsls	r0, r0, #16
 8017244:	2310      	movs	r3, #16
 8017246:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801724a:	bf04      	itt	eq
 801724c:	0200      	lsleq	r0, r0, #8
 801724e:	3308      	addeq	r3, #8
 8017250:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017254:	bf04      	itt	eq
 8017256:	0100      	lsleq	r0, r0, #4
 8017258:	3304      	addeq	r3, #4
 801725a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801725e:	bf04      	itt	eq
 8017260:	0080      	lsleq	r0, r0, #2
 8017262:	3302      	addeq	r3, #2
 8017264:	2800      	cmp	r0, #0
 8017266:	db05      	blt.n	8017274 <__hi0bits+0x38>
 8017268:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801726c:	f103 0301 	add.w	r3, r3, #1
 8017270:	bf08      	it	eq
 8017272:	2320      	moveq	r3, #32
 8017274:	4618      	mov	r0, r3
 8017276:	4770      	bx	lr
 8017278:	2300      	movs	r3, #0
 801727a:	e7e4      	b.n	8017246 <__hi0bits+0xa>

0801727c <__lo0bits>:
 801727c:	6803      	ldr	r3, [r0, #0]
 801727e:	f013 0207 	ands.w	r2, r3, #7
 8017282:	4601      	mov	r1, r0
 8017284:	d00b      	beq.n	801729e <__lo0bits+0x22>
 8017286:	07da      	lsls	r2, r3, #31
 8017288:	d423      	bmi.n	80172d2 <__lo0bits+0x56>
 801728a:	0798      	lsls	r0, r3, #30
 801728c:	bf49      	itett	mi
 801728e:	085b      	lsrmi	r3, r3, #1
 8017290:	089b      	lsrpl	r3, r3, #2
 8017292:	2001      	movmi	r0, #1
 8017294:	600b      	strmi	r3, [r1, #0]
 8017296:	bf5c      	itt	pl
 8017298:	600b      	strpl	r3, [r1, #0]
 801729a:	2002      	movpl	r0, #2
 801729c:	4770      	bx	lr
 801729e:	b298      	uxth	r0, r3
 80172a0:	b9a8      	cbnz	r0, 80172ce <__lo0bits+0x52>
 80172a2:	0c1b      	lsrs	r3, r3, #16
 80172a4:	2010      	movs	r0, #16
 80172a6:	b2da      	uxtb	r2, r3
 80172a8:	b90a      	cbnz	r2, 80172ae <__lo0bits+0x32>
 80172aa:	3008      	adds	r0, #8
 80172ac:	0a1b      	lsrs	r3, r3, #8
 80172ae:	071a      	lsls	r2, r3, #28
 80172b0:	bf04      	itt	eq
 80172b2:	091b      	lsreq	r3, r3, #4
 80172b4:	3004      	addeq	r0, #4
 80172b6:	079a      	lsls	r2, r3, #30
 80172b8:	bf04      	itt	eq
 80172ba:	089b      	lsreq	r3, r3, #2
 80172bc:	3002      	addeq	r0, #2
 80172be:	07da      	lsls	r2, r3, #31
 80172c0:	d403      	bmi.n	80172ca <__lo0bits+0x4e>
 80172c2:	085b      	lsrs	r3, r3, #1
 80172c4:	f100 0001 	add.w	r0, r0, #1
 80172c8:	d005      	beq.n	80172d6 <__lo0bits+0x5a>
 80172ca:	600b      	str	r3, [r1, #0]
 80172cc:	4770      	bx	lr
 80172ce:	4610      	mov	r0, r2
 80172d0:	e7e9      	b.n	80172a6 <__lo0bits+0x2a>
 80172d2:	2000      	movs	r0, #0
 80172d4:	4770      	bx	lr
 80172d6:	2020      	movs	r0, #32
 80172d8:	4770      	bx	lr
	...

080172dc <__i2b>:
 80172dc:	b510      	push	{r4, lr}
 80172de:	460c      	mov	r4, r1
 80172e0:	2101      	movs	r1, #1
 80172e2:	f7ff feb9 	bl	8017058 <_Balloc>
 80172e6:	4602      	mov	r2, r0
 80172e8:	b928      	cbnz	r0, 80172f6 <__i2b+0x1a>
 80172ea:	4b05      	ldr	r3, [pc, #20]	; (8017300 <__i2b+0x24>)
 80172ec:	4805      	ldr	r0, [pc, #20]	; (8017304 <__i2b+0x28>)
 80172ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80172f2:	f000 fd5b 	bl	8017dac <__assert_func>
 80172f6:	2301      	movs	r3, #1
 80172f8:	6144      	str	r4, [r0, #20]
 80172fa:	6103      	str	r3, [r0, #16]
 80172fc:	bd10      	pop	{r4, pc}
 80172fe:	bf00      	nop
 8017300:	0801a477 	.word	0x0801a477
 8017304:	0801a504 	.word	0x0801a504

08017308 <__multiply>:
 8017308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801730c:	4691      	mov	r9, r2
 801730e:	690a      	ldr	r2, [r1, #16]
 8017310:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017314:	429a      	cmp	r2, r3
 8017316:	bfb8      	it	lt
 8017318:	460b      	movlt	r3, r1
 801731a:	460c      	mov	r4, r1
 801731c:	bfbc      	itt	lt
 801731e:	464c      	movlt	r4, r9
 8017320:	4699      	movlt	r9, r3
 8017322:	6927      	ldr	r7, [r4, #16]
 8017324:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017328:	68a3      	ldr	r3, [r4, #8]
 801732a:	6861      	ldr	r1, [r4, #4]
 801732c:	eb07 060a 	add.w	r6, r7, sl
 8017330:	42b3      	cmp	r3, r6
 8017332:	b085      	sub	sp, #20
 8017334:	bfb8      	it	lt
 8017336:	3101      	addlt	r1, #1
 8017338:	f7ff fe8e 	bl	8017058 <_Balloc>
 801733c:	b930      	cbnz	r0, 801734c <__multiply+0x44>
 801733e:	4602      	mov	r2, r0
 8017340:	4b44      	ldr	r3, [pc, #272]	; (8017454 <__multiply+0x14c>)
 8017342:	4845      	ldr	r0, [pc, #276]	; (8017458 <__multiply+0x150>)
 8017344:	f240 115d 	movw	r1, #349	; 0x15d
 8017348:	f000 fd30 	bl	8017dac <__assert_func>
 801734c:	f100 0514 	add.w	r5, r0, #20
 8017350:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017354:	462b      	mov	r3, r5
 8017356:	2200      	movs	r2, #0
 8017358:	4543      	cmp	r3, r8
 801735a:	d321      	bcc.n	80173a0 <__multiply+0x98>
 801735c:	f104 0314 	add.w	r3, r4, #20
 8017360:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017364:	f109 0314 	add.w	r3, r9, #20
 8017368:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801736c:	9202      	str	r2, [sp, #8]
 801736e:	1b3a      	subs	r2, r7, r4
 8017370:	3a15      	subs	r2, #21
 8017372:	f022 0203 	bic.w	r2, r2, #3
 8017376:	3204      	adds	r2, #4
 8017378:	f104 0115 	add.w	r1, r4, #21
 801737c:	428f      	cmp	r7, r1
 801737e:	bf38      	it	cc
 8017380:	2204      	movcc	r2, #4
 8017382:	9201      	str	r2, [sp, #4]
 8017384:	9a02      	ldr	r2, [sp, #8]
 8017386:	9303      	str	r3, [sp, #12]
 8017388:	429a      	cmp	r2, r3
 801738a:	d80c      	bhi.n	80173a6 <__multiply+0x9e>
 801738c:	2e00      	cmp	r6, #0
 801738e:	dd03      	ble.n	8017398 <__multiply+0x90>
 8017390:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017394:	2b00      	cmp	r3, #0
 8017396:	d05a      	beq.n	801744e <__multiply+0x146>
 8017398:	6106      	str	r6, [r0, #16]
 801739a:	b005      	add	sp, #20
 801739c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173a0:	f843 2b04 	str.w	r2, [r3], #4
 80173a4:	e7d8      	b.n	8017358 <__multiply+0x50>
 80173a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80173aa:	f1ba 0f00 	cmp.w	sl, #0
 80173ae:	d024      	beq.n	80173fa <__multiply+0xf2>
 80173b0:	f104 0e14 	add.w	lr, r4, #20
 80173b4:	46a9      	mov	r9, r5
 80173b6:	f04f 0c00 	mov.w	ip, #0
 80173ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 80173be:	f8d9 1000 	ldr.w	r1, [r9]
 80173c2:	fa1f fb82 	uxth.w	fp, r2
 80173c6:	b289      	uxth	r1, r1
 80173c8:	fb0a 110b 	mla	r1, sl, fp, r1
 80173cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80173d0:	f8d9 2000 	ldr.w	r2, [r9]
 80173d4:	4461      	add	r1, ip
 80173d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80173da:	fb0a c20b 	mla	r2, sl, fp, ip
 80173de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80173e2:	b289      	uxth	r1, r1
 80173e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80173e8:	4577      	cmp	r7, lr
 80173ea:	f849 1b04 	str.w	r1, [r9], #4
 80173ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80173f2:	d8e2      	bhi.n	80173ba <__multiply+0xb2>
 80173f4:	9a01      	ldr	r2, [sp, #4]
 80173f6:	f845 c002 	str.w	ip, [r5, r2]
 80173fa:	9a03      	ldr	r2, [sp, #12]
 80173fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017400:	3304      	adds	r3, #4
 8017402:	f1b9 0f00 	cmp.w	r9, #0
 8017406:	d020      	beq.n	801744a <__multiply+0x142>
 8017408:	6829      	ldr	r1, [r5, #0]
 801740a:	f104 0c14 	add.w	ip, r4, #20
 801740e:	46ae      	mov	lr, r5
 8017410:	f04f 0a00 	mov.w	sl, #0
 8017414:	f8bc b000 	ldrh.w	fp, [ip]
 8017418:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801741c:	fb09 220b 	mla	r2, r9, fp, r2
 8017420:	4492      	add	sl, r2
 8017422:	b289      	uxth	r1, r1
 8017424:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8017428:	f84e 1b04 	str.w	r1, [lr], #4
 801742c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8017430:	f8be 1000 	ldrh.w	r1, [lr]
 8017434:	0c12      	lsrs	r2, r2, #16
 8017436:	fb09 1102 	mla	r1, r9, r2, r1
 801743a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801743e:	4567      	cmp	r7, ip
 8017440:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017444:	d8e6      	bhi.n	8017414 <__multiply+0x10c>
 8017446:	9a01      	ldr	r2, [sp, #4]
 8017448:	50a9      	str	r1, [r5, r2]
 801744a:	3504      	adds	r5, #4
 801744c:	e79a      	b.n	8017384 <__multiply+0x7c>
 801744e:	3e01      	subs	r6, #1
 8017450:	e79c      	b.n	801738c <__multiply+0x84>
 8017452:	bf00      	nop
 8017454:	0801a477 	.word	0x0801a477
 8017458:	0801a504 	.word	0x0801a504

0801745c <__pow5mult>:
 801745c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017460:	4615      	mov	r5, r2
 8017462:	f012 0203 	ands.w	r2, r2, #3
 8017466:	4606      	mov	r6, r0
 8017468:	460f      	mov	r7, r1
 801746a:	d007      	beq.n	801747c <__pow5mult+0x20>
 801746c:	4c25      	ldr	r4, [pc, #148]	; (8017504 <__pow5mult+0xa8>)
 801746e:	3a01      	subs	r2, #1
 8017470:	2300      	movs	r3, #0
 8017472:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017476:	f7ff fe51 	bl	801711c <__multadd>
 801747a:	4607      	mov	r7, r0
 801747c:	10ad      	asrs	r5, r5, #2
 801747e:	d03d      	beq.n	80174fc <__pow5mult+0xa0>
 8017480:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017482:	b97c      	cbnz	r4, 80174a4 <__pow5mult+0x48>
 8017484:	2010      	movs	r0, #16
 8017486:	f7ff fdc1 	bl	801700c <malloc>
 801748a:	4602      	mov	r2, r0
 801748c:	6270      	str	r0, [r6, #36]	; 0x24
 801748e:	b928      	cbnz	r0, 801749c <__pow5mult+0x40>
 8017490:	4b1d      	ldr	r3, [pc, #116]	; (8017508 <__pow5mult+0xac>)
 8017492:	481e      	ldr	r0, [pc, #120]	; (801750c <__pow5mult+0xb0>)
 8017494:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8017498:	f000 fc88 	bl	8017dac <__assert_func>
 801749c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80174a0:	6004      	str	r4, [r0, #0]
 80174a2:	60c4      	str	r4, [r0, #12]
 80174a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80174a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80174ac:	b94c      	cbnz	r4, 80174c2 <__pow5mult+0x66>
 80174ae:	f240 2171 	movw	r1, #625	; 0x271
 80174b2:	4630      	mov	r0, r6
 80174b4:	f7ff ff12 	bl	80172dc <__i2b>
 80174b8:	2300      	movs	r3, #0
 80174ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80174be:	4604      	mov	r4, r0
 80174c0:	6003      	str	r3, [r0, #0]
 80174c2:	f04f 0900 	mov.w	r9, #0
 80174c6:	07eb      	lsls	r3, r5, #31
 80174c8:	d50a      	bpl.n	80174e0 <__pow5mult+0x84>
 80174ca:	4639      	mov	r1, r7
 80174cc:	4622      	mov	r2, r4
 80174ce:	4630      	mov	r0, r6
 80174d0:	f7ff ff1a 	bl	8017308 <__multiply>
 80174d4:	4639      	mov	r1, r7
 80174d6:	4680      	mov	r8, r0
 80174d8:	4630      	mov	r0, r6
 80174da:	f7ff fdfd 	bl	80170d8 <_Bfree>
 80174de:	4647      	mov	r7, r8
 80174e0:	106d      	asrs	r5, r5, #1
 80174e2:	d00b      	beq.n	80174fc <__pow5mult+0xa0>
 80174e4:	6820      	ldr	r0, [r4, #0]
 80174e6:	b938      	cbnz	r0, 80174f8 <__pow5mult+0x9c>
 80174e8:	4622      	mov	r2, r4
 80174ea:	4621      	mov	r1, r4
 80174ec:	4630      	mov	r0, r6
 80174ee:	f7ff ff0b 	bl	8017308 <__multiply>
 80174f2:	6020      	str	r0, [r4, #0]
 80174f4:	f8c0 9000 	str.w	r9, [r0]
 80174f8:	4604      	mov	r4, r0
 80174fa:	e7e4      	b.n	80174c6 <__pow5mult+0x6a>
 80174fc:	4638      	mov	r0, r7
 80174fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017502:	bf00      	nop
 8017504:	0801a650 	.word	0x0801a650
 8017508:	0801a405 	.word	0x0801a405
 801750c:	0801a504 	.word	0x0801a504

08017510 <__lshift>:
 8017510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017514:	460c      	mov	r4, r1
 8017516:	6849      	ldr	r1, [r1, #4]
 8017518:	6923      	ldr	r3, [r4, #16]
 801751a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801751e:	68a3      	ldr	r3, [r4, #8]
 8017520:	4607      	mov	r7, r0
 8017522:	4691      	mov	r9, r2
 8017524:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017528:	f108 0601 	add.w	r6, r8, #1
 801752c:	42b3      	cmp	r3, r6
 801752e:	db0b      	blt.n	8017548 <__lshift+0x38>
 8017530:	4638      	mov	r0, r7
 8017532:	f7ff fd91 	bl	8017058 <_Balloc>
 8017536:	4605      	mov	r5, r0
 8017538:	b948      	cbnz	r0, 801754e <__lshift+0x3e>
 801753a:	4602      	mov	r2, r0
 801753c:	4b2a      	ldr	r3, [pc, #168]	; (80175e8 <__lshift+0xd8>)
 801753e:	482b      	ldr	r0, [pc, #172]	; (80175ec <__lshift+0xdc>)
 8017540:	f240 11d9 	movw	r1, #473	; 0x1d9
 8017544:	f000 fc32 	bl	8017dac <__assert_func>
 8017548:	3101      	adds	r1, #1
 801754a:	005b      	lsls	r3, r3, #1
 801754c:	e7ee      	b.n	801752c <__lshift+0x1c>
 801754e:	2300      	movs	r3, #0
 8017550:	f100 0114 	add.w	r1, r0, #20
 8017554:	f100 0210 	add.w	r2, r0, #16
 8017558:	4618      	mov	r0, r3
 801755a:	4553      	cmp	r3, sl
 801755c:	db37      	blt.n	80175ce <__lshift+0xbe>
 801755e:	6920      	ldr	r0, [r4, #16]
 8017560:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017564:	f104 0314 	add.w	r3, r4, #20
 8017568:	f019 091f 	ands.w	r9, r9, #31
 801756c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017570:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017574:	d02f      	beq.n	80175d6 <__lshift+0xc6>
 8017576:	f1c9 0e20 	rsb	lr, r9, #32
 801757a:	468a      	mov	sl, r1
 801757c:	f04f 0c00 	mov.w	ip, #0
 8017580:	681a      	ldr	r2, [r3, #0]
 8017582:	fa02 f209 	lsl.w	r2, r2, r9
 8017586:	ea42 020c 	orr.w	r2, r2, ip
 801758a:	f84a 2b04 	str.w	r2, [sl], #4
 801758e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017592:	4298      	cmp	r0, r3
 8017594:	fa22 fc0e 	lsr.w	ip, r2, lr
 8017598:	d8f2      	bhi.n	8017580 <__lshift+0x70>
 801759a:	1b03      	subs	r3, r0, r4
 801759c:	3b15      	subs	r3, #21
 801759e:	f023 0303 	bic.w	r3, r3, #3
 80175a2:	3304      	adds	r3, #4
 80175a4:	f104 0215 	add.w	r2, r4, #21
 80175a8:	4290      	cmp	r0, r2
 80175aa:	bf38      	it	cc
 80175ac:	2304      	movcc	r3, #4
 80175ae:	f841 c003 	str.w	ip, [r1, r3]
 80175b2:	f1bc 0f00 	cmp.w	ip, #0
 80175b6:	d001      	beq.n	80175bc <__lshift+0xac>
 80175b8:	f108 0602 	add.w	r6, r8, #2
 80175bc:	3e01      	subs	r6, #1
 80175be:	4638      	mov	r0, r7
 80175c0:	612e      	str	r6, [r5, #16]
 80175c2:	4621      	mov	r1, r4
 80175c4:	f7ff fd88 	bl	80170d8 <_Bfree>
 80175c8:	4628      	mov	r0, r5
 80175ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80175d2:	3301      	adds	r3, #1
 80175d4:	e7c1      	b.n	801755a <__lshift+0x4a>
 80175d6:	3904      	subs	r1, #4
 80175d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80175dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80175e0:	4298      	cmp	r0, r3
 80175e2:	d8f9      	bhi.n	80175d8 <__lshift+0xc8>
 80175e4:	e7ea      	b.n	80175bc <__lshift+0xac>
 80175e6:	bf00      	nop
 80175e8:	0801a477 	.word	0x0801a477
 80175ec:	0801a504 	.word	0x0801a504

080175f0 <__mcmp>:
 80175f0:	b530      	push	{r4, r5, lr}
 80175f2:	6902      	ldr	r2, [r0, #16]
 80175f4:	690c      	ldr	r4, [r1, #16]
 80175f6:	1b12      	subs	r2, r2, r4
 80175f8:	d10e      	bne.n	8017618 <__mcmp+0x28>
 80175fa:	f100 0314 	add.w	r3, r0, #20
 80175fe:	3114      	adds	r1, #20
 8017600:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017604:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017608:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801760c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8017610:	42a5      	cmp	r5, r4
 8017612:	d003      	beq.n	801761c <__mcmp+0x2c>
 8017614:	d305      	bcc.n	8017622 <__mcmp+0x32>
 8017616:	2201      	movs	r2, #1
 8017618:	4610      	mov	r0, r2
 801761a:	bd30      	pop	{r4, r5, pc}
 801761c:	4283      	cmp	r3, r0
 801761e:	d3f3      	bcc.n	8017608 <__mcmp+0x18>
 8017620:	e7fa      	b.n	8017618 <__mcmp+0x28>
 8017622:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017626:	e7f7      	b.n	8017618 <__mcmp+0x28>

08017628 <__mdiff>:
 8017628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801762c:	460c      	mov	r4, r1
 801762e:	4606      	mov	r6, r0
 8017630:	4611      	mov	r1, r2
 8017632:	4620      	mov	r0, r4
 8017634:	4690      	mov	r8, r2
 8017636:	f7ff ffdb 	bl	80175f0 <__mcmp>
 801763a:	1e05      	subs	r5, r0, #0
 801763c:	d110      	bne.n	8017660 <__mdiff+0x38>
 801763e:	4629      	mov	r1, r5
 8017640:	4630      	mov	r0, r6
 8017642:	f7ff fd09 	bl	8017058 <_Balloc>
 8017646:	b930      	cbnz	r0, 8017656 <__mdiff+0x2e>
 8017648:	4b3a      	ldr	r3, [pc, #232]	; (8017734 <__mdiff+0x10c>)
 801764a:	4602      	mov	r2, r0
 801764c:	f240 2132 	movw	r1, #562	; 0x232
 8017650:	4839      	ldr	r0, [pc, #228]	; (8017738 <__mdiff+0x110>)
 8017652:	f000 fbab 	bl	8017dac <__assert_func>
 8017656:	2301      	movs	r3, #1
 8017658:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801765c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017660:	bfa4      	itt	ge
 8017662:	4643      	movge	r3, r8
 8017664:	46a0      	movge	r8, r4
 8017666:	4630      	mov	r0, r6
 8017668:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801766c:	bfa6      	itte	ge
 801766e:	461c      	movge	r4, r3
 8017670:	2500      	movge	r5, #0
 8017672:	2501      	movlt	r5, #1
 8017674:	f7ff fcf0 	bl	8017058 <_Balloc>
 8017678:	b920      	cbnz	r0, 8017684 <__mdiff+0x5c>
 801767a:	4b2e      	ldr	r3, [pc, #184]	; (8017734 <__mdiff+0x10c>)
 801767c:	4602      	mov	r2, r0
 801767e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8017682:	e7e5      	b.n	8017650 <__mdiff+0x28>
 8017684:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017688:	6926      	ldr	r6, [r4, #16]
 801768a:	60c5      	str	r5, [r0, #12]
 801768c:	f104 0914 	add.w	r9, r4, #20
 8017690:	f108 0514 	add.w	r5, r8, #20
 8017694:	f100 0e14 	add.w	lr, r0, #20
 8017698:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801769c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80176a0:	f108 0210 	add.w	r2, r8, #16
 80176a4:	46f2      	mov	sl, lr
 80176a6:	2100      	movs	r1, #0
 80176a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80176ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80176b0:	fa1f f883 	uxth.w	r8, r3
 80176b4:	fa11 f18b 	uxtah	r1, r1, fp
 80176b8:	0c1b      	lsrs	r3, r3, #16
 80176ba:	eba1 0808 	sub.w	r8, r1, r8
 80176be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80176c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80176c6:	fa1f f888 	uxth.w	r8, r8
 80176ca:	1419      	asrs	r1, r3, #16
 80176cc:	454e      	cmp	r6, r9
 80176ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80176d2:	f84a 3b04 	str.w	r3, [sl], #4
 80176d6:	d8e7      	bhi.n	80176a8 <__mdiff+0x80>
 80176d8:	1b33      	subs	r3, r6, r4
 80176da:	3b15      	subs	r3, #21
 80176dc:	f023 0303 	bic.w	r3, r3, #3
 80176e0:	3304      	adds	r3, #4
 80176e2:	3415      	adds	r4, #21
 80176e4:	42a6      	cmp	r6, r4
 80176e6:	bf38      	it	cc
 80176e8:	2304      	movcc	r3, #4
 80176ea:	441d      	add	r5, r3
 80176ec:	4473      	add	r3, lr
 80176ee:	469e      	mov	lr, r3
 80176f0:	462e      	mov	r6, r5
 80176f2:	4566      	cmp	r6, ip
 80176f4:	d30e      	bcc.n	8017714 <__mdiff+0xec>
 80176f6:	f10c 0203 	add.w	r2, ip, #3
 80176fa:	1b52      	subs	r2, r2, r5
 80176fc:	f022 0203 	bic.w	r2, r2, #3
 8017700:	3d03      	subs	r5, #3
 8017702:	45ac      	cmp	ip, r5
 8017704:	bf38      	it	cc
 8017706:	2200      	movcc	r2, #0
 8017708:	441a      	add	r2, r3
 801770a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801770e:	b17b      	cbz	r3, 8017730 <__mdiff+0x108>
 8017710:	6107      	str	r7, [r0, #16]
 8017712:	e7a3      	b.n	801765c <__mdiff+0x34>
 8017714:	f856 8b04 	ldr.w	r8, [r6], #4
 8017718:	fa11 f288 	uxtah	r2, r1, r8
 801771c:	1414      	asrs	r4, r2, #16
 801771e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8017722:	b292      	uxth	r2, r2
 8017724:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8017728:	f84e 2b04 	str.w	r2, [lr], #4
 801772c:	1421      	asrs	r1, r4, #16
 801772e:	e7e0      	b.n	80176f2 <__mdiff+0xca>
 8017730:	3f01      	subs	r7, #1
 8017732:	e7ea      	b.n	801770a <__mdiff+0xe2>
 8017734:	0801a477 	.word	0x0801a477
 8017738:	0801a504 	.word	0x0801a504

0801773c <__ulp>:
 801773c:	b082      	sub	sp, #8
 801773e:	ed8d 0b00 	vstr	d0, [sp]
 8017742:	9b01      	ldr	r3, [sp, #4]
 8017744:	4912      	ldr	r1, [pc, #72]	; (8017790 <__ulp+0x54>)
 8017746:	4019      	ands	r1, r3
 8017748:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801774c:	2900      	cmp	r1, #0
 801774e:	dd05      	ble.n	801775c <__ulp+0x20>
 8017750:	2200      	movs	r2, #0
 8017752:	460b      	mov	r3, r1
 8017754:	ec43 2b10 	vmov	d0, r2, r3
 8017758:	b002      	add	sp, #8
 801775a:	4770      	bx	lr
 801775c:	4249      	negs	r1, r1
 801775e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8017762:	ea4f 5021 	mov.w	r0, r1, asr #20
 8017766:	f04f 0200 	mov.w	r2, #0
 801776a:	f04f 0300 	mov.w	r3, #0
 801776e:	da04      	bge.n	801777a <__ulp+0x3e>
 8017770:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8017774:	fa41 f300 	asr.w	r3, r1, r0
 8017778:	e7ec      	b.n	8017754 <__ulp+0x18>
 801777a:	f1a0 0114 	sub.w	r1, r0, #20
 801777e:	291e      	cmp	r1, #30
 8017780:	bfda      	itte	le
 8017782:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8017786:	fa20 f101 	lsrle.w	r1, r0, r1
 801778a:	2101      	movgt	r1, #1
 801778c:	460a      	mov	r2, r1
 801778e:	e7e1      	b.n	8017754 <__ulp+0x18>
 8017790:	7ff00000 	.word	0x7ff00000

08017794 <__b2d>:
 8017794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017796:	6905      	ldr	r5, [r0, #16]
 8017798:	f100 0714 	add.w	r7, r0, #20
 801779c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80177a0:	1f2e      	subs	r6, r5, #4
 80177a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80177a6:	4620      	mov	r0, r4
 80177a8:	f7ff fd48 	bl	801723c <__hi0bits>
 80177ac:	f1c0 0320 	rsb	r3, r0, #32
 80177b0:	280a      	cmp	r0, #10
 80177b2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8017830 <__b2d+0x9c>
 80177b6:	600b      	str	r3, [r1, #0]
 80177b8:	dc14      	bgt.n	80177e4 <__b2d+0x50>
 80177ba:	f1c0 0e0b 	rsb	lr, r0, #11
 80177be:	fa24 f10e 	lsr.w	r1, r4, lr
 80177c2:	42b7      	cmp	r7, r6
 80177c4:	ea41 030c 	orr.w	r3, r1, ip
 80177c8:	bf34      	ite	cc
 80177ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80177ce:	2100      	movcs	r1, #0
 80177d0:	3015      	adds	r0, #21
 80177d2:	fa04 f000 	lsl.w	r0, r4, r0
 80177d6:	fa21 f10e 	lsr.w	r1, r1, lr
 80177da:	ea40 0201 	orr.w	r2, r0, r1
 80177de:	ec43 2b10 	vmov	d0, r2, r3
 80177e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177e4:	42b7      	cmp	r7, r6
 80177e6:	bf3a      	itte	cc
 80177e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80177ec:	f1a5 0608 	subcc.w	r6, r5, #8
 80177f0:	2100      	movcs	r1, #0
 80177f2:	380b      	subs	r0, #11
 80177f4:	d017      	beq.n	8017826 <__b2d+0x92>
 80177f6:	f1c0 0c20 	rsb	ip, r0, #32
 80177fa:	fa04 f500 	lsl.w	r5, r4, r0
 80177fe:	42be      	cmp	r6, r7
 8017800:	fa21 f40c 	lsr.w	r4, r1, ip
 8017804:	ea45 0504 	orr.w	r5, r5, r4
 8017808:	bf8c      	ite	hi
 801780a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801780e:	2400      	movls	r4, #0
 8017810:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8017814:	fa01 f000 	lsl.w	r0, r1, r0
 8017818:	fa24 f40c 	lsr.w	r4, r4, ip
 801781c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017820:	ea40 0204 	orr.w	r2, r0, r4
 8017824:	e7db      	b.n	80177de <__b2d+0x4a>
 8017826:	ea44 030c 	orr.w	r3, r4, ip
 801782a:	460a      	mov	r2, r1
 801782c:	e7d7      	b.n	80177de <__b2d+0x4a>
 801782e:	bf00      	nop
 8017830:	3ff00000 	.word	0x3ff00000

08017834 <__d2b>:
 8017834:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017838:	4689      	mov	r9, r1
 801783a:	2101      	movs	r1, #1
 801783c:	ec57 6b10 	vmov	r6, r7, d0
 8017840:	4690      	mov	r8, r2
 8017842:	f7ff fc09 	bl	8017058 <_Balloc>
 8017846:	4604      	mov	r4, r0
 8017848:	b930      	cbnz	r0, 8017858 <__d2b+0x24>
 801784a:	4602      	mov	r2, r0
 801784c:	4b25      	ldr	r3, [pc, #148]	; (80178e4 <__d2b+0xb0>)
 801784e:	4826      	ldr	r0, [pc, #152]	; (80178e8 <__d2b+0xb4>)
 8017850:	f240 310a 	movw	r1, #778	; 0x30a
 8017854:	f000 faaa 	bl	8017dac <__assert_func>
 8017858:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801785c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017860:	bb35      	cbnz	r5, 80178b0 <__d2b+0x7c>
 8017862:	2e00      	cmp	r6, #0
 8017864:	9301      	str	r3, [sp, #4]
 8017866:	d028      	beq.n	80178ba <__d2b+0x86>
 8017868:	4668      	mov	r0, sp
 801786a:	9600      	str	r6, [sp, #0]
 801786c:	f7ff fd06 	bl	801727c <__lo0bits>
 8017870:	9900      	ldr	r1, [sp, #0]
 8017872:	b300      	cbz	r0, 80178b6 <__d2b+0x82>
 8017874:	9a01      	ldr	r2, [sp, #4]
 8017876:	f1c0 0320 	rsb	r3, r0, #32
 801787a:	fa02 f303 	lsl.w	r3, r2, r3
 801787e:	430b      	orrs	r3, r1
 8017880:	40c2      	lsrs	r2, r0
 8017882:	6163      	str	r3, [r4, #20]
 8017884:	9201      	str	r2, [sp, #4]
 8017886:	9b01      	ldr	r3, [sp, #4]
 8017888:	61a3      	str	r3, [r4, #24]
 801788a:	2b00      	cmp	r3, #0
 801788c:	bf14      	ite	ne
 801788e:	2202      	movne	r2, #2
 8017890:	2201      	moveq	r2, #1
 8017892:	6122      	str	r2, [r4, #16]
 8017894:	b1d5      	cbz	r5, 80178cc <__d2b+0x98>
 8017896:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801789a:	4405      	add	r5, r0
 801789c:	f8c9 5000 	str.w	r5, [r9]
 80178a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80178a4:	f8c8 0000 	str.w	r0, [r8]
 80178a8:	4620      	mov	r0, r4
 80178aa:	b003      	add	sp, #12
 80178ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80178b4:	e7d5      	b.n	8017862 <__d2b+0x2e>
 80178b6:	6161      	str	r1, [r4, #20]
 80178b8:	e7e5      	b.n	8017886 <__d2b+0x52>
 80178ba:	a801      	add	r0, sp, #4
 80178bc:	f7ff fcde 	bl	801727c <__lo0bits>
 80178c0:	9b01      	ldr	r3, [sp, #4]
 80178c2:	6163      	str	r3, [r4, #20]
 80178c4:	2201      	movs	r2, #1
 80178c6:	6122      	str	r2, [r4, #16]
 80178c8:	3020      	adds	r0, #32
 80178ca:	e7e3      	b.n	8017894 <__d2b+0x60>
 80178cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80178d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80178d4:	f8c9 0000 	str.w	r0, [r9]
 80178d8:	6918      	ldr	r0, [r3, #16]
 80178da:	f7ff fcaf 	bl	801723c <__hi0bits>
 80178de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80178e2:	e7df      	b.n	80178a4 <__d2b+0x70>
 80178e4:	0801a477 	.word	0x0801a477
 80178e8:	0801a504 	.word	0x0801a504

080178ec <__ratio>:
 80178ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178f0:	4688      	mov	r8, r1
 80178f2:	4669      	mov	r1, sp
 80178f4:	4681      	mov	r9, r0
 80178f6:	f7ff ff4d 	bl	8017794 <__b2d>
 80178fa:	a901      	add	r1, sp, #4
 80178fc:	4640      	mov	r0, r8
 80178fe:	ec55 4b10 	vmov	r4, r5, d0
 8017902:	f7ff ff47 	bl	8017794 <__b2d>
 8017906:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801790a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801790e:	eba3 0c02 	sub.w	ip, r3, r2
 8017912:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017916:	1a9b      	subs	r3, r3, r2
 8017918:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801791c:	ec51 0b10 	vmov	r0, r1, d0
 8017920:	2b00      	cmp	r3, #0
 8017922:	bfd6      	itet	le
 8017924:	460a      	movle	r2, r1
 8017926:	462a      	movgt	r2, r5
 8017928:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801792c:	468b      	mov	fp, r1
 801792e:	462f      	mov	r7, r5
 8017930:	bfd4      	ite	le
 8017932:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8017936:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801793a:	4620      	mov	r0, r4
 801793c:	ee10 2a10 	vmov	r2, s0
 8017940:	465b      	mov	r3, fp
 8017942:	4639      	mov	r1, r7
 8017944:	f7e8 ff92 	bl	800086c <__aeabi_ddiv>
 8017948:	ec41 0b10 	vmov	d0, r0, r1
 801794c:	b003      	add	sp, #12
 801794e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017952 <__copybits>:
 8017952:	3901      	subs	r1, #1
 8017954:	b570      	push	{r4, r5, r6, lr}
 8017956:	1149      	asrs	r1, r1, #5
 8017958:	6914      	ldr	r4, [r2, #16]
 801795a:	3101      	adds	r1, #1
 801795c:	f102 0314 	add.w	r3, r2, #20
 8017960:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017964:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017968:	1f05      	subs	r5, r0, #4
 801796a:	42a3      	cmp	r3, r4
 801796c:	d30c      	bcc.n	8017988 <__copybits+0x36>
 801796e:	1aa3      	subs	r3, r4, r2
 8017970:	3b11      	subs	r3, #17
 8017972:	f023 0303 	bic.w	r3, r3, #3
 8017976:	3211      	adds	r2, #17
 8017978:	42a2      	cmp	r2, r4
 801797a:	bf88      	it	hi
 801797c:	2300      	movhi	r3, #0
 801797e:	4418      	add	r0, r3
 8017980:	2300      	movs	r3, #0
 8017982:	4288      	cmp	r0, r1
 8017984:	d305      	bcc.n	8017992 <__copybits+0x40>
 8017986:	bd70      	pop	{r4, r5, r6, pc}
 8017988:	f853 6b04 	ldr.w	r6, [r3], #4
 801798c:	f845 6f04 	str.w	r6, [r5, #4]!
 8017990:	e7eb      	b.n	801796a <__copybits+0x18>
 8017992:	f840 3b04 	str.w	r3, [r0], #4
 8017996:	e7f4      	b.n	8017982 <__copybits+0x30>

08017998 <__any_on>:
 8017998:	f100 0214 	add.w	r2, r0, #20
 801799c:	6900      	ldr	r0, [r0, #16]
 801799e:	114b      	asrs	r3, r1, #5
 80179a0:	4298      	cmp	r0, r3
 80179a2:	b510      	push	{r4, lr}
 80179a4:	db11      	blt.n	80179ca <__any_on+0x32>
 80179a6:	dd0a      	ble.n	80179be <__any_on+0x26>
 80179a8:	f011 011f 	ands.w	r1, r1, #31
 80179ac:	d007      	beq.n	80179be <__any_on+0x26>
 80179ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80179b2:	fa24 f001 	lsr.w	r0, r4, r1
 80179b6:	fa00 f101 	lsl.w	r1, r0, r1
 80179ba:	428c      	cmp	r4, r1
 80179bc:	d10b      	bne.n	80179d6 <__any_on+0x3e>
 80179be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80179c2:	4293      	cmp	r3, r2
 80179c4:	d803      	bhi.n	80179ce <__any_on+0x36>
 80179c6:	2000      	movs	r0, #0
 80179c8:	bd10      	pop	{r4, pc}
 80179ca:	4603      	mov	r3, r0
 80179cc:	e7f7      	b.n	80179be <__any_on+0x26>
 80179ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80179d2:	2900      	cmp	r1, #0
 80179d4:	d0f5      	beq.n	80179c2 <__any_on+0x2a>
 80179d6:	2001      	movs	r0, #1
 80179d8:	e7f6      	b.n	80179c8 <__any_on+0x30>

080179da <_calloc_r>:
 80179da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80179dc:	fba1 2402 	umull	r2, r4, r1, r2
 80179e0:	b94c      	cbnz	r4, 80179f6 <_calloc_r+0x1c>
 80179e2:	4611      	mov	r1, r2
 80179e4:	9201      	str	r2, [sp, #4]
 80179e6:	f7fc fb3b 	bl	8014060 <_malloc_r>
 80179ea:	9a01      	ldr	r2, [sp, #4]
 80179ec:	4605      	mov	r5, r0
 80179ee:	b930      	cbnz	r0, 80179fe <_calloc_r+0x24>
 80179f0:	4628      	mov	r0, r5
 80179f2:	b003      	add	sp, #12
 80179f4:	bd30      	pop	{r4, r5, pc}
 80179f6:	220c      	movs	r2, #12
 80179f8:	6002      	str	r2, [r0, #0]
 80179fa:	2500      	movs	r5, #0
 80179fc:	e7f8      	b.n	80179f0 <_calloc_r+0x16>
 80179fe:	4621      	mov	r1, r4
 8017a00:	f7fc fb05 	bl	801400e <memset>
 8017a04:	e7f4      	b.n	80179f0 <_calloc_r+0x16>
	...

08017a08 <_free_r>:
 8017a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017a0a:	2900      	cmp	r1, #0
 8017a0c:	d044      	beq.n	8017a98 <_free_r+0x90>
 8017a0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a12:	9001      	str	r0, [sp, #4]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	f1a1 0404 	sub.w	r4, r1, #4
 8017a1a:	bfb8      	it	lt
 8017a1c:	18e4      	addlt	r4, r4, r3
 8017a1e:	f7ff fb0f 	bl	8017040 <__malloc_lock>
 8017a22:	4a1e      	ldr	r2, [pc, #120]	; (8017a9c <_free_r+0x94>)
 8017a24:	9801      	ldr	r0, [sp, #4]
 8017a26:	6813      	ldr	r3, [r2, #0]
 8017a28:	b933      	cbnz	r3, 8017a38 <_free_r+0x30>
 8017a2a:	6063      	str	r3, [r4, #4]
 8017a2c:	6014      	str	r4, [r2, #0]
 8017a2e:	b003      	add	sp, #12
 8017a30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017a34:	f7ff bb0a 	b.w	801704c <__malloc_unlock>
 8017a38:	42a3      	cmp	r3, r4
 8017a3a:	d908      	bls.n	8017a4e <_free_r+0x46>
 8017a3c:	6825      	ldr	r5, [r4, #0]
 8017a3e:	1961      	adds	r1, r4, r5
 8017a40:	428b      	cmp	r3, r1
 8017a42:	bf01      	itttt	eq
 8017a44:	6819      	ldreq	r1, [r3, #0]
 8017a46:	685b      	ldreq	r3, [r3, #4]
 8017a48:	1949      	addeq	r1, r1, r5
 8017a4a:	6021      	streq	r1, [r4, #0]
 8017a4c:	e7ed      	b.n	8017a2a <_free_r+0x22>
 8017a4e:	461a      	mov	r2, r3
 8017a50:	685b      	ldr	r3, [r3, #4]
 8017a52:	b10b      	cbz	r3, 8017a58 <_free_r+0x50>
 8017a54:	42a3      	cmp	r3, r4
 8017a56:	d9fa      	bls.n	8017a4e <_free_r+0x46>
 8017a58:	6811      	ldr	r1, [r2, #0]
 8017a5a:	1855      	adds	r5, r2, r1
 8017a5c:	42a5      	cmp	r5, r4
 8017a5e:	d10b      	bne.n	8017a78 <_free_r+0x70>
 8017a60:	6824      	ldr	r4, [r4, #0]
 8017a62:	4421      	add	r1, r4
 8017a64:	1854      	adds	r4, r2, r1
 8017a66:	42a3      	cmp	r3, r4
 8017a68:	6011      	str	r1, [r2, #0]
 8017a6a:	d1e0      	bne.n	8017a2e <_free_r+0x26>
 8017a6c:	681c      	ldr	r4, [r3, #0]
 8017a6e:	685b      	ldr	r3, [r3, #4]
 8017a70:	6053      	str	r3, [r2, #4]
 8017a72:	4421      	add	r1, r4
 8017a74:	6011      	str	r1, [r2, #0]
 8017a76:	e7da      	b.n	8017a2e <_free_r+0x26>
 8017a78:	d902      	bls.n	8017a80 <_free_r+0x78>
 8017a7a:	230c      	movs	r3, #12
 8017a7c:	6003      	str	r3, [r0, #0]
 8017a7e:	e7d6      	b.n	8017a2e <_free_r+0x26>
 8017a80:	6825      	ldr	r5, [r4, #0]
 8017a82:	1961      	adds	r1, r4, r5
 8017a84:	428b      	cmp	r3, r1
 8017a86:	bf04      	itt	eq
 8017a88:	6819      	ldreq	r1, [r3, #0]
 8017a8a:	685b      	ldreq	r3, [r3, #4]
 8017a8c:	6063      	str	r3, [r4, #4]
 8017a8e:	bf04      	itt	eq
 8017a90:	1949      	addeq	r1, r1, r5
 8017a92:	6021      	streq	r1, [r4, #0]
 8017a94:	6054      	str	r4, [r2, #4]
 8017a96:	e7ca      	b.n	8017a2e <_free_r+0x26>
 8017a98:	b003      	add	sp, #12
 8017a9a:	bd30      	pop	{r4, r5, pc}
 8017a9c:	20008418 	.word	0x20008418

08017aa0 <__ssputs_r>:
 8017aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017aa4:	688e      	ldr	r6, [r1, #8]
 8017aa6:	429e      	cmp	r6, r3
 8017aa8:	4682      	mov	sl, r0
 8017aaa:	460c      	mov	r4, r1
 8017aac:	4690      	mov	r8, r2
 8017aae:	461f      	mov	r7, r3
 8017ab0:	d838      	bhi.n	8017b24 <__ssputs_r+0x84>
 8017ab2:	898a      	ldrh	r2, [r1, #12]
 8017ab4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017ab8:	d032      	beq.n	8017b20 <__ssputs_r+0x80>
 8017aba:	6825      	ldr	r5, [r4, #0]
 8017abc:	6909      	ldr	r1, [r1, #16]
 8017abe:	eba5 0901 	sub.w	r9, r5, r1
 8017ac2:	6965      	ldr	r5, [r4, #20]
 8017ac4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017ac8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017acc:	3301      	adds	r3, #1
 8017ace:	444b      	add	r3, r9
 8017ad0:	106d      	asrs	r5, r5, #1
 8017ad2:	429d      	cmp	r5, r3
 8017ad4:	bf38      	it	cc
 8017ad6:	461d      	movcc	r5, r3
 8017ad8:	0553      	lsls	r3, r2, #21
 8017ada:	d531      	bpl.n	8017b40 <__ssputs_r+0xa0>
 8017adc:	4629      	mov	r1, r5
 8017ade:	f7fc fabf 	bl	8014060 <_malloc_r>
 8017ae2:	4606      	mov	r6, r0
 8017ae4:	b950      	cbnz	r0, 8017afc <__ssputs_r+0x5c>
 8017ae6:	230c      	movs	r3, #12
 8017ae8:	f8ca 3000 	str.w	r3, [sl]
 8017aec:	89a3      	ldrh	r3, [r4, #12]
 8017aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017af2:	81a3      	strh	r3, [r4, #12]
 8017af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017afc:	6921      	ldr	r1, [r4, #16]
 8017afe:	464a      	mov	r2, r9
 8017b00:	f7fc fa77 	bl	8013ff2 <memcpy>
 8017b04:	89a3      	ldrh	r3, [r4, #12]
 8017b06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017b0e:	81a3      	strh	r3, [r4, #12]
 8017b10:	6126      	str	r6, [r4, #16]
 8017b12:	6165      	str	r5, [r4, #20]
 8017b14:	444e      	add	r6, r9
 8017b16:	eba5 0509 	sub.w	r5, r5, r9
 8017b1a:	6026      	str	r6, [r4, #0]
 8017b1c:	60a5      	str	r5, [r4, #8]
 8017b1e:	463e      	mov	r6, r7
 8017b20:	42be      	cmp	r6, r7
 8017b22:	d900      	bls.n	8017b26 <__ssputs_r+0x86>
 8017b24:	463e      	mov	r6, r7
 8017b26:	6820      	ldr	r0, [r4, #0]
 8017b28:	4632      	mov	r2, r6
 8017b2a:	4641      	mov	r1, r8
 8017b2c:	f000 f96e 	bl	8017e0c <memmove>
 8017b30:	68a3      	ldr	r3, [r4, #8]
 8017b32:	1b9b      	subs	r3, r3, r6
 8017b34:	60a3      	str	r3, [r4, #8]
 8017b36:	6823      	ldr	r3, [r4, #0]
 8017b38:	4433      	add	r3, r6
 8017b3a:	6023      	str	r3, [r4, #0]
 8017b3c:	2000      	movs	r0, #0
 8017b3e:	e7db      	b.n	8017af8 <__ssputs_r+0x58>
 8017b40:	462a      	mov	r2, r5
 8017b42:	f000 f97d 	bl	8017e40 <_realloc_r>
 8017b46:	4606      	mov	r6, r0
 8017b48:	2800      	cmp	r0, #0
 8017b4a:	d1e1      	bne.n	8017b10 <__ssputs_r+0x70>
 8017b4c:	6921      	ldr	r1, [r4, #16]
 8017b4e:	4650      	mov	r0, sl
 8017b50:	f7ff ff5a 	bl	8017a08 <_free_r>
 8017b54:	e7c7      	b.n	8017ae6 <__ssputs_r+0x46>
	...

08017b58 <_svfiprintf_r>:
 8017b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b5c:	4698      	mov	r8, r3
 8017b5e:	898b      	ldrh	r3, [r1, #12]
 8017b60:	061b      	lsls	r3, r3, #24
 8017b62:	b09d      	sub	sp, #116	; 0x74
 8017b64:	4607      	mov	r7, r0
 8017b66:	460d      	mov	r5, r1
 8017b68:	4614      	mov	r4, r2
 8017b6a:	d50e      	bpl.n	8017b8a <_svfiprintf_r+0x32>
 8017b6c:	690b      	ldr	r3, [r1, #16]
 8017b6e:	b963      	cbnz	r3, 8017b8a <_svfiprintf_r+0x32>
 8017b70:	2140      	movs	r1, #64	; 0x40
 8017b72:	f7fc fa75 	bl	8014060 <_malloc_r>
 8017b76:	6028      	str	r0, [r5, #0]
 8017b78:	6128      	str	r0, [r5, #16]
 8017b7a:	b920      	cbnz	r0, 8017b86 <_svfiprintf_r+0x2e>
 8017b7c:	230c      	movs	r3, #12
 8017b7e:	603b      	str	r3, [r7, #0]
 8017b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017b84:	e0d1      	b.n	8017d2a <_svfiprintf_r+0x1d2>
 8017b86:	2340      	movs	r3, #64	; 0x40
 8017b88:	616b      	str	r3, [r5, #20]
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8017b8e:	2320      	movs	r3, #32
 8017b90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017b94:	f8cd 800c 	str.w	r8, [sp, #12]
 8017b98:	2330      	movs	r3, #48	; 0x30
 8017b9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017d44 <_svfiprintf_r+0x1ec>
 8017b9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017ba2:	f04f 0901 	mov.w	r9, #1
 8017ba6:	4623      	mov	r3, r4
 8017ba8:	469a      	mov	sl, r3
 8017baa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017bae:	b10a      	cbz	r2, 8017bb4 <_svfiprintf_r+0x5c>
 8017bb0:	2a25      	cmp	r2, #37	; 0x25
 8017bb2:	d1f9      	bne.n	8017ba8 <_svfiprintf_r+0x50>
 8017bb4:	ebba 0b04 	subs.w	fp, sl, r4
 8017bb8:	d00b      	beq.n	8017bd2 <_svfiprintf_r+0x7a>
 8017bba:	465b      	mov	r3, fp
 8017bbc:	4622      	mov	r2, r4
 8017bbe:	4629      	mov	r1, r5
 8017bc0:	4638      	mov	r0, r7
 8017bc2:	f7ff ff6d 	bl	8017aa0 <__ssputs_r>
 8017bc6:	3001      	adds	r0, #1
 8017bc8:	f000 80aa 	beq.w	8017d20 <_svfiprintf_r+0x1c8>
 8017bcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017bce:	445a      	add	r2, fp
 8017bd0:	9209      	str	r2, [sp, #36]	; 0x24
 8017bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	f000 80a2 	beq.w	8017d20 <_svfiprintf_r+0x1c8>
 8017bdc:	2300      	movs	r3, #0
 8017bde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017be2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017be6:	f10a 0a01 	add.w	sl, sl, #1
 8017bea:	9304      	str	r3, [sp, #16]
 8017bec:	9307      	str	r3, [sp, #28]
 8017bee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017bf2:	931a      	str	r3, [sp, #104]	; 0x68
 8017bf4:	4654      	mov	r4, sl
 8017bf6:	2205      	movs	r2, #5
 8017bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017bfc:	4851      	ldr	r0, [pc, #324]	; (8017d44 <_svfiprintf_r+0x1ec>)
 8017bfe:	f7e8 faff 	bl	8000200 <memchr>
 8017c02:	9a04      	ldr	r2, [sp, #16]
 8017c04:	b9d8      	cbnz	r0, 8017c3e <_svfiprintf_r+0xe6>
 8017c06:	06d0      	lsls	r0, r2, #27
 8017c08:	bf44      	itt	mi
 8017c0a:	2320      	movmi	r3, #32
 8017c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017c10:	0711      	lsls	r1, r2, #28
 8017c12:	bf44      	itt	mi
 8017c14:	232b      	movmi	r3, #43	; 0x2b
 8017c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8017c1e:	2b2a      	cmp	r3, #42	; 0x2a
 8017c20:	d015      	beq.n	8017c4e <_svfiprintf_r+0xf6>
 8017c22:	9a07      	ldr	r2, [sp, #28]
 8017c24:	4654      	mov	r4, sl
 8017c26:	2000      	movs	r0, #0
 8017c28:	f04f 0c0a 	mov.w	ip, #10
 8017c2c:	4621      	mov	r1, r4
 8017c2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017c32:	3b30      	subs	r3, #48	; 0x30
 8017c34:	2b09      	cmp	r3, #9
 8017c36:	d94e      	bls.n	8017cd6 <_svfiprintf_r+0x17e>
 8017c38:	b1b0      	cbz	r0, 8017c68 <_svfiprintf_r+0x110>
 8017c3a:	9207      	str	r2, [sp, #28]
 8017c3c:	e014      	b.n	8017c68 <_svfiprintf_r+0x110>
 8017c3e:	eba0 0308 	sub.w	r3, r0, r8
 8017c42:	fa09 f303 	lsl.w	r3, r9, r3
 8017c46:	4313      	orrs	r3, r2
 8017c48:	9304      	str	r3, [sp, #16]
 8017c4a:	46a2      	mov	sl, r4
 8017c4c:	e7d2      	b.n	8017bf4 <_svfiprintf_r+0x9c>
 8017c4e:	9b03      	ldr	r3, [sp, #12]
 8017c50:	1d19      	adds	r1, r3, #4
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	9103      	str	r1, [sp, #12]
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	bfbb      	ittet	lt
 8017c5a:	425b      	neglt	r3, r3
 8017c5c:	f042 0202 	orrlt.w	r2, r2, #2
 8017c60:	9307      	strge	r3, [sp, #28]
 8017c62:	9307      	strlt	r3, [sp, #28]
 8017c64:	bfb8      	it	lt
 8017c66:	9204      	strlt	r2, [sp, #16]
 8017c68:	7823      	ldrb	r3, [r4, #0]
 8017c6a:	2b2e      	cmp	r3, #46	; 0x2e
 8017c6c:	d10c      	bne.n	8017c88 <_svfiprintf_r+0x130>
 8017c6e:	7863      	ldrb	r3, [r4, #1]
 8017c70:	2b2a      	cmp	r3, #42	; 0x2a
 8017c72:	d135      	bne.n	8017ce0 <_svfiprintf_r+0x188>
 8017c74:	9b03      	ldr	r3, [sp, #12]
 8017c76:	1d1a      	adds	r2, r3, #4
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	9203      	str	r2, [sp, #12]
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	bfb8      	it	lt
 8017c80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017c84:	3402      	adds	r4, #2
 8017c86:	9305      	str	r3, [sp, #20]
 8017c88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017d54 <_svfiprintf_r+0x1fc>
 8017c8c:	7821      	ldrb	r1, [r4, #0]
 8017c8e:	2203      	movs	r2, #3
 8017c90:	4650      	mov	r0, sl
 8017c92:	f7e8 fab5 	bl	8000200 <memchr>
 8017c96:	b140      	cbz	r0, 8017caa <_svfiprintf_r+0x152>
 8017c98:	2340      	movs	r3, #64	; 0x40
 8017c9a:	eba0 000a 	sub.w	r0, r0, sl
 8017c9e:	fa03 f000 	lsl.w	r0, r3, r0
 8017ca2:	9b04      	ldr	r3, [sp, #16]
 8017ca4:	4303      	orrs	r3, r0
 8017ca6:	3401      	adds	r4, #1
 8017ca8:	9304      	str	r3, [sp, #16]
 8017caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017cae:	4826      	ldr	r0, [pc, #152]	; (8017d48 <_svfiprintf_r+0x1f0>)
 8017cb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017cb4:	2206      	movs	r2, #6
 8017cb6:	f7e8 faa3 	bl	8000200 <memchr>
 8017cba:	2800      	cmp	r0, #0
 8017cbc:	d038      	beq.n	8017d30 <_svfiprintf_r+0x1d8>
 8017cbe:	4b23      	ldr	r3, [pc, #140]	; (8017d4c <_svfiprintf_r+0x1f4>)
 8017cc0:	bb1b      	cbnz	r3, 8017d0a <_svfiprintf_r+0x1b2>
 8017cc2:	9b03      	ldr	r3, [sp, #12]
 8017cc4:	3307      	adds	r3, #7
 8017cc6:	f023 0307 	bic.w	r3, r3, #7
 8017cca:	3308      	adds	r3, #8
 8017ccc:	9303      	str	r3, [sp, #12]
 8017cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cd0:	4433      	add	r3, r6
 8017cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8017cd4:	e767      	b.n	8017ba6 <_svfiprintf_r+0x4e>
 8017cd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8017cda:	460c      	mov	r4, r1
 8017cdc:	2001      	movs	r0, #1
 8017cde:	e7a5      	b.n	8017c2c <_svfiprintf_r+0xd4>
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	3401      	adds	r4, #1
 8017ce4:	9305      	str	r3, [sp, #20]
 8017ce6:	4619      	mov	r1, r3
 8017ce8:	f04f 0c0a 	mov.w	ip, #10
 8017cec:	4620      	mov	r0, r4
 8017cee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017cf2:	3a30      	subs	r2, #48	; 0x30
 8017cf4:	2a09      	cmp	r2, #9
 8017cf6:	d903      	bls.n	8017d00 <_svfiprintf_r+0x1a8>
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d0c5      	beq.n	8017c88 <_svfiprintf_r+0x130>
 8017cfc:	9105      	str	r1, [sp, #20]
 8017cfe:	e7c3      	b.n	8017c88 <_svfiprintf_r+0x130>
 8017d00:	fb0c 2101 	mla	r1, ip, r1, r2
 8017d04:	4604      	mov	r4, r0
 8017d06:	2301      	movs	r3, #1
 8017d08:	e7f0      	b.n	8017cec <_svfiprintf_r+0x194>
 8017d0a:	ab03      	add	r3, sp, #12
 8017d0c:	9300      	str	r3, [sp, #0]
 8017d0e:	462a      	mov	r2, r5
 8017d10:	4b0f      	ldr	r3, [pc, #60]	; (8017d50 <_svfiprintf_r+0x1f8>)
 8017d12:	a904      	add	r1, sp, #16
 8017d14:	4638      	mov	r0, r7
 8017d16:	f7fc fab7 	bl	8014288 <_printf_float>
 8017d1a:	1c42      	adds	r2, r0, #1
 8017d1c:	4606      	mov	r6, r0
 8017d1e:	d1d6      	bne.n	8017cce <_svfiprintf_r+0x176>
 8017d20:	89ab      	ldrh	r3, [r5, #12]
 8017d22:	065b      	lsls	r3, r3, #25
 8017d24:	f53f af2c 	bmi.w	8017b80 <_svfiprintf_r+0x28>
 8017d28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017d2a:	b01d      	add	sp, #116	; 0x74
 8017d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d30:	ab03      	add	r3, sp, #12
 8017d32:	9300      	str	r3, [sp, #0]
 8017d34:	462a      	mov	r2, r5
 8017d36:	4b06      	ldr	r3, [pc, #24]	; (8017d50 <_svfiprintf_r+0x1f8>)
 8017d38:	a904      	add	r1, sp, #16
 8017d3a:	4638      	mov	r0, r7
 8017d3c:	f7fc fd48 	bl	80147d0 <_printf_i>
 8017d40:	e7eb      	b.n	8017d1a <_svfiprintf_r+0x1c2>
 8017d42:	bf00      	nop
 8017d44:	0801a65c 	.word	0x0801a65c
 8017d48:	0801a666 	.word	0x0801a666
 8017d4c:	08014289 	.word	0x08014289
 8017d50:	08017aa1 	.word	0x08017aa1
 8017d54:	0801a662 	.word	0x0801a662

08017d58 <_read_r>:
 8017d58:	b538      	push	{r3, r4, r5, lr}
 8017d5a:	4d07      	ldr	r5, [pc, #28]	; (8017d78 <_read_r+0x20>)
 8017d5c:	4604      	mov	r4, r0
 8017d5e:	4608      	mov	r0, r1
 8017d60:	4611      	mov	r1, r2
 8017d62:	2200      	movs	r2, #0
 8017d64:	602a      	str	r2, [r5, #0]
 8017d66:	461a      	mov	r2, r3
 8017d68:	f7ef fc72 	bl	8007650 <_read>
 8017d6c:	1c43      	adds	r3, r0, #1
 8017d6e:	d102      	bne.n	8017d76 <_read_r+0x1e>
 8017d70:	682b      	ldr	r3, [r5, #0]
 8017d72:	b103      	cbz	r3, 8017d76 <_read_r+0x1e>
 8017d74:	6023      	str	r3, [r4, #0]
 8017d76:	bd38      	pop	{r3, r4, r5, pc}
 8017d78:	20008420 	.word	0x20008420
 8017d7c:	00000000 	.word	0x00000000

08017d80 <nan>:
 8017d80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017d88 <nan+0x8>
 8017d84:	4770      	bx	lr
 8017d86:	bf00      	nop
 8017d88:	00000000 	.word	0x00000000
 8017d8c:	7ff80000 	.word	0x7ff80000

08017d90 <__ascii_wctomb>:
 8017d90:	b149      	cbz	r1, 8017da6 <__ascii_wctomb+0x16>
 8017d92:	2aff      	cmp	r2, #255	; 0xff
 8017d94:	bf85      	ittet	hi
 8017d96:	238a      	movhi	r3, #138	; 0x8a
 8017d98:	6003      	strhi	r3, [r0, #0]
 8017d9a:	700a      	strbls	r2, [r1, #0]
 8017d9c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8017da0:	bf98      	it	ls
 8017da2:	2001      	movls	r0, #1
 8017da4:	4770      	bx	lr
 8017da6:	4608      	mov	r0, r1
 8017da8:	4770      	bx	lr
	...

08017dac <__assert_func>:
 8017dac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017dae:	4614      	mov	r4, r2
 8017db0:	461a      	mov	r2, r3
 8017db2:	4b09      	ldr	r3, [pc, #36]	; (8017dd8 <__assert_func+0x2c>)
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	4605      	mov	r5, r0
 8017db8:	68d8      	ldr	r0, [r3, #12]
 8017dba:	b14c      	cbz	r4, 8017dd0 <__assert_func+0x24>
 8017dbc:	4b07      	ldr	r3, [pc, #28]	; (8017ddc <__assert_func+0x30>)
 8017dbe:	9100      	str	r1, [sp, #0]
 8017dc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017dc4:	4906      	ldr	r1, [pc, #24]	; (8017de0 <__assert_func+0x34>)
 8017dc6:	462b      	mov	r3, r5
 8017dc8:	f000 f80e 	bl	8017de8 <fiprintf>
 8017dcc:	f000 fa80 	bl	80182d0 <abort>
 8017dd0:	4b04      	ldr	r3, [pc, #16]	; (8017de4 <__assert_func+0x38>)
 8017dd2:	461c      	mov	r4, r3
 8017dd4:	e7f3      	b.n	8017dbe <__assert_func+0x12>
 8017dd6:	bf00      	nop
 8017dd8:	2000022c 	.word	0x2000022c
 8017ddc:	0801a66d 	.word	0x0801a66d
 8017de0:	0801a67a 	.word	0x0801a67a
 8017de4:	0801a6a8 	.word	0x0801a6a8

08017de8 <fiprintf>:
 8017de8:	b40e      	push	{r1, r2, r3}
 8017dea:	b503      	push	{r0, r1, lr}
 8017dec:	4601      	mov	r1, r0
 8017dee:	ab03      	add	r3, sp, #12
 8017df0:	4805      	ldr	r0, [pc, #20]	; (8017e08 <fiprintf+0x20>)
 8017df2:	f853 2b04 	ldr.w	r2, [r3], #4
 8017df6:	6800      	ldr	r0, [r0, #0]
 8017df8:	9301      	str	r3, [sp, #4]
 8017dfa:	f000 f879 	bl	8017ef0 <_vfiprintf_r>
 8017dfe:	b002      	add	sp, #8
 8017e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8017e04:	b003      	add	sp, #12
 8017e06:	4770      	bx	lr
 8017e08:	2000022c 	.word	0x2000022c

08017e0c <memmove>:
 8017e0c:	4288      	cmp	r0, r1
 8017e0e:	b510      	push	{r4, lr}
 8017e10:	eb01 0402 	add.w	r4, r1, r2
 8017e14:	d902      	bls.n	8017e1c <memmove+0x10>
 8017e16:	4284      	cmp	r4, r0
 8017e18:	4623      	mov	r3, r4
 8017e1a:	d807      	bhi.n	8017e2c <memmove+0x20>
 8017e1c:	1e43      	subs	r3, r0, #1
 8017e1e:	42a1      	cmp	r1, r4
 8017e20:	d008      	beq.n	8017e34 <memmove+0x28>
 8017e22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017e26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017e2a:	e7f8      	b.n	8017e1e <memmove+0x12>
 8017e2c:	4402      	add	r2, r0
 8017e2e:	4601      	mov	r1, r0
 8017e30:	428a      	cmp	r2, r1
 8017e32:	d100      	bne.n	8017e36 <memmove+0x2a>
 8017e34:	bd10      	pop	{r4, pc}
 8017e36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017e3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017e3e:	e7f7      	b.n	8017e30 <memmove+0x24>

08017e40 <_realloc_r>:
 8017e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e44:	4680      	mov	r8, r0
 8017e46:	4614      	mov	r4, r2
 8017e48:	460e      	mov	r6, r1
 8017e4a:	b921      	cbnz	r1, 8017e56 <_realloc_r+0x16>
 8017e4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e50:	4611      	mov	r1, r2
 8017e52:	f7fc b905 	b.w	8014060 <_malloc_r>
 8017e56:	b92a      	cbnz	r2, 8017e64 <_realloc_r+0x24>
 8017e58:	f7ff fdd6 	bl	8017a08 <_free_r>
 8017e5c:	4625      	mov	r5, r4
 8017e5e:	4628      	mov	r0, r5
 8017e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e64:	f000 faa0 	bl	80183a8 <_malloc_usable_size_r>
 8017e68:	4284      	cmp	r4, r0
 8017e6a:	4607      	mov	r7, r0
 8017e6c:	d802      	bhi.n	8017e74 <_realloc_r+0x34>
 8017e6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017e72:	d812      	bhi.n	8017e9a <_realloc_r+0x5a>
 8017e74:	4621      	mov	r1, r4
 8017e76:	4640      	mov	r0, r8
 8017e78:	f7fc f8f2 	bl	8014060 <_malloc_r>
 8017e7c:	4605      	mov	r5, r0
 8017e7e:	2800      	cmp	r0, #0
 8017e80:	d0ed      	beq.n	8017e5e <_realloc_r+0x1e>
 8017e82:	42bc      	cmp	r4, r7
 8017e84:	4622      	mov	r2, r4
 8017e86:	4631      	mov	r1, r6
 8017e88:	bf28      	it	cs
 8017e8a:	463a      	movcs	r2, r7
 8017e8c:	f7fc f8b1 	bl	8013ff2 <memcpy>
 8017e90:	4631      	mov	r1, r6
 8017e92:	4640      	mov	r0, r8
 8017e94:	f7ff fdb8 	bl	8017a08 <_free_r>
 8017e98:	e7e1      	b.n	8017e5e <_realloc_r+0x1e>
 8017e9a:	4635      	mov	r5, r6
 8017e9c:	e7df      	b.n	8017e5e <_realloc_r+0x1e>

08017e9e <__sfputc_r>:
 8017e9e:	6893      	ldr	r3, [r2, #8]
 8017ea0:	3b01      	subs	r3, #1
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	b410      	push	{r4}
 8017ea6:	6093      	str	r3, [r2, #8]
 8017ea8:	da08      	bge.n	8017ebc <__sfputc_r+0x1e>
 8017eaa:	6994      	ldr	r4, [r2, #24]
 8017eac:	42a3      	cmp	r3, r4
 8017eae:	db01      	blt.n	8017eb4 <__sfputc_r+0x16>
 8017eb0:	290a      	cmp	r1, #10
 8017eb2:	d103      	bne.n	8017ebc <__sfputc_r+0x1e>
 8017eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017eb8:	f000 b94a 	b.w	8018150 <__swbuf_r>
 8017ebc:	6813      	ldr	r3, [r2, #0]
 8017ebe:	1c58      	adds	r0, r3, #1
 8017ec0:	6010      	str	r0, [r2, #0]
 8017ec2:	7019      	strb	r1, [r3, #0]
 8017ec4:	4608      	mov	r0, r1
 8017ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017eca:	4770      	bx	lr

08017ecc <__sfputs_r>:
 8017ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ece:	4606      	mov	r6, r0
 8017ed0:	460f      	mov	r7, r1
 8017ed2:	4614      	mov	r4, r2
 8017ed4:	18d5      	adds	r5, r2, r3
 8017ed6:	42ac      	cmp	r4, r5
 8017ed8:	d101      	bne.n	8017ede <__sfputs_r+0x12>
 8017eda:	2000      	movs	r0, #0
 8017edc:	e007      	b.n	8017eee <__sfputs_r+0x22>
 8017ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ee2:	463a      	mov	r2, r7
 8017ee4:	4630      	mov	r0, r6
 8017ee6:	f7ff ffda 	bl	8017e9e <__sfputc_r>
 8017eea:	1c43      	adds	r3, r0, #1
 8017eec:	d1f3      	bne.n	8017ed6 <__sfputs_r+0xa>
 8017eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017ef0 <_vfiprintf_r>:
 8017ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ef4:	460d      	mov	r5, r1
 8017ef6:	b09d      	sub	sp, #116	; 0x74
 8017ef8:	4614      	mov	r4, r2
 8017efa:	4698      	mov	r8, r3
 8017efc:	4606      	mov	r6, r0
 8017efe:	b118      	cbz	r0, 8017f08 <_vfiprintf_r+0x18>
 8017f00:	6983      	ldr	r3, [r0, #24]
 8017f02:	b90b      	cbnz	r3, 8017f08 <_vfiprintf_r+0x18>
 8017f04:	f7fb ff04 	bl	8013d10 <__sinit>
 8017f08:	4b89      	ldr	r3, [pc, #548]	; (8018130 <_vfiprintf_r+0x240>)
 8017f0a:	429d      	cmp	r5, r3
 8017f0c:	d11b      	bne.n	8017f46 <_vfiprintf_r+0x56>
 8017f0e:	6875      	ldr	r5, [r6, #4]
 8017f10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017f12:	07d9      	lsls	r1, r3, #31
 8017f14:	d405      	bmi.n	8017f22 <_vfiprintf_r+0x32>
 8017f16:	89ab      	ldrh	r3, [r5, #12]
 8017f18:	059a      	lsls	r2, r3, #22
 8017f1a:	d402      	bmi.n	8017f22 <_vfiprintf_r+0x32>
 8017f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017f1e:	f7fc f866 	bl	8013fee <__retarget_lock_acquire_recursive>
 8017f22:	89ab      	ldrh	r3, [r5, #12]
 8017f24:	071b      	lsls	r3, r3, #28
 8017f26:	d501      	bpl.n	8017f2c <_vfiprintf_r+0x3c>
 8017f28:	692b      	ldr	r3, [r5, #16]
 8017f2a:	b9eb      	cbnz	r3, 8017f68 <_vfiprintf_r+0x78>
 8017f2c:	4629      	mov	r1, r5
 8017f2e:	4630      	mov	r0, r6
 8017f30:	f000 f960 	bl	80181f4 <__swsetup_r>
 8017f34:	b1c0      	cbz	r0, 8017f68 <_vfiprintf_r+0x78>
 8017f36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017f38:	07dc      	lsls	r4, r3, #31
 8017f3a:	d50e      	bpl.n	8017f5a <_vfiprintf_r+0x6a>
 8017f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017f40:	b01d      	add	sp, #116	; 0x74
 8017f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f46:	4b7b      	ldr	r3, [pc, #492]	; (8018134 <_vfiprintf_r+0x244>)
 8017f48:	429d      	cmp	r5, r3
 8017f4a:	d101      	bne.n	8017f50 <_vfiprintf_r+0x60>
 8017f4c:	68b5      	ldr	r5, [r6, #8]
 8017f4e:	e7df      	b.n	8017f10 <_vfiprintf_r+0x20>
 8017f50:	4b79      	ldr	r3, [pc, #484]	; (8018138 <_vfiprintf_r+0x248>)
 8017f52:	429d      	cmp	r5, r3
 8017f54:	bf08      	it	eq
 8017f56:	68f5      	ldreq	r5, [r6, #12]
 8017f58:	e7da      	b.n	8017f10 <_vfiprintf_r+0x20>
 8017f5a:	89ab      	ldrh	r3, [r5, #12]
 8017f5c:	0598      	lsls	r0, r3, #22
 8017f5e:	d4ed      	bmi.n	8017f3c <_vfiprintf_r+0x4c>
 8017f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017f62:	f7fc f845 	bl	8013ff0 <__retarget_lock_release_recursive>
 8017f66:	e7e9      	b.n	8017f3c <_vfiprintf_r+0x4c>
 8017f68:	2300      	movs	r3, #0
 8017f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8017f6c:	2320      	movs	r3, #32
 8017f6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017f72:	f8cd 800c 	str.w	r8, [sp, #12]
 8017f76:	2330      	movs	r3, #48	; 0x30
 8017f78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801813c <_vfiprintf_r+0x24c>
 8017f7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017f80:	f04f 0901 	mov.w	r9, #1
 8017f84:	4623      	mov	r3, r4
 8017f86:	469a      	mov	sl, r3
 8017f88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017f8c:	b10a      	cbz	r2, 8017f92 <_vfiprintf_r+0xa2>
 8017f8e:	2a25      	cmp	r2, #37	; 0x25
 8017f90:	d1f9      	bne.n	8017f86 <_vfiprintf_r+0x96>
 8017f92:	ebba 0b04 	subs.w	fp, sl, r4
 8017f96:	d00b      	beq.n	8017fb0 <_vfiprintf_r+0xc0>
 8017f98:	465b      	mov	r3, fp
 8017f9a:	4622      	mov	r2, r4
 8017f9c:	4629      	mov	r1, r5
 8017f9e:	4630      	mov	r0, r6
 8017fa0:	f7ff ff94 	bl	8017ecc <__sfputs_r>
 8017fa4:	3001      	adds	r0, #1
 8017fa6:	f000 80aa 	beq.w	80180fe <_vfiprintf_r+0x20e>
 8017faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017fac:	445a      	add	r2, fp
 8017fae:	9209      	str	r2, [sp, #36]	; 0x24
 8017fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	f000 80a2 	beq.w	80180fe <_vfiprintf_r+0x20e>
 8017fba:	2300      	movs	r3, #0
 8017fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017fc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017fc4:	f10a 0a01 	add.w	sl, sl, #1
 8017fc8:	9304      	str	r3, [sp, #16]
 8017fca:	9307      	str	r3, [sp, #28]
 8017fcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017fd0:	931a      	str	r3, [sp, #104]	; 0x68
 8017fd2:	4654      	mov	r4, sl
 8017fd4:	2205      	movs	r2, #5
 8017fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fda:	4858      	ldr	r0, [pc, #352]	; (801813c <_vfiprintf_r+0x24c>)
 8017fdc:	f7e8 f910 	bl	8000200 <memchr>
 8017fe0:	9a04      	ldr	r2, [sp, #16]
 8017fe2:	b9d8      	cbnz	r0, 801801c <_vfiprintf_r+0x12c>
 8017fe4:	06d1      	lsls	r1, r2, #27
 8017fe6:	bf44      	itt	mi
 8017fe8:	2320      	movmi	r3, #32
 8017fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017fee:	0713      	lsls	r3, r2, #28
 8017ff0:	bf44      	itt	mi
 8017ff2:	232b      	movmi	r3, #43	; 0x2b
 8017ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8017ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8017ffe:	d015      	beq.n	801802c <_vfiprintf_r+0x13c>
 8018000:	9a07      	ldr	r2, [sp, #28]
 8018002:	4654      	mov	r4, sl
 8018004:	2000      	movs	r0, #0
 8018006:	f04f 0c0a 	mov.w	ip, #10
 801800a:	4621      	mov	r1, r4
 801800c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018010:	3b30      	subs	r3, #48	; 0x30
 8018012:	2b09      	cmp	r3, #9
 8018014:	d94e      	bls.n	80180b4 <_vfiprintf_r+0x1c4>
 8018016:	b1b0      	cbz	r0, 8018046 <_vfiprintf_r+0x156>
 8018018:	9207      	str	r2, [sp, #28]
 801801a:	e014      	b.n	8018046 <_vfiprintf_r+0x156>
 801801c:	eba0 0308 	sub.w	r3, r0, r8
 8018020:	fa09 f303 	lsl.w	r3, r9, r3
 8018024:	4313      	orrs	r3, r2
 8018026:	9304      	str	r3, [sp, #16]
 8018028:	46a2      	mov	sl, r4
 801802a:	e7d2      	b.n	8017fd2 <_vfiprintf_r+0xe2>
 801802c:	9b03      	ldr	r3, [sp, #12]
 801802e:	1d19      	adds	r1, r3, #4
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	9103      	str	r1, [sp, #12]
 8018034:	2b00      	cmp	r3, #0
 8018036:	bfbb      	ittet	lt
 8018038:	425b      	neglt	r3, r3
 801803a:	f042 0202 	orrlt.w	r2, r2, #2
 801803e:	9307      	strge	r3, [sp, #28]
 8018040:	9307      	strlt	r3, [sp, #28]
 8018042:	bfb8      	it	lt
 8018044:	9204      	strlt	r2, [sp, #16]
 8018046:	7823      	ldrb	r3, [r4, #0]
 8018048:	2b2e      	cmp	r3, #46	; 0x2e
 801804a:	d10c      	bne.n	8018066 <_vfiprintf_r+0x176>
 801804c:	7863      	ldrb	r3, [r4, #1]
 801804e:	2b2a      	cmp	r3, #42	; 0x2a
 8018050:	d135      	bne.n	80180be <_vfiprintf_r+0x1ce>
 8018052:	9b03      	ldr	r3, [sp, #12]
 8018054:	1d1a      	adds	r2, r3, #4
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	9203      	str	r2, [sp, #12]
 801805a:	2b00      	cmp	r3, #0
 801805c:	bfb8      	it	lt
 801805e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018062:	3402      	adds	r4, #2
 8018064:	9305      	str	r3, [sp, #20]
 8018066:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801814c <_vfiprintf_r+0x25c>
 801806a:	7821      	ldrb	r1, [r4, #0]
 801806c:	2203      	movs	r2, #3
 801806e:	4650      	mov	r0, sl
 8018070:	f7e8 f8c6 	bl	8000200 <memchr>
 8018074:	b140      	cbz	r0, 8018088 <_vfiprintf_r+0x198>
 8018076:	2340      	movs	r3, #64	; 0x40
 8018078:	eba0 000a 	sub.w	r0, r0, sl
 801807c:	fa03 f000 	lsl.w	r0, r3, r0
 8018080:	9b04      	ldr	r3, [sp, #16]
 8018082:	4303      	orrs	r3, r0
 8018084:	3401      	adds	r4, #1
 8018086:	9304      	str	r3, [sp, #16]
 8018088:	f814 1b01 	ldrb.w	r1, [r4], #1
 801808c:	482c      	ldr	r0, [pc, #176]	; (8018140 <_vfiprintf_r+0x250>)
 801808e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018092:	2206      	movs	r2, #6
 8018094:	f7e8 f8b4 	bl	8000200 <memchr>
 8018098:	2800      	cmp	r0, #0
 801809a:	d03f      	beq.n	801811c <_vfiprintf_r+0x22c>
 801809c:	4b29      	ldr	r3, [pc, #164]	; (8018144 <_vfiprintf_r+0x254>)
 801809e:	bb1b      	cbnz	r3, 80180e8 <_vfiprintf_r+0x1f8>
 80180a0:	9b03      	ldr	r3, [sp, #12]
 80180a2:	3307      	adds	r3, #7
 80180a4:	f023 0307 	bic.w	r3, r3, #7
 80180a8:	3308      	adds	r3, #8
 80180aa:	9303      	str	r3, [sp, #12]
 80180ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180ae:	443b      	add	r3, r7
 80180b0:	9309      	str	r3, [sp, #36]	; 0x24
 80180b2:	e767      	b.n	8017f84 <_vfiprintf_r+0x94>
 80180b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80180b8:	460c      	mov	r4, r1
 80180ba:	2001      	movs	r0, #1
 80180bc:	e7a5      	b.n	801800a <_vfiprintf_r+0x11a>
 80180be:	2300      	movs	r3, #0
 80180c0:	3401      	adds	r4, #1
 80180c2:	9305      	str	r3, [sp, #20]
 80180c4:	4619      	mov	r1, r3
 80180c6:	f04f 0c0a 	mov.w	ip, #10
 80180ca:	4620      	mov	r0, r4
 80180cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80180d0:	3a30      	subs	r2, #48	; 0x30
 80180d2:	2a09      	cmp	r2, #9
 80180d4:	d903      	bls.n	80180de <_vfiprintf_r+0x1ee>
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d0c5      	beq.n	8018066 <_vfiprintf_r+0x176>
 80180da:	9105      	str	r1, [sp, #20]
 80180dc:	e7c3      	b.n	8018066 <_vfiprintf_r+0x176>
 80180de:	fb0c 2101 	mla	r1, ip, r1, r2
 80180e2:	4604      	mov	r4, r0
 80180e4:	2301      	movs	r3, #1
 80180e6:	e7f0      	b.n	80180ca <_vfiprintf_r+0x1da>
 80180e8:	ab03      	add	r3, sp, #12
 80180ea:	9300      	str	r3, [sp, #0]
 80180ec:	462a      	mov	r2, r5
 80180ee:	4b16      	ldr	r3, [pc, #88]	; (8018148 <_vfiprintf_r+0x258>)
 80180f0:	a904      	add	r1, sp, #16
 80180f2:	4630      	mov	r0, r6
 80180f4:	f7fc f8c8 	bl	8014288 <_printf_float>
 80180f8:	4607      	mov	r7, r0
 80180fa:	1c78      	adds	r0, r7, #1
 80180fc:	d1d6      	bne.n	80180ac <_vfiprintf_r+0x1bc>
 80180fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018100:	07d9      	lsls	r1, r3, #31
 8018102:	d405      	bmi.n	8018110 <_vfiprintf_r+0x220>
 8018104:	89ab      	ldrh	r3, [r5, #12]
 8018106:	059a      	lsls	r2, r3, #22
 8018108:	d402      	bmi.n	8018110 <_vfiprintf_r+0x220>
 801810a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801810c:	f7fb ff70 	bl	8013ff0 <__retarget_lock_release_recursive>
 8018110:	89ab      	ldrh	r3, [r5, #12]
 8018112:	065b      	lsls	r3, r3, #25
 8018114:	f53f af12 	bmi.w	8017f3c <_vfiprintf_r+0x4c>
 8018118:	9809      	ldr	r0, [sp, #36]	; 0x24
 801811a:	e711      	b.n	8017f40 <_vfiprintf_r+0x50>
 801811c:	ab03      	add	r3, sp, #12
 801811e:	9300      	str	r3, [sp, #0]
 8018120:	462a      	mov	r2, r5
 8018122:	4b09      	ldr	r3, [pc, #36]	; (8018148 <_vfiprintf_r+0x258>)
 8018124:	a904      	add	r1, sp, #16
 8018126:	4630      	mov	r0, r6
 8018128:	f7fc fb52 	bl	80147d0 <_printf_i>
 801812c:	e7e4      	b.n	80180f8 <_vfiprintf_r+0x208>
 801812e:	bf00      	nop
 8018130:	0801a32c 	.word	0x0801a32c
 8018134:	0801a34c 	.word	0x0801a34c
 8018138:	0801a30c 	.word	0x0801a30c
 801813c:	0801a65c 	.word	0x0801a65c
 8018140:	0801a666 	.word	0x0801a666
 8018144:	08014289 	.word	0x08014289
 8018148:	08017ecd 	.word	0x08017ecd
 801814c:	0801a662 	.word	0x0801a662

08018150 <__swbuf_r>:
 8018150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018152:	460e      	mov	r6, r1
 8018154:	4614      	mov	r4, r2
 8018156:	4605      	mov	r5, r0
 8018158:	b118      	cbz	r0, 8018162 <__swbuf_r+0x12>
 801815a:	6983      	ldr	r3, [r0, #24]
 801815c:	b90b      	cbnz	r3, 8018162 <__swbuf_r+0x12>
 801815e:	f7fb fdd7 	bl	8013d10 <__sinit>
 8018162:	4b21      	ldr	r3, [pc, #132]	; (80181e8 <__swbuf_r+0x98>)
 8018164:	429c      	cmp	r4, r3
 8018166:	d12b      	bne.n	80181c0 <__swbuf_r+0x70>
 8018168:	686c      	ldr	r4, [r5, #4]
 801816a:	69a3      	ldr	r3, [r4, #24]
 801816c:	60a3      	str	r3, [r4, #8]
 801816e:	89a3      	ldrh	r3, [r4, #12]
 8018170:	071a      	lsls	r2, r3, #28
 8018172:	d52f      	bpl.n	80181d4 <__swbuf_r+0x84>
 8018174:	6923      	ldr	r3, [r4, #16]
 8018176:	b36b      	cbz	r3, 80181d4 <__swbuf_r+0x84>
 8018178:	6923      	ldr	r3, [r4, #16]
 801817a:	6820      	ldr	r0, [r4, #0]
 801817c:	1ac0      	subs	r0, r0, r3
 801817e:	6963      	ldr	r3, [r4, #20]
 8018180:	b2f6      	uxtb	r6, r6
 8018182:	4283      	cmp	r3, r0
 8018184:	4637      	mov	r7, r6
 8018186:	dc04      	bgt.n	8018192 <__swbuf_r+0x42>
 8018188:	4621      	mov	r1, r4
 801818a:	4628      	mov	r0, r5
 801818c:	f7fe fb7c 	bl	8016888 <_fflush_r>
 8018190:	bb30      	cbnz	r0, 80181e0 <__swbuf_r+0x90>
 8018192:	68a3      	ldr	r3, [r4, #8]
 8018194:	3b01      	subs	r3, #1
 8018196:	60a3      	str	r3, [r4, #8]
 8018198:	6823      	ldr	r3, [r4, #0]
 801819a:	1c5a      	adds	r2, r3, #1
 801819c:	6022      	str	r2, [r4, #0]
 801819e:	701e      	strb	r6, [r3, #0]
 80181a0:	6963      	ldr	r3, [r4, #20]
 80181a2:	3001      	adds	r0, #1
 80181a4:	4283      	cmp	r3, r0
 80181a6:	d004      	beq.n	80181b2 <__swbuf_r+0x62>
 80181a8:	89a3      	ldrh	r3, [r4, #12]
 80181aa:	07db      	lsls	r3, r3, #31
 80181ac:	d506      	bpl.n	80181bc <__swbuf_r+0x6c>
 80181ae:	2e0a      	cmp	r6, #10
 80181b0:	d104      	bne.n	80181bc <__swbuf_r+0x6c>
 80181b2:	4621      	mov	r1, r4
 80181b4:	4628      	mov	r0, r5
 80181b6:	f7fe fb67 	bl	8016888 <_fflush_r>
 80181ba:	b988      	cbnz	r0, 80181e0 <__swbuf_r+0x90>
 80181bc:	4638      	mov	r0, r7
 80181be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181c0:	4b0a      	ldr	r3, [pc, #40]	; (80181ec <__swbuf_r+0x9c>)
 80181c2:	429c      	cmp	r4, r3
 80181c4:	d101      	bne.n	80181ca <__swbuf_r+0x7a>
 80181c6:	68ac      	ldr	r4, [r5, #8]
 80181c8:	e7cf      	b.n	801816a <__swbuf_r+0x1a>
 80181ca:	4b09      	ldr	r3, [pc, #36]	; (80181f0 <__swbuf_r+0xa0>)
 80181cc:	429c      	cmp	r4, r3
 80181ce:	bf08      	it	eq
 80181d0:	68ec      	ldreq	r4, [r5, #12]
 80181d2:	e7ca      	b.n	801816a <__swbuf_r+0x1a>
 80181d4:	4621      	mov	r1, r4
 80181d6:	4628      	mov	r0, r5
 80181d8:	f000 f80c 	bl	80181f4 <__swsetup_r>
 80181dc:	2800      	cmp	r0, #0
 80181de:	d0cb      	beq.n	8018178 <__swbuf_r+0x28>
 80181e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80181e4:	e7ea      	b.n	80181bc <__swbuf_r+0x6c>
 80181e6:	bf00      	nop
 80181e8:	0801a32c 	.word	0x0801a32c
 80181ec:	0801a34c 	.word	0x0801a34c
 80181f0:	0801a30c 	.word	0x0801a30c

080181f4 <__swsetup_r>:
 80181f4:	4b32      	ldr	r3, [pc, #200]	; (80182c0 <__swsetup_r+0xcc>)
 80181f6:	b570      	push	{r4, r5, r6, lr}
 80181f8:	681d      	ldr	r5, [r3, #0]
 80181fa:	4606      	mov	r6, r0
 80181fc:	460c      	mov	r4, r1
 80181fe:	b125      	cbz	r5, 801820a <__swsetup_r+0x16>
 8018200:	69ab      	ldr	r3, [r5, #24]
 8018202:	b913      	cbnz	r3, 801820a <__swsetup_r+0x16>
 8018204:	4628      	mov	r0, r5
 8018206:	f7fb fd83 	bl	8013d10 <__sinit>
 801820a:	4b2e      	ldr	r3, [pc, #184]	; (80182c4 <__swsetup_r+0xd0>)
 801820c:	429c      	cmp	r4, r3
 801820e:	d10f      	bne.n	8018230 <__swsetup_r+0x3c>
 8018210:	686c      	ldr	r4, [r5, #4]
 8018212:	89a3      	ldrh	r3, [r4, #12]
 8018214:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018218:	0719      	lsls	r1, r3, #28
 801821a:	d42c      	bmi.n	8018276 <__swsetup_r+0x82>
 801821c:	06dd      	lsls	r5, r3, #27
 801821e:	d411      	bmi.n	8018244 <__swsetup_r+0x50>
 8018220:	2309      	movs	r3, #9
 8018222:	6033      	str	r3, [r6, #0]
 8018224:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018228:	81a3      	strh	r3, [r4, #12]
 801822a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801822e:	e03e      	b.n	80182ae <__swsetup_r+0xba>
 8018230:	4b25      	ldr	r3, [pc, #148]	; (80182c8 <__swsetup_r+0xd4>)
 8018232:	429c      	cmp	r4, r3
 8018234:	d101      	bne.n	801823a <__swsetup_r+0x46>
 8018236:	68ac      	ldr	r4, [r5, #8]
 8018238:	e7eb      	b.n	8018212 <__swsetup_r+0x1e>
 801823a:	4b24      	ldr	r3, [pc, #144]	; (80182cc <__swsetup_r+0xd8>)
 801823c:	429c      	cmp	r4, r3
 801823e:	bf08      	it	eq
 8018240:	68ec      	ldreq	r4, [r5, #12]
 8018242:	e7e6      	b.n	8018212 <__swsetup_r+0x1e>
 8018244:	0758      	lsls	r0, r3, #29
 8018246:	d512      	bpl.n	801826e <__swsetup_r+0x7a>
 8018248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801824a:	b141      	cbz	r1, 801825e <__swsetup_r+0x6a>
 801824c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018250:	4299      	cmp	r1, r3
 8018252:	d002      	beq.n	801825a <__swsetup_r+0x66>
 8018254:	4630      	mov	r0, r6
 8018256:	f7ff fbd7 	bl	8017a08 <_free_r>
 801825a:	2300      	movs	r3, #0
 801825c:	6363      	str	r3, [r4, #52]	; 0x34
 801825e:	89a3      	ldrh	r3, [r4, #12]
 8018260:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018264:	81a3      	strh	r3, [r4, #12]
 8018266:	2300      	movs	r3, #0
 8018268:	6063      	str	r3, [r4, #4]
 801826a:	6923      	ldr	r3, [r4, #16]
 801826c:	6023      	str	r3, [r4, #0]
 801826e:	89a3      	ldrh	r3, [r4, #12]
 8018270:	f043 0308 	orr.w	r3, r3, #8
 8018274:	81a3      	strh	r3, [r4, #12]
 8018276:	6923      	ldr	r3, [r4, #16]
 8018278:	b94b      	cbnz	r3, 801828e <__swsetup_r+0x9a>
 801827a:	89a3      	ldrh	r3, [r4, #12]
 801827c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018284:	d003      	beq.n	801828e <__swsetup_r+0x9a>
 8018286:	4621      	mov	r1, r4
 8018288:	4630      	mov	r0, r6
 801828a:	f000 f84d 	bl	8018328 <__smakebuf_r>
 801828e:	89a0      	ldrh	r0, [r4, #12]
 8018290:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018294:	f010 0301 	ands.w	r3, r0, #1
 8018298:	d00a      	beq.n	80182b0 <__swsetup_r+0xbc>
 801829a:	2300      	movs	r3, #0
 801829c:	60a3      	str	r3, [r4, #8]
 801829e:	6963      	ldr	r3, [r4, #20]
 80182a0:	425b      	negs	r3, r3
 80182a2:	61a3      	str	r3, [r4, #24]
 80182a4:	6923      	ldr	r3, [r4, #16]
 80182a6:	b943      	cbnz	r3, 80182ba <__swsetup_r+0xc6>
 80182a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80182ac:	d1ba      	bne.n	8018224 <__swsetup_r+0x30>
 80182ae:	bd70      	pop	{r4, r5, r6, pc}
 80182b0:	0781      	lsls	r1, r0, #30
 80182b2:	bf58      	it	pl
 80182b4:	6963      	ldrpl	r3, [r4, #20]
 80182b6:	60a3      	str	r3, [r4, #8]
 80182b8:	e7f4      	b.n	80182a4 <__swsetup_r+0xb0>
 80182ba:	2000      	movs	r0, #0
 80182bc:	e7f7      	b.n	80182ae <__swsetup_r+0xba>
 80182be:	bf00      	nop
 80182c0:	2000022c 	.word	0x2000022c
 80182c4:	0801a32c 	.word	0x0801a32c
 80182c8:	0801a34c 	.word	0x0801a34c
 80182cc:	0801a30c 	.word	0x0801a30c

080182d0 <abort>:
 80182d0:	b508      	push	{r3, lr}
 80182d2:	2006      	movs	r0, #6
 80182d4:	f000 f898 	bl	8018408 <raise>
 80182d8:	2001      	movs	r0, #1
 80182da:	f7ef f9af 	bl	800763c <_exit>

080182de <__swhatbuf_r>:
 80182de:	b570      	push	{r4, r5, r6, lr}
 80182e0:	460e      	mov	r6, r1
 80182e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182e6:	2900      	cmp	r1, #0
 80182e8:	b096      	sub	sp, #88	; 0x58
 80182ea:	4614      	mov	r4, r2
 80182ec:	461d      	mov	r5, r3
 80182ee:	da08      	bge.n	8018302 <__swhatbuf_r+0x24>
 80182f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80182f4:	2200      	movs	r2, #0
 80182f6:	602a      	str	r2, [r5, #0]
 80182f8:	061a      	lsls	r2, r3, #24
 80182fa:	d410      	bmi.n	801831e <__swhatbuf_r+0x40>
 80182fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018300:	e00e      	b.n	8018320 <__swhatbuf_r+0x42>
 8018302:	466a      	mov	r2, sp
 8018304:	f000 f89c 	bl	8018440 <_fstat_r>
 8018308:	2800      	cmp	r0, #0
 801830a:	dbf1      	blt.n	80182f0 <__swhatbuf_r+0x12>
 801830c:	9a01      	ldr	r2, [sp, #4]
 801830e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018312:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018316:	425a      	negs	r2, r3
 8018318:	415a      	adcs	r2, r3
 801831a:	602a      	str	r2, [r5, #0]
 801831c:	e7ee      	b.n	80182fc <__swhatbuf_r+0x1e>
 801831e:	2340      	movs	r3, #64	; 0x40
 8018320:	2000      	movs	r0, #0
 8018322:	6023      	str	r3, [r4, #0]
 8018324:	b016      	add	sp, #88	; 0x58
 8018326:	bd70      	pop	{r4, r5, r6, pc}

08018328 <__smakebuf_r>:
 8018328:	898b      	ldrh	r3, [r1, #12]
 801832a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801832c:	079d      	lsls	r5, r3, #30
 801832e:	4606      	mov	r6, r0
 8018330:	460c      	mov	r4, r1
 8018332:	d507      	bpl.n	8018344 <__smakebuf_r+0x1c>
 8018334:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018338:	6023      	str	r3, [r4, #0]
 801833a:	6123      	str	r3, [r4, #16]
 801833c:	2301      	movs	r3, #1
 801833e:	6163      	str	r3, [r4, #20]
 8018340:	b002      	add	sp, #8
 8018342:	bd70      	pop	{r4, r5, r6, pc}
 8018344:	ab01      	add	r3, sp, #4
 8018346:	466a      	mov	r2, sp
 8018348:	f7ff ffc9 	bl	80182de <__swhatbuf_r>
 801834c:	9900      	ldr	r1, [sp, #0]
 801834e:	4605      	mov	r5, r0
 8018350:	4630      	mov	r0, r6
 8018352:	f7fb fe85 	bl	8014060 <_malloc_r>
 8018356:	b948      	cbnz	r0, 801836c <__smakebuf_r+0x44>
 8018358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801835c:	059a      	lsls	r2, r3, #22
 801835e:	d4ef      	bmi.n	8018340 <__smakebuf_r+0x18>
 8018360:	f023 0303 	bic.w	r3, r3, #3
 8018364:	f043 0302 	orr.w	r3, r3, #2
 8018368:	81a3      	strh	r3, [r4, #12]
 801836a:	e7e3      	b.n	8018334 <__smakebuf_r+0xc>
 801836c:	4b0d      	ldr	r3, [pc, #52]	; (80183a4 <__smakebuf_r+0x7c>)
 801836e:	62b3      	str	r3, [r6, #40]	; 0x28
 8018370:	89a3      	ldrh	r3, [r4, #12]
 8018372:	6020      	str	r0, [r4, #0]
 8018374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018378:	81a3      	strh	r3, [r4, #12]
 801837a:	9b00      	ldr	r3, [sp, #0]
 801837c:	6163      	str	r3, [r4, #20]
 801837e:	9b01      	ldr	r3, [sp, #4]
 8018380:	6120      	str	r0, [r4, #16]
 8018382:	b15b      	cbz	r3, 801839c <__smakebuf_r+0x74>
 8018384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018388:	4630      	mov	r0, r6
 801838a:	f000 f86b 	bl	8018464 <_isatty_r>
 801838e:	b128      	cbz	r0, 801839c <__smakebuf_r+0x74>
 8018390:	89a3      	ldrh	r3, [r4, #12]
 8018392:	f023 0303 	bic.w	r3, r3, #3
 8018396:	f043 0301 	orr.w	r3, r3, #1
 801839a:	81a3      	strh	r3, [r4, #12]
 801839c:	89a0      	ldrh	r0, [r4, #12]
 801839e:	4305      	orrs	r5, r0
 80183a0:	81a5      	strh	r5, [r4, #12]
 80183a2:	e7cd      	b.n	8018340 <__smakebuf_r+0x18>
 80183a4:	08013ca9 	.word	0x08013ca9

080183a8 <_malloc_usable_size_r>:
 80183a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80183ac:	1f18      	subs	r0, r3, #4
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	bfbc      	itt	lt
 80183b2:	580b      	ldrlt	r3, [r1, r0]
 80183b4:	18c0      	addlt	r0, r0, r3
 80183b6:	4770      	bx	lr

080183b8 <_raise_r>:
 80183b8:	291f      	cmp	r1, #31
 80183ba:	b538      	push	{r3, r4, r5, lr}
 80183bc:	4604      	mov	r4, r0
 80183be:	460d      	mov	r5, r1
 80183c0:	d904      	bls.n	80183cc <_raise_r+0x14>
 80183c2:	2316      	movs	r3, #22
 80183c4:	6003      	str	r3, [r0, #0]
 80183c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80183ca:	bd38      	pop	{r3, r4, r5, pc}
 80183cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80183ce:	b112      	cbz	r2, 80183d6 <_raise_r+0x1e>
 80183d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80183d4:	b94b      	cbnz	r3, 80183ea <_raise_r+0x32>
 80183d6:	4620      	mov	r0, r4
 80183d8:	f000 f830 	bl	801843c <_getpid_r>
 80183dc:	462a      	mov	r2, r5
 80183de:	4601      	mov	r1, r0
 80183e0:	4620      	mov	r0, r4
 80183e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80183e6:	f000 b817 	b.w	8018418 <_kill_r>
 80183ea:	2b01      	cmp	r3, #1
 80183ec:	d00a      	beq.n	8018404 <_raise_r+0x4c>
 80183ee:	1c59      	adds	r1, r3, #1
 80183f0:	d103      	bne.n	80183fa <_raise_r+0x42>
 80183f2:	2316      	movs	r3, #22
 80183f4:	6003      	str	r3, [r0, #0]
 80183f6:	2001      	movs	r0, #1
 80183f8:	e7e7      	b.n	80183ca <_raise_r+0x12>
 80183fa:	2400      	movs	r4, #0
 80183fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018400:	4628      	mov	r0, r5
 8018402:	4798      	blx	r3
 8018404:	2000      	movs	r0, #0
 8018406:	e7e0      	b.n	80183ca <_raise_r+0x12>

08018408 <raise>:
 8018408:	4b02      	ldr	r3, [pc, #8]	; (8018414 <raise+0xc>)
 801840a:	4601      	mov	r1, r0
 801840c:	6818      	ldr	r0, [r3, #0]
 801840e:	f7ff bfd3 	b.w	80183b8 <_raise_r>
 8018412:	bf00      	nop
 8018414:	2000022c 	.word	0x2000022c

08018418 <_kill_r>:
 8018418:	b538      	push	{r3, r4, r5, lr}
 801841a:	4d07      	ldr	r5, [pc, #28]	; (8018438 <_kill_r+0x20>)
 801841c:	2300      	movs	r3, #0
 801841e:	4604      	mov	r4, r0
 8018420:	4608      	mov	r0, r1
 8018422:	4611      	mov	r1, r2
 8018424:	602b      	str	r3, [r5, #0]
 8018426:	f7ef f8f9 	bl	800761c <_kill>
 801842a:	1c43      	adds	r3, r0, #1
 801842c:	d102      	bne.n	8018434 <_kill_r+0x1c>
 801842e:	682b      	ldr	r3, [r5, #0]
 8018430:	b103      	cbz	r3, 8018434 <_kill_r+0x1c>
 8018432:	6023      	str	r3, [r4, #0]
 8018434:	bd38      	pop	{r3, r4, r5, pc}
 8018436:	bf00      	nop
 8018438:	20008420 	.word	0x20008420

0801843c <_getpid_r>:
 801843c:	f7ef b8e6 	b.w	800760c <_getpid>

08018440 <_fstat_r>:
 8018440:	b538      	push	{r3, r4, r5, lr}
 8018442:	4d07      	ldr	r5, [pc, #28]	; (8018460 <_fstat_r+0x20>)
 8018444:	2300      	movs	r3, #0
 8018446:	4604      	mov	r4, r0
 8018448:	4608      	mov	r0, r1
 801844a:	4611      	mov	r1, r2
 801844c:	602b      	str	r3, [r5, #0]
 801844e:	f7ef f944 	bl	80076da <_fstat>
 8018452:	1c43      	adds	r3, r0, #1
 8018454:	d102      	bne.n	801845c <_fstat_r+0x1c>
 8018456:	682b      	ldr	r3, [r5, #0]
 8018458:	b103      	cbz	r3, 801845c <_fstat_r+0x1c>
 801845a:	6023      	str	r3, [r4, #0]
 801845c:	bd38      	pop	{r3, r4, r5, pc}
 801845e:	bf00      	nop
 8018460:	20008420 	.word	0x20008420

08018464 <_isatty_r>:
 8018464:	b538      	push	{r3, r4, r5, lr}
 8018466:	4d06      	ldr	r5, [pc, #24]	; (8018480 <_isatty_r+0x1c>)
 8018468:	2300      	movs	r3, #0
 801846a:	4604      	mov	r4, r0
 801846c:	4608      	mov	r0, r1
 801846e:	602b      	str	r3, [r5, #0]
 8018470:	f7ef f943 	bl	80076fa <_isatty>
 8018474:	1c43      	adds	r3, r0, #1
 8018476:	d102      	bne.n	801847e <_isatty_r+0x1a>
 8018478:	682b      	ldr	r3, [r5, #0]
 801847a:	b103      	cbz	r3, 801847e <_isatty_r+0x1a>
 801847c:	6023      	str	r3, [r4, #0]
 801847e:	bd38      	pop	{r3, r4, r5, pc}
 8018480:	20008420 	.word	0x20008420

08018484 <_init>:
 8018484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018486:	bf00      	nop
 8018488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801848a:	bc08      	pop	{r3}
 801848c:	469e      	mov	lr, r3
 801848e:	4770      	bx	lr

08018490 <_fini>:
 8018490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018492:	bf00      	nop
 8018494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018496:	bc08      	pop	{r3}
 8018498:	469e      	mov	lr, r3
 801849a:	4770      	bx	lr
