
stm32l4_probe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015f1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cfc  080160b0  080160b0  000260b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017dac  08017dac  00030408  2**0
                  CONTENTS
  4 .ARM          00000008  08017dac  08017dac  00027dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017db4  08017db4  00030408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017db4  08017db4  00027db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017db8  08017db8  00027db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000408  20000000  08017dbc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d7c  20000408  080181c4  00030408  2**3
                  ALLOC
 10 ._user_heap_stack 00001004  20004184  080181c4  00034184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030408  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022754  00000000  00000000  00030438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004212  00000000  00000000  00052b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d98  00000000  00000000  00056da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c40  00000000  00000000  00058b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d327  00000000  00000000  0005a778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025b63  00000000  00000000  00087a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103c83  00000000  00000000  000ad602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b1285  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000949c  00000000  00000000  001b12d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000408 	.word	0x20000408
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016094 	.word	0x08016094

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000040c 	.word	0x2000040c
 80001cc:	08016094 	.word	0x08016094

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9f5 	b.w	8001094 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b9aa 	b.w	8001094 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <ST7565_Select>:
uint8_t lcdRdy = 1;

//------------------------------------------------------------------------------

inline static void ST7565_Select()
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
 800109c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010a4:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
	#endif
	//-----------------------------------------------------
#endif
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <ST7565_Unselect>:

//------------------------------------------------------------------------------

inline static void ST7565_Unselect()
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
#ifdef CS_PORT
	//-- если захотим переделать под HAL ------------------
	#ifdef ST7565_SPI_HAL
		//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
		CS_GPIO_Port->BSRR = CS_Pin;
 80010b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010b8:	2210      	movs	r2, #16
 80010ba:	619a      	str	r2, [r3, #24]
	#ifdef ST7565_SPI_CMSIS
		CS_GPIO_Port->BSRR = CS_Pin;
	#endif
	//-----------------------------------------------------
#endif
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <ST7565_Reset>:
	* @brief	 ( описание ):  аппарвтный сброс дисплея
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Reset()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	RES_GPIO_Port->BSRR = (RES_Pin << 16);//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET );
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <ST7565_Reset+0x24>)
 80010ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010d2:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f005 fbe3 	bl	80068a0 <HAL_Delay>
	
	RES_GPIO_Port->BSRR = RES_Pin;//HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET );
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <ST7565_Reset+0x24>)
 80010dc:	2204      	movs	r2, #4
 80010de:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f005 fbdd 	bl	80068a0 <HAL_Delay>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	48000c00 	.word	0x48000c00

080010f0 <ST7565_w_dats>:
//--------------------------------------------------------------------------------
#ifdef SET_NEW_PROC
inline static void ST7565_w_dats(uint8_t *Data, uint16_t len)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = DC_Pin;//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <ST7565_w_dats+0x84>)
 80010fe:	2220      	movs	r2, #32
 8001100:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <ST7565_w_dats+0x88>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d018      	beq.n	800113c <ST7565_w_dats+0x4c>
		lcdRdy = 0;
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <ST7565_w_dats+0x8c>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Data, len) != HAL_OK) devError |= devLCD;
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	461a      	mov	r2, r3
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	481a      	ldr	r0, [pc, #104]	; (8001180 <ST7565_w_dats+0x90>)
 8001118:	f00a f9c2 	bl	800b4a0 <HAL_SPI_Transmit_DMA>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <ST7565_w_dats+0x40>
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <ST7565_w_dats+0x94>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <ST7565_w_dats+0x94>)
 800112e:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 8001130:	bf00      	nop
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <ST7565_w_dats+0x8c>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0fb      	beq.n	8001132 <ST7565_w_dats+0x42>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 800113a:	e017      	b.n	800116c <ST7565_w_dats+0x7c>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Data, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 800113c:	887a      	ldrh	r2, [r7, #2]
 800113e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	480e      	ldr	r0, [pc, #56]	; (8001180 <ST7565_w_dats+0x90>)
 8001146:	f009 fcfa 	bl	800ab3e <HAL_SPI_Transmit>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <ST7565_w_dats+0x6e>
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <ST7565_w_dats+0x94>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <ST7565_w_dats+0x94>)
 800115c:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 800115e:	bf00      	nop
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <ST7565_w_dats+0x90>)
 8001162:	f00a fd3b 	bl	800bbdc <HAL_SPI_GetState>
 8001166:	4603      	mov	r3, r0
 8001168:	2b01      	cmp	r3, #1
 800116a:	d1f9      	bne.n	8001160 <ST7565_w_dats+0x70>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	48000400 	.word	0x48000400
 8001178:	20000824 	.word	0x20000824
 800117c:	20000000 	.word	0x20000000
 8001180:	20000930 	.word	0x20000930
 8001184:	20001468 	.word	0x20001468

08001188 <ST7565_w_cmds>:
//
inline static void ST7565_w_cmds(uint8_t *Command, uint16_t len)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
	DC_GPIO_Port->BSRR = (DC_Pin << 16);//HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001194:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <ST7565_w_cmds+0x88>)
 8001196:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800119a:	619a      	str	r2, [r3, #24]

	if (with_dma) {
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <ST7565_w_cmds+0x8c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d018      	beq.n	80011d6 <ST7565_w_cmds+0x4e>
		lcdRdy = 0;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <ST7565_w_cmds+0x90>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&ST7565_SPI_HAL, Command, len) != HAL_OK) devError |= devLCD;
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	461a      	mov	r2, r3
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	481a      	ldr	r0, [pc, #104]	; (800121c <ST7565_w_cmds+0x94>)
 80011b2:	f00a f975 	bl	800b4a0 <HAL_SPI_Transmit_DMA>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <ST7565_w_cmds+0x42>
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <ST7565_w_cmds+0x98>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <ST7565_w_cmds+0x98>)
 80011c8:	801a      	strh	r2, [r3, #0]
		while (!lcdRdy) {};
 80011ca:	bf00      	nop
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <ST7565_w_cmds+0x90>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0fb      	beq.n	80011cc <ST7565_w_cmds+0x44>
	} else {
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
	}
}
 80011d4:	e017      	b.n	8001206 <ST7565_w_cmds+0x7e>
		if (HAL_SPI_Transmit(&ST7565_SPI_HAL, Command, len, HAL_MAX_DELAY) != HAL_OK) devError |= devLCD;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	480f      	ldr	r0, [pc, #60]	; (800121c <ST7565_w_cmds+0x94>)
 80011e0:	f009 fcad 	bl	800ab3e <HAL_SPI_Transmit>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d006      	beq.n	80011f8 <ST7565_w_cmds+0x70>
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <ST7565_w_cmds+0x98>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <ST7565_w_cmds+0x98>)
 80011f6:	801a      	strh	r2, [r3, #0]
		while (HAL_SPI_GetState(&ST7565_SPI_HAL) != HAL_SPI_STATE_READY) {};
 80011f8:	bf00      	nop
 80011fa:	4808      	ldr	r0, [pc, #32]	; (800121c <ST7565_w_cmds+0x94>)
 80011fc:	f00a fcee 	bl	800bbdc <HAL_SPI_GetState>
 8001200:	4603      	mov	r3, r0
 8001202:	2b01      	cmp	r3, #1
 8001204:	d1f9      	bne.n	80011fa <ST7565_w_cmds+0x72>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	48000400 	.word	0x48000400
 8001214:	20000824 	.word	0x20000824
 8001218:	20000000 	.word	0x20000000
 800121c:	20000930 	.word	0x20000930
 8001220:	20001468 	.word	0x20001468

08001224 <ST7565_SetX>:
inline static void ST7565_SetX(uint8_t x)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	uint8_t bytes[] = { ((x & 0xf0) >> 4) | 0x10, x & 0x0f };
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f043 0310 	orr.w	r3, r3, #16
 8001238:	b2db      	uxtb	r3, r3
 800123a:	733b      	strb	r3, [r7, #12]
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	b2db      	uxtb	r3, r3
 8001244:	737b      	strb	r3, [r7, #13]
	ST7565_w_cmds(bytes, 2);
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2102      	movs	r1, #2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff9b 	bl	8001188 <ST7565_w_cmds>
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <ST7565_SetY>:
//
inline static void ST7565_SetY(uint8_t y)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
	uint8_t byte = (y & 0x07) | 0xB0;
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	b25b      	sxtb	r3, r3
 800126e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8001272:	b25b      	sxtb	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	73fb      	strb	r3, [r7, #15]
	ST7565_w_cmds(&byte, 1);
 8001278:	f107 030f 	add.w	r3, r7, #15
 800127c:	2101      	movs	r1, #1
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff82 	bl	8001188 <ST7565_w_cmds>
}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <ST7565_Display_fill>:
								( данные отправляются сразу на дисплей и записываются в буфер кадра )
								Функцию ST7565_Update() вызывать не нужно
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Display_fill(uint8_t fill)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
uint8_t page;//, column;
	
	memset(ST7565_buffer, fill, (SCREEN_WIDTH * SCREEN_HEIGHT / 8));	// отчистка памяти заполняем массив значением 0x00
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800129c:	4619      	mov	r1, r3
 800129e:	4814      	ldr	r0, [pc, #80]	; (80012f0 <ST7565_Display_fill+0x64>)
 80012a0:	f010 fc18 	bl	8011ad4 <memset>
	
	ST7565_Select();
 80012a4:	f7ff fef8 	bl	8001098 <ST7565_Select>
#ifdef SET_NEW_PROC
	uint8_t dta[] = {0, 0x10, 0};
 80012a8:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <ST7565_Display_fill+0x68>)
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	4611      	mov	r1, r2
 80012b2:	8019      	strh	r1, [r3, #0]
 80012b4:	3302      	adds	r3, #2
 80012b6:	0c12      	lsrs	r2, r2, #16
 80012b8:	701a      	strb	r2, [r3, #0]
#endif
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80012ba:	23b7      	movs	r3, #183	; 0xb7
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	e00e      	b.n	80012de <ST7565_Display_fill+0x52>
		ST7565_w_cmd(page);  //set page address
		ST7565_w_cmd(0x10);  //set Column address MSB   
		ST7565_w_cmd(0x00);  //set column address LSB
		for (column = 0; column < 131; column++) ST7565_w_dat(fill);
#else
		dta[0] = page;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	733b      	strb	r3, [r7, #12]
		ST7565_w_cmds(dta, sizeof(dta));
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2103      	movs	r1, #3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff5c 	bl	8001188 <ST7565_w_cmds>
		ST7565_w_dats(ST7565_buffer, 131);
 80012d0:	2183      	movs	r1, #131	; 0x83
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <ST7565_Display_fill+0x64>)
 80012d4:	f7ff ff0c 	bl	80010f0 <ST7565_w_dats>
	for (page = 0xB7; page >= 0xB0; page-- ) {
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	3b01      	subs	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	2baf      	cmp	r3, #175	; 0xaf
 80012e2:	d8ed      	bhi.n	80012c0 <ST7565_Display_fill+0x34>
#endif
    }
		
	ST7565_Unselect();
 80012e4:	f7ff fee4 	bl	80010b0 <ST7565_Unselect>
}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000424 	.word	0x20000424
 80012f4:	080160b0 	.word	0x080160b0

080012f8 <ST7565_Init>:
	* @brief	 ( описание ):  инициализация дисплея ( при другой инициализации можно поменять параметры внутри функции )
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Init()
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
	ST7565_Select();
 80012fe:	f7ff fecb 	bl	8001098 <ST7565_Select>
	ST7565_w_cmd(CMD_DISPLAY_ON);    		//Display on
	// Инвертирование экрана CMD_SET_DISP_NORMAL - OFF    CMD_SET_DISP_REVERSE - ON
	ST7565_w_cmd(CMD_SET_DISP_NORMAL);
	//HAL_Delay(1);//1
#else
	uint8_t dta[] = {
 8001302:	4a09      	ldr	r2, [pc, #36]	; (8001328 <ST7565_Init+0x30>)
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	ca07      	ldmia	r2, {r0, r1, r2}
 8001308:	c303      	stmia	r3!, {r0, r1}
 800130a:	801a      	strh	r2, [r3, #0]
	};
	#if defined (SCREEN_ORIENTATION_180)
		dta[1] = CMD_SET_ADC_REVERSE;    	//ADC selection(SEG0->SEG128)  CMD_SET_ADC_NORMAL горизонтально «нормальная» (не перевернутая)
		dta[2] = CMD_SET_COM_NORMAL;    		//SHL selection(COM0->COM64)   CMD_SET_COM_REVERSE вертикально «перевернутая» (дополняет команду выше)
	#endif
	ST7565_w_cmds(dta, sizeof(dta));
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	210a      	movs	r1, #10
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff39 	bl	8001188 <ST7565_w_cmds>
#endif
	
	ST7565_Display_fill(0);
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff ffb8 	bl	800128c <ST7565_Display_fill>
	
	ST7565_Unselect();
 800131c:	f7ff fec8 	bl	80010b0 <ST7565_Unselect>
   
}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	080160b4 	.word	0x080160b4

0800132c <ST7565_CMD_DISPLAY>:
//--------------------------------------------------------------------------------
void ST7565_CMD_DISPLAY(uint8_t byte)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
#ifdef SET_NEW_PROC
	ST7565_w_cmds(&byte, 1);
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	2101      	movs	r1, #1
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff24 	bl	8001188 <ST7565_w_cmds>
#else
	ST7565_w_cmd(byte);
#endif
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <ST7565_Draw_pixel>:
	* @param	( параметры ):	координата X(0 - 127) и координата Y(0 - 63)  color 1 or 0
	* @return  ( возвращает ):	
*******************************************************************************/
// X(0 - 127)  Y(0 - 63)
void ST7565_Draw_pixel(int16_t x, int16_t y, uint8_t color)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
 8001352:	460b      	mov	r3, r1
 8001354:	80bb      	strh	r3, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	70fb      	strb	r3, [r7, #3]
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 800135a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135e:	2b7f      	cmp	r3, #127	; 0x7f
 8001360:	dc4c      	bgt.n	80013fc <ST7565_Draw_pixel+0xb4>
 8001362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001366:	2b00      	cmp	r3, #0
 8001368:	db48      	blt.n	80013fc <ST7565_Draw_pixel+0xb4>
 800136a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800136e:	2b3f      	cmp	r3, #63	; 0x3f
 8001370:	dc44      	bgt.n	80013fc <ST7565_Draw_pixel+0xb4>
 8001372:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db40      	blt.n	80013fc <ST7565_Draw_pixel+0xb4>

    uint16_t array_pos = x + ((y >> 3) * SCREEN_WIDTH );
 800137a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800137e:	10db      	asrs	r3, r3, #3
 8001380:	b21b      	sxth	r3, r3
 8001382:	b29b      	uxth	r3, r3
 8001384:	01db      	lsls	r3, r3, #7
 8001386:	b29a      	uxth	r2, r3
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	4413      	add	r3, r2
 800138c:	81fb      	strh	r3, [r7, #14]

    if (color) {
 800138e:	78fb      	ldrb	r3, [r7, #3]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d018      	beq.n	80013c6 <ST7565_Draw_pixel+0x7e>
        ST7565_buffer[array_pos] |= 1 << (y % 8);
 8001394:	89fb      	ldrh	r3, [r7, #14]
 8001396:	4a1c      	ldr	r2, [pc, #112]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 8001398:	5cd3      	ldrb	r3, [r2, r3]
 800139a:	b25a      	sxtb	r2, r3
 800139c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013a0:	4259      	negs	r1, r3
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	f001 0107 	and.w	r1, r1, #7
 80013aa:	bf58      	it	pl
 80013ac:	424b      	negpl	r3, r1
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	2301      	movs	r3, #1
 80013b4:	408b      	lsls	r3, r1
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b25a      	sxtb	r2, r3
 80013bc:	89fb      	ldrh	r3, [r7, #14]
 80013be:	b2d1      	uxtb	r1, r2
 80013c0:	4a11      	ldr	r2, [pc, #68]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 80013c2:	54d1      	strb	r1, [r2, r3]
 80013c4:	e01b      	b.n	80013fe <ST7565_Draw_pixel+0xb6>
    } else {
        ST7565_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 80013ca:	5cd3      	ldrb	r3, [r2, r3]
 80013cc:	b25a      	sxtb	r2, r3
 80013ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013d2:	4259      	negs	r1, r3
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	f001 0107 	and.w	r1, r1, #7
 80013dc:	bf58      	it	pl
 80013de:	424b      	negpl	r3, r1
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	4619      	mov	r1, r3
 80013e4:	2301      	movs	r3, #1
 80013e6:	408b      	lsls	r3, r1
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	4013      	ands	r3, r2
 80013f0:	b25a      	sxtb	r2, r3
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	b2d1      	uxtb	r1, r2
 80013f6:	4a04      	ldr	r2, [pc, #16]	; (8001408 <ST7565_Draw_pixel+0xc0>)
 80013f8:	54d1      	strb	r1, [r2, r3]
 80013fa:	e000      	b.n	80013fe <ST7565_Draw_pixel+0xb6>
    if (x >= SCREEN_WIDTH || x < 0 || y >= SCREEN_HEIGHT || y < 0) return;
 80013fc:	bf00      	nop
    }
}
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	20000424 	.word	0x20000424

0800140c <ST7565_Update>:
	* @brief	 ( описание ):  вывод буффера кадра на дисплей
	* @param	( параметры ):	
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_Update()
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
uint8_t x, y;
		
	ST7565_Select();
 8001412:	f7ff fe41 	bl	8001098 <ST7565_Select>

  	for (y = 0; y < 8; y++) {
 8001416:	2300      	movs	r3, #0
 8001418:	71bb      	strb	r3, [r7, #6]
 800141a:	e01d      	b.n	8001458 <ST7565_Update+0x4c>
		ST7565_SetX(0);	
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff ff01 	bl	8001224 <ST7565_SetX>
		ST7565_SetY(y);
 8001422:	79bb      	ldrb	r3, [r7, #6]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff18 	bl	800125a <ST7565_SetY>
		for (x = 0; x < 128; x++) {
 800142a:	2300      	movs	r3, #0
 800142c:	71fb      	strb	r3, [r7, #7]
 800142e:	e00c      	b.n	800144a <ST7565_Update+0x3e>
			ST7565_w_dats(&ST7565_buffer[x + 128 * y], 1);
 8001430:	79fa      	ldrb	r2, [r7, #7]
 8001432:	79bb      	ldrb	r3, [r7, #6]
 8001434:	01db      	lsls	r3, r3, #7
 8001436:	4413      	add	r3, r2
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <ST7565_Update+0x64>)
 800143a:	4413      	add	r3, r2
 800143c:	2101      	movs	r1, #1
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fe56 	bl	80010f0 <ST7565_w_dats>
		for (x = 0; x < 128; x++) {
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	3301      	adds	r3, #1
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	2b00      	cmp	r3, #0
 8001450:	daee      	bge.n	8001430 <ST7565_Update+0x24>
  	for (y = 0; y < 8; y++) {
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	3301      	adds	r3, #1
 8001456:	71bb      	strb	r3, [r7, #6]
 8001458:	79bb      	ldrb	r3, [r7, #6]
 800145a:	2b07      	cmp	r3, #7
 800145c:	d9de      	bls.n	800141c <ST7565_Update+0x10>
		}
	}
	
	ST7565_Unselect();
 800145e:	f7ff fe27 	bl	80010b0 <ST7565_Unselect>
	HAL_Delay(100);
 8001462:	2064      	movs	r0, #100	; 0x64
 8001464:	f005 fa1c 	bl	80068a0 <HAL_Delay>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000424 	.word	0x20000424

08001474 <ST7565_DrawChar>:
	* @brief	 ( описание ):  функция записывает 1 символ в буфер кадра
	* @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawChar(int16_t x, int16_t y, unsigned char ch, FontDef_t* Font, uint8_t multiplier, uint8_t color)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	4603      	mov	r3, r0
 800147e:	81fb      	strh	r3, [r7, #14]
 8001480:	460b      	mov	r3, r1
 8001482:	81bb      	strh	r3, [r7, #12]
 8001484:	4613      	mov	r3, r2
 8001486:	72fb      	strb	r3, [r7, #11]
uint16_t i, j;
uint16_t b;
int16_t X = x, Y = y;
 8001488:	89fb      	ldrh	r3, [r7, #14]
 800148a:	833b      	strh	r3, [r7, #24]
 800148c:	89bb      	ldrh	r3, [r7, #12]
 800148e:	82fb      	strh	r3, [r7, #22]
int16_t xx, yy;
	
	if (multiplier < 1) multiplier = 1;
 8001490:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <ST7565_DrawChar+0x2a>
 8001498:	2301      	movs	r3, #1
 800149a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	
	// Check available space in LCD
	if (SCREEN_WIDTH >= ( x + Font->FontWidth) || SCREEN_HEIGHT >= ( y + Font->FontHeight)) {
 800149e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	7812      	ldrb	r2, [r2, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	2b80      	cmp	r3, #128	; 0x80
 80014aa:	dd07      	ble.n	80014bc <ST7565_DrawChar+0x48>
 80014ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	7852      	ldrb	r2, [r2, #1]
 80014b4:	4413      	add	r3, r2
 80014b6:	2b40      	cmp	r3, #64	; 0x40
 80014b8:	f300 8154 	bgt.w	8001764 <ST7565_DrawChar+0x2f0>
		// Go through font
		for (i = 0; i < Font->FontHeight; i++) {
 80014bc:	2300      	movs	r3, #0
 80014be:	83fb      	strh	r3, [r7, #30]
 80014c0:	e149      	b.n	8001756 <ST7565_DrawChar+0x2e2>
			if (ch < 127) {
 80014c2:	7afb      	ldrb	r3, [r7, #11]
 80014c4:	2b7e      	cmp	r3, #126	; 0x7e
 80014c6:	d80f      	bhi.n	80014e8 <ST7565_DrawChar+0x74>
				b = Font->data[(ch - 32) * Font->FontHeight + i];
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80014ce:	7afb      	ldrb	r3, [r7, #11]
 80014d0:	3b20      	subs	r3, #32
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	7849      	ldrb	r1, [r1, #1]
 80014d6:	fb03 f101 	mul.w	r1, r3, r1
 80014da:	8bfb      	ldrh	r3, [r7, #30]
 80014dc:	440b      	add	r3, r1
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	837b      	strh	r3, [r7, #26]
 80014e6:	e0af      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch > 191) {
 80014e8:	7afb      	ldrb	r3, [r7, #11]
 80014ea:	2bbf      	cmp	r3, #191	; 0xbf
 80014ec:	d90f      	bls.n	800150e <ST7565_DrawChar+0x9a>
				// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
				// и если в шрифте который содержит сперва латиницу и спец символы и потом 
				// только кирилицу то нужно добавлять 95 если шрифт 
				// содержит только кирилицу то +96 не нужно
				b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80014f4:	7afb      	ldrb	r3, [r7, #11]
 80014f6:	3b60      	subs	r3, #96	; 0x60
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	7849      	ldrb	r1, [r1, #1]
 80014fc:	fb03 f101 	mul.w	r1, r3, r1
 8001500:	8bfb      	ldrh	r3, [r7, #30]
 8001502:	440b      	add	r3, r1
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	837b      	strh	r3, [r7, #26]
 800150c:	e09c      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 168) {	// 168 символ по ASCII - Ё
 800150e:	7afb      	ldrb	r3, [r7, #11]
 8001510:	2ba8      	cmp	r3, #168	; 0xa8
 8001512:	d111      	bne.n	8001538 <ST7565_DrawChar+0xc4>
				// 160 эллемент ( символ Ё ) 
				b = Font->data[160 * Font->FontHeight + i];
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	785b      	ldrb	r3, [r3, #1]
 800151e:	4619      	mov	r1, r3
 8001520:	460b      	mov	r3, r1
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	015b      	lsls	r3, r3, #5
 8001528:	4619      	mov	r1, r3
 800152a:	8bfb      	ldrh	r3, [r7, #30]
 800152c:	440b      	add	r3, r1
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	837b      	strh	r3, [r7, #26]
 8001536:	e087      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 184) {	// 184 символ по ASCII - ё
 8001538:	7afb      	ldrb	r3, [r7, #11]
 800153a:	2bb8      	cmp	r3, #184	; 0xb8
 800153c:	d111      	bne.n	8001562 <ST7565_DrawChar+0xee>
				// 161 эллемент  ( символ ё ) 
				b = Font->data[161 * Font->FontHeight + i];
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f8d3 1002 	ldr.w	r1, [r3, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	785b      	ldrb	r3, [r3, #1]
 8001548:	461a      	mov	r2, r3
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	015b      	lsls	r3, r3, #5
 8001552:	441a      	add	r2, r3
 8001554:	8bfb      	ldrh	r3, [r7, #30]
 8001556:	4413      	add	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	440b      	add	r3, r1
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	837b      	strh	r3, [r7, #26]
 8001560:	e072      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 170) {	// 168 символ по ASCII - Є
 8001562:	7afb      	ldrb	r3, [r7, #11]
 8001564:	2baa      	cmp	r3, #170	; 0xaa
 8001566:	d10f      	bne.n	8001588 <ST7565_DrawChar+0x114>
				// 162 эллемент ( символ Є )
				b = Font->data[162 * Font->FontHeight + i];
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	785b      	ldrb	r3, [r3, #1]
 8001572:	4619      	mov	r1, r3
 8001574:	23a2      	movs	r3, #162	; 0xa2
 8001576:	fb03 f101 	mul.w	r1, r3, r1
 800157a:	8bfb      	ldrh	r3, [r7, #30]
 800157c:	440b      	add	r3, r1
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4413      	add	r3, r2
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	837b      	strh	r3, [r7, #26]
 8001586:	e05f      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 175) {	// 184 символ по ASCII - Ї
 8001588:	7afb      	ldrb	r3, [r7, #11]
 800158a:	2baf      	cmp	r3, #175	; 0xaf
 800158c:	d10f      	bne.n	80015ae <ST7565_DrawChar+0x13a>
				// 163 эллемент  ( символ Ї )
				b = Font->data[163 * Font->FontHeight + i];
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	785b      	ldrb	r3, [r3, #1]
 8001598:	4619      	mov	r1, r3
 800159a:	23a3      	movs	r3, #163	; 0xa3
 800159c:	fb03 f101 	mul.w	r1, r3, r1
 80015a0:	8bfb      	ldrh	r3, [r7, #30]
 80015a2:	440b      	add	r3, r1
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	837b      	strh	r3, [r7, #26]
 80015ac:	e04c      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 178) {	// 168 символ по ASCII - І
 80015ae:	7afb      	ldrb	r3, [r7, #11]
 80015b0:	2bb2      	cmp	r3, #178	; 0xb2
 80015b2:	d10f      	bne.n	80015d4 <ST7565_DrawChar+0x160>
				// 164 эллемент ( символ І )
				b = Font->data[164 * Font->FontHeight + i];
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	785b      	ldrb	r3, [r3, #1]
 80015be:	4619      	mov	r1, r3
 80015c0:	23a4      	movs	r3, #164	; 0xa4
 80015c2:	fb03 f101 	mul.w	r1, r3, r1
 80015c6:	8bfb      	ldrh	r3, [r7, #30]
 80015c8:	440b      	add	r3, r1
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	837b      	strh	r3, [r7, #26]
 80015d2:	e039      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			}
			else if (ch == 179) {	// 184 символ по ASCII - і
 80015d4:	7afb      	ldrb	r3, [r7, #11]
 80015d6:	2bb3      	cmp	r3, #179	; 0xb3
 80015d8:	d111      	bne.n	80015fe <ST7565_DrawChar+0x18a>
				// 165 эллемент  ( символ і )
				b = Font->data[165 * Font->FontHeight + i];
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	785b      	ldrb	r3, [r3, #1]
 80015e4:	4619      	mov	r1, r3
 80015e6:	460b      	mov	r3, r1
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	0159      	lsls	r1, r3, #5
 80015ee:	4419      	add	r1, r3
 80015f0:	8bfb      	ldrh	r3, [r7, #30]
 80015f2:	440b      	add	r3, r1
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	837b      	strh	r3, [r7, #26]
 80015fc:	e024      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 186) {	// 184 символ по ASCII - є
 80015fe:	7afb      	ldrb	r3, [r7, #11]
 8001600:	2bba      	cmp	r3, #186	; 0xba
 8001602:	d10f      	bne.n	8001624 <ST7565_DrawChar+0x1b0>
				// 166 эллемент  ( символ є )
				b = Font->data[166 * Font->FontHeight + i];
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	785b      	ldrb	r3, [r3, #1]
 800160e:	4619      	mov	r1, r3
 8001610:	23a6      	movs	r3, #166	; 0xa6
 8001612:	fb03 f101 	mul.w	r1, r3, r1
 8001616:	8bfb      	ldrh	r3, [r7, #30]
 8001618:	440b      	add	r3, r1
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	837b      	strh	r3, [r7, #26]
 8001622:	e011      	b.n	8001648 <ST7565_DrawChar+0x1d4>
			} else if (ch == 191) {	// 168 символ по ASCII - ї
 8001624:	7afb      	ldrb	r3, [r7, #11]
 8001626:	2bbf      	cmp	r3, #191	; 0xbf
 8001628:	d10e      	bne.n	8001648 <ST7565_DrawChar+0x1d4>
				// 167 эллемент ( символ ї )
				b = Font->data[167 * Font->FontHeight + i];
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	785b      	ldrb	r3, [r3, #1]
 8001634:	4619      	mov	r1, r3
 8001636:	23a7      	movs	r3, #167	; 0xa7
 8001638:	fb03 f101 	mul.w	r1, r3, r1
 800163c:	8bfb      	ldrh	r3, [r7, #30]
 800163e:	440b      	add	r3, r1
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	837b      	strh	r3, [r7, #26]
			}
			//-----------------------------------------------------------------------------
			
			for (j = 0; j < Font->FontWidth; j++) {
 8001648:	2300      	movs	r3, #0
 800164a:	83bb      	strh	r3, [r7, #28]
 800164c:	e071      	b.n	8001732 <ST7565_DrawChar+0x2be>
				if ((b << j) & 0x8000) {
 800164e:	8b7a      	ldrh	r2, [r7, #26]
 8001650:	8bbb      	ldrh	r3, [r7, #28]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d02d      	beq.n	80016ba <ST7565_DrawChar+0x246>
					for (yy = 0; yy < multiplier; yy++){
 800165e:	2300      	movs	r3, #0
 8001660:	827b      	strh	r3, [r7, #18]
 8001662:	e023      	b.n	80016ac <ST7565_DrawChar+0x238>
						for (xx = 0; xx < multiplier; xx++){
 8001664:	2300      	movs	r3, #0
 8001666:	82bb      	strh	r3, [r7, #20]
 8001668:	e014      	b.n	8001694 <ST7565_DrawChar+0x220>
							ST7565_Draw_pixel(X + xx, Y + yy, color);
 800166a:	8b3a      	ldrh	r2, [r7, #24]
 800166c:	8abb      	ldrh	r3, [r7, #20]
 800166e:	4413      	add	r3, r2
 8001670:	b29b      	uxth	r3, r3
 8001672:	b218      	sxth	r0, r3
 8001674:	8afa      	ldrh	r2, [r7, #22]
 8001676:	8a7b      	ldrh	r3, [r7, #18]
 8001678:	4413      	add	r3, r2
 800167a:	b29b      	uxth	r3, r3
 800167c:	b21b      	sxth	r3, r3
 800167e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff fe60 	bl	8001348 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 8001688:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800168c:	b29b      	uxth	r3, r3
 800168e:	3301      	adds	r3, #1
 8001690:	b29b      	uxth	r3, r3
 8001692:	82bb      	strh	r3, [r7, #20]
 8001694:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001698:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800169c:	429a      	cmp	r2, r3
 800169e:	dbe4      	blt.n	800166a <ST7565_DrawChar+0x1f6>
					for (yy = 0; yy < multiplier; yy++){
 80016a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	3301      	adds	r3, #1
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	827b      	strh	r3, [r7, #18]
 80016ac:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80016b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dbd5      	blt.n	8001664 <ST7565_DrawChar+0x1f0>
 80016b8:	e031      	b.n	800171e <ST7565_DrawChar+0x2aa>
						}
					}
				} else {// если фон очищать то оставляем если чтоб фон оставался старый то коментируем эту часть -------------
					for (yy = 0; yy < multiplier; yy++){
 80016ba:	2300      	movs	r3, #0
 80016bc:	827b      	strh	r3, [r7, #18]
 80016be:	e028      	b.n	8001712 <ST7565_DrawChar+0x29e>
						for (xx = 0; xx < multiplier; xx++){
 80016c0:	2300      	movs	r3, #0
 80016c2:	82bb      	strh	r3, [r7, #20]
 80016c4:	e019      	b.n	80016fa <ST7565_DrawChar+0x286>
							ST7565_Draw_pixel(X + xx, Y + yy, !color);
 80016c6:	8b3a      	ldrh	r2, [r7, #24]
 80016c8:	8abb      	ldrh	r3, [r7, #20]
 80016ca:	4413      	add	r3, r2
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	b218      	sxth	r0, r3
 80016d0:	8afa      	ldrh	r2, [r7, #22]
 80016d2:	8a7b      	ldrh	r3, [r7, #18]
 80016d4:	4413      	add	r3, r2
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	b219      	sxth	r1, r3
 80016da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80016de:	2b00      	cmp	r3, #0
 80016e0:	bf0c      	ite	eq
 80016e2:	2301      	moveq	r3, #1
 80016e4:	2300      	movne	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	f7ff fe2d 	bl	8001348 <ST7565_Draw_pixel>
						for (xx = 0; xx < multiplier; xx++){
 80016ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	82bb      	strh	r3, [r7, #20]
 80016fa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80016fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001702:	429a      	cmp	r2, r3
 8001704:	dbdf      	blt.n	80016c6 <ST7565_DrawChar+0x252>
					for (yy = 0; yy < multiplier; yy++){
 8001706:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800170a:	b29b      	uxth	r3, r3
 800170c:	3301      	adds	r3, #1
 800170e:	b29b      	uxth	r3, r3
 8001710:	827b      	strh	r3, [r7, #18]
 8001712:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001716:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800171a:	429a      	cmp	r2, r3
 800171c:	dbd0      	blt.n	80016c0 <ST7565_DrawChar+0x24c>
						}
					}
				}
				//----------------------------------------------------------------------------------------------------
				X += multiplier;
 800171e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001722:	b29a      	uxth	r2, r3
 8001724:	8b3b      	ldrh	r3, [r7, #24]
 8001726:	4413      	add	r3, r2
 8001728:	b29b      	uxth	r3, r3
 800172a:	833b      	strh	r3, [r7, #24]
			for (j = 0; j < Font->FontWidth; j++) {
 800172c:	8bbb      	ldrh	r3, [r7, #28]
 800172e:	3301      	adds	r3, #1
 8001730:	83bb      	strh	r3, [r7, #28]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b29b      	uxth	r3, r3
 8001738:	8bba      	ldrh	r2, [r7, #28]
 800173a:	429a      	cmp	r2, r3
 800173c:	d387      	bcc.n	800164e <ST7565_DrawChar+0x1da>
			}
			X = x;
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	833b      	strh	r3, [r7, #24]
			Y += multiplier;
 8001742:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001746:	b29a      	uxth	r2, r3
 8001748:	8afb      	ldrh	r3, [r7, #22]
 800174a:	4413      	add	r3, r2
 800174c:	b29b      	uxth	r3, r3
 800174e:	82fb      	strh	r3, [r7, #22]
		for (i = 0; i < Font->FontHeight; i++) {
 8001750:	8bfb      	ldrh	r3, [r7, #30]
 8001752:	3301      	adds	r3, #1
 8001754:	83fb      	strh	r3, [r7, #30]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	785b      	ldrb	r3, [r3, #1]
 800175a:	b29b      	uxth	r3, r3
 800175c:	8bfa      	ldrh	r2, [r7, #30]
 800175e:	429a      	cmp	r2, r3
 8001760:	f4ff aeaf 	bcc.w	80014c2 <ST7565_DrawChar+0x4e>
		}
		
	}
}
 8001764:	bf00      	nop
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <ST7565_Print>:
 * @brief	 ( описание ):  функция записывает строку в буфер кадра ( поддерживает кириллицу ( в том числе и Укр. язык) и латиницу
 * @param	( параметры ):	координаты X(0 - 127)  Y(0 - 63), символ, шрифт, множитель, цвет 1 или 0
 * @return  ( возвращает ):
*******************************************************************************/
void ST7565_Print(int16_t x, int16_t y, char *str, FontDef_t *Font, uint8_t multiplier, uint8_t color)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af02      	add	r7, sp, #8
 8001772:	60ba      	str	r2, [r7, #8]
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4603      	mov	r3, r0
 8001778:	81fb      	strh	r3, [r7, #14]
 800177a:	460b      	mov	r3, r1
 800177c:	81bb      	strh	r3, [r7, #12]
unsigned char buff_char;
uint16_t len = strlen(str);
 800177e:	68b8      	ldr	r0, [r7, #8]
 8001780:	f7fe fd26 	bl	80001d0 <strlen>
 8001784:	4603      	mov	r3, r0
 8001786:	82bb      	strh	r3, [r7, #20]

	if (multiplier < 1) multiplier = 1;
 8001788:	f897 3020 	ldrb.w	r3, [r7, #32]
 800178c:	2b00      	cmp	r3, #0
 800178e:	f040 809c 	bne.w	80018ca <ST7565_Print+0x15e>
 8001792:	2301      	movs	r3, #1
 8001794:	f887 3020 	strb.w	r3, [r7, #32]
	
	while (len--) {
 8001798:	e097      	b.n	80018ca <ST7565_Print+0x15e>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ) {	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2bbf      	cmp	r3, #191	; 0xbf
 80017a0:	d974      	bls.n	800188c <ST7565_Print+0x120>
			// проверяем какой именно байт первый 0xD0 либо 0xD1
			switch ((uint8_t)*str) {
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2bd0      	cmp	r3, #208	; 0xd0
 80017a8:	d002      	beq.n	80017b0 <ST7565_Print+0x44>
 80017aa:	2bd1      	cmp	r3, #209	; 0xd1
 80017ac:	d02c      	beq.n	8001808 <ST7565_Print+0x9c>
 80017ae:	e05b      	b.n	8001868 <ST7565_Print+0xfc>
				case 0xD0:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	3301      	adds	r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b81      	cmp	r3, #129	; 0x81
 80017bc:	d102      	bne.n	80017c4 <ST7565_Print+0x58>
 80017be:	23a8      	movs	r3, #168	; 0xa8
 80017c0:	75fb      	strb	r3, [r7, #23]
 80017c2:	e051      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF) { buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b8f      	cmp	r3, #143	; 0x8f
 80017ca:	d908      	bls.n	80017de <ST7565_Print+0x72>
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2bbf      	cmp	r3, #191	; 0xbf
 80017d2:	d804      	bhi.n	80017de <ST7565_Print+0x72>
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	3330      	adds	r3, #48	; 0x30
 80017da:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 80017dc:	e041      	b.n	8001862 <ST7565_Print+0xf6>
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b84      	cmp	r3, #132	; 0x84
 80017e4:	d102      	bne.n	80017ec <ST7565_Print+0x80>
 80017e6:	23aa      	movs	r3, #170	; 0xaa
 80017e8:	75fb      	strb	r3, [r7, #23]
 80017ea:	e03d      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b86      	cmp	r3, #134	; 0x86
 80017f2:	d102      	bne.n	80017fa <ST7565_Print+0x8e>
 80017f4:	23b2      	movs	r3, #178	; 0xb2
 80017f6:	75fb      	strb	r3, [r7, #23]
 80017f8:	e036      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b87      	cmp	r3, #135	; 0x87
 8001800:	d12f      	bne.n	8001862 <ST7565_Print+0xf6>
 8001802:	23af      	movs	r3, #175	; 0xaf
 8001804:	75fb      	strb	r3, [r7, #23]
 8001806:	e02f      	b.n	8001868 <ST7565_Print+0xfc>
				//}
				case 0xD1:
				//{
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	3301      	adds	r3, #1
 800180c:	60bb      	str	r3, [r7, #8]
					// проверяем второй байт там сам символ
					if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b91      	cmp	r3, #145	; 0x91
 8001814:	d102      	bne.n	800181c <ST7565_Print+0xb0>
 8001816:	23b8      	movs	r3, #184	; 0xb8
 8001818:	75fb      	strb	r3, [r7, #23]
 800181a:	e025      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F) { buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b25b      	sxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	da08      	bge.n	8001838 <ST7565_Print+0xcc>
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b8f      	cmp	r3, #143	; 0x8f
 800182c:	d804      	bhi.n	8001838 <ST7565_Print+0xcc>
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	3370      	adds	r3, #112	; 0x70
 8001834:	75fb      	strb	r3, [r7, #23]
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
				break;
 8001836:	e016      	b.n	8001866 <ST7565_Print+0xfa>
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b94      	cmp	r3, #148	; 0x94
 800183e:	d102      	bne.n	8001846 <ST7565_Print+0xda>
 8001840:	23ba      	movs	r3, #186	; 0xba
 8001842:	75fb      	strb	r3, [r7, #23]
 8001844:	e010      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b96      	cmp	r3, #150	; 0x96
 800184c:	d102      	bne.n	8001854 <ST7565_Print+0xe8>
 800184e:	23b3      	movs	r3, #179	; 0xb3
 8001850:	75fb      	strb	r3, [r7, #23]
 8001852:	e009      	b.n	8001868 <ST7565_Print+0xfc>
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b97      	cmp	r3, #151	; 0x97
 800185a:	d104      	bne.n	8001866 <ST7565_Print+0xfa>
 800185c:	23bf      	movs	r3, #191	; 0xbf
 800185e:	75fb      	strb	r3, [r7, #23]
 8001860:	e002      	b.n	8001868 <ST7565_Print+0xfc>
				break;
 8001862:	bf00      	nop
 8001864:	e000      	b.n	8001868 <ST7565_Print+0xfc>
				break;
 8001866:	bf00      	nop
				//}
			}
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 8001868:	8abb      	ldrh	r3, [r7, #20]
 800186a:	3b01      	subs	r3, #1
 800186c:	82bb      	strh	r3, [r7, #20]
			ST7565_DrawChar(x, y, buff_char, Font, multiplier, color);
 800186e:	7dfa      	ldrb	r2, [r7, #23]
 8001870:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001874:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001878:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f7ff fdf5 	bl	8001474 <ST7565_DrawChar>
 800188a:	e00e      	b.n	80018aa <ST7565_Print+0x13e>
		} else {
			ST7565_DrawChar(x, y, *str, Font, multiplier, color);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	781a      	ldrb	r2, [r3, #0]
 8001890:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001894:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001898:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f7ff fde5 	bl	8001474 <ST7565_DrawChar>
		}
		
		x += (Font->FontWidth * multiplier);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	fb12 f303 	smulbb	r3, r2, r3
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	89fb      	ldrh	r3, [r7, #14]
 80018be:	4413      	add	r3, r2
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	81fb      	strh	r3, [r7, #14]
		str++;
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	3301      	adds	r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]
	while (len--) {
 80018ca:	8abb      	ldrh	r3, [r7, #20]
 80018cc:	1e5a      	subs	r2, r3, #1
 80018ce:	82ba      	strh	r2, [r7, #20]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f47f af62 	bne.w	800179a <ST7565_Print+0x2e>
	}
}
 80018d6:	bf00      	nop
 80018d8:	bf00      	nop
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <ST7565_DrawLine>:
	* @param	( параметры ):	координаты начальной точки и конечной и цвет 0 или 1
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint8_t c)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4604      	mov	r4, r0
 80018e8:	4608      	mov	r0, r1
 80018ea:	4611      	mov	r1, r2
 80018ec:	461a      	mov	r2, r3
 80018ee:	4623      	mov	r3, r4
 80018f0:	80fb      	strh	r3, [r7, #6]
 80018f2:	4603      	mov	r3, r0
 80018f4:	80bb      	strh	r3, [r7, #4]
 80018f6:	460b      	mov	r3, r1
 80018f8:	807b      	strh	r3, [r7, #2]
 80018fa:	4613      	mov	r3, r2
 80018fc:	803b      	strh	r3, [r7, #0]
int16_t dx, dy, sx, sy, err, e2, i, tmp;
	
	/* Check for overflow */
	if (x0 >= SCREEN_WIDTH)  x0 = SCREEN_WIDTH  - 1;
 80018fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001902:	2b7f      	cmp	r3, #127	; 0x7f
 8001904:	dd01      	ble.n	800190a <ST7565_DrawLine+0x2a>
 8001906:	237f      	movs	r3, #127	; 0x7f
 8001908:	80fb      	strh	r3, [r7, #6]
	if (x1 >= SCREEN_WIDTH)  x1 = SCREEN_WIDTH  - 1;
 800190a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800190e:	2b7f      	cmp	r3, #127	; 0x7f
 8001910:	dd01      	ble.n	8001916 <ST7565_DrawLine+0x36>
 8001912:	237f      	movs	r3, #127	; 0x7f
 8001914:	807b      	strh	r3, [r7, #2]
	if (y0 >= SCREEN_HEIGHT) y0 = SCREEN_HEIGHT - 1;
 8001916:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800191a:	2b3f      	cmp	r3, #63	; 0x3f
 800191c:	dd01      	ble.n	8001922 <ST7565_DrawLine+0x42>
 800191e:	233f      	movs	r3, #63	; 0x3f
 8001920:	80bb      	strh	r3, [r7, #4]
	if (y1 >= SCREEN_HEIGHT) y1 = SCREEN_HEIGHT - 1;
 8001922:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001926:	2b3f      	cmp	r3, #63	; 0x3f
 8001928:	dd01      	ble.n	800192e <ST7565_DrawLine+0x4e>
 800192a:	233f      	movs	r3, #63	; 0x3f
 800192c:	803b      	strh	r3, [r7, #0]
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 800192e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001932:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001936:	429a      	cmp	r2, r3
 8001938:	da05      	bge.n	8001946 <ST7565_DrawLine+0x66>
 800193a:	887a      	ldrh	r2, [r7, #2]
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	b29b      	uxth	r3, r3
 8001942:	b21b      	sxth	r3, r3
 8001944:	e004      	b.n	8001950 <ST7565_DrawLine+0x70>
 8001946:	88fa      	ldrh	r2, [r7, #6]
 8001948:	887b      	ldrh	r3, [r7, #2]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	b29b      	uxth	r3, r3
 800194e:	b21b      	sxth	r3, r3
 8001950:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001952:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001956:	f9b7 3000 	ldrsh.w	r3, [r7]
 800195a:	429a      	cmp	r2, r3
 800195c:	da05      	bge.n	800196a <ST7565_DrawLine+0x8a>
 800195e:	883a      	ldrh	r2, [r7, #0]
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	b29b      	uxth	r3, r3
 8001966:	b21b      	sxth	r3, r3
 8001968:	e004      	b.n	8001974 <ST7565_DrawLine+0x94>
 800196a:	88ba      	ldrh	r2, [r7, #4]
 800196c:	883b      	ldrh	r3, [r7, #0]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	b29b      	uxth	r3, r3
 8001972:	b21b      	sxth	r3, r3
 8001974:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001976:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800197a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800197e:	429a      	cmp	r2, r3
 8001980:	da01      	bge.n	8001986 <ST7565_DrawLine+0xa6>
 8001982:	2301      	movs	r3, #1
 8001984:	e001      	b.n	800198a <ST7565_DrawLine+0xaa>
 8001986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800198a:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 800198c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001990:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001994:	429a      	cmp	r2, r3
 8001996:	da01      	bge.n	800199c <ST7565_DrawLine+0xbc>
 8001998:	2301      	movs	r3, #1
 800199a:	e001      	b.n	80019a0 <ST7565_DrawLine+0xc0>
 800199c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019a0:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80019a2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80019a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	dd06      	ble.n	80019bc <ST7565_DrawLine+0xdc>
 80019ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019b2:	0fda      	lsrs	r2, r3, #31
 80019b4:	4413      	add	r3, r2
 80019b6:	105b      	asrs	r3, r3, #1
 80019b8:	b21b      	sxth	r3, r3
 80019ba:	e006      	b.n	80019ca <ST7565_DrawLine+0xea>
 80019bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019c0:	0fda      	lsrs	r2, r3, #31
 80019c2:	4413      	add	r3, r2
 80019c4:	105b      	asrs	r3, r3, #1
 80019c6:	425b      	negs	r3, r3
 80019c8:	b21b      	sxth	r3, r3
 80019ca:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80019cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d130      	bne.n	8001a36 <ST7565_DrawLine+0x156>
		if (y1 < y0) {
 80019d4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80019d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019dc:	429a      	cmp	r2, r3
 80019de:	da05      	bge.n	80019ec <ST7565_DrawLine+0x10c>
			tmp = y1;
 80019e0:	883b      	ldrh	r3, [r7, #0]
 80019e2:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80019e4:	88bb      	ldrh	r3, [r7, #4]
 80019e6:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80019e8:	893b      	ldrh	r3, [r7, #8]
 80019ea:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80019ec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80019f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	da05      	bge.n	8001a04 <ST7565_DrawLine+0x124>
			tmp = x1;
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001a00:	893b      	ldrh	r3, [r7, #8]
 8001a02:	80fb      	strh	r3, [r7, #6]
		}
		
		// Vertical line
		for (i = y0; i <= y1; i++) ST7565_Draw_pixel(x0, i, c);
 8001a04:	88bb      	ldrh	r3, [r7, #4]
 8001a06:	82bb      	strh	r3, [r7, #20]
 8001a08:	e00e      	b.n	8001a28 <ST7565_DrawLine+0x148>
 8001a0a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a0e:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8001a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fc96 	bl	8001348 <ST7565_Draw_pixel>
 8001a1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	3301      	adds	r3, #1
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	82bb      	strh	r3, [r7, #20]
 8001a28:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a2c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	ddea      	ble.n	8001a0a <ST7565_DrawLine+0x12a>
		
		return;
 8001a34:	e06e      	b.n	8001b14 <ST7565_DrawLine+0x234>
	}
	
	if (dy == 0) {
 8001a36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d130      	bne.n	8001aa0 <ST7565_DrawLine+0x1c0>
		if (y1 < y0) {
 8001a3e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001a42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	da05      	bge.n	8001a56 <ST7565_DrawLine+0x176>
			tmp = y1;
 8001a4a:	883b      	ldrh	r3, [r7, #0]
 8001a4c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001a4e:	88bb      	ldrh	r3, [r7, #4]
 8001a50:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001a52:	893b      	ldrh	r3, [r7, #8]
 8001a54:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001a56:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	da05      	bge.n	8001a6e <ST7565_DrawLine+0x18e>
			tmp = x1;
 8001a62:	887b      	ldrh	r3, [r7, #2]
 8001a64:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001a6a:	893b      	ldrh	r3, [r7, #8]
 8001a6c:	80fb      	strh	r3, [r7, #6]
		}
		
		// Horizontal line
		for (i = x0; i <= x1; i++) ST7565_Draw_pixel(i, y0, c);
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	82bb      	strh	r3, [r7, #20]
 8001a72:	e00e      	b.n	8001a92 <ST7565_DrawLine+0x1b2>
 8001a74:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a78:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fc61 	bl	8001348 <ST7565_Draw_pixel>
 8001a86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	82bb      	strh	r3, [r7, #20]
 8001a92:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	ddea      	ble.n	8001a74 <ST7565_DrawLine+0x194>
		
		return;
 8001a9e:	e039      	b.n	8001b14 <ST7565_DrawLine+0x234>
	}
	
	while (1) {
		ST7565_Draw_pixel(x0, y0, c);
 8001aa0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001aa4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001aa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fc4b 	bl	8001348 <ST7565_Draw_pixel>
		if (x0 == x1 && y0 == y1) break;
 8001ab2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ab6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d105      	bne.n	8001aca <ST7565_DrawLine+0x1ea>
 8001abe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001ac2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d023      	beq.n	8001b12 <ST7565_DrawLine+0x232>

		e2 = err; 
 8001aca:	8afb      	ldrh	r3, [r7, #22]
 8001acc:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001ace:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001ad2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ad6:	425b      	negs	r3, r3
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	dd09      	ble.n	8001af0 <ST7565_DrawLine+0x210>
			err -= dy;
 8001adc:	8afa      	ldrh	r2, [r7, #22]
 8001ade:	8a3b      	ldrh	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001ae6:	88fa      	ldrh	r2, [r7, #6]
 8001ae8:	89fb      	ldrh	r3, [r7, #14]
 8001aea:	4413      	add	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001af0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001af4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dad1      	bge.n	8001aa0 <ST7565_DrawLine+0x1c0>
			err += dx;
 8001afc:	8afa      	ldrh	r2, [r7, #22]
 8001afe:	8a7b      	ldrh	r3, [r7, #18]
 8001b00:	4413      	add	r3, r2
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001b06:	88ba      	ldrh	r2, [r7, #4]
 8001b08:	89bb      	ldrh	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	80bb      	strh	r3, [r7, #4]
		ST7565_Draw_pixel(x0, y0, c);
 8001b10:	e7c6      	b.n	8001aa0 <ST7565_DrawLine+0x1c0>
		if (x0 == x1 && y0 == y1) break;
 8001b12:	bf00      	nop
		} 
	}
}
 8001b14:	371c      	adds	r7, #28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd90      	pop	{r4, r7, pc}

08001b1a <ST7565_DrawRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001b1a:	b590      	push	{r4, r7, lr}
 8001b1c:	b085      	sub	sp, #20
 8001b1e:	af02      	add	r7, sp, #8
 8001b20:	4604      	mov	r4, r0
 8001b22:	4608      	mov	r0, r1
 8001b24:	4611      	mov	r1, r2
 8001b26:	461a      	mov	r2, r3
 8001b28:	4623      	mov	r3, r4
 8001b2a:	80fb      	strh	r3, [r7, #6]
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	80bb      	strh	r3, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	803b      	strh	r3, [r7, #0]
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8001b3e:	dc6a      	bgt.n	8001c16 <ST7565_DrawRectangle+0xfc>
 8001b40:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b44:	2b3f      	cmp	r3, #63	; 0x3f
 8001b46:	dc66      	bgt.n	8001c16 <ST7565_DrawRectangle+0xfc>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001b48:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b50:	4413      	add	r3, r2
 8001b52:	2b7f      	cmp	r3, #127	; 0x7f
 8001b54:	dd04      	ble.n	8001b60 <ST7565_DrawRectangle+0x46>
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001b60:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b64:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b68:	4413      	add	r3, r2
 8001b6a:	2b3f      	cmp	r3, #63	; 0x3f
 8001b6c:	dd04      	ble.n	8001b78 <ST7565_DrawRectangle+0x5e>
 8001b6e:	88bb      	ldrh	r3, [r7, #4]
 8001b70:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	803b      	strh	r3, [r7, #0]
	
	// Draw 4 lines
	ST7565_DrawLine(x, y, x + w, y, c);         // Top line
 8001b78:	88fa      	ldrh	r2, [r7, #6]
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001b86:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001b8a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001b8e:	7e3b      	ldrb	r3, [r7, #24]
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	4623      	mov	r3, r4
 8001b94:	f7ff fea4 	bl	80018e0 <ST7565_DrawLine>
	ST7565_DrawLine(x, y + h, x + w, y + h, c); // Bottom line
 8001b98:	88ba      	ldrh	r2, [r7, #4]
 8001b9a:	883b      	ldrh	r3, [r7, #0]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	b219      	sxth	r1, r3
 8001ba2:	88fa      	ldrh	r2, [r7, #6]
 8001ba4:	887b      	ldrh	r3, [r7, #2]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	b21c      	sxth	r4, r3
 8001bac:	88ba      	ldrh	r2, [r7, #4]
 8001bae:	883b      	ldrh	r3, [r7, #0]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	b21a      	sxth	r2, r3
 8001bb6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001bba:	7e3b      	ldrb	r3, [r7, #24]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	4622      	mov	r2, r4
 8001bc2:	f7ff fe8d 	bl	80018e0 <ST7565_DrawLine>
	ST7565_DrawLine(x, y, x, y + h, c);         // Left line
 8001bc6:	88ba      	ldrh	r2, [r7, #4]
 8001bc8:	883b      	ldrh	r3, [r7, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	b21c      	sxth	r4, r3
 8001bd0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001bd4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001bd8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001bdc:	7e3b      	ldrb	r3, [r7, #24]
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	4623      	mov	r3, r4
 8001be2:	f7ff fe7d 	bl	80018e0 <ST7565_DrawLine>
	ST7565_DrawLine(x + w, y, x + w, y + h, c); // Right line
 8001be6:	88fa      	ldrh	r2, [r7, #6]
 8001be8:	887b      	ldrh	r3, [r7, #2]
 8001bea:	4413      	add	r3, r2
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	b218      	sxth	r0, r3
 8001bf0:	88fa      	ldrh	r2, [r7, #6]
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	b21c      	sxth	r4, r3
 8001bfa:	88ba      	ldrh	r2, [r7, #4]
 8001bfc:	883b      	ldrh	r3, [r7, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	b21a      	sxth	r2, r3
 8001c04:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001c08:	7e3b      	ldrb	r3, [r7, #24]
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	4622      	mov	r2, r4
 8001c10:	f7ff fe66 	bl	80018e0 <ST7565_DrawLine>
 8001c14:	e000      	b.n	8001c18 <ST7565_DrawRectangle+0xfe>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001c16:	bf00      	nop
}
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd90      	pop	{r4, r7, pc}

08001c1e <ST7565_DrawFilledRectangle>:
	* @param	( параметры ):	координаты верхнего левого и ширина и высота и цвет
								X(0 - 127)  Y(0 - 63)
	* @return  ( возвращает ):	
*******************************************************************************/
void ST7565_DrawFilledRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c)
{
 8001c1e:	b590      	push	{r4, r7, lr}
 8001c20:	b087      	sub	sp, #28
 8001c22:	af02      	add	r7, sp, #8
 8001c24:	4604      	mov	r4, r0
 8001c26:	4608      	mov	r0, r1
 8001c28:	4611      	mov	r1, r2
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4623      	mov	r3, r4
 8001c2e:	80fb      	strh	r3, [r7, #6]
 8001c30:	4603      	mov	r3, r0
 8001c32:	80bb      	strh	r3, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	803b      	strh	r3, [r7, #0]
uint8_t i;
	
	// Check input parameters
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001c3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c40:	2b7f      	cmp	r3, #127	; 0x7f
 8001c42:	dc41      	bgt.n	8001cc8 <ST7565_DrawFilledRectangle+0xaa>
 8001c44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c48:	2b3f      	cmp	r3, #63	; 0x3f
 8001c4a:	dc3d      	bgt.n	8001cc8 <ST7565_DrawFilledRectangle+0xaa>
	
	// Check width and height
	if ((x + w) >= SCREEN_WIDTH)  w = SCREEN_WIDTH  - x;
 8001c4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c54:	4413      	add	r3, r2
 8001c56:	2b7f      	cmp	r3, #127	; 0x7f
 8001c58:	dd04      	ble.n	8001c64 <ST7565_DrawFilledRectangle+0x46>
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	807b      	strh	r3, [r7, #2]
	if ((y + h) >= SCREEN_HEIGHT) h = SCREEN_HEIGHT - y;
 8001c64:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001c68:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	2b3f      	cmp	r3, #63	; 0x3f
 8001c70:	dd04      	ble.n	8001c7c <ST7565_DrawFilledRectangle+0x5e>
 8001c72:	88bb      	ldrh	r3, [r7, #4]
 8001c74:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	803b      	strh	r3, [r7, #0]
	
	for (i = 0; i <= h; i++) ST7565_DrawLine(x, y + i, x + w, y + i, c);
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	e01c      	b.n	8001cbc <ST7565_DrawFilledRectangle+0x9e>
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	88bb      	ldrh	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b219      	sxth	r1, r3
 8001c8e:	88fa      	ldrh	r2, [r7, #6]
 8001c90:	887b      	ldrh	r3, [r7, #2]
 8001c92:	4413      	add	r3, r2
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	b21c      	sxth	r4, r3
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	88bb      	ldrh	r3, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001ca8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	4622      	mov	r2, r4
 8001cb2:	f7ff fe15 	bl	80018e0 <ST7565_DrawLine>
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dddd      	ble.n	8001c82 <ST7565_DrawFilledRectangle+0x64>
 8001cc6:	e000      	b.n	8001cca <ST7565_DrawFilledRectangle+0xac>
	if (x >= SCREEN_WIDTH || y >= SCREEN_HEIGHT) return;
 8001cc8:	bf00      	nop
}
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd90      	pop	{r4, r7, pc}

08001cd0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd4:	f3bf 8f4f 	dsb	sy
}
 8001cd8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <__NVIC_SystemReset+0x24>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ce2:	4904      	ldr	r1, [pc, #16]	; (8001cf4 <__NVIC_SystemReset+0x24>)
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__NVIC_SystemReset+0x28>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cea:	f3bf 8f4f 	dsb	sy
}
 8001cee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <__NVIC_SystemReset+0x20>
 8001cf4:	e000ed00 	.word	0xe000ed00
 8001cf8:	05fa0004 	.word	0x05fa0004

08001cfc <fsErrName>:
//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------
#ifdef SET_FAT_FS
//------------------------------------------------------------------------------------------
static char *fsErrName(int fr)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	switch (fr) {
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b13      	cmp	r3, #19
 8001d08:	d850      	bhi.n	8001dac <fsErrName+0xb0>
 8001d0a:	a201      	add	r2, pc, #4	; (adr r2, 8001d10 <fsErrName+0x14>)
 8001d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d10:	08001d61 	.word	0x08001d61
 8001d14:	08001d65 	.word	0x08001d65
 8001d18:	08001d69 	.word	0x08001d69
 8001d1c:	08001d6d 	.word	0x08001d6d
 8001d20:	08001d71 	.word	0x08001d71
 8001d24:	08001d75 	.word	0x08001d75
 8001d28:	08001d79 	.word	0x08001d79
 8001d2c:	08001d7d 	.word	0x08001d7d
 8001d30:	08001d7d 	.word	0x08001d7d
 8001d34:	08001d81 	.word	0x08001d81
 8001d38:	08001d85 	.word	0x08001d85
 8001d3c:	08001d89 	.word	0x08001d89
 8001d40:	08001d8d 	.word	0x08001d8d
 8001d44:	08001d91 	.word	0x08001d91
 8001d48:	08001d95 	.word	0x08001d95
 8001d4c:	08001d99 	.word	0x08001d99
 8001d50:	08001d9d 	.word	0x08001d9d
 8001d54:	08001da1 	.word	0x08001da1
 8001d58:	08001da5 	.word	0x08001da5
 8001d5c:	08001da9 	.word	0x08001da9
		case FR_OK:				// (0) Succeeded
			return "Succeeded";
 8001d60:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <fsErrName+0xc0>)
 8001d62:	e024      	b.n	8001dae <fsErrName+0xb2>
		case FR_DISK_ERR://			(1) A hard error occurred in the low level disk I/O layer
			return "Error disk I/O";
 8001d64:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <fsErrName+0xc4>)
 8001d66:	e022      	b.n	8001dae <fsErrName+0xb2>
		case FR_INT_ERR://			(2) Assertion failed
			return "Assertion failed";
 8001d68:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <fsErrName+0xc8>)
 8001d6a:	e020      	b.n	8001dae <fsErrName+0xb2>
		case FR_NOT_READY://		(3) The physical drive cannot work
			return "Drive not ready";
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <fsErrName+0xcc>)
 8001d6e:	e01e      	b.n	8001dae <fsErrName+0xb2>
		case FR_NO_FILE://			(4) Could not find the file
			return "No file";
 8001d70:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <fsErrName+0xd0>)
 8001d72:	e01c      	b.n	8001dae <fsErrName+0xb2>
		case FR_NO_PATH://			(5) Could not find the path
			return "No path";
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <fsErrName+0xd4>)
 8001d76:	e01a      	b.n	8001dae <fsErrName+0xb2>
		case FR_INVALID_NAME://		(6) The path name format is invalid
			return "Path error";
 8001d78:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <fsErrName+0xd8>)
 8001d7a:	e018      	b.n	8001dae <fsErrName+0xb2>
		case FR_DENIED://			(7) Access denied due to prohibited access or directory full
		case FR_EXIST://			(8) Access denied due to prohibited access
			return "Access denied";
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <fsErrName+0xdc>)
 8001d7e:	e016      	b.n	8001dae <fsErrName+0xb2>
		case FR_INVALID_OBJECT://	(9) The file/directory object is invalid
			return "Invalid file/dir";
 8001d80:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <fsErrName+0xe0>)
 8001d82:	e014      	b.n	8001dae <fsErrName+0xb2>
		case FR_WRITE_PROTECTED://	(10) The physical drive is write protected
			return "Write protected";
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <fsErrName+0xe4>)
 8001d86:	e012      	b.n	8001dae <fsErrName+0xb2>
		case FR_INVALID_DRIVE://	(11) The logical drive number is invalid
			return "Invalid drive number";
 8001d88:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <fsErrName+0xe8>)
 8001d8a:	e010      	b.n	8001dae <fsErrName+0xb2>
		case FR_NOT_ENABLED://		(12) The volume has no work area
			return "Volume no area";
 8001d8c:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <fsErrName+0xec>)
 8001d8e:	e00e      	b.n	8001dae <fsErrName+0xb2>
		case FR_NO_FILESYSTEM://	(13) There is no valid FAT volume
			return "Volume has't filesystem";
 8001d90:	4b16      	ldr	r3, [pc, #88]	; (8001dec <fsErrName+0xf0>)
 8001d92:	e00c      	b.n	8001dae <fsErrName+0xb2>
		case FR_MKFS_ABORTED://		(14) The f_mkfs() aborted due to any problem
			return "f_mkfs() aborted";
 8001d94:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <fsErrName+0xf4>)
 8001d96:	e00a      	b.n	8001dae <fsErrName+0xb2>
		case FR_TIMEOUT://			(15) Could not get a grant to access the volume within defined period
			return "Timeout access";
 8001d98:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <fsErrName+0xf8>)
 8001d9a:	e008      	b.n	8001dae <fsErrName+0xb2>
		case FR_LOCKED://			(16) The operation is rejected according to the file sharing policy
			return "File locked";
 8001d9c:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <fsErrName+0xfc>)
 8001d9e:	e006      	b.n	8001dae <fsErrName+0xb2>
		case FR_NOT_ENOUGH_CORE://	(17) LFN working buffer could not be allocated
			return "Allocated buf error";
 8001da0:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <fsErrName+0x100>)
 8001da2:	e004      	b.n	8001dae <fsErrName+0xb2>
		case FR_TOO_MANY_OPEN_FILES://	(18) Number of open files > _FS_LOCK
			return "Open file limit";
 8001da4:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <fsErrName+0x104>)
 8001da6:	e002      	b.n	8001dae <fsErrName+0xb2>
		case FR_INVALID_PARAMETER://	(19) Given parameter is invalid
			return "Invalid parameter";
 8001da8:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <fsErrName+0x108>)
 8001daa:	e000      	b.n	8001dae <fsErrName+0xb2>
	}
	return "Unknown error";
 8001dac:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <fsErrName+0x10c>)
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	08016238 	.word	0x08016238
 8001dc0:	08016244 	.word	0x08016244
 8001dc4:	08016254 	.word	0x08016254
 8001dc8:	08016268 	.word	0x08016268
 8001dcc:	08016278 	.word	0x08016278
 8001dd0:	08016280 	.word	0x08016280
 8001dd4:	08016288 	.word	0x08016288
 8001dd8:	08016294 	.word	0x08016294
 8001ddc:	080162a4 	.word	0x080162a4
 8001de0:	080162b8 	.word	0x080162b8
 8001de4:	080162c8 	.word	0x080162c8
 8001de8:	080162e0 	.word	0x080162e0
 8001dec:	080162f0 	.word	0x080162f0
 8001df0:	08016308 	.word	0x08016308
 8001df4:	0801631c 	.word	0x0801631c
 8001df8:	0801632c 	.word	0x0801632c
 8001dfc:	08016338 	.word	0x08016338
 8001e00:	0801634c 	.word	0x0801634c
 8001e04:	0801635c 	.word	0x0801635c
 8001e08:	08016370 	.word	0x08016370

08001e0c <attrName>:
//------------------------------------------------------------------------------------------
static char *attrName(uint8_t attr)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
	switch (attr) {
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	2b1f      	cmp	r3, #31
 8001e1c:	d84c      	bhi.n	8001eb8 <attrName+0xac>
 8001e1e:	a201      	add	r2, pc, #4	; (adr r2, 8001e24 <attrName+0x18>)
 8001e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e24:	08001ea5 	.word	0x08001ea5
 8001e28:	08001ea9 	.word	0x08001ea9
 8001e2c:	08001eb9 	.word	0x08001eb9
 8001e30:	08001ead 	.word	0x08001ead
 8001e34:	08001eb9 	.word	0x08001eb9
 8001e38:	08001eb9 	.word	0x08001eb9
 8001e3c:	08001eb9 	.word	0x08001eb9
 8001e40:	08001eb9 	.word	0x08001eb9
 8001e44:	08001eb9 	.word	0x08001eb9
 8001e48:	08001eb9 	.word	0x08001eb9
 8001e4c:	08001eb9 	.word	0x08001eb9
 8001e50:	08001eb9 	.word	0x08001eb9
 8001e54:	08001eb9 	.word	0x08001eb9
 8001e58:	08001eb9 	.word	0x08001eb9
 8001e5c:	08001eb9 	.word	0x08001eb9
 8001e60:	08001eb1 	.word	0x08001eb1
 8001e64:	08001eb9 	.word	0x08001eb9
 8001e68:	08001eb9 	.word	0x08001eb9
 8001e6c:	08001eb9 	.word	0x08001eb9
 8001e70:	08001eb9 	.word	0x08001eb9
 8001e74:	08001eb9 	.word	0x08001eb9
 8001e78:	08001eb9 	.word	0x08001eb9
 8001e7c:	08001eb9 	.word	0x08001eb9
 8001e80:	08001eb9 	.word	0x08001eb9
 8001e84:	08001eb9 	.word	0x08001eb9
 8001e88:	08001eb9 	.word	0x08001eb9
 8001e8c:	08001eb9 	.word	0x08001eb9
 8001e90:	08001eb9 	.word	0x08001eb9
 8001e94:	08001eb9 	.word	0x08001eb9
 8001e98:	08001eb9 	.word	0x08001eb9
 8001e9c:	08001eb9 	.word	0x08001eb9
 8001ea0:	08001eb5 	.word	0x08001eb5
		case AM_RDO://	0x01	/* Read only */
			return "Read only";
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <attrName+0xbc>)
 8001ea6:	e008      	b.n	8001eba <attrName+0xae>
		case AM_HID://	0x02	/* Hidden */
			return "Hidden";
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <attrName+0xc0>)
 8001eaa:	e006      	b.n	8001eba <attrName+0xae>
		case AM_SYS://	0x04	/* System */
			return "System";
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <attrName+0xc4>)
 8001eae:	e004      	b.n	8001eba <attrName+0xae>
		case AM_DIR://	0x10	/* Directory */
			return "Directory";
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <attrName+0xc8>)
 8001eb2:	e002      	b.n	8001eba <attrName+0xae>
		case AM_ARC://	0x20	/* Archive */
			return "Archive";
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <attrName+0xcc>)
 8001eb6:	e000      	b.n	8001eba <attrName+0xae>
		default : return "Unknown";
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <attrName+0xd0>)
	}
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	08016380 	.word	0x08016380
 8001ecc:	0801638c 	.word	0x0801638c
 8001ed0:	08016394 	.word	0x08016394
 8001ed4:	0801639c 	.word	0x0801639c
 8001ed8:	080163a8 	.word	0x080163a8
 8001edc:	080163b0 	.word	0x080163b0

08001ee0 <drvMount>:
//------------------------------------------------------------------------------------------
bool drvMount(const char *path)
{
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	6078      	str	r0, [r7, #4]
bool ret = false;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]

	if (!validChipID) return ret;
 8001eec:	4b32      	ldr	r3, [pc, #200]	; (8001fb8 <drvMount+0xd8>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	f083 0301 	eor.w	r3, r3, #1
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <drvMount+0x1e>
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
 8001efc:	e057      	b.n	8001fae <drvMount+0xce>

	FRESULT res = f_mount(&FatFs, path, 1);
 8001efe:	2201      	movs	r2, #1
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	482e      	ldr	r0, [pc, #184]	; (8001fbc <drvMount+0xdc>)
 8001f04:	f00e f96c 	bl	80101e0 <f_mount>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	73bb      	strb	r3, [r7, #14]
	if (res == FR_NO_FILESYSTEM) {
 8001f0c:	7bbb      	ldrb	r3, [r7, #14]
 8001f0e:	2b0d      	cmp	r3, #13
 8001f10:	d134      	bne.n	8001f7c <drvMount+0x9c>
		Report(1, "Mount drive '%s' error #%u (%s)\r\n", path, res, fsErrName(res));
 8001f12:	7bbc      	ldrb	r4, [r7, #14]
 8001f14:	7bbb      	ldrb	r3, [r7, #14]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fef0 	bl	8001cfc <fsErrName>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	4623      	mov	r3, r4
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4926      	ldr	r1, [pc, #152]	; (8001fc0 <drvMount+0xe0>)
 8001f26:	2001      	movs	r0, #1
 8001f28:	f002 fa2e 	bl	8004388 <Report>
		res = f_mkfs(path, FM_FAT, W25qxx_getBlockSize(), fs_work, sizeof(fs_work));
 8001f2c:	f004 f8aa 	bl	8006084 <W25qxx_getBlockSize>
 8001f30:	4602      	mov	r2, r0
 8001f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <drvMount+0xe4>)
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f00e ff85 	bl	8010e4c <f_mkfs>
 8001f42:	4603      	mov	r3, r0
 8001f44:	73bb      	strb	r3, [r7, #14]
		if (!res) {
 8001f46:	7bbb      	ldrb	r3, [r7, #14]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10c      	bne.n	8001f66 <drvMount+0x86>
			Report(1, "Make FAT fs on drive '%s' OK\r\n", path);
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	491e      	ldr	r1, [pc, #120]	; (8001fc8 <drvMount+0xe8>)
 8001f50:	2001      	movs	r0, #1
 8001f52:	f002 fa19 	bl	8004388 <Report>
			res = f_mount(&FatFs, path, 1);
 8001f56:	2201      	movs	r2, #1
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4818      	ldr	r0, [pc, #96]	; (8001fbc <drvMount+0xdc>)
 8001f5c:	f00e f940 	bl	80101e0 <f_mount>
 8001f60:	4603      	mov	r3, r0
 8001f62:	73bb      	strb	r3, [r7, #14]
 8001f64:	e00a      	b.n	8001f7c <drvMount+0x9c>
    	} else {
    		Report(1, "Make FAT fs error #%u (%s)\r\n", res, fsErrName(res));
 8001f66:	7bbc      	ldrb	r4, [r7, #14]
 8001f68:	7bbb      	ldrb	r3, [r7, #14]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fec6 	bl	8001cfc <fsErrName>
 8001f70:	4603      	mov	r3, r0
 8001f72:	4622      	mov	r2, r4
 8001f74:	4915      	ldr	r1, [pc, #84]	; (8001fcc <drvMount+0xec>)
 8001f76:	2001      	movs	r0, #1
 8001f78:	f002 fa06 	bl	8004388 <Report>
    	}
	}
	if (!res) {
 8001f7c:	7bbb      	ldrb	r3, [r7, #14]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d107      	bne.n	8001f92 <drvMount+0xb2>
		ret = true;
 8001f82:	2301      	movs	r3, #1
 8001f84:	73fb      	strb	r3, [r7, #15]
		Report(1, "Mount drive '%s' OK\r\n", path);
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	4911      	ldr	r1, [pc, #68]	; (8001fd0 <drvMount+0xf0>)
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f002 f9fc 	bl	8004388 <Report>
 8001f90:	e00c      	b.n	8001fac <drvMount+0xcc>
	} else {
		Report(1, "Mount drive '%s' error #%u (%s)\r\n", path, res, fsErrName(res));
 8001f92:	7bbc      	ldrb	r4, [r7, #14]
 8001f94:	7bbb      	ldrb	r3, [r7, #14]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff feb0 	bl	8001cfc <fsErrName>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	4623      	mov	r3, r4
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	4906      	ldr	r1, [pc, #24]	; (8001fc0 <drvMount+0xe0>)
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f002 f9ee 	bl	8004388 <Report>
	}

	return ret;
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd90      	pop	{r4, r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20002c99 	.word	0x20002c99
 8001fbc:	20002c9c 	.word	0x20002c9c
 8001fc0:	080163b8 	.word	0x080163b8
 8001fc4:	20001898 	.word	0x20001898
 8001fc8:	080163dc 	.word	0x080163dc
 8001fcc:	080163fc 	.word	0x080163fc
 8001fd0:	0801641c 	.word	0x0801641c

08001fd4 <dirList>:
//------------------------------------------------------------------------------------------
void dirList(const char *name_dir)
{
 8001fd4:	b590      	push	{r4, r7, lr}
 8001fd6:	b099      	sub	sp, #100	; 0x64
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	6078      	str	r0, [r7, #4]
DIR dir;

	FRESULT res = f_opendir(&dir, name_dir);
 8001fdc:	f107 0320 	add.w	r3, r7, #32
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f00e fe5c 	bl	8010ca0 <f_opendir>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	if (!res) {
 8001fee:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d14a      	bne.n	800208c <dirList+0xb8>
		FILINFO fno;
		int cnt = -1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ffa:	657b      	str	r3, [r7, #84]	; 0x54
		Report(1, "Read folder '%s':\r\n", name_dir);
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4925      	ldr	r1, [pc, #148]	; (8002094 <dirList+0xc0>)
 8002000:	2001      	movs	r0, #1
 8002002:	f002 f9c1 	bl	8004388 <Report>
		for (;;) {
			res = f_readdir(&dir, &fno);
 8002006:	f107 0208 	add.w	r2, r7, #8
 800200a:	f107 0320 	add.w	r3, r7, #32
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f00e fede 	bl	8010dd2 <f_readdir>
 8002016:	4603      	mov	r3, r0
 8002018:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			cnt++;
 800201c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800201e:	3301      	adds	r3, #1
 8002020:	657b      	str	r3, [r7, #84]	; 0x54
			if (res || fno.fname[0] == 0) {
 8002022:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002026:	2b00      	cmp	r3, #0
 8002028:	d102      	bne.n	8002030 <dirList+0x5c>
 800202a:	7c7b      	ldrb	r3, [r7, #17]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d108      	bne.n	8002042 <dirList+0x6e>
				if (!cnt) Report(0, "\tFolder '%s' is empty\r\n", name_dir);
 8002030:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002032:	2b00      	cmp	r3, #0
 8002034:	d124      	bne.n	8002080 <dirList+0xac>
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4917      	ldr	r1, [pc, #92]	; (8002098 <dirList+0xc4>)
 800203a:	2000      	movs	r0, #0
 800203c:	f002 f9a4 	bl	8004388 <Report>
				break;
 8002040:	e01e      	b.n	8002080 <dirList+0xac>
			} else if (fno.fattrib & AM_DIR) {// It is a directory
 8002042:	7c3b      	ldrb	r3, [r7, #16]
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <dirList+0x8a>
				Report(0, "\tIt is folder -> '%s'\r\n", fno.fname);
 800204c:	f107 0308 	add.w	r3, r7, #8
 8002050:	3309      	adds	r3, #9
 8002052:	461a      	mov	r2, r3
 8002054:	4911      	ldr	r1, [pc, #68]	; (800209c <dirList+0xc8>)
 8002056:	2000      	movs	r0, #0
 8002058:	f002 f996 	bl	8004388 <Report>
 800205c:	e7d3      	b.n	8002006 <dirList+0x32>
			} else {// It is a file.
				Report(0, "\tname:%s, size:%u bytes, attr:%s\r\n",
 800205e:	68bc      	ldr	r4, [r7, #8]
 8002060:	7c3b      	ldrb	r3, [r7, #16]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff fed2 	bl	8001e0c <attrName>
 8002068:	4601      	mov	r1, r0
 800206a:	f107 0308 	add.w	r3, r7, #8
 800206e:	f103 0209 	add.w	r2, r3, #9
 8002072:	9100      	str	r1, [sp, #0]
 8002074:	4623      	mov	r3, r4
 8002076:	490a      	ldr	r1, [pc, #40]	; (80020a0 <dirList+0xcc>)
 8002078:	2000      	movs	r0, #0
 800207a:	f002 f985 	bl	8004388 <Report>
			res = f_readdir(&dir, &fno);
 800207e:	e7c2      	b.n	8002006 <dirList+0x32>
				break;
 8002080:	bf00      	nop
									fno.fname,
									fno.fsize,
									attrName(fno.fattrib));
			}
		}
		f_closedir(&dir);
 8002082:	f107 0320 	add.w	r3, r7, #32
 8002086:	4618      	mov	r0, r3
 8002088:	f00e fe7d 	bl	8010d86 <f_closedir>
	}
}
 800208c:	bf00      	nop
 800208e:	375c      	adds	r7, #92	; 0x5c
 8002090:	46bd      	mov	sp, r7
 8002092:	bd90      	pop	{r4, r7, pc}
 8002094:	08016434 	.word	0x08016434
 8002098:	08016448 	.word	0x08016448
 800209c:	08016460 	.word	0x08016460
 80020a0:	08016478 	.word	0x08016478

080020a4 <wrFile>:
//------------------------------------------------------------------------------------------
void wrFile(const char *name, const char *text, bool update)
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	f5ad 5d86 	sub.w	sp, sp, #4288	; 0x10c0
 80020aa:	b085      	sub	sp, #20
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020b2:	f843 0cbc 	str.w	r0, [r3, #-188]
 80020b6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020ba:	f843 1cc0 	str.w	r1, [r3, #-192]
 80020be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020c2:	f803 2cc1 	strb.w	r2, [r3, #-193]
char tmp[128];
FIL fp;
FRESULT res = FR_NO_FILE;
 80020c6:	2304      	movs	r3, #4
 80020c8:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 80020cc:	f102 0207 	add.w	r2, r2, #7
 80020d0:	7013      	strb	r3, [r2, #0]

	sprintf(tmp, "/%s", cfg);
 80020d2:	4b4b      	ldr	r3, [pc, #300]	; (8002200 <wrFile+0x15c>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80020da:	f103 0304 	add.w	r3, r3, #4
 80020de:	4949      	ldr	r1, [pc, #292]	; (8002204 <wrFile+0x160>)
 80020e0:	4618      	mov	r0, r3
 80020e2:	f010 f969 	bl	80123b8 <siprintf>
	if (!update) {
 80020e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020ea:	f813 3cc1 	ldrb.w	r3, [r3, #-193]
 80020ee:	f083 0301 	eor.w	r3, r3, #1
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d02d      	beq.n	8002154 <wrFile+0xb0>
		res = f_open(&fp, tmp, FA_READ);
 80020f8:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 80020fc:	f101 0104 	add.w	r1, r1, #4
 8002100:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002104:	3b14      	subs	r3, #20
 8002106:	2201      	movs	r2, #1
 8002108:	4618      	mov	r0, r3
 800210a:	f00e f8af 	bl	801026c <f_open>
 800210e:	4603      	mov	r3, r0
 8002110:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8002114:	f102 0207 	add.w	r2, r2, #7
 8002118:	7013      	strb	r3, [r2, #0]
		if (res == FR_OK) {
 800211a:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800211e:	f103 0307 	add.w	r3, r3, #7
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d115      	bne.n	8002154 <wrFile+0xb0>
			res = f_close(&fp);
 8002128:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800212c:	3b14      	subs	r3, #20
 800212e:	4618      	mov	r0, r3
 8002130:	f00e fd8c 	bl	8010c4c <f_close>
 8002134:	4603      	mov	r3, r0
 8002136:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 800213a:	f102 0207 	add.w	r2, r2, #7
 800213e:	7013      	strb	r3, [r2, #0]
			Report(1, "File '%s' allready present and update has't been ordered\r\n", tmp);
 8002140:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002144:	f103 0304 	add.w	r3, r3, #4
 8002148:	461a      	mov	r2, r3
 800214a:	492f      	ldr	r1, [pc, #188]	; (8002208 <wrFile+0x164>)
 800214c:	2001      	movs	r0, #1
 800214e:	f002 f91b 	bl	8004388 <Report>
 8002152:	e04f      	b.n	80021f4 <wrFile+0x150>
			return;
		}
	}

	res = f_open(&fp, tmp, FA_CREATE_ALWAYS | FA_WRITE);
 8002154:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 8002158:	f101 0104 	add.w	r1, r1, #4
 800215c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002160:	3b14      	subs	r3, #20
 8002162:	220a      	movs	r2, #10
 8002164:	4618      	mov	r0, r3
 8002166:	f00e f881 	bl	801026c <f_open>
 800216a:	4603      	mov	r3, r0
 800216c:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8002170:	f102 0207 	add.w	r2, r2, #7
 8002174:	7013      	strb	r3, [r2, #0]
	if (!res) {
 8002176:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800217a:	f103 0307 	add.w	r3, r3, #7
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d11f      	bne.n	80021c4 <wrFile+0x120>
		//Report(1, "Create new file '%s' OK\r\n", tmp);
		//int wrt = 0, dl = strlen(text);
		//wrt =
		f_puts(text, &fp);
 8002184:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002188:	3b14      	subs	r3, #20
 800218a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800218e:	4619      	mov	r1, r3
 8002190:	f852 0cc0 	ldr.w	r0, [r2, #-192]
 8002194:	f00f fb2f 	bl	80117f6 <f_puts>
		/*if (wrt != dl) {
			devError |= devFS;
			Report(1, "Error while write file '%s'\r\n", tmp);
		} else*/
		Report(1, "File file '%s' write OK\r\n", tmp);
 8002198:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800219c:	f103 0304 	add.w	r3, r3, #4
 80021a0:	461a      	mov	r2, r3
 80021a2:	491a      	ldr	r1, [pc, #104]	; (800220c <wrFile+0x168>)
 80021a4:	2001      	movs	r0, #1
 80021a6:	f002 f8ef 	bl	8004388 <Report>

		res = f_close(&fp);
 80021aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ae:	3b14      	subs	r3, #20
 80021b0:	4618      	mov	r0, r3
 80021b2:	f00e fd4b 	bl	8010c4c <f_close>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 80021bc:	f102 0207 	add.w	r2, r2, #7
 80021c0:	7013      	strb	r3, [r2, #0]
 80021c2:	e017      	b.n	80021f4 <wrFile+0x150>
	} else Report(1, "Create new file '%s' error #%u (%s)\r\n", tmp, res, fsErrName(res));
 80021c4:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80021c8:	f103 0307 	add.w	r3, r3, #7
 80021cc:	781c      	ldrb	r4, [r3, #0]
 80021ce:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80021d2:	f103 0307 	add.w	r3, r3, #7
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fd8f 	bl	8001cfc <fsErrName>
 80021de:	4603      	mov	r3, r0
 80021e0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80021e4:	f102 0204 	add.w	r2, r2, #4
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	4623      	mov	r3, r4
 80021ec:	4908      	ldr	r1, [pc, #32]	; (8002210 <wrFile+0x16c>)
 80021ee:	2001      	movs	r0, #1
 80021f0:	f002 f8ca 	bl	8004388 <Report>

}
 80021f4:	f507 5786 	add.w	r7, r7, #4288	; 0x10c0
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd90      	pop	{r4, r7, pc}
 80021fe:	bf00      	nop
 8002200:	200001b8 	.word	0x200001b8
 8002204:	0801649c 	.word	0x0801649c
 8002208:	080164a0 	.word	0x080164a0
 800220c:	080164dc 	.word	0x080164dc
 8002210:	080164f8 	.word	0x080164f8

08002214 <rdFile>:
//------------------------------------------------------------------------------------------
bool rdFile(const char *name, char *txt)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	f5ad 5d86 	sub.w	sp, sp, #4288	; 0x10c0
 800221a:	af00      	add	r7, sp, #0
 800221c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002220:	f843 0cbc 	str.w	r0, [r3, #-188]
 8002224:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002228:	f843 1cc0 	str.w	r1, [r3, #-192]
bool ret = false;
 800222c:	2300      	movs	r3, #0
 800222e:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8002232:	f102 021f 	add.w	r2, r2, #31
 8002236:	7013      	strb	r3, [r2, #0]
char tmp[128];
FIL fp;

	*txt = '\0';
 8002238:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800223c:	f853 3cc0 	ldr.w	r3, [r3, #-192]
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
	if (!f_open(&fp, name, FA_READ)) {
 8002244:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002248:	4619      	mov	r1, r3
 800224a:	f107 0320 	add.w	r3, r7, #32
 800224e:	3b14      	subs	r3, #20
 8002250:	2201      	movs	r2, #1
 8002252:	f851 1cbc 	ldr.w	r1, [r1, #-188]
 8002256:	4618      	mov	r0, r3
 8002258:	f00e f808 	bl	801026c <f_open>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d12e      	bne.n	80022c0 <rdFile+0xac>
		Report(1, "File '%s' open for reading OK\r\n", name);
 8002262:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002266:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 800226a:	491e      	ldr	r1, [pc, #120]	; (80022e4 <rdFile+0xd0>)
 800226c:	2001      	movs	r0, #1
 800226e:	f002 f88b 	bl	8004388 <Report>
		while (f_gets(tmp, sizeof(tmp) - 1, &fp) != NULL) {
 8002272:	e00a      	b.n	800228a <rdFile+0x76>
			strcat(txt, tmp);
 8002274:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002278:	f103 031c 	add.w	r3, r3, #28
 800227c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8002280:	4619      	mov	r1, r3
 8002282:	f852 0cc0 	ldr.w	r0, [r2, #-192]
 8002286:	f010 f8b7 	bl	80123f8 <strcat>
		while (f_gets(tmp, sizeof(tmp) - 1, &fp) != NULL) {
 800228a:	f107 0320 	add.w	r3, r7, #32
 800228e:	3b14      	subs	r3, #20
 8002290:	f507 5081 	add.w	r0, r7, #4128	; 0x1020
 8002294:	f100 001c 	add.w	r0, r0, #28
 8002298:	461a      	mov	r2, r3
 800229a:	217f      	movs	r1, #127	; 0x7f
 800229c:	f00f fa02 	bl	80116a4 <f_gets>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1e6      	bne.n	8002274 <rdFile+0x60>
			//Report(0, "%s", tmp);
		}

		f_close(&fp);
 80022a6:	f107 0320 	add.w	r3, r7, #32
 80022aa:	3b14      	subs	r3, #20
 80022ac:	4618      	mov	r0, r3
 80022ae:	f00e fccd 	bl	8010c4c <f_close>

		ret = true;
 80022b2:	2301      	movs	r3, #1
 80022b4:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80022b8:	f102 021f 	add.w	r2, r2, #31
 80022bc:	7013      	strb	r3, [r2, #0]
 80022be:	e007      	b.n	80022d0 <rdFile+0xbc>
	} else {
		Report(1, "Error while open for reading file '%s'\r\n", name);
 80022c0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80022c4:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 80022c8:	4907      	ldr	r1, [pc, #28]	; (80022e8 <rdFile+0xd4>)
 80022ca:	2001      	movs	r0, #1
 80022cc:	f002 f85c 	bl	8004388 <Report>
	}

	return ret;
 80022d0:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80022d4:	f103 031f 	add.w	r3, r3, #31
 80022d8:	781b      	ldrb	r3, [r3, #0]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	f507 5786 	add.w	r7, r7, #4288	; 0x10c0
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	08016520 	.word	0x08016520
 80022e8:	08016540 	.word	0x08016540

080022ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022f0:	f5ad 6dab 	sub.w	sp, sp, #1368	; 0x558
 80022f4:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022f6:	f004 fa5e 	bl	80067b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022fa:	f001 f9b1 	bl	8003660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022fe:	f001 fbe9 	bl	8003ad4 <MX_GPIO_Init>
  MX_TIM4_Init();
 8002302:	f001 fb17 	bl	8003934 <MX_TIM4_Init>
  MX_DMA_Init();
 8002306:	f001 fb93 	bl	8003a30 <MX_DMA_Init>
  MX_RTC_Init();
 800230a:	f001 fa3b 	bl	8003784 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800230e:	f001 fb5f 	bl	80039d0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8002312:	f001 fad1 	bl	80038b8 <MX_SPI2_Init>
  MX_SPI1_Init();
 8002316:	f001 fa91 	bl	800383c <MX_SPI1_Init>
  MX_I2C1_Init();
 800231a:	f001 f9f3 	bl	8003704 <MX_I2C1_Init>
  MX_FATFS_Init();
 800231e:	f00c f881 	bl	800e424 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */


  if (HAL_TIM_Base_Start_IT(tikPort) != HAL_OK) devError |= devTIK;
 8002322:	4bb9      	ldr	r3, [pc, #740]	; (8002608 <main+0x31c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f009 ffc8 	bl	800c2bc <HAL_TIM_Base_Start_IT>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d006      	beq.n	8002340 <main+0x54>
 8002332:	4bb6      	ldr	r3, [pc, #728]	; (800260c <main+0x320>)
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	4bb3      	ldr	r3, [pc, #716]	; (800260c <main+0x320>)
 800233e:	801a      	strh	r2, [r3, #0]

  for (int8_t i = 0; i < 4; i++) {
 8002340:	2300      	movs	r3, #0
 8002342:	f887 3537 	strb.w	r3, [r7, #1335]	; 0x537
 8002346:	e012      	b.n	800236e <main+0x82>
	  errLedOn(true);
 8002348:	2001      	movs	r0, #1
 800234a:	f001 fefd 	bl	8004148 <errLedOn>
	  HAL_Delay(150);
 800234e:	2096      	movs	r0, #150	; 0x96
 8002350:	f004 faa6 	bl	80068a0 <HAL_Delay>
	  errLedOn(false);
 8002354:	2000      	movs	r0, #0
 8002356:	f001 fef7 	bl	8004148 <errLedOn>
	  HAL_Delay(150);
 800235a:	2096      	movs	r0, #150	; 0x96
 800235c:	f004 faa0 	bl	80068a0 <HAL_Delay>
  for (int8_t i = 0; i < 4; i++) {
 8002360:	f997 3537 	ldrsb.w	r3, [r7, #1335]	; 0x537
 8002364:	b2db      	uxtb	r3, r3
 8002366:	3301      	adds	r3, #1
 8002368:	b2db      	uxtb	r3, r3
 800236a:	f887 3537 	strb.w	r3, [r7, #1335]	; 0x537
 800236e:	f997 3537 	ldrsb.w	r3, [r7, #1335]	; 0x537
 8002372:	2b03      	cmp	r3, #3
 8002374:	dde8      	ble.n	8002348 <main+0x5c>
  }

  if (HAL_UART_Receive_IT(cmdPort, &rxByte, 1) != HAL_OK) devError |= devUART;
 8002376:	4ba6      	ldr	r3, [pc, #664]	; (8002610 <main+0x324>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2201      	movs	r2, #1
 800237c:	49a5      	ldr	r1, [pc, #660]	; (8002614 <main+0x328>)
 800237e:	4618      	mov	r0, r3
 8002380:	f00a fc74 	bl	800cc6c <HAL_UART_Receive_IT>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d006      	beq.n	8002398 <main+0xac>
 800238a:	4ba0      	ldr	r3, [pc, #640]	; (800260c <main+0x320>)
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	f043 0302 	orr.w	r3, r3, #2
 8002392:	b29a      	uxth	r2, r3
 8002394:	4b9d      	ldr	r3, [pc, #628]	; (800260c <main+0x320>)
 8002396:	801a      	strh	r2, [r3, #0]

  set_Date(epoch);
 8002398:	4b9f      	ldr	r3, [pc, #636]	; (8002618 <main+0x32c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f001 fef9 	bl	8004194 <set_Date>

  HAL_Delay(250);
 80023a2:	20fa      	movs	r0, #250	; 0xfa
 80023a4:	f004 fa7c 	bl	80068a0 <HAL_Delay>

  Report(1, "[que:%u] Start application ver.%s\r\n", cntEvt, ver);
 80023a8:	4b9c      	ldr	r3, [pc, #624]	; (800261c <main+0x330>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	461a      	mov	r2, r3
 80023b0:	4b9b      	ldr	r3, [pc, #620]	; (8002620 <main+0x334>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	499b      	ldr	r1, [pc, #620]	; (8002624 <main+0x338>)
 80023b6:	2001      	movs	r0, #1
 80023b8:	f001 ffe6 	bl	8004388 <Report>

#ifdef SET_W25FLASH
    chipPresent = W25qxx_Init();
 80023bc:	f003 fd76 	bl	8005eac <W25qxx_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b98      	ldr	r3, [pc, #608]	; (8002628 <main+0x33c>)
 80023c6:	701a      	strb	r2, [r3, #0]
    uint32_t cid = W25qxx_getChipID();
 80023c8:	f003 fe2a 	bl	8006020 <W25qxx_getChipID>
 80023cc:	f8c7 0508 	str.w	r0, [r7, #1288]	; 0x508
    if ( chipPresent && ((cid >= W25Q10) && (cid <= W25Q128)) ) validChipID = true;
 80023d0:	4b95      	ldr	r3, [pc, #596]	; (8002628 <main+0x33c>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00a      	beq.n	80023ee <main+0x102>
 80023d8:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <main+0x102>
 80023e0:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d802      	bhi.n	80023ee <main+0x102>
 80023e8:	4b90      	ldr	r3, [pc, #576]	; (800262c <main+0x340>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
    list_sector = W25qxx_getPageSize() << 1;
 80023ee:	f003 fe3b 	bl	8006068 <W25qxx_getPageSize>
 80023f2:	4603      	mov	r3, r0
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	461a      	mov	r2, r3
 80023f8:	4b8d      	ldr	r3, [pc, #564]	; (8002630 <main+0x344>)
 80023fa:	601a      	str	r2, [r3, #0]
    //
    listSize = sizeof(rec_t) * MAX_LIST;
 80023fc:	4b8d      	ldr	r3, [pc, #564]	; (8002634 <main+0x348>)
 80023fe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002402:	801a      	strh	r2, [r3, #0]
    memset((uint8_t *)&list[0].freq, 0, listSize);
 8002404:	4b8b      	ldr	r3, [pc, #556]	; (8002634 <main+0x348>)
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	2100      	movs	r1, #0
 800240c:	488a      	ldr	r0, [pc, #552]	; (8002638 <main+0x34c>)
 800240e:	f00f fb61 	bl	8011ad4 <memset>
    //
	#ifdef SET_FAT_FS
    	int8_t ix = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	f887 3536 	strb.w	r3, [r7, #1334]	; 0x536
      	mnt = drvMount(USERPath);
 8002418:	4888      	ldr	r0, [pc, #544]	; (800263c <main+0x350>)
 800241a:	f7ff fd61 	bl	8001ee0 <drvMount>
 800241e:	4603      	mov	r3, r0
 8002420:	461a      	mov	r2, r3
 8002422:	4b87      	ldr	r3, [pc, #540]	; (8002640 <main+0x354>)
 8002424:	701a      	strb	r2, [r3, #0]
      	if (mnt) {
 8002426:	4b86      	ldr	r3, [pc, #536]	; (8002640 <main+0x354>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 812d 	beq.w	800268a <main+0x39e>
      		dirList(dirName);
 8002430:	4b84      	ldr	r3, [pc, #528]	; (8002644 <main+0x358>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fdcd 	bl	8001fd4 <dirList>
      		//
      		char txt[MAX_UART_BUF] = {0};
 800243a:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800243e:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	3304      	adds	r3, #4
 8002448:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f00f fb40 	bl	8011ad4 <memset>
      		cfg_present = rdFile(cfg, txt);
 8002454:	4b7c      	ldr	r3, [pc, #496]	; (8002648 <main+0x35c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fed8 	bl	8002214 <rdFile>
 8002464:	4603      	mov	r3, r0
 8002466:	461a      	mov	r2, r3
 8002468:	4b78      	ldr	r3, [pc, #480]	; (800264c <main+0x360>)
 800246a:	701a      	strb	r2, [r3, #0]
      		if (!cfg_present) {
 800246c:	4b77      	ldr	r3, [pc, #476]	; (800264c <main+0x360>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	f083 0301 	eor.w	r3, r3, #1
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d03f      	beq.n	80024fa <main+0x20e>
      			//
      			for (int i = 0; i < MAX_LIST; i++) {
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
 8002480:	e023      	b.n	80024ca <main+0x1de>
      				sprintf(txt+strlen(txt), "%.1f:%s\r\n", def_list[i].freq, def_list[i].name);
 8002482:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002486:	4618      	mov	r0, r3
 8002488:	f7fd fea2 	bl	80001d0 <strlen>
 800248c:	4602      	mov	r2, r0
 800248e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002492:	189c      	adds	r4, r3, r2
 8002494:	4a6e      	ldr	r2, [pc, #440]	; (8002650 <main+0x364>)
 8002496:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 800249a:	015b      	lsls	r3, r3, #5
 800249c:	4413      	add	r3, r2
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe f851 	bl	8000548 <__aeabi_f2d>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	f8d7 1530 	ldr.w	r1, [r7, #1328]	; 0x530
 80024ae:	0149      	lsls	r1, r1, #5
 80024b0:	4867      	ldr	r0, [pc, #412]	; (8002650 <main+0x364>)
 80024b2:	4401      	add	r1, r0
 80024b4:	3104      	adds	r1, #4
 80024b6:	9100      	str	r1, [sp, #0]
 80024b8:	4966      	ldr	r1, [pc, #408]	; (8002654 <main+0x368>)
 80024ba:	4620      	mov	r0, r4
 80024bc:	f00f ff7c 	bl	80123b8 <siprintf>
      			for (int i = 0; i < MAX_LIST; i++) {
 80024c0:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 80024c4:	3301      	adds	r3, #1
 80024c6:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
 80024ca:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 80024ce:	2b17      	cmp	r3, #23
 80024d0:	ddd7      	ble.n	8002482 <main+0x196>
      			}
      			wrFile(cfg, txt, true);
 80024d2:	4b5d      	ldr	r3, [pc, #372]	; (8002648 <main+0x35c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80024da:	2201      	movs	r2, #1
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fde1 	bl	80020a4 <wrFile>
      			//
      			cfg_present = rdFile(cfg, txt);
 80024e2:	4b59      	ldr	r3, [pc, #356]	; (8002648 <main+0x35c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fe91 	bl	8002214 <rdFile>
 80024f2:	4603      	mov	r3, r0
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b55      	ldr	r3, [pc, #340]	; (800264c <main+0x360>)
 80024f8:	701a      	strb	r2, [r3, #0]
      		}
      		if (cfg_present) {
 80024fa:	4b54      	ldr	r3, [pc, #336]	; (800264c <main+0x360>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 80b5 	beq.w	800266e <main+0x382>
      			char *uks = txt, *uke = NULL, *uend = txt + strlen(txt);
 8002504:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002508:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 800250c:	2300      	movs	r3, #0
 800250e:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8002512:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002516:	4618      	mov	r0, r3
 8002518:	f7fd fe5a 	bl	80001d0 <strlen>
 800251c:	4602      	mov	r2, r0
 800251e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002522:	4413      	add	r3, r2
 8002524:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
      			char tmp[64] = {0};
 8002528:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800252c:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	3304      	adds	r3, #4
 8002536:	223c      	movs	r2, #60	; 0x3c
 8002538:	2100      	movs	r1, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f00f faca 	bl	8011ad4 <memset>
      			while (uks < uend) {
 8002540:	e058      	b.n	80025f4 <main+0x308>
      				uke = strstr(uks, "\r\n");
 8002542:	4945      	ldr	r1, [pc, #276]	; (8002658 <main+0x36c>)
 8002544:	f8d7 052c 	ldr.w	r0, [r7, #1324]	; 0x52c
 8002548:	f00f ff99 	bl	801247e <strstr>
 800254c:	f8c7 0504 	str.w	r0, [r7, #1284]	; 0x504
      				if (uke) {
 8002550:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 8002554:	2b00      	cmp	r3, #0
 8002556:	d054      	beq.n	8002602 <main+0x316>
      					memset(tmp, 0, sizeof(tmp));
 8002558:	463b      	mov	r3, r7
 800255a:	2240      	movs	r2, #64	; 0x40
 800255c:	2100      	movs	r1, #0
 800255e:	4618      	mov	r0, r3
 8002560:	f00f fab8 	bl	8011ad4 <memset>
      					memcpy(tmp, uks, uke - uks);
 8002564:	f8d7 2504 	ldr.w	r2, [r7, #1284]	; 0x504
 8002568:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	461a      	mov	r2, r3
 8002570:	463b      	mov	r3, r7
 8002572:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 8002576:	4618      	mov	r0, r3
 8002578:	f00f fa9e 	bl	8011ab8 <memcpy>
      					uks = uke + 2;
 800257c:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 8002580:	3302      	adds	r3, #2
 8002582:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
      					uke = strchr(tmp, ':');
 8002586:	463b      	mov	r3, r7
 8002588:	213a      	movs	r1, #58	; 0x3a
 800258a:	4618      	mov	r0, r3
 800258c:	f00f ff43 	bl	8012416 <strchr>
 8002590:	f8c7 0504 	str.w	r0, [r7, #1284]	; 0x504
      					if (uke) {
 8002594:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 8002598:	2b00      	cmp	r3, #0
 800259a:	d010      	beq.n	80025be <main+0x2d2>
      						strncpy(&list[ix].name[0], uke + 1, MAX_SIZE_NAME - 1);
 800259c:	f997 3536 	ldrsb.w	r3, [r7, #1334]	; 0x536
 80025a0:	015b      	lsls	r3, r3, #5
 80025a2:	4a25      	ldr	r2, [pc, #148]	; (8002638 <main+0x34c>)
 80025a4:	4413      	add	r3, r2
 80025a6:	1d18      	adds	r0, r3, #4
 80025a8:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 80025ac:	3301      	adds	r3, #1
 80025ae:	221b      	movs	r2, #27
 80025b0:	4619      	mov	r1, r3
 80025b2:	f00f ff51 	bl	8012458 <strncpy>
      						*uke = '\0';
 80025b6:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
      					}
      					list[ix].freq = (float)atof(tmp);
 80025be:	463b      	mov	r3, r7
 80025c0:	4618      	mov	r0, r3
 80025c2:	f00f f998 	bl	80118f6 <atof>
 80025c6:	ec53 2b10 	vmov	r2, r3, d0
 80025ca:	f997 4536 	ldrsb.w	r4, [r7, #1334]	; 0x536
 80025ce:	4610      	mov	r0, r2
 80025d0:	4619      	mov	r1, r3
 80025d2:	f7fe fb09 	bl	8000be8 <__aeabi_d2f>
 80025d6:	4602      	mov	r2, r0
 80025d8:	4917      	ldr	r1, [pc, #92]	; (8002638 <main+0x34c>)
 80025da:	0163      	lsls	r3, r4, #5
 80025dc:	440b      	add	r3, r1
 80025de:	601a      	str	r2, [r3, #0]
      					//Report(0, "%.1f:%s\r\n", list[ix].freq, list[ix].name);
      					if (++ix == MAX_LIST) break;
 80025e0:	f897 3536 	ldrb.w	r3, [r7, #1334]	; 0x536
 80025e4:	3301      	adds	r3, #1
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f887 3536 	strb.w	r3, [r7, #1334]	; 0x536
 80025ec:	f997 3536 	ldrsb.w	r3, [r7, #1334]	; 0x536
 80025f0:	2b18      	cmp	r3, #24
 80025f2:	d033      	beq.n	800265c <main+0x370>
      			while (uks < uend) {
 80025f4:	f8d7 252c 	ldr.w	r2, [r7, #1324]	; 0x52c
 80025f8:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d3a0      	bcc.n	8002542 <main+0x256>
 8002600:	e02d      	b.n	800265e <main+0x372>
      				} else {
      					break;
 8002602:	bf00      	nop
 8002604:	e02b      	b.n	800265e <main+0x372>
 8002606:	bf00      	nop
 8002608:	20000008 	.word	0x20000008
 800260c:	20001468 	.word	0x20001468
 8002610:	20000010 	.word	0x20000010
 8002614:	20001478 	.word	0x20001478
 8002618:	20000018 	.word	0x20000018
 800261c:	20001884 	.word	0x20001884
 8002620:	20000004 	.word	0x20000004
 8002624:	0801656c 	.word	0x0801656c
 8002628:	20002c98 	.word	0x20002c98
 800262c:	20002c99 	.word	0x20002c99
 8002630:	20001890 	.word	0x20001890
 8002634:	20003fe8 	.word	0x20003fe8
 8002638:	20003ce8 	.word	0x20003ce8
 800263c:	2000413c 	.word	0x2000413c
 8002640:	20003ccd 	.word	0x20003ccd
 8002644:	200001bc 	.word	0x200001bc
 8002648:	200001b8 	.word	0x200001b8
 800264c:	20003ccc 	.word	0x20003ccc
 8002650:	080174fc 	.word	0x080174fc
 8002654:	08016590 	.word	0x08016590
 8002658:	0801659c 	.word	0x0801659c
      					if (++ix == MAX_LIST) break;
 800265c:	bf00      	nop
      				}
      			}
      			Report(1, "Readed %d records from '%s' file\r\n", ix, cfg);
 800265e:	f997 2536 	ldrsb.w	r2, [r7, #1334]	; 0x536
 8002662:	4bb9      	ldr	r3, [pc, #740]	; (8002948 <main+0x65c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	49b9      	ldr	r1, [pc, #740]	; (800294c <main+0x660>)
 8002668:	2001      	movs	r0, #1
 800266a:	f001 fe8d 	bl	8004388 <Report>
      		}
      		f_mount(NULL, USERPath, 1);
 800266e:	2201      	movs	r2, #1
 8002670:	49b7      	ldr	r1, [pc, #732]	; (8002950 <main+0x664>)
 8002672:	2000      	movs	r0, #0
 8002674:	f00d fdb4 	bl	80101e0 <f_mount>
      		mnt = false;
 8002678:	4bb6      	ldr	r3, [pc, #728]	; (8002954 <main+0x668>)
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
      		Report(1, "Umount drive '%.*s'\r\n", sizeof(USERPath), USERPath);
 800267e:	4bb4      	ldr	r3, [pc, #720]	; (8002950 <main+0x664>)
 8002680:	2204      	movs	r2, #4
 8002682:	49b5      	ldr	r1, [pc, #724]	; (8002958 <main+0x66c>)
 8002684:	2001      	movs	r0, #1
 8002686:	f001 fe7f 	bl	8004388 <Report>
      	}
      	if (!ix) {
 800268a:	f997 3536 	ldrsb.w	r3, [r7, #1334]	; 0x536
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10d      	bne.n	80026ae <main+0x3c2>
      		memcpy((uint8_t *)&list[0].freq, (uint8_t *)&def_list[0].freq, listSize);
 8002692:	4bb2      	ldr	r3, [pc, #712]	; (800295c <main+0x670>)
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	49b1      	ldr	r1, [pc, #708]	; (8002960 <main+0x674>)
 800269a:	48b2      	ldr	r0, [pc, #712]	; (8002964 <main+0x678>)
 800269c:	f00f fa0c 	bl	8011ab8 <memcpy>
      		devError |= devFS;
 80026a0:	4bb1      	ldr	r3, [pc, #708]	; (8002968 <main+0x67c>)
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	4baf      	ldr	r3, [pc, #700]	; (8002968 <main+0x67c>)
 80026ac:	801a      	strh	r2, [r3, #0]

#endif

#ifdef SET_NEW_RDA

    rdaID = rda5807_init(&Freq);
 80026ae:	48af      	ldr	r0, [pc, #700]	; (800296c <main+0x680>)
 80026b0:	f002 fa44 	bl	8004b3c <rda5807_init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	461a      	mov	r2, r3
 80026b8:	4bad      	ldr	r3, [pc, #692]	; (8002970 <main+0x684>)
 80026ba:	701a      	strb	r2, [r3, #0]
    RSSI = rda5807_rssi();
 80026bc:	f002 faac 	bl	8004c18 <rda5807_rssi>
 80026c0:	4603      	mov	r3, r0
 80026c2:	461a      	mov	r2, r3
 80026c4:	4bab      	ldr	r3, [pc, #684]	; (8002974 <main+0x688>)
 80026c6:	801a      	strh	r2, [r3, #0]
    rda5807_SetVolume(Volume);
 80026c8:	4bab      	ldr	r3, [pc, #684]	; (8002978 <main+0x68c>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f002 fc81 	bl	8004fd4 <rda5807_SetVolume>
    rda5807_SetBassBoost(BassBoost);
 80026d2:	4baa      	ldr	r3, [pc, #680]	; (800297c <main+0x690>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f002 fcc4 	bl	8005064 <rda5807_SetBassBoost>
    stereo = rda5807_Get_StereoMonoFlag();
 80026dc:	f002 fdd8 	bl	8005290 <rda5807_Get_StereoMonoFlag>
 80026e0:	4603      	mov	r3, r0
 80026e2:	461a      	mov	r2, r3
 80026e4:	4ba6      	ldr	r3, [pc, #664]	; (8002980 <main+0x694>)
 80026e6:	701a      	strb	r2, [r3, #0]
    Chan = rda5807_Get_Channel();
 80026e8:	f002 fdea 	bl	80052c0 <rda5807_Get_Channel>
 80026ec:	4603      	mov	r3, r0
 80026ee:	461a      	mov	r2, r3
 80026f0:	4ba4      	ldr	r3, [pc, #656]	; (8002984 <main+0x698>)
 80026f2:	801a      	strh	r2, [r3, #0]
#endif

#ifdef SET_DISPLAY

	#ifdef FONT_6x8
  		FontDef_t Font_6x8 = { 6, 8, Font6x8 };
 80026f4:	4aa4      	ldr	r2, [pc, #656]	; (8002988 <main+0x69c>)
 80026f6:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80026fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026fe:	6018      	str	r0, [r3, #0]
 8002700:	3304      	adds	r3, #4
 8002702:	8019      	strh	r1, [r3, #0]
  		lfnt = &Font_6x8;
 8002704:	4aa1      	ldr	r2, [pc, #644]	; (800298c <main+0x6a0>)
 8002706:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800270a:	6013      	str	r3, [r2, #0]
	#endif


  	uint16_t lin1 = 1;
 800270c:	2301      	movs	r3, #1
 800270e:	f8a7 34fe 	strh.w	r3, [r7, #1278]	; 0x4fe
  	uint16_t lin2 = lin1 + Font_6x8.FontHeight;//chipID...
 8002712:	f897 34d1 	ldrb.w	r3, [r7, #1233]	; 0x4d1
 8002716:	b29a      	uxth	r2, r3
 8002718:	f8b7 34fe 	ldrh.w	r3, [r7, #1278]	; 0x4fe
 800271c:	4413      	add	r3, r2
 800271e:	f8a7 34fc 	strh.w	r3, [r7, #1276]	; 0x4fc
  	uint16_t lin3 = lin2 + Font_6x8.FontHeight + 1;//Band...
 8002722:	f897 34d1 	ldrb.w	r3, [r7, #1233]	; 0x4d1
 8002726:	b29a      	uxth	r2, r3
 8002728:	f8b7 34fc 	ldrh.w	r3, [r7, #1276]	; 0x4fc
 800272c:	4413      	add	r3, r2
 800272e:	b29b      	uxth	r3, r3
 8002730:	3301      	adds	r3, #1
 8002732:	f8a7 34fa 	strh.w	r3, [r7, #1274]	; 0x4fa
  	uint16_t lin4 = lin3 + Font_6x8.FontHeight + 1;//Volume...//Freq...
 8002736:	f897 34d1 	ldrb.w	r3, [r7, #1233]	; 0x4d1
 800273a:	b29a      	uxth	r2, r3
 800273c:	f8b7 34fa 	ldrh.w	r3, [r7, #1274]	; 0x4fa
 8002740:	4413      	add	r3, r2
 8002742:	b29b      	uxth	r3, r3
 8002744:	3301      	adds	r3, #1
 8002746:	f8a7 34f8 	strh.w	r3, [r7, #1272]	; 0x4f8
  	uint16_t lin5 = lin4 + Font_6x8.FontHeight + 1;//Freq...//Volume...
 800274a:	f897 34d1 	ldrb.w	r3, [r7, #1233]	; 0x4d1
 800274e:	b29a      	uxth	r2, r3
 8002750:	f8b7 34f8 	ldrh.w	r3, [r7, #1272]	; 0x4f8
 8002754:	4413      	add	r3, r2
 8002756:	b29b      	uxth	r3, r3
 8002758:	3301      	adds	r3, #1
 800275a:	f8a7 34f6 	strh.w	r3, [r7, #1270]	; 0x4f6
  	uint16_t lin6 = lin5 + Font_6x8.FontHeight + 1;//Station
 800275e:	f897 34d1 	ldrb.w	r3, [r7, #1233]	; 0x4d1
 8002762:	b29a      	uxth	r2, r3
 8002764:	f8b7 34f6 	ldrh.w	r3, [r7, #1270]	; 0x4f6
 8002768:	4413      	add	r3, r2
 800276a:	b29b      	uxth	r3, r3
 800276c:	3301      	adds	r3, #1
 800276e:	f8a7 34f4 	strh.w	r3, [r7, #1268]	; 0x4f4
  	char st[64];
  	char sta[32];
  	char stb[32];

  	ST7565_Reset();
 8002772:	f7fe fca9 	bl	80010c8 <ST7565_Reset>
  	ST7565_Init();
 8002776:	f7fe fdbf 	bl	80012f8 <ST7565_Init>

  	ST7565_CMD_DISPLAY(CMD_DISPLAY_ON);
 800277a:	20af      	movs	r0, #175	; 0xaf
 800277c:	f7fe fdd6 	bl	800132c <ST7565_CMD_DISPLAY>

    int dl = sprintf(tmp, "Ver.%s", ver);
 8002780:	4b83      	ldr	r3, [pc, #524]	; (8002990 <main+0x6a4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	4983      	ldr	r1, [pc, #524]	; (8002994 <main+0x6a8>)
 8002788:	4883      	ldr	r0, [pc, #524]	; (8002998 <main+0x6ac>)
 800278a:	f00f fe15 	bl	80123b8 <siprintf>
 800278e:	f8c7 0528 	str.w	r0, [r7, #1320]	; 0x528
    uint16_t x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 8002792:	f897 34d0 	ldrb.w	r3, [r7, #1232]	; 0x4d0
 8002796:	461a      	mov	r2, r3
 8002798:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 800279c:	fb02 f303 	mul.w	r3, r2, r3
 80027a0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80027a4:	105b      	asrs	r3, r3, #1
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ac:	f8a7 34f2 	strh.w	r3, [r7, #1266]	; 0x4f2
    ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 80027b0:	f9b7 04f2 	ldrsh.w	r0, [r7, #1266]	; 0x4f2
 80027b4:	f897 34d1 	ldrb.w	r3, [r7, #1233]	; 0x4d1
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80027be:	b29b      	uxth	r3, r3
 80027c0:	b219      	sxth	r1, r3
 80027c2:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80027c6:	2201      	movs	r2, #1
 80027c8:	9201      	str	r2, [sp, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	9200      	str	r2, [sp, #0]
 80027ce:	4a72      	ldr	r2, [pc, #456]	; (8002998 <main+0x6ac>)
 80027d0:	f7fe ffcc 	bl	800176c <ST7565_Print>

	#if defined(SET_RDA_CHIP) || defined(SET_NEW_RDA)
    	int il = sprintf(st, "RDA5807 chipID:0x%x", rdaID);
 80027d4:	4b66      	ldr	r3, [pc, #408]	; (8002970 <main+0x684>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80027de:	496f      	ldr	r1, [pc, #444]	; (800299c <main+0x6b0>)
 80027e0:	4618      	mov	r0, r3
 80027e2:	f00f fde9 	bl	80123b8 <siprintf>
 80027e6:	f8c7 0524 	str.w	r0, [r7, #1316]	; 0x524
    	uint16_t xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * il)) >> 1) & 0x7f;
 80027ea:	f897 34d0 	ldrb.w	r3, [r7, #1232]	; 0x4d0
 80027ee:	461a      	mov	r2, r3
 80027f0:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80027f4:	fb02 f303 	mul.w	r3, r2, r3
 80027f8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80027fc:	105b      	asrs	r3, r3, #1
 80027fe:	b29b      	uxth	r3, r3
 8002800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002804:	f8a7 3522 	strh.w	r3, [r7, #1314]	; 0x522
    	if (!xf) xf = 1;
 8002808:	f8b7 3522 	ldrh.w	r3, [r7, #1314]	; 0x522
 800280c:	2b00      	cmp	r3, #0
 800280e:	d102      	bne.n	8002816 <main+0x52a>
 8002810:	2301      	movs	r3, #1
 8002812:	f8a7 3522 	strh.w	r3, [r7, #1314]	; 0x522
    	ST7565_Print(xf, lin2, st, &Font_6x8, 1, PIX_ON);
 8002816:	f9b7 0522 	ldrsh.w	r0, [r7, #1314]	; 0x522
 800281a:	f9b7 14fc 	ldrsh.w	r1, [r7, #1276]	; 0x4fc
 800281e:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8002822:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8002826:	2401      	movs	r4, #1
 8002828:	9401      	str	r4, [sp, #4]
 800282a:	2401      	movs	r4, #1
 800282c:	9400      	str	r4, [sp, #0]
 800282e:	f7fe ff9d 	bl	800176c <ST7565_Print>

    	int it = sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 8002832:	4b5b      	ldr	r3, [pc, #364]	; (80029a0 <main+0x6b4>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	4b5a      	ldr	r3, [pc, #360]	; (80029a4 <main+0x6b8>)
 800283a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800283e:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002842:	4959      	ldr	r1, [pc, #356]	; (80029a8 <main+0x6bc>)
 8002844:	4618      	mov	r0, r3
 8002846:	f00f fdb7 	bl	80123b8 <siprintf>
 800284a:	f8c7 04ec 	str.w	r0, [r7, #1260]	; 0x4ec
    	int lit = it;
 800284e:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8002852:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * it)) >> 1) & 0x7f;
 8002856:	f897 34d0 	ldrb.w	r3, [r7, #1232]	; 0x4d0
 800285a:	461a      	mov	r2, r3
 800285c:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8002860:	fb02 f303 	mul.w	r3, r2, r3
 8002864:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002868:	105b      	asrs	r3, r3, #1
 800286a:	b29b      	uxth	r3, r3
 800286c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002870:	f8a7 3522 	strh.w	r3, [r7, #1314]	; 0x522
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8002874:	f8b7 3522 	ldrh.w	r3, [r7, #1314]	; 0x522
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <main+0x598>
 800287c:	f8b7 3522 	ldrh.w	r3, [r7, #1314]	; 0x522
 8002880:	2b7d      	cmp	r3, #125	; 0x7d
 8002882:	d902      	bls.n	800288a <main+0x59e>
 8002884:	2301      	movs	r3, #1
 8002886:	f8a7 3522 	strh.w	r3, [r7, #1314]	; 0x522
    	ST7565_Print(xf, lin3, stb, &Font_6x8, 1, PIX_ON);
 800288a:	f9b7 0522 	ldrsh.w	r0, [r7, #1314]	; 0x522
 800288e:	f9b7 14fa 	ldrsh.w	r1, [r7, #1274]	; 0x4fa
 8002892:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8002896:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 800289a:	2401      	movs	r4, #1
 800289c:	9401      	str	r4, [sp, #4]
 800289e:	2401      	movs	r4, #1
 80028a0:	9400      	str	r4, [sp, #0]
 80028a2:	f7fe ff63 	bl	800176c <ST7565_Print>

    	int im = sprintf(st, "Vol:%u Bass:%u", Volume, BassBoost);
 80028a6:	4b34      	ldr	r3, [pc, #208]	; (8002978 <main+0x68c>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	4b33      	ldr	r3, [pc, #204]	; (800297c <main+0x690>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	f507 6092 	add.w	r0, r7, #1168	; 0x490
 80028b4:	493d      	ldr	r1, [pc, #244]	; (80029ac <main+0x6c0>)
 80028b6:	f00f fd7f 	bl	80123b8 <siprintf>
 80028ba:	f8c7 04e8 	str.w	r0, [r7, #1256]	; 0x4e8
    	int lim = im;
 80028be:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 80028c2:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * im)) >> 1) & 0x7f;
 80028c6:	f897 34d0 	ldrb.w	r3, [r7, #1232]	; 0x4d0
 80028ca:	461a      	mov	r2, r3
 80028cc:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 80028d0:	fb02 f303 	mul.w	r3, r2, r3
 80028d4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80028d8:	105b      	asrs	r3, r3, #1
 80028da:	b29b      	uxth	r3, r3
 80028dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028e0:	f8a7 3522 	strh.w	r3, [r7, #1314]	; 0x522
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 80028e4:	f8b7 3522 	ldrh.w	r3, [r7, #1314]	; 0x522
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <main+0x608>
 80028ec:	f8b7 3522 	ldrh.w	r3, [r7, #1314]	; 0x522
 80028f0:	2b7d      	cmp	r3, #125	; 0x7d
 80028f2:	d902      	bls.n	80028fa <main+0x60e>
 80028f4:	2301      	movs	r3, #1
 80028f6:	f8a7 3522 	strh.w	r3, [r7, #1314]	; 0x522
    	ST7565_Print(xf, lin4, st, &Font_6x8, 1, PIX_ON);
 80028fa:	f9b7 0522 	ldrsh.w	r0, [r7, #1314]	; 0x522
 80028fe:	f9b7 14f8 	ldrsh.w	r1, [r7, #1272]	; 0x4f8
 8002902:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8002906:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 800290a:	2401      	movs	r4, #1
 800290c:	9401      	str	r4, [sp, #4]
 800290e:	2401      	movs	r4, #1
 8002910:	9400      	str	r4, [sp, #0]
 8002912:	f7fe ff2b 	bl	800176c <ST7565_Print>

    	if (stereo)
 8002916:	4b1a      	ldr	r3, [pc, #104]	; (8002980 <main+0x694>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d04a      	beq.n	80029b4 <main+0x6c8>
    		il = sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 800291e:	4b15      	ldr	r3, [pc, #84]	; (8002974 <main+0x688>)
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	461c      	mov	r4, r3
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <main+0x680>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fe0d 	bl	8000548 <__aeabi_f2d>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	f507 6092 	add.w	r0, r7, #1168	; 0x490
 8002936:	e9cd 2300 	strd	r2, r3, [sp]
 800293a:	4622      	mov	r2, r4
 800293c:	491c      	ldr	r1, [pc, #112]	; (80029b0 <main+0x6c4>)
 800293e:	f00f fd3b 	bl	80123b8 <siprintf>
 8002942:	f8c7 0524 	str.w	r0, [r7, #1316]	; 0x524
 8002946:	e049      	b.n	80029dc <main+0x6f0>
 8002948:	200001b8 	.word	0x200001b8
 800294c:	080165a0 	.word	0x080165a0
 8002950:	2000413c 	.word	0x2000413c
 8002954:	20003ccd 	.word	0x20003ccd
 8002958:	080165c4 	.word	0x080165c4
 800295c:	20003fe8 	.word	0x20003fe8
 8002960:	080174fc 	.word	0x080174fc
 8002964:	20003ce8 	.word	0x20003ce8
 8002968:	20001468 	.word	0x20001468
 800296c:	200001c0 	.word	0x200001c0
 8002970:	20003ce0 	.word	0x20003ce0
 8002974:	20003cde 	.word	0x20003cde
 8002978:	200001cb 	.word	0x200001cb
 800297c:	20003ce2 	.word	0x20003ce2
 8002980:	20003ce4 	.word	0x20003ce4
 8002984:	20003cdc 	.word	0x20003cdc
 8002988:	080168a0 	.word	0x080168a0
 800298c:	20003cd0 	.word	0x20003cd0
 8002990:	20000004 	.word	0x20000004
 8002994:	080165dc 	.word	0x080165dc
 8002998:	20000fe8 	.word	0x20000fe8
 800299c:	080165e4 	.word	0x080165e4
 80029a0:	200001c8 	.word	0x200001c8
 80029a4:	200001d4 	.word	0x200001d4
 80029a8:	080165f8 	.word	0x080165f8
 80029ac:	08016604 	.word	0x08016604
 80029b0:	08016614 	.word	0x08016614
    	else
    		il = sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 80029b4:	4baf      	ldr	r3, [pc, #700]	; (8002c74 <main+0x988>)
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	461c      	mov	r4, r3
 80029ba:	4baf      	ldr	r3, [pc, #700]	; (8002c78 <main+0x98c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fd fdc2 	bl	8000548 <__aeabi_f2d>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	f507 6092 	add.w	r0, r7, #1168	; 0x490
 80029cc:	e9cd 2300 	strd	r2, r3, [sp]
 80029d0:	4622      	mov	r2, r4
 80029d2:	49aa      	ldr	r1, [pc, #680]	; (8002c7c <main+0x990>)
 80029d4:	f00f fcf0 	bl	80123b8 <siprintf>
 80029d8:	f8c7 0524 	str.w	r0, [r7, #1316]	; 0x524
    	int lil = il;
 80029dc:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80029e0:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * il)) >> 1) & 0x7f;
 80029e4:	f897 34d0 	ldrb.w	r3, [r7, #1232]	; 0x4d0
 80029e8:	461a      	mov	r2, r3
 80029ea:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80029ee:	fb02 f303 	mul.w	r3, r2, r3
 80029f2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80029f6:	105b      	asrs	r3, r3, #1
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029fe:	f8a7 3522 	strh.w	r3, [r7, #1314]	; 0x522
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8002a02:	f8b7 3522 	ldrh.w	r3, [r7, #1314]	; 0x522
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <main+0x726>
 8002a0a:	f8b7 3522 	ldrh.w	r3, [r7, #1314]	; 0x522
 8002a0e:	2b7d      	cmp	r3, #125	; 0x7d
 8002a10:	d902      	bls.n	8002a18 <main+0x72c>
 8002a12:	2301      	movs	r3, #1
 8002a14:	f8a7 3522 	strh.w	r3, [r7, #1314]	; 0x522
    	ST7565_Print(xf, lin5, st, &Font_6x8, 1, PIX_ON);
 8002a18:	f9b7 0522 	ldrsh.w	r0, [r7, #1314]	; 0x522
 8002a1c:	f9b7 14f6 	ldrsh.w	r1, [r7, #1270]	; 0x4f6
 8002a20:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8002a24:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8002a28:	2401      	movs	r4, #1
 8002a2a:	9401      	str	r4, [sp, #4]
 8002a2c:	2401      	movs	r4, #1
 8002a2e:	9400      	str	r4, [sp, #0]
 8002a30:	f7fe fe9c 	bl	800176c <ST7565_Print>

    	int ia = sprintf(sta, "%s", nameStation(Freq));
 8002a34:	4b90      	ldr	r3, [pc, #576]	; (8002c78 <main+0x98c>)
 8002a36:	edd3 7a00 	vldr	s15, [r3]
 8002a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a3e:	f001 fa67 	bl	8003f10 <nameStation>
 8002a42:	4602      	mov	r2, r0
 8002a44:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8002a48:	498d      	ldr	r1, [pc, #564]	; (8002c80 <main+0x994>)
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f00f fcb4 	bl	80123b8 <siprintf>
 8002a50:	f8c7 04e4 	str.w	r0, [r7, #1252]	; 0x4e4
    	int lia = ia;
 8002a54:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8002a58:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
    	xf = ((SCREEN_WIDTH - (Font_6x8.FontWidth * ia)) >> 1) & 0x7f;
 8002a5c:	f897 34d0 	ldrb.w	r3, [r7, #1232]	; 0x4d0
 8002a60:	461a      	mov	r2, r3
 8002a62:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002a6e:	105b      	asrs	r3, r3, #1
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a76:	f8a7 3522 	strh.w	r3, [r7, #1314]	; 0x522
    	if ((!xf) || (xf > (SCREEN_WIDTH - 3))) xf = 1;
 8002a7a:	f8b7 3522 	ldrh.w	r3, [r7, #1314]	; 0x522
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <main+0x79e>
 8002a82:	f8b7 3522 	ldrh.w	r3, [r7, #1314]	; 0x522
 8002a86:	2b7d      	cmp	r3, #125	; 0x7d
 8002a88:	d902      	bls.n	8002a90 <main+0x7a4>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	f8a7 3522 	strh.w	r3, [r7, #1314]	; 0x522
    	ST7565_Print(xf, lin6, sta, &Font_6x8, 1, PIX_ON);
 8002a90:	f9b7 0522 	ldrsh.w	r0, [r7, #1314]	; 0x522
 8002a94:	f9b7 14f4 	ldrsh.w	r1, [r7, #1268]	; 0x4f4
 8002a98:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8002a9c:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8002aa0:	2401      	movs	r4, #1
 8002aa2:	9401      	str	r4, [sp, #4]
 8002aa4:	2401      	movs	r4, #1
 8002aa6:	9400      	str	r4, [sp, #0]
 8002aa8:	f7fe fe60 	bl	800176c <ST7565_Print>

    	Report(1, "ChipID:0x%x Chan:%u Freq:%.2f %s RSSI:%u Band:%s Vol:%u BassEn:%u\r\n",
 8002aac:	4b75      	ldr	r3, [pc, #468]	; (8002c84 <main+0x998>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	461e      	mov	r6, r3
 8002ab2:	4b75      	ldr	r3, [pc, #468]	; (8002c88 <main+0x99c>)
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	4698      	mov	r8, r3
 8002ab8:	4b6f      	ldr	r3, [pc, #444]	; (8002c78 <main+0x98c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fd fd43 	bl	8000548 <__aeabi_f2d>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	496b      	ldr	r1, [pc, #428]	; (8002c74 <main+0x988>)
 8002ac8:	8809      	ldrh	r1, [r1, #0]
 8002aca:	460c      	mov	r4, r1
 8002acc:	496f      	ldr	r1, [pc, #444]	; (8002c8c <main+0x9a0>)
 8002ace:	7809      	ldrb	r1, [r1, #0]
 8002ad0:	4608      	mov	r0, r1
 8002ad2:	496f      	ldr	r1, [pc, #444]	; (8002c90 <main+0x9a4>)
 8002ad4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002ad8:	486e      	ldr	r0, [pc, #440]	; (8002c94 <main+0x9a8>)
 8002ada:	7800      	ldrb	r0, [r0, #0]
 8002adc:	4605      	mov	r5, r0
 8002ade:	486e      	ldr	r0, [pc, #440]	; (8002c98 <main+0x9ac>)
 8002ae0:	7800      	ldrb	r0, [r0, #0]
 8002ae2:	9006      	str	r0, [sp, #24]
 8002ae4:	9505      	str	r5, [sp, #20]
 8002ae6:	9104      	str	r1, [sp, #16]
 8002ae8:	9403      	str	r4, [sp, #12]
 8002aea:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8002aee:	9102      	str	r1, [sp, #8]
 8002af0:	e9cd 2300 	strd	r2, r3, [sp]
 8002af4:	4643      	mov	r3, r8
 8002af6:	4632      	mov	r2, r6
 8002af8:	4968      	ldr	r1, [pc, #416]	; (8002c9c <main+0x9b0>)
 8002afa:	2001      	movs	r0, #1
 8002afc:	f001 fc44 	bl	8004388 <Report>
    			rdaID, Chan, Freq, sta, RSSI, allBands[Band], Volume, BassBoost);
	#endif

    ST7565_DrawRectangle(0, Font_6x8.FontHeight, SCREEN_WIDTH - 1, SCREEN_HEIGHT - (Font_6x8.FontHeight << 1) - 2, PIX_ON);
 8002b00:	f897 34d1 	ldrb.w	r3, [r7, #1233]	; 0x4d1
 8002b04:	b219      	sxth	r1, r3
 8002b06:	f897 34d1 	ldrb.w	r3, [r7, #1233]	; 0x4d1
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	b21b      	sxth	r3, r3
 8002b18:	2201      	movs	r2, #1
 8002b1a:	9200      	str	r2, [sp, #0]
 8002b1c:	227f      	movs	r2, #127	; 0x7f
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f7fe fffb 	bl	8001b1a <ST7565_DrawRectangle>
    ST7565_DrawFilledRectangle(0, 0, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_ON);
 8002b24:	f897 34d1 	ldrb.w	r3, [r7, #1233]	; 0x4d1
 8002b28:	b21b      	sxth	r3, r3
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	9200      	str	r2, [sp, #0]
 8002b2e:	227f      	movs	r2, #127	; 0x7f
 8002b30:	2100      	movs	r1, #0
 8002b32:	2000      	movs	r0, #0
 8002b34:	f7ff f873 	bl	8001c1e <ST7565_DrawFilledRectangle>
    ST7565_Update();
 8002b38:	f7fe fc68 	bl	800140c <ST7565_Update>

    startSec = true;
 8002b3c:	4b58      	ldr	r3, [pc, #352]	; (8002ca0 <main+0x9b4>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	701a      	strb	r2, [r3, #0]

#endif

    uint16_t lastErr = devOK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	f8a7 3520 	strh.w	r3, [r7, #1312]	; 0x520

    putEvt(evt_Freq);
 8002b48:	200c      	movs	r0, #12
 8002b4a:	f001 f92f 	bl	8003dac <putEvt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


    while (!restart) {
 8002b4e:	f000 bd20 	b.w	8003592 <main+0x12a6>


#ifdef SET_FIFO_MODE
    	evt = getEvt();
 8002b52:	f001 f99d 	bl	8003e90 <getEvt>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4a52      	ldr	r2, [pc, #328]	; (8002ca4 <main+0x9b8>)
 8002b5a:	6013      	str	r3, [r2, #0]
    	if (evt != evt_None) {
 8002b5c:	4b51      	ldr	r3, [pc, #324]	; (8002ca4 <main+0x9b8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b64:	f000 84fd 	beq.w	8003562 <main+0x1276>
    		cntEvt = getEvtCount();
 8002b68:	f001 f914 	bl	8003d94 <getEvtCount>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	461a      	mov	r2, r3
 8002b70:	4b4d      	ldr	r3, [pc, #308]	; (8002ca8 <main+0x9bc>)
 8002b72:	701a      	strb	r2, [r3, #0]
    		if (evt != evt_Sec) {
 8002b74:	4b4b      	ldr	r3, [pc, #300]	; (8002ca4 <main+0x9b8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d050      	beq.n	8002c1e <main+0x932>
    			Report(1, "[que:%u] get event '%s'\r\n", cntEvt, str_cmds[evt]);
 8002b7c:	4b4a      	ldr	r3, [pc, #296]	; (8002ca8 <main+0x9bc>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	4619      	mov	r1, r3
 8002b84:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <main+0x9b8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a48      	ldr	r2, [pc, #288]	; (8002cac <main+0x9c0>)
 8002b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b8e:	460a      	mov	r2, r1
 8002b90:	4947      	ldr	r1, [pc, #284]	; (8002cb0 <main+0x9c4>)
 8002b92:	2001      	movs	r0, #1
 8002b94:	f001 fbf8 	bl	8004388 <Report>
#ifdef SET_DISPLAY
    			ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - Font_6x8.FontHeight, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_OFF);
 8002b98:	f897 34d1 	ldrb.w	r3, [r7, #1233]	; 0x4d1
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	b219      	sxth	r1, r3
 8002ba6:	f897 34d1 	ldrb.w	r3, [r7, #1233]	; 0x4d1
 8002baa:	b21b      	sxth	r3, r3
 8002bac:	2200      	movs	r2, #0
 8002bae:	9200      	str	r2, [sp, #0]
 8002bb0:	227f      	movs	r2, #127	; 0x7f
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f7ff f833 	bl	8001c1e <ST7565_DrawFilledRectangle>
    			dl = sprintf(tmp, "evt(%u) : %s", cntEvt, str_cmds[evt]);
 8002bb8:	4b3b      	ldr	r3, [pc, #236]	; (8002ca8 <main+0x9bc>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4b38      	ldr	r3, [pc, #224]	; (8002ca4 <main+0x9b8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a39      	ldr	r2, [pc, #228]	; (8002cac <main+0x9c0>)
 8002bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bca:	460a      	mov	r2, r1
 8002bcc:	4939      	ldr	r1, [pc, #228]	; (8002cb4 <main+0x9c8>)
 8002bce:	483a      	ldr	r0, [pc, #232]	; (8002cb8 <main+0x9cc>)
 8002bd0:	f00f fbf2 	bl	80123b8 <siprintf>
 8002bd4:	f8c7 0528 	str.w	r0, [r7, #1320]	; 0x528
    			x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 8002bd8:	f897 34d0 	ldrb.w	r3, [r7, #1232]	; 0x4d0
 8002bdc:	461a      	mov	r2, r3
 8002bde:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8002be2:	fb02 f303 	mul.w	r3, r2, r3
 8002be6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002bea:	105b      	asrs	r3, r3, #1
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bf2:	f8a7 34f2 	strh.w	r3, [r7, #1266]	; 0x4f2
    			ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);//печатаем надпись с указаным шрифтом и цветом(PIX_ON-белый, PIX_OFF-черный)
 8002bf6:	f9b7 04f2 	ldrsh.w	r0, [r7, #1266]	; 0x4f2
 8002bfa:	f897 34d1 	ldrb.w	r3, [r7, #1233]	; 0x4d1
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	b219      	sxth	r1, r3
 8002c08:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	9201      	str	r2, [sp, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	9200      	str	r2, [sp, #0]
 8002c14:	4a28      	ldr	r2, [pc, #160]	; (8002cb8 <main+0x9cc>)
 8002c16:	f7fe fda9 	bl	800176c <ST7565_Print>
    			ST7565_Update();
 8002c1a:	f7fe fbf7 	bl	800140c <ST7565_Update>
#endif
    		}
    		switch (evt) {
 8002c1e:	4b21      	ldr	r3, [pc, #132]	; (8002ca4 <main+0x9b8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b10      	cmp	r3, #16
 8002c24:	f200 848d 	bhi.w	8003542 <main+0x1256>
 8002c28:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <main+0x944>)
 8002c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2e:	bf00      	nop
 8002c30:	0800327f 	.word	0x0800327f
 8002c34:	080032cd 	.word	0x080032cd
 8002c38:	08003341 	.word	0x08003341
 8002c3c:	08003361 	.word	0x08003361
 8002c40:	08003373 	.word	0x08003373
 8002c44:	08003517 	.word	0x08003517
 8002c48:	08003373 	.word	0x08003373
 8002c4c:	08003495 	.word	0x08003495
 8002c50:	08003025 	.word	0x08003025
 8002c54:	08003015 	.word	0x08003015
 8002c58:	08003267 	.word	0x08003267
 8002c5c:	08002ff5 	.word	0x08002ff5
 8002c60:	08002e3f 	.word	0x08002e3f
 8002c64:	08002de3 	.word	0x08002de3
 8002c68:	08002d87 	.word	0x08002d87
 8002c6c:	08002d67 	.word	0x08002d67
 8002c70:	08002cbd 	.word	0x08002cbd
 8002c74:	20003cde 	.word	0x20003cde
 8002c78:	200001c0 	.word	0x200001c0
 8002c7c:	08016628 	.word	0x08016628
 8002c80:	0801663c 	.word	0x0801663c
 8002c84:	20003ce0 	.word	0x20003ce0
 8002c88:	20003cdc 	.word	0x20003cdc
 8002c8c:	200001c8 	.word	0x200001c8
 8002c90:	200001d4 	.word	0x200001d4
 8002c94:	200001cb 	.word	0x200001cb
 8002c98:	20003ce2 	.word	0x20003ce2
 8002c9c:	08016640 	.word	0x08016640
 8002ca0:	20003cce 	.word	0x20003cce
 8002ca4:	200001a4 	.word	0x200001a4
 8002ca8:	20001884 	.word	0x20001884
 8002cac:	20000060 	.word	0x20000060
 8002cb0:	08016684 	.word	0x08016684
 8002cb4:	080166a0 	.word	0x080166a0
 8002cb8:	20000fe8 	.word	0x20000fe8
    			case evt_Band:
    				Band = newBand;
 8002cbc:	4bb4      	ldr	r3, [pc, #720]	; (8002f90 <main+0xca4>)
 8002cbe:	781a      	ldrb	r2, [r3, #0]
 8002cc0:	4bb4      	ldr	r3, [pc, #720]	; (8002f94 <main+0xca8>)
 8002cc2:	701a      	strb	r2, [r3, #0]
    				if (!rda5807_Set_Band(Band)) {
 8002cc4:	4bb3      	ldr	r3, [pc, #716]	; (8002f94 <main+0xca8>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f002 fb0b 	bl	80052e4 <rda5807_Set_Band>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f040 842d 	bne.w	8003530 <main+0x1244>
    					sprintf(stb, "FM Band:%s", allBands[Band]);//(uint16_t)lBand, (uint16_t)rBand);
 8002cd6:	4baf      	ldr	r3, [pc, #700]	; (8002f94 <main+0xca8>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	4bae      	ldr	r3, [pc, #696]	; (8002f98 <main+0xcac>)
 8002cde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002ce2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002ce6:	49ad      	ldr	r1, [pc, #692]	; (8002f9c <main+0xcb0>)
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f00f fb65 	bl	80123b8 <siprintf>
    					showLine(stb, lin3, &lit, true);
 8002cee:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8002cf2:	f8b7 14fa 	ldrh.w	r1, [r7, #1274]	; 0x4fa
 8002cf6:	f507 608a 	add.w	r0, r7, #1104	; 0x450
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f001 f9b6 	bl	800406c <showLine>
    					Report(1, "[que:%u] set new band=%u '%s'\r\n", cntEvt, Band, allBands[Band]);
 8002d00:	4ba7      	ldr	r3, [pc, #668]	; (8002fa0 <main+0xcb4>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	4619      	mov	r1, r3
 8002d08:	4ba2      	ldr	r3, [pc, #648]	; (8002f94 <main+0xca8>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	4ba1      	ldr	r3, [pc, #644]	; (8002f94 <main+0xca8>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	461a      	mov	r2, r3
 8002d14:	4ba0      	ldr	r3, [pc, #640]	; (8002f98 <main+0xcac>)
 8002d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	460a      	mov	r2, r1
 8002d20:	49a0      	ldr	r1, [pc, #640]	; (8002fa4 <main+0xcb8>)
 8002d22:	2001      	movs	r0, #1
 8002d24:	f001 fb30 	bl	8004388 <Report>
    					if ((Freq < lBand) || (Freq > rBand)) {
 8002d28:	4b9f      	ldr	r3, [pc, #636]	; (8002fa8 <main+0xcbc>)
 8002d2a:	ed93 7a00 	vldr	s14, [r3]
 8002d2e:	4b9f      	ldr	r3, [pc, #636]	; (8002fac <main+0xcc0>)
 8002d30:	edd3 7a00 	vldr	s15, [r3]
 8002d34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d3c:	d40b      	bmi.n	8002d56 <main+0xa6a>
 8002d3e:	4b9a      	ldr	r3, [pc, #616]	; (8002fa8 <main+0xcbc>)
 8002d40:	ed93 7a00 	vldr	s14, [r3]
 8002d44:	4b9a      	ldr	r3, [pc, #616]	; (8002fb0 <main+0xcc4>)
 8002d46:	edd3 7a00 	vldr	s15, [r3]
 8002d4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d52:	dc00      	bgt.n	8002d56 <main+0xa6a>
    						newFreq = lBand;
    						putEvt(evt_Freq);
    					}
    				}
    			break;
 8002d54:	e3ec      	b.n	8003530 <main+0x1244>
    						newFreq = lBand;
 8002d56:	4b95      	ldr	r3, [pc, #596]	; (8002fac <main+0xcc0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a96      	ldr	r2, [pc, #600]	; (8002fb4 <main+0xcc8>)
 8002d5c:	6013      	str	r3, [r2, #0]
    						putEvt(evt_Freq);
 8002d5e:	200c      	movs	r0, #12
 8002d60:	f001 f824 	bl	8003dac <putEvt>
    			break;
 8002d64:	e3e4      	b.n	8003530 <main+0x1244>
    			case evt_List:
    				newFreq = getNextList(Freq);
 8002d66:	4b90      	ldr	r3, [pc, #576]	; (8002fa8 <main+0xcbc>)
 8002d68:	edd3 7a00 	vldr	s15, [r3]
 8002d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d70:	f001 f90c 	bl	8003f8c <getNextList>
 8002d74:	eef0 7a40 	vmov.f32	s15, s0
 8002d78:	4b8e      	ldr	r3, [pc, #568]	; (8002fb4 <main+0xcc8>)
 8002d7a:	edc3 7a00 	vstr	s15, [r3]
    				putEvt(evt_Freq);
 8002d7e:	200c      	movs	r0, #12
 8002d80:	f001 f814 	bl	8003dac <putEvt>
    			break;
 8002d84:	e3dd      	b.n	8003542 <main+0x1256>
    			case evt_Bass:
    				if (newBassBoost != BassBoost) {
 8002d86:	4b8c      	ldr	r3, [pc, #560]	; (8002fb8 <main+0xccc>)
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	4b8c      	ldr	r3, [pc, #560]	; (8002fbc <main+0xcd0>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	f000 83d0 	beq.w	8003534 <main+0x1248>
    					BassBoost = newBassBoost;
 8002d94:	4b88      	ldr	r3, [pc, #544]	; (8002fb8 <main+0xccc>)
 8002d96:	781a      	ldrb	r2, [r3, #0]
 8002d98:	4b88      	ldr	r3, [pc, #544]	; (8002fbc <main+0xcd0>)
 8002d9a:	701a      	strb	r2, [r3, #0]
    					rda5807_SetBassBoost(BassBoost);
 8002d9c:	4b87      	ldr	r3, [pc, #540]	; (8002fbc <main+0xcd0>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f002 f95f 	bl	8005064 <rda5807_SetBassBoost>
    					//
    					sprintf(st, "Vol:%u Bass:%u", Volume, BassBoost);
 8002da6:	4b86      	ldr	r3, [pc, #536]	; (8002fc0 <main+0xcd4>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	4b83      	ldr	r3, [pc, #524]	; (8002fbc <main+0xcd0>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	f507 6092 	add.w	r0, r7, #1168	; 0x490
 8002db4:	4983      	ldr	r1, [pc, #524]	; (8002fc4 <main+0xcd8>)
 8002db6:	f00f faff 	bl	80123b8 <siprintf>
    					showLine(st, lin4, &lim, true);
 8002dba:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8002dbe:	f8b7 14f8 	ldrh.w	r1, [r7, #1272]	; 0x4f8
 8002dc2:	f507 6092 	add.w	r0, r7, #1168	; 0x490
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	f001 f950 	bl	800406c <showLine>
    					Report(1, "[que:%u] set new BassBoost to %u\r\n", cntEvt, BassBoost);
 8002dcc:	4b74      	ldr	r3, [pc, #464]	; (8002fa0 <main+0xcb4>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4b79      	ldr	r3, [pc, #484]	; (8002fbc <main+0xcd0>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	497b      	ldr	r1, [pc, #492]	; (8002fc8 <main+0xcdc>)
 8002dda:	2001      	movs	r0, #1
 8002ddc:	f001 fad4 	bl	8004388 <Report>
    				}
    			break;
 8002de0:	e3a8      	b.n	8003534 <main+0x1248>
    			case evt_Vol:
    				if (newVolume != Volume) {
 8002de2:	4b7a      	ldr	r3, [pc, #488]	; (8002fcc <main+0xce0>)
 8002de4:	781a      	ldrb	r2, [r3, #0]
 8002de6:	4b76      	ldr	r3, [pc, #472]	; (8002fc0 <main+0xcd4>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	f000 83a4 	beq.w	8003538 <main+0x124c>
    					Volume = newVolume;
 8002df0:	4b76      	ldr	r3, [pc, #472]	; (8002fcc <main+0xce0>)
 8002df2:	781a      	ldrb	r2, [r3, #0]
 8002df4:	4b72      	ldr	r3, [pc, #456]	; (8002fc0 <main+0xcd4>)
 8002df6:	701a      	strb	r2, [r3, #0]
    					rda5807_SetVolume(Volume);
 8002df8:	4b71      	ldr	r3, [pc, #452]	; (8002fc0 <main+0xcd4>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f002 f8e9 	bl	8004fd4 <rda5807_SetVolume>
    					//
    					sprintf(st, "Vol:%u BassEn:%u", Volume, BassBoost);
 8002e02:	4b6f      	ldr	r3, [pc, #444]	; (8002fc0 <main+0xcd4>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	4b6c      	ldr	r3, [pc, #432]	; (8002fbc <main+0xcd0>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	f507 6092 	add.w	r0, r7, #1168	; 0x490
 8002e10:	496f      	ldr	r1, [pc, #444]	; (8002fd0 <main+0xce4>)
 8002e12:	f00f fad1 	bl	80123b8 <siprintf>
    					showLine(st, lin4, &lim, true);
 8002e16:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8002e1a:	f8b7 14f8 	ldrh.w	r1, [r7, #1272]	; 0x4f8
 8002e1e:	f507 6092 	add.w	r0, r7, #1168	; 0x490
 8002e22:	2301      	movs	r3, #1
 8002e24:	f001 f922 	bl	800406c <showLine>
    					Report(1, "[que:%u] set new Volume to %u\r\n", cntEvt, Volume);
 8002e28:	4b5d      	ldr	r3, [pc, #372]	; (8002fa0 <main+0xcb4>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4b63      	ldr	r3, [pc, #396]	; (8002fc0 <main+0xcd4>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	4967      	ldr	r1, [pc, #412]	; (8002fd4 <main+0xce8>)
 8002e36:	2001      	movs	r0, #1
 8002e38:	f001 faa6 	bl	8004388 <Report>
    				}
    			break;
 8002e3c:	e37c      	b.n	8003538 <main+0x124c>
    			case evt_Freq:
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 8002e3e:	4b5d      	ldr	r3, [pc, #372]	; (8002fb4 <main+0xcc8>)
 8002e40:	ed93 7a00 	vldr	s14, [r3]
 8002e44:	4b59      	ldr	r3, [pc, #356]	; (8002fac <main+0xcc0>)
 8002e46:	edd3 7a00 	vldr	s15, [r3]
 8002e4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e52:	da00      	bge.n	8002e56 <main+0xb6a>
    						sprintf(sta, "%s", nameStation(Freq));
    						showLine(sta, lin6, &lia, true);
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
    					}
    				}
				break;
 8002e54:	e372      	b.n	800353c <main+0x1250>
    				if ((newFreq >= lBand) && (newFreq <= rBand)) {
 8002e56:	4b57      	ldr	r3, [pc, #348]	; (8002fb4 <main+0xcc8>)
 8002e58:	ed93 7a00 	vldr	s14, [r3]
 8002e5c:	4b54      	ldr	r3, [pc, #336]	; (8002fb0 <main+0xcc4>)
 8002e5e:	edd3 7a00 	vldr	s15, [r3]
 8002e62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6a:	d900      	bls.n	8002e6e <main+0xb82>
				break;
 8002e6c:	e366      	b.n	800353c <main+0x1250>
    					if (newFreq != Freq) {
 8002e6e:	4b51      	ldr	r3, [pc, #324]	; (8002fb4 <main+0xcc8>)
 8002e70:	ed93 7a00 	vldr	s14, [r3]
 8002e74:	4b4c      	ldr	r3, [pc, #304]	; (8002fa8 <main+0xcbc>)
 8002e76:	edd3 7a00 	vldr	s15, [r3]
 8002e7a:	eeb4 7a67 	vcmp.f32	s14, s15
 8002e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e82:	f000 835b 	beq.w	800353c <main+0x1250>
    						Freq = newFreq;
 8002e86:	4b4b      	ldr	r3, [pc, #300]	; (8002fb4 <main+0xcc8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a47      	ldr	r2, [pc, #284]	; (8002fa8 <main+0xcbc>)
 8002e8c:	6013      	str	r3, [r2, #0]
    						uint16_t fr = (uint16_t)(Freq * 10);
 8002e8e:	4b46      	ldr	r3, [pc, #280]	; (8002fa8 <main+0xcbc>)
 8002e90:	edd3 7a00 	vldr	s15, [r3]
 8002e94:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ea0:	ee17 3a90 	vmov	r3, s15
 8002ea4:	f8a7 34e2 	strh.w	r3, [r7, #1250]	; 0x4e2
    						rda5807_SetFreq_In100Khz(fr);
 8002ea8:	f8b7 34e2 	ldrh.w	r3, [r7, #1250]	; 0x4e2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f002 f8f9 	bl	80050a4 <rda5807_SetFreq_In100Khz>
    						stereo = rda5807_Get_StereoMonoFlag();
 8002eb2:	f002 f9ed 	bl	8005290 <rda5807_Get_StereoMonoFlag>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4b47      	ldr	r3, [pc, #284]	; (8002fd8 <main+0xcec>)
 8002ebc:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 8002ebe:	f002 f9ff 	bl	80052c0 <rda5807_Get_Channel>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4b45      	ldr	r3, [pc, #276]	; (8002fdc <main+0xcf0>)
 8002ec8:	801a      	strh	r2, [r3, #0]
    						if (stereo)
 8002eca:	4b43      	ldr	r3, [pc, #268]	; (8002fd8 <main+0xcec>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d012      	beq.n	8002ef8 <main+0xc0c>
    							sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 8002ed2:	4b43      	ldr	r3, [pc, #268]	; (8002fe0 <main+0xcf4>)
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	461c      	mov	r4, r3
 8002ed8:	4b33      	ldr	r3, [pc, #204]	; (8002fa8 <main+0xcbc>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fd fb33 	bl	8000548 <__aeabi_f2d>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	f507 6092 	add.w	r0, r7, #1168	; 0x490
 8002eea:	e9cd 2300 	strd	r2, r3, [sp]
 8002eee:	4622      	mov	r2, r4
 8002ef0:	493c      	ldr	r1, [pc, #240]	; (8002fe4 <main+0xcf8>)
 8002ef2:	f00f fa61 	bl	80123b8 <siprintf>
 8002ef6:	e011      	b.n	8002f1c <main+0xc30>
    							sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8002ef8:	4b39      	ldr	r3, [pc, #228]	; (8002fe0 <main+0xcf4>)
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	461c      	mov	r4, r3
 8002efe:	4b2a      	ldr	r3, [pc, #168]	; (8002fa8 <main+0xcbc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fd fb20 	bl	8000548 <__aeabi_f2d>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	f507 6092 	add.w	r0, r7, #1168	; 0x490
 8002f10:	e9cd 2300 	strd	r2, r3, [sp]
 8002f14:	4622      	mov	r2, r4
 8002f16:	4934      	ldr	r1, [pc, #208]	; (8002fe8 <main+0xcfc>)
 8002f18:	f00f fa4e 	bl	80123b8 <siprintf>
    						showLine(st, lin5, &lil, false);
 8002f1c:	f207 4244 	addw	r2, r7, #1092	; 0x444
 8002f20:	f8b7 14f6 	ldrh.w	r1, [r7, #1270]	; 0x4f6
 8002f24:	f507 6092 	add.w	r0, r7, #1168	; 0x490
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f001 f89f 	bl	800406c <showLine>
    						sprintf(sta, "%s", nameStation(Freq));
 8002f2e:	4b1e      	ldr	r3, [pc, #120]	; (8002fa8 <main+0xcbc>)
 8002f30:	edd3 7a00 	vldr	s15, [r3]
 8002f34:	eeb0 0a67 	vmov.f32	s0, s15
 8002f38:	f000 ffea 	bl	8003f10 <nameStation>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8002f42:	492a      	ldr	r1, [pc, #168]	; (8002fec <main+0xd00>)
 8002f44:	4618      	mov	r0, r3
 8002f46:	f00f fa37 	bl	80123b8 <siprintf>
    						showLine(sta, lin6, &lia, true);
 8002f4a:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8002f4e:	f8b7 14f4 	ldrh.w	r1, [r7, #1268]	; 0x4f4
 8002f52:	f507 608e 	add.w	r0, r7, #1136	; 0x470
 8002f56:	2301      	movs	r3, #1
 8002f58:	f001 f888 	bl	800406c <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 8002f5c:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <main+0xcb4>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	461c      	mov	r4, r3
 8002f64:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <main+0xcbc>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fd faed 	bl	8000548 <__aeabi_f2d>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	491a      	ldr	r1, [pc, #104]	; (8002fdc <main+0xcf0>)
 8002f74:	8809      	ldrh	r1, [r1, #0]
 8002f76:	9103      	str	r1, [sp, #12]
 8002f78:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8002f7c:	9102      	str	r1, [sp, #8]
 8002f7e:	e9cd 2300 	strd	r2, r3, [sp]
 8002f82:	4622      	mov	r2, r4
 8002f84:	491a      	ldr	r1, [pc, #104]	; (8002ff0 <main+0xd04>)
 8002f86:	2001      	movs	r0, #1
 8002f88:	f001 f9fe 	bl	8004388 <Report>
				break;
 8002f8c:	e2d6      	b.n	800353c <main+0x1250>
 8002f8e:	bf00      	nop
 8002f90:	200001c9 	.word	0x200001c9
 8002f94:	200001c8 	.word	0x200001c8
 8002f98:	200001d4 	.word	0x200001d4
 8002f9c:	080165f8 	.word	0x080165f8
 8002fa0:	20001884 	.word	0x20001884
 8002fa4:	080166b0 	.word	0x080166b0
 8002fa8:	200001c0 	.word	0x200001c0
 8002fac:	20003cd4 	.word	0x20003cd4
 8002fb0:	20003cd8 	.word	0x20003cd8
 8002fb4:	200001c4 	.word	0x200001c4
 8002fb8:	20003ce3 	.word	0x20003ce3
 8002fbc:	20003ce2 	.word	0x20003ce2
 8002fc0:	200001cb 	.word	0x200001cb
 8002fc4:	08016604 	.word	0x08016604
 8002fc8:	080166d0 	.word	0x080166d0
 8002fcc:	200001cc 	.word	0x200001cc
 8002fd0:	080166f4 	.word	0x080166f4
 8002fd4:	08016708 	.word	0x08016708
 8002fd8:	20003ce4 	.word	0x20003ce4
 8002fdc:	20003cdc 	.word	0x20003cdc
 8002fe0:	20003cde 	.word	0x20003cde
 8002fe4:	08016614 	.word	0x08016614
 8002fe8:	08016628 	.word	0x08016628
 8002fec:	0801663c 	.word	0x0801663c
 8002ff0:	08016728 	.word	0x08016728
    			case evt_Scan:
    				if (!scan) {
 8002ff4:	4bbb      	ldr	r3, [pc, #748]	; (80032e4 <main+0xff8>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f040 82a0 	bne.w	8003540 <main+0x1254>
    					scan = 1;
 8003000:	4bb8      	ldr	r3, [pc, #736]	; (80032e4 <main+0xff8>)
 8003002:	2201      	movs	r2, #1
 8003004:	701a      	strb	r2, [r3, #0]
    					rda5807_StartSeek(seek_up);
 8003006:	4bb8      	ldr	r3, [pc, #736]	; (80032e8 <main+0xffc>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	4618      	mov	r0, r3
 800300e:	f002 f903 	bl	8005218 <rda5807_StartSeek>
    				}
    			break;
 8003012:	e295      	b.n	8003540 <main+0x1254>
    			case evt_Ver:
    				Report(1, "Ver.%s\r\n", ver);
 8003014:	4bb5      	ldr	r3, [pc, #724]	; (80032ec <main+0x1000>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	49b5      	ldr	r1, [pc, #724]	; (80032f0 <main+0x1004>)
 800301c:	2001      	movs	r0, #1
 800301e:	f001 f9b3 	bl	8004388 <Report>
    			break;
 8003022:	e28e      	b.n	8003542 <main+0x1256>
    			case evt_Sec:
    			{
#ifdef SET_DISPLAY
    				dl = sec2str(st);
 8003024:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003028:	4618      	mov	r0, r3
 800302a:	f001 f913 	bl	8004254 <sec2str>
 800302e:	f8c7 0528 	str.w	r0, [r7, #1320]	; 0x528
    				x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 8003032:	f897 34d0 	ldrb.w	r3, [r7, #1232]	; 0x4d0
 8003036:	461a      	mov	r2, r3
 8003038:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 800303c:	fb02 f303 	mul.w	r3, r2, r3
 8003040:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003044:	105b      	asrs	r3, r3, #1
 8003046:	b29b      	uxth	r3, r3
 8003048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800304c:	f8a7 34f2 	strh.w	r3, [r7, #1266]	; 0x4f2
    				ST7565_Print(x, lin1, st, &Font_6x8, 0, PIX_OFF);
 8003050:	f9b7 04f2 	ldrsh.w	r0, [r7, #1266]	; 0x4f2
 8003054:	f9b7 14fe 	ldrsh.w	r1, [r7, #1278]	; 0x4fe
 8003058:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800305c:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8003060:	2400      	movs	r4, #0
 8003062:	9401      	str	r4, [sp, #4]
 8003064:	2400      	movs	r4, #0
 8003066:	9400      	str	r4, [sp, #0]
 8003068:	f7fe fb80 	bl	800176c <ST7565_Print>
#endif
    				//
    				if (scan) {
 800306c:	4b9d      	ldr	r3, [pc, #628]	; (80032e4 <main+0xff8>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d050      	beq.n	8003118 <main+0xe2c>
    					if (rda5807_Get_SeekTuneReadyFlag()) {//RadioNewState(Idle, 10);
 8003076:	f002 f8f9 	bl	800526c <rda5807_Get_SeekTuneReadyFlag>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d04b      	beq.n	8003118 <main+0xe2c>
    						Freq = (float)rda5807_GetFreq_In100Khz();
 8003080:	f002 f88a 	bl	8005198 <rda5807_GetFreq_In100Khz>
 8003084:	4603      	mov	r3, r0
 8003086:	ee07 3a90 	vmov	s15, r3
 800308a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800308e:	4b99      	ldr	r3, [pc, #612]	; (80032f4 <main+0x1008>)
 8003090:	edc3 7a00 	vstr	s15, [r3]
    						Freq /= 10;
 8003094:	4b97      	ldr	r3, [pc, #604]	; (80032f4 <main+0x1008>)
 8003096:	ed93 7a00 	vldr	s14, [r3]
 800309a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800309e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030a2:	4b94      	ldr	r3, [pc, #592]	; (80032f4 <main+0x1008>)
 80030a4:	edc3 7a00 	vstr	s15, [r3]
    						scan = 0;
 80030a8:	4b8e      	ldr	r3, [pc, #568]	; (80032e4 <main+0xff8>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	701a      	strb	r2, [r3, #0]
    						Chan = rda5807_Get_Channel();
 80030ae:	f002 f907 	bl	80052c0 <rda5807_Get_Channel>
 80030b2:	4603      	mov	r3, r0
 80030b4:	461a      	mov	r2, r3
 80030b6:	4b90      	ldr	r3, [pc, #576]	; (80032f8 <main+0x100c>)
 80030b8:	801a      	strh	r2, [r3, #0]
    						sprintf(sta, "%s", nameStation(Freq));
 80030ba:	4b8e      	ldr	r3, [pc, #568]	; (80032f4 <main+0x1008>)
 80030bc:	edd3 7a00 	vldr	s15, [r3]
 80030c0:	eeb0 0a67 	vmov.f32	s0, s15
 80030c4:	f000 ff24 	bl	8003f10 <nameStation>
 80030c8:	4602      	mov	r2, r0
 80030ca:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80030ce:	498b      	ldr	r1, [pc, #556]	; (80032fc <main+0x1010>)
 80030d0:	4618      	mov	r0, r3
 80030d2:	f00f f971 	bl	80123b8 <siprintf>
    						showLine(sta, lin6, &lia, true);
 80030d6:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 80030da:	f8b7 14f4 	ldrh.w	r1, [r7, #1268]	; 0x4f4
 80030de:	f507 608e 	add.w	r0, r7, #1136	; 0x470
 80030e2:	2301      	movs	r3, #1
 80030e4:	f000 ffc2 	bl	800406c <showLine>
    						Report(1, "[que:%u] set new Freq to %.1f %s (Chan:%u)\r\n", cntEvt, Freq, sta, Chan);
 80030e8:	4b85      	ldr	r3, [pc, #532]	; (8003300 <main+0x1014>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	461c      	mov	r4, r3
 80030f0:	4b80      	ldr	r3, [pc, #512]	; (80032f4 <main+0x1008>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fd fa27 	bl	8000548 <__aeabi_f2d>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	497e      	ldr	r1, [pc, #504]	; (80032f8 <main+0x100c>)
 8003100:	8809      	ldrh	r1, [r1, #0]
 8003102:	9103      	str	r1, [sp, #12]
 8003104:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8003108:	9102      	str	r1, [sp, #8]
 800310a:	e9cd 2300 	strd	r2, r3, [sp]
 800310e:	4622      	mov	r2, r4
 8003110:	497c      	ldr	r1, [pc, #496]	; (8003304 <main+0x1018>)
 8003112:	2001      	movs	r0, #1
 8003114:	f001 f938 	bl	8004388 <Report>
    					}
    				}
    				//
    				uint16_t rssi = rda5807_rssi();
 8003118:	f001 fd7e 	bl	8004c18 <rda5807_rssi>
 800311c:	4603      	mov	r3, r0
 800311e:	f8a7 34e0 	strh.w	r3, [r7, #1248]	; 0x4e0
    				if (rssi != RSSI) {
 8003122:	4b79      	ldr	r3, [pc, #484]	; (8003308 <main+0x101c>)
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	f8b7 24e0 	ldrh.w	r2, [r7, #1248]	; 0x4e0
 800312a:	429a      	cmp	r2, r3
 800312c:	d03b      	beq.n	80031a6 <main+0xeba>
    					RSSI = rssi;
 800312e:	4a76      	ldr	r2, [pc, #472]	; (8003308 <main+0x101c>)
 8003130:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	; 0x4e0
 8003134:	8013      	strh	r3, [r2, #0]
    					stereo = rda5807_Get_StereoMonoFlag();
 8003136:	f002 f8ab 	bl	8005290 <rda5807_Get_StereoMonoFlag>
 800313a:	4603      	mov	r3, r0
 800313c:	461a      	mov	r2, r3
 800313e:	4b73      	ldr	r3, [pc, #460]	; (800330c <main+0x1020>)
 8003140:	701a      	strb	r2, [r3, #0]
#ifdef SET_DISPLAY
    					if (stereo)
 8003142:	4b72      	ldr	r3, [pc, #456]	; (800330c <main+0x1020>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d012      	beq.n	8003170 <main+0xe84>
    						sprintf(st, "Rssi:%u Freq:%.1f S", RSSI, Freq);
 800314a:	4b6f      	ldr	r3, [pc, #444]	; (8003308 <main+0x101c>)
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	461c      	mov	r4, r3
 8003150:	4b68      	ldr	r3, [pc, #416]	; (80032f4 <main+0x1008>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7fd f9f7 	bl	8000548 <__aeabi_f2d>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	f507 6092 	add.w	r0, r7, #1168	; 0x490
 8003162:	e9cd 2300 	strd	r2, r3, [sp]
 8003166:	4622      	mov	r2, r4
 8003168:	4969      	ldr	r1, [pc, #420]	; (8003310 <main+0x1024>)
 800316a:	f00f f925 	bl	80123b8 <siprintf>
 800316e:	e011      	b.n	8003194 <main+0xea8>
    					else
    						sprintf(st, "Rssi:%u Freq:%.1f", RSSI, Freq);
 8003170:	4b65      	ldr	r3, [pc, #404]	; (8003308 <main+0x101c>)
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	461c      	mov	r4, r3
 8003176:	4b5f      	ldr	r3, [pc, #380]	; (80032f4 <main+0x1008>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7fd f9e4 	bl	8000548 <__aeabi_f2d>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	f507 6092 	add.w	r0, r7, #1168	; 0x490
 8003188:	e9cd 2300 	strd	r2, r3, [sp]
 800318c:	4622      	mov	r2, r4
 800318e:	4961      	ldr	r1, [pc, #388]	; (8003314 <main+0x1028>)
 8003190:	f00f f912 	bl	80123b8 <siprintf>
    					showLine(st, lin5, &lil, false);
 8003194:	f207 4244 	addw	r2, r7, #1092	; 0x444
 8003198:	f8b7 14f6 	ldrh.w	r1, [r7, #1270]	; 0x4f6
 800319c:	f507 6092 	add.w	r0, r7, #1168	; 0x490
 80031a0:	2300      	movs	r3, #0
 80031a2:	f000 ff63 	bl	800406c <showLine>
    					//showLine(sta, lin6, &lia, true);
    					////Report(1, "ChipID:0x%x Chan:%u Freq:%.2f RSSI:%u\r\n", rdaID, Chan, Freq, RSSI);
#endif
    				}
    				//
    				if (devError) {
 80031a6:	4b5c      	ldr	r3, [pc, #368]	; (8003318 <main+0x102c>)
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00d      	beq.n	80031ca <main+0xede>
    					dl = sprintf(tmp, "devError : 0x%04X", devError);
 80031ae:	4b5a      	ldr	r3, [pc, #360]	; (8003318 <main+0x102c>)
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	4959      	ldr	r1, [pc, #356]	; (800331c <main+0x1030>)
 80031b6:	485a      	ldr	r0, [pc, #360]	; (8003320 <main+0x1034>)
 80031b8:	f00f f8fe 	bl	80123b8 <siprintf>
 80031bc:	f8c7 0528 	str.w	r0, [r7, #1320]	; 0x528
    					lastErr = devError;
 80031c0:	4b55      	ldr	r3, [pc, #340]	; (8003318 <main+0x102c>)
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	f8a7 3520 	strh.w	r3, [r7, #1312]	; 0x520
 80031c8:	e013      	b.n	80031f2 <main+0xf06>
    				} else {
    					if (lastErr) {
 80031ca:	f8b7 3520 	ldrh.w	r3, [r7, #1312]	; 0x520
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00c      	beq.n	80031ec <main+0xf00>
    						dl = sprintf(tmp, "Ver.%s", ver);
 80031d2:	4b46      	ldr	r3, [pc, #280]	; (80032ec <main+0x1000>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	4952      	ldr	r1, [pc, #328]	; (8003324 <main+0x1038>)
 80031da:	4851      	ldr	r0, [pc, #324]	; (8003320 <main+0x1034>)
 80031dc:	f00f f8ec 	bl	80123b8 <siprintf>
 80031e0:	f8c7 0528 	str.w	r0, [r7, #1320]	; 0x528
    						lastErr = devOK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	f8a7 3520 	strh.w	r3, [r7, #1312]	; 0x520
 80031ea:	e002      	b.n	80031f2 <main+0xf06>
    					} else dl = 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
    				}
#ifdef SET_DISPLAY
    				if (dl) {
 80031f2:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d032      	beq.n	8003260 <main+0xf74>
    					ST7565_DrawFilledRectangle(0, SCREEN_HEIGHT - Font_6x8.FontHeight, SCREEN_WIDTH - 1, Font_6x8.FontHeight, PIX_OFF);
 80031fa:	f897 34d1 	ldrb.w	r3, [r7, #1233]	; 0x4d1
 80031fe:	b29b      	uxth	r3, r3
 8003200:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003204:	b29b      	uxth	r3, r3
 8003206:	b219      	sxth	r1, r3
 8003208:	f897 34d1 	ldrb.w	r3, [r7, #1233]	; 0x4d1
 800320c:	b21b      	sxth	r3, r3
 800320e:	2200      	movs	r2, #0
 8003210:	9200      	str	r2, [sp, #0]
 8003212:	227f      	movs	r2, #127	; 0x7f
 8003214:	2000      	movs	r0, #0
 8003216:	f7fe fd02 	bl	8001c1e <ST7565_DrawFilledRectangle>
    					x = ((SCREEN_WIDTH - (Font_6x8.FontWidth * dl)) >> 1) & 0x7f;
 800321a:	f897 34d0 	ldrb.w	r3, [r7, #1232]	; 0x4d0
 800321e:	461a      	mov	r2, r3
 8003220:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8003224:	fb02 f303 	mul.w	r3, r2, r3
 8003228:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800322c:	105b      	asrs	r3, r3, #1
 800322e:	b29b      	uxth	r3, r3
 8003230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003234:	f8a7 34f2 	strh.w	r3, [r7, #1266]	; 0x4f2
    					ST7565_Print(x, SCREEN_HEIGHT - Font_6x8.FontHeight, tmp, &Font_6x8, 1, PIX_ON);
 8003238:	f9b7 04f2 	ldrsh.w	r0, [r7, #1266]	; 0x4f2
 800323c:	f897 34d1 	ldrb.w	r3, [r7, #1233]	; 0x4d1
 8003240:	b29b      	uxth	r3, r3
 8003242:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003246:	b29b      	uxth	r3, r3
 8003248:	b219      	sxth	r1, r3
 800324a:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800324e:	2201      	movs	r2, #1
 8003250:	9201      	str	r2, [sp, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	4a32      	ldr	r2, [pc, #200]	; (8003320 <main+0x1034>)
 8003258:	f7fe fa88 	bl	800176c <ST7565_Print>
    					ST7565_Update();
 800325c:	f7fe f8d6 	bl	800140c <ST7565_Update>
    				}
    				//
    				ST7565_Update();
 8003260:	f7fe f8d4 	bl	800140c <ST7565_Update>
#endif
    			}
    			break;
 8003264:	e16d      	b.n	8003542 <main+0x1256>
    			case evt_Clr:
    				devError = devOK;
 8003266:	4b2c      	ldr	r3, [pc, #176]	; (8003318 <main+0x102c>)
 8003268:	2200      	movs	r2, #0
 800326a:	801a      	strh	r2, [r3, #0]
    				Report(1, "[que:%u] Clear all Errors...\r\n", cntEvt);
 800326c:	4b24      	ldr	r3, [pc, #144]	; (8003300 <main+0x1014>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	b2db      	uxtb	r3, r3
 8003272:	461a      	mov	r2, r3
 8003274:	492c      	ldr	r1, [pc, #176]	; (8003328 <main+0x103c>)
 8003276:	2001      	movs	r0, #1
 8003278:	f001 f886 	bl	8004388 <Report>
    			break;
 800327c:	e161      	b.n	8003542 <main+0x1256>
    			case evt_Help:
    				stx[0] = '\0';
 800327e:	4b2b      	ldr	r3, [pc, #172]	; (800332c <main+0x1040>)
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
    				for (int8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t%s\r\n", s_cmds[i]);
 8003284:	2300      	movs	r3, #0
 8003286:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
 800328a:	e015      	b.n	80032b8 <main+0xfcc>
 800328c:	4827      	ldr	r0, [pc, #156]	; (800332c <main+0x1040>)
 800328e:	f7fc ff9f 	bl	80001d0 <strlen>
 8003292:	4603      	mov	r3, r0
 8003294:	4a25      	ldr	r2, [pc, #148]	; (800332c <main+0x1040>)
 8003296:	1898      	adds	r0, r3, r2
 8003298:	f997 351f 	ldrsb.w	r3, [r7, #1311]	; 0x51f
 800329c:	4a24      	ldr	r2, [pc, #144]	; (8003330 <main+0x1044>)
 800329e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a2:	461a      	mov	r2, r3
 80032a4:	4923      	ldr	r1, [pc, #140]	; (8003334 <main+0x1048>)
 80032a6:	f00f f887 	bl	80123b8 <siprintf>
 80032aa:	f997 351f 	ldrsb.w	r3, [r7, #1311]	; 0x51f
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	3301      	adds	r3, #1
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
 80032b8:	f997 351f 	ldrsb.w	r3, [r7, #1311]	; 0x51f
 80032bc:	2b10      	cmp	r3, #16
 80032be:	dde5      	ble.n	800328c <main+0xfa0>
    				Report(0, "%s", stx);
 80032c0:	4a1a      	ldr	r2, [pc, #104]	; (800332c <main+0x1040>)
 80032c2:	490e      	ldr	r1, [pc, #56]	; (80032fc <main+0x1010>)
 80032c4:	2000      	movs	r0, #0
 80032c6:	f001 f85f 	bl	8004388 <Report>
    			break;
 80032ca:	e13a      	b.n	8003542 <main+0x1256>
    			case evt_Restart:
    				restart = 1;
 80032cc:	4b1a      	ldr	r3, [pc, #104]	; (8003338 <main+0x104c>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	701a      	strb	r2, [r3, #0]
    				Report(1, "[que:%u] Restart system...\r\n", cntEvt);
 80032d2:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <main+0x1014>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	4918      	ldr	r1, [pc, #96]	; (800333c <main+0x1050>)
 80032dc:	2001      	movs	r0, #1
 80032de:	f001 f853 	bl	8004388 <Report>
    			break;
 80032e2:	e12e      	b.n	8003542 <main+0x1256>
 80032e4:	20003ce1 	.word	0x20003ce1
 80032e8:	200001ca 	.word	0x200001ca
 80032ec:	20000004 	.word	0x20000004
 80032f0:	08016758 	.word	0x08016758
 80032f4:	200001c0 	.word	0x200001c0
 80032f8:	20003cdc 	.word	0x20003cdc
 80032fc:	0801663c 	.word	0x0801663c
 8003300:	20001884 	.word	0x20001884
 8003304:	08016728 	.word	0x08016728
 8003308:	20003cde 	.word	0x20003cde
 800330c:	20003ce4 	.word	0x20003ce4
 8003310:	08016614 	.word	0x08016614
 8003314:	08016628 	.word	0x08016628
 8003318:	20001468 	.word	0x20001468
 800331c:	08016764 	.word	0x08016764
 8003320:	20000fe8 	.word	0x20000fe8
 8003324:	080165dc 	.word	0x080165dc
 8003328:	08016778 	.word	0x08016778
 800332c:	20000be8 	.word	0x20000be8
 8003330:	2000001c 	.word	0x2000001c
 8003334:	08016798 	.word	0x08016798
 8003338:	2000187c 	.word	0x2000187c
 800333c:	080167a0 	.word	0x080167a0
    			case evt_Epoch:
    				set_Date(epoch);
 8003340:	4baa      	ldr	r3, [pc, #680]	; (80035ec <main+0x1300>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f000 ff25 	bl	8004194 <set_Date>
    				Report(1, "[que:%u] Set Unix TimeStamp to %lu\r\n", cntEvt, epoch);
 800334a:	4ba9      	ldr	r3, [pc, #676]	; (80035f0 <main+0x1304>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	461a      	mov	r2, r3
 8003352:	4ba6      	ldr	r3, [pc, #664]	; (80035ec <main+0x1300>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	49a7      	ldr	r1, [pc, #668]	; (80035f4 <main+0x1308>)
 8003358:	2001      	movs	r0, #1
 800335a:	f001 f815 	bl	8004388 <Report>
    			break;
 800335e:	e0f0      	b.n	8003542 <main+0x1256>
    			case evt_Err:
    				Report(1, "[que:%u] Error input from uart\r\n", cntEvt);
 8003360:	4ba3      	ldr	r3, [pc, #652]	; (80035f0 <main+0x1304>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	461a      	mov	r2, r3
 8003368:	49a3      	ldr	r1, [pc, #652]	; (80035f8 <main+0x130c>)
 800336a:	2001      	movs	r0, #1
 800336c:	f001 f80c 	bl	8004388 <Report>
    			break;
 8003370:	e0e7      	b.n	8003542 <main+0x1256>
#ifdef SET_W25FLASH
    			case evt_sRead:
    			case evt_sNext:
    			{
    				uint32_t w25_adr = (adr_sector * W25qxx_getSectorSize()) + offset_sector;
 8003372:	f002 fe6d 	bl	8006050 <W25qxx_getSectorSize>
 8003376:	4603      	mov	r3, r0
 8003378:	4aa0      	ldr	r2, [pc, #640]	; (80035fc <main+0x1310>)
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	fb02 f303 	mul.w	r3, r2, r3
 8003380:	4a9f      	ldr	r2, [pc, #636]	; (8003600 <main+0x1314>)
 8003382:	6812      	ldr	r2, [r2, #0]
 8003384:	4413      	add	r3, r2
 8003386:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
    				uint32_t dlin = list_sector;
 800338a:	4b9e      	ldr	r3, [pc, #632]	; (8003604 <main+0x1318>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
    				int step = 32;
 8003392:	2320      	movs	r3, #32
 8003394:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
    				uint32_t ind = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    				W25qxx_ReadSector(fs_work, adr_sector, offset_sector, dlin);
 800339e:	4b97      	ldr	r3, [pc, #604]	; (80035fc <main+0x1310>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4619      	mov	r1, r3
 80033a4:	4b96      	ldr	r3, [pc, #600]	; (8003600 <main+0x1314>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 80033ae:	4896      	ldr	r0, [pc, #600]	; (8003608 <main+0x131c>)
 80033b0:	f003 f96c 	bl	800668c <W25qxx_ReadSector>
    				Report(0, "Read sector:%d offset:%d len:%u\r\n", adr_sector, offset_sector, dlin);
 80033b4:	4b91      	ldr	r3, [pc, #580]	; (80035fc <main+0x1310>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b91      	ldr	r3, [pc, #580]	; (8003600 <main+0x1314>)
 80033ba:	6819      	ldr	r1, [r3, #0]
 80033bc:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	460b      	mov	r3, r1
 80033c4:	4991      	ldr	r1, [pc, #580]	; (800360c <main+0x1320>)
 80033c6:	2000      	movs	r0, #0
 80033c8:	f000 ffde 	bl	8004388 <Report>
    				while (ind < dlin) {
 80033cc:	e05b      	b.n	8003486 <main+0x119a>
    					strf[0] = '\0';
 80033ce:	4b90      	ldr	r3, [pc, #576]	; (8003610 <main+0x1324>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	701a      	strb	r2, [r3, #0]
    					while (1) {
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 80033d4:	488e      	ldr	r0, [pc, #568]	; (8003610 <main+0x1324>)
 80033d6:	f7fc fefb 	bl	80001d0 <strlen>
 80033da:	4603      	mov	r3, r0
 80033dc:	4a8c      	ldr	r2, [pc, #560]	; (8003610 <main+0x1324>)
 80033de:	4413      	add	r3, r2
 80033e0:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 80033e4:	498b      	ldr	r1, [pc, #556]	; (8003614 <main+0x1328>)
 80033e6:	4618      	mov	r0, r3
 80033e8:	f00e ffe6 	bl	80123b8 <siprintf>
    						for (int i = 0; i < step; i++) sprintf(strf+strlen(strf), " %02X", fs_work[i + ind]);
 80033ec:	2300      	movs	r3, #0
 80033ee:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 80033f2:	e015      	b.n	8003420 <main+0x1134>
 80033f4:	4886      	ldr	r0, [pc, #536]	; (8003610 <main+0x1324>)
 80033f6:	f7fc feeb 	bl	80001d0 <strlen>
 80033fa:	4603      	mov	r3, r0
 80033fc:	4a84      	ldr	r2, [pc, #528]	; (8003610 <main+0x1324>)
 80033fe:	1898      	adds	r0, r3, r2
 8003400:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8003404:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8003408:	4413      	add	r3, r2
 800340a:	4a7f      	ldr	r2, [pc, #508]	; (8003608 <main+0x131c>)
 800340c:	5cd3      	ldrb	r3, [r2, r3]
 800340e:	461a      	mov	r2, r3
 8003410:	4981      	ldr	r1, [pc, #516]	; (8003618 <main+0x132c>)
 8003412:	f00e ffd1 	bl	80123b8 <siprintf>
 8003416:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800341a:	3301      	adds	r3, #1
 800341c:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8003420:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8003424:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8003428:	429a      	cmp	r2, r3
 800342a:	dbe3      	blt.n	80033f4 <main+0x1108>
    						strcat(strf, "\r\n");
 800342c:	4878      	ldr	r0, [pc, #480]	; (8003610 <main+0x1324>)
 800342e:	f7fc fecf 	bl	80001d0 <strlen>
 8003432:	4603      	mov	r3, r0
 8003434:	461a      	mov	r2, r3
 8003436:	4b76      	ldr	r3, [pc, #472]	; (8003610 <main+0x1324>)
 8003438:	4413      	add	r3, r2
 800343a:	4a78      	ldr	r2, [pc, #480]	; (800361c <main+0x1330>)
 800343c:	8811      	ldrh	r1, [r2, #0]
 800343e:	7892      	ldrb	r2, [r2, #2]
 8003440:	8019      	strh	r1, [r3, #0]
 8003442:	709a      	strb	r2, [r3, #2]
    						w25_adr += step;
 8003444:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8003448:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 800344c:	4413      	add	r3, r2
 800344e:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
    						ind += step;
 8003452:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8003456:	f8d7 2514 	ldr.w	r2, [r7, #1300]	; 0x514
 800345a:	4413      	add	r3, r2
 800345c:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    						if (!(ind % W25qxx_getPageSize())) break;
 8003460:	f002 fe02 	bl	8006068 <W25qxx_getPageSize>
 8003464:	4602      	mov	r2, r0
 8003466:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800346a:	fbb3 f1f2 	udiv	r1, r3, r2
 800346e:	fb01 f202 	mul.w	r2, r1, r2
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d000      	beq.n	800347a <main+0x118e>
    						sprintf(strf+strlen(strf), "%06X ", (unsigned int)w25_adr);
 8003478:	e7ac      	b.n	80033d4 <main+0x10e8>
    						if (!(ind % W25qxx_getPageSize())) break;
 800347a:	bf00      	nop
    					}
    					Report(0, "%s", strf);
 800347c:	4a64      	ldr	r2, [pc, #400]	; (8003610 <main+0x1324>)
 800347e:	4968      	ldr	r1, [pc, #416]	; (8003620 <main+0x1334>)
 8003480:	2000      	movs	r0, #0
 8003482:	f000 ff81 	bl	8004388 <Report>
    				while (ind < dlin) {
 8003486:	f8d7 2514 	ldr.w	r2, [r7, #1300]	; 0x514
 800348a:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 800348e:	429a      	cmp	r2, r3
 8003490:	d39d      	bcc.n	80033ce <main+0x10e2>
    				}
    			}
    			break;
 8003492:	e056      	b.n	8003542 <main+0x1256>
    			case evt_sWrite:
    			{
    				uint32_t ss = W25qxx_getSectorSize();
 8003494:	f002 fddc 	bl	8006050 <W25qxx_getSectorSize>
 8003498:	f8c7 050c 	str.w	r0, [r7, #1292]	; 0x50c
    				if (!W25qxx_IsEmptySector(adr_sector, 0, ss)) W25qxx_EraseSector(adr_sector);
 800349c:	4b57      	ldr	r3, [pc, #348]	; (80035fc <main+0x1310>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f8d7 250c 	ldr.w	r2, [r7, #1292]	; 0x50c
 80034a4:	2100      	movs	r1, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f002 fe54 	bl	8006154 <W25qxx_IsEmptySector>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f083 0301 	eor.w	r3, r3, #1
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d004      	beq.n	80034c2 <main+0x11d6>
 80034b8:	4b50      	ldr	r3, [pc, #320]	; (80035fc <main+0x1310>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f002 fded 	bl	800609c <W25qxx_EraseSector>
    				memset(fs_work, byte_write, ss);
 80034c2:	4b58      	ldr	r3, [pc, #352]	; (8003624 <main+0x1338>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	f8d7 250c 	ldr.w	r2, [r7, #1292]	; 0x50c
 80034ca:	4619      	mov	r1, r3
 80034cc:	484e      	ldr	r0, [pc, #312]	; (8003608 <main+0x131c>)
 80034ce:	f00e fb01 	bl	8011ad4 <memset>
    				if (len_write != -1) ss = len_write;
 80034d2:	4b55      	ldr	r3, [pc, #340]	; (8003628 <main+0x133c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034da:	d003      	beq.n	80034e4 <main+0x11f8>
 80034dc:	4b52      	ldr	r3, [pc, #328]	; (8003628 <main+0x133c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    				W25qxx_WriteSector(fs_work, adr_sector, offset_sector, ss);
 80034e4:	4b45      	ldr	r3, [pc, #276]	; (80035fc <main+0x1310>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4619      	mov	r1, r3
 80034ea:	4b45      	ldr	r3, [pc, #276]	; (8003600 <main+0x1314>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 80034f4:	4844      	ldr	r0, [pc, #272]	; (8003608 <main+0x131c>)
 80034f6:	f002 ffa1 	bl	800643c <W25qxx_WriteSector>
    				Report(0, "Fill sector:%d byte:%02X len:%d done\r\n", adr_sector, byte_write, ss);
 80034fa:	4b40      	ldr	r3, [pc, #256]	; (80035fc <main+0x1310>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4b49      	ldr	r3, [pc, #292]	; (8003624 <main+0x1338>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	4619      	mov	r1, r3
 8003504:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	460b      	mov	r3, r1
 800350c:	4947      	ldr	r1, [pc, #284]	; (800362c <main+0x1340>)
 800350e:	2000      	movs	r0, #0
 8003510:	f000 ff3a 	bl	8004388 <Report>
    			}
    			break;
 8003514:	e015      	b.n	8003542 <main+0x1256>
    			case evt_sErase:
    				W25qxx_EraseSector(adr_sector);
 8003516:	4b39      	ldr	r3, [pc, #228]	; (80035fc <main+0x1310>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f002 fdbe 	bl	800609c <W25qxx_EraseSector>
    				Report(0, "Erase sector:%d done\r\n", adr_sector);
 8003520:	4b36      	ldr	r3, [pc, #216]	; (80035fc <main+0x1310>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	461a      	mov	r2, r3
 8003526:	4942      	ldr	r1, [pc, #264]	; (8003630 <main+0x1344>)
 8003528:	2000      	movs	r0, #0
 800352a:	f000 ff2d 	bl	8004388 <Report>
    				break;
 800352e:	e008      	b.n	8003542 <main+0x1256>
    			break;
 8003530:	bf00      	nop
 8003532:	e006      	b.n	8003542 <main+0x1256>
    			break;
 8003534:	bf00      	nop
 8003536:	e004      	b.n	8003542 <main+0x1256>
    			break;
 8003538:	bf00      	nop
 800353a:	e002      	b.n	8003542 <main+0x1256>
				break;
 800353c:	bf00      	nop
 800353e:	e000      	b.n	8003542 <main+0x1256>
    			break;
 8003540:	bf00      	nop
#endif
    		}
    		if ((evt >= evt_sRead) && (evt <= evt_sWrite)) {
 8003542:	4b3c      	ldr	r3, [pc, #240]	; (8003634 <main+0x1348>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b03      	cmp	r3, #3
 8003548:	dd0b      	ble.n	8003562 <main+0x1276>
 800354a:	4b3a      	ldr	r3, [pc, #232]	; (8003634 <main+0x1348>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b07      	cmp	r3, #7
 8003550:	dc07      	bgt.n	8003562 <main+0x1276>
    			last_cmd_sector =  evt;//cmd_sector;
 8003552:	4b38      	ldr	r3, [pc, #224]	; (8003634 <main+0x1348>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a38      	ldr	r2, [pc, #224]	; (8003638 <main+0x134c>)
 8003558:	6013      	str	r3, [r2, #0]
    			cmd_sector = sNone;
 800355a:	4b38      	ldr	r3, [pc, #224]	; (800363c <main+0x1350>)
 800355c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003560:	601a      	str	r2, [r3, #0]
    		}
    	}
#endif

    	if (devError) {
 8003562:	4b37      	ldr	r3, [pc, #220]	; (8003640 <main+0x1354>)
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d009      	beq.n	800357e <main+0x1292>
    		errLedOn(true);
 800356a:	2001      	movs	r0, #1
 800356c:	f000 fdec 	bl	8004148 <errLedOn>
    		HAL_Delay(50);
 8003570:	2032      	movs	r0, #50	; 0x32
 8003572:	f003 f995 	bl	80068a0 <HAL_Delay>
    		errLedOn(false);
 8003576:	2000      	movs	r0, #0
 8003578:	f000 fde6 	bl	8004148 <errLedOn>
 800357c:	e009      	b.n	8003592 <main+0x12a6>
    	} else {
    		if (HAL_GPIO_ReadPin(ERR_LED_GPIO_Port, ERR_LED_Pin)) errLedOn(false);
 800357e:	2108      	movs	r1, #8
 8003580:	4830      	ldr	r0, [pc, #192]	; (8003644 <main+0x1358>)
 8003582:	f003 ff23 	bl	80073cc <HAL_GPIO_ReadPin>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <main+0x12a6>
 800358c:	2000      	movs	r0, #0
 800358e:	f000 fddb 	bl	8004148 <errLedOn>
    while (!restart) {
 8003592:	4b2d      	ldr	r3, [pc, #180]	; (8003648 <main+0x135c>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	f43f aada 	beq.w	8002b52 <main+0x866>

    /* USER CODE BEGIN 3 */

    }

    HAL_TIM_Base_Stop_IT(tikPort);
 800359e:	4b2b      	ldr	r3, [pc, #172]	; (800364c <main+0x1360>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f008 fefa 	bl	800c39c <HAL_TIM_Base_Stop_IT>

#ifdef SET_DISPLAY
    ST7565_Reset();
 80035a8:	f7fd fd8e 	bl	80010c8 <ST7565_Reset>
    ST7565_CMD_DISPLAY(CMD_DISPLAY_OFF);
 80035ac:	20ae      	movs	r0, #174	; 0xae
 80035ae:	f7fd febd 	bl	800132c <ST7565_CMD_DISPLAY>
#endif
#if defined(SET_RDA_CHIP) || defined(SET_NEW_RDA)

#endif
#ifdef SET_FAT_FS
    if (mnt) {
 80035b2:	4b27      	ldr	r3, [pc, #156]	; (8003650 <main+0x1364>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <main+0x12e4>
    	f_mount(NULL, USERPath, 1);
 80035ba:	2201      	movs	r2, #1
 80035bc:	4925      	ldr	r1, [pc, #148]	; (8003654 <main+0x1368>)
 80035be:	2000      	movs	r0, #0
 80035c0:	f00c fe0e 	bl	80101e0 <f_mount>
    	//mnt = false;
    	Report(1, "Umount drive '%.*s'\r\n", sizeof(USERPath), USERPath);
 80035c4:	4b23      	ldr	r3, [pc, #140]	; (8003654 <main+0x1368>)
 80035c6:	2204      	movs	r2, #4
 80035c8:	4923      	ldr	r1, [pc, #140]	; (8003658 <main+0x136c>)
 80035ca:	2001      	movs	r0, #1
 80035cc:	f000 fedc 	bl	8004388 <Report>
    }
#endif

    Report(1, "[que:%u] Stop application...\r\n", cntEvt);
 80035d0:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <main+0x1304>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	4920      	ldr	r1, [pc, #128]	; (800365c <main+0x1370>)
 80035da:	2001      	movs	r0, #1
 80035dc:	f000 fed4 	bl	8004388 <Report>

    HAL_Delay(500);
 80035e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80035e4:	f003 f95c 	bl	80068a0 <HAL_Delay>

    NVIC_SystemReset();
 80035e8:	f7fe fb72 	bl	8001cd0 <__NVIC_SystemReset>
 80035ec:	20000018 	.word	0x20000018
 80035f0:	20001884 	.word	0x20001884
 80035f4:	080167c0 	.word	0x080167c0
 80035f8:	080167e8 	.word	0x080167e8
 80035fc:	20001888 	.word	0x20001888
 8003600:	2000188c 	.word	0x2000188c
 8003604:	20001890 	.word	0x20001890
 8003608:	20001898 	.word	0x20001898
 800360c:	0801680c 	.word	0x0801680c
 8003610:	20002898 	.word	0x20002898
 8003614:	08016830 	.word	0x08016830
 8003618:	08016838 	.word	0x08016838
 800361c:	0801659c 	.word	0x0801659c
 8003620:	0801663c 	.word	0x0801663c
 8003624:	200001b4 	.word	0x200001b4
 8003628:	20001894 	.word	0x20001894
 800362c:	08016840 	.word	0x08016840
 8003630:	08016868 	.word	0x08016868
 8003634:	200001a4 	.word	0x200001a4
 8003638:	200001b0 	.word	0x200001b0
 800363c:	200001ac 	.word	0x200001ac
 8003640:	20001468 	.word	0x20001468
 8003644:	48000800 	.word	0x48000800
 8003648:	2000187c 	.word	0x2000187c
 800364c:	20000008 	.word	0x20000008
 8003650:	20003ccd 	.word	0x20003ccd
 8003654:	2000413c 	.word	0x2000413c
 8003658:	080165c4 	.word	0x080165c4
 800365c:	08016880 	.word	0x08016880

08003660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b096      	sub	sp, #88	; 0x58
 8003664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003666:	f107 0314 	add.w	r3, r7, #20
 800366a:	2244      	movs	r2, #68	; 0x44
 800366c:	2100      	movs	r1, #0
 800366e:	4618      	mov	r0, r3
 8003670:	f00e fa30 	bl	8011ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003674:	463b      	mov	r3, r7
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	605a      	str	r2, [r3, #4]
 800367c:	609a      	str	r2, [r3, #8]
 800367e:	60da      	str	r2, [r3, #12]
 8003680:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003682:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003686:	f005 fb8b 	bl	8008da0 <HAL_PWREx_ControlVoltageScaling>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003690:	f001 fa42 	bl	8004b18 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003694:	2309      	movs	r3, #9
 8003696:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800369c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800369e:	2301      	movs	r3, #1
 80036a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036a2:	2302      	movs	r3, #2
 80036a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036a6:	2303      	movs	r3, #3
 80036a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80036aa:	2301      	movs	r3, #1
 80036ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80036ae:	2314      	movs	r3, #20
 80036b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80036b2:	2307      	movs	r3, #7
 80036b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80036b6:	2302      	movs	r3, #2
 80036b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80036ba:	2302      	movs	r3, #2
 80036bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036be:	f107 0314 	add.w	r3, r7, #20
 80036c2:	4618      	mov	r0, r3
 80036c4:	f005 fbc2 	bl	8008e4c <HAL_RCC_OscConfig>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80036ce:	f001 fa23 	bl	8004b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036d2:	230f      	movs	r3, #15
 80036d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036d6:	2303      	movs	r3, #3
 80036d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036da:	2300      	movs	r3, #0
 80036dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036e2:	2300      	movs	r3, #0
 80036e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80036e6:	463b      	mov	r3, r7
 80036e8:	2104      	movs	r1, #4
 80036ea:	4618      	mov	r0, r3
 80036ec:	f005 ff8a 	bl	8009604 <HAL_RCC_ClockConfig>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80036f6:	f001 fa0f 	bl	8004b18 <Error_Handler>
  }
}
 80036fa:	bf00      	nop
 80036fc:	3758      	adds	r7, #88	; 0x58
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003708:	4b1b      	ldr	r3, [pc, #108]	; (8003778 <MX_I2C1_Init+0x74>)
 800370a:	4a1c      	ldr	r2, [pc, #112]	; (800377c <MX_I2C1_Init+0x78>)
 800370c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702D95;
 800370e:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <MX_I2C1_Init+0x74>)
 8003710:	4a1b      	ldr	r2, [pc, #108]	; (8003780 <MX_I2C1_Init+0x7c>)
 8003712:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003714:	4b18      	ldr	r3, [pc, #96]	; (8003778 <MX_I2C1_Init+0x74>)
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800371a:	4b17      	ldr	r3, [pc, #92]	; (8003778 <MX_I2C1_Init+0x74>)
 800371c:	2201      	movs	r2, #1
 800371e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003720:	4b15      	ldr	r3, [pc, #84]	; (8003778 <MX_I2C1_Init+0x74>)
 8003722:	2200      	movs	r2, #0
 8003724:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003726:	4b14      	ldr	r3, [pc, #80]	; (8003778 <MX_I2C1_Init+0x74>)
 8003728:	2200      	movs	r2, #0
 800372a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800372c:	4b12      	ldr	r3, [pc, #72]	; (8003778 <MX_I2C1_Init+0x74>)
 800372e:	2200      	movs	r2, #0
 8003730:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003732:	4b11      	ldr	r3, [pc, #68]	; (8003778 <MX_I2C1_Init+0x74>)
 8003734:	2200      	movs	r2, #0
 8003736:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003738:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <MX_I2C1_Init+0x74>)
 800373a:	2200      	movs	r2, #0
 800373c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800373e:	480e      	ldr	r0, [pc, #56]	; (8003778 <MX_I2C1_Init+0x74>)
 8003740:	f003 fea6 	bl	8007490 <HAL_I2C_Init>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800374a:	f001 f9e5 	bl	8004b18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800374e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003752:	4809      	ldr	r0, [pc, #36]	; (8003778 <MX_I2C1_Init+0x74>)
 8003754:	f005 fa5e 	bl	8008c14 <HAL_I2CEx_ConfigAnalogFilter>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800375e:	f001 f9db 	bl	8004b18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003762:	2100      	movs	r1, #0
 8003764:	4804      	ldr	r0, [pc, #16]	; (8003778 <MX_I2C1_Init+0x74>)
 8003766:	f005 faa0 	bl	8008caa <HAL_I2CEx_ConfigDigitalFilter>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003770:	f001 f9d2 	bl	8004b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003774:	bf00      	nop
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20000828 	.word	0x20000828
 800377c:	40005400 	.word	0x40005400
 8003780:	00702d95 	.word	0x00702d95

08003784 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800378a:	1d3b      	adds	r3, r7, #4
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	60da      	str	r2, [r3, #12]
 8003796:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003798:	2300      	movs	r3, #0
 800379a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800379c:	4b25      	ldr	r3, [pc, #148]	; (8003834 <MX_RTC_Init+0xb0>)
 800379e:	4a26      	ldr	r2, [pc, #152]	; (8003838 <MX_RTC_Init+0xb4>)
 80037a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80037a2:	4b24      	ldr	r3, [pc, #144]	; (8003834 <MX_RTC_Init+0xb0>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80037a8:	4b22      	ldr	r3, [pc, #136]	; (8003834 <MX_RTC_Init+0xb0>)
 80037aa:	227f      	movs	r2, #127	; 0x7f
 80037ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80037ae:	4b21      	ldr	r3, [pc, #132]	; (8003834 <MX_RTC_Init+0xb0>)
 80037b0:	22ff      	movs	r2, #255	; 0xff
 80037b2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80037b4:	4b1f      	ldr	r3, [pc, #124]	; (8003834 <MX_RTC_Init+0xb0>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80037ba:	4b1e      	ldr	r3, [pc, #120]	; (8003834 <MX_RTC_Init+0xb0>)
 80037bc:	2200      	movs	r2, #0
 80037be:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80037c0:	4b1c      	ldr	r3, [pc, #112]	; (8003834 <MX_RTC_Init+0xb0>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80037c6:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <MX_RTC_Init+0xb0>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80037cc:	4819      	ldr	r0, [pc, #100]	; (8003834 <MX_RTC_Init+0xb0>)
 80037ce:	f006 fdf9 	bl	800a3c4 <HAL_RTC_Init>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80037d8:	f001 f99e 	bl	8004b18 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80037dc:	2300      	movs	r3, #0
 80037de:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80037e4:	2300      	movs	r3, #0
 80037e6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80037e8:	2300      	movs	r3, #0
 80037ea:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80037f0:	1d3b      	adds	r3, r7, #4
 80037f2:	2201      	movs	r2, #1
 80037f4:	4619      	mov	r1, r3
 80037f6:	480f      	ldr	r0, [pc, #60]	; (8003834 <MX_RTC_Init+0xb0>)
 80037f8:	f006 fe5f 	bl	800a4ba <HAL_RTC_SetTime>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8003802:	f001 f989 	bl	8004b18 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8003806:	2303      	movs	r3, #3
 8003808:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 800380a:	2307      	movs	r3, #7
 800380c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 800380e:	2306      	movs	r3, #6
 8003810:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8003812:	2322      	movs	r3, #34	; 0x22
 8003814:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003816:	463b      	mov	r3, r7
 8003818:	2201      	movs	r2, #1
 800381a:	4619      	mov	r1, r3
 800381c:	4805      	ldr	r0, [pc, #20]	; (8003834 <MX_RTC_Init+0xb0>)
 800381e:	f006 ff45 	bl	800a6ac <HAL_RTC_SetDate>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8003828:	f001 f976 	bl	8004b18 <Error_Handler>

  //set_Date(epoch);

  /* USER CODE END RTC_Init 2 */

}
 800382c:	bf00      	nop
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	2000090c 	.word	0x2000090c
 8003838:	40002800 	.word	0x40002800

0800383c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003840:	4b1b      	ldr	r3, [pc, #108]	; (80038b0 <MX_SPI1_Init+0x74>)
 8003842:	4a1c      	ldr	r2, [pc, #112]	; (80038b4 <MX_SPI1_Init+0x78>)
 8003844:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003846:	4b1a      	ldr	r3, [pc, #104]	; (80038b0 <MX_SPI1_Init+0x74>)
 8003848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800384c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800384e:	4b18      	ldr	r3, [pc, #96]	; (80038b0 <MX_SPI1_Init+0x74>)
 8003850:	2200      	movs	r2, #0
 8003852:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003854:	4b16      	ldr	r3, [pc, #88]	; (80038b0 <MX_SPI1_Init+0x74>)
 8003856:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800385a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800385c:	4b14      	ldr	r3, [pc, #80]	; (80038b0 <MX_SPI1_Init+0x74>)
 800385e:	2200      	movs	r2, #0
 8003860:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003862:	4b13      	ldr	r3, [pc, #76]	; (80038b0 <MX_SPI1_Init+0x74>)
 8003864:	2200      	movs	r2, #0
 8003866:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003868:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <MX_SPI1_Init+0x74>)
 800386a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800386e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003870:	4b0f      	ldr	r3, [pc, #60]	; (80038b0 <MX_SPI1_Init+0x74>)
 8003872:	2208      	movs	r2, #8
 8003874:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003876:	4b0e      	ldr	r3, [pc, #56]	; (80038b0 <MX_SPI1_Init+0x74>)
 8003878:	2200      	movs	r2, #0
 800387a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800387c:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <MX_SPI1_Init+0x74>)
 800387e:	2200      	movs	r2, #0
 8003880:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003882:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <MX_SPI1_Init+0x74>)
 8003884:	2200      	movs	r2, #0
 8003886:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003888:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <MX_SPI1_Init+0x74>)
 800388a:	2207      	movs	r2, #7
 800388c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800388e:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <MX_SPI1_Init+0x74>)
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003894:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <MX_SPI1_Init+0x74>)
 8003896:	2200      	movs	r2, #0
 8003898:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800389a:	4805      	ldr	r0, [pc, #20]	; (80038b0 <MX_SPI1_Init+0x74>)
 800389c:	f007 f8ac 	bl	800a9f8 <HAL_SPI_Init>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80038a6:	f001 f937 	bl	8004b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80038aa:	bf00      	nop
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000930 	.word	0x20000930
 80038b4:	40013000 	.word	0x40013000

080038b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80038bc:	4b1b      	ldr	r3, [pc, #108]	; (800392c <MX_SPI2_Init+0x74>)
 80038be:	4a1c      	ldr	r2, [pc, #112]	; (8003930 <MX_SPI2_Init+0x78>)
 80038c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80038c2:	4b1a      	ldr	r3, [pc, #104]	; (800392c <MX_SPI2_Init+0x74>)
 80038c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80038ca:	4b18      	ldr	r3, [pc, #96]	; (800392c <MX_SPI2_Init+0x74>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80038d0:	4b16      	ldr	r3, [pc, #88]	; (800392c <MX_SPI2_Init+0x74>)
 80038d2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80038d6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038d8:	4b14      	ldr	r3, [pc, #80]	; (800392c <MX_SPI2_Init+0x74>)
 80038da:	2200      	movs	r2, #0
 80038dc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038de:	4b13      	ldr	r3, [pc, #76]	; (800392c <MX_SPI2_Init+0x74>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80038e4:	4b11      	ldr	r3, [pc, #68]	; (800392c <MX_SPI2_Init+0x74>)
 80038e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038ec:	4b0f      	ldr	r3, [pc, #60]	; (800392c <MX_SPI2_Init+0x74>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038f2:	4b0e      	ldr	r3, [pc, #56]	; (800392c <MX_SPI2_Init+0x74>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80038f8:	4b0c      	ldr	r3, [pc, #48]	; (800392c <MX_SPI2_Init+0x74>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038fe:	4b0b      	ldr	r3, [pc, #44]	; (800392c <MX_SPI2_Init+0x74>)
 8003900:	2200      	movs	r2, #0
 8003902:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003904:	4b09      	ldr	r3, [pc, #36]	; (800392c <MX_SPI2_Init+0x74>)
 8003906:	2207      	movs	r2, #7
 8003908:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800390a:	4b08      	ldr	r3, [pc, #32]	; (800392c <MX_SPI2_Init+0x74>)
 800390c:	2200      	movs	r2, #0
 800390e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003910:	4b06      	ldr	r3, [pc, #24]	; (800392c <MX_SPI2_Init+0x74>)
 8003912:	2200      	movs	r2, #0
 8003914:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003916:	4805      	ldr	r0, [pc, #20]	; (800392c <MX_SPI2_Init+0x74>)
 8003918:	f007 f86e 	bl	800a9f8 <HAL_SPI_Init>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003922:	f001 f8f9 	bl	8004b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003926:	bf00      	nop
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000994 	.word	0x20000994
 8003930:	40003800 	.word	0x40003800

08003934 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800393a:	f107 0310 	add.w	r3, r7, #16
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	605a      	str	r2, [r3, #4]
 8003944:	609a      	str	r2, [r3, #8]
 8003946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003948:	1d3b      	adds	r3, r7, #4
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	605a      	str	r2, [r3, #4]
 8003950:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN TIM4_Init 1 */

  // interupt every 10 ms

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003952:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <MX_TIM4_Init+0x94>)
 8003954:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <MX_TIM4_Init+0x98>)
 8003956:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8003958:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <MX_TIM4_Init+0x94>)
 800395a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800395e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003960:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <MX_TIM4_Init+0x94>)
 8003962:	2200      	movs	r2, #0
 8003964:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8003966:	4b18      	ldr	r3, [pc, #96]	; (80039c8 <MX_TIM4_Init+0x94>)
 8003968:	2263      	movs	r2, #99	; 0x63
 800396a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800396c:	4b16      	ldr	r3, [pc, #88]	; (80039c8 <MX_TIM4_Init+0x94>)
 800396e:	2200      	movs	r2, #0
 8003970:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003972:	4b15      	ldr	r3, [pc, #84]	; (80039c8 <MX_TIM4_Init+0x94>)
 8003974:	2280      	movs	r2, #128	; 0x80
 8003976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003978:	4813      	ldr	r0, [pc, #76]	; (80039c8 <MX_TIM4_Init+0x94>)
 800397a:	f008 fc47 	bl	800c20c <HAL_TIM_Base_Init>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003984:	f001 f8c8 	bl	8004b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800398c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800398e:	f107 0310 	add.w	r3, r7, #16
 8003992:	4619      	mov	r1, r3
 8003994:	480c      	ldr	r0, [pc, #48]	; (80039c8 <MX_TIM4_Init+0x94>)
 8003996:	f008 fe4f 	bl	800c638 <HAL_TIM_ConfigClockSource>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80039a0:	f001 f8ba 	bl	8004b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039a4:	2300      	movs	r3, #0
 80039a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80039ac:	1d3b      	adds	r3, r7, #4
 80039ae:	4619      	mov	r1, r3
 80039b0:	4805      	ldr	r0, [pc, #20]	; (80039c8 <MX_TIM4_Init+0x94>)
 80039b2:	f009 f867 	bl	800ca84 <HAL_TIMEx_MasterConfigSynchronization>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80039bc:	f001 f8ac 	bl	8004b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80039c0:	bf00      	nop
 80039c2:	3720      	adds	r7, #32
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20000ad0 	.word	0x20000ad0
 80039cc:	40000800 	.word	0x40000800

080039d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039d4:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <MX_USART2_UART_Init+0x58>)
 80039d6:	4a15      	ldr	r2, [pc, #84]	; (8003a2c <MX_USART2_UART_Init+0x5c>)
 80039d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80039da:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <MX_USART2_UART_Init+0x58>)
 80039dc:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80039e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039e2:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <MX_USART2_UART_Init+0x58>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039e8:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <MX_USART2_UART_Init+0x58>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039ee:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <MX_USART2_UART_Init+0x58>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039f4:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <MX_USART2_UART_Init+0x58>)
 80039f6:	220c      	movs	r2, #12
 80039f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039fa:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <MX_USART2_UART_Init+0x58>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a00:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <MX_USART2_UART_Init+0x58>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a06:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <MX_USART2_UART_Init+0x58>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a0c:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <MX_USART2_UART_Init+0x58>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a12:	4805      	ldr	r0, [pc, #20]	; (8003a28 <MX_USART2_UART_Init+0x58>)
 8003a14:	f009 f8dc 	bl	800cbd0 <HAL_UART_Init>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003a1e:	f001 f87b 	bl	8004b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000b1c 	.word	0x20000b1c
 8003a2c:	40004400 	.word	0x40004400

08003a30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a36:	4b26      	ldr	r3, [pc, #152]	; (8003ad0 <MX_DMA_Init+0xa0>)
 8003a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3a:	4a25      	ldr	r2, [pc, #148]	; (8003ad0 <MX_DMA_Init+0xa0>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6493      	str	r3, [r2, #72]	; 0x48
 8003a42:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <MX_DMA_Init+0xa0>)
 8003a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	607b      	str	r3, [r7, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003a4e:	4b20      	ldr	r3, [pc, #128]	; (8003ad0 <MX_DMA_Init+0xa0>)
 8003a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a52:	4a1f      	ldr	r2, [pc, #124]	; (8003ad0 <MX_DMA_Init+0xa0>)
 8003a54:	f043 0302 	orr.w	r3, r3, #2
 8003a58:	6493      	str	r3, [r2, #72]	; 0x48
 8003a5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <MX_DMA_Init+0xa0>)
 8003a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003a66:	2200      	movs	r2, #0
 8003a68:	2100      	movs	r1, #0
 8003a6a:	200d      	movs	r0, #13
 8003a6c:	f003 f83b 	bl	8006ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003a70:	200d      	movs	r0, #13
 8003a72:	f003 f854 	bl	8006b1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003a76:	2200      	movs	r2, #0
 8003a78:	2100      	movs	r1, #0
 8003a7a:	200e      	movs	r0, #14
 8003a7c:	f003 f833 	bl	8006ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003a80:	200e      	movs	r0, #14
 8003a82:	f003 f84c 	bl	8006b1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003a86:	2200      	movs	r2, #0
 8003a88:	2100      	movs	r1, #0
 8003a8a:	200f      	movs	r0, #15
 8003a8c:	f003 f82b 	bl	8006ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003a90:	200f      	movs	r0, #15
 8003a92:	f003 f844 	bl	8006b1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8003a96:	2200      	movs	r2, #0
 8003a98:	2100      	movs	r1, #0
 8003a9a:	2010      	movs	r0, #16
 8003a9c:	f003 f823 	bl	8006ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003aa0:	2010      	movs	r0, #16
 8003aa2:	f003 f83c 	bl	8006b1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 3, 0);
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2103      	movs	r1, #3
 8003aaa:	2011      	movs	r0, #17
 8003aac:	f003 f81b 	bl	8006ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003ab0:	2011      	movs	r0, #17
 8003ab2:	f003 f834 	bl	8006b1e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2100      	movs	r1, #0
 8003aba:	2044      	movs	r0, #68	; 0x44
 8003abc:	f003 f813 	bl	8006ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8003ac0:	2044      	movs	r0, #68	; 0x44
 8003ac2:	f003 f82c 	bl	8006b1e <HAL_NVIC_EnableIRQ>

}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40021000 	.word	0x40021000

08003ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08a      	sub	sp, #40	; 0x28
 8003ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ada:	f107 0314 	add.w	r3, r7, #20
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	605a      	str	r2, [r3, #4]
 8003ae4:	609a      	str	r2, [r3, #8]
 8003ae6:	60da      	str	r2, [r3, #12]
 8003ae8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aea:	4b6f      	ldr	r3, [pc, #444]	; (8003ca8 <MX_GPIO_Init+0x1d4>)
 8003aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aee:	4a6e      	ldr	r2, [pc, #440]	; (8003ca8 <MX_GPIO_Init+0x1d4>)
 8003af0:	f043 0304 	orr.w	r3, r3, #4
 8003af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003af6:	4b6c      	ldr	r3, [pc, #432]	; (8003ca8 <MX_GPIO_Init+0x1d4>)
 8003af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b02:	4b69      	ldr	r3, [pc, #420]	; (8003ca8 <MX_GPIO_Init+0x1d4>)
 8003b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b06:	4a68      	ldr	r2, [pc, #416]	; (8003ca8 <MX_GPIO_Init+0x1d4>)
 8003b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b0e:	4b66      	ldr	r3, [pc, #408]	; (8003ca8 <MX_GPIO_Init+0x1d4>)
 8003b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b1a:	4b63      	ldr	r3, [pc, #396]	; (8003ca8 <MX_GPIO_Init+0x1d4>)
 8003b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1e:	4a62      	ldr	r2, [pc, #392]	; (8003ca8 <MX_GPIO_Init+0x1d4>)
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b26:	4b60      	ldr	r3, [pc, #384]	; (8003ca8 <MX_GPIO_Init+0x1d4>)
 8003b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	60bb      	str	r3, [r7, #8]
 8003b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b32:	4b5d      	ldr	r3, [pc, #372]	; (8003ca8 <MX_GPIO_Init+0x1d4>)
 8003b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b36:	4a5c      	ldr	r2, [pc, #368]	; (8003ca8 <MX_GPIO_Init+0x1d4>)
 8003b38:	f043 0302 	orr.w	r3, r3, #2
 8003b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b3e:	4b5a      	ldr	r3, [pc, #360]	; (8003ca8 <MX_GPIO_Init+0x1d4>)
 8003b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	607b      	str	r3, [r7, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b4a:	4b57      	ldr	r3, [pc, #348]	; (8003ca8 <MX_GPIO_Init+0x1d4>)
 8003b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4e:	4a56      	ldr	r2, [pc, #344]	; (8003ca8 <MX_GPIO_Init+0x1d4>)
 8003b50:	f043 0308 	orr.w	r3, r3, #8
 8003b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b56:	4b54      	ldr	r3, [pc, #336]	; (8003ca8 <MX_GPIO_Init+0x1d4>)
 8003b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIK_LED_Pin|ERR_LED_Pin, GPIO_PIN_RESET);
 8003b62:	2200      	movs	r2, #0
 8003b64:	2109      	movs	r1, #9
 8003b66:	4851      	ldr	r0, [pc, #324]	; (8003cac <MX_GPIO_Init+0x1d8>)
 8003b68:	f003 fc48 	bl	80073fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	2110      	movs	r1, #16
 8003b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b74:	f003 fc42 	bl	80073fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|SPI1_DC_Pin, GPIO_PIN_SET);
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8003b7e:	484c      	ldr	r0, [pc, #304]	; (8003cb0 <MX_GPIO_Init+0x1dc>)
 8003b80:	f003 fc3c 	bl	80073fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8003b84:	2201      	movs	r2, #1
 8003b86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b8a:	4848      	ldr	r0, [pc, #288]	; (8003cac <MX_GPIO_Init+0x1d8>)
 8003b8c:	f003 fc36 	bl	80073fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_SET);
 8003b90:	2201      	movs	r2, #1
 8003b92:	2104      	movs	r1, #4
 8003b94:	4847      	ldr	r0, [pc, #284]	; (8003cb4 <MX_GPIO_Init+0x1e0>)
 8003b96:	f003 fc31 	bl	80073fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TIK_LED_Pin */
  GPIO_InitStruct.Pin = TIK_LED_Pin;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIK_LED_GPIO_Port, &GPIO_InitStruct);
 8003baa:	f107 0314 	add.w	r3, r7, #20
 8003bae:	4619      	mov	r1, r3
 8003bb0:	483e      	ldr	r0, [pc, #248]	; (8003cac <MX_GPIO_Init+0x1d8>)
 8003bb2:	f003 fa61 	bl	8007078 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 8003bb6:	2306      	movs	r3, #6
 8003bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003bba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bc4:	f107 0314 	add.w	r3, r7, #20
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4838      	ldr	r0, [pc, #224]	; (8003cac <MX_GPIO_Init+0x1d8>)
 8003bcc:	f003 fa54 	bl	8007078 <HAL_GPIO_Init>

  /*Configure GPIO pin : ERR_LED_Pin */
  GPIO_InitStruct.Pin = ERR_LED_Pin;
 8003bd0:	2308      	movs	r3, #8
 8003bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERR_LED_GPIO_Port, &GPIO_InitStruct);
 8003be0:	f107 0314 	add.w	r3, r7, #20
 8003be4:	4619      	mov	r1, r3
 8003be6:	4831      	ldr	r0, [pc, #196]	; (8003cac <MX_GPIO_Init+0x1d8>)
 8003be8:	f003 fa46 	bl	8007078 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8003bec:	2310      	movs	r3, #16
 8003bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003bfc:	f107 0314 	add.w	r3, r7, #20
 8003c00:	4619      	mov	r1, r3
 8003c02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c06:	f003 fa37 	bl	8007078 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8003c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c10:	2301      	movs	r3, #1
 8003c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c14:	2301      	movs	r3, #1
 8003c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c18:	2302      	movs	r3, #2
 8003c1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8003c1c:	f107 0314 	add.w	r3, r7, #20
 8003c20:	4619      	mov	r1, r3
 8003c22:	4823      	ldr	r0, [pc, #140]	; (8003cb0 <MX_GPIO_Init+0x1dc>)
 8003c24:	f003 fa28 	bl	8007078 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8003c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c32:	2301      	movs	r3, #1
 8003c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003c36:	2301      	movs	r3, #1
 8003c38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8003c3a:	f107 0314 	add.w	r3, r7, #20
 8003c3e:	4619      	mov	r1, r3
 8003c40:	481a      	ldr	r0, [pc, #104]	; (8003cac <MX_GPIO_Init+0x1d8>)
 8003c42:	f003 fa19 	bl	8007078 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_RST_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin;
 8003c46:	2304      	movs	r3, #4
 8003c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c52:	2302      	movs	r3, #2
 8003c54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_RST_GPIO_Port, &GPIO_InitStruct);
 8003c56:	f107 0314 	add.w	r3, r7, #20
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4815      	ldr	r0, [pc, #84]	; (8003cb4 <MX_GPIO_Init+0x1e0>)
 8003c5e:	f003 fa0b 	bl	8007078 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_DC_Pin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin;
 8003c62:	2320      	movs	r3, #32
 8003c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c66:	2301      	movs	r3, #1
 8003c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_DC_GPIO_Port, &GPIO_InitStruct);
 8003c72:	f107 0314 	add.w	r3, r7, #20
 8003c76:	4619      	mov	r1, r3
 8003c78:	480d      	ldr	r0, [pc, #52]	; (8003cb0 <MX_GPIO_Init+0x1dc>)
 8003c7a:	f003 f9fd 	bl	8007078 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2100      	movs	r1, #0
 8003c82:	2007      	movs	r0, #7
 8003c84:	f002 ff2f 	bl	8006ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003c88:	2007      	movs	r0, #7
 8003c8a:	f002 ff48 	bl	8006b1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2100      	movs	r1, #0
 8003c92:	2008      	movs	r0, #8
 8003c94:	f002 ff27 	bl	8006ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003c98:	2008      	movs	r0, #8
 8003c9a:	f002 ff40 	bl	8006b1e <HAL_NVIC_EnableIRQ>

}
 8003c9e:	bf00      	nop
 8003ca0:	3728      	adds	r7, #40	; 0x28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	48000800 	.word	0x48000800
 8003cb0:	48000400 	.word	0x48000400
 8003cb4:	48000c00 	.word	0x48000c00

08003cb8 <hexToBin>:

//-------------------------------------------------------------------------------------------
//      Преобразует два символа строки из hex-формата в двоичный
//
uint8_t hexToBin(char *sc)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
char st = 0, ml = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	73fb      	strb	r3, [r7, #15]
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	73bb      	strb	r3, [r7, #14]

	if ((sc[0] >= '0') && (sc[0] <= '9')) st = (sc[0] - 0x30);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b2f      	cmp	r3, #47	; 0x2f
 8003cce:	d908      	bls.n	8003ce2 <hexToBin+0x2a>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b39      	cmp	r3, #57	; 0x39
 8003cd6:	d804      	bhi.n	8003ce2 <hexToBin+0x2a>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	3b30      	subs	r3, #48	; 0x30
 8003cde:	73fb      	strb	r3, [r7, #15]
 8003ce0:	e018      	b.n	8003d14 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'A') && (sc[0] <= 'F')) st = (sc[0] - 0x37);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b40      	cmp	r3, #64	; 0x40
 8003ce8:	d908      	bls.n	8003cfc <hexToBin+0x44>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b46      	cmp	r3, #70	; 0x46
 8003cf0:	d804      	bhi.n	8003cfc <hexToBin+0x44>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	3b37      	subs	r3, #55	; 0x37
 8003cf8:	73fb      	strb	r3, [r7, #15]
 8003cfa:	e00b      	b.n	8003d14 <hexToBin+0x5c>
	else
	if ((sc[0] >= 'a') && (sc[0] <= 'f')) st = (sc[0] - 0x57);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b60      	cmp	r3, #96	; 0x60
 8003d02:	d907      	bls.n	8003d14 <hexToBin+0x5c>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	2b66      	cmp	r3, #102	; 0x66
 8003d0a:	d803      	bhi.n	8003d14 <hexToBin+0x5c>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	3b57      	subs	r3, #87	; 0x57
 8003d12:	73fb      	strb	r3, [r7, #15]

	if ((sc[1] >= '0') && (sc[1] <= '9')) ml = (sc[1] - 0x30);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3301      	adds	r3, #1
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b2f      	cmp	r3, #47	; 0x2f
 8003d1c:	d90a      	bls.n	8003d34 <hexToBin+0x7c>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3301      	adds	r3, #1
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	2b39      	cmp	r3, #57	; 0x39
 8003d26:	d805      	bhi.n	8003d34 <hexToBin+0x7c>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	3b30      	subs	r3, #48	; 0x30
 8003d30:	73bb      	strb	r3, [r7, #14]
 8003d32:	e01e      	b.n	8003d72 <hexToBin+0xba>
	else
	if ((sc[1] >= 'A') && (sc[1] <= 'F')) ml = (sc[1] - 0x37);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3301      	adds	r3, #1
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b40      	cmp	r3, #64	; 0x40
 8003d3c:	d90a      	bls.n	8003d54 <hexToBin+0x9c>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3301      	adds	r3, #1
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b46      	cmp	r3, #70	; 0x46
 8003d46:	d805      	bhi.n	8003d54 <hexToBin+0x9c>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	3b37      	subs	r3, #55	; 0x37
 8003d50:	73bb      	strb	r3, [r7, #14]
 8003d52:	e00e      	b.n	8003d72 <hexToBin+0xba>
	else
	if ((sc[1] >= 'a') && (sc[1] <= 'f')) ml = (sc[1] - 0x57);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3301      	adds	r3, #1
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b60      	cmp	r3, #96	; 0x60
 8003d5c:	d909      	bls.n	8003d72 <hexToBin+0xba>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3301      	adds	r3, #1
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b66      	cmp	r3, #102	; 0x66
 8003d66:	d804      	bhi.n	8003d72 <hexToBin+0xba>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	3b57      	subs	r3, #87	; 0x57
 8003d70:	73bb      	strb	r3, [r7, #14]

	return ((st << 4) | (ml & 0x0f));
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	b25a      	sxtb	r2, r3
 8003d78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	b25b      	sxtb	r3, r3
 8003d82:	4313      	orrs	r3, r2
 8003d84:	b25b      	sxtb	r3, r3
 8003d86:	b2db      	uxtb	r3, r3

}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <getEvtCount>:


#ifdef SET_FIFO_MODE
//-------------------------------------------------------------------------------------------
uint8_t getEvtCount()
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
	return cnt_evt;
 8003d98:	4b03      	ldr	r3, [pc, #12]	; (8003da8 <getEvtCount+0x14>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	20001882 	.word	0x20001882

08003dac <putEvt>:
//-------------------------------------------------------------------------------------------
void putEvt(int evt)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]

	//while (lock_fifo);
	//lock_fifo = true;

	if (cnt_evt > (MAX_FIFO_SIZE - 3)) {
 8003db4:	4b30      	ldr	r3, [pc, #192]	; (8003e78 <putEvt+0xcc>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b3d      	cmp	r3, #61	; 0x3d
 8003dba:	d907      	bls.n	8003dcc <putEvt+0x20>
		devError |= devFIFO;
 8003dbc:	4b2f      	ldr	r3, [pc, #188]	; (8003e7c <putEvt+0xd0>)
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	f043 0310 	orr.w	r3, r3, #16
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	4b2d      	ldr	r3, [pc, #180]	; (8003e7c <putEvt+0xd0>)
 8003dc8:	801a      	strh	r2, [r3, #0]
		//lock_fifo = false;
		return;
 8003dca:	e051      	b.n	8003e70 <putEvt+0xc4>
	}

	HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003dcc:	2026      	movs	r0, #38	; 0x26
 8003dce:	f002 feb4 	bl	8006b3a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8003dd2:	201e      	movs	r0, #30
 8003dd4:	f002 feb1 	bl	8006b3a <HAL_NVIC_DisableIRQ>

	if (cnt_evt >= MAX_FIFO_SIZE) {
 8003dd8:	4b27      	ldr	r3, [pc, #156]	; (8003e78 <putEvt+0xcc>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2b3f      	cmp	r3, #63	; 0x3f
 8003dde:	d906      	bls.n	8003dee <putEvt+0x42>
			wr_evt_err++;
 8003de0:	4b27      	ldr	r3, [pc, #156]	; (8003e80 <putEvt+0xd4>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	3301      	adds	r3, #1
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	4b25      	ldr	r3, [pc, #148]	; (8003e80 <putEvt+0xd4>)
 8003dea:	701a      	strb	r2, [r3, #0]
 8003dec:	e027      	b.n	8003e3e <putEvt+0x92>
		} else {
			evt_fifo[wr_evt_adr] = evt;
 8003dee:	4b25      	ldr	r3, [pc, #148]	; (8003e84 <putEvt+0xd8>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	4619      	mov	r1, r3
 8003df4:	4a24      	ldr	r2, [pc, #144]	; (8003e88 <putEvt+0xdc>)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			cnt_evt++;
 8003dfc:	4b1e      	ldr	r3, [pc, #120]	; (8003e78 <putEvt+0xcc>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	3301      	adds	r3, #1
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	4b1c      	ldr	r3, [pc, #112]	; (8003e78 <putEvt+0xcc>)
 8003e06:	701a      	strb	r2, [r3, #0]
			if (wr_evt_adr < (MAX_FIFO_SIZE - 1) ) {
 8003e08:	4b1e      	ldr	r3, [pc, #120]	; (8003e84 <putEvt+0xd8>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b3e      	cmp	r3, #62	; 0x3e
 8003e0e:	d806      	bhi.n	8003e1e <putEvt+0x72>
				wr_evt_adr++;
 8003e10:	4b1c      	ldr	r3, [pc, #112]	; (8003e84 <putEvt+0xd8>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	3301      	adds	r3, #1
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	4b1a      	ldr	r3, [pc, #104]	; (8003e84 <putEvt+0xd8>)
 8003e1a:	701a      	strb	r2, [r3, #0]
 8003e1c:	e002      	b.n	8003e24 <putEvt+0x78>
			} else  {
				wr_evt_adr = 0;
 8003e1e:	4b19      	ldr	r3, [pc, #100]	; (8003e84 <putEvt+0xd8>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	701a      	strb	r2, [r3, #0]
			}
			wr_evt_err = 0;
 8003e24:	4b16      	ldr	r3, [pc, #88]	; (8003e80 <putEvt+0xd4>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	701a      	strb	r2, [r3, #0]
			if (cnt_evt > max_evt) max_evt = cnt_evt;
 8003e2a:	4b13      	ldr	r3, [pc, #76]	; (8003e78 <putEvt+0xcc>)
 8003e2c:	781a      	ldrb	r2, [r3, #0]
 8003e2e:	4b17      	ldr	r3, [pc, #92]	; (8003e8c <putEvt+0xe0>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d903      	bls.n	8003e3e <putEvt+0x92>
 8003e36:	4b10      	ldr	r3, [pc, #64]	; (8003e78 <putEvt+0xcc>)
 8003e38:	781a      	ldrb	r2, [r3, #0]
 8003e3a:	4b14      	ldr	r3, [pc, #80]	; (8003e8c <putEvt+0xe0>)
 8003e3c:	701a      	strb	r2, [r3, #0]
		}

		if (wr_evt_err) devError |= devFIFO;
 8003e3e:	4b10      	ldr	r3, [pc, #64]	; (8003e80 <putEvt+0xd4>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d007      	beq.n	8003e56 <putEvt+0xaa>
 8003e46:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <putEvt+0xd0>)
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	f043 0310 	orr.w	r3, r3, #16
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <putEvt+0xd0>)
 8003e52:	801a      	strh	r2, [r3, #0]
 8003e54:	e006      	b.n	8003e64 <putEvt+0xb8>
				   else devError &= ~devFIFO;
 8003e56:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <putEvt+0xd0>)
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	f023 0310 	bic.w	r3, r3, #16
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <putEvt+0xd0>)
 8003e62:	801a      	strh	r2, [r3, #0]

		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003e64:	201e      	movs	r0, #30
 8003e66:	f002 fe5a 	bl	8006b1e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e6a:	2026      	movs	r0, #38	; 0x26
 8003e6c:	f002 fe57 	bl	8006b1e <HAL_NVIC_EnableIRQ>

		//lock_fifo = false;
}
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20001882 	.word	0x20001882
 8003e7c:	20001468 	.word	0x20001468
 8003e80:	20001881 	.word	0x20001881
 8003e84:	20001880 	.word	0x20001880
 8003e88:	200000a4 	.word	0x200000a4
 8003e8c:	20001883 	.word	0x20001883

08003e90 <getEvt>:
//-------------------------------------------------------------------------------------------
int getEvt()
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
int ret = evt_None;
 8003e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e9a:	607b      	str	r3, [r7, #4]

	//while (lock_fifo);
	//lock_fifo = true;

	HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003e9c:	2026      	movs	r0, #38	; 0x26
 8003e9e:	f002 fe4c 	bl	8006b3a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8003ea2:	201e      	movs	r0, #30
 8003ea4:	f002 fe49 	bl	8006b3a <HAL_NVIC_DisableIRQ>
	if (cnt_evt) {
 8003ea8:	4b16      	ldr	r3, [pc, #88]	; (8003f04 <getEvt+0x74>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d01e      	beq.n	8003eee <getEvt+0x5e>
		ret = evt_fifo[rd_evt_adr];
 8003eb0:	4b15      	ldr	r3, [pc, #84]	; (8003f08 <getEvt+0x78>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4b15      	ldr	r3, [pc, #84]	; (8003f0c <getEvt+0x7c>)
 8003eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ebc:	607b      	str	r3, [r7, #4]
		if (cnt_evt) cnt_evt--;
 8003ebe:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <getEvt+0x74>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d005      	beq.n	8003ed2 <getEvt+0x42>
 8003ec6:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <getEvt+0x74>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	4b0d      	ldr	r3, [pc, #52]	; (8003f04 <getEvt+0x74>)
 8003ed0:	701a      	strb	r2, [r3, #0]
		if (rd_evt_adr < (MAX_FIFO_SIZE - 1) ) {
 8003ed2:	4b0d      	ldr	r3, [pc, #52]	; (8003f08 <getEvt+0x78>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b3e      	cmp	r3, #62	; 0x3e
 8003ed8:	d806      	bhi.n	8003ee8 <getEvt+0x58>
			rd_evt_adr++;
 8003eda:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <getEvt+0x78>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <getEvt+0x78>)
 8003ee4:	701a      	strb	r2, [r3, #0]
 8003ee6:	e002      	b.n	8003eee <getEvt+0x5e>
		} else {
			rd_evt_adr = 0;
 8003ee8:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <getEvt+0x78>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	701a      	strb	r2, [r3, #0]
		}
	}

	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003eee:	201e      	movs	r0, #30
 8003ef0:	f002 fe15 	bl	8006b1e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ef4:	2026      	movs	r0, #38	; 0x26
 8003ef6:	f002 fe12 	bl	8006b1e <HAL_NVIC_EnableIRQ>

	//lock_fifo = false;

	return ret;
 8003efa:	687b      	ldr	r3, [r7, #4]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20001882 	.word	0x20001882
 8003f08:	2000187f 	.word	0x2000187f
 8003f0c:	200000a4 	.word	0x200000a4

08003f10 <nameStation>:
//-------------------------------------------------------------------------------------------
#ifdef SET_DISPLAY

//-------------------------------------------------------------------------------------------
const char *nameStation(float fr)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	ed87 0a01 	vstr	s0, [r7, #4]
int8_t ik = -1;
 8003f1a:	23ff      	movs	r3, #255	; 0xff
 8003f1c:	73fb      	strb	r3, [r7, #15]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 8003f1e:	2300      	movs	r3, #0
 8003f20:	73bb      	strb	r3, [r7, #14]
 8003f22:	e016      	b.n	8003f52 <nameStation+0x42>
		if (list[i].freq == fr) {
 8003f24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f28:	4a16      	ldr	r2, [pc, #88]	; (8003f84 <nameStation+0x74>)
 8003f2a:	015b      	lsls	r3, r3, #5
 8003f2c:	4413      	add	r3, r2
 8003f2e:	edd3 7a00 	vldr	s15, [r3]
 8003f32:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f36:	eeb4 7a67 	vcmp.f32	s14, s15
 8003f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f3e:	d102      	bne.n	8003f46 <nameStation+0x36>
			ik = i;
 8003f40:	7bbb      	ldrb	r3, [r7, #14]
 8003f42:	73fb      	strb	r3, [r7, #15]
			break;
 8003f44:	e009      	b.n	8003f5a <nameStation+0x4a>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 8003f46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	73bb      	strb	r3, [r7, #14]
 8003f52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f56:	2b17      	cmp	r3, #23
 8003f58:	dde4      	ble.n	8003f24 <nameStation+0x14>
		}
	}

	if (ik != -1) return list[ik].name;
 8003f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f62:	d006      	beq.n	8003f72 <nameStation+0x62>
 8003f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f68:	015b      	lsls	r3, r3, #5
 8003f6a:	4a06      	ldr	r2, [pc, #24]	; (8003f84 <nameStation+0x74>)
 8003f6c:	4413      	add	r3, r2
 8003f6e:	3304      	adds	r3, #4
 8003f70:	e001      	b.n	8003f76 <nameStation+0x66>
			 else return noneStation;
 8003f72:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <nameStation+0x78>)
 8003f74:	681b      	ldr	r3, [r3, #0]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	20003ce8 	.word	0x20003ce8
 8003f88:	200001d0 	.word	0x200001d0

08003f8c <getNextList>:
//-------------------------------------------------------------------------------------------
float getNextList(float fr)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	ed87 0a01 	vstr	s0, [r7, #4]
float ret = fr;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	60bb      	str	r3, [r7, #8]
int8_t ik = -1;
 8003f9a:	23ff      	movs	r3, #255	; 0xff
 8003f9c:	73fb      	strb	r3, [r7, #15]

	for (int8_t i = 0; i < MAX_LIST; i++) {
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	73bb      	strb	r3, [r7, #14]
 8003fa2:	e016      	b.n	8003fd2 <getNextList+0x46>
		if (list[i].freq == fr) {
 8003fa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fa8:	4a2f      	ldr	r2, [pc, #188]	; (8004068 <getNextList+0xdc>)
 8003faa:	015b      	lsls	r3, r3, #5
 8003fac:	4413      	add	r3, r2
 8003fae:	edd3 7a00 	vldr	s15, [r3]
 8003fb2:	ed97 7a01 	vldr	s14, [r7, #4]
 8003fb6:	eeb4 7a67 	vcmp.f32	s14, s15
 8003fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fbe:	d102      	bne.n	8003fc6 <getNextList+0x3a>
			ik = i;
 8003fc0:	7bbb      	ldrb	r3, [r7, #14]
 8003fc2:	73fb      	strb	r3, [r7, #15]
			break;
 8003fc4:	e009      	b.n	8003fda <getNextList+0x4e>
	for (int8_t i = 0; i < MAX_LIST; i++) {
 8003fc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	3301      	adds	r3, #1
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	73bb      	strb	r3, [r7, #14]
 8003fd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fd6:	2b17      	cmp	r3, #23
 8003fd8:	dde4      	ble.n	8003fa4 <getNextList+0x18>
		}
	}
	if (ik != -1) {
 8003fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fe2:	d00a      	beq.n	8003ffa <getNextList+0x6e>
		if (++ik == MAX_LIST) ik = 0;
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	73fb      	strb	r3, [r7, #15]
 8003fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ff0:	2b18      	cmp	r3, #24
 8003ff2:	d127      	bne.n	8004044 <getNextList+0xb8>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	73fb      	strb	r3, [r7, #15]
 8003ff8:	e024      	b.n	8004044 <getNextList+0xb8>
	} else {
		for (int8_t i = 0; i < MAX_LIST; i++) {
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	737b      	strb	r3, [r7, #13]
 8003ffe:	e016      	b.n	800402e <getNextList+0xa2>
			if (list[i].freq > fr) {
 8004000:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004004:	4a18      	ldr	r2, [pc, #96]	; (8004068 <getNextList+0xdc>)
 8004006:	015b      	lsls	r3, r3, #5
 8004008:	4413      	add	r3, r2
 800400a:	edd3 7a00 	vldr	s15, [r3]
 800400e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004012:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800401a:	d502      	bpl.n	8004022 <getNextList+0x96>
				ik = i;
 800401c:	7b7b      	ldrb	r3, [r7, #13]
 800401e:	73fb      	strb	r3, [r7, #15]
				break;
 8004020:	e009      	b.n	8004036 <getNextList+0xaa>
		for (int8_t i = 0; i < MAX_LIST; i++) {
 8004022:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	3301      	adds	r3, #1
 800402a:	b2db      	uxtb	r3, r3
 800402c:	737b      	strb	r3, [r7, #13]
 800402e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004032:	2b17      	cmp	r3, #23
 8004034:	dde4      	ble.n	8004000 <getNextList+0x74>
			}
		}
		if (ik == -1) ik = 0;
 8004036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800403a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800403e:	d101      	bne.n	8004044 <getNextList+0xb8>
 8004040:	2300      	movs	r3, #0
 8004042:	73fb      	strb	r3, [r7, #15]
	}
	ret = list[ik].freq;
 8004044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004048:	4a07      	ldr	r2, [pc, #28]	; (8004068 <getNextList+0xdc>)
 800404a:	015b      	lsls	r3, r3, #5
 800404c:	4413      	add	r3, r2
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60bb      	str	r3, [r7, #8]

	return ret;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	ee07 3a90 	vmov	s15, r3
}
 8004058:	eeb0 0a67 	vmov.f32	s0, s15
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	20003ce8 	.word	0x20003ce8

0800406c <showLine>:
//-------------------------------------------------------------------------------------------
void showLine(char *msg, uint16_t lin, int *last_len, bool update)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08a      	sub	sp, #40	; 0x28
 8004070:	af02      	add	r7, sp, #8
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	607a      	str	r2, [r7, #4]
 8004076:	461a      	mov	r2, r3
 8004078:	460b      	mov	r3, r1
 800407a:	817b      	strh	r3, [r7, #10]
 800407c:	4613      	mov	r3, r2
 800407e:	727b      	strb	r3, [r7, #9]
int il = strlen(msg);
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f7fc f8a5 	bl	80001d0 <strlen>
 8004086:	4603      	mov	r3, r0
 8004088:	617b      	str	r3, [r7, #20]
int xf = ( (SCREEN_WIDTH - (lfnt->FontWidth * il) ) >> 1);// & 0x7f;
 800408a:	4b2e      	ldr	r3, [pc, #184]	; (8004144 <showLine+0xd8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	fb02 f303 	mul.w	r3, r2, r3
 8004098:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800409c:	105b      	asrs	r3, r3, #1
 800409e:	61fb      	str	r3, [r7, #28]
bool yes = false;
 80040a0:	2300      	movs	r3, #0
 80040a2:	76fb      	strb	r3, [r7, #27]

	if (*last_len > il) {
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	da0d      	bge.n	80040ca <showLine+0x5e>
		ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 80040ae:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80040b2:	4b24      	ldr	r3, [pc, #144]	; (8004144 <showLine+0xd8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	785b      	ldrb	r3, [r3, #1]
 80040b8:	b21b      	sxth	r3, r3
 80040ba:	2200      	movs	r2, #0
 80040bc:	9200      	str	r2, [sp, #0]
 80040be:	227c      	movs	r2, #124	; 0x7c
 80040c0:	2002      	movs	r0, #2
 80040c2:	f7fd fdac 	bl	8001c1e <ST7565_DrawFilledRectangle>
		yes = true;
 80040c6:	2301      	movs	r3, #1
 80040c8:	76fb      	strb	r3, [r7, #27]
	}
	*last_len = il;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	601a      	str	r2, [r3, #0]
	if (*msg > 0x7f) {
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	b25b      	sxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	da03      	bge.n	80040e2 <showLine+0x76>
		xf += il;
 80040da:	69fa      	ldr	r2, [r7, #28]
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	4413      	add	r3, r2
 80040e0:	61fb      	str	r3, [r7, #28]
	}
	if (!yes) ST7565_DrawFilledRectangle(2, lin, SCREEN_WIDTH - 4, lfnt->FontHeight, PIX_OFF);
 80040e2:	7efb      	ldrb	r3, [r7, #27]
 80040e4:	f083 0301 	eor.w	r3, r3, #1
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00b      	beq.n	8004106 <showLine+0x9a>
 80040ee:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80040f2:	4b14      	ldr	r3, [pc, #80]	; (8004144 <showLine+0xd8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	785b      	ldrb	r3, [r3, #1]
 80040f8:	b21b      	sxth	r3, r3
 80040fa:	2200      	movs	r2, #0
 80040fc:	9200      	str	r2, [sp, #0]
 80040fe:	227c      	movs	r2, #124	; 0x7c
 8004100:	2002      	movs	r0, #2
 8004102:	f7fd fd8c 	bl	8001c1e <ST7565_DrawFilledRectangle>

	if ((!xf) || (xf > (SCREEN_WIDTH - 4))) xf = 1;
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <showLine+0xa6>
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	2b7c      	cmp	r3, #124	; 0x7c
 8004110:	dd01      	ble.n	8004116 <showLine+0xaa>
 8004112:	2301      	movs	r3, #1
 8004114:	61fb      	str	r3, [r7, #28]
	ST7565_Print(xf, lin, msg, lfnt, 1, PIX_ON);
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	b218      	sxth	r0, r3
 800411a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800411e:	4b09      	ldr	r3, [pc, #36]	; (8004144 <showLine+0xd8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2201      	movs	r2, #1
 8004124:	9201      	str	r2, [sp, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	9200      	str	r2, [sp, #0]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	f7fd fb1e 	bl	800176c <ST7565_Print>
	if (update) ST7565_Update();
 8004130:	7a7b      	ldrb	r3, [r7, #9]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <showLine+0xce>
 8004136:	f7fd f969 	bl	800140c <ST7565_Update>
}
 800413a:	bf00      	nop
 800413c:	3720      	adds	r7, #32
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20003cd0 	.word	0x20003cd0

08004148 <errLedOn>:
#endif
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	71fb      	strb	r3, [r7, #7]
	if (on)
 8004152:	79fb      	ldrb	r3, [r7, #7]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <errLedOn+0x1c>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_SET);//LED ON
 8004158:	2201      	movs	r2, #1
 800415a:	2108      	movs	r1, #8
 800415c:	4806      	ldr	r0, [pc, #24]	; (8004178 <errLedOn+0x30>)
 800415e:	f003 f94d 	bl	80073fc <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
}
 8004162:	e004      	b.n	800416e <errLedOn+0x26>
		HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);//LED OFF
 8004164:	2200      	movs	r2, #0
 8004166:	2108      	movs	r1, #8
 8004168:	4803      	ldr	r0, [pc, #12]	; (8004178 <errLedOn+0x30>)
 800416a:	f003 f947 	bl	80073fc <HAL_GPIO_WritePin>
}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	48000800 	.word	0x48000800

0800417c <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
	return secCounter;
 8004180:	4b03      	ldr	r3, [pc, #12]	; (8004190 <get_secCounter+0x14>)
 8004182:	681b      	ldr	r3, [r3, #0]
}
 8004184:	4618      	mov	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	2000146c 	.word	0x2000146c

08004194 <set_Date>:

    for (i = 0; i < strlen(st); i++) *(st + i) = toupper(*(st + i));
}
//------------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b094      	sub	sp, #80	; 0x50
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	2000      	movs	r0, #0
 80041a0:	460a      	mov	r2, r1
 80041a2:	4603      	mov	r3, r0
 80041a4:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 80041a8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80041ac:	f107 0320 	add.w	r3, r7, #32
 80041b0:	4611      	mov	r1, r2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f00d fbb0 	bl	8011918 <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 80041b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 80041be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	3301      	adds	r3, #1
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 80041c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 80041ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 80041d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <set_Date+0xb0>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	4413      	add	r3, r2
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 80041e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 80041e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 80041ee:	f107 030c 	add.w	r3, r7, #12
 80041f2:	2200      	movs	r2, #0
 80041f4:	4619      	mov	r1, r3
 80041f6:	4814      	ldr	r0, [pc, #80]	; (8004248 <set_Date+0xb4>)
 80041f8:	f006 f95f 	bl	800a4ba <HAL_RTC_SetTime>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <set_Date+0x7e>
 8004202:	4b12      	ldr	r3, [pc, #72]	; (800424c <set_Date+0xb8>)
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	f043 0308 	orr.w	r3, r3, #8
 800420a:	b29a      	uxth	r2, r3
 800420c:	4b0f      	ldr	r3, [pc, #60]	; (800424c <set_Date+0xb8>)
 800420e:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 8004210:	e014      	b.n	800423c <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8004212:	f107 0308 	add.w	r3, r7, #8
 8004216:	2200      	movs	r2, #0
 8004218:	4619      	mov	r1, r3
 800421a:	480b      	ldr	r0, [pc, #44]	; (8004248 <set_Date+0xb4>)
 800421c:	f006 fa46 	bl	800a6ac <HAL_RTC_SetDate>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d007      	beq.n	8004236 <set_Date+0xa2>
 8004226:	4b09      	ldr	r3, [pc, #36]	; (800424c <set_Date+0xb8>)
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	f043 0308 	orr.w	r3, r3, #8
 800422e:	b29a      	uxth	r2, r3
 8004230:	4b06      	ldr	r3, [pc, #24]	; (800424c <set_Date+0xb8>)
 8004232:	801a      	strh	r2, [r3, #0]
}
 8004234:	e002      	b.n	800423c <set_Date+0xa8>
			setDate = true;
 8004236:	4b06      	ldr	r3, [pc, #24]	; (8004250 <set_Date+0xbc>)
 8004238:	2201      	movs	r2, #1
 800423a:	701a      	strb	r2, [r3, #0]
}
 800423c:	bf00      	nop
 800423e:	3750      	adds	r7, #80	; 0x50
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	2000187e 	.word	0x2000187e
 8004248:	2000090c 	.word	0x2000090c
 800424c:	20001468 	.word	0x20001468
 8004250:	2000187d 	.word	0x2000187d

08004254 <sec2str>:

	return ep;
}
//------------------------------------------------------------------------------------------
int sec2str(char *st)
{
 8004254:	b590      	push	{r4, r7, lr}
 8004256:	b093      	sub	sp, #76	; 0x4c
 8004258:	af04      	add	r7, sp, #16
 800425a:	6078      	str	r0, [r7, #4]
int ret = 0;
 800425c:	2300      	movs	r3, #0
 800425e:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8004260:	4b40      	ldr	r3, [pc, #256]	; (8004364 <sec2str+0x110>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	f083 0301 	eor.w	r3, r3, #1
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d040      	beq.n	80042f0 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 800426e:	f7ff ff85 	bl	800417c <get_secCounter>
 8004272:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 8004274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004276:	4a3c      	ldr	r2, [pc, #240]	; (8004368 <sec2str+0x114>)
 8004278:	fba2 2303 	umull	r2, r3, r2, r3
 800427c:	0c1b      	lsrs	r3, r3, #16
 800427e:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8004280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004282:	4a39      	ldr	r2, [pc, #228]	; (8004368 <sec2str+0x114>)
 8004284:	fba2 1203 	umull	r1, r2, r2, r3
 8004288:	0c12      	lsrs	r2, r2, #16
 800428a:	4938      	ldr	r1, [pc, #224]	; (800436c <sec2str+0x118>)
 800428c:	fb01 f202 	mul.w	r2, r1, r2
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	4a36      	ldr	r2, [pc, #216]	; (8004370 <sec2str+0x11c>)
 8004298:	fba2 2303 	umull	r2, r3, r2, r3
 800429c:	0adb      	lsrs	r3, r3, #11
 800429e:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	4a33      	ldr	r2, [pc, #204]	; (8004370 <sec2str+0x11c>)
 80042a4:	fba2 1203 	umull	r1, r2, r2, r3
 80042a8:	0ad2      	lsrs	r2, r2, #11
 80042aa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80042ae:	fb01 f202 	mul.w	r2, r1, r2
 80042b2:	1a9b      	subs	r3, r3, r2
 80042b4:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	4a2e      	ldr	r2, [pc, #184]	; (8004374 <sec2str+0x120>)
 80042ba:	fba2 2303 	umull	r2, r3, r2, r3
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 80042c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c4:	4b2b      	ldr	r3, [pc, #172]	; (8004374 <sec2str+0x120>)
 80042c6:	fba3 1302 	umull	r1, r3, r3, r2
 80042ca:	0959      	lsrs	r1, r3, #5
 80042cc:	460b      	mov	r3, r1
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	1a5b      	subs	r3, r3, r1
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	9301      	str	r3, [sp, #4]
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042e4:	4924      	ldr	r1, [pc, #144]	; (8004378 <sec2str+0x124>)
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f00e f866 	bl	80123b8 <siprintf>
 80042ec:	6378      	str	r0, [r7, #52]	; 0x34
 80042ee:	e034      	b.n	800435a <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 80042f0:	f107 030c 	add.w	r3, r7, #12
 80042f4:	2200      	movs	r2, #0
 80042f6:	4619      	mov	r1, r3
 80042f8:	4820      	ldr	r0, [pc, #128]	; (800437c <sec2str+0x128>)
 80042fa:	f006 fa5e 	bl	800a7ba <HAL_RTC_GetDate>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d007      	beq.n	8004314 <sec2str+0xc0>
 8004304:	4b1e      	ldr	r3, [pc, #120]	; (8004380 <sec2str+0x12c>)
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	f043 0308 	orr.w	r3, r3, #8
 800430c:	b29a      	uxth	r2, r3
 800430e:	4b1c      	ldr	r3, [pc, #112]	; (8004380 <sec2str+0x12c>)
 8004310:	801a      	strh	r2, [r3, #0]
 8004312:	e022      	b.n	800435a <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 8004314:	f107 0310 	add.w	r3, r7, #16
 8004318:	2200      	movs	r2, #0
 800431a:	4619      	mov	r1, r3
 800431c:	4817      	ldr	r0, [pc, #92]	; (800437c <sec2str+0x128>)
 800431e:	f006 f969 	bl	800a5f4 <HAL_RTC_GetTime>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d007      	beq.n	8004338 <sec2str+0xe4>
 8004328:	4b15      	ldr	r3, [pc, #84]	; (8004380 <sec2str+0x12c>)
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	f043 0308 	orr.w	r3, r3, #8
 8004330:	b29a      	uxth	r2, r3
 8004332:	4b13      	ldr	r3, [pc, #76]	; (8004380 <sec2str+0x12c>)
 8004334:	801a      	strh	r2, [r3, #0]
 8004336:	e010      	b.n	800435a <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 8004338:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 800433a:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 800433c:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 800433e:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8004340:	7c3b      	ldrb	r3, [r7, #16]
 8004342:	7c7a      	ldrb	r2, [r7, #17]
 8004344:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8004346:	9102      	str	r1, [sp, #8]
 8004348:	9201      	str	r2, [sp, #4]
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	4623      	mov	r3, r4
 800434e:	4602      	mov	r2, r0
 8004350:	490c      	ldr	r1, [pc, #48]	; (8004384 <sec2str+0x130>)
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f00e f830 	bl	80123b8 <siprintf>
 8004358:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 800435a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800435c:	4618      	mov	r0, r3
 800435e:	373c      	adds	r7, #60	; 0x3c
 8004360:	46bd      	mov	sp, r7
 8004362:	bd90      	pop	{r4, r7, pc}
 8004364:	2000187d 	.word	0x2000187d
 8004368:	c22e4507 	.word	0xc22e4507
 800436c:	00015180 	.word	0x00015180
 8004370:	91a2b3c5 	.word	0x91a2b3c5
 8004374:	88888889 	.word	0x88888889
 8004378:	080168a8 	.word	0x080168a8
 800437c:	2000090c 	.word	0x2000090c
 8004380:	20001468 	.word	0x20001468
 8004384:	080168c0 	.word	0x080168c0

08004388 <Report>:
//--------------------------------------------------------------------------------------------
void Report(const uint8_t addTime, const char *fmt, ...)
{
 8004388:	b40e      	push	{r1, r2, r3}
 800438a:	b590      	push	{r4, r7, lr}
 800438c:	b088      	sub	sp, #32
 800438e:	af00      	add	r7, sp, #0
 8004390:	4603      	mov	r3, r0
 8004392:	71fb      	strb	r3, [r7, #7]
size_t len = MAX_UART_BUF;
 8004394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004398:	617b      	str	r3, [r7, #20]
char *buf = &cmdBuf[0];
 800439a:	4b32      	ldr	r3, [pc, #200]	; (8004464 <Report+0xdc>)
 800439c:	613b      	str	r3, [r7, #16]
uint32_t cnt = 16;
 800439e:	2310      	movs	r3, #16
 80043a0:	61fb      	str	r3, [r7, #28]
uint32_t stim = HAL_GetTick();
 80043a2:	f002 fa71 	bl	8006888 <HAL_GetTick>
 80043a6:	60f8      	str	r0, [r7, #12]

	while (!uartRdy && cnt) {
 80043a8:	e008      	b.n	80043bc <Report+0x34>
		if (HAL_GetTick() - stim) cnt--;
 80043aa:	f002 fa6d 	bl	8006888 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d002      	beq.n	80043bc <Report+0x34>
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	3b01      	subs	r3, #1
 80043ba:	61fb      	str	r3, [r7, #28]
	while (!uartRdy && cnt) {
 80043bc:	4b2a      	ldr	r3, [pc, #168]	; (8004468 <Report+0xe0>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d102      	bne.n	80043ca <Report+0x42>
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1ef      	bne.n	80043aa <Report+0x22>
	}

	//if (buf) {
		*buf = '\0';
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	2200      	movs	r2, #0
 80043ce:	701a      	strb	r2, [r3, #0]
		int dl = 0;
 80043d0:	2300      	movs	r3, #0
 80043d2:	61bb      	str	r3, [r7, #24]
		if (addTime) {
 80043d4:	79fb      	ldrb	r3, [r7, #7]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d010      	beq.n	80043fc <Report+0x74>
			dl = sec2str(buf);
 80043da:	6938      	ldr	r0, [r7, #16]
 80043dc:	f7ff ff3a 	bl	8004254 <sec2str>
 80043e0:	61b8      	str	r0, [r7, #24]
			strcat(buf, " | ");
 80043e2:	6938      	ldr	r0, [r7, #16]
 80043e4:	f7fb fef4 	bl	80001d0 <strlen>
 80043e8:	4603      	mov	r3, r0
 80043ea:	461a      	mov	r2, r3
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	4413      	add	r3, r2
 80043f0:	4a1e      	ldr	r2, [pc, #120]	; (800446c <Report+0xe4>)
 80043f2:	6810      	ldr	r0, [r2, #0]
 80043f4:	6018      	str	r0, [r3, #0]
			dl += 3;
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	3303      	adds	r3, #3
 80043fa:	61bb      	str	r3, [r7, #24]
		}

		va_list args;
		va_start(args, fmt);
 80043fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004400:	60bb      	str	r3, [r7, #8]
		vsnprintf(buf + dl, len - dl, fmt, args);
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	18d0      	adds	r0, r2, r3
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	1ad1      	subs	r1, r2, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004412:	f00e ff33 	bl	801327c <vsniprintf>

		uartRdy = false;
 8004416:	4b14      	ldr	r3, [pc, #80]	; (8004468 <Report+0xe0>)
 8004418:	2200      	movs	r2, #0
 800441a:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(cmdPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 800441c:	4b14      	ldr	r3, [pc, #80]	; (8004470 <Report+0xe8>)
 800441e:	681c      	ldr	r4, [r3, #0]
 8004420:	6938      	ldr	r0, [r7, #16]
 8004422:	f7fb fed5 	bl	80001d0 <strlen>
 8004426:	4603      	mov	r3, r0
 8004428:	b29b      	uxth	r3, r3
 800442a:	461a      	mov	r2, r3
 800442c:	6939      	ldr	r1, [r7, #16]
 800442e:	4620      	mov	r0, r4
 8004430:	f008 fc72 	bl	800cd18 <HAL_UART_Transmit_DMA>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d006      	beq.n	8004448 <Report+0xc0>
 800443a:	4b0e      	ldr	r3, [pc, #56]	; (8004474 <Report+0xec>)
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	f043 0302 	orr.w	r3, r3, #2
 8004442:	b29a      	uxth	r2, r3
 8004444:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <Report+0xec>)
 8004446:	801a      	strh	r2, [r3, #0]
		while (!uartRdy) {} //HAL_Delay(1)
 8004448:	bf00      	nop
 800444a:	4b07      	ldr	r3, [pc, #28]	; (8004468 <Report+0xe0>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0fb      	beq.n	800444a <Report+0xc2>
	//	free(buf);
	//} else {
	//	devError |= devMEM;
	//}

}
 8004452:	bf00      	nop
 8004454:	bf00      	nop
 8004456:	3720      	adds	r7, #32
 8004458:	46bd      	mov	sp, r7
 800445a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800445e:	b003      	add	sp, #12
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	20001068 	.word	0x20001068
 8004468:	20000014 	.word	0x20000014
 800446c:	080168dc 	.word	0x080168dc
 8004470:	20000010 	.word	0x20000010
 8004474:	20001468 	.word	0x20001468

08004478 <HAL_TIM_PeriodElapsedCallback>:



//------------------------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004478:	b5b0      	push	{r4, r5, r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a15      	ldr	r2, [pc, #84]	; (80044dc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d124      	bne.n	80044d4 <HAL_TIM_PeriodElapsedCallback+0x5c>
		msCounter++;//inc_msCounter();
 800448a:	4b15      	ldr	r3, [pc, #84]	; (80044e0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800448c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004490:	1c54      	adds	r4, r2, #1
 8004492:	f143 0500 	adc.w	r5, r3, #0
 8004496:	4b12      	ldr	r3, [pc, #72]	; (80044e0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004498:	e9c3 4500 	strd	r4, r5, [r3]
		if (!(msCounter % _1s)) {// 1 seconda
 800449c:	4b10      	ldr	r3, [pc, #64]	; (80044e0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800449e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044a2:	f04f 0264 	mov.w	r2, #100	; 0x64
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	f7fc fc3d 	bl	8000d28 <__aeabi_uldivmod>
 80044ae:	4313      	orrs	r3, r2
 80044b0:	d110      	bne.n	80044d4 <HAL_TIM_PeriodElapsedCallback+0x5c>
			secCounter++;
 80044b2:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3301      	adds	r3, #1
 80044b8:	4a0a      	ldr	r2, [pc, #40]	; (80044e4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80044ba:	6013      	str	r3, [r2, #0]
		  	HAL_GPIO_TogglePin(TIK_LED_GPIO_Port, TIK_LED_Pin);
 80044bc:	2101      	movs	r1, #1
 80044be:	480a      	ldr	r0, [pc, #40]	; (80044e8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80044c0:	f002 ffb4 	bl	800742c <HAL_GPIO_TogglePin>
#ifdef SET_DISPLAY
		  	if (startSec) putEvt(evt_Sec);
 80044c4:	4b09      	ldr	r3, [pc, #36]	; (80044ec <HAL_TIM_PeriodElapsedCallback+0x74>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <HAL_TIM_PeriodElapsedCallback+0x5c>
 80044ce:	2008      	movs	r0, #8
 80044d0:	f7ff fc6c 	bl	8003dac <putEvt>
#endif
	  	}
	}
}
 80044d4:	bf00      	nop
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bdb0      	pop	{r4, r5, r7, pc}
 80044dc:	40000800 	.word	0x40000800
 80044e0:	20001470 	.word	0x20001470
 80044e4:	2000146c 	.word	0x2000146c
 80044e8:	48000800 	.word	0x48000800
 80044ec:	20003cce 	.word	0x20003cce

080044f0 <HAL_UART_TxCpltCallback>:
//--------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a05      	ldr	r2, [pc, #20]	; (8004514 <HAL_UART_TxCpltCallback+0x24>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d102      	bne.n	8004508 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = 1;
 8004502:	4b05      	ldr	r3, [pc, #20]	; (8004518 <HAL_UART_TxCpltCallback+0x28>)
 8004504:	2201      	movs	r2, #1
 8004506:	701a      	strb	r2, [r3, #0]
	}
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	40004400 	.word	0x40004400
 8004518:	20000014 	.word	0x20000014

0800451c <HAL_UART_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800451c:	b590      	push	{r4, r7, lr}
 800451e:	b08d      	sub	sp, #52	; 0x34
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4aa1      	ldr	r2, [pc, #644]	; (80047b0 <HAL_UART_RxCpltCallback+0x294>)
 800452a:	4293      	cmp	r3, r2
 800452c:	f040 822a 	bne.w	8004984 <HAL_UART_RxCpltCallback+0x468>
		rxBuf[rxInd++] = (char)rxByte;
 8004530:	4ba0      	ldr	r3, [pc, #640]	; (80047b4 <HAL_UART_RxCpltCallback+0x298>)
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	b291      	uxth	r1, r2
 8004538:	4a9e      	ldr	r2, [pc, #632]	; (80047b4 <HAL_UART_RxCpltCallback+0x298>)
 800453a:	8011      	strh	r1, [r2, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	4b9e      	ldr	r3, [pc, #632]	; (80047b8 <HAL_UART_RxCpltCallback+0x29c>)
 8004540:	7819      	ldrb	r1, [r3, #0]
 8004542:	4b9e      	ldr	r3, [pc, #632]	; (80047bc <HAL_UART_RxCpltCallback+0x2a0>)
 8004544:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 8004546:	4b9c      	ldr	r3, [pc, #624]	; (80047b8 <HAL_UART_RxCpltCallback+0x29c>)
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2b0a      	cmp	r3, #10
 800454c:	f040 820b 	bne.w	8004966 <HAL_UART_RxCpltCallback+0x44a>
			rxBuf[--rxInd] = '\0';
 8004550:	4b98      	ldr	r3, [pc, #608]	; (80047b4 <HAL_UART_RxCpltCallback+0x298>)
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	4b96      	ldr	r3, [pc, #600]	; (80047b4 <HAL_UART_RxCpltCallback+0x298>)
 800455a:	801a      	strh	r2, [r3, #0]
 800455c:	4b95      	ldr	r3, [pc, #596]	; (80047b4 <HAL_UART_RxCpltCallback+0x298>)
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	4b96      	ldr	r3, [pc, #600]	; (80047bc <HAL_UART_RxCpltCallback+0x2a0>)
 8004564:	2100      	movs	r1, #0
 8004566:	5499      	strb	r1, [r3, r2]

			int i, ev = -1;
 8004568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800456c:	62bb      	str	r3, [r7, #40]	; 0x28
			if (strlen(rxBuf) > 2) {
 800456e:	4893      	ldr	r0, [pc, #588]	; (80047bc <HAL_UART_RxCpltCallback+0x2a0>)
 8004570:	f7fb fe2e 	bl	80001d0 <strlen>
 8004574:	4603      	mov	r3, r0
 8004576:	2b02      	cmp	r3, #2
 8004578:	f240 81ef 	bls.w	800495a <HAL_UART_RxCpltCallback+0x43e>
				for (i = 0; i < MAX_CMDS; i++) {
 800457c:	2300      	movs	r3, #0
 800457e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004580:	e1dc      	b.n	800493c <HAL_UART_RxCpltCallback+0x420>
					if (!strncmp(rxBuf, s_cmds[i], strlen(s_cmds[i]))) {
 8004582:	4a8f      	ldr	r2, [pc, #572]	; (80047c0 <HAL_UART_RxCpltCallback+0x2a4>)
 8004584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004586:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800458a:	4a8d      	ldr	r2, [pc, #564]	; (80047c0 <HAL_UART_RxCpltCallback+0x2a4>)
 800458c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004592:	4618      	mov	r0, r3
 8004594:	f7fb fe1c 	bl	80001d0 <strlen>
 8004598:	4603      	mov	r3, r0
 800459a:	461a      	mov	r2, r3
 800459c:	4621      	mov	r1, r4
 800459e:	4887      	ldr	r0, [pc, #540]	; (80047bc <HAL_UART_RxCpltCallback+0x2a0>)
 80045a0:	f00d ff46 	bl	8012430 <strncmp>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f040 81c5 	bne.w	8004936 <HAL_UART_RxCpltCallback+0x41a>
						char *uk = rxBuf + strlen(s_cmds[i]);
 80045ac:	4a84      	ldr	r2, [pc, #528]	; (80047c0 <HAL_UART_RxCpltCallback+0x2a4>)
 80045ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fb fe0b 	bl	80001d0 <strlen>
 80045ba:	4603      	mov	r3, r0
 80045bc:	4a7f      	ldr	r2, [pc, #508]	; (80047bc <HAL_UART_RxCpltCallback+0x2a0>)
 80045be:	4413      	add	r3, r2
 80045c0:	623b      	str	r3, [r7, #32]
						ev = -1;
 80045c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045c6:	62bb      	str	r3, [r7, #40]	; 0x28
						switch (i) {
 80045c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ca:	2b10      	cmp	r3, #16
 80045cc:	f200 81bb 	bhi.w	8004946 <HAL_UART_RxCpltCallback+0x42a>
 80045d0:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <HAL_UART_RxCpltCallback+0xbc>)
 80045d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d6:	bf00      	nop
 80045d8:	08004745 	.word	0x08004745
 80045dc:	0800474b 	.word	0x0800474b
 80045e0:	08004751 	.word	0x08004751
 80045e4:	08004947 	.word	0x08004947
 80045e8:	080047a3 	.word	0x080047a3
 80045ec:	080047a3 	.word	0x080047a3
 80045f0:	080048d9 	.word	0x080048d9
 80045f4:	0800483d 	.word	0x0800483d
 80045f8:	08004947 	.word	0x08004947
 80045fc:	08004745 	.word	0x08004745
 8004600:	08004745 	.word	0x08004745
 8004604:	08004715 	.word	0x08004715
 8004608:	080046d1 	.word	0x080046d1
 800460c:	08004649 	.word	0x08004649
 8004610:	080046b3 	.word	0x080046b3
 8004614:	08004745 	.word	0x08004745
 8004618:	0800461d 	.word	0x0800461d
							case cmdBand://"band:2"
								if (strlen(uk) >= 1) {
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 8176 	beq.w	8004912 <HAL_UART_RxCpltCallback+0x3f6>
									newBand = atol(uk);
 8004626:	6a38      	ldr	r0, [r7, #32]
 8004628:	f00d f96c 	bl	8011904 <atol>
 800462c:	4603      	mov	r3, r0
 800462e:	b2da      	uxtb	r2, r3
 8004630:	4b64      	ldr	r3, [pc, #400]	; (80047c4 <HAL_UART_RxCpltCallback+0x2a8>)
 8004632:	701a      	strb	r2, [r3, #0]
									if (newBand != Band) {
 8004634:	4b63      	ldr	r3, [pc, #396]	; (80047c4 <HAL_UART_RxCpltCallback+0x2a8>)
 8004636:	781a      	ldrb	r2, [r3, #0]
 8004638:	4b63      	ldr	r3, [pc, #396]	; (80047c8 <HAL_UART_RxCpltCallback+0x2ac>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	f000 8168 	beq.w	8004912 <HAL_UART_RxCpltCallback+0x3f6>
										ev = i;
 8004642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004644:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 8004646:	e164      	b.n	8004912 <HAL_UART_RxCpltCallback+0x3f6>
							case cmdVol:
								if (strlen(uk) >= 1) {
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 8162 	beq.w	8004916 <HAL_UART_RxCpltCallback+0x3fa>
									uint8_t nv = Volume;
 8004652:	4b5e      	ldr	r3, [pc, #376]	; (80047cc <HAL_UART_RxCpltCallback+0x2b0>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									if (strstr(uk, "up")) {
 800465a:	495d      	ldr	r1, [pc, #372]	; (80047d0 <HAL_UART_RxCpltCallback+0x2b4>)
 800465c:	6a38      	ldr	r0, [r7, #32]
 800465e:	f00d ff0e 	bl	801247e <strstr>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <HAL_UART_RxCpltCallback+0x158>
										nv++;
 8004668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800466c:	3301      	adds	r3, #1
 800466e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004672:	e012      	b.n	800469a <HAL_UART_RxCpltCallback+0x17e>
									} else if (strstr(uk, "down")) {
 8004674:	4957      	ldr	r1, [pc, #348]	; (80047d4 <HAL_UART_RxCpltCallback+0x2b8>)
 8004676:	6a38      	ldr	r0, [r7, #32]
 8004678:	f00d ff01 	bl	801247e <strstr>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d005      	beq.n	800468e <HAL_UART_RxCpltCallback+0x172>
										nv--;
 8004682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004686:	3b01      	subs	r3, #1
 8004688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800468c:	e005      	b.n	800469a <HAL_UART_RxCpltCallback+0x17e>
									} else {
										nv = (uint8_t)atol(uk);
 800468e:	6a38      	ldr	r0, [r7, #32]
 8004690:	f00d f938 	bl	8011904 <atol>
 8004694:	4603      	mov	r3, r0
 8004696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									}
									if ((nv >= 0) && (nv <= 15)) {
 800469a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800469e:	2b0f      	cmp	r3, #15
 80046a0:	f200 8139 	bhi.w	8004916 <HAL_UART_RxCpltCallback+0x3fa>
										newVolume = nv;
 80046a4:	4a4c      	ldr	r2, [pc, #304]	; (80047d8 <HAL_UART_RxCpltCallback+0x2bc>)
 80046a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046aa:	7013      	strb	r3, [r2, #0]
										ev = i;
 80046ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ae:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 80046b0:	e131      	b.n	8004916 <HAL_UART_RxCpltCallback+0x3fa>
							case cmdBass:
								if (strlen(uk) >= 1) {
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 812f 	beq.w	800491a <HAL_UART_RxCpltCallback+0x3fe>
									newBassBoost = (uint8_t)atol(uk);
 80046bc:	6a38      	ldr	r0, [r7, #32]
 80046be:	f00d f921 	bl	8011904 <atol>
 80046c2:	4603      	mov	r3, r0
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	4b45      	ldr	r3, [pc, #276]	; (80047dc <HAL_UART_RxCpltCallback+0x2c0>)
 80046c8:	701a      	strb	r2, [r3, #0]
									ev = i;
 80046ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046cc:	62bb      	str	r3, [r7, #40]	; 0x28
								}
							break;
 80046ce:	e124      	b.n	800491a <HAL_UART_RxCpltCallback+0x3fe>
							case cmdFreq://"freq:95.1"
								if (strlen(uk) >= 2) {
 80046d0:	6a38      	ldr	r0, [r7, #32]
 80046d2:	f7fb fd7d 	bl	80001d0 <strlen>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b01      	cmp	r3, #1
 80046da:	f240 8120 	bls.w	800491e <HAL_UART_RxCpltCallback+0x402>
									newFreq = (float)atof(uk);
 80046de:	6a38      	ldr	r0, [r7, #32]
 80046e0:	f00d f909 	bl	80118f6 <atof>
 80046e4:	ec53 2b10 	vmov	r2, r3, d0
 80046e8:	4610      	mov	r0, r2
 80046ea:	4619      	mov	r1, r3
 80046ec:	f7fc fa7c 	bl	8000be8 <__aeabi_d2f>
 80046f0:	4603      	mov	r3, r0
 80046f2:	4a3b      	ldr	r2, [pc, #236]	; (80047e0 <HAL_UART_RxCpltCallback+0x2c4>)
 80046f4:	6013      	str	r3, [r2, #0]
									if (newFreq != Freq) {
 80046f6:	4b3a      	ldr	r3, [pc, #232]	; (80047e0 <HAL_UART_RxCpltCallback+0x2c4>)
 80046f8:	ed93 7a00 	vldr	s14, [r3]
 80046fc:	4b39      	ldr	r3, [pc, #228]	; (80047e4 <HAL_UART_RxCpltCallback+0x2c8>)
 80046fe:	edd3 7a00 	vldr	s15, [r3]
 8004702:	eeb4 7a67 	vcmp.f32	s14, s15
 8004706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800470a:	f000 8108 	beq.w	800491e <HAL_UART_RxCpltCallback+0x402>
										ev = i;
 800470e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004710:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 8004712:	e104      	b.n	800491e <HAL_UART_RxCpltCallback+0x402>
							case cmdScan://"scan"
								seek_up = 1;
 8004714:	4b34      	ldr	r3, [pc, #208]	; (80047e8 <HAL_UART_RxCpltCallback+0x2cc>)
 8004716:	2201      	movs	r2, #1
 8004718:	701a      	strb	r2, [r3, #0]
								ev = i;
 800471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471c:	62bb      	str	r3, [r7, #40]	; 0x28
								char *uki = strchr(uk, ':');
 800471e:	213a      	movs	r1, #58	; 0x3a
 8004720:	6a38      	ldr	r0, [r7, #32]
 8004722:	f00d fe78 	bl	8012416 <strchr>
 8004726:	61f8      	str	r0, [r7, #28]
								if (uki) {
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 80f9 	beq.w	8004922 <HAL_UART_RxCpltCallback+0x406>
									if (*(char *)(uki + 1) == '0') seek_up = 0;
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	3301      	adds	r3, #1
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	2b30      	cmp	r3, #48	; 0x30
 8004738:	f040 80f3 	bne.w	8004922 <HAL_UART_RxCpltCallback+0x406>
 800473c:	4b2a      	ldr	r3, [pc, #168]	; (80047e8 <HAL_UART_RxCpltCallback+0x2cc>)
 800473e:	2200      	movs	r2, #0
 8004740:	701a      	strb	r2, [r3, #0]
								}
							break;
 8004742:	e0ee      	b.n	8004922 <HAL_UART_RxCpltCallback+0x406>
							case cmdClr://"clr"
							case cmdHelp://"help"
							case cmdVer://"ver"
							case cmdList:
								ev = i;
 8004744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004746:	62bb      	str	r3, [r7, #40]	; 0x28
							break;
 8004748:	e0f4      	b.n	8004934 <HAL_UART_RxCpltCallback+0x418>
							case cmdRestart://"restart" -> restart = 1;
								ev = i;
 800474a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474c:	62bb      	str	r3, [r7, #40]	; 0x28
							break;
 800474e:	e0f1      	b.n	8004934 <HAL_UART_RxCpltCallback+0x418>
							case cmdEpoch://"epoch:1657191323"
								if (strlen(uk) >= 10) {
 8004750:	6a38      	ldr	r0, [r7, #32]
 8004752:	f7fb fd3d 	bl	80001d0 <strlen>
 8004756:	4603      	mov	r3, r0
 8004758:	2b09      	cmp	r3, #9
 800475a:	f240 80e4 	bls.w	8004926 <HAL_UART_RxCpltCallback+0x40a>
									char *uki = strchr(uk, ':');
 800475e:	213a      	movs	r1, #58	; 0x3a
 8004760:	6a38      	ldr	r0, [r7, #32]
 8004762:	f00d fe58 	bl	8012416 <strchr>
 8004766:	60b8      	str	r0, [r7, #8]
									if (uki) {
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00c      	beq.n	8004788 <HAL_UART_RxCpltCallback+0x26c>
										tZone = (uint8_t)atol(uki + 1);
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	3301      	adds	r3, #1
 8004772:	4618      	mov	r0, r3
 8004774:	f00d f8c6 	bl	8011904 <atol>
 8004778:	4603      	mov	r3, r0
 800477a:	b2da      	uxtb	r2, r3
 800477c:	4b1b      	ldr	r3, [pc, #108]	; (80047ec <HAL_UART_RxCpltCallback+0x2d0>)
 800477e:	701a      	strb	r2, [r3, #0]
										*uki = '\0';
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2200      	movs	r2, #0
 8004784:	701a      	strb	r2, [r3, #0]
 8004786:	e002      	b.n	800478e <HAL_UART_RxCpltCallback+0x272>
									} else {
										tZone = 0;
 8004788:	4b18      	ldr	r3, [pc, #96]	; (80047ec <HAL_UART_RxCpltCallback+0x2d0>)
 800478a:	2200      	movs	r2, #0
 800478c:	701a      	strb	r2, [r3, #0]
									}
									epoch = (uint32_t)atol(uk);
 800478e:	6a38      	ldr	r0, [r7, #32]
 8004790:	f00d f8b8 	bl	8011904 <atol>
 8004794:	4603      	mov	r3, r0
 8004796:	461a      	mov	r2, r3
 8004798:	4b15      	ldr	r3, [pc, #84]	; (80047f0 <HAL_UART_RxCpltCallback+0x2d4>)
 800479a:	601a      	str	r2, [r3, #0]
									ev = i;
 800479c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479e:	62bb      	str	r3, [r7, #40]	; 0x28
								}
							break;
 80047a0:	e0c1      	b.n	8004926 <HAL_UART_RxCpltCallback+0x40a>
							case cmdsRead:// read:0
							case cmdsErase:// erase:0
								if (i == cmdsRead) cmd_sector = cmdsRead;
 80047a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d127      	bne.n	80047f8 <HAL_UART_RxCpltCallback+0x2dc>
 80047a8:	4b12      	ldr	r3, [pc, #72]	; (80047f4 <HAL_UART_RxCpltCallback+0x2d8>)
 80047aa:	2204      	movs	r2, #4
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	e026      	b.n	80047fe <HAL_UART_RxCpltCallback+0x2e2>
 80047b0:	40004400 	.word	0x40004400
 80047b4:	2000147a 	.word	0x2000147a
 80047b8:	20001478 	.word	0x20001478
 80047bc:	2000147c 	.word	0x2000147c
 80047c0:	2000001c 	.word	0x2000001c
 80047c4:	200001c9 	.word	0x200001c9
 80047c8:	200001c8 	.word	0x200001c8
 80047cc:	200001cb 	.word	0x200001cb
 80047d0:	080168e0 	.word	0x080168e0
 80047d4:	080168e4 	.word	0x080168e4
 80047d8:	200001cc 	.word	0x200001cc
 80047dc:	20003ce3 	.word	0x20003ce3
 80047e0:	200001c4 	.word	0x200001c4
 80047e4:	200001c0 	.word	0x200001c0
 80047e8:	200001ca 	.word	0x200001ca
 80047ec:	2000187e 	.word	0x2000187e
 80047f0:	20000018 	.word	0x20000018
 80047f4:	200001ac 	.word	0x200001ac
											  else cmd_sector = cmdsErase;
 80047f8:	4b64      	ldr	r3, [pc, #400]	; (800498c <HAL_UART_RxCpltCallback+0x470>)
 80047fa:	2205      	movs	r2, #5
 80047fc:	601a      	str	r2, [r3, #0]
								if (*uk == ':') {
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b3a      	cmp	r3, #58	; 0x3a
 8004804:	f040 8091 	bne.w	800492a <HAL_UART_RxCpltCallback+0x40e>
									int sek = atoi(++uk);
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	3301      	adds	r3, #1
 800480c:	623b      	str	r3, [r7, #32]
 800480e:	6a38      	ldr	r0, [r7, #32]
 8004810:	f00d f874 	bl	80118fc <atoi>
 8004814:	60f8      	str	r0, [r7, #12]
									if ((sek >= 0) && (sek < W25qxx_getSectorCount())) {
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	f2c0 8086 	blt.w	800492a <HAL_UART_RxCpltCallback+0x40e>
 800481e:	f001 fc0b 	bl	8006038 <W25qxx_getSectorCount>
 8004822:	4602      	mov	r2, r0
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	429a      	cmp	r2, r3
 8004828:	d97f      	bls.n	800492a <HAL_UART_RxCpltCallback+0x40e>
										adr_sector = sek;
 800482a:	4a59      	ldr	r2, [pc, #356]	; (8004990 <HAL_UART_RxCpltCallback+0x474>)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6013      	str	r3, [r2, #0]
										offset_sector = 0;
 8004830:	4b58      	ldr	r3, [pc, #352]	; (8004994 <HAL_UART_RxCpltCallback+0x478>)
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]
										ev = i;//flag_sector = true;
 8004836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004838:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 800483a:	e076      	b.n	800492a <HAL_UART_RxCpltCallback+0x40e>
							case cmdsWrite:// write:0:a5 | write:0:a5:256
								if (*uk == ':') {
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b3a      	cmp	r3, #58	; 0x3a
 8004842:	d174      	bne.n	800492e <HAL_UART_RxCpltCallback+0x412>
									uk++;
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	3301      	adds	r3, #1
 8004848:	623b      	str	r3, [r7, #32]
									int sek = atoi(uk);
 800484a:	6a38      	ldr	r0, [r7, #32]
 800484c:	f00d f856 	bl	80118fc <atoi>
 8004850:	61b8      	str	r0, [r7, #24]
									if ((sek >= 0) && (sek < W25qxx_getSectorCount())) {
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	2b00      	cmp	r3, #0
 8004856:	db6a      	blt.n	800492e <HAL_UART_RxCpltCallback+0x412>
 8004858:	f001 fbee 	bl	8006038 <W25qxx_getSectorCount>
 800485c:	4602      	mov	r2, r0
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	429a      	cmp	r2, r3
 8004862:	d964      	bls.n	800492e <HAL_UART_RxCpltCallback+0x412>
										char *ukn = strchr(uk, ':');
 8004864:	213a      	movs	r1, #58	; 0x3a
 8004866:	6a38      	ldr	r0, [r7, #32]
 8004868:	f00d fdd5 	bl	8012416 <strchr>
 800486c:	6178      	str	r0, [r7, #20]
										if (ukn) {
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d05c      	beq.n	800492e <HAL_UART_RxCpltCallback+0x412>
											len_write = -1;
 8004874:	4b48      	ldr	r3, [pc, #288]	; (8004998 <HAL_UART_RxCpltCallback+0x47c>)
 8004876:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800487a:	601a      	str	r2, [r3, #0]
											ukn++;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	3301      	adds	r3, #1
 8004880:	617b      	str	r3, [r7, #20]
											byte_write = hexToBin(ukn);
 8004882:	6978      	ldr	r0, [r7, #20]
 8004884:	f7ff fa18 	bl	8003cb8 <hexToBin>
 8004888:	4603      	mov	r3, r0
 800488a:	461a      	mov	r2, r3
 800488c:	4b43      	ldr	r3, [pc, #268]	; (800499c <HAL_UART_RxCpltCallback+0x480>)
 800488e:	701a      	strb	r2, [r3, #0]
											uk = strchr(ukn, ':');
 8004890:	213a      	movs	r1, #58	; 0x3a
 8004892:	6978      	ldr	r0, [r7, #20]
 8004894:	f00d fdbf 	bl	8012416 <strchr>
 8004898:	6238      	str	r0, [r7, #32]
											if (uk) {
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d012      	beq.n	80048c6 <HAL_UART_RxCpltCallback+0x3aa>
												int l = atoi(++uk);
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	3301      	adds	r3, #1
 80048a4:	623b      	str	r3, [r7, #32]
 80048a6:	6a38      	ldr	r0, [r7, #32]
 80048a8:	f00d f828 	bl	80118fc <atoi>
 80048ac:	6138      	str	r0, [r7, #16]
												if ((l > 0) && (l < W25qxx_getSectorSize())) len_write = l;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	dd08      	ble.n	80048c6 <HAL_UART_RxCpltCallback+0x3aa>
 80048b4:	f001 fbcc 	bl	8006050 <W25qxx_getSectorSize>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d902      	bls.n	80048c6 <HAL_UART_RxCpltCallback+0x3aa>
 80048c0:	4a35      	ldr	r2, [pc, #212]	; (8004998 <HAL_UART_RxCpltCallback+0x47c>)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	6013      	str	r3, [r2, #0]
											}
											adr_sector = sek;
 80048c6:	4a32      	ldr	r2, [pc, #200]	; (8004990 <HAL_UART_RxCpltCallback+0x474>)
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	6013      	str	r3, [r2, #0]
											offset_sector = 0;
 80048cc:	4b31      	ldr	r3, [pc, #196]	; (8004994 <HAL_UART_RxCpltCallback+0x478>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]
											ev = i;//flag_sector = true;
 80048d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d4:	62bb      	str	r3, [r7, #40]	; 0x28
										}
									}
								}
							break;
 80048d6:	e02a      	b.n	800492e <HAL_UART_RxCpltCallback+0x412>
							case cmdsNext:// next
								if ((last_cmd_sector == cmdsRead) || (last_cmd_sector == cmdsNext)) {
 80048d8:	4b31      	ldr	r3, [pc, #196]	; (80049a0 <HAL_UART_RxCpltCallback+0x484>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d003      	beq.n	80048e8 <HAL_UART_RxCpltCallback+0x3cc>
 80048e0:	4b2f      	ldr	r3, [pc, #188]	; (80049a0 <HAL_UART_RxCpltCallback+0x484>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b06      	cmp	r3, #6
 80048e6:	d124      	bne.n	8004932 <HAL_UART_RxCpltCallback+0x416>
									if ((offset_sector + list_sector) < W25qxx_getSectorSize()) {
 80048e8:	4b2a      	ldr	r3, [pc, #168]	; (8004994 <HAL_UART_RxCpltCallback+0x478>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	4b2d      	ldr	r3, [pc, #180]	; (80049a4 <HAL_UART_RxCpltCallback+0x488>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4413      	add	r3, r2
 80048f2:	461c      	mov	r4, r3
 80048f4:	f001 fbac 	bl	8006050 <W25qxx_getSectorSize>
 80048f8:	4603      	mov	r3, r0
 80048fa:	429c      	cmp	r4, r3
 80048fc:	d219      	bcs.n	8004932 <HAL_UART_RxCpltCallback+0x416>
										offset_sector += list_sector;
 80048fe:	4b25      	ldr	r3, [pc, #148]	; (8004994 <HAL_UART_RxCpltCallback+0x478>)
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	4b28      	ldr	r3, [pc, #160]	; (80049a4 <HAL_UART_RxCpltCallback+0x488>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4413      	add	r3, r2
 8004908:	4a22      	ldr	r2, [pc, #136]	; (8004994 <HAL_UART_RxCpltCallback+0x478>)
 800490a:	6013      	str	r3, [r2, #0]
										ev = i;//flag_sector = true;
 800490c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490e:	62bb      	str	r3, [r7, #40]	; 0x28
									}
								}
							break;
 8004910:	e00f      	b.n	8004932 <HAL_UART_RxCpltCallback+0x416>
							break;
 8004912:	bf00      	nop
 8004914:	e017      	b.n	8004946 <HAL_UART_RxCpltCallback+0x42a>
							break;
 8004916:	bf00      	nop
 8004918:	e015      	b.n	8004946 <HAL_UART_RxCpltCallback+0x42a>
							break;
 800491a:	bf00      	nop
 800491c:	e013      	b.n	8004946 <HAL_UART_RxCpltCallback+0x42a>
							break;
 800491e:	bf00      	nop
 8004920:	e011      	b.n	8004946 <HAL_UART_RxCpltCallback+0x42a>
							break;
 8004922:	bf00      	nop
 8004924:	e00f      	b.n	8004946 <HAL_UART_RxCpltCallback+0x42a>
							break;
 8004926:	bf00      	nop
 8004928:	e00d      	b.n	8004946 <HAL_UART_RxCpltCallback+0x42a>
							break;
 800492a:	bf00      	nop
 800492c:	e00b      	b.n	8004946 <HAL_UART_RxCpltCallback+0x42a>
							break;
 800492e:	bf00      	nop
 8004930:	e009      	b.n	8004946 <HAL_UART_RxCpltCallback+0x42a>
							break;
 8004932:	bf00      	nop
						}
						break;
 8004934:	e007      	b.n	8004946 <HAL_UART_RxCpltCallback+0x42a>
				for (i = 0; i < MAX_CMDS; i++) {
 8004936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004938:	3301      	adds	r3, #1
 800493a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800493c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493e:	2b10      	cmp	r3, #16
 8004940:	f77f ae1f 	ble.w	8004582 <HAL_UART_RxCpltCallback+0x66>
 8004944:	e000      	b.n	8004948 <HAL_UART_RxCpltCallback+0x42c>
						break;
 8004946:	bf00      	nop
					}
				}
				//
				if (ev == -1) ev = cmdErr;
 8004948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800494e:	d101      	bne.n	8004954 <HAL_UART_RxCpltCallback+0x438>
 8004950:	2303      	movs	r3, #3
 8004952:	62bb      	str	r3, [r7, #40]	; 0x28
				putEvt(ev);
 8004954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004956:	f7ff fa29 	bl	8003dac <putEvt>
				//
			}

			rxInd = 0;
 800495a:	4b13      	ldr	r3, [pc, #76]	; (80049a8 <HAL_UART_RxCpltCallback+0x48c>)
 800495c:	2200      	movs	r2, #0
 800495e:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 8004960:	4b12      	ldr	r3, [pc, #72]	; (80049ac <HAL_UART_RxCpltCallback+0x490>)
 8004962:	2200      	movs	r2, #0
 8004964:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_UART_Receive_IT(huart, &rxByte, 1) != HAL_OK) devError |= devUART;
 8004966:	2201      	movs	r2, #1
 8004968:	4911      	ldr	r1, [pc, #68]	; (80049b0 <HAL_UART_RxCpltCallback+0x494>)
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f008 f97e 	bl	800cc6c <HAL_UART_Receive_IT>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d006      	beq.n	8004984 <HAL_UART_RxCpltCallback+0x468>
 8004976:	4b0f      	ldr	r3, [pc, #60]	; (80049b4 <HAL_UART_RxCpltCallback+0x498>)
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	f043 0302 	orr.w	r3, r3, #2
 800497e:	b29a      	uxth	r2, r3
 8004980:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <HAL_UART_RxCpltCallback+0x498>)
 8004982:	801a      	strh	r2, [r3, #0]
	}
}
 8004984:	bf00      	nop
 8004986:	3734      	adds	r7, #52	; 0x34
 8004988:	46bd      	mov	sp, r7
 800498a:	bd90      	pop	{r4, r7, pc}
 800498c:	200001ac 	.word	0x200001ac
 8004990:	20001888 	.word	0x20001888
 8004994:	2000188c 	.word	0x2000188c
 8004998:	20001894 	.word	0x20001894
 800499c:	200001b4 	.word	0x200001b4
 80049a0:	200001b0 	.word	0x200001b0
 80049a4:	20001890 	.word	0x20001890
 80049a8:	2000147a 	.word	0x2000147a
 80049ac:	2000147c 	.word	0x2000147c
 80049b0:	20001478 	.word	0x20001478
 80049b4:	20001468 	.word	0x20001468

080049b8 <HAL_UART_ErrorCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a07      	ldr	r2, [pc, #28]	; (80049e4 <HAL_UART_ErrorCallback+0x2c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d106      	bne.n	80049d8 <HAL_UART_ErrorCallback+0x20>
		devError |= devUART;
 80049ca:	4b07      	ldr	r3, [pc, #28]	; (80049e8 <HAL_UART_ErrorCallback+0x30>)
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	f043 0302 	orr.w	r3, r3, #2
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	4b04      	ldr	r3, [pc, #16]	; (80049e8 <HAL_UART_ErrorCallback+0x30>)
 80049d6:	801a      	strh	r2, [r3, #0]
	}
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	40004400 	.word	0x40004400
 80049e8:	20001468 	.word	0x20001468

080049ec <spiDone>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//    Функция устанавливает в начальное состояние 'готов' служебные параметры порта SPI1:
//
void spiDone(SPI_HandleTypeDef *hspi)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
#ifdef SET_W25FLASH
	if (hspi->Instance == SPI2) {
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a0a      	ldr	r2, [pc, #40]	; (8004a24 <spiDone+0x38>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d105      	bne.n	8004a0a <spiDone+0x1e>
		W25_UNSELECT();
 80049fe:	f001 f961 	bl	8005cc4 <W25_UNSELECT>
		spiRdy = 1;
 8004a02:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <spiDone+0x3c>)
 8004a04:	2201      	movs	r2, #1
 8004a06:	701a      	strb	r2, [r3, #0]
	else
	if (hspi->Instance == SPI1) {
		lcdRdy = 1;
	}
#endif
}
 8004a08:	e007      	b.n	8004a1a <spiDone+0x2e>
	if (hspi->Instance == SPI1) {
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a07      	ldr	r2, [pc, #28]	; (8004a2c <spiDone+0x40>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d102      	bne.n	8004a1a <spiDone+0x2e>
		lcdRdy = 1;
 8004a14:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <spiDone+0x44>)
 8004a16:	2201      	movs	r2, #1
 8004a18:	701a      	strb	r2, [r3, #0]
}
 8004a1a:	bf00      	nop
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40003800 	.word	0x40003800
 8004a28:	200001a8 	.word	0x200001a8
 8004a2c:	40013000 	.word	0x40013000
 8004a30:	20000000 	.word	0x20000000

08004a34 <HAL_SPI_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема данных от порта SPI
//
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7ff ffd5 	bl	80049ec <spiDone>
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении передачи данных в порт SPI
//
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b082      	sub	sp, #8
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff ffca 	bl	80049ec <spiDone>
}
 8004a58:	bf00      	nop
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_SPI_TxRxCpltCallback>:
//-------------------------------------------------------------------------------------------
//    CallBack функция, вызывается по завершении приема/передачи данных порта SPI
//
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7ff ffbf 	bl	80049ec <spiDone>
}
 8004a6e:	bf00      	nop
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <HAL_SPI_ErrorCallback>:
//--------------------------------------------------------------------------------------------
//    CallBack функция, вызывается при возникновении ошибки у модуля SPI
//
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
	spiDone(hspi);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff ffb3 	bl	80049ec <spiDone>
	devError |= devSPI;
 8004a86:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <HAL_SPI_ErrorCallback+0x24>)
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	4b02      	ldr	r3, [pc, #8]	; (8004a9c <HAL_SPI_ErrorCallback+0x24>)
 8004a92:	801a      	strh	r2, [r3, #0]
}
 8004a94:	bf00      	nop
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	20001468 	.word	0x20001468

08004aa0 <HAL_I2C_ErrorCallback>:
	}
#endif
}
//--------------------------------------------------------------------------------------------
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
#if defined(SET_RDA_CHIP) || defined(SET_NEW_RDA)
	if (hi2c->Instance == I2C1) {
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a07      	ldr	r2, [pc, #28]	; (8004acc <HAL_I2C_ErrorCallback+0x2c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d106      	bne.n	8004ac0 <HAL_I2C_ErrorCallback+0x20>
		devError |= devRDA;
 8004ab2:	4b07      	ldr	r3, [pc, #28]	; (8004ad0 <HAL_I2C_ErrorCallback+0x30>)
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	4b04      	ldr	r3, [pc, #16]	; (8004ad0 <HAL_I2C_ErrorCallback+0x30>)
 8004abe:	801a      	strh	r2, [r3, #0]
	}
#endif
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	40005400 	.word	0x40005400
 8004ad0:	20001468 	.word	0x20001468

08004ad4 <HAL_GPIO_EXTI_Callback>:
//--------------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	4603      	mov	r3, r0
 8004adc:	80fb      	strh	r3, [r7, #6]
	if ((GPIO_Pin != KEY0_Pin) && (GPIO_Pin != KEY1_Pin)) return;
 8004ade:	88fb      	ldrh	r3, [r7, #6]
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d002      	beq.n	8004aea <HAL_GPIO_EXTI_Callback+0x16>
 8004ae4:	88fb      	ldrh	r3, [r7, #6]
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d110      	bne.n	8004b0c <HAL_GPIO_EXTI_Callback+0x38>

	if (GPIO_Pin == KEY0_Pin) seek_up = 1;
 8004aea:	88fb      	ldrh	r3, [r7, #6]
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d103      	bne.n	8004af8 <HAL_GPIO_EXTI_Callback+0x24>
 8004af0:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <HAL_GPIO_EXTI_Callback+0x40>)
 8004af2:	2201      	movs	r2, #1
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	e005      	b.n	8004b04 <HAL_GPIO_EXTI_Callback+0x30>
	else
	if (GPIO_Pin == KEY1_Pin) seek_up = 0;
 8004af8:	88fb      	ldrh	r3, [r7, #6]
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d102      	bne.n	8004b04 <HAL_GPIO_EXTI_Callback+0x30>
 8004afe:	4b05      	ldr	r3, [pc, #20]	; (8004b14 <HAL_GPIO_EXTI_Callback+0x40>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	701a      	strb	r2, [r3, #0]

	putEvt(cmdScan);
 8004b04:	200b      	movs	r0, #11
 8004b06:	f7ff f951 	bl	8003dac <putEvt>
 8004b0a:	e000      	b.n	8004b0e <HAL_GPIO_EXTI_Callback+0x3a>
	if ((GPIO_Pin != KEY0_Pin) && (GPIO_Pin != KEY1_Pin)) return;
 8004b0c:	bf00      	nop
}
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	200001ca 	.word	0x200001ca

08004b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004b1c:	b672      	cpsid	i
}
 8004b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  devError |= devSYS;
 8004b20:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <Error_Handler+0x20>)
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	f043 0320 	orr.w	r3, r3, #32
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	4b03      	ldr	r3, [pc, #12]	; (8004b38 <Error_Handler+0x20>)
 8004b2c:	801a      	strh	r2, [r3, #0]
	  errLedOn(true);
 8004b2e:	2001      	movs	r0, #1
 8004b30:	f7ff fb0a 	bl	8004148 <errLedOn>
	  devError |= devSYS;
 8004b34:	e7f4      	b.n	8004b20 <Error_Handler+0x8>
 8004b36:	bf00      	nop
 8004b38:	20001468 	.word	0x20001468

08004b3c <rda5807_init>:

//==============================================================================
// Инициализация rda5807
//==============================================================================
uint8_t rda5807_init(float *freq)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af04      	add	r7, sp, #16
 8004b42:	6078      	str	r0, [r7, #4]
uint8_t buf[2] = {0, 0};
 8004b44:	2300      	movs	r3, #0
 8004b46:	813b      	strh	r3, [r7, #8]
uint8_t *id = &buf[0];
 8004b48:	f107 0308 	add.w	r3, r7, #8
 8004b4c:	60fb      	str	r3, [r7, #12]

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr, 0, I2C_MEMADD_SIZE_8BIT, buf, 2, RDA5807_TO) != HAL_OK) {
 8004b4e:	4b30      	ldr	r3, [pc, #192]	; (8004c10 <rda5807_init+0xd4>)
 8004b50:	6818      	ldr	r0, [r3, #0]
 8004b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b56:	9302      	str	r3, [sp, #8]
 8004b58:	2302      	movs	r3, #2
 8004b5a:	9301      	str	r3, [sp, #4]
 8004b5c:	f107 0308 	add.w	r3, r7, #8
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	2301      	movs	r3, #1
 8004b64:	2200      	movs	r2, #0
 8004b66:	2122      	movs	r1, #34	; 0x22
 8004b68:	f002 ff2a 	bl	80079c0 <HAL_I2C_Mem_Read>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d13c      	bne.n	8004bec <rda5807_init+0xb0>
    stx[0] = '\0';
    for (int i = 0; i < 64; i++) sprintf(stx+strlen(stx)," %02x", buf11[i]);
    Report(1, "[%s] %s\r\n", __func__, stx);
#endif

    rda5807_SoftReset();
 8004b72:	f000 f927 	bl	8004dc4 <rda5807_SoftReset>
    if (devError & devRDA) goto err_out;
 8004b76:	4b27      	ldr	r3, [pc, #156]	; (8004c14 <rda5807_init+0xd8>)
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d136      	bne.n	8004bf0 <rda5807_init+0xb4>

    rda5807_SetupDefault();
 8004b82:	f000 f949 	bl	8004e18 <rda5807_SetupDefault>
    if (devError & devRDA) goto err_out;
 8004b86:	4b23      	ldr	r3, [pc, #140]	; (8004c14 <rda5807_init+0xd8>)
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d130      	bne.n	8004bf4 <rda5807_init+0xb8>

    uint16_t fr = (uint16_t)(*freq * 10);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	edd3 7a00 	vldr	s15, [r3]
 8004b98:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004b9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ba4:	ee17 3a90 	vmov	r3, s15
 8004ba8:	817b      	strh	r3, [r7, #10]
    rda5807_SetFreq_In100Khz(fr);
 8004baa:	897b      	ldrh	r3, [r7, #10]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 fa79 	bl	80050a4 <rda5807_SetFreq_In100Khz>
    //
    HAL_Delay(200);
 8004bb2:	20c8      	movs	r0, #200	; 0xc8
 8004bb4:	f001 fe74 	bl	80068a0 <HAL_Delay>
    //
    *freq = (float)rda5807_GetFreq_In100Khz();
 8004bb8:	f000 faee 	bl	8005198 <rda5807_GetFreq_In100Khz>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	ee07 3a90 	vmov	s15, r3
 8004bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	edc3 7a00 	vstr	s15, [r3]
    *freq /= 10;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	ed93 7a00 	vldr	s14, [r3]
 8004bd2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004bd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	edc3 7a00 	vstr	s15, [r3]
#ifdef SET_RDA_DEBUG
    Report(1, "[%s] Freq: %.2f\r\n", __func__, *freq);//rda5807_GetFreq_In100Khz());
#endif

    HAL_Delay(100);
 8004be0:	2064      	movs	r0, #100	; 0x64
 8004be2:	f001 fe5d 	bl	80068a0 <HAL_Delay>

    return *id;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	e00d      	b.n	8004c08 <rda5807_init+0xcc>
    	goto err_out;
 8004bec:	bf00      	nop
 8004bee:	e002      	b.n	8004bf6 <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 8004bf0:	bf00      	nop
 8004bf2:	e000      	b.n	8004bf6 <rda5807_init+0xba>
    if (devError & devRDA) goto err_out;
 8004bf4:	bf00      	nop

err_out:
	devError |= devRDA;
 8004bf6:	4b07      	ldr	r3, [pc, #28]	; (8004c14 <rda5807_init+0xd8>)
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	4b04      	ldr	r3, [pc, #16]	; (8004c14 <rda5807_init+0xd8>)
 8004c02:	801a      	strh	r2, [r3, #0]
    return *id;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	781b      	ldrb	r3, [r3, #0]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	200001e4 	.word	0x200001e4
 8004c14:	20001468 	.word	0x20001468

08004c18 <rda5807_rssi>:
//==============================================================================
uint16_t rda5807_rssi()
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
uint16_t word = 0;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	80fb      	strh	r3, [r7, #6]

    rda5807_read(0x0B, &word, 1);
 8004c22:	1dbb      	adds	r3, r7, #6
 8004c24:	2201      	movs	r2, #1
 8004c26:	4619      	mov	r1, r3
 8004c28:	200b      	movs	r0, #11
 8004c2a:	f000 f85d 	bl	8004ce8 <rda5807_read>

    return (word >> 9);
 8004c2e:	88fb      	ldrh	r3, [r7, #6]
 8004c30:	0a5b      	lsrs	r3, r3, #9
 8004c32:	b29b      	uxth	r3, r3
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <rda5807_bytes_change>:

//==============================================================================
// Процедура меняет местами байты попарно в буфере pBuff 
//==============================================================================
void rda5807_bytes_change(uint8_t *pBuff, uint8_t count)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 8004c48:	e010      	b.n	8004c6c <rda5807_bytes_change+0x30>
        uint8_t Temp = *(pBuff + 1);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	785b      	ldrb	r3, [r3, #1]
 8004c4e:	73fb      	strb	r3, [r7, #15]
        *(pBuff + 1) = *pBuff;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3301      	adds	r3, #1
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	7812      	ldrb	r2, [r2, #0]
 8004c58:	701a      	strb	r2, [r3, #0]
        *pBuff = Temp;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	7bfa      	ldrb	r2, [r7, #15]
 8004c5e:	701a      	strb	r2, [r3, #0]
        pBuff += 2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3302      	adds	r3, #2
 8004c64:	607b      	str	r3, [r7, #4]
        count -= 2;
 8004c66:	78fb      	ldrb	r3, [r7, #3]
 8004c68:	3b02      	subs	r3, #2
 8004c6a:	70fb      	strb	r3, [r7, #3]
    while (count > 1) {    // Если осталась хотя бы пара байт
 8004c6c:	78fb      	ldrb	r3, [r7, #3]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d8eb      	bhi.n	8004c4a <rda5807_bytes_change+0xe>
    }
}
 8004c72:	bf00      	nop
 8004c74:	bf00      	nop
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <rda5807_write_regfile>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с 0x02
// Используется I2C-адрес RDA5807_SeqAccess_Addr
//==============================================================================
void rda5807_write_regfile(uint16_t *pBuff, uint8_t RegNum)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	70fb      	strb	r3, [r7, #3]
    err = i2cm_Start(I2Cx, RDA5807_SeqAccess_Addr, 0, RDA5807_TO);
    if (err) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8004c8c:	78fb      	ldrb	r3, [r7, #3]
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	4619      	mov	r1, r3
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff ffd1 	bl	8004c3c <rda5807_bytes_change>

//    err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
//    i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Master_Transmit(i2cRDA, (uint16_t)RDA5807_SeqAccess_Addr, (uint8_t *)pBuff, RegNum << 1, RDA5807_TO) != HAL_OK) {
 8004c9a:	4b11      	ldr	r3, [pc, #68]	; (8004ce0 <rda5807_write_regfile+0x60>)
 8004c9c:	6818      	ldr	r0, [r3, #0]
 8004c9e:	78fb      	ldrb	r3, [r7, #3]
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004caa:	9200      	str	r2, [sp, #0]
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	2120      	movs	r1, #32
 8004cb0:	f002 fc7e 	bl	80075b0 <HAL_I2C_Master_Transmit>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d006      	beq.n	8004cc8 <rda5807_write_regfile+0x48>
    	devError |= devRDA;
 8004cba:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <rda5807_write_regfile+0x64>)
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	4b07      	ldr	r3, [pc, #28]	; (8004ce4 <rda5807_write_regfile+0x64>)
 8004cc6:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	4619      	mov	r1, r3
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff ffb3 	bl	8004c3c <rda5807_bytes_change>
}
 8004cd6:	bf00      	nop
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	200001e4 	.word	0x200001e4
 8004ce4:	20001468 	.word	0x20001468

08004ce8 <rda5807_read>:
//==============================================================================
// Процедура читает из rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_read(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af04      	add	r7, sp, #16
 8004cee:	4603      	mov	r3, r0
 8004cf0:	6039      	str	r1, [r7, #0]
 8004cf2:	71fb      	strb	r3, [r7, #7]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	71bb      	strb	r3, [r7, #6]
        Error_Handler();
    }
    // Читаем
    i2cm_ReadBuffAndStop(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO); //*/

    if (HAL_I2C_Mem_Read(i2cRDA, RDA5807_RandAccess_Addr,
 8004cf8:	4b13      	ldr	r3, [pc, #76]	; (8004d48 <rda5807_read+0x60>)
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	79fb      	ldrb	r3, [r7, #7]
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	79bb      	ldrb	r3, [r7, #6]
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d0c:	9102      	str	r1, [sp, #8]
 8004d0e:	9301      	str	r3, [sp, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	2301      	movs	r3, #1
 8004d16:	2122      	movs	r1, #34	; 0x22
 8004d18:	f002 fe52 	bl	80079c0 <HAL_I2C_Mem_Read>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d006      	beq.n	8004d30 <rda5807_read+0x48>
    				     RegAddr, I2C_MEMADD_SIZE_8BIT,
						 (uint8_t *)pBuff, RegNum << 1,
						 RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 8004d22:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <rda5807_read+0x64>)
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	4b07      	ldr	r3, [pc, #28]	; (8004d4c <rda5807_read+0x64>)
 8004d2e:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8004d30:	79bb      	ldrb	r3, [r7, #6]
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	4619      	mov	r1, r3
 8004d38:	6838      	ldr	r0, [r7, #0]
 8004d3a:	f7ff ff7f 	bl	8004c3c <rda5807_bytes_change>
}
 8004d3e:	bf00      	nop
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	200001e4 	.word	0x200001e4
 8004d4c:	20001468 	.word	0x20001468

08004d50 <rda5807_write>:
//==============================================================================
// Процедура пишет в rda5807 группу регистров (кол-во RegNum) начиная с RegAddr
// Используется I2C-адрес RDA5807_RandAccess_Addr (для режима совместимости с rda5800)
//==============================================================================
void rda5807_write(uint8_t RegAddr, uint16_t *pBuff, uint8_t RegNum)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af04      	add	r7, sp, #16
 8004d56:	4603      	mov	r3, r0
 8004d58:	6039      	str	r1, [r7, #0]
 8004d5a:	71fb      	strb	r3, [r7, #7]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	71bb      	strb	r3, [r7, #6]

    if (i2cm_WriteBuff(I2Cx, &RegAddr, 1, RDA5807_TO)) {
        Error_Handler();
    } //*/

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8004d60:	79bb      	ldrb	r3, [r7, #6]
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	4619      	mov	r1, r3
 8004d68:	6838      	ldr	r0, [r7, #0]
 8004d6a:	f7ff ff67 	bl	8004c3c <rda5807_bytes_change>

    //err = i2cm_WriteBuff(I2Cx, (uint8_t *) pBuff, RegNum << 1, RDA5807_TO);
    //i2cm_Stop(I2Cx, RDA5807_TO);

    if (HAL_I2C_Mem_Write(i2cRDA,
 8004d6e:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <rda5807_write+0x6c>)
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	79fb      	ldrb	r3, [r7, #7]
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	79bb      	ldrb	r3, [r7, #6]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d82:	9102      	str	r1, [sp, #8]
 8004d84:	9301      	str	r3, [sp, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	2122      	movs	r1, #34	; 0x22
 8004d8e:	f002 fd03 	bl	8007798 <HAL_I2C_Mem_Write>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d006      	beq.n	8004da6 <rda5807_write+0x56>
    					  RDA5807_RandAccess_Addr,
						  RegAddr, I2C_MEMADD_SIZE_8BIT,
						  (uint8_t *)pBuff, RegNum << 1,
						  RDA5807_TO) != HAL_OK) {
    	devError |= devRDA;
 8004d98:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <rda5807_write+0x70>)
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	4b07      	ldr	r3, [pc, #28]	; (8004dc0 <rda5807_write+0x70>)
 8004da4:	801a      	strh	r2, [r3, #0]
    }

    rda5807_bytes_change((uint8_t *)pBuff, RegNum << 1);
 8004da6:	79bb      	ldrb	r3, [r7, #6]
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	4619      	mov	r1, r3
 8004dae:	6838      	ldr	r0, [r7, #0]
 8004db0:	f7ff ff44 	bl	8004c3c <rda5807_bytes_change>
}
 8004db4:	bf00      	nop
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	200001e4 	.word	0x200001e4
 8004dc0:	20001468 	.word	0x20001468

08004dc4 <rda5807_SoftReset>:

//==============================================================================
// Процедура делает программный сброс rda5807
//==============================================================================
void rda5807_SoftReset()
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
tReg02h reg02;

    rda5807_read(2, (uint16_t *)&reg02, 1);
 8004dca:	1d3b      	adds	r3, r7, #4
 8004dcc:	2201      	movs	r2, #1
 8004dce:	4619      	mov	r1, r3
 8004dd0:	2002      	movs	r0, #2
 8004dd2:	f7ff ff89 	bl	8004ce8 <rda5807_read>

	reg02.bENABLE = 1;
 8004dd6:	793b      	ldrb	r3, [r7, #4]
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	713b      	strb	r3, [r7, #4]
	reg02.bSOFT_RESET = 1;
 8004dde:	793b      	ldrb	r3, [r7, #4]
 8004de0:	f043 0302 	orr.w	r3, r3, #2
 8004de4:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 8004de6:	1d3b      	adds	r3, r7, #4
 8004de8:	2201      	movs	r2, #1
 8004dea:	4619      	mov	r1, r3
 8004dec:	2002      	movs	r0, #2
 8004dee:	f7ff ffaf 	bl	8004d50 <rda5807_write>

    reg02.bENABLE = 1;
 8004df2:	793b      	ldrb	r3, [r7, #4]
 8004df4:	f043 0301 	orr.w	r3, r3, #1
 8004df8:	713b      	strb	r3, [r7, #4]
    reg02.bSOFT_RESET = 0;
 8004dfa:	793b      	ldrb	r3, [r7, #4]
 8004dfc:	f36f 0341 	bfc	r3, #1, #1
 8004e00:	713b      	strb	r3, [r7, #4]
    rda5807_write(2, (uint16_t *)&reg02, 1);
 8004e02:	1d3b      	adds	r3, r7, #4
 8004e04:	2201      	movs	r2, #1
 8004e06:	4619      	mov	r1, r3
 8004e08:	2002      	movs	r0, #2
 8004e0a:	f7ff ffa1 	bl	8004d50 <rda5807_write>
}
 8004e0e:	bf00      	nop
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <rda5807_SetupDefault>:

//==============================================================================
// Процедура производит начальную настройку rda5807
//==============================================================================
void rda5807_SetupDefault()
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
	tReg06h Reg06;
	tReg07h Reg07;
} Buffs;*/

    // Регистр 0x02
    Buffs.Reg02.bENABLE = 1;
 8004e1c:	4a6b      	ldr	r2, [pc, #428]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004e1e:	7813      	ldrb	r3, [r2, #0]
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSOFT_RESET = 0;
 8004e26:	4a69      	ldr	r2, [pc, #420]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004e28:	7813      	ldrb	r3, [r2, #0]
 8004e2a:	f36f 0341 	bfc	r3, #1, #1
 8004e2e:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bNEW_METHOD = 1;
 8004e30:	4a66      	ldr	r2, [pc, #408]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004e32:	7813      	ldrb	r3, [r2, #0]
 8004e34:	f043 0304 	orr.w	r3, r3, #4
 8004e38:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bRDS_EN = 1;
 8004e3a:	4a64      	ldr	r2, [pc, #400]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004e3c:	7813      	ldrb	r3, [r2, #0]
 8004e3e:	f043 0308 	orr.w	r3, r3, #8
 8004e42:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bCLK_MODE = 0;        // 32.768
 8004e44:	4a61      	ldr	r2, [pc, #388]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004e46:	7813      	ldrb	r3, [r2, #0]
 8004e48:	f36f 1306 	bfc	r3, #4, #3
 8004e4c:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSKMODE = 0;
 8004e4e:	4a5f      	ldr	r2, [pc, #380]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004e50:	7813      	ldrb	r3, [r2, #0]
 8004e52:	f36f 13c7 	bfc	r3, #7, #1
 8004e56:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 0;
 8004e58:	4a5c      	ldr	r2, [pc, #368]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004e5a:	7853      	ldrb	r3, [r2, #1]
 8004e5c:	f36f 0300 	bfc	r3, #0, #1
 8004e60:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = 1;
 8004e62:	4a5a      	ldr	r2, [pc, #360]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004e64:	7853      	ldrb	r3, [r2, #1]
 8004e66:	f043 0302 	orr.w	r3, r3, #2
 8004e6a:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_DirectInput = 0;
 8004e6c:	4a57      	ldr	r2, [pc, #348]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004e6e:	7853      	ldrb	r3, [r2, #1]
 8004e70:	f36f 0382 	bfc	r3, #2, #1
 8004e74:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bRCLK_NonCalibMode = 0;
 8004e76:	4a55      	ldr	r2, [pc, #340]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004e78:	7853      	ldrb	r3, [r2, #1]
 8004e7a:	f36f 03c3 	bfc	r3, #3, #1
 8004e7e:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bBASS = 0;
 8004e80:	4a52      	ldr	r2, [pc, #328]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004e82:	7853      	ldrb	r3, [r2, #1]
 8004e84:	f36f 1304 	bfc	r3, #4, #1
 8004e88:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bMONO = 0;
 8004e8a:	4a50      	ldr	r2, [pc, #320]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004e8c:	7853      	ldrb	r3, [r2, #1]
 8004e8e:	f36f 1345 	bfc	r3, #5, #1
 8004e92:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDMUTE = 1;
 8004e94:	4a4d      	ldr	r2, [pc, #308]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004e96:	7853      	ldrb	r3, [r2, #1]
 8004e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e9c:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bDHIZ = 1;
 8004e9e:	4a4b      	ldr	r2, [pc, #300]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004ea0:	7853      	ldrb	r3, [r2, #1]
 8004ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea6:	7053      	strb	r3, [r2, #1]
    // Регистр 0x03
    Buffs.Reg03.bSPACE = 0;//Step;//0;   // Шаг настройки - 0 = 100 КГц
 8004ea8:	4a48      	ldr	r2, [pc, #288]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004eaa:	7893      	ldrb	r3, [r2, #2]
 8004eac:	f36f 0301 	bfc	r3, #0, #2
 8004eb0:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bBAND = Band;//2;//0;    // Диапазон 2 - 76–108 MHz
 8004eb2:	4b47      	ldr	r3, [pc, #284]	; (8004fd0 <rda5807_SetupDefault+0x1b8>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	b2d9      	uxtb	r1, r3
 8004ebc:	4a43      	ldr	r2, [pc, #268]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004ebe:	7893      	ldrb	r3, [r2, #2]
 8004ec0:	f361 0383 	bfi	r3, r1, #2, #2
 8004ec4:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bTUNE = 1;
 8004ec6:	4a41      	ldr	r2, [pc, #260]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004ec8:	7893      	ldrb	r3, [r2, #2]
 8004eca:	f043 0310 	orr.w	r3, r3, #16
 8004ece:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bDIRECT_MODE = 0;
 8004ed0:	4a3e      	ldr	r2, [pc, #248]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004ed2:	7893      	ldrb	r3, [r2, #2]
 8004ed4:	f36f 1345 	bfc	r3, #5, #1
 8004ed8:	7093      	strb	r3, [r2, #2]
    Buffs.Reg03.bCHAN = 0;
 8004eda:	4a3c      	ldr	r2, [pc, #240]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004edc:	8853      	ldrh	r3, [r2, #2]
 8004ede:	f36f 138f 	bfc	r3, #6, #10
 8004ee2:	8053      	strh	r3, [r2, #2]
    // Регистр 0x04
    Buffs.Reg04.bRSVD1 = 0;
 8004ee4:	4b39      	ldr	r3, [pc, #228]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	711a      	strb	r2, [r3, #4]
    Buffs.Reg04.bAFCD = 0;
 8004eea:	4a38      	ldr	r2, [pc, #224]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004eec:	7953      	ldrb	r3, [r2, #5]
 8004eee:	f36f 0300 	bfc	r3, #0, #1
 8004ef2:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bSOFTMUTE_EN = 1;
 8004ef4:	4a35      	ldr	r2, [pc, #212]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004ef6:	7953      	ldrb	r3, [r2, #5]
 8004ef8:	f043 0302 	orr.w	r3, r3, #2
 8004efc:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD2 = 0;
 8004efe:	4a33      	ldr	r2, [pc, #204]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004f00:	7953      	ldrb	r3, [r2, #5]
 8004f02:	f36f 0382 	bfc	r3, #2, #1
 8004f06:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bDE = 0;
 8004f08:	4a30      	ldr	r2, [pc, #192]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004f0a:	7953      	ldrb	r3, [r2, #5]
 8004f0c:	f36f 03c3 	bfc	r3, #3, #1
 8004f10:	7153      	strb	r3, [r2, #5]
    Buffs.Reg04.bRSVD3 = 0;
 8004f12:	4a2e      	ldr	r2, [pc, #184]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004f14:	7953      	ldrb	r3, [r2, #5]
 8004f16:	f36f 1307 	bfc	r3, #4, #4
 8004f1a:	7153      	strb	r3, [r2, #5]
    // Регистр 0x05
    Buffs.Reg05.bVOLUME = 0;
 8004f1c:	4a2b      	ldr	r2, [pc, #172]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004f1e:	7993      	ldrb	r3, [r2, #6]
 8004f20:	f36f 0303 	bfc	r3, #0, #4
 8004f24:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_GAIN = 0;
 8004f26:	4a29      	ldr	r2, [pc, #164]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004f28:	7993      	ldrb	r3, [r2, #6]
 8004f2a:	f36f 1305 	bfc	r3, #4, #2
 8004f2e:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bANT_TYPE = ANT_TYPE_Both;//ANT_TYPE_External;//ANT_TYPE_Headphones;//ANT_TYPE_Both;
 8004f30:	4a26      	ldr	r2, [pc, #152]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004f32:	7993      	ldrb	r3, [r2, #6]
 8004f34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f38:	7193      	strb	r3, [r2, #6]
    Buffs.Reg05.bSEEKTH = 8;
 8004f3a:	4a24      	ldr	r2, [pc, #144]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004f3c:	79d3      	ldrb	r3, [r2, #7]
 8004f3e:	2108      	movs	r1, #8
 8004f40:	f361 0303 	bfi	r3, r1, #0, #4
 8004f44:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bRSVD3 = 0;
 8004f46:	4a21      	ldr	r2, [pc, #132]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004f48:	79d3      	ldrb	r3, [r2, #7]
 8004f4a:	f36f 1306 	bfc	r3, #4, #3
 8004f4e:	71d3      	strb	r3, [r2, #7]
    Buffs.Reg05.bINT_MODE = 1;
 8004f50:	4a1e      	ldr	r2, [pc, #120]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004f52:	79d3      	ldrb	r3, [r2, #7]
 8004f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f58:	71d3      	strb	r3, [r2, #7]
    // Регистр 0x06
    Buffs.Reg06.bRSVD1 = 0;
 8004f5a:	4a1c      	ldr	r2, [pc, #112]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004f5c:	8913      	ldrh	r3, [r2, #8]
 8004f5e:	f36f 030c 	bfc	r3, #0, #13
 8004f62:	8113      	strh	r3, [r2, #8]
    Buffs.Reg06.bOPEN_MODE = 0;
 8004f64:	4a19      	ldr	r2, [pc, #100]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004f66:	7a53      	ldrb	r3, [r2, #9]
 8004f68:	f36f 1346 	bfc	r3, #5, #2
 8004f6c:	7253      	strb	r3, [r2, #9]
    Buffs.Reg06.bRSVD2 = 0;
 8004f6e:	4a17      	ldr	r2, [pc, #92]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004f70:	7a53      	ldrb	r3, [r2, #9]
 8004f72:	f36f 13c7 	bfc	r3, #7, #1
 8004f76:	7253      	strb	r3, [r2, #9]
    // Регистр 0x07
    Buffs.Reg07.bFREQ_MODE = 0;
 8004f78:	4a14      	ldr	r2, [pc, #80]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004f7a:	7a93      	ldrb	r3, [r2, #10]
 8004f7c:	f36f 0300 	bfc	r3, #0, #1
 8004f80:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSOFTBLEND_EN = 1;
 8004f82:	4a12      	ldr	r2, [pc, #72]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004f84:	7a93      	ldrb	r3, [r2, #10]
 8004f86:	f043 0302 	orr.w	r3, r3, #2
 8004f8a:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bSEEK_TH_OLD = 0;
 8004f8c:	4a0f      	ldr	r2, [pc, #60]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004f8e:	7a93      	ldrb	r3, [r2, #10]
 8004f90:	f36f 0387 	bfc	r3, #2, #6
 8004f94:	7293      	strb	r3, [r2, #10]
    Buffs.Reg07.bRSVD1 = 0;
 8004f96:	4a0d      	ldr	r2, [pc, #52]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004f98:	7ad3      	ldrb	r3, [r2, #11]
 8004f9a:	f36f 0300 	bfc	r3, #0, #1
 8004f9e:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.b65M_50M_MODE = 1;
 8004fa0:	4a0a      	ldr	r2, [pc, #40]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004fa2:	7ad3      	ldrb	r3, [r2, #11]
 8004fa4:	f043 0302 	orr.w	r3, r3, #2
 8004fa8:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bTH_SOFRBLEND = 16;
 8004faa:	4a08      	ldr	r2, [pc, #32]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004fac:	7ad3      	ldrb	r3, [r2, #11]
 8004fae:	2110      	movs	r1, #16
 8004fb0:	f361 0386 	bfi	r3, r1, #2, #5
 8004fb4:	72d3      	strb	r3, [r2, #11]
    Buffs.Reg07.bRSVD2 = 0;
 8004fb6:	4a05      	ldr	r2, [pc, #20]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004fb8:	7ad3      	ldrb	r3, [r2, #11]
 8004fba:	f36f 13c7 	bfc	r3, #7, #1
 8004fbe:	72d3      	strb	r3, [r2, #11]

    // Пишем регистры функцией записи регистрового файла
    rda5807_write_regfile((uint16_t *)&(Buffs.Reg02), 6);
 8004fc0:	2106      	movs	r1, #6
 8004fc2:	4802      	ldr	r0, [pc, #8]	; (8004fcc <rda5807_SetupDefault+0x1b4>)
 8004fc4:	f7ff fe5c 	bl	8004c80 <rda5807_write_regfile>
}
 8004fc8:	bf00      	nop
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20003fec 	.word	0x20003fec
 8004fd0:	200001c8 	.word	0x200001c8

08004fd4 <rda5807_SetVolume>:

//==============================================================================
// Процедура устанавливает уровень громкости (0..16) выхода rda5807. При Value=0 включает MUTE
//==============================================================================
void rda5807_SetVolume(uint8_t Value)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	4603      	mov	r3, r0
 8004fdc:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;
//tReg05h Reg05;
uint8_t Mute = Value ? 0 : 1;
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	bf0c      	ite	eq
 8004fe4:	2301      	moveq	r3, #1
 8004fe6:	2300      	movne	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	73fb      	strb	r3, [r7, #15]

    if (Value > 16) Value = 16;
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	2b10      	cmp	r3, #16
 8004ff0:	d901      	bls.n	8004ff6 <rda5807_SetVolume+0x22>
 8004ff2:	2310      	movs	r3, #16
 8004ff4:	71fb      	strb	r3, [r7, #7]

    Value--;    // Значение для поля Volume на 1 меньше, чем входной параметр функции
 8004ff6:	79fb      	ldrb	r3, [r7, #7]
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	71fb      	strb	r3, [r7, #7]

    if (!Mute) {
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d112      	bne.n	8005028 <rda5807_SetVolume+0x54>
        // Читаем регистр 0x05
        rda5807_read(5, (uint16_t *)&Buffs.Reg05, 1);
 8005002:	2201      	movs	r2, #1
 8005004:	4915      	ldr	r1, [pc, #84]	; (800505c <rda5807_SetVolume+0x88>)
 8005006:	2005      	movs	r0, #5
 8005008:	f7ff fe6e 	bl	8004ce8 <rda5807_read>
        // Меняем значение поля VOLUME
        Buffs.Reg05.bVOLUME = Value;
 800500c:	79fb      	ldrb	r3, [r7, #7]
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	b2d9      	uxtb	r1, r3
 8005014:	4a12      	ldr	r2, [pc, #72]	; (8005060 <rda5807_SetVolume+0x8c>)
 8005016:	7993      	ldrb	r3, [r2, #6]
 8005018:	f361 0303 	bfi	r3, r1, #0, #4
 800501c:	7193      	strb	r3, [r2, #6]
        // Пишем регистр 0x05
        rda5807_write(5, (uint16_t *)&Buffs.Reg05, 1);
 800501e:	2201      	movs	r2, #1
 8005020:	490e      	ldr	r1, [pc, #56]	; (800505c <rda5807_SetVolume+0x88>)
 8005022:	2005      	movs	r0, #5
 8005024:	f7ff fe94 	bl	8004d50 <rda5807_write>
    }

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 8005028:	2201      	movs	r2, #1
 800502a:	490d      	ldr	r1, [pc, #52]	; (8005060 <rda5807_SetVolume+0x8c>)
 800502c:	2002      	movs	r0, #2
 800502e:	f7ff fe5b 	bl	8004ce8 <rda5807_read>
    // Меняем значение поля VOLUME
    Buffs.Reg02.bDMUTE = Mute ? 0 : 1;
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	2b00      	cmp	r3, #0
 8005036:	bf0c      	ite	eq
 8005038:	2301      	moveq	r3, #1
 800503a:	2300      	movne	r3, #0
 800503c:	b2d9      	uxtb	r1, r3
 800503e:	4a08      	ldr	r2, [pc, #32]	; (8005060 <rda5807_SetVolume+0x8c>)
 8005040:	7853      	ldrb	r3, [r2, #1]
 8005042:	f361 1386 	bfi	r3, r1, #6, #1
 8005046:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 8005048:	2201      	movs	r2, #1
 800504a:	4905      	ldr	r1, [pc, #20]	; (8005060 <rda5807_SetVolume+0x8c>)
 800504c:	2002      	movs	r0, #2
 800504e:	f7ff fe7f 	bl	8004d50 <rda5807_write>
}
 8005052:	bf00      	nop
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20003ff2 	.word	0x20003ff2
 8005060:	20003fec 	.word	0x20003fec

08005064 <rda5807_SetBassBoost>:

//==============================================================================
// Процедура включает/выключает BassBoost
//==============================================================================
void rda5807_SetBassBoost(uint8_t Value)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	4603      	mov	r3, r0
 800506c:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(2, (uint16_t *)&Buffs.Reg02, 1);
 800506e:	2201      	movs	r2, #1
 8005070:	490b      	ldr	r1, [pc, #44]	; (80050a0 <rda5807_SetBassBoost+0x3c>)
 8005072:	2002      	movs	r0, #2
 8005074:	f7ff fe38 	bl	8004ce8 <rda5807_read>
    // Меняем значение поля BASS
    Buffs.Reg02.bBASS = (Value) ? 1 : 0;
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	2b00      	cmp	r3, #0
 800507c:	bf14      	ite	ne
 800507e:	2301      	movne	r3, #1
 8005080:	2300      	moveq	r3, #0
 8005082:	b2d9      	uxtb	r1, r3
 8005084:	4a06      	ldr	r2, [pc, #24]	; (80050a0 <rda5807_SetBassBoost+0x3c>)
 8005086:	7853      	ldrb	r3, [r2, #1]
 8005088:	f361 1304 	bfi	r3, r1, #4, #1
 800508c:	7053      	strb	r3, [r2, #1]
    // Пишем регистр 0x02
    rda5807_write(2, (uint16_t *)&Buffs.Reg02, 1);
 800508e:	2201      	movs	r2, #1
 8005090:	4903      	ldr	r1, [pc, #12]	; (80050a0 <rda5807_SetBassBoost+0x3c>)
 8005092:	2002      	movs	r0, #2
 8005094:	f7ff fe5c 	bl	8004d50 <rda5807_write>
}
 8005098:	bf00      	nop
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20003fec 	.word	0x20003fec

080050a4 <rda5807_SetFreq_In100Khz>:
//==============================================================================
// Процедура устанавливает текущую частоту Freq100kHz и стартует перенастройку rda5807 на эту частоту.
// Окончание процесса можно установки можно проконтроллировать по обнулению бита STR в регистре 0x0A (функцией rda5807_Get_SeekTuneReadyFlag)
//==============================================================================
void rda5807_SetFreq_In100Khz(uint16_t Freq100kHz)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	4603      	mov	r3, r0
 80050ac:	80fb      	strh	r3, [r7, #6]
//tReg03h Reg03;
uint16_t l = 870, r = 1080;
 80050ae:	f240 3366 	movw	r3, #870	; 0x366
 80050b2:	81fb      	strh	r3, [r7, #14]
 80050b4:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80050b8:	81bb      	strh	r3, [r7, #12]

    // Проверка входного параметра для диапазона Buffs.Reg03.bBAND
	switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 80050ba:	4b33      	ldr	r3, [pc, #204]	; (8005188 <rda5807_SetFreq_In100Khz+0xe4>)
 80050bc:	789b      	ldrb	r3, [r3, #2]
 80050be:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	d011      	beq.n	80050ec <rda5807_SetFreq_In100Khz+0x48>
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	dc16      	bgt.n	80050fa <rda5807_SetFreq_In100Khz+0x56>
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d002      	beq.n	80050d6 <rda5807_SetFreq_In100Khz+0x32>
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d007      	beq.n	80050e4 <rda5807_SetFreq_In100Khz+0x40>
 80050d4:	e011      	b.n	80050fa <rda5807_SetFreq_In100Khz+0x56>
		//case 0:// 00 = 87–108 MHz (US/Europe)
		//break;
		case 1:// 01 = 76–91 MHz (Japan)
			l = 760;
 80050d6:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80050da:	81fb      	strh	r3, [r7, #14]
			r = 910;
 80050dc:	f240 338e 	movw	r3, #910	; 0x38e
 80050e0:	81bb      	strh	r3, [r7, #12]
		break;
 80050e2:	e00a      	b.n	80050fa <rda5807_SetFreq_In100Khz+0x56>
		case 2:// 10 = 76–108 MHz (world wide)
			l = 760;
 80050e4:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80050e8:	81fb      	strh	r3, [r7, #14]
		break;
 80050ea:	e006      	b.n	80050fa <rda5807_SetFreq_In100Khz+0x56>
		case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
			l = 650;
 80050ec:	f240 238a 	movw	r3, #650	; 0x28a
 80050f0:	81fb      	strh	r3, [r7, #14]
			r = 760;
 80050f2:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80050f6:	81bb      	strh	r3, [r7, #12]
		break;
 80050f8:	bf00      	nop
	}
	lBand = ((float)l) / 10;
 80050fa:	89fb      	ldrh	r3, [r7, #14]
 80050fc:	ee07 3a90 	vmov	s15, r3
 8005100:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005104:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005108:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800510c:	4b1f      	ldr	r3, [pc, #124]	; (800518c <rda5807_SetFreq_In100Khz+0xe8>)
 800510e:	edc3 7a00 	vstr	s15, [r3]
	rBand = ((float)r) / 10;
 8005112:	89bb      	ldrh	r3, [r7, #12]
 8005114:	ee07 3a90 	vmov	s15, r3
 8005118:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800511c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005120:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005124:	4b1a      	ldr	r3, [pc, #104]	; (8005190 <rda5807_SetFreq_In100Khz+0xec>)
 8005126:	edc3 7a00 	vstr	s15, [r3]

    if (Freq100kHz < l)  Freq100kHz = l;
 800512a:	88fa      	ldrh	r2, [r7, #6]
 800512c:	89fb      	ldrh	r3, [r7, #14]
 800512e:	429a      	cmp	r2, r3
 8005130:	d201      	bcs.n	8005136 <rda5807_SetFreq_In100Khz+0x92>
 8005132:	89fb      	ldrh	r3, [r7, #14]
 8005134:	80fb      	strh	r3, [r7, #6]
    if (Freq100kHz > r) Freq100kHz = r;
 8005136:	88fa      	ldrh	r2, [r7, #6]
 8005138:	89bb      	ldrh	r3, [r7, #12]
 800513a:	429a      	cmp	r2, r3
 800513c:	d901      	bls.n	8005142 <rda5807_SetFreq_In100Khz+0x9e>
 800513e:	89bb      	ldrh	r3, [r7, #12]
 8005140:	80fb      	strh	r3, [r7, #6]

    // Вычитаем начало диапазона (left)
    Freq100kHz -= l;
 8005142:	88fa      	ldrh	r2, [r7, #6]
 8005144:	89fb      	ldrh	r3, [r7, #14]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	80fb      	strh	r3, [r7, #6]

    // Читаем регистр 0x03
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 800514a:	2201      	movs	r2, #1
 800514c:	4911      	ldr	r1, [pc, #68]	; (8005194 <rda5807_SetFreq_In100Khz+0xf0>)
 800514e:	2003      	movs	r0, #3
 8005150:	f7ff fdca 	bl	8004ce8 <rda5807_read>
    // Меняем значение поля CHAN
    Buffs.Reg03.bCHAN = Freq100kHz;
 8005154:	88fb      	ldrh	r3, [r7, #6]
 8005156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800515a:	b299      	uxth	r1, r3
 800515c:	4a0a      	ldr	r2, [pc, #40]	; (8005188 <rda5807_SetFreq_In100Khz+0xe4>)
 800515e:	8853      	ldrh	r3, [r2, #2]
 8005160:	f361 138f 	bfi	r3, r1, #6, #10
 8005164:	8053      	strh	r3, [r2, #2]
    // Выставляем флаг начала перенастройки на канал
    Buffs.Reg03.bTUNE = 1;
 8005166:	4a08      	ldr	r2, [pc, #32]	; (8005188 <rda5807_SetFreq_In100Khz+0xe4>)
 8005168:	7893      	ldrb	r3, [r2, #2]
 800516a:	f043 0310 	orr.w	r3, r3, #16
 800516e:	7093      	strb	r3, [r2, #2]
    // Пишем регистр 0x03
    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 8005170:	2201      	movs	r2, #1
 8005172:	4908      	ldr	r1, [pc, #32]	; (8005194 <rda5807_SetFreq_In100Khz+0xf0>)
 8005174:	2003      	movs	r0, #3
 8005176:	f7ff fdeb 	bl	8004d50 <rda5807_write>

    HAL_Delay(50);
 800517a:	2032      	movs	r0, #50	; 0x32
 800517c:	f001 fb90 	bl	80068a0 <HAL_Delay>
}
 8005180:	bf00      	nop
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	20003fec 	.word	0x20003fec
 800518c:	20003cd4 	.word	0x20003cd4
 8005190:	20003cd8 	.word	0x20003cd8
 8005194:	20003fee 	.word	0x20003fee

08005198 <rda5807_GetFreq_In100Khz>:

//==============================================================================
// Функция читает текущую частоту, на которую настроен rda5807
//==============================================================================
uint16_t rda5807_GetFreq_In100Khz()
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 800519e:	2201      	movs	r2, #1
 80051a0:	491b      	ldr	r1, [pc, #108]	; (8005210 <rda5807_GetFreq_In100Khz+0x78>)
 80051a2:	200a      	movs	r0, #10
 80051a4:	f7ff fda0 	bl	8004ce8 <rda5807_read>

    uint16_t Freq100kHz = Buffs.Reg0A.bREADCHAN;
 80051a8:	4b1a      	ldr	r3, [pc, #104]	; (8005214 <rda5807_GetFreq_In100Khz+0x7c>)
 80051aa:	8a1b      	ldrh	r3, [r3, #16]
 80051ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	80bb      	strh	r3, [r7, #4]

    if (Freq100kHz == 319) return 0;
 80051b4:	88bb      	ldrh	r3, [r7, #4]
 80051b6:	f240 123f 	movw	r2, #319	; 0x13f
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d101      	bne.n	80051c2 <rda5807_GetFreq_In100Khz+0x2a>
 80051be:	2300      	movs	r3, #0
 80051c0:	e021      	b.n	8005206 <rda5807_GetFreq_In100Khz+0x6e>

    // Прибавляем начало диапазона (87 МГц)
    uint16_t left = 870;
 80051c2:	f240 3366 	movw	r3, #870	; 0x366
 80051c6:	80fb      	strh	r3, [r7, #6]
    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 80051c8:	4b12      	ldr	r3, [pc, #72]	; (8005214 <rda5807_GetFreq_In100Khz+0x7c>)
 80051ca:	789b      	ldrb	r3, [r3, #2]
 80051cc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d00e      	beq.n	80051f4 <rda5807_GetFreq_In100Khz+0x5c>
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	dc10      	bgt.n	80051fc <rda5807_GetFreq_In100Khz+0x64>
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d002      	beq.n	80051e4 <rda5807_GetFreq_In100Khz+0x4c>
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d004      	beq.n	80051ec <rda5807_GetFreq_In100Khz+0x54>
 80051e2:	e00b      	b.n	80051fc <rda5807_GetFreq_In100Khz+0x64>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		left = 760;
 80051e4:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80051e8:	80fb      	strh	r3, [r7, #6]
    	break;
 80051ea:	e007      	b.n	80051fc <rda5807_GetFreq_In100Khz+0x64>
    	case 2:// 10 = 76–108 MHz (world wide)
    		left = 760;
 80051ec:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80051f0:	80fb      	strh	r3, [r7, #6]
    	break;
 80051f2:	e003      	b.n	80051fc <rda5807_GetFreq_In100Khz+0x64>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		left = 650;
 80051f4:	f240 238a 	movw	r3, #650	; 0x28a
 80051f8:	80fb      	strh	r3, [r7, #6]
    	break;
 80051fa:	bf00      	nop
    }
    Freq100kHz += left;
 80051fc:	88ba      	ldrh	r2, [r7, #4]
 80051fe:	88fb      	ldrh	r3, [r7, #6]
 8005200:	4413      	add	r3, r2
 8005202:	80bb      	strh	r3, [r7, #4]

    return Freq100kHz;
 8005204:	88bb      	ldrh	r3, [r7, #4]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20003ffc 	.word	0x20003ffc
 8005214:	20003fec 	.word	0x20003fec

08005218 <rda5807_StartSeek>:

//==============================================================================
// Процедура стартует поиск радиостанции вверх/вниз
//==============================================================================
void rda5807_StartSeek(uint8_t Up)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	71fb      	strb	r3, [r7, #7]
//tReg02h Reg02;

    // Читаем регистр 0x02
    rda5807_read(0x02, (uint16_t *)&Buffs.Reg02, 1);
 8005222:	2201      	movs	r2, #1
 8005224:	4910      	ldr	r1, [pc, #64]	; (8005268 <rda5807_StartSeek+0x50>)
 8005226:	2002      	movs	r0, #2
 8005228:	f7ff fd5e 	bl	8004ce8 <rda5807_read>

    Buffs.Reg02.bSKMODE = 1;          // 07 Seek Mode (0 = wrap at the upper or lower band limit and continue seeking; 1 = stop seeking at the upper or lower band limit)
 800522c:	4a0e      	ldr	r2, [pc, #56]	; (8005268 <rda5807_StartSeek+0x50>)
 800522e:	7813      	ldrb	r3, [r2, #0]
 8005230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005234:	7013      	strb	r3, [r2, #0]
    Buffs.Reg02.bSEEK = 1;            // 08 Seek (0 = Disable stop seek; 1 = Enable)
 8005236:	4a0c      	ldr	r2, [pc, #48]	; (8005268 <rda5807_StartSeek+0x50>)
 8005238:	7853      	ldrb	r3, [r2, #1]
 800523a:	f043 0301 	orr.w	r3, r3, #1
 800523e:	7053      	strb	r3, [r2, #1]
    Buffs.Reg02.bSEEKUP = Up ? 1 : 0; // 09 Seek Up (0 = Seek down; 1 = Seek up)
 8005240:	79fb      	ldrb	r3, [r7, #7]
 8005242:	2b00      	cmp	r3, #0
 8005244:	bf14      	ite	ne
 8005246:	2301      	movne	r3, #1
 8005248:	2300      	moveq	r3, #0
 800524a:	b2d9      	uxtb	r1, r3
 800524c:	4a06      	ldr	r2, [pc, #24]	; (8005268 <rda5807_StartSeek+0x50>)
 800524e:	7853      	ldrb	r3, [r2, #1]
 8005250:	f361 0341 	bfi	r3, r1, #1, #1
 8005254:	7053      	strb	r3, [r2, #1]

    // Пишем регистр 0x02
    rda5807_write(0x02, (uint16_t *)&Buffs.Reg02, 1);
 8005256:	2201      	movs	r2, #1
 8005258:	4903      	ldr	r1, [pc, #12]	; (8005268 <rda5807_StartSeek+0x50>)
 800525a:	2002      	movs	r0, #2
 800525c:	f7ff fd78 	bl	8004d50 <rda5807_write>
}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	20003fec 	.word	0x20003fec

0800526c <rda5807_Get_SeekTuneReadyFlag>:
//==============================================================================
// Функция возвращает состояние бита STR (SeekTuneReadyFlag)
// SeekTuneReadyFlag=1 пока идёт процесс настройки на частоту или поиск радиостанции.
//==============================================================================
uint8_t rda5807_Get_SeekTuneReadyFlag()
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8005270:	2201      	movs	r2, #1
 8005272:	4905      	ldr	r1, [pc, #20]	; (8005288 <rda5807_Get_SeekTuneReadyFlag+0x1c>)
 8005274:	200a      	movs	r0, #10
 8005276:	f7ff fd37 	bl	8004ce8 <rda5807_read>

    return Buffs.Reg0A.bSTC;
 800527a:	4b04      	ldr	r3, [pc, #16]	; (800528c <rda5807_Get_SeekTuneReadyFlag+0x20>)
 800527c:	7c5b      	ldrb	r3, [r3, #17]
 800527e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005282:	b2db      	uxtb	r3, r3
}
 8005284:	4618      	mov	r0, r3
 8005286:	bd80      	pop	{r7, pc}
 8005288:	20003ffc 	.word	0x20003ffc
 800528c:	20003fec 	.word	0x20003fec

08005290 <rda5807_Get_StereoMonoFlag>:
//==============================================================================
//==============================================================================
bool rda5807_Get_StereoMonoFlag()
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 8005294:	2201      	movs	r2, #1
 8005296:	4908      	ldr	r1, [pc, #32]	; (80052b8 <rda5807_Get_StereoMonoFlag+0x28>)
 8005298:	200a      	movs	r0, #10
 800529a:	f7ff fd25 	bl	8004ce8 <rda5807_read>

    return Buffs.Reg0A.bST;     // Stereo Indicator (0 = Mono; 1 = Stereo)
 800529e:	4b07      	ldr	r3, [pc, #28]	; (80052bc <rda5807_Get_StereoMonoFlag+0x2c>)
 80052a0:	7c5b      	ldrb	r3, [r3, #17]
 80052a2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	bf14      	ite	ne
 80052ac:	2301      	movne	r3, #1
 80052ae:	2300      	moveq	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20003ffc 	.word	0x20003ffc
 80052bc:	20003fec 	.word	0x20003fec

080052c0 <rda5807_Get_Channel>:
//==============================================================================
uint16_t rda5807_Get_Channel()
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
//tReg0Ah reg0A;

    // Читаем регистр 0x0A
    rda5807_read(0x0A, (uint16_t *)&Buffs.Reg0A, 1);
 80052c4:	2201      	movs	r2, #1
 80052c6:	4905      	ldr	r1, [pc, #20]	; (80052dc <rda5807_Get_Channel+0x1c>)
 80052c8:	200a      	movs	r0, #10
 80052ca:	f7ff fd0d 	bl	8004ce8 <rda5807_read>

    return Buffs.Reg0A.bREADCHAN;    // 0-9 Read Channel.
 80052ce:	4b04      	ldr	r3, [pc, #16]	; (80052e0 <rda5807_Get_Channel+0x20>)
 80052d0:	8a1b      	ldrh	r3, [r3, #16]
 80052d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052d6:	b29b      	uxth	r3, r3
}
 80052d8:	4618      	mov	r0, r3
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	20003ffc 	.word	0x20003ffc
 80052e0:	20003fec 	.word	0x20003fec

080052e4 <rda5807_Set_Band>:
//==============================================================================
uint8_t rda5807_Set_Band(uint8_t band)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	4603      	mov	r3, r0
 80052ec:	71fb      	strb	r3, [r7, #7]
	if (band > 3) return 1;
 80052ee:	79fb      	ldrb	r3, [r7, #7]
 80052f0:	2b03      	cmp	r3, #3
 80052f2:	d901      	bls.n	80052f8 <rda5807_Set_Band+0x14>
 80052f4:	2301      	movs	r3, #1
 80052f6:	e054      	b.n	80053a2 <rda5807_Set_Band+0xbe>

    // Читаем регистр 3
    rda5807_read(3, (uint16_t *)&Buffs.Reg03, 1);
 80052f8:	2201      	movs	r2, #1
 80052fa:	492c      	ldr	r1, [pc, #176]	; (80053ac <rda5807_Set_Band+0xc8>)
 80052fc:	2003      	movs	r0, #3
 80052fe:	f7ff fcf3 	bl	8004ce8 <rda5807_read>

    Buffs.Reg03.bBAND = band;
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	f003 0303 	and.w	r3, r3, #3
 8005308:	b2d9      	uxtb	r1, r3
 800530a:	4a29      	ldr	r2, [pc, #164]	; (80053b0 <rda5807_Set_Band+0xcc>)
 800530c:	7893      	ldrb	r3, [r2, #2]
 800530e:	f361 0383 	bfi	r3, r1, #2, #2
 8005312:	7093      	strb	r3, [r2, #2]

    rda5807_write(3, (uint16_t *)&Buffs.Reg03, 1);
 8005314:	2201      	movs	r2, #1
 8005316:	4925      	ldr	r1, [pc, #148]	; (80053ac <rda5807_Set_Band+0xc8>)
 8005318:	2003      	movs	r0, #3
 800531a:	f7ff fd19 	bl	8004d50 <rda5807_write>

    uint16_t l = 870, r = 1080;
 800531e:	f240 3366 	movw	r3, #870	; 0x366
 8005322:	81fb      	strh	r3, [r7, #14]
 8005324:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8005328:	81bb      	strh	r3, [r7, #12]

    switch (Buffs.Reg03.bBAND) {    // Диапазон 87–108 MHz
 800532a:	4b21      	ldr	r3, [pc, #132]	; (80053b0 <rda5807_Set_Band+0xcc>)
 800532c:	789b      	ldrb	r3, [r3, #2]
 800532e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b03      	cmp	r3, #3
 8005336:	d011      	beq.n	800535c <rda5807_Set_Band+0x78>
 8005338:	2b03      	cmp	r3, #3
 800533a:	dc16      	bgt.n	800536a <rda5807_Set_Band+0x86>
 800533c:	2b01      	cmp	r3, #1
 800533e:	d002      	beq.n	8005346 <rda5807_Set_Band+0x62>
 8005340:	2b02      	cmp	r3, #2
 8005342:	d007      	beq.n	8005354 <rda5807_Set_Band+0x70>
 8005344:	e011      	b.n	800536a <rda5807_Set_Band+0x86>
    	//case 0:// 00 = 87–108 MHz (US/Europe)
    	//break;
    	case 1:// 01 = 76–91 MHz (Japan)
    		l = 760;
 8005346:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 800534a:	81fb      	strh	r3, [r7, #14]
    		r = 910;
 800534c:	f240 338e 	movw	r3, #910	; 0x38e
 8005350:	81bb      	strh	r3, [r7, #12]
    	break;
 8005352:	e00a      	b.n	800536a <rda5807_Set_Band+0x86>
    	case 2:// 10 = 76–108 MHz (world wide)
    		l = 760;
 8005354:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005358:	81fb      	strh	r3, [r7, #14]
    	break;
 800535a:	e006      	b.n	800536a <rda5807_Set_Band+0x86>
    	case 3:// 11 = 65 –76 MHz (East Europe) or 50-65MHz
    		l = 650;
 800535c:	f240 238a 	movw	r3, #650	; 0x28a
 8005360:	81fb      	strh	r3, [r7, #14]
    		r = 760;
 8005362:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8005366:	81bb      	strh	r3, [r7, #12]
    	break;
 8005368:	bf00      	nop
    }
    lBand = ((float)l) / 10;
 800536a:	89fb      	ldrh	r3, [r7, #14]
 800536c:	ee07 3a90 	vmov	s15, r3
 8005370:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005374:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005378:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800537c:	4b0d      	ldr	r3, [pc, #52]	; (80053b4 <rda5807_Set_Band+0xd0>)
 800537e:	edc3 7a00 	vstr	s15, [r3]
    rBand = ((float)r) / 10;
 8005382:	89bb      	ldrh	r3, [r7, #12]
 8005384:	ee07 3a90 	vmov	s15, r3
 8005388:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800538c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005390:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005394:	4b08      	ldr	r3, [pc, #32]	; (80053b8 <rda5807_Set_Band+0xd4>)
 8005396:	edc3 7a00 	vstr	s15, [r3]

    HAL_Delay(50);
 800539a:	2032      	movs	r0, #50	; 0x32
 800539c:	f001 fa80 	bl	80068a0 <HAL_Delay>

    return 0;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20003fee 	.word	0x20003fee
 80053b0:	20003fec 	.word	0x20003fec
 80053b4:	20003cd4 	.word	0x20003cd4
 80053b8:	20003cd8 	.word	0x20003cd8

080053bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053c2:	4b0f      	ldr	r3, [pc, #60]	; (8005400 <HAL_MspInit+0x44>)
 80053c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c6:	4a0e      	ldr	r2, [pc, #56]	; (8005400 <HAL_MspInit+0x44>)
 80053c8:	f043 0301 	orr.w	r3, r3, #1
 80053cc:	6613      	str	r3, [r2, #96]	; 0x60
 80053ce:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <HAL_MspInit+0x44>)
 80053d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	607b      	str	r3, [r7, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053da:	4b09      	ldr	r3, [pc, #36]	; (8005400 <HAL_MspInit+0x44>)
 80053dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053de:	4a08      	ldr	r2, [pc, #32]	; (8005400 <HAL_MspInit+0x44>)
 80053e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e4:	6593      	str	r3, [r2, #88]	; 0x58
 80053e6:	4b06      	ldr	r3, [pc, #24]	; (8005400 <HAL_MspInit+0x44>)
 80053e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40021000 	.word	0x40021000

08005404 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b0ac      	sub	sp, #176	; 0xb0
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800540c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	605a      	str	r2, [r3, #4]
 8005416:	609a      	str	r2, [r3, #8]
 8005418:	60da      	str	r2, [r3, #12]
 800541a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800541c:	f107 0314 	add.w	r3, r7, #20
 8005420:	2288      	movs	r2, #136	; 0x88
 8005422:	2100      	movs	r1, #0
 8005424:	4618      	mov	r0, r3
 8005426:	f00c fb55 	bl	8011ad4 <memset>
  if(hi2c->Instance==I2C1)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a57      	ldr	r2, [pc, #348]	; (800558c <HAL_I2C_MspInit+0x188>)
 8005430:	4293      	cmp	r3, r2
 8005432:	f040 80a7 	bne.w	8005584 <HAL_I2C_MspInit+0x180>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005436:	2340      	movs	r3, #64	; 0x40
 8005438:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800543a:	2300      	movs	r3, #0
 800543c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800543e:	f107 0314 	add.w	r3, r7, #20
 8005442:	4618      	mov	r0, r3
 8005444:	f004 fb02 	bl	8009a4c <HAL_RCCEx_PeriphCLKConfig>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800544e:	f7ff fb63 	bl	8004b18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005452:	4b4f      	ldr	r3, [pc, #316]	; (8005590 <HAL_I2C_MspInit+0x18c>)
 8005454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005456:	4a4e      	ldr	r2, [pc, #312]	; (8005590 <HAL_I2C_MspInit+0x18c>)
 8005458:	f043 0302 	orr.w	r3, r3, #2
 800545c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800545e:	4b4c      	ldr	r3, [pc, #304]	; (8005590 <HAL_I2C_MspInit+0x18c>)
 8005460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	613b      	str	r3, [r7, #16]
 8005468:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800546a:	23c0      	movs	r3, #192	; 0xc0
 800546c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005470:	2312      	movs	r3, #18
 8005472:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005476:	2300      	movs	r3, #0
 8005478:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800547c:	2302      	movs	r3, #2
 800547e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005482:	2304      	movs	r3, #4
 8005484:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005488:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800548c:	4619      	mov	r1, r3
 800548e:	4841      	ldr	r0, [pc, #260]	; (8005594 <HAL_I2C_MspInit+0x190>)
 8005490:	f001 fdf2 	bl	8007078 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB6);
 8005494:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005498:	f003 fc54 	bl	8008d44 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 800549c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80054a0:	f003 fc50 	bl	8008d44 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80054a4:	4b3a      	ldr	r3, [pc, #232]	; (8005590 <HAL_I2C_MspInit+0x18c>)
 80054a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a8:	4a39      	ldr	r2, [pc, #228]	; (8005590 <HAL_I2C_MspInit+0x18c>)
 80054aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054ae:	6593      	str	r3, [r2, #88]	; 0x58
 80054b0:	4b37      	ldr	r3, [pc, #220]	; (8005590 <HAL_I2C_MspInit+0x18c>)
 80054b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA2_Channel6;
 80054bc:	4b36      	ldr	r3, [pc, #216]	; (8005598 <HAL_I2C_MspInit+0x194>)
 80054be:	4a37      	ldr	r2, [pc, #220]	; (800559c <HAL_I2C_MspInit+0x198>)
 80054c0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_5;
 80054c2:	4b35      	ldr	r3, [pc, #212]	; (8005598 <HAL_I2C_MspInit+0x194>)
 80054c4:	2205      	movs	r2, #5
 80054c6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80054c8:	4b33      	ldr	r3, [pc, #204]	; (8005598 <HAL_I2C_MspInit+0x194>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054ce:	4b32      	ldr	r3, [pc, #200]	; (8005598 <HAL_I2C_MspInit+0x194>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80054d4:	4b30      	ldr	r3, [pc, #192]	; (8005598 <HAL_I2C_MspInit+0x194>)
 80054d6:	2280      	movs	r2, #128	; 0x80
 80054d8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054da:	4b2f      	ldr	r3, [pc, #188]	; (8005598 <HAL_I2C_MspInit+0x194>)
 80054dc:	2200      	movs	r2, #0
 80054de:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054e0:	4b2d      	ldr	r3, [pc, #180]	; (8005598 <HAL_I2C_MspInit+0x194>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80054e6:	4b2c      	ldr	r3, [pc, #176]	; (8005598 <HAL_I2C_MspInit+0x194>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80054ec:	4b2a      	ldr	r3, [pc, #168]	; (8005598 <HAL_I2C_MspInit+0x194>)
 80054ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80054f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80054f4:	4828      	ldr	r0, [pc, #160]	; (8005598 <HAL_I2C_MspInit+0x194>)
 80054f6:	f001 fb3b 	bl	8006b70 <HAL_DMA_Init>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <HAL_I2C_MspInit+0x100>
    {
      Error_Handler();
 8005500:	f7ff fb0a 	bl	8004b18 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a24      	ldr	r2, [pc, #144]	; (8005598 <HAL_I2C_MspInit+0x194>)
 8005508:	63da      	str	r2, [r3, #60]	; 0x3c
 800550a:	4a23      	ldr	r2, [pc, #140]	; (8005598 <HAL_I2C_MspInit+0x194>)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8005510:	4b23      	ldr	r3, [pc, #140]	; (80055a0 <HAL_I2C_MspInit+0x19c>)
 8005512:	4a24      	ldr	r2, [pc, #144]	; (80055a4 <HAL_I2C_MspInit+0x1a0>)
 8005514:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8005516:	4b22      	ldr	r3, [pc, #136]	; (80055a0 <HAL_I2C_MspInit+0x19c>)
 8005518:	2203      	movs	r2, #3
 800551a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800551c:	4b20      	ldr	r3, [pc, #128]	; (80055a0 <HAL_I2C_MspInit+0x19c>)
 800551e:	2210      	movs	r2, #16
 8005520:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005522:	4b1f      	ldr	r3, [pc, #124]	; (80055a0 <HAL_I2C_MspInit+0x19c>)
 8005524:	2200      	movs	r2, #0
 8005526:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005528:	4b1d      	ldr	r3, [pc, #116]	; (80055a0 <HAL_I2C_MspInit+0x19c>)
 800552a:	2280      	movs	r2, #128	; 0x80
 800552c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800552e:	4b1c      	ldr	r3, [pc, #112]	; (80055a0 <HAL_I2C_MspInit+0x19c>)
 8005530:	2200      	movs	r2, #0
 8005532:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005534:	4b1a      	ldr	r3, [pc, #104]	; (80055a0 <HAL_I2C_MspInit+0x19c>)
 8005536:	2200      	movs	r2, #0
 8005538:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800553a:	4b19      	ldr	r3, [pc, #100]	; (80055a0 <HAL_I2C_MspInit+0x19c>)
 800553c:	2200      	movs	r2, #0
 800553e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005540:	4b17      	ldr	r3, [pc, #92]	; (80055a0 <HAL_I2C_MspInit+0x19c>)
 8005542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005546:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005548:	4815      	ldr	r0, [pc, #84]	; (80055a0 <HAL_I2C_MspInit+0x19c>)
 800554a:	f001 fb11 	bl	8006b70 <HAL_DMA_Init>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d001      	beq.n	8005558 <HAL_I2C_MspInit+0x154>
    {
      Error_Handler();
 8005554:	f7ff fae0 	bl	8004b18 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a11      	ldr	r2, [pc, #68]	; (80055a0 <HAL_I2C_MspInit+0x19c>)
 800555c:	639a      	str	r2, [r3, #56]	; 0x38
 800555e:	4a10      	ldr	r2, [pc, #64]	; (80055a0 <HAL_I2C_MspInit+0x19c>)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005564:	2200      	movs	r2, #0
 8005566:	2100      	movs	r1, #0
 8005568:	201f      	movs	r0, #31
 800556a:	f001 fabc 	bl	8006ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800556e:	201f      	movs	r0, #31
 8005570:	f001 fad5 	bl	8006b1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005574:	2200      	movs	r2, #0
 8005576:	2100      	movs	r1, #0
 8005578:	2020      	movs	r0, #32
 800557a:	f001 fab4 	bl	8006ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800557e:	2020      	movs	r0, #32
 8005580:	f001 facd 	bl	8006b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005584:	bf00      	nop
 8005586:	37b0      	adds	r7, #176	; 0xb0
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	40005400 	.word	0x40005400
 8005590:	40021000 	.word	0x40021000
 8005594:	48000400 	.word	0x48000400
 8005598:	2000087c 	.word	0x2000087c
 800559c:	4002046c 	.word	0x4002046c
 80055a0:	200008c4 	.word	0x200008c4
 80055a4:	4002006c 	.word	0x4002006c

080055a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b0a4      	sub	sp, #144	; 0x90
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80055b0:	f107 0308 	add.w	r3, r7, #8
 80055b4:	2288      	movs	r2, #136	; 0x88
 80055b6:	2100      	movs	r1, #0
 80055b8:	4618      	mov	r0, r3
 80055ba:	f00c fa8b 	bl	8011ad4 <memset>
  if(hrtc->Instance==RTC)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a10      	ldr	r2, [pc, #64]	; (8005604 <HAL_RTC_MspInit+0x5c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d118      	bne.n	80055fa <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80055c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055cc:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80055ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80055d6:	f107 0308 	add.w	r3, r7, #8
 80055da:	4618      	mov	r0, r3
 80055dc:	f004 fa36 	bl	8009a4c <HAL_RCCEx_PeriphCLKConfig>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80055e6:	f7ff fa97 	bl	8004b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80055ea:	4b07      	ldr	r3, [pc, #28]	; (8005608 <HAL_RTC_MspInit+0x60>)
 80055ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f0:	4a05      	ldr	r2, [pc, #20]	; (8005608 <HAL_RTC_MspInit+0x60>)
 80055f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80055fa:	bf00      	nop
 80055fc:	3790      	adds	r7, #144	; 0x90
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	40002800 	.word	0x40002800
 8005608:	40021000 	.word	0x40021000

0800560c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b08c      	sub	sp, #48	; 0x30
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005614:	f107 031c 	add.w	r3, r7, #28
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	605a      	str	r2, [r3, #4]
 800561e:	609a      	str	r2, [r3, #8]
 8005620:	60da      	str	r2, [r3, #12]
 8005622:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a76      	ldr	r2, [pc, #472]	; (8005804 <HAL_SPI_MspInit+0x1f8>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d15b      	bne.n	80056e6 <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800562e:	4b76      	ldr	r3, [pc, #472]	; (8005808 <HAL_SPI_MspInit+0x1fc>)
 8005630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005632:	4a75      	ldr	r2, [pc, #468]	; (8005808 <HAL_SPI_MspInit+0x1fc>)
 8005634:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005638:	6613      	str	r3, [r2, #96]	; 0x60
 800563a:	4b73      	ldr	r3, [pc, #460]	; (8005808 <HAL_SPI_MspInit+0x1fc>)
 800563c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800563e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005642:	61bb      	str	r3, [r7, #24]
 8005644:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005646:	4b70      	ldr	r3, [pc, #448]	; (8005808 <HAL_SPI_MspInit+0x1fc>)
 8005648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800564a:	4a6f      	ldr	r2, [pc, #444]	; (8005808 <HAL_SPI_MspInit+0x1fc>)
 800564c:	f043 0301 	orr.w	r3, r3, #1
 8005650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005652:	4b6d      	ldr	r3, [pc, #436]	; (8005808 <HAL_SPI_MspInit+0x1fc>)
 8005654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800565e:	23a0      	movs	r3, #160	; 0xa0
 8005660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005662:	2302      	movs	r3, #2
 8005664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005666:	2300      	movs	r3, #0
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800566a:	2303      	movs	r3, #3
 800566c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800566e:	2305      	movs	r3, #5
 8005670:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005672:	f107 031c 	add.w	r3, r7, #28
 8005676:	4619      	mov	r1, r3
 8005678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800567c:	f001 fcfc 	bl	8007078 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8005680:	4b62      	ldr	r3, [pc, #392]	; (800580c <HAL_SPI_MspInit+0x200>)
 8005682:	4a63      	ldr	r2, [pc, #396]	; (8005810 <HAL_SPI_MspInit+0x204>)
 8005684:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8005686:	4b61      	ldr	r3, [pc, #388]	; (800580c <HAL_SPI_MspInit+0x200>)
 8005688:	2201      	movs	r2, #1
 800568a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800568c:	4b5f      	ldr	r3, [pc, #380]	; (800580c <HAL_SPI_MspInit+0x200>)
 800568e:	2210      	movs	r2, #16
 8005690:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005692:	4b5e      	ldr	r3, [pc, #376]	; (800580c <HAL_SPI_MspInit+0x200>)
 8005694:	2200      	movs	r2, #0
 8005696:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005698:	4b5c      	ldr	r3, [pc, #368]	; (800580c <HAL_SPI_MspInit+0x200>)
 800569a:	2280      	movs	r2, #128	; 0x80
 800569c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800569e:	4b5b      	ldr	r3, [pc, #364]	; (800580c <HAL_SPI_MspInit+0x200>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056a4:	4b59      	ldr	r3, [pc, #356]	; (800580c <HAL_SPI_MspInit+0x200>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80056aa:	4b58      	ldr	r3, [pc, #352]	; (800580c <HAL_SPI_MspInit+0x200>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80056b0:	4b56      	ldr	r3, [pc, #344]	; (800580c <HAL_SPI_MspInit+0x200>)
 80056b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80056b8:	4854      	ldr	r0, [pc, #336]	; (800580c <HAL_SPI_MspInit+0x200>)
 80056ba:	f001 fa59 	bl	8006b70 <HAL_DMA_Init>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 80056c4:	f7ff fa28 	bl	8004b18 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a50      	ldr	r2, [pc, #320]	; (800580c <HAL_SPI_MspInit+0x200>)
 80056cc:	655a      	str	r2, [r3, #84]	; 0x54
 80056ce:	4a4f      	ldr	r2, [pc, #316]	; (800580c <HAL_SPI_MspInit+0x200>)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80056d4:	2200      	movs	r2, #0
 80056d6:	2100      	movs	r1, #0
 80056d8:	2023      	movs	r0, #35	; 0x23
 80056da:	f001 fa04 	bl	8006ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80056de:	2023      	movs	r0, #35	; 0x23
 80056e0:	f001 fa1d 	bl	8006b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80056e4:	e08a      	b.n	80057fc <HAL_SPI_MspInit+0x1f0>
  else if(hspi->Instance==SPI2)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a4a      	ldr	r2, [pc, #296]	; (8005814 <HAL_SPI_MspInit+0x208>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	f040 8085 	bne.w	80057fc <HAL_SPI_MspInit+0x1f0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80056f2:	4b45      	ldr	r3, [pc, #276]	; (8005808 <HAL_SPI_MspInit+0x1fc>)
 80056f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f6:	4a44      	ldr	r2, [pc, #272]	; (8005808 <HAL_SPI_MspInit+0x1fc>)
 80056f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056fc:	6593      	str	r3, [r2, #88]	; 0x58
 80056fe:	4b42      	ldr	r3, [pc, #264]	; (8005808 <HAL_SPI_MspInit+0x1fc>)
 8005700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005706:	613b      	str	r3, [r7, #16]
 8005708:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800570a:	4b3f      	ldr	r3, [pc, #252]	; (8005808 <HAL_SPI_MspInit+0x1fc>)
 800570c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800570e:	4a3e      	ldr	r2, [pc, #248]	; (8005808 <HAL_SPI_MspInit+0x1fc>)
 8005710:	f043 0302 	orr.w	r3, r3, #2
 8005714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005716:	4b3c      	ldr	r3, [pc, #240]	; (8005808 <HAL_SPI_MspInit+0x1fc>)
 8005718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005722:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005728:	2302      	movs	r3, #2
 800572a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800572c:	2300      	movs	r3, #0
 800572e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005730:	2303      	movs	r3, #3
 8005732:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005734:	2305      	movs	r3, #5
 8005736:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005738:	f107 031c 	add.w	r3, r7, #28
 800573c:	4619      	mov	r1, r3
 800573e:	4836      	ldr	r0, [pc, #216]	; (8005818 <HAL_SPI_MspInit+0x20c>)
 8005740:	f001 fc9a 	bl	8007078 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8005744:	4b35      	ldr	r3, [pc, #212]	; (800581c <HAL_SPI_MspInit+0x210>)
 8005746:	4a36      	ldr	r2, [pc, #216]	; (8005820 <HAL_SPI_MspInit+0x214>)
 8005748:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 800574a:	4b34      	ldr	r3, [pc, #208]	; (800581c <HAL_SPI_MspInit+0x210>)
 800574c:	2201      	movs	r2, #1
 800574e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005750:	4b32      	ldr	r3, [pc, #200]	; (800581c <HAL_SPI_MspInit+0x210>)
 8005752:	2200      	movs	r2, #0
 8005754:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005756:	4b31      	ldr	r3, [pc, #196]	; (800581c <HAL_SPI_MspInit+0x210>)
 8005758:	2200      	movs	r2, #0
 800575a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800575c:	4b2f      	ldr	r3, [pc, #188]	; (800581c <HAL_SPI_MspInit+0x210>)
 800575e:	2280      	movs	r2, #128	; 0x80
 8005760:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005762:	4b2e      	ldr	r3, [pc, #184]	; (800581c <HAL_SPI_MspInit+0x210>)
 8005764:	2200      	movs	r2, #0
 8005766:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005768:	4b2c      	ldr	r3, [pc, #176]	; (800581c <HAL_SPI_MspInit+0x210>)
 800576a:	2200      	movs	r2, #0
 800576c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800576e:	4b2b      	ldr	r3, [pc, #172]	; (800581c <HAL_SPI_MspInit+0x210>)
 8005770:	2200      	movs	r2, #0
 8005772:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005774:	4b29      	ldr	r3, [pc, #164]	; (800581c <HAL_SPI_MspInit+0x210>)
 8005776:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800577a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800577c:	4827      	ldr	r0, [pc, #156]	; (800581c <HAL_SPI_MspInit+0x210>)
 800577e:	f001 f9f7 	bl	8006b70 <HAL_DMA_Init>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <HAL_SPI_MspInit+0x180>
      Error_Handler();
 8005788:	f7ff f9c6 	bl	8004b18 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a23      	ldr	r2, [pc, #140]	; (800581c <HAL_SPI_MspInit+0x210>)
 8005790:	659a      	str	r2, [r3, #88]	; 0x58
 8005792:	4a22      	ldr	r2, [pc, #136]	; (800581c <HAL_SPI_MspInit+0x210>)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8005798:	4b22      	ldr	r3, [pc, #136]	; (8005824 <HAL_SPI_MspInit+0x218>)
 800579a:	4a23      	ldr	r2, [pc, #140]	; (8005828 <HAL_SPI_MspInit+0x21c>)
 800579c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 800579e:	4b21      	ldr	r3, [pc, #132]	; (8005824 <HAL_SPI_MspInit+0x218>)
 80057a0:	2201      	movs	r2, #1
 80057a2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80057a4:	4b1f      	ldr	r3, [pc, #124]	; (8005824 <HAL_SPI_MspInit+0x218>)
 80057a6:	2210      	movs	r2, #16
 80057a8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057aa:	4b1e      	ldr	r3, [pc, #120]	; (8005824 <HAL_SPI_MspInit+0x218>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80057b0:	4b1c      	ldr	r3, [pc, #112]	; (8005824 <HAL_SPI_MspInit+0x218>)
 80057b2:	2280      	movs	r2, #128	; 0x80
 80057b4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057b6:	4b1b      	ldr	r3, [pc, #108]	; (8005824 <HAL_SPI_MspInit+0x218>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057bc:	4b19      	ldr	r3, [pc, #100]	; (8005824 <HAL_SPI_MspInit+0x218>)
 80057be:	2200      	movs	r2, #0
 80057c0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80057c2:	4b18      	ldr	r3, [pc, #96]	; (8005824 <HAL_SPI_MspInit+0x218>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80057c8:	4b16      	ldr	r3, [pc, #88]	; (8005824 <HAL_SPI_MspInit+0x218>)
 80057ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80057d0:	4814      	ldr	r0, [pc, #80]	; (8005824 <HAL_SPI_MspInit+0x218>)
 80057d2:	f001 f9cd 	bl	8006b70 <HAL_DMA_Init>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d001      	beq.n	80057e0 <HAL_SPI_MspInit+0x1d4>
      Error_Handler();
 80057dc:	f7ff f99c 	bl	8004b18 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a10      	ldr	r2, [pc, #64]	; (8005824 <HAL_SPI_MspInit+0x218>)
 80057e4:	655a      	str	r2, [r3, #84]	; 0x54
 80057e6:	4a0f      	ldr	r2, [pc, #60]	; (8005824 <HAL_SPI_MspInit+0x218>)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80057ec:	2200      	movs	r2, #0
 80057ee:	2100      	movs	r1, #0
 80057f0:	2024      	movs	r0, #36	; 0x24
 80057f2:	f001 f978 	bl	8006ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80057f6:	2024      	movs	r0, #36	; 0x24
 80057f8:	f001 f991 	bl	8006b1e <HAL_NVIC_EnableIRQ>
}
 80057fc:	bf00      	nop
 80057fe:	3730      	adds	r7, #48	; 0x30
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	40013000 	.word	0x40013000
 8005808:	40021000 	.word	0x40021000
 800580c:	200009f8 	.word	0x200009f8
 8005810:	40020030 	.word	0x40020030
 8005814:	40003800 	.word	0x40003800
 8005818:	48000400 	.word	0x48000400
 800581c:	20000a40 	.word	0x20000a40
 8005820:	40020044 	.word	0x40020044
 8005824:	20000a88 	.word	0x20000a88
 8005828:	40020058 	.word	0x40020058

0800582c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a0d      	ldr	r2, [pc, #52]	; (8005870 <HAL_TIM_Base_MspInit+0x44>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d113      	bne.n	8005866 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800583e:	4b0d      	ldr	r3, [pc, #52]	; (8005874 <HAL_TIM_Base_MspInit+0x48>)
 8005840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005842:	4a0c      	ldr	r2, [pc, #48]	; (8005874 <HAL_TIM_Base_MspInit+0x48>)
 8005844:	f043 0304 	orr.w	r3, r3, #4
 8005848:	6593      	str	r3, [r2, #88]	; 0x58
 800584a:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <HAL_TIM_Base_MspInit+0x48>)
 800584c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584e:	f003 0304 	and.w	r3, r3, #4
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8005856:	2200      	movs	r2, #0
 8005858:	2102      	movs	r1, #2
 800585a:	201e      	movs	r0, #30
 800585c:	f001 f943 	bl	8006ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005860:	201e      	movs	r0, #30
 8005862:	f001 f95c 	bl	8006b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005866:	bf00      	nop
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	40000800 	.word	0x40000800
 8005874:	40021000 	.word	0x40021000

08005878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b0ac      	sub	sp, #176	; 0xb0
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005880:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	605a      	str	r2, [r3, #4]
 800588a:	609a      	str	r2, [r3, #8]
 800588c:	60da      	str	r2, [r3, #12]
 800588e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005890:	f107 0314 	add.w	r3, r7, #20
 8005894:	2288      	movs	r2, #136	; 0x88
 8005896:	2100      	movs	r1, #0
 8005898:	4618      	mov	r0, r3
 800589a:	f00c f91b 	bl	8011ad4 <memset>
  if(huart->Instance==USART2)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a3a      	ldr	r2, [pc, #232]	; (800598c <HAL_UART_MspInit+0x114>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d16d      	bne.n	8005984 <HAL_UART_MspInit+0x10c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80058a8:	2302      	movs	r3, #2
 80058aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80058ac:	2300      	movs	r3, #0
 80058ae:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80058b0:	f107 0314 	add.w	r3, r7, #20
 80058b4:	4618      	mov	r0, r3
 80058b6:	f004 f8c9 	bl	8009a4c <HAL_RCCEx_PeriphCLKConfig>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80058c0:	f7ff f92a 	bl	8004b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80058c4:	4b32      	ldr	r3, [pc, #200]	; (8005990 <HAL_UART_MspInit+0x118>)
 80058c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c8:	4a31      	ldr	r2, [pc, #196]	; (8005990 <HAL_UART_MspInit+0x118>)
 80058ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ce:	6593      	str	r3, [r2, #88]	; 0x58
 80058d0:	4b2f      	ldr	r3, [pc, #188]	; (8005990 <HAL_UART_MspInit+0x118>)
 80058d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d8:	613b      	str	r3, [r7, #16]
 80058da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058dc:	4b2c      	ldr	r3, [pc, #176]	; (8005990 <HAL_UART_MspInit+0x118>)
 80058de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058e0:	4a2b      	ldr	r2, [pc, #172]	; (8005990 <HAL_UART_MspInit+0x118>)
 80058e2:	f043 0301 	orr.w	r3, r3, #1
 80058e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058e8:	4b29      	ldr	r3, [pc, #164]	; (8005990 <HAL_UART_MspInit+0x118>)
 80058ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	60fb      	str	r3, [r7, #12]
 80058f2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOG_TX_Pin|LOG_RX_Pin;
 80058f4:	230c      	movs	r3, #12
 80058f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058fa:	2302      	movs	r3, #2
 80058fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005900:	2300      	movs	r3, #0
 8005902:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005906:	2303      	movs	r3, #3
 8005908:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800590c:	2307      	movs	r3, #7
 800590e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005912:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005916:	4619      	mov	r1, r3
 8005918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800591c:	f001 fbac 	bl	8007078 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8005920:	4b1c      	ldr	r3, [pc, #112]	; (8005994 <HAL_UART_MspInit+0x11c>)
 8005922:	4a1d      	ldr	r2, [pc, #116]	; (8005998 <HAL_UART_MspInit+0x120>)
 8005924:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8005926:	4b1b      	ldr	r3, [pc, #108]	; (8005994 <HAL_UART_MspInit+0x11c>)
 8005928:	2202      	movs	r2, #2
 800592a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800592c:	4b19      	ldr	r3, [pc, #100]	; (8005994 <HAL_UART_MspInit+0x11c>)
 800592e:	2210      	movs	r2, #16
 8005930:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005932:	4b18      	ldr	r3, [pc, #96]	; (8005994 <HAL_UART_MspInit+0x11c>)
 8005934:	2200      	movs	r2, #0
 8005936:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005938:	4b16      	ldr	r3, [pc, #88]	; (8005994 <HAL_UART_MspInit+0x11c>)
 800593a:	2280      	movs	r2, #128	; 0x80
 800593c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800593e:	4b15      	ldr	r3, [pc, #84]	; (8005994 <HAL_UART_MspInit+0x11c>)
 8005940:	2200      	movs	r2, #0
 8005942:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005944:	4b13      	ldr	r3, [pc, #76]	; (8005994 <HAL_UART_MspInit+0x11c>)
 8005946:	2200      	movs	r2, #0
 8005948:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800594a:	4b12      	ldr	r3, [pc, #72]	; (8005994 <HAL_UART_MspInit+0x11c>)
 800594c:	2200      	movs	r2, #0
 800594e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005950:	4b10      	ldr	r3, [pc, #64]	; (8005994 <HAL_UART_MspInit+0x11c>)
 8005952:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005956:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005958:	480e      	ldr	r0, [pc, #56]	; (8005994 <HAL_UART_MspInit+0x11c>)
 800595a:	f001 f909 	bl	8006b70 <HAL_DMA_Init>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8005964:	f7ff f8d8 	bl	8004b18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a0a      	ldr	r2, [pc, #40]	; (8005994 <HAL_UART_MspInit+0x11c>)
 800596c:	66da      	str	r2, [r3, #108]	; 0x6c
 800596e:	4a09      	ldr	r2, [pc, #36]	; (8005994 <HAL_UART_MspInit+0x11c>)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8005974:	2200      	movs	r2, #0
 8005976:	2101      	movs	r1, #1
 8005978:	2026      	movs	r0, #38	; 0x26
 800597a:	f001 f8b4 	bl	8006ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800597e:	2026      	movs	r0, #38	; 0x26
 8005980:	f001 f8cd 	bl	8006b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005984:	bf00      	nop
 8005986:	37b0      	adds	r7, #176	; 0xb0
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	40004400 	.word	0x40004400
 8005990:	40021000 	.word	0x40021000
 8005994:	20000ba0 	.word	0x20000ba0
 8005998:	40020080 	.word	0x40020080

0800599c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80059a0:	e7fe      	b.n	80059a0 <NMI_Handler+0x4>

080059a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80059a2:	b480      	push	{r7}
 80059a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059a6:	e7fe      	b.n	80059a6 <HardFault_Handler+0x4>

080059a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80059ac:	e7fe      	b.n	80059ac <MemManage_Handler+0x4>

080059ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80059ae:	b480      	push	{r7}
 80059b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80059b2:	e7fe      	b.n	80059b2 <BusFault_Handler+0x4>

080059b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80059b8:	e7fe      	b.n	80059b8 <UsageFault_Handler+0x4>

080059ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80059ba:	b480      	push	{r7}
 80059bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80059be:	bf00      	nop
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80059cc:	bf00      	nop
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80059d6:	b480      	push	{r7}
 80059d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80059da:	bf00      	nop
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059e8:	f000 ff3a 	bl	8006860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80059ec:	bf00      	nop
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 80059f4:	2002      	movs	r0, #2
 80059f6:	f001 fd33 	bl	8007460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80059fa:	bf00      	nop
 80059fc:	bd80      	pop	{r7, pc}

080059fe <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 8005a02:	2004      	movs	r0, #4
 8005a04:	f001 fd2c 	bl	8007460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005a08:	bf00      	nop
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005a10:	4802      	ldr	r0, [pc, #8]	; (8005a1c <DMA1_Channel3_IRQHandler+0x10>)
 8005a12:	f001 fa44 	bl	8006e9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005a16:	bf00      	nop
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	200009f8 	.word	0x200009f8

08005a20 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005a24:	4802      	ldr	r0, [pc, #8]	; (8005a30 <DMA1_Channel4_IRQHandler+0x10>)
 8005a26:	f001 fa3a 	bl	8006e9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005a2a:	bf00      	nop
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000a40 	.word	0x20000a40

08005a34 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005a38:	4802      	ldr	r0, [pc, #8]	; (8005a44 <DMA1_Channel5_IRQHandler+0x10>)
 8005a3a:	f001 fa30 	bl	8006e9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005a3e:	bf00      	nop
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20000a88 	.word	0x20000a88

08005a48 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005a4c:	4802      	ldr	r0, [pc, #8]	; (8005a58 <DMA1_Channel6_IRQHandler+0x10>)
 8005a4e:	f001 fa26 	bl	8006e9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005a52:	bf00      	nop
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	200008c4 	.word	0x200008c4

08005a5c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005a60:	4802      	ldr	r0, [pc, #8]	; (8005a6c <DMA1_Channel7_IRQHandler+0x10>)
 8005a62:	f001 fa1c 	bl	8006e9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8005a66:	bf00      	nop
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000ba0 	.word	0x20000ba0

08005a70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005a74:	4802      	ldr	r0, [pc, #8]	; (8005a80 <TIM4_IRQHandler+0x10>)
 8005a76:	f006 fcc0 	bl	800c3fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005a7a:	bf00      	nop
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20000ad0 	.word	0x20000ad0

08005a84 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005a88:	4802      	ldr	r0, [pc, #8]	; (8005a94 <I2C1_EV_IRQHandler+0x10>)
 8005a8a:	f002 f8b3 	bl	8007bf4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005a8e:	bf00      	nop
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	20000828 	.word	0x20000828

08005a98 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005a9c:	4802      	ldr	r0, [pc, #8]	; (8005aa8 <I2C1_ER_IRQHandler+0x10>)
 8005a9e:	f002 f8c3 	bl	8007c28 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005aa2:	bf00      	nop
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20000828 	.word	0x20000828

08005aac <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005ab0:	4802      	ldr	r0, [pc, #8]	; (8005abc <SPI1_IRQHandler+0x10>)
 8005ab2:	f005 ff75 	bl	800b9a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005ab6:	bf00      	nop
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	20000930 	.word	0x20000930

08005ac0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005ac4:	4802      	ldr	r0, [pc, #8]	; (8005ad0 <SPI2_IRQHandler+0x10>)
 8005ac6:	f005 ff6b 	bl	800b9a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8005aca:	bf00      	nop
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20000994 	.word	0x20000994

08005ad4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005ad8:	4802      	ldr	r0, [pc, #8]	; (8005ae4 <USART2_IRQHandler+0x10>)
 8005ada:	f007 f9ad 	bl	800ce38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005ade:	bf00      	nop
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20000b1c 	.word	0x20000b1c

08005ae8 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005aec:	4802      	ldr	r0, [pc, #8]	; (8005af8 <DMA2_Channel6_IRQHandler+0x10>)
 8005aee:	f001 f9d6 	bl	8006e9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8005af2:	bf00      	nop
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	2000087c 	.word	0x2000087c

08005afc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
	return 1;
 8005b00:	2301      	movs	r3, #1
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <_kill>:

int _kill(int pid, int sig)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005b16:	f00b fef9 	bl	801190c <__errno>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2216      	movs	r2, #22
 8005b1e:	601a      	str	r2, [r3, #0]
	return -1;
 8005b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3708      	adds	r7, #8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <_exit>:

void _exit (int status)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005b34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7ff ffe7 	bl	8005b0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8005b3e:	e7fe      	b.n	8005b3e <_exit+0x12>

08005b40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	e00a      	b.n	8005b68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005b52:	f3af 8000 	nop.w
 8005b56:	4601      	mov	r1, r0
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	1c5a      	adds	r2, r3, #1
 8005b5c:	60ba      	str	r2, [r7, #8]
 8005b5e:	b2ca      	uxtb	r2, r1
 8005b60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	3301      	adds	r3, #1
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	dbf0      	blt.n	8005b52 <_read+0x12>
	}

return len;
 8005b70:	687b      	ldr	r3, [r7, #4]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b086      	sub	sp, #24
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	60b9      	str	r1, [r7, #8]
 8005b84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b86:	2300      	movs	r3, #0
 8005b88:	617b      	str	r3, [r7, #20]
 8005b8a:	e009      	b.n	8005ba0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	60ba      	str	r2, [r7, #8]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	617b      	str	r3, [r7, #20]
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	dbf1      	blt.n	8005b8c <_write+0x12>
	}
	return len;
 8005ba8:	687b      	ldr	r3, [r7, #4]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <_close>:

int _close(int file)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
	return -1;
 8005bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005bda:	605a      	str	r2, [r3, #4]
	return 0;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <_isatty>:

int _isatty(int file)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
	return 1;
 8005bf2:	2301      	movs	r3, #1
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
	return 0;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
	...

08005c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005c24:	4a14      	ldr	r2, [pc, #80]	; (8005c78 <_sbrk+0x5c>)
 8005c26:	4b15      	ldr	r3, [pc, #84]	; (8005c7c <_sbrk+0x60>)
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005c30:	4b13      	ldr	r3, [pc, #76]	; (8005c80 <_sbrk+0x64>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d102      	bne.n	8005c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005c38:	4b11      	ldr	r3, [pc, #68]	; (8005c80 <_sbrk+0x64>)
 8005c3a:	4a12      	ldr	r2, [pc, #72]	; (8005c84 <_sbrk+0x68>)
 8005c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005c3e:	4b10      	ldr	r3, [pc, #64]	; (8005c80 <_sbrk+0x64>)
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4413      	add	r3, r2
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d207      	bcs.n	8005c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005c4c:	f00b fe5e 	bl	801190c <__errno>
 8005c50:	4603      	mov	r3, r0
 8005c52:	220c      	movs	r2, #12
 8005c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c5a:	e009      	b.n	8005c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005c5c:	4b08      	ldr	r3, [pc, #32]	; (8005c80 <_sbrk+0x64>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005c62:	4b07      	ldr	r3, [pc, #28]	; (8005c80 <_sbrk+0x64>)
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4413      	add	r3, r2
 8005c6a:	4a05      	ldr	r2, [pc, #20]	; (8005c80 <_sbrk+0x64>)
 8005c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	20018000 	.word	0x20018000
 8005c7c:	00000c00 	.word	0x00000c00
 8005c80:	20004000 	.word	0x20004000
 8005c84:	20004188 	.word	0x20004188

08005c88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005c8c:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <SystemInit+0x20>)
 8005c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c92:	4a05      	ldr	r2, [pc, #20]	; (8005ca8 <SystemInit+0x20>)
 8005c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005c9c:	bf00      	nop
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	e000ed00 	.word	0xe000ed00

08005cac <W25_SELECT>:

extern void Report(const uint8_t addTime, const char *fmt, ...);

//------------------------------------------------------------------------------------------

void W25_SELECT()   { W25_SEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET);//set to 0
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005cb6:	4802      	ldr	r0, [pc, #8]	; (8005cc0 <W25_SELECT+0x14>)
 8005cb8:	f001 fba0 	bl	80073fc <HAL_GPIO_WritePin>
 8005cbc:	bf00      	nop
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	48000400 	.word	0x48000400

08005cc4 <W25_UNSELECT>:
void W25_UNSELECT() { W25_UNSEL(); } //HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET);//set to 1
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005cce:	4802      	ldr	r0, [pc, #8]	; (8005cd8 <W25_UNSELECT+0x14>)
 8005cd0:	f001 fb94 	bl	80073fc <HAL_GPIO_WritePin>
 8005cd4:	bf00      	nop
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	48000400 	.word	0x48000400

08005cdc <W25qxx_Spi>:
//void W25_SELECT()   { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_RESET); }//set to 0
//void W25_UNSELECT() { HAL_GPIO_WritePin(W25_CS_GPIO_Port, W25_CS_Pin, GPIO_PIN_SET); }//set to 1

//------------------------------------------------------------------------------------------
uint8_t W25qxx_Spi(uint8_t Data)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af02      	add	r7, sp, #8
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	71fb      	strb	r3, [r7, #7]
uint8_t ret;

    HAL_SPI_TransmitReceive(portFLASH, &Data, &ret, 1, min_wait_ms);//HAL_MAX_DELAY);
 8005ce6:	4b07      	ldr	r3, [pc, #28]	; (8005d04 <W25qxx_Spi+0x28>)
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	23fa      	movs	r3, #250	; 0xfa
 8005cec:	f107 020f 	add.w	r2, r7, #15
 8005cf0:	1df9      	adds	r1, r7, #7
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f005 f9c0 	bl	800b07a <HAL_SPI_TransmitReceive>

    return ret;
 8005cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	2000000c 	.word	0x2000000c

08005d08 <W25qxx_Reset>:
//------------------------------------------------------------------------------------------
void W25qxx_Reset(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
	W25qxx_Delay(100);
 8005d0c:	2064      	movs	r0, #100	; 0x64
 8005d0e:	f000 fdc7 	bl	80068a0 <HAL_Delay>

	W25_SELECT();
 8005d12:	f7ff ffcb 	bl	8005cac <W25_SELECT>
		W25qxx_Spi(EN_RESET);
 8005d16:	2066      	movs	r0, #102	; 0x66
 8005d18:	f7ff ffe0 	bl	8005cdc <W25qxx_Spi>
		W25qxx_Spi(CHIP_RESET);
 8005d1c:	2099      	movs	r0, #153	; 0x99
 8005d1e:	f7ff ffdd 	bl	8005cdc <W25qxx_Spi>
	W25_UNSELECT();
 8005d22:	f7ff ffcf 	bl	8005cc4 <W25_UNSELECT>

	W25qxx_Delay(100);
 8005d26:	2064      	movs	r0, #100	; 0x64
 8005d28:	f000 fdba 	bl	80068a0 <HAL_Delay>
}
 8005d2c:	bf00      	nop
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <W25qxx_ReadID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_ReadID(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
uint32_t Temp[3] = {0};
 8005d36:	1d3b      	adds	r3, r7, #4
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	605a      	str	r2, [r3, #4]
 8005d3e:	609a      	str	r2, [r3, #8]

    W25_SELECT();//set to 0
 8005d40:	f7ff ffb4 	bl	8005cac <W25_SELECT>

    W25qxx_Spi(JEDEC_ID);
 8005d44:	209f      	movs	r0, #159	; 0x9f
 8005d46:	f7ff ffc9 	bl	8005cdc <W25qxx_Spi>
    Temp[0] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005d4a:	20a5      	movs	r0, #165	; 0xa5
 8005d4c:	f7ff ffc6 	bl	8005cdc <W25qxx_Spi>
 8005d50:	4603      	mov	r3, r0
 8005d52:	607b      	str	r3, [r7, #4]
    Temp[1] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005d54:	20a5      	movs	r0, #165	; 0xa5
 8005d56:	f7ff ffc1 	bl	8005cdc <W25qxx_Spi>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	60bb      	str	r3, [r7, #8]
    Temp[2] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005d5e:	20a5      	movs	r0, #165	; 0xa5
 8005d60:	f7ff ffbc 	bl	8005cdc <W25qxx_Spi>
 8005d64:	4603      	mov	r3, r0
 8005d66:	60fb      	str	r3, [r7, #12]

    W25_UNSELECT();//set to 1
 8005d68:	f7ff ffac 	bl	8005cc4 <W25_UNSELECT>

    return ((Temp[0] << 16) | (Temp[1] << 8) | Temp[2]);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	041a      	lsls	r2, r3, #16
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	021b      	lsls	r3, r3, #8
 8005d74:	431a      	orrs	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4313      	orrs	r3, r2
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <W25qxx_ReadUniqID>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadUniqID(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
	uint8_t dat[] = {READ_UID, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE};
 8005d8a:	4a0e      	ldr	r2, [pc, #56]	; (8005dc4 <W25qxx_ReadUniqID+0x40>)
 8005d8c:	463b      	mov	r3, r7
 8005d8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d92:	6018      	str	r0, [r3, #0]
 8005d94:	3304      	adds	r3, #4
 8005d96:	7019      	strb	r1, [r3, #0]
    W25_SELECT();
 8005d98:	f7ff ff88 	bl	8005cac <W25_SELECT>

    //W25qxx_Spi(READ_UID);
    //for (uint8_t i = 0; i < 4; i++) W25qxx_Spi(W25QXX_DUMMY_BYTE);
    //for (uint8_t i = 0; i < 8; i++) w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
    HAL_SPI_Transmit(portFLASH, dat, sizeof(dat), min_wait_ms);
 8005d9c:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <W25qxx_ReadUniqID+0x44>)
 8005d9e:	6818      	ldr	r0, [r3, #0]
 8005da0:	23fa      	movs	r3, #250	; 0xfa
 8005da2:	4639      	mov	r1, r7
 8005da4:	2205      	movs	r2, #5
 8005da6:	f004 feca 	bl	800ab3e <HAL_SPI_Transmit>
    HAL_SPI_Receive(portFLASH, w25qxx.UniqID, 8, min_wait_ms);
 8005daa:	4b07      	ldr	r3, [pc, #28]	; (8005dc8 <W25qxx_ReadUniqID+0x44>)
 8005dac:	6818      	ldr	r0, [r3, #0]
 8005dae:	23fa      	movs	r3, #250	; 0xfa
 8005db0:	2208      	movs	r2, #8
 8005db2:	4906      	ldr	r1, [pc, #24]	; (8005dcc <W25qxx_ReadUniqID+0x48>)
 8005db4:	f005 f831 	bl	800ae1a <HAL_SPI_Receive>

    W25_UNSELECT();
 8005db8:	f7ff ff84 	bl	8005cc4 <W25_UNSELECT>
}
 8005dbc:	bf00      	nop
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	08016940 	.word	0x08016940
 8005dc8:	2000000c 	.word	0x2000000c
 8005dcc:	20004005 	.word	0x20004005

08005dd0 <W25qxx_WriteEnable>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteEnable(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
    W25_SELECT();
 8005dd4:	f7ff ff6a 	bl	8005cac <W25_SELECT>

    W25qxx_Spi(WRITE_ENABLE);
 8005dd8:	2006      	movs	r0, #6
 8005dda:	f7ff ff7f 	bl	8005cdc <W25qxx_Spi>

    W25_UNSELECT();
 8005dde:	f7ff ff71 	bl	8005cc4 <W25_UNSELECT>

    W25qxx_Delay(1);
 8005de2:	2001      	movs	r0, #1
 8005de4:	f000 fd5c 	bl	80068a0 <HAL_Delay>
}
 8005de8:	bf00      	nop
 8005dea:	bd80      	pop	{r7, pc}

08005dec <W25qxx_ReadStatusRegister>:

    W25qxx_Delay(1);
}
//------------------------------------------------------------------------------------------
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusReg)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	4603      	mov	r3, r0
 8005df4:	71fb      	strb	r3, [r7, #7]
uint8_t status = 0;
 8005df6:	2300      	movs	r3, #0
 8005df8:	73fb      	strb	r3, [r7, #15]

    W25_SELECT();
 8005dfa:	f7ff ff57 	bl	8005cac <W25_SELECT>

    switch (SelectStatusReg) {
 8005dfe:	79fb      	ldrb	r3, [r7, #7]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d002      	beq.n	8005e0a <W25qxx_ReadStatusRegister+0x1e>
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d00d      	beq.n	8005e24 <W25qxx_ReadStatusRegister+0x38>
 8005e08:	e019      	b.n	8005e3e <W25qxx_ReadStatusRegister+0x52>
        case 1:
            W25qxx_Spi(READ_STAT_REG1);
 8005e0a:	2005      	movs	r0, #5
 8005e0c:	f7ff ff66 	bl	8005cdc <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005e10:	20a5      	movs	r0, #165	; 0xa5
 8005e12:	f7ff ff63 	bl	8005cdc <W25qxx_Spi>
 8005e16:	4603      	mov	r3, r0
 8005e18:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister1 = status;
 8005e1a:	4a12      	ldr	r2, [pc, #72]	; (8005e64 <W25qxx_ReadStatusRegister+0x78>)
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
 8005e1e:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
        break;
 8005e22:	e018      	b.n	8005e56 <W25qxx_ReadStatusRegister+0x6a>
        case 2:
            W25qxx_Spi(READ_STAT_REG2);
 8005e24:	2035      	movs	r0, #53	; 0x35
 8005e26:	f7ff ff59 	bl	8005cdc <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005e2a:	20a5      	movs	r0, #165	; 0xa5
 8005e2c:	f7ff ff56 	bl	8005cdc <W25qxx_Spi>
 8005e30:	4603      	mov	r3, r0
 8005e32:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister2 = status;
 8005e34:	4a0b      	ldr	r2, [pc, #44]	; (8005e64 <W25qxx_ReadStatusRegister+0x78>)
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
 8005e38:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        break;
 8005e3c:	e00b      	b.n	8005e56 <W25qxx_ReadStatusRegister+0x6a>
        default : {
            W25qxx_Spi(READ_STAT_REG3);
 8005e3e:	2015      	movs	r0, #21
 8005e40:	f7ff ff4c 	bl	8005cdc <W25qxx_Spi>
            status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005e44:	20a5      	movs	r0, #165	; 0xa5
 8005e46:	f7ff ff49 	bl	8005cdc <W25qxx_Spi>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	73fb      	strb	r3, [r7, #15]
            w25qxx.StatusRegister3 = status;
 8005e4e:	4a05      	ldr	r2, [pc, #20]	; (8005e64 <W25qxx_ReadStatusRegister+0x78>)
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
 8005e52:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        }
    }

    W25_UNSELECT();
 8005e56:	f7ff ff35 	bl	8005cc4 <W25_UNSELECT>

    return status;
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	20004004 	.word	0x20004004

08005e68 <W25qxx_WaitForWriteEnd>:

    W25_UNSELECT();
}
//------------------------------------------------------------------------------------------
void W25qxx_WaitForWriteEnd(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	af00      	add	r7, sp, #0
    W25qxx_Delay(1);
 8005e6c:	2001      	movs	r0, #1
 8005e6e:	f000 fd17 	bl	80068a0 <HAL_Delay>

    W25_SELECT();
 8005e72:	f7ff ff1b 	bl	8005cac <W25_SELECT>

    W25qxx_Spi(READ_STAT_REG1);
 8005e76:	2005      	movs	r0, #5
 8005e78:	f7ff ff30 	bl	8005cdc <W25qxx_Spi>
    do
    {
        w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005e7c:	20a5      	movs	r0, #165	; 0xa5
 8005e7e:	f7ff ff2d 	bl	8005cdc <W25qxx_Spi>
 8005e82:	4603      	mov	r3, r0
 8005e84:	461a      	mov	r2, r3
 8005e86:	4b08      	ldr	r3, [pc, #32]	; (8005ea8 <W25qxx_WaitForWriteEnd+0x40>)
 8005e88:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        W25qxx_Delay(1);
 8005e8c:	2001      	movs	r0, #1
 8005e8e:	f000 fd07 	bl	80068a0 <HAL_Delay>
    } while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8005e92:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <W25qxx_WaitForWriteEnd+0x40>)
 8005e94:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1ed      	bne.n	8005e7c <W25qxx_WaitForWriteEnd+0x14>

    W25_UNSELECT();
 8005ea0:	f7ff ff10 	bl	8005cc4 <W25_UNSELECT>
}
 8005ea4:	bf00      	nop
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	20004004 	.word	0x20004004

08005eac <W25qxx_Init>:
//------------------------------------------------------------------------------------------
bool W25qxx_Init(void)
{
 8005eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eae:	b089      	sub	sp, #36	; 0x24
 8005eb0:	af06      	add	r7, sp, #24

	W25qxx_Reset();
 8005eb2:	f7ff ff29 	bl	8005d08 <W25qxx_Reset>


    w25qxx.Lock = 1;
 8005eb6:	4b54      	ldr	r3, [pc, #336]	; (8006008 <W25qxx_Init+0x15c>)
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    bool ret = false;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	71fb      	strb	r3, [r7, #7]

    W25_UNSELECT();
 8005ec2:	f7ff feff 	bl	8005cc4 <W25_UNSELECT>

    uint32_t id = W25qxx_ReadID() & 0xffff;
 8005ec6:	f7ff ff33 	bl	8005d30 <W25qxx_ReadID>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	603b      	str	r3, [r7, #0]
//#ifdef W25QXX_DEBUG
    Report(1, "w25qxx Init Begin... Chip ID:0x%X\r\n", id);
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	494e      	ldr	r1, [pc, #312]	; (800600c <W25qxx_Init+0x160>)
 8005ed4:	2001      	movs	r0, #1
 8005ed6:	f7fe fa57 	bl	8004388 <Report>
//#endif
    id &= 0xff;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	603b      	str	r3, [r7, #0]
    id -= 0x10;//0x4010;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	3b10      	subs	r3, #16
 8005ee4:	603b      	str	r3, [r7, #0]
    if (id > 0x0a) id = 0;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b0a      	cmp	r3, #10
 8005eea:	d901      	bls.n	8005ef0 <W25qxx_Init+0x44>
 8005eec:	2300      	movs	r3, #0
 8005eee:	603b      	str	r3, [r7, #0]
    w25qxx.ID         = id;              //W25Q10..W25Q512
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	4b44      	ldr	r3, [pc, #272]	; (8006008 <W25qxx_Init+0x15c>)
 8005ef6:	701a      	strb	r2, [r3, #0]
    w25qxx.BlockCount = all_chipBLK[id]; //0..1024;
 8005ef8:	4a45      	ldr	r2, [pc, #276]	; (8006010 <W25qxx_Init+0x164>)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f00:	4a41      	ldr	r2, [pc, #260]	; (8006008 <W25qxx_Init+0x15c>)
 8005f02:	f8c2 301b 	str.w	r3, [r2, #27]
//#ifdef W25QXX_DEBUG
    Report(1, "Chip %s\r\n", all_chipID[id]);
 8005f06:	4a43      	ldr	r2, [pc, #268]	; (8006014 <W25qxx_Init+0x168>)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	4941      	ldr	r1, [pc, #260]	; (8006018 <W25qxx_Init+0x16c>)
 8005f12:	2001      	movs	r0, #1
 8005f14:	f7fe fa38 	bl	8004388 <Report>
//#endif

    if (id) {
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d06b      	beq.n	8005ff6 <W25qxx_Init+0x14a>
    	w25qxx.PageSize = 256;
 8005f1e:	4b3a      	ldr	r3, [pc, #232]	; (8006008 <W25qxx_Init+0x15c>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	725a      	strb	r2, [r3, #9]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f042 0201 	orr.w	r2, r2, #1
 8005f2a:	729a      	strb	r2, [r3, #10]
    	w25qxx.SectorSize = 0x1000;
 8005f2c:	4b36      	ldr	r3, [pc, #216]	; (8006008 <W25qxx_Init+0x15c>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	73da      	strb	r2, [r3, #15]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f042 0210 	orr.w	r2, r2, #16
 8005f38:	741a      	strb	r2, [r3, #16]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	745a      	strb	r2, [r3, #17]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	749a      	strb	r2, [r3, #18]
    	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8005f42:	4b31      	ldr	r3, [pc, #196]	; (8006008 <W25qxx_Init+0x15c>)
 8005f44:	f8d3 301b 	ldr.w	r3, [r3, #27]
 8005f48:	011b      	lsls	r3, r3, #4
 8005f4a:	4a2f      	ldr	r2, [pc, #188]	; (8006008 <W25qxx_Init+0x15c>)
 8005f4c:	f8c2 3013 	str.w	r3, [r2, #19]
    	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8005f50:	4b2d      	ldr	r3, [pc, #180]	; (8006008 <W25qxx_Init+0x15c>)
 8005f52:	f8d3 3013 	ldr.w	r3, [r3, #19]
 8005f56:	4a2c      	ldr	r2, [pc, #176]	; (8006008 <W25qxx_Init+0x15c>)
 8005f58:	f8d2 200f 	ldr.w	r2, [r2, #15]
 8005f5c:	fb02 f303 	mul.w	r3, r2, r3
 8005f60:	4a29      	ldr	r2, [pc, #164]	; (8006008 <W25qxx_Init+0x15c>)
 8005f62:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8005f66:	b292      	uxth	r2, r2
 8005f68:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f6c:	4a26      	ldr	r2, [pc, #152]	; (8006008 <W25qxx_Init+0x15c>)
 8005f6e:	f8c2 300b 	str.w	r3, [r2, #11]
    	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8005f72:	4b25      	ldr	r3, [pc, #148]	; (8006008 <W25qxx_Init+0x15c>)
 8005f74:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005f78:	011b      	lsls	r3, r3, #4
 8005f7a:	4a23      	ldr	r2, [pc, #140]	; (8006008 <W25qxx_Init+0x15c>)
 8005f7c:	f8c2 3017 	str.w	r3, [r2, #23]
    	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8005f80:	4b21      	ldr	r3, [pc, #132]	; (8006008 <W25qxx_Init+0x15c>)
 8005f82:	f8d3 3013 	ldr.w	r3, [r3, #19]
 8005f86:	4a20      	ldr	r2, [pc, #128]	; (8006008 <W25qxx_Init+0x15c>)
 8005f88:	f8d2 200f 	ldr.w	r2, [r2, #15]
 8005f8c:	fb02 f303 	mul.w	r3, r2, r3
 8005f90:	0a9b      	lsrs	r3, r3, #10
 8005f92:	4a1d      	ldr	r2, [pc, #116]	; (8006008 <W25qxx_Init+0x15c>)
 8005f94:	f8c2 301f 	str.w	r3, [r2, #31]
    	W25qxx_ReadUniqID();
 8005f98:	f7ff fef4 	bl	8005d84 <W25qxx_ReadUniqID>
    	W25qxx_ReadStatusRegister(1);
 8005f9c:	2001      	movs	r0, #1
 8005f9e:	f7ff ff25 	bl	8005dec <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(2);
 8005fa2:	2002      	movs	r0, #2
 8005fa4:	f7ff ff22 	bl	8005dec <W25qxx_ReadStatusRegister>
    	W25qxx_ReadStatusRegister(3);
 8005fa8:	2003      	movs	r0, #3
 8005faa:	f7ff ff1f 	bl	8005dec <W25qxx_ReadStatusRegister>
    	ret = true;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	71fb      	strb	r3, [r7, #7]
                 "\tSector Size:\t%u bytes\r\n"
                 "\tSector Count:\t%u\r\n"
                 "\tBlock Size:\t%u bytes\r\n"
                 "\tBlock Count:\t%u\r\n"
                 "\tCapacity:\t%u KBytes\r\n",
                 w25qxx.PageSize,
 8005fb2:	4b15      	ldr	r3, [pc, #84]	; (8006008 <W25qxx_Init+0x15c>)
 8005fb4:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005fb8:	b29b      	uxth	r3, r3
    	Report(0,"\tPage Size:\t%u bytes\r\n"
 8005fba:	461e      	mov	r6, r3
 8005fbc:	4b12      	ldr	r3, [pc, #72]	; (8006008 <W25qxx_Init+0x15c>)
 8005fbe:	f8d3 500b 	ldr.w	r5, [r3, #11]
 8005fc2:	4b11      	ldr	r3, [pc, #68]	; (8006008 <W25qxx_Init+0x15c>)
 8005fc4:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8005fc8:	4a0f      	ldr	r2, [pc, #60]	; (8006008 <W25qxx_Init+0x15c>)
 8005fca:	f8d2 2013 	ldr.w	r2, [r2, #19]
 8005fce:	490e      	ldr	r1, [pc, #56]	; (8006008 <W25qxx_Init+0x15c>)
 8005fd0:	f8d1 1017 	ldr.w	r1, [r1, #23]
 8005fd4:	480c      	ldr	r0, [pc, #48]	; (8006008 <W25qxx_Init+0x15c>)
 8005fd6:	f8d0 001b 	ldr.w	r0, [r0, #27]
 8005fda:	4c0b      	ldr	r4, [pc, #44]	; (8006008 <W25qxx_Init+0x15c>)
 8005fdc:	f8d4 401f 	ldr.w	r4, [r4, #31]
 8005fe0:	9404      	str	r4, [sp, #16]
 8005fe2:	9003      	str	r0, [sp, #12]
 8005fe4:	9102      	str	r1, [sp, #8]
 8005fe6:	9201      	str	r2, [sp, #4]
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	462b      	mov	r3, r5
 8005fec:	4632      	mov	r2, r6
 8005fee:	490b      	ldr	r1, [pc, #44]	; (800601c <W25qxx_Init+0x170>)
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	f7fe f9c9 	bl	8004388 <Report>
                 w25qxx.BlockCount,
                 w25qxx.CapacityInKiloByte);
//#endif
    }

    w25qxx.Lock = 0;
 8005ff6:	4b04      	ldr	r3, [pc, #16]	; (8006008 <W25qxx_Init+0x15c>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return ret;
 8005ffe:	79fb      	ldrb	r3, [r7, #7]
}
 8006000:	4618      	mov	r0, r3
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006008:	20004004 	.word	0x20004004
 800600c:	08016948 	.word	0x08016948
 8006010:	08017844 	.word	0x08017844
 8006014:	200001ec 	.word	0x200001ec
 8006018:	0801696c 	.word	0x0801696c
 800601c:	08016978 	.word	0x08016978

08006020 <W25qxx_getChipID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_getChipID()
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
	return (uint32_t)w25qxx.ID;
 8006024:	4b03      	ldr	r3, [pc, #12]	; (8006034 <W25qxx_getChipID+0x14>)
 8006026:	781b      	ldrb	r3, [r3, #0]
}
 8006028:	4618      	mov	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	20004004 	.word	0x20004004

08006038 <W25qxx_getSectorCount>:
uint32_t W25qxx_getSectorCount()
{
 8006038:	b480      	push	{r7}
 800603a:	af00      	add	r7, sp, #0
	return w25qxx.SectorCount;
 800603c:	4b03      	ldr	r3, [pc, #12]	; (800604c <W25qxx_getSectorCount+0x14>)
 800603e:	f8d3 3013 	ldr.w	r3, [r3, #19]
}
 8006042:	4618      	mov	r0, r3
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	20004004 	.word	0x20004004

08006050 <W25qxx_getSectorSize>:
uint32_t W25qxx_getSectorSize()
{
 8006050:	b480      	push	{r7}
 8006052:	af00      	add	r7, sp, #0
	return w25qxx.SectorSize;
 8006054:	4b03      	ldr	r3, [pc, #12]	; (8006064 <W25qxx_getSectorSize+0x14>)
 8006056:	f8d3 300f 	ldr.w	r3, [r3, #15]
}
 800605a:	4618      	mov	r0, r3
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	20004004 	.word	0x20004004

08006068 <W25qxx_getPageSize>:
uint32_t W25qxx_getPageCount()
{
	return w25qxx.PageCount;
}
uint32_t W25qxx_getPageSize()
{
 8006068:	b480      	push	{r7}
 800606a:	af00      	add	r7, sp, #0
	return w25qxx.PageSize;
 800606c:	4b04      	ldr	r3, [pc, #16]	; (8006080 <W25qxx_getPageSize+0x18>)
 800606e:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006072:	b29b      	uxth	r3, r3
}
 8006074:	4618      	mov	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	20004004 	.word	0x20004004

08006084 <W25qxx_getBlockSize>:
uint32_t W25qxx_getBlockCount()
{
	return w25qxx.BlockCount;
}
uint32_t W25qxx_getBlockSize()
{
 8006084:	b480      	push	{r7}
 8006086:	af00      	add	r7, sp, #0
	return w25qxx.BlockSize;
 8006088:	4b03      	ldr	r3, [pc, #12]	; (8006098 <W25qxx_getBlockSize+0x14>)
 800608a:	f8d3 3017 	ldr.w	r3, [r3, #23]
}
 800608e:	4618      	mov	r0, r3
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	20004004 	.word	0x20004004

0800609c <W25qxx_EraseSector>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 80060a4:	e002      	b.n	80060ac <W25qxx_EraseSector+0x10>
 80060a6:	2001      	movs	r0, #1
 80060a8:	f000 fbfa 	bl	80068a0 <HAL_Delay>
 80060ac:	4b1c      	ldr	r3, [pc, #112]	; (8006120 <W25qxx_EraseSector+0x84>)
 80060ae:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1f7      	bne.n	80060a6 <W25qxx_EraseSector+0xa>

    w25qxx.Lock = 1;
 80060b6:	4b1a      	ldr	r3, [pc, #104]	; (8006120 <W25qxx_EraseSector+0x84>)
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#ifdef W25QXX_DEBUG
    uint32_t StartTime = HAL_GetTick();
    Report(1, "%u Begin...", SectorAddr);
#endif

    W25qxx_WaitForWriteEnd();
 80060be:	f7ff fed3 	bl	8005e68 <W25qxx_WaitForWriteEnd>
    SectorAddr = SectorAddr * w25qxx.SectorSize;
 80060c2:	4b17      	ldr	r3, [pc, #92]	; (8006120 <W25qxx_EraseSector+0x84>)
 80060c4:	f8d3 200f 	ldr.w	r2, [r3, #15]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	fb02 f303 	mul.w	r3, r2, r3
 80060ce:	607b      	str	r3, [r7, #4]
    W25qxx_WriteEnable();
 80060d0:	f7ff fe7e 	bl	8005dd0 <W25qxx_WriteEnable>

    W25_SELECT();
 80060d4:	f7ff fdea 	bl	8005cac <W25_SELECT>
    W25qxx_Spi(SECTOR_ERASE);
 80060d8:	2020      	movs	r0, #32
 80060da:	f7ff fdff 	bl	8005cdc <W25qxx_Spi>
    //if (w25qxx.ID >= W25Q256) W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
    W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	0c1b      	lsrs	r3, r3, #16
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7ff fdf9 	bl	8005cdc <W25qxx_Spi>
    W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	0a1b      	lsrs	r3, r3, #8
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff fdf3 	bl	8005cdc <W25qxx_Spi>
    W25qxx_Spi(SectorAddr & 0xFF);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff fdee 	bl	8005cdc <W25qxx_Spi>
    W25_UNSELECT();
 8006100:	f7ff fde0 	bl	8005cc4 <W25_UNSELECT>

    W25qxx_WaitForWriteEnd();
 8006104:	f7ff feb0 	bl	8005e68 <W25qxx_WaitForWriteEnd>

#ifdef W25QXX_DEBUG
    uint32_t dur = HAL_GetTick() - StartTime;
    Report(0, " done after %u ms (%u sec)!\r\n", dur, dur / 1000);
#endif
    W25qxx_Delay(1);
 8006108:	2001      	movs	r0, #1
 800610a:	f000 fbc9 	bl	80068a0 <HAL_Delay>

    w25qxx.Lock = 0;
 800610e:	4b04      	ldr	r3, [pc, #16]	; (8006120 <W25qxx_EraseSector+0x84>)
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8006116:	bf00      	nop
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	20004004 	.word	0x20004004

08006124 <W25qxx_SectorToPage>:
{
    return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//------------------------------------------------------------------------------------------
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
    return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 800612c:	4b08      	ldr	r3, [pc, #32]	; (8006150 <W25qxx_SectorToPage+0x2c>)
 800612e:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	fb02 f303 	mul.w	r3, r2, r3
 8006138:	4a05      	ldr	r2, [pc, #20]	; (8006150 <W25qxx_SectorToPage+0x2c>)
 800613a:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800613e:	b292      	uxth	r2, r2
 8006140:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8006144:	4618      	mov	r0, r3
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	20004004 	.word	0x20004004

08006154 <W25qxx_IsEmptySector>:

    return false;
}
//------------------------------------------------------------------------------------------
bool W25qxx_IsEmptySector(uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToCheck_up_to_SectorSize)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b090      	sub	sp, #64	; 0x40
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8006160:	e002      	b.n	8006168 <W25qxx_IsEmptySector+0x14>
 8006162:	2001      	movs	r0, #1
 8006164:	f000 fb9c 	bl	80068a0 <HAL_Delay>
 8006168:	4b59      	ldr	r3, [pc, #356]	; (80062d0 <W25qxx_IsEmptySector+0x17c>)
 800616a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1f7      	bne.n	8006162 <W25qxx_IsEmptySector+0xe>

    w25qxx.Lock = 1;
 8006172:	4b57      	ldr	r3, [pc, #348]	; (80062d0 <W25qxx_IsEmptySector+0x17c>)
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( (NumByteToCheck_up_to_SectorSize > w25qxx.SectorSize) || (!NumByteToCheck_up_to_SectorSize) )
 800617a:	4b55      	ldr	r3, [pc, #340]	; (80062d0 <W25qxx_IsEmptySector+0x17c>)
 800617c:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	429a      	cmp	r2, r3
 8006184:	d802      	bhi.n	800618c <W25qxx_IsEmptySector+0x38>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d103      	bne.n	8006194 <W25qxx_IsEmptySector+0x40>
                NumByteToCheck_up_to_SectorSize = w25qxx.SectorSize;
 800618c:	4b50      	ldr	r3, [pc, #320]	; (80062d0 <W25qxx_IsEmptySector+0x17c>)
 800618e:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006192:	607b      	str	r3, [r7, #4]
    uint32_t StartTime = HAL_GetTick();
#endif

    uint8_t pBuffer[32];
    uint32_t i, WorkAddress;
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006198:	e040      	b.n	800621c <W25qxx_IsEmptySector+0xc8>

    	W25_SELECT();
 800619a:	f7ff fd87 	bl	8005cac <W25_SELECT>
        WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 800619e:	4b4c      	ldr	r3, [pc, #304]	; (80062d0 <W25qxx_IsEmptySector+0x17c>)
 80061a0:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	fb02 f303 	mul.w	r3, r2, r3
 80061aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061ac:	4413      	add	r3, r2
 80061ae:	637b      	str	r3, [r7, #52]	; 0x34
        W25qxx_Spi(DATA_READ);//FAST_READ);
 80061b0:	2003      	movs	r0, #3
 80061b2:	f7ff fd93 	bl	8005cdc <W25qxx_Spi>
        //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
        W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80061b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b8:	0c1b      	lsrs	r3, r3, #16
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	4618      	mov	r0, r3
 80061be:	f7ff fd8d 	bl	8005cdc <W25qxx_Spi>
        W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 80061c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c4:	0a1b      	lsrs	r3, r3, #8
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7ff fd87 	bl	8005cdc <W25qxx_Spi>
        W25qxx_Spi(WorkAddress & 0xFF);
 80061ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff fd82 	bl	8005cdc <W25qxx_Spi>
        //W25qxx_Spi(0);
        HAL_SPI_Receive(portFLASH, pBuffer, sizeof(pBuffer), min_wait_ms);
 80061d8:	4b3e      	ldr	r3, [pc, #248]	; (80062d4 <W25qxx_IsEmptySector+0x180>)
 80061da:	6818      	ldr	r0, [r3, #0]
 80061dc:	23fa      	movs	r3, #250	; 0xfa
 80061de:	f107 0114 	add.w	r1, r7, #20
 80061e2:	2220      	movs	r2, #32
 80061e4:	f004 fe19 	bl	800ae1a <HAL_SPI_Receive>
        W25_UNSELECT();
 80061e8:	f7ff fd6c 	bl	8005cc4 <W25_UNSELECT>

        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 80061ec:	2300      	movs	r3, #0
 80061ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80061f2:	e00c      	b.n	800620e <W25qxx_IsEmptySector+0xba>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 80061f4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80061f8:	3340      	adds	r3, #64	; 0x40
 80061fa:	443b      	add	r3, r7
 80061fc:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8006200:	2bff      	cmp	r3, #255	; 0xff
 8006202:	d159      	bne.n	80062b8 <W25qxx_IsEmptySector+0x164>
        for (uint8_t x = 0; x < sizeof(pBuffer); x++) {
 8006204:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006208:	3301      	adds	r3, #1
 800620a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800620e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006212:	2b1f      	cmp	r3, #31
 8006214:	d9ee      	bls.n	80061f4 <W25qxx_IsEmptySector+0xa0>
    for ( i = OffsetInByte; i < w25qxx.SectorSize; i += sizeof(pBuffer)) {
 8006216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006218:	3320      	adds	r3, #32
 800621a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800621c:	4b2c      	ldr	r3, [pc, #176]	; (80062d0 <W25qxx_IsEmptySector+0x17c>)
 800621e:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006222:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006224:	429a      	cmp	r2, r3
 8006226:	d3b8      	bcc.n	800619a <W25qxx_IsEmptySector+0x46>
        }
    }
    if ((w25qxx.SectorSize + OffsetInByte) % sizeof(pBuffer) != 0) {
 8006228:	4b29      	ldr	r3, [pc, #164]	; (80062d0 <W25qxx_IsEmptySector+0x17c>)
 800622a:	f8d3 200f 	ldr.w	r2, [r3, #15]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	4413      	add	r3, r2
 8006232:	f003 031f 	and.w	r3, r3, #31
 8006236:	2b00      	cmp	r3, #0
 8006238:	d038      	beq.n	80062ac <W25qxx_IsEmptySector+0x158>
        i -= sizeof(pBuffer);
 800623a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800623c:	3b20      	subs	r3, #32
 800623e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for( ; i < w25qxx.SectorSize; i++) {
 8006240:	e02e      	b.n	80062a0 <W25qxx_IsEmptySector+0x14c>

            W25_SELECT();
 8006242:	f7ff fd33 	bl	8005cac <W25_SELECT>
            WorkAddress = (i + Sector_Address * w25qxx.SectorSize);
 8006246:	4b22      	ldr	r3, [pc, #136]	; (80062d0 <W25qxx_IsEmptySector+0x17c>)
 8006248:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	fb02 f303 	mul.w	r3, r2, r3
 8006252:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006254:	4413      	add	r3, r2
 8006256:	637b      	str	r3, [r7, #52]	; 0x34
            W25qxx_Spi(DATA_READ);//FAST_READ);
 8006258:	2003      	movs	r0, #3
 800625a:	f7ff fd3f 	bl	8005cdc <W25qxx_Spi>
            //if (w25qxx.ID >= W25Q256) W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
            W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 800625e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006260:	0c1b      	lsrs	r3, r3, #16
 8006262:	b2db      	uxtb	r3, r3
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff fd39 	bl	8005cdc <W25qxx_Spi>
            W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 800626a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626c:	0a1b      	lsrs	r3, r3, #8
 800626e:	b2db      	uxtb	r3, r3
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff fd33 	bl	8005cdc <W25qxx_Spi>
            W25qxx_Spi(WorkAddress & 0xFF);
 8006276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006278:	b2db      	uxtb	r3, r3
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff fd2e 	bl	8005cdc <W25qxx_Spi>
            //W25qxx_Spi(0);
            HAL_SPI_Receive(portFLASH, pBuffer, 1, min_wait_ms);
 8006280:	4b14      	ldr	r3, [pc, #80]	; (80062d4 <W25qxx_IsEmptySector+0x180>)
 8006282:	6818      	ldr	r0, [r3, #0]
 8006284:	23fa      	movs	r3, #250	; 0xfa
 8006286:	f107 0114 	add.w	r1, r7, #20
 800628a:	2201      	movs	r2, #1
 800628c:	f004 fdc5 	bl	800ae1a <HAL_SPI_Receive>
            W25_UNSELECT();
 8006290:	f7ff fd18 	bl	8005cc4 <W25_UNSELECT>

            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 8006294:	7d3b      	ldrb	r3, [r7, #20]
 8006296:	2bff      	cmp	r3, #255	; 0xff
 8006298:	d110      	bne.n	80062bc <W25qxx_IsEmptySector+0x168>
        for( ; i < w25qxx.SectorSize; i++) {
 800629a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800629c:	3301      	adds	r3, #1
 800629e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062a0:	4b0b      	ldr	r3, [pc, #44]	; (80062d0 <W25qxx_IsEmptySector+0x17c>)
 80062a2:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80062a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d3ca      	bcc.n	8006242 <W25qxx_IsEmptySector+0xee>
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 80062ac:	4b08      	ldr	r3, [pc, #32]	; (80062d0 <W25qxx_IsEmptySector+0x17c>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return true;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e007      	b.n	80062c8 <W25qxx_IsEmptySector+0x174>
            if (pBuffer[x] != 0xFF) goto NOT_EMPTY;
 80062b8:	bf00      	nop
 80062ba:	e000      	b.n	80062be <W25qxx_IsEmptySector+0x16a>
            if (pBuffer[0] != 0xFF) goto NOT_EMPTY;
 80062bc:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "w25qxx CheckSector is Not Empty in %u ms\r\n", HAL_GetTick() - StartTime);
    //W25qxx_Delay(100);
#endif

    w25qxx.Lock = 0;
 80062be:	4b04      	ldr	r3, [pc, #16]	; (80062d0 <W25qxx_IsEmptySector+0x17c>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    return false;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3740      	adds	r7, #64	; 0x40
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	20004004 	.word	0x20004004
 80062d4:	2000000c 	.word	0x2000000c

080062d8 <W25qxx_WritePage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
 80062e4:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 80062e6:	e002      	b.n	80062ee <W25qxx_WritePage+0x16>
 80062e8:	2001      	movs	r0, #1
 80062ea:	f000 fad9 	bl	80068a0 <HAL_Delay>
 80062ee:	4b4d      	ldr	r3, [pc, #308]	; (8006424 <W25qxx_WritePage+0x14c>)
 80062f0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1f7      	bne.n	80062e8 <W25qxx_WritePage+0x10>

    w25qxx.Lock = 1;
 80062f8:	4b4a      	ldr	r3, [pc, #296]	; (8006424 <W25qxx_WritePage+0x14c>)
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ( ((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || !NumByteToWrite_up_to_PageSize )
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4413      	add	r3, r2
 8006306:	4a47      	ldr	r2, [pc, #284]	; (8006424 <W25qxx_WritePage+0x14c>)
 8006308:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800630c:	b292      	uxth	r2, r2
 800630e:	4293      	cmp	r3, r2
 8006310:	d802      	bhi.n	8006318 <W25qxx_WritePage+0x40>
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d107      	bne.n	8006328 <W25qxx_WritePage+0x50>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8006318:	4b42      	ldr	r3, [pc, #264]	; (8006424 <W25qxx_WritePage+0x14c>)
 800631a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800631e:	b29b      	uxth	r3, r3
 8006320:	461a      	mov	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	603b      	str	r3, [r7, #0]
    if ( (OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize )
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	4413      	add	r3, r2
 800632e:	4a3d      	ldr	r2, [pc, #244]	; (8006424 <W25qxx_WritePage+0x14c>)
 8006330:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8006334:	b292      	uxth	r2, r2
 8006336:	4293      	cmp	r3, r2
 8006338:	d907      	bls.n	800634a <W25qxx_WritePage+0x72>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800633a:	4b3a      	ldr	r3, [pc, #232]	; (8006424 <W25qxx_WritePage+0x14c>)
 800633c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006340:	b29b      	uxth	r3, r3
 8006342:	461a      	mov	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	603b      	str	r3, [r7, #0]
    Report(1, "%s WritePage:0x%X(%u), Offset:%u ,Writes %u Bytes, begin...\r\n",
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
    uint32_t StartTime = HAL_GetTick();
#endif

    W25qxx_WaitForWriteEnd();
 800634a:	f7ff fd8d 	bl	8005e68 <W25qxx_WaitForWriteEnd>
    W25qxx_WriteEnable();
 800634e:	f7ff fd3f 	bl	8005dd0 <W25qxx_WriteEnable>

    Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8006352:	4b34      	ldr	r3, [pc, #208]	; (8006424 <W25qxx_WritePage+0x14c>)
 8006354:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006358:	b29b      	uxth	r3, r3
 800635a:	461a      	mov	r2, r3
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	fb02 f303 	mul.w	r3, r2, r3
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	4413      	add	r3, r2
 8006366:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi((Page_Address & 0xFF00) >> 8);
    W25qxx_Spi(Page_Address&0xFF);
    HAL_SPI_Transmit(portFLASH, pBuffer, NumByteToWrite_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();*/

    uint16_t lens = NumByteToWrite_up_to_PageSize + PAGE_HDR_BYTES;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	b29b      	uxth	r3, r3
 800636c:	3304      	adds	r3, #4
 800636e:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 8006370:	2300      	movs	r3, #0
 8006372:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = PAGE_PROG;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	613a      	str	r2, [r7, #16]
 800637a:	4a2b      	ldr	r2, [pc, #172]	; (8006428 <W25qxx_WritePage+0x150>)
 800637c:	2102      	movs	r1, #2
 800637e:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	0c19      	lsrs	r1, r3, #16
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	613a      	str	r2, [r7, #16]
 800638a:	b2c9      	uxtb	r1, r1
 800638c:	4a26      	ldr	r2, [pc, #152]	; (8006428 <W25qxx_WritePage+0x150>)
 800638e:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	0a19      	lsrs	r1, r3, #8
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	613a      	str	r2, [r7, #16]
 800639a:	b2c9      	uxtb	r1, r1
 800639c:	4a22      	ldr	r2, [pc, #136]	; (8006428 <W25qxx_WritePage+0x150>)
 800639e:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	613a      	str	r2, [r7, #16]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	b2d1      	uxtb	r1, r2
 80063aa:	4a1f      	ldr	r2, [pc, #124]	; (8006428 <W25qxx_WritePage+0x150>)
 80063ac:	54d1      	strb	r1, [r2, r3]
    memcpy(&pageTmp[PAGE_HDR_BYTES], pBuffer, NumByteToWrite_up_to_PageSize);//w25qxx.PageSize);
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	68f9      	ldr	r1, [r7, #12]
 80063b2:	481e      	ldr	r0, [pc, #120]	; (800642c <W25qxx_WritePage+0x154>)
 80063b4:	f00b fb80 	bl	8011ab8 <memcpy>

    spiRdy = 0;
 80063b8:	4b1d      	ldr	r3, [pc, #116]	; (8006430 <W25qxx_WritePage+0x158>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 80063be:	4b1d      	ldr	r3, [pc, #116]	; (8006434 <W25qxx_WritePage+0x15c>)
 80063c0:	2201      	movs	r2, #1
 80063c2:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 80063c4:	f7ff fc72 	bl	8005cac <W25_SELECT>
    if (w25_withDMA) {
 80063c8:	4b1a      	ldr	r3, [pc, #104]	; (8006434 <W25qxx_WritePage+0x15c>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d012      	beq.n	80063f6 <W25qxx_WritePage+0x11e>
    	HAL_SPI_Transmit_DMA(portFLASH, pageTmp, lens);
 80063d0:	4b19      	ldr	r3, [pc, #100]	; (8006438 <W25qxx_WritePage+0x160>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	8afa      	ldrh	r2, [r7, #22]
 80063d6:	4914      	ldr	r1, [pc, #80]	; (8006428 <W25qxx_WritePage+0x150>)
 80063d8:	4618      	mov	r0, r3
 80063da:	f005 f861 	bl	800b4a0 <HAL_SPI_Transmit_DMA>
    	while (!spiRdy) {
 80063de:	e002      	b.n	80063e6 <W25qxx_WritePage+0x10e>
    		W25qxx_Delay(1);
 80063e0:	2001      	movs	r0, #1
 80063e2:	f000 fa5d 	bl	80068a0 <HAL_Delay>
    	while (!spiRdy) {
 80063e6:	4b12      	ldr	r3, [pc, #72]	; (8006430 <W25qxx_WritePage+0x158>)
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0f8      	beq.n	80063e0 <W25qxx_WritePage+0x108>
    	}
w25_withDMA = 0;
 80063ee:	4b11      	ldr	r3, [pc, #68]	; (8006434 <W25qxx_WritePage+0x15c>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
 80063f4:	e00d      	b.n	8006412 <W25qxx_WritePage+0x13a>
    } else {
    	HAL_SPI_Transmit(portFLASH, pageTmp, lens, min_wait_ms);
 80063f6:	4b10      	ldr	r3, [pc, #64]	; (8006438 <W25qxx_WritePage+0x160>)
 80063f8:	6818      	ldr	r0, [r3, #0]
 80063fa:	23fa      	movs	r3, #250	; 0xfa
 80063fc:	8afa      	ldrh	r2, [r7, #22]
 80063fe:	490a      	ldr	r1, [pc, #40]	; (8006428 <W25qxx_WritePage+0x150>)
 8006400:	f004 fb9d 	bl	800ab3e <HAL_SPI_Transmit>

    	W25_UNSELECT();
 8006404:	f7ff fc5e 	bl	8005cc4 <W25_UNSELECT>

    	W25qxx_WaitForWriteEnd();
 8006408:	f7ff fd2e 	bl	8005e68 <W25qxx_WaitForWriteEnd>

    	spiRdy = 1;
 800640c:	4b08      	ldr	r3, [pc, #32]	; (8006430 <W25qxx_WritePage+0x158>)
 800640e:	2201      	movs	r2, #1
 8006410:	701a      	strb	r2, [r3, #0]
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif
    }

    w25qxx.Lock = 0;
 8006412:	4b04      	ldr	r3, [pc, #16]	; (8006424 <W25qxx_WritePage+0x14c>)
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800641a:	bf00      	nop
 800641c:	3718      	adds	r7, #24
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	20004004 	.word	0x20004004
 8006428:	2000402c 	.word	0x2000402c
 800642c:	20004030 	.word	0x20004030
 8006430:	200001a8 	.word	0x200001a8
 8006434:	20004131 	.word	0x20004131
 8006438:	2000000c 	.word	0x2000000c

0800643c <W25qxx_WriteSector>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b088      	sub	sp, #32
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	603b      	str	r3, [r7, #0]
    if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToWrite_up_to_SectorSize)
 800644a:	4b31      	ldr	r3, [pc, #196]	; (8006510 <W25qxx_WriteSector+0xd4>)
 800644c:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d802      	bhi.n	800645c <W25qxx_WriteSector+0x20>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d103      	bne.n	8006464 <W25qxx_WriteSector+0x28>
                NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 800645c:	4b2c      	ldr	r3, [pc, #176]	; (8006510 <W25qxx_WriteSector+0xd4>)
 800645e:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006462:	603b      	str	r3, [r7, #0]
    Report(1, "%s WriteSector:0x%X(%u), Offset:%u ,Write %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 8006464:	4b2a      	ldr	r3, [pc, #168]	; (8006510 <W25qxx_WriteSector+0xd4>)
 8006466:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	429a      	cmp	r2, r3
 800646e:	d24b      	bcs.n	8006508 <W25qxx_WriteSector+0xcc>
        return;
    }

    int32_t BytesToWrite;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	441a      	add	r2, r3
 8006476:	4b26      	ldr	r3, [pc, #152]	; (8006510 <W25qxx_WriteSector+0xd4>)
 8006478:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800647c:	429a      	cmp	r2, r3
 800647e:	d906      	bls.n	800648e <W25qxx_WriteSector+0x52>
        BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8006480:	4b23      	ldr	r3, [pc, #140]	; (8006510 <W25qxx_WriteSector+0xd4>)
 8006482:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	61fb      	str	r3, [r7, #28]
 800648c:	e001      	b.n	8006492 <W25qxx_WriteSector+0x56>
    else
        BytesToWrite = NumByteToWrite_up_to_SectorSize;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8006492:	68b8      	ldr	r0, [r7, #8]
 8006494:	f7ff fe46 	bl	8006124 <W25qxx_SectorToPage>
 8006498:	4602      	mov	r2, r0
 800649a:	4b1d      	ldr	r3, [pc, #116]	; (8006510 <W25qxx_WriteSector+0xd4>)
 800649c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	4619      	mov	r1, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80064aa:	4413      	add	r3, r2
 80064ac:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 80064ae:	4b18      	ldr	r3, [pc, #96]	; (8006510 <W25qxx_WriteSector+0xd4>)
 80064b0:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	461a      	mov	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80064be:	fb01 f202 	mul.w	r2, r1, r2
 80064c2:	1a9b      	subs	r3, r3, r2
 80064c4:	61bb      	str	r3, [r7, #24]

    do
    {
        W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	6979      	ldr	r1, [r7, #20]
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f7ff ff03 	bl	80062d8 <W25qxx_WritePage>
        StartPage++;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	3301      	adds	r3, #1
 80064d6:	617b      	str	r3, [r7, #20]
        BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80064d8:	4b0d      	ldr	r3, [pc, #52]	; (8006510 <W25qxx_WriteSector+0xd4>)
 80064da:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80064de:	b29b      	uxth	r3, r3
 80064e0:	461a      	mov	r2, r3
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	1a9a      	subs	r2, r3, r2
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	4413      	add	r3, r2
 80064ea:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 80064ec:	4b08      	ldr	r3, [pc, #32]	; (8006510 <W25qxx_WriteSector+0xd4>)
 80064ee:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	461a      	mov	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4413      	add	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 80064fc:	2300      	movs	r3, #0
 80064fe:	61bb      	str	r3, [r7, #24]
    } while(BytesToWrite > 0);
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	2b00      	cmp	r3, #0
 8006504:	dcdf      	bgt.n	80064c6 <W25qxx_WriteSector+0x8a>
 8006506:	e000      	b.n	800650a <W25qxx_WriteSector+0xce>
        return;
 8006508:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s Done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 800650a:	3720      	adds	r7, #32
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20004004 	.word	0x20004004

08006514 <W25qxx_ReadPage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b088      	sub	sp, #32
 8006518:	af02      	add	r7, sp, #8
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8006522:	e002      	b.n	800652a <W25qxx_ReadPage+0x16>
 8006524:	2001      	movs	r0, #1
 8006526:	f000 f9bb 	bl	80068a0 <HAL_Delay>
 800652a:	4b51      	ldr	r3, [pc, #324]	; (8006670 <W25qxx_ReadPage+0x15c>)
 800652c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1f7      	bne.n	8006524 <W25qxx_ReadPage+0x10>

    w25qxx.Lock = 1;
 8006534:	4b4e      	ldr	r3, [pc, #312]	; (8006670 <W25qxx_ReadPage+0x15c>)
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || !NumByteToRead_up_to_PageSize)
 800653c:	4b4c      	ldr	r3, [pc, #304]	; (8006670 <W25qxx_ReadPage+0x15c>)
 800653e:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006542:	b29b      	uxth	r3, r3
 8006544:	461a      	mov	r2, r3
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	4293      	cmp	r3, r2
 800654a:	d802      	bhi.n	8006552 <W25qxx_ReadPage+0x3e>
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d104      	bne.n	800655c <W25qxx_ReadPage+0x48>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8006552:	4b47      	ldr	r3, [pc, #284]	; (8006670 <W25qxx_ReadPage+0x15c>)
 8006554:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006558:	b29b      	uxth	r3, r3
 800655a:	603b      	str	r3, [r7, #0]
    if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	4413      	add	r3, r2
 8006562:	4a43      	ldr	r2, [pc, #268]	; (8006670 <W25qxx_ReadPage+0x15c>)
 8006564:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8006568:	b292      	uxth	r2, r2
 800656a:	4293      	cmp	r3, r2
 800656c:	d907      	bls.n	800657e <W25qxx_ReadPage+0x6a>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800656e:	4b40      	ldr	r3, [pc, #256]	; (8006670 <W25qxx_ReadPage+0x15c>)
 8006570:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006574:	b29b      	uxth	r3, r3
 8006576:	461a      	mov	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	603b      	str	r3, [r7, #0]
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
    //W25qxx_Delay(100);
    uint32_t StartTime = HAL_GetTick();
#endif

    Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800657e:	4b3c      	ldr	r3, [pc, #240]	; (8006670 <W25qxx_ReadPage+0x15c>)
 8006580:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006584:	b29b      	uxth	r3, r3
 8006586:	461a      	mov	r2, r3
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	fb02 f303 	mul.w	r3, r2, r3
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	4413      	add	r3, r2
 8006592:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi(Page_Address & 0xFF);
    //W25qxx_Spi(0);
    HAL_SPI_Receive(portFLASH, pBuffer, NumByteToRead_up_to_PageSize, min_wait_ms);
    W25_UNSELECT();
    */
    memset(pageTmp, 0, sizeof(pageTmp));
 8006594:	f240 1205 	movw	r2, #261	; 0x105
 8006598:	2100      	movs	r1, #0
 800659a:	4836      	ldr	r0, [pc, #216]	; (8006674 <W25qxx_ReadPage+0x160>)
 800659c:	f00b fa9a 	bl	8011ad4 <memset>
    uint16_t lens = NumByteToRead_up_to_PageSize + PAGE_HDR_BYTES;// + 1;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	3304      	adds	r3, #4
 80065a6:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 80065a8:	2300      	movs	r3, #0
 80065aa:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = DATA_READ;//FAST_READ;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	1c5a      	adds	r2, r3, #1
 80065b0:	613a      	str	r2, [r7, #16]
 80065b2:	4a30      	ldr	r2, [pc, #192]	; (8006674 <W25qxx_ReadPage+0x160>)
 80065b4:	2103      	movs	r1, #3
 80065b6:	54d1      	strb	r1, [r2, r3]
    //if (w25qxx.ID >= W25Q256) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	0c19      	lsrs	r1, r3, #16
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	613a      	str	r2, [r7, #16]
 80065c2:	b2c9      	uxtb	r1, r1
 80065c4:	4a2b      	ldr	r2, [pc, #172]	; (8006674 <W25qxx_ReadPage+0x160>)
 80065c6:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	0a19      	lsrs	r1, r3, #8
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	1c5a      	adds	r2, r3, #1
 80065d0:	613a      	str	r2, [r7, #16]
 80065d2:	b2c9      	uxtb	r1, r1
 80065d4:	4a27      	ldr	r2, [pc, #156]	; (8006674 <W25qxx_ReadPage+0x160>)
 80065d6:	54d1      	strb	r1, [r2, r3]
    pageTmp[idx++] = Page_Address & 0xFF;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	613a      	str	r2, [r7, #16]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	b2d1      	uxtb	r1, r2
 80065e2:	4a24      	ldr	r2, [pc, #144]	; (8006674 <W25qxx_ReadPage+0x160>)
 80065e4:	54d1      	strb	r1, [r2, r3]
    //pageTmp[idx++] = 0;
    spiRdy = 0;
 80065e6:	4b24      	ldr	r3, [pc, #144]	; (8006678 <W25qxx_ReadPage+0x164>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	701a      	strb	r2, [r3, #0]

w25_withDMA = 1;
 80065ec:	4b23      	ldr	r3, [pc, #140]	; (800667c <W25qxx_ReadPage+0x168>)
 80065ee:	2201      	movs	r2, #1
 80065f0:	701a      	strb	r2, [r3, #0]
    W25_SELECT();
 80065f2:	f7ff fb5b 	bl	8005cac <W25_SELECT>
    if (w25_withDMA) {
 80065f6:	4b21      	ldr	r3, [pc, #132]	; (800667c <W25qxx_ReadPage+0x168>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d012      	beq.n	8006624 <W25qxx_ReadPage+0x110>
    	HAL_SPI_TransmitReceive_DMA(portFLASH, pageTmp, pageTmp, lens);
 80065fe:	4b20      	ldr	r3, [pc, #128]	; (8006680 <W25qxx_ReadPage+0x16c>)
 8006600:	6818      	ldr	r0, [r3, #0]
 8006602:	8afb      	ldrh	r3, [r7, #22]
 8006604:	4a1b      	ldr	r2, [pc, #108]	; (8006674 <W25qxx_ReadPage+0x160>)
 8006606:	491b      	ldr	r1, [pc, #108]	; (8006674 <W25qxx_ReadPage+0x160>)
 8006608:	f005 f83e 	bl	800b688 <HAL_SPI_TransmitReceive_DMA>
    	while (!spiRdy) {
 800660c:	e002      	b.n	8006614 <W25qxx_ReadPage+0x100>
    		W25qxx_Delay(1);
 800660e:	2001      	movs	r0, #1
 8006610:	f000 f946 	bl	80068a0 <HAL_Delay>
    	while (!spiRdy) {
 8006614:	4b18      	ldr	r3, [pc, #96]	; (8006678 <W25qxx_ReadPage+0x164>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d0f8      	beq.n	800660e <W25qxx_ReadPage+0xfa>
    	}
w25_withDMA = 0;
 800661c:	4b17      	ldr	r3, [pc, #92]	; (800667c <W25qxx_ReadPage+0x168>)
 800661e:	2200      	movs	r2, #0
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	e017      	b.n	8006654 <W25qxx_ReadPage+0x140>
    } else {
    	if (HAL_SPI_TransmitReceive(portFLASH, pageTmp, pageTmp, lens, min_wait_ms) != HAL_OK) devError |= devSPI;
 8006624:	4b16      	ldr	r3, [pc, #88]	; (8006680 <W25qxx_ReadPage+0x16c>)
 8006626:	6818      	ldr	r0, [r3, #0]
 8006628:	22fa      	movs	r2, #250	; 0xfa
 800662a:	8afb      	ldrh	r3, [r7, #22]
 800662c:	9200      	str	r2, [sp, #0]
 800662e:	4a11      	ldr	r2, [pc, #68]	; (8006674 <W25qxx_ReadPage+0x160>)
 8006630:	4910      	ldr	r1, [pc, #64]	; (8006674 <W25qxx_ReadPage+0x160>)
 8006632:	f004 fd22 	bl	800b07a <HAL_SPI_TransmitReceive>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d006      	beq.n	800664a <W25qxx_ReadPage+0x136>
 800663c:	4b11      	ldr	r3, [pc, #68]	; (8006684 <W25qxx_ReadPage+0x170>)
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006644:	b29a      	uxth	r2, r3
 8006646:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <W25qxx_ReadPage+0x170>)
 8006648:	801a      	strh	r2, [r3, #0]
    	W25_UNSELECT();
 800664a:	f7ff fb3b 	bl	8005cc4 <W25_UNSELECT>

    	spiRdy = 1;
 800664e:	4b0a      	ldr	r3, [pc, #40]	; (8006678 <W25qxx_ReadPage+0x164>)
 8006650:	2201      	movs	r2, #1
 8006652:	701a      	strb	r2, [r3, #0]
    }
	memcpy(pBuffer, &pageTmp[PAGE_HDR_BYTES], NumByteToRead_up_to_PageSize);//w25qxx.PageSize);
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	490c      	ldr	r1, [pc, #48]	; (8006688 <W25qxx_ReadPage+0x174>)
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f00b fa2d 	bl	8011ab8 <memcpy>
    	Report(0, "\r\n");
    	Report(1, "%s done after %u ms\r\n", __func__, StartTime);
#endif


    w25qxx.Lock = 0;
 800665e:	4b04      	ldr	r3, [pc, #16]	; (8006670 <W25qxx_ReadPage+0x15c>)
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8006666:	bf00      	nop
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	20004004 	.word	0x20004004
 8006674:	2000402c 	.word	0x2000402c
 8006678:	200001a8 	.word	0x200001a8
 800667c:	20004131 	.word	0x20004131
 8006680:	2000000c 	.word	0x2000000c
 8006684:	20001468 	.word	0x20001468
 8006688:	20004030 	.word	0x20004030

0800668c <W25qxx_ReadSector>:
//------------------------------------------------------------------------------------------
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
 8006698:	603b      	str	r3, [r7, #0]
    if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || !NumByteToRead_up_to_SectorSize)
 800669a:	4b31      	ldr	r3, [pc, #196]	; (8006760 <W25qxx_ReadSector+0xd4>)
 800669c:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d802      	bhi.n	80066ac <W25qxx_ReadSector+0x20>
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d103      	bne.n	80066b4 <W25qxx_ReadSector+0x28>
                NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80066ac:	4b2c      	ldr	r3, [pc, #176]	; (8006760 <W25qxx_ReadSector+0xd4>)
 80066ae:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80066b2:	603b      	str	r3, [r7, #0]
    Report(1, "%s:0x%X(%u), Offset:%u ,Read %u Bytes, begin...\r\n",
                 __func__, Sector_Address, Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
    //W25qxx_Delay(100);
#endif

    if (OffsetInByte >= w25qxx.SectorSize) {
 80066b4:	4b2a      	ldr	r3, [pc, #168]	; (8006760 <W25qxx_ReadSector+0xd4>)
 80066b6:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d24b      	bcs.n	8006758 <W25qxx_ReadSector+0xcc>
        return;
    }

    int32_t BytesToRead;
    uint32_t LocalOffset, StartPage;
    if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	441a      	add	r2, r3
 80066c6:	4b26      	ldr	r3, [pc, #152]	; (8006760 <W25qxx_ReadSector+0xd4>)
 80066c8:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d906      	bls.n	80066de <W25qxx_ReadSector+0x52>
        BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80066d0:	4b23      	ldr	r3, [pc, #140]	; (8006760 <W25qxx_ReadSector+0xd4>)
 80066d2:	f8d3 200f 	ldr.w	r2, [r3, #15]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	61fb      	str	r3, [r7, #28]
 80066dc:	e001      	b.n	80066e2 <W25qxx_ReadSector+0x56>
    else
        BytesToRead = NumByteToRead_up_to_SectorSize;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	61fb      	str	r3, [r7, #28]
    StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80066e2:	68b8      	ldr	r0, [r7, #8]
 80066e4:	f7ff fd1e 	bl	8006124 <W25qxx_SectorToPage>
 80066e8:	4602      	mov	r2, r0
 80066ea:	4b1d      	ldr	r3, [pc, #116]	; (8006760 <W25qxx_ReadSector+0xd4>)
 80066ec:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	4619      	mov	r1, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80066fa:	4413      	add	r3, r2
 80066fc:	617b      	str	r3, [r7, #20]
    LocalOffset = OffsetInByte % w25qxx.PageSize;
 80066fe:	4b18      	ldr	r3, [pc, #96]	; (8006760 <W25qxx_ReadSector+0xd4>)
 8006700:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006704:	b29b      	uxth	r3, r3
 8006706:	461a      	mov	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	fbb3 f1f2 	udiv	r1, r3, r2
 800670e:	fb01 f202 	mul.w	r2, r1, r2
 8006712:	1a9b      	subs	r3, r3, r2
 8006714:	61bb      	str	r3, [r7, #24]
    do {
        W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	6979      	ldr	r1, [r7, #20]
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f7ff fef9 	bl	8006514 <W25qxx_ReadPage>
        StartPage++;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	3301      	adds	r3, #1
 8006726:	617b      	str	r3, [r7, #20]
        BytesToRead -= w25qxx.PageSize - LocalOffset;
 8006728:	4b0d      	ldr	r3, [pc, #52]	; (8006760 <W25qxx_ReadSector+0xd4>)
 800672a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800672e:	b29b      	uxth	r3, r3
 8006730:	461a      	mov	r2, r3
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	1a9a      	subs	r2, r3, r2
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	4413      	add	r3, r2
 800673a:	61fb      	str	r3, [r7, #28]
        pBuffer += w25qxx.PageSize;
 800673c:	4b08      	ldr	r3, [pc, #32]	; (8006760 <W25qxx_ReadSector+0xd4>)
 800673e:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006742:	b29b      	uxth	r3, r3
 8006744:	461a      	mov	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4413      	add	r3, r2
 800674a:	60fb      	str	r3, [r7, #12]
        LocalOffset = 0;
 800674c:	2300      	movs	r3, #0
 800674e:	61bb      	str	r3, [r7, #24]
    } while(BytesToRead > 0);
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	2b00      	cmp	r3, #0
 8006754:	dcdf      	bgt.n	8006716 <W25qxx_ReadSector+0x8a>
 8006756:	e000      	b.n	800675a <W25qxx_ReadSector+0xce>
        return;
 8006758:	bf00      	nop
#ifdef W25QXX_DEBUG
    Report(1, "%s done\r\n", __func__);
    //W25qxx_Delay(100);
#endif

}
 800675a:	3720      	adds	r7, #32
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	20004004 	.word	0x20004004

08006764 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006764:	f8df d034 	ldr.w	sp, [pc, #52]	; 800679c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006768:	f7ff fa8e 	bl	8005c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800676c:	480c      	ldr	r0, [pc, #48]	; (80067a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800676e:	490d      	ldr	r1, [pc, #52]	; (80067a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006770:	4a0d      	ldr	r2, [pc, #52]	; (80067a8 <LoopForever+0xe>)
  movs r3, #0
 8006772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006774:	e002      	b.n	800677c <LoopCopyDataInit>

08006776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800677a:	3304      	adds	r3, #4

0800677c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800677c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800677e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006780:	d3f9      	bcc.n	8006776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006782:	4a0a      	ldr	r2, [pc, #40]	; (80067ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8006784:	4c0a      	ldr	r4, [pc, #40]	; (80067b0 <LoopForever+0x16>)
  movs r3, #0
 8006786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006788:	e001      	b.n	800678e <LoopFillZerobss>

0800678a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800678a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800678c:	3204      	adds	r2, #4

0800678e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800678e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006790:	d3fb      	bcc.n	800678a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006792:	f00b f96d 	bl	8011a70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006796:	f7fb fda9 	bl	80022ec <main>

0800679a <LoopForever>:

LoopForever:
    b LoopForever
 800679a:	e7fe      	b.n	800679a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800679c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80067a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80067a4:	20000408 	.word	0x20000408
  ldr r2, =_sidata
 80067a8:	08017dbc 	.word	0x08017dbc
  ldr r2, =_sbss
 80067ac:	20000408 	.word	0x20000408
  ldr r4, =_ebss
 80067b0:	20004184 	.word	0x20004184

080067b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80067b4:	e7fe      	b.n	80067b4 <ADC1_2_IRQHandler>

080067b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b082      	sub	sp, #8
 80067ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80067c0:	2003      	movs	r0, #3
 80067c2:	f000 f985 	bl	8006ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80067c6:	200f      	movs	r0, #15
 80067c8:	f000 f80e 	bl	80067e8 <HAL_InitTick>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	71fb      	strb	r3, [r7, #7]
 80067d6:	e001      	b.n	80067dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80067d8:	f7fe fdf0 	bl	80053bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80067dc:	79fb      	ldrb	r3, [r7, #7]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80067f4:	4b17      	ldr	r3, [pc, #92]	; (8006854 <HAL_InitTick+0x6c>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d023      	beq.n	8006844 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80067fc:	4b16      	ldr	r3, [pc, #88]	; (8006858 <HAL_InitTick+0x70>)
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	4b14      	ldr	r3, [pc, #80]	; (8006854 <HAL_InitTick+0x6c>)
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	4619      	mov	r1, r3
 8006806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800680a:	fbb3 f3f1 	udiv	r3, r3, r1
 800680e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006812:	4618      	mov	r0, r3
 8006814:	f000 f99f 	bl	8006b56 <HAL_SYSTICK_Config>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10f      	bne.n	800683e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2b0f      	cmp	r3, #15
 8006822:	d809      	bhi.n	8006838 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006824:	2200      	movs	r2, #0
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800682c:	f000 f95b 	bl	8006ae6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006830:	4a0a      	ldr	r2, [pc, #40]	; (800685c <HAL_InitTick+0x74>)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	e007      	b.n	8006848 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	73fb      	strb	r3, [r7, #15]
 800683c:	e004      	b.n	8006848 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	73fb      	strb	r3, [r7, #15]
 8006842:	e001      	b.n	8006848 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006848:	7bfb      	ldrb	r3, [r7, #15]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	2000021c 	.word	0x2000021c
 8006858:	200001e8 	.word	0x200001e8
 800685c:	20000218 	.word	0x20000218

08006860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006860:	b480      	push	{r7}
 8006862:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006864:	4b06      	ldr	r3, [pc, #24]	; (8006880 <HAL_IncTick+0x20>)
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	461a      	mov	r2, r3
 800686a:	4b06      	ldr	r3, [pc, #24]	; (8006884 <HAL_IncTick+0x24>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4413      	add	r3, r2
 8006870:	4a04      	ldr	r2, [pc, #16]	; (8006884 <HAL_IncTick+0x24>)
 8006872:	6013      	str	r3, [r2, #0]
}
 8006874:	bf00      	nop
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	2000021c 	.word	0x2000021c
 8006884:	20004134 	.word	0x20004134

08006888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006888:	b480      	push	{r7}
 800688a:	af00      	add	r7, sp, #0
  return uwTick;
 800688c:	4b03      	ldr	r3, [pc, #12]	; (800689c <HAL_GetTick+0x14>)
 800688e:	681b      	ldr	r3, [r3, #0]
}
 8006890:	4618      	mov	r0, r3
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	20004134 	.word	0x20004134

080068a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80068a8:	f7ff ffee 	bl	8006888 <HAL_GetTick>
 80068ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068b8:	d005      	beq.n	80068c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80068ba:	4b0a      	ldr	r3, [pc, #40]	; (80068e4 <HAL_Delay+0x44>)
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	4413      	add	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80068c6:	bf00      	nop
 80068c8:	f7ff ffde 	bl	8006888 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d8f7      	bhi.n	80068c8 <HAL_Delay+0x28>
  {
  }
}
 80068d8:	bf00      	nop
 80068da:	bf00      	nop
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	2000021c 	.word	0x2000021c

080068e8 <__NVIC_SetPriorityGrouping>:
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f003 0307 	and.w	r3, r3, #7
 80068f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068f8:	4b0c      	ldr	r3, [pc, #48]	; (800692c <__NVIC_SetPriorityGrouping+0x44>)
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006904:	4013      	ands	r3, r2
 8006906:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800691a:	4a04      	ldr	r2, [pc, #16]	; (800692c <__NVIC_SetPriorityGrouping+0x44>)
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	60d3      	str	r3, [r2, #12]
}
 8006920:	bf00      	nop
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	e000ed00 	.word	0xe000ed00

08006930 <__NVIC_GetPriorityGrouping>:
{
 8006930:	b480      	push	{r7}
 8006932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006934:	4b04      	ldr	r3, [pc, #16]	; (8006948 <__NVIC_GetPriorityGrouping+0x18>)
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	0a1b      	lsrs	r3, r3, #8
 800693a:	f003 0307 	and.w	r3, r3, #7
}
 800693e:	4618      	mov	r0, r3
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr
 8006948:	e000ed00 	.word	0xe000ed00

0800694c <__NVIC_EnableIRQ>:
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	4603      	mov	r3, r0
 8006954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800695a:	2b00      	cmp	r3, #0
 800695c:	db0b      	blt.n	8006976 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800695e:	79fb      	ldrb	r3, [r7, #7]
 8006960:	f003 021f 	and.w	r2, r3, #31
 8006964:	4907      	ldr	r1, [pc, #28]	; (8006984 <__NVIC_EnableIRQ+0x38>)
 8006966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800696a:	095b      	lsrs	r3, r3, #5
 800696c:	2001      	movs	r0, #1
 800696e:	fa00 f202 	lsl.w	r2, r0, r2
 8006972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	e000e100 	.word	0xe000e100

08006988 <__NVIC_DisableIRQ>:
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	4603      	mov	r3, r0
 8006990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006996:	2b00      	cmp	r3, #0
 8006998:	db12      	blt.n	80069c0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800699a:	79fb      	ldrb	r3, [r7, #7]
 800699c:	f003 021f 	and.w	r2, r3, #31
 80069a0:	490a      	ldr	r1, [pc, #40]	; (80069cc <__NVIC_DisableIRQ+0x44>)
 80069a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069a6:	095b      	lsrs	r3, r3, #5
 80069a8:	2001      	movs	r0, #1
 80069aa:	fa00 f202 	lsl.w	r2, r0, r2
 80069ae:	3320      	adds	r3, #32
 80069b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80069b4:	f3bf 8f4f 	dsb	sy
}
 80069b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80069ba:	f3bf 8f6f 	isb	sy
}
 80069be:	bf00      	nop
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	e000e100 	.word	0xe000e100

080069d0 <__NVIC_SetPriority>:
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	4603      	mov	r3, r0
 80069d8:	6039      	str	r1, [r7, #0]
 80069da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	db0a      	blt.n	80069fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	490c      	ldr	r1, [pc, #48]	; (8006a1c <__NVIC_SetPriority+0x4c>)
 80069ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ee:	0112      	lsls	r2, r2, #4
 80069f0:	b2d2      	uxtb	r2, r2
 80069f2:	440b      	add	r3, r1
 80069f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80069f8:	e00a      	b.n	8006a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	4908      	ldr	r1, [pc, #32]	; (8006a20 <__NVIC_SetPriority+0x50>)
 8006a00:	79fb      	ldrb	r3, [r7, #7]
 8006a02:	f003 030f 	and.w	r3, r3, #15
 8006a06:	3b04      	subs	r3, #4
 8006a08:	0112      	lsls	r2, r2, #4
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	440b      	add	r3, r1
 8006a0e:	761a      	strb	r2, [r3, #24]
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	e000e100 	.word	0xe000e100
 8006a20:	e000ed00 	.word	0xe000ed00

08006a24 <NVIC_EncodePriority>:
{
 8006a24:	b480      	push	{r7}
 8006a26:	b089      	sub	sp, #36	; 0x24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f003 0307 	and.w	r3, r3, #7
 8006a36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	f1c3 0307 	rsb	r3, r3, #7
 8006a3e:	2b04      	cmp	r3, #4
 8006a40:	bf28      	it	cs
 8006a42:	2304      	movcs	r3, #4
 8006a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	3304      	adds	r3, #4
 8006a4a:	2b06      	cmp	r3, #6
 8006a4c:	d902      	bls.n	8006a54 <NVIC_EncodePriority+0x30>
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	3b03      	subs	r3, #3
 8006a52:	e000      	b.n	8006a56 <NVIC_EncodePriority+0x32>
 8006a54:	2300      	movs	r3, #0
 8006a56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a62:	43da      	mvns	r2, r3
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	401a      	ands	r2, r3
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	fa01 f303 	lsl.w	r3, r1, r3
 8006a76:	43d9      	mvns	r1, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a7c:	4313      	orrs	r3, r2
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3724      	adds	r7, #36	; 0x24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
	...

08006a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	3b01      	subs	r3, #1
 8006a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a9c:	d301      	bcc.n	8006aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e00f      	b.n	8006ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006aa2:	4a0a      	ldr	r2, [pc, #40]	; (8006acc <SysTick_Config+0x40>)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006aaa:	210f      	movs	r1, #15
 8006aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ab0:	f7ff ff8e 	bl	80069d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ab4:	4b05      	ldr	r3, [pc, #20]	; (8006acc <SysTick_Config+0x40>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006aba:	4b04      	ldr	r3, [pc, #16]	; (8006acc <SysTick_Config+0x40>)
 8006abc:	2207      	movs	r2, #7
 8006abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	e000e010 	.word	0xe000e010

08006ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f7ff ff05 	bl	80068e8 <__NVIC_SetPriorityGrouping>
}
 8006ade:	bf00      	nop
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b086      	sub	sp, #24
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	4603      	mov	r3, r0
 8006aee:	60b9      	str	r1, [r7, #8]
 8006af0:	607a      	str	r2, [r7, #4]
 8006af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006af4:	2300      	movs	r3, #0
 8006af6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006af8:	f7ff ff1a 	bl	8006930 <__NVIC_GetPriorityGrouping>
 8006afc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	68b9      	ldr	r1, [r7, #8]
 8006b02:	6978      	ldr	r0, [r7, #20]
 8006b04:	f7ff ff8e 	bl	8006a24 <NVIC_EncodePriority>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b0e:	4611      	mov	r1, r2
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7ff ff5d 	bl	80069d0 <__NVIC_SetPriority>
}
 8006b16:	bf00      	nop
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b082      	sub	sp, #8
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	4603      	mov	r3, r0
 8006b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7ff ff0d 	bl	800694c <__NVIC_EnableIRQ>
}
 8006b32:	bf00      	nop
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b082      	sub	sp, #8
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	4603      	mov	r3, r0
 8006b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7ff ff1d 	bl	8006988 <__NVIC_DisableIRQ>
}
 8006b4e:	bf00      	nop
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b082      	sub	sp, #8
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff ff94 	bl	8006a8c <SysTick_Config>
 8006b64:	4603      	mov	r3, r0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
	...

08006b70 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e098      	b.n	8006cb4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	461a      	mov	r2, r3
 8006b88:	4b4d      	ldr	r3, [pc, #308]	; (8006cc0 <HAL_DMA_Init+0x150>)
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d80f      	bhi.n	8006bae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	4b4b      	ldr	r3, [pc, #300]	; (8006cc4 <HAL_DMA_Init+0x154>)
 8006b96:	4413      	add	r3, r2
 8006b98:	4a4b      	ldr	r2, [pc, #300]	; (8006cc8 <HAL_DMA_Init+0x158>)
 8006b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b9e:	091b      	lsrs	r3, r3, #4
 8006ba0:	009a      	lsls	r2, r3, #2
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a48      	ldr	r2, [pc, #288]	; (8006ccc <HAL_DMA_Init+0x15c>)
 8006baa:	641a      	str	r2, [r3, #64]	; 0x40
 8006bac:	e00e      	b.n	8006bcc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	4b46      	ldr	r3, [pc, #280]	; (8006cd0 <HAL_DMA_Init+0x160>)
 8006bb6:	4413      	add	r3, r2
 8006bb8:	4a43      	ldr	r2, [pc, #268]	; (8006cc8 <HAL_DMA_Init+0x158>)
 8006bba:	fba2 2303 	umull	r2, r3, r2, r3
 8006bbe:	091b      	lsrs	r3, r3, #4
 8006bc0:	009a      	lsls	r2, r3, #2
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a42      	ldr	r2, [pc, #264]	; (8006cd4 <HAL_DMA_Init+0x164>)
 8006bca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c26:	d039      	beq.n	8006c9c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2c:	4a27      	ldr	r2, [pc, #156]	; (8006ccc <HAL_DMA_Init+0x15c>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d11a      	bne.n	8006c68 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006c32:	4b29      	ldr	r3, [pc, #164]	; (8006cd8 <HAL_DMA_Init+0x168>)
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3a:	f003 031c 	and.w	r3, r3, #28
 8006c3e:	210f      	movs	r1, #15
 8006c40:	fa01 f303 	lsl.w	r3, r1, r3
 8006c44:	43db      	mvns	r3, r3
 8006c46:	4924      	ldr	r1, [pc, #144]	; (8006cd8 <HAL_DMA_Init+0x168>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006c4c:	4b22      	ldr	r3, [pc, #136]	; (8006cd8 <HAL_DMA_Init+0x168>)
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6859      	ldr	r1, [r3, #4]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c58:	f003 031c 	and.w	r3, r3, #28
 8006c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c60:	491d      	ldr	r1, [pc, #116]	; (8006cd8 <HAL_DMA_Init+0x168>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	600b      	str	r3, [r1, #0]
 8006c66:	e019      	b.n	8006c9c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006c68:	4b1c      	ldr	r3, [pc, #112]	; (8006cdc <HAL_DMA_Init+0x16c>)
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c70:	f003 031c 	and.w	r3, r3, #28
 8006c74:	210f      	movs	r1, #15
 8006c76:	fa01 f303 	lsl.w	r3, r1, r3
 8006c7a:	43db      	mvns	r3, r3
 8006c7c:	4917      	ldr	r1, [pc, #92]	; (8006cdc <HAL_DMA_Init+0x16c>)
 8006c7e:	4013      	ands	r3, r2
 8006c80:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006c82:	4b16      	ldr	r3, [pc, #88]	; (8006cdc <HAL_DMA_Init+0x16c>)
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6859      	ldr	r1, [r3, #4]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8e:	f003 031c 	and.w	r3, r3, #28
 8006c92:	fa01 f303 	lsl.w	r3, r1, r3
 8006c96:	4911      	ldr	r1, [pc, #68]	; (8006cdc <HAL_DMA_Init+0x16c>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	40020407 	.word	0x40020407
 8006cc4:	bffdfff8 	.word	0xbffdfff8
 8006cc8:	cccccccd 	.word	0xcccccccd
 8006ccc:	40020000 	.word	0x40020000
 8006cd0:	bffdfbf8 	.word	0xbffdfbf8
 8006cd4:	40020400 	.word	0x40020400
 8006cd8:	400200a8 	.word	0x400200a8
 8006cdc:	400204a8 	.word	0x400204a8

08006ce0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
 8006cec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d101      	bne.n	8006d00 <HAL_DMA_Start_IT+0x20>
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	e04b      	b.n	8006d98 <HAL_DMA_Start_IT+0xb8>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d13a      	bne.n	8006d8a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 0201 	bic.w	r2, r2, #1
 8006d30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	68b9      	ldr	r1, [r7, #8]
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 f96d 	bl	8007018 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d008      	beq.n	8006d58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f042 020e 	orr.w	r2, r2, #14
 8006d54:	601a      	str	r2, [r3, #0]
 8006d56:	e00f      	b.n	8006d78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f022 0204 	bic.w	r2, r2, #4
 8006d66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f042 020a 	orr.w	r2, r2, #10
 8006d76:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f042 0201 	orr.w	r2, r2, #1
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	e005      	b.n	8006d96 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006d92:	2302      	movs	r3, #2
 8006d94:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3718      	adds	r7, #24
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d008      	beq.n	8006dca <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2204      	movs	r2, #4
 8006dbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e022      	b.n	8006e10 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 020e 	bic.w	r2, r2, #14
 8006dd8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0201 	bic.w	r2, r2, #1
 8006de8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dee:	f003 021c 	and.w	r2, r3, #28
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df6:	2101      	movs	r1, #1
 8006df8:	fa01 f202 	lsl.w	r2, r1, r2
 8006dfc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d005      	beq.n	8006e40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2204      	movs	r2, #4
 8006e38:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	73fb      	strb	r3, [r7, #15]
 8006e3e:	e029      	b.n	8006e94 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f022 020e 	bic.w	r2, r2, #14
 8006e4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 0201 	bic.w	r2, r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e64:	f003 021c 	and.w	r2, r3, #28
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8006e72:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d003      	beq.n	8006e94 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	4798      	blx	r3
    }
  }
  return status;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eba:	f003 031c 	and.w	r3, r3, #28
 8006ebe:	2204      	movs	r2, #4
 8006ec0:	409a      	lsls	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d026      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x7a>
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f003 0304 	and.w	r3, r3, #4
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d021      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0320 	and.w	r3, r3, #32
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d107      	bne.n	8006ef2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0204 	bic.w	r2, r2, #4
 8006ef0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef6:	f003 021c 	and.w	r2, r3, #28
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	2104      	movs	r1, #4
 8006f00:	fa01 f202 	lsl.w	r2, r1, r2
 8006f04:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d071      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006f16:	e06c      	b.n	8006ff2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f1c:	f003 031c 	and.w	r3, r3, #28
 8006f20:	2202      	movs	r2, #2
 8006f22:	409a      	lsls	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	4013      	ands	r3, r2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d02e      	beq.n	8006f8a <HAL_DMA_IRQHandler+0xec>
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d029      	beq.n	8006f8a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0320 	and.w	r3, r3, #32
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10b      	bne.n	8006f5c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f022 020a 	bic.w	r2, r2, #10
 8006f52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f60:	f003 021c 	and.w	r2, r3, #28
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f68:	2102      	movs	r1, #2
 8006f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8006f6e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d038      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006f88:	e033      	b.n	8006ff2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f8e:	f003 031c 	and.w	r3, r3, #28
 8006f92:	2208      	movs	r2, #8
 8006f94:	409a      	lsls	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d02a      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x156>
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	f003 0308 	and.w	r3, r3, #8
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d025      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 020e 	bic.w	r2, r2, #14
 8006fb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fbc:	f003 021c 	and.w	r2, r3, #28
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8006fca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d004      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006ff2:	bf00      	nop
 8006ff4:	bf00      	nop
}
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800700a:	b2db      	uxtb	r3, r3
}
 800700c:	4618      	mov	r0, r3
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
 8007024:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800702a:	f003 021c 	and.w	r2, r3, #28
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	2101      	movs	r1, #1
 8007034:	fa01 f202 	lsl.w	r2, r1, r2
 8007038:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	2b10      	cmp	r3, #16
 8007048:	d108      	bne.n	800705c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800705a:	e007      	b.n	800706c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	60da      	str	r2, [r3, #12]
}
 800706c:	bf00      	nop
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007082:	2300      	movs	r3, #0
 8007084:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007086:	e17f      	b.n	8007388 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	2101      	movs	r1, #1
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	fa01 f303 	lsl.w	r3, r1, r3
 8007094:	4013      	ands	r3, r2
 8007096:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2b00      	cmp	r3, #0
 800709c:	f000 8171 	beq.w	8007382 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f003 0303 	and.w	r3, r3, #3
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d005      	beq.n	80070b8 <HAL_GPIO_Init+0x40>
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f003 0303 	and.w	r3, r3, #3
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d130      	bne.n	800711a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	005b      	lsls	r3, r3, #1
 80070c2:	2203      	movs	r2, #3
 80070c4:	fa02 f303 	lsl.w	r3, r2, r3
 80070c8:	43db      	mvns	r3, r3
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	4013      	ands	r3, r2
 80070ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	68da      	ldr	r2, [r3, #12]
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	005b      	lsls	r3, r3, #1
 80070d8:	fa02 f303 	lsl.w	r3, r2, r3
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	4313      	orrs	r3, r2
 80070e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80070ee:	2201      	movs	r2, #1
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	fa02 f303 	lsl.w	r3, r2, r3
 80070f6:	43db      	mvns	r3, r3
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	4013      	ands	r3, r2
 80070fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	091b      	lsrs	r3, r3, #4
 8007104:	f003 0201 	and.w	r2, r3, #1
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	fa02 f303 	lsl.w	r3, r2, r3
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	4313      	orrs	r3, r2
 8007112:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	2b03      	cmp	r3, #3
 8007124:	d118      	bne.n	8007158 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800712c:	2201      	movs	r2, #1
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	fa02 f303 	lsl.w	r3, r2, r3
 8007134:	43db      	mvns	r3, r3
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	4013      	ands	r3, r2
 800713a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	08db      	lsrs	r3, r3, #3
 8007142:	f003 0201 	and.w	r2, r3, #1
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	fa02 f303 	lsl.w	r3, r2, r3
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	4313      	orrs	r3, r2
 8007150:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f003 0303 	and.w	r3, r3, #3
 8007160:	2b03      	cmp	r3, #3
 8007162:	d017      	beq.n	8007194 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	005b      	lsls	r3, r3, #1
 800716e:	2203      	movs	r2, #3
 8007170:	fa02 f303 	lsl.w	r3, r2, r3
 8007174:	43db      	mvns	r3, r3
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	4013      	ands	r3, r2
 800717a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	689a      	ldr	r2, [r3, #8]
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	fa02 f303 	lsl.w	r3, r2, r3
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	4313      	orrs	r3, r2
 800718c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f003 0303 	and.w	r3, r3, #3
 800719c:	2b02      	cmp	r3, #2
 800719e:	d123      	bne.n	80071e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	08da      	lsrs	r2, r3, #3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	3208      	adds	r2, #8
 80071a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f003 0307 	and.w	r3, r3, #7
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	220f      	movs	r2, #15
 80071b8:	fa02 f303 	lsl.w	r3, r2, r3
 80071bc:	43db      	mvns	r3, r3
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	4013      	ands	r3, r2
 80071c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	691a      	ldr	r2, [r3, #16]
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f003 0307 	and.w	r3, r3, #7
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	fa02 f303 	lsl.w	r3, r2, r3
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	08da      	lsrs	r2, r3, #3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	3208      	adds	r2, #8
 80071e2:	6939      	ldr	r1, [r7, #16]
 80071e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	005b      	lsls	r3, r3, #1
 80071f2:	2203      	movs	r2, #3
 80071f4:	fa02 f303 	lsl.w	r3, r2, r3
 80071f8:	43db      	mvns	r3, r3
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	4013      	ands	r3, r2
 80071fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	f003 0203 	and.w	r2, r3, #3
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	fa02 f303 	lsl.w	r3, r2, r3
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	4313      	orrs	r3, r2
 8007214:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 80ac 	beq.w	8007382 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800722a:	4b5f      	ldr	r3, [pc, #380]	; (80073a8 <HAL_GPIO_Init+0x330>)
 800722c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800722e:	4a5e      	ldr	r2, [pc, #376]	; (80073a8 <HAL_GPIO_Init+0x330>)
 8007230:	f043 0301 	orr.w	r3, r3, #1
 8007234:	6613      	str	r3, [r2, #96]	; 0x60
 8007236:	4b5c      	ldr	r3, [pc, #368]	; (80073a8 <HAL_GPIO_Init+0x330>)
 8007238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	60bb      	str	r3, [r7, #8]
 8007240:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007242:	4a5a      	ldr	r2, [pc, #360]	; (80073ac <HAL_GPIO_Init+0x334>)
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	089b      	lsrs	r3, r3, #2
 8007248:	3302      	adds	r3, #2
 800724a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800724e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	f003 0303 	and.w	r3, r3, #3
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	220f      	movs	r2, #15
 800725a:	fa02 f303 	lsl.w	r3, r2, r3
 800725e:	43db      	mvns	r3, r3
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	4013      	ands	r3, r2
 8007264:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800726c:	d025      	beq.n	80072ba <HAL_GPIO_Init+0x242>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a4f      	ldr	r2, [pc, #316]	; (80073b0 <HAL_GPIO_Init+0x338>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d01f      	beq.n	80072b6 <HAL_GPIO_Init+0x23e>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a4e      	ldr	r2, [pc, #312]	; (80073b4 <HAL_GPIO_Init+0x33c>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d019      	beq.n	80072b2 <HAL_GPIO_Init+0x23a>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a4d      	ldr	r2, [pc, #308]	; (80073b8 <HAL_GPIO_Init+0x340>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d013      	beq.n	80072ae <HAL_GPIO_Init+0x236>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a4c      	ldr	r2, [pc, #304]	; (80073bc <HAL_GPIO_Init+0x344>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d00d      	beq.n	80072aa <HAL_GPIO_Init+0x232>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a4b      	ldr	r2, [pc, #300]	; (80073c0 <HAL_GPIO_Init+0x348>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d007      	beq.n	80072a6 <HAL_GPIO_Init+0x22e>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a4a      	ldr	r2, [pc, #296]	; (80073c4 <HAL_GPIO_Init+0x34c>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d101      	bne.n	80072a2 <HAL_GPIO_Init+0x22a>
 800729e:	2306      	movs	r3, #6
 80072a0:	e00c      	b.n	80072bc <HAL_GPIO_Init+0x244>
 80072a2:	2307      	movs	r3, #7
 80072a4:	e00a      	b.n	80072bc <HAL_GPIO_Init+0x244>
 80072a6:	2305      	movs	r3, #5
 80072a8:	e008      	b.n	80072bc <HAL_GPIO_Init+0x244>
 80072aa:	2304      	movs	r3, #4
 80072ac:	e006      	b.n	80072bc <HAL_GPIO_Init+0x244>
 80072ae:	2303      	movs	r3, #3
 80072b0:	e004      	b.n	80072bc <HAL_GPIO_Init+0x244>
 80072b2:	2302      	movs	r3, #2
 80072b4:	e002      	b.n	80072bc <HAL_GPIO_Init+0x244>
 80072b6:	2301      	movs	r3, #1
 80072b8:	e000      	b.n	80072bc <HAL_GPIO_Init+0x244>
 80072ba:	2300      	movs	r3, #0
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	f002 0203 	and.w	r2, r2, #3
 80072c2:	0092      	lsls	r2, r2, #2
 80072c4:	4093      	lsls	r3, r2
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80072cc:	4937      	ldr	r1, [pc, #220]	; (80073ac <HAL_GPIO_Init+0x334>)
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	089b      	lsrs	r3, r3, #2
 80072d2:	3302      	adds	r3, #2
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80072da:	4b3b      	ldr	r3, [pc, #236]	; (80073c8 <HAL_GPIO_Init+0x350>)
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	43db      	mvns	r3, r3
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	4013      	ands	r3, r2
 80072e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d003      	beq.n	80072fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80072fe:	4a32      	ldr	r2, [pc, #200]	; (80073c8 <HAL_GPIO_Init+0x350>)
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007304:	4b30      	ldr	r3, [pc, #192]	; (80073c8 <HAL_GPIO_Init+0x350>)
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	43db      	mvns	r3, r3
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	4013      	ands	r3, r2
 8007312:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	4313      	orrs	r3, r2
 8007326:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007328:	4a27      	ldr	r2, [pc, #156]	; (80073c8 <HAL_GPIO_Init+0x350>)
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800732e:	4b26      	ldr	r3, [pc, #152]	; (80073c8 <HAL_GPIO_Init+0x350>)
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	43db      	mvns	r3, r3
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	4013      	ands	r3, r2
 800733c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007352:	4a1d      	ldr	r2, [pc, #116]	; (80073c8 <HAL_GPIO_Init+0x350>)
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007358:	4b1b      	ldr	r3, [pc, #108]	; (80073c8 <HAL_GPIO_Init+0x350>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	43db      	mvns	r3, r3
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	4013      	ands	r3, r2
 8007366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d003      	beq.n	800737c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4313      	orrs	r3, r2
 800737a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800737c:	4a12      	ldr	r2, [pc, #72]	; (80073c8 <HAL_GPIO_Init+0x350>)
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	3301      	adds	r3, #1
 8007386:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	fa22 f303 	lsr.w	r3, r2, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	f47f ae78 	bne.w	8007088 <HAL_GPIO_Init+0x10>
  }
}
 8007398:	bf00      	nop
 800739a:	bf00      	nop
 800739c:	371c      	adds	r7, #28
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	40021000 	.word	0x40021000
 80073ac:	40010000 	.word	0x40010000
 80073b0:	48000400 	.word	0x48000400
 80073b4:	48000800 	.word	0x48000800
 80073b8:	48000c00 	.word	0x48000c00
 80073bc:	48001000 	.word	0x48001000
 80073c0:	48001400 	.word	0x48001400
 80073c4:	48001800 	.word	0x48001800
 80073c8:	40010400 	.word	0x40010400

080073cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691a      	ldr	r2, [r3, #16]
 80073dc:	887b      	ldrh	r3, [r7, #2]
 80073de:	4013      	ands	r3, r2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80073e4:	2301      	movs	r3, #1
 80073e6:	73fb      	strb	r3, [r7, #15]
 80073e8:	e001      	b.n	80073ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80073ea:	2300      	movs	r3, #0
 80073ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	807b      	strh	r3, [r7, #2]
 8007408:	4613      	mov	r3, r2
 800740a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800740c:	787b      	ldrb	r3, [r7, #1]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007412:	887a      	ldrh	r2, [r7, #2]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007418:	e002      	b.n	8007420 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800741a:	887a      	ldrh	r2, [r7, #2]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	460b      	mov	r3, r1
 8007436:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800743e:	887a      	ldrh	r2, [r7, #2]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	4013      	ands	r3, r2
 8007444:	041a      	lsls	r2, r3, #16
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	43d9      	mvns	r1, r3
 800744a:	887b      	ldrh	r3, [r7, #2]
 800744c:	400b      	ands	r3, r1
 800744e:	431a      	orrs	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	619a      	str	r2, [r3, #24]
}
 8007454:	bf00      	nop
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	4603      	mov	r3, r0
 8007468:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800746a:	4b08      	ldr	r3, [pc, #32]	; (800748c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800746c:	695a      	ldr	r2, [r3, #20]
 800746e:	88fb      	ldrh	r3, [r7, #6]
 8007470:	4013      	ands	r3, r2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d006      	beq.n	8007484 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007476:	4a05      	ldr	r2, [pc, #20]	; (800748c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007478:	88fb      	ldrh	r3, [r7, #6]
 800747a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800747c:	88fb      	ldrh	r3, [r7, #6]
 800747e:	4618      	mov	r0, r3
 8007480:	f7fd fb28 	bl	8004ad4 <HAL_GPIO_EXTI_Callback>
  }
}
 8007484:	bf00      	nop
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	40010400 	.word	0x40010400

08007490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e081      	b.n	80075a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d106      	bne.n	80074bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7fd ffa4 	bl	8005404 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2224      	movs	r2, #36	; 0x24
 80074c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f022 0201 	bic.w	r2, r2, #1
 80074d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	689a      	ldr	r2, [r3, #8]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d107      	bne.n	800750a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	689a      	ldr	r2, [r3, #8]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007506:	609a      	str	r2, [r3, #8]
 8007508:	e006      	b.n	8007518 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	689a      	ldr	r2, [r3, #8]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007516:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	2b02      	cmp	r3, #2
 800751e:	d104      	bne.n	800752a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007528:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6812      	ldr	r2, [r2, #0]
 8007534:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800753c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68da      	ldr	r2, [r3, #12]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800754c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	691a      	ldr	r2, [r3, #16]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	430a      	orrs	r2, r1
 8007566:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	69d9      	ldr	r1, [r3, #28]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a1a      	ldr	r2, [r3, #32]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f042 0201 	orr.w	r2, r2, #1
 8007586:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2220      	movs	r2, #32
 8007592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
	...

080075b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b088      	sub	sp, #32
 80075b4:	af02      	add	r7, sp, #8
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	607a      	str	r2, [r7, #4]
 80075ba:	461a      	mov	r2, r3
 80075bc:	460b      	mov	r3, r1
 80075be:	817b      	strh	r3, [r7, #10]
 80075c0:	4613      	mov	r3, r2
 80075c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b20      	cmp	r3, #32
 80075ce:	f040 80da 	bne.w	8007786 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d101      	bne.n	80075e0 <HAL_I2C_Master_Transmit+0x30>
 80075dc:	2302      	movs	r3, #2
 80075de:	e0d3      	b.n	8007788 <HAL_I2C_Master_Transmit+0x1d8>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80075e8:	f7ff f94e 	bl	8006888 <HAL_GetTick>
 80075ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	2319      	movs	r3, #25
 80075f4:	2201      	movs	r2, #1
 80075f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f001 f8d1 	bl	80087a2 <I2C_WaitOnFlagUntilTimeout>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e0be      	b.n	8007788 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2221      	movs	r2, #33	; 0x21
 800760e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2210      	movs	r2, #16
 8007616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	893a      	ldrh	r2, [r7, #8]
 800762a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007636:	b29b      	uxth	r3, r3
 8007638:	2bff      	cmp	r3, #255	; 0xff
 800763a:	d90e      	bls.n	800765a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	22ff      	movs	r2, #255	; 0xff
 8007640:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007646:	b2da      	uxtb	r2, r3
 8007648:	8979      	ldrh	r1, [r7, #10]
 800764a:	4b51      	ldr	r3, [pc, #324]	; (8007790 <HAL_I2C_Master_Transmit+0x1e0>)
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f001 fa4e 	bl	8008af4 <I2C_TransferConfig>
 8007658:	e06c      	b.n	8007734 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800765e:	b29a      	uxth	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007668:	b2da      	uxtb	r2, r3
 800766a:	8979      	ldrh	r1, [r7, #10]
 800766c:	4b48      	ldr	r3, [pc, #288]	; (8007790 <HAL_I2C_Master_Transmit+0x1e0>)
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f001 fa3d 	bl	8008af4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800767a:	e05b      	b.n	8007734 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	6a39      	ldr	r1, [r7, #32]
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f001 f8ce 	bl	8008822 <I2C_WaitOnTXISFlagUntilTimeout>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e07b      	b.n	8007788 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	781a      	ldrb	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	1c5a      	adds	r2, r3, #1
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	3b01      	subs	r3, #1
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076b8:	3b01      	subs	r3, #1
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d034      	beq.n	8007734 <HAL_I2C_Master_Transmit+0x184>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d130      	bne.n	8007734 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	2200      	movs	r2, #0
 80076da:	2180      	movs	r1, #128	; 0x80
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f001 f860 	bl	80087a2 <I2C_WaitOnFlagUntilTimeout>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d001      	beq.n	80076ec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e04d      	b.n	8007788 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	2bff      	cmp	r3, #255	; 0xff
 80076f4:	d90e      	bls.n	8007714 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	22ff      	movs	r2, #255	; 0xff
 80076fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007700:	b2da      	uxtb	r2, r3
 8007702:	8979      	ldrh	r1, [r7, #10]
 8007704:	2300      	movs	r3, #0
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f001 f9f1 	bl	8008af4 <I2C_TransferConfig>
 8007712:	e00f      	b.n	8007734 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007718:	b29a      	uxth	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007722:	b2da      	uxtb	r2, r3
 8007724:	8979      	ldrh	r1, [r7, #10]
 8007726:	2300      	movs	r3, #0
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f001 f9e0 	bl	8008af4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007738:	b29b      	uxth	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d19e      	bne.n	800767c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	6a39      	ldr	r1, [r7, #32]
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f001 f8ad 	bl	80088a2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e01a      	b.n	8007788 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2220      	movs	r2, #32
 8007758:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	6859      	ldr	r1, [r3, #4]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	4b0b      	ldr	r3, [pc, #44]	; (8007794 <HAL_I2C_Master_Transmit+0x1e4>)
 8007766:	400b      	ands	r3, r1
 8007768:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2220      	movs	r2, #32
 800776e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	e000      	b.n	8007788 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007786:	2302      	movs	r3, #2
  }
}
 8007788:	4618      	mov	r0, r3
 800778a:	3718      	adds	r7, #24
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	80002000 	.word	0x80002000
 8007794:	fe00e800 	.word	0xfe00e800

08007798 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b088      	sub	sp, #32
 800779c:	af02      	add	r7, sp, #8
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	4608      	mov	r0, r1
 80077a2:	4611      	mov	r1, r2
 80077a4:	461a      	mov	r2, r3
 80077a6:	4603      	mov	r3, r0
 80077a8:	817b      	strh	r3, [r7, #10]
 80077aa:	460b      	mov	r3, r1
 80077ac:	813b      	strh	r3, [r7, #8]
 80077ae:	4613      	mov	r3, r2
 80077b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b20      	cmp	r3, #32
 80077bc:	f040 80f9 	bne.w	80079b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d002      	beq.n	80077cc <HAL_I2C_Mem_Write+0x34>
 80077c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d105      	bne.n	80077d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e0ed      	b.n	80079b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d101      	bne.n	80077e6 <HAL_I2C_Mem_Write+0x4e>
 80077e2:	2302      	movs	r3, #2
 80077e4:	e0e6      	b.n	80079b4 <HAL_I2C_Mem_Write+0x21c>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80077ee:	f7ff f84b 	bl	8006888 <HAL_GetTick>
 80077f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	2319      	movs	r3, #25
 80077fa:	2201      	movs	r2, #1
 80077fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 ffce 	bl	80087a2 <I2C_WaitOnFlagUntilTimeout>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d001      	beq.n	8007810 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e0d1      	b.n	80079b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2221      	movs	r2, #33	; 0x21
 8007814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2240      	movs	r2, #64	; 0x40
 800781c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6a3a      	ldr	r2, [r7, #32]
 800782a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007830:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007838:	88f8      	ldrh	r0, [r7, #6]
 800783a:	893a      	ldrh	r2, [r7, #8]
 800783c:	8979      	ldrh	r1, [r7, #10]
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	9301      	str	r3, [sp, #4]
 8007842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	4603      	mov	r3, r0
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f000 fb87 	bl	8007f5c <I2C_RequestMemoryWrite>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d005      	beq.n	8007860 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e0a9      	b.n	80079b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007864:	b29b      	uxth	r3, r3
 8007866:	2bff      	cmp	r3, #255	; 0xff
 8007868:	d90e      	bls.n	8007888 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	22ff      	movs	r2, #255	; 0xff
 800786e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007874:	b2da      	uxtb	r2, r3
 8007876:	8979      	ldrh	r1, [r7, #10]
 8007878:	2300      	movs	r3, #0
 800787a:	9300      	str	r3, [sp, #0]
 800787c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f001 f937 	bl	8008af4 <I2C_TransferConfig>
 8007886:	e00f      	b.n	80078a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800788c:	b29a      	uxth	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007896:	b2da      	uxtb	r2, r3
 8007898:	8979      	ldrh	r1, [r7, #10]
 800789a:	2300      	movs	r3, #0
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f001 f926 	bl	8008af4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f000 ffb8 	bl	8008822 <I2C_WaitOnTXISFlagUntilTimeout>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d001      	beq.n	80078bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e07b      	b.n	80079b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c0:	781a      	ldrb	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078cc:	1c5a      	adds	r2, r3, #1
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	3b01      	subs	r3, #1
 80078da:	b29a      	uxth	r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e4:	3b01      	subs	r3, #1
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d034      	beq.n	8007960 <HAL_I2C_Mem_Write+0x1c8>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d130      	bne.n	8007960 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007904:	2200      	movs	r2, #0
 8007906:	2180      	movs	r1, #128	; 0x80
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 ff4a 	bl	80087a2 <I2C_WaitOnFlagUntilTimeout>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d001      	beq.n	8007918 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e04d      	b.n	80079b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800791c:	b29b      	uxth	r3, r3
 800791e:	2bff      	cmp	r3, #255	; 0xff
 8007920:	d90e      	bls.n	8007940 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	22ff      	movs	r2, #255	; 0xff
 8007926:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800792c:	b2da      	uxtb	r2, r3
 800792e:	8979      	ldrh	r1, [r7, #10]
 8007930:	2300      	movs	r3, #0
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f001 f8db 	bl	8008af4 <I2C_TransferConfig>
 800793e:	e00f      	b.n	8007960 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007944:	b29a      	uxth	r2, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800794e:	b2da      	uxtb	r2, r3
 8007950:	8979      	ldrh	r1, [r7, #10]
 8007952:	2300      	movs	r3, #0
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f001 f8ca 	bl	8008af4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007964:	b29b      	uxth	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d19e      	bne.n	80078a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 ff97 	bl	80088a2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d001      	beq.n	800797e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e01a      	b.n	80079b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2220      	movs	r2, #32
 8007984:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	6859      	ldr	r1, [r3, #4]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	4b0a      	ldr	r3, [pc, #40]	; (80079bc <HAL_I2C_Mem_Write+0x224>)
 8007992:	400b      	ands	r3, r1
 8007994:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2220      	movs	r2, #32
 800799a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	e000      	b.n	80079b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80079b2:	2302      	movs	r3, #2
  }
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3718      	adds	r7, #24
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	fe00e800 	.word	0xfe00e800

080079c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b088      	sub	sp, #32
 80079c4:	af02      	add	r7, sp, #8
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	4608      	mov	r0, r1
 80079ca:	4611      	mov	r1, r2
 80079cc:	461a      	mov	r2, r3
 80079ce:	4603      	mov	r3, r0
 80079d0:	817b      	strh	r3, [r7, #10]
 80079d2:	460b      	mov	r3, r1
 80079d4:	813b      	strh	r3, [r7, #8]
 80079d6:	4613      	mov	r3, r2
 80079d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b20      	cmp	r3, #32
 80079e4:	f040 80fd 	bne.w	8007be2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80079e8:	6a3b      	ldr	r3, [r7, #32]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d002      	beq.n	80079f4 <HAL_I2C_Mem_Read+0x34>
 80079ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d105      	bne.n	8007a00 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e0f1      	b.n	8007be4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d101      	bne.n	8007a0e <HAL_I2C_Mem_Read+0x4e>
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	e0ea      	b.n	8007be4 <HAL_I2C_Mem_Read+0x224>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a16:	f7fe ff37 	bl	8006888 <HAL_GetTick>
 8007a1a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	2319      	movs	r3, #25
 8007a22:	2201      	movs	r2, #1
 8007a24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f000 feba 	bl	80087a2 <I2C_WaitOnFlagUntilTimeout>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d001      	beq.n	8007a38 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e0d5      	b.n	8007be4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2222      	movs	r2, #34	; 0x22
 8007a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2240      	movs	r2, #64	; 0x40
 8007a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6a3a      	ldr	r2, [r7, #32]
 8007a52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007a58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a60:	88f8      	ldrh	r0, [r7, #6]
 8007a62:	893a      	ldrh	r2, [r7, #8]
 8007a64:	8979      	ldrh	r1, [r7, #10]
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	9301      	str	r3, [sp, #4]
 8007a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	4603      	mov	r3, r0
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 fac7 	bl	8008004 <I2C_RequestMemoryRead>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d005      	beq.n	8007a88 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e0ad      	b.n	8007be4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	2bff      	cmp	r3, #255	; 0xff
 8007a90:	d90e      	bls.n	8007ab0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	22ff      	movs	r2, #255	; 0xff
 8007a96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	8979      	ldrh	r1, [r7, #10]
 8007aa0:	4b52      	ldr	r3, [pc, #328]	; (8007bec <HAL_I2C_Mem_Read+0x22c>)
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f001 f823 	bl	8008af4 <I2C_TransferConfig>
 8007aae:	e00f      	b.n	8007ad0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	8979      	ldrh	r1, [r7, #10]
 8007ac2:	4b4a      	ldr	r3, [pc, #296]	; (8007bec <HAL_I2C_Mem_Read+0x22c>)
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f001 f812 	bl	8008af4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	9300      	str	r3, [sp, #0]
 8007ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	2104      	movs	r1, #4
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f000 fe61 	bl	80087a2 <I2C_WaitOnFlagUntilTimeout>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d001      	beq.n	8007aea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e07c      	b.n	8007be4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af4:	b2d2      	uxtb	r2, r2
 8007af6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afc:	1c5a      	adds	r2, r3, #1
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b06:	3b01      	subs	r3, #1
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	3b01      	subs	r3, #1
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d034      	beq.n	8007b90 <HAL_I2C_Mem_Read+0x1d0>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d130      	bne.n	8007b90 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b34:	2200      	movs	r2, #0
 8007b36:	2180      	movs	r1, #128	; 0x80
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f000 fe32 	bl	80087a2 <I2C_WaitOnFlagUntilTimeout>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e04d      	b.n	8007be4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	2bff      	cmp	r3, #255	; 0xff
 8007b50:	d90e      	bls.n	8007b70 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	22ff      	movs	r2, #255	; 0xff
 8007b56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b5c:	b2da      	uxtb	r2, r3
 8007b5e:	8979      	ldrh	r1, [r7, #10]
 8007b60:	2300      	movs	r3, #0
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f000 ffc3 	bl	8008af4 <I2C_TransferConfig>
 8007b6e:	e00f      	b.n	8007b90 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	8979      	ldrh	r1, [r7, #10]
 8007b82:	2300      	movs	r3, #0
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f000 ffb2 	bl	8008af4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d19a      	bne.n	8007ad0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f000 fe7f 	bl	80088a2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e01a      	b.n	8007be4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	6859      	ldr	r1, [r3, #4]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	4b0b      	ldr	r3, [pc, #44]	; (8007bf0 <HAL_I2C_Mem_Read+0x230>)
 8007bc2:	400b      	ands	r3, r1
 8007bc4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2220      	movs	r2, #32
 8007bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	e000      	b.n	8007be4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007be2:	2302      	movs	r3, #2
  }
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3718      	adds	r7, #24
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	80002400 	.word	0x80002400
 8007bf0:	fe00e800 	.word	0xfe00e800

08007bf4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d005      	beq.n	8007c20 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	68f9      	ldr	r1, [r7, #12]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	4798      	blx	r3
  }
}
 8007c20:	bf00      	nop
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b086      	sub	sp, #24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	0a1b      	lsrs	r3, r3, #8
 8007c44:	f003 0301 	and.w	r3, r3, #1
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d010      	beq.n	8007c6e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	09db      	lsrs	r3, r3, #7
 8007c50:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00a      	beq.n	8007c6e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c5c:	f043 0201 	orr.w	r2, r3, #1
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c6c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	0a9b      	lsrs	r3, r3, #10
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d010      	beq.n	8007c9c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	09db      	lsrs	r3, r3, #7
 8007c7e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00a      	beq.n	8007c9c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c8a:	f043 0208 	orr.w	r2, r3, #8
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c9a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	0a5b      	lsrs	r3, r3, #9
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d010      	beq.n	8007cca <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	09db      	lsrs	r3, r3, #7
 8007cac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00a      	beq.n	8007cca <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb8:	f043 0202 	orr.w	r2, r3, #2
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cc8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f003 030b 	and.w	r3, r3, #11
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d003      	beq.n	8007ce2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8007cda:	68f9      	ldr	r1, [r7, #12]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fc27 	bl	8008530 <I2C_ITError>
  }
}
 8007ce2:	bf00      	nop
 8007ce4:	3718      	adds	r7, #24
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b083      	sub	sp, #12
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007cf2:	bf00      	nop
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b083      	sub	sp, #12
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007d06:	bf00      	nop
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	70fb      	strb	r3, [r7, #3]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007d22:	bf00      	nop
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007d36:	bf00      	nop
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d42:	b480      	push	{r7}
 8007d44:	b083      	sub	sp, #12
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007d4a:	bf00      	nop
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b086      	sub	sp, #24
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d66:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d101      	bne.n	8007d7a <I2C_Slave_ISR_IT+0x24>
 8007d76:	2302      	movs	r3, #2
 8007d78:	e0ec      	b.n	8007f54 <I2C_Slave_ISR_IT+0x1fe>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	095b      	lsrs	r3, r3, #5
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d009      	beq.n	8007da2 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	095b      	lsrs	r3, r3, #5
 8007d92:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d003      	beq.n	8007da2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007d9a:	6939      	ldr	r1, [r7, #16]
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f000 fa67 	bl	8008270 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	091b      	lsrs	r3, r3, #4
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d04d      	beq.n	8007e4a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	091b      	lsrs	r3, r3, #4
 8007db2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d047      	beq.n	8007e4a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d128      	bne.n	8007e16 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b28      	cmp	r3, #40	; 0x28
 8007dce:	d108      	bne.n	8007de2 <I2C_Slave_ISR_IT+0x8c>
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dd6:	d104      	bne.n	8007de2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007dd8:	6939      	ldr	r1, [r7, #16]
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f000 fb52 	bl	8008484 <I2C_ITListenCplt>
 8007de0:	e032      	b.n	8007e48 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b29      	cmp	r3, #41	; 0x29
 8007dec:	d10e      	bne.n	8007e0c <I2C_Slave_ISR_IT+0xb6>
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007df4:	d00a      	beq.n	8007e0c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2210      	movs	r2, #16
 8007dfc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f000 fc8d 	bl	800871e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f000 f9d5 	bl	80081b4 <I2C_ITSlaveSeqCplt>
 8007e0a:	e01d      	b.n	8007e48 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2210      	movs	r2, #16
 8007e12:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007e14:	e096      	b.n	8007f44 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2210      	movs	r2, #16
 8007e1c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e22:	f043 0204 	orr.w	r2, r3, #4
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d004      	beq.n	8007e3a <I2C_Slave_ISR_IT+0xe4>
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e36:	f040 8085 	bne.w	8007f44 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e3e:	4619      	mov	r1, r3
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f000 fb75 	bl	8008530 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007e46:	e07d      	b.n	8007f44 <I2C_Slave_ISR_IT+0x1ee>
 8007e48:	e07c      	b.n	8007f44 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	089b      	lsrs	r3, r3, #2
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d030      	beq.n	8007eb8 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	089b      	lsrs	r3, r3, #2
 8007e5a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d02a      	beq.n	8007eb8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d018      	beq.n	8007e9e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e76:	b2d2      	uxtb	r2, r2
 8007e78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	1c5a      	adds	r2, r3, #1
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	3b01      	subs	r3, #1
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d14f      	bne.n	8007f48 <I2C_Slave_ISR_IT+0x1f2>
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007eae:	d04b      	beq.n	8007f48 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f000 f97f 	bl	80081b4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007eb6:	e047      	b.n	8007f48 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	08db      	lsrs	r3, r3, #3
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00a      	beq.n	8007eda <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	08db      	lsrs	r3, r3, #3
 8007ec8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d004      	beq.n	8007eda <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007ed0:	6939      	ldr	r1, [r7, #16]
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f000 f8ea 	bl	80080ac <I2C_ITAddrCplt>
 8007ed8:	e037      	b.n	8007f4a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	085b      	lsrs	r3, r3, #1
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d031      	beq.n	8007f4a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	085b      	lsrs	r3, r3, #1
 8007eea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d02b      	beq.n	8007f4a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d018      	beq.n	8007f2e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f00:	781a      	ldrb	r2, [r3, #0]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0c:	1c5a      	adds	r2, r3, #1
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f24:	3b01      	subs	r3, #1
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	851a      	strh	r2, [r3, #40]	; 0x28
 8007f2c:	e00d      	b.n	8007f4a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f34:	d002      	beq.n	8007f3c <I2C_Slave_ISR_IT+0x1e6>
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d106      	bne.n	8007f4a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 f939 	bl	80081b4 <I2C_ITSlaveSeqCplt>
 8007f42:	e002      	b.n	8007f4a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8007f44:	bf00      	nop
 8007f46:	e000      	b.n	8007f4a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8007f48:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af02      	add	r7, sp, #8
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	4608      	mov	r0, r1
 8007f66:	4611      	mov	r1, r2
 8007f68:	461a      	mov	r2, r3
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	817b      	strh	r3, [r7, #10]
 8007f6e:	460b      	mov	r3, r1
 8007f70:	813b      	strh	r3, [r7, #8]
 8007f72:	4613      	mov	r3, r2
 8007f74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007f76:	88fb      	ldrh	r3, [r7, #6]
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	8979      	ldrh	r1, [r7, #10]
 8007f7c:	4b20      	ldr	r3, [pc, #128]	; (8008000 <I2C_RequestMemoryWrite+0xa4>)
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 fdb5 	bl	8008af4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f8a:	69fa      	ldr	r2, [r7, #28]
 8007f8c:	69b9      	ldr	r1, [r7, #24]
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f000 fc47 	bl	8008822 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d001      	beq.n	8007f9e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e02c      	b.n	8007ff8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f9e:	88fb      	ldrh	r3, [r7, #6]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d105      	bne.n	8007fb0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007fa4:	893b      	ldrh	r3, [r7, #8]
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	629a      	str	r2, [r3, #40]	; 0x28
 8007fae:	e015      	b.n	8007fdc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007fb0:	893b      	ldrh	r3, [r7, #8]
 8007fb2:	0a1b      	lsrs	r3, r3, #8
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fbe:	69fa      	ldr	r2, [r7, #28]
 8007fc0:	69b9      	ldr	r1, [r7, #24]
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f000 fc2d 	bl	8008822 <I2C_WaitOnTXISFlagUntilTimeout>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e012      	b.n	8007ff8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007fd2:	893b      	ldrh	r3, [r7, #8]
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	9300      	str	r3, [sp, #0]
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	2180      	movs	r1, #128	; 0x80
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 fbdb 	bl	80087a2 <I2C_WaitOnFlagUntilTimeout>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e000      	b.n	8007ff8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	80002000 	.word	0x80002000

08008004 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af02      	add	r7, sp, #8
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	4608      	mov	r0, r1
 800800e:	4611      	mov	r1, r2
 8008010:	461a      	mov	r2, r3
 8008012:	4603      	mov	r3, r0
 8008014:	817b      	strh	r3, [r7, #10]
 8008016:	460b      	mov	r3, r1
 8008018:	813b      	strh	r3, [r7, #8]
 800801a:	4613      	mov	r3, r2
 800801c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800801e:	88fb      	ldrh	r3, [r7, #6]
 8008020:	b2da      	uxtb	r2, r3
 8008022:	8979      	ldrh	r1, [r7, #10]
 8008024:	4b20      	ldr	r3, [pc, #128]	; (80080a8 <I2C_RequestMemoryRead+0xa4>)
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	2300      	movs	r3, #0
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	f000 fd62 	bl	8008af4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008030:	69fa      	ldr	r2, [r7, #28]
 8008032:	69b9      	ldr	r1, [r7, #24]
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 fbf4 	bl	8008822 <I2C_WaitOnTXISFlagUntilTimeout>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e02c      	b.n	800809e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008044:	88fb      	ldrh	r3, [r7, #6]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d105      	bne.n	8008056 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800804a:	893b      	ldrh	r3, [r7, #8]
 800804c:	b2da      	uxtb	r2, r3
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	629a      	str	r2, [r3, #40]	; 0x28
 8008054:	e015      	b.n	8008082 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008056:	893b      	ldrh	r3, [r7, #8]
 8008058:	0a1b      	lsrs	r3, r3, #8
 800805a:	b29b      	uxth	r3, r3
 800805c:	b2da      	uxtb	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008064:	69fa      	ldr	r2, [r7, #28]
 8008066:	69b9      	ldr	r1, [r7, #24]
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f000 fbda 	bl	8008822 <I2C_WaitOnTXISFlagUntilTimeout>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d001      	beq.n	8008078 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e012      	b.n	800809e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008078:	893b      	ldrh	r3, [r7, #8]
 800807a:	b2da      	uxtb	r2, r3
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	2200      	movs	r2, #0
 800808a:	2140      	movs	r1, #64	; 0x40
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f000 fb88 	bl	80087a2 <I2C_WaitOnFlagUntilTimeout>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e000      	b.n	800809e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	80002000 	.word	0x80002000

080080ac <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80080c2:	2b28      	cmp	r3, #40	; 0x28
 80080c4:	d16a      	bne.n	800819c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	0c1b      	lsrs	r3, r3, #16
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	f003 0301 	and.w	r3, r3, #1
 80080d4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	0c1b      	lsrs	r3, r3, #16
 80080de:	b29b      	uxth	r3, r3
 80080e0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80080e4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080f2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008100:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	2b02      	cmp	r3, #2
 8008108:	d138      	bne.n	800817c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800810a:	897b      	ldrh	r3, [r7, #10]
 800810c:	09db      	lsrs	r3, r3, #7
 800810e:	b29a      	uxth	r2, r3
 8008110:	89bb      	ldrh	r3, [r7, #12]
 8008112:	4053      	eors	r3, r2
 8008114:	b29b      	uxth	r3, r3
 8008116:	f003 0306 	and.w	r3, r3, #6
 800811a:	2b00      	cmp	r3, #0
 800811c:	d11c      	bne.n	8008158 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800811e:	897b      	ldrh	r3, [r7, #10]
 8008120:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008126:	1c5a      	adds	r2, r3, #1
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008130:	2b02      	cmp	r3, #2
 8008132:	d13b      	bne.n	80081ac <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2208      	movs	r2, #8
 8008140:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800814a:	89ba      	ldrh	r2, [r7, #12]
 800814c:	7bfb      	ldrb	r3, [r7, #15]
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7ff fdde 	bl	8007d12 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008156:	e029      	b.n	80081ac <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008158:	893b      	ldrh	r3, [r7, #8]
 800815a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800815c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fcf9 	bl	8008b58 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800816e:	89ba      	ldrh	r2, [r7, #12]
 8008170:	7bfb      	ldrb	r3, [r7, #15]
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f7ff fdcc 	bl	8007d12 <HAL_I2C_AddrCallback>
}
 800817a:	e017      	b.n	80081ac <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800817c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fce9 	bl	8008b58 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800818e:	89ba      	ldrh	r2, [r7, #12]
 8008190:	7bfb      	ldrb	r3, [r7, #15]
 8008192:	4619      	mov	r1, r3
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f7ff fdbc 	bl	8007d12 <HAL_I2C_AddrCallback>
}
 800819a:	e007      	b.n	80081ac <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2208      	movs	r2, #8
 80081a2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80081ac:	bf00      	nop
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	0b9b      	lsrs	r3, r3, #14
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d008      	beq.n	80081ea <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	e00d      	b.n	8008206 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	0bdb      	lsrs	r3, r3, #15
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d007      	beq.n	8008206 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008204:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800820c:	b2db      	uxtb	r3, r3
 800820e:	2b29      	cmp	r3, #41	; 0x29
 8008210:	d112      	bne.n	8008238 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2228      	movs	r2, #40	; 0x28
 8008216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2221      	movs	r2, #33	; 0x21
 800821e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008220:	2101      	movs	r1, #1
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 fc98 	bl	8008b58 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f7ff fd5a 	bl	8007cea <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008236:	e017      	b.n	8008268 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b2a      	cmp	r3, #42	; 0x2a
 8008242:	d111      	bne.n	8008268 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2228      	movs	r2, #40	; 0x28
 8008248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2222      	movs	r2, #34	; 0x22
 8008250:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008252:	2102      	movs	r1, #2
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fc7f 	bl	8008b58 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f7ff fd4b 	bl	8007cfe <HAL_I2C_SlaveRxCpltCallback>
}
 8008268:	bf00      	nop
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800828c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2220      	movs	r2, #32
 8008294:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008296:	7bfb      	ldrb	r3, [r7, #15]
 8008298:	2b21      	cmp	r3, #33	; 0x21
 800829a:	d002      	beq.n	80082a2 <I2C_ITSlaveCplt+0x32>
 800829c:	7bfb      	ldrb	r3, [r7, #15]
 800829e:	2b29      	cmp	r3, #41	; 0x29
 80082a0:	d108      	bne.n	80082b4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80082a2:	f248 0101 	movw	r1, #32769	; 0x8001
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fc56 	bl	8008b58 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2221      	movs	r2, #33	; 0x21
 80082b0:	631a      	str	r2, [r3, #48]	; 0x30
 80082b2:	e00d      	b.n	80082d0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
 80082b6:	2b22      	cmp	r3, #34	; 0x22
 80082b8:	d002      	beq.n	80082c0 <I2C_ITSlaveCplt+0x50>
 80082ba:	7bfb      	ldrb	r3, [r7, #15]
 80082bc:	2b2a      	cmp	r3, #42	; 0x2a
 80082be:	d107      	bne.n	80082d0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80082c0:	f248 0102 	movw	r1, #32770	; 0x8002
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fc47 	bl	8008b58 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2222      	movs	r2, #34	; 0x22
 80082ce:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082de:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6859      	ldr	r1, [r3, #4]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	4b64      	ldr	r3, [pc, #400]	; (800847c <I2C_ITSlaveCplt+0x20c>)
 80082ec:	400b      	ands	r3, r1
 80082ee:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fa14 	bl	800871e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	0b9b      	lsrs	r3, r3, #14
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d013      	beq.n	800832a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008310:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008316:	2b00      	cmp	r3, #0
 8008318:	d020      	beq.n	800835c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	b29a      	uxth	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008328:	e018      	b.n	800835c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	0bdb      	lsrs	r3, r3, #15
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d012      	beq.n	800835c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008344:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834a:	2b00      	cmp	r3, #0
 800834c:	d006      	beq.n	800835c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	b29a      	uxth	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	089b      	lsrs	r3, r3, #2
 8008360:	f003 0301 	and.w	r3, r3, #1
 8008364:	2b00      	cmp	r3, #0
 8008366:	d020      	beq.n	80083aa <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	f023 0304 	bic.w	r3, r3, #4
 800836e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837a:	b2d2      	uxtb	r2, r2
 800837c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008382:	1c5a      	adds	r2, r3, #1
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00c      	beq.n	80083aa <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008394:	3b01      	subs	r3, #1
 8008396:	b29a      	uxth	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	3b01      	subs	r3, #1
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d005      	beq.n	80083c0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b8:	f043 0204 	orr.w	r2, r3, #4
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d010      	beq.n	80083f8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083da:	4619      	mov	r1, r3
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f8a7 	bl	8008530 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b28      	cmp	r3, #40	; 0x28
 80083ec:	d141      	bne.n	8008472 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80083ee:	6979      	ldr	r1, [r7, #20]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f847 	bl	8008484 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80083f6:	e03c      	b.n	8008472 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008400:	d014      	beq.n	800842c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7ff fed6 	bl	80081b4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a1d      	ldr	r2, [pc, #116]	; (8008480 <I2C_ITSlaveCplt+0x210>)
 800840c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2220      	movs	r2, #32
 8008412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f7ff fc82 	bl	8007d2e <HAL_I2C_ListenCpltCallback>
}
 800842a:	e022      	b.n	8008472 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008432:	b2db      	uxtb	r3, r3
 8008434:	2b22      	cmp	r3, #34	; 0x22
 8008436:	d10e      	bne.n	8008456 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2220      	movs	r2, #32
 800843c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7ff fc55 	bl	8007cfe <HAL_I2C_SlaveRxCpltCallback>
}
 8008454:	e00d      	b.n	8008472 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2220      	movs	r2, #32
 800845a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7ff fc3c 	bl	8007cea <HAL_I2C_SlaveTxCpltCallback>
}
 8008472:	bf00      	nop
 8008474:	3718      	adds	r7, #24
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	fe00e800 	.word	0xfe00e800
 8008480:	ffff0000 	.word	0xffff0000

08008484 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a26      	ldr	r2, [pc, #152]	; (800852c <I2C_ITListenCplt+0xa8>)
 8008492:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2220      	movs	r2, #32
 800849e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	089b      	lsrs	r3, r3, #2
 80084b4:	f003 0301 	and.w	r3, r3, #1
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d022      	beq.n	8008502 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c6:	b2d2      	uxtb	r2, r2
 80084c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ce:	1c5a      	adds	r2, r3, #1
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d012      	beq.n	8008502 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084e0:	3b01      	subs	r3, #1
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	3b01      	subs	r3, #1
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084fa:	f043 0204 	orr.w	r2, r3, #4
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008502:	f248 0103 	movw	r1, #32771	; 0x8003
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fb26 	bl	8008b58 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2210      	movs	r2, #16
 8008512:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7ff fc06 	bl	8007d2e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008522:	bf00      	nop
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	ffff0000 	.word	0xffff0000

08008530 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a5d      	ldr	r2, [pc, #372]	; (80086c4 <I2C_ITError+0x194>)
 800854e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	431a      	orrs	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008562:	7bfb      	ldrb	r3, [r7, #15]
 8008564:	2b28      	cmp	r3, #40	; 0x28
 8008566:	d005      	beq.n	8008574 <I2C_ITError+0x44>
 8008568:	7bfb      	ldrb	r3, [r7, #15]
 800856a:	2b29      	cmp	r3, #41	; 0x29
 800856c:	d002      	beq.n	8008574 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800856e:	7bfb      	ldrb	r3, [r7, #15]
 8008570:	2b2a      	cmp	r3, #42	; 0x2a
 8008572:	d10b      	bne.n	800858c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008574:	2103      	movs	r1, #3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 faee 	bl	8008b58 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2228      	movs	r2, #40	; 0x28
 8008580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a50      	ldr	r2, [pc, #320]	; (80086c8 <I2C_ITError+0x198>)
 8008588:	635a      	str	r2, [r3, #52]	; 0x34
 800858a:	e011      	b.n	80085b0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800858c:	f248 0103 	movw	r1, #32771	; 0x8003
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fae1 	bl	8008b58 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b60      	cmp	r3, #96	; 0x60
 80085a0:	d003      	beq.n	80085aa <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2220      	movs	r2, #32
 80085a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d039      	beq.n	8008632 <I2C_ITError+0x102>
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	2b11      	cmp	r3, #17
 80085c2:	d002      	beq.n	80085ca <I2C_ITError+0x9a>
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2b21      	cmp	r3, #33	; 0x21
 80085c8:	d133      	bne.n	8008632 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085d8:	d107      	bne.n	80085ea <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80085e8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7fe fd04 	bl	8006ffc <HAL_DMA_GetState>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d017      	beq.n	800862a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fe:	4a33      	ldr	r2, [pc, #204]	; (80086cc <I2C_ITError+0x19c>)
 8008600:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860e:	4618      	mov	r0, r3
 8008610:	f7fe fc04 	bl	8006e1c <HAL_DMA_Abort_IT>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d04d      	beq.n	80086b6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008624:	4610      	mov	r0, r2
 8008626:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008628:	e045      	b.n	80086b6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 f850 	bl	80086d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008630:	e041      	b.n	80086b6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008636:	2b00      	cmp	r3, #0
 8008638:	d039      	beq.n	80086ae <I2C_ITError+0x17e>
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	2b12      	cmp	r3, #18
 800863e:	d002      	beq.n	8008646 <I2C_ITError+0x116>
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	2b22      	cmp	r3, #34	; 0x22
 8008644:	d133      	bne.n	80086ae <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008654:	d107      	bne.n	8008666 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008664:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800866a:	4618      	mov	r0, r3
 800866c:	f7fe fcc6 	bl	8006ffc <HAL_DMA_GetState>
 8008670:	4603      	mov	r3, r0
 8008672:	2b01      	cmp	r3, #1
 8008674:	d017      	beq.n	80086a6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800867a:	4a14      	ldr	r2, [pc, #80]	; (80086cc <I2C_ITError+0x19c>)
 800867c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800868a:	4618      	mov	r0, r3
 800868c:	f7fe fbc6 	bl	8006e1c <HAL_DMA_Abort_IT>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d011      	beq.n	80086ba <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80086a0:	4610      	mov	r0, r2
 80086a2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80086a4:	e009      	b.n	80086ba <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f812 	bl	80086d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80086ac:	e005      	b.n	80086ba <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f80e 	bl	80086d0 <I2C_TreatErrorCallback>
  }
}
 80086b4:	e002      	b.n	80086bc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80086b6:	bf00      	nop
 80086b8:	e000      	b.n	80086bc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80086ba:	bf00      	nop
}
 80086bc:	bf00      	nop
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	ffff0000 	.word	0xffff0000
 80086c8:	08007d57 	.word	0x08007d57
 80086cc:	08008767 	.word	0x08008767

080086d0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b60      	cmp	r3, #96	; 0x60
 80086e2:	d10e      	bne.n	8008702 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2220      	movs	r2, #32
 80086e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7ff fb21 	bl	8007d42 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008700:	e009      	b.n	8008716 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f7fc f9c5 	bl	8004aa0 <HAL_I2C_ErrorCallback>
}
 8008716:	bf00      	nop
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800871e:	b480      	push	{r7}
 8008720:	b083      	sub	sp, #12
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	f003 0302 	and.w	r3, r3, #2
 8008730:	2b02      	cmp	r3, #2
 8008732:	d103      	bne.n	800873c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2200      	movs	r2, #0
 800873a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	f003 0301 	and.w	r3, r3, #1
 8008746:	2b01      	cmp	r3, #1
 8008748:	d007      	beq.n	800875a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	699a      	ldr	r2, [r3, #24]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f042 0201 	orr.w	r2, r2, #1
 8008758:	619a      	str	r2, [r3, #24]
  }
}
 800875a:	bf00      	nop
 800875c:	370c      	adds	r7, #12
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b084      	sub	sp, #16
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008772:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008778:	2b00      	cmp	r3, #0
 800877a:	d003      	beq.n	8008784 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008780:	2200      	movs	r2, #0
 8008782:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008790:	2200      	movs	r2, #0
 8008792:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f7ff ff9b 	bl	80086d0 <I2C_TreatErrorCallback>
}
 800879a:	bf00      	nop
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b084      	sub	sp, #16
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	60f8      	str	r0, [r7, #12]
 80087aa:	60b9      	str	r1, [r7, #8]
 80087ac:	603b      	str	r3, [r7, #0]
 80087ae:	4613      	mov	r3, r2
 80087b0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087b2:	e022      	b.n	80087fa <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087ba:	d01e      	beq.n	80087fa <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087bc:	f7fe f864 	bl	8006888 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	683a      	ldr	r2, [r7, #0]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d302      	bcc.n	80087d2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d113      	bne.n	80087fa <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087d6:	f043 0220 	orr.w	r2, r3, #32
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2220      	movs	r2, #32
 80087e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e00f      	b.n	800881a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	699a      	ldr	r2, [r3, #24]
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	4013      	ands	r3, r2
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	429a      	cmp	r2, r3
 8008808:	bf0c      	ite	eq
 800880a:	2301      	moveq	r3, #1
 800880c:	2300      	movne	r3, #0
 800880e:	b2db      	uxtb	r3, r3
 8008810:	461a      	mov	r2, r3
 8008812:	79fb      	ldrb	r3, [r7, #7]
 8008814:	429a      	cmp	r2, r3
 8008816:	d0cd      	beq.n	80087b4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b084      	sub	sp, #16
 8008826:	af00      	add	r7, sp, #0
 8008828:	60f8      	str	r0, [r7, #12]
 800882a:	60b9      	str	r1, [r7, #8]
 800882c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800882e:	e02c      	b.n	800888a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	68b9      	ldr	r1, [r7, #8]
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f000 f871 	bl	800891c <I2C_IsErrorOccurred>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d001      	beq.n	8008844 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e02a      	b.n	800889a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800884a:	d01e      	beq.n	800888a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800884c:	f7fe f81c 	bl	8006888 <HAL_GetTick>
 8008850:	4602      	mov	r2, r0
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	429a      	cmp	r2, r3
 800885a:	d302      	bcc.n	8008862 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d113      	bne.n	800888a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008866:	f043 0220 	orr.w	r2, r3, #32
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2220      	movs	r2, #32
 8008872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e007      	b.n	800889a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	f003 0302 	and.w	r3, r3, #2
 8008894:	2b02      	cmp	r3, #2
 8008896:	d1cb      	bne.n	8008830 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b084      	sub	sp, #16
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	60f8      	str	r0, [r7, #12]
 80088aa:	60b9      	str	r1, [r7, #8]
 80088ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80088ae:	e028      	b.n	8008902 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	68b9      	ldr	r1, [r7, #8]
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 f831 	bl	800891c <I2C_IsErrorOccurred>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e026      	b.n	8008912 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088c4:	f7fd ffe0 	bl	8006888 <HAL_GetTick>
 80088c8:	4602      	mov	r2, r0
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d302      	bcc.n	80088da <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d113      	bne.n	8008902 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088de:	f043 0220 	orr.w	r2, r3, #32
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2220      	movs	r2, #32
 80088ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e007      	b.n	8008912 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	f003 0320 	and.w	r3, r3, #32
 800890c:	2b20      	cmp	r3, #32
 800890e:	d1cf      	bne.n	80088b0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
	...

0800891c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b08a      	sub	sp, #40	; 0x28
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008928:	2300      	movs	r3, #0
 800892a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008936:	2300      	movs	r3, #0
 8008938:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	f003 0310 	and.w	r3, r3, #16
 8008944:	2b00      	cmp	r3, #0
 8008946:	d075      	beq.n	8008a34 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2210      	movs	r2, #16
 800894e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008950:	e056      	b.n	8008a00 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008958:	d052      	beq.n	8008a00 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800895a:	f7fd ff95 	bl	8006888 <HAL_GetTick>
 800895e:	4602      	mov	r2, r0
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	429a      	cmp	r2, r3
 8008968:	d302      	bcc.n	8008970 <I2C_IsErrorOccurred+0x54>
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d147      	bne.n	8008a00 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800897a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008982:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800898e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008992:	d12e      	bne.n	80089f2 <I2C_IsErrorOccurred+0xd6>
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800899a:	d02a      	beq.n	80089f2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800899c:	7cfb      	ldrb	r3, [r7, #19]
 800899e:	2b20      	cmp	r3, #32
 80089a0:	d027      	beq.n	80089f2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	685a      	ldr	r2, [r3, #4]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80089b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80089b2:	f7fd ff69 	bl	8006888 <HAL_GetTick>
 80089b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089b8:	e01b      	b.n	80089f2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80089ba:	f7fd ff65 	bl	8006888 <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	2b19      	cmp	r3, #25
 80089c6:	d914      	bls.n	80089f2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089cc:	f043 0220 	orr.w	r2, r3, #32
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2220      	movs	r2, #32
 80089d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	f003 0320 	and.w	r3, r3, #32
 80089fc:	2b20      	cmp	r3, #32
 80089fe:	d1dc      	bne.n	80089ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	f003 0320 	and.w	r3, r3, #32
 8008a0a:	2b20      	cmp	r3, #32
 8008a0c:	d003      	beq.n	8008a16 <I2C_IsErrorOccurred+0xfa>
 8008a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d09d      	beq.n	8008952 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008a16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d103      	bne.n	8008a26 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2220      	movs	r2, #32
 8008a24:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	f043 0304 	orr.w	r3, r3, #4
 8008a2c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00b      	beq.n	8008a5e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008a46:	6a3b      	ldr	r3, [r7, #32]
 8008a48:	f043 0301 	orr.w	r3, r3, #1
 8008a4c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00b      	beq.n	8008a80 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	f043 0308 	orr.w	r3, r3, #8
 8008a6e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00b      	beq.n	8008aa2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008a8a:	6a3b      	ldr	r3, [r7, #32]
 8008a8c:	f043 0302 	orr.w	r3, r3, #2
 8008a90:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008aa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d01c      	beq.n	8008ae4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f7ff fe37 	bl	800871e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6859      	ldr	r1, [r3, #4]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	4b0d      	ldr	r3, [pc, #52]	; (8008af0 <I2C_IsErrorOccurred+0x1d4>)
 8008abc:	400b      	ands	r3, r1
 8008abe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ac4:	6a3b      	ldr	r3, [r7, #32]
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2220      	movs	r2, #32
 8008ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3728      	adds	r7, #40	; 0x28
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	fe00e800 	.word	0xfe00e800

08008af4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b087      	sub	sp, #28
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	607b      	str	r3, [r7, #4]
 8008afe:	460b      	mov	r3, r1
 8008b00:	817b      	strh	r3, [r7, #10]
 8008b02:	4613      	mov	r3, r2
 8008b04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b06:	897b      	ldrh	r3, [r7, #10]
 8008b08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b0c:	7a7b      	ldrb	r3, [r7, #9]
 8008b0e:	041b      	lsls	r3, r3, #16
 8008b10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b14:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b1a:	6a3b      	ldr	r3, [r7, #32]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b22:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685a      	ldr	r2, [r3, #4]
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
 8008b2c:	0d5b      	lsrs	r3, r3, #21
 8008b2e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008b32:	4b08      	ldr	r3, [pc, #32]	; (8008b54 <I2C_TransferConfig+0x60>)
 8008b34:	430b      	orrs	r3, r1
 8008b36:	43db      	mvns	r3, r3
 8008b38:	ea02 0103 	and.w	r1, r2, r3
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	430a      	orrs	r2, r1
 8008b44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008b46:	bf00      	nop
 8008b48:	371c      	adds	r7, #28
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	03ff63ff 	.word	0x03ff63ff

08008b58 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	460b      	mov	r3, r1
 8008b62:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008b64:	2300      	movs	r3, #0
 8008b66:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008b68:	887b      	ldrh	r3, [r7, #2]
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00f      	beq.n	8008b92 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008b78:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008b86:	2b28      	cmp	r3, #40	; 0x28
 8008b88:	d003      	beq.n	8008b92 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008b90:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008b92:	887b      	ldrh	r3, [r7, #2]
 8008b94:	f003 0302 	and.w	r3, r3, #2
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00f      	beq.n	8008bbc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8008ba2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008bb0:	2b28      	cmp	r3, #40	; 0x28
 8008bb2:	d003      	beq.n	8008bbc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008bba:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008bbc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	da03      	bge.n	8008bcc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008bca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008bcc:	887b      	ldrh	r3, [r7, #2]
 8008bce:	2b10      	cmp	r3, #16
 8008bd0:	d103      	bne.n	8008bda <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008bd8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008bda:	887b      	ldrh	r3, [r7, #2]
 8008bdc:	2b20      	cmp	r3, #32
 8008bde:	d103      	bne.n	8008be8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f043 0320 	orr.w	r3, r3, #32
 8008be6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008be8:	887b      	ldrh	r3, [r7, #2]
 8008bea:	2b40      	cmp	r3, #64	; 0x40
 8008bec:	d103      	bne.n	8008bf6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bf4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6819      	ldr	r1, [r3, #0]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	43da      	mvns	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	400a      	ands	r2, r1
 8008c06:	601a      	str	r2, [r3, #0]
}
 8008c08:	bf00      	nop
 8008c0a:	3714      	adds	r7, #20
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b20      	cmp	r3, #32
 8008c28:	d138      	bne.n	8008c9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d101      	bne.n	8008c38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008c34:	2302      	movs	r3, #2
 8008c36:	e032      	b.n	8008c9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2224      	movs	r2, #36	; 0x24
 8008c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f022 0201 	bic.w	r2, r2, #1
 8008c56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	6819      	ldr	r1, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	430a      	orrs	r2, r1
 8008c76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f042 0201 	orr.w	r2, r2, #1
 8008c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2220      	movs	r2, #32
 8008c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	e000      	b.n	8008c9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008c9c:	2302      	movs	r3, #2
  }
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b085      	sub	sp, #20
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
 8008cb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b20      	cmp	r3, #32
 8008cbe:	d139      	bne.n	8008d34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d101      	bne.n	8008cce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008cca:	2302      	movs	r3, #2
 8008ccc:	e033      	b.n	8008d36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2224      	movs	r2, #36	; 0x24
 8008cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f022 0201 	bic.w	r2, r2, #1
 8008cec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008cfc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	021b      	lsls	r3, r3, #8
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f042 0201 	orr.w	r2, r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2220      	movs	r2, #32
 8008d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	e000      	b.n	8008d36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008d34:	2302      	movs	r3, #2
  }
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3714      	adds	r7, #20
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
	...

08008d44 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d4c:	4b0b      	ldr	r3, [pc, #44]	; (8008d7c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d50:	4a0a      	ldr	r2, [pc, #40]	; (8008d7c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008d52:	f043 0301 	orr.w	r3, r3, #1
 8008d56:	6613      	str	r3, [r2, #96]	; 0x60
 8008d58:	4b08      	ldr	r3, [pc, #32]	; (8008d7c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d5c:	f003 0301 	and.w	r3, r3, #1
 8008d60:	60fb      	str	r3, [r7, #12]
 8008d62:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8008d64:	4b06      	ldr	r3, [pc, #24]	; (8008d80 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8008d66:	685a      	ldr	r2, [r3, #4]
 8008d68:	4905      	ldr	r1, [pc, #20]	; (8008d80 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	604b      	str	r3, [r1, #4]
}
 8008d70:	bf00      	nop
 8008d72:	3714      	adds	r7, #20
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	40021000 	.word	0x40021000
 8008d80:	40010000 	.word	0x40010000

08008d84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008d84:	b480      	push	{r7}
 8008d86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008d88:	4b04      	ldr	r3, [pc, #16]	; (8008d9c <HAL_PWREx_GetVoltageRange+0x18>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	40007000 	.word	0x40007000

08008da0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dae:	d130      	bne.n	8008e12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008db0:	4b23      	ldr	r3, [pc, #140]	; (8008e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dbc:	d038      	beq.n	8008e30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008dbe:	4b20      	ldr	r3, [pc, #128]	; (8008e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008dc6:	4a1e      	ldr	r2, [pc, #120]	; (8008e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008dc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008dcc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008dce:	4b1d      	ldr	r3, [pc, #116]	; (8008e44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2232      	movs	r2, #50	; 0x32
 8008dd4:	fb02 f303 	mul.w	r3, r2, r3
 8008dd8:	4a1b      	ldr	r2, [pc, #108]	; (8008e48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008dda:	fba2 2303 	umull	r2, r3, r2, r3
 8008dde:	0c9b      	lsrs	r3, r3, #18
 8008de0:	3301      	adds	r3, #1
 8008de2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008de4:	e002      	b.n	8008dec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	3b01      	subs	r3, #1
 8008dea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008dec:	4b14      	ldr	r3, [pc, #80]	; (8008e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008dee:	695b      	ldr	r3, [r3, #20]
 8008df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008df8:	d102      	bne.n	8008e00 <HAL_PWREx_ControlVoltageScaling+0x60>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1f2      	bne.n	8008de6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008e00:	4b0f      	ldr	r3, [pc, #60]	; (8008e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008e02:	695b      	ldr	r3, [r3, #20]
 8008e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e0c:	d110      	bne.n	8008e30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e00f      	b.n	8008e32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008e12:	4b0b      	ldr	r3, [pc, #44]	; (8008e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e1e:	d007      	beq.n	8008e30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008e20:	4b07      	ldr	r3, [pc, #28]	; (8008e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008e28:	4a05      	ldr	r2, [pc, #20]	; (8008e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3714      	adds	r7, #20
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	40007000 	.word	0x40007000
 8008e44:	200001e8 	.word	0x200001e8
 8008e48:	431bde83 	.word	0x431bde83

08008e4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b088      	sub	sp, #32
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d101      	bne.n	8008e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e3ca      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e5e:	4b97      	ldr	r3, [pc, #604]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	f003 030c 	and.w	r3, r3, #12
 8008e66:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008e68:	4b94      	ldr	r3, [pc, #592]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	f003 0303 	and.w	r3, r3, #3
 8008e70:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f003 0310 	and.w	r3, r3, #16
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f000 80e4 	beq.w	8009048 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d007      	beq.n	8008e96 <HAL_RCC_OscConfig+0x4a>
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	2b0c      	cmp	r3, #12
 8008e8a:	f040 808b 	bne.w	8008fa4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	f040 8087 	bne.w	8008fa4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008e96:	4b89      	ldr	r3, [pc, #548]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 0302 	and.w	r3, r3, #2
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d005      	beq.n	8008eae <HAL_RCC_OscConfig+0x62>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d101      	bne.n	8008eae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e3a2      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a1a      	ldr	r2, [r3, #32]
 8008eb2:	4b82      	ldr	r3, [pc, #520]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 0308 	and.w	r3, r3, #8
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d004      	beq.n	8008ec8 <HAL_RCC_OscConfig+0x7c>
 8008ebe:	4b7f      	ldr	r3, [pc, #508]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ec6:	e005      	b.n	8008ed4 <HAL_RCC_OscConfig+0x88>
 8008ec8:	4b7c      	ldr	r3, [pc, #496]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ece:	091b      	lsrs	r3, r3, #4
 8008ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d223      	bcs.n	8008f20 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a1b      	ldr	r3, [r3, #32]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 fd55 	bl	800998c <RCC_SetFlashLatencyFromMSIRange>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d001      	beq.n	8008eec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e383      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008eec:	4b73      	ldr	r3, [pc, #460]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a72      	ldr	r2, [pc, #456]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008ef2:	f043 0308 	orr.w	r3, r3, #8
 8008ef6:	6013      	str	r3, [r2, #0]
 8008ef8:	4b70      	ldr	r3, [pc, #448]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a1b      	ldr	r3, [r3, #32]
 8008f04:	496d      	ldr	r1, [pc, #436]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008f06:	4313      	orrs	r3, r2
 8008f08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008f0a:	4b6c      	ldr	r3, [pc, #432]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	69db      	ldr	r3, [r3, #28]
 8008f16:	021b      	lsls	r3, r3, #8
 8008f18:	4968      	ldr	r1, [pc, #416]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	604b      	str	r3, [r1, #4]
 8008f1e:	e025      	b.n	8008f6c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008f20:	4b66      	ldr	r3, [pc, #408]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a65      	ldr	r2, [pc, #404]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008f26:	f043 0308 	orr.w	r3, r3, #8
 8008f2a:	6013      	str	r3, [r2, #0]
 8008f2c:	4b63      	ldr	r3, [pc, #396]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6a1b      	ldr	r3, [r3, #32]
 8008f38:	4960      	ldr	r1, [pc, #384]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008f3e:	4b5f      	ldr	r3, [pc, #380]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	69db      	ldr	r3, [r3, #28]
 8008f4a:	021b      	lsls	r3, r3, #8
 8008f4c:	495b      	ldr	r1, [pc, #364]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d109      	bne.n	8008f6c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a1b      	ldr	r3, [r3, #32]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f000 fd15 	bl	800998c <RCC_SetFlashLatencyFromMSIRange>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d001      	beq.n	8008f6c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e343      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008f6c:	f000 fc4a 	bl	8009804 <HAL_RCC_GetSysClockFreq>
 8008f70:	4602      	mov	r2, r0
 8008f72:	4b52      	ldr	r3, [pc, #328]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	091b      	lsrs	r3, r3, #4
 8008f78:	f003 030f 	and.w	r3, r3, #15
 8008f7c:	4950      	ldr	r1, [pc, #320]	; (80090c0 <HAL_RCC_OscConfig+0x274>)
 8008f7e:	5ccb      	ldrb	r3, [r1, r3]
 8008f80:	f003 031f 	and.w	r3, r3, #31
 8008f84:	fa22 f303 	lsr.w	r3, r2, r3
 8008f88:	4a4e      	ldr	r2, [pc, #312]	; (80090c4 <HAL_RCC_OscConfig+0x278>)
 8008f8a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008f8c:	4b4e      	ldr	r3, [pc, #312]	; (80090c8 <HAL_RCC_OscConfig+0x27c>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fd fc29 	bl	80067e8 <HAL_InitTick>
 8008f96:	4603      	mov	r3, r0
 8008f98:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d052      	beq.n	8009046 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
 8008fa2:	e327      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d032      	beq.n	8009012 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008fac:	4b43      	ldr	r3, [pc, #268]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a42      	ldr	r2, [pc, #264]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008fb2:	f043 0301 	orr.w	r3, r3, #1
 8008fb6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008fb8:	f7fd fc66 	bl	8006888 <HAL_GetTick>
 8008fbc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008fbe:	e008      	b.n	8008fd2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008fc0:	f7fd fc62 	bl	8006888 <HAL_GetTick>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d901      	bls.n	8008fd2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e310      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008fd2:	4b3a      	ldr	r3, [pc, #232]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 0302 	and.w	r3, r3, #2
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d0f0      	beq.n	8008fc0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008fde:	4b37      	ldr	r3, [pc, #220]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a36      	ldr	r2, [pc, #216]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008fe4:	f043 0308 	orr.w	r3, r3, #8
 8008fe8:	6013      	str	r3, [r2, #0]
 8008fea:	4b34      	ldr	r3, [pc, #208]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	4931      	ldr	r1, [pc, #196]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008ffc:	4b2f      	ldr	r3, [pc, #188]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	69db      	ldr	r3, [r3, #28]
 8009008:	021b      	lsls	r3, r3, #8
 800900a:	492c      	ldr	r1, [pc, #176]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 800900c:	4313      	orrs	r3, r2
 800900e:	604b      	str	r3, [r1, #4]
 8009010:	e01a      	b.n	8009048 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009012:	4b2a      	ldr	r3, [pc, #168]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a29      	ldr	r2, [pc, #164]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8009018:	f023 0301 	bic.w	r3, r3, #1
 800901c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800901e:	f7fd fc33 	bl	8006888 <HAL_GetTick>
 8009022:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009024:	e008      	b.n	8009038 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009026:	f7fd fc2f 	bl	8006888 <HAL_GetTick>
 800902a:	4602      	mov	r2, r0
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	1ad3      	subs	r3, r2, r3
 8009030:	2b02      	cmp	r3, #2
 8009032:	d901      	bls.n	8009038 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8009034:	2303      	movs	r3, #3
 8009036:	e2dd      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009038:	4b20      	ldr	r3, [pc, #128]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 0302 	and.w	r3, r3, #2
 8009040:	2b00      	cmp	r3, #0
 8009042:	d1f0      	bne.n	8009026 <HAL_RCC_OscConfig+0x1da>
 8009044:	e000      	b.n	8009048 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009046:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0301 	and.w	r3, r3, #1
 8009050:	2b00      	cmp	r3, #0
 8009052:	d074      	beq.n	800913e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	2b08      	cmp	r3, #8
 8009058:	d005      	beq.n	8009066 <HAL_RCC_OscConfig+0x21a>
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	2b0c      	cmp	r3, #12
 800905e:	d10e      	bne.n	800907e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	2b03      	cmp	r3, #3
 8009064:	d10b      	bne.n	800907e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009066:	4b15      	ldr	r3, [pc, #84]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800906e:	2b00      	cmp	r3, #0
 8009070:	d064      	beq.n	800913c <HAL_RCC_OscConfig+0x2f0>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d160      	bne.n	800913c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e2ba      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009086:	d106      	bne.n	8009096 <HAL_RCC_OscConfig+0x24a>
 8009088:	4b0c      	ldr	r3, [pc, #48]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a0b      	ldr	r2, [pc, #44]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 800908e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009092:	6013      	str	r3, [r2, #0]
 8009094:	e026      	b.n	80090e4 <HAL_RCC_OscConfig+0x298>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800909e:	d115      	bne.n	80090cc <HAL_RCC_OscConfig+0x280>
 80090a0:	4b06      	ldr	r3, [pc, #24]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a05      	ldr	r2, [pc, #20]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 80090a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80090aa:	6013      	str	r3, [r2, #0]
 80090ac:	4b03      	ldr	r3, [pc, #12]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a02      	ldr	r2, [pc, #8]	; (80090bc <HAL_RCC_OscConfig+0x270>)
 80090b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090b6:	6013      	str	r3, [r2, #0]
 80090b8:	e014      	b.n	80090e4 <HAL_RCC_OscConfig+0x298>
 80090ba:	bf00      	nop
 80090bc:	40021000 	.word	0x40021000
 80090c0:	080177fc 	.word	0x080177fc
 80090c4:	200001e8 	.word	0x200001e8
 80090c8:	20000218 	.word	0x20000218
 80090cc:	4ba0      	ldr	r3, [pc, #640]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a9f      	ldr	r2, [pc, #636]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 80090d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090d6:	6013      	str	r3, [r2, #0]
 80090d8:	4b9d      	ldr	r3, [pc, #628]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a9c      	ldr	r2, [pc, #624]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 80090de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d013      	beq.n	8009114 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090ec:	f7fd fbcc 	bl	8006888 <HAL_GetTick>
 80090f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80090f2:	e008      	b.n	8009106 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090f4:	f7fd fbc8 	bl	8006888 <HAL_GetTick>
 80090f8:	4602      	mov	r2, r0
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	2b64      	cmp	r3, #100	; 0x64
 8009100:	d901      	bls.n	8009106 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8009102:	2303      	movs	r3, #3
 8009104:	e276      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009106:	4b92      	ldr	r3, [pc, #584]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800910e:	2b00      	cmp	r3, #0
 8009110:	d0f0      	beq.n	80090f4 <HAL_RCC_OscConfig+0x2a8>
 8009112:	e014      	b.n	800913e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009114:	f7fd fbb8 	bl	8006888 <HAL_GetTick>
 8009118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800911a:	e008      	b.n	800912e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800911c:	f7fd fbb4 	bl	8006888 <HAL_GetTick>
 8009120:	4602      	mov	r2, r0
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	2b64      	cmp	r3, #100	; 0x64
 8009128:	d901      	bls.n	800912e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800912a:	2303      	movs	r3, #3
 800912c:	e262      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800912e:	4b88      	ldr	r3, [pc, #544]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1f0      	bne.n	800911c <HAL_RCC_OscConfig+0x2d0>
 800913a:	e000      	b.n	800913e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800913c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 0302 	and.w	r3, r3, #2
 8009146:	2b00      	cmp	r3, #0
 8009148:	d060      	beq.n	800920c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	2b04      	cmp	r3, #4
 800914e:	d005      	beq.n	800915c <HAL_RCC_OscConfig+0x310>
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	2b0c      	cmp	r3, #12
 8009154:	d119      	bne.n	800918a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	2b02      	cmp	r3, #2
 800915a:	d116      	bne.n	800918a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800915c:	4b7c      	ldr	r3, [pc, #496]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009164:	2b00      	cmp	r3, #0
 8009166:	d005      	beq.n	8009174 <HAL_RCC_OscConfig+0x328>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d101      	bne.n	8009174 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e23f      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009174:	4b76      	ldr	r3, [pc, #472]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	691b      	ldr	r3, [r3, #16]
 8009180:	061b      	lsls	r3, r3, #24
 8009182:	4973      	ldr	r1, [pc, #460]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 8009184:	4313      	orrs	r3, r2
 8009186:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009188:	e040      	b.n	800920c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d023      	beq.n	80091da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009192:	4b6f      	ldr	r3, [pc, #444]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a6e      	ldr	r2, [pc, #440]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 8009198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800919c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800919e:	f7fd fb73 	bl	8006888 <HAL_GetTick>
 80091a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091a4:	e008      	b.n	80091b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091a6:	f7fd fb6f 	bl	8006888 <HAL_GetTick>
 80091aa:	4602      	mov	r2, r0
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	1ad3      	subs	r3, r2, r3
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d901      	bls.n	80091b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80091b4:	2303      	movs	r3, #3
 80091b6:	e21d      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091b8:	4b65      	ldr	r3, [pc, #404]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d0f0      	beq.n	80091a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091c4:	4b62      	ldr	r3, [pc, #392]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	061b      	lsls	r3, r3, #24
 80091d2:	495f      	ldr	r1, [pc, #380]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 80091d4:	4313      	orrs	r3, r2
 80091d6:	604b      	str	r3, [r1, #4]
 80091d8:	e018      	b.n	800920c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091da:	4b5d      	ldr	r3, [pc, #372]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a5c      	ldr	r2, [pc, #368]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 80091e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091e6:	f7fd fb4f 	bl	8006888 <HAL_GetTick>
 80091ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80091ec:	e008      	b.n	8009200 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091ee:	f7fd fb4b 	bl	8006888 <HAL_GetTick>
 80091f2:	4602      	mov	r2, r0
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d901      	bls.n	8009200 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80091fc:	2303      	movs	r3, #3
 80091fe:	e1f9      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009200:	4b53      	ldr	r3, [pc, #332]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1f0      	bne.n	80091ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 0308 	and.w	r3, r3, #8
 8009214:	2b00      	cmp	r3, #0
 8009216:	d03c      	beq.n	8009292 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	695b      	ldr	r3, [r3, #20]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d01c      	beq.n	800925a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009220:	4b4b      	ldr	r3, [pc, #300]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 8009222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009226:	4a4a      	ldr	r2, [pc, #296]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 8009228:	f043 0301 	orr.w	r3, r3, #1
 800922c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009230:	f7fd fb2a 	bl	8006888 <HAL_GetTick>
 8009234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009236:	e008      	b.n	800924a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009238:	f7fd fb26 	bl	8006888 <HAL_GetTick>
 800923c:	4602      	mov	r2, r0
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	2b02      	cmp	r3, #2
 8009244:	d901      	bls.n	800924a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	e1d4      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800924a:	4b41      	ldr	r3, [pc, #260]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 800924c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009250:	f003 0302 	and.w	r3, r3, #2
 8009254:	2b00      	cmp	r3, #0
 8009256:	d0ef      	beq.n	8009238 <HAL_RCC_OscConfig+0x3ec>
 8009258:	e01b      	b.n	8009292 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800925a:	4b3d      	ldr	r3, [pc, #244]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 800925c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009260:	4a3b      	ldr	r2, [pc, #236]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 8009262:	f023 0301 	bic.w	r3, r3, #1
 8009266:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800926a:	f7fd fb0d 	bl	8006888 <HAL_GetTick>
 800926e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009270:	e008      	b.n	8009284 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009272:	f7fd fb09 	bl	8006888 <HAL_GetTick>
 8009276:	4602      	mov	r2, r0
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	2b02      	cmp	r3, #2
 800927e:	d901      	bls.n	8009284 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009280:	2303      	movs	r3, #3
 8009282:	e1b7      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009284:	4b32      	ldr	r3, [pc, #200]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 8009286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800928a:	f003 0302 	and.w	r3, r3, #2
 800928e:	2b00      	cmp	r3, #0
 8009290:	d1ef      	bne.n	8009272 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 0304 	and.w	r3, r3, #4
 800929a:	2b00      	cmp	r3, #0
 800929c:	f000 80a6 	beq.w	80093ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092a0:	2300      	movs	r3, #0
 80092a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80092a4:	4b2a      	ldr	r3, [pc, #168]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 80092a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10d      	bne.n	80092cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092b0:	4b27      	ldr	r3, [pc, #156]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 80092b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092b4:	4a26      	ldr	r2, [pc, #152]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 80092b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092ba:	6593      	str	r3, [r2, #88]	; 0x58
 80092bc:	4b24      	ldr	r3, [pc, #144]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 80092be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092c4:	60bb      	str	r3, [r7, #8]
 80092c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092c8:	2301      	movs	r3, #1
 80092ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092cc:	4b21      	ldr	r3, [pc, #132]	; (8009354 <HAL_RCC_OscConfig+0x508>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d118      	bne.n	800930a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092d8:	4b1e      	ldr	r3, [pc, #120]	; (8009354 <HAL_RCC_OscConfig+0x508>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a1d      	ldr	r2, [pc, #116]	; (8009354 <HAL_RCC_OscConfig+0x508>)
 80092de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80092e4:	f7fd fad0 	bl	8006888 <HAL_GetTick>
 80092e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092ea:	e008      	b.n	80092fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092ec:	f7fd facc 	bl	8006888 <HAL_GetTick>
 80092f0:	4602      	mov	r2, r0
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	1ad3      	subs	r3, r2, r3
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d901      	bls.n	80092fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80092fa:	2303      	movs	r3, #3
 80092fc:	e17a      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092fe:	4b15      	ldr	r3, [pc, #84]	; (8009354 <HAL_RCC_OscConfig+0x508>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009306:	2b00      	cmp	r3, #0
 8009308:	d0f0      	beq.n	80092ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d108      	bne.n	8009324 <HAL_RCC_OscConfig+0x4d8>
 8009312:	4b0f      	ldr	r3, [pc, #60]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 8009314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009318:	4a0d      	ldr	r2, [pc, #52]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 800931a:	f043 0301 	orr.w	r3, r3, #1
 800931e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009322:	e029      	b.n	8009378 <HAL_RCC_OscConfig+0x52c>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	2b05      	cmp	r3, #5
 800932a:	d115      	bne.n	8009358 <HAL_RCC_OscConfig+0x50c>
 800932c:	4b08      	ldr	r3, [pc, #32]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 800932e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009332:	4a07      	ldr	r2, [pc, #28]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 8009334:	f043 0304 	orr.w	r3, r3, #4
 8009338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800933c:	4b04      	ldr	r3, [pc, #16]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 800933e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009342:	4a03      	ldr	r2, [pc, #12]	; (8009350 <HAL_RCC_OscConfig+0x504>)
 8009344:	f043 0301 	orr.w	r3, r3, #1
 8009348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800934c:	e014      	b.n	8009378 <HAL_RCC_OscConfig+0x52c>
 800934e:	bf00      	nop
 8009350:	40021000 	.word	0x40021000
 8009354:	40007000 	.word	0x40007000
 8009358:	4b9c      	ldr	r3, [pc, #624]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 800935a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800935e:	4a9b      	ldr	r2, [pc, #620]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 8009360:	f023 0301 	bic.w	r3, r3, #1
 8009364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009368:	4b98      	ldr	r3, [pc, #608]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 800936a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800936e:	4a97      	ldr	r2, [pc, #604]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 8009370:	f023 0304 	bic.w	r3, r3, #4
 8009374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d016      	beq.n	80093ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009380:	f7fd fa82 	bl	8006888 <HAL_GetTick>
 8009384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009386:	e00a      	b.n	800939e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009388:	f7fd fa7e 	bl	8006888 <HAL_GetTick>
 800938c:	4602      	mov	r2, r0
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	f241 3288 	movw	r2, #5000	; 0x1388
 8009396:	4293      	cmp	r3, r2
 8009398:	d901      	bls.n	800939e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800939a:	2303      	movs	r3, #3
 800939c:	e12a      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800939e:	4b8b      	ldr	r3, [pc, #556]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 80093a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093a4:	f003 0302 	and.w	r3, r3, #2
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d0ed      	beq.n	8009388 <HAL_RCC_OscConfig+0x53c>
 80093ac:	e015      	b.n	80093da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093ae:	f7fd fa6b 	bl	8006888 <HAL_GetTick>
 80093b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80093b4:	e00a      	b.n	80093cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093b6:	f7fd fa67 	bl	8006888 <HAL_GetTick>
 80093ba:	4602      	mov	r2, r0
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d901      	bls.n	80093cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80093c8:	2303      	movs	r3, #3
 80093ca:	e113      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80093cc:	4b7f      	ldr	r3, [pc, #508]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 80093ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093d2:	f003 0302 	and.w	r3, r3, #2
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1ed      	bne.n	80093b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80093da:	7ffb      	ldrb	r3, [r7, #31]
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d105      	bne.n	80093ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093e0:	4b7a      	ldr	r3, [pc, #488]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 80093e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093e4:	4a79      	ldr	r2, [pc, #484]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 80093e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093ea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f000 80fe 	beq.w	80095f2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	f040 80d0 	bne.w	80095a0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009400:	4b72      	ldr	r3, [pc, #456]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	f003 0203 	and.w	r2, r3, #3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009410:	429a      	cmp	r2, r3
 8009412:	d130      	bne.n	8009476 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800941e:	3b01      	subs	r3, #1
 8009420:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009422:	429a      	cmp	r2, r3
 8009424:	d127      	bne.n	8009476 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009430:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009432:	429a      	cmp	r2, r3
 8009434:	d11f      	bne.n	8009476 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009440:	2a07      	cmp	r2, #7
 8009442:	bf14      	ite	ne
 8009444:	2201      	movne	r2, #1
 8009446:	2200      	moveq	r2, #0
 8009448:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800944a:	4293      	cmp	r3, r2
 800944c:	d113      	bne.n	8009476 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009458:	085b      	lsrs	r3, r3, #1
 800945a:	3b01      	subs	r3, #1
 800945c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800945e:	429a      	cmp	r2, r3
 8009460:	d109      	bne.n	8009476 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946c:	085b      	lsrs	r3, r3, #1
 800946e:	3b01      	subs	r3, #1
 8009470:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009472:	429a      	cmp	r2, r3
 8009474:	d06e      	beq.n	8009554 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	2b0c      	cmp	r3, #12
 800947a:	d069      	beq.n	8009550 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800947c:	4b53      	ldr	r3, [pc, #332]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009484:	2b00      	cmp	r3, #0
 8009486:	d105      	bne.n	8009494 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009488:	4b50      	ldr	r3, [pc, #320]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009490:	2b00      	cmp	r3, #0
 8009492:	d001      	beq.n	8009498 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	e0ad      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009498:	4b4c      	ldr	r3, [pc, #304]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a4b      	ldr	r2, [pc, #300]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 800949e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80094a4:	f7fd f9f0 	bl	8006888 <HAL_GetTick>
 80094a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094aa:	e008      	b.n	80094be <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094ac:	f7fd f9ec 	bl	8006888 <HAL_GetTick>
 80094b0:	4602      	mov	r2, r0
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	1ad3      	subs	r3, r2, r3
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d901      	bls.n	80094be <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80094ba:	2303      	movs	r3, #3
 80094bc:	e09a      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094be:	4b43      	ldr	r3, [pc, #268]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1f0      	bne.n	80094ac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80094ca:	4b40      	ldr	r3, [pc, #256]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 80094cc:	68da      	ldr	r2, [r3, #12]
 80094ce:	4b40      	ldr	r3, [pc, #256]	; (80095d0 <HAL_RCC_OscConfig+0x784>)
 80094d0:	4013      	ands	r3, r2
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80094da:	3a01      	subs	r2, #1
 80094dc:	0112      	lsls	r2, r2, #4
 80094de:	4311      	orrs	r1, r2
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80094e4:	0212      	lsls	r2, r2, #8
 80094e6:	4311      	orrs	r1, r2
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80094ec:	0852      	lsrs	r2, r2, #1
 80094ee:	3a01      	subs	r2, #1
 80094f0:	0552      	lsls	r2, r2, #21
 80094f2:	4311      	orrs	r1, r2
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80094f8:	0852      	lsrs	r2, r2, #1
 80094fa:	3a01      	subs	r2, #1
 80094fc:	0652      	lsls	r2, r2, #25
 80094fe:	4311      	orrs	r1, r2
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009504:	0912      	lsrs	r2, r2, #4
 8009506:	0452      	lsls	r2, r2, #17
 8009508:	430a      	orrs	r2, r1
 800950a:	4930      	ldr	r1, [pc, #192]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 800950c:	4313      	orrs	r3, r2
 800950e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009510:	4b2e      	ldr	r3, [pc, #184]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a2d      	ldr	r2, [pc, #180]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 8009516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800951a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800951c:	4b2b      	ldr	r3, [pc, #172]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	4a2a      	ldr	r2, [pc, #168]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 8009522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009526:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009528:	f7fd f9ae 	bl	8006888 <HAL_GetTick>
 800952c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800952e:	e008      	b.n	8009542 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009530:	f7fd f9aa 	bl	8006888 <HAL_GetTick>
 8009534:	4602      	mov	r2, r0
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	2b02      	cmp	r3, #2
 800953c:	d901      	bls.n	8009542 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800953e:	2303      	movs	r3, #3
 8009540:	e058      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009542:	4b22      	ldr	r3, [pc, #136]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800954a:	2b00      	cmp	r3, #0
 800954c:	d0f0      	beq.n	8009530 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800954e:	e050      	b.n	80095f2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	e04f      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009554:	4b1d      	ldr	r3, [pc, #116]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800955c:	2b00      	cmp	r3, #0
 800955e:	d148      	bne.n	80095f2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009560:	4b1a      	ldr	r3, [pc, #104]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a19      	ldr	r2, [pc, #100]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 8009566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800956a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800956c:	4b17      	ldr	r3, [pc, #92]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	4a16      	ldr	r2, [pc, #88]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 8009572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009576:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009578:	f7fd f986 	bl	8006888 <HAL_GetTick>
 800957c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800957e:	e008      	b.n	8009592 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009580:	f7fd f982 	bl	8006888 <HAL_GetTick>
 8009584:	4602      	mov	r2, r0
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	2b02      	cmp	r3, #2
 800958c:	d901      	bls.n	8009592 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800958e:	2303      	movs	r3, #3
 8009590:	e030      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009592:	4b0e      	ldr	r3, [pc, #56]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800959a:	2b00      	cmp	r3, #0
 800959c:	d0f0      	beq.n	8009580 <HAL_RCC_OscConfig+0x734>
 800959e:	e028      	b.n	80095f2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	2b0c      	cmp	r3, #12
 80095a4:	d023      	beq.n	80095ee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095a6:	4b09      	ldr	r3, [pc, #36]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a08      	ldr	r2, [pc, #32]	; (80095cc <HAL_RCC_OscConfig+0x780>)
 80095ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095b2:	f7fd f969 	bl	8006888 <HAL_GetTick>
 80095b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095b8:	e00c      	b.n	80095d4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095ba:	f7fd f965 	bl	8006888 <HAL_GetTick>
 80095be:	4602      	mov	r2, r0
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d905      	bls.n	80095d4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80095c8:	2303      	movs	r3, #3
 80095ca:	e013      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
 80095cc:	40021000 	.word	0x40021000
 80095d0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095d4:	4b09      	ldr	r3, [pc, #36]	; (80095fc <HAL_RCC_OscConfig+0x7b0>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1ec      	bne.n	80095ba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80095e0:	4b06      	ldr	r3, [pc, #24]	; (80095fc <HAL_RCC_OscConfig+0x7b0>)
 80095e2:	68da      	ldr	r2, [r3, #12]
 80095e4:	4905      	ldr	r1, [pc, #20]	; (80095fc <HAL_RCC_OscConfig+0x7b0>)
 80095e6:	4b06      	ldr	r3, [pc, #24]	; (8009600 <HAL_RCC_OscConfig+0x7b4>)
 80095e8:	4013      	ands	r3, r2
 80095ea:	60cb      	str	r3, [r1, #12]
 80095ec:	e001      	b.n	80095f2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e000      	b.n	80095f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3720      	adds	r7, #32
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	40021000 	.word	0x40021000
 8009600:	feeefffc 	.word	0xfeeefffc

08009604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d101      	bne.n	8009618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	e0e7      	b.n	80097e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009618:	4b75      	ldr	r3, [pc, #468]	; (80097f0 <HAL_RCC_ClockConfig+0x1ec>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 0307 	and.w	r3, r3, #7
 8009620:	683a      	ldr	r2, [r7, #0]
 8009622:	429a      	cmp	r2, r3
 8009624:	d910      	bls.n	8009648 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009626:	4b72      	ldr	r3, [pc, #456]	; (80097f0 <HAL_RCC_ClockConfig+0x1ec>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f023 0207 	bic.w	r2, r3, #7
 800962e:	4970      	ldr	r1, [pc, #448]	; (80097f0 <HAL_RCC_ClockConfig+0x1ec>)
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	4313      	orrs	r3, r2
 8009634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009636:	4b6e      	ldr	r3, [pc, #440]	; (80097f0 <HAL_RCC_ClockConfig+0x1ec>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 0307 	and.w	r3, r3, #7
 800963e:	683a      	ldr	r2, [r7, #0]
 8009640:	429a      	cmp	r2, r3
 8009642:	d001      	beq.n	8009648 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	e0cf      	b.n	80097e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f003 0302 	and.w	r3, r3, #2
 8009650:	2b00      	cmp	r3, #0
 8009652:	d010      	beq.n	8009676 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	689a      	ldr	r2, [r3, #8]
 8009658:	4b66      	ldr	r3, [pc, #408]	; (80097f4 <HAL_RCC_ClockConfig+0x1f0>)
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009660:	429a      	cmp	r2, r3
 8009662:	d908      	bls.n	8009676 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009664:	4b63      	ldr	r3, [pc, #396]	; (80097f4 <HAL_RCC_ClockConfig+0x1f0>)
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	4960      	ldr	r1, [pc, #384]	; (80097f4 <HAL_RCC_ClockConfig+0x1f0>)
 8009672:	4313      	orrs	r3, r2
 8009674:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f003 0301 	and.w	r3, r3, #1
 800967e:	2b00      	cmp	r3, #0
 8009680:	d04c      	beq.n	800971c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	2b03      	cmp	r3, #3
 8009688:	d107      	bne.n	800969a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800968a:	4b5a      	ldr	r3, [pc, #360]	; (80097f4 <HAL_RCC_ClockConfig+0x1f0>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009692:	2b00      	cmp	r3, #0
 8009694:	d121      	bne.n	80096da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e0a6      	b.n	80097e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d107      	bne.n	80096b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80096a2:	4b54      	ldr	r3, [pc, #336]	; (80097f4 <HAL_RCC_ClockConfig+0x1f0>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d115      	bne.n	80096da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	e09a      	b.n	80097e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d107      	bne.n	80096ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80096ba:	4b4e      	ldr	r3, [pc, #312]	; (80097f4 <HAL_RCC_ClockConfig+0x1f0>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 0302 	and.w	r3, r3, #2
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d109      	bne.n	80096da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e08e      	b.n	80097e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80096ca:	4b4a      	ldr	r3, [pc, #296]	; (80097f4 <HAL_RCC_ClockConfig+0x1f0>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d101      	bne.n	80096da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e086      	b.n	80097e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80096da:	4b46      	ldr	r3, [pc, #280]	; (80097f4 <HAL_RCC_ClockConfig+0x1f0>)
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	f023 0203 	bic.w	r2, r3, #3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	4943      	ldr	r1, [pc, #268]	; (80097f4 <HAL_RCC_ClockConfig+0x1f0>)
 80096e8:	4313      	orrs	r3, r2
 80096ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096ec:	f7fd f8cc 	bl	8006888 <HAL_GetTick>
 80096f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096f2:	e00a      	b.n	800970a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096f4:	f7fd f8c8 	bl	8006888 <HAL_GetTick>
 80096f8:	4602      	mov	r2, r0
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	1ad3      	subs	r3, r2, r3
 80096fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009702:	4293      	cmp	r3, r2
 8009704:	d901      	bls.n	800970a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009706:	2303      	movs	r3, #3
 8009708:	e06e      	b.n	80097e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800970a:	4b3a      	ldr	r3, [pc, #232]	; (80097f4 <HAL_RCC_ClockConfig+0x1f0>)
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	f003 020c 	and.w	r2, r3, #12
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	429a      	cmp	r2, r3
 800971a:	d1eb      	bne.n	80096f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 0302 	and.w	r3, r3, #2
 8009724:	2b00      	cmp	r3, #0
 8009726:	d010      	beq.n	800974a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	689a      	ldr	r2, [r3, #8]
 800972c:	4b31      	ldr	r3, [pc, #196]	; (80097f4 <HAL_RCC_ClockConfig+0x1f0>)
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009734:	429a      	cmp	r2, r3
 8009736:	d208      	bcs.n	800974a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009738:	4b2e      	ldr	r3, [pc, #184]	; (80097f4 <HAL_RCC_ClockConfig+0x1f0>)
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	492b      	ldr	r1, [pc, #172]	; (80097f4 <HAL_RCC_ClockConfig+0x1f0>)
 8009746:	4313      	orrs	r3, r2
 8009748:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800974a:	4b29      	ldr	r3, [pc, #164]	; (80097f0 <HAL_RCC_ClockConfig+0x1ec>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 0307 	and.w	r3, r3, #7
 8009752:	683a      	ldr	r2, [r7, #0]
 8009754:	429a      	cmp	r2, r3
 8009756:	d210      	bcs.n	800977a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009758:	4b25      	ldr	r3, [pc, #148]	; (80097f0 <HAL_RCC_ClockConfig+0x1ec>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f023 0207 	bic.w	r2, r3, #7
 8009760:	4923      	ldr	r1, [pc, #140]	; (80097f0 <HAL_RCC_ClockConfig+0x1ec>)
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	4313      	orrs	r3, r2
 8009766:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009768:	4b21      	ldr	r3, [pc, #132]	; (80097f0 <HAL_RCC_ClockConfig+0x1ec>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f003 0307 	and.w	r3, r3, #7
 8009770:	683a      	ldr	r2, [r7, #0]
 8009772:	429a      	cmp	r2, r3
 8009774:	d001      	beq.n	800977a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	e036      	b.n	80097e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f003 0304 	and.w	r3, r3, #4
 8009782:	2b00      	cmp	r3, #0
 8009784:	d008      	beq.n	8009798 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009786:	4b1b      	ldr	r3, [pc, #108]	; (80097f4 <HAL_RCC_ClockConfig+0x1f0>)
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	4918      	ldr	r1, [pc, #96]	; (80097f4 <HAL_RCC_ClockConfig+0x1f0>)
 8009794:	4313      	orrs	r3, r2
 8009796:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 0308 	and.w	r3, r3, #8
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d009      	beq.n	80097b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80097a4:	4b13      	ldr	r3, [pc, #76]	; (80097f4 <HAL_RCC_ClockConfig+0x1f0>)
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	00db      	lsls	r3, r3, #3
 80097b2:	4910      	ldr	r1, [pc, #64]	; (80097f4 <HAL_RCC_ClockConfig+0x1f0>)
 80097b4:	4313      	orrs	r3, r2
 80097b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80097b8:	f000 f824 	bl	8009804 <HAL_RCC_GetSysClockFreq>
 80097bc:	4602      	mov	r2, r0
 80097be:	4b0d      	ldr	r3, [pc, #52]	; (80097f4 <HAL_RCC_ClockConfig+0x1f0>)
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	091b      	lsrs	r3, r3, #4
 80097c4:	f003 030f 	and.w	r3, r3, #15
 80097c8:	490b      	ldr	r1, [pc, #44]	; (80097f8 <HAL_RCC_ClockConfig+0x1f4>)
 80097ca:	5ccb      	ldrb	r3, [r1, r3]
 80097cc:	f003 031f 	and.w	r3, r3, #31
 80097d0:	fa22 f303 	lsr.w	r3, r2, r3
 80097d4:	4a09      	ldr	r2, [pc, #36]	; (80097fc <HAL_RCC_ClockConfig+0x1f8>)
 80097d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80097d8:	4b09      	ldr	r3, [pc, #36]	; (8009800 <HAL_RCC_ClockConfig+0x1fc>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4618      	mov	r0, r3
 80097de:	f7fd f803 	bl	80067e8 <HAL_InitTick>
 80097e2:	4603      	mov	r3, r0
 80097e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80097e6:	7afb      	ldrb	r3, [r7, #11]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3710      	adds	r7, #16
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	40022000 	.word	0x40022000
 80097f4:	40021000 	.word	0x40021000
 80097f8:	080177fc 	.word	0x080177fc
 80097fc:	200001e8 	.word	0x200001e8
 8009800:	20000218 	.word	0x20000218

08009804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009804:	b480      	push	{r7}
 8009806:	b089      	sub	sp, #36	; 0x24
 8009808:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800980a:	2300      	movs	r3, #0
 800980c:	61fb      	str	r3, [r7, #28]
 800980e:	2300      	movs	r3, #0
 8009810:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009812:	4b3e      	ldr	r3, [pc, #248]	; (800990c <HAL_RCC_GetSysClockFreq+0x108>)
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	f003 030c 	and.w	r3, r3, #12
 800981a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800981c:	4b3b      	ldr	r3, [pc, #236]	; (800990c <HAL_RCC_GetSysClockFreq+0x108>)
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	f003 0303 	and.w	r3, r3, #3
 8009824:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d005      	beq.n	8009838 <HAL_RCC_GetSysClockFreq+0x34>
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	2b0c      	cmp	r3, #12
 8009830:	d121      	bne.n	8009876 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2b01      	cmp	r3, #1
 8009836:	d11e      	bne.n	8009876 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009838:	4b34      	ldr	r3, [pc, #208]	; (800990c <HAL_RCC_GetSysClockFreq+0x108>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f003 0308 	and.w	r3, r3, #8
 8009840:	2b00      	cmp	r3, #0
 8009842:	d107      	bne.n	8009854 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009844:	4b31      	ldr	r3, [pc, #196]	; (800990c <HAL_RCC_GetSysClockFreq+0x108>)
 8009846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800984a:	0a1b      	lsrs	r3, r3, #8
 800984c:	f003 030f 	and.w	r3, r3, #15
 8009850:	61fb      	str	r3, [r7, #28]
 8009852:	e005      	b.n	8009860 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009854:	4b2d      	ldr	r3, [pc, #180]	; (800990c <HAL_RCC_GetSysClockFreq+0x108>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	091b      	lsrs	r3, r3, #4
 800985a:	f003 030f 	and.w	r3, r3, #15
 800985e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009860:	4a2b      	ldr	r2, [pc, #172]	; (8009910 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009868:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d10d      	bne.n	800988c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009874:	e00a      	b.n	800988c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	2b04      	cmp	r3, #4
 800987a:	d102      	bne.n	8009882 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800987c:	4b25      	ldr	r3, [pc, #148]	; (8009914 <HAL_RCC_GetSysClockFreq+0x110>)
 800987e:	61bb      	str	r3, [r7, #24]
 8009880:	e004      	b.n	800988c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	2b08      	cmp	r3, #8
 8009886:	d101      	bne.n	800988c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009888:	4b23      	ldr	r3, [pc, #140]	; (8009918 <HAL_RCC_GetSysClockFreq+0x114>)
 800988a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	2b0c      	cmp	r3, #12
 8009890:	d134      	bne.n	80098fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009892:	4b1e      	ldr	r3, [pc, #120]	; (800990c <HAL_RCC_GetSysClockFreq+0x108>)
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	f003 0303 	and.w	r3, r3, #3
 800989a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	2b02      	cmp	r3, #2
 80098a0:	d003      	beq.n	80098aa <HAL_RCC_GetSysClockFreq+0xa6>
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	2b03      	cmp	r3, #3
 80098a6:	d003      	beq.n	80098b0 <HAL_RCC_GetSysClockFreq+0xac>
 80098a8:	e005      	b.n	80098b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80098aa:	4b1a      	ldr	r3, [pc, #104]	; (8009914 <HAL_RCC_GetSysClockFreq+0x110>)
 80098ac:	617b      	str	r3, [r7, #20]
      break;
 80098ae:	e005      	b.n	80098bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80098b0:	4b19      	ldr	r3, [pc, #100]	; (8009918 <HAL_RCC_GetSysClockFreq+0x114>)
 80098b2:	617b      	str	r3, [r7, #20]
      break;
 80098b4:	e002      	b.n	80098bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	617b      	str	r3, [r7, #20]
      break;
 80098ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80098bc:	4b13      	ldr	r3, [pc, #76]	; (800990c <HAL_RCC_GetSysClockFreq+0x108>)
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	091b      	lsrs	r3, r3, #4
 80098c2:	f003 0307 	and.w	r3, r3, #7
 80098c6:	3301      	adds	r3, #1
 80098c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80098ca:	4b10      	ldr	r3, [pc, #64]	; (800990c <HAL_RCC_GetSysClockFreq+0x108>)
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	0a1b      	lsrs	r3, r3, #8
 80098d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098d4:	697a      	ldr	r2, [r7, #20]
 80098d6:	fb03 f202 	mul.w	r2, r3, r2
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80098e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80098e2:	4b0a      	ldr	r3, [pc, #40]	; (800990c <HAL_RCC_GetSysClockFreq+0x108>)
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	0e5b      	lsrs	r3, r3, #25
 80098e8:	f003 0303 	and.w	r3, r3, #3
 80098ec:	3301      	adds	r3, #1
 80098ee:	005b      	lsls	r3, r3, #1
 80098f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80098f2:	697a      	ldr	r2, [r7, #20]
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80098fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80098fc:	69bb      	ldr	r3, [r7, #24]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3724      	adds	r7, #36	; 0x24
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	40021000 	.word	0x40021000
 8009910:	08017814 	.word	0x08017814
 8009914:	00f42400 	.word	0x00f42400
 8009918:	007a1200 	.word	0x007a1200

0800991c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800991c:	b480      	push	{r7}
 800991e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009920:	4b03      	ldr	r3, [pc, #12]	; (8009930 <HAL_RCC_GetHCLKFreq+0x14>)
 8009922:	681b      	ldr	r3, [r3, #0]
}
 8009924:	4618      	mov	r0, r3
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	200001e8 	.word	0x200001e8

08009934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009938:	f7ff fff0 	bl	800991c <HAL_RCC_GetHCLKFreq>
 800993c:	4602      	mov	r2, r0
 800993e:	4b06      	ldr	r3, [pc, #24]	; (8009958 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	0a1b      	lsrs	r3, r3, #8
 8009944:	f003 0307 	and.w	r3, r3, #7
 8009948:	4904      	ldr	r1, [pc, #16]	; (800995c <HAL_RCC_GetPCLK1Freq+0x28>)
 800994a:	5ccb      	ldrb	r3, [r1, r3]
 800994c:	f003 031f 	and.w	r3, r3, #31
 8009950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009954:	4618      	mov	r0, r3
 8009956:	bd80      	pop	{r7, pc}
 8009958:	40021000 	.word	0x40021000
 800995c:	0801780c 	.word	0x0801780c

08009960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009964:	f7ff ffda 	bl	800991c <HAL_RCC_GetHCLKFreq>
 8009968:	4602      	mov	r2, r0
 800996a:	4b06      	ldr	r3, [pc, #24]	; (8009984 <HAL_RCC_GetPCLK2Freq+0x24>)
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	0adb      	lsrs	r3, r3, #11
 8009970:	f003 0307 	and.w	r3, r3, #7
 8009974:	4904      	ldr	r1, [pc, #16]	; (8009988 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009976:	5ccb      	ldrb	r3, [r1, r3]
 8009978:	f003 031f 	and.w	r3, r3, #31
 800997c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009980:	4618      	mov	r0, r3
 8009982:	bd80      	pop	{r7, pc}
 8009984:	40021000 	.word	0x40021000
 8009988:	0801780c 	.word	0x0801780c

0800998c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009994:	2300      	movs	r3, #0
 8009996:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009998:	4b2a      	ldr	r3, [pc, #168]	; (8009a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800999a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800999c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d003      	beq.n	80099ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80099a4:	f7ff f9ee 	bl	8008d84 <HAL_PWREx_GetVoltageRange>
 80099a8:	6178      	str	r0, [r7, #20]
 80099aa:	e014      	b.n	80099d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80099ac:	4b25      	ldr	r3, [pc, #148]	; (8009a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80099ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099b0:	4a24      	ldr	r2, [pc, #144]	; (8009a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80099b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099b6:	6593      	str	r3, [r2, #88]	; 0x58
 80099b8:	4b22      	ldr	r3, [pc, #136]	; (8009a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80099ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099c0:	60fb      	str	r3, [r7, #12]
 80099c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80099c4:	f7ff f9de 	bl	8008d84 <HAL_PWREx_GetVoltageRange>
 80099c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80099ca:	4b1e      	ldr	r3, [pc, #120]	; (8009a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80099cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099ce:	4a1d      	ldr	r2, [pc, #116]	; (8009a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80099d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099dc:	d10b      	bne.n	80099f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2b80      	cmp	r3, #128	; 0x80
 80099e2:	d919      	bls.n	8009a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2ba0      	cmp	r3, #160	; 0xa0
 80099e8:	d902      	bls.n	80099f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80099ea:	2302      	movs	r3, #2
 80099ec:	613b      	str	r3, [r7, #16]
 80099ee:	e013      	b.n	8009a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80099f0:	2301      	movs	r3, #1
 80099f2:	613b      	str	r3, [r7, #16]
 80099f4:	e010      	b.n	8009a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2b80      	cmp	r3, #128	; 0x80
 80099fa:	d902      	bls.n	8009a02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80099fc:	2303      	movs	r3, #3
 80099fe:	613b      	str	r3, [r7, #16]
 8009a00:	e00a      	b.n	8009a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2b80      	cmp	r3, #128	; 0x80
 8009a06:	d102      	bne.n	8009a0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009a08:	2302      	movs	r3, #2
 8009a0a:	613b      	str	r3, [r7, #16]
 8009a0c:	e004      	b.n	8009a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2b70      	cmp	r3, #112	; 0x70
 8009a12:	d101      	bne.n	8009a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009a14:	2301      	movs	r3, #1
 8009a16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009a18:	4b0b      	ldr	r3, [pc, #44]	; (8009a48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f023 0207 	bic.w	r2, r3, #7
 8009a20:	4909      	ldr	r1, [pc, #36]	; (8009a48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	4313      	orrs	r3, r2
 8009a26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009a28:	4b07      	ldr	r3, [pc, #28]	; (8009a48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f003 0307 	and.w	r3, r3, #7
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d001      	beq.n	8009a3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	e000      	b.n	8009a3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3718      	adds	r7, #24
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	40021000 	.word	0x40021000
 8009a48:	40022000 	.word	0x40022000

08009a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b086      	sub	sp, #24
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009a54:	2300      	movs	r3, #0
 8009a56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009a58:	2300      	movs	r3, #0
 8009a5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d041      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009a70:	d02a      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009a72:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009a76:	d824      	bhi.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009a78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a7c:	d008      	beq.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009a7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a82:	d81e      	bhi.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00a      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009a88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a8c:	d010      	beq.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009a8e:	e018      	b.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009a90:	4b86      	ldr	r3, [pc, #536]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	4a85      	ldr	r2, [pc, #532]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a9a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009a9c:	e015      	b.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f000 fabb 	bl	800a020 <RCCEx_PLLSAI1_Config>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009aae:	e00c      	b.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	3320      	adds	r3, #32
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 fba6 	bl	800a208 <RCCEx_PLLSAI2_Config>
 8009abc:	4603      	mov	r3, r0
 8009abe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009ac0:	e003      	b.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	74fb      	strb	r3, [r7, #19]
      break;
 8009ac6:	e000      	b.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009aca:	7cfb      	ldrb	r3, [r7, #19]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10b      	bne.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009ad0:	4b76      	ldr	r3, [pc, #472]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ad6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ade:	4973      	ldr	r1, [pc, #460]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009ae6:	e001      	b.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ae8:	7cfb      	ldrb	r3, [r7, #19]
 8009aea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d041      	beq.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009afc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b00:	d02a      	beq.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8009b02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b06:	d824      	bhi.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009b08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b0c:	d008      	beq.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009b0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b12:	d81e      	bhi.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00a      	beq.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b1c:	d010      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009b1e:	e018      	b.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009b20:	4b62      	ldr	r3, [pc, #392]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	4a61      	ldr	r2, [pc, #388]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b2a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009b2c:	e015      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	3304      	adds	r3, #4
 8009b32:	2100      	movs	r1, #0
 8009b34:	4618      	mov	r0, r3
 8009b36:	f000 fa73 	bl	800a020 <RCCEx_PLLSAI1_Config>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009b3e:	e00c      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	3320      	adds	r3, #32
 8009b44:	2100      	movs	r1, #0
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 fb5e 	bl	800a208 <RCCEx_PLLSAI2_Config>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009b50:	e003      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	74fb      	strb	r3, [r7, #19]
      break;
 8009b56:	e000      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8009b58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b5a:	7cfb      	ldrb	r3, [r7, #19]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d10b      	bne.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009b60:	4b52      	ldr	r3, [pc, #328]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b6e:	494f      	ldr	r1, [pc, #316]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b70:	4313      	orrs	r3, r2
 8009b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009b76:	e001      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b78:	7cfb      	ldrb	r3, [r7, #19]
 8009b7a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f000 80a0 	beq.w	8009cca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009b8e:	4b47      	ldr	r3, [pc, #284]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d101      	bne.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e000      	b.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00d      	beq.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ba4:	4b41      	ldr	r3, [pc, #260]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ba8:	4a40      	ldr	r2, [pc, #256]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bae:	6593      	str	r3, [r2, #88]	; 0x58
 8009bb0:	4b3e      	ldr	r3, [pc, #248]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bb8:	60bb      	str	r3, [r7, #8]
 8009bba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009bc0:	4b3b      	ldr	r3, [pc, #236]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a3a      	ldr	r2, [pc, #232]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009bcc:	f7fc fe5c 	bl	8006888 <HAL_GetTick>
 8009bd0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009bd2:	e009      	b.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bd4:	f7fc fe58 	bl	8006888 <HAL_GetTick>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	d902      	bls.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8009be2:	2303      	movs	r3, #3
 8009be4:	74fb      	strb	r3, [r7, #19]
        break;
 8009be6:	e005      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009be8:	4b31      	ldr	r3, [pc, #196]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d0ef      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8009bf4:	7cfb      	ldrb	r3, [r7, #19]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d15c      	bne.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009bfa:	4b2c      	ldr	r3, [pc, #176]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d01f      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c12:	697a      	ldr	r2, [r7, #20]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d019      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009c18:	4b24      	ldr	r3, [pc, #144]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c24:	4b21      	ldr	r3, [pc, #132]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c2a:	4a20      	ldr	r2, [pc, #128]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009c34:	4b1d      	ldr	r3, [pc, #116]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c3a:	4a1c      	ldr	r2, [pc, #112]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009c44:	4a19      	ldr	r2, [pc, #100]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d016      	beq.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c56:	f7fc fe17 	bl	8006888 <HAL_GetTick>
 8009c5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c5c:	e00b      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c5e:	f7fc fe13 	bl	8006888 <HAL_GetTick>
 8009c62:	4602      	mov	r2, r0
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d902      	bls.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8009c70:	2303      	movs	r3, #3
 8009c72:	74fb      	strb	r3, [r7, #19]
            break;
 8009c74:	e006      	b.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c76:	4b0d      	ldr	r3, [pc, #52]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c7c:	f003 0302 	and.w	r3, r3, #2
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d0ec      	beq.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8009c84:	7cfb      	ldrb	r3, [r7, #19]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d10c      	bne.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c8a:	4b08      	ldr	r3, [pc, #32]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c9a:	4904      	ldr	r1, [pc, #16]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009ca2:	e009      	b.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009ca4:	7cfb      	ldrb	r3, [r7, #19]
 8009ca6:	74bb      	strb	r3, [r7, #18]
 8009ca8:	e006      	b.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8009caa:	bf00      	nop
 8009cac:	40021000 	.word	0x40021000
 8009cb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cb4:	7cfb      	ldrb	r3, [r7, #19]
 8009cb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009cb8:	7c7b      	ldrb	r3, [r7, #17]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d105      	bne.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009cbe:	4b9e      	ldr	r3, [pc, #632]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cc2:	4a9d      	ldr	r2, [pc, #628]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cc8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f003 0301 	and.w	r3, r3, #1
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00a      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009cd6:	4b98      	ldr	r3, [pc, #608]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cdc:	f023 0203 	bic.w	r2, r3, #3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce4:	4994      	ldr	r1, [pc, #592]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 0302 	and.w	r3, r3, #2
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d00a      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009cf8:	4b8f      	ldr	r3, [pc, #572]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cfe:	f023 020c 	bic.w	r2, r3, #12
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d06:	498c      	ldr	r1, [pc, #560]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f003 0304 	and.w	r3, r3, #4
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00a      	beq.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009d1a:	4b87      	ldr	r3, [pc, #540]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d28:	4983      	ldr	r1, [pc, #524]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f003 0308 	and.w	r3, r3, #8
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00a      	beq.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009d3c:	4b7e      	ldr	r3, [pc, #504]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d4a:	497b      	ldr	r1, [pc, #492]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f003 0310 	and.w	r3, r3, #16
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00a      	beq.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009d5e:	4b76      	ldr	r3, [pc, #472]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d6c:	4972      	ldr	r1, [pc, #456]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f003 0320 	and.w	r3, r3, #32
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00a      	beq.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009d80:	4b6d      	ldr	r3, [pc, #436]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d8e:	496a      	ldr	r1, [pc, #424]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009d90:	4313      	orrs	r3, r2
 8009d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00a      	beq.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009da2:	4b65      	ldr	r3, [pc, #404]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009da8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009db0:	4961      	ldr	r1, [pc, #388]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009db2:	4313      	orrs	r3, r2
 8009db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00a      	beq.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009dc4:	4b5c      	ldr	r3, [pc, #368]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dd2:	4959      	ldr	r1, [pc, #356]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00a      	beq.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009de6:	4b54      	ldr	r3, [pc, #336]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009df4:	4950      	ldr	r1, [pc, #320]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009df6:	4313      	orrs	r3, r2
 8009df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00a      	beq.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009e08:	4b4b      	ldr	r3, [pc, #300]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e0e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e16:	4948      	ldr	r1, [pc, #288]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00a      	beq.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009e2a:	4b43      	ldr	r3, [pc, #268]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e38:	493f      	ldr	r1, [pc, #252]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d028      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e4c:	4b3a      	ldr	r3, [pc, #232]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e5a:	4937      	ldr	r1, [pc, #220]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e6a:	d106      	bne.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e6c:	4b32      	ldr	r3, [pc, #200]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	4a31      	ldr	r2, [pc, #196]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e76:	60d3      	str	r3, [r2, #12]
 8009e78:	e011      	b.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e82:	d10c      	bne.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	3304      	adds	r3, #4
 8009e88:	2101      	movs	r1, #1
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f000 f8c8 	bl	800a020 <RCCEx_PLLSAI1_Config>
 8009e90:	4603      	mov	r3, r0
 8009e92:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009e94:	7cfb      	ldrb	r3, [r7, #19]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d001      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8009e9a:	7cfb      	ldrb	r3, [r7, #19]
 8009e9c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d028      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009eaa:	4b23      	ldr	r3, [pc, #140]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eb0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eb8:	491f      	ldr	r1, [pc, #124]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ec8:	d106      	bne.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009eca:	4b1b      	ldr	r3, [pc, #108]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	4a1a      	ldr	r2, [pc, #104]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ed0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ed4:	60d3      	str	r3, [r2, #12]
 8009ed6:	e011      	b.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009edc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ee0:	d10c      	bne.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	2101      	movs	r1, #1
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f000 f899 	bl	800a020 <RCCEx_PLLSAI1_Config>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009ef2:	7cfb      	ldrb	r3, [r7, #19]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d001      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8009ef8:	7cfb      	ldrb	r3, [r7, #19]
 8009efa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d02b      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f08:	4b0b      	ldr	r3, [pc, #44]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f16:	4908      	ldr	r1, [pc, #32]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f26:	d109      	bne.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f28:	4b03      	ldr	r3, [pc, #12]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	4a02      	ldr	r2, [pc, #8]	; (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f32:	60d3      	str	r3, [r2, #12]
 8009f34:	e014      	b.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8009f36:	bf00      	nop
 8009f38:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f44:	d10c      	bne.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	3304      	adds	r3, #4
 8009f4a:	2101      	movs	r1, #1
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f000 f867 	bl	800a020 <RCCEx_PLLSAI1_Config>
 8009f52:	4603      	mov	r3, r0
 8009f54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009f56:	7cfb      	ldrb	r3, [r7, #19]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d001      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8009f5c:	7cfb      	ldrb	r3, [r7, #19]
 8009f5e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d02f      	beq.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f6c:	4b2b      	ldr	r3, [pc, #172]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f7a:	4928      	ldr	r1, [pc, #160]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f8a:	d10d      	bne.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	3304      	adds	r3, #4
 8009f90:	2102      	movs	r1, #2
 8009f92:	4618      	mov	r0, r3
 8009f94:	f000 f844 	bl	800a020 <RCCEx_PLLSAI1_Config>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009f9c:	7cfb      	ldrb	r3, [r7, #19]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d014      	beq.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009fa2:	7cfb      	ldrb	r3, [r7, #19]
 8009fa4:	74bb      	strb	r3, [r7, #18]
 8009fa6:	e011      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fb0:	d10c      	bne.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	3320      	adds	r3, #32
 8009fb6:	2102      	movs	r1, #2
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f000 f925 	bl	800a208 <RCCEx_PLLSAI2_Config>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009fc2:	7cfb      	ldrb	r3, [r7, #19]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d001      	beq.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009fc8:	7cfb      	ldrb	r3, [r7, #19]
 8009fca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d00a      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009fd8:	4b10      	ldr	r3, [pc, #64]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fde:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fe6:	490d      	ldr	r1, [pc, #52]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00b      	beq.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009ffa:	4b08      	ldr	r3, [pc, #32]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a000:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a00a:	4904      	ldr	r1, [pc, #16]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a00c:	4313      	orrs	r3, r2
 800a00e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a012:	7cbb      	ldrb	r3, [r7, #18]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3718      	adds	r7, #24
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	40021000 	.word	0x40021000

0800a020 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a02e:	4b75      	ldr	r3, [pc, #468]	; (800a204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	f003 0303 	and.w	r3, r3, #3
 800a036:	2b00      	cmp	r3, #0
 800a038:	d018      	beq.n	800a06c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a03a:	4b72      	ldr	r3, [pc, #456]	; (800a204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	f003 0203 	and.w	r2, r3, #3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	429a      	cmp	r2, r3
 800a048:	d10d      	bne.n	800a066 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
       ||
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d009      	beq.n	800a066 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a052:	4b6c      	ldr	r3, [pc, #432]	; (800a204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	091b      	lsrs	r3, r3, #4
 800a058:	f003 0307 	and.w	r3, r3, #7
 800a05c:	1c5a      	adds	r2, r3, #1
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	685b      	ldr	r3, [r3, #4]
       ||
 800a062:	429a      	cmp	r2, r3
 800a064:	d047      	beq.n	800a0f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	73fb      	strb	r3, [r7, #15]
 800a06a:	e044      	b.n	800a0f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2b03      	cmp	r3, #3
 800a072:	d018      	beq.n	800a0a6 <RCCEx_PLLSAI1_Config+0x86>
 800a074:	2b03      	cmp	r3, #3
 800a076:	d825      	bhi.n	800a0c4 <RCCEx_PLLSAI1_Config+0xa4>
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d002      	beq.n	800a082 <RCCEx_PLLSAI1_Config+0x62>
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d009      	beq.n	800a094 <RCCEx_PLLSAI1_Config+0x74>
 800a080:	e020      	b.n	800a0c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a082:	4b60      	ldr	r3, [pc, #384]	; (800a204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f003 0302 	and.w	r3, r3, #2
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d11d      	bne.n	800a0ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a092:	e01a      	b.n	800a0ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a094:	4b5b      	ldr	r3, [pc, #364]	; (800a204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d116      	bne.n	800a0ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0a4:	e013      	b.n	800a0ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a0a6:	4b57      	ldr	r3, [pc, #348]	; (800a204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d10f      	bne.n	800a0d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a0b2:	4b54      	ldr	r3, [pc, #336]	; (800a204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d109      	bne.n	800a0d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a0c2:	e006      	b.n	800a0d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a0c8:	e004      	b.n	800a0d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a0ca:	bf00      	nop
 800a0cc:	e002      	b.n	800a0d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a0ce:	bf00      	nop
 800a0d0:	e000      	b.n	800a0d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a0d2:	bf00      	nop
    }

    if(status == HAL_OK)
 800a0d4:	7bfb      	ldrb	r3, [r7, #15]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10d      	bne.n	800a0f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a0da:	4b4a      	ldr	r3, [pc, #296]	; (800a204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6819      	ldr	r1, [r3, #0]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	011b      	lsls	r3, r3, #4
 800a0ee:	430b      	orrs	r3, r1
 800a0f0:	4944      	ldr	r1, [pc, #272]	; (800a204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a0f6:	7bfb      	ldrb	r3, [r7, #15]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d17d      	bne.n	800a1f8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a0fc:	4b41      	ldr	r3, [pc, #260]	; (800a204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a40      	ldr	r2, [pc, #256]	; (800a204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a102:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a106:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a108:	f7fc fbbe 	bl	8006888 <HAL_GetTick>
 800a10c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a10e:	e009      	b.n	800a124 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a110:	f7fc fbba 	bl	8006888 <HAL_GetTick>
 800a114:	4602      	mov	r2, r0
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	d902      	bls.n	800a124 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a11e:	2303      	movs	r3, #3
 800a120:	73fb      	strb	r3, [r7, #15]
        break;
 800a122:	e005      	b.n	800a130 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a124:	4b37      	ldr	r3, [pc, #220]	; (800a204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1ef      	bne.n	800a110 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a130:	7bfb      	ldrb	r3, [r7, #15]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d160      	bne.n	800a1f8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d111      	bne.n	800a160 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a13c:	4b31      	ldr	r3, [pc, #196]	; (800a204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	6892      	ldr	r2, [r2, #8]
 800a14c:	0211      	lsls	r1, r2, #8
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	68d2      	ldr	r2, [r2, #12]
 800a152:	0912      	lsrs	r2, r2, #4
 800a154:	0452      	lsls	r2, r2, #17
 800a156:	430a      	orrs	r2, r1
 800a158:	492a      	ldr	r1, [pc, #168]	; (800a204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a15a:	4313      	orrs	r3, r2
 800a15c:	610b      	str	r3, [r1, #16]
 800a15e:	e027      	b.n	800a1b0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	2b01      	cmp	r3, #1
 800a164:	d112      	bne.n	800a18c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a166:	4b27      	ldr	r3, [pc, #156]	; (800a204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a168:	691b      	ldr	r3, [r3, #16]
 800a16a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a16e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	6892      	ldr	r2, [r2, #8]
 800a176:	0211      	lsls	r1, r2, #8
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	6912      	ldr	r2, [r2, #16]
 800a17c:	0852      	lsrs	r2, r2, #1
 800a17e:	3a01      	subs	r2, #1
 800a180:	0552      	lsls	r2, r2, #21
 800a182:	430a      	orrs	r2, r1
 800a184:	491f      	ldr	r1, [pc, #124]	; (800a204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a186:	4313      	orrs	r3, r2
 800a188:	610b      	str	r3, [r1, #16]
 800a18a:	e011      	b.n	800a1b0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a18c:	4b1d      	ldr	r3, [pc, #116]	; (800a204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a194:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	6892      	ldr	r2, [r2, #8]
 800a19c:	0211      	lsls	r1, r2, #8
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	6952      	ldr	r2, [r2, #20]
 800a1a2:	0852      	lsrs	r2, r2, #1
 800a1a4:	3a01      	subs	r2, #1
 800a1a6:	0652      	lsls	r2, r2, #25
 800a1a8:	430a      	orrs	r2, r1
 800a1aa:	4916      	ldr	r1, [pc, #88]	; (800a204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a1b0:	4b14      	ldr	r3, [pc, #80]	; (800a204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a13      	ldr	r2, [pc, #76]	; (800a204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a1b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a1ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1bc:	f7fc fb64 	bl	8006888 <HAL_GetTick>
 800a1c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a1c2:	e009      	b.n	800a1d8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a1c4:	f7fc fb60 	bl	8006888 <HAL_GetTick>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	1ad3      	subs	r3, r2, r3
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d902      	bls.n	800a1d8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	73fb      	strb	r3, [r7, #15]
          break;
 800a1d6:	e005      	b.n	800a1e4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a1d8:	4b0a      	ldr	r3, [pc, #40]	; (800a204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d0ef      	beq.n	800a1c4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800a1e4:	7bfb      	ldrb	r3, [r7, #15]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d106      	bne.n	800a1f8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a1ea:	4b06      	ldr	r3, [pc, #24]	; (800a204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a1ec:	691a      	ldr	r2, [r3, #16]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	699b      	ldr	r3, [r3, #24]
 800a1f2:	4904      	ldr	r1, [pc, #16]	; (800a204 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	40021000 	.word	0x40021000

0800a208 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a212:	2300      	movs	r3, #0
 800a214:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a216:	4b6a      	ldr	r3, [pc, #424]	; (800a3c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	f003 0303 	and.w	r3, r3, #3
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d018      	beq.n	800a254 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a222:	4b67      	ldr	r3, [pc, #412]	; (800a3c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	f003 0203 	and.w	r2, r3, #3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d10d      	bne.n	800a24e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
       ||
 800a236:	2b00      	cmp	r3, #0
 800a238:	d009      	beq.n	800a24e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a23a:	4b61      	ldr	r3, [pc, #388]	; (800a3c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	091b      	lsrs	r3, r3, #4
 800a240:	f003 0307 	and.w	r3, r3, #7
 800a244:	1c5a      	adds	r2, r3, #1
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	685b      	ldr	r3, [r3, #4]
       ||
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d047      	beq.n	800a2de <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	73fb      	strb	r3, [r7, #15]
 800a252:	e044      	b.n	800a2de <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2b03      	cmp	r3, #3
 800a25a:	d018      	beq.n	800a28e <RCCEx_PLLSAI2_Config+0x86>
 800a25c:	2b03      	cmp	r3, #3
 800a25e:	d825      	bhi.n	800a2ac <RCCEx_PLLSAI2_Config+0xa4>
 800a260:	2b01      	cmp	r3, #1
 800a262:	d002      	beq.n	800a26a <RCCEx_PLLSAI2_Config+0x62>
 800a264:	2b02      	cmp	r3, #2
 800a266:	d009      	beq.n	800a27c <RCCEx_PLLSAI2_Config+0x74>
 800a268:	e020      	b.n	800a2ac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a26a:	4b55      	ldr	r3, [pc, #340]	; (800a3c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f003 0302 	and.w	r3, r3, #2
 800a272:	2b00      	cmp	r3, #0
 800a274:	d11d      	bne.n	800a2b2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a27a:	e01a      	b.n	800a2b2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a27c:	4b50      	ldr	r3, [pc, #320]	; (800a3c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a284:	2b00      	cmp	r3, #0
 800a286:	d116      	bne.n	800a2b6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a28c:	e013      	b.n	800a2b6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a28e:	4b4c      	ldr	r3, [pc, #304]	; (800a3c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a296:	2b00      	cmp	r3, #0
 800a298:	d10f      	bne.n	800a2ba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a29a:	4b49      	ldr	r3, [pc, #292]	; (800a3c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d109      	bne.n	800a2ba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a2aa:	e006      	b.n	800a2ba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a2b0:	e004      	b.n	800a2bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a2b2:	bf00      	nop
 800a2b4:	e002      	b.n	800a2bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a2b6:	bf00      	nop
 800a2b8:	e000      	b.n	800a2bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a2ba:	bf00      	nop
    }

    if(status == HAL_OK)
 800a2bc:	7bfb      	ldrb	r3, [r7, #15]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d10d      	bne.n	800a2de <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a2c2:	4b3f      	ldr	r3, [pc, #252]	; (800a3c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6819      	ldr	r1, [r3, #0]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	011b      	lsls	r3, r3, #4
 800a2d6:	430b      	orrs	r3, r1
 800a2d8:	4939      	ldr	r1, [pc, #228]	; (800a3c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a2de:	7bfb      	ldrb	r3, [r7, #15]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d167      	bne.n	800a3b4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a2e4:	4b36      	ldr	r3, [pc, #216]	; (800a3c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a35      	ldr	r2, [pc, #212]	; (800a3c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a2ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2f0:	f7fc faca 	bl	8006888 <HAL_GetTick>
 800a2f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a2f6:	e009      	b.n	800a30c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a2f8:	f7fc fac6 	bl	8006888 <HAL_GetTick>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	1ad3      	subs	r3, r2, r3
 800a302:	2b02      	cmp	r3, #2
 800a304:	d902      	bls.n	800a30c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a306:	2303      	movs	r3, #3
 800a308:	73fb      	strb	r3, [r7, #15]
        break;
 800a30a:	e005      	b.n	800a318 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a30c:	4b2c      	ldr	r3, [pc, #176]	; (800a3c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1ef      	bne.n	800a2f8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a318:	7bfb      	ldrb	r3, [r7, #15]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d14a      	bne.n	800a3b4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d111      	bne.n	800a348 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a324:	4b26      	ldr	r3, [pc, #152]	; (800a3c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a326:	695b      	ldr	r3, [r3, #20]
 800a328:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a32c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	6892      	ldr	r2, [r2, #8]
 800a334:	0211      	lsls	r1, r2, #8
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	68d2      	ldr	r2, [r2, #12]
 800a33a:	0912      	lsrs	r2, r2, #4
 800a33c:	0452      	lsls	r2, r2, #17
 800a33e:	430a      	orrs	r2, r1
 800a340:	491f      	ldr	r1, [pc, #124]	; (800a3c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a342:	4313      	orrs	r3, r2
 800a344:	614b      	str	r3, [r1, #20]
 800a346:	e011      	b.n	800a36c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a348:	4b1d      	ldr	r3, [pc, #116]	; (800a3c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a34a:	695b      	ldr	r3, [r3, #20]
 800a34c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a350:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	6892      	ldr	r2, [r2, #8]
 800a358:	0211      	lsls	r1, r2, #8
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	6912      	ldr	r2, [r2, #16]
 800a35e:	0852      	lsrs	r2, r2, #1
 800a360:	3a01      	subs	r2, #1
 800a362:	0652      	lsls	r2, r2, #25
 800a364:	430a      	orrs	r2, r1
 800a366:	4916      	ldr	r1, [pc, #88]	; (800a3c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a368:	4313      	orrs	r3, r2
 800a36a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a36c:	4b14      	ldr	r3, [pc, #80]	; (800a3c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a13      	ldr	r2, [pc, #76]	; (800a3c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a376:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a378:	f7fc fa86 	bl	8006888 <HAL_GetTick>
 800a37c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a37e:	e009      	b.n	800a394 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a380:	f7fc fa82 	bl	8006888 <HAL_GetTick>
 800a384:	4602      	mov	r2, r0
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	d902      	bls.n	800a394 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800a38e:	2303      	movs	r3, #3
 800a390:	73fb      	strb	r3, [r7, #15]
          break;
 800a392:	e005      	b.n	800a3a0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a394:	4b0a      	ldr	r3, [pc, #40]	; (800a3c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d0ef      	beq.n	800a380 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800a3a0:	7bfb      	ldrb	r3, [r7, #15]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d106      	bne.n	800a3b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a3a6:	4b06      	ldr	r3, [pc, #24]	; (800a3c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a3a8:	695a      	ldr	r2, [r3, #20]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	695b      	ldr	r3, [r3, #20]
 800a3ae:	4904      	ldr	r1, [pc, #16]	; (800a3c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3710      	adds	r7, #16
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	40021000 	.word	0x40021000

0800a3c4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d06c      	beq.n	800a4b0 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d106      	bne.n	800a3f0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f7fb f8dc 	bl	80055a8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2202      	movs	r2, #2
 800a3f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	22ca      	movs	r2, #202	; 0xca
 800a3fe:	625a      	str	r2, [r3, #36]	; 0x24
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2253      	movs	r2, #83	; 0x53
 800a406:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 fa49 	bl	800a8a0 <RTC_EnterInitMode>
 800a40e:	4603      	mov	r3, r0
 800a410:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800a412:	7bfb      	ldrb	r3, [r7, #15]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d14b      	bne.n	800a4b0 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	6812      	ldr	r2, [r2, #0]
 800a422:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a42a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	6899      	ldr	r1, [r3, #8]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	685a      	ldr	r2, [r3, #4]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	431a      	orrs	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	699b      	ldr	r3, [r3, #24]
 800a440:	431a      	orrs	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	430a      	orrs	r2, r1
 800a448:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	68d2      	ldr	r2, [r2, #12]
 800a452:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	6919      	ldr	r1, [r3, #16]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	041a      	lsls	r2, r3, #16
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	430a      	orrs	r2, r1
 800a466:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 fa4d 	bl	800a908 <RTC_ExitInitMode>
 800a46e:	4603      	mov	r3, r0
 800a470:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800a472:	7bfb      	ldrb	r3, [r7, #15]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d11b      	bne.n	800a4b0 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f022 0203 	bic.w	r2, r2, #3
 800a486:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	69da      	ldr	r2, [r3, #28]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	695b      	ldr	r3, [r3, #20]
 800a496:	431a      	orrs	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	430a      	orrs	r2, r1
 800a49e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	22ff      	movs	r2, #255	; 0xff
 800a4a6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800a4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a4ba:	b590      	push	{r4, r7, lr}
 800a4bc:	b087      	sub	sp, #28
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	60f8      	str	r0, [r7, #12]
 800a4c2:	60b9      	str	r1, [r7, #8]
 800a4c4:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d101      	bne.n	800a4d4 <HAL_RTC_SetTime+0x1a>
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	e08b      	b.n	800a5ec <HAL_RTC_SetTime+0x132>
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2202      	movs	r2, #2
 800a4e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	22ca      	movs	r2, #202	; 0xca
 800a4ea:	625a      	str	r2, [r3, #36]	; 0x24
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2253      	movs	r2, #83	; 0x53
 800a4f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f000 f9d3 	bl	800a8a0 <RTC_EnterInitMode>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a4fe:	7cfb      	ldrb	r3, [r7, #19]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d163      	bne.n	800a5cc <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d126      	bne.n	800a558 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a514:	2b00      	cmp	r3, #0
 800a516:	d102      	bne.n	800a51e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	2200      	movs	r2, #0
 800a51c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	4618      	mov	r0, r3
 800a524:	f000 fa2e 	bl	800a984 <RTC_ByteToBcd2>
 800a528:	4603      	mov	r3, r0
 800a52a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	785b      	ldrb	r3, [r3, #1]
 800a530:	4618      	mov	r0, r3
 800a532:	f000 fa27 	bl	800a984 <RTC_ByteToBcd2>
 800a536:	4603      	mov	r3, r0
 800a538:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a53a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	789b      	ldrb	r3, [r3, #2]
 800a540:	4618      	mov	r0, r3
 800a542:	f000 fa1f 	bl	800a984 <RTC_ByteToBcd2>
 800a546:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a548:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	78db      	ldrb	r3, [r3, #3]
 800a550:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a552:	4313      	orrs	r3, r2
 800a554:	617b      	str	r3, [r7, #20]
 800a556:	e018      	b.n	800a58a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a562:	2b00      	cmp	r3, #0
 800a564:	d102      	bne.n	800a56c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	2200      	movs	r2, #0
 800a56a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	785b      	ldrb	r3, [r3, #1]
 800a576:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a578:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a57a:	68ba      	ldr	r2, [r7, #8]
 800a57c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a57e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	78db      	ldrb	r3, [r3, #3]
 800a584:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a586:	4313      	orrs	r3, r2
 800a588:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a594:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a598:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	689a      	ldr	r2, [r3, #8]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a5a8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	6899      	ldr	r1, [r3, #8]
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	68da      	ldr	r2, [r3, #12]
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	431a      	orrs	r2, r3
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	430a      	orrs	r2, r1
 800a5c0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a5c2:	68f8      	ldr	r0, [r7, #12]
 800a5c4:	f000 f9a0 	bl	800a908 <RTC_ExitInitMode>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	22ff      	movs	r2, #255	; 0xff
 800a5d2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a5d4:	7cfb      	ldrb	r3, [r7, #19]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d103      	bne.n	800a5e2 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a5ea:	7cfb      	ldrb	r3, [r7, #19]
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	371c      	adds	r7, #28
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd90      	pop	{r4, r7, pc}

0800a5f4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b086      	sub	sp, #24
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	60b9      	str	r1, [r7, #8]
 800a5fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	691b      	ldr	r3, [r3, #16]
 800a610:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a622:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a626:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	0c1b      	lsrs	r3, r3, #16
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a632:	b2da      	uxtb	r2, r3
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	0a1b      	lsrs	r3, r3, #8
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a642:	b2da      	uxtb	r2, r3
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a650:	b2da      	uxtb	r2, r3
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	0d9b      	lsrs	r3, r3, #22
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	f003 0301 	and.w	r3, r3, #1
 800a660:	b2da      	uxtb	r2, r3
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d11a      	bne.n	800a6a2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	4618      	mov	r0, r3
 800a672:	f000 f9a7 	bl	800a9c4 <RTC_Bcd2ToByte>
 800a676:	4603      	mov	r3, r0
 800a678:	461a      	mov	r2, r3
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	785b      	ldrb	r3, [r3, #1]
 800a682:	4618      	mov	r0, r3
 800a684:	f000 f99e 	bl	800a9c4 <RTC_Bcd2ToByte>
 800a688:	4603      	mov	r3, r0
 800a68a:	461a      	mov	r2, r3
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	789b      	ldrb	r3, [r3, #2]
 800a694:	4618      	mov	r0, r3
 800a696:	f000 f995 	bl	800a9c4 <RTC_Bcd2ToByte>
 800a69a:	4603      	mov	r3, r0
 800a69c:	461a      	mov	r2, r3
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a6a2:	2300      	movs	r3, #0
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3718      	adds	r7, #24
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a6ac:	b590      	push	{r4, r7, lr}
 800a6ae:	b087      	sub	sp, #28
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d101      	bne.n	800a6c6 <HAL_RTC_SetDate+0x1a>
 800a6c2:	2302      	movs	r3, #2
 800a6c4:	e075      	b.n	800a7b2 <HAL_RTC_SetDate+0x106>
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2202      	movs	r2, #2
 800a6d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d10e      	bne.n	800a6fa <HAL_RTC_SetDate+0x4e>
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	785b      	ldrb	r3, [r3, #1]
 800a6e0:	f003 0310 	and.w	r3, r3, #16
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d008      	beq.n	800a6fa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	785b      	ldrb	r3, [r3, #1]
 800a6ec:	f023 0310 	bic.w	r3, r3, #16
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	330a      	adds	r3, #10
 800a6f4:	b2da      	uxtb	r2, r3
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d11c      	bne.n	800a73a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	78db      	ldrb	r3, [r3, #3]
 800a704:	4618      	mov	r0, r3
 800a706:	f000 f93d 	bl	800a984 <RTC_ByteToBcd2>
 800a70a:	4603      	mov	r3, r0
 800a70c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	785b      	ldrb	r3, [r3, #1]
 800a712:	4618      	mov	r0, r3
 800a714:	f000 f936 	bl	800a984 <RTC_ByteToBcd2>
 800a718:	4603      	mov	r3, r0
 800a71a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a71c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	789b      	ldrb	r3, [r3, #2]
 800a722:	4618      	mov	r0, r3
 800a724:	f000 f92e 	bl	800a984 <RTC_ByteToBcd2>
 800a728:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a72a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a734:	4313      	orrs	r3, r2
 800a736:	617b      	str	r3, [r7, #20]
 800a738:	e00e      	b.n	800a758 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	78db      	ldrb	r3, [r3, #3]
 800a73e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	785b      	ldrb	r3, [r3, #1]
 800a744:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a746:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a74c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a754:	4313      	orrs	r3, r2
 800a756:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	22ca      	movs	r2, #202	; 0xca
 800a75e:	625a      	str	r2, [r3, #36]	; 0x24
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2253      	movs	r2, #83	; 0x53
 800a766:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f000 f899 	bl	800a8a0 <RTC_EnterInitMode>
 800a76e:	4603      	mov	r3, r0
 800a770:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a772:	7cfb      	ldrb	r3, [r7, #19]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10c      	bne.n	800a792 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a782:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a786:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f000 f8bd 	bl	800a908 <RTC_ExitInitMode>
 800a78e:	4603      	mov	r3, r0
 800a790:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	22ff      	movs	r2, #255	; 0xff
 800a798:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a79a:	7cfb      	ldrb	r3, [r7, #19]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d103      	bne.n	800a7a8 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a7b0:	7cfb      	ldrb	r3, [r7, #19]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	371c      	adds	r7, #28
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd90      	pop	{r4, r7, pc}

0800a7ba <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b086      	sub	sp, #24
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	60f8      	str	r0, [r7, #12]
 800a7c2:	60b9      	str	r1, [r7, #8]
 800a7c4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a7d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a7d4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	0c1b      	lsrs	r3, r3, #16
 800a7da:	b2da      	uxtb	r2, r3
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	0a1b      	lsrs	r3, r3, #8
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	f003 031f 	and.w	r3, r3, #31
 800a7ea:	b2da      	uxtb	r2, r3
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7f8:	b2da      	uxtb	r2, r3
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	0b5b      	lsrs	r3, r3, #13
 800a802:	b2db      	uxtb	r3, r3
 800a804:	f003 0307 	and.w	r3, r3, #7
 800a808:	b2da      	uxtb	r2, r3
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d11a      	bne.n	800a84a <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	78db      	ldrb	r3, [r3, #3]
 800a818:	4618      	mov	r0, r3
 800a81a:	f000 f8d3 	bl	800a9c4 <RTC_Bcd2ToByte>
 800a81e:	4603      	mov	r3, r0
 800a820:	461a      	mov	r2, r3
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	785b      	ldrb	r3, [r3, #1]
 800a82a:	4618      	mov	r0, r3
 800a82c:	f000 f8ca 	bl	800a9c4 <RTC_Bcd2ToByte>
 800a830:	4603      	mov	r3, r0
 800a832:	461a      	mov	r2, r3
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	789b      	ldrb	r3, [r3, #2]
 800a83c:	4618      	mov	r0, r3
 800a83e:	f000 f8c1 	bl	800a9c4 <RTC_Bcd2ToByte>
 800a842:	4603      	mov	r3, r0
 800a844:	461a      	mov	r2, r3
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3718      	adds	r7, #24
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68da      	ldr	r2, [r3, #12]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a86a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800a86c:	f7fc f80c 	bl	8006888 <HAL_GetTick>
 800a870:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a872:	e009      	b.n	800a888 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a874:	f7fc f808 	bl	8006888 <HAL_GetTick>
 800a878:	4602      	mov	r2, r0
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	1ad3      	subs	r3, r2, r3
 800a87e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a882:	d901      	bls.n	800a888 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800a884:	2303      	movs	r3, #3
 800a886:	e007      	b.n	800a898 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	f003 0320 	and.w	r3, r3, #32
 800a892:	2b00      	cmp	r3, #0
 800a894:	d0ee      	beq.n	800a874 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d120      	bne.n	800a8fc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8c2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a8c4:	f7fb ffe0 	bl	8006888 <HAL_GetTick>
 800a8c8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a8ca:	e00d      	b.n	800a8e8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a8cc:	f7fb ffdc 	bl	8006888 <HAL_GetTick>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	1ad3      	subs	r3, r2, r3
 800a8d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a8da:	d905      	bls.n	800a8e8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2203      	movs	r2, #3
 800a8e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d102      	bne.n	800a8fc <RTC_EnterInitMode+0x5c>
 800a8f6:	7bfb      	ldrb	r3, [r7, #15]
 800a8f8:	2b03      	cmp	r3, #3
 800a8fa:	d1e7      	bne.n	800a8cc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800a8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
	...

0800a908 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a910:	2300      	movs	r3, #0
 800a912:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800a914:	4b1a      	ldr	r3, [pc, #104]	; (800a980 <RTC_ExitInitMode+0x78>)
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	4a19      	ldr	r2, [pc, #100]	; (800a980 <RTC_ExitInitMode+0x78>)
 800a91a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a91e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a920:	4b17      	ldr	r3, [pc, #92]	; (800a980 <RTC_ExitInitMode+0x78>)
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	f003 0320 	and.w	r3, r3, #32
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d10c      	bne.n	800a946 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f7ff ff91 	bl	800a854 <HAL_RTC_WaitForSynchro>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d01e      	beq.n	800a976 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2203      	movs	r2, #3
 800a93c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a940:	2303      	movs	r3, #3
 800a942:	73fb      	strb	r3, [r7, #15]
 800a944:	e017      	b.n	800a976 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a946:	4b0e      	ldr	r3, [pc, #56]	; (800a980 <RTC_ExitInitMode+0x78>)
 800a948:	689b      	ldr	r3, [r3, #8]
 800a94a:	4a0d      	ldr	r2, [pc, #52]	; (800a980 <RTC_ExitInitMode+0x78>)
 800a94c:	f023 0320 	bic.w	r3, r3, #32
 800a950:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f7ff ff7e 	bl	800a854 <HAL_RTC_WaitForSynchro>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d005      	beq.n	800a96a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2203      	movs	r2, #3
 800a962:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a966:	2303      	movs	r3, #3
 800a968:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a96a:	4b05      	ldr	r3, [pc, #20]	; (800a980 <RTC_ExitInitMode+0x78>)
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	4a04      	ldr	r2, [pc, #16]	; (800a980 <RTC_ExitInitMode+0x78>)
 800a970:	f043 0320 	orr.w	r3, r3, #32
 800a974:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a976:	7bfb      	ldrb	r3, [r7, #15]
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3710      	adds	r7, #16
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	40002800 	.word	0x40002800

0800a984 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	4603      	mov	r3, r0
 800a98c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a98e:	2300      	movs	r3, #0
 800a990:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800a992:	79fb      	ldrb	r3, [r7, #7]
 800a994:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800a996:	e005      	b.n	800a9a4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	3301      	adds	r3, #1
 800a99c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800a99e:	7afb      	ldrb	r3, [r7, #11]
 800a9a0:	3b0a      	subs	r3, #10
 800a9a2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800a9a4:	7afb      	ldrb	r3, [r7, #11]
 800a9a6:	2b09      	cmp	r3, #9
 800a9a8:	d8f6      	bhi.n	800a998 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	011b      	lsls	r3, r3, #4
 800a9b0:	b2da      	uxtb	r2, r3
 800a9b2:	7afb      	ldrb	r3, [r7, #11]
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	b2db      	uxtb	r3, r3
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3714      	adds	r7, #20
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr

0800a9c4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b085      	sub	sp, #20
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800a9ce:	79fb      	ldrb	r3, [r7, #7]
 800a9d0:	091b      	lsrs	r3, r3, #4
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	0092      	lsls	r2, r2, #2
 800a9d8:	4413      	add	r3, r2
 800a9da:	005b      	lsls	r3, r3, #1
 800a9dc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800a9de:	79fb      	ldrb	r3, [r7, #7]
 800a9e0:	f003 030f 	and.w	r3, r3, #15
 800a9e4:	b2da      	uxtb	r2, r3
 800a9e6:	7bfb      	ldrb	r3, [r7, #15]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	b2db      	uxtb	r3, r3
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3714      	adds	r7, #20
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d101      	bne.n	800aa0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e095      	b.n	800ab36 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d108      	bne.n	800aa24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa1a:	d009      	beq.n	800aa30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	61da      	str	r2, [r3, #28]
 800aa22:	e005      	b.n	800aa30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d106      	bne.n	800aa50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f7fa fdde 	bl	800560c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2202      	movs	r2, #2
 800aa54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aa70:	d902      	bls.n	800aa78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800aa72:	2300      	movs	r3, #0
 800aa74:	60fb      	str	r3, [r7, #12]
 800aa76:	e002      	b.n	800aa7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800aa78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800aa86:	d007      	beq.n	800aa98 <HAL_SPI_Init+0xa0>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aa90:	d002      	beq.n	800aa98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800aaa8:	431a      	orrs	r2, r3
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	691b      	ldr	r3, [r3, #16]
 800aaae:	f003 0302 	and.w	r3, r3, #2
 800aab2:	431a      	orrs	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	695b      	ldr	r3, [r3, #20]
 800aab8:	f003 0301 	and.w	r3, r3, #1
 800aabc:	431a      	orrs	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	699b      	ldr	r3, [r3, #24]
 800aac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aac6:	431a      	orrs	r2, r3
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	69db      	ldr	r3, [r3, #28]
 800aacc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aad0:	431a      	orrs	r2, r3
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a1b      	ldr	r3, [r3, #32]
 800aad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aada:	ea42 0103 	orr.w	r1, r2, r3
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	430a      	orrs	r2, r1
 800aaec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	699b      	ldr	r3, [r3, #24]
 800aaf2:	0c1b      	lsrs	r3, r3, #16
 800aaf4:	f003 0204 	and.w	r2, r3, #4
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafc:	f003 0310 	and.w	r3, r3, #16
 800ab00:	431a      	orrs	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab06:	f003 0308 	and.w	r3, r3, #8
 800ab0a:	431a      	orrs	r2, r3
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ab14:	ea42 0103 	orr.w	r1, r2, r3
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	430a      	orrs	r2, r1
 800ab24:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b088      	sub	sp, #32
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	60f8      	str	r0, [r7, #12]
 800ab46:	60b9      	str	r1, [r7, #8]
 800ab48:	603b      	str	r3, [r7, #0]
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d101      	bne.n	800ab60 <HAL_SPI_Transmit+0x22>
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	e158      	b.n	800ae12 <HAL_SPI_Transmit+0x2d4>
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab68:	f7fb fe8e 	bl	8006888 <HAL_GetTick>
 800ab6c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ab6e:	88fb      	ldrh	r3, [r7, #6]
 800ab70:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d002      	beq.n	800ab84 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ab7e:	2302      	movs	r3, #2
 800ab80:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ab82:	e13d      	b.n	800ae00 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d002      	beq.n	800ab90 <HAL_SPI_Transmit+0x52>
 800ab8a:	88fb      	ldrh	r3, [r7, #6]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d102      	bne.n	800ab96 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ab90:	2301      	movs	r3, #1
 800ab92:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ab94:	e134      	b.n	800ae00 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2203      	movs	r2, #3
 800ab9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2200      	movs	r2, #0
 800aba2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	68ba      	ldr	r2, [r7, #8]
 800aba8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	88fa      	ldrh	r2, [r7, #6]
 800abae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	88fa      	ldrh	r2, [r7, #6]
 800abb4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2200      	movs	r2, #0
 800abba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2200      	movs	r2, #0
 800abd0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2200      	movs	r2, #0
 800abd6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abe0:	d10f      	bne.n	800ac02 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abf0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac0c:	2b40      	cmp	r3, #64	; 0x40
 800ac0e:	d007      	beq.n	800ac20 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	68db      	ldr	r3, [r3, #12]
 800ac24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ac28:	d94b      	bls.n	800acc2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d002      	beq.n	800ac38 <HAL_SPI_Transmit+0xfa>
 800ac32:	8afb      	ldrh	r3, [r7, #22]
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d13e      	bne.n	800acb6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac3c:	881a      	ldrh	r2, [r3, #0]
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac48:	1c9a      	adds	r2, r3, #2
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	3b01      	subs	r3, #1
 800ac56:	b29a      	uxth	r2, r3
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ac5c:	e02b      	b.n	800acb6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	f003 0302 	and.w	r3, r3, #2
 800ac68:	2b02      	cmp	r3, #2
 800ac6a:	d112      	bne.n	800ac92 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac70:	881a      	ldrh	r2, [r3, #0]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac7c:	1c9a      	adds	r2, r3, #2
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	b29a      	uxth	r2, r3
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ac90:	e011      	b.n	800acb6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac92:	f7fb fdf9 	bl	8006888 <HAL_GetTick>
 800ac96:	4602      	mov	r2, r0
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	1ad3      	subs	r3, r2, r3
 800ac9c:	683a      	ldr	r2, [r7, #0]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d803      	bhi.n	800acaa <HAL_SPI_Transmit+0x16c>
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aca8:	d102      	bne.n	800acb0 <HAL_SPI_Transmit+0x172>
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d102      	bne.n	800acb6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800acb0:	2303      	movs	r3, #3
 800acb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800acb4:	e0a4      	b.n	800ae00 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acba:	b29b      	uxth	r3, r3
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d1ce      	bne.n	800ac5e <HAL_SPI_Transmit+0x120>
 800acc0:	e07c      	b.n	800adbc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d002      	beq.n	800acd0 <HAL_SPI_Transmit+0x192>
 800acca:	8afb      	ldrh	r3, [r7, #22]
 800accc:	2b01      	cmp	r3, #1
 800acce:	d170      	bne.n	800adb2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d912      	bls.n	800ad00 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acde:	881a      	ldrh	r2, [r3, #0]
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acea:	1c9a      	adds	r2, r3, #2
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	3b02      	subs	r3, #2
 800acf8:	b29a      	uxth	r2, r3
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800acfe:	e058      	b.n	800adb2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	330c      	adds	r3, #12
 800ad0a:	7812      	ldrb	r2, [r2, #0]
 800ad0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad12:	1c5a      	adds	r2, r3, #1
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	3b01      	subs	r3, #1
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800ad26:	e044      	b.n	800adb2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	f003 0302 	and.w	r3, r3, #2
 800ad32:	2b02      	cmp	r3, #2
 800ad34:	d12b      	bne.n	800ad8e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d912      	bls.n	800ad66 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad44:	881a      	ldrh	r2, [r3, #0]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad50:	1c9a      	adds	r2, r3, #2
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	3b02      	subs	r3, #2
 800ad5e:	b29a      	uxth	r2, r3
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ad64:	e025      	b.n	800adb2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	330c      	adds	r3, #12
 800ad70:	7812      	ldrb	r2, [r2, #0]
 800ad72:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad78:	1c5a      	adds	r2, r3, #1
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	3b01      	subs	r3, #1
 800ad86:	b29a      	uxth	r2, r3
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ad8c:	e011      	b.n	800adb2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad8e:	f7fb fd7b 	bl	8006888 <HAL_GetTick>
 800ad92:	4602      	mov	r2, r0
 800ad94:	69bb      	ldr	r3, [r7, #24]
 800ad96:	1ad3      	subs	r3, r2, r3
 800ad98:	683a      	ldr	r2, [r7, #0]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d803      	bhi.n	800ada6 <HAL_SPI_Transmit+0x268>
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ada4:	d102      	bne.n	800adac <HAL_SPI_Transmit+0x26e>
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d102      	bne.n	800adb2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800adac:	2303      	movs	r3, #3
 800adae:	77fb      	strb	r3, [r7, #31]
          goto error;
 800adb0:	e026      	b.n	800ae00 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d1b5      	bne.n	800ad28 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800adbc:	69ba      	ldr	r2, [r7, #24]
 800adbe:	6839      	ldr	r1, [r7, #0]
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f001 f9dd 	bl	800c180 <SPI_EndRxTxTransaction>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d002      	beq.n	800add2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2220      	movs	r2, #32
 800add0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d10a      	bne.n	800adf0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800adda:	2300      	movs	r3, #0
 800addc:	613b      	str	r3, [r7, #16]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	613b      	str	r3, [r7, #16]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	613b      	str	r3, [r7, #16]
 800adee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d002      	beq.n	800adfe <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	77fb      	strb	r3, [r7, #31]
 800adfc:	e000      	b.n	800ae00 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800adfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2201      	movs	r2, #1
 800ae04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ae10:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3720      	adds	r7, #32
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b088      	sub	sp, #32
 800ae1e:	af02      	add	r7, sp, #8
 800ae20:	60f8      	str	r0, [r7, #12]
 800ae22:	60b9      	str	r1, [r7, #8]
 800ae24:	603b      	str	r3, [r7, #0]
 800ae26:	4613      	mov	r3, r2
 800ae28:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae36:	d112      	bne.n	800ae5e <HAL_SPI_Receive+0x44>
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d10e      	bne.n	800ae5e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2204      	movs	r2, #4
 800ae44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ae48:	88fa      	ldrh	r2, [r7, #6]
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	9300      	str	r3, [sp, #0]
 800ae4e:	4613      	mov	r3, r2
 800ae50:	68ba      	ldr	r2, [r7, #8]
 800ae52:	68b9      	ldr	r1, [r7, #8]
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f000 f910 	bl	800b07a <HAL_SPI_TransmitReceive>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	e109      	b.n	800b072 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d101      	bne.n	800ae6c <HAL_SPI_Receive+0x52>
 800ae68:	2302      	movs	r3, #2
 800ae6a:	e102      	b.n	800b072 <HAL_SPI_Receive+0x258>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae74:	f7fb fd08 	bl	8006888 <HAL_GetTick>
 800ae78:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d002      	beq.n	800ae8c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ae86:	2302      	movs	r3, #2
 800ae88:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ae8a:	e0e9      	b.n	800b060 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d002      	beq.n	800ae98 <HAL_SPI_Receive+0x7e>
 800ae92:	88fb      	ldrh	r3, [r7, #6]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d102      	bne.n	800ae9e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ae9c:	e0e0      	b.n	800b060 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2204      	movs	r2, #4
 800aea2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	68ba      	ldr	r2, [r7, #8]
 800aeb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	88fa      	ldrh	r2, [r7, #6]
 800aeb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	88fa      	ldrh	r2, [r7, #6]
 800aebe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2200      	movs	r2, #0
 800aec6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2200      	movs	r2, #0
 800aecc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2200      	movs	r2, #0
 800aed2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2200      	movs	r2, #0
 800aed8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2200      	movs	r2, #0
 800aede:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	68db      	ldr	r3, [r3, #12]
 800aee4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aee8:	d908      	bls.n	800aefc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	685a      	ldr	r2, [r3, #4]
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aef8:	605a      	str	r2, [r3, #4]
 800aefa:	e007      	b.n	800af0c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	685a      	ldr	r2, [r3, #4]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800af0a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af14:	d10f      	bne.n	800af36 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800af34:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af40:	2b40      	cmp	r3, #64	; 0x40
 800af42:	d007      	beq.n	800af54 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af52:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800af5c:	d867      	bhi.n	800b02e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800af5e:	e030      	b.n	800afc2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	f003 0301 	and.w	r3, r3, #1
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d117      	bne.n	800af9e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f103 020c 	add.w	r2, r3, #12
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af7a:	7812      	ldrb	r2, [r2, #0]
 800af7c:	b2d2      	uxtb	r2, r2
 800af7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af84:	1c5a      	adds	r2, r3, #1
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800af90:	b29b      	uxth	r3, r3
 800af92:	3b01      	subs	r3, #1
 800af94:	b29a      	uxth	r2, r3
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800af9c:	e011      	b.n	800afc2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af9e:	f7fb fc73 	bl	8006888 <HAL_GetTick>
 800afa2:	4602      	mov	r2, r0
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	1ad3      	subs	r3, r2, r3
 800afa8:	683a      	ldr	r2, [r7, #0]
 800afaa:	429a      	cmp	r2, r3
 800afac:	d803      	bhi.n	800afb6 <HAL_SPI_Receive+0x19c>
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afb4:	d102      	bne.n	800afbc <HAL_SPI_Receive+0x1a2>
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d102      	bne.n	800afc2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800afbc:	2303      	movs	r3, #3
 800afbe:	75fb      	strb	r3, [r7, #23]
          goto error;
 800afc0:	e04e      	b.n	800b060 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800afc8:	b29b      	uxth	r3, r3
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d1c8      	bne.n	800af60 <HAL_SPI_Receive+0x146>
 800afce:	e034      	b.n	800b03a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	f003 0301 	and.w	r3, r3, #1
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d115      	bne.n	800b00a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	68da      	ldr	r2, [r3, #12]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe8:	b292      	uxth	r2, r2
 800afea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff0:	1c9a      	adds	r2, r3, #2
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800affc:	b29b      	uxth	r3, r3
 800affe:	3b01      	subs	r3, #1
 800b000:	b29a      	uxth	r2, r3
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b008:	e011      	b.n	800b02e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b00a:	f7fb fc3d 	bl	8006888 <HAL_GetTick>
 800b00e:	4602      	mov	r2, r0
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	1ad3      	subs	r3, r2, r3
 800b014:	683a      	ldr	r2, [r7, #0]
 800b016:	429a      	cmp	r2, r3
 800b018:	d803      	bhi.n	800b022 <HAL_SPI_Receive+0x208>
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b020:	d102      	bne.n	800b028 <HAL_SPI_Receive+0x20e>
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d102      	bne.n	800b02e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800b028:	2303      	movs	r3, #3
 800b02a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b02c:	e018      	b.n	800b060 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b034:	b29b      	uxth	r3, r3
 800b036:	2b00      	cmp	r3, #0
 800b038:	d1ca      	bne.n	800afd0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b03a:	693a      	ldr	r2, [r7, #16]
 800b03c:	6839      	ldr	r1, [r7, #0]
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f001 f846 	bl	800c0d0 <SPI_EndRxTransaction>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d002      	beq.n	800b050 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2220      	movs	r2, #32
 800b04e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b054:	2b00      	cmp	r3, #0
 800b056:	d002      	beq.n	800b05e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800b058:	2301      	movs	r3, #1
 800b05a:	75fb      	strb	r3, [r7, #23]
 800b05c:	e000      	b.n	800b060 <HAL_SPI_Receive+0x246>
  }

error :
 800b05e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2201      	movs	r2, #1
 800b064:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2200      	movs	r2, #0
 800b06c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b070:	7dfb      	ldrb	r3, [r7, #23]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3718      	adds	r7, #24
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b08a      	sub	sp, #40	; 0x28
 800b07e:	af00      	add	r7, sp, #0
 800b080:	60f8      	str	r0, [r7, #12]
 800b082:	60b9      	str	r1, [r7, #8]
 800b084:	607a      	str	r2, [r7, #4]
 800b086:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b088:	2301      	movs	r3, #1
 800b08a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d101      	bne.n	800b0a0 <HAL_SPI_TransmitReceive+0x26>
 800b09c:	2302      	movs	r3, #2
 800b09e:	e1fb      	b.n	800b498 <HAL_SPI_TransmitReceive+0x41e>
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b0a8:	f7fb fbee 	bl	8006888 <HAL_GetTick>
 800b0ac:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b0b4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b0bc:	887b      	ldrh	r3, [r7, #2]
 800b0be:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800b0c0:	887b      	ldrh	r3, [r7, #2]
 800b0c2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b0c4:	7efb      	ldrb	r3, [r7, #27]
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d00e      	beq.n	800b0e8 <HAL_SPI_TransmitReceive+0x6e>
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b0d0:	d106      	bne.n	800b0e0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d102      	bne.n	800b0e0 <HAL_SPI_TransmitReceive+0x66>
 800b0da:	7efb      	ldrb	r3, [r7, #27]
 800b0dc:	2b04      	cmp	r3, #4
 800b0de:	d003      	beq.n	800b0e8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800b0e0:	2302      	movs	r3, #2
 800b0e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b0e6:	e1cd      	b.n	800b484 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d005      	beq.n	800b0fa <HAL_SPI_TransmitReceive+0x80>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d002      	beq.n	800b0fa <HAL_SPI_TransmitReceive+0x80>
 800b0f4:	887b      	ldrh	r3, [r7, #2]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d103      	bne.n	800b102 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b100:	e1c0      	b.n	800b484 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	2b04      	cmp	r3, #4
 800b10c:	d003      	beq.n	800b116 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2205      	movs	r2, #5
 800b112:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2200      	movs	r2, #0
 800b11a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	887a      	ldrh	r2, [r7, #2]
 800b126:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	887a      	ldrh	r2, [r7, #2]
 800b12e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	68ba      	ldr	r2, [r7, #8]
 800b136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	887a      	ldrh	r2, [r7, #2]
 800b13c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	887a      	ldrh	r2, [r7, #2]
 800b142:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2200      	movs	r2, #0
 800b148:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2200      	movs	r2, #0
 800b14e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b158:	d802      	bhi.n	800b160 <HAL_SPI_TransmitReceive+0xe6>
 800b15a:	8a3b      	ldrh	r3, [r7, #16]
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d908      	bls.n	800b172 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	685a      	ldr	r2, [r3, #4]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b16e:	605a      	str	r2, [r3, #4]
 800b170:	e007      	b.n	800b182 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	685a      	ldr	r2, [r3, #4]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b180:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b18c:	2b40      	cmp	r3, #64	; 0x40
 800b18e:	d007      	beq.n	800b1a0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b19e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b1a8:	d97c      	bls.n	800b2a4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d002      	beq.n	800b1b8 <HAL_SPI_TransmitReceive+0x13e>
 800b1b2:	8a7b      	ldrh	r3, [r7, #18]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d169      	bne.n	800b28c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1bc:	881a      	ldrh	r2, [r3, #0]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c8:	1c9a      	adds	r2, r3, #2
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	3b01      	subs	r3, #1
 800b1d6:	b29a      	uxth	r2, r3
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b1dc:	e056      	b.n	800b28c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	689b      	ldr	r3, [r3, #8]
 800b1e4:	f003 0302 	and.w	r3, r3, #2
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	d11b      	bne.n	800b224 <HAL_SPI_TransmitReceive+0x1aa>
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d016      	beq.n	800b224 <HAL_SPI_TransmitReceive+0x1aa>
 800b1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d113      	bne.n	800b224 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b200:	881a      	ldrh	r2, [r3, #0]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b20c:	1c9a      	adds	r2, r3, #2
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b216:	b29b      	uxth	r3, r3
 800b218:	3b01      	subs	r3, #1
 800b21a:	b29a      	uxth	r2, r3
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b220:	2300      	movs	r3, #0
 800b222:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	f003 0301 	and.w	r3, r3, #1
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d11c      	bne.n	800b26c <HAL_SPI_TransmitReceive+0x1f2>
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b238:	b29b      	uxth	r3, r3
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d016      	beq.n	800b26c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	68da      	ldr	r2, [r3, #12]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b248:	b292      	uxth	r2, r2
 800b24a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b250:	1c9a      	adds	r2, r3, #2
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	3b01      	subs	r3, #1
 800b260:	b29a      	uxth	r2, r3
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b268:	2301      	movs	r3, #1
 800b26a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b26c:	f7fb fb0c 	bl	8006888 <HAL_GetTick>
 800b270:	4602      	mov	r2, r0
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	1ad3      	subs	r3, r2, r3
 800b276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b278:	429a      	cmp	r2, r3
 800b27a:	d807      	bhi.n	800b28c <HAL_SPI_TransmitReceive+0x212>
 800b27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b282:	d003      	beq.n	800b28c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800b284:	2303      	movs	r3, #3
 800b286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b28a:	e0fb      	b.n	800b484 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b290:	b29b      	uxth	r3, r3
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1a3      	bne.n	800b1de <HAL_SPI_TransmitReceive+0x164>
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d19d      	bne.n	800b1de <HAL_SPI_TransmitReceive+0x164>
 800b2a2:	e0df      	b.n	800b464 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d003      	beq.n	800b2b4 <HAL_SPI_TransmitReceive+0x23a>
 800b2ac:	8a7b      	ldrh	r3, [r7, #18]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	f040 80cb 	bne.w	800b44a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d912      	bls.n	800b2e4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c2:	881a      	ldrh	r2, [r3, #0]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ce:	1c9a      	adds	r2, r3, #2
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	3b02      	subs	r3, #2
 800b2dc:	b29a      	uxth	r2, r3
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b2e2:	e0b2      	b.n	800b44a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	330c      	adds	r3, #12
 800b2ee:	7812      	ldrb	r2, [r2, #0]
 800b2f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f6:	1c5a      	adds	r2, r3, #1
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b300:	b29b      	uxth	r3, r3
 800b302:	3b01      	subs	r3, #1
 800b304:	b29a      	uxth	r2, r3
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b30a:	e09e      	b.n	800b44a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	f003 0302 	and.w	r3, r3, #2
 800b316:	2b02      	cmp	r3, #2
 800b318:	d134      	bne.n	800b384 <HAL_SPI_TransmitReceive+0x30a>
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b31e:	b29b      	uxth	r3, r3
 800b320:	2b00      	cmp	r3, #0
 800b322:	d02f      	beq.n	800b384 <HAL_SPI_TransmitReceive+0x30a>
 800b324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b326:	2b01      	cmp	r3, #1
 800b328:	d12c      	bne.n	800b384 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b32e:	b29b      	uxth	r3, r3
 800b330:	2b01      	cmp	r3, #1
 800b332:	d912      	bls.n	800b35a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b338:	881a      	ldrh	r2, [r3, #0]
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b344:	1c9a      	adds	r2, r3, #2
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b34e:	b29b      	uxth	r3, r3
 800b350:	3b02      	subs	r3, #2
 800b352:	b29a      	uxth	r2, r3
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b358:	e012      	b.n	800b380 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	330c      	adds	r3, #12
 800b364:	7812      	ldrb	r2, [r2, #0]
 800b366:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b36c:	1c5a      	adds	r2, r3, #1
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b376:	b29b      	uxth	r3, r3
 800b378:	3b01      	subs	r3, #1
 800b37a:	b29a      	uxth	r2, r3
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b380:	2300      	movs	r3, #0
 800b382:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	f003 0301 	and.w	r3, r3, #1
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d148      	bne.n	800b424 <HAL_SPI_TransmitReceive+0x3aa>
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b398:	b29b      	uxth	r3, r3
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d042      	beq.n	800b424 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d923      	bls.n	800b3f2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	68da      	ldr	r2, [r3, #12]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b4:	b292      	uxth	r2, r2
 800b3b6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3bc:	1c9a      	adds	r2, r3, #2
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	3b02      	subs	r3, #2
 800b3cc:	b29a      	uxth	r2, r3
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d81f      	bhi.n	800b420 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	685a      	ldr	r2, [r3, #4]
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b3ee:	605a      	str	r2, [r3, #4]
 800b3f0:	e016      	b.n	800b420 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f103 020c 	add.w	r2, r3, #12
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3fe:	7812      	ldrb	r2, [r2, #0]
 800b400:	b2d2      	uxtb	r2, r2
 800b402:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b408:	1c5a      	adds	r2, r3, #1
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b414:	b29b      	uxth	r3, r3
 800b416:	3b01      	subs	r3, #1
 800b418:	b29a      	uxth	r2, r3
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b420:	2301      	movs	r3, #1
 800b422:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b424:	f7fb fa30 	bl	8006888 <HAL_GetTick>
 800b428:	4602      	mov	r2, r0
 800b42a:	69fb      	ldr	r3, [r7, #28]
 800b42c:	1ad3      	subs	r3, r2, r3
 800b42e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b430:	429a      	cmp	r2, r3
 800b432:	d803      	bhi.n	800b43c <HAL_SPI_TransmitReceive+0x3c2>
 800b434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b436:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b43a:	d102      	bne.n	800b442 <HAL_SPI_TransmitReceive+0x3c8>
 800b43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d103      	bne.n	800b44a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800b442:	2303      	movs	r3, #3
 800b444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b448:	e01c      	b.n	800b484 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b44e:	b29b      	uxth	r3, r3
 800b450:	2b00      	cmp	r3, #0
 800b452:	f47f af5b 	bne.w	800b30c <HAL_SPI_TransmitReceive+0x292>
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	2b00      	cmp	r3, #0
 800b460:	f47f af54 	bne.w	800b30c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b464:	69fa      	ldr	r2, [r7, #28]
 800b466:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f000 fe89 	bl	800c180 <SPI_EndRxTxTransaction>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d006      	beq.n	800b482 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800b474:	2301      	movs	r3, #1
 800b476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2220      	movs	r2, #32
 800b47e:	661a      	str	r2, [r3, #96]	; 0x60
 800b480:	e000      	b.n	800b484 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800b482:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2201      	movs	r2, #1
 800b488:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2200      	movs	r2, #0
 800b490:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b494:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3728      	adds	r7, #40	; 0x28
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b086      	sub	sp, #24
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	60b9      	str	r1, [r7, #8]
 800b4aa:	4613      	mov	r3, r2
 800b4ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d101      	bne.n	800b4c0 <HAL_SPI_Transmit_DMA+0x20>
 800b4bc:	2302      	movs	r3, #2
 800b4be:	e0d8      	b.n	800b672 <HAL_SPI_Transmit_DMA+0x1d2>
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d002      	beq.n	800b4da <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800b4d4:	2302      	movs	r3, #2
 800b4d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b4d8:	e0c6      	b.n	800b668 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d002      	beq.n	800b4e6 <HAL_SPI_Transmit_DMA+0x46>
 800b4e0:	88fb      	ldrh	r3, [r7, #6]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d102      	bne.n	800b4ec <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b4ea:	e0bd      	b.n	800b668 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2203      	movs	r2, #3
 800b4f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	88fa      	ldrh	r2, [r7, #6]
 800b504:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	88fa      	ldrh	r2, [r7, #6]
 800b50a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2200      	movs	r2, #0
 800b510:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2200      	movs	r2, #0
 800b516:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2200      	movs	r2, #0
 800b51c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2200      	movs	r2, #0
 800b522:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2200      	movs	r2, #0
 800b52a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b536:	d10f      	bne.n	800b558 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b546:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b556:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b55c:	4a47      	ldr	r2, [pc, #284]	; (800b67c <HAL_SPI_Transmit_DMA+0x1dc>)
 800b55e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b564:	4a46      	ldr	r2, [pc, #280]	; (800b680 <HAL_SPI_Transmit_DMA+0x1e0>)
 800b566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b56c:	4a45      	ldr	r2, [pc, #276]	; (800b684 <HAL_SPI_Transmit_DMA+0x1e4>)
 800b56e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b574:	2200      	movs	r2, #0
 800b576:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	685a      	ldr	r2, [r3, #4]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b586:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b590:	d82d      	bhi.n	800b5ee <HAL_SPI_Transmit_DMA+0x14e>
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b596:	699b      	ldr	r3, [r3, #24]
 800b598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b59c:	d127      	bne.n	800b5ee <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	f003 0301 	and.w	r3, r3, #1
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d10f      	bne.n	800b5cc <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	685a      	ldr	r2, [r3, #4]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b5ba:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	085b      	lsrs	r3, r3, #1
 800b5c4:	b29a      	uxth	r2, r3
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b5ca:	e010      	b.n	800b5ee <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	685a      	ldr	r2, [r3, #4]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b5da:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	085b      	lsrs	r3, r3, #1
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	330c      	adds	r3, #12
 800b5fe:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b604:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b606:	f7fb fb6b 	bl	8006ce0 <HAL_DMA_Start_IT>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d00c      	beq.n	800b62a <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b614:	f043 0210 	orr.w	r2, r3, #16
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800b61c:	2301      	movs	r3, #1
 800b61e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2201      	movs	r2, #1
 800b624:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800b628:	e01e      	b.n	800b668 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b634:	2b40      	cmp	r3, #64	; 0x40
 800b636:	d007      	beq.n	800b648 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b646:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	685a      	ldr	r2, [r3, #4]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f042 0220 	orr.w	r2, r2, #32
 800b656:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	685a      	ldr	r2, [r3, #4]
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f042 0202 	orr.w	r2, r2, #2
 800b666:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2200      	movs	r2, #0
 800b66c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b670:	7dfb      	ldrb	r3, [r7, #23]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3718      	adds	r7, #24
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	0800bdd7 	.word	0x0800bdd7
 800b680:	0800bbf9 	.word	0x0800bbf9
 800b684:	0800be2b 	.word	0x0800be2b

0800b688 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b086      	sub	sp, #24
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	60b9      	str	r1, [r7, #8]
 800b692:	607a      	str	r2, [r7, #4]
 800b694:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b696:	2300      	movs	r3, #0
 800b698:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d101      	bne.n	800b6a8 <HAL_SPI_TransmitReceive_DMA+0x20>
 800b6a4:	2302      	movs	r3, #2
 800b6a6:	e16c      	b.n	800b982 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b6b6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800b6be:	7dbb      	ldrb	r3, [r7, #22]
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d00d      	beq.n	800b6e0 <HAL_SPI_TransmitReceive_DMA+0x58>
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b6ca:	d106      	bne.n	800b6da <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d102      	bne.n	800b6da <HAL_SPI_TransmitReceive_DMA+0x52>
 800b6d4:	7dbb      	ldrb	r3, [r7, #22]
 800b6d6:	2b04      	cmp	r3, #4
 800b6d8:	d002      	beq.n	800b6e0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800b6da:	2302      	movs	r3, #2
 800b6dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b6de:	e14b      	b.n	800b978 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d005      	beq.n	800b6f2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d002      	beq.n	800b6f2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800b6ec:	887b      	ldrh	r3, [r7, #2]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d102      	bne.n	800b6f8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b6f6:	e13f      	b.n	800b978 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	2b04      	cmp	r3, #4
 800b702:	d003      	beq.n	800b70c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2205      	movs	r2, #5
 800b708:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2200      	movs	r2, #0
 800b710:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	68ba      	ldr	r2, [r7, #8]
 800b716:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	887a      	ldrh	r2, [r7, #2]
 800b71c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	887a      	ldrh	r2, [r7, #2]
 800b722:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	887a      	ldrh	r2, [r7, #2]
 800b72e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	887a      	ldrh	r2, [r7, #2]
 800b736:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2200      	movs	r2, #0
 800b73e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2200      	movs	r2, #0
 800b744:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	685a      	ldr	r2, [r3, #4]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800b754:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b75e:	d908      	bls.n	800b772 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	685a      	ldr	r2, [r3, #4]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b76e:	605a      	str	r2, [r3, #4]
 800b770:	e06f      	b.n	800b852 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	685a      	ldr	r2, [r3, #4]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b780:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b786:	699b      	ldr	r3, [r3, #24]
 800b788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b78c:	d126      	bne.n	800b7dc <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b792:	f003 0301 	and.w	r3, r3, #1
 800b796:	2b00      	cmp	r3, #0
 800b798:	d10f      	bne.n	800b7ba <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	685a      	ldr	r2, [r3, #4]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b7a8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	085b      	lsrs	r3, r3, #1
 800b7b2:	b29a      	uxth	r2, r3
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b7b8:	e010      	b.n	800b7dc <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	685a      	ldr	r2, [r3, #4]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b7c8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	085b      	lsrs	r3, r3, #1
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	b29a      	uxth	r2, r3
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7e0:	699b      	ldr	r3, [r3, #24]
 800b7e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7e6:	d134      	bne.n	800b852 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	685a      	ldr	r2, [r3, #4]
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b7f6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	f003 0301 	and.w	r3, r3, #1
 800b804:	2b00      	cmp	r3, #0
 800b806:	d111      	bne.n	800b82c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	685a      	ldr	r2, [r3, #4]
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b816:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b81e:	b29b      	uxth	r3, r3
 800b820:	085b      	lsrs	r3, r3, #1
 800b822:	b29a      	uxth	r2, r3
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b82a:	e012      	b.n	800b852 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	685a      	ldr	r2, [r3, #4]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b83a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b842:	b29b      	uxth	r3, r3
 800b844:	085b      	lsrs	r3, r3, #1
 800b846:	b29b      	uxth	r3, r3
 800b848:	3301      	adds	r3, #1
 800b84a:	b29a      	uxth	r2, r3
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	2b04      	cmp	r3, #4
 800b85c:	d108      	bne.n	800b870 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b862:	4a4a      	ldr	r2, [pc, #296]	; (800b98c <HAL_SPI_TransmitReceive_DMA+0x304>)
 800b864:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b86a:	4a49      	ldr	r2, [pc, #292]	; (800b990 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800b86c:	62da      	str	r2, [r3, #44]	; 0x2c
 800b86e:	e007      	b.n	800b880 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b874:	4a47      	ldr	r2, [pc, #284]	; (800b994 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800b876:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b87c:	4a46      	ldr	r2, [pc, #280]	; (800b998 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800b87e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b884:	4a45      	ldr	r2, [pc, #276]	; (800b99c <HAL_SPI_TransmitReceive_DMA+0x314>)
 800b886:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b88c:	2200      	movs	r2, #0
 800b88e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	330c      	adds	r3, #12
 800b89a:	4619      	mov	r1, r3
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b8a8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800b8aa:	f7fb fa19 	bl	8006ce0 <HAL_DMA_Start_IT>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00c      	beq.n	800b8ce <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8b8:	f043 0210 	orr.w	r2, r3, #16
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800b8cc:	e054      	b.n	800b978 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	685a      	ldr	r2, [r3, #4]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f042 0201 	orr.w	r2, r2, #1
 800b8dc:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b906:	4619      	mov	r1, r3
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	330c      	adds	r3, #12
 800b90e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b914:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b916:	f7fb f9e3 	bl	8006ce0 <HAL_DMA_Start_IT>
 800b91a:	4603      	mov	r3, r0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00c      	beq.n	800b93a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b924:	f043 0210 	orr.w	r2, r3, #16
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800b92c:	2301      	movs	r3, #1
 800b92e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2201      	movs	r2, #1
 800b934:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800b938:	e01e      	b.n	800b978 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b944:	2b40      	cmp	r3, #64	; 0x40
 800b946:	d007      	beq.n	800b958 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b956:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	685a      	ldr	r2, [r3, #4]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f042 0220 	orr.w	r2, r2, #32
 800b966:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	685a      	ldr	r2, [r3, #4]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f042 0202 	orr.w	r2, r2, #2
 800b976:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2200      	movs	r2, #0
 800b97c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b980:	7dfb      	ldrb	r3, [r7, #23]
}
 800b982:	4618      	mov	r0, r3
 800b984:	3718      	adds	r7, #24
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	0800bdf3 	.word	0x0800bdf3
 800b990:	0800bc9f 	.word	0x0800bc9f
 800b994:	0800be0f 	.word	0x0800be0f
 800b998:	0800bd47 	.word	0x0800bd47
 800b99c:	0800be2b 	.word	0x0800be2b

0800b9a0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b088      	sub	sp, #32
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b9b8:	69bb      	ldr	r3, [r7, #24]
 800b9ba:	099b      	lsrs	r3, r3, #6
 800b9bc:	f003 0301 	and.w	r3, r3, #1
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d10f      	bne.n	800b9e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d00a      	beq.n	800b9e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b9ce:	69fb      	ldr	r3, [r7, #28]
 800b9d0:	099b      	lsrs	r3, r3, #6
 800b9d2:	f003 0301 	and.w	r3, r3, #1
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d004      	beq.n	800b9e4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	4798      	blx	r3
    return;
 800b9e2:	e0d7      	b.n	800bb94 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b9e4:	69bb      	ldr	r3, [r7, #24]
 800b9e6:	085b      	lsrs	r3, r3, #1
 800b9e8:	f003 0301 	and.w	r3, r3, #1
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d00a      	beq.n	800ba06 <HAL_SPI_IRQHandler+0x66>
 800b9f0:	69fb      	ldr	r3, [r7, #28]
 800b9f2:	09db      	lsrs	r3, r3, #7
 800b9f4:	f003 0301 	and.w	r3, r3, #1
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d004      	beq.n	800ba06 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	4798      	blx	r3
    return;
 800ba04:	e0c6      	b.n	800bb94 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	095b      	lsrs	r3, r3, #5
 800ba0a:	f003 0301 	and.w	r3, r3, #1
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d10c      	bne.n	800ba2c <HAL_SPI_IRQHandler+0x8c>
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	099b      	lsrs	r3, r3, #6
 800ba16:	f003 0301 	and.w	r3, r3, #1
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d106      	bne.n	800ba2c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ba1e:	69bb      	ldr	r3, [r7, #24]
 800ba20:	0a1b      	lsrs	r3, r3, #8
 800ba22:	f003 0301 	and.w	r3, r3, #1
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	f000 80b4 	beq.w	800bb94 <HAL_SPI_IRQHandler+0x1f4>
 800ba2c:	69fb      	ldr	r3, [r7, #28]
 800ba2e:	095b      	lsrs	r3, r3, #5
 800ba30:	f003 0301 	and.w	r3, r3, #1
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	f000 80ad 	beq.w	800bb94 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ba3a:	69bb      	ldr	r3, [r7, #24]
 800ba3c:	099b      	lsrs	r3, r3, #6
 800ba3e:	f003 0301 	and.w	r3, r3, #1
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d023      	beq.n	800ba8e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	2b03      	cmp	r3, #3
 800ba50:	d011      	beq.n	800ba76 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba56:	f043 0204 	orr.w	r2, r3, #4
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ba5e:	2300      	movs	r3, #0
 800ba60:	617b      	str	r3, [r7, #20]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	617b      	str	r3, [r7, #20]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	617b      	str	r3, [r7, #20]
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	e00b      	b.n	800ba8e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ba76:	2300      	movs	r3, #0
 800ba78:	613b      	str	r3, [r7, #16]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	613b      	str	r3, [r7, #16]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	613b      	str	r3, [r7, #16]
 800ba8a:	693b      	ldr	r3, [r7, #16]
        return;
 800ba8c:	e082      	b.n	800bb94 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	095b      	lsrs	r3, r3, #5
 800ba92:	f003 0301 	and.w	r3, r3, #1
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d014      	beq.n	800bac4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba9e:	f043 0201 	orr.w	r2, r3, #1
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800baa6:	2300      	movs	r3, #0
 800baa8:	60fb      	str	r3, [r7, #12]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	689b      	ldr	r3, [r3, #8]
 800bab0:	60fb      	str	r3, [r7, #12]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bac0:	601a      	str	r2, [r3, #0]
 800bac2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	0a1b      	lsrs	r3, r3, #8
 800bac8:	f003 0301 	and.w	r3, r3, #1
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d00c      	beq.n	800baea <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bad4:	f043 0208 	orr.w	r2, r3, #8
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800badc:	2300      	movs	r3, #0
 800bade:	60bb      	str	r3, [r7, #8]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	60bb      	str	r3, [r7, #8]
 800bae8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d04f      	beq.n	800bb92 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	685a      	ldr	r2, [r3, #4]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bb00:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2201      	movs	r2, #1
 800bb06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bb0a:	69fb      	ldr	r3, [r7, #28]
 800bb0c:	f003 0302 	and.w	r3, r3, #2
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d104      	bne.n	800bb1e <HAL_SPI_IRQHandler+0x17e>
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	f003 0301 	and.w	r3, r3, #1
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d034      	beq.n	800bb88 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	685a      	ldr	r2, [r3, #4]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f022 0203 	bic.w	r2, r2, #3
 800bb2c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d011      	beq.n	800bb5a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb3a:	4a18      	ldr	r2, [pc, #96]	; (800bb9c <HAL_SPI_IRQHandler+0x1fc>)
 800bb3c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7fb f96a 	bl	8006e1c <HAL_DMA_Abort_IT>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d005      	beq.n	800bb5a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d016      	beq.n	800bb90 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb66:	4a0d      	ldr	r2, [pc, #52]	; (800bb9c <HAL_SPI_IRQHandler+0x1fc>)
 800bb68:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7fb f954 	bl	8006e1c <HAL_DMA_Abort_IT>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d00a      	beq.n	800bb90 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800bb86:	e003      	b.n	800bb90 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f7f8 ff75 	bl	8004a78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bb8e:	e000      	b.n	800bb92 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800bb90:	bf00      	nop
    return;
 800bb92:	bf00      	nop
  }
}
 800bb94:	3720      	adds	r7, #32
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	0800be6b 	.word	0x0800be6b

0800bba0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800bba8:	bf00      	nop
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800bbbc:	bf00      	nop
 800bbbe:	370c      	adds	r7, #12
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800bbd0:	bf00      	nop
 800bbd2:	370c      	adds	r7, #12
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr

0800bbdc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b083      	sub	sp, #12
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bbea:	b2db      	uxtb	r3, r3
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	370c      	adds	r7, #12
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc04:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc06:	f7fa fe3f 	bl	8006888 <HAL_GetTick>
 800bc0a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f003 0320 	and.w	r3, r3, #32
 800bc16:	2b20      	cmp	r3, #32
 800bc18:	d03b      	beq.n	800bc92 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	685a      	ldr	r2, [r3, #4]
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f022 0220 	bic.w	r2, r2, #32
 800bc28:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	685a      	ldr	r2, [r3, #4]
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f022 0202 	bic.w	r2, r2, #2
 800bc38:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800bc3a:	693a      	ldr	r2, [r7, #16]
 800bc3c:	2164      	movs	r1, #100	; 0x64
 800bc3e:	6978      	ldr	r0, [r7, #20]
 800bc40:	f000 fa9e 	bl	800c180 <SPI_EndRxTxTransaction>
 800bc44:	4603      	mov	r3, r0
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d005      	beq.n	800bc56 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc4e:	f043 0220 	orr.w	r2, r3, #32
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d10a      	bne.n	800bc74 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc5e:	2300      	movs	r3, #0
 800bc60:	60fb      	str	r3, [r7, #12]
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	60fb      	str	r3, [r7, #12]
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	60fb      	str	r3, [r7, #12]
 800bc72:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	2200      	movs	r2, #0
 800bc78:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d003      	beq.n	800bc92 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800bc8a:	6978      	ldr	r0, [r7, #20]
 800bc8c:	f7f8 fef4 	bl	8004a78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800bc90:	e002      	b.n	800bc98 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800bc92:	6978      	ldr	r0, [r7, #20]
 800bc94:	f7f8 fed9 	bl	8004a4a <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bc98:	3718      	adds	r7, #24
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b084      	sub	sp, #16
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcaa:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bcac:	f7fa fdec 	bl	8006888 <HAL_GetTick>
 800bcb0:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f003 0320 	and.w	r3, r3, #32
 800bcbc:	2b20      	cmp	r3, #32
 800bcbe:	d03c      	beq.n	800bd3a <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	685a      	ldr	r2, [r3, #4]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f022 0220 	bic.w	r2, r2, #32
 800bcce:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d10d      	bne.n	800bcf4 <SPI_DMAReceiveCplt+0x56>
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bce0:	d108      	bne.n	800bcf4 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	685a      	ldr	r2, [r3, #4]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f022 0203 	bic.w	r2, r2, #3
 800bcf0:	605a      	str	r2, [r3, #4]
 800bcf2:	e007      	b.n	800bd04 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	685a      	ldr	r2, [r3, #4]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f022 0201 	bic.w	r2, r2, #1
 800bd02:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800bd04:	68ba      	ldr	r2, [r7, #8]
 800bd06:	2164      	movs	r1, #100	; 0x64
 800bd08:	68f8      	ldr	r0, [r7, #12]
 800bd0a:	f000 f9e1 	bl	800c0d0 <SPI_EndRxTransaction>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d002      	beq.n	800bd1a <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2220      	movs	r2, #32
 800bd18:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2201      	movs	r2, #1
 800bd26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d003      	beq.n	800bd3a <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800bd32:	68f8      	ldr	r0, [r7, #12]
 800bd34:	f7f8 fea0 	bl	8004a78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800bd38:	e002      	b.n	800bd40 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800bd3a:	68f8      	ldr	r0, [r7, #12]
 800bd3c:	f7f8 fe7a 	bl	8004a34 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bd40:	3710      	adds	r7, #16
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}

0800bd46 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bd46:	b580      	push	{r7, lr}
 800bd48:	b084      	sub	sp, #16
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd52:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bd54:	f7fa fd98 	bl	8006888 <HAL_GetTick>
 800bd58:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f003 0320 	and.w	r3, r3, #32
 800bd64:	2b20      	cmp	r3, #32
 800bd66:	d030      	beq.n	800bdca <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	685a      	ldr	r2, [r3, #4]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f022 0220 	bic.w	r2, r2, #32
 800bd76:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800bd78:	68ba      	ldr	r2, [r7, #8]
 800bd7a:	2164      	movs	r1, #100	; 0x64
 800bd7c:	68f8      	ldr	r0, [r7, #12]
 800bd7e:	f000 f9ff 	bl	800c180 <SPI_EndRxTxTransaction>
 800bd82:	4603      	mov	r3, r0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d005      	beq.n	800bd94 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd8c:	f043 0220 	orr.w	r2, r3, #32
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	685a      	ldr	r2, [r3, #4]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f022 0203 	bic.w	r2, r2, #3
 800bda2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2200      	movs	r2, #0
 800bda8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2200      	movs	r2, #0
 800bdae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d003      	beq.n	800bdca <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800bdc2:	68f8      	ldr	r0, [r7, #12]
 800bdc4:	f7f8 fe58 	bl	8004a78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800bdc8:	e002      	b.n	800bdd0 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	f7f8 fe48 	bl	8004a60 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bdd0:	3710      	adds	r7, #16
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bdd6:	b580      	push	{r7, lr}
 800bdd8:	b084      	sub	sp, #16
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bde2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800bde4:	68f8      	ldr	r0, [r7, #12]
 800bde6:	f7ff fedb 	bl	800bba0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bdea:	bf00      	nop
 800bdec:	3710      	adds	r7, #16
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}

0800bdf2 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bdf2:	b580      	push	{r7, lr}
 800bdf4:	b084      	sub	sp, #16
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdfe:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	f7ff fed7 	bl	800bbb4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800be06:	bf00      	nop
 800be08:	3710      	adds	r7, #16
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b084      	sub	sp, #16
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be1a:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800be1c:	68f8      	ldr	r0, [r7, #12]
 800be1e:	f7ff fed3 	bl	800bbc8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800be22:	bf00      	nop
 800be24:	3710      	adds	r7, #16
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b084      	sub	sp, #16
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be36:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	685a      	ldr	r2, [r3, #4]
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f022 0203 	bic.w	r2, r2, #3
 800be46:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be4c:	f043 0210 	orr.w	r2, r3, #16
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2201      	movs	r2, #1
 800be58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800be5c:	68f8      	ldr	r0, [r7, #12]
 800be5e:	f7f8 fe0b 	bl	8004a78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800be62:	bf00      	nop
 800be64:	3710      	adds	r7, #16
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}

0800be6a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be6a:	b580      	push	{r7, lr}
 800be6c:	b084      	sub	sp, #16
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be76:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2200      	movs	r2, #0
 800be7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2200      	movs	r2, #0
 800be84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800be86:	68f8      	ldr	r0, [r7, #12]
 800be88:	f7f8 fdf6 	bl	8004a78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800be8c:	bf00      	nop
 800be8e:	3710      	adds	r7, #16
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b088      	sub	sp, #32
 800be98:	af00      	add	r7, sp, #0
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	603b      	str	r3, [r7, #0]
 800bea0:	4613      	mov	r3, r2
 800bea2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bea4:	f7fa fcf0 	bl	8006888 <HAL_GetTick>
 800bea8:	4602      	mov	r2, r0
 800beaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beac:	1a9b      	subs	r3, r3, r2
 800beae:	683a      	ldr	r2, [r7, #0]
 800beb0:	4413      	add	r3, r2
 800beb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800beb4:	f7fa fce8 	bl	8006888 <HAL_GetTick>
 800beb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800beba:	4b39      	ldr	r3, [pc, #228]	; (800bfa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	015b      	lsls	r3, r3, #5
 800bec0:	0d1b      	lsrs	r3, r3, #20
 800bec2:	69fa      	ldr	r2, [r7, #28]
 800bec4:	fb02 f303 	mul.w	r3, r2, r3
 800bec8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800beca:	e054      	b.n	800bf76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bed2:	d050      	beq.n	800bf76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bed4:	f7fa fcd8 	bl	8006888 <HAL_GetTick>
 800bed8:	4602      	mov	r2, r0
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	1ad3      	subs	r3, r2, r3
 800bede:	69fa      	ldr	r2, [r7, #28]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d902      	bls.n	800beea <SPI_WaitFlagStateUntilTimeout+0x56>
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d13d      	bne.n	800bf66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	685a      	ldr	r2, [r3, #4]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bef8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf02:	d111      	bne.n	800bf28 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf0c:	d004      	beq.n	800bf18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf16:	d107      	bne.n	800bf28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf30:	d10f      	bne.n	800bf52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	681a      	ldr	r2, [r3, #0]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bf40:	601a      	str	r2, [r3, #0]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bf50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2201      	movs	r2, #1
 800bf56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bf62:	2303      	movs	r3, #3
 800bf64:	e017      	b.n	800bf96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d101      	bne.n	800bf70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	3b01      	subs	r3, #1
 800bf74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	689a      	ldr	r2, [r3, #8]
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	4013      	ands	r3, r2
 800bf80:	68ba      	ldr	r2, [r7, #8]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	bf0c      	ite	eq
 800bf86:	2301      	moveq	r3, #1
 800bf88:	2300      	movne	r3, #0
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	79fb      	ldrb	r3, [r7, #7]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d19b      	bne.n	800becc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bf94:	2300      	movs	r3, #0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3720      	adds	r7, #32
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	200001e8 	.word	0x200001e8

0800bfa4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b08a      	sub	sp, #40	; 0x28
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
 800bfb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bfb6:	f7fa fc67 	bl	8006888 <HAL_GetTick>
 800bfba:	4602      	mov	r2, r0
 800bfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbe:	1a9b      	subs	r3, r3, r2
 800bfc0:	683a      	ldr	r2, [r7, #0]
 800bfc2:	4413      	add	r3, r2
 800bfc4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800bfc6:	f7fa fc5f 	bl	8006888 <HAL_GetTick>
 800bfca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	330c      	adds	r3, #12
 800bfd2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bfd4:	4b3d      	ldr	r3, [pc, #244]	; (800c0cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 800bfd6:	681a      	ldr	r2, [r3, #0]
 800bfd8:	4613      	mov	r3, r2
 800bfda:	009b      	lsls	r3, r3, #2
 800bfdc:	4413      	add	r3, r2
 800bfde:	00da      	lsls	r2, r3, #3
 800bfe0:	1ad3      	subs	r3, r2, r3
 800bfe2:	0d1b      	lsrs	r3, r3, #20
 800bfe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfe6:	fb02 f303 	mul.w	r3, r2, r3
 800bfea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800bfec:	e060      	b.n	800c0b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bff4:	d107      	bne.n	800c006 <SPI_WaitFifoStateUntilTimeout+0x62>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d104      	bne.n	800c006 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	b2db      	uxtb	r3, r3
 800c002:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c004:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c00c:	d050      	beq.n	800c0b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c00e:	f7fa fc3b 	bl	8006888 <HAL_GetTick>
 800c012:	4602      	mov	r2, r0
 800c014:	6a3b      	ldr	r3, [r7, #32]
 800c016:	1ad3      	subs	r3, r2, r3
 800c018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d902      	bls.n	800c024 <SPI_WaitFifoStateUntilTimeout+0x80>
 800c01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c020:	2b00      	cmp	r3, #0
 800c022:	d13d      	bne.n	800c0a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	685a      	ldr	r2, [r3, #4]
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c032:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c03c:	d111      	bne.n	800c062 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	689b      	ldr	r3, [r3, #8]
 800c042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c046:	d004      	beq.n	800c052 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c050:	d107      	bne.n	800c062 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	681a      	ldr	r2, [r3, #0]
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c060:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c06a:	d10f      	bne.n	800c08c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c07a:	601a      	str	r2, [r3, #0]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	681a      	ldr	r2, [r3, #0]
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c08a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2201      	movs	r2, #1
 800c090:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2200      	movs	r2, #0
 800c098:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c09c:	2303      	movs	r3, #3
 800c09e:	e010      	b.n	800c0c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d101      	bne.n	800c0aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c0aa:	69bb      	ldr	r3, [r7, #24]
 800c0ac:	3b01      	subs	r3, #1
 800c0ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	689a      	ldr	r2, [r3, #8]
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	4013      	ands	r3, r2
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d196      	bne.n	800bfee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c0c0:	2300      	movs	r3, #0
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3728      	adds	r7, #40	; 0x28
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	200001e8 	.word	0x200001e8

0800c0d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b086      	sub	sp, #24
 800c0d4:	af02      	add	r7, sp, #8
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	60b9      	str	r1, [r7, #8]
 800c0da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c0e4:	d111      	bne.n	800c10a <SPI_EndRxTransaction+0x3a>
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	689b      	ldr	r3, [r3, #8]
 800c0ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0ee:	d004      	beq.n	800c0fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	689b      	ldr	r3, [r3, #8]
 800c0f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0f8:	d107      	bne.n	800c10a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c108:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	9300      	str	r3, [sp, #0]
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	2200      	movs	r2, #0
 800c112:	2180      	movs	r1, #128	; 0x80
 800c114:	68f8      	ldr	r0, [r7, #12]
 800c116:	f7ff febd 	bl	800be94 <SPI_WaitFlagStateUntilTimeout>
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d007      	beq.n	800c130 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c124:	f043 0220 	orr.w	r2, r3, #32
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c12c:	2303      	movs	r3, #3
 800c12e:	e023      	b.n	800c178 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c138:	d11d      	bne.n	800c176 <SPI_EndRxTransaction+0xa6>
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	689b      	ldr	r3, [r3, #8]
 800c13e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c142:	d004      	beq.n	800c14e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c14c:	d113      	bne.n	800c176 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	9300      	str	r3, [sp, #0]
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	2200      	movs	r2, #0
 800c156:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c15a:	68f8      	ldr	r0, [r7, #12]
 800c15c:	f7ff ff22 	bl	800bfa4 <SPI_WaitFifoStateUntilTimeout>
 800c160:	4603      	mov	r3, r0
 800c162:	2b00      	cmp	r3, #0
 800c164:	d007      	beq.n	800c176 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c16a:	f043 0220 	orr.w	r2, r3, #32
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800c172:	2303      	movs	r3, #3
 800c174:	e000      	b.n	800c178 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800c176:	2300      	movs	r3, #0
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3710      	adds	r7, #16
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b086      	sub	sp, #24
 800c184:	af02      	add	r7, sp, #8
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	2200      	movs	r2, #0
 800c194:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c198:	68f8      	ldr	r0, [r7, #12]
 800c19a:	f7ff ff03 	bl	800bfa4 <SPI_WaitFifoStateUntilTimeout>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d007      	beq.n	800c1b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1a8:	f043 0220 	orr.w	r2, r3, #32
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c1b0:	2303      	movs	r3, #3
 800c1b2:	e027      	b.n	800c204 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	9300      	str	r3, [sp, #0]
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	2180      	movs	r1, #128	; 0x80
 800c1be:	68f8      	ldr	r0, [r7, #12]
 800c1c0:	f7ff fe68 	bl	800be94 <SPI_WaitFlagStateUntilTimeout>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d007      	beq.n	800c1da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1ce:	f043 0220 	orr.w	r2, r3, #32
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c1d6:	2303      	movs	r3, #3
 800c1d8:	e014      	b.n	800c204 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	9300      	str	r3, [sp, #0]
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f7ff fedc 	bl	800bfa4 <SPI_WaitFifoStateUntilTimeout>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d007      	beq.n	800c202 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1f6:	f043 0220 	orr.w	r2, r3, #32
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c1fe:	2303      	movs	r3, #3
 800c200:	e000      	b.n	800c204 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c202:	2300      	movs	r3, #0
}
 800c204:	4618      	mov	r0, r3
 800c206:	3710      	adds	r7, #16
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d101      	bne.n	800c21e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c21a:	2301      	movs	r3, #1
 800c21c:	e049      	b.n	800c2b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c224:	b2db      	uxtb	r3, r3
 800c226:	2b00      	cmp	r3, #0
 800c228:	d106      	bne.n	800c238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f7f9 fafa 	bl	800582c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2202      	movs	r2, #2
 800c23c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	3304      	adds	r3, #4
 800c248:	4619      	mov	r1, r3
 800c24a:	4610      	mov	r0, r2
 800c24c:	f000 fae6 	bl	800c81c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2201      	movs	r2, #1
 800c254:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2201      	movs	r2, #1
 800c25c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2201      	movs	r2, #1
 800c264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2201      	movs	r2, #1
 800c26c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2201      	movs	r2, #1
 800c27c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2201      	movs	r2, #1
 800c284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2201      	movs	r2, #1
 800c28c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2201      	movs	r2, #1
 800c294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2201      	movs	r2, #1
 800c29c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c2b0:	2300      	movs	r3, #0
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3708      	adds	r7, #8
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
	...

0800c2bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b085      	sub	sp, #20
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2ca:	b2db      	uxtb	r3, r3
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d001      	beq.n	800c2d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	e04f      	b.n	800c374 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2202      	movs	r2, #2
 800c2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	68da      	ldr	r2, [r3, #12]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f042 0201 	orr.w	r2, r2, #1
 800c2ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4a23      	ldr	r2, [pc, #140]	; (800c380 <HAL_TIM_Base_Start_IT+0xc4>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d01d      	beq.n	800c332 <HAL_TIM_Base_Start_IT+0x76>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2fe:	d018      	beq.n	800c332 <HAL_TIM_Base_Start_IT+0x76>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4a1f      	ldr	r2, [pc, #124]	; (800c384 <HAL_TIM_Base_Start_IT+0xc8>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d013      	beq.n	800c332 <HAL_TIM_Base_Start_IT+0x76>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	4a1e      	ldr	r2, [pc, #120]	; (800c388 <HAL_TIM_Base_Start_IT+0xcc>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d00e      	beq.n	800c332 <HAL_TIM_Base_Start_IT+0x76>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4a1c      	ldr	r2, [pc, #112]	; (800c38c <HAL_TIM_Base_Start_IT+0xd0>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d009      	beq.n	800c332 <HAL_TIM_Base_Start_IT+0x76>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	4a1b      	ldr	r2, [pc, #108]	; (800c390 <HAL_TIM_Base_Start_IT+0xd4>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d004      	beq.n	800c332 <HAL_TIM_Base_Start_IT+0x76>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a19      	ldr	r2, [pc, #100]	; (800c394 <HAL_TIM_Base_Start_IT+0xd8>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d115      	bne.n	800c35e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	689a      	ldr	r2, [r3, #8]
 800c338:	4b17      	ldr	r3, [pc, #92]	; (800c398 <HAL_TIM_Base_Start_IT+0xdc>)
 800c33a:	4013      	ands	r3, r2
 800c33c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2b06      	cmp	r3, #6
 800c342:	d015      	beq.n	800c370 <HAL_TIM_Base_Start_IT+0xb4>
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c34a:	d011      	beq.n	800c370 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f042 0201 	orr.w	r2, r2, #1
 800c35a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c35c:	e008      	b.n	800c370 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f042 0201 	orr.w	r2, r2, #1
 800c36c:	601a      	str	r2, [r3, #0]
 800c36e:	e000      	b.n	800c372 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c370:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c372:	2300      	movs	r3, #0
}
 800c374:	4618      	mov	r0, r3
 800c376:	3714      	adds	r7, #20
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr
 800c380:	40012c00 	.word	0x40012c00
 800c384:	40000400 	.word	0x40000400
 800c388:	40000800 	.word	0x40000800
 800c38c:	40000c00 	.word	0x40000c00
 800c390:	40013400 	.word	0x40013400
 800c394:	40014000 	.word	0x40014000
 800c398:	00010007 	.word	0x00010007

0800c39c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b083      	sub	sp, #12
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	68da      	ldr	r2, [r3, #12]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f022 0201 	bic.w	r2, r2, #1
 800c3b2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	6a1a      	ldr	r2, [r3, #32]
 800c3ba:	f241 1311 	movw	r3, #4369	; 0x1111
 800c3be:	4013      	ands	r3, r2
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d10f      	bne.n	800c3e4 <HAL_TIM_Base_Stop_IT+0x48>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	6a1a      	ldr	r2, [r3, #32]
 800c3ca:	f240 4344 	movw	r3, #1092	; 0x444
 800c3ce:	4013      	ands	r3, r2
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d107      	bne.n	800c3e4 <HAL_TIM_Base_Stop_IT+0x48>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f022 0201 	bic.w	r2, r2, #1
 800c3e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c3ec:	2300      	movs	r3, #0
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	370c      	adds	r7, #12
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f8:	4770      	bx	lr

0800c3fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c3fa:	b580      	push	{r7, lr}
 800c3fc:	b082      	sub	sp, #8
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	691b      	ldr	r3, [r3, #16]
 800c408:	f003 0302 	and.w	r3, r3, #2
 800c40c:	2b02      	cmp	r3, #2
 800c40e:	d122      	bne.n	800c456 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	68db      	ldr	r3, [r3, #12]
 800c416:	f003 0302 	and.w	r3, r3, #2
 800c41a:	2b02      	cmp	r3, #2
 800c41c:	d11b      	bne.n	800c456 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f06f 0202 	mvn.w	r2, #2
 800c426:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2201      	movs	r2, #1
 800c42c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	699b      	ldr	r3, [r3, #24]
 800c434:	f003 0303 	and.w	r3, r3, #3
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d003      	beq.n	800c444 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 f9ce 	bl	800c7de <HAL_TIM_IC_CaptureCallback>
 800c442:	e005      	b.n	800c450 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f000 f9c0 	bl	800c7ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 f9d1 	bl	800c7f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2200      	movs	r2, #0
 800c454:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	691b      	ldr	r3, [r3, #16]
 800c45c:	f003 0304 	and.w	r3, r3, #4
 800c460:	2b04      	cmp	r3, #4
 800c462:	d122      	bne.n	800c4aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	68db      	ldr	r3, [r3, #12]
 800c46a:	f003 0304 	and.w	r3, r3, #4
 800c46e:	2b04      	cmp	r3, #4
 800c470:	d11b      	bne.n	800c4aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f06f 0204 	mvn.w	r2, #4
 800c47a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2202      	movs	r2, #2
 800c480:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	699b      	ldr	r3, [r3, #24]
 800c488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d003      	beq.n	800c498 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 f9a4 	bl	800c7de <HAL_TIM_IC_CaptureCallback>
 800c496:	e005      	b.n	800c4a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f000 f996 	bl	800c7ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 f9a7 	bl	800c7f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	691b      	ldr	r3, [r3, #16]
 800c4b0:	f003 0308 	and.w	r3, r3, #8
 800c4b4:	2b08      	cmp	r3, #8
 800c4b6:	d122      	bne.n	800c4fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	68db      	ldr	r3, [r3, #12]
 800c4be:	f003 0308 	and.w	r3, r3, #8
 800c4c2:	2b08      	cmp	r3, #8
 800c4c4:	d11b      	bne.n	800c4fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f06f 0208 	mvn.w	r2, #8
 800c4ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2204      	movs	r2, #4
 800c4d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	69db      	ldr	r3, [r3, #28]
 800c4dc:	f003 0303 	and.w	r3, r3, #3
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d003      	beq.n	800c4ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f000 f97a 	bl	800c7de <HAL_TIM_IC_CaptureCallback>
 800c4ea:	e005      	b.n	800c4f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f000 f96c 	bl	800c7ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 f97d 	bl	800c7f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	691b      	ldr	r3, [r3, #16]
 800c504:	f003 0310 	and.w	r3, r3, #16
 800c508:	2b10      	cmp	r3, #16
 800c50a:	d122      	bne.n	800c552 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	68db      	ldr	r3, [r3, #12]
 800c512:	f003 0310 	and.w	r3, r3, #16
 800c516:	2b10      	cmp	r3, #16
 800c518:	d11b      	bne.n	800c552 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f06f 0210 	mvn.w	r2, #16
 800c522:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2208      	movs	r2, #8
 800c528:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	69db      	ldr	r3, [r3, #28]
 800c530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c534:	2b00      	cmp	r3, #0
 800c536:	d003      	beq.n	800c540 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f000 f950 	bl	800c7de <HAL_TIM_IC_CaptureCallback>
 800c53e:	e005      	b.n	800c54c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f000 f942 	bl	800c7ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 f953 	bl	800c7f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2200      	movs	r2, #0
 800c550:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	691b      	ldr	r3, [r3, #16]
 800c558:	f003 0301 	and.w	r3, r3, #1
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d10e      	bne.n	800c57e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	68db      	ldr	r3, [r3, #12]
 800c566:	f003 0301 	and.w	r3, r3, #1
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d107      	bne.n	800c57e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f06f 0201 	mvn.w	r2, #1
 800c576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f7f7 ff7d 	bl	8004478 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	691b      	ldr	r3, [r3, #16]
 800c584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c588:	2b80      	cmp	r3, #128	; 0x80
 800c58a:	d10e      	bne.n	800c5aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	68db      	ldr	r3, [r3, #12]
 800c592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c596:	2b80      	cmp	r3, #128	; 0x80
 800c598:	d107      	bne.n	800c5aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c5a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f000 faff 	bl	800cba8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	691b      	ldr	r3, [r3, #16]
 800c5b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5b8:	d10e      	bne.n	800c5d8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5c4:	2b80      	cmp	r3, #128	; 0x80
 800c5c6:	d107      	bne.n	800c5d8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c5d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 faf2 	bl	800cbbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	691b      	ldr	r3, [r3, #16]
 800c5de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5e2:	2b40      	cmp	r3, #64	; 0x40
 800c5e4:	d10e      	bne.n	800c604 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	68db      	ldr	r3, [r3, #12]
 800c5ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5f0:	2b40      	cmp	r3, #64	; 0x40
 800c5f2:	d107      	bne.n	800c604 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c5fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 f901 	bl	800c806 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	691b      	ldr	r3, [r3, #16]
 800c60a:	f003 0320 	and.w	r3, r3, #32
 800c60e:	2b20      	cmp	r3, #32
 800c610:	d10e      	bne.n	800c630 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	68db      	ldr	r3, [r3, #12]
 800c618:	f003 0320 	and.w	r3, r3, #32
 800c61c:	2b20      	cmp	r3, #32
 800c61e:	d107      	bne.n	800c630 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f06f 0220 	mvn.w	r2, #32
 800c628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f000 fab2 	bl	800cb94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c630:	bf00      	nop
 800c632:	3708      	adds	r7, #8
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c642:	2300      	movs	r3, #0
 800c644:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d101      	bne.n	800c654 <HAL_TIM_ConfigClockSource+0x1c>
 800c650:	2302      	movs	r3, #2
 800c652:	e0b6      	b.n	800c7c2 <HAL_TIM_ConfigClockSource+0x18a>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2201      	movs	r2, #1
 800c658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2202      	movs	r2, #2
 800c660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	689b      	ldr	r3, [r3, #8]
 800c66a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c672:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c67e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	68ba      	ldr	r2, [r7, #8]
 800c686:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c690:	d03e      	beq.n	800c710 <HAL_TIM_ConfigClockSource+0xd8>
 800c692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c696:	f200 8087 	bhi.w	800c7a8 <HAL_TIM_ConfigClockSource+0x170>
 800c69a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c69e:	f000 8086 	beq.w	800c7ae <HAL_TIM_ConfigClockSource+0x176>
 800c6a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6a6:	d87f      	bhi.n	800c7a8 <HAL_TIM_ConfigClockSource+0x170>
 800c6a8:	2b70      	cmp	r3, #112	; 0x70
 800c6aa:	d01a      	beq.n	800c6e2 <HAL_TIM_ConfigClockSource+0xaa>
 800c6ac:	2b70      	cmp	r3, #112	; 0x70
 800c6ae:	d87b      	bhi.n	800c7a8 <HAL_TIM_ConfigClockSource+0x170>
 800c6b0:	2b60      	cmp	r3, #96	; 0x60
 800c6b2:	d050      	beq.n	800c756 <HAL_TIM_ConfigClockSource+0x11e>
 800c6b4:	2b60      	cmp	r3, #96	; 0x60
 800c6b6:	d877      	bhi.n	800c7a8 <HAL_TIM_ConfigClockSource+0x170>
 800c6b8:	2b50      	cmp	r3, #80	; 0x50
 800c6ba:	d03c      	beq.n	800c736 <HAL_TIM_ConfigClockSource+0xfe>
 800c6bc:	2b50      	cmp	r3, #80	; 0x50
 800c6be:	d873      	bhi.n	800c7a8 <HAL_TIM_ConfigClockSource+0x170>
 800c6c0:	2b40      	cmp	r3, #64	; 0x40
 800c6c2:	d058      	beq.n	800c776 <HAL_TIM_ConfigClockSource+0x13e>
 800c6c4:	2b40      	cmp	r3, #64	; 0x40
 800c6c6:	d86f      	bhi.n	800c7a8 <HAL_TIM_ConfigClockSource+0x170>
 800c6c8:	2b30      	cmp	r3, #48	; 0x30
 800c6ca:	d064      	beq.n	800c796 <HAL_TIM_ConfigClockSource+0x15e>
 800c6cc:	2b30      	cmp	r3, #48	; 0x30
 800c6ce:	d86b      	bhi.n	800c7a8 <HAL_TIM_ConfigClockSource+0x170>
 800c6d0:	2b20      	cmp	r3, #32
 800c6d2:	d060      	beq.n	800c796 <HAL_TIM_ConfigClockSource+0x15e>
 800c6d4:	2b20      	cmp	r3, #32
 800c6d6:	d867      	bhi.n	800c7a8 <HAL_TIM_ConfigClockSource+0x170>
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d05c      	beq.n	800c796 <HAL_TIM_ConfigClockSource+0x15e>
 800c6dc:	2b10      	cmp	r3, #16
 800c6de:	d05a      	beq.n	800c796 <HAL_TIM_ConfigClockSource+0x15e>
 800c6e0:	e062      	b.n	800c7a8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6818      	ldr	r0, [r3, #0]
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	6899      	ldr	r1, [r3, #8]
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	685a      	ldr	r2, [r3, #4]
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	f000 f9a7 	bl	800ca44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	689b      	ldr	r3, [r3, #8]
 800c6fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c704:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	68ba      	ldr	r2, [r7, #8]
 800c70c:	609a      	str	r2, [r3, #8]
      break;
 800c70e:	e04f      	b.n	800c7b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6818      	ldr	r0, [r3, #0]
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	6899      	ldr	r1, [r3, #8]
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	685a      	ldr	r2, [r3, #4]
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	f000 f990 	bl	800ca44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	689a      	ldr	r2, [r3, #8]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c732:	609a      	str	r2, [r3, #8]
      break;
 800c734:	e03c      	b.n	800c7b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6818      	ldr	r0, [r3, #0]
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	6859      	ldr	r1, [r3, #4]
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	68db      	ldr	r3, [r3, #12]
 800c742:	461a      	mov	r2, r3
 800c744:	f000 f904 	bl	800c950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	2150      	movs	r1, #80	; 0x50
 800c74e:	4618      	mov	r0, r3
 800c750:	f000 f95d 	bl	800ca0e <TIM_ITRx_SetConfig>
      break;
 800c754:	e02c      	b.n	800c7b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6818      	ldr	r0, [r3, #0]
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	6859      	ldr	r1, [r3, #4]
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	68db      	ldr	r3, [r3, #12]
 800c762:	461a      	mov	r2, r3
 800c764:	f000 f923 	bl	800c9ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2160      	movs	r1, #96	; 0x60
 800c76e:	4618      	mov	r0, r3
 800c770:	f000 f94d 	bl	800ca0e <TIM_ITRx_SetConfig>
      break;
 800c774:	e01c      	b.n	800c7b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6818      	ldr	r0, [r3, #0]
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	6859      	ldr	r1, [r3, #4]
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	68db      	ldr	r3, [r3, #12]
 800c782:	461a      	mov	r2, r3
 800c784:	f000 f8e4 	bl	800c950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	2140      	movs	r1, #64	; 0x40
 800c78e:	4618      	mov	r0, r3
 800c790:	f000 f93d 	bl	800ca0e <TIM_ITRx_SetConfig>
      break;
 800c794:	e00c      	b.n	800c7b0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4619      	mov	r1, r3
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	f000 f934 	bl	800ca0e <TIM_ITRx_SetConfig>
      break;
 800c7a6:	e003      	b.n	800c7b0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	73fb      	strb	r3, [r7, #15]
      break;
 800c7ac:	e000      	b.n	800c7b0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c7ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c7c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3710      	adds	r7, #16
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}

0800c7ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c7ca:	b480      	push	{r7}
 800c7cc:	b083      	sub	sp, #12
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c7d2:	bf00      	nop
 800c7d4:	370c      	adds	r7, #12
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr

0800c7de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c7de:	b480      	push	{r7}
 800c7e0:	b083      	sub	sp, #12
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c7e6:	bf00      	nop
 800c7e8:	370c      	adds	r7, #12
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr

0800c7f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c7f2:	b480      	push	{r7}
 800c7f4:	b083      	sub	sp, #12
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c7fa:	bf00      	nop
 800c7fc:	370c      	adds	r7, #12
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr

0800c806 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c806:	b480      	push	{r7}
 800c808:	b083      	sub	sp, #12
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c80e:	bf00      	nop
 800c810:	370c      	adds	r7, #12
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr
	...

0800c81c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b085      	sub	sp, #20
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	4a40      	ldr	r2, [pc, #256]	; (800c930 <TIM_Base_SetConfig+0x114>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d013      	beq.n	800c85c <TIM_Base_SetConfig+0x40>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c83a:	d00f      	beq.n	800c85c <TIM_Base_SetConfig+0x40>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	4a3d      	ldr	r2, [pc, #244]	; (800c934 <TIM_Base_SetConfig+0x118>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d00b      	beq.n	800c85c <TIM_Base_SetConfig+0x40>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	4a3c      	ldr	r2, [pc, #240]	; (800c938 <TIM_Base_SetConfig+0x11c>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d007      	beq.n	800c85c <TIM_Base_SetConfig+0x40>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	4a3b      	ldr	r2, [pc, #236]	; (800c93c <TIM_Base_SetConfig+0x120>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d003      	beq.n	800c85c <TIM_Base_SetConfig+0x40>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	4a3a      	ldr	r2, [pc, #232]	; (800c940 <TIM_Base_SetConfig+0x124>)
 800c858:	4293      	cmp	r3, r2
 800c85a:	d108      	bne.n	800c86e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	685b      	ldr	r3, [r3, #4]
 800c868:	68fa      	ldr	r2, [r7, #12]
 800c86a:	4313      	orrs	r3, r2
 800c86c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4a2f      	ldr	r2, [pc, #188]	; (800c930 <TIM_Base_SetConfig+0x114>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d01f      	beq.n	800c8b6 <TIM_Base_SetConfig+0x9a>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c87c:	d01b      	beq.n	800c8b6 <TIM_Base_SetConfig+0x9a>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	4a2c      	ldr	r2, [pc, #176]	; (800c934 <TIM_Base_SetConfig+0x118>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d017      	beq.n	800c8b6 <TIM_Base_SetConfig+0x9a>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	4a2b      	ldr	r2, [pc, #172]	; (800c938 <TIM_Base_SetConfig+0x11c>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d013      	beq.n	800c8b6 <TIM_Base_SetConfig+0x9a>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	4a2a      	ldr	r2, [pc, #168]	; (800c93c <TIM_Base_SetConfig+0x120>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d00f      	beq.n	800c8b6 <TIM_Base_SetConfig+0x9a>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	4a29      	ldr	r2, [pc, #164]	; (800c940 <TIM_Base_SetConfig+0x124>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d00b      	beq.n	800c8b6 <TIM_Base_SetConfig+0x9a>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	4a28      	ldr	r2, [pc, #160]	; (800c944 <TIM_Base_SetConfig+0x128>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d007      	beq.n	800c8b6 <TIM_Base_SetConfig+0x9a>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	4a27      	ldr	r2, [pc, #156]	; (800c948 <TIM_Base_SetConfig+0x12c>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d003      	beq.n	800c8b6 <TIM_Base_SetConfig+0x9a>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	4a26      	ldr	r2, [pc, #152]	; (800c94c <TIM_Base_SetConfig+0x130>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d108      	bne.n	800c8c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	68db      	ldr	r3, [r3, #12]
 800c8c2:	68fa      	ldr	r2, [r7, #12]
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	695b      	ldr	r3, [r3, #20]
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	68fa      	ldr	r2, [r7, #12]
 800c8da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	689a      	ldr	r2, [r3, #8]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	4a10      	ldr	r2, [pc, #64]	; (800c930 <TIM_Base_SetConfig+0x114>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d00f      	beq.n	800c914 <TIM_Base_SetConfig+0xf8>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	4a12      	ldr	r2, [pc, #72]	; (800c940 <TIM_Base_SetConfig+0x124>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d00b      	beq.n	800c914 <TIM_Base_SetConfig+0xf8>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	4a11      	ldr	r2, [pc, #68]	; (800c944 <TIM_Base_SetConfig+0x128>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d007      	beq.n	800c914 <TIM_Base_SetConfig+0xf8>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	4a10      	ldr	r2, [pc, #64]	; (800c948 <TIM_Base_SetConfig+0x12c>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d003      	beq.n	800c914 <TIM_Base_SetConfig+0xf8>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	4a0f      	ldr	r2, [pc, #60]	; (800c94c <TIM_Base_SetConfig+0x130>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d103      	bne.n	800c91c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	691a      	ldr	r2, [r3, #16]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2201      	movs	r2, #1
 800c920:	615a      	str	r2, [r3, #20]
}
 800c922:	bf00      	nop
 800c924:	3714      	adds	r7, #20
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	40012c00 	.word	0x40012c00
 800c934:	40000400 	.word	0x40000400
 800c938:	40000800 	.word	0x40000800
 800c93c:	40000c00 	.word	0x40000c00
 800c940:	40013400 	.word	0x40013400
 800c944:	40014000 	.word	0x40014000
 800c948:	40014400 	.word	0x40014400
 800c94c:	40014800 	.word	0x40014800

0800c950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c950:	b480      	push	{r7}
 800c952:	b087      	sub	sp, #28
 800c954:	af00      	add	r7, sp, #0
 800c956:	60f8      	str	r0, [r7, #12]
 800c958:	60b9      	str	r1, [r7, #8]
 800c95a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	6a1b      	ldr	r3, [r3, #32]
 800c960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	6a1b      	ldr	r3, [r3, #32]
 800c966:	f023 0201 	bic.w	r2, r3, #1
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	699b      	ldr	r3, [r3, #24]
 800c972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c97a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	011b      	lsls	r3, r3, #4
 800c980:	693a      	ldr	r2, [r7, #16]
 800c982:	4313      	orrs	r3, r2
 800c984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	f023 030a 	bic.w	r3, r3, #10
 800c98c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c98e:	697a      	ldr	r2, [r7, #20]
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	4313      	orrs	r3, r2
 800c994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	693a      	ldr	r2, [r7, #16]
 800c99a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	697a      	ldr	r2, [r7, #20]
 800c9a0:	621a      	str	r2, [r3, #32]
}
 800c9a2:	bf00      	nop
 800c9a4:	371c      	adds	r7, #28
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr

0800c9ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c9ae:	b480      	push	{r7}
 800c9b0:	b087      	sub	sp, #28
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	60f8      	str	r0, [r7, #12]
 800c9b6:	60b9      	str	r1, [r7, #8]
 800c9b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	6a1b      	ldr	r3, [r3, #32]
 800c9be:	f023 0210 	bic.w	r2, r3, #16
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	699b      	ldr	r3, [r3, #24]
 800c9ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	6a1b      	ldr	r3, [r3, #32]
 800c9d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c9d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	031b      	lsls	r3, r3, #12
 800c9de:	697a      	ldr	r2, [r7, #20]
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c9ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	011b      	lsls	r3, r3, #4
 800c9f0:	693a      	ldr	r2, [r7, #16]
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	697a      	ldr	r2, [r7, #20]
 800c9fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	693a      	ldr	r2, [r7, #16]
 800ca00:	621a      	str	r2, [r3, #32]
}
 800ca02:	bf00      	nop
 800ca04:	371c      	adds	r7, #28
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr

0800ca0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ca0e:	b480      	push	{r7}
 800ca10:	b085      	sub	sp, #20
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
 800ca16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ca26:	683a      	ldr	r2, [r7, #0]
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	f043 0307 	orr.w	r3, r3, #7
 800ca30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	68fa      	ldr	r2, [r7, #12]
 800ca36:	609a      	str	r2, [r3, #8]
}
 800ca38:	bf00      	nop
 800ca3a:	3714      	adds	r7, #20
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr

0800ca44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b087      	sub	sp, #28
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	60b9      	str	r1, [r7, #8]
 800ca4e:	607a      	str	r2, [r7, #4]
 800ca50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ca5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	021a      	lsls	r2, r3, #8
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	431a      	orrs	r2, r3
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	697a      	ldr	r2, [r7, #20]
 800ca6e:	4313      	orrs	r3, r2
 800ca70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	697a      	ldr	r2, [r7, #20]
 800ca76:	609a      	str	r2, [r3, #8]
}
 800ca78:	bf00      	nop
 800ca7a:	371c      	adds	r7, #28
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca84:	b480      	push	{r7}
 800ca86:	b085      	sub	sp, #20
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d101      	bne.n	800ca9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca98:	2302      	movs	r3, #2
 800ca9a:	e068      	b.n	800cb6e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2201      	movs	r2, #1
 800caa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2202      	movs	r2, #2
 800caa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	689b      	ldr	r3, [r3, #8]
 800caba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a2e      	ldr	r2, [pc, #184]	; (800cb7c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d004      	beq.n	800cad0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4a2d      	ldr	r2, [pc, #180]	; (800cb80 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d108      	bne.n	800cae2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cad6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	68fa      	ldr	r2, [r7, #12]
 800cade:	4313      	orrs	r3, r2
 800cae0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cae8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	68fa      	ldr	r2, [r7, #12]
 800caf0:	4313      	orrs	r3, r2
 800caf2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	68fa      	ldr	r2, [r7, #12]
 800cafa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a1e      	ldr	r2, [pc, #120]	; (800cb7c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d01d      	beq.n	800cb42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb0e:	d018      	beq.n	800cb42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4a1b      	ldr	r2, [pc, #108]	; (800cb84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d013      	beq.n	800cb42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	4a1a      	ldr	r2, [pc, #104]	; (800cb88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d00e      	beq.n	800cb42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4a18      	ldr	r2, [pc, #96]	; (800cb8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d009      	beq.n	800cb42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4a13      	ldr	r2, [pc, #76]	; (800cb80 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d004      	beq.n	800cb42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4a14      	ldr	r2, [pc, #80]	; (800cb90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d10c      	bne.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	689b      	ldr	r3, [r3, #8]
 800cb4e:	68ba      	ldr	r2, [r7, #8]
 800cb50:	4313      	orrs	r3, r2
 800cb52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	68ba      	ldr	r2, [r7, #8]
 800cb5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2201      	movs	r2, #1
 800cb60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2200      	movs	r2, #0
 800cb68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb6c:	2300      	movs	r3, #0
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3714      	adds	r7, #20
 800cb72:	46bd      	mov	sp, r7
 800cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb78:	4770      	bx	lr
 800cb7a:	bf00      	nop
 800cb7c:	40012c00 	.word	0x40012c00
 800cb80:	40013400 	.word	0x40013400
 800cb84:	40000400 	.word	0x40000400
 800cb88:	40000800 	.word	0x40000800
 800cb8c:	40000c00 	.word	0x40000c00
 800cb90:	40014000 	.word	0x40014000

0800cb94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b083      	sub	sp, #12
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb9c:	bf00      	nop
 800cb9e:	370c      	adds	r7, #12
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr

0800cba8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b083      	sub	sp, #12
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cbb0:	bf00      	nop
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr

0800cbbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cbc4:	bf00      	nop
 800cbc6:	370c      	adds	r7, #12
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr

0800cbd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d101      	bne.n	800cbe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	e040      	b.n	800cc64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d106      	bne.n	800cbf8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f7f8 fe40 	bl	8005878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2224      	movs	r2, #36	; 0x24
 800cbfc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	681a      	ldr	r2, [r3, #0]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f022 0201 	bic.w	r2, r2, #1
 800cc0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 fc0a 	bl	800d428 <UART_SetConfig>
 800cc14:	4603      	mov	r3, r0
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d101      	bne.n	800cc1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	e022      	b.n	800cc64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d002      	beq.n	800cc2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 feb6 	bl	800d998 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	685a      	ldr	r2, [r3, #4]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cc3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	689a      	ldr	r2, [r3, #8]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cc4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f042 0201 	orr.w	r2, r2, #1
 800cc5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 ff3d 	bl	800dadc <UART_CheckIdleState>
 800cc62:	4603      	mov	r3, r0
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3708      	adds	r7, #8
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b08a      	sub	sp, #40	; 0x28
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	60b9      	str	r1, [r7, #8]
 800cc76:	4613      	mov	r3, r2
 800cc78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc7e:	2b20      	cmp	r3, #32
 800cc80:	d142      	bne.n	800cd08 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d002      	beq.n	800cc8e <HAL_UART_Receive_IT+0x22>
 800cc88:	88fb      	ldrh	r3, [r7, #6]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d101      	bne.n	800cc92 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800cc8e:	2301      	movs	r3, #1
 800cc90:	e03b      	b.n	800cd0a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d101      	bne.n	800cca0 <HAL_UART_Receive_IT+0x34>
 800cc9c:	2302      	movs	r3, #2
 800cc9e:	e034      	b.n	800cd0a <HAL_UART_Receive_IT+0x9e>
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	2201      	movs	r2, #1
 800cca4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	4a18      	ldr	r2, [pc, #96]	; (800cd14 <HAL_UART_Receive_IT+0xa8>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d01f      	beq.n	800ccf8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d018      	beq.n	800ccf8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	e853 3f00 	ldrex	r3, [r3]
 800ccd2:	613b      	str	r3, [r7, #16]
   return(result);
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ccda:	627b      	str	r3, [r7, #36]	; 0x24
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	461a      	mov	r2, r3
 800cce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce4:	623b      	str	r3, [r7, #32]
 800cce6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cce8:	69f9      	ldr	r1, [r7, #28]
 800ccea:	6a3a      	ldr	r2, [r7, #32]
 800ccec:	e841 2300 	strex	r3, r2, [r1]
 800ccf0:	61bb      	str	r3, [r7, #24]
   return(result);
 800ccf2:	69bb      	ldr	r3, [r7, #24]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d1e6      	bne.n	800ccc6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ccf8:	88fb      	ldrh	r3, [r7, #6]
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	68b9      	ldr	r1, [r7, #8]
 800ccfe:	68f8      	ldr	r0, [r7, #12]
 800cd00:	f000 fffa 	bl	800dcf8 <UART_Start_Receive_IT>
 800cd04:	4603      	mov	r3, r0
 800cd06:	e000      	b.n	800cd0a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800cd08:	2302      	movs	r3, #2
  }
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3728      	adds	r7, #40	; 0x28
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	40008000 	.word	0x40008000

0800cd18 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b08a      	sub	sp, #40	; 0x28
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	4613      	mov	r3, r2
 800cd24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd2a:	2b20      	cmp	r3, #32
 800cd2c:	d178      	bne.n	800ce20 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d002      	beq.n	800cd3a <HAL_UART_Transmit_DMA+0x22>
 800cd34:	88fb      	ldrh	r3, [r7, #6]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d101      	bne.n	800cd3e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e071      	b.n	800ce22 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	d101      	bne.n	800cd4c <HAL_UART_Transmit_DMA+0x34>
 800cd48:	2302      	movs	r3, #2
 800cd4a:	e06a      	b.n	800ce22 <HAL_UART_Transmit_DMA+0x10a>
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2201      	movs	r2, #1
 800cd50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	68ba      	ldr	r2, [r7, #8]
 800cd58:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	88fa      	ldrh	r2, [r7, #6]
 800cd5e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	88fa      	ldrh	r2, [r7, #6]
 800cd66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2221      	movs	r2, #33	; 0x21
 800cd76:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d02b      	beq.n	800cdd8 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd84:	4a29      	ldr	r2, [pc, #164]	; (800ce2c <HAL_UART_Transmit_DMA+0x114>)
 800cd86:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd8c:	4a28      	ldr	r2, [pc, #160]	; (800ce30 <HAL_UART_Transmit_DMA+0x118>)
 800cd8e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd94:	4a27      	ldr	r2, [pc, #156]	; (800ce34 <HAL_UART_Transmit_DMA+0x11c>)
 800cd96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cda8:	4619      	mov	r1, r3
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	3328      	adds	r3, #40	; 0x28
 800cdb0:	461a      	mov	r2, r3
 800cdb2:	88fb      	ldrh	r3, [r7, #6]
 800cdb4:	f7f9 ff94 	bl	8006ce0 <HAL_DMA_Start_IT>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d00c      	beq.n	800cdd8 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2210      	movs	r2, #16
 800cdc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2220      	movs	r2, #32
 800cdd2:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	e024      	b.n	800ce22 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2240      	movs	r2, #64	; 0x40
 800cdde:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2200      	movs	r2, #0
 800cde4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	3308      	adds	r3, #8
 800cdee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	e853 3f00 	ldrex	r3, [r3]
 800cdf6:	613b      	str	r3, [r7, #16]
   return(result);
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdfe:	627b      	str	r3, [r7, #36]	; 0x24
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	3308      	adds	r3, #8
 800ce06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce08:	623a      	str	r2, [r7, #32]
 800ce0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce0c:	69f9      	ldr	r1, [r7, #28]
 800ce0e:	6a3a      	ldr	r2, [r7, #32]
 800ce10:	e841 2300 	strex	r3, r2, [r1]
 800ce14:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce16:	69bb      	ldr	r3, [r7, #24]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d1e5      	bne.n	800cde8 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	e000      	b.n	800ce22 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800ce20:	2302      	movs	r3, #2
  }
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3728      	adds	r7, #40	; 0x28
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	0800df9f 	.word	0x0800df9f
 800ce30:	0800e039 	.word	0x0800e039
 800ce34:	0800e055 	.word	0x0800e055

0800ce38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b0ba      	sub	sp, #232	; 0xe8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	69db      	ldr	r3, [r3, #28]
 800ce46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	689b      	ldr	r3, [r3, #8]
 800ce5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ce5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ce62:	f640 030f 	movw	r3, #2063	; 0x80f
 800ce66:	4013      	ands	r3, r2
 800ce68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ce6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d115      	bne.n	800cea0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ce74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce78:	f003 0320 	and.w	r3, r3, #32
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d00f      	beq.n	800cea0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ce80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce84:	f003 0320 	and.w	r3, r3, #32
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d009      	beq.n	800cea0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	f000 82a6 	beq.w	800d3e2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	4798      	blx	r3
      }
      return;
 800ce9e:	e2a0      	b.n	800d3e2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800cea0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	f000 8117 	beq.w	800d0d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ceaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ceae:	f003 0301 	and.w	r3, r3, #1
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d106      	bne.n	800cec4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ceb6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ceba:	4b85      	ldr	r3, [pc, #532]	; (800d0d0 <HAL_UART_IRQHandler+0x298>)
 800cebc:	4013      	ands	r3, r2
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	f000 810a 	beq.w	800d0d8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cec8:	f003 0301 	and.w	r3, r3, #1
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d011      	beq.n	800cef4 <HAL_UART_IRQHandler+0xbc>
 800ced0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ced4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d00b      	beq.n	800cef4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	2201      	movs	r2, #1
 800cee2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ceea:	f043 0201 	orr.w	r2, r3, #1
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cef8:	f003 0302 	and.w	r3, r3, #2
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d011      	beq.n	800cf24 <HAL_UART_IRQHandler+0xec>
 800cf00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf04:	f003 0301 	and.w	r3, r3, #1
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d00b      	beq.n	800cf24 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2202      	movs	r2, #2
 800cf12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf1a:	f043 0204 	orr.w	r2, r3, #4
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf28:	f003 0304 	and.w	r3, r3, #4
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d011      	beq.n	800cf54 <HAL_UART_IRQHandler+0x11c>
 800cf30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf34:	f003 0301 	and.w	r3, r3, #1
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d00b      	beq.n	800cf54 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	2204      	movs	r2, #4
 800cf42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf4a:	f043 0202 	orr.w	r2, r3, #2
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cf54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf58:	f003 0308 	and.w	r3, r3, #8
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d017      	beq.n	800cf90 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cf60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf64:	f003 0320 	and.w	r3, r3, #32
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d105      	bne.n	800cf78 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800cf6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf70:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d00b      	beq.n	800cf90 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	2208      	movs	r2, #8
 800cf7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf86:	f043 0208 	orr.w	r2, r3, #8
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cf90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d012      	beq.n	800cfc2 <HAL_UART_IRQHandler+0x18a>
 800cf9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d00c      	beq.n	800cfc2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cfb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cfb8:	f043 0220 	orr.w	r2, r3, #32
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	f000 820c 	beq.w	800d3e6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800cfce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfd2:	f003 0320 	and.w	r3, r3, #32
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d00d      	beq.n	800cff6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cfda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfde:	f003 0320 	and.w	r3, r3, #32
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d007      	beq.n	800cff6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d003      	beq.n	800cff6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cffc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	689b      	ldr	r3, [r3, #8]
 800d006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d00a:	2b40      	cmp	r3, #64	; 0x40
 800d00c:	d005      	beq.n	800d01a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d00e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d012:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d016:	2b00      	cmp	r3, #0
 800d018:	d04f      	beq.n	800d0ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 ff5c 	bl	800ded8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	689b      	ldr	r3, [r3, #8]
 800d026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d02a:	2b40      	cmp	r3, #64	; 0x40
 800d02c:	d141      	bne.n	800d0b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	3308      	adds	r3, #8
 800d034:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d038:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d03c:	e853 3f00 	ldrex	r3, [r3]
 800d040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d044:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d04c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	3308      	adds	r3, #8
 800d056:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d05a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d05e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d062:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d066:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d06a:	e841 2300 	strex	r3, r2, [r1]
 800d06e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d076:	2b00      	cmp	r3, #0
 800d078:	d1d9      	bne.n	800d02e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d013      	beq.n	800d0aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d086:	4a13      	ldr	r2, [pc, #76]	; (800d0d4 <HAL_UART_IRQHandler+0x29c>)
 800d088:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d08e:	4618      	mov	r0, r3
 800d090:	f7f9 fec4 	bl	8006e1c <HAL_DMA_Abort_IT>
 800d094:	4603      	mov	r3, r0
 800d096:	2b00      	cmp	r3, #0
 800d098:	d017      	beq.n	800d0ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a0:	687a      	ldr	r2, [r7, #4]
 800d0a2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800d0a4:	4610      	mov	r0, r2
 800d0a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0a8:	e00f      	b.n	800d0ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f7f7 fc84 	bl	80049b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0b0:	e00b      	b.n	800d0ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f7f7 fc80 	bl	80049b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0b8:	e007      	b.n	800d0ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f7f7 fc7c 	bl	80049b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800d0c8:	e18d      	b.n	800d3e6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0ca:	bf00      	nop
    return;
 800d0cc:	e18b      	b.n	800d3e6 <HAL_UART_IRQHandler+0x5ae>
 800d0ce:	bf00      	nop
 800d0d0:	04000120 	.word	0x04000120
 800d0d4:	0800e0d1 	.word	0x0800e0d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	f040 8146 	bne.w	800d36e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d0e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0e6:	f003 0310 	and.w	r3, r3, #16
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	f000 813f 	beq.w	800d36e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d0f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0f4:	f003 0310 	and.w	r3, r3, #16
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	f000 8138 	beq.w	800d36e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2210      	movs	r2, #16
 800d104:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	689b      	ldr	r3, [r3, #8]
 800d10c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d110:	2b40      	cmp	r3, #64	; 0x40
 800d112:	f040 80b4 	bne.w	800d27e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d122:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d126:	2b00      	cmp	r3, #0
 800d128:	f000 815f 	beq.w	800d3ea <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d132:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d136:	429a      	cmp	r2, r3
 800d138:	f080 8157 	bcs.w	800d3ea <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d142:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f003 0320 	and.w	r3, r3, #32
 800d152:	2b00      	cmp	r3, #0
 800d154:	f040 8085 	bne.w	800d262 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d160:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d164:	e853 3f00 	ldrex	r3, [r3]
 800d168:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d16c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d174:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	461a      	mov	r2, r3
 800d17e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d182:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d186:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d18a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d18e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d192:	e841 2300 	strex	r3, r2, [r1]
 800d196:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d19a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d1da      	bne.n	800d158 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	3308      	adds	r3, #8
 800d1a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d1ac:	e853 3f00 	ldrex	r3, [r3]
 800d1b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d1b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d1b4:	f023 0301 	bic.w	r3, r3, #1
 800d1b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	3308      	adds	r3, #8
 800d1c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d1c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d1ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d1ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d1d2:	e841 2300 	strex	r3, r2, [r1]
 800d1d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d1d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d1e1      	bne.n	800d1a2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	3308      	adds	r3, #8
 800d1e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1e8:	e853 3f00 	ldrex	r3, [r3]
 800d1ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d1ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	3308      	adds	r3, #8
 800d1fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d202:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d204:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d206:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d208:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d20a:	e841 2300 	strex	r3, r2, [r1]
 800d20e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d210:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d212:	2b00      	cmp	r3, #0
 800d214:	d1e3      	bne.n	800d1de <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2220      	movs	r2, #32
 800d21a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2200      	movs	r2, #0
 800d220:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d22a:	e853 3f00 	ldrex	r3, [r3]
 800d22e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d232:	f023 0310 	bic.w	r3, r3, #16
 800d236:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	461a      	mov	r2, r3
 800d240:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d244:	65bb      	str	r3, [r7, #88]	; 0x58
 800d246:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d248:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d24a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d24c:	e841 2300 	strex	r3, r2, [r1]
 800d250:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d254:	2b00      	cmp	r3, #0
 800d256:	d1e4      	bne.n	800d222 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7f9 fd9f 	bl	8006da0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d26e:	b29b      	uxth	r3, r3
 800d270:	1ad3      	subs	r3, r2, r3
 800d272:	b29b      	uxth	r3, r3
 800d274:	4619      	mov	r1, r3
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f000 f8ca 	bl	800d410 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d27c:	e0b5      	b.n	800d3ea <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	1ad3      	subs	r3, r2, r3
 800d28e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d298:	b29b      	uxth	r3, r3
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	f000 80a7 	beq.w	800d3ee <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800d2a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	f000 80a2 	beq.w	800d3ee <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b2:	e853 3f00 	ldrex	r3, [r3]
 800d2b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d2b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d2be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d2cc:	647b      	str	r3, [r7, #68]	; 0x44
 800d2ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d2d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2d4:	e841 2300 	strex	r3, r2, [r1]
 800d2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d2da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d1e4      	bne.n	800d2aa <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	3308      	adds	r3, #8
 800d2e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ea:	e853 3f00 	ldrex	r3, [r3]
 800d2ee:	623b      	str	r3, [r7, #32]
   return(result);
 800d2f0:	6a3b      	ldr	r3, [r7, #32]
 800d2f2:	f023 0301 	bic.w	r3, r3, #1
 800d2f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	3308      	adds	r3, #8
 800d300:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d304:	633a      	str	r2, [r7, #48]	; 0x30
 800d306:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d308:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d30a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d30c:	e841 2300 	strex	r3, r2, [r1]
 800d310:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d314:	2b00      	cmp	r3, #0
 800d316:	d1e3      	bne.n	800d2e0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2220      	movs	r2, #32
 800d31c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2200      	movs	r2, #0
 800d322:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2200      	movs	r2, #0
 800d328:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	e853 3f00 	ldrex	r3, [r3]
 800d336:	60fb      	str	r3, [r7, #12]
   return(result);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f023 0310 	bic.w	r3, r3, #16
 800d33e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	461a      	mov	r2, r3
 800d348:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d34c:	61fb      	str	r3, [r7, #28]
 800d34e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d350:	69b9      	ldr	r1, [r7, #24]
 800d352:	69fa      	ldr	r2, [r7, #28]
 800d354:	e841 2300 	strex	r3, r2, [r1]
 800d358:	617b      	str	r3, [r7, #20]
   return(result);
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d1e4      	bne.n	800d32a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d360:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d364:	4619      	mov	r1, r3
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f000 f852 	bl	800d410 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d36c:	e03f      	b.n	800d3ee <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d36e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d376:	2b00      	cmp	r3, #0
 800d378:	d00e      	beq.n	800d398 <HAL_UART_IRQHandler+0x560>
 800d37a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d37e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d382:	2b00      	cmp	r3, #0
 800d384:	d008      	beq.n	800d398 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d38e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f001 f83d 	bl	800e410 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d396:	e02d      	b.n	800d3f4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800d398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d39c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d00e      	beq.n	800d3c2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800d3a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d008      	beq.n	800d3c2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d01c      	beq.n	800d3f2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	4798      	blx	r3
    }
    return;
 800d3c0:	e017      	b.n	800d3f2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d3c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d012      	beq.n	800d3f4 <HAL_UART_IRQHandler+0x5bc>
 800d3ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d00c      	beq.n	800d3f4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f000 fe8e 	bl	800e0fc <UART_EndTransmit_IT>
    return;
 800d3e0:	e008      	b.n	800d3f4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800d3e2:	bf00      	nop
 800d3e4:	e006      	b.n	800d3f4 <HAL_UART_IRQHandler+0x5bc>
    return;
 800d3e6:	bf00      	nop
 800d3e8:	e004      	b.n	800d3f4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800d3ea:	bf00      	nop
 800d3ec:	e002      	b.n	800d3f4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800d3ee:	bf00      	nop
 800d3f0:	e000      	b.n	800d3f4 <HAL_UART_IRQHandler+0x5bc>
    return;
 800d3f2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800d3f4:	37e8      	adds	r7, #232	; 0xe8
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop

0800d3fc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b083      	sub	sp, #12
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d404:	bf00      	nop
 800d406:	370c      	adds	r7, #12
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr

0800d410 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d410:	b480      	push	{r7}
 800d412:	b083      	sub	sp, #12
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	460b      	mov	r3, r1
 800d41a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d41c:	bf00      	nop
 800d41e:	370c      	adds	r7, #12
 800d420:	46bd      	mov	sp, r7
 800d422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d426:	4770      	bx	lr

0800d428 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d42c:	b08a      	sub	sp, #40	; 0x28
 800d42e:	af00      	add	r7, sp, #0
 800d430:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d432:	2300      	movs	r3, #0
 800d434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	689a      	ldr	r2, [r3, #8]
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	691b      	ldr	r3, [r3, #16]
 800d440:	431a      	orrs	r2, r3
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	695b      	ldr	r3, [r3, #20]
 800d446:	431a      	orrs	r2, r3
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	69db      	ldr	r3, [r3, #28]
 800d44c:	4313      	orrs	r3, r2
 800d44e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	681a      	ldr	r2, [r3, #0]
 800d456:	4ba4      	ldr	r3, [pc, #656]	; (800d6e8 <UART_SetConfig+0x2c0>)
 800d458:	4013      	ands	r3, r2
 800d45a:	68fa      	ldr	r2, [r7, #12]
 800d45c:	6812      	ldr	r2, [r2, #0]
 800d45e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d460:	430b      	orrs	r3, r1
 800d462:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	68da      	ldr	r2, [r3, #12]
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	430a      	orrs	r2, r1
 800d478:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	699b      	ldr	r3, [r3, #24]
 800d47e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4a99      	ldr	r2, [pc, #612]	; (800d6ec <UART_SetConfig+0x2c4>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d004      	beq.n	800d494 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	6a1b      	ldr	r3, [r3, #32]
 800d48e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d490:	4313      	orrs	r3, r2
 800d492:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	689b      	ldr	r3, [r3, #8]
 800d49a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4a4:	430a      	orrs	r2, r1
 800d4a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a90      	ldr	r2, [pc, #576]	; (800d6f0 <UART_SetConfig+0x2c8>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d126      	bne.n	800d500 <UART_SetConfig+0xd8>
 800d4b2:	4b90      	ldr	r3, [pc, #576]	; (800d6f4 <UART_SetConfig+0x2cc>)
 800d4b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4b8:	f003 0303 	and.w	r3, r3, #3
 800d4bc:	2b03      	cmp	r3, #3
 800d4be:	d81b      	bhi.n	800d4f8 <UART_SetConfig+0xd0>
 800d4c0:	a201      	add	r2, pc, #4	; (adr r2, 800d4c8 <UART_SetConfig+0xa0>)
 800d4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4c6:	bf00      	nop
 800d4c8:	0800d4d9 	.word	0x0800d4d9
 800d4cc:	0800d4e9 	.word	0x0800d4e9
 800d4d0:	0800d4e1 	.word	0x0800d4e1
 800d4d4:	0800d4f1 	.word	0x0800d4f1
 800d4d8:	2301      	movs	r3, #1
 800d4da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d4de:	e116      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d4e0:	2302      	movs	r3, #2
 800d4e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d4e6:	e112      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d4e8:	2304      	movs	r3, #4
 800d4ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d4ee:	e10e      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d4f0:	2308      	movs	r3, #8
 800d4f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d4f6:	e10a      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d4f8:	2310      	movs	r3, #16
 800d4fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d4fe:	e106      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	4a7c      	ldr	r2, [pc, #496]	; (800d6f8 <UART_SetConfig+0x2d0>)
 800d506:	4293      	cmp	r3, r2
 800d508:	d138      	bne.n	800d57c <UART_SetConfig+0x154>
 800d50a:	4b7a      	ldr	r3, [pc, #488]	; (800d6f4 <UART_SetConfig+0x2cc>)
 800d50c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d510:	f003 030c 	and.w	r3, r3, #12
 800d514:	2b0c      	cmp	r3, #12
 800d516:	d82d      	bhi.n	800d574 <UART_SetConfig+0x14c>
 800d518:	a201      	add	r2, pc, #4	; (adr r2, 800d520 <UART_SetConfig+0xf8>)
 800d51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d51e:	bf00      	nop
 800d520:	0800d555 	.word	0x0800d555
 800d524:	0800d575 	.word	0x0800d575
 800d528:	0800d575 	.word	0x0800d575
 800d52c:	0800d575 	.word	0x0800d575
 800d530:	0800d565 	.word	0x0800d565
 800d534:	0800d575 	.word	0x0800d575
 800d538:	0800d575 	.word	0x0800d575
 800d53c:	0800d575 	.word	0x0800d575
 800d540:	0800d55d 	.word	0x0800d55d
 800d544:	0800d575 	.word	0x0800d575
 800d548:	0800d575 	.word	0x0800d575
 800d54c:	0800d575 	.word	0x0800d575
 800d550:	0800d56d 	.word	0x0800d56d
 800d554:	2300      	movs	r3, #0
 800d556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d55a:	e0d8      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d55c:	2302      	movs	r3, #2
 800d55e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d562:	e0d4      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d564:	2304      	movs	r3, #4
 800d566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d56a:	e0d0      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d56c:	2308      	movs	r3, #8
 800d56e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d572:	e0cc      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d574:	2310      	movs	r3, #16
 800d576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d57a:	e0c8      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4a5e      	ldr	r2, [pc, #376]	; (800d6fc <UART_SetConfig+0x2d4>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d125      	bne.n	800d5d2 <UART_SetConfig+0x1aa>
 800d586:	4b5b      	ldr	r3, [pc, #364]	; (800d6f4 <UART_SetConfig+0x2cc>)
 800d588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d58c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d590:	2b30      	cmp	r3, #48	; 0x30
 800d592:	d016      	beq.n	800d5c2 <UART_SetConfig+0x19a>
 800d594:	2b30      	cmp	r3, #48	; 0x30
 800d596:	d818      	bhi.n	800d5ca <UART_SetConfig+0x1a2>
 800d598:	2b20      	cmp	r3, #32
 800d59a:	d00a      	beq.n	800d5b2 <UART_SetConfig+0x18a>
 800d59c:	2b20      	cmp	r3, #32
 800d59e:	d814      	bhi.n	800d5ca <UART_SetConfig+0x1a2>
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d002      	beq.n	800d5aa <UART_SetConfig+0x182>
 800d5a4:	2b10      	cmp	r3, #16
 800d5a6:	d008      	beq.n	800d5ba <UART_SetConfig+0x192>
 800d5a8:	e00f      	b.n	800d5ca <UART_SetConfig+0x1a2>
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d5b0:	e0ad      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d5b2:	2302      	movs	r3, #2
 800d5b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d5b8:	e0a9      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d5ba:	2304      	movs	r3, #4
 800d5bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d5c0:	e0a5      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d5c2:	2308      	movs	r3, #8
 800d5c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d5c8:	e0a1      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d5ca:	2310      	movs	r3, #16
 800d5cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d5d0:	e09d      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	4a4a      	ldr	r2, [pc, #296]	; (800d700 <UART_SetConfig+0x2d8>)
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d125      	bne.n	800d628 <UART_SetConfig+0x200>
 800d5dc:	4b45      	ldr	r3, [pc, #276]	; (800d6f4 <UART_SetConfig+0x2cc>)
 800d5de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d5e6:	2bc0      	cmp	r3, #192	; 0xc0
 800d5e8:	d016      	beq.n	800d618 <UART_SetConfig+0x1f0>
 800d5ea:	2bc0      	cmp	r3, #192	; 0xc0
 800d5ec:	d818      	bhi.n	800d620 <UART_SetConfig+0x1f8>
 800d5ee:	2b80      	cmp	r3, #128	; 0x80
 800d5f0:	d00a      	beq.n	800d608 <UART_SetConfig+0x1e0>
 800d5f2:	2b80      	cmp	r3, #128	; 0x80
 800d5f4:	d814      	bhi.n	800d620 <UART_SetConfig+0x1f8>
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d002      	beq.n	800d600 <UART_SetConfig+0x1d8>
 800d5fa:	2b40      	cmp	r3, #64	; 0x40
 800d5fc:	d008      	beq.n	800d610 <UART_SetConfig+0x1e8>
 800d5fe:	e00f      	b.n	800d620 <UART_SetConfig+0x1f8>
 800d600:	2300      	movs	r3, #0
 800d602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d606:	e082      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d608:	2302      	movs	r3, #2
 800d60a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d60e:	e07e      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d610:	2304      	movs	r3, #4
 800d612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d616:	e07a      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d618:	2308      	movs	r3, #8
 800d61a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d61e:	e076      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d620:	2310      	movs	r3, #16
 800d622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d626:	e072      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4a35      	ldr	r2, [pc, #212]	; (800d704 <UART_SetConfig+0x2dc>)
 800d62e:	4293      	cmp	r3, r2
 800d630:	d12a      	bne.n	800d688 <UART_SetConfig+0x260>
 800d632:	4b30      	ldr	r3, [pc, #192]	; (800d6f4 <UART_SetConfig+0x2cc>)
 800d634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d63c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d640:	d01a      	beq.n	800d678 <UART_SetConfig+0x250>
 800d642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d646:	d81b      	bhi.n	800d680 <UART_SetConfig+0x258>
 800d648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d64c:	d00c      	beq.n	800d668 <UART_SetConfig+0x240>
 800d64e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d652:	d815      	bhi.n	800d680 <UART_SetConfig+0x258>
 800d654:	2b00      	cmp	r3, #0
 800d656:	d003      	beq.n	800d660 <UART_SetConfig+0x238>
 800d658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d65c:	d008      	beq.n	800d670 <UART_SetConfig+0x248>
 800d65e:	e00f      	b.n	800d680 <UART_SetConfig+0x258>
 800d660:	2300      	movs	r3, #0
 800d662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d666:	e052      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d668:	2302      	movs	r3, #2
 800d66a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d66e:	e04e      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d670:	2304      	movs	r3, #4
 800d672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d676:	e04a      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d678:	2308      	movs	r3, #8
 800d67a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d67e:	e046      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d680:	2310      	movs	r3, #16
 800d682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d686:	e042      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	4a17      	ldr	r2, [pc, #92]	; (800d6ec <UART_SetConfig+0x2c4>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d13a      	bne.n	800d708 <UART_SetConfig+0x2e0>
 800d692:	4b18      	ldr	r3, [pc, #96]	; (800d6f4 <UART_SetConfig+0x2cc>)
 800d694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d698:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d69c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d6a0:	d01a      	beq.n	800d6d8 <UART_SetConfig+0x2b0>
 800d6a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d6a6:	d81b      	bhi.n	800d6e0 <UART_SetConfig+0x2b8>
 800d6a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d6ac:	d00c      	beq.n	800d6c8 <UART_SetConfig+0x2a0>
 800d6ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d6b2:	d815      	bhi.n	800d6e0 <UART_SetConfig+0x2b8>
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d003      	beq.n	800d6c0 <UART_SetConfig+0x298>
 800d6b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d6bc:	d008      	beq.n	800d6d0 <UART_SetConfig+0x2a8>
 800d6be:	e00f      	b.n	800d6e0 <UART_SetConfig+0x2b8>
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d6c6:	e022      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d6c8:	2302      	movs	r3, #2
 800d6ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d6ce:	e01e      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d6d0:	2304      	movs	r3, #4
 800d6d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d6d6:	e01a      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d6d8:	2308      	movs	r3, #8
 800d6da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d6de:	e016      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d6e0:	2310      	movs	r3, #16
 800d6e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d6e6:	e012      	b.n	800d70e <UART_SetConfig+0x2e6>
 800d6e8:	efff69f3 	.word	0xefff69f3
 800d6ec:	40008000 	.word	0x40008000
 800d6f0:	40013800 	.word	0x40013800
 800d6f4:	40021000 	.word	0x40021000
 800d6f8:	40004400 	.word	0x40004400
 800d6fc:	40004800 	.word	0x40004800
 800d700:	40004c00 	.word	0x40004c00
 800d704:	40005000 	.word	0x40005000
 800d708:	2310      	movs	r3, #16
 800d70a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	4a9f      	ldr	r2, [pc, #636]	; (800d990 <UART_SetConfig+0x568>)
 800d714:	4293      	cmp	r3, r2
 800d716:	d17a      	bne.n	800d80e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d718:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d71c:	2b08      	cmp	r3, #8
 800d71e:	d824      	bhi.n	800d76a <UART_SetConfig+0x342>
 800d720:	a201      	add	r2, pc, #4	; (adr r2, 800d728 <UART_SetConfig+0x300>)
 800d722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d726:	bf00      	nop
 800d728:	0800d74d 	.word	0x0800d74d
 800d72c:	0800d76b 	.word	0x0800d76b
 800d730:	0800d755 	.word	0x0800d755
 800d734:	0800d76b 	.word	0x0800d76b
 800d738:	0800d75b 	.word	0x0800d75b
 800d73c:	0800d76b 	.word	0x0800d76b
 800d740:	0800d76b 	.word	0x0800d76b
 800d744:	0800d76b 	.word	0x0800d76b
 800d748:	0800d763 	.word	0x0800d763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d74c:	f7fc f8f2 	bl	8009934 <HAL_RCC_GetPCLK1Freq>
 800d750:	61f8      	str	r0, [r7, #28]
        break;
 800d752:	e010      	b.n	800d776 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d754:	4b8f      	ldr	r3, [pc, #572]	; (800d994 <UART_SetConfig+0x56c>)
 800d756:	61fb      	str	r3, [r7, #28]
        break;
 800d758:	e00d      	b.n	800d776 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d75a:	f7fc f853 	bl	8009804 <HAL_RCC_GetSysClockFreq>
 800d75e:	61f8      	str	r0, [r7, #28]
        break;
 800d760:	e009      	b.n	800d776 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d766:	61fb      	str	r3, [r7, #28]
        break;
 800d768:	e005      	b.n	800d776 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800d76a:	2300      	movs	r3, #0
 800d76c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d76e:	2301      	movs	r3, #1
 800d770:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d774:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d776:	69fb      	ldr	r3, [r7, #28]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	f000 80fb 	beq.w	800d974 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	685a      	ldr	r2, [r3, #4]
 800d782:	4613      	mov	r3, r2
 800d784:	005b      	lsls	r3, r3, #1
 800d786:	4413      	add	r3, r2
 800d788:	69fa      	ldr	r2, [r7, #28]
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d305      	bcc.n	800d79a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d794:	69fa      	ldr	r2, [r7, #28]
 800d796:	429a      	cmp	r2, r3
 800d798:	d903      	bls.n	800d7a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800d79a:	2301      	movs	r3, #1
 800d79c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d7a0:	e0e8      	b.n	800d974 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	461c      	mov	r4, r3
 800d7a8:	4615      	mov	r5, r2
 800d7aa:	f04f 0200 	mov.w	r2, #0
 800d7ae:	f04f 0300 	mov.w	r3, #0
 800d7b2:	022b      	lsls	r3, r5, #8
 800d7b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800d7b8:	0222      	lsls	r2, r4, #8
 800d7ba:	68f9      	ldr	r1, [r7, #12]
 800d7bc:	6849      	ldr	r1, [r1, #4]
 800d7be:	0849      	lsrs	r1, r1, #1
 800d7c0:	2000      	movs	r0, #0
 800d7c2:	4688      	mov	r8, r1
 800d7c4:	4681      	mov	r9, r0
 800d7c6:	eb12 0a08 	adds.w	sl, r2, r8
 800d7ca:	eb43 0b09 	adc.w	fp, r3, r9
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	685b      	ldr	r3, [r3, #4]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	603b      	str	r3, [r7, #0]
 800d7d6:	607a      	str	r2, [r7, #4]
 800d7d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d7dc:	4650      	mov	r0, sl
 800d7de:	4659      	mov	r1, fp
 800d7e0:	f7f3 faa2 	bl	8000d28 <__aeabi_uldivmod>
 800d7e4:	4602      	mov	r2, r0
 800d7e6:	460b      	mov	r3, r1
 800d7e8:	4613      	mov	r3, r2
 800d7ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d7ec:	69bb      	ldr	r3, [r7, #24]
 800d7ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d7f2:	d308      	bcc.n	800d806 <UART_SetConfig+0x3de>
 800d7f4:	69bb      	ldr	r3, [r7, #24]
 800d7f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d7fa:	d204      	bcs.n	800d806 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	69ba      	ldr	r2, [r7, #24]
 800d802:	60da      	str	r2, [r3, #12]
 800d804:	e0b6      	b.n	800d974 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800d806:	2301      	movs	r3, #1
 800d808:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d80c:	e0b2      	b.n	800d974 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	69db      	ldr	r3, [r3, #28]
 800d812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d816:	d15e      	bne.n	800d8d6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800d818:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d81c:	2b08      	cmp	r3, #8
 800d81e:	d828      	bhi.n	800d872 <UART_SetConfig+0x44a>
 800d820:	a201      	add	r2, pc, #4	; (adr r2, 800d828 <UART_SetConfig+0x400>)
 800d822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d826:	bf00      	nop
 800d828:	0800d84d 	.word	0x0800d84d
 800d82c:	0800d855 	.word	0x0800d855
 800d830:	0800d85d 	.word	0x0800d85d
 800d834:	0800d873 	.word	0x0800d873
 800d838:	0800d863 	.word	0x0800d863
 800d83c:	0800d873 	.word	0x0800d873
 800d840:	0800d873 	.word	0x0800d873
 800d844:	0800d873 	.word	0x0800d873
 800d848:	0800d86b 	.word	0x0800d86b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d84c:	f7fc f872 	bl	8009934 <HAL_RCC_GetPCLK1Freq>
 800d850:	61f8      	str	r0, [r7, #28]
        break;
 800d852:	e014      	b.n	800d87e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d854:	f7fc f884 	bl	8009960 <HAL_RCC_GetPCLK2Freq>
 800d858:	61f8      	str	r0, [r7, #28]
        break;
 800d85a:	e010      	b.n	800d87e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d85c:	4b4d      	ldr	r3, [pc, #308]	; (800d994 <UART_SetConfig+0x56c>)
 800d85e:	61fb      	str	r3, [r7, #28]
        break;
 800d860:	e00d      	b.n	800d87e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d862:	f7fb ffcf 	bl	8009804 <HAL_RCC_GetSysClockFreq>
 800d866:	61f8      	str	r0, [r7, #28]
        break;
 800d868:	e009      	b.n	800d87e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d86a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d86e:	61fb      	str	r3, [r7, #28]
        break;
 800d870:	e005      	b.n	800d87e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800d872:	2300      	movs	r3, #0
 800d874:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d876:	2301      	movs	r3, #1
 800d878:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d87c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d87e:	69fb      	ldr	r3, [r7, #28]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d077      	beq.n	800d974 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	005a      	lsls	r2, r3, #1
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	685b      	ldr	r3, [r3, #4]
 800d88c:	085b      	lsrs	r3, r3, #1
 800d88e:	441a      	add	r2, r3
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	685b      	ldr	r3, [r3, #4]
 800d894:	fbb2 f3f3 	udiv	r3, r2, r3
 800d898:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d89a:	69bb      	ldr	r3, [r7, #24]
 800d89c:	2b0f      	cmp	r3, #15
 800d89e:	d916      	bls.n	800d8ce <UART_SetConfig+0x4a6>
 800d8a0:	69bb      	ldr	r3, [r7, #24]
 800d8a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8a6:	d212      	bcs.n	800d8ce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d8a8:	69bb      	ldr	r3, [r7, #24]
 800d8aa:	b29b      	uxth	r3, r3
 800d8ac:	f023 030f 	bic.w	r3, r3, #15
 800d8b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d8b2:	69bb      	ldr	r3, [r7, #24]
 800d8b4:	085b      	lsrs	r3, r3, #1
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	f003 0307 	and.w	r3, r3, #7
 800d8bc:	b29a      	uxth	r2, r3
 800d8be:	8afb      	ldrh	r3, [r7, #22]
 800d8c0:	4313      	orrs	r3, r2
 800d8c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	8afa      	ldrh	r2, [r7, #22]
 800d8ca:	60da      	str	r2, [r3, #12]
 800d8cc:	e052      	b.n	800d974 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d8d4:	e04e      	b.n	800d974 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d8d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d8da:	2b08      	cmp	r3, #8
 800d8dc:	d827      	bhi.n	800d92e <UART_SetConfig+0x506>
 800d8de:	a201      	add	r2, pc, #4	; (adr r2, 800d8e4 <UART_SetConfig+0x4bc>)
 800d8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8e4:	0800d909 	.word	0x0800d909
 800d8e8:	0800d911 	.word	0x0800d911
 800d8ec:	0800d919 	.word	0x0800d919
 800d8f0:	0800d92f 	.word	0x0800d92f
 800d8f4:	0800d91f 	.word	0x0800d91f
 800d8f8:	0800d92f 	.word	0x0800d92f
 800d8fc:	0800d92f 	.word	0x0800d92f
 800d900:	0800d92f 	.word	0x0800d92f
 800d904:	0800d927 	.word	0x0800d927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d908:	f7fc f814 	bl	8009934 <HAL_RCC_GetPCLK1Freq>
 800d90c:	61f8      	str	r0, [r7, #28]
        break;
 800d90e:	e014      	b.n	800d93a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d910:	f7fc f826 	bl	8009960 <HAL_RCC_GetPCLK2Freq>
 800d914:	61f8      	str	r0, [r7, #28]
        break;
 800d916:	e010      	b.n	800d93a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d918:	4b1e      	ldr	r3, [pc, #120]	; (800d994 <UART_SetConfig+0x56c>)
 800d91a:	61fb      	str	r3, [r7, #28]
        break;
 800d91c:	e00d      	b.n	800d93a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d91e:	f7fb ff71 	bl	8009804 <HAL_RCC_GetSysClockFreq>
 800d922:	61f8      	str	r0, [r7, #28]
        break;
 800d924:	e009      	b.n	800d93a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d92a:	61fb      	str	r3, [r7, #28]
        break;
 800d92c:	e005      	b.n	800d93a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800d92e:	2300      	movs	r3, #0
 800d930:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d932:	2301      	movs	r3, #1
 800d934:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d938:	bf00      	nop
    }

    if (pclk != 0U)
 800d93a:	69fb      	ldr	r3, [r7, #28]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d019      	beq.n	800d974 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	685b      	ldr	r3, [r3, #4]
 800d944:	085a      	lsrs	r2, r3, #1
 800d946:	69fb      	ldr	r3, [r7, #28]
 800d948:	441a      	add	r2, r3
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d952:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d954:	69bb      	ldr	r3, [r7, #24]
 800d956:	2b0f      	cmp	r3, #15
 800d958:	d909      	bls.n	800d96e <UART_SetConfig+0x546>
 800d95a:	69bb      	ldr	r3, [r7, #24]
 800d95c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d960:	d205      	bcs.n	800d96e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d962:	69bb      	ldr	r3, [r7, #24]
 800d964:	b29a      	uxth	r2, r3
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	60da      	str	r2, [r3, #12]
 800d96c:	e002      	b.n	800d974 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800d96e:	2301      	movs	r3, #1
 800d970:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	2200      	movs	r2, #0
 800d978:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2200      	movs	r2, #0
 800d97e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800d980:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800d984:	4618      	mov	r0, r3
 800d986:	3728      	adds	r7, #40	; 0x28
 800d988:	46bd      	mov	sp, r7
 800d98a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d98e:	bf00      	nop
 800d990:	40008000 	.word	0x40008000
 800d994:	00f42400 	.word	0x00f42400

0800d998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d998:	b480      	push	{r7}
 800d99a:	b083      	sub	sp, #12
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9a4:	f003 0301 	and.w	r3, r3, #1
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d00a      	beq.n	800d9c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	430a      	orrs	r2, r1
 800d9c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9c6:	f003 0302 	and.w	r3, r3, #2
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00a      	beq.n	800d9e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	685b      	ldr	r3, [r3, #4]
 800d9d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	430a      	orrs	r2, r1
 800d9e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9e8:	f003 0304 	and.w	r3, r3, #4
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d00a      	beq.n	800da06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	430a      	orrs	r2, r1
 800da04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da0a:	f003 0308 	and.w	r3, r3, #8
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d00a      	beq.n	800da28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	430a      	orrs	r2, r1
 800da26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da2c:	f003 0310 	and.w	r3, r3, #16
 800da30:	2b00      	cmp	r3, #0
 800da32:	d00a      	beq.n	800da4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	689b      	ldr	r3, [r3, #8]
 800da3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	430a      	orrs	r2, r1
 800da48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da4e:	f003 0320 	and.w	r3, r3, #32
 800da52:	2b00      	cmp	r3, #0
 800da54:	d00a      	beq.n	800da6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	689b      	ldr	r3, [r3, #8]
 800da5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	430a      	orrs	r2, r1
 800da6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da74:	2b00      	cmp	r3, #0
 800da76:	d01a      	beq.n	800daae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	685b      	ldr	r3, [r3, #4]
 800da7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	430a      	orrs	r2, r1
 800da8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da96:	d10a      	bne.n	800daae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	430a      	orrs	r2, r1
 800daac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d00a      	beq.n	800dad0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	430a      	orrs	r2, r1
 800dace:	605a      	str	r2, [r3, #4]
  }
}
 800dad0:	bf00      	nop
 800dad2:	370c      	adds	r7, #12
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr

0800dadc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b086      	sub	sp, #24
 800dae0:	af02      	add	r7, sp, #8
 800dae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2200      	movs	r2, #0
 800dae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800daec:	f7f8 fecc 	bl	8006888 <HAL_GetTick>
 800daf0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f003 0308 	and.w	r3, r3, #8
 800dafc:	2b08      	cmp	r3, #8
 800dafe:	d10e      	bne.n	800db1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800db04:	9300      	str	r3, [sp, #0]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	2200      	movs	r2, #0
 800db0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f000 f82d 	bl	800db6e <UART_WaitOnFlagUntilTimeout>
 800db14:	4603      	mov	r3, r0
 800db16:	2b00      	cmp	r3, #0
 800db18:	d001      	beq.n	800db1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db1a:	2303      	movs	r3, #3
 800db1c:	e023      	b.n	800db66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f003 0304 	and.w	r3, r3, #4
 800db28:	2b04      	cmp	r3, #4
 800db2a:	d10e      	bne.n	800db4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800db30:	9300      	str	r3, [sp, #0]
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	2200      	movs	r2, #0
 800db36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f000 f817 	bl	800db6e <UART_WaitOnFlagUntilTimeout>
 800db40:	4603      	mov	r3, r0
 800db42:	2b00      	cmp	r3, #0
 800db44:	d001      	beq.n	800db4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db46:	2303      	movs	r3, #3
 800db48:	e00d      	b.n	800db66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2220      	movs	r2, #32
 800db4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2220      	movs	r2, #32
 800db54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2200      	movs	r2, #0
 800db5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2200      	movs	r2, #0
 800db60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800db64:	2300      	movs	r3, #0
}
 800db66:	4618      	mov	r0, r3
 800db68:	3710      	adds	r7, #16
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}

0800db6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800db6e:	b580      	push	{r7, lr}
 800db70:	b09c      	sub	sp, #112	; 0x70
 800db72:	af00      	add	r7, sp, #0
 800db74:	60f8      	str	r0, [r7, #12]
 800db76:	60b9      	str	r1, [r7, #8]
 800db78:	603b      	str	r3, [r7, #0]
 800db7a:	4613      	mov	r3, r2
 800db7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db7e:	e0a5      	b.n	800dccc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db86:	f000 80a1 	beq.w	800dccc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db8a:	f7f8 fe7d 	bl	8006888 <HAL_GetTick>
 800db8e:	4602      	mov	r2, r0
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	1ad3      	subs	r3, r2, r3
 800db94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800db96:	429a      	cmp	r2, r3
 800db98:	d302      	bcc.n	800dba0 <UART_WaitOnFlagUntilTimeout+0x32>
 800db9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d13e      	bne.n	800dc1e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dba8:	e853 3f00 	ldrex	r3, [r3]
 800dbac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dbae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dbb4:	667b      	str	r3, [r7, #100]	; 0x64
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	461a      	mov	r2, r3
 800dbbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dbbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dbc0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dbc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dbc6:	e841 2300 	strex	r3, r2, [r1]
 800dbca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800dbcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d1e6      	bne.n	800dba0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	3308      	adds	r3, #8
 800dbd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbdc:	e853 3f00 	ldrex	r3, [r3]
 800dbe0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe4:	f023 0301 	bic.w	r3, r3, #1
 800dbe8:	663b      	str	r3, [r7, #96]	; 0x60
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	3308      	adds	r3, #8
 800dbf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dbf2:	64ba      	str	r2, [r7, #72]	; 0x48
 800dbf4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dbf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dbfa:	e841 2300 	strex	r3, r2, [r1]
 800dbfe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dc00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d1e5      	bne.n	800dbd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2220      	movs	r2, #32
 800dc0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	2220      	movs	r2, #32
 800dc10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2200      	movs	r2, #0
 800dc16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800dc1a:	2303      	movs	r3, #3
 800dc1c:	e067      	b.n	800dcee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f003 0304 	and.w	r3, r3, #4
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d04f      	beq.n	800dccc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	69db      	ldr	r3, [r3, #28]
 800dc32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc3a:	d147      	bne.n	800dccc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc44:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4e:	e853 3f00 	ldrex	r3, [r3]
 800dc52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dc5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	461a      	mov	r2, r3
 800dc62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc64:	637b      	str	r3, [r7, #52]	; 0x34
 800dc66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc6c:	e841 2300 	strex	r3, r2, [r1]
 800dc70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d1e6      	bne.n	800dc46 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	3308      	adds	r3, #8
 800dc7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	e853 3f00 	ldrex	r3, [r3]
 800dc86:	613b      	str	r3, [r7, #16]
   return(result);
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	f023 0301 	bic.w	r3, r3, #1
 800dc8e:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	3308      	adds	r3, #8
 800dc96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dc98:	623a      	str	r2, [r7, #32]
 800dc9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc9c:	69f9      	ldr	r1, [r7, #28]
 800dc9e:	6a3a      	ldr	r2, [r7, #32]
 800dca0:	e841 2300 	strex	r3, r2, [r1]
 800dca4:	61bb      	str	r3, [r7, #24]
   return(result);
 800dca6:	69bb      	ldr	r3, [r7, #24]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d1e5      	bne.n	800dc78 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	2220      	movs	r2, #32
 800dcb0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2220      	movs	r2, #32
 800dcb6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	2220      	movs	r2, #32
 800dcbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800dcc8:	2303      	movs	r3, #3
 800dcca:	e010      	b.n	800dcee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	69da      	ldr	r2, [r3, #28]
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	4013      	ands	r3, r2
 800dcd6:	68ba      	ldr	r2, [r7, #8]
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	bf0c      	ite	eq
 800dcdc:	2301      	moveq	r3, #1
 800dcde:	2300      	movne	r3, #0
 800dce0:	b2db      	uxtb	r3, r3
 800dce2:	461a      	mov	r2, r3
 800dce4:	79fb      	ldrb	r3, [r7, #7]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	f43f af4a 	beq.w	800db80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dcec:	2300      	movs	r3, #0
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3770      	adds	r7, #112	; 0x70
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
	...

0800dcf8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b097      	sub	sp, #92	; 0x5c
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	4613      	mov	r3, r2
 800dd04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	68ba      	ldr	r2, [r7, #8]
 800dd0a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	88fa      	ldrh	r2, [r7, #6]
 800dd10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	88fa      	ldrh	r2, [r7, #6]
 800dd18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	689b      	ldr	r3, [r3, #8]
 800dd26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd2a:	d10e      	bne.n	800dd4a <UART_Start_Receive_IT+0x52>
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	691b      	ldr	r3, [r3, #16]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d105      	bne.n	800dd40 <UART_Start_Receive_IT+0x48>
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	f240 12ff 	movw	r2, #511	; 0x1ff
 800dd3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dd3e:	e02d      	b.n	800dd9c <UART_Start_Receive_IT+0xa4>
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	22ff      	movs	r2, #255	; 0xff
 800dd44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dd48:	e028      	b.n	800dd9c <UART_Start_Receive_IT+0xa4>
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	689b      	ldr	r3, [r3, #8]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d10d      	bne.n	800dd6e <UART_Start_Receive_IT+0x76>
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	691b      	ldr	r3, [r3, #16]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d104      	bne.n	800dd64 <UART_Start_Receive_IT+0x6c>
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	22ff      	movs	r2, #255	; 0xff
 800dd5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dd62:	e01b      	b.n	800dd9c <UART_Start_Receive_IT+0xa4>
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	227f      	movs	r2, #127	; 0x7f
 800dd68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dd6c:	e016      	b.n	800dd9c <UART_Start_Receive_IT+0xa4>
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	689b      	ldr	r3, [r3, #8]
 800dd72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dd76:	d10d      	bne.n	800dd94 <UART_Start_Receive_IT+0x9c>
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	691b      	ldr	r3, [r3, #16]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d104      	bne.n	800dd8a <UART_Start_Receive_IT+0x92>
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	227f      	movs	r2, #127	; 0x7f
 800dd84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dd88:	e008      	b.n	800dd9c <UART_Start_Receive_IT+0xa4>
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	223f      	movs	r2, #63	; 0x3f
 800dd8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dd92:	e003      	b.n	800dd9c <UART_Start_Receive_IT+0xa4>
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2200      	movs	r2, #0
 800dd98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	2222      	movs	r2, #34	; 0x22
 800dda8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	3308      	adds	r3, #8
 800ddb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddb4:	e853 3f00 	ldrex	r3, [r3]
 800ddb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ddba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddbc:	f043 0301 	orr.w	r3, r3, #1
 800ddc0:	657b      	str	r3, [r7, #84]	; 0x54
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	3308      	adds	r3, #8
 800ddc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ddca:	64ba      	str	r2, [r7, #72]	; 0x48
 800ddcc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ddd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ddd2:	e841 2300 	strex	r3, r2, [r1]
 800ddd6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ddd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d1e5      	bne.n	800ddaa <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	689b      	ldr	r3, [r3, #8]
 800dde2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dde6:	d107      	bne.n	800ddf8 <UART_Start_Receive_IT+0x100>
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	691b      	ldr	r3, [r3, #16]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d103      	bne.n	800ddf8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	4a24      	ldr	r2, [pc, #144]	; (800de84 <UART_Start_Receive_IT+0x18c>)
 800ddf4:	665a      	str	r2, [r3, #100]	; 0x64
 800ddf6:	e002      	b.n	800ddfe <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	4a23      	ldr	r2, [pc, #140]	; (800de88 <UART_Start_Receive_IT+0x190>)
 800ddfc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	2200      	movs	r2, #0
 800de02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	691b      	ldr	r3, [r3, #16]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d019      	beq.n	800de42 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de16:	e853 3f00 	ldrex	r3, [r3]
 800de1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800de1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de1e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800de22:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	461a      	mov	r2, r3
 800de2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de2c:	637b      	str	r3, [r7, #52]	; 0x34
 800de2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800de32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de34:	e841 2300 	strex	r3, r2, [r1]
 800de38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800de3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d1e6      	bne.n	800de0e <UART_Start_Receive_IT+0x116>
 800de40:	e018      	b.n	800de74 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	e853 3f00 	ldrex	r3, [r3]
 800de4e:	613b      	str	r3, [r7, #16]
   return(result);
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	f043 0320 	orr.w	r3, r3, #32
 800de56:	653b      	str	r3, [r7, #80]	; 0x50
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	461a      	mov	r2, r3
 800de5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de60:	623b      	str	r3, [r7, #32]
 800de62:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de64:	69f9      	ldr	r1, [r7, #28]
 800de66:	6a3a      	ldr	r2, [r7, #32]
 800de68:	e841 2300 	strex	r3, r2, [r1]
 800de6c:	61bb      	str	r3, [r7, #24]
   return(result);
 800de6e:	69bb      	ldr	r3, [r7, #24]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d1e6      	bne.n	800de42 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800de74:	2300      	movs	r3, #0
}
 800de76:	4618      	mov	r0, r3
 800de78:	375c      	adds	r7, #92	; 0x5c
 800de7a:	46bd      	mov	sp, r7
 800de7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de80:	4770      	bx	lr
 800de82:	bf00      	nop
 800de84:	0800e2b1 	.word	0x0800e2b1
 800de88:	0800e151 	.word	0x0800e151

0800de8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b089      	sub	sp, #36	; 0x24
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	e853 3f00 	ldrex	r3, [r3]
 800dea0:	60bb      	str	r3, [r7, #8]
   return(result);
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dea8:	61fb      	str	r3, [r7, #28]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	461a      	mov	r2, r3
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	61bb      	str	r3, [r7, #24]
 800deb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deb6:	6979      	ldr	r1, [r7, #20]
 800deb8:	69ba      	ldr	r2, [r7, #24]
 800deba:	e841 2300 	strex	r3, r2, [r1]
 800debe:	613b      	str	r3, [r7, #16]
   return(result);
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d1e6      	bne.n	800de94 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2220      	movs	r2, #32
 800deca:	679a      	str	r2, [r3, #120]	; 0x78
}
 800decc:	bf00      	nop
 800dece:	3724      	adds	r7, #36	; 0x24
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr

0800ded8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ded8:	b480      	push	{r7}
 800deda:	b095      	sub	sp, #84	; 0x54
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dee8:	e853 3f00 	ldrex	r3, [r3]
 800deec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800deee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800def4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	461a      	mov	r2, r3
 800defc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800defe:	643b      	str	r3, [r7, #64]	; 0x40
 800df00:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800df04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df06:	e841 2300 	strex	r3, r2, [r1]
 800df0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800df0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d1e6      	bne.n	800dee0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	3308      	adds	r3, #8
 800df18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df1a:	6a3b      	ldr	r3, [r7, #32]
 800df1c:	e853 3f00 	ldrex	r3, [r3]
 800df20:	61fb      	str	r3, [r7, #28]
   return(result);
 800df22:	69fb      	ldr	r3, [r7, #28]
 800df24:	f023 0301 	bic.w	r3, r3, #1
 800df28:	64bb      	str	r3, [r7, #72]	; 0x48
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	3308      	adds	r3, #8
 800df30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df32:	62fa      	str	r2, [r7, #44]	; 0x2c
 800df34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df3a:	e841 2300 	strex	r3, r2, [r1]
 800df3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df42:	2b00      	cmp	r3, #0
 800df44:	d1e5      	bne.n	800df12 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df4a:	2b01      	cmp	r3, #1
 800df4c:	d118      	bne.n	800df80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	e853 3f00 	ldrex	r3, [r3]
 800df5a:	60bb      	str	r3, [r7, #8]
   return(result);
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	f023 0310 	bic.w	r3, r3, #16
 800df62:	647b      	str	r3, [r7, #68]	; 0x44
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	461a      	mov	r2, r3
 800df6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df6c:	61bb      	str	r3, [r7, #24]
 800df6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df70:	6979      	ldr	r1, [r7, #20]
 800df72:	69ba      	ldr	r2, [r7, #24]
 800df74:	e841 2300 	strex	r3, r2, [r1]
 800df78:	613b      	str	r3, [r7, #16]
   return(result);
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d1e6      	bne.n	800df4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2220      	movs	r2, #32
 800df84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2200      	movs	r2, #0
 800df8a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2200      	movs	r2, #0
 800df90:	665a      	str	r2, [r3, #100]	; 0x64
}
 800df92:	bf00      	nop
 800df94:	3754      	adds	r7, #84	; 0x54
 800df96:	46bd      	mov	sp, r7
 800df98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9c:	4770      	bx	lr

0800df9e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800df9e:	b580      	push	{r7, lr}
 800dfa0:	b090      	sub	sp, #64	; 0x40
 800dfa2:	af00      	add	r7, sp, #0
 800dfa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfaa:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f003 0320 	and.w	r3, r3, #32
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d137      	bne.n	800e02a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800dfba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dfc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	3308      	adds	r3, #8
 800dfc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfcc:	e853 3f00 	ldrex	r3, [r3]
 800dfd0:	623b      	str	r3, [r7, #32]
   return(result);
 800dfd2:	6a3b      	ldr	r3, [r7, #32]
 800dfd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dfd8:	63bb      	str	r3, [r7, #56]	; 0x38
 800dfda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	3308      	adds	r3, #8
 800dfe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfe2:	633a      	str	r2, [r7, #48]	; 0x30
 800dfe4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfe6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dfe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfea:	e841 2300 	strex	r3, r2, [r1]
 800dfee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d1e5      	bne.n	800dfc2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	e853 3f00 	ldrex	r3, [r3]
 800e002:	60fb      	str	r3, [r7, #12]
   return(result);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e00a:	637b      	str	r3, [r7, #52]	; 0x34
 800e00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	461a      	mov	r2, r3
 800e012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e014:	61fb      	str	r3, [r7, #28]
 800e016:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e018:	69b9      	ldr	r1, [r7, #24]
 800e01a:	69fa      	ldr	r2, [r7, #28]
 800e01c:	e841 2300 	strex	r3, r2, [r1]
 800e020:	617b      	str	r3, [r7, #20]
   return(result);
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d1e6      	bne.n	800dff6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e028:	e002      	b.n	800e030 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800e02a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e02c:	f7f6 fa60 	bl	80044f0 <HAL_UART_TxCpltCallback>
}
 800e030:	bf00      	nop
 800e032:	3740      	adds	r7, #64	; 0x40
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e044:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e046:	68f8      	ldr	r0, [r7, #12]
 800e048:	f7ff f9d8 	bl	800d3fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e04c:	bf00      	nop
 800e04e:	3710      	adds	r7, #16
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b086      	sub	sp, #24
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e060:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e066:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e06c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	689b      	ldr	r3, [r3, #8]
 800e074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e078:	2b80      	cmp	r3, #128	; 0x80
 800e07a:	d109      	bne.n	800e090 <UART_DMAError+0x3c>
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	2b21      	cmp	r3, #33	; 0x21
 800e080:	d106      	bne.n	800e090 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	2200      	movs	r2, #0
 800e086:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800e08a:	6978      	ldr	r0, [r7, #20]
 800e08c:	f7ff fefe 	bl	800de8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	689b      	ldr	r3, [r3, #8]
 800e096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e09a:	2b40      	cmp	r3, #64	; 0x40
 800e09c:	d109      	bne.n	800e0b2 <UART_DMAError+0x5e>
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	2b22      	cmp	r3, #34	; 0x22
 800e0a2:	d106      	bne.n	800e0b2 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800e0ac:	6978      	ldr	r0, [r7, #20]
 800e0ae:	f7ff ff13 	bl	800ded8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0b8:	f043 0210 	orr.w	r2, r3, #16
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e0c2:	6978      	ldr	r0, [r7, #20]
 800e0c4:	f7f6 fc78 	bl	80049b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0c8:	bf00      	nop
 800e0ca:	3718      	adds	r7, #24
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b084      	sub	sp, #16
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e0ee:	68f8      	ldr	r0, [r7, #12]
 800e0f0:	f7f6 fc62 	bl	80049b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0f4:	bf00      	nop
 800e0f6:	3710      	adds	r7, #16
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b088      	sub	sp, #32
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	e853 3f00 	ldrex	r3, [r3]
 800e110:	60bb      	str	r3, [r7, #8]
   return(result);
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e118:	61fb      	str	r3, [r7, #28]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	461a      	mov	r2, r3
 800e120:	69fb      	ldr	r3, [r7, #28]
 800e122:	61bb      	str	r3, [r7, #24]
 800e124:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e126:	6979      	ldr	r1, [r7, #20]
 800e128:	69ba      	ldr	r2, [r7, #24]
 800e12a:	e841 2300 	strex	r3, r2, [r1]
 800e12e:	613b      	str	r3, [r7, #16]
   return(result);
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d1e6      	bne.n	800e104 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2220      	movs	r2, #32
 800e13a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2200      	movs	r2, #0
 800e140:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f7f6 f9d4 	bl	80044f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e148:	bf00      	nop
 800e14a:	3720      	adds	r7, #32
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b096      	sub	sp, #88	; 0x58
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e15e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e166:	2b22      	cmp	r3, #34	; 0x22
 800e168:	f040 8094 	bne.w	800e294 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e172:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e176:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e17a:	b2d9      	uxtb	r1, r3
 800e17c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e180:	b2da      	uxtb	r2, r3
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e186:	400a      	ands	r2, r1
 800e188:	b2d2      	uxtb	r2, r2
 800e18a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e190:	1c5a      	adds	r2, r3, #1
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e19c:	b29b      	uxth	r3, r3
 800e19e:	3b01      	subs	r3, #1
 800e1a0:	b29a      	uxth	r2, r3
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d179      	bne.n	800e2a8 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1bc:	e853 3f00 	ldrex	r3, [r3]
 800e1c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e1c8:	653b      	str	r3, [r7, #80]	; 0x50
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1d2:	647b      	str	r3, [r7, #68]	; 0x44
 800e1d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e1d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1da:	e841 2300 	strex	r3, r2, [r1]
 800e1de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e1e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d1e6      	bne.n	800e1b4 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	3308      	adds	r3, #8
 800e1ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f0:	e853 3f00 	ldrex	r3, [r3]
 800e1f4:	623b      	str	r3, [r7, #32]
   return(result);
 800e1f6:	6a3b      	ldr	r3, [r7, #32]
 800e1f8:	f023 0301 	bic.w	r3, r3, #1
 800e1fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	3308      	adds	r3, #8
 800e204:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e206:	633a      	str	r2, [r7, #48]	; 0x30
 800e208:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e20a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e20c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e20e:	e841 2300 	strex	r3, r2, [r1]
 800e212:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e216:	2b00      	cmp	r3, #0
 800e218:	d1e5      	bne.n	800e1e6 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2220      	movs	r2, #32
 800e21e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2200      	movs	r2, #0
 800e224:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e22a:	2b01      	cmp	r3, #1
 800e22c:	d12e      	bne.n	800e28c <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2200      	movs	r2, #0
 800e232:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	e853 3f00 	ldrex	r3, [r3]
 800e240:	60fb      	str	r3, [r7, #12]
   return(result);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	f023 0310 	bic.w	r3, r3, #16
 800e248:	64bb      	str	r3, [r7, #72]	; 0x48
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	461a      	mov	r2, r3
 800e250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e252:	61fb      	str	r3, [r7, #28]
 800e254:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e256:	69b9      	ldr	r1, [r7, #24]
 800e258:	69fa      	ldr	r2, [r7, #28]
 800e25a:	e841 2300 	strex	r3, r2, [r1]
 800e25e:	617b      	str	r3, [r7, #20]
   return(result);
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d1e6      	bne.n	800e234 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	69db      	ldr	r3, [r3, #28]
 800e26c:	f003 0310 	and.w	r3, r3, #16
 800e270:	2b10      	cmp	r3, #16
 800e272:	d103      	bne.n	800e27c <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	2210      	movs	r2, #16
 800e27a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e282:	4619      	mov	r1, r3
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f7ff f8c3 	bl	800d410 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e28a:	e00d      	b.n	800e2a8 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f7f6 f945 	bl	800451c <HAL_UART_RxCpltCallback>
}
 800e292:	e009      	b.n	800e2a8 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	8b1b      	ldrh	r3, [r3, #24]
 800e29a:	b29a      	uxth	r2, r3
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f042 0208 	orr.w	r2, r2, #8
 800e2a4:	b292      	uxth	r2, r2
 800e2a6:	831a      	strh	r2, [r3, #24]
}
 800e2a8:	bf00      	nop
 800e2aa:	3758      	adds	r7, #88	; 0x58
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b096      	sub	sp, #88	; 0x58
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e2be:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2c6:	2b22      	cmp	r3, #34	; 0x22
 800e2c8:	f040 8094 	bne.w	800e3f4 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e2d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2da:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800e2dc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800e2e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e2e4:	4013      	ands	r3, r2
 800e2e6:	b29a      	uxth	r2, r3
 800e2e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2ea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2f0:	1c9a      	adds	r2, r3, #2
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	3b01      	subs	r3, #1
 800e300:	b29a      	uxth	r2, r3
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e30e:	b29b      	uxth	r3, r3
 800e310:	2b00      	cmp	r3, #0
 800e312:	d179      	bne.n	800e408 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e31a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e31c:	e853 3f00 	ldrex	r3, [r3]
 800e320:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e324:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e328:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	461a      	mov	r2, r3
 800e330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e332:	643b      	str	r3, [r7, #64]	; 0x40
 800e334:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e336:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e338:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e33a:	e841 2300 	strex	r3, r2, [r1]
 800e33e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e342:	2b00      	cmp	r3, #0
 800e344:	d1e6      	bne.n	800e314 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	3308      	adds	r3, #8
 800e34c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e34e:	6a3b      	ldr	r3, [r7, #32]
 800e350:	e853 3f00 	ldrex	r3, [r3]
 800e354:	61fb      	str	r3, [r7, #28]
   return(result);
 800e356:	69fb      	ldr	r3, [r7, #28]
 800e358:	f023 0301 	bic.w	r3, r3, #1
 800e35c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	3308      	adds	r3, #8
 800e364:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e366:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e368:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e36a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e36c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e36e:	e841 2300 	strex	r3, r2, [r1]
 800e372:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e376:	2b00      	cmp	r3, #0
 800e378:	d1e5      	bne.n	800e346 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2220      	movs	r2, #32
 800e37e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2200      	movs	r2, #0
 800e384:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e38a:	2b01      	cmp	r3, #1
 800e38c:	d12e      	bne.n	800e3ec <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2200      	movs	r2, #0
 800e392:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	e853 3f00 	ldrex	r3, [r3]
 800e3a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	f023 0310 	bic.w	r3, r3, #16
 800e3a8:	647b      	str	r3, [r7, #68]	; 0x44
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3b2:	61bb      	str	r3, [r7, #24]
 800e3b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3b6:	6979      	ldr	r1, [r7, #20]
 800e3b8:	69ba      	ldr	r2, [r7, #24]
 800e3ba:	e841 2300 	strex	r3, r2, [r1]
 800e3be:	613b      	str	r3, [r7, #16]
   return(result);
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d1e6      	bne.n	800e394 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	69db      	ldr	r3, [r3, #28]
 800e3cc:	f003 0310 	and.w	r3, r3, #16
 800e3d0:	2b10      	cmp	r3, #16
 800e3d2:	d103      	bne.n	800e3dc <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	2210      	movs	r2, #16
 800e3da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f7ff f813 	bl	800d410 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e3ea:	e00d      	b.n	800e408 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f7f6 f895 	bl	800451c <HAL_UART_RxCpltCallback>
}
 800e3f2:	e009      	b.n	800e408 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	8b1b      	ldrh	r3, [r3, #24]
 800e3fa:	b29a      	uxth	r2, r3
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	f042 0208 	orr.w	r2, r2, #8
 800e404:	b292      	uxth	r2, r2
 800e406:	831a      	strh	r2, [r3, #24]
}
 800e408:	bf00      	nop
 800e40a:	3758      	adds	r7, #88	; 0x58
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e410:	b480      	push	{r7}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e418:	bf00      	nop
 800e41a:	370c      	adds	r7, #12
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr

0800e424 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800e428:	4904      	ldr	r1, [pc, #16]	; (800e43c <MX_FATFS_Init+0x18>)
 800e42a:	4805      	ldr	r0, [pc, #20]	; (800e440 <MX_FATFS_Init+0x1c>)
 800e42c:	f003 fa54 	bl	80118d8 <FATFS_LinkDriver>
 800e430:	4603      	mov	r3, r0
 800e432:	461a      	mov	r2, r3
 800e434:	4b03      	ldr	r3, [pc, #12]	; (800e444 <MX_FATFS_Init+0x20>)
 800e436:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e438:	bf00      	nop
 800e43a:	bd80      	pop	{r7, pc}
 800e43c:	2000413c 	.word	0x2000413c
 800e440:	20000220 	.word	0x20000220
 800e444:	20004138 	.word	0x20004138

0800e448 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e448:	b480      	push	{r7}
 800e44a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e44c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e44e:	4618      	mov	r0, r3
 800e450:	46bd      	mov	sp, r7
 800e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e456:	4770      	bx	lr

0800e458 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800e458:	b480      	push	{r7}
 800e45a:	b083      	sub	sp, #12
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	4603      	mov	r3, r0
 800e460:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800e462:	4b0a      	ldr	r3, [pc, #40]	; (800e48c <USER_initialize+0x34>)
 800e464:	2201      	movs	r2, #1
 800e466:	701a      	strb	r2, [r3, #0]
    Stat &= ~STA_NOINIT;
 800e468:	4b08      	ldr	r3, [pc, #32]	; (800e48c <USER_initialize+0x34>)
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	f023 0301 	bic.w	r3, r3, #1
 800e472:	b2da      	uxtb	r2, r3
 800e474:	4b05      	ldr	r3, [pc, #20]	; (800e48c <USER_initialize+0x34>)
 800e476:	701a      	strb	r2, [r3, #0]

    return Stat;
 800e478:	4b04      	ldr	r3, [pc, #16]	; (800e48c <USER_initialize+0x34>)
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800e47e:	4618      	mov	r0, r3
 800e480:	370c      	adds	r7, #12
 800e482:	46bd      	mov	sp, r7
 800e484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e488:	4770      	bx	lr
 800e48a:	bf00      	nop
 800e48c:	2000021d 	.word	0x2000021d

0800e490 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800e490:	b480      	push	{r7}
 800e492:	b083      	sub	sp, #12
 800e494:	af00      	add	r7, sp, #0
 800e496:	4603      	mov	r3, r0
 800e498:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	Stat = STA_NOINIT;
 800e49a:	4b0a      	ldr	r3, [pc, #40]	; (800e4c4 <USER_status+0x34>)
 800e49c:	2201      	movs	r2, #1
 800e49e:	701a      	strb	r2, [r3, #0]
	Stat &= ~STA_NOINIT;
 800e4a0:	4b08      	ldr	r3, [pc, #32]	; (800e4c4 <USER_status+0x34>)
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	b2db      	uxtb	r3, r3
 800e4a6:	f023 0301 	bic.w	r3, r3, #1
 800e4aa:	b2da      	uxtb	r2, r3
 800e4ac:	4b05      	ldr	r3, [pc, #20]	; (800e4c4 <USER_status+0x34>)
 800e4ae:	701a      	strb	r2, [r3, #0]

	return Stat;
 800e4b0:	4b04      	ldr	r3, [pc, #16]	; (800e4c4 <USER_status+0x34>)
 800e4b2:	781b      	ldrb	r3, [r3, #0]
 800e4b4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	370c      	adds	r7, #12
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c0:	4770      	bx	lr
 800e4c2:	bf00      	nop
 800e4c4:	2000021d 	.word	0x2000021d

0800e4c8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b086      	sub	sp, #24
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	60b9      	str	r1, [r7, #8]
 800e4d0:	607a      	str	r2, [r7, #4]
 800e4d2:	603b      	str	r3, [r7, #0]
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */

	//
		uint32_t ss = W25qxx_getSectorSize();
 800e4d8:	f7f7 fdba 	bl	8006050 <W25qxx_getSectorSize>
 800e4dc:	6138      	str	r0, [r7, #16]
		int i = -1;
 800e4de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4e2:	617b      	str	r3, [r7, #20]
		while (++i < count) {
 800e4e4:	e007      	b.n	800e4f6 <USER_read+0x2e>
	//		Report(__func__, true, "Dev:%u sector:%u(%u) count:%u\r\n", pdrv, sector, ss, count);
			W25qxx_ReadSector((BYTE *)buff, sector++, 0, ss);
 800e4e6:	6879      	ldr	r1, [r7, #4]
 800e4e8:	1c4b      	adds	r3, r1, #1
 800e4ea:	607b      	str	r3, [r7, #4]
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	68b8      	ldr	r0, [r7, #8]
 800e4f2:	f7f8 f8cb 	bl	800668c <W25qxx_ReadSector>
		while (++i < count) {
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	617b      	str	r3, [r7, #20]
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	683a      	ldr	r2, [r7, #0]
 800e500:	429a      	cmp	r2, r3
 800e502:	d8f0      	bhi.n	800e4e6 <USER_read+0x1e>
		}
	//

    return RES_OK;
 800e504:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800e506:	4618      	mov	r0, r3
 800e508:	3718      	adds	r7, #24
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}

0800e50e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800e50e:	b580      	push	{r7, lr}
 800e510:	b086      	sub	sp, #24
 800e512:	af00      	add	r7, sp, #0
 800e514:	60b9      	str	r1, [r7, #8]
 800e516:	607a      	str	r2, [r7, #4]
 800e518:	603b      	str	r3, [r7, #0]
 800e51a:	4603      	mov	r3, r0
 800e51c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */

	//
	uint32_t ss = W25qxx_getSectorSize();
 800e51e:	f7f7 fd97 	bl	8006050 <W25qxx_getSectorSize>
 800e522:	6138      	str	r0, [r7, #16]
	int i = -1;
 800e524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e528:	617b      	str	r3, [r7, #20]
	while (++i < count) {
 800e52a:	e015      	b.n	800e558 <USER_write+0x4a>
//		Report(__func__, true, "Dev:%u sector:%u(%u) count:%u\r\n", pdrv, sector, ss, count);
		if (!W25qxx_IsEmptySector(sector, 0, ss)) W25qxx_EraseSector(sector);
 800e52c:	693a      	ldr	r2, [r7, #16]
 800e52e:	2100      	movs	r1, #0
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f7f7 fe0f 	bl	8006154 <W25qxx_IsEmptySector>
 800e536:	4603      	mov	r3, r0
 800e538:	f083 0301 	eor.w	r3, r3, #1
 800e53c:	b2db      	uxtb	r3, r3
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d002      	beq.n	800e548 <USER_write+0x3a>
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f7f7 fdaa 	bl	800609c <W25qxx_EraseSector>
		W25qxx_WriteSector((BYTE *)buff, sector++, 0, ss);
 800e548:	6879      	ldr	r1, [r7, #4]
 800e54a:	1c4b      	adds	r3, r1, #1
 800e54c:	607b      	str	r3, [r7, #4]
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	2200      	movs	r2, #0
 800e552:	68b8      	ldr	r0, [r7, #8]
 800e554:	f7f7 ff72 	bl	800643c <W25qxx_WriteSector>
	while (++i < count) {
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	3301      	adds	r3, #1
 800e55c:	617b      	str	r3, [r7, #20]
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	683a      	ldr	r2, [r7, #0]
 800e562:	429a      	cmp	r2, r3
 800e564:	d8e2      	bhi.n	800e52c <USER_write+0x1e>
	}
	//

    return RES_OK;
 800e566:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3718      	adds	r7, #24
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}

0800e570 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b084      	sub	sp, #16
 800e574:	af00      	add	r7, sp, #0
 800e576:	4603      	mov	r3, r0
 800e578:	603a      	str	r2, [r7, #0]
 800e57a:	71fb      	strb	r3, [r7, #7]
 800e57c:	460b      	mov	r3, r1
 800e57e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    DRESULT res = RES_ERROR;
 800e580:	2301      	movs	r3, #1
 800e582:	73fb      	strb	r3, [r7, #15]
    //
    switch (cmd) {
 800e584:	79bb      	ldrb	r3, [r7, #6]
 800e586:	2b03      	cmp	r3, #3
 800e588:	d825      	bhi.n	800e5d6 <USER_ioctl+0x66>
 800e58a:	a201      	add	r2, pc, #4	; (adr r2, 800e590 <USER_ioctl+0x20>)
 800e58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e590:	0800e5a1 	.word	0x0800e5a1
 800e594:	0800e5a7 	.word	0x0800e5a7
 800e598:	0800e5b7 	.word	0x0800e5b7
 800e59c:	0800e5c7 	.word	0x0800e5c7
    	case CTRL_SYNC:
    		res = RES_OK;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	73fb      	strb	r3, [r7, #15]
        break;
 800e5a4:	e019      	b.n	800e5da <USER_ioctl+0x6a>
    	case GET_SECTOR_COUNT:
    		*(DWORD *)buff = W25qxx_getSectorCount();
 800e5a6:	f7f7 fd47 	bl	8006038 <W25qxx_getSectorCount>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	601a      	str	r2, [r3, #0]
    		res = RES_OK;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	73fb      	strb	r3, [r7, #15]
        break;
 800e5b4:	e011      	b.n	800e5da <USER_ioctl+0x6a>
    	case GET_SECTOR_SIZE:
    		*(DWORD *)buff = W25qxx_getSectorSize();
 800e5b6:	f7f7 fd4b 	bl	8006050 <W25qxx_getSectorSize>
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	601a      	str	r2, [r3, #0]
    		res = RES_OK;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	73fb      	strb	r3, [r7, #15]
        break;
 800e5c4:	e009      	b.n	800e5da <USER_ioctl+0x6a>
    	case GET_BLOCK_SIZE:
    		*(DWORD *)buff = W25qxx_getBlockSize();//W25qxx_getSectorSize();//W25qxx_getBlockSize();
 800e5c6:	f7f7 fd5d 	bl	8006084 <W25qxx_getBlockSize>
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	601a      	str	r2, [r3, #0]
    		res = RES_OK;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	73fb      	strb	r3, [r7, #15]
        break;
 800e5d4:	e001      	b.n	800e5da <USER_ioctl+0x6a>
    		default : res = RES_PARERR;
 800e5d6:	2304      	movs	r3, #4
 800e5d8:	73fb      	strb	r3, [r7, #15]
    }
    //

    return res;
 800e5da:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3710      	adds	r7, #16
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b084      	sub	sp, #16
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e5ee:	79fb      	ldrb	r3, [r7, #7]
 800e5f0:	4a08      	ldr	r2, [pc, #32]	; (800e614 <disk_status+0x30>)
 800e5f2:	009b      	lsls	r3, r3, #2
 800e5f4:	4413      	add	r3, r2
 800e5f6:	685b      	ldr	r3, [r3, #4]
 800e5f8:	685b      	ldr	r3, [r3, #4]
 800e5fa:	79fa      	ldrb	r2, [r7, #7]
 800e5fc:	4905      	ldr	r1, [pc, #20]	; (800e614 <disk_status+0x30>)
 800e5fe:	440a      	add	r2, r1
 800e600:	7a12      	ldrb	r2, [r2, #8]
 800e602:	4610      	mov	r0, r2
 800e604:	4798      	blx	r3
 800e606:	4603      	mov	r3, r0
 800e608:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e60a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3710      	adds	r7, #16
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	20004168 	.word	0x20004168

0800e618 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b084      	sub	sp, #16
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	4603      	mov	r3, r0
 800e620:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e622:	2300      	movs	r3, #0
 800e624:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e626:	79fb      	ldrb	r3, [r7, #7]
 800e628:	4a0d      	ldr	r2, [pc, #52]	; (800e660 <disk_initialize+0x48>)
 800e62a:	5cd3      	ldrb	r3, [r2, r3]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d111      	bne.n	800e654 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e630:	79fb      	ldrb	r3, [r7, #7]
 800e632:	4a0b      	ldr	r2, [pc, #44]	; (800e660 <disk_initialize+0x48>)
 800e634:	2101      	movs	r1, #1
 800e636:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e638:	79fb      	ldrb	r3, [r7, #7]
 800e63a:	4a09      	ldr	r2, [pc, #36]	; (800e660 <disk_initialize+0x48>)
 800e63c:	009b      	lsls	r3, r3, #2
 800e63e:	4413      	add	r3, r2
 800e640:	685b      	ldr	r3, [r3, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	79fa      	ldrb	r2, [r7, #7]
 800e646:	4906      	ldr	r1, [pc, #24]	; (800e660 <disk_initialize+0x48>)
 800e648:	440a      	add	r2, r1
 800e64a:	7a12      	ldrb	r2, [r2, #8]
 800e64c:	4610      	mov	r0, r2
 800e64e:	4798      	blx	r3
 800e650:	4603      	mov	r3, r0
 800e652:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e654:	7bfb      	ldrb	r3, [r7, #15]
}
 800e656:	4618      	mov	r0, r3
 800e658:	3710      	adds	r7, #16
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	20004168 	.word	0x20004168

0800e664 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e664:	b590      	push	{r4, r7, lr}
 800e666:	b087      	sub	sp, #28
 800e668:	af00      	add	r7, sp, #0
 800e66a:	60b9      	str	r1, [r7, #8]
 800e66c:	607a      	str	r2, [r7, #4]
 800e66e:	603b      	str	r3, [r7, #0]
 800e670:	4603      	mov	r3, r0
 800e672:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e674:	7bfb      	ldrb	r3, [r7, #15]
 800e676:	4a0a      	ldr	r2, [pc, #40]	; (800e6a0 <disk_read+0x3c>)
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	4413      	add	r3, r2
 800e67c:	685b      	ldr	r3, [r3, #4]
 800e67e:	689c      	ldr	r4, [r3, #8]
 800e680:	7bfb      	ldrb	r3, [r7, #15]
 800e682:	4a07      	ldr	r2, [pc, #28]	; (800e6a0 <disk_read+0x3c>)
 800e684:	4413      	add	r3, r2
 800e686:	7a18      	ldrb	r0, [r3, #8]
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	687a      	ldr	r2, [r7, #4]
 800e68c:	68b9      	ldr	r1, [r7, #8]
 800e68e:	47a0      	blx	r4
 800e690:	4603      	mov	r3, r0
 800e692:	75fb      	strb	r3, [r7, #23]
  return res;
 800e694:	7dfb      	ldrb	r3, [r7, #23]
}
 800e696:	4618      	mov	r0, r3
 800e698:	371c      	adds	r7, #28
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd90      	pop	{r4, r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	20004168 	.word	0x20004168

0800e6a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e6a4:	b590      	push	{r4, r7, lr}
 800e6a6:	b087      	sub	sp, #28
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	60b9      	str	r1, [r7, #8]
 800e6ac:	607a      	str	r2, [r7, #4]
 800e6ae:	603b      	str	r3, [r7, #0]
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e6b4:	7bfb      	ldrb	r3, [r7, #15]
 800e6b6:	4a0a      	ldr	r2, [pc, #40]	; (800e6e0 <disk_write+0x3c>)
 800e6b8:	009b      	lsls	r3, r3, #2
 800e6ba:	4413      	add	r3, r2
 800e6bc:	685b      	ldr	r3, [r3, #4]
 800e6be:	68dc      	ldr	r4, [r3, #12]
 800e6c0:	7bfb      	ldrb	r3, [r7, #15]
 800e6c2:	4a07      	ldr	r2, [pc, #28]	; (800e6e0 <disk_write+0x3c>)
 800e6c4:	4413      	add	r3, r2
 800e6c6:	7a18      	ldrb	r0, [r3, #8]
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	687a      	ldr	r2, [r7, #4]
 800e6cc:	68b9      	ldr	r1, [r7, #8]
 800e6ce:	47a0      	blx	r4
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	75fb      	strb	r3, [r7, #23]
  return res;
 800e6d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	371c      	adds	r7, #28
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd90      	pop	{r4, r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	20004168 	.word	0x20004168

0800e6e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b084      	sub	sp, #16
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	603a      	str	r2, [r7, #0]
 800e6ee:	71fb      	strb	r3, [r7, #7]
 800e6f0:	460b      	mov	r3, r1
 800e6f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e6f4:	79fb      	ldrb	r3, [r7, #7]
 800e6f6:	4a09      	ldr	r2, [pc, #36]	; (800e71c <disk_ioctl+0x38>)
 800e6f8:	009b      	lsls	r3, r3, #2
 800e6fa:	4413      	add	r3, r2
 800e6fc:	685b      	ldr	r3, [r3, #4]
 800e6fe:	691b      	ldr	r3, [r3, #16]
 800e700:	79fa      	ldrb	r2, [r7, #7]
 800e702:	4906      	ldr	r1, [pc, #24]	; (800e71c <disk_ioctl+0x38>)
 800e704:	440a      	add	r2, r1
 800e706:	7a10      	ldrb	r0, [r2, #8]
 800e708:	79b9      	ldrb	r1, [r7, #6]
 800e70a:	683a      	ldr	r2, [r7, #0]
 800e70c:	4798      	blx	r3
 800e70e:	4603      	mov	r3, r0
 800e710:	73fb      	strb	r3, [r7, #15]
  return res;
 800e712:	7bfb      	ldrb	r3, [r7, #15]
}
 800e714:	4618      	mov	r0, r3
 800e716:	3710      	adds	r7, #16
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}
 800e71c:	20004168 	.word	0x20004168

0800e720 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e720:	b480      	push	{r7}
 800e722:	b085      	sub	sp, #20
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	3301      	adds	r3, #1
 800e72c:	781b      	ldrb	r3, [r3, #0]
 800e72e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e730:	89fb      	ldrh	r3, [r7, #14]
 800e732:	021b      	lsls	r3, r3, #8
 800e734:	b21a      	sxth	r2, r3
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	781b      	ldrb	r3, [r3, #0]
 800e73a:	b21b      	sxth	r3, r3
 800e73c:	4313      	orrs	r3, r2
 800e73e:	b21b      	sxth	r3, r3
 800e740:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e742:	89fb      	ldrh	r3, [r7, #14]
}
 800e744:	4618      	mov	r0, r3
 800e746:	3714      	adds	r7, #20
 800e748:	46bd      	mov	sp, r7
 800e74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74e:	4770      	bx	lr

0800e750 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e750:	b480      	push	{r7}
 800e752:	b085      	sub	sp, #20
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	3303      	adds	r3, #3
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	021b      	lsls	r3, r3, #8
 800e764:	687a      	ldr	r2, [r7, #4]
 800e766:	3202      	adds	r2, #2
 800e768:	7812      	ldrb	r2, [r2, #0]
 800e76a:	4313      	orrs	r3, r2
 800e76c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	021b      	lsls	r3, r3, #8
 800e772:	687a      	ldr	r2, [r7, #4]
 800e774:	3201      	adds	r2, #1
 800e776:	7812      	ldrb	r2, [r2, #0]
 800e778:	4313      	orrs	r3, r2
 800e77a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	021b      	lsls	r3, r3, #8
 800e780:	687a      	ldr	r2, [r7, #4]
 800e782:	7812      	ldrb	r2, [r2, #0]
 800e784:	4313      	orrs	r3, r2
 800e786:	60fb      	str	r3, [r7, #12]
	return rv;
 800e788:	68fb      	ldr	r3, [r7, #12]
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	3714      	adds	r7, #20
 800e78e:	46bd      	mov	sp, r7
 800e790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e794:	4770      	bx	lr

0800e796 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e796:	b480      	push	{r7}
 800e798:	b083      	sub	sp, #12
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	6078      	str	r0, [r7, #4]
 800e79e:	460b      	mov	r3, r1
 800e7a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	1c5a      	adds	r2, r3, #1
 800e7a6:	607a      	str	r2, [r7, #4]
 800e7a8:	887a      	ldrh	r2, [r7, #2]
 800e7aa:	b2d2      	uxtb	r2, r2
 800e7ac:	701a      	strb	r2, [r3, #0]
 800e7ae:	887b      	ldrh	r3, [r7, #2]
 800e7b0:	0a1b      	lsrs	r3, r3, #8
 800e7b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	1c5a      	adds	r2, r3, #1
 800e7b8:	607a      	str	r2, [r7, #4]
 800e7ba:	887a      	ldrh	r2, [r7, #2]
 800e7bc:	b2d2      	uxtb	r2, r2
 800e7be:	701a      	strb	r2, [r3, #0]
}
 800e7c0:	bf00      	nop
 800e7c2:	370c      	adds	r7, #12
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr

0800e7cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b083      	sub	sp, #12
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
 800e7d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	1c5a      	adds	r2, r3, #1
 800e7da:	607a      	str	r2, [r7, #4]
 800e7dc:	683a      	ldr	r2, [r7, #0]
 800e7de:	b2d2      	uxtb	r2, r2
 800e7e0:	701a      	strb	r2, [r3, #0]
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	0a1b      	lsrs	r3, r3, #8
 800e7e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	1c5a      	adds	r2, r3, #1
 800e7ec:	607a      	str	r2, [r7, #4]
 800e7ee:	683a      	ldr	r2, [r7, #0]
 800e7f0:	b2d2      	uxtb	r2, r2
 800e7f2:	701a      	strb	r2, [r3, #0]
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	0a1b      	lsrs	r3, r3, #8
 800e7f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	1c5a      	adds	r2, r3, #1
 800e7fe:	607a      	str	r2, [r7, #4]
 800e800:	683a      	ldr	r2, [r7, #0]
 800e802:	b2d2      	uxtb	r2, r2
 800e804:	701a      	strb	r2, [r3, #0]
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	0a1b      	lsrs	r3, r3, #8
 800e80a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	1c5a      	adds	r2, r3, #1
 800e810:	607a      	str	r2, [r7, #4]
 800e812:	683a      	ldr	r2, [r7, #0]
 800e814:	b2d2      	uxtb	r2, r2
 800e816:	701a      	strb	r2, [r3, #0]
}
 800e818:	bf00      	nop
 800e81a:	370c      	adds	r7, #12
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr

0800e824 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e824:	b480      	push	{r7}
 800e826:	b087      	sub	sp, #28
 800e828:	af00      	add	r7, sp, #0
 800e82a:	60f8      	str	r0, [r7, #12]
 800e82c:	60b9      	str	r1, [r7, #8]
 800e82e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d00d      	beq.n	800e85a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e83e:	693a      	ldr	r2, [r7, #16]
 800e840:	1c53      	adds	r3, r2, #1
 800e842:	613b      	str	r3, [r7, #16]
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	1c59      	adds	r1, r3, #1
 800e848:	6179      	str	r1, [r7, #20]
 800e84a:	7812      	ldrb	r2, [r2, #0]
 800e84c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	3b01      	subs	r3, #1
 800e852:	607b      	str	r3, [r7, #4]
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d1f1      	bne.n	800e83e <mem_cpy+0x1a>
	}
}
 800e85a:	bf00      	nop
 800e85c:	371c      	adds	r7, #28
 800e85e:	46bd      	mov	sp, r7
 800e860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e864:	4770      	bx	lr

0800e866 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e866:	b480      	push	{r7}
 800e868:	b087      	sub	sp, #28
 800e86a:	af00      	add	r7, sp, #0
 800e86c:	60f8      	str	r0, [r7, #12]
 800e86e:	60b9      	str	r1, [r7, #8]
 800e870:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	1c5a      	adds	r2, r3, #1
 800e87a:	617a      	str	r2, [r7, #20]
 800e87c:	68ba      	ldr	r2, [r7, #8]
 800e87e:	b2d2      	uxtb	r2, r2
 800e880:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	3b01      	subs	r3, #1
 800e886:	607b      	str	r3, [r7, #4]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d1f3      	bne.n	800e876 <mem_set+0x10>
}
 800e88e:	bf00      	nop
 800e890:	bf00      	nop
 800e892:	371c      	adds	r7, #28
 800e894:	46bd      	mov	sp, r7
 800e896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89a:	4770      	bx	lr

0800e89c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e89c:	b480      	push	{r7}
 800e89e:	b089      	sub	sp, #36	; 0x24
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	60f8      	str	r0, [r7, #12]
 800e8a4:	60b9      	str	r1, [r7, #8]
 800e8a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	61fb      	str	r3, [r7, #28]
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	1c5a      	adds	r2, r3, #1
 800e8b8:	61fa      	str	r2, [r7, #28]
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	4619      	mov	r1, r3
 800e8be:	69bb      	ldr	r3, [r7, #24]
 800e8c0:	1c5a      	adds	r2, r3, #1
 800e8c2:	61ba      	str	r2, [r7, #24]
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	1acb      	subs	r3, r1, r3
 800e8c8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	3b01      	subs	r3, #1
 800e8ce:	607b      	str	r3, [r7, #4]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d002      	beq.n	800e8dc <mem_cmp+0x40>
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d0eb      	beq.n	800e8b4 <mem_cmp+0x18>

	return r;
 800e8dc:	697b      	ldr	r3, [r7, #20]
}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	3724      	adds	r7, #36	; 0x24
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e8:	4770      	bx	lr

0800e8ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e8ea:	b480      	push	{r7}
 800e8ec:	b083      	sub	sp, #12
 800e8ee:	af00      	add	r7, sp, #0
 800e8f0:	6078      	str	r0, [r7, #4]
 800e8f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e8f4:	e002      	b.n	800e8fc <chk_chr+0x12>
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	3301      	adds	r3, #1
 800e8fa:	607b      	str	r3, [r7, #4]
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	781b      	ldrb	r3, [r3, #0]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d005      	beq.n	800e910 <chk_chr+0x26>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	461a      	mov	r2, r3
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d1f2      	bne.n	800e8f6 <chk_chr+0xc>
	return *str;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	781b      	ldrb	r3, [r3, #0]
}
 800e914:	4618      	mov	r0, r3
 800e916:	370c      	adds	r7, #12
 800e918:	46bd      	mov	sp, r7
 800e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91e:	4770      	bx	lr

0800e920 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e920:	b480      	push	{r7}
 800e922:	b085      	sub	sp, #20
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e92a:	2300      	movs	r3, #0
 800e92c:	60bb      	str	r3, [r7, #8]
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	60fb      	str	r3, [r7, #12]
 800e932:	e029      	b.n	800e988 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e934:	4a27      	ldr	r2, [pc, #156]	; (800e9d4 <chk_lock+0xb4>)
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	011b      	lsls	r3, r3, #4
 800e93a:	4413      	add	r3, r2
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d01d      	beq.n	800e97e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e942:	4a24      	ldr	r2, [pc, #144]	; (800e9d4 <chk_lock+0xb4>)
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	011b      	lsls	r3, r3, #4
 800e948:	4413      	add	r3, r2
 800e94a:	681a      	ldr	r2, [r3, #0]
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	429a      	cmp	r2, r3
 800e952:	d116      	bne.n	800e982 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e954:	4a1f      	ldr	r2, [pc, #124]	; (800e9d4 <chk_lock+0xb4>)
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	011b      	lsls	r3, r3, #4
 800e95a:	4413      	add	r3, r2
 800e95c:	3304      	adds	r3, #4
 800e95e:	681a      	ldr	r2, [r3, #0]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e964:	429a      	cmp	r2, r3
 800e966:	d10c      	bne.n	800e982 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e968:	4a1a      	ldr	r2, [pc, #104]	; (800e9d4 <chk_lock+0xb4>)
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	011b      	lsls	r3, r3, #4
 800e96e:	4413      	add	r3, r2
 800e970:	3308      	adds	r3, #8
 800e972:	681a      	ldr	r2, [r3, #0]
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e978:	429a      	cmp	r2, r3
 800e97a:	d102      	bne.n	800e982 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e97c:	e007      	b.n	800e98e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e97e:	2301      	movs	r3, #1
 800e980:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	3301      	adds	r3, #1
 800e986:	60fb      	str	r3, [r7, #12]
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d9d2      	bls.n	800e934 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2b02      	cmp	r3, #2
 800e992:	d109      	bne.n	800e9a8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d102      	bne.n	800e9a0 <chk_lock+0x80>
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	2b02      	cmp	r3, #2
 800e99e:	d101      	bne.n	800e9a4 <chk_lock+0x84>
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	e010      	b.n	800e9c6 <chk_lock+0xa6>
 800e9a4:	2312      	movs	r3, #18
 800e9a6:	e00e      	b.n	800e9c6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d108      	bne.n	800e9c0 <chk_lock+0xa0>
 800e9ae:	4a09      	ldr	r2, [pc, #36]	; (800e9d4 <chk_lock+0xb4>)
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	011b      	lsls	r3, r3, #4
 800e9b4:	4413      	add	r3, r2
 800e9b6:	330c      	adds	r3, #12
 800e9b8:	881b      	ldrh	r3, [r3, #0]
 800e9ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9be:	d101      	bne.n	800e9c4 <chk_lock+0xa4>
 800e9c0:	2310      	movs	r3, #16
 800e9c2:	e000      	b.n	800e9c6 <chk_lock+0xa6>
 800e9c4:	2300      	movs	r3, #0
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	3714      	adds	r7, #20
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr
 800e9d2:	bf00      	nop
 800e9d4:	20004148 	.word	0x20004148

0800e9d8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b083      	sub	sp, #12
 800e9dc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	607b      	str	r3, [r7, #4]
 800e9e2:	e002      	b.n	800e9ea <enq_lock+0x12>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	607b      	str	r3, [r7, #4]
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2b01      	cmp	r3, #1
 800e9ee:	d806      	bhi.n	800e9fe <enq_lock+0x26>
 800e9f0:	4a09      	ldr	r2, [pc, #36]	; (800ea18 <enq_lock+0x40>)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	011b      	lsls	r3, r3, #4
 800e9f6:	4413      	add	r3, r2
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d1f2      	bne.n	800e9e4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2b02      	cmp	r3, #2
 800ea02:	bf14      	ite	ne
 800ea04:	2301      	movne	r3, #1
 800ea06:	2300      	moveq	r3, #0
 800ea08:	b2db      	uxtb	r3, r3
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	370c      	adds	r7, #12
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea14:	4770      	bx	lr
 800ea16:	bf00      	nop
 800ea18:	20004148 	.word	0x20004148

0800ea1c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b085      	sub	sp, #20
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ea26:	2300      	movs	r3, #0
 800ea28:	60fb      	str	r3, [r7, #12]
 800ea2a:	e01f      	b.n	800ea6c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ea2c:	4a41      	ldr	r2, [pc, #260]	; (800eb34 <inc_lock+0x118>)
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	011b      	lsls	r3, r3, #4
 800ea32:	4413      	add	r3, r2
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d113      	bne.n	800ea66 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ea3e:	4a3d      	ldr	r2, [pc, #244]	; (800eb34 <inc_lock+0x118>)
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	011b      	lsls	r3, r3, #4
 800ea44:	4413      	add	r3, r2
 800ea46:	3304      	adds	r3, #4
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	d109      	bne.n	800ea66 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ea52:	4a38      	ldr	r2, [pc, #224]	; (800eb34 <inc_lock+0x118>)
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	011b      	lsls	r3, r3, #4
 800ea58:	4413      	add	r3, r2
 800ea5a:	3308      	adds	r3, #8
 800ea5c:	681a      	ldr	r2, [r3, #0]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d006      	beq.n	800ea74 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	3301      	adds	r3, #1
 800ea6a:	60fb      	str	r3, [r7, #12]
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	2b01      	cmp	r3, #1
 800ea70:	d9dc      	bls.n	800ea2c <inc_lock+0x10>
 800ea72:	e000      	b.n	800ea76 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ea74:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	2b02      	cmp	r3, #2
 800ea7a:	d132      	bne.n	800eae2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	60fb      	str	r3, [r7, #12]
 800ea80:	e002      	b.n	800ea88 <inc_lock+0x6c>
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	3301      	adds	r3, #1
 800ea86:	60fb      	str	r3, [r7, #12]
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	2b01      	cmp	r3, #1
 800ea8c:	d806      	bhi.n	800ea9c <inc_lock+0x80>
 800ea8e:	4a29      	ldr	r2, [pc, #164]	; (800eb34 <inc_lock+0x118>)
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	011b      	lsls	r3, r3, #4
 800ea94:	4413      	add	r3, r2
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d1f2      	bne.n	800ea82 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	2b02      	cmp	r3, #2
 800eaa0:	d101      	bne.n	800eaa6 <inc_lock+0x8a>
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	e040      	b.n	800eb28 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681a      	ldr	r2, [r3, #0]
 800eaaa:	4922      	ldr	r1, [pc, #136]	; (800eb34 <inc_lock+0x118>)
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	011b      	lsls	r3, r3, #4
 800eab0:	440b      	add	r3, r1
 800eab2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	689a      	ldr	r2, [r3, #8]
 800eab8:	491e      	ldr	r1, [pc, #120]	; (800eb34 <inc_lock+0x118>)
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	011b      	lsls	r3, r3, #4
 800eabe:	440b      	add	r3, r1
 800eac0:	3304      	adds	r3, #4
 800eac2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	695a      	ldr	r2, [r3, #20]
 800eac8:	491a      	ldr	r1, [pc, #104]	; (800eb34 <inc_lock+0x118>)
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	011b      	lsls	r3, r3, #4
 800eace:	440b      	add	r3, r1
 800ead0:	3308      	adds	r3, #8
 800ead2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ead4:	4a17      	ldr	r2, [pc, #92]	; (800eb34 <inc_lock+0x118>)
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	011b      	lsls	r3, r3, #4
 800eada:	4413      	add	r3, r2
 800eadc:	330c      	adds	r3, #12
 800eade:	2200      	movs	r2, #0
 800eae0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d009      	beq.n	800eafc <inc_lock+0xe0>
 800eae8:	4a12      	ldr	r2, [pc, #72]	; (800eb34 <inc_lock+0x118>)
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	011b      	lsls	r3, r3, #4
 800eaee:	4413      	add	r3, r2
 800eaf0:	330c      	adds	r3, #12
 800eaf2:	881b      	ldrh	r3, [r3, #0]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d001      	beq.n	800eafc <inc_lock+0xe0>
 800eaf8:	2300      	movs	r3, #0
 800eafa:	e015      	b.n	800eb28 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d108      	bne.n	800eb14 <inc_lock+0xf8>
 800eb02:	4a0c      	ldr	r2, [pc, #48]	; (800eb34 <inc_lock+0x118>)
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	011b      	lsls	r3, r3, #4
 800eb08:	4413      	add	r3, r2
 800eb0a:	330c      	adds	r3, #12
 800eb0c:	881b      	ldrh	r3, [r3, #0]
 800eb0e:	3301      	adds	r3, #1
 800eb10:	b29a      	uxth	r2, r3
 800eb12:	e001      	b.n	800eb18 <inc_lock+0xfc>
 800eb14:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eb18:	4906      	ldr	r1, [pc, #24]	; (800eb34 <inc_lock+0x118>)
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	011b      	lsls	r3, r3, #4
 800eb1e:	440b      	add	r3, r1
 800eb20:	330c      	adds	r3, #12
 800eb22:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	3301      	adds	r3, #1
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3714      	adds	r7, #20
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr
 800eb34:	20004148 	.word	0x20004148

0800eb38 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b085      	sub	sp, #20
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	3b01      	subs	r3, #1
 800eb44:	607b      	str	r3, [r7, #4]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2b01      	cmp	r3, #1
 800eb4a:	d825      	bhi.n	800eb98 <dec_lock+0x60>
		n = Files[i].ctr;
 800eb4c:	4a17      	ldr	r2, [pc, #92]	; (800ebac <dec_lock+0x74>)
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	011b      	lsls	r3, r3, #4
 800eb52:	4413      	add	r3, r2
 800eb54:	330c      	adds	r3, #12
 800eb56:	881b      	ldrh	r3, [r3, #0]
 800eb58:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800eb5a:	89fb      	ldrh	r3, [r7, #14]
 800eb5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb60:	d101      	bne.n	800eb66 <dec_lock+0x2e>
 800eb62:	2300      	movs	r3, #0
 800eb64:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800eb66:	89fb      	ldrh	r3, [r7, #14]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d002      	beq.n	800eb72 <dec_lock+0x3a>
 800eb6c:	89fb      	ldrh	r3, [r7, #14]
 800eb6e:	3b01      	subs	r3, #1
 800eb70:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800eb72:	4a0e      	ldr	r2, [pc, #56]	; (800ebac <dec_lock+0x74>)
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	011b      	lsls	r3, r3, #4
 800eb78:	4413      	add	r3, r2
 800eb7a:	330c      	adds	r3, #12
 800eb7c:	89fa      	ldrh	r2, [r7, #14]
 800eb7e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800eb80:	89fb      	ldrh	r3, [r7, #14]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d105      	bne.n	800eb92 <dec_lock+0x5a>
 800eb86:	4a09      	ldr	r2, [pc, #36]	; (800ebac <dec_lock+0x74>)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	011b      	lsls	r3, r3, #4
 800eb8c:	4413      	add	r3, r2
 800eb8e:	2200      	movs	r2, #0
 800eb90:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800eb92:	2300      	movs	r3, #0
 800eb94:	737b      	strb	r3, [r7, #13]
 800eb96:	e001      	b.n	800eb9c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800eb98:	2302      	movs	r3, #2
 800eb9a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800eb9c:	7b7b      	ldrb	r3, [r7, #13]
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3714      	adds	r7, #20
 800eba2:	46bd      	mov	sp, r7
 800eba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba8:	4770      	bx	lr
 800ebaa:	bf00      	nop
 800ebac:	20004148 	.word	0x20004148

0800ebb0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b085      	sub	sp, #20
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ebb8:	2300      	movs	r3, #0
 800ebba:	60fb      	str	r3, [r7, #12]
 800ebbc:	e010      	b.n	800ebe0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ebbe:	4a0d      	ldr	r2, [pc, #52]	; (800ebf4 <clear_lock+0x44>)
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	011b      	lsls	r3, r3, #4
 800ebc4:	4413      	add	r3, r2
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	687a      	ldr	r2, [r7, #4]
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d105      	bne.n	800ebda <clear_lock+0x2a>
 800ebce:	4a09      	ldr	r2, [pc, #36]	; (800ebf4 <clear_lock+0x44>)
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	011b      	lsls	r3, r3, #4
 800ebd4:	4413      	add	r3, r2
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	3301      	adds	r3, #1
 800ebde:	60fb      	str	r3, [r7, #12]
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2b01      	cmp	r3, #1
 800ebe4:	d9eb      	bls.n	800ebbe <clear_lock+0xe>
	}
}
 800ebe6:	bf00      	nop
 800ebe8:	bf00      	nop
 800ebea:	3714      	adds	r7, #20
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr
 800ebf4:	20004148 	.word	0x20004148

0800ebf8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b086      	sub	sp, #24
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ec00:	2300      	movs	r3, #0
 800ec02:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	78db      	ldrb	r3, [r3, #3]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d034      	beq.n	800ec76 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec10:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	7858      	ldrb	r0, [r3, #1]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	697a      	ldr	r2, [r7, #20]
 800ec20:	f7ff fd40 	bl	800e6a4 <disk_write>
 800ec24:	4603      	mov	r3, r0
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d002      	beq.n	800ec30 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	73fb      	strb	r3, [r7, #15]
 800ec2e:	e022      	b.n	800ec76 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2200      	movs	r2, #0
 800ec34:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6a1b      	ldr	r3, [r3, #32]
 800ec3a:	697a      	ldr	r2, [r7, #20]
 800ec3c:	1ad2      	subs	r2, r2, r3
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	699b      	ldr	r3, [r3, #24]
 800ec42:	429a      	cmp	r2, r3
 800ec44:	d217      	bcs.n	800ec76 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	789b      	ldrb	r3, [r3, #2]
 800ec4a:	613b      	str	r3, [r7, #16]
 800ec4c:	e010      	b.n	800ec70 <sync_window+0x78>
					wsect += fs->fsize;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	699b      	ldr	r3, [r3, #24]
 800ec52:	697a      	ldr	r2, [r7, #20]
 800ec54:	4413      	add	r3, r2
 800ec56:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	7858      	ldrb	r0, [r3, #1]
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ec62:	2301      	movs	r3, #1
 800ec64:	697a      	ldr	r2, [r7, #20]
 800ec66:	f7ff fd1d 	bl	800e6a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	3b01      	subs	r3, #1
 800ec6e:	613b      	str	r3, [r7, #16]
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d8eb      	bhi.n	800ec4e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ec76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3718      	adds	r7, #24
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}

0800ec80 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b084      	sub	sp, #16
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec92:	683a      	ldr	r2, [r7, #0]
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d01b      	beq.n	800ecd0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f7ff ffad 	bl	800ebf8 <sync_window>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800eca2:	7bfb      	ldrb	r3, [r7, #15]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d113      	bne.n	800ecd0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	7858      	ldrb	r0, [r3, #1]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	683a      	ldr	r2, [r7, #0]
 800ecb6:	f7ff fcd5 	bl	800e664 <disk_read>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d004      	beq.n	800ecca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ecc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ecc4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	683a      	ldr	r2, [r7, #0]
 800ecce:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800ecd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3710      	adds	r7, #16
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
	...

0800ecdc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b084      	sub	sp, #16
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f7ff ff87 	bl	800ebf8 <sync_window>
 800ecea:	4603      	mov	r3, r0
 800ecec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ecee:	7bfb      	ldrb	r3, [r7, #15]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d158      	bne.n	800eda6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	781b      	ldrb	r3, [r3, #0]
 800ecf8:	2b03      	cmp	r3, #3
 800ecfa:	d148      	bne.n	800ed8e <sync_fs+0xb2>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	791b      	ldrb	r3, [r3, #4]
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	d144      	bne.n	800ed8e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	3330      	adds	r3, #48	; 0x30
 800ed08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ed0c:	2100      	movs	r1, #0
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f7ff fda9 	bl	800e866 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	3330      	adds	r3, #48	; 0x30
 800ed18:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ed1c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7ff fd38 	bl	800e796 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	3330      	adds	r3, #48	; 0x30
 800ed2a:	4921      	ldr	r1, [pc, #132]	; (800edb0 <sync_fs+0xd4>)
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f7ff fd4d 	bl	800e7cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	3330      	adds	r3, #48	; 0x30
 800ed36:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ed3a:	491e      	ldr	r1, [pc, #120]	; (800edb4 <sync_fs+0xd8>)
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f7ff fd45 	bl	800e7cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	3330      	adds	r3, #48	; 0x30
 800ed46:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	691b      	ldr	r3, [r3, #16]
 800ed4e:	4619      	mov	r1, r3
 800ed50:	4610      	mov	r0, r2
 800ed52:	f7ff fd3b 	bl	800e7cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	3330      	adds	r3, #48	; 0x30
 800ed5a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	68db      	ldr	r3, [r3, #12]
 800ed62:	4619      	mov	r1, r3
 800ed64:	4610      	mov	r0, r2
 800ed66:	f7ff fd31 	bl	800e7cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	69db      	ldr	r3, [r3, #28]
 800ed6e:	1c5a      	adds	r2, r3, #1
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	7858      	ldrb	r0, [r3, #1]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed82:	2301      	movs	r3, #1
 800ed84:	f7ff fc8e 	bl	800e6a4 <disk_write>
			fs->fsi_flag = 0;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	785b      	ldrb	r3, [r3, #1]
 800ed92:	2200      	movs	r2, #0
 800ed94:	2100      	movs	r1, #0
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7ff fca4 	bl	800e6e4 <disk_ioctl>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d001      	beq.n	800eda6 <sync_fs+0xca>
 800eda2:	2301      	movs	r3, #1
 800eda4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800eda6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3710      	adds	r7, #16
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}
 800edb0:	41615252 	.word	0x41615252
 800edb4:	61417272 	.word	0x61417272

0800edb8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800edb8:	b480      	push	{r7}
 800edba:	b083      	sub	sp, #12
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	3b02      	subs	r3, #2
 800edc6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	695b      	ldr	r3, [r3, #20]
 800edcc:	3b02      	subs	r3, #2
 800edce:	683a      	ldr	r2, [r7, #0]
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d301      	bcc.n	800edd8 <clust2sect+0x20>
 800edd4:	2300      	movs	r3, #0
 800edd6:	e008      	b.n	800edea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	895b      	ldrh	r3, [r3, #10]
 800eddc:	461a      	mov	r2, r3
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	fb03 f202 	mul.w	r2, r3, r2
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ede8:	4413      	add	r3, r2
}
 800edea:	4618      	mov	r0, r3
 800edec:	370c      	adds	r7, #12
 800edee:	46bd      	mov	sp, r7
 800edf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf4:	4770      	bx	lr

0800edf6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800edf6:	b580      	push	{r7, lr}
 800edf8:	b086      	sub	sp, #24
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	6078      	str	r0, [r7, #4]
 800edfe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	2b01      	cmp	r3, #1
 800ee0a:	d904      	bls.n	800ee16 <get_fat+0x20>
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	695b      	ldr	r3, [r3, #20]
 800ee10:	683a      	ldr	r2, [r7, #0]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d302      	bcc.n	800ee1c <get_fat+0x26>
		val = 1;	/* Internal error */
 800ee16:	2301      	movs	r3, #1
 800ee18:	617b      	str	r3, [r7, #20]
 800ee1a:	e091      	b.n	800ef40 <get_fat+0x14a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ee1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee20:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	781b      	ldrb	r3, [r3, #0]
 800ee26:	2b03      	cmp	r3, #3
 800ee28:	d063      	beq.n	800eef2 <get_fat+0xfc>
 800ee2a:	2b03      	cmp	r3, #3
 800ee2c:	dc7e      	bgt.n	800ef2c <get_fat+0x136>
 800ee2e:	2b01      	cmp	r3, #1
 800ee30:	d002      	beq.n	800ee38 <get_fat+0x42>
 800ee32:	2b02      	cmp	r3, #2
 800ee34:	d042      	beq.n	800eebc <get_fat+0xc6>
 800ee36:	e079      	b.n	800ef2c <get_fat+0x136>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	60fb      	str	r3, [r7, #12]
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	085b      	lsrs	r3, r3, #1
 800ee40:	68fa      	ldr	r2, [r7, #12]
 800ee42:	4413      	add	r3, r2
 800ee44:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	6a1a      	ldr	r2, [r3, #32]
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	0b1b      	lsrs	r3, r3, #12
 800ee4e:	4413      	add	r3, r2
 800ee50:	4619      	mov	r1, r3
 800ee52:	6938      	ldr	r0, [r7, #16]
 800ee54:	f7ff ff14 	bl	800ec80 <move_window>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d169      	bne.n	800ef32 <get_fat+0x13c>
			wc = fs->win[bc++ % SS(fs)];
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	1c5a      	adds	r2, r3, #1
 800ee62:	60fa      	str	r2, [r7, #12]
 800ee64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ee68:	693a      	ldr	r2, [r7, #16]
 800ee6a:	4413      	add	r3, r2
 800ee6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ee70:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	6a1a      	ldr	r2, [r3, #32]
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	0b1b      	lsrs	r3, r3, #12
 800ee7a:	4413      	add	r3, r2
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	6938      	ldr	r0, [r7, #16]
 800ee80:	f7ff fefe 	bl	800ec80 <move_window>
 800ee84:	4603      	mov	r3, r0
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d155      	bne.n	800ef36 <get_fat+0x140>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ee90:	693a      	ldr	r2, [r7, #16]
 800ee92:	4413      	add	r3, r2
 800ee94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ee98:	021b      	lsls	r3, r3, #8
 800ee9a:	461a      	mov	r2, r3
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	4313      	orrs	r3, r2
 800eea0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	f003 0301 	and.w	r3, r3, #1
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d002      	beq.n	800eeb2 <get_fat+0xbc>
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	091b      	lsrs	r3, r3, #4
 800eeb0:	e002      	b.n	800eeb8 <get_fat+0xc2>
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eeb8:	617b      	str	r3, [r7, #20]
			break;
 800eeba:	e041      	b.n	800ef40 <get_fat+0x14a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	6a1a      	ldr	r2, [r3, #32]
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	0adb      	lsrs	r3, r3, #11
 800eec4:	4413      	add	r3, r2
 800eec6:	4619      	mov	r1, r3
 800eec8:	6938      	ldr	r0, [r7, #16]
 800eeca:	f7ff fed9 	bl	800ec80 <move_window>
 800eece:	4603      	mov	r3, r0
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d132      	bne.n	800ef3a <get_fat+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800eed4:	693b      	ldr	r3, [r7, #16]
 800eed6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	0059      	lsls	r1, r3, #1
 800eede:	f640 73fe 	movw	r3, #4094	; 0xffe
 800eee2:	400b      	ands	r3, r1
 800eee4:	4413      	add	r3, r2
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7ff fc1a 	bl	800e720 <ld_word>
 800eeec:	4603      	mov	r3, r0
 800eeee:	617b      	str	r3, [r7, #20]
			break;
 800eef0:	e026      	b.n	800ef40 <get_fat+0x14a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	6a1a      	ldr	r2, [r3, #32]
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	0a9b      	lsrs	r3, r3, #10
 800eefa:	4413      	add	r3, r2
 800eefc:	4619      	mov	r1, r3
 800eefe:	6938      	ldr	r0, [r7, #16]
 800ef00:	f7ff febe 	bl	800ec80 <move_window>
 800ef04:	4603      	mov	r3, r0
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d119      	bne.n	800ef3e <get_fat+0x148>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	0099      	lsls	r1, r3, #2
 800ef14:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ef18:	400b      	ands	r3, r1
 800ef1a:	4413      	add	r3, r2
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7ff fc17 	bl	800e750 <ld_dword>
 800ef22:	4603      	mov	r3, r0
 800ef24:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ef28:	617b      	str	r3, [r7, #20]
			break;
 800ef2a:	e009      	b.n	800ef40 <get_fat+0x14a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	617b      	str	r3, [r7, #20]
 800ef30:	e006      	b.n	800ef40 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ef32:	bf00      	nop
 800ef34:	e004      	b.n	800ef40 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ef36:	bf00      	nop
 800ef38:	e002      	b.n	800ef40 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ef3a:	bf00      	nop
 800ef3c:	e000      	b.n	800ef40 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ef3e:	bf00      	nop
		}
	}

	return val;
 800ef40:	697b      	ldr	r3, [r7, #20]
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3718      	adds	r7, #24
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}

0800ef4a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ef4a:	b590      	push	{r4, r7, lr}
 800ef4c:	b089      	sub	sp, #36	; 0x24
 800ef4e:	af00      	add	r7, sp, #0
 800ef50:	60f8      	str	r0, [r7, #12]
 800ef52:	60b9      	str	r1, [r7, #8]
 800ef54:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ef56:	2302      	movs	r3, #2
 800ef58:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	2b01      	cmp	r3, #1
 800ef5e:	f240 80d5 	bls.w	800f10c <put_fat+0x1c2>
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	695b      	ldr	r3, [r3, #20]
 800ef66:	68ba      	ldr	r2, [r7, #8]
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	f080 80cf 	bcs.w	800f10c <put_fat+0x1c2>
		switch (fs->fs_type) {
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	2b03      	cmp	r3, #3
 800ef74:	f000 8097 	beq.w	800f0a6 <put_fat+0x15c>
 800ef78:	2b03      	cmp	r3, #3
 800ef7a:	f300 80d0 	bgt.w	800f11e <put_fat+0x1d4>
 800ef7e:	2b01      	cmp	r3, #1
 800ef80:	d002      	beq.n	800ef88 <put_fat+0x3e>
 800ef82:	2b02      	cmp	r3, #2
 800ef84:	d06e      	beq.n	800f064 <put_fat+0x11a>
 800ef86:	e0ca      	b.n	800f11e <put_fat+0x1d4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	61bb      	str	r3, [r7, #24]
 800ef8c:	69bb      	ldr	r3, [r7, #24]
 800ef8e:	085b      	lsrs	r3, r3, #1
 800ef90:	69ba      	ldr	r2, [r7, #24]
 800ef92:	4413      	add	r3, r2
 800ef94:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	6a1a      	ldr	r2, [r3, #32]
 800ef9a:	69bb      	ldr	r3, [r7, #24]
 800ef9c:	0b1b      	lsrs	r3, r3, #12
 800ef9e:	4413      	add	r3, r2
 800efa0:	4619      	mov	r1, r3
 800efa2:	68f8      	ldr	r0, [r7, #12]
 800efa4:	f7ff fe6c 	bl	800ec80 <move_window>
 800efa8:	4603      	mov	r3, r0
 800efaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800efac:	7ffb      	ldrb	r3, [r7, #31]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	f040 80ae 	bne.w	800f110 <put_fat+0x1c6>
			p = fs->win + bc++ % SS(fs);
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800efba:	69bb      	ldr	r3, [r7, #24]
 800efbc:	1c59      	adds	r1, r3, #1
 800efbe:	61b9      	str	r1, [r7, #24]
 800efc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800efc4:	4413      	add	r3, r2
 800efc6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	f003 0301 	and.w	r3, r3, #1
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d00d      	beq.n	800efee <put_fat+0xa4>
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	781b      	ldrb	r3, [r3, #0]
 800efd6:	b25b      	sxtb	r3, r3
 800efd8:	f003 030f 	and.w	r3, r3, #15
 800efdc:	b25a      	sxtb	r2, r3
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	b2db      	uxtb	r3, r3
 800efe2:	011b      	lsls	r3, r3, #4
 800efe4:	b25b      	sxtb	r3, r3
 800efe6:	4313      	orrs	r3, r2
 800efe8:	b25b      	sxtb	r3, r3
 800efea:	b2db      	uxtb	r3, r3
 800efec:	e001      	b.n	800eff2 <put_fat+0xa8>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	b2db      	uxtb	r3, r3
 800eff2:	697a      	ldr	r2, [r7, #20]
 800eff4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	2201      	movs	r2, #1
 800effa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	6a1a      	ldr	r2, [r3, #32]
 800f000:	69bb      	ldr	r3, [r7, #24]
 800f002:	0b1b      	lsrs	r3, r3, #12
 800f004:	4413      	add	r3, r2
 800f006:	4619      	mov	r1, r3
 800f008:	68f8      	ldr	r0, [r7, #12]
 800f00a:	f7ff fe39 	bl	800ec80 <move_window>
 800f00e:	4603      	mov	r3, r0
 800f010:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f012:	7ffb      	ldrb	r3, [r7, #31]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d17d      	bne.n	800f114 <put_fat+0x1ca>
			p = fs->win + bc % SS(fs);
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f01e:	69bb      	ldr	r3, [r7, #24]
 800f020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f024:	4413      	add	r3, r2
 800f026:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	f003 0301 	and.w	r3, r3, #1
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d003      	beq.n	800f03a <put_fat+0xf0>
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	091b      	lsrs	r3, r3, #4
 800f036:	b2db      	uxtb	r3, r3
 800f038:	e00e      	b.n	800f058 <put_fat+0x10e>
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	b25b      	sxtb	r3, r3
 800f040:	f023 030f 	bic.w	r3, r3, #15
 800f044:	b25a      	sxtb	r2, r3
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	0a1b      	lsrs	r3, r3, #8
 800f04a:	b25b      	sxtb	r3, r3
 800f04c:	f003 030f 	and.w	r3, r3, #15
 800f050:	b25b      	sxtb	r3, r3
 800f052:	4313      	orrs	r3, r2
 800f054:	b25b      	sxtb	r3, r3
 800f056:	b2db      	uxtb	r3, r3
 800f058:	697a      	ldr	r2, [r7, #20]
 800f05a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	2201      	movs	r2, #1
 800f060:	70da      	strb	r2, [r3, #3]
			break;
 800f062:	e05c      	b.n	800f11e <put_fat+0x1d4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	6a1a      	ldr	r2, [r3, #32]
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	0adb      	lsrs	r3, r3, #11
 800f06c:	4413      	add	r3, r2
 800f06e:	4619      	mov	r1, r3
 800f070:	68f8      	ldr	r0, [r7, #12]
 800f072:	f7ff fe05 	bl	800ec80 <move_window>
 800f076:	4603      	mov	r3, r0
 800f078:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f07a:	7ffb      	ldrb	r3, [r7, #31]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d14b      	bne.n	800f118 <put_fat+0x1ce>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	0059      	lsls	r1, r3, #1
 800f08a:	f640 73fe 	movw	r3, #4094	; 0xffe
 800f08e:	400b      	ands	r3, r1
 800f090:	4413      	add	r3, r2
 800f092:	687a      	ldr	r2, [r7, #4]
 800f094:	b292      	uxth	r2, r2
 800f096:	4611      	mov	r1, r2
 800f098:	4618      	mov	r0, r3
 800f09a:	f7ff fb7c 	bl	800e796 <st_word>
			fs->wflag = 1;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	2201      	movs	r2, #1
 800f0a2:	70da      	strb	r2, [r3, #3]
			break;
 800f0a4:	e03b      	b.n	800f11e <put_fat+0x1d4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	6a1a      	ldr	r2, [r3, #32]
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	0a9b      	lsrs	r3, r3, #10
 800f0ae:	4413      	add	r3, r2
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	68f8      	ldr	r0, [r7, #12]
 800f0b4:	f7ff fde4 	bl	800ec80 <move_window>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f0bc:	7ffb      	ldrb	r3, [r7, #31]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d12c      	bne.n	800f11c <put_fat+0x1d2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	0099      	lsls	r1, r3, #2
 800f0d2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800f0d6:	400b      	ands	r3, r1
 800f0d8:	4413      	add	r3, r2
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7ff fb38 	bl	800e750 <ld_dword>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f0e6:	4323      	orrs	r3, r4
 800f0e8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	0099      	lsls	r1, r3, #2
 800f0f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 800f0f8:	400b      	ands	r3, r1
 800f0fa:	4413      	add	r3, r2
 800f0fc:	6879      	ldr	r1, [r7, #4]
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7ff fb64 	bl	800e7cc <st_dword>
			fs->wflag = 1;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	2201      	movs	r2, #1
 800f108:	70da      	strb	r2, [r3, #3]
			break;
 800f10a:	e008      	b.n	800f11e <put_fat+0x1d4>
		}
	}
 800f10c:	bf00      	nop
 800f10e:	e006      	b.n	800f11e <put_fat+0x1d4>
			if (res != FR_OK) break;
 800f110:	bf00      	nop
 800f112:	e004      	b.n	800f11e <put_fat+0x1d4>
			if (res != FR_OK) break;
 800f114:	bf00      	nop
 800f116:	e002      	b.n	800f11e <put_fat+0x1d4>
			if (res != FR_OK) break;
 800f118:	bf00      	nop
 800f11a:	e000      	b.n	800f11e <put_fat+0x1d4>
			if (res != FR_OK) break;
 800f11c:	bf00      	nop
	return res;
 800f11e:	7ffb      	ldrb	r3, [r7, #31]
}
 800f120:	4618      	mov	r0, r3
 800f122:	3724      	adds	r7, #36	; 0x24
 800f124:	46bd      	mov	sp, r7
 800f126:	bd90      	pop	{r4, r7, pc}

0800f128 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b088      	sub	sp, #32
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	60f8      	str	r0, [r7, #12]
 800f130:	60b9      	str	r1, [r7, #8]
 800f132:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f134:	2300      	movs	r3, #0
 800f136:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	2b01      	cmp	r3, #1
 800f142:	d904      	bls.n	800f14e <remove_chain+0x26>
 800f144:	69bb      	ldr	r3, [r7, #24]
 800f146:	695b      	ldr	r3, [r3, #20]
 800f148:	68ba      	ldr	r2, [r7, #8]
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d301      	bcc.n	800f152 <remove_chain+0x2a>
 800f14e:	2302      	movs	r3, #2
 800f150:	e04b      	b.n	800f1ea <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d00c      	beq.n	800f172 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f158:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f15c:	6879      	ldr	r1, [r7, #4]
 800f15e:	69b8      	ldr	r0, [r7, #24]
 800f160:	f7ff fef3 	bl	800ef4a <put_fat>
 800f164:	4603      	mov	r3, r0
 800f166:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f168:	7ffb      	ldrb	r3, [r7, #31]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d001      	beq.n	800f172 <remove_chain+0x4a>
 800f16e:	7ffb      	ldrb	r3, [r7, #31]
 800f170:	e03b      	b.n	800f1ea <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f172:	68b9      	ldr	r1, [r7, #8]
 800f174:	68f8      	ldr	r0, [r7, #12]
 800f176:	f7ff fe3e 	bl	800edf6 <get_fat>
 800f17a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d031      	beq.n	800f1e6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	2b01      	cmp	r3, #1
 800f186:	d101      	bne.n	800f18c <remove_chain+0x64>
 800f188:	2302      	movs	r3, #2
 800f18a:	e02e      	b.n	800f1ea <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f192:	d101      	bne.n	800f198 <remove_chain+0x70>
 800f194:	2301      	movs	r3, #1
 800f196:	e028      	b.n	800f1ea <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f198:	2200      	movs	r2, #0
 800f19a:	68b9      	ldr	r1, [r7, #8]
 800f19c:	69b8      	ldr	r0, [r7, #24]
 800f19e:	f7ff fed4 	bl	800ef4a <put_fat>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f1a6:	7ffb      	ldrb	r3, [r7, #31]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d001      	beq.n	800f1b0 <remove_chain+0x88>
 800f1ac:	7ffb      	ldrb	r3, [r7, #31]
 800f1ae:	e01c      	b.n	800f1ea <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f1b0:	69bb      	ldr	r3, [r7, #24]
 800f1b2:	691a      	ldr	r2, [r3, #16]
 800f1b4:	69bb      	ldr	r3, [r7, #24]
 800f1b6:	695b      	ldr	r3, [r3, #20]
 800f1b8:	3b02      	subs	r3, #2
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d20b      	bcs.n	800f1d6 <remove_chain+0xae>
			fs->free_clst++;
 800f1be:	69bb      	ldr	r3, [r7, #24]
 800f1c0:	691b      	ldr	r3, [r3, #16]
 800f1c2:	1c5a      	adds	r2, r3, #1
 800f1c4:	69bb      	ldr	r3, [r7, #24]
 800f1c6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800f1c8:	69bb      	ldr	r3, [r7, #24]
 800f1ca:	791b      	ldrb	r3, [r3, #4]
 800f1cc:	f043 0301 	orr.w	r3, r3, #1
 800f1d0:	b2da      	uxtb	r2, r3
 800f1d2:	69bb      	ldr	r3, [r7, #24]
 800f1d4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f1da:	69bb      	ldr	r3, [r7, #24]
 800f1dc:	695b      	ldr	r3, [r3, #20]
 800f1de:	68ba      	ldr	r2, [r7, #8]
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d3c6      	bcc.n	800f172 <remove_chain+0x4a>
 800f1e4:	e000      	b.n	800f1e8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f1e6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f1e8:	2300      	movs	r3, #0
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3720      	adds	r7, #32
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}

0800f1f2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f1f2:	b580      	push	{r7, lr}
 800f1f4:	b088      	sub	sp, #32
 800f1f6:	af00      	add	r7, sp, #0
 800f1f8:	6078      	str	r0, [r7, #4]
 800f1fa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d10d      	bne.n	800f224 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f208:	693b      	ldr	r3, [r7, #16]
 800f20a:	68db      	ldr	r3, [r3, #12]
 800f20c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f20e:	69bb      	ldr	r3, [r7, #24]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d004      	beq.n	800f21e <create_chain+0x2c>
 800f214:	693b      	ldr	r3, [r7, #16]
 800f216:	695b      	ldr	r3, [r3, #20]
 800f218:	69ba      	ldr	r2, [r7, #24]
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d31b      	bcc.n	800f256 <create_chain+0x64>
 800f21e:	2301      	movs	r3, #1
 800f220:	61bb      	str	r3, [r7, #24]
 800f222:	e018      	b.n	800f256 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f224:	6839      	ldr	r1, [r7, #0]
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f7ff fde5 	bl	800edf6 <get_fat>
 800f22c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	2b01      	cmp	r3, #1
 800f232:	d801      	bhi.n	800f238 <create_chain+0x46>
 800f234:	2301      	movs	r3, #1
 800f236:	e070      	b.n	800f31a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f23e:	d101      	bne.n	800f244 <create_chain+0x52>
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	e06a      	b.n	800f31a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	695b      	ldr	r3, [r3, #20]
 800f248:	68fa      	ldr	r2, [r7, #12]
 800f24a:	429a      	cmp	r2, r3
 800f24c:	d201      	bcs.n	800f252 <create_chain+0x60>
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	e063      	b.n	800f31a <create_chain+0x128>
		scl = clst;
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f256:	69bb      	ldr	r3, [r7, #24]
 800f258:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f25a:	69fb      	ldr	r3, [r7, #28]
 800f25c:	3301      	adds	r3, #1
 800f25e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	695b      	ldr	r3, [r3, #20]
 800f264:	69fa      	ldr	r2, [r7, #28]
 800f266:	429a      	cmp	r2, r3
 800f268:	d307      	bcc.n	800f27a <create_chain+0x88>
				ncl = 2;
 800f26a:	2302      	movs	r3, #2
 800f26c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f26e:	69fa      	ldr	r2, [r7, #28]
 800f270:	69bb      	ldr	r3, [r7, #24]
 800f272:	429a      	cmp	r2, r3
 800f274:	d901      	bls.n	800f27a <create_chain+0x88>
 800f276:	2300      	movs	r3, #0
 800f278:	e04f      	b.n	800f31a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f27a:	69f9      	ldr	r1, [r7, #28]
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f7ff fdba 	bl	800edf6 <get_fat>
 800f282:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d00e      	beq.n	800f2a8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	2b01      	cmp	r3, #1
 800f28e:	d003      	beq.n	800f298 <create_chain+0xa6>
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f296:	d101      	bne.n	800f29c <create_chain+0xaa>
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	e03e      	b.n	800f31a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f29c:	69fa      	ldr	r2, [r7, #28]
 800f29e:	69bb      	ldr	r3, [r7, #24]
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	d1da      	bne.n	800f25a <create_chain+0x68>
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	e038      	b.n	800f31a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f2a8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f2aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f2ae:	69f9      	ldr	r1, [r7, #28]
 800f2b0:	6938      	ldr	r0, [r7, #16]
 800f2b2:	f7ff fe4a 	bl	800ef4a <put_fat>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f2ba:	7dfb      	ldrb	r3, [r7, #23]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d109      	bne.n	800f2d4 <create_chain+0xe2>
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d006      	beq.n	800f2d4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f2c6:	69fa      	ldr	r2, [r7, #28]
 800f2c8:	6839      	ldr	r1, [r7, #0]
 800f2ca:	6938      	ldr	r0, [r7, #16]
 800f2cc:	f7ff fe3d 	bl	800ef4a <put_fat>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f2d4:	7dfb      	ldrb	r3, [r7, #23]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d116      	bne.n	800f308 <create_chain+0x116>
		fs->last_clst = ncl;
 800f2da:	693b      	ldr	r3, [r7, #16]
 800f2dc:	69fa      	ldr	r2, [r7, #28]
 800f2de:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f2e0:	693b      	ldr	r3, [r7, #16]
 800f2e2:	691a      	ldr	r2, [r3, #16]
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	695b      	ldr	r3, [r3, #20]
 800f2e8:	3b02      	subs	r3, #2
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d804      	bhi.n	800f2f8 <create_chain+0x106>
 800f2ee:	693b      	ldr	r3, [r7, #16]
 800f2f0:	691b      	ldr	r3, [r3, #16]
 800f2f2:	1e5a      	subs	r2, r3, #1
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	791b      	ldrb	r3, [r3, #4]
 800f2fc:	f043 0301 	orr.w	r3, r3, #1
 800f300:	b2da      	uxtb	r2, r3
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	711a      	strb	r2, [r3, #4]
 800f306:	e007      	b.n	800f318 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f308:	7dfb      	ldrb	r3, [r7, #23]
 800f30a:	2b01      	cmp	r3, #1
 800f30c:	d102      	bne.n	800f314 <create_chain+0x122>
 800f30e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f312:	e000      	b.n	800f316 <create_chain+0x124>
 800f314:	2301      	movs	r3, #1
 800f316:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f318:	69fb      	ldr	r3, [r7, #28]
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3720      	adds	r7, #32
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}

0800f322 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f322:	b480      	push	{r7}
 800f324:	b087      	sub	sp, #28
 800f326:	af00      	add	r7, sp, #0
 800f328:	6078      	str	r0, [r7, #4]
 800f32a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f336:	3304      	adds	r3, #4
 800f338:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	0b1b      	lsrs	r3, r3, #12
 800f33e:	68fa      	ldr	r2, [r7, #12]
 800f340:	8952      	ldrh	r2, [r2, #10]
 800f342:	fbb3 f3f2 	udiv	r3, r3, r2
 800f346:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	1d1a      	adds	r2, r3, #4
 800f34c:	613a      	str	r2, [r7, #16]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d101      	bne.n	800f35c <clmt_clust+0x3a>
 800f358:	2300      	movs	r3, #0
 800f35a:	e010      	b.n	800f37e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f35c:	697a      	ldr	r2, [r7, #20]
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	429a      	cmp	r2, r3
 800f362:	d307      	bcc.n	800f374 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f364:	697a      	ldr	r2, [r7, #20]
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	1ad3      	subs	r3, r2, r3
 800f36a:	617b      	str	r3, [r7, #20]
 800f36c:	693b      	ldr	r3, [r7, #16]
 800f36e:	3304      	adds	r3, #4
 800f370:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f372:	e7e9      	b.n	800f348 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f374:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	681a      	ldr	r2, [r3, #0]
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	4413      	add	r3, r2
}
 800f37e:	4618      	mov	r0, r3
 800f380:	371c      	adds	r7, #28
 800f382:	46bd      	mov	sp, r7
 800f384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f388:	4770      	bx	lr

0800f38a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f38a:	b580      	push	{r7, lr}
 800f38c:	b086      	sub	sp, #24
 800f38e:	af00      	add	r7, sp, #0
 800f390:	6078      	str	r0, [r7, #4]
 800f392:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f3a0:	d204      	bcs.n	800f3ac <dir_sdi+0x22>
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	f003 031f 	and.w	r3, r3, #31
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d001      	beq.n	800f3b0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f3ac:	2302      	movs	r3, #2
 800f3ae:	e063      	b.n	800f478 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	683a      	ldr	r2, [r7, #0]
 800f3b4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	689b      	ldr	r3, [r3, #8]
 800f3ba:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d106      	bne.n	800f3d0 <dir_sdi+0x46>
 800f3c2:	693b      	ldr	r3, [r7, #16]
 800f3c4:	781b      	ldrb	r3, [r3, #0]
 800f3c6:	2b02      	cmp	r3, #2
 800f3c8:	d902      	bls.n	800f3d0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f3ca:	693b      	ldr	r3, [r7, #16]
 800f3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ce:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d10c      	bne.n	800f3f0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	095b      	lsrs	r3, r3, #5
 800f3da:	693a      	ldr	r2, [r7, #16]
 800f3dc:	8912      	ldrh	r2, [r2, #8]
 800f3de:	4293      	cmp	r3, r2
 800f3e0:	d301      	bcc.n	800f3e6 <dir_sdi+0x5c>
 800f3e2:	2302      	movs	r3, #2
 800f3e4:	e048      	b.n	800f478 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f3e6:	693b      	ldr	r3, [r7, #16]
 800f3e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	61da      	str	r2, [r3, #28]
 800f3ee:	e029      	b.n	800f444 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f3f0:	693b      	ldr	r3, [r7, #16]
 800f3f2:	895b      	ldrh	r3, [r3, #10]
 800f3f4:	031b      	lsls	r3, r3, #12
 800f3f6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f3f8:	e019      	b.n	800f42e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6979      	ldr	r1, [r7, #20]
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7ff fcf9 	bl	800edf6 <get_fat>
 800f404:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f40c:	d101      	bne.n	800f412 <dir_sdi+0x88>
 800f40e:	2301      	movs	r3, #1
 800f410:	e032      	b.n	800f478 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	2b01      	cmp	r3, #1
 800f416:	d904      	bls.n	800f422 <dir_sdi+0x98>
 800f418:	693b      	ldr	r3, [r7, #16]
 800f41a:	695b      	ldr	r3, [r3, #20]
 800f41c:	697a      	ldr	r2, [r7, #20]
 800f41e:	429a      	cmp	r2, r3
 800f420:	d301      	bcc.n	800f426 <dir_sdi+0x9c>
 800f422:	2302      	movs	r3, #2
 800f424:	e028      	b.n	800f478 <dir_sdi+0xee>
			ofs -= csz;
 800f426:	683a      	ldr	r2, [r7, #0]
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	1ad3      	subs	r3, r2, r3
 800f42c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f42e:	683a      	ldr	r2, [r7, #0]
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	429a      	cmp	r2, r3
 800f434:	d2e1      	bcs.n	800f3fa <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f436:	6979      	ldr	r1, [r7, #20]
 800f438:	6938      	ldr	r0, [r7, #16]
 800f43a:	f7ff fcbd 	bl	800edb8 <clust2sect>
 800f43e:	4602      	mov	r2, r0
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	697a      	ldr	r2, [r7, #20]
 800f448:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	69db      	ldr	r3, [r3, #28]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d101      	bne.n	800f456 <dir_sdi+0xcc>
 800f452:	2302      	movs	r3, #2
 800f454:	e010      	b.n	800f478 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	69da      	ldr	r2, [r3, #28]
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	0b1b      	lsrs	r3, r3, #12
 800f45e:	441a      	add	r2, r3
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f470:	441a      	add	r2, r3
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f476:	2300      	movs	r3, #0
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3718      	adds	r7, #24
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b086      	sub	sp, #24
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	695b      	ldr	r3, [r3, #20]
 800f494:	3320      	adds	r3, #32
 800f496:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	69db      	ldr	r3, [r3, #28]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d003      	beq.n	800f4a8 <dir_next+0x28>
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f4a6:	d301      	bcc.n	800f4ac <dir_next+0x2c>
 800f4a8:	2304      	movs	r3, #4
 800f4aa:	e0aa      	b.n	800f602 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	f040 8098 	bne.w	800f5e8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	69db      	ldr	r3, [r3, #28]
 800f4bc:	1c5a      	adds	r2, r3, #1
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	699b      	ldr	r3, [r3, #24]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d10b      	bne.n	800f4e2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	095b      	lsrs	r3, r3, #5
 800f4ce:	68fa      	ldr	r2, [r7, #12]
 800f4d0:	8912      	ldrh	r2, [r2, #8]
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	f0c0 8088 	bcc.w	800f5e8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	61da      	str	r2, [r3, #28]
 800f4de:	2304      	movs	r3, #4
 800f4e0:	e08f      	b.n	800f602 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	0b1b      	lsrs	r3, r3, #12
 800f4e6:	68fa      	ldr	r2, [r7, #12]
 800f4e8:	8952      	ldrh	r2, [r2, #10]
 800f4ea:	3a01      	subs	r2, #1
 800f4ec:	4013      	ands	r3, r2
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d17a      	bne.n	800f5e8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	699b      	ldr	r3, [r3, #24]
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	4610      	mov	r0, r2
 800f4fc:	f7ff fc7b 	bl	800edf6 <get_fat>
 800f500:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	2b01      	cmp	r3, #1
 800f506:	d801      	bhi.n	800f50c <dir_next+0x8c>
 800f508:	2302      	movs	r3, #2
 800f50a:	e07a      	b.n	800f602 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f50c:	697b      	ldr	r3, [r7, #20]
 800f50e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f512:	d101      	bne.n	800f518 <dir_next+0x98>
 800f514:	2301      	movs	r3, #1
 800f516:	e074      	b.n	800f602 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	695b      	ldr	r3, [r3, #20]
 800f51c:	697a      	ldr	r2, [r7, #20]
 800f51e:	429a      	cmp	r2, r3
 800f520:	d358      	bcc.n	800f5d4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d104      	bne.n	800f532 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	2200      	movs	r2, #0
 800f52c:	61da      	str	r2, [r3, #28]
 800f52e:	2304      	movs	r3, #4
 800f530:	e067      	b.n	800f602 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f532:	687a      	ldr	r2, [r7, #4]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	699b      	ldr	r3, [r3, #24]
 800f538:	4619      	mov	r1, r3
 800f53a:	4610      	mov	r0, r2
 800f53c:	f7ff fe59 	bl	800f1f2 <create_chain>
 800f540:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d101      	bne.n	800f54c <dir_next+0xcc>
 800f548:	2307      	movs	r3, #7
 800f54a:	e05a      	b.n	800f602 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f54c:	697b      	ldr	r3, [r7, #20]
 800f54e:	2b01      	cmp	r3, #1
 800f550:	d101      	bne.n	800f556 <dir_next+0xd6>
 800f552:	2302      	movs	r3, #2
 800f554:	e055      	b.n	800f602 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f556:	697b      	ldr	r3, [r7, #20]
 800f558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f55c:	d101      	bne.n	800f562 <dir_next+0xe2>
 800f55e:	2301      	movs	r3, #1
 800f560:	e04f      	b.n	800f602 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f562:	68f8      	ldr	r0, [r7, #12]
 800f564:	f7ff fb48 	bl	800ebf8 <sync_window>
 800f568:	4603      	mov	r3, r0
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d001      	beq.n	800f572 <dir_next+0xf2>
 800f56e:	2301      	movs	r3, #1
 800f570:	e047      	b.n	800f602 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	3330      	adds	r3, #48	; 0x30
 800f576:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f57a:	2100      	movs	r1, #0
 800f57c:	4618      	mov	r0, r3
 800f57e:	f7ff f972 	bl	800e866 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f582:	2300      	movs	r3, #0
 800f584:	613b      	str	r3, [r7, #16]
 800f586:	6979      	ldr	r1, [r7, #20]
 800f588:	68f8      	ldr	r0, [r7, #12]
 800f58a:	f7ff fc15 	bl	800edb8 <clust2sect>
 800f58e:	4602      	mov	r2, r0
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	62da      	str	r2, [r3, #44]	; 0x2c
 800f594:	e012      	b.n	800f5bc <dir_next+0x13c>
						fs->wflag = 1;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	2201      	movs	r2, #1
 800f59a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f59c:	68f8      	ldr	r0, [r7, #12]
 800f59e:	f7ff fb2b 	bl	800ebf8 <sync_window>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d001      	beq.n	800f5ac <dir_next+0x12c>
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	e02a      	b.n	800f602 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f5ac:	693b      	ldr	r3, [r7, #16]
 800f5ae:	3301      	adds	r3, #1
 800f5b0:	613b      	str	r3, [r7, #16]
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5b6:	1c5a      	adds	r2, r3, #1
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	62da      	str	r2, [r3, #44]	; 0x2c
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	895b      	ldrh	r3, [r3, #10]
 800f5c0:	461a      	mov	r2, r3
 800f5c2:	693b      	ldr	r3, [r7, #16]
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d3e6      	bcc.n	800f596 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5cc:	693b      	ldr	r3, [r7, #16]
 800f5ce:	1ad2      	subs	r2, r2, r3
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	697a      	ldr	r2, [r7, #20]
 800f5d8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f5da:	6979      	ldr	r1, [r7, #20]
 800f5dc:	68f8      	ldr	r0, [r7, #12]
 800f5de:	f7ff fbeb 	bl	800edb8 <clust2sect>
 800f5e2:	4602      	mov	r2, r0
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	68ba      	ldr	r2, [r7, #8]
 800f5ec:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f5fa:	441a      	add	r2, r3
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f600:	2300      	movs	r3, #0
}
 800f602:	4618      	mov	r0, r3
 800f604:	3718      	adds	r7, #24
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}

0800f60a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f60a:	b580      	push	{r7, lr}
 800f60c:	b086      	sub	sp, #24
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
 800f612:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f61a:	2100      	movs	r1, #0
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f7ff feb4 	bl	800f38a <dir_sdi>
 800f622:	4603      	mov	r3, r0
 800f624:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f626:	7dfb      	ldrb	r3, [r7, #23]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d12b      	bne.n	800f684 <dir_alloc+0x7a>
		n = 0;
 800f62c:	2300      	movs	r3, #0
 800f62e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	69db      	ldr	r3, [r3, #28]
 800f634:	4619      	mov	r1, r3
 800f636:	68f8      	ldr	r0, [r7, #12]
 800f638:	f7ff fb22 	bl	800ec80 <move_window>
 800f63c:	4603      	mov	r3, r0
 800f63e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f640:	7dfb      	ldrb	r3, [r7, #23]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d11d      	bne.n	800f682 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6a1b      	ldr	r3, [r3, #32]
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	2be5      	cmp	r3, #229	; 0xe5
 800f64e:	d004      	beq.n	800f65a <dir_alloc+0x50>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6a1b      	ldr	r3, [r3, #32]
 800f654:	781b      	ldrb	r3, [r3, #0]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d107      	bne.n	800f66a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	3301      	adds	r3, #1
 800f65e:	613b      	str	r3, [r7, #16]
 800f660:	693a      	ldr	r2, [r7, #16]
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	429a      	cmp	r2, r3
 800f666:	d102      	bne.n	800f66e <dir_alloc+0x64>
 800f668:	e00c      	b.n	800f684 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f66a:	2300      	movs	r3, #0
 800f66c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f66e:	2101      	movs	r1, #1
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f7ff ff05 	bl	800f480 <dir_next>
 800f676:	4603      	mov	r3, r0
 800f678:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f67a:	7dfb      	ldrb	r3, [r7, #23]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d0d7      	beq.n	800f630 <dir_alloc+0x26>
 800f680:	e000      	b.n	800f684 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f682:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f684:	7dfb      	ldrb	r3, [r7, #23]
 800f686:	2b04      	cmp	r3, #4
 800f688:	d101      	bne.n	800f68e <dir_alloc+0x84>
 800f68a:	2307      	movs	r3, #7
 800f68c:	75fb      	strb	r3, [r7, #23]
	return res;
 800f68e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f690:	4618      	mov	r0, r3
 800f692:	3718      	adds	r7, #24
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}

0800f698 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b084      	sub	sp, #16
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	331a      	adds	r3, #26
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7ff f83a 	bl	800e720 <ld_word>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	2b03      	cmp	r3, #3
 800f6b6:	d109      	bne.n	800f6cc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	3314      	adds	r3, #20
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7ff f82f 	bl	800e720 <ld_word>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	041b      	lsls	r3, r3, #16
 800f6c6:	68fa      	ldr	r2, [r7, #12]
 800f6c8:	4313      	orrs	r3, r2
 800f6ca:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3710      	adds	r7, #16
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}

0800f6d6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f6d6:	b580      	push	{r7, lr}
 800f6d8:	b084      	sub	sp, #16
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	60f8      	str	r0, [r7, #12]
 800f6de:	60b9      	str	r1, [r7, #8]
 800f6e0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	331a      	adds	r3, #26
 800f6e6:	687a      	ldr	r2, [r7, #4]
 800f6e8:	b292      	uxth	r2, r2
 800f6ea:	4611      	mov	r1, r2
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f7ff f852 	bl	800e796 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	2b03      	cmp	r3, #3
 800f6f8:	d109      	bne.n	800f70e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	f103 0214 	add.w	r2, r3, #20
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	0c1b      	lsrs	r3, r3, #16
 800f704:	b29b      	uxth	r3, r3
 800f706:	4619      	mov	r1, r3
 800f708:	4610      	mov	r0, r2
 800f70a:	f7ff f844 	bl	800e796 <st_word>
	}
}
 800f70e:	bf00      	nop
 800f710:	3710      	adds	r7, #16
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}

0800f716 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f716:	b580      	push	{r7, lr}
 800f718:	b086      	sub	sp, #24
 800f71a:	af00      	add	r7, sp, #0
 800f71c:	6078      	str	r0, [r7, #4]
 800f71e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f720:	2304      	movs	r3, #4
 800f722:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800f72a:	e03c      	b.n	800f7a6 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	69db      	ldr	r3, [r3, #28]
 800f730:	4619      	mov	r1, r3
 800f732:	6938      	ldr	r0, [r7, #16]
 800f734:	f7ff faa4 	bl	800ec80 <move_window>
 800f738:	4603      	mov	r3, r0
 800f73a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f73c:	7dfb      	ldrb	r3, [r7, #23]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d136      	bne.n	800f7b0 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6a1b      	ldr	r3, [r3, #32]
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800f74a:	7bfb      	ldrb	r3, [r7, #15]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d102      	bne.n	800f756 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f750:	2304      	movs	r3, #4
 800f752:	75fb      	strb	r3, [r7, #23]
 800f754:	e031      	b.n	800f7ba <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6a1b      	ldr	r3, [r3, #32]
 800f75a:	330b      	adds	r3, #11
 800f75c:	781b      	ldrb	r3, [r3, #0]
 800f75e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f762:	73bb      	strb	r3, [r7, #14]
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	7bba      	ldrb	r2, [r7, #14]
 800f768:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800f76a:	7bfb      	ldrb	r3, [r7, #15]
 800f76c:	2be5      	cmp	r3, #229	; 0xe5
 800f76e:	d011      	beq.n	800f794 <dir_read+0x7e>
 800f770:	7bfb      	ldrb	r3, [r7, #15]
 800f772:	2b2e      	cmp	r3, #46	; 0x2e
 800f774:	d00e      	beq.n	800f794 <dir_read+0x7e>
 800f776:	7bbb      	ldrb	r3, [r7, #14]
 800f778:	2b0f      	cmp	r3, #15
 800f77a:	d00b      	beq.n	800f794 <dir_read+0x7e>
 800f77c:	7bbb      	ldrb	r3, [r7, #14]
 800f77e:	f023 0320 	bic.w	r3, r3, #32
 800f782:	2b08      	cmp	r3, #8
 800f784:	bf0c      	ite	eq
 800f786:	2301      	moveq	r3, #1
 800f788:	2300      	movne	r3, #0
 800f78a:	b2db      	uxtb	r3, r3
 800f78c:	461a      	mov	r2, r3
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	4293      	cmp	r3, r2
 800f792:	d00f      	beq.n	800f7b4 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f794:	2100      	movs	r1, #0
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f7ff fe72 	bl	800f480 <dir_next>
 800f79c:	4603      	mov	r3, r0
 800f79e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f7a0:	7dfb      	ldrb	r3, [r7, #23]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d108      	bne.n	800f7b8 <dir_read+0xa2>
	while (dp->sect) {
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	69db      	ldr	r3, [r3, #28]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d1be      	bne.n	800f72c <dir_read+0x16>
 800f7ae:	e004      	b.n	800f7ba <dir_read+0xa4>
		if (res != FR_OK) break;
 800f7b0:	bf00      	nop
 800f7b2:	e002      	b.n	800f7ba <dir_read+0xa4>
				break;
 800f7b4:	bf00      	nop
 800f7b6:	e000      	b.n	800f7ba <dir_read+0xa4>
		if (res != FR_OK) break;
 800f7b8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f7ba:	7dfb      	ldrb	r3, [r7, #23]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d002      	beq.n	800f7c6 <dir_read+0xb0>
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	61da      	str	r2, [r3, #28]
	return res;
 800f7c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	3718      	adds	r7, #24
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}

0800f7d0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b086      	sub	sp, #24
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f7de:	2100      	movs	r1, #0
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f7ff fdd2 	bl	800f38a <dir_sdi>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f7ea:	7dfb      	ldrb	r3, [r7, #23]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d001      	beq.n	800f7f4 <dir_find+0x24>
 800f7f0:	7dfb      	ldrb	r3, [r7, #23]
 800f7f2:	e03e      	b.n	800f872 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	69db      	ldr	r3, [r3, #28]
 800f7f8:	4619      	mov	r1, r3
 800f7fa:	6938      	ldr	r0, [r7, #16]
 800f7fc:	f7ff fa40 	bl	800ec80 <move_window>
 800f800:	4603      	mov	r3, r0
 800f802:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f804:	7dfb      	ldrb	r3, [r7, #23]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d12f      	bne.n	800f86a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	6a1b      	ldr	r3, [r3, #32]
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f812:	7bfb      	ldrb	r3, [r7, #15]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d102      	bne.n	800f81e <dir_find+0x4e>
 800f818:	2304      	movs	r3, #4
 800f81a:	75fb      	strb	r3, [r7, #23]
 800f81c:	e028      	b.n	800f870 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6a1b      	ldr	r3, [r3, #32]
 800f822:	330b      	adds	r3, #11
 800f824:	781b      	ldrb	r3, [r3, #0]
 800f826:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f82a:	b2da      	uxtb	r2, r3
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6a1b      	ldr	r3, [r3, #32]
 800f834:	330b      	adds	r3, #11
 800f836:	781b      	ldrb	r3, [r3, #0]
 800f838:	f003 0308 	and.w	r3, r3, #8
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d10a      	bne.n	800f856 <dir_find+0x86>
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	6a18      	ldr	r0, [r3, #32]
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	3324      	adds	r3, #36	; 0x24
 800f848:	220b      	movs	r2, #11
 800f84a:	4619      	mov	r1, r3
 800f84c:	f7ff f826 	bl	800e89c <mem_cmp>
 800f850:	4603      	mov	r3, r0
 800f852:	2b00      	cmp	r3, #0
 800f854:	d00b      	beq.n	800f86e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f856:	2100      	movs	r1, #0
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f7ff fe11 	bl	800f480 <dir_next>
 800f85e:	4603      	mov	r3, r0
 800f860:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f862:	7dfb      	ldrb	r3, [r7, #23]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d0c5      	beq.n	800f7f4 <dir_find+0x24>
 800f868:	e002      	b.n	800f870 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f86a:	bf00      	nop
 800f86c:	e000      	b.n	800f870 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f86e:	bf00      	nop

	return res;
 800f870:	7dfb      	ldrb	r3, [r7, #23]
}
 800f872:	4618      	mov	r0, r3
 800f874:	3718      	adds	r7, #24
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}

0800f87a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f87a:	b580      	push	{r7, lr}
 800f87c:	b084      	sub	sp, #16
 800f87e:	af00      	add	r7, sp, #0
 800f880:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f888:	2101      	movs	r1, #1
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f7ff febd 	bl	800f60a <dir_alloc>
 800f890:	4603      	mov	r3, r0
 800f892:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f894:	7bfb      	ldrb	r3, [r7, #15]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d11c      	bne.n	800f8d4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	69db      	ldr	r3, [r3, #28]
 800f89e:	4619      	mov	r1, r3
 800f8a0:	68b8      	ldr	r0, [r7, #8]
 800f8a2:	f7ff f9ed 	bl	800ec80 <move_window>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f8aa:	7bfb      	ldrb	r3, [r7, #15]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d111      	bne.n	800f8d4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	6a1b      	ldr	r3, [r3, #32]
 800f8b4:	2220      	movs	r2, #32
 800f8b6:	2100      	movs	r1, #0
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f7fe ffd4 	bl	800e866 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6a18      	ldr	r0, [r3, #32]
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	3324      	adds	r3, #36	; 0x24
 800f8c6:	220b      	movs	r2, #11
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	f7fe ffab 	bl	800e824 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	2201      	movs	r2, #1
 800f8d2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f8d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3710      	adds	r7, #16
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}

0800f8de <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800f8de:	b580      	push	{r7, lr}
 800f8e0:	b086      	sub	sp, #24
 800f8e2:	af00      	add	r7, sp, #0
 800f8e4:	6078      	str	r0, [r7, #4]
 800f8e6:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	69db      	ldr	r3, [r3, #28]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d04e      	beq.n	800f994 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	613b      	str	r3, [r7, #16]
 800f8fa:	693b      	ldr	r3, [r7, #16]
 800f8fc:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800f8fe:	e021      	b.n	800f944 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6a1a      	ldr	r2, [r3, #32]
 800f904:	697b      	ldr	r3, [r7, #20]
 800f906:	1c59      	adds	r1, r3, #1
 800f908:	6179      	str	r1, [r7, #20]
 800f90a:	4413      	add	r3, r2
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800f910:	7bfb      	ldrb	r3, [r7, #15]
 800f912:	2b20      	cmp	r3, #32
 800f914:	d100      	bne.n	800f918 <get_fileinfo+0x3a>
 800f916:	e015      	b.n	800f944 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800f918:	7bfb      	ldrb	r3, [r7, #15]
 800f91a:	2b05      	cmp	r3, #5
 800f91c:	d101      	bne.n	800f922 <get_fileinfo+0x44>
 800f91e:	23e5      	movs	r3, #229	; 0xe5
 800f920:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	2b09      	cmp	r3, #9
 800f926:	d106      	bne.n	800f936 <get_fileinfo+0x58>
 800f928:	693b      	ldr	r3, [r7, #16]
 800f92a:	1c5a      	adds	r2, r3, #1
 800f92c:	613a      	str	r2, [r7, #16]
 800f92e:	683a      	ldr	r2, [r7, #0]
 800f930:	4413      	add	r3, r2
 800f932:	222e      	movs	r2, #46	; 0x2e
 800f934:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800f936:	693b      	ldr	r3, [r7, #16]
 800f938:	1c5a      	adds	r2, r3, #1
 800f93a:	613a      	str	r2, [r7, #16]
 800f93c:	683a      	ldr	r2, [r7, #0]
 800f93e:	4413      	add	r3, r2
 800f940:	7bfa      	ldrb	r2, [r7, #15]
 800f942:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800f944:	697b      	ldr	r3, [r7, #20]
 800f946:	2b0a      	cmp	r3, #10
 800f948:	d9da      	bls.n	800f900 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800f94a:	683a      	ldr	r2, [r7, #0]
 800f94c:	693b      	ldr	r3, [r7, #16]
 800f94e:	4413      	add	r3, r2
 800f950:	3309      	adds	r3, #9
 800f952:	2200      	movs	r2, #0
 800f954:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6a1b      	ldr	r3, [r3, #32]
 800f95a:	7ada      	ldrb	r2, [r3, #11]
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	6a1b      	ldr	r3, [r3, #32]
 800f964:	331c      	adds	r3, #28
 800f966:	4618      	mov	r0, r3
 800f968:	f7fe fef2 	bl	800e750 <ld_dword>
 800f96c:	4602      	mov	r2, r0
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6a1b      	ldr	r3, [r3, #32]
 800f976:	3316      	adds	r3, #22
 800f978:	4618      	mov	r0, r3
 800f97a:	f7fe fee9 	bl	800e750 <ld_dword>
 800f97e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800f980:	68bb      	ldr	r3, [r7, #8]
 800f982:	b29a      	uxth	r2, r3
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	80da      	strh	r2, [r3, #6]
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	0c1b      	lsrs	r3, r3, #16
 800f98c:	b29a      	uxth	r2, r3
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	809a      	strh	r2, [r3, #4]
 800f992:	e000      	b.n	800f996 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f994:	bf00      	nop
}
 800f996:	3718      	adds	r7, #24
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b088      	sub	sp, #32
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	60fb      	str	r3, [r7, #12]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	3324      	adds	r3, #36	; 0x24
 800f9b0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f9b2:	220b      	movs	r2, #11
 800f9b4:	2120      	movs	r1, #32
 800f9b6:	68b8      	ldr	r0, [r7, #8]
 800f9b8:	f7fe ff55 	bl	800e866 <mem_set>
	si = i = 0; ni = 8;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	613b      	str	r3, [r7, #16]
 800f9c0:	693b      	ldr	r3, [r7, #16]
 800f9c2:	61fb      	str	r3, [r7, #28]
 800f9c4:	2308      	movs	r3, #8
 800f9c6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f9c8:	69fb      	ldr	r3, [r7, #28]
 800f9ca:	1c5a      	adds	r2, r3, #1
 800f9cc:	61fa      	str	r2, [r7, #28]
 800f9ce:	68fa      	ldr	r2, [r7, #12]
 800f9d0:	4413      	add	r3, r2
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f9d6:	7efb      	ldrb	r3, [r7, #27]
 800f9d8:	2b20      	cmp	r3, #32
 800f9da:	d94e      	bls.n	800fa7a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f9dc:	7efb      	ldrb	r3, [r7, #27]
 800f9de:	2b2f      	cmp	r3, #47	; 0x2f
 800f9e0:	d006      	beq.n	800f9f0 <create_name+0x54>
 800f9e2:	7efb      	ldrb	r3, [r7, #27]
 800f9e4:	2b5c      	cmp	r3, #92	; 0x5c
 800f9e6:	d110      	bne.n	800fa0a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f9e8:	e002      	b.n	800f9f0 <create_name+0x54>
 800f9ea:	69fb      	ldr	r3, [r7, #28]
 800f9ec:	3301      	adds	r3, #1
 800f9ee:	61fb      	str	r3, [r7, #28]
 800f9f0:	68fa      	ldr	r2, [r7, #12]
 800f9f2:	69fb      	ldr	r3, [r7, #28]
 800f9f4:	4413      	add	r3, r2
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	2b2f      	cmp	r3, #47	; 0x2f
 800f9fa:	d0f6      	beq.n	800f9ea <create_name+0x4e>
 800f9fc:	68fa      	ldr	r2, [r7, #12]
 800f9fe:	69fb      	ldr	r3, [r7, #28]
 800fa00:	4413      	add	r3, r2
 800fa02:	781b      	ldrb	r3, [r3, #0]
 800fa04:	2b5c      	cmp	r3, #92	; 0x5c
 800fa06:	d0f0      	beq.n	800f9ea <create_name+0x4e>
			break;
 800fa08:	e038      	b.n	800fa7c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800fa0a:	7efb      	ldrb	r3, [r7, #27]
 800fa0c:	2b2e      	cmp	r3, #46	; 0x2e
 800fa0e:	d003      	beq.n	800fa18 <create_name+0x7c>
 800fa10:	693a      	ldr	r2, [r7, #16]
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d30c      	bcc.n	800fa32 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	2b0b      	cmp	r3, #11
 800fa1c:	d002      	beq.n	800fa24 <create_name+0x88>
 800fa1e:	7efb      	ldrb	r3, [r7, #27]
 800fa20:	2b2e      	cmp	r3, #46	; 0x2e
 800fa22:	d001      	beq.n	800fa28 <create_name+0x8c>
 800fa24:	2306      	movs	r3, #6
 800fa26:	e044      	b.n	800fab2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800fa28:	2308      	movs	r3, #8
 800fa2a:	613b      	str	r3, [r7, #16]
 800fa2c:	230b      	movs	r3, #11
 800fa2e:	617b      	str	r3, [r7, #20]
			continue;
 800fa30:	e022      	b.n	800fa78 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fa32:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	da04      	bge.n	800fa44 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fa3a:	7efb      	ldrb	r3, [r7, #27]
 800fa3c:	3b80      	subs	r3, #128	; 0x80
 800fa3e:	4a1f      	ldr	r2, [pc, #124]	; (800fabc <create_name+0x120>)
 800fa40:	5cd3      	ldrb	r3, [r2, r3]
 800fa42:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fa44:	7efb      	ldrb	r3, [r7, #27]
 800fa46:	4619      	mov	r1, r3
 800fa48:	481d      	ldr	r0, [pc, #116]	; (800fac0 <create_name+0x124>)
 800fa4a:	f7fe ff4e 	bl	800e8ea <chk_chr>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d001      	beq.n	800fa58 <create_name+0xbc>
 800fa54:	2306      	movs	r3, #6
 800fa56:	e02c      	b.n	800fab2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800fa58:	7efb      	ldrb	r3, [r7, #27]
 800fa5a:	2b60      	cmp	r3, #96	; 0x60
 800fa5c:	d905      	bls.n	800fa6a <create_name+0xce>
 800fa5e:	7efb      	ldrb	r3, [r7, #27]
 800fa60:	2b7a      	cmp	r3, #122	; 0x7a
 800fa62:	d802      	bhi.n	800fa6a <create_name+0xce>
 800fa64:	7efb      	ldrb	r3, [r7, #27]
 800fa66:	3b20      	subs	r3, #32
 800fa68:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800fa6a:	693b      	ldr	r3, [r7, #16]
 800fa6c:	1c5a      	adds	r2, r3, #1
 800fa6e:	613a      	str	r2, [r7, #16]
 800fa70:	68ba      	ldr	r2, [r7, #8]
 800fa72:	4413      	add	r3, r2
 800fa74:	7efa      	ldrb	r2, [r7, #27]
 800fa76:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800fa78:	e7a6      	b.n	800f9c8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fa7a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fa7c:	68fa      	ldr	r2, [r7, #12]
 800fa7e:	69fb      	ldr	r3, [r7, #28]
 800fa80:	441a      	add	r2, r3
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800fa86:	693b      	ldr	r3, [r7, #16]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d101      	bne.n	800fa90 <create_name+0xf4>
 800fa8c:	2306      	movs	r3, #6
 800fa8e:	e010      	b.n	800fab2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	781b      	ldrb	r3, [r3, #0]
 800fa94:	2be5      	cmp	r3, #229	; 0xe5
 800fa96:	d102      	bne.n	800fa9e <create_name+0x102>
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	2205      	movs	r2, #5
 800fa9c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fa9e:	7efb      	ldrb	r3, [r7, #27]
 800faa0:	2b20      	cmp	r3, #32
 800faa2:	d801      	bhi.n	800faa8 <create_name+0x10c>
 800faa4:	2204      	movs	r2, #4
 800faa6:	e000      	b.n	800faaa <create_name+0x10e>
 800faa8:	2200      	movs	r2, #0
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	330b      	adds	r3, #11
 800faae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800fab0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3720      	adds	r7, #32
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}
 800faba:	bf00      	nop
 800fabc:	08017870 	.word	0x08017870
 800fac0:	08016a38 	.word	0x08016a38

0800fac4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b086      	sub	sp, #24
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fad8:	e002      	b.n	800fae0 <follow_path+0x1c>
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	3301      	adds	r3, #1
 800fade:	603b      	str	r3, [r7, #0]
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	781b      	ldrb	r3, [r3, #0]
 800fae4:	2b2f      	cmp	r3, #47	; 0x2f
 800fae6:	d0f8      	beq.n	800fada <follow_path+0x16>
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	781b      	ldrb	r3, [r3, #0]
 800faec:	2b5c      	cmp	r3, #92	; 0x5c
 800faee:	d0f4      	beq.n	800fada <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	2200      	movs	r2, #0
 800faf4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	781b      	ldrb	r3, [r3, #0]
 800fafa:	2b1f      	cmp	r3, #31
 800fafc:	d80a      	bhi.n	800fb14 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2280      	movs	r2, #128	; 0x80
 800fb02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fb06:	2100      	movs	r1, #0
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f7ff fc3e 	bl	800f38a <dir_sdi>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	75fb      	strb	r3, [r7, #23]
 800fb12:	e043      	b.n	800fb9c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fb14:	463b      	mov	r3, r7
 800fb16:	4619      	mov	r1, r3
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f7ff ff3f 	bl	800f99c <create_name>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fb22:	7dfb      	ldrb	r3, [r7, #23]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d134      	bne.n	800fb92 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fb28:	6878      	ldr	r0, [r7, #4]
 800fb2a:	f7ff fe51 	bl	800f7d0 <dir_find>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fb38:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fb3a:	7dfb      	ldrb	r3, [r7, #23]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d00a      	beq.n	800fb56 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fb40:	7dfb      	ldrb	r3, [r7, #23]
 800fb42:	2b04      	cmp	r3, #4
 800fb44:	d127      	bne.n	800fb96 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fb46:	7afb      	ldrb	r3, [r7, #11]
 800fb48:	f003 0304 	and.w	r3, r3, #4
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d122      	bne.n	800fb96 <follow_path+0xd2>
 800fb50:	2305      	movs	r3, #5
 800fb52:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fb54:	e01f      	b.n	800fb96 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fb56:	7afb      	ldrb	r3, [r7, #11]
 800fb58:	f003 0304 	and.w	r3, r3, #4
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d11c      	bne.n	800fb9a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	799b      	ldrb	r3, [r3, #6]
 800fb64:	f003 0310 	and.w	r3, r3, #16
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d102      	bne.n	800fb72 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800fb6c:	2305      	movs	r3, #5
 800fb6e:	75fb      	strb	r3, [r7, #23]
 800fb70:	e014      	b.n	800fb9c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	695b      	ldr	r3, [r3, #20]
 800fb7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fb80:	4413      	add	r3, r2
 800fb82:	4619      	mov	r1, r3
 800fb84:	68f8      	ldr	r0, [r7, #12]
 800fb86:	f7ff fd87 	bl	800f698 <ld_clust>
 800fb8a:	4602      	mov	r2, r0
 800fb8c:	693b      	ldr	r3, [r7, #16]
 800fb8e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fb90:	e7c0      	b.n	800fb14 <follow_path+0x50>
			if (res != FR_OK) break;
 800fb92:	bf00      	nop
 800fb94:	e002      	b.n	800fb9c <follow_path+0xd8>
				break;
 800fb96:	bf00      	nop
 800fb98:	e000      	b.n	800fb9c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fb9a:	bf00      	nop
			}
		}
	}

	return res;
 800fb9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3718      	adds	r7, #24
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}

0800fba6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fba6:	b480      	push	{r7}
 800fba8:	b087      	sub	sp, #28
 800fbaa:	af00      	add	r7, sp, #0
 800fbac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fbae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fbb2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d031      	beq.n	800fc20 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	617b      	str	r3, [r7, #20]
 800fbc2:	e002      	b.n	800fbca <get_ldnumber+0x24>
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	617b      	str	r3, [r7, #20]
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	781b      	ldrb	r3, [r3, #0]
 800fbce:	2b20      	cmp	r3, #32
 800fbd0:	d903      	bls.n	800fbda <get_ldnumber+0x34>
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	781b      	ldrb	r3, [r3, #0]
 800fbd6:	2b3a      	cmp	r3, #58	; 0x3a
 800fbd8:	d1f4      	bne.n	800fbc4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	2b3a      	cmp	r3, #58	; 0x3a
 800fbe0:	d11c      	bne.n	800fc1c <get_ldnumber+0x76>
			tp = *path;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	1c5a      	adds	r2, r3, #1
 800fbec:	60fa      	str	r2, [r7, #12]
 800fbee:	781b      	ldrb	r3, [r3, #0]
 800fbf0:	3b30      	subs	r3, #48	; 0x30
 800fbf2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	2b09      	cmp	r3, #9
 800fbf8:	d80e      	bhi.n	800fc18 <get_ldnumber+0x72>
 800fbfa:	68fa      	ldr	r2, [r7, #12]
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	d10a      	bne.n	800fc18 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d107      	bne.n	800fc18 <get_ldnumber+0x72>
					vol = (int)i;
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	3301      	adds	r3, #1
 800fc10:	617b      	str	r3, [r7, #20]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	697a      	ldr	r2, [r7, #20]
 800fc16:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fc18:	693b      	ldr	r3, [r7, #16]
 800fc1a:	e002      	b.n	800fc22 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fc20:	693b      	ldr	r3, [r7, #16]
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	371c      	adds	r7, #28
 800fc26:	46bd      	mov	sp, r7
 800fc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2c:	4770      	bx	lr
	...

0800fc30 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b082      	sub	sp, #8
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	70da      	strb	r2, [r3, #3]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc46:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fc48:	6839      	ldr	r1, [r7, #0]
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f7ff f818 	bl	800ec80 <move_window>
 800fc50:	4603      	mov	r3, r0
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d001      	beq.n	800fc5a <check_fs+0x2a>
 800fc56:	2304      	movs	r3, #4
 800fc58:	e038      	b.n	800fccc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	3330      	adds	r3, #48	; 0x30
 800fc5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fc62:	4618      	mov	r0, r3
 800fc64:	f7fe fd5c 	bl	800e720 <ld_word>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	461a      	mov	r2, r3
 800fc6c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fc70:	429a      	cmp	r2, r3
 800fc72:	d001      	beq.n	800fc78 <check_fs+0x48>
 800fc74:	2303      	movs	r3, #3
 800fc76:	e029      	b.n	800fccc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc7e:	2be9      	cmp	r3, #233	; 0xe9
 800fc80:	d009      	beq.n	800fc96 <check_fs+0x66>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc88:	2beb      	cmp	r3, #235	; 0xeb
 800fc8a:	d11e      	bne.n	800fcca <check_fs+0x9a>
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800fc92:	2b90      	cmp	r3, #144	; 0x90
 800fc94:	d119      	bne.n	800fcca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	3330      	adds	r3, #48	; 0x30
 800fc9a:	3336      	adds	r3, #54	; 0x36
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7fe fd57 	bl	800e750 <ld_dword>
 800fca2:	4603      	mov	r3, r0
 800fca4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fca8:	4a0a      	ldr	r2, [pc, #40]	; (800fcd4 <check_fs+0xa4>)
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d101      	bne.n	800fcb2 <check_fs+0x82>
 800fcae:	2300      	movs	r3, #0
 800fcb0:	e00c      	b.n	800fccc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	3330      	adds	r3, #48	; 0x30
 800fcb6:	3352      	adds	r3, #82	; 0x52
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f7fe fd49 	bl	800e750 <ld_dword>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	4a05      	ldr	r2, [pc, #20]	; (800fcd8 <check_fs+0xa8>)
 800fcc2:	4293      	cmp	r3, r2
 800fcc4:	d101      	bne.n	800fcca <check_fs+0x9a>
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	e000      	b.n	800fccc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fcca:	2302      	movs	r3, #2
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	3708      	adds	r7, #8
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}
 800fcd4:	00544146 	.word	0x00544146
 800fcd8:	33544146 	.word	0x33544146

0800fcdc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b096      	sub	sp, #88	; 0x58
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	60f8      	str	r0, [r7, #12]
 800fce4:	60b9      	str	r1, [r7, #8]
 800fce6:	4613      	mov	r3, r2
 800fce8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	2200      	movs	r2, #0
 800fcee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fcf0:	68f8      	ldr	r0, [r7, #12]
 800fcf2:	f7ff ff58 	bl	800fba6 <get_ldnumber>
 800fcf6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fcf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	da01      	bge.n	800fd02 <find_volume+0x26>
 800fcfe:	230b      	movs	r3, #11
 800fd00:	e22d      	b.n	801015e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fd02:	4aa1      	ldr	r2, [pc, #644]	; (800ff88 <find_volume+0x2ac>)
 800fd04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd0a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d101      	bne.n	800fd16 <find_volume+0x3a>
 800fd12:	230c      	movs	r3, #12
 800fd14:	e223      	b.n	801015e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd1a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fd1c:	79fb      	ldrb	r3, [r7, #7]
 800fd1e:	f023 0301 	bic.w	r3, r3, #1
 800fd22:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd26:	781b      	ldrb	r3, [r3, #0]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d01a      	beq.n	800fd62 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2e:	785b      	ldrb	r3, [r3, #1]
 800fd30:	4618      	mov	r0, r3
 800fd32:	f7fe fc57 	bl	800e5e4 <disk_status>
 800fd36:	4603      	mov	r3, r0
 800fd38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fd3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd40:	f003 0301 	and.w	r3, r3, #1
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d10c      	bne.n	800fd62 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fd48:	79fb      	ldrb	r3, [r7, #7]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d007      	beq.n	800fd5e <find_volume+0x82>
 800fd4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd52:	f003 0304 	and.w	r3, r3, #4
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d001      	beq.n	800fd5e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fd5a:	230a      	movs	r3, #10
 800fd5c:	e1ff      	b.n	801015e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800fd5e:	2300      	movs	r3, #0
 800fd60:	e1fd      	b.n	801015e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd64:	2200      	movs	r2, #0
 800fd66:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fd68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd6a:	b2da      	uxtb	r2, r3
 800fd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd6e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd72:	785b      	ldrb	r3, [r3, #1]
 800fd74:	4618      	mov	r0, r3
 800fd76:	f7fe fc4f 	bl	800e618 <disk_initialize>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fd80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd84:	f003 0301 	and.w	r3, r3, #1
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d001      	beq.n	800fd90 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fd8c:	2303      	movs	r3, #3
 800fd8e:	e1e6      	b.n	801015e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fd90:	79fb      	ldrb	r3, [r7, #7]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d007      	beq.n	800fda6 <find_volume+0xca>
 800fd96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd9a:	f003 0304 	and.w	r3, r3, #4
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d001      	beq.n	800fda6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fda2:	230a      	movs	r3, #10
 800fda4:	e1db      	b.n	801015e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fda6:	2300      	movs	r3, #0
 800fda8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fdaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fdac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fdae:	f7ff ff3f 	bl	800fc30 <check_fs>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fdb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fdbc:	2b02      	cmp	r3, #2
 800fdbe:	d149      	bne.n	800fe54 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	643b      	str	r3, [r7, #64]	; 0x40
 800fdc4:	e01e      	b.n	800fe04 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fdc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fdcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdce:	011b      	lsls	r3, r3, #4
 800fdd0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fdd4:	4413      	add	r3, r2
 800fdd6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdda:	3304      	adds	r3, #4
 800fddc:	781b      	ldrb	r3, [r3, #0]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d006      	beq.n	800fdf0 <find_volume+0x114>
 800fde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde4:	3308      	adds	r3, #8
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7fe fcb2 	bl	800e750 <ld_dword>
 800fdec:	4602      	mov	r2, r0
 800fdee:	e000      	b.n	800fdf2 <find_volume+0x116>
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdf4:	009b      	lsls	r3, r3, #2
 800fdf6:	3358      	adds	r3, #88	; 0x58
 800fdf8:	443b      	add	r3, r7
 800fdfa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fdfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe00:	3301      	adds	r3, #1
 800fe02:	643b      	str	r3, [r7, #64]	; 0x40
 800fe04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe06:	2b03      	cmp	r3, #3
 800fe08:	d9dd      	bls.n	800fdc6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fe0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d002      	beq.n	800fe1a <find_volume+0x13e>
 800fe14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe16:	3b01      	subs	r3, #1
 800fe18:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fe1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe1c:	009b      	lsls	r3, r3, #2
 800fe1e:	3358      	adds	r3, #88	; 0x58
 800fe20:	443b      	add	r3, r7
 800fe22:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fe26:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fe28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d005      	beq.n	800fe3a <find_volume+0x15e>
 800fe2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fe30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fe32:	f7ff fefd 	bl	800fc30 <check_fs>
 800fe36:	4603      	mov	r3, r0
 800fe38:	e000      	b.n	800fe3c <find_volume+0x160>
 800fe3a:	2303      	movs	r3, #3
 800fe3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fe40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe44:	2b01      	cmp	r3, #1
 800fe46:	d905      	bls.n	800fe54 <find_volume+0x178>
 800fe48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe4a:	3301      	adds	r3, #1
 800fe4c:	643b      	str	r3, [r7, #64]	; 0x40
 800fe4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe50:	2b03      	cmp	r3, #3
 800fe52:	d9e2      	bls.n	800fe1a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fe54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe58:	2b04      	cmp	r3, #4
 800fe5a:	d101      	bne.n	800fe60 <find_volume+0x184>
 800fe5c:	2301      	movs	r3, #1
 800fe5e:	e17e      	b.n	801015e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fe60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe64:	2b01      	cmp	r3, #1
 800fe66:	d901      	bls.n	800fe6c <find_volume+0x190>
 800fe68:	230d      	movs	r3, #13
 800fe6a:	e178      	b.n	801015e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fe6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6e:	3330      	adds	r3, #48	; 0x30
 800fe70:	330b      	adds	r3, #11
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7fe fc54 	bl	800e720 <ld_word>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe7e:	d001      	beq.n	800fe84 <find_volume+0x1a8>
 800fe80:	230d      	movs	r3, #13
 800fe82:	e16c      	b.n	801015e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fe84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe86:	3330      	adds	r3, #48	; 0x30
 800fe88:	3316      	adds	r3, #22
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f7fe fc48 	bl	800e720 <ld_word>
 800fe90:	4603      	mov	r3, r0
 800fe92:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fe94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d106      	bne.n	800fea8 <find_volume+0x1cc>
 800fe9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe9c:	3330      	adds	r3, #48	; 0x30
 800fe9e:	3324      	adds	r3, #36	; 0x24
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7fe fc55 	bl	800e750 <ld_dword>
 800fea6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800feac:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800feae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800feb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800feb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feba:	789b      	ldrb	r3, [r3, #2]
 800febc:	2b01      	cmp	r3, #1
 800febe:	d005      	beq.n	800fecc <find_volume+0x1f0>
 800fec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec2:	789b      	ldrb	r3, [r3, #2]
 800fec4:	2b02      	cmp	r3, #2
 800fec6:	d001      	beq.n	800fecc <find_volume+0x1f0>
 800fec8:	230d      	movs	r3, #13
 800feca:	e148      	b.n	801015e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fece:	789b      	ldrb	r3, [r3, #2]
 800fed0:	461a      	mov	r2, r3
 800fed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fed4:	fb02 f303 	mul.w	r3, r2, r3
 800fed8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800feda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fedc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fee0:	b29a      	uxth	r2, r3
 800fee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee8:	895b      	ldrh	r3, [r3, #10]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d008      	beq.n	800ff00 <find_volume+0x224>
 800feee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef0:	895b      	ldrh	r3, [r3, #10]
 800fef2:	461a      	mov	r2, r3
 800fef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef6:	895b      	ldrh	r3, [r3, #10]
 800fef8:	3b01      	subs	r3, #1
 800fefa:	4013      	ands	r3, r2
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d001      	beq.n	800ff04 <find_volume+0x228>
 800ff00:	230d      	movs	r3, #13
 800ff02:	e12c      	b.n	801015e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ff04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff06:	3330      	adds	r3, #48	; 0x30
 800ff08:	3311      	adds	r3, #17
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f7fe fc08 	bl	800e720 <ld_word>
 800ff10:	4603      	mov	r3, r0
 800ff12:	461a      	mov	r2, r3
 800ff14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff16:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ff18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff1a:	891b      	ldrh	r3, [r3, #8]
 800ff1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff20:	b29b      	uxth	r3, r3
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d001      	beq.n	800ff2a <find_volume+0x24e>
 800ff26:	230d      	movs	r3, #13
 800ff28:	e119      	b.n	801015e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ff2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2c:	3330      	adds	r3, #48	; 0x30
 800ff2e:	3313      	adds	r3, #19
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7fe fbf5 	bl	800e720 <ld_word>
 800ff36:	4603      	mov	r3, r0
 800ff38:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ff3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d106      	bne.n	800ff4e <find_volume+0x272>
 800ff40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff42:	3330      	adds	r3, #48	; 0x30
 800ff44:	3320      	adds	r3, #32
 800ff46:	4618      	mov	r0, r3
 800ff48:	f7fe fc02 	bl	800e750 <ld_dword>
 800ff4c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ff4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff50:	3330      	adds	r3, #48	; 0x30
 800ff52:	330e      	adds	r3, #14
 800ff54:	4618      	mov	r0, r3
 800ff56:	f7fe fbe3 	bl	800e720 <ld_word>
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ff5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d101      	bne.n	800ff68 <find_volume+0x28c>
 800ff64:	230d      	movs	r3, #13
 800ff66:	e0fa      	b.n	801015e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ff68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ff6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff6c:	4413      	add	r3, r2
 800ff6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff70:	8912      	ldrh	r2, [r2, #8]
 800ff72:	09d2      	lsrs	r2, r2, #7
 800ff74:	b292      	uxth	r2, r2
 800ff76:	4413      	add	r3, r2
 800ff78:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ff7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d204      	bcs.n	800ff8c <find_volume+0x2b0>
 800ff82:	230d      	movs	r3, #13
 800ff84:	e0eb      	b.n	801015e <find_volume+0x482>
 800ff86:	bf00      	nop
 800ff88:	20004140 	.word	0x20004140
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ff8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff90:	1ad3      	subs	r3, r2, r3
 800ff92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff94:	8952      	ldrh	r2, [r2, #10]
 800ff96:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff9a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ff9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d101      	bne.n	800ffa6 <find_volume+0x2ca>
 800ffa2:	230d      	movs	r3, #13
 800ffa4:	e0db      	b.n	801015e <find_volume+0x482>
		fmt = FS_FAT32;
 800ffa6:	2303      	movs	r3, #3
 800ffa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ffac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffae:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	d802      	bhi.n	800ffbc <find_volume+0x2e0>
 800ffb6:	2302      	movs	r3, #2
 800ffb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ffbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffbe:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ffc2:	4293      	cmp	r3, r2
 800ffc4:	d802      	bhi.n	800ffcc <find_volume+0x2f0>
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ffcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffce:	1c9a      	adds	r2, r3, #2
 800ffd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800ffd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ffd8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ffda:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ffdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffde:	441a      	add	r2, r3
 800ffe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800ffe4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ffe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe8:	441a      	add	r2, r3
 800ffea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffec:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800ffee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fff2:	2b03      	cmp	r3, #3
 800fff4:	d11e      	bne.n	8010034 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff8:	3330      	adds	r3, #48	; 0x30
 800fffa:	332a      	adds	r3, #42	; 0x2a
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7fe fb8f 	bl	800e720 <ld_word>
 8010002:	4603      	mov	r3, r0
 8010004:	2b00      	cmp	r3, #0
 8010006:	d001      	beq.n	801000c <find_volume+0x330>
 8010008:	230d      	movs	r3, #13
 801000a:	e0a8      	b.n	801015e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801000c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801000e:	891b      	ldrh	r3, [r3, #8]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d001      	beq.n	8010018 <find_volume+0x33c>
 8010014:	230d      	movs	r3, #13
 8010016:	e0a2      	b.n	801015e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801001a:	3330      	adds	r3, #48	; 0x30
 801001c:	332c      	adds	r3, #44	; 0x2c
 801001e:	4618      	mov	r0, r3
 8010020:	f7fe fb96 	bl	800e750 <ld_dword>
 8010024:	4602      	mov	r2, r0
 8010026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010028:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801002a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801002c:	695b      	ldr	r3, [r3, #20]
 801002e:	009b      	lsls	r3, r3, #2
 8010030:	647b      	str	r3, [r7, #68]	; 0x44
 8010032:	e01f      	b.n	8010074 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010036:	891b      	ldrh	r3, [r3, #8]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d101      	bne.n	8010040 <find_volume+0x364>
 801003c:	230d      	movs	r3, #13
 801003e:	e08e      	b.n	801015e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010042:	6a1a      	ldr	r2, [r3, #32]
 8010044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010046:	441a      	add	r2, r3
 8010048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801004a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801004c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010050:	2b02      	cmp	r3, #2
 8010052:	d103      	bne.n	801005c <find_volume+0x380>
 8010054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010056:	695b      	ldr	r3, [r3, #20]
 8010058:	005b      	lsls	r3, r3, #1
 801005a:	e00a      	b.n	8010072 <find_volume+0x396>
 801005c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801005e:	695a      	ldr	r2, [r3, #20]
 8010060:	4613      	mov	r3, r2
 8010062:	005b      	lsls	r3, r3, #1
 8010064:	4413      	add	r3, r2
 8010066:	085a      	lsrs	r2, r3, #1
 8010068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801006a:	695b      	ldr	r3, [r3, #20]
 801006c:	f003 0301 	and.w	r3, r3, #1
 8010070:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010072:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010076:	699a      	ldr	r2, [r3, #24]
 8010078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801007a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 801007e:	0b1b      	lsrs	r3, r3, #12
 8010080:	429a      	cmp	r2, r3
 8010082:	d201      	bcs.n	8010088 <find_volume+0x3ac>
 8010084:	230d      	movs	r3, #13
 8010086:	e06a      	b.n	801015e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801008a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801008e:	611a      	str	r2, [r3, #16]
 8010090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010092:	691a      	ldr	r2, [r3, #16]
 8010094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010096:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8010098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801009a:	2280      	movs	r2, #128	; 0x80
 801009c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801009e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80100a2:	2b03      	cmp	r3, #3
 80100a4:	d149      	bne.n	801013a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80100a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a8:	3330      	adds	r3, #48	; 0x30
 80100aa:	3330      	adds	r3, #48	; 0x30
 80100ac:	4618      	mov	r0, r3
 80100ae:	f7fe fb37 	bl	800e720 <ld_word>
 80100b2:	4603      	mov	r3, r0
 80100b4:	2b01      	cmp	r3, #1
 80100b6:	d140      	bne.n	801013a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80100b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100ba:	3301      	adds	r3, #1
 80100bc:	4619      	mov	r1, r3
 80100be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80100c0:	f7fe fdde 	bl	800ec80 <move_window>
 80100c4:	4603      	mov	r3, r0
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d137      	bne.n	801013a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80100ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100cc:	2200      	movs	r2, #0
 80100ce:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80100d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100d2:	3330      	adds	r3, #48	; 0x30
 80100d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80100d8:	4618      	mov	r0, r3
 80100da:	f7fe fb21 	bl	800e720 <ld_word>
 80100de:	4603      	mov	r3, r0
 80100e0:	461a      	mov	r2, r3
 80100e2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d127      	bne.n	801013a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80100ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ec:	3330      	adds	r3, #48	; 0x30
 80100ee:	4618      	mov	r0, r3
 80100f0:	f7fe fb2e 	bl	800e750 <ld_dword>
 80100f4:	4603      	mov	r3, r0
 80100f6:	4a1c      	ldr	r2, [pc, #112]	; (8010168 <find_volume+0x48c>)
 80100f8:	4293      	cmp	r3, r2
 80100fa:	d11e      	bne.n	801013a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80100fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100fe:	3330      	adds	r3, #48	; 0x30
 8010100:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010104:	4618      	mov	r0, r3
 8010106:	f7fe fb23 	bl	800e750 <ld_dword>
 801010a:	4603      	mov	r3, r0
 801010c:	4a17      	ldr	r2, [pc, #92]	; (801016c <find_volume+0x490>)
 801010e:	4293      	cmp	r3, r2
 8010110:	d113      	bne.n	801013a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010114:	3330      	adds	r3, #48	; 0x30
 8010116:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801011a:	4618      	mov	r0, r3
 801011c:	f7fe fb18 	bl	800e750 <ld_dword>
 8010120:	4602      	mov	r2, r0
 8010122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010124:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010128:	3330      	adds	r3, #48	; 0x30
 801012a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801012e:	4618      	mov	r0, r3
 8010130:	f7fe fb0e 	bl	800e750 <ld_dword>
 8010134:	4602      	mov	r2, r0
 8010136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010138:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801013a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801013c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010140:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010142:	4b0b      	ldr	r3, [pc, #44]	; (8010170 <find_volume+0x494>)
 8010144:	881b      	ldrh	r3, [r3, #0]
 8010146:	3301      	adds	r3, #1
 8010148:	b29a      	uxth	r2, r3
 801014a:	4b09      	ldr	r3, [pc, #36]	; (8010170 <find_volume+0x494>)
 801014c:	801a      	strh	r2, [r3, #0]
 801014e:	4b08      	ldr	r3, [pc, #32]	; (8010170 <find_volume+0x494>)
 8010150:	881a      	ldrh	r2, [r3, #0]
 8010152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010154:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010156:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010158:	f7fe fd2a 	bl	800ebb0 <clear_lock>
#endif
	return FR_OK;
 801015c:	2300      	movs	r3, #0
}
 801015e:	4618      	mov	r0, r3
 8010160:	3758      	adds	r7, #88	; 0x58
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}
 8010166:	bf00      	nop
 8010168:	41615252 	.word	0x41615252
 801016c:	61417272 	.word	0x61417272
 8010170:	20004144 	.word	0x20004144

08010174 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b084      	sub	sp, #16
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
 801017c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801017e:	2309      	movs	r3, #9
 8010180:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d01c      	beq.n	80101c2 <validate+0x4e>
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d018      	beq.n	80101c2 <validate+0x4e>
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	781b      	ldrb	r3, [r3, #0]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d013      	beq.n	80101c2 <validate+0x4e>
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	889a      	ldrh	r2, [r3, #4]
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	88db      	ldrh	r3, [r3, #6]
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d10c      	bne.n	80101c2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	785b      	ldrb	r3, [r3, #1]
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7fe fa18 	bl	800e5e4 <disk_status>
 80101b4:	4603      	mov	r3, r0
 80101b6:	f003 0301 	and.w	r3, r3, #1
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d101      	bne.n	80101c2 <validate+0x4e>
			res = FR_OK;
 80101be:	2300      	movs	r3, #0
 80101c0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80101c2:	7bfb      	ldrb	r3, [r7, #15]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d102      	bne.n	80101ce <validate+0x5a>
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	e000      	b.n	80101d0 <validate+0x5c>
 80101ce:	2300      	movs	r3, #0
 80101d0:	683a      	ldr	r2, [r7, #0]
 80101d2:	6013      	str	r3, [r2, #0]
	return res;
 80101d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80101d6:	4618      	mov	r0, r3
 80101d8:	3710      	adds	r7, #16
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd80      	pop	{r7, pc}
	...

080101e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b088      	sub	sp, #32
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	60f8      	str	r0, [r7, #12]
 80101e8:	60b9      	str	r1, [r7, #8]
 80101ea:	4613      	mov	r3, r2
 80101ec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80101f2:	f107 0310 	add.w	r3, r7, #16
 80101f6:	4618      	mov	r0, r3
 80101f8:	f7ff fcd5 	bl	800fba6 <get_ldnumber>
 80101fc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80101fe:	69fb      	ldr	r3, [r7, #28]
 8010200:	2b00      	cmp	r3, #0
 8010202:	da01      	bge.n	8010208 <f_mount+0x28>
 8010204:	230b      	movs	r3, #11
 8010206:	e02b      	b.n	8010260 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010208:	4a17      	ldr	r2, [pc, #92]	; (8010268 <f_mount+0x88>)
 801020a:	69fb      	ldr	r3, [r7, #28]
 801020c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010210:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010212:	69bb      	ldr	r3, [r7, #24]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d005      	beq.n	8010224 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010218:	69b8      	ldr	r0, [r7, #24]
 801021a:	f7fe fcc9 	bl	800ebb0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801021e:	69bb      	ldr	r3, [r7, #24]
 8010220:	2200      	movs	r2, #0
 8010222:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d002      	beq.n	8010230 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	2200      	movs	r2, #0
 801022e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010230:	68fa      	ldr	r2, [r7, #12]
 8010232:	490d      	ldr	r1, [pc, #52]	; (8010268 <f_mount+0x88>)
 8010234:	69fb      	ldr	r3, [r7, #28]
 8010236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d002      	beq.n	8010246 <f_mount+0x66>
 8010240:	79fb      	ldrb	r3, [r7, #7]
 8010242:	2b01      	cmp	r3, #1
 8010244:	d001      	beq.n	801024a <f_mount+0x6a>
 8010246:	2300      	movs	r3, #0
 8010248:	e00a      	b.n	8010260 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801024a:	f107 010c 	add.w	r1, r7, #12
 801024e:	f107 0308 	add.w	r3, r7, #8
 8010252:	2200      	movs	r2, #0
 8010254:	4618      	mov	r0, r3
 8010256:	f7ff fd41 	bl	800fcdc <find_volume>
 801025a:	4603      	mov	r3, r0
 801025c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801025e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010260:	4618      	mov	r0, r3
 8010262:	3720      	adds	r7, #32
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}
 8010268:	20004140 	.word	0x20004140

0801026c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b098      	sub	sp, #96	; 0x60
 8010270:	af00      	add	r7, sp, #0
 8010272:	60f8      	str	r0, [r7, #12]
 8010274:	60b9      	str	r1, [r7, #8]
 8010276:	4613      	mov	r3, r2
 8010278:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d101      	bne.n	8010284 <f_open+0x18>
 8010280:	2309      	movs	r3, #9
 8010282:	e1ad      	b.n	80105e0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010284:	79fb      	ldrb	r3, [r7, #7]
 8010286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801028a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801028c:	79fa      	ldrb	r2, [r7, #7]
 801028e:	f107 0110 	add.w	r1, r7, #16
 8010292:	f107 0308 	add.w	r3, r7, #8
 8010296:	4618      	mov	r0, r3
 8010298:	f7ff fd20 	bl	800fcdc <find_volume>
 801029c:	4603      	mov	r3, r0
 801029e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80102a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	f040 8191 	bne.w	80105ce <f_open+0x362>
		dj.obj.fs = fs;
 80102ac:	693b      	ldr	r3, [r7, #16]
 80102ae:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80102b0:	68ba      	ldr	r2, [r7, #8]
 80102b2:	f107 0314 	add.w	r3, r7, #20
 80102b6:	4611      	mov	r1, r2
 80102b8:	4618      	mov	r0, r3
 80102ba:	f7ff fc03 	bl	800fac4 <follow_path>
 80102be:	4603      	mov	r3, r0
 80102c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80102c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d11a      	bne.n	8010302 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80102cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80102d0:	b25b      	sxtb	r3, r3
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	da03      	bge.n	80102de <f_open+0x72>
				res = FR_INVALID_NAME;
 80102d6:	2306      	movs	r3, #6
 80102d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80102dc:	e011      	b.n	8010302 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80102de:	79fb      	ldrb	r3, [r7, #7]
 80102e0:	f023 0301 	bic.w	r3, r3, #1
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	bf14      	ite	ne
 80102e8:	2301      	movne	r3, #1
 80102ea:	2300      	moveq	r3, #0
 80102ec:	b2db      	uxtb	r3, r3
 80102ee:	461a      	mov	r2, r3
 80102f0:	f107 0314 	add.w	r3, r7, #20
 80102f4:	4611      	mov	r1, r2
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7fe fb12 	bl	800e920 <chk_lock>
 80102fc:	4603      	mov	r3, r0
 80102fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010302:	79fb      	ldrb	r3, [r7, #7]
 8010304:	f003 031c 	and.w	r3, r3, #28
 8010308:	2b00      	cmp	r3, #0
 801030a:	d07f      	beq.n	801040c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801030c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010310:	2b00      	cmp	r3, #0
 8010312:	d017      	beq.n	8010344 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010314:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010318:	2b04      	cmp	r3, #4
 801031a:	d10e      	bne.n	801033a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801031c:	f7fe fb5c 	bl	800e9d8 <enq_lock>
 8010320:	4603      	mov	r3, r0
 8010322:	2b00      	cmp	r3, #0
 8010324:	d006      	beq.n	8010334 <f_open+0xc8>
 8010326:	f107 0314 	add.w	r3, r7, #20
 801032a:	4618      	mov	r0, r3
 801032c:	f7ff faa5 	bl	800f87a <dir_register>
 8010330:	4603      	mov	r3, r0
 8010332:	e000      	b.n	8010336 <f_open+0xca>
 8010334:	2312      	movs	r3, #18
 8010336:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801033a:	79fb      	ldrb	r3, [r7, #7]
 801033c:	f043 0308 	orr.w	r3, r3, #8
 8010340:	71fb      	strb	r3, [r7, #7]
 8010342:	e010      	b.n	8010366 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010344:	7ebb      	ldrb	r3, [r7, #26]
 8010346:	f003 0311 	and.w	r3, r3, #17
 801034a:	2b00      	cmp	r3, #0
 801034c:	d003      	beq.n	8010356 <f_open+0xea>
					res = FR_DENIED;
 801034e:	2307      	movs	r3, #7
 8010350:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010354:	e007      	b.n	8010366 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010356:	79fb      	ldrb	r3, [r7, #7]
 8010358:	f003 0304 	and.w	r3, r3, #4
 801035c:	2b00      	cmp	r3, #0
 801035e:	d002      	beq.n	8010366 <f_open+0xfa>
 8010360:	2308      	movs	r3, #8
 8010362:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010366:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801036a:	2b00      	cmp	r3, #0
 801036c:	d168      	bne.n	8010440 <f_open+0x1d4>
 801036e:	79fb      	ldrb	r3, [r7, #7]
 8010370:	f003 0308 	and.w	r3, r3, #8
 8010374:	2b00      	cmp	r3, #0
 8010376:	d063      	beq.n	8010440 <f_open+0x1d4>
				dw = GET_FATTIME();
 8010378:	f7fe f866 	bl	800e448 <get_fattime>
 801037c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801037e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010380:	330e      	adds	r3, #14
 8010382:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010384:	4618      	mov	r0, r3
 8010386:	f7fe fa21 	bl	800e7cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801038a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801038c:	3316      	adds	r3, #22
 801038e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010390:	4618      	mov	r0, r3
 8010392:	f7fe fa1b 	bl	800e7cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010398:	330b      	adds	r3, #11
 801039a:	2220      	movs	r2, #32
 801039c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801039e:	693b      	ldr	r3, [r7, #16]
 80103a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103a2:	4611      	mov	r1, r2
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7ff f977 	bl	800f698 <ld_clust>
 80103aa:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80103ac:	693b      	ldr	r3, [r7, #16]
 80103ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80103b0:	2200      	movs	r2, #0
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7ff f98f 	bl	800f6d6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80103b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103ba:	331c      	adds	r3, #28
 80103bc:	2100      	movs	r1, #0
 80103be:	4618      	mov	r0, r3
 80103c0:	f7fe fa04 	bl	800e7cc <st_dword>
					fs->wflag = 1;
 80103c4:	693b      	ldr	r3, [r7, #16]
 80103c6:	2201      	movs	r2, #1
 80103c8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80103ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d037      	beq.n	8010440 <f_open+0x1d4>
						dw = fs->winsect;
 80103d0:	693b      	ldr	r3, [r7, #16]
 80103d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103d4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80103d6:	f107 0314 	add.w	r3, r7, #20
 80103da:	2200      	movs	r2, #0
 80103dc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80103de:	4618      	mov	r0, r3
 80103e0:	f7fe fea2 	bl	800f128 <remove_chain>
 80103e4:	4603      	mov	r3, r0
 80103e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80103ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d126      	bne.n	8010440 <f_open+0x1d4>
							res = move_window(fs, dw);
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7fe fc42 	bl	800ec80 <move_window>
 80103fc:	4603      	mov	r3, r0
 80103fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010406:	3a01      	subs	r2, #1
 8010408:	60da      	str	r2, [r3, #12]
 801040a:	e019      	b.n	8010440 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801040c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010410:	2b00      	cmp	r3, #0
 8010412:	d115      	bne.n	8010440 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010414:	7ebb      	ldrb	r3, [r7, #26]
 8010416:	f003 0310 	and.w	r3, r3, #16
 801041a:	2b00      	cmp	r3, #0
 801041c:	d003      	beq.n	8010426 <f_open+0x1ba>
					res = FR_NO_FILE;
 801041e:	2304      	movs	r3, #4
 8010420:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010424:	e00c      	b.n	8010440 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010426:	79fb      	ldrb	r3, [r7, #7]
 8010428:	f003 0302 	and.w	r3, r3, #2
 801042c:	2b00      	cmp	r3, #0
 801042e:	d007      	beq.n	8010440 <f_open+0x1d4>
 8010430:	7ebb      	ldrb	r3, [r7, #26]
 8010432:	f003 0301 	and.w	r3, r3, #1
 8010436:	2b00      	cmp	r3, #0
 8010438:	d002      	beq.n	8010440 <f_open+0x1d4>
						res = FR_DENIED;
 801043a:	2307      	movs	r3, #7
 801043c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010440:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010444:	2b00      	cmp	r3, #0
 8010446:	d128      	bne.n	801049a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010448:	79fb      	ldrb	r3, [r7, #7]
 801044a:	f003 0308 	and.w	r3, r3, #8
 801044e:	2b00      	cmp	r3, #0
 8010450:	d003      	beq.n	801045a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8010452:	79fb      	ldrb	r3, [r7, #7]
 8010454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010458:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010468:	79fb      	ldrb	r3, [r7, #7]
 801046a:	f023 0301 	bic.w	r3, r3, #1
 801046e:	2b00      	cmp	r3, #0
 8010470:	bf14      	ite	ne
 8010472:	2301      	movne	r3, #1
 8010474:	2300      	moveq	r3, #0
 8010476:	b2db      	uxtb	r3, r3
 8010478:	461a      	mov	r2, r3
 801047a:	f107 0314 	add.w	r3, r7, #20
 801047e:	4611      	mov	r1, r2
 8010480:	4618      	mov	r0, r3
 8010482:	f7fe facb 	bl	800ea1c <inc_lock>
 8010486:	4602      	mov	r2, r0
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	691b      	ldr	r3, [r3, #16]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d102      	bne.n	801049a <f_open+0x22e>
 8010494:	2302      	movs	r3, #2
 8010496:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801049a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801049e:	2b00      	cmp	r3, #0
 80104a0:	f040 8095 	bne.w	80105ce <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104a8:	4611      	mov	r1, r2
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7ff f8f4 	bl	800f698 <ld_clust>
 80104b0:	4602      	mov	r2, r0
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80104b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104b8:	331c      	adds	r3, #28
 80104ba:	4618      	mov	r0, r3
 80104bc:	f7fe f948 	bl	800e750 <ld_dword>
 80104c0:	4602      	mov	r2, r0
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	2200      	movs	r2, #0
 80104ca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80104cc:	693a      	ldr	r2, [r7, #16]
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80104d2:	693b      	ldr	r3, [r7, #16]
 80104d4:	88da      	ldrh	r2, [r3, #6]
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	79fa      	ldrb	r2, [r7, #7]
 80104de:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	2200      	movs	r2, #0
 80104e4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	2200      	movs	r2, #0
 80104ea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	2200      	movs	r2, #0
 80104f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	3330      	adds	r3, #48	; 0x30
 80104f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80104fa:	2100      	movs	r1, #0
 80104fc:	4618      	mov	r0, r3
 80104fe:	f7fe f9b2 	bl	800e866 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010502:	79fb      	ldrb	r3, [r7, #7]
 8010504:	f003 0320 	and.w	r3, r3, #32
 8010508:	2b00      	cmp	r3, #0
 801050a:	d060      	beq.n	80105ce <f_open+0x362>
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	68db      	ldr	r3, [r3, #12]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d05c      	beq.n	80105ce <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	68da      	ldr	r2, [r3, #12]
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	895b      	ldrh	r3, [r3, #10]
 8010520:	031b      	lsls	r3, r3, #12
 8010522:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	689b      	ldr	r3, [r3, #8]
 8010528:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	68db      	ldr	r3, [r3, #12]
 801052e:	657b      	str	r3, [r7, #84]	; 0x54
 8010530:	e016      	b.n	8010560 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010536:	4618      	mov	r0, r3
 8010538:	f7fe fc5d 	bl	800edf6 <get_fat>
 801053c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801053e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010540:	2b01      	cmp	r3, #1
 8010542:	d802      	bhi.n	801054a <f_open+0x2de>
 8010544:	2302      	movs	r3, #2
 8010546:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801054a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801054c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010550:	d102      	bne.n	8010558 <f_open+0x2ec>
 8010552:	2301      	movs	r3, #1
 8010554:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010558:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801055a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801055c:	1ad3      	subs	r3, r2, r3
 801055e:	657b      	str	r3, [r7, #84]	; 0x54
 8010560:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010564:	2b00      	cmp	r3, #0
 8010566:	d103      	bne.n	8010570 <f_open+0x304>
 8010568:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801056a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801056c:	429a      	cmp	r2, r3
 801056e:	d8e0      	bhi.n	8010532 <f_open+0x2c6>
				}
				fp->clust = clst;
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010574:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010576:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801057a:	2b00      	cmp	r3, #0
 801057c:	d127      	bne.n	80105ce <f_open+0x362>
 801057e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010584:	2b00      	cmp	r3, #0
 8010586:	d022      	beq.n	80105ce <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010588:	693b      	ldr	r3, [r7, #16]
 801058a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801058c:	4618      	mov	r0, r3
 801058e:	f7fe fc13 	bl	800edb8 <clust2sect>
 8010592:	6478      	str	r0, [r7, #68]	; 0x44
 8010594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010596:	2b00      	cmp	r3, #0
 8010598:	d103      	bne.n	80105a2 <f_open+0x336>
						res = FR_INT_ERR;
 801059a:	2302      	movs	r3, #2
 801059c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80105a0:	e015      	b.n	80105ce <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80105a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105a4:	0b1a      	lsrs	r2, r3, #12
 80105a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105a8:	441a      	add	r2, r3
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80105ae:	693b      	ldr	r3, [r7, #16]
 80105b0:	7858      	ldrb	r0, [r3, #1]
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	6a1a      	ldr	r2, [r3, #32]
 80105bc:	2301      	movs	r3, #1
 80105be:	f7fe f851 	bl	800e664 <disk_read>
 80105c2:	4603      	mov	r3, r0
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d002      	beq.n	80105ce <f_open+0x362>
 80105c8:	2301      	movs	r3, #1
 80105ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80105ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d002      	beq.n	80105dc <f_open+0x370>
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	2200      	movs	r2, #0
 80105da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80105dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	3760      	adds	r7, #96	; 0x60
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}

080105e8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b08e      	sub	sp, #56	; 0x38
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	60f8      	str	r0, [r7, #12]
 80105f0:	60b9      	str	r1, [r7, #8]
 80105f2:	607a      	str	r2, [r7, #4]
 80105f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	2200      	movs	r2, #0
 80105fe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	f107 0214 	add.w	r2, r7, #20
 8010606:	4611      	mov	r1, r2
 8010608:	4618      	mov	r0, r3
 801060a:	f7ff fdb3 	bl	8010174 <validate>
 801060e:	4603      	mov	r3, r0
 8010610:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010614:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010618:	2b00      	cmp	r3, #0
 801061a:	d107      	bne.n	801062c <f_read+0x44>
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	7d5b      	ldrb	r3, [r3, #21]
 8010620:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010624:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010628:	2b00      	cmp	r3, #0
 801062a:	d002      	beq.n	8010632 <f_read+0x4a>
 801062c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010630:	e115      	b.n	801085e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	7d1b      	ldrb	r3, [r3, #20]
 8010636:	f003 0301 	and.w	r3, r3, #1
 801063a:	2b00      	cmp	r3, #0
 801063c:	d101      	bne.n	8010642 <f_read+0x5a>
 801063e:	2307      	movs	r3, #7
 8010640:	e10d      	b.n	801085e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	68da      	ldr	r2, [r3, #12]
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	699b      	ldr	r3, [r3, #24]
 801064a:	1ad3      	subs	r3, r2, r3
 801064c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801064e:	687a      	ldr	r2, [r7, #4]
 8010650:	6a3b      	ldr	r3, [r7, #32]
 8010652:	429a      	cmp	r2, r3
 8010654:	f240 80fe 	bls.w	8010854 <f_read+0x26c>
 8010658:	6a3b      	ldr	r3, [r7, #32]
 801065a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801065c:	e0fa      	b.n	8010854 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	699b      	ldr	r3, [r3, #24]
 8010662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010666:	2b00      	cmp	r3, #0
 8010668:	f040 80c6 	bne.w	80107f8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	699b      	ldr	r3, [r3, #24]
 8010670:	0b1b      	lsrs	r3, r3, #12
 8010672:	697a      	ldr	r2, [r7, #20]
 8010674:	8952      	ldrh	r2, [r2, #10]
 8010676:	3a01      	subs	r2, #1
 8010678:	4013      	ands	r3, r2
 801067a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801067c:	69fb      	ldr	r3, [r7, #28]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d12f      	bne.n	80106e2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	699b      	ldr	r3, [r3, #24]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d103      	bne.n	8010692 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	689b      	ldr	r3, [r3, #8]
 801068e:	633b      	str	r3, [r7, #48]	; 0x30
 8010690:	e013      	b.n	80106ba <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010696:	2b00      	cmp	r3, #0
 8010698:	d007      	beq.n	80106aa <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	699b      	ldr	r3, [r3, #24]
 801069e:	4619      	mov	r1, r3
 80106a0:	68f8      	ldr	r0, [r7, #12]
 80106a2:	f7fe fe3e 	bl	800f322 <clmt_clust>
 80106a6:	6338      	str	r0, [r7, #48]	; 0x30
 80106a8:	e007      	b.n	80106ba <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80106aa:	68fa      	ldr	r2, [r7, #12]
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	69db      	ldr	r3, [r3, #28]
 80106b0:	4619      	mov	r1, r3
 80106b2:	4610      	mov	r0, r2
 80106b4:	f7fe fb9f 	bl	800edf6 <get_fat>
 80106b8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80106ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106bc:	2b01      	cmp	r3, #1
 80106be:	d804      	bhi.n	80106ca <f_read+0xe2>
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	2202      	movs	r2, #2
 80106c4:	755a      	strb	r2, [r3, #21]
 80106c6:	2302      	movs	r3, #2
 80106c8:	e0c9      	b.n	801085e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80106ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80106d0:	d104      	bne.n	80106dc <f_read+0xf4>
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	2201      	movs	r2, #1
 80106d6:	755a      	strb	r2, [r3, #21]
 80106d8:	2301      	movs	r3, #1
 80106da:	e0c0      	b.n	801085e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106e0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80106e2:	697a      	ldr	r2, [r7, #20]
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	69db      	ldr	r3, [r3, #28]
 80106e8:	4619      	mov	r1, r3
 80106ea:	4610      	mov	r0, r2
 80106ec:	f7fe fb64 	bl	800edb8 <clust2sect>
 80106f0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80106f2:	69bb      	ldr	r3, [r7, #24]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d104      	bne.n	8010702 <f_read+0x11a>
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	2202      	movs	r2, #2
 80106fc:	755a      	strb	r2, [r3, #21]
 80106fe:	2302      	movs	r3, #2
 8010700:	e0ad      	b.n	801085e <f_read+0x276>
			sect += csect;
 8010702:	69ba      	ldr	r2, [r7, #24]
 8010704:	69fb      	ldr	r3, [r7, #28]
 8010706:	4413      	add	r3, r2
 8010708:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	0b1b      	lsrs	r3, r3, #12
 801070e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010712:	2b00      	cmp	r3, #0
 8010714:	d039      	beq.n	801078a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010716:	69fa      	ldr	r2, [r7, #28]
 8010718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801071a:	4413      	add	r3, r2
 801071c:	697a      	ldr	r2, [r7, #20]
 801071e:	8952      	ldrh	r2, [r2, #10]
 8010720:	4293      	cmp	r3, r2
 8010722:	d905      	bls.n	8010730 <f_read+0x148>
					cc = fs->csize - csect;
 8010724:	697b      	ldr	r3, [r7, #20]
 8010726:	895b      	ldrh	r3, [r3, #10]
 8010728:	461a      	mov	r2, r3
 801072a:	69fb      	ldr	r3, [r7, #28]
 801072c:	1ad3      	subs	r3, r2, r3
 801072e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	7858      	ldrb	r0, [r3, #1]
 8010734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010736:	69ba      	ldr	r2, [r7, #24]
 8010738:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801073a:	f7fd ff93 	bl	800e664 <disk_read>
 801073e:	4603      	mov	r3, r0
 8010740:	2b00      	cmp	r3, #0
 8010742:	d004      	beq.n	801074e <f_read+0x166>
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	2201      	movs	r2, #1
 8010748:	755a      	strb	r2, [r3, #21]
 801074a:	2301      	movs	r3, #1
 801074c:	e087      	b.n	801085e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	7d1b      	ldrb	r3, [r3, #20]
 8010752:	b25b      	sxtb	r3, r3
 8010754:	2b00      	cmp	r3, #0
 8010756:	da14      	bge.n	8010782 <f_read+0x19a>
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	6a1a      	ldr	r2, [r3, #32]
 801075c:	69bb      	ldr	r3, [r7, #24]
 801075e:	1ad3      	subs	r3, r2, r3
 8010760:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010762:	429a      	cmp	r2, r3
 8010764:	d90d      	bls.n	8010782 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	6a1a      	ldr	r2, [r3, #32]
 801076a:	69bb      	ldr	r3, [r7, #24]
 801076c:	1ad3      	subs	r3, r2, r3
 801076e:	031b      	lsls	r3, r3, #12
 8010770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010772:	18d0      	adds	r0, r2, r3
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	3330      	adds	r3, #48	; 0x30
 8010778:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801077c:	4619      	mov	r1, r3
 801077e:	f7fe f851 	bl	800e824 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010784:	031b      	lsls	r3, r3, #12
 8010786:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010788:	e050      	b.n	801082c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	6a1b      	ldr	r3, [r3, #32]
 801078e:	69ba      	ldr	r2, [r7, #24]
 8010790:	429a      	cmp	r2, r3
 8010792:	d02e      	beq.n	80107f2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	7d1b      	ldrb	r3, [r3, #20]
 8010798:	b25b      	sxtb	r3, r3
 801079a:	2b00      	cmp	r3, #0
 801079c:	da18      	bge.n	80107d0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	7858      	ldrb	r0, [r3, #1]
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	6a1a      	ldr	r2, [r3, #32]
 80107ac:	2301      	movs	r3, #1
 80107ae:	f7fd ff79 	bl	800e6a4 <disk_write>
 80107b2:	4603      	mov	r3, r0
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d004      	beq.n	80107c2 <f_read+0x1da>
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	2201      	movs	r2, #1
 80107bc:	755a      	strb	r2, [r3, #21]
 80107be:	2301      	movs	r3, #1
 80107c0:	e04d      	b.n	801085e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	7d1b      	ldrb	r3, [r3, #20]
 80107c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107ca:	b2da      	uxtb	r2, r3
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	7858      	ldrb	r0, [r3, #1]
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80107da:	2301      	movs	r3, #1
 80107dc:	69ba      	ldr	r2, [r7, #24]
 80107de:	f7fd ff41 	bl	800e664 <disk_read>
 80107e2:	4603      	mov	r3, r0
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d004      	beq.n	80107f2 <f_read+0x20a>
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	2201      	movs	r2, #1
 80107ec:	755a      	strb	r2, [r3, #21]
 80107ee:	2301      	movs	r3, #1
 80107f0:	e035      	b.n	801085e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	69ba      	ldr	r2, [r7, #24]
 80107f6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	699b      	ldr	r3, [r3, #24]
 80107fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010800:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8010804:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	429a      	cmp	r2, r3
 801080c:	d901      	bls.n	8010812 <f_read+0x22a>
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	699b      	ldr	r3, [r3, #24]
 801081c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010820:	4413      	add	r3, r2
 8010822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010824:	4619      	mov	r1, r3
 8010826:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010828:	f7fd fffc 	bl	800e824 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801082c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801082e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010830:	4413      	add	r3, r2
 8010832:	627b      	str	r3, [r7, #36]	; 0x24
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	699a      	ldr	r2, [r3, #24]
 8010838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801083a:	441a      	add	r2, r3
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	619a      	str	r2, [r3, #24]
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	681a      	ldr	r2, [r3, #0]
 8010844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010846:	441a      	add	r2, r3
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	601a      	str	r2, [r3, #0]
 801084c:	687a      	ldr	r2, [r7, #4]
 801084e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010850:	1ad3      	subs	r3, r2, r3
 8010852:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2b00      	cmp	r3, #0
 8010858:	f47f af01 	bne.w	801065e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801085c:	2300      	movs	r3, #0
}
 801085e:	4618      	mov	r0, r3
 8010860:	3738      	adds	r7, #56	; 0x38
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}

08010866 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010866:	b580      	push	{r7, lr}
 8010868:	b08c      	sub	sp, #48	; 0x30
 801086a:	af00      	add	r7, sp, #0
 801086c:	60f8      	str	r0, [r7, #12]
 801086e:	60b9      	str	r1, [r7, #8]
 8010870:	607a      	str	r2, [r7, #4]
 8010872:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010878:	683b      	ldr	r3, [r7, #0]
 801087a:	2200      	movs	r2, #0
 801087c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	f107 0210 	add.w	r2, r7, #16
 8010884:	4611      	mov	r1, r2
 8010886:	4618      	mov	r0, r3
 8010888:	f7ff fc74 	bl	8010174 <validate>
 801088c:	4603      	mov	r3, r0
 801088e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010892:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010896:	2b00      	cmp	r3, #0
 8010898:	d107      	bne.n	80108aa <f_write+0x44>
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	7d5b      	ldrb	r3, [r3, #21]
 801089e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80108a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d002      	beq.n	80108b0 <f_write+0x4a>
 80108aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108ae:	e14b      	b.n	8010b48 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	7d1b      	ldrb	r3, [r3, #20]
 80108b4:	f003 0302 	and.w	r3, r3, #2
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d101      	bne.n	80108c0 <f_write+0x5a>
 80108bc:	2307      	movs	r3, #7
 80108be:	e143      	b.n	8010b48 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	699a      	ldr	r2, [r3, #24]
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	441a      	add	r2, r3
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	699b      	ldr	r3, [r3, #24]
 80108cc:	429a      	cmp	r2, r3
 80108ce:	f080 812d 	bcs.w	8010b2c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	699b      	ldr	r3, [r3, #24]
 80108d6:	43db      	mvns	r3, r3
 80108d8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80108da:	e127      	b.n	8010b2c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	699b      	ldr	r3, [r3, #24]
 80108e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	f040 80e3 	bne.w	8010ab0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	699b      	ldr	r3, [r3, #24]
 80108ee:	0b1b      	lsrs	r3, r3, #12
 80108f0:	693a      	ldr	r2, [r7, #16]
 80108f2:	8952      	ldrh	r2, [r2, #10]
 80108f4:	3a01      	subs	r2, #1
 80108f6:	4013      	ands	r3, r2
 80108f8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80108fa:	69bb      	ldr	r3, [r7, #24]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d143      	bne.n	8010988 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	699b      	ldr	r3, [r3, #24]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d10c      	bne.n	8010922 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	689b      	ldr	r3, [r3, #8]
 801090c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801090e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010910:	2b00      	cmp	r3, #0
 8010912:	d11a      	bne.n	801094a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	2100      	movs	r1, #0
 8010918:	4618      	mov	r0, r3
 801091a:	f7fe fc6a 	bl	800f1f2 <create_chain>
 801091e:	62b8      	str	r0, [r7, #40]	; 0x28
 8010920:	e013      	b.n	801094a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010926:	2b00      	cmp	r3, #0
 8010928:	d007      	beq.n	801093a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	699b      	ldr	r3, [r3, #24]
 801092e:	4619      	mov	r1, r3
 8010930:	68f8      	ldr	r0, [r7, #12]
 8010932:	f7fe fcf6 	bl	800f322 <clmt_clust>
 8010936:	62b8      	str	r0, [r7, #40]	; 0x28
 8010938:	e007      	b.n	801094a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801093a:	68fa      	ldr	r2, [r7, #12]
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	69db      	ldr	r3, [r3, #28]
 8010940:	4619      	mov	r1, r3
 8010942:	4610      	mov	r0, r2
 8010944:	f7fe fc55 	bl	800f1f2 <create_chain>
 8010948:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801094a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801094c:	2b00      	cmp	r3, #0
 801094e:	f000 80f2 	beq.w	8010b36 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010954:	2b01      	cmp	r3, #1
 8010956:	d104      	bne.n	8010962 <f_write+0xfc>
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	2202      	movs	r2, #2
 801095c:	755a      	strb	r2, [r3, #21]
 801095e:	2302      	movs	r3, #2
 8010960:	e0f2      	b.n	8010b48 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010964:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010968:	d104      	bne.n	8010974 <f_write+0x10e>
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	2201      	movs	r2, #1
 801096e:	755a      	strb	r2, [r3, #21]
 8010970:	2301      	movs	r3, #1
 8010972:	e0e9      	b.n	8010b48 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010978:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	689b      	ldr	r3, [r3, #8]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d102      	bne.n	8010988 <f_write+0x122>
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010986:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	7d1b      	ldrb	r3, [r3, #20]
 801098c:	b25b      	sxtb	r3, r3
 801098e:	2b00      	cmp	r3, #0
 8010990:	da18      	bge.n	80109c4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010992:	693b      	ldr	r3, [r7, #16]
 8010994:	7858      	ldrb	r0, [r3, #1]
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	6a1a      	ldr	r2, [r3, #32]
 80109a0:	2301      	movs	r3, #1
 80109a2:	f7fd fe7f 	bl	800e6a4 <disk_write>
 80109a6:	4603      	mov	r3, r0
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d004      	beq.n	80109b6 <f_write+0x150>
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	2201      	movs	r2, #1
 80109b0:	755a      	strb	r2, [r3, #21]
 80109b2:	2301      	movs	r3, #1
 80109b4:	e0c8      	b.n	8010b48 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	7d1b      	ldrb	r3, [r3, #20]
 80109ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109be:	b2da      	uxtb	r2, r3
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80109c4:	693a      	ldr	r2, [r7, #16]
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	69db      	ldr	r3, [r3, #28]
 80109ca:	4619      	mov	r1, r3
 80109cc:	4610      	mov	r0, r2
 80109ce:	f7fe f9f3 	bl	800edb8 <clust2sect>
 80109d2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d104      	bne.n	80109e4 <f_write+0x17e>
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	2202      	movs	r2, #2
 80109de:	755a      	strb	r2, [r3, #21]
 80109e0:	2302      	movs	r3, #2
 80109e2:	e0b1      	b.n	8010b48 <f_write+0x2e2>
			sect += csect;
 80109e4:	697a      	ldr	r2, [r7, #20]
 80109e6:	69bb      	ldr	r3, [r7, #24]
 80109e8:	4413      	add	r3, r2
 80109ea:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	0b1b      	lsrs	r3, r3, #12
 80109f0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80109f2:	6a3b      	ldr	r3, [r7, #32]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d03c      	beq.n	8010a72 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80109f8:	69ba      	ldr	r2, [r7, #24]
 80109fa:	6a3b      	ldr	r3, [r7, #32]
 80109fc:	4413      	add	r3, r2
 80109fe:	693a      	ldr	r2, [r7, #16]
 8010a00:	8952      	ldrh	r2, [r2, #10]
 8010a02:	4293      	cmp	r3, r2
 8010a04:	d905      	bls.n	8010a12 <f_write+0x1ac>
					cc = fs->csize - csect;
 8010a06:	693b      	ldr	r3, [r7, #16]
 8010a08:	895b      	ldrh	r3, [r3, #10]
 8010a0a:	461a      	mov	r2, r3
 8010a0c:	69bb      	ldr	r3, [r7, #24]
 8010a0e:	1ad3      	subs	r3, r2, r3
 8010a10:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010a12:	693b      	ldr	r3, [r7, #16]
 8010a14:	7858      	ldrb	r0, [r3, #1]
 8010a16:	6a3b      	ldr	r3, [r7, #32]
 8010a18:	697a      	ldr	r2, [r7, #20]
 8010a1a:	69f9      	ldr	r1, [r7, #28]
 8010a1c:	f7fd fe42 	bl	800e6a4 <disk_write>
 8010a20:	4603      	mov	r3, r0
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d004      	beq.n	8010a30 <f_write+0x1ca>
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	2201      	movs	r2, #1
 8010a2a:	755a      	strb	r2, [r3, #21]
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	e08b      	b.n	8010b48 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	6a1a      	ldr	r2, [r3, #32]
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	1ad3      	subs	r3, r2, r3
 8010a38:	6a3a      	ldr	r2, [r7, #32]
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d915      	bls.n	8010a6a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	6a1a      	ldr	r2, [r3, #32]
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	1ad3      	subs	r3, r2, r3
 8010a4c:	031b      	lsls	r3, r3, #12
 8010a4e:	69fa      	ldr	r2, [r7, #28]
 8010a50:	4413      	add	r3, r2
 8010a52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010a56:	4619      	mov	r1, r3
 8010a58:	f7fd fee4 	bl	800e824 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	7d1b      	ldrb	r3, [r3, #20]
 8010a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a64:	b2da      	uxtb	r2, r3
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010a6a:	6a3b      	ldr	r3, [r7, #32]
 8010a6c:	031b      	lsls	r3, r3, #12
 8010a6e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010a70:	e03f      	b.n	8010af2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	6a1b      	ldr	r3, [r3, #32]
 8010a76:	697a      	ldr	r2, [r7, #20]
 8010a78:	429a      	cmp	r2, r3
 8010a7a:	d016      	beq.n	8010aaa <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	699a      	ldr	r2, [r3, #24]
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010a84:	429a      	cmp	r2, r3
 8010a86:	d210      	bcs.n	8010aaa <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010a88:	693b      	ldr	r3, [r7, #16]
 8010a8a:	7858      	ldrb	r0, [r3, #1]
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a92:	2301      	movs	r3, #1
 8010a94:	697a      	ldr	r2, [r7, #20]
 8010a96:	f7fd fde5 	bl	800e664 <disk_read>
 8010a9a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d004      	beq.n	8010aaa <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	2201      	movs	r2, #1
 8010aa4:	755a      	strb	r2, [r3, #21]
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	e04e      	b.n	8010b48 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	697a      	ldr	r2, [r7, #20]
 8010aae:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	699b      	ldr	r3, [r3, #24]
 8010ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010ab8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8010abc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	429a      	cmp	r2, r3
 8010ac4:	d901      	bls.n	8010aca <f_write+0x264>
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	699b      	ldr	r3, [r3, #24]
 8010ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010ad8:	4413      	add	r3, r2
 8010ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010adc:	69f9      	ldr	r1, [r7, #28]
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f7fd fea0 	bl	800e824 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	7d1b      	ldrb	r3, [r3, #20]
 8010ae8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010aec:	b2da      	uxtb	r2, r3
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010af2:	69fa      	ldr	r2, [r7, #28]
 8010af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af6:	4413      	add	r3, r2
 8010af8:	61fb      	str	r3, [r7, #28]
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	699a      	ldr	r2, [r3, #24]
 8010afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b00:	441a      	add	r2, r3
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	619a      	str	r2, [r3, #24]
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	68da      	ldr	r2, [r3, #12]
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	699b      	ldr	r3, [r3, #24]
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	bf38      	it	cc
 8010b12:	461a      	movcc	r2, r3
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	60da      	str	r2, [r3, #12]
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	681a      	ldr	r2, [r3, #0]
 8010b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b1e:	441a      	add	r2, r3
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	601a      	str	r2, [r3, #0]
 8010b24:	687a      	ldr	r2, [r7, #4]
 8010b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b28:	1ad3      	subs	r3, r2, r3
 8010b2a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	f47f aed4 	bne.w	80108dc <f_write+0x76>
 8010b34:	e000      	b.n	8010b38 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010b36:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	7d1b      	ldrb	r3, [r3, #20]
 8010b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b40:	b2da      	uxtb	r2, r3
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010b46:	2300      	movs	r3, #0
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	3730      	adds	r7, #48	; 0x30
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	bd80      	pop	{r7, pc}

08010b50 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b086      	sub	sp, #24
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f107 0208 	add.w	r2, r7, #8
 8010b5e:	4611      	mov	r1, r2
 8010b60:	4618      	mov	r0, r3
 8010b62:	f7ff fb07 	bl	8010174 <validate>
 8010b66:	4603      	mov	r3, r0
 8010b68:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010b6a:	7dfb      	ldrb	r3, [r7, #23]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d168      	bne.n	8010c42 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	7d1b      	ldrb	r3, [r3, #20]
 8010b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d062      	beq.n	8010c42 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	7d1b      	ldrb	r3, [r3, #20]
 8010b80:	b25b      	sxtb	r3, r3
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	da15      	bge.n	8010bb2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010b86:	68bb      	ldr	r3, [r7, #8]
 8010b88:	7858      	ldrb	r0, [r3, #1]
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	6a1a      	ldr	r2, [r3, #32]
 8010b94:	2301      	movs	r3, #1
 8010b96:	f7fd fd85 	bl	800e6a4 <disk_write>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d001      	beq.n	8010ba4 <f_sync+0x54>
 8010ba0:	2301      	movs	r3, #1
 8010ba2:	e04f      	b.n	8010c44 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	7d1b      	ldrb	r3, [r3, #20]
 8010ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bac:	b2da      	uxtb	r2, r3
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010bb2:	f7fd fc49 	bl	800e448 <get_fattime>
 8010bb6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010bb8:	68ba      	ldr	r2, [r7, #8]
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bbe:	4619      	mov	r1, r3
 8010bc0:	4610      	mov	r0, r2
 8010bc2:	f7fe f85d 	bl	800ec80 <move_window>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010bca:	7dfb      	ldrb	r3, [r7, #23]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d138      	bne.n	8010c42 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bd4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	330b      	adds	r3, #11
 8010bda:	781a      	ldrb	r2, [r3, #0]
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	330b      	adds	r3, #11
 8010be0:	f042 0220 	orr.w	r2, r2, #32
 8010be4:	b2d2      	uxtb	r2, r2
 8010be6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	6818      	ldr	r0, [r3, #0]
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	689b      	ldr	r3, [r3, #8]
 8010bf0:	461a      	mov	r2, r3
 8010bf2:	68f9      	ldr	r1, [r7, #12]
 8010bf4:	f7fe fd6f 	bl	800f6d6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	f103 021c 	add.w	r2, r3, #28
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	68db      	ldr	r3, [r3, #12]
 8010c02:	4619      	mov	r1, r3
 8010c04:	4610      	mov	r0, r2
 8010c06:	f7fd fde1 	bl	800e7cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	3316      	adds	r3, #22
 8010c0e:	6939      	ldr	r1, [r7, #16]
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7fd fddb 	bl	800e7cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	3312      	adds	r3, #18
 8010c1a:	2100      	movs	r1, #0
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f7fd fdba 	bl	800e796 <st_word>
					fs->wflag = 1;
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	2201      	movs	r2, #1
 8010c26:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7fe f856 	bl	800ecdc <sync_fs>
 8010c30:	4603      	mov	r3, r0
 8010c32:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	7d1b      	ldrb	r3, [r3, #20]
 8010c38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c3c:	b2da      	uxtb	r2, r3
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c44:	4618      	mov	r0, r3
 8010c46:	3718      	adds	r7, #24
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	bd80      	pop	{r7, pc}

08010c4c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b084      	sub	sp, #16
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f7ff ff7b 	bl	8010b50 <f_sync>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010c5e:	7bfb      	ldrb	r3, [r7, #15]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d118      	bne.n	8010c96 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f107 0208 	add.w	r2, r7, #8
 8010c6a:	4611      	mov	r1, r2
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7ff fa81 	bl	8010174 <validate>
 8010c72:	4603      	mov	r3, r0
 8010c74:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010c76:	7bfb      	ldrb	r3, [r7, #15]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d10c      	bne.n	8010c96 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	691b      	ldr	r3, [r3, #16]
 8010c80:	4618      	mov	r0, r3
 8010c82:	f7fd ff59 	bl	800eb38 <dec_lock>
 8010c86:	4603      	mov	r3, r0
 8010c88:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010c8a:	7bfb      	ldrb	r3, [r7, #15]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d102      	bne.n	8010c96 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2200      	movs	r2, #0
 8010c94:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3710      	adds	r7, #16
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}

08010ca0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b086      	sub	sp, #24
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d101      	bne.n	8010cb4 <f_opendir+0x14>
 8010cb0:	2309      	movs	r3, #9
 8010cb2:	e064      	b.n	8010d7e <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8010cb8:	f107 010c 	add.w	r1, r7, #12
 8010cbc:	463b      	mov	r3, r7
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f7ff f80b 	bl	800fcdc <find_volume>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010cca:	7dfb      	ldrb	r3, [r7, #23]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d14f      	bne.n	8010d70 <f_opendir+0xd0>
		obj->fs = fs;
 8010cd0:	68fa      	ldr	r2, [r7, #12]
 8010cd2:	693b      	ldr	r3, [r7, #16]
 8010cd4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	4619      	mov	r1, r3
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f7fe fef2 	bl	800fac4 <follow_path>
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8010ce4:	7dfb      	ldrb	r3, [r7, #23]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d13d      	bne.n	8010d66 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010cf0:	b25b      	sxtb	r3, r3
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	db12      	blt.n	8010d1c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8010cf6:	693b      	ldr	r3, [r7, #16]
 8010cf8:	799b      	ldrb	r3, [r3, #6]
 8010cfa:	f003 0310 	and.w	r3, r3, #16
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d00a      	beq.n	8010d18 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8010d02:	68fa      	ldr	r2, [r7, #12]
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	6a1b      	ldr	r3, [r3, #32]
 8010d08:	4619      	mov	r1, r3
 8010d0a:	4610      	mov	r0, r2
 8010d0c:	f7fe fcc4 	bl	800f698 <ld_clust>
 8010d10:	4602      	mov	r2, r0
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	609a      	str	r2, [r3, #8]
 8010d16:	e001      	b.n	8010d1c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8010d18:	2305      	movs	r3, #5
 8010d1a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8010d1c:	7dfb      	ldrb	r3, [r7, #23]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d121      	bne.n	8010d66 <f_opendir+0xc6>
				obj->id = fs->id;
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	88da      	ldrh	r2, [r3, #6]
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8010d2a:	2100      	movs	r1, #0
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f7fe fb2c 	bl	800f38a <dir_sdi>
 8010d32:	4603      	mov	r3, r0
 8010d34:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8010d36:	7dfb      	ldrb	r3, [r7, #23]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d114      	bne.n	8010d66 <f_opendir+0xc6>
					if (obj->sclust) {
 8010d3c:	693b      	ldr	r3, [r7, #16]
 8010d3e:	689b      	ldr	r3, [r3, #8]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d00d      	beq.n	8010d60 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8010d44:	2100      	movs	r1, #0
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f7fd fe68 	bl	800ea1c <inc_lock>
 8010d4c:	4602      	mov	r2, r0
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8010d52:	693b      	ldr	r3, [r7, #16]
 8010d54:	691b      	ldr	r3, [r3, #16]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d105      	bne.n	8010d66 <f_opendir+0xc6>
 8010d5a:	2312      	movs	r3, #18
 8010d5c:	75fb      	strb	r3, [r7, #23]
 8010d5e:	e002      	b.n	8010d66 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8010d60:	693b      	ldr	r3, [r7, #16]
 8010d62:	2200      	movs	r2, #0
 8010d64:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010d66:	7dfb      	ldrb	r3, [r7, #23]
 8010d68:	2b04      	cmp	r3, #4
 8010d6a:	d101      	bne.n	8010d70 <f_opendir+0xd0>
 8010d6c:	2305      	movs	r3, #5
 8010d6e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8010d70:	7dfb      	ldrb	r3, [r7, #23]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d002      	beq.n	8010d7c <f_opendir+0xdc>
 8010d76:	693b      	ldr	r3, [r7, #16]
 8010d78:	2200      	movs	r2, #0
 8010d7a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d7e:	4618      	mov	r0, r3
 8010d80:	3718      	adds	r7, #24
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}

08010d86 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8010d86:	b580      	push	{r7, lr}
 8010d88:	b084      	sub	sp, #16
 8010d8a:	af00      	add	r7, sp, #0
 8010d8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f107 0208 	add.w	r2, r7, #8
 8010d94:	4611      	mov	r1, r2
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7ff f9ec 	bl	8010174 <validate>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010da0:	7bfb      	ldrb	r3, [r7, #15]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d110      	bne.n	8010dc8 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	691b      	ldr	r3, [r3, #16]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d006      	beq.n	8010dbc <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	691b      	ldr	r3, [r3, #16]
 8010db2:	4618      	mov	r0, r3
 8010db4:	f7fd fec0 	bl	800eb38 <dec_lock>
 8010db8:	4603      	mov	r3, r0
 8010dba:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8010dbc:	7bfb      	ldrb	r3, [r7, #15]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d102      	bne.n	8010dc8 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8010dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3710      	adds	r7, #16
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}

08010dd2 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010dd2:	b580      	push	{r7, lr}
 8010dd4:	b084      	sub	sp, #16
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	6078      	str	r0, [r7, #4]
 8010dda:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	f107 0208 	add.w	r2, r7, #8
 8010de2:	4611      	mov	r1, r2
 8010de4:	4618      	mov	r0, r3
 8010de6:	f7ff f9c5 	bl	8010174 <validate>
 8010dea:	4603      	mov	r3, r0
 8010dec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010dee:	7bfb      	ldrb	r3, [r7, #15]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d126      	bne.n	8010e42 <f_readdir+0x70>
		if (!fno) {
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d106      	bne.n	8010e08 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8010dfa:	2100      	movs	r1, #0
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f7fe fac4 	bl	800f38a <dir_sdi>
 8010e02:	4603      	mov	r3, r0
 8010e04:	73fb      	strb	r3, [r7, #15]
 8010e06:	e01c      	b.n	8010e42 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8010e08:	2100      	movs	r1, #0
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	f7fe fc83 	bl	800f716 <dir_read>
 8010e10:	4603      	mov	r3, r0
 8010e12:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8010e14:	7bfb      	ldrb	r3, [r7, #15]
 8010e16:	2b04      	cmp	r3, #4
 8010e18:	d101      	bne.n	8010e1e <f_readdir+0x4c>
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8010e1e:	7bfb      	ldrb	r3, [r7, #15]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d10e      	bne.n	8010e42 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8010e24:	6839      	ldr	r1, [r7, #0]
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f7fe fd59 	bl	800f8de <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8010e2c:	2100      	movs	r1, #0
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f7fe fb26 	bl	800f480 <dir_next>
 8010e34:	4603      	mov	r3, r0
 8010e36:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8010e38:	7bfb      	ldrb	r3, [r7, #15]
 8010e3a:	2b04      	cmp	r3, #4
 8010e3c:	d101      	bne.n	8010e42 <f_readdir+0x70>
 8010e3e:	2300      	movs	r3, #0
 8010e40:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8010e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3710      	adds	r7, #16
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}

08010e4c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8010e4c:	b590      	push	{r4, r7, lr}
 8010e4e:	b09d      	sub	sp, #116	; 0x74
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	60f8      	str	r0, [r7, #12]
 8010e54:	607a      	str	r2, [r7, #4]
 8010e56:	603b      	str	r3, [r7, #0]
 8010e58:	460b      	mov	r3, r1
 8010e5a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8010e5c:	2301      	movs	r3, #1
 8010e5e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8010e60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e64:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8010e66:	f107 030c 	add.w	r3, r7, #12
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f7fe fe9b 	bl	800fba6 <get_ldnumber>
 8010e70:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	da02      	bge.n	8010e7e <f_mkfs+0x32>
 8010e78:	230b      	movs	r3, #11
 8010e7a:	f000 bc0d 	b.w	8011698 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8010e7e:	4a94      	ldr	r2, [pc, #592]	; (80110d0 <f_mkfs+0x284>)
 8010e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d005      	beq.n	8010e96 <f_mkfs+0x4a>
 8010e8a:	4a91      	ldr	r2, [pc, #580]	; (80110d0 <f_mkfs+0x284>)
 8010e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e92:	2200      	movs	r2, #0
 8010e94:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8010e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e98:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8010ea2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f7fd fbb6 	bl	800e618 <disk_initialize>
 8010eac:	4603      	mov	r3, r0
 8010eae:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8010eb2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010eb6:	f003 0301 	and.w	r3, r3, #1
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d001      	beq.n	8010ec2 <f_mkfs+0x76>
 8010ebe:	2303      	movs	r3, #3
 8010ec0:	e3ea      	b.n	8011698 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8010ec2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8010ec6:	f003 0304 	and.w	r3, r3, #4
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d001      	beq.n	8010ed2 <f_mkfs+0x86>
 8010ece:	230a      	movs	r3, #10
 8010ed0:	e3e2      	b.n	8011698 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8010ed2:	f107 0214 	add.w	r2, r7, #20
 8010ed6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010eda:	2103      	movs	r1, #3
 8010edc:	4618      	mov	r0, r3
 8010ede:	f7fd fc01 	bl	800e6e4 <disk_ioctl>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d10c      	bne.n	8010f02 <f_mkfs+0xb6>
 8010ee8:	697b      	ldr	r3, [r7, #20]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d009      	beq.n	8010f02 <f_mkfs+0xb6>
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010ef4:	d805      	bhi.n	8010f02 <f_mkfs+0xb6>
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	1e5a      	subs	r2, r3, #1
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	4013      	ands	r3, r2
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d001      	beq.n	8010f06 <f_mkfs+0xba>
 8010f02:	2301      	movs	r3, #1
 8010f04:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8010f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010f0a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d003      	beq.n	8010f1a <f_mkfs+0xce>
 8010f12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010f14:	687a      	ldr	r2, [r7, #4]
 8010f16:	429a      	cmp	r2, r3
 8010f18:	d309      	bcc.n	8010f2e <f_mkfs+0xe2>
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010f20:	d805      	bhi.n	8010f2e <f_mkfs+0xe2>
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	1e5a      	subs	r2, r3, #1
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	4013      	ands	r3, r2
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d001      	beq.n	8010f32 <f_mkfs+0xe6>
 8010f2e:	2313      	movs	r3, #19
 8010f30:	e3b2      	b.n	8011698 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8010f32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010f34:	687a      	ldr	r2, [r7, #4]
 8010f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f3a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8010f3c:	683b      	ldr	r3, [r7, #0]
 8010f3e:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8010f40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010f42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8010f4c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f50:	fb02 f303 	mul.w	r3, r2, r3
 8010f54:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8010f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d101      	bne.n	8010f60 <f_mkfs+0x114>
 8010f5c:	230e      	movs	r3, #14
 8010f5e:	e39b      	b.n	8011698 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8010f60:	f107 0210 	add.w	r2, r7, #16
 8010f64:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010f68:	2101      	movs	r1, #1
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f7fd fbba 	bl	800e6e4 <disk_ioctl>
 8010f70:	4603      	mov	r3, r0
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d001      	beq.n	8010f7a <f_mkfs+0x12e>
 8010f76:	2301      	movs	r3, #1
 8010f78:	e38e      	b.n	8011698 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8010f7a:	7afb      	ldrb	r3, [r7, #11]
 8010f7c:	f003 0308 	and.w	r3, r3, #8
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d001      	beq.n	8010f88 <f_mkfs+0x13c>
 8010f84:	2300      	movs	r3, #0
 8010f86:	e000      	b.n	8010f8a <f_mkfs+0x13e>
 8010f88:	233f      	movs	r3, #63	; 0x3f
 8010f8a:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8010f8c:	693b      	ldr	r3, [r7, #16]
 8010f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d901      	bls.n	8010f98 <f_mkfs+0x14c>
 8010f94:	230e      	movs	r3, #14
 8010f96:	e37f      	b.n	8011698 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8010f98:	693a      	ldr	r2, [r7, #16]
 8010f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f9c:	1ad3      	subs	r3, r2, r3
 8010f9e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8010fa0:	693b      	ldr	r3, [r7, #16]
 8010fa2:	2b7f      	cmp	r3, #127	; 0x7f
 8010fa4:	d801      	bhi.n	8010faa <f_mkfs+0x15e>
 8010fa6:	230e      	movs	r3, #14
 8010fa8:	e376      	b.n	8011698 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2b80      	cmp	r3, #128	; 0x80
 8010fae:	d901      	bls.n	8010fb4 <f_mkfs+0x168>
 8010fb0:	2313      	movs	r3, #19
 8010fb2:	e371      	b.n	8011698 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8010fb4:	7afb      	ldrb	r3, [r7, #11]
 8010fb6:	f003 0302 	and.w	r3, r3, #2
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d00d      	beq.n	8010fda <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8010fbe:	7afb      	ldrb	r3, [r7, #11]
 8010fc0:	f003 0307 	and.w	r3, r3, #7
 8010fc4:	2b02      	cmp	r3, #2
 8010fc6:	d004      	beq.n	8010fd2 <f_mkfs+0x186>
 8010fc8:	7afb      	ldrb	r3, [r7, #11]
 8010fca:	f003 0301 	and.w	r3, r3, #1
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d103      	bne.n	8010fda <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8010fd2:	2303      	movs	r3, #3
 8010fd4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8010fd8:	e009      	b.n	8010fee <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8010fda:	7afb      	ldrb	r3, [r7, #11]
 8010fdc:	f003 0301 	and.w	r3, r3, #1
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d101      	bne.n	8010fe8 <f_mkfs+0x19c>
 8010fe4:	2313      	movs	r3, #19
 8010fe6:	e357      	b.n	8011698 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8010fe8:	2302      	movs	r3, #2
 8010fea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8010ff2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010ff6:	2b03      	cmp	r3, #3
 8010ff8:	d13c      	bne.n	8011074 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8010ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d11b      	bne.n	8011038 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8011000:	693b      	ldr	r3, [r7, #16]
 8011002:	0c5b      	lsrs	r3, r3, #17
 8011004:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8011006:	2300      	movs	r3, #0
 8011008:	64bb      	str	r3, [r7, #72]	; 0x48
 801100a:	2301      	movs	r3, #1
 801100c:	653b      	str	r3, [r7, #80]	; 0x50
 801100e:	e005      	b.n	801101c <f_mkfs+0x1d0>
 8011010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011012:	3301      	adds	r3, #1
 8011014:	64bb      	str	r3, [r7, #72]	; 0x48
 8011016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011018:	005b      	lsls	r3, r3, #1
 801101a:	653b      	str	r3, [r7, #80]	; 0x50
 801101c:	4a2d      	ldr	r2, [pc, #180]	; (80110d4 <f_mkfs+0x288>)
 801101e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d007      	beq.n	8011038 <f_mkfs+0x1ec>
 8011028:	4a2a      	ldr	r2, [pc, #168]	; (80110d4 <f_mkfs+0x288>)
 801102a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801102c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011030:	461a      	mov	r2, r3
 8011032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011034:	4293      	cmp	r3, r2
 8011036:	d2eb      	bcs.n	8011010 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8011038:	693a      	ldr	r2, [r7, #16]
 801103a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801103c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011040:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8011042:	6a3b      	ldr	r3, [r7, #32]
 8011044:	3302      	adds	r3, #2
 8011046:	009a      	lsls	r2, r3, #2
 8011048:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801104a:	4413      	add	r3, r2
 801104c:	1e5a      	subs	r2, r3, #1
 801104e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011050:	fbb2 f3f3 	udiv	r3, r2, r3
 8011054:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8011056:	2320      	movs	r3, #32
 8011058:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 801105a:	2300      	movs	r3, #0
 801105c:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 801105e:	6a3b      	ldr	r3, [r7, #32]
 8011060:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011064:	4293      	cmp	r3, r2
 8011066:	d903      	bls.n	8011070 <f_mkfs+0x224>
 8011068:	6a3b      	ldr	r3, [r7, #32]
 801106a:	4a1b      	ldr	r2, [pc, #108]	; (80110d8 <f_mkfs+0x28c>)
 801106c:	4293      	cmp	r3, r2
 801106e:	d952      	bls.n	8011116 <f_mkfs+0x2ca>
 8011070:	230e      	movs	r3, #14
 8011072:	e311      	b.n	8011698 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8011074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011076:	2b00      	cmp	r3, #0
 8011078:	d11b      	bne.n	80110b2 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	0b1b      	lsrs	r3, r3, #12
 801107e:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8011080:	2300      	movs	r3, #0
 8011082:	64bb      	str	r3, [r7, #72]	; 0x48
 8011084:	2301      	movs	r3, #1
 8011086:	653b      	str	r3, [r7, #80]	; 0x50
 8011088:	e005      	b.n	8011096 <f_mkfs+0x24a>
 801108a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801108c:	3301      	adds	r3, #1
 801108e:	64bb      	str	r3, [r7, #72]	; 0x48
 8011090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011092:	005b      	lsls	r3, r3, #1
 8011094:	653b      	str	r3, [r7, #80]	; 0x50
 8011096:	4a11      	ldr	r2, [pc, #68]	; (80110dc <f_mkfs+0x290>)
 8011098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801109a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d007      	beq.n	80110b2 <f_mkfs+0x266>
 80110a2:	4a0e      	ldr	r2, [pc, #56]	; (80110dc <f_mkfs+0x290>)
 80110a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110aa:	461a      	mov	r2, r3
 80110ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80110ae:	4293      	cmp	r3, r2
 80110b0:	d2eb      	bcs.n	801108a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 80110b2:	693a      	ldr	r2, [r7, #16]
 80110b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80110ba:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 80110bc:	6a3b      	ldr	r3, [r7, #32]
 80110be:	f640 72f5 	movw	r2, #4085	; 0xff5
 80110c2:	4293      	cmp	r3, r2
 80110c4:	d90c      	bls.n	80110e0 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80110c6:	6a3b      	ldr	r3, [r7, #32]
 80110c8:	3302      	adds	r3, #2
 80110ca:	005b      	lsls	r3, r3, #1
 80110cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80110ce:	e012      	b.n	80110f6 <f_mkfs+0x2aa>
 80110d0:	20004140 	.word	0x20004140
 80110d4:	080178f0 	.word	0x080178f0
 80110d8:	0ffffff5 	.word	0x0ffffff5
 80110dc:	08017900 	.word	0x08017900
				} else {
					fmt = FS_FAT12;
 80110e0:	2301      	movs	r3, #1
 80110e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80110e6:	6a3a      	ldr	r2, [r7, #32]
 80110e8:	4613      	mov	r3, r2
 80110ea:	005b      	lsls	r3, r3, #1
 80110ec:	4413      	add	r3, r2
 80110ee:	3301      	adds	r3, #1
 80110f0:	085b      	lsrs	r3, r3, #1
 80110f2:	3303      	adds	r3, #3
 80110f4:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80110f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80110f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80110fa:	4413      	add	r3, r2
 80110fc:	1e5a      	subs	r2, r3, #1
 80110fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011100:	fbb2 f3f3 	udiv	r3, r2, r3
 8011104:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8011106:	2301      	movs	r3, #1
 8011108:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 801110a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801110c:	015a      	lsls	r2, r3, #5
 801110e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011110:	fbb2 f3f3 	udiv	r3, r2, r3
 8011114:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8011116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801111a:	4413      	add	r3, r2
 801111c:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 801111e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011120:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011122:	fb03 f202 	mul.w	r2, r3, r2
 8011126:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011128:	4413      	add	r3, r2
 801112a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801112c:	4413      	add	r3, r2
 801112e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8011130:	697a      	ldr	r2, [r7, #20]
 8011132:	69fb      	ldr	r3, [r7, #28]
 8011134:	4413      	add	r3, r2
 8011136:	1e5a      	subs	r2, r3, #1
 8011138:	697b      	ldr	r3, [r7, #20]
 801113a:	425b      	negs	r3, r3
 801113c:	401a      	ands	r2, r3
 801113e:	69fb      	ldr	r3, [r7, #28]
 8011140:	1ad3      	subs	r3, r2, r3
 8011142:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8011144:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011148:	2b03      	cmp	r3, #3
 801114a:	d108      	bne.n	801115e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 801114c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801114e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011150:	4413      	add	r3, r2
 8011152:	657b      	str	r3, [r7, #84]	; 0x54
 8011154:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011158:	4413      	add	r3, r2
 801115a:	65bb      	str	r3, [r7, #88]	; 0x58
 801115c:	e006      	b.n	801116c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 801115e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011162:	fbb2 f3f3 	udiv	r3, r2, r3
 8011166:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011168:	4413      	add	r3, r2
 801116a:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 801116c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801116e:	011a      	lsls	r2, r3, #4
 8011170:	69fb      	ldr	r3, [r7, #28]
 8011172:	441a      	add	r2, r3
 8011174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011176:	1ad2      	subs	r2, r2, r3
 8011178:	693b      	ldr	r3, [r7, #16]
 801117a:	429a      	cmp	r2, r3
 801117c:	d901      	bls.n	8011182 <f_mkfs+0x336>
 801117e:	230e      	movs	r3, #14
 8011180:	e28a      	b.n	8011698 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8011182:	693a      	ldr	r2, [r7, #16]
 8011184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011186:	1ad2      	subs	r2, r2, r3
 8011188:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801118a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801118c:	fb01 f303 	mul.w	r3, r1, r3
 8011190:	1ad2      	subs	r2, r2, r3
 8011192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011194:	1ad2      	subs	r2, r2, r3
 8011196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011198:	fbb2 f3f3 	udiv	r3, r2, r3
 801119c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 801119e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80111a2:	2b03      	cmp	r3, #3
 80111a4:	d10f      	bne.n	80111c6 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80111a6:	6a3b      	ldr	r3, [r7, #32]
 80111a8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80111ac:	4293      	cmp	r3, r2
 80111ae:	d80a      	bhi.n	80111c6 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d105      	bne.n	80111c2 <f_mkfs+0x376>
 80111b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111b8:	085b      	lsrs	r3, r3, #1
 80111ba:	607b      	str	r3, [r7, #4]
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d144      	bne.n	801124c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 80111c2:	230e      	movs	r3, #14
 80111c4:	e268      	b.n	8011698 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 80111c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80111ca:	2b02      	cmp	r3, #2
 80111cc:	d133      	bne.n	8011236 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 80111ce:	6a3b      	ldr	r3, [r7, #32]
 80111d0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80111d4:	4293      	cmp	r3, r2
 80111d6:	d91e      	bls.n	8011216 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d107      	bne.n	80111ee <f_mkfs+0x3a2>
 80111de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111e0:	005b      	lsls	r3, r3, #1
 80111e2:	2b40      	cmp	r3, #64	; 0x40
 80111e4:	d803      	bhi.n	80111ee <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 80111e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111e8:	005b      	lsls	r3, r3, #1
 80111ea:	607b      	str	r3, [r7, #4]
 80111ec:	e033      	b.n	8011256 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 80111ee:	7afb      	ldrb	r3, [r7, #11]
 80111f0:	f003 0302 	and.w	r3, r3, #2
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d003      	beq.n	8011200 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80111f8:	2303      	movs	r3, #3
 80111fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80111fe:	e02a      	b.n	8011256 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d105      	bne.n	8011212 <f_mkfs+0x3c6>
 8011206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011208:	005b      	lsls	r3, r3, #1
 801120a:	607b      	str	r3, [r7, #4]
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2b80      	cmp	r3, #128	; 0x80
 8011210:	d91e      	bls.n	8011250 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8011212:	230e      	movs	r3, #14
 8011214:	e240      	b.n	8011698 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8011216:	6a3b      	ldr	r3, [r7, #32]
 8011218:	f640 72f5 	movw	r2, #4085	; 0xff5
 801121c:	4293      	cmp	r3, r2
 801121e:	d80a      	bhi.n	8011236 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d105      	bne.n	8011232 <f_mkfs+0x3e6>
 8011226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011228:	005b      	lsls	r3, r3, #1
 801122a:	607b      	str	r3, [r7, #4]
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2b80      	cmp	r3, #128	; 0x80
 8011230:	d910      	bls.n	8011254 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8011232:	230e      	movs	r3, #14
 8011234:	e230      	b.n	8011698 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8011236:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801123a:	2b01      	cmp	r3, #1
 801123c:	d10c      	bne.n	8011258 <f_mkfs+0x40c>
 801123e:	6a3b      	ldr	r3, [r7, #32]
 8011240:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011244:	4293      	cmp	r3, r2
 8011246:	d907      	bls.n	8011258 <f_mkfs+0x40c>
 8011248:	230e      	movs	r3, #14
 801124a:	e225      	b.n	8011698 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 801124c:	bf00      	nop
 801124e:	e6ce      	b.n	8010fee <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8011250:	bf00      	nop
 8011252:	e6cc      	b.n	8010fee <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8011254:	bf00      	nop
			pau = au;
 8011256:	e6ca      	b.n	8010fee <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8011258:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 801125a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801125c:	461a      	mov	r2, r3
 801125e:	2100      	movs	r1, #0
 8011260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011262:	f7fd fb00 	bl	800e866 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8011266:	220b      	movs	r2, #11
 8011268:	49b2      	ldr	r1, [pc, #712]	; (8011534 <f_mkfs+0x6e8>)
 801126a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801126c:	f7fd fada 	bl	800e824 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8011270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011272:	330b      	adds	r3, #11
 8011274:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011276:	4611      	mov	r1, r2
 8011278:	4618      	mov	r0, r3
 801127a:	f7fd fa8c 	bl	800e796 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 801127e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011280:	330d      	adds	r3, #13
 8011282:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011284:	b2d2      	uxtb	r2, r2
 8011286:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8011288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801128a:	330e      	adds	r3, #14
 801128c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801128e:	b292      	uxth	r2, r2
 8011290:	4611      	mov	r1, r2
 8011292:	4618      	mov	r0, r3
 8011294:	f7fd fa7f 	bl	800e796 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8011298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801129a:	3310      	adds	r3, #16
 801129c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801129e:	b2d2      	uxtb	r2, r2
 80112a0:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80112a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112a4:	f103 0211 	add.w	r2, r3, #17
 80112a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80112ac:	2b03      	cmp	r3, #3
 80112ae:	d002      	beq.n	80112b6 <f_mkfs+0x46a>
 80112b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80112b2:	b29b      	uxth	r3, r3
 80112b4:	e000      	b.n	80112b8 <f_mkfs+0x46c>
 80112b6:	2300      	movs	r3, #0
 80112b8:	4619      	mov	r1, r3
 80112ba:	4610      	mov	r0, r2
 80112bc:	f7fd fa6b 	bl	800e796 <st_word>
		if (sz_vol < 0x10000) {
 80112c0:	693b      	ldr	r3, [r7, #16]
 80112c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80112c6:	d208      	bcs.n	80112da <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80112c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ca:	3313      	adds	r3, #19
 80112cc:	693a      	ldr	r2, [r7, #16]
 80112ce:	b292      	uxth	r2, r2
 80112d0:	4611      	mov	r1, r2
 80112d2:	4618      	mov	r0, r3
 80112d4:	f7fd fa5f 	bl	800e796 <st_word>
 80112d8:	e006      	b.n	80112e8 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 80112da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112dc:	3320      	adds	r3, #32
 80112de:	693a      	ldr	r2, [r7, #16]
 80112e0:	4611      	mov	r1, r2
 80112e2:	4618      	mov	r0, r3
 80112e4:	f7fd fa72 	bl	800e7cc <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80112e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ea:	3315      	adds	r3, #21
 80112ec:	22f8      	movs	r2, #248	; 0xf8
 80112ee:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80112f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112f2:	3318      	adds	r3, #24
 80112f4:	213f      	movs	r1, #63	; 0x3f
 80112f6:	4618      	mov	r0, r3
 80112f8:	f7fd fa4d 	bl	800e796 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80112fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112fe:	331a      	adds	r3, #26
 8011300:	21ff      	movs	r1, #255	; 0xff
 8011302:	4618      	mov	r0, r3
 8011304:	f7fd fa47 	bl	800e796 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8011308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801130a:	331c      	adds	r3, #28
 801130c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801130e:	4618      	mov	r0, r3
 8011310:	f7fd fa5c 	bl	800e7cc <st_dword>
		if (fmt == FS_FAT32) {
 8011314:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011318:	2b03      	cmp	r3, #3
 801131a:	d131      	bne.n	8011380 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 801131c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801131e:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8011322:	f7fd f891 	bl	800e448 <get_fattime>
 8011326:	4603      	mov	r3, r0
 8011328:	4619      	mov	r1, r3
 801132a:	4620      	mov	r0, r4
 801132c:	f7fd fa4e 	bl	800e7cc <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8011330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011332:	3324      	adds	r3, #36	; 0x24
 8011334:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011336:	4618      	mov	r0, r3
 8011338:	f7fd fa48 	bl	800e7cc <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 801133c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801133e:	332c      	adds	r3, #44	; 0x2c
 8011340:	2102      	movs	r1, #2
 8011342:	4618      	mov	r0, r3
 8011344:	f7fd fa42 	bl	800e7cc <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8011348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801134a:	3330      	adds	r3, #48	; 0x30
 801134c:	2101      	movs	r1, #1
 801134e:	4618      	mov	r0, r3
 8011350:	f7fd fa21 	bl	800e796 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8011354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011356:	3332      	adds	r3, #50	; 0x32
 8011358:	2106      	movs	r1, #6
 801135a:	4618      	mov	r0, r3
 801135c:	f7fd fa1b 	bl	800e796 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8011360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011362:	3340      	adds	r3, #64	; 0x40
 8011364:	2280      	movs	r2, #128	; 0x80
 8011366:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8011368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801136a:	3342      	adds	r3, #66	; 0x42
 801136c:	2229      	movs	r2, #41	; 0x29
 801136e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8011370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011372:	3347      	adds	r3, #71	; 0x47
 8011374:	2213      	movs	r2, #19
 8011376:	4970      	ldr	r1, [pc, #448]	; (8011538 <f_mkfs+0x6ec>)
 8011378:	4618      	mov	r0, r3
 801137a:	f7fd fa53 	bl	800e824 <mem_cpy>
 801137e:	e020      	b.n	80113c2 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8011380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011382:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8011386:	f7fd f85f 	bl	800e448 <get_fattime>
 801138a:	4603      	mov	r3, r0
 801138c:	4619      	mov	r1, r3
 801138e:	4620      	mov	r0, r4
 8011390:	f7fd fa1c 	bl	800e7cc <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8011394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011396:	3316      	adds	r3, #22
 8011398:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801139a:	b292      	uxth	r2, r2
 801139c:	4611      	mov	r1, r2
 801139e:	4618      	mov	r0, r3
 80113a0:	f7fd f9f9 	bl	800e796 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80113a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113a6:	3324      	adds	r3, #36	; 0x24
 80113a8:	2280      	movs	r2, #128	; 0x80
 80113aa:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80113ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ae:	3326      	adds	r3, #38	; 0x26
 80113b0:	2229      	movs	r2, #41	; 0x29
 80113b2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80113b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b6:	332b      	adds	r3, #43	; 0x2b
 80113b8:	2213      	movs	r2, #19
 80113ba:	4960      	ldr	r1, [pc, #384]	; (801153c <f_mkfs+0x6f0>)
 80113bc:	4618      	mov	r0, r3
 80113be:	f7fd fa31 	bl	800e824 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80113c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113c4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80113c8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80113cc:	4618      	mov	r0, r3
 80113ce:	f7fd f9e2 	bl	800e796 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 80113d2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80113d6:	2301      	movs	r3, #1
 80113d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80113dc:	f7fd f962 	bl	800e6a4 <disk_write>
 80113e0:	4603      	mov	r3, r0
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d001      	beq.n	80113ea <f_mkfs+0x59e>
 80113e6:	2301      	movs	r3, #1
 80113e8:	e156      	b.n	8011698 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80113ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80113ee:	2b03      	cmp	r3, #3
 80113f0:	d140      	bne.n	8011474 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80113f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f4:	1d9a      	adds	r2, r3, #6
 80113f6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80113fa:	2301      	movs	r3, #1
 80113fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80113fe:	f7fd f951 	bl	800e6a4 <disk_write>
			mem_set(buf, 0, ss);
 8011402:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011404:	461a      	mov	r2, r3
 8011406:	2100      	movs	r1, #0
 8011408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801140a:	f7fd fa2c 	bl	800e866 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 801140e:	494c      	ldr	r1, [pc, #304]	; (8011540 <f_mkfs+0x6f4>)
 8011410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011412:	f7fd f9db 	bl	800e7cc <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8011416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011418:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801141c:	4949      	ldr	r1, [pc, #292]	; (8011544 <f_mkfs+0x6f8>)
 801141e:	4618      	mov	r0, r3
 8011420:	f7fd f9d4 	bl	800e7cc <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8011424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011426:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801142a:	6a3b      	ldr	r3, [r7, #32]
 801142c:	3b01      	subs	r3, #1
 801142e:	4619      	mov	r1, r3
 8011430:	4610      	mov	r0, r2
 8011432:	f7fd f9cb 	bl	800e7cc <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8011436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011438:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801143c:	2102      	movs	r1, #2
 801143e:	4618      	mov	r0, r3
 8011440:	f7fd f9c4 	bl	800e7cc <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8011444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011446:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801144a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801144e:	4618      	mov	r0, r3
 8011450:	f7fd f9a1 	bl	800e796 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8011454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011456:	1dda      	adds	r2, r3, #7
 8011458:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801145c:	2301      	movs	r3, #1
 801145e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011460:	f7fd f920 	bl	800e6a4 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8011464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011466:	1c5a      	adds	r2, r3, #1
 8011468:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801146c:	2301      	movs	r3, #1
 801146e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011470:	f7fd f918 	bl	800e6a4 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8011474:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011476:	2100      	movs	r1, #0
 8011478:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801147a:	f7fd f9f4 	bl	800e866 <mem_set>
		sect = b_fat;		/* FAT start sector */
 801147e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011480:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8011482:	2300      	movs	r3, #0
 8011484:	64bb      	str	r3, [r7, #72]	; 0x48
 8011486:	e04b      	b.n	8011520 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8011488:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801148c:	2b03      	cmp	r3, #3
 801148e:	d113      	bne.n	80114b8 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8011490:	f06f 0107 	mvn.w	r1, #7
 8011494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011496:	f7fd f999 	bl	800e7cc <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 801149a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801149c:	3304      	adds	r3, #4
 801149e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7fd f992 	bl	800e7cc <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 80114a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114aa:	3308      	adds	r3, #8
 80114ac:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7fd f98b 	bl	800e7cc <st_dword>
 80114b6:	e00b      	b.n	80114d0 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 80114b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80114bc:	2b01      	cmp	r3, #1
 80114be:	d101      	bne.n	80114c4 <f_mkfs+0x678>
 80114c0:	4b21      	ldr	r3, [pc, #132]	; (8011548 <f_mkfs+0x6fc>)
 80114c2:	e001      	b.n	80114c8 <f_mkfs+0x67c>
 80114c4:	f06f 0307 	mvn.w	r3, #7
 80114c8:	4619      	mov	r1, r3
 80114ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114cc:	f7fd f97e 	bl	800e7cc <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 80114d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80114d2:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80114d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80114d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114d8:	4293      	cmp	r3, r2
 80114da:	bf28      	it	cs
 80114dc:	4613      	movcs	r3, r2
 80114de:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80114e0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80114e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80114e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80114e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80114ea:	f7fd f8db 	bl	800e6a4 <disk_write>
 80114ee:	4603      	mov	r3, r0
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d001      	beq.n	80114f8 <f_mkfs+0x6ac>
 80114f4:	2301      	movs	r3, #1
 80114f6:	e0cf      	b.n	8011698 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 80114f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80114fa:	461a      	mov	r2, r3
 80114fc:	2100      	movs	r1, #0
 80114fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011500:	f7fd f9b1 	bl	800e866 <mem_set>
				sect += n; nsect -= n;
 8011504:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011508:	4413      	add	r3, r2
 801150a:	667b      	str	r3, [r7, #100]	; 0x64
 801150c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801150e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011510:	1ad3      	subs	r3, r2, r3
 8011512:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8011514:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011516:	2b00      	cmp	r3, #0
 8011518:	d1dc      	bne.n	80114d4 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 801151a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801151c:	3301      	adds	r3, #1
 801151e:	64bb      	str	r3, [r7, #72]	; 0x48
 8011520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011524:	429a      	cmp	r2, r3
 8011526:	d3af      	bcc.n	8011488 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8011528:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801152c:	2b03      	cmp	r3, #3
 801152e:	d10d      	bne.n	801154c <f_mkfs+0x700>
 8011530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011532:	e00c      	b.n	801154e <f_mkfs+0x702>
 8011534:	08016a48 	.word	0x08016a48
 8011538:	08016a54 	.word	0x08016a54
 801153c:	08016a68 	.word	0x08016a68
 8011540:	41615252 	.word	0x41615252
 8011544:	61417272 	.word	0x61417272
 8011548:	00fffff8 	.word	0x00fffff8
 801154c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801154e:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8011550:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011554:	4293      	cmp	r3, r2
 8011556:	bf28      	it	cs
 8011558:	4613      	movcs	r3, r2
 801155a:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 801155c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011562:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011564:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011566:	f7fd f89d 	bl	800e6a4 <disk_write>
 801156a:	4603      	mov	r3, r0
 801156c:	2b00      	cmp	r3, #0
 801156e:	d001      	beq.n	8011574 <f_mkfs+0x728>
 8011570:	2301      	movs	r3, #1
 8011572:	e091      	b.n	8011698 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8011574:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011578:	4413      	add	r3, r2
 801157a:	667b      	str	r3, [r7, #100]	; 0x64
 801157c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801157e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011580:	1ad3      	subs	r3, r2, r3
 8011582:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8011584:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011586:	2b00      	cmp	r3, #0
 8011588:	d1e2      	bne.n	8011550 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 801158a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801158e:	2b03      	cmp	r3, #3
 8011590:	d103      	bne.n	801159a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8011592:	230c      	movs	r3, #12
 8011594:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8011598:	e010      	b.n	80115bc <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 801159a:	693b      	ldr	r3, [r7, #16]
 801159c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80115a0:	d303      	bcc.n	80115aa <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80115a2:	2306      	movs	r3, #6
 80115a4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80115a8:	e008      	b.n	80115bc <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80115aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80115ae:	2b02      	cmp	r3, #2
 80115b0:	d101      	bne.n	80115b6 <f_mkfs+0x76a>
 80115b2:	2304      	movs	r3, #4
 80115b4:	e000      	b.n	80115b8 <f_mkfs+0x76c>
 80115b6:	2301      	movs	r3, #1
 80115b8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80115bc:	7afb      	ldrb	r3, [r7, #11]
 80115be:	f003 0308 	and.w	r3, r3, #8
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d15b      	bne.n	801167e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 80115c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80115c8:	461a      	mov	r2, r3
 80115ca:	2100      	movs	r1, #0
 80115cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115ce:	f7fd f94a 	bl	800e866 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 80115d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80115d8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80115dc:	4618      	mov	r0, r3
 80115de:	f7fd f8da 	bl	800e796 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 80115e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115e4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80115e8:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 80115ea:	69bb      	ldr	r3, [r7, #24]
 80115ec:	2200      	movs	r2, #0
 80115ee:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 80115f0:	69bb      	ldr	r3, [r7, #24]
 80115f2:	3301      	adds	r3, #1
 80115f4:	2201      	movs	r2, #1
 80115f6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80115f8:	69bb      	ldr	r3, [r7, #24]
 80115fa:	3302      	adds	r3, #2
 80115fc:	2201      	movs	r2, #1
 80115fe:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8011600:	69bb      	ldr	r3, [r7, #24]
 8011602:	3303      	adds	r3, #3
 8011604:	2200      	movs	r2, #0
 8011606:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8011608:	69bb      	ldr	r3, [r7, #24]
 801160a:	3304      	adds	r3, #4
 801160c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8011610:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8011612:	693a      	ldr	r2, [r7, #16]
 8011614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011616:	441a      	add	r2, r3
 8011618:	4b21      	ldr	r3, [pc, #132]	; (80116a0 <f_mkfs+0x854>)
 801161a:	fba3 1302 	umull	r1, r3, r3, r2
 801161e:	1ad2      	subs	r2, r2, r3
 8011620:	0852      	lsrs	r2, r2, #1
 8011622:	4413      	add	r3, r2
 8011624:	0b5b      	lsrs	r3, r3, #13
 8011626:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8011628:	69bb      	ldr	r3, [r7, #24]
 801162a:	3305      	adds	r3, #5
 801162c:	22fe      	movs	r2, #254	; 0xfe
 801162e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8011630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011632:	089b      	lsrs	r3, r3, #2
 8011634:	b2da      	uxtb	r2, r3
 8011636:	69bb      	ldr	r3, [r7, #24]
 8011638:	3306      	adds	r3, #6
 801163a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 801163e:	b2d2      	uxtb	r2, r2
 8011640:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8011642:	69bb      	ldr	r3, [r7, #24]
 8011644:	3307      	adds	r3, #7
 8011646:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011648:	b2d2      	uxtb	r2, r2
 801164a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 801164c:	69bb      	ldr	r3, [r7, #24]
 801164e:	3308      	adds	r3, #8
 8011650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011652:	4618      	mov	r0, r3
 8011654:	f7fd f8ba 	bl	800e7cc <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8011658:	69bb      	ldr	r3, [r7, #24]
 801165a:	330c      	adds	r3, #12
 801165c:	693a      	ldr	r2, [r7, #16]
 801165e:	4611      	mov	r1, r2
 8011660:	4618      	mov	r0, r3
 8011662:	f7fd f8b3 	bl	800e7cc <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8011666:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801166a:	2301      	movs	r3, #1
 801166c:	2200      	movs	r2, #0
 801166e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011670:	f7fd f818 	bl	800e6a4 <disk_write>
 8011674:	4603      	mov	r3, r0
 8011676:	2b00      	cmp	r3, #0
 8011678:	d001      	beq.n	801167e <f_mkfs+0x832>
 801167a:	2301      	movs	r3, #1
 801167c:	e00c      	b.n	8011698 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 801167e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011682:	2200      	movs	r2, #0
 8011684:	2100      	movs	r1, #0
 8011686:	4618      	mov	r0, r3
 8011688:	f7fd f82c 	bl	800e6e4 <disk_ioctl>
 801168c:	4603      	mov	r3, r0
 801168e:	2b00      	cmp	r3, #0
 8011690:	d001      	beq.n	8011696 <f_mkfs+0x84a>
 8011692:	2301      	movs	r3, #1
 8011694:	e000      	b.n	8011698 <f_mkfs+0x84c>

	return FR_OK;
 8011696:	2300      	movs	r3, #0
}
 8011698:	4618      	mov	r0, r3
 801169a:	3774      	adds	r7, #116	; 0x74
 801169c:	46bd      	mov	sp, r7
 801169e:	bd90      	pop	{r4, r7, pc}
 80116a0:	0515565b 	.word	0x0515565b

080116a4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b088      	sub	sp, #32
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	60f8      	str	r0, [r7, #12]
 80116ac:	60b9      	str	r1, [r7, #8]
 80116ae:	607a      	str	r2, [r7, #4]
	int n = 0;
 80116b0:	2300      	movs	r3, #0
 80116b2:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80116b8:	e017      	b.n	80116ea <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80116ba:	f107 0310 	add.w	r3, r7, #16
 80116be:	f107 0114 	add.w	r1, r7, #20
 80116c2:	2201      	movs	r2, #1
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	f7fe ff8f 	bl	80105e8 <f_read>
		if (rc != 1) break;
 80116ca:	693b      	ldr	r3, [r7, #16]
 80116cc:	2b01      	cmp	r3, #1
 80116ce:	d112      	bne.n	80116f6 <f_gets+0x52>
		c = s[0];
 80116d0:	7d3b      	ldrb	r3, [r7, #20]
 80116d2:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80116d4:	69bb      	ldr	r3, [r7, #24]
 80116d6:	1c5a      	adds	r2, r3, #1
 80116d8:	61ba      	str	r2, [r7, #24]
 80116da:	7dfa      	ldrb	r2, [r7, #23]
 80116dc:	701a      	strb	r2, [r3, #0]
		n++;
 80116de:	69fb      	ldr	r3, [r7, #28]
 80116e0:	3301      	adds	r3, #1
 80116e2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80116e4:	7dfb      	ldrb	r3, [r7, #23]
 80116e6:	2b0a      	cmp	r3, #10
 80116e8:	d007      	beq.n	80116fa <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	3b01      	subs	r3, #1
 80116ee:	69fa      	ldr	r2, [r7, #28]
 80116f0:	429a      	cmp	r2, r3
 80116f2:	dbe2      	blt.n	80116ba <f_gets+0x16>
 80116f4:	e002      	b.n	80116fc <f_gets+0x58>
		if (rc != 1) break;
 80116f6:	bf00      	nop
 80116f8:	e000      	b.n	80116fc <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 80116fa:	bf00      	nop
	}
	*p = 0;
 80116fc:	69bb      	ldr	r3, [r7, #24]
 80116fe:	2200      	movs	r2, #0
 8011700:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8011702:	69fb      	ldr	r3, [r7, #28]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d001      	beq.n	801170c <f_gets+0x68>
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	e000      	b.n	801170e <f_gets+0x6a>
 801170c:	2300      	movs	r3, #0
}
 801170e:	4618      	mov	r0, r3
 8011710:	3720      	adds	r7, #32
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}

08011716 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8011716:	b580      	push	{r7, lr}
 8011718:	b084      	sub	sp, #16
 801171a:	af00      	add	r7, sp, #0
 801171c:	6078      	str	r0, [r7, #4]
 801171e:	460b      	mov	r3, r1
 8011720:	70fb      	strb	r3, [r7, #3]

	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	685b      	ldr	r3, [r3, #4]
 8011726:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	2b00      	cmp	r3, #0
 801172c:	db25      	blt.n	801177a <putc_bfd+0x64>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	1c5a      	adds	r2, r3, #1
 8011732:	60fa      	str	r2, [r7, #12]
 8011734:	687a      	ldr	r2, [r7, #4]
 8011736:	4413      	add	r3, r2
 8011738:	78fa      	ldrb	r2, [r7, #3]
 801173a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	2b3c      	cmp	r3, #60	; 0x3c
 8011740:	dd12      	ble.n	8011768 <putc_bfd+0x52>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	6818      	ldr	r0, [r3, #0]
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	f103 010c 	add.w	r1, r3, #12
 801174c:	68fa      	ldr	r2, [r7, #12]
 801174e:	f107 0308 	add.w	r3, r7, #8
 8011752:	f7ff f888 	bl	8010866 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8011756:	68ba      	ldr	r2, [r7, #8]
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	429a      	cmp	r2, r3
 801175c:	d101      	bne.n	8011762 <putc_bfd+0x4c>
 801175e:	2300      	movs	r3, #0
 8011760:	e001      	b.n	8011766 <putc_bfd+0x50>
 8011762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011766:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	68fa      	ldr	r2, [r7, #12]
 801176c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	689b      	ldr	r3, [r3, #8]
 8011772:	1c5a      	adds	r2, r3, #1
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	609a      	str	r2, [r3, #8]
 8011778:	e000      	b.n	801177c <putc_bfd+0x66>
	if (i < 0) return;
 801177a:	bf00      	nop
}
 801177c:	3710      	adds	r7, #16
 801177e:	46bd      	mov	sp, r7
 8011780:	bd80      	pop	{r7, pc}

08011782 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8011782:	b580      	push	{r7, lr}
 8011784:	b084      	sub	sp, #16
 8011786:	af00      	add	r7, sp, #0
 8011788:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	685b      	ldr	r3, [r3, #4]
 801178e:	2b00      	cmp	r3, #0
 8011790:	db16      	blt.n	80117c0 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6818      	ldr	r0, [r3, #0]
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	f103 010c 	add.w	r1, r3, #12
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	685b      	ldr	r3, [r3, #4]
 80117a0:	461a      	mov	r2, r3
 80117a2:	f107 030c 	add.w	r3, r7, #12
 80117a6:	f7ff f85e 	bl	8010866 <f_write>
 80117aa:	4603      	mov	r3, r0
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d107      	bne.n	80117c0 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	685b      	ldr	r3, [r3, #4]
 80117b4:	68fa      	ldr	r2, [r7, #12]
 80117b6:	4293      	cmp	r3, r2
 80117b8:	d102      	bne.n	80117c0 <putc_flush+0x3e>
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	689b      	ldr	r3, [r3, #8]
 80117be:	e001      	b.n	80117c4 <putc_flush+0x42>
	return EOF;
 80117c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80117c4:	4618      	mov	r0, r3
 80117c6:	3710      	adds	r7, #16
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd80      	pop	{r7, pc}

080117cc <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80117cc:	b480      	push	{r7}
 80117ce:	b083      	sub	sp, #12
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
 80117d4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	683a      	ldr	r2, [r7, #0]
 80117da:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2200      	movs	r2, #0
 80117e0:	605a      	str	r2, [r3, #4]
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	685a      	ldr	r2, [r3, #4]
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	609a      	str	r2, [r3, #8]
}
 80117ea:	bf00      	nop
 80117ec:	370c      	adds	r7, #12
 80117ee:	46bd      	mov	sp, r7
 80117f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f4:	4770      	bx	lr

080117f6 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80117f6:	b580      	push	{r7, lr}
 80117f8:	b096      	sub	sp, #88	; 0x58
 80117fa:	af00      	add	r7, sp, #0
 80117fc:	6078      	str	r0, [r7, #4]
 80117fe:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8011800:	f107 030c 	add.w	r3, r7, #12
 8011804:	6839      	ldr	r1, [r7, #0]
 8011806:	4618      	mov	r0, r3
 8011808:	f7ff ffe0 	bl	80117cc <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 801180c:	e009      	b.n	8011822 <f_puts+0x2c>
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	1c5a      	adds	r2, r3, #1
 8011812:	607a      	str	r2, [r7, #4]
 8011814:	781a      	ldrb	r2, [r3, #0]
 8011816:	f107 030c 	add.w	r3, r7, #12
 801181a:	4611      	mov	r1, r2
 801181c:	4618      	mov	r0, r3
 801181e:	f7ff ff7a 	bl	8011716 <putc_bfd>
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	781b      	ldrb	r3, [r3, #0]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d1f1      	bne.n	801180e <f_puts+0x18>
	return putc_flush(&pb);
 801182a:	f107 030c 	add.w	r3, r7, #12
 801182e:	4618      	mov	r0, r3
 8011830:	f7ff ffa7 	bl	8011782 <putc_flush>
 8011834:	4603      	mov	r3, r0
}
 8011836:	4618      	mov	r0, r3
 8011838:	3758      	adds	r7, #88	; 0x58
 801183a:	46bd      	mov	sp, r7
 801183c:	bd80      	pop	{r7, pc}
	...

08011840 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011840:	b480      	push	{r7}
 8011842:	b087      	sub	sp, #28
 8011844:	af00      	add	r7, sp, #0
 8011846:	60f8      	str	r0, [r7, #12]
 8011848:	60b9      	str	r1, [r7, #8]
 801184a:	4613      	mov	r3, r2
 801184c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801184e:	2301      	movs	r3, #1
 8011850:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011852:	2300      	movs	r3, #0
 8011854:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011856:	4b1f      	ldr	r3, [pc, #124]	; (80118d4 <FATFS_LinkDriverEx+0x94>)
 8011858:	7a5b      	ldrb	r3, [r3, #9]
 801185a:	b2db      	uxtb	r3, r3
 801185c:	2b00      	cmp	r3, #0
 801185e:	d131      	bne.n	80118c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011860:	4b1c      	ldr	r3, [pc, #112]	; (80118d4 <FATFS_LinkDriverEx+0x94>)
 8011862:	7a5b      	ldrb	r3, [r3, #9]
 8011864:	b2db      	uxtb	r3, r3
 8011866:	461a      	mov	r2, r3
 8011868:	4b1a      	ldr	r3, [pc, #104]	; (80118d4 <FATFS_LinkDriverEx+0x94>)
 801186a:	2100      	movs	r1, #0
 801186c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801186e:	4b19      	ldr	r3, [pc, #100]	; (80118d4 <FATFS_LinkDriverEx+0x94>)
 8011870:	7a5b      	ldrb	r3, [r3, #9]
 8011872:	b2db      	uxtb	r3, r3
 8011874:	4a17      	ldr	r2, [pc, #92]	; (80118d4 <FATFS_LinkDriverEx+0x94>)
 8011876:	009b      	lsls	r3, r3, #2
 8011878:	4413      	add	r3, r2
 801187a:	68fa      	ldr	r2, [r7, #12]
 801187c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801187e:	4b15      	ldr	r3, [pc, #84]	; (80118d4 <FATFS_LinkDriverEx+0x94>)
 8011880:	7a5b      	ldrb	r3, [r3, #9]
 8011882:	b2db      	uxtb	r3, r3
 8011884:	461a      	mov	r2, r3
 8011886:	4b13      	ldr	r3, [pc, #76]	; (80118d4 <FATFS_LinkDriverEx+0x94>)
 8011888:	4413      	add	r3, r2
 801188a:	79fa      	ldrb	r2, [r7, #7]
 801188c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801188e:	4b11      	ldr	r3, [pc, #68]	; (80118d4 <FATFS_LinkDriverEx+0x94>)
 8011890:	7a5b      	ldrb	r3, [r3, #9]
 8011892:	b2db      	uxtb	r3, r3
 8011894:	1c5a      	adds	r2, r3, #1
 8011896:	b2d1      	uxtb	r1, r2
 8011898:	4a0e      	ldr	r2, [pc, #56]	; (80118d4 <FATFS_LinkDriverEx+0x94>)
 801189a:	7251      	strb	r1, [r2, #9]
 801189c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801189e:	7dbb      	ldrb	r3, [r7, #22]
 80118a0:	3330      	adds	r3, #48	; 0x30
 80118a2:	b2da      	uxtb	r2, r3
 80118a4:	68bb      	ldr	r3, [r7, #8]
 80118a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	3301      	adds	r3, #1
 80118ac:	223a      	movs	r2, #58	; 0x3a
 80118ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	3302      	adds	r3, #2
 80118b4:	222f      	movs	r2, #47	; 0x2f
 80118b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	3303      	adds	r3, #3
 80118bc:	2200      	movs	r2, #0
 80118be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80118c0:	2300      	movs	r3, #0
 80118c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80118c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	371c      	adds	r7, #28
 80118ca:	46bd      	mov	sp, r7
 80118cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d0:	4770      	bx	lr
 80118d2:	bf00      	nop
 80118d4:	20004168 	.word	0x20004168

080118d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b082      	sub	sp, #8
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
 80118e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80118e2:	2200      	movs	r2, #0
 80118e4:	6839      	ldr	r1, [r7, #0]
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f7ff ffaa 	bl	8011840 <FATFS_LinkDriverEx>
 80118ec:	4603      	mov	r3, r0
}
 80118ee:	4618      	mov	r0, r3
 80118f0:	3708      	adds	r7, #8
 80118f2:	46bd      	mov	sp, r7
 80118f4:	bd80      	pop	{r7, pc}

080118f6 <atof>:
 80118f6:	2100      	movs	r1, #0
 80118f8:	f001 bbfc 	b.w	80130f4 <strtod>

080118fc <atoi>:
 80118fc:	220a      	movs	r2, #10
 80118fe:	2100      	movs	r1, #0
 8011900:	f001 bc86 	b.w	8013210 <strtol>

08011904 <atol>:
 8011904:	220a      	movs	r2, #10
 8011906:	2100      	movs	r1, #0
 8011908:	f001 bc82 	b.w	8013210 <strtol>

0801190c <__errno>:
 801190c:	4b01      	ldr	r3, [pc, #4]	; (8011914 <__errno+0x8>)
 801190e:	6818      	ldr	r0, [r3, #0]
 8011910:	4770      	bx	lr
 8011912:	bf00      	nop
 8011914:	20000234 	.word	0x20000234

08011918 <gmtime_r>:
 8011918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801191c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8011920:	460c      	mov	r4, r1
 8011922:	4a4f      	ldr	r2, [pc, #316]	; (8011a60 <gmtime_r+0x148>)
 8011924:	2300      	movs	r3, #0
 8011926:	4630      	mov	r0, r6
 8011928:	4639      	mov	r1, r7
 801192a:	f7ef f9ad 	bl	8000c88 <__aeabi_ldivmod>
 801192e:	4639      	mov	r1, r7
 8011930:	4605      	mov	r5, r0
 8011932:	4a4b      	ldr	r2, [pc, #300]	; (8011a60 <gmtime_r+0x148>)
 8011934:	4630      	mov	r0, r6
 8011936:	2300      	movs	r3, #0
 8011938:	f7ef f9a6 	bl	8000c88 <__aeabi_ldivmod>
 801193c:	2a00      	cmp	r2, #0
 801193e:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8011942:	bfb7      	itett	lt
 8011944:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8011948:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 801194c:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8011950:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8011954:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8011958:	fbb2 f1f0 	udiv	r1, r2, r0
 801195c:	fb00 2211 	mls	r2, r0, r1, r2
 8011960:	203c      	movs	r0, #60	; 0x3c
 8011962:	60a1      	str	r1, [r4, #8]
 8011964:	fbb2 f1f0 	udiv	r1, r2, r0
 8011968:	fb00 2211 	mls	r2, r0, r1, r2
 801196c:	6061      	str	r1, [r4, #4]
 801196e:	6022      	str	r2, [r4, #0]
 8011970:	2107      	movs	r1, #7
 8011972:	1cda      	adds	r2, r3, #3
 8011974:	fb92 f1f1 	sdiv	r1, r2, r1
 8011978:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801197c:	1a52      	subs	r2, r2, r1
 801197e:	bf48      	it	mi
 8011980:	3207      	addmi	r2, #7
 8011982:	4d38      	ldr	r5, [pc, #224]	; (8011a64 <gmtime_r+0x14c>)
 8011984:	4838      	ldr	r0, [pc, #224]	; (8011a68 <gmtime_r+0x150>)
 8011986:	61a2      	str	r2, [r4, #24]
 8011988:	2b00      	cmp	r3, #0
 801198a:	bfb7      	itett	lt
 801198c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8011990:	fb93 f5f5 	sdivge	r5, r3, r5
 8011994:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8011998:	fb92 f5f5 	sdivlt	r5, r2, r5
 801199c:	fb00 3005 	mla	r0, r0, r5, r3
 80119a0:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80119a4:	fbb0 f2f2 	udiv	r2, r0, r2
 80119a8:	4402      	add	r2, r0
 80119aa:	f240 53b4 	movw	r3, #1460	; 0x5b4
 80119ae:	fbb0 f1f3 	udiv	r1, r0, r3
 80119b2:	1a52      	subs	r2, r2, r1
 80119b4:	f240 1c6d 	movw	ip, #365	; 0x16d
 80119b8:	492c      	ldr	r1, [pc, #176]	; (8011a6c <gmtime_r+0x154>)
 80119ba:	fbb0 f1f1 	udiv	r1, r0, r1
 80119be:	2764      	movs	r7, #100	; 0x64
 80119c0:	1a52      	subs	r2, r2, r1
 80119c2:	fbb2 f1fc 	udiv	r1, r2, ip
 80119c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80119ca:	fbb1 f6f7 	udiv	r6, r1, r7
 80119ce:	1af3      	subs	r3, r6, r3
 80119d0:	4403      	add	r3, r0
 80119d2:	fb0c 3311 	mls	r3, ip, r1, r3
 80119d6:	2299      	movs	r2, #153	; 0x99
 80119d8:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 80119dc:	f10e 0e02 	add.w	lr, lr, #2
 80119e0:	f103 0c01 	add.w	ip, r3, #1
 80119e4:	fbbe f0f2 	udiv	r0, lr, r2
 80119e8:	4342      	muls	r2, r0
 80119ea:	3202      	adds	r2, #2
 80119ec:	f04f 0805 	mov.w	r8, #5
 80119f0:	fbb2 f2f8 	udiv	r2, r2, r8
 80119f4:	ebac 0c02 	sub.w	ip, ip, r2
 80119f8:	f240 52f9 	movw	r2, #1529	; 0x5f9
 80119fc:	4596      	cmp	lr, r2
 80119fe:	bf94      	ite	ls
 8011a00:	2202      	movls	r2, #2
 8011a02:	f06f 0209 	mvnhi.w	r2, #9
 8011a06:	4410      	add	r0, r2
 8011a08:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011a0c:	fb02 1505 	mla	r5, r2, r5, r1
 8011a10:	2801      	cmp	r0, #1
 8011a12:	bf98      	it	ls
 8011a14:	3501      	addls	r5, #1
 8011a16:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8011a1a:	d30d      	bcc.n	8011a38 <gmtime_r+0x120>
 8011a1c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8011a20:	61e3      	str	r3, [r4, #28]
 8011a22:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8011a26:	2300      	movs	r3, #0
 8011a28:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8011a2c:	f8c4 c00c 	str.w	ip, [r4, #12]
 8011a30:	6223      	str	r3, [r4, #32]
 8011a32:	4620      	mov	r0, r4
 8011a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a38:	078a      	lsls	r2, r1, #30
 8011a3a:	d102      	bne.n	8011a42 <gmtime_r+0x12a>
 8011a3c:	fb07 1616 	mls	r6, r7, r6, r1
 8011a40:	b95e      	cbnz	r6, 8011a5a <gmtime_r+0x142>
 8011a42:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011a46:	fbb1 f6f2 	udiv	r6, r1, r2
 8011a4a:	fb02 1216 	mls	r2, r2, r6, r1
 8011a4e:	fab2 f282 	clz	r2, r2
 8011a52:	0952      	lsrs	r2, r2, #5
 8011a54:	333b      	adds	r3, #59	; 0x3b
 8011a56:	4413      	add	r3, r2
 8011a58:	e7e2      	b.n	8011a20 <gmtime_r+0x108>
 8011a5a:	2201      	movs	r2, #1
 8011a5c:	e7fa      	b.n	8011a54 <gmtime_r+0x13c>
 8011a5e:	bf00      	nop
 8011a60:	00015180 	.word	0x00015180
 8011a64:	00023ab1 	.word	0x00023ab1
 8011a68:	fffdc54f 	.word	0xfffdc54f
 8011a6c:	00023ab0 	.word	0x00023ab0

08011a70 <__libc_init_array>:
 8011a70:	b570      	push	{r4, r5, r6, lr}
 8011a72:	4d0d      	ldr	r5, [pc, #52]	; (8011aa8 <__libc_init_array+0x38>)
 8011a74:	4c0d      	ldr	r4, [pc, #52]	; (8011aac <__libc_init_array+0x3c>)
 8011a76:	1b64      	subs	r4, r4, r5
 8011a78:	10a4      	asrs	r4, r4, #2
 8011a7a:	2600      	movs	r6, #0
 8011a7c:	42a6      	cmp	r6, r4
 8011a7e:	d109      	bne.n	8011a94 <__libc_init_array+0x24>
 8011a80:	4d0b      	ldr	r5, [pc, #44]	; (8011ab0 <__libc_init_array+0x40>)
 8011a82:	4c0c      	ldr	r4, [pc, #48]	; (8011ab4 <__libc_init_array+0x44>)
 8011a84:	f004 fb06 	bl	8016094 <_init>
 8011a88:	1b64      	subs	r4, r4, r5
 8011a8a:	10a4      	asrs	r4, r4, #2
 8011a8c:	2600      	movs	r6, #0
 8011a8e:	42a6      	cmp	r6, r4
 8011a90:	d105      	bne.n	8011a9e <__libc_init_array+0x2e>
 8011a92:	bd70      	pop	{r4, r5, r6, pc}
 8011a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a98:	4798      	blx	r3
 8011a9a:	3601      	adds	r6, #1
 8011a9c:	e7ee      	b.n	8011a7c <__libc_init_array+0xc>
 8011a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011aa2:	4798      	blx	r3
 8011aa4:	3601      	adds	r6, #1
 8011aa6:	e7f2      	b.n	8011a8e <__libc_init_array+0x1e>
 8011aa8:	08017db4 	.word	0x08017db4
 8011aac:	08017db4 	.word	0x08017db4
 8011ab0:	08017db4 	.word	0x08017db4
 8011ab4:	08017db8 	.word	0x08017db8

08011ab8 <memcpy>:
 8011ab8:	440a      	add	r2, r1
 8011aba:	4291      	cmp	r1, r2
 8011abc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011ac0:	d100      	bne.n	8011ac4 <memcpy+0xc>
 8011ac2:	4770      	bx	lr
 8011ac4:	b510      	push	{r4, lr}
 8011ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011aca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011ace:	4291      	cmp	r1, r2
 8011ad0:	d1f9      	bne.n	8011ac6 <memcpy+0xe>
 8011ad2:	bd10      	pop	{r4, pc}

08011ad4 <memset>:
 8011ad4:	4402      	add	r2, r0
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	4293      	cmp	r3, r2
 8011ada:	d100      	bne.n	8011ade <memset+0xa>
 8011adc:	4770      	bx	lr
 8011ade:	f803 1b01 	strb.w	r1, [r3], #1
 8011ae2:	e7f9      	b.n	8011ad8 <memset+0x4>

08011ae4 <__cvt>:
 8011ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ae8:	ec55 4b10 	vmov	r4, r5, d0
 8011aec:	2d00      	cmp	r5, #0
 8011aee:	460e      	mov	r6, r1
 8011af0:	4619      	mov	r1, r3
 8011af2:	462b      	mov	r3, r5
 8011af4:	bfbb      	ittet	lt
 8011af6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011afa:	461d      	movlt	r5, r3
 8011afc:	2300      	movge	r3, #0
 8011afe:	232d      	movlt	r3, #45	; 0x2d
 8011b00:	700b      	strb	r3, [r1, #0]
 8011b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011b08:	4691      	mov	r9, r2
 8011b0a:	f023 0820 	bic.w	r8, r3, #32
 8011b0e:	bfbc      	itt	lt
 8011b10:	4622      	movlt	r2, r4
 8011b12:	4614      	movlt	r4, r2
 8011b14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011b18:	d005      	beq.n	8011b26 <__cvt+0x42>
 8011b1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011b1e:	d100      	bne.n	8011b22 <__cvt+0x3e>
 8011b20:	3601      	adds	r6, #1
 8011b22:	2102      	movs	r1, #2
 8011b24:	e000      	b.n	8011b28 <__cvt+0x44>
 8011b26:	2103      	movs	r1, #3
 8011b28:	ab03      	add	r3, sp, #12
 8011b2a:	9301      	str	r3, [sp, #4]
 8011b2c:	ab02      	add	r3, sp, #8
 8011b2e:	9300      	str	r3, [sp, #0]
 8011b30:	ec45 4b10 	vmov	d0, r4, r5
 8011b34:	4653      	mov	r3, sl
 8011b36:	4632      	mov	r2, r6
 8011b38:	f001 fc3a 	bl	80133b0 <_dtoa_r>
 8011b3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011b40:	4607      	mov	r7, r0
 8011b42:	d102      	bne.n	8011b4a <__cvt+0x66>
 8011b44:	f019 0f01 	tst.w	r9, #1
 8011b48:	d022      	beq.n	8011b90 <__cvt+0xac>
 8011b4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011b4e:	eb07 0906 	add.w	r9, r7, r6
 8011b52:	d110      	bne.n	8011b76 <__cvt+0x92>
 8011b54:	783b      	ldrb	r3, [r7, #0]
 8011b56:	2b30      	cmp	r3, #48	; 0x30
 8011b58:	d10a      	bne.n	8011b70 <__cvt+0x8c>
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	4620      	mov	r0, r4
 8011b60:	4629      	mov	r1, r5
 8011b62:	f7ee ffb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b66:	b918      	cbnz	r0, 8011b70 <__cvt+0x8c>
 8011b68:	f1c6 0601 	rsb	r6, r6, #1
 8011b6c:	f8ca 6000 	str.w	r6, [sl]
 8011b70:	f8da 3000 	ldr.w	r3, [sl]
 8011b74:	4499      	add	r9, r3
 8011b76:	2200      	movs	r2, #0
 8011b78:	2300      	movs	r3, #0
 8011b7a:	4620      	mov	r0, r4
 8011b7c:	4629      	mov	r1, r5
 8011b7e:	f7ee ffa3 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b82:	b108      	cbz	r0, 8011b88 <__cvt+0xa4>
 8011b84:	f8cd 900c 	str.w	r9, [sp, #12]
 8011b88:	2230      	movs	r2, #48	; 0x30
 8011b8a:	9b03      	ldr	r3, [sp, #12]
 8011b8c:	454b      	cmp	r3, r9
 8011b8e:	d307      	bcc.n	8011ba0 <__cvt+0xbc>
 8011b90:	9b03      	ldr	r3, [sp, #12]
 8011b92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011b94:	1bdb      	subs	r3, r3, r7
 8011b96:	4638      	mov	r0, r7
 8011b98:	6013      	str	r3, [r2, #0]
 8011b9a:	b004      	add	sp, #16
 8011b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ba0:	1c59      	adds	r1, r3, #1
 8011ba2:	9103      	str	r1, [sp, #12]
 8011ba4:	701a      	strb	r2, [r3, #0]
 8011ba6:	e7f0      	b.n	8011b8a <__cvt+0xa6>

08011ba8 <__exponent>:
 8011ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011baa:	4603      	mov	r3, r0
 8011bac:	2900      	cmp	r1, #0
 8011bae:	bfb8      	it	lt
 8011bb0:	4249      	neglt	r1, r1
 8011bb2:	f803 2b02 	strb.w	r2, [r3], #2
 8011bb6:	bfb4      	ite	lt
 8011bb8:	222d      	movlt	r2, #45	; 0x2d
 8011bba:	222b      	movge	r2, #43	; 0x2b
 8011bbc:	2909      	cmp	r1, #9
 8011bbe:	7042      	strb	r2, [r0, #1]
 8011bc0:	dd2a      	ble.n	8011c18 <__exponent+0x70>
 8011bc2:	f10d 0407 	add.w	r4, sp, #7
 8011bc6:	46a4      	mov	ip, r4
 8011bc8:	270a      	movs	r7, #10
 8011bca:	46a6      	mov	lr, r4
 8011bcc:	460a      	mov	r2, r1
 8011bce:	fb91 f6f7 	sdiv	r6, r1, r7
 8011bd2:	fb07 1516 	mls	r5, r7, r6, r1
 8011bd6:	3530      	adds	r5, #48	; 0x30
 8011bd8:	2a63      	cmp	r2, #99	; 0x63
 8011bda:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011bde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011be2:	4631      	mov	r1, r6
 8011be4:	dcf1      	bgt.n	8011bca <__exponent+0x22>
 8011be6:	3130      	adds	r1, #48	; 0x30
 8011be8:	f1ae 0502 	sub.w	r5, lr, #2
 8011bec:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011bf0:	1c44      	adds	r4, r0, #1
 8011bf2:	4629      	mov	r1, r5
 8011bf4:	4561      	cmp	r1, ip
 8011bf6:	d30a      	bcc.n	8011c0e <__exponent+0x66>
 8011bf8:	f10d 0209 	add.w	r2, sp, #9
 8011bfc:	eba2 020e 	sub.w	r2, r2, lr
 8011c00:	4565      	cmp	r5, ip
 8011c02:	bf88      	it	hi
 8011c04:	2200      	movhi	r2, #0
 8011c06:	4413      	add	r3, r2
 8011c08:	1a18      	subs	r0, r3, r0
 8011c0a:	b003      	add	sp, #12
 8011c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c12:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011c16:	e7ed      	b.n	8011bf4 <__exponent+0x4c>
 8011c18:	2330      	movs	r3, #48	; 0x30
 8011c1a:	3130      	adds	r1, #48	; 0x30
 8011c1c:	7083      	strb	r3, [r0, #2]
 8011c1e:	70c1      	strb	r1, [r0, #3]
 8011c20:	1d03      	adds	r3, r0, #4
 8011c22:	e7f1      	b.n	8011c08 <__exponent+0x60>

08011c24 <_printf_float>:
 8011c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c28:	ed2d 8b02 	vpush	{d8}
 8011c2c:	b08d      	sub	sp, #52	; 0x34
 8011c2e:	460c      	mov	r4, r1
 8011c30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011c34:	4616      	mov	r6, r2
 8011c36:	461f      	mov	r7, r3
 8011c38:	4605      	mov	r5, r0
 8011c3a:	f002 fd17 	bl	801466c <_localeconv_r>
 8011c3e:	f8d0 a000 	ldr.w	sl, [r0]
 8011c42:	4650      	mov	r0, sl
 8011c44:	f7ee fac4 	bl	80001d0 <strlen>
 8011c48:	2300      	movs	r3, #0
 8011c4a:	930a      	str	r3, [sp, #40]	; 0x28
 8011c4c:	6823      	ldr	r3, [r4, #0]
 8011c4e:	9305      	str	r3, [sp, #20]
 8011c50:	f8d8 3000 	ldr.w	r3, [r8]
 8011c54:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011c58:	3307      	adds	r3, #7
 8011c5a:	f023 0307 	bic.w	r3, r3, #7
 8011c5e:	f103 0208 	add.w	r2, r3, #8
 8011c62:	f8c8 2000 	str.w	r2, [r8]
 8011c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c6a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011c6e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011c72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011c76:	9307      	str	r3, [sp, #28]
 8011c78:	f8cd 8018 	str.w	r8, [sp, #24]
 8011c7c:	ee08 0a10 	vmov	s16, r0
 8011c80:	4b9f      	ldr	r3, [pc, #636]	; (8011f00 <_printf_float+0x2dc>)
 8011c82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011c86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c8a:	f7ee ff4f 	bl	8000b2c <__aeabi_dcmpun>
 8011c8e:	bb88      	cbnz	r0, 8011cf4 <_printf_float+0xd0>
 8011c90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011c94:	4b9a      	ldr	r3, [pc, #616]	; (8011f00 <_printf_float+0x2dc>)
 8011c96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c9a:	f7ee ff29 	bl	8000af0 <__aeabi_dcmple>
 8011c9e:	bb48      	cbnz	r0, 8011cf4 <_printf_float+0xd0>
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	4640      	mov	r0, r8
 8011ca6:	4649      	mov	r1, r9
 8011ca8:	f7ee ff18 	bl	8000adc <__aeabi_dcmplt>
 8011cac:	b110      	cbz	r0, 8011cb4 <_printf_float+0x90>
 8011cae:	232d      	movs	r3, #45	; 0x2d
 8011cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011cb4:	4b93      	ldr	r3, [pc, #588]	; (8011f04 <_printf_float+0x2e0>)
 8011cb6:	4894      	ldr	r0, [pc, #592]	; (8011f08 <_printf_float+0x2e4>)
 8011cb8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011cbc:	bf94      	ite	ls
 8011cbe:	4698      	movls	r8, r3
 8011cc0:	4680      	movhi	r8, r0
 8011cc2:	2303      	movs	r3, #3
 8011cc4:	6123      	str	r3, [r4, #16]
 8011cc6:	9b05      	ldr	r3, [sp, #20]
 8011cc8:	f023 0204 	bic.w	r2, r3, #4
 8011ccc:	6022      	str	r2, [r4, #0]
 8011cce:	f04f 0900 	mov.w	r9, #0
 8011cd2:	9700      	str	r7, [sp, #0]
 8011cd4:	4633      	mov	r3, r6
 8011cd6:	aa0b      	add	r2, sp, #44	; 0x2c
 8011cd8:	4621      	mov	r1, r4
 8011cda:	4628      	mov	r0, r5
 8011cdc:	f000 f9d8 	bl	8012090 <_printf_common>
 8011ce0:	3001      	adds	r0, #1
 8011ce2:	f040 8090 	bne.w	8011e06 <_printf_float+0x1e2>
 8011ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011cea:	b00d      	add	sp, #52	; 0x34
 8011cec:	ecbd 8b02 	vpop	{d8}
 8011cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cf4:	4642      	mov	r2, r8
 8011cf6:	464b      	mov	r3, r9
 8011cf8:	4640      	mov	r0, r8
 8011cfa:	4649      	mov	r1, r9
 8011cfc:	f7ee ff16 	bl	8000b2c <__aeabi_dcmpun>
 8011d00:	b140      	cbz	r0, 8011d14 <_printf_float+0xf0>
 8011d02:	464b      	mov	r3, r9
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	bfbc      	itt	lt
 8011d08:	232d      	movlt	r3, #45	; 0x2d
 8011d0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011d0e:	487f      	ldr	r0, [pc, #508]	; (8011f0c <_printf_float+0x2e8>)
 8011d10:	4b7f      	ldr	r3, [pc, #508]	; (8011f10 <_printf_float+0x2ec>)
 8011d12:	e7d1      	b.n	8011cb8 <_printf_float+0x94>
 8011d14:	6863      	ldr	r3, [r4, #4]
 8011d16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011d1a:	9206      	str	r2, [sp, #24]
 8011d1c:	1c5a      	adds	r2, r3, #1
 8011d1e:	d13f      	bne.n	8011da0 <_printf_float+0x17c>
 8011d20:	2306      	movs	r3, #6
 8011d22:	6063      	str	r3, [r4, #4]
 8011d24:	9b05      	ldr	r3, [sp, #20]
 8011d26:	6861      	ldr	r1, [r4, #4]
 8011d28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	9303      	str	r3, [sp, #12]
 8011d30:	ab0a      	add	r3, sp, #40	; 0x28
 8011d32:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011d36:	ab09      	add	r3, sp, #36	; 0x24
 8011d38:	ec49 8b10 	vmov	d0, r8, r9
 8011d3c:	9300      	str	r3, [sp, #0]
 8011d3e:	6022      	str	r2, [r4, #0]
 8011d40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011d44:	4628      	mov	r0, r5
 8011d46:	f7ff fecd 	bl	8011ae4 <__cvt>
 8011d4a:	9b06      	ldr	r3, [sp, #24]
 8011d4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011d4e:	2b47      	cmp	r3, #71	; 0x47
 8011d50:	4680      	mov	r8, r0
 8011d52:	d108      	bne.n	8011d66 <_printf_float+0x142>
 8011d54:	1cc8      	adds	r0, r1, #3
 8011d56:	db02      	blt.n	8011d5e <_printf_float+0x13a>
 8011d58:	6863      	ldr	r3, [r4, #4]
 8011d5a:	4299      	cmp	r1, r3
 8011d5c:	dd41      	ble.n	8011de2 <_printf_float+0x1be>
 8011d5e:	f1ab 0b02 	sub.w	fp, fp, #2
 8011d62:	fa5f fb8b 	uxtb.w	fp, fp
 8011d66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011d6a:	d820      	bhi.n	8011dae <_printf_float+0x18a>
 8011d6c:	3901      	subs	r1, #1
 8011d6e:	465a      	mov	r2, fp
 8011d70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011d74:	9109      	str	r1, [sp, #36]	; 0x24
 8011d76:	f7ff ff17 	bl	8011ba8 <__exponent>
 8011d7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d7c:	1813      	adds	r3, r2, r0
 8011d7e:	2a01      	cmp	r2, #1
 8011d80:	4681      	mov	r9, r0
 8011d82:	6123      	str	r3, [r4, #16]
 8011d84:	dc02      	bgt.n	8011d8c <_printf_float+0x168>
 8011d86:	6822      	ldr	r2, [r4, #0]
 8011d88:	07d2      	lsls	r2, r2, #31
 8011d8a:	d501      	bpl.n	8011d90 <_printf_float+0x16c>
 8011d8c:	3301      	adds	r3, #1
 8011d8e:	6123      	str	r3, [r4, #16]
 8011d90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d09c      	beq.n	8011cd2 <_printf_float+0xae>
 8011d98:	232d      	movs	r3, #45	; 0x2d
 8011d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d9e:	e798      	b.n	8011cd2 <_printf_float+0xae>
 8011da0:	9a06      	ldr	r2, [sp, #24]
 8011da2:	2a47      	cmp	r2, #71	; 0x47
 8011da4:	d1be      	bne.n	8011d24 <_printf_float+0x100>
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d1bc      	bne.n	8011d24 <_printf_float+0x100>
 8011daa:	2301      	movs	r3, #1
 8011dac:	e7b9      	b.n	8011d22 <_printf_float+0xfe>
 8011dae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011db2:	d118      	bne.n	8011de6 <_printf_float+0x1c2>
 8011db4:	2900      	cmp	r1, #0
 8011db6:	6863      	ldr	r3, [r4, #4]
 8011db8:	dd0b      	ble.n	8011dd2 <_printf_float+0x1ae>
 8011dba:	6121      	str	r1, [r4, #16]
 8011dbc:	b913      	cbnz	r3, 8011dc4 <_printf_float+0x1a0>
 8011dbe:	6822      	ldr	r2, [r4, #0]
 8011dc0:	07d0      	lsls	r0, r2, #31
 8011dc2:	d502      	bpl.n	8011dca <_printf_float+0x1a6>
 8011dc4:	3301      	adds	r3, #1
 8011dc6:	440b      	add	r3, r1
 8011dc8:	6123      	str	r3, [r4, #16]
 8011dca:	65a1      	str	r1, [r4, #88]	; 0x58
 8011dcc:	f04f 0900 	mov.w	r9, #0
 8011dd0:	e7de      	b.n	8011d90 <_printf_float+0x16c>
 8011dd2:	b913      	cbnz	r3, 8011dda <_printf_float+0x1b6>
 8011dd4:	6822      	ldr	r2, [r4, #0]
 8011dd6:	07d2      	lsls	r2, r2, #31
 8011dd8:	d501      	bpl.n	8011dde <_printf_float+0x1ba>
 8011dda:	3302      	adds	r3, #2
 8011ddc:	e7f4      	b.n	8011dc8 <_printf_float+0x1a4>
 8011dde:	2301      	movs	r3, #1
 8011de0:	e7f2      	b.n	8011dc8 <_printf_float+0x1a4>
 8011de2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011de8:	4299      	cmp	r1, r3
 8011dea:	db05      	blt.n	8011df8 <_printf_float+0x1d4>
 8011dec:	6823      	ldr	r3, [r4, #0]
 8011dee:	6121      	str	r1, [r4, #16]
 8011df0:	07d8      	lsls	r0, r3, #31
 8011df2:	d5ea      	bpl.n	8011dca <_printf_float+0x1a6>
 8011df4:	1c4b      	adds	r3, r1, #1
 8011df6:	e7e7      	b.n	8011dc8 <_printf_float+0x1a4>
 8011df8:	2900      	cmp	r1, #0
 8011dfa:	bfd4      	ite	le
 8011dfc:	f1c1 0202 	rsble	r2, r1, #2
 8011e00:	2201      	movgt	r2, #1
 8011e02:	4413      	add	r3, r2
 8011e04:	e7e0      	b.n	8011dc8 <_printf_float+0x1a4>
 8011e06:	6823      	ldr	r3, [r4, #0]
 8011e08:	055a      	lsls	r2, r3, #21
 8011e0a:	d407      	bmi.n	8011e1c <_printf_float+0x1f8>
 8011e0c:	6923      	ldr	r3, [r4, #16]
 8011e0e:	4642      	mov	r2, r8
 8011e10:	4631      	mov	r1, r6
 8011e12:	4628      	mov	r0, r5
 8011e14:	47b8      	blx	r7
 8011e16:	3001      	adds	r0, #1
 8011e18:	d12c      	bne.n	8011e74 <_printf_float+0x250>
 8011e1a:	e764      	b.n	8011ce6 <_printf_float+0xc2>
 8011e1c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011e20:	f240 80e0 	bls.w	8011fe4 <_printf_float+0x3c0>
 8011e24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011e28:	2200      	movs	r2, #0
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	f7ee fe4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011e30:	2800      	cmp	r0, #0
 8011e32:	d034      	beq.n	8011e9e <_printf_float+0x27a>
 8011e34:	4a37      	ldr	r2, [pc, #220]	; (8011f14 <_printf_float+0x2f0>)
 8011e36:	2301      	movs	r3, #1
 8011e38:	4631      	mov	r1, r6
 8011e3a:	4628      	mov	r0, r5
 8011e3c:	47b8      	blx	r7
 8011e3e:	3001      	adds	r0, #1
 8011e40:	f43f af51 	beq.w	8011ce6 <_printf_float+0xc2>
 8011e44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011e48:	429a      	cmp	r2, r3
 8011e4a:	db02      	blt.n	8011e52 <_printf_float+0x22e>
 8011e4c:	6823      	ldr	r3, [r4, #0]
 8011e4e:	07d8      	lsls	r0, r3, #31
 8011e50:	d510      	bpl.n	8011e74 <_printf_float+0x250>
 8011e52:	ee18 3a10 	vmov	r3, s16
 8011e56:	4652      	mov	r2, sl
 8011e58:	4631      	mov	r1, r6
 8011e5a:	4628      	mov	r0, r5
 8011e5c:	47b8      	blx	r7
 8011e5e:	3001      	adds	r0, #1
 8011e60:	f43f af41 	beq.w	8011ce6 <_printf_float+0xc2>
 8011e64:	f04f 0800 	mov.w	r8, #0
 8011e68:	f104 091a 	add.w	r9, r4, #26
 8011e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e6e:	3b01      	subs	r3, #1
 8011e70:	4543      	cmp	r3, r8
 8011e72:	dc09      	bgt.n	8011e88 <_printf_float+0x264>
 8011e74:	6823      	ldr	r3, [r4, #0]
 8011e76:	079b      	lsls	r3, r3, #30
 8011e78:	f100 8105 	bmi.w	8012086 <_printf_float+0x462>
 8011e7c:	68e0      	ldr	r0, [r4, #12]
 8011e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e80:	4298      	cmp	r0, r3
 8011e82:	bfb8      	it	lt
 8011e84:	4618      	movlt	r0, r3
 8011e86:	e730      	b.n	8011cea <_printf_float+0xc6>
 8011e88:	2301      	movs	r3, #1
 8011e8a:	464a      	mov	r2, r9
 8011e8c:	4631      	mov	r1, r6
 8011e8e:	4628      	mov	r0, r5
 8011e90:	47b8      	blx	r7
 8011e92:	3001      	adds	r0, #1
 8011e94:	f43f af27 	beq.w	8011ce6 <_printf_float+0xc2>
 8011e98:	f108 0801 	add.w	r8, r8, #1
 8011e9c:	e7e6      	b.n	8011e6c <_printf_float+0x248>
 8011e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	dc39      	bgt.n	8011f18 <_printf_float+0x2f4>
 8011ea4:	4a1b      	ldr	r2, [pc, #108]	; (8011f14 <_printf_float+0x2f0>)
 8011ea6:	2301      	movs	r3, #1
 8011ea8:	4631      	mov	r1, r6
 8011eaa:	4628      	mov	r0, r5
 8011eac:	47b8      	blx	r7
 8011eae:	3001      	adds	r0, #1
 8011eb0:	f43f af19 	beq.w	8011ce6 <_printf_float+0xc2>
 8011eb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011eb8:	4313      	orrs	r3, r2
 8011eba:	d102      	bne.n	8011ec2 <_printf_float+0x29e>
 8011ebc:	6823      	ldr	r3, [r4, #0]
 8011ebe:	07d9      	lsls	r1, r3, #31
 8011ec0:	d5d8      	bpl.n	8011e74 <_printf_float+0x250>
 8011ec2:	ee18 3a10 	vmov	r3, s16
 8011ec6:	4652      	mov	r2, sl
 8011ec8:	4631      	mov	r1, r6
 8011eca:	4628      	mov	r0, r5
 8011ecc:	47b8      	blx	r7
 8011ece:	3001      	adds	r0, #1
 8011ed0:	f43f af09 	beq.w	8011ce6 <_printf_float+0xc2>
 8011ed4:	f04f 0900 	mov.w	r9, #0
 8011ed8:	f104 0a1a 	add.w	sl, r4, #26
 8011edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ede:	425b      	negs	r3, r3
 8011ee0:	454b      	cmp	r3, r9
 8011ee2:	dc01      	bgt.n	8011ee8 <_printf_float+0x2c4>
 8011ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ee6:	e792      	b.n	8011e0e <_printf_float+0x1ea>
 8011ee8:	2301      	movs	r3, #1
 8011eea:	4652      	mov	r2, sl
 8011eec:	4631      	mov	r1, r6
 8011eee:	4628      	mov	r0, r5
 8011ef0:	47b8      	blx	r7
 8011ef2:	3001      	adds	r0, #1
 8011ef4:	f43f aef7 	beq.w	8011ce6 <_printf_float+0xc2>
 8011ef8:	f109 0901 	add.w	r9, r9, #1
 8011efc:	e7ee      	b.n	8011edc <_printf_float+0x2b8>
 8011efe:	bf00      	nop
 8011f00:	7fefffff 	.word	0x7fefffff
 8011f04:	08017a14 	.word	0x08017a14
 8011f08:	08017a18 	.word	0x08017a18
 8011f0c:	08017a20 	.word	0x08017a20
 8011f10:	08017a1c 	.word	0x08017a1c
 8011f14:	08017a24 	.word	0x08017a24
 8011f18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011f1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011f1c:	429a      	cmp	r2, r3
 8011f1e:	bfa8      	it	ge
 8011f20:	461a      	movge	r2, r3
 8011f22:	2a00      	cmp	r2, #0
 8011f24:	4691      	mov	r9, r2
 8011f26:	dc37      	bgt.n	8011f98 <_printf_float+0x374>
 8011f28:	f04f 0b00 	mov.w	fp, #0
 8011f2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011f30:	f104 021a 	add.w	r2, r4, #26
 8011f34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011f36:	9305      	str	r3, [sp, #20]
 8011f38:	eba3 0309 	sub.w	r3, r3, r9
 8011f3c:	455b      	cmp	r3, fp
 8011f3e:	dc33      	bgt.n	8011fa8 <_printf_float+0x384>
 8011f40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011f44:	429a      	cmp	r2, r3
 8011f46:	db3b      	blt.n	8011fc0 <_printf_float+0x39c>
 8011f48:	6823      	ldr	r3, [r4, #0]
 8011f4a:	07da      	lsls	r2, r3, #31
 8011f4c:	d438      	bmi.n	8011fc0 <_printf_float+0x39c>
 8011f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f50:	9a05      	ldr	r2, [sp, #20]
 8011f52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011f54:	1a9a      	subs	r2, r3, r2
 8011f56:	eba3 0901 	sub.w	r9, r3, r1
 8011f5a:	4591      	cmp	r9, r2
 8011f5c:	bfa8      	it	ge
 8011f5e:	4691      	movge	r9, r2
 8011f60:	f1b9 0f00 	cmp.w	r9, #0
 8011f64:	dc35      	bgt.n	8011fd2 <_printf_float+0x3ae>
 8011f66:	f04f 0800 	mov.w	r8, #0
 8011f6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011f6e:	f104 0a1a 	add.w	sl, r4, #26
 8011f72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011f76:	1a9b      	subs	r3, r3, r2
 8011f78:	eba3 0309 	sub.w	r3, r3, r9
 8011f7c:	4543      	cmp	r3, r8
 8011f7e:	f77f af79 	ble.w	8011e74 <_printf_float+0x250>
 8011f82:	2301      	movs	r3, #1
 8011f84:	4652      	mov	r2, sl
 8011f86:	4631      	mov	r1, r6
 8011f88:	4628      	mov	r0, r5
 8011f8a:	47b8      	blx	r7
 8011f8c:	3001      	adds	r0, #1
 8011f8e:	f43f aeaa 	beq.w	8011ce6 <_printf_float+0xc2>
 8011f92:	f108 0801 	add.w	r8, r8, #1
 8011f96:	e7ec      	b.n	8011f72 <_printf_float+0x34e>
 8011f98:	4613      	mov	r3, r2
 8011f9a:	4631      	mov	r1, r6
 8011f9c:	4642      	mov	r2, r8
 8011f9e:	4628      	mov	r0, r5
 8011fa0:	47b8      	blx	r7
 8011fa2:	3001      	adds	r0, #1
 8011fa4:	d1c0      	bne.n	8011f28 <_printf_float+0x304>
 8011fa6:	e69e      	b.n	8011ce6 <_printf_float+0xc2>
 8011fa8:	2301      	movs	r3, #1
 8011faa:	4631      	mov	r1, r6
 8011fac:	4628      	mov	r0, r5
 8011fae:	9205      	str	r2, [sp, #20]
 8011fb0:	47b8      	blx	r7
 8011fb2:	3001      	adds	r0, #1
 8011fb4:	f43f ae97 	beq.w	8011ce6 <_printf_float+0xc2>
 8011fb8:	9a05      	ldr	r2, [sp, #20]
 8011fba:	f10b 0b01 	add.w	fp, fp, #1
 8011fbe:	e7b9      	b.n	8011f34 <_printf_float+0x310>
 8011fc0:	ee18 3a10 	vmov	r3, s16
 8011fc4:	4652      	mov	r2, sl
 8011fc6:	4631      	mov	r1, r6
 8011fc8:	4628      	mov	r0, r5
 8011fca:	47b8      	blx	r7
 8011fcc:	3001      	adds	r0, #1
 8011fce:	d1be      	bne.n	8011f4e <_printf_float+0x32a>
 8011fd0:	e689      	b.n	8011ce6 <_printf_float+0xc2>
 8011fd2:	9a05      	ldr	r2, [sp, #20]
 8011fd4:	464b      	mov	r3, r9
 8011fd6:	4442      	add	r2, r8
 8011fd8:	4631      	mov	r1, r6
 8011fda:	4628      	mov	r0, r5
 8011fdc:	47b8      	blx	r7
 8011fde:	3001      	adds	r0, #1
 8011fe0:	d1c1      	bne.n	8011f66 <_printf_float+0x342>
 8011fe2:	e680      	b.n	8011ce6 <_printf_float+0xc2>
 8011fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011fe6:	2a01      	cmp	r2, #1
 8011fe8:	dc01      	bgt.n	8011fee <_printf_float+0x3ca>
 8011fea:	07db      	lsls	r3, r3, #31
 8011fec:	d538      	bpl.n	8012060 <_printf_float+0x43c>
 8011fee:	2301      	movs	r3, #1
 8011ff0:	4642      	mov	r2, r8
 8011ff2:	4631      	mov	r1, r6
 8011ff4:	4628      	mov	r0, r5
 8011ff6:	47b8      	blx	r7
 8011ff8:	3001      	adds	r0, #1
 8011ffa:	f43f ae74 	beq.w	8011ce6 <_printf_float+0xc2>
 8011ffe:	ee18 3a10 	vmov	r3, s16
 8012002:	4652      	mov	r2, sl
 8012004:	4631      	mov	r1, r6
 8012006:	4628      	mov	r0, r5
 8012008:	47b8      	blx	r7
 801200a:	3001      	adds	r0, #1
 801200c:	f43f ae6b 	beq.w	8011ce6 <_printf_float+0xc2>
 8012010:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012014:	2200      	movs	r2, #0
 8012016:	2300      	movs	r3, #0
 8012018:	f7ee fd56 	bl	8000ac8 <__aeabi_dcmpeq>
 801201c:	b9d8      	cbnz	r0, 8012056 <_printf_float+0x432>
 801201e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012020:	f108 0201 	add.w	r2, r8, #1
 8012024:	3b01      	subs	r3, #1
 8012026:	4631      	mov	r1, r6
 8012028:	4628      	mov	r0, r5
 801202a:	47b8      	blx	r7
 801202c:	3001      	adds	r0, #1
 801202e:	d10e      	bne.n	801204e <_printf_float+0x42a>
 8012030:	e659      	b.n	8011ce6 <_printf_float+0xc2>
 8012032:	2301      	movs	r3, #1
 8012034:	4652      	mov	r2, sl
 8012036:	4631      	mov	r1, r6
 8012038:	4628      	mov	r0, r5
 801203a:	47b8      	blx	r7
 801203c:	3001      	adds	r0, #1
 801203e:	f43f ae52 	beq.w	8011ce6 <_printf_float+0xc2>
 8012042:	f108 0801 	add.w	r8, r8, #1
 8012046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012048:	3b01      	subs	r3, #1
 801204a:	4543      	cmp	r3, r8
 801204c:	dcf1      	bgt.n	8012032 <_printf_float+0x40e>
 801204e:	464b      	mov	r3, r9
 8012050:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012054:	e6dc      	b.n	8011e10 <_printf_float+0x1ec>
 8012056:	f04f 0800 	mov.w	r8, #0
 801205a:	f104 0a1a 	add.w	sl, r4, #26
 801205e:	e7f2      	b.n	8012046 <_printf_float+0x422>
 8012060:	2301      	movs	r3, #1
 8012062:	4642      	mov	r2, r8
 8012064:	e7df      	b.n	8012026 <_printf_float+0x402>
 8012066:	2301      	movs	r3, #1
 8012068:	464a      	mov	r2, r9
 801206a:	4631      	mov	r1, r6
 801206c:	4628      	mov	r0, r5
 801206e:	47b8      	blx	r7
 8012070:	3001      	adds	r0, #1
 8012072:	f43f ae38 	beq.w	8011ce6 <_printf_float+0xc2>
 8012076:	f108 0801 	add.w	r8, r8, #1
 801207a:	68e3      	ldr	r3, [r4, #12]
 801207c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801207e:	1a5b      	subs	r3, r3, r1
 8012080:	4543      	cmp	r3, r8
 8012082:	dcf0      	bgt.n	8012066 <_printf_float+0x442>
 8012084:	e6fa      	b.n	8011e7c <_printf_float+0x258>
 8012086:	f04f 0800 	mov.w	r8, #0
 801208a:	f104 0919 	add.w	r9, r4, #25
 801208e:	e7f4      	b.n	801207a <_printf_float+0x456>

08012090 <_printf_common>:
 8012090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012094:	4616      	mov	r6, r2
 8012096:	4699      	mov	r9, r3
 8012098:	688a      	ldr	r2, [r1, #8]
 801209a:	690b      	ldr	r3, [r1, #16]
 801209c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80120a0:	4293      	cmp	r3, r2
 80120a2:	bfb8      	it	lt
 80120a4:	4613      	movlt	r3, r2
 80120a6:	6033      	str	r3, [r6, #0]
 80120a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80120ac:	4607      	mov	r7, r0
 80120ae:	460c      	mov	r4, r1
 80120b0:	b10a      	cbz	r2, 80120b6 <_printf_common+0x26>
 80120b2:	3301      	adds	r3, #1
 80120b4:	6033      	str	r3, [r6, #0]
 80120b6:	6823      	ldr	r3, [r4, #0]
 80120b8:	0699      	lsls	r1, r3, #26
 80120ba:	bf42      	ittt	mi
 80120bc:	6833      	ldrmi	r3, [r6, #0]
 80120be:	3302      	addmi	r3, #2
 80120c0:	6033      	strmi	r3, [r6, #0]
 80120c2:	6825      	ldr	r5, [r4, #0]
 80120c4:	f015 0506 	ands.w	r5, r5, #6
 80120c8:	d106      	bne.n	80120d8 <_printf_common+0x48>
 80120ca:	f104 0a19 	add.w	sl, r4, #25
 80120ce:	68e3      	ldr	r3, [r4, #12]
 80120d0:	6832      	ldr	r2, [r6, #0]
 80120d2:	1a9b      	subs	r3, r3, r2
 80120d4:	42ab      	cmp	r3, r5
 80120d6:	dc26      	bgt.n	8012126 <_printf_common+0x96>
 80120d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80120dc:	1e13      	subs	r3, r2, #0
 80120de:	6822      	ldr	r2, [r4, #0]
 80120e0:	bf18      	it	ne
 80120e2:	2301      	movne	r3, #1
 80120e4:	0692      	lsls	r2, r2, #26
 80120e6:	d42b      	bmi.n	8012140 <_printf_common+0xb0>
 80120e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80120ec:	4649      	mov	r1, r9
 80120ee:	4638      	mov	r0, r7
 80120f0:	47c0      	blx	r8
 80120f2:	3001      	adds	r0, #1
 80120f4:	d01e      	beq.n	8012134 <_printf_common+0xa4>
 80120f6:	6823      	ldr	r3, [r4, #0]
 80120f8:	68e5      	ldr	r5, [r4, #12]
 80120fa:	6832      	ldr	r2, [r6, #0]
 80120fc:	f003 0306 	and.w	r3, r3, #6
 8012100:	2b04      	cmp	r3, #4
 8012102:	bf08      	it	eq
 8012104:	1aad      	subeq	r5, r5, r2
 8012106:	68a3      	ldr	r3, [r4, #8]
 8012108:	6922      	ldr	r2, [r4, #16]
 801210a:	bf0c      	ite	eq
 801210c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012110:	2500      	movne	r5, #0
 8012112:	4293      	cmp	r3, r2
 8012114:	bfc4      	itt	gt
 8012116:	1a9b      	subgt	r3, r3, r2
 8012118:	18ed      	addgt	r5, r5, r3
 801211a:	2600      	movs	r6, #0
 801211c:	341a      	adds	r4, #26
 801211e:	42b5      	cmp	r5, r6
 8012120:	d11a      	bne.n	8012158 <_printf_common+0xc8>
 8012122:	2000      	movs	r0, #0
 8012124:	e008      	b.n	8012138 <_printf_common+0xa8>
 8012126:	2301      	movs	r3, #1
 8012128:	4652      	mov	r2, sl
 801212a:	4649      	mov	r1, r9
 801212c:	4638      	mov	r0, r7
 801212e:	47c0      	blx	r8
 8012130:	3001      	adds	r0, #1
 8012132:	d103      	bne.n	801213c <_printf_common+0xac>
 8012134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801213c:	3501      	adds	r5, #1
 801213e:	e7c6      	b.n	80120ce <_printf_common+0x3e>
 8012140:	18e1      	adds	r1, r4, r3
 8012142:	1c5a      	adds	r2, r3, #1
 8012144:	2030      	movs	r0, #48	; 0x30
 8012146:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801214a:	4422      	add	r2, r4
 801214c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012150:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012154:	3302      	adds	r3, #2
 8012156:	e7c7      	b.n	80120e8 <_printf_common+0x58>
 8012158:	2301      	movs	r3, #1
 801215a:	4622      	mov	r2, r4
 801215c:	4649      	mov	r1, r9
 801215e:	4638      	mov	r0, r7
 8012160:	47c0      	blx	r8
 8012162:	3001      	adds	r0, #1
 8012164:	d0e6      	beq.n	8012134 <_printf_common+0xa4>
 8012166:	3601      	adds	r6, #1
 8012168:	e7d9      	b.n	801211e <_printf_common+0x8e>
	...

0801216c <_printf_i>:
 801216c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012170:	7e0f      	ldrb	r7, [r1, #24]
 8012172:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012174:	2f78      	cmp	r7, #120	; 0x78
 8012176:	4691      	mov	r9, r2
 8012178:	4680      	mov	r8, r0
 801217a:	460c      	mov	r4, r1
 801217c:	469a      	mov	sl, r3
 801217e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012182:	d807      	bhi.n	8012194 <_printf_i+0x28>
 8012184:	2f62      	cmp	r7, #98	; 0x62
 8012186:	d80a      	bhi.n	801219e <_printf_i+0x32>
 8012188:	2f00      	cmp	r7, #0
 801218a:	f000 80d8 	beq.w	801233e <_printf_i+0x1d2>
 801218e:	2f58      	cmp	r7, #88	; 0x58
 8012190:	f000 80a3 	beq.w	80122da <_printf_i+0x16e>
 8012194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801219c:	e03a      	b.n	8012214 <_printf_i+0xa8>
 801219e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80121a2:	2b15      	cmp	r3, #21
 80121a4:	d8f6      	bhi.n	8012194 <_printf_i+0x28>
 80121a6:	a101      	add	r1, pc, #4	; (adr r1, 80121ac <_printf_i+0x40>)
 80121a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80121ac:	08012205 	.word	0x08012205
 80121b0:	08012219 	.word	0x08012219
 80121b4:	08012195 	.word	0x08012195
 80121b8:	08012195 	.word	0x08012195
 80121bc:	08012195 	.word	0x08012195
 80121c0:	08012195 	.word	0x08012195
 80121c4:	08012219 	.word	0x08012219
 80121c8:	08012195 	.word	0x08012195
 80121cc:	08012195 	.word	0x08012195
 80121d0:	08012195 	.word	0x08012195
 80121d4:	08012195 	.word	0x08012195
 80121d8:	08012325 	.word	0x08012325
 80121dc:	08012249 	.word	0x08012249
 80121e0:	08012307 	.word	0x08012307
 80121e4:	08012195 	.word	0x08012195
 80121e8:	08012195 	.word	0x08012195
 80121ec:	08012347 	.word	0x08012347
 80121f0:	08012195 	.word	0x08012195
 80121f4:	08012249 	.word	0x08012249
 80121f8:	08012195 	.word	0x08012195
 80121fc:	08012195 	.word	0x08012195
 8012200:	0801230f 	.word	0x0801230f
 8012204:	682b      	ldr	r3, [r5, #0]
 8012206:	1d1a      	adds	r2, r3, #4
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	602a      	str	r2, [r5, #0]
 801220c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012214:	2301      	movs	r3, #1
 8012216:	e0a3      	b.n	8012360 <_printf_i+0x1f4>
 8012218:	6820      	ldr	r0, [r4, #0]
 801221a:	6829      	ldr	r1, [r5, #0]
 801221c:	0606      	lsls	r6, r0, #24
 801221e:	f101 0304 	add.w	r3, r1, #4
 8012222:	d50a      	bpl.n	801223a <_printf_i+0xce>
 8012224:	680e      	ldr	r6, [r1, #0]
 8012226:	602b      	str	r3, [r5, #0]
 8012228:	2e00      	cmp	r6, #0
 801222a:	da03      	bge.n	8012234 <_printf_i+0xc8>
 801222c:	232d      	movs	r3, #45	; 0x2d
 801222e:	4276      	negs	r6, r6
 8012230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012234:	485e      	ldr	r0, [pc, #376]	; (80123b0 <_printf_i+0x244>)
 8012236:	230a      	movs	r3, #10
 8012238:	e019      	b.n	801226e <_printf_i+0x102>
 801223a:	680e      	ldr	r6, [r1, #0]
 801223c:	602b      	str	r3, [r5, #0]
 801223e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012242:	bf18      	it	ne
 8012244:	b236      	sxthne	r6, r6
 8012246:	e7ef      	b.n	8012228 <_printf_i+0xbc>
 8012248:	682b      	ldr	r3, [r5, #0]
 801224a:	6820      	ldr	r0, [r4, #0]
 801224c:	1d19      	adds	r1, r3, #4
 801224e:	6029      	str	r1, [r5, #0]
 8012250:	0601      	lsls	r1, r0, #24
 8012252:	d501      	bpl.n	8012258 <_printf_i+0xec>
 8012254:	681e      	ldr	r6, [r3, #0]
 8012256:	e002      	b.n	801225e <_printf_i+0xf2>
 8012258:	0646      	lsls	r6, r0, #25
 801225a:	d5fb      	bpl.n	8012254 <_printf_i+0xe8>
 801225c:	881e      	ldrh	r6, [r3, #0]
 801225e:	4854      	ldr	r0, [pc, #336]	; (80123b0 <_printf_i+0x244>)
 8012260:	2f6f      	cmp	r7, #111	; 0x6f
 8012262:	bf0c      	ite	eq
 8012264:	2308      	moveq	r3, #8
 8012266:	230a      	movne	r3, #10
 8012268:	2100      	movs	r1, #0
 801226a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801226e:	6865      	ldr	r5, [r4, #4]
 8012270:	60a5      	str	r5, [r4, #8]
 8012272:	2d00      	cmp	r5, #0
 8012274:	bfa2      	ittt	ge
 8012276:	6821      	ldrge	r1, [r4, #0]
 8012278:	f021 0104 	bicge.w	r1, r1, #4
 801227c:	6021      	strge	r1, [r4, #0]
 801227e:	b90e      	cbnz	r6, 8012284 <_printf_i+0x118>
 8012280:	2d00      	cmp	r5, #0
 8012282:	d04d      	beq.n	8012320 <_printf_i+0x1b4>
 8012284:	4615      	mov	r5, r2
 8012286:	fbb6 f1f3 	udiv	r1, r6, r3
 801228a:	fb03 6711 	mls	r7, r3, r1, r6
 801228e:	5dc7      	ldrb	r7, [r0, r7]
 8012290:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012294:	4637      	mov	r7, r6
 8012296:	42bb      	cmp	r3, r7
 8012298:	460e      	mov	r6, r1
 801229a:	d9f4      	bls.n	8012286 <_printf_i+0x11a>
 801229c:	2b08      	cmp	r3, #8
 801229e:	d10b      	bne.n	80122b8 <_printf_i+0x14c>
 80122a0:	6823      	ldr	r3, [r4, #0]
 80122a2:	07de      	lsls	r6, r3, #31
 80122a4:	d508      	bpl.n	80122b8 <_printf_i+0x14c>
 80122a6:	6923      	ldr	r3, [r4, #16]
 80122a8:	6861      	ldr	r1, [r4, #4]
 80122aa:	4299      	cmp	r1, r3
 80122ac:	bfde      	ittt	le
 80122ae:	2330      	movle	r3, #48	; 0x30
 80122b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80122b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80122b8:	1b52      	subs	r2, r2, r5
 80122ba:	6122      	str	r2, [r4, #16]
 80122bc:	f8cd a000 	str.w	sl, [sp]
 80122c0:	464b      	mov	r3, r9
 80122c2:	aa03      	add	r2, sp, #12
 80122c4:	4621      	mov	r1, r4
 80122c6:	4640      	mov	r0, r8
 80122c8:	f7ff fee2 	bl	8012090 <_printf_common>
 80122cc:	3001      	adds	r0, #1
 80122ce:	d14c      	bne.n	801236a <_printf_i+0x1fe>
 80122d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80122d4:	b004      	add	sp, #16
 80122d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122da:	4835      	ldr	r0, [pc, #212]	; (80123b0 <_printf_i+0x244>)
 80122dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80122e0:	6829      	ldr	r1, [r5, #0]
 80122e2:	6823      	ldr	r3, [r4, #0]
 80122e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80122e8:	6029      	str	r1, [r5, #0]
 80122ea:	061d      	lsls	r5, r3, #24
 80122ec:	d514      	bpl.n	8012318 <_printf_i+0x1ac>
 80122ee:	07df      	lsls	r7, r3, #31
 80122f0:	bf44      	itt	mi
 80122f2:	f043 0320 	orrmi.w	r3, r3, #32
 80122f6:	6023      	strmi	r3, [r4, #0]
 80122f8:	b91e      	cbnz	r6, 8012302 <_printf_i+0x196>
 80122fa:	6823      	ldr	r3, [r4, #0]
 80122fc:	f023 0320 	bic.w	r3, r3, #32
 8012300:	6023      	str	r3, [r4, #0]
 8012302:	2310      	movs	r3, #16
 8012304:	e7b0      	b.n	8012268 <_printf_i+0xfc>
 8012306:	6823      	ldr	r3, [r4, #0]
 8012308:	f043 0320 	orr.w	r3, r3, #32
 801230c:	6023      	str	r3, [r4, #0]
 801230e:	2378      	movs	r3, #120	; 0x78
 8012310:	4828      	ldr	r0, [pc, #160]	; (80123b4 <_printf_i+0x248>)
 8012312:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012316:	e7e3      	b.n	80122e0 <_printf_i+0x174>
 8012318:	0659      	lsls	r1, r3, #25
 801231a:	bf48      	it	mi
 801231c:	b2b6      	uxthmi	r6, r6
 801231e:	e7e6      	b.n	80122ee <_printf_i+0x182>
 8012320:	4615      	mov	r5, r2
 8012322:	e7bb      	b.n	801229c <_printf_i+0x130>
 8012324:	682b      	ldr	r3, [r5, #0]
 8012326:	6826      	ldr	r6, [r4, #0]
 8012328:	6961      	ldr	r1, [r4, #20]
 801232a:	1d18      	adds	r0, r3, #4
 801232c:	6028      	str	r0, [r5, #0]
 801232e:	0635      	lsls	r5, r6, #24
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	d501      	bpl.n	8012338 <_printf_i+0x1cc>
 8012334:	6019      	str	r1, [r3, #0]
 8012336:	e002      	b.n	801233e <_printf_i+0x1d2>
 8012338:	0670      	lsls	r0, r6, #25
 801233a:	d5fb      	bpl.n	8012334 <_printf_i+0x1c8>
 801233c:	8019      	strh	r1, [r3, #0]
 801233e:	2300      	movs	r3, #0
 8012340:	6123      	str	r3, [r4, #16]
 8012342:	4615      	mov	r5, r2
 8012344:	e7ba      	b.n	80122bc <_printf_i+0x150>
 8012346:	682b      	ldr	r3, [r5, #0]
 8012348:	1d1a      	adds	r2, r3, #4
 801234a:	602a      	str	r2, [r5, #0]
 801234c:	681d      	ldr	r5, [r3, #0]
 801234e:	6862      	ldr	r2, [r4, #4]
 8012350:	2100      	movs	r1, #0
 8012352:	4628      	mov	r0, r5
 8012354:	f7ed ff44 	bl	80001e0 <memchr>
 8012358:	b108      	cbz	r0, 801235e <_printf_i+0x1f2>
 801235a:	1b40      	subs	r0, r0, r5
 801235c:	6060      	str	r0, [r4, #4]
 801235e:	6863      	ldr	r3, [r4, #4]
 8012360:	6123      	str	r3, [r4, #16]
 8012362:	2300      	movs	r3, #0
 8012364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012368:	e7a8      	b.n	80122bc <_printf_i+0x150>
 801236a:	6923      	ldr	r3, [r4, #16]
 801236c:	462a      	mov	r2, r5
 801236e:	4649      	mov	r1, r9
 8012370:	4640      	mov	r0, r8
 8012372:	47d0      	blx	sl
 8012374:	3001      	adds	r0, #1
 8012376:	d0ab      	beq.n	80122d0 <_printf_i+0x164>
 8012378:	6823      	ldr	r3, [r4, #0]
 801237a:	079b      	lsls	r3, r3, #30
 801237c:	d413      	bmi.n	80123a6 <_printf_i+0x23a>
 801237e:	68e0      	ldr	r0, [r4, #12]
 8012380:	9b03      	ldr	r3, [sp, #12]
 8012382:	4298      	cmp	r0, r3
 8012384:	bfb8      	it	lt
 8012386:	4618      	movlt	r0, r3
 8012388:	e7a4      	b.n	80122d4 <_printf_i+0x168>
 801238a:	2301      	movs	r3, #1
 801238c:	4632      	mov	r2, r6
 801238e:	4649      	mov	r1, r9
 8012390:	4640      	mov	r0, r8
 8012392:	47d0      	blx	sl
 8012394:	3001      	adds	r0, #1
 8012396:	d09b      	beq.n	80122d0 <_printf_i+0x164>
 8012398:	3501      	adds	r5, #1
 801239a:	68e3      	ldr	r3, [r4, #12]
 801239c:	9903      	ldr	r1, [sp, #12]
 801239e:	1a5b      	subs	r3, r3, r1
 80123a0:	42ab      	cmp	r3, r5
 80123a2:	dcf2      	bgt.n	801238a <_printf_i+0x21e>
 80123a4:	e7eb      	b.n	801237e <_printf_i+0x212>
 80123a6:	2500      	movs	r5, #0
 80123a8:	f104 0619 	add.w	r6, r4, #25
 80123ac:	e7f5      	b.n	801239a <_printf_i+0x22e>
 80123ae:	bf00      	nop
 80123b0:	08017a26 	.word	0x08017a26
 80123b4:	08017a37 	.word	0x08017a37

080123b8 <siprintf>:
 80123b8:	b40e      	push	{r1, r2, r3}
 80123ba:	b500      	push	{lr}
 80123bc:	b09c      	sub	sp, #112	; 0x70
 80123be:	ab1d      	add	r3, sp, #116	; 0x74
 80123c0:	9002      	str	r0, [sp, #8]
 80123c2:	9006      	str	r0, [sp, #24]
 80123c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80123c8:	4809      	ldr	r0, [pc, #36]	; (80123f0 <siprintf+0x38>)
 80123ca:	9107      	str	r1, [sp, #28]
 80123cc:	9104      	str	r1, [sp, #16]
 80123ce:	4909      	ldr	r1, [pc, #36]	; (80123f4 <siprintf+0x3c>)
 80123d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80123d4:	9105      	str	r1, [sp, #20]
 80123d6:	6800      	ldr	r0, [r0, #0]
 80123d8:	9301      	str	r3, [sp, #4]
 80123da:	a902      	add	r1, sp, #8
 80123dc:	f002 ff7c 	bl	80152d8 <_svfiprintf_r>
 80123e0:	9b02      	ldr	r3, [sp, #8]
 80123e2:	2200      	movs	r2, #0
 80123e4:	701a      	strb	r2, [r3, #0]
 80123e6:	b01c      	add	sp, #112	; 0x70
 80123e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80123ec:	b003      	add	sp, #12
 80123ee:	4770      	bx	lr
 80123f0:	20000234 	.word	0x20000234
 80123f4:	ffff0208 	.word	0xffff0208

080123f8 <strcat>:
 80123f8:	b510      	push	{r4, lr}
 80123fa:	4602      	mov	r2, r0
 80123fc:	7814      	ldrb	r4, [r2, #0]
 80123fe:	4613      	mov	r3, r2
 8012400:	3201      	adds	r2, #1
 8012402:	2c00      	cmp	r4, #0
 8012404:	d1fa      	bne.n	80123fc <strcat+0x4>
 8012406:	3b01      	subs	r3, #1
 8012408:	f811 2b01 	ldrb.w	r2, [r1], #1
 801240c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012410:	2a00      	cmp	r2, #0
 8012412:	d1f9      	bne.n	8012408 <strcat+0x10>
 8012414:	bd10      	pop	{r4, pc}

08012416 <strchr>:
 8012416:	b2c9      	uxtb	r1, r1
 8012418:	4603      	mov	r3, r0
 801241a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801241e:	b11a      	cbz	r2, 8012428 <strchr+0x12>
 8012420:	428a      	cmp	r2, r1
 8012422:	d1f9      	bne.n	8012418 <strchr+0x2>
 8012424:	4618      	mov	r0, r3
 8012426:	4770      	bx	lr
 8012428:	2900      	cmp	r1, #0
 801242a:	bf18      	it	ne
 801242c:	2300      	movne	r3, #0
 801242e:	e7f9      	b.n	8012424 <strchr+0xe>

08012430 <strncmp>:
 8012430:	b510      	push	{r4, lr}
 8012432:	b17a      	cbz	r2, 8012454 <strncmp+0x24>
 8012434:	4603      	mov	r3, r0
 8012436:	3901      	subs	r1, #1
 8012438:	1884      	adds	r4, r0, r2
 801243a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801243e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012442:	4290      	cmp	r0, r2
 8012444:	d101      	bne.n	801244a <strncmp+0x1a>
 8012446:	42a3      	cmp	r3, r4
 8012448:	d101      	bne.n	801244e <strncmp+0x1e>
 801244a:	1a80      	subs	r0, r0, r2
 801244c:	bd10      	pop	{r4, pc}
 801244e:	2800      	cmp	r0, #0
 8012450:	d1f3      	bne.n	801243a <strncmp+0xa>
 8012452:	e7fa      	b.n	801244a <strncmp+0x1a>
 8012454:	4610      	mov	r0, r2
 8012456:	e7f9      	b.n	801244c <strncmp+0x1c>

08012458 <strncpy>:
 8012458:	b510      	push	{r4, lr}
 801245a:	3901      	subs	r1, #1
 801245c:	4603      	mov	r3, r0
 801245e:	b132      	cbz	r2, 801246e <strncpy+0x16>
 8012460:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012464:	f803 4b01 	strb.w	r4, [r3], #1
 8012468:	3a01      	subs	r2, #1
 801246a:	2c00      	cmp	r4, #0
 801246c:	d1f7      	bne.n	801245e <strncpy+0x6>
 801246e:	441a      	add	r2, r3
 8012470:	2100      	movs	r1, #0
 8012472:	4293      	cmp	r3, r2
 8012474:	d100      	bne.n	8012478 <strncpy+0x20>
 8012476:	bd10      	pop	{r4, pc}
 8012478:	f803 1b01 	strb.w	r1, [r3], #1
 801247c:	e7f9      	b.n	8012472 <strncpy+0x1a>

0801247e <strstr>:
 801247e:	780a      	ldrb	r2, [r1, #0]
 8012480:	b570      	push	{r4, r5, r6, lr}
 8012482:	b96a      	cbnz	r2, 80124a0 <strstr+0x22>
 8012484:	bd70      	pop	{r4, r5, r6, pc}
 8012486:	429a      	cmp	r2, r3
 8012488:	d109      	bne.n	801249e <strstr+0x20>
 801248a:	460c      	mov	r4, r1
 801248c:	4605      	mov	r5, r0
 801248e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012492:	2b00      	cmp	r3, #0
 8012494:	d0f6      	beq.n	8012484 <strstr+0x6>
 8012496:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801249a:	429e      	cmp	r6, r3
 801249c:	d0f7      	beq.n	801248e <strstr+0x10>
 801249e:	3001      	adds	r0, #1
 80124a0:	7803      	ldrb	r3, [r0, #0]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d1ef      	bne.n	8012486 <strstr+0x8>
 80124a6:	4618      	mov	r0, r3
 80124a8:	e7ec      	b.n	8012484 <strstr+0x6>

080124aa <sulp>:
 80124aa:	b570      	push	{r4, r5, r6, lr}
 80124ac:	4604      	mov	r4, r0
 80124ae:	460d      	mov	r5, r1
 80124b0:	ec45 4b10 	vmov	d0, r4, r5
 80124b4:	4616      	mov	r6, r2
 80124b6:	f002 fc6d 	bl	8014d94 <__ulp>
 80124ba:	ec51 0b10 	vmov	r0, r1, d0
 80124be:	b17e      	cbz	r6, 80124e0 <sulp+0x36>
 80124c0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80124c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	dd09      	ble.n	80124e0 <sulp+0x36>
 80124cc:	051b      	lsls	r3, r3, #20
 80124ce:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80124d2:	2400      	movs	r4, #0
 80124d4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80124d8:	4622      	mov	r2, r4
 80124da:	462b      	mov	r3, r5
 80124dc:	f7ee f88c 	bl	80005f8 <__aeabi_dmul>
 80124e0:	bd70      	pop	{r4, r5, r6, pc}
 80124e2:	0000      	movs	r0, r0
 80124e4:	0000      	movs	r0, r0
	...

080124e8 <_strtod_l>:
 80124e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124ec:	ed2d 8b02 	vpush	{d8}
 80124f0:	b09d      	sub	sp, #116	; 0x74
 80124f2:	461f      	mov	r7, r3
 80124f4:	2300      	movs	r3, #0
 80124f6:	9318      	str	r3, [sp, #96]	; 0x60
 80124f8:	4ba2      	ldr	r3, [pc, #648]	; (8012784 <_strtod_l+0x29c>)
 80124fa:	9213      	str	r2, [sp, #76]	; 0x4c
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	9305      	str	r3, [sp, #20]
 8012500:	4604      	mov	r4, r0
 8012502:	4618      	mov	r0, r3
 8012504:	4688      	mov	r8, r1
 8012506:	f7ed fe63 	bl	80001d0 <strlen>
 801250a:	f04f 0a00 	mov.w	sl, #0
 801250e:	4605      	mov	r5, r0
 8012510:	f04f 0b00 	mov.w	fp, #0
 8012514:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8012518:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801251a:	781a      	ldrb	r2, [r3, #0]
 801251c:	2a2b      	cmp	r2, #43	; 0x2b
 801251e:	d04e      	beq.n	80125be <_strtod_l+0xd6>
 8012520:	d83b      	bhi.n	801259a <_strtod_l+0xb2>
 8012522:	2a0d      	cmp	r2, #13
 8012524:	d834      	bhi.n	8012590 <_strtod_l+0xa8>
 8012526:	2a08      	cmp	r2, #8
 8012528:	d834      	bhi.n	8012594 <_strtod_l+0xac>
 801252a:	2a00      	cmp	r2, #0
 801252c:	d03e      	beq.n	80125ac <_strtod_l+0xc4>
 801252e:	2300      	movs	r3, #0
 8012530:	930a      	str	r3, [sp, #40]	; 0x28
 8012532:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012534:	7833      	ldrb	r3, [r6, #0]
 8012536:	2b30      	cmp	r3, #48	; 0x30
 8012538:	f040 80b0 	bne.w	801269c <_strtod_l+0x1b4>
 801253c:	7873      	ldrb	r3, [r6, #1]
 801253e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012542:	2b58      	cmp	r3, #88	; 0x58
 8012544:	d168      	bne.n	8012618 <_strtod_l+0x130>
 8012546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012548:	9301      	str	r3, [sp, #4]
 801254a:	ab18      	add	r3, sp, #96	; 0x60
 801254c:	9702      	str	r7, [sp, #8]
 801254e:	9300      	str	r3, [sp, #0]
 8012550:	4a8d      	ldr	r2, [pc, #564]	; (8012788 <_strtod_l+0x2a0>)
 8012552:	ab19      	add	r3, sp, #100	; 0x64
 8012554:	a917      	add	r1, sp, #92	; 0x5c
 8012556:	4620      	mov	r0, r4
 8012558:	f001 fd80 	bl	801405c <__gethex>
 801255c:	f010 0707 	ands.w	r7, r0, #7
 8012560:	4605      	mov	r5, r0
 8012562:	d005      	beq.n	8012570 <_strtod_l+0x88>
 8012564:	2f06      	cmp	r7, #6
 8012566:	d12c      	bne.n	80125c2 <_strtod_l+0xda>
 8012568:	3601      	adds	r6, #1
 801256a:	2300      	movs	r3, #0
 801256c:	9617      	str	r6, [sp, #92]	; 0x5c
 801256e:	930a      	str	r3, [sp, #40]	; 0x28
 8012570:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012572:	2b00      	cmp	r3, #0
 8012574:	f040 8590 	bne.w	8013098 <_strtod_l+0xbb0>
 8012578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801257a:	b1eb      	cbz	r3, 80125b8 <_strtod_l+0xd0>
 801257c:	4652      	mov	r2, sl
 801257e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012582:	ec43 2b10 	vmov	d0, r2, r3
 8012586:	b01d      	add	sp, #116	; 0x74
 8012588:	ecbd 8b02 	vpop	{d8}
 801258c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012590:	2a20      	cmp	r2, #32
 8012592:	d1cc      	bne.n	801252e <_strtod_l+0x46>
 8012594:	3301      	adds	r3, #1
 8012596:	9317      	str	r3, [sp, #92]	; 0x5c
 8012598:	e7be      	b.n	8012518 <_strtod_l+0x30>
 801259a:	2a2d      	cmp	r2, #45	; 0x2d
 801259c:	d1c7      	bne.n	801252e <_strtod_l+0x46>
 801259e:	2201      	movs	r2, #1
 80125a0:	920a      	str	r2, [sp, #40]	; 0x28
 80125a2:	1c5a      	adds	r2, r3, #1
 80125a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80125a6:	785b      	ldrb	r3, [r3, #1]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d1c2      	bne.n	8012532 <_strtod_l+0x4a>
 80125ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80125ae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	f040 856e 	bne.w	8013094 <_strtod_l+0xbac>
 80125b8:	4652      	mov	r2, sl
 80125ba:	465b      	mov	r3, fp
 80125bc:	e7e1      	b.n	8012582 <_strtod_l+0x9a>
 80125be:	2200      	movs	r2, #0
 80125c0:	e7ee      	b.n	80125a0 <_strtod_l+0xb8>
 80125c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80125c4:	b13a      	cbz	r2, 80125d6 <_strtod_l+0xee>
 80125c6:	2135      	movs	r1, #53	; 0x35
 80125c8:	a81a      	add	r0, sp, #104	; 0x68
 80125ca:	f002 fcee 	bl	8014faa <__copybits>
 80125ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80125d0:	4620      	mov	r0, r4
 80125d2:	f002 f8ad 	bl	8014730 <_Bfree>
 80125d6:	3f01      	subs	r7, #1
 80125d8:	2f04      	cmp	r7, #4
 80125da:	d806      	bhi.n	80125ea <_strtod_l+0x102>
 80125dc:	e8df f007 	tbb	[pc, r7]
 80125e0:	1714030a 	.word	0x1714030a
 80125e4:	0a          	.byte	0x0a
 80125e5:	00          	.byte	0x00
 80125e6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80125ea:	0728      	lsls	r0, r5, #28
 80125ec:	d5c0      	bpl.n	8012570 <_strtod_l+0x88>
 80125ee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80125f2:	e7bd      	b.n	8012570 <_strtod_l+0x88>
 80125f4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80125f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80125fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80125fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012602:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012606:	e7f0      	b.n	80125ea <_strtod_l+0x102>
 8012608:	f8df b180 	ldr.w	fp, [pc, #384]	; 801278c <_strtod_l+0x2a4>
 801260c:	e7ed      	b.n	80125ea <_strtod_l+0x102>
 801260e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012612:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012616:	e7e8      	b.n	80125ea <_strtod_l+0x102>
 8012618:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801261a:	1c5a      	adds	r2, r3, #1
 801261c:	9217      	str	r2, [sp, #92]	; 0x5c
 801261e:	785b      	ldrb	r3, [r3, #1]
 8012620:	2b30      	cmp	r3, #48	; 0x30
 8012622:	d0f9      	beq.n	8012618 <_strtod_l+0x130>
 8012624:	2b00      	cmp	r3, #0
 8012626:	d0a3      	beq.n	8012570 <_strtod_l+0x88>
 8012628:	2301      	movs	r3, #1
 801262a:	f04f 0900 	mov.w	r9, #0
 801262e:	9304      	str	r3, [sp, #16]
 8012630:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012632:	9308      	str	r3, [sp, #32]
 8012634:	f8cd 901c 	str.w	r9, [sp, #28]
 8012638:	464f      	mov	r7, r9
 801263a:	220a      	movs	r2, #10
 801263c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801263e:	7806      	ldrb	r6, [r0, #0]
 8012640:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8012644:	b2d9      	uxtb	r1, r3
 8012646:	2909      	cmp	r1, #9
 8012648:	d92a      	bls.n	80126a0 <_strtod_l+0x1b8>
 801264a:	9905      	ldr	r1, [sp, #20]
 801264c:	462a      	mov	r2, r5
 801264e:	f7ff feef 	bl	8012430 <strncmp>
 8012652:	b398      	cbz	r0, 80126bc <_strtod_l+0x1d4>
 8012654:	2000      	movs	r0, #0
 8012656:	4632      	mov	r2, r6
 8012658:	463d      	mov	r5, r7
 801265a:	9005      	str	r0, [sp, #20]
 801265c:	4603      	mov	r3, r0
 801265e:	2a65      	cmp	r2, #101	; 0x65
 8012660:	d001      	beq.n	8012666 <_strtod_l+0x17e>
 8012662:	2a45      	cmp	r2, #69	; 0x45
 8012664:	d118      	bne.n	8012698 <_strtod_l+0x1b0>
 8012666:	b91d      	cbnz	r5, 8012670 <_strtod_l+0x188>
 8012668:	9a04      	ldr	r2, [sp, #16]
 801266a:	4302      	orrs	r2, r0
 801266c:	d09e      	beq.n	80125ac <_strtod_l+0xc4>
 801266e:	2500      	movs	r5, #0
 8012670:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8012674:	f108 0201 	add.w	r2, r8, #1
 8012678:	9217      	str	r2, [sp, #92]	; 0x5c
 801267a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801267e:	2a2b      	cmp	r2, #43	; 0x2b
 8012680:	d075      	beq.n	801276e <_strtod_l+0x286>
 8012682:	2a2d      	cmp	r2, #45	; 0x2d
 8012684:	d07b      	beq.n	801277e <_strtod_l+0x296>
 8012686:	f04f 0c00 	mov.w	ip, #0
 801268a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801268e:	2909      	cmp	r1, #9
 8012690:	f240 8082 	bls.w	8012798 <_strtod_l+0x2b0>
 8012694:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8012698:	2600      	movs	r6, #0
 801269a:	e09d      	b.n	80127d8 <_strtod_l+0x2f0>
 801269c:	2300      	movs	r3, #0
 801269e:	e7c4      	b.n	801262a <_strtod_l+0x142>
 80126a0:	2f08      	cmp	r7, #8
 80126a2:	bfd8      	it	le
 80126a4:	9907      	ldrle	r1, [sp, #28]
 80126a6:	f100 0001 	add.w	r0, r0, #1
 80126aa:	bfda      	itte	le
 80126ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80126b0:	9307      	strle	r3, [sp, #28]
 80126b2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80126b6:	3701      	adds	r7, #1
 80126b8:	9017      	str	r0, [sp, #92]	; 0x5c
 80126ba:	e7bf      	b.n	801263c <_strtod_l+0x154>
 80126bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80126be:	195a      	adds	r2, r3, r5
 80126c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80126c2:	5d5a      	ldrb	r2, [r3, r5]
 80126c4:	2f00      	cmp	r7, #0
 80126c6:	d037      	beq.n	8012738 <_strtod_l+0x250>
 80126c8:	9005      	str	r0, [sp, #20]
 80126ca:	463d      	mov	r5, r7
 80126cc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80126d0:	2b09      	cmp	r3, #9
 80126d2:	d912      	bls.n	80126fa <_strtod_l+0x212>
 80126d4:	2301      	movs	r3, #1
 80126d6:	e7c2      	b.n	801265e <_strtod_l+0x176>
 80126d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80126da:	1c5a      	adds	r2, r3, #1
 80126dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80126de:	785a      	ldrb	r2, [r3, #1]
 80126e0:	3001      	adds	r0, #1
 80126e2:	2a30      	cmp	r2, #48	; 0x30
 80126e4:	d0f8      	beq.n	80126d8 <_strtod_l+0x1f0>
 80126e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80126ea:	2b08      	cmp	r3, #8
 80126ec:	f200 84d9 	bhi.w	80130a2 <_strtod_l+0xbba>
 80126f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80126f2:	9005      	str	r0, [sp, #20]
 80126f4:	2000      	movs	r0, #0
 80126f6:	9308      	str	r3, [sp, #32]
 80126f8:	4605      	mov	r5, r0
 80126fa:	3a30      	subs	r2, #48	; 0x30
 80126fc:	f100 0301 	add.w	r3, r0, #1
 8012700:	d014      	beq.n	801272c <_strtod_l+0x244>
 8012702:	9905      	ldr	r1, [sp, #20]
 8012704:	4419      	add	r1, r3
 8012706:	9105      	str	r1, [sp, #20]
 8012708:	462b      	mov	r3, r5
 801270a:	eb00 0e05 	add.w	lr, r0, r5
 801270e:	210a      	movs	r1, #10
 8012710:	4573      	cmp	r3, lr
 8012712:	d113      	bne.n	801273c <_strtod_l+0x254>
 8012714:	182b      	adds	r3, r5, r0
 8012716:	2b08      	cmp	r3, #8
 8012718:	f105 0501 	add.w	r5, r5, #1
 801271c:	4405      	add	r5, r0
 801271e:	dc1c      	bgt.n	801275a <_strtod_l+0x272>
 8012720:	9907      	ldr	r1, [sp, #28]
 8012722:	230a      	movs	r3, #10
 8012724:	fb03 2301 	mla	r3, r3, r1, r2
 8012728:	9307      	str	r3, [sp, #28]
 801272a:	2300      	movs	r3, #0
 801272c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801272e:	1c51      	adds	r1, r2, #1
 8012730:	9117      	str	r1, [sp, #92]	; 0x5c
 8012732:	7852      	ldrb	r2, [r2, #1]
 8012734:	4618      	mov	r0, r3
 8012736:	e7c9      	b.n	80126cc <_strtod_l+0x1e4>
 8012738:	4638      	mov	r0, r7
 801273a:	e7d2      	b.n	80126e2 <_strtod_l+0x1fa>
 801273c:	2b08      	cmp	r3, #8
 801273e:	dc04      	bgt.n	801274a <_strtod_l+0x262>
 8012740:	9e07      	ldr	r6, [sp, #28]
 8012742:	434e      	muls	r6, r1
 8012744:	9607      	str	r6, [sp, #28]
 8012746:	3301      	adds	r3, #1
 8012748:	e7e2      	b.n	8012710 <_strtod_l+0x228>
 801274a:	f103 0c01 	add.w	ip, r3, #1
 801274e:	f1bc 0f10 	cmp.w	ip, #16
 8012752:	bfd8      	it	le
 8012754:	fb01 f909 	mulle.w	r9, r1, r9
 8012758:	e7f5      	b.n	8012746 <_strtod_l+0x25e>
 801275a:	2d10      	cmp	r5, #16
 801275c:	bfdc      	itt	le
 801275e:	230a      	movle	r3, #10
 8012760:	fb03 2909 	mlale	r9, r3, r9, r2
 8012764:	e7e1      	b.n	801272a <_strtod_l+0x242>
 8012766:	2300      	movs	r3, #0
 8012768:	9305      	str	r3, [sp, #20]
 801276a:	2301      	movs	r3, #1
 801276c:	e77c      	b.n	8012668 <_strtod_l+0x180>
 801276e:	f04f 0c00 	mov.w	ip, #0
 8012772:	f108 0202 	add.w	r2, r8, #2
 8012776:	9217      	str	r2, [sp, #92]	; 0x5c
 8012778:	f898 2002 	ldrb.w	r2, [r8, #2]
 801277c:	e785      	b.n	801268a <_strtod_l+0x1a2>
 801277e:	f04f 0c01 	mov.w	ip, #1
 8012782:	e7f6      	b.n	8012772 <_strtod_l+0x28a>
 8012784:	08017b90 	.word	0x08017b90
 8012788:	08017a48 	.word	0x08017a48
 801278c:	7ff00000 	.word	0x7ff00000
 8012790:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012792:	1c51      	adds	r1, r2, #1
 8012794:	9117      	str	r1, [sp, #92]	; 0x5c
 8012796:	7852      	ldrb	r2, [r2, #1]
 8012798:	2a30      	cmp	r2, #48	; 0x30
 801279a:	d0f9      	beq.n	8012790 <_strtod_l+0x2a8>
 801279c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80127a0:	2908      	cmp	r1, #8
 80127a2:	f63f af79 	bhi.w	8012698 <_strtod_l+0x1b0>
 80127a6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80127aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80127ac:	9206      	str	r2, [sp, #24]
 80127ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80127b0:	1c51      	adds	r1, r2, #1
 80127b2:	9117      	str	r1, [sp, #92]	; 0x5c
 80127b4:	7852      	ldrb	r2, [r2, #1]
 80127b6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80127ba:	2e09      	cmp	r6, #9
 80127bc:	d937      	bls.n	801282e <_strtod_l+0x346>
 80127be:	9e06      	ldr	r6, [sp, #24]
 80127c0:	1b89      	subs	r1, r1, r6
 80127c2:	2908      	cmp	r1, #8
 80127c4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80127c8:	dc02      	bgt.n	80127d0 <_strtod_l+0x2e8>
 80127ca:	4576      	cmp	r6, lr
 80127cc:	bfa8      	it	ge
 80127ce:	4676      	movge	r6, lr
 80127d0:	f1bc 0f00 	cmp.w	ip, #0
 80127d4:	d000      	beq.n	80127d8 <_strtod_l+0x2f0>
 80127d6:	4276      	negs	r6, r6
 80127d8:	2d00      	cmp	r5, #0
 80127da:	d14d      	bne.n	8012878 <_strtod_l+0x390>
 80127dc:	9904      	ldr	r1, [sp, #16]
 80127de:	4301      	orrs	r1, r0
 80127e0:	f47f aec6 	bne.w	8012570 <_strtod_l+0x88>
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	f47f aee1 	bne.w	80125ac <_strtod_l+0xc4>
 80127ea:	2a69      	cmp	r2, #105	; 0x69
 80127ec:	d027      	beq.n	801283e <_strtod_l+0x356>
 80127ee:	dc24      	bgt.n	801283a <_strtod_l+0x352>
 80127f0:	2a49      	cmp	r2, #73	; 0x49
 80127f2:	d024      	beq.n	801283e <_strtod_l+0x356>
 80127f4:	2a4e      	cmp	r2, #78	; 0x4e
 80127f6:	f47f aed9 	bne.w	80125ac <_strtod_l+0xc4>
 80127fa:	499f      	ldr	r1, [pc, #636]	; (8012a78 <_strtod_l+0x590>)
 80127fc:	a817      	add	r0, sp, #92	; 0x5c
 80127fe:	f001 fe85 	bl	801450c <__match>
 8012802:	2800      	cmp	r0, #0
 8012804:	f43f aed2 	beq.w	80125ac <_strtod_l+0xc4>
 8012808:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801280a:	781b      	ldrb	r3, [r3, #0]
 801280c:	2b28      	cmp	r3, #40	; 0x28
 801280e:	d12d      	bne.n	801286c <_strtod_l+0x384>
 8012810:	499a      	ldr	r1, [pc, #616]	; (8012a7c <_strtod_l+0x594>)
 8012812:	aa1a      	add	r2, sp, #104	; 0x68
 8012814:	a817      	add	r0, sp, #92	; 0x5c
 8012816:	f001 fe8d 	bl	8014534 <__hexnan>
 801281a:	2805      	cmp	r0, #5
 801281c:	d126      	bne.n	801286c <_strtod_l+0x384>
 801281e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012820:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8012824:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8012828:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801282c:	e6a0      	b.n	8012570 <_strtod_l+0x88>
 801282e:	210a      	movs	r1, #10
 8012830:	fb01 2e0e 	mla	lr, r1, lr, r2
 8012834:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012838:	e7b9      	b.n	80127ae <_strtod_l+0x2c6>
 801283a:	2a6e      	cmp	r2, #110	; 0x6e
 801283c:	e7db      	b.n	80127f6 <_strtod_l+0x30e>
 801283e:	4990      	ldr	r1, [pc, #576]	; (8012a80 <_strtod_l+0x598>)
 8012840:	a817      	add	r0, sp, #92	; 0x5c
 8012842:	f001 fe63 	bl	801450c <__match>
 8012846:	2800      	cmp	r0, #0
 8012848:	f43f aeb0 	beq.w	80125ac <_strtod_l+0xc4>
 801284c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801284e:	498d      	ldr	r1, [pc, #564]	; (8012a84 <_strtod_l+0x59c>)
 8012850:	3b01      	subs	r3, #1
 8012852:	a817      	add	r0, sp, #92	; 0x5c
 8012854:	9317      	str	r3, [sp, #92]	; 0x5c
 8012856:	f001 fe59 	bl	801450c <__match>
 801285a:	b910      	cbnz	r0, 8012862 <_strtod_l+0x37a>
 801285c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801285e:	3301      	adds	r3, #1
 8012860:	9317      	str	r3, [sp, #92]	; 0x5c
 8012862:	f8df b230 	ldr.w	fp, [pc, #560]	; 8012a94 <_strtod_l+0x5ac>
 8012866:	f04f 0a00 	mov.w	sl, #0
 801286a:	e681      	b.n	8012570 <_strtod_l+0x88>
 801286c:	4886      	ldr	r0, [pc, #536]	; (8012a88 <_strtod_l+0x5a0>)
 801286e:	f002 fe33 	bl	80154d8 <nan>
 8012872:	ec5b ab10 	vmov	sl, fp, d0
 8012876:	e67b      	b.n	8012570 <_strtod_l+0x88>
 8012878:	9b05      	ldr	r3, [sp, #20]
 801287a:	9807      	ldr	r0, [sp, #28]
 801287c:	1af3      	subs	r3, r6, r3
 801287e:	2f00      	cmp	r7, #0
 8012880:	bf08      	it	eq
 8012882:	462f      	moveq	r7, r5
 8012884:	2d10      	cmp	r5, #16
 8012886:	9306      	str	r3, [sp, #24]
 8012888:	46a8      	mov	r8, r5
 801288a:	bfa8      	it	ge
 801288c:	f04f 0810 	movge.w	r8, #16
 8012890:	f7ed fe38 	bl	8000504 <__aeabi_ui2d>
 8012894:	2d09      	cmp	r5, #9
 8012896:	4682      	mov	sl, r0
 8012898:	468b      	mov	fp, r1
 801289a:	dd13      	ble.n	80128c4 <_strtod_l+0x3dc>
 801289c:	4b7b      	ldr	r3, [pc, #492]	; (8012a8c <_strtod_l+0x5a4>)
 801289e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80128a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80128a6:	f7ed fea7 	bl	80005f8 <__aeabi_dmul>
 80128aa:	4682      	mov	sl, r0
 80128ac:	4648      	mov	r0, r9
 80128ae:	468b      	mov	fp, r1
 80128b0:	f7ed fe28 	bl	8000504 <__aeabi_ui2d>
 80128b4:	4602      	mov	r2, r0
 80128b6:	460b      	mov	r3, r1
 80128b8:	4650      	mov	r0, sl
 80128ba:	4659      	mov	r1, fp
 80128bc:	f7ed fce6 	bl	800028c <__adddf3>
 80128c0:	4682      	mov	sl, r0
 80128c2:	468b      	mov	fp, r1
 80128c4:	2d0f      	cmp	r5, #15
 80128c6:	dc38      	bgt.n	801293a <_strtod_l+0x452>
 80128c8:	9b06      	ldr	r3, [sp, #24]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	f43f ae50 	beq.w	8012570 <_strtod_l+0x88>
 80128d0:	dd24      	ble.n	801291c <_strtod_l+0x434>
 80128d2:	2b16      	cmp	r3, #22
 80128d4:	dc0b      	bgt.n	80128ee <_strtod_l+0x406>
 80128d6:	496d      	ldr	r1, [pc, #436]	; (8012a8c <_strtod_l+0x5a4>)
 80128d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80128dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128e0:	4652      	mov	r2, sl
 80128e2:	465b      	mov	r3, fp
 80128e4:	f7ed fe88 	bl	80005f8 <__aeabi_dmul>
 80128e8:	4682      	mov	sl, r0
 80128ea:	468b      	mov	fp, r1
 80128ec:	e640      	b.n	8012570 <_strtod_l+0x88>
 80128ee:	9a06      	ldr	r2, [sp, #24]
 80128f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80128f4:	4293      	cmp	r3, r2
 80128f6:	db20      	blt.n	801293a <_strtod_l+0x452>
 80128f8:	4c64      	ldr	r4, [pc, #400]	; (8012a8c <_strtod_l+0x5a4>)
 80128fa:	f1c5 050f 	rsb	r5, r5, #15
 80128fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8012902:	4652      	mov	r2, sl
 8012904:	465b      	mov	r3, fp
 8012906:	e9d1 0100 	ldrd	r0, r1, [r1]
 801290a:	f7ed fe75 	bl	80005f8 <__aeabi_dmul>
 801290e:	9b06      	ldr	r3, [sp, #24]
 8012910:	1b5d      	subs	r5, r3, r5
 8012912:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8012916:	e9d4 2300 	ldrd	r2, r3, [r4]
 801291a:	e7e3      	b.n	80128e4 <_strtod_l+0x3fc>
 801291c:	9b06      	ldr	r3, [sp, #24]
 801291e:	3316      	adds	r3, #22
 8012920:	db0b      	blt.n	801293a <_strtod_l+0x452>
 8012922:	9b05      	ldr	r3, [sp, #20]
 8012924:	1b9e      	subs	r6, r3, r6
 8012926:	4b59      	ldr	r3, [pc, #356]	; (8012a8c <_strtod_l+0x5a4>)
 8012928:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801292c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012930:	4650      	mov	r0, sl
 8012932:	4659      	mov	r1, fp
 8012934:	f7ed ff8a 	bl	800084c <__aeabi_ddiv>
 8012938:	e7d6      	b.n	80128e8 <_strtod_l+0x400>
 801293a:	9b06      	ldr	r3, [sp, #24]
 801293c:	eba5 0808 	sub.w	r8, r5, r8
 8012940:	4498      	add	r8, r3
 8012942:	f1b8 0f00 	cmp.w	r8, #0
 8012946:	dd74      	ble.n	8012a32 <_strtod_l+0x54a>
 8012948:	f018 030f 	ands.w	r3, r8, #15
 801294c:	d00a      	beq.n	8012964 <_strtod_l+0x47c>
 801294e:	494f      	ldr	r1, [pc, #316]	; (8012a8c <_strtod_l+0x5a4>)
 8012950:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012954:	4652      	mov	r2, sl
 8012956:	465b      	mov	r3, fp
 8012958:	e9d1 0100 	ldrd	r0, r1, [r1]
 801295c:	f7ed fe4c 	bl	80005f8 <__aeabi_dmul>
 8012960:	4682      	mov	sl, r0
 8012962:	468b      	mov	fp, r1
 8012964:	f038 080f 	bics.w	r8, r8, #15
 8012968:	d04f      	beq.n	8012a0a <_strtod_l+0x522>
 801296a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801296e:	dd22      	ble.n	80129b6 <_strtod_l+0x4ce>
 8012970:	2500      	movs	r5, #0
 8012972:	462e      	mov	r6, r5
 8012974:	9507      	str	r5, [sp, #28]
 8012976:	9505      	str	r5, [sp, #20]
 8012978:	2322      	movs	r3, #34	; 0x22
 801297a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8012a94 <_strtod_l+0x5ac>
 801297e:	6023      	str	r3, [r4, #0]
 8012980:	f04f 0a00 	mov.w	sl, #0
 8012984:	9b07      	ldr	r3, [sp, #28]
 8012986:	2b00      	cmp	r3, #0
 8012988:	f43f adf2 	beq.w	8012570 <_strtod_l+0x88>
 801298c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801298e:	4620      	mov	r0, r4
 8012990:	f001 fece 	bl	8014730 <_Bfree>
 8012994:	9905      	ldr	r1, [sp, #20]
 8012996:	4620      	mov	r0, r4
 8012998:	f001 feca 	bl	8014730 <_Bfree>
 801299c:	4631      	mov	r1, r6
 801299e:	4620      	mov	r0, r4
 80129a0:	f001 fec6 	bl	8014730 <_Bfree>
 80129a4:	9907      	ldr	r1, [sp, #28]
 80129a6:	4620      	mov	r0, r4
 80129a8:	f001 fec2 	bl	8014730 <_Bfree>
 80129ac:	4629      	mov	r1, r5
 80129ae:	4620      	mov	r0, r4
 80129b0:	f001 febe 	bl	8014730 <_Bfree>
 80129b4:	e5dc      	b.n	8012570 <_strtod_l+0x88>
 80129b6:	4b36      	ldr	r3, [pc, #216]	; (8012a90 <_strtod_l+0x5a8>)
 80129b8:	9304      	str	r3, [sp, #16]
 80129ba:	2300      	movs	r3, #0
 80129bc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80129c0:	4650      	mov	r0, sl
 80129c2:	4659      	mov	r1, fp
 80129c4:	4699      	mov	r9, r3
 80129c6:	f1b8 0f01 	cmp.w	r8, #1
 80129ca:	dc21      	bgt.n	8012a10 <_strtod_l+0x528>
 80129cc:	b10b      	cbz	r3, 80129d2 <_strtod_l+0x4ea>
 80129ce:	4682      	mov	sl, r0
 80129d0:	468b      	mov	fp, r1
 80129d2:	4b2f      	ldr	r3, [pc, #188]	; (8012a90 <_strtod_l+0x5a8>)
 80129d4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80129d8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80129dc:	4652      	mov	r2, sl
 80129de:	465b      	mov	r3, fp
 80129e0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80129e4:	f7ed fe08 	bl	80005f8 <__aeabi_dmul>
 80129e8:	4b2a      	ldr	r3, [pc, #168]	; (8012a94 <_strtod_l+0x5ac>)
 80129ea:	460a      	mov	r2, r1
 80129ec:	400b      	ands	r3, r1
 80129ee:	492a      	ldr	r1, [pc, #168]	; (8012a98 <_strtod_l+0x5b0>)
 80129f0:	428b      	cmp	r3, r1
 80129f2:	4682      	mov	sl, r0
 80129f4:	d8bc      	bhi.n	8012970 <_strtod_l+0x488>
 80129f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80129fa:	428b      	cmp	r3, r1
 80129fc:	bf86      	itte	hi
 80129fe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8012a9c <_strtod_l+0x5b4>
 8012a02:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8012a06:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	9304      	str	r3, [sp, #16]
 8012a0e:	e084      	b.n	8012b1a <_strtod_l+0x632>
 8012a10:	f018 0f01 	tst.w	r8, #1
 8012a14:	d005      	beq.n	8012a22 <_strtod_l+0x53a>
 8012a16:	9b04      	ldr	r3, [sp, #16]
 8012a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a1c:	f7ed fdec 	bl	80005f8 <__aeabi_dmul>
 8012a20:	2301      	movs	r3, #1
 8012a22:	9a04      	ldr	r2, [sp, #16]
 8012a24:	3208      	adds	r2, #8
 8012a26:	f109 0901 	add.w	r9, r9, #1
 8012a2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012a2e:	9204      	str	r2, [sp, #16]
 8012a30:	e7c9      	b.n	80129c6 <_strtod_l+0x4de>
 8012a32:	d0ea      	beq.n	8012a0a <_strtod_l+0x522>
 8012a34:	f1c8 0800 	rsb	r8, r8, #0
 8012a38:	f018 020f 	ands.w	r2, r8, #15
 8012a3c:	d00a      	beq.n	8012a54 <_strtod_l+0x56c>
 8012a3e:	4b13      	ldr	r3, [pc, #76]	; (8012a8c <_strtod_l+0x5a4>)
 8012a40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012a44:	4650      	mov	r0, sl
 8012a46:	4659      	mov	r1, fp
 8012a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a4c:	f7ed fefe 	bl	800084c <__aeabi_ddiv>
 8012a50:	4682      	mov	sl, r0
 8012a52:	468b      	mov	fp, r1
 8012a54:	ea5f 1828 	movs.w	r8, r8, asr #4
 8012a58:	d0d7      	beq.n	8012a0a <_strtod_l+0x522>
 8012a5a:	f1b8 0f1f 	cmp.w	r8, #31
 8012a5e:	dd1f      	ble.n	8012aa0 <_strtod_l+0x5b8>
 8012a60:	2500      	movs	r5, #0
 8012a62:	462e      	mov	r6, r5
 8012a64:	9507      	str	r5, [sp, #28]
 8012a66:	9505      	str	r5, [sp, #20]
 8012a68:	2322      	movs	r3, #34	; 0x22
 8012a6a:	f04f 0a00 	mov.w	sl, #0
 8012a6e:	f04f 0b00 	mov.w	fp, #0
 8012a72:	6023      	str	r3, [r4, #0]
 8012a74:	e786      	b.n	8012984 <_strtod_l+0x49c>
 8012a76:	bf00      	nop
 8012a78:	08017a21 	.word	0x08017a21
 8012a7c:	08017a5c 	.word	0x08017a5c
 8012a80:	08017a19 	.word	0x08017a19
 8012a84:	08017a9b 	.word	0x08017a9b
 8012a88:	08017d48 	.word	0x08017d48
 8012a8c:	08017c28 	.word	0x08017c28
 8012a90:	08017c00 	.word	0x08017c00
 8012a94:	7ff00000 	.word	0x7ff00000
 8012a98:	7ca00000 	.word	0x7ca00000
 8012a9c:	7fefffff 	.word	0x7fefffff
 8012aa0:	f018 0310 	ands.w	r3, r8, #16
 8012aa4:	bf18      	it	ne
 8012aa6:	236a      	movne	r3, #106	; 0x6a
 8012aa8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8012e58 <_strtod_l+0x970>
 8012aac:	9304      	str	r3, [sp, #16]
 8012aae:	4650      	mov	r0, sl
 8012ab0:	4659      	mov	r1, fp
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	f018 0f01 	tst.w	r8, #1
 8012ab8:	d004      	beq.n	8012ac4 <_strtod_l+0x5dc>
 8012aba:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012abe:	f7ed fd9b 	bl	80005f8 <__aeabi_dmul>
 8012ac2:	2301      	movs	r3, #1
 8012ac4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8012ac8:	f109 0908 	add.w	r9, r9, #8
 8012acc:	d1f2      	bne.n	8012ab4 <_strtod_l+0x5cc>
 8012ace:	b10b      	cbz	r3, 8012ad4 <_strtod_l+0x5ec>
 8012ad0:	4682      	mov	sl, r0
 8012ad2:	468b      	mov	fp, r1
 8012ad4:	9b04      	ldr	r3, [sp, #16]
 8012ad6:	b1c3      	cbz	r3, 8012b0a <_strtod_l+0x622>
 8012ad8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8012adc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	4659      	mov	r1, fp
 8012ae4:	dd11      	ble.n	8012b0a <_strtod_l+0x622>
 8012ae6:	2b1f      	cmp	r3, #31
 8012ae8:	f340 8124 	ble.w	8012d34 <_strtod_l+0x84c>
 8012aec:	2b34      	cmp	r3, #52	; 0x34
 8012aee:	bfde      	ittt	le
 8012af0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8012af4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8012af8:	fa03 f202 	lslle.w	r2, r3, r2
 8012afc:	f04f 0a00 	mov.w	sl, #0
 8012b00:	bfcc      	ite	gt
 8012b02:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8012b06:	ea02 0b01 	andle.w	fp, r2, r1
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	4650      	mov	r0, sl
 8012b10:	4659      	mov	r1, fp
 8012b12:	f7ed ffd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8012b16:	2800      	cmp	r0, #0
 8012b18:	d1a2      	bne.n	8012a60 <_strtod_l+0x578>
 8012b1a:	9b07      	ldr	r3, [sp, #28]
 8012b1c:	9300      	str	r3, [sp, #0]
 8012b1e:	9908      	ldr	r1, [sp, #32]
 8012b20:	462b      	mov	r3, r5
 8012b22:	463a      	mov	r2, r7
 8012b24:	4620      	mov	r0, r4
 8012b26:	f001 fe6b 	bl	8014800 <__s2b>
 8012b2a:	9007      	str	r0, [sp, #28]
 8012b2c:	2800      	cmp	r0, #0
 8012b2e:	f43f af1f 	beq.w	8012970 <_strtod_l+0x488>
 8012b32:	9b05      	ldr	r3, [sp, #20]
 8012b34:	1b9e      	subs	r6, r3, r6
 8012b36:	9b06      	ldr	r3, [sp, #24]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	bfb4      	ite	lt
 8012b3c:	4633      	movlt	r3, r6
 8012b3e:	2300      	movge	r3, #0
 8012b40:	930c      	str	r3, [sp, #48]	; 0x30
 8012b42:	9b06      	ldr	r3, [sp, #24]
 8012b44:	2500      	movs	r5, #0
 8012b46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012b4a:	9312      	str	r3, [sp, #72]	; 0x48
 8012b4c:	462e      	mov	r6, r5
 8012b4e:	9b07      	ldr	r3, [sp, #28]
 8012b50:	4620      	mov	r0, r4
 8012b52:	6859      	ldr	r1, [r3, #4]
 8012b54:	f001 fdac 	bl	80146b0 <_Balloc>
 8012b58:	9005      	str	r0, [sp, #20]
 8012b5a:	2800      	cmp	r0, #0
 8012b5c:	f43f af0c 	beq.w	8012978 <_strtod_l+0x490>
 8012b60:	9b07      	ldr	r3, [sp, #28]
 8012b62:	691a      	ldr	r2, [r3, #16]
 8012b64:	3202      	adds	r2, #2
 8012b66:	f103 010c 	add.w	r1, r3, #12
 8012b6a:	0092      	lsls	r2, r2, #2
 8012b6c:	300c      	adds	r0, #12
 8012b6e:	f7fe ffa3 	bl	8011ab8 <memcpy>
 8012b72:	ec4b ab10 	vmov	d0, sl, fp
 8012b76:	aa1a      	add	r2, sp, #104	; 0x68
 8012b78:	a919      	add	r1, sp, #100	; 0x64
 8012b7a:	4620      	mov	r0, r4
 8012b7c:	f002 f986 	bl	8014e8c <__d2b>
 8012b80:	ec4b ab18 	vmov	d8, sl, fp
 8012b84:	9018      	str	r0, [sp, #96]	; 0x60
 8012b86:	2800      	cmp	r0, #0
 8012b88:	f43f aef6 	beq.w	8012978 <_strtod_l+0x490>
 8012b8c:	2101      	movs	r1, #1
 8012b8e:	4620      	mov	r0, r4
 8012b90:	f001 fed0 	bl	8014934 <__i2b>
 8012b94:	4606      	mov	r6, r0
 8012b96:	2800      	cmp	r0, #0
 8012b98:	f43f aeee 	beq.w	8012978 <_strtod_l+0x490>
 8012b9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012b9e:	9904      	ldr	r1, [sp, #16]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	bfab      	itete	ge
 8012ba4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8012ba6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8012ba8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8012baa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8012bae:	bfac      	ite	ge
 8012bb0:	eb03 0902 	addge.w	r9, r3, r2
 8012bb4:	1ad7      	sublt	r7, r2, r3
 8012bb6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012bb8:	eba3 0801 	sub.w	r8, r3, r1
 8012bbc:	4490      	add	r8, r2
 8012bbe:	4ba1      	ldr	r3, [pc, #644]	; (8012e44 <_strtod_l+0x95c>)
 8012bc0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8012bc4:	4598      	cmp	r8, r3
 8012bc6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012bca:	f280 80c7 	bge.w	8012d5c <_strtod_l+0x874>
 8012bce:	eba3 0308 	sub.w	r3, r3, r8
 8012bd2:	2b1f      	cmp	r3, #31
 8012bd4:	eba2 0203 	sub.w	r2, r2, r3
 8012bd8:	f04f 0101 	mov.w	r1, #1
 8012bdc:	f300 80b1 	bgt.w	8012d42 <_strtod_l+0x85a>
 8012be0:	fa01 f303 	lsl.w	r3, r1, r3
 8012be4:	930d      	str	r3, [sp, #52]	; 0x34
 8012be6:	2300      	movs	r3, #0
 8012be8:	9308      	str	r3, [sp, #32]
 8012bea:	eb09 0802 	add.w	r8, r9, r2
 8012bee:	9b04      	ldr	r3, [sp, #16]
 8012bf0:	45c1      	cmp	r9, r8
 8012bf2:	4417      	add	r7, r2
 8012bf4:	441f      	add	r7, r3
 8012bf6:	464b      	mov	r3, r9
 8012bf8:	bfa8      	it	ge
 8012bfa:	4643      	movge	r3, r8
 8012bfc:	42bb      	cmp	r3, r7
 8012bfe:	bfa8      	it	ge
 8012c00:	463b      	movge	r3, r7
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	bfc2      	ittt	gt
 8012c06:	eba8 0803 	subgt.w	r8, r8, r3
 8012c0a:	1aff      	subgt	r7, r7, r3
 8012c0c:	eba9 0903 	subgt.w	r9, r9, r3
 8012c10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	dd17      	ble.n	8012c46 <_strtod_l+0x75e>
 8012c16:	4631      	mov	r1, r6
 8012c18:	461a      	mov	r2, r3
 8012c1a:	4620      	mov	r0, r4
 8012c1c:	f001 ff4a 	bl	8014ab4 <__pow5mult>
 8012c20:	4606      	mov	r6, r0
 8012c22:	2800      	cmp	r0, #0
 8012c24:	f43f aea8 	beq.w	8012978 <_strtod_l+0x490>
 8012c28:	4601      	mov	r1, r0
 8012c2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012c2c:	4620      	mov	r0, r4
 8012c2e:	f001 fe97 	bl	8014960 <__multiply>
 8012c32:	900b      	str	r0, [sp, #44]	; 0x2c
 8012c34:	2800      	cmp	r0, #0
 8012c36:	f43f ae9f 	beq.w	8012978 <_strtod_l+0x490>
 8012c3a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012c3c:	4620      	mov	r0, r4
 8012c3e:	f001 fd77 	bl	8014730 <_Bfree>
 8012c42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c44:	9318      	str	r3, [sp, #96]	; 0x60
 8012c46:	f1b8 0f00 	cmp.w	r8, #0
 8012c4a:	f300 808c 	bgt.w	8012d66 <_strtod_l+0x87e>
 8012c4e:	9b06      	ldr	r3, [sp, #24]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	dd08      	ble.n	8012c66 <_strtod_l+0x77e>
 8012c54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012c56:	9905      	ldr	r1, [sp, #20]
 8012c58:	4620      	mov	r0, r4
 8012c5a:	f001 ff2b 	bl	8014ab4 <__pow5mult>
 8012c5e:	9005      	str	r0, [sp, #20]
 8012c60:	2800      	cmp	r0, #0
 8012c62:	f43f ae89 	beq.w	8012978 <_strtod_l+0x490>
 8012c66:	2f00      	cmp	r7, #0
 8012c68:	dd08      	ble.n	8012c7c <_strtod_l+0x794>
 8012c6a:	9905      	ldr	r1, [sp, #20]
 8012c6c:	463a      	mov	r2, r7
 8012c6e:	4620      	mov	r0, r4
 8012c70:	f001 ff7a 	bl	8014b68 <__lshift>
 8012c74:	9005      	str	r0, [sp, #20]
 8012c76:	2800      	cmp	r0, #0
 8012c78:	f43f ae7e 	beq.w	8012978 <_strtod_l+0x490>
 8012c7c:	f1b9 0f00 	cmp.w	r9, #0
 8012c80:	dd08      	ble.n	8012c94 <_strtod_l+0x7ac>
 8012c82:	4631      	mov	r1, r6
 8012c84:	464a      	mov	r2, r9
 8012c86:	4620      	mov	r0, r4
 8012c88:	f001 ff6e 	bl	8014b68 <__lshift>
 8012c8c:	4606      	mov	r6, r0
 8012c8e:	2800      	cmp	r0, #0
 8012c90:	f43f ae72 	beq.w	8012978 <_strtod_l+0x490>
 8012c94:	9a05      	ldr	r2, [sp, #20]
 8012c96:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012c98:	4620      	mov	r0, r4
 8012c9a:	f001 fff1 	bl	8014c80 <__mdiff>
 8012c9e:	4605      	mov	r5, r0
 8012ca0:	2800      	cmp	r0, #0
 8012ca2:	f43f ae69 	beq.w	8012978 <_strtod_l+0x490>
 8012ca6:	68c3      	ldr	r3, [r0, #12]
 8012ca8:	930b      	str	r3, [sp, #44]	; 0x2c
 8012caa:	2300      	movs	r3, #0
 8012cac:	60c3      	str	r3, [r0, #12]
 8012cae:	4631      	mov	r1, r6
 8012cb0:	f001 ffca 	bl	8014c48 <__mcmp>
 8012cb4:	2800      	cmp	r0, #0
 8012cb6:	da60      	bge.n	8012d7a <_strtod_l+0x892>
 8012cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012cba:	ea53 030a 	orrs.w	r3, r3, sl
 8012cbe:	f040 8082 	bne.w	8012dc6 <_strtod_l+0x8de>
 8012cc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d17d      	bne.n	8012dc6 <_strtod_l+0x8de>
 8012cca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012cce:	0d1b      	lsrs	r3, r3, #20
 8012cd0:	051b      	lsls	r3, r3, #20
 8012cd2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012cd6:	d976      	bls.n	8012dc6 <_strtod_l+0x8de>
 8012cd8:	696b      	ldr	r3, [r5, #20]
 8012cda:	b913      	cbnz	r3, 8012ce2 <_strtod_l+0x7fa>
 8012cdc:	692b      	ldr	r3, [r5, #16]
 8012cde:	2b01      	cmp	r3, #1
 8012ce0:	dd71      	ble.n	8012dc6 <_strtod_l+0x8de>
 8012ce2:	4629      	mov	r1, r5
 8012ce4:	2201      	movs	r2, #1
 8012ce6:	4620      	mov	r0, r4
 8012ce8:	f001 ff3e 	bl	8014b68 <__lshift>
 8012cec:	4631      	mov	r1, r6
 8012cee:	4605      	mov	r5, r0
 8012cf0:	f001 ffaa 	bl	8014c48 <__mcmp>
 8012cf4:	2800      	cmp	r0, #0
 8012cf6:	dd66      	ble.n	8012dc6 <_strtod_l+0x8de>
 8012cf8:	9904      	ldr	r1, [sp, #16]
 8012cfa:	4a53      	ldr	r2, [pc, #332]	; (8012e48 <_strtod_l+0x960>)
 8012cfc:	465b      	mov	r3, fp
 8012cfe:	2900      	cmp	r1, #0
 8012d00:	f000 8081 	beq.w	8012e06 <_strtod_l+0x91e>
 8012d04:	ea02 010b 	and.w	r1, r2, fp
 8012d08:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012d0c:	dc7b      	bgt.n	8012e06 <_strtod_l+0x91e>
 8012d0e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012d12:	f77f aea9 	ble.w	8012a68 <_strtod_l+0x580>
 8012d16:	4b4d      	ldr	r3, [pc, #308]	; (8012e4c <_strtod_l+0x964>)
 8012d18:	4650      	mov	r0, sl
 8012d1a:	4659      	mov	r1, fp
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	f7ed fc6b 	bl	80005f8 <__aeabi_dmul>
 8012d22:	460b      	mov	r3, r1
 8012d24:	4303      	orrs	r3, r0
 8012d26:	bf08      	it	eq
 8012d28:	2322      	moveq	r3, #34	; 0x22
 8012d2a:	4682      	mov	sl, r0
 8012d2c:	468b      	mov	fp, r1
 8012d2e:	bf08      	it	eq
 8012d30:	6023      	streq	r3, [r4, #0]
 8012d32:	e62b      	b.n	801298c <_strtod_l+0x4a4>
 8012d34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012d38:	fa02 f303 	lsl.w	r3, r2, r3
 8012d3c:	ea03 0a0a 	and.w	sl, r3, sl
 8012d40:	e6e3      	b.n	8012b0a <_strtod_l+0x622>
 8012d42:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8012d46:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8012d4a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8012d4e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8012d52:	fa01 f308 	lsl.w	r3, r1, r8
 8012d56:	9308      	str	r3, [sp, #32]
 8012d58:	910d      	str	r1, [sp, #52]	; 0x34
 8012d5a:	e746      	b.n	8012bea <_strtod_l+0x702>
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	9308      	str	r3, [sp, #32]
 8012d60:	2301      	movs	r3, #1
 8012d62:	930d      	str	r3, [sp, #52]	; 0x34
 8012d64:	e741      	b.n	8012bea <_strtod_l+0x702>
 8012d66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012d68:	4642      	mov	r2, r8
 8012d6a:	4620      	mov	r0, r4
 8012d6c:	f001 fefc 	bl	8014b68 <__lshift>
 8012d70:	9018      	str	r0, [sp, #96]	; 0x60
 8012d72:	2800      	cmp	r0, #0
 8012d74:	f47f af6b 	bne.w	8012c4e <_strtod_l+0x766>
 8012d78:	e5fe      	b.n	8012978 <_strtod_l+0x490>
 8012d7a:	465f      	mov	r7, fp
 8012d7c:	d16e      	bne.n	8012e5c <_strtod_l+0x974>
 8012d7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012d80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012d84:	b342      	cbz	r2, 8012dd8 <_strtod_l+0x8f0>
 8012d86:	4a32      	ldr	r2, [pc, #200]	; (8012e50 <_strtod_l+0x968>)
 8012d88:	4293      	cmp	r3, r2
 8012d8a:	d128      	bne.n	8012dde <_strtod_l+0x8f6>
 8012d8c:	9b04      	ldr	r3, [sp, #16]
 8012d8e:	4651      	mov	r1, sl
 8012d90:	b1eb      	cbz	r3, 8012dce <_strtod_l+0x8e6>
 8012d92:	4b2d      	ldr	r3, [pc, #180]	; (8012e48 <_strtod_l+0x960>)
 8012d94:	403b      	ands	r3, r7
 8012d96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012d9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012d9e:	d819      	bhi.n	8012dd4 <_strtod_l+0x8ec>
 8012da0:	0d1b      	lsrs	r3, r3, #20
 8012da2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012da6:	fa02 f303 	lsl.w	r3, r2, r3
 8012daa:	4299      	cmp	r1, r3
 8012dac:	d117      	bne.n	8012dde <_strtod_l+0x8f6>
 8012dae:	4b29      	ldr	r3, [pc, #164]	; (8012e54 <_strtod_l+0x96c>)
 8012db0:	429f      	cmp	r7, r3
 8012db2:	d102      	bne.n	8012dba <_strtod_l+0x8d2>
 8012db4:	3101      	adds	r1, #1
 8012db6:	f43f addf 	beq.w	8012978 <_strtod_l+0x490>
 8012dba:	4b23      	ldr	r3, [pc, #140]	; (8012e48 <_strtod_l+0x960>)
 8012dbc:	403b      	ands	r3, r7
 8012dbe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8012dc2:	f04f 0a00 	mov.w	sl, #0
 8012dc6:	9b04      	ldr	r3, [sp, #16]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d1a4      	bne.n	8012d16 <_strtod_l+0x82e>
 8012dcc:	e5de      	b.n	801298c <_strtod_l+0x4a4>
 8012dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012dd2:	e7ea      	b.n	8012daa <_strtod_l+0x8c2>
 8012dd4:	4613      	mov	r3, r2
 8012dd6:	e7e8      	b.n	8012daa <_strtod_l+0x8c2>
 8012dd8:	ea53 030a 	orrs.w	r3, r3, sl
 8012ddc:	d08c      	beq.n	8012cf8 <_strtod_l+0x810>
 8012dde:	9b08      	ldr	r3, [sp, #32]
 8012de0:	b1db      	cbz	r3, 8012e1a <_strtod_l+0x932>
 8012de2:	423b      	tst	r3, r7
 8012de4:	d0ef      	beq.n	8012dc6 <_strtod_l+0x8de>
 8012de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012de8:	9a04      	ldr	r2, [sp, #16]
 8012dea:	4650      	mov	r0, sl
 8012dec:	4659      	mov	r1, fp
 8012dee:	b1c3      	cbz	r3, 8012e22 <_strtod_l+0x93a>
 8012df0:	f7ff fb5b 	bl	80124aa <sulp>
 8012df4:	4602      	mov	r2, r0
 8012df6:	460b      	mov	r3, r1
 8012df8:	ec51 0b18 	vmov	r0, r1, d8
 8012dfc:	f7ed fa46 	bl	800028c <__adddf3>
 8012e00:	4682      	mov	sl, r0
 8012e02:	468b      	mov	fp, r1
 8012e04:	e7df      	b.n	8012dc6 <_strtod_l+0x8de>
 8012e06:	4013      	ands	r3, r2
 8012e08:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012e0c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012e10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012e14:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012e18:	e7d5      	b.n	8012dc6 <_strtod_l+0x8de>
 8012e1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e1c:	ea13 0f0a 	tst.w	r3, sl
 8012e20:	e7e0      	b.n	8012de4 <_strtod_l+0x8fc>
 8012e22:	f7ff fb42 	bl	80124aa <sulp>
 8012e26:	4602      	mov	r2, r0
 8012e28:	460b      	mov	r3, r1
 8012e2a:	ec51 0b18 	vmov	r0, r1, d8
 8012e2e:	f7ed fa2b 	bl	8000288 <__aeabi_dsub>
 8012e32:	2200      	movs	r2, #0
 8012e34:	2300      	movs	r3, #0
 8012e36:	4682      	mov	sl, r0
 8012e38:	468b      	mov	fp, r1
 8012e3a:	f7ed fe45 	bl	8000ac8 <__aeabi_dcmpeq>
 8012e3e:	2800      	cmp	r0, #0
 8012e40:	d0c1      	beq.n	8012dc6 <_strtod_l+0x8de>
 8012e42:	e611      	b.n	8012a68 <_strtod_l+0x580>
 8012e44:	fffffc02 	.word	0xfffffc02
 8012e48:	7ff00000 	.word	0x7ff00000
 8012e4c:	39500000 	.word	0x39500000
 8012e50:	000fffff 	.word	0x000fffff
 8012e54:	7fefffff 	.word	0x7fefffff
 8012e58:	08017a70 	.word	0x08017a70
 8012e5c:	4631      	mov	r1, r6
 8012e5e:	4628      	mov	r0, r5
 8012e60:	f002 f870 	bl	8014f44 <__ratio>
 8012e64:	ec59 8b10 	vmov	r8, r9, d0
 8012e68:	ee10 0a10 	vmov	r0, s0
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012e72:	4649      	mov	r1, r9
 8012e74:	f7ed fe3c 	bl	8000af0 <__aeabi_dcmple>
 8012e78:	2800      	cmp	r0, #0
 8012e7a:	d07a      	beq.n	8012f72 <_strtod_l+0xa8a>
 8012e7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d04a      	beq.n	8012f18 <_strtod_l+0xa30>
 8012e82:	4b95      	ldr	r3, [pc, #596]	; (80130d8 <_strtod_l+0xbf0>)
 8012e84:	2200      	movs	r2, #0
 8012e86:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012e8a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80130d8 <_strtod_l+0xbf0>
 8012e8e:	f04f 0800 	mov.w	r8, #0
 8012e92:	4b92      	ldr	r3, [pc, #584]	; (80130dc <_strtod_l+0xbf4>)
 8012e94:	403b      	ands	r3, r7
 8012e96:	930d      	str	r3, [sp, #52]	; 0x34
 8012e98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012e9a:	4b91      	ldr	r3, [pc, #580]	; (80130e0 <_strtod_l+0xbf8>)
 8012e9c:	429a      	cmp	r2, r3
 8012e9e:	f040 80b0 	bne.w	8013002 <_strtod_l+0xb1a>
 8012ea2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012ea6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8012eaa:	ec4b ab10 	vmov	d0, sl, fp
 8012eae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012eb2:	f001 ff6f 	bl	8014d94 <__ulp>
 8012eb6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012eba:	ec53 2b10 	vmov	r2, r3, d0
 8012ebe:	f7ed fb9b 	bl	80005f8 <__aeabi_dmul>
 8012ec2:	4652      	mov	r2, sl
 8012ec4:	465b      	mov	r3, fp
 8012ec6:	f7ed f9e1 	bl	800028c <__adddf3>
 8012eca:	460b      	mov	r3, r1
 8012ecc:	4983      	ldr	r1, [pc, #524]	; (80130dc <_strtod_l+0xbf4>)
 8012ece:	4a85      	ldr	r2, [pc, #532]	; (80130e4 <_strtod_l+0xbfc>)
 8012ed0:	4019      	ands	r1, r3
 8012ed2:	4291      	cmp	r1, r2
 8012ed4:	4682      	mov	sl, r0
 8012ed6:	d960      	bls.n	8012f9a <_strtod_l+0xab2>
 8012ed8:	ee18 3a90 	vmov	r3, s17
 8012edc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012ee0:	4293      	cmp	r3, r2
 8012ee2:	d104      	bne.n	8012eee <_strtod_l+0xa06>
 8012ee4:	ee18 3a10 	vmov	r3, s16
 8012ee8:	3301      	adds	r3, #1
 8012eea:	f43f ad45 	beq.w	8012978 <_strtod_l+0x490>
 8012eee:	f8df b200 	ldr.w	fp, [pc, #512]	; 80130f0 <_strtod_l+0xc08>
 8012ef2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012ef6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012ef8:	4620      	mov	r0, r4
 8012efa:	f001 fc19 	bl	8014730 <_Bfree>
 8012efe:	9905      	ldr	r1, [sp, #20]
 8012f00:	4620      	mov	r0, r4
 8012f02:	f001 fc15 	bl	8014730 <_Bfree>
 8012f06:	4631      	mov	r1, r6
 8012f08:	4620      	mov	r0, r4
 8012f0a:	f001 fc11 	bl	8014730 <_Bfree>
 8012f0e:	4629      	mov	r1, r5
 8012f10:	4620      	mov	r0, r4
 8012f12:	f001 fc0d 	bl	8014730 <_Bfree>
 8012f16:	e61a      	b.n	8012b4e <_strtod_l+0x666>
 8012f18:	f1ba 0f00 	cmp.w	sl, #0
 8012f1c:	d11b      	bne.n	8012f56 <_strtod_l+0xa6e>
 8012f1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012f22:	b9f3      	cbnz	r3, 8012f62 <_strtod_l+0xa7a>
 8012f24:	4b6c      	ldr	r3, [pc, #432]	; (80130d8 <_strtod_l+0xbf0>)
 8012f26:	2200      	movs	r2, #0
 8012f28:	4640      	mov	r0, r8
 8012f2a:	4649      	mov	r1, r9
 8012f2c:	f7ed fdd6 	bl	8000adc <__aeabi_dcmplt>
 8012f30:	b9d0      	cbnz	r0, 8012f68 <_strtod_l+0xa80>
 8012f32:	4640      	mov	r0, r8
 8012f34:	4649      	mov	r1, r9
 8012f36:	4b6c      	ldr	r3, [pc, #432]	; (80130e8 <_strtod_l+0xc00>)
 8012f38:	2200      	movs	r2, #0
 8012f3a:	f7ed fb5d 	bl	80005f8 <__aeabi_dmul>
 8012f3e:	4680      	mov	r8, r0
 8012f40:	4689      	mov	r9, r1
 8012f42:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012f46:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8012f4a:	9315      	str	r3, [sp, #84]	; 0x54
 8012f4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012f50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012f54:	e79d      	b.n	8012e92 <_strtod_l+0x9aa>
 8012f56:	f1ba 0f01 	cmp.w	sl, #1
 8012f5a:	d102      	bne.n	8012f62 <_strtod_l+0xa7a>
 8012f5c:	2f00      	cmp	r7, #0
 8012f5e:	f43f ad83 	beq.w	8012a68 <_strtod_l+0x580>
 8012f62:	4b62      	ldr	r3, [pc, #392]	; (80130ec <_strtod_l+0xc04>)
 8012f64:	2200      	movs	r2, #0
 8012f66:	e78e      	b.n	8012e86 <_strtod_l+0x99e>
 8012f68:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80130e8 <_strtod_l+0xc00>
 8012f6c:	f04f 0800 	mov.w	r8, #0
 8012f70:	e7e7      	b.n	8012f42 <_strtod_l+0xa5a>
 8012f72:	4b5d      	ldr	r3, [pc, #372]	; (80130e8 <_strtod_l+0xc00>)
 8012f74:	4640      	mov	r0, r8
 8012f76:	4649      	mov	r1, r9
 8012f78:	2200      	movs	r2, #0
 8012f7a:	f7ed fb3d 	bl	80005f8 <__aeabi_dmul>
 8012f7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f80:	4680      	mov	r8, r0
 8012f82:	4689      	mov	r9, r1
 8012f84:	b933      	cbnz	r3, 8012f94 <_strtod_l+0xaac>
 8012f86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012f8a:	900e      	str	r0, [sp, #56]	; 0x38
 8012f8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8012f8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8012f92:	e7dd      	b.n	8012f50 <_strtod_l+0xa68>
 8012f94:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8012f98:	e7f9      	b.n	8012f8e <_strtod_l+0xaa6>
 8012f9a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8012f9e:	9b04      	ldr	r3, [sp, #16]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d1a8      	bne.n	8012ef6 <_strtod_l+0xa0e>
 8012fa4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012fa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012faa:	0d1b      	lsrs	r3, r3, #20
 8012fac:	051b      	lsls	r3, r3, #20
 8012fae:	429a      	cmp	r2, r3
 8012fb0:	d1a1      	bne.n	8012ef6 <_strtod_l+0xa0e>
 8012fb2:	4640      	mov	r0, r8
 8012fb4:	4649      	mov	r1, r9
 8012fb6:	f7ed fecf 	bl	8000d58 <__aeabi_d2lz>
 8012fba:	f7ed faef 	bl	800059c <__aeabi_l2d>
 8012fbe:	4602      	mov	r2, r0
 8012fc0:	460b      	mov	r3, r1
 8012fc2:	4640      	mov	r0, r8
 8012fc4:	4649      	mov	r1, r9
 8012fc6:	f7ed f95f 	bl	8000288 <__aeabi_dsub>
 8012fca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012fcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012fd0:	ea43 030a 	orr.w	r3, r3, sl
 8012fd4:	4313      	orrs	r3, r2
 8012fd6:	4680      	mov	r8, r0
 8012fd8:	4689      	mov	r9, r1
 8012fda:	d055      	beq.n	8013088 <_strtod_l+0xba0>
 8012fdc:	a336      	add	r3, pc, #216	; (adr r3, 80130b8 <_strtod_l+0xbd0>)
 8012fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe2:	f7ed fd7b 	bl	8000adc <__aeabi_dcmplt>
 8012fe6:	2800      	cmp	r0, #0
 8012fe8:	f47f acd0 	bne.w	801298c <_strtod_l+0x4a4>
 8012fec:	a334      	add	r3, pc, #208	; (adr r3, 80130c0 <_strtod_l+0xbd8>)
 8012fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ff2:	4640      	mov	r0, r8
 8012ff4:	4649      	mov	r1, r9
 8012ff6:	f7ed fd8f 	bl	8000b18 <__aeabi_dcmpgt>
 8012ffa:	2800      	cmp	r0, #0
 8012ffc:	f43f af7b 	beq.w	8012ef6 <_strtod_l+0xa0e>
 8013000:	e4c4      	b.n	801298c <_strtod_l+0x4a4>
 8013002:	9b04      	ldr	r3, [sp, #16]
 8013004:	b333      	cbz	r3, 8013054 <_strtod_l+0xb6c>
 8013006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013008:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801300c:	d822      	bhi.n	8013054 <_strtod_l+0xb6c>
 801300e:	a32e      	add	r3, pc, #184	; (adr r3, 80130c8 <_strtod_l+0xbe0>)
 8013010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013014:	4640      	mov	r0, r8
 8013016:	4649      	mov	r1, r9
 8013018:	f7ed fd6a 	bl	8000af0 <__aeabi_dcmple>
 801301c:	b1a0      	cbz	r0, 8013048 <_strtod_l+0xb60>
 801301e:	4649      	mov	r1, r9
 8013020:	4640      	mov	r0, r8
 8013022:	f7ed fdc1 	bl	8000ba8 <__aeabi_d2uiz>
 8013026:	2801      	cmp	r0, #1
 8013028:	bf38      	it	cc
 801302a:	2001      	movcc	r0, #1
 801302c:	f7ed fa6a 	bl	8000504 <__aeabi_ui2d>
 8013030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013032:	4680      	mov	r8, r0
 8013034:	4689      	mov	r9, r1
 8013036:	bb23      	cbnz	r3, 8013082 <_strtod_l+0xb9a>
 8013038:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801303c:	9010      	str	r0, [sp, #64]	; 0x40
 801303e:	9311      	str	r3, [sp, #68]	; 0x44
 8013040:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013044:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801304a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801304c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013050:	1a9b      	subs	r3, r3, r2
 8013052:	9309      	str	r3, [sp, #36]	; 0x24
 8013054:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013058:	eeb0 0a48 	vmov.f32	s0, s16
 801305c:	eef0 0a68 	vmov.f32	s1, s17
 8013060:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013064:	f001 fe96 	bl	8014d94 <__ulp>
 8013068:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801306c:	ec53 2b10 	vmov	r2, r3, d0
 8013070:	f7ed fac2 	bl	80005f8 <__aeabi_dmul>
 8013074:	ec53 2b18 	vmov	r2, r3, d8
 8013078:	f7ed f908 	bl	800028c <__adddf3>
 801307c:	4682      	mov	sl, r0
 801307e:	468b      	mov	fp, r1
 8013080:	e78d      	b.n	8012f9e <_strtod_l+0xab6>
 8013082:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8013086:	e7db      	b.n	8013040 <_strtod_l+0xb58>
 8013088:	a311      	add	r3, pc, #68	; (adr r3, 80130d0 <_strtod_l+0xbe8>)
 801308a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801308e:	f7ed fd25 	bl	8000adc <__aeabi_dcmplt>
 8013092:	e7b2      	b.n	8012ffa <_strtod_l+0xb12>
 8013094:	2300      	movs	r3, #0
 8013096:	930a      	str	r3, [sp, #40]	; 0x28
 8013098:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801309a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801309c:	6013      	str	r3, [r2, #0]
 801309e:	f7ff ba6b 	b.w	8012578 <_strtod_l+0x90>
 80130a2:	2a65      	cmp	r2, #101	; 0x65
 80130a4:	f43f ab5f 	beq.w	8012766 <_strtod_l+0x27e>
 80130a8:	2a45      	cmp	r2, #69	; 0x45
 80130aa:	f43f ab5c 	beq.w	8012766 <_strtod_l+0x27e>
 80130ae:	2301      	movs	r3, #1
 80130b0:	f7ff bb94 	b.w	80127dc <_strtod_l+0x2f4>
 80130b4:	f3af 8000 	nop.w
 80130b8:	94a03595 	.word	0x94a03595
 80130bc:	3fdfffff 	.word	0x3fdfffff
 80130c0:	35afe535 	.word	0x35afe535
 80130c4:	3fe00000 	.word	0x3fe00000
 80130c8:	ffc00000 	.word	0xffc00000
 80130cc:	41dfffff 	.word	0x41dfffff
 80130d0:	94a03595 	.word	0x94a03595
 80130d4:	3fcfffff 	.word	0x3fcfffff
 80130d8:	3ff00000 	.word	0x3ff00000
 80130dc:	7ff00000 	.word	0x7ff00000
 80130e0:	7fe00000 	.word	0x7fe00000
 80130e4:	7c9fffff 	.word	0x7c9fffff
 80130e8:	3fe00000 	.word	0x3fe00000
 80130ec:	bff00000 	.word	0xbff00000
 80130f0:	7fefffff 	.word	0x7fefffff

080130f4 <strtod>:
 80130f4:	460a      	mov	r2, r1
 80130f6:	4601      	mov	r1, r0
 80130f8:	4802      	ldr	r0, [pc, #8]	; (8013104 <strtod+0x10>)
 80130fa:	4b03      	ldr	r3, [pc, #12]	; (8013108 <strtod+0x14>)
 80130fc:	6800      	ldr	r0, [r0, #0]
 80130fe:	f7ff b9f3 	b.w	80124e8 <_strtod_l>
 8013102:	bf00      	nop
 8013104:	20000234 	.word	0x20000234
 8013108:	2000029c 	.word	0x2000029c

0801310c <_strtol_l.constprop.0>:
 801310c:	2b01      	cmp	r3, #1
 801310e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013112:	d001      	beq.n	8013118 <_strtol_l.constprop.0+0xc>
 8013114:	2b24      	cmp	r3, #36	; 0x24
 8013116:	d906      	bls.n	8013126 <_strtol_l.constprop.0+0x1a>
 8013118:	f7fe fbf8 	bl	801190c <__errno>
 801311c:	2316      	movs	r3, #22
 801311e:	6003      	str	r3, [r0, #0]
 8013120:	2000      	movs	r0, #0
 8013122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013126:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801320c <_strtol_l.constprop.0+0x100>
 801312a:	460d      	mov	r5, r1
 801312c:	462e      	mov	r6, r5
 801312e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013132:	f814 700c 	ldrb.w	r7, [r4, ip]
 8013136:	f017 0708 	ands.w	r7, r7, #8
 801313a:	d1f7      	bne.n	801312c <_strtol_l.constprop.0+0x20>
 801313c:	2c2d      	cmp	r4, #45	; 0x2d
 801313e:	d132      	bne.n	80131a6 <_strtol_l.constprop.0+0x9a>
 8013140:	782c      	ldrb	r4, [r5, #0]
 8013142:	2701      	movs	r7, #1
 8013144:	1cb5      	adds	r5, r6, #2
 8013146:	2b00      	cmp	r3, #0
 8013148:	d05b      	beq.n	8013202 <_strtol_l.constprop.0+0xf6>
 801314a:	2b10      	cmp	r3, #16
 801314c:	d109      	bne.n	8013162 <_strtol_l.constprop.0+0x56>
 801314e:	2c30      	cmp	r4, #48	; 0x30
 8013150:	d107      	bne.n	8013162 <_strtol_l.constprop.0+0x56>
 8013152:	782c      	ldrb	r4, [r5, #0]
 8013154:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013158:	2c58      	cmp	r4, #88	; 0x58
 801315a:	d14d      	bne.n	80131f8 <_strtol_l.constprop.0+0xec>
 801315c:	786c      	ldrb	r4, [r5, #1]
 801315e:	2310      	movs	r3, #16
 8013160:	3502      	adds	r5, #2
 8013162:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8013166:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801316a:	f04f 0c00 	mov.w	ip, #0
 801316e:	fbb8 f9f3 	udiv	r9, r8, r3
 8013172:	4666      	mov	r6, ip
 8013174:	fb03 8a19 	mls	sl, r3, r9, r8
 8013178:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801317c:	f1be 0f09 	cmp.w	lr, #9
 8013180:	d816      	bhi.n	80131b0 <_strtol_l.constprop.0+0xa4>
 8013182:	4674      	mov	r4, lr
 8013184:	42a3      	cmp	r3, r4
 8013186:	dd24      	ble.n	80131d2 <_strtol_l.constprop.0+0xc6>
 8013188:	f1bc 0f00 	cmp.w	ip, #0
 801318c:	db1e      	blt.n	80131cc <_strtol_l.constprop.0+0xc0>
 801318e:	45b1      	cmp	r9, r6
 8013190:	d31c      	bcc.n	80131cc <_strtol_l.constprop.0+0xc0>
 8013192:	d101      	bne.n	8013198 <_strtol_l.constprop.0+0x8c>
 8013194:	45a2      	cmp	sl, r4
 8013196:	db19      	blt.n	80131cc <_strtol_l.constprop.0+0xc0>
 8013198:	fb06 4603 	mla	r6, r6, r3, r4
 801319c:	f04f 0c01 	mov.w	ip, #1
 80131a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80131a4:	e7e8      	b.n	8013178 <_strtol_l.constprop.0+0x6c>
 80131a6:	2c2b      	cmp	r4, #43	; 0x2b
 80131a8:	bf04      	itt	eq
 80131aa:	782c      	ldrbeq	r4, [r5, #0]
 80131ac:	1cb5      	addeq	r5, r6, #2
 80131ae:	e7ca      	b.n	8013146 <_strtol_l.constprop.0+0x3a>
 80131b0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80131b4:	f1be 0f19 	cmp.w	lr, #25
 80131b8:	d801      	bhi.n	80131be <_strtol_l.constprop.0+0xb2>
 80131ba:	3c37      	subs	r4, #55	; 0x37
 80131bc:	e7e2      	b.n	8013184 <_strtol_l.constprop.0+0x78>
 80131be:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80131c2:	f1be 0f19 	cmp.w	lr, #25
 80131c6:	d804      	bhi.n	80131d2 <_strtol_l.constprop.0+0xc6>
 80131c8:	3c57      	subs	r4, #87	; 0x57
 80131ca:	e7db      	b.n	8013184 <_strtol_l.constprop.0+0x78>
 80131cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80131d0:	e7e6      	b.n	80131a0 <_strtol_l.constprop.0+0x94>
 80131d2:	f1bc 0f00 	cmp.w	ip, #0
 80131d6:	da05      	bge.n	80131e4 <_strtol_l.constprop.0+0xd8>
 80131d8:	2322      	movs	r3, #34	; 0x22
 80131da:	6003      	str	r3, [r0, #0]
 80131dc:	4646      	mov	r6, r8
 80131de:	b942      	cbnz	r2, 80131f2 <_strtol_l.constprop.0+0xe6>
 80131e0:	4630      	mov	r0, r6
 80131e2:	e79e      	b.n	8013122 <_strtol_l.constprop.0+0x16>
 80131e4:	b107      	cbz	r7, 80131e8 <_strtol_l.constprop.0+0xdc>
 80131e6:	4276      	negs	r6, r6
 80131e8:	2a00      	cmp	r2, #0
 80131ea:	d0f9      	beq.n	80131e0 <_strtol_l.constprop.0+0xd4>
 80131ec:	f1bc 0f00 	cmp.w	ip, #0
 80131f0:	d000      	beq.n	80131f4 <_strtol_l.constprop.0+0xe8>
 80131f2:	1e69      	subs	r1, r5, #1
 80131f4:	6011      	str	r1, [r2, #0]
 80131f6:	e7f3      	b.n	80131e0 <_strtol_l.constprop.0+0xd4>
 80131f8:	2430      	movs	r4, #48	; 0x30
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d1b1      	bne.n	8013162 <_strtol_l.constprop.0+0x56>
 80131fe:	2308      	movs	r3, #8
 8013200:	e7af      	b.n	8013162 <_strtol_l.constprop.0+0x56>
 8013202:	2c30      	cmp	r4, #48	; 0x30
 8013204:	d0a5      	beq.n	8013152 <_strtol_l.constprop.0+0x46>
 8013206:	230a      	movs	r3, #10
 8013208:	e7ab      	b.n	8013162 <_strtol_l.constprop.0+0x56>
 801320a:	bf00      	nop
 801320c:	0801790f 	.word	0x0801790f

08013210 <strtol>:
 8013210:	4613      	mov	r3, r2
 8013212:	460a      	mov	r2, r1
 8013214:	4601      	mov	r1, r0
 8013216:	4802      	ldr	r0, [pc, #8]	; (8013220 <strtol+0x10>)
 8013218:	6800      	ldr	r0, [r0, #0]
 801321a:	f7ff bf77 	b.w	801310c <_strtol_l.constprop.0>
 801321e:	bf00      	nop
 8013220:	20000234 	.word	0x20000234

08013224 <_vsniprintf_r>:
 8013224:	b530      	push	{r4, r5, lr}
 8013226:	4614      	mov	r4, r2
 8013228:	2c00      	cmp	r4, #0
 801322a:	b09b      	sub	sp, #108	; 0x6c
 801322c:	4605      	mov	r5, r0
 801322e:	461a      	mov	r2, r3
 8013230:	da05      	bge.n	801323e <_vsniprintf_r+0x1a>
 8013232:	238b      	movs	r3, #139	; 0x8b
 8013234:	6003      	str	r3, [r0, #0]
 8013236:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801323a:	b01b      	add	sp, #108	; 0x6c
 801323c:	bd30      	pop	{r4, r5, pc}
 801323e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013242:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013246:	bf14      	ite	ne
 8013248:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801324c:	4623      	moveq	r3, r4
 801324e:	9302      	str	r3, [sp, #8]
 8013250:	9305      	str	r3, [sp, #20]
 8013252:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013256:	9100      	str	r1, [sp, #0]
 8013258:	9104      	str	r1, [sp, #16]
 801325a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801325e:	4669      	mov	r1, sp
 8013260:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013262:	f002 f839 	bl	80152d8 <_svfiprintf_r>
 8013266:	1c43      	adds	r3, r0, #1
 8013268:	bfbc      	itt	lt
 801326a:	238b      	movlt	r3, #139	; 0x8b
 801326c:	602b      	strlt	r3, [r5, #0]
 801326e:	2c00      	cmp	r4, #0
 8013270:	d0e3      	beq.n	801323a <_vsniprintf_r+0x16>
 8013272:	9b00      	ldr	r3, [sp, #0]
 8013274:	2200      	movs	r2, #0
 8013276:	701a      	strb	r2, [r3, #0]
 8013278:	e7df      	b.n	801323a <_vsniprintf_r+0x16>
	...

0801327c <vsniprintf>:
 801327c:	b507      	push	{r0, r1, r2, lr}
 801327e:	9300      	str	r3, [sp, #0]
 8013280:	4613      	mov	r3, r2
 8013282:	460a      	mov	r2, r1
 8013284:	4601      	mov	r1, r0
 8013286:	4803      	ldr	r0, [pc, #12]	; (8013294 <vsniprintf+0x18>)
 8013288:	6800      	ldr	r0, [r0, #0]
 801328a:	f7ff ffcb 	bl	8013224 <_vsniprintf_r>
 801328e:	b003      	add	sp, #12
 8013290:	f85d fb04 	ldr.w	pc, [sp], #4
 8013294:	20000234 	.word	0x20000234

08013298 <quorem>:
 8013298:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801329c:	6903      	ldr	r3, [r0, #16]
 801329e:	690c      	ldr	r4, [r1, #16]
 80132a0:	42a3      	cmp	r3, r4
 80132a2:	4607      	mov	r7, r0
 80132a4:	f2c0 8081 	blt.w	80133aa <quorem+0x112>
 80132a8:	3c01      	subs	r4, #1
 80132aa:	f101 0814 	add.w	r8, r1, #20
 80132ae:	f100 0514 	add.w	r5, r0, #20
 80132b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80132b6:	9301      	str	r3, [sp, #4]
 80132b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80132bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80132c0:	3301      	adds	r3, #1
 80132c2:	429a      	cmp	r2, r3
 80132c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80132c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80132cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80132d0:	d331      	bcc.n	8013336 <quorem+0x9e>
 80132d2:	f04f 0e00 	mov.w	lr, #0
 80132d6:	4640      	mov	r0, r8
 80132d8:	46ac      	mov	ip, r5
 80132da:	46f2      	mov	sl, lr
 80132dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80132e0:	b293      	uxth	r3, r2
 80132e2:	fb06 e303 	mla	r3, r6, r3, lr
 80132e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80132ea:	b29b      	uxth	r3, r3
 80132ec:	ebaa 0303 	sub.w	r3, sl, r3
 80132f0:	f8dc a000 	ldr.w	sl, [ip]
 80132f4:	0c12      	lsrs	r2, r2, #16
 80132f6:	fa13 f38a 	uxtah	r3, r3, sl
 80132fa:	fb06 e202 	mla	r2, r6, r2, lr
 80132fe:	9300      	str	r3, [sp, #0]
 8013300:	9b00      	ldr	r3, [sp, #0]
 8013302:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013306:	b292      	uxth	r2, r2
 8013308:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801330c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013310:	f8bd 3000 	ldrh.w	r3, [sp]
 8013314:	4581      	cmp	r9, r0
 8013316:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801331a:	f84c 3b04 	str.w	r3, [ip], #4
 801331e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013322:	d2db      	bcs.n	80132dc <quorem+0x44>
 8013324:	f855 300b 	ldr.w	r3, [r5, fp]
 8013328:	b92b      	cbnz	r3, 8013336 <quorem+0x9e>
 801332a:	9b01      	ldr	r3, [sp, #4]
 801332c:	3b04      	subs	r3, #4
 801332e:	429d      	cmp	r5, r3
 8013330:	461a      	mov	r2, r3
 8013332:	d32e      	bcc.n	8013392 <quorem+0xfa>
 8013334:	613c      	str	r4, [r7, #16]
 8013336:	4638      	mov	r0, r7
 8013338:	f001 fc86 	bl	8014c48 <__mcmp>
 801333c:	2800      	cmp	r0, #0
 801333e:	db24      	blt.n	801338a <quorem+0xf2>
 8013340:	3601      	adds	r6, #1
 8013342:	4628      	mov	r0, r5
 8013344:	f04f 0c00 	mov.w	ip, #0
 8013348:	f858 2b04 	ldr.w	r2, [r8], #4
 801334c:	f8d0 e000 	ldr.w	lr, [r0]
 8013350:	b293      	uxth	r3, r2
 8013352:	ebac 0303 	sub.w	r3, ip, r3
 8013356:	0c12      	lsrs	r2, r2, #16
 8013358:	fa13 f38e 	uxtah	r3, r3, lr
 801335c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013360:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013364:	b29b      	uxth	r3, r3
 8013366:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801336a:	45c1      	cmp	r9, r8
 801336c:	f840 3b04 	str.w	r3, [r0], #4
 8013370:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013374:	d2e8      	bcs.n	8013348 <quorem+0xb0>
 8013376:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801337a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801337e:	b922      	cbnz	r2, 801338a <quorem+0xf2>
 8013380:	3b04      	subs	r3, #4
 8013382:	429d      	cmp	r5, r3
 8013384:	461a      	mov	r2, r3
 8013386:	d30a      	bcc.n	801339e <quorem+0x106>
 8013388:	613c      	str	r4, [r7, #16]
 801338a:	4630      	mov	r0, r6
 801338c:	b003      	add	sp, #12
 801338e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013392:	6812      	ldr	r2, [r2, #0]
 8013394:	3b04      	subs	r3, #4
 8013396:	2a00      	cmp	r2, #0
 8013398:	d1cc      	bne.n	8013334 <quorem+0x9c>
 801339a:	3c01      	subs	r4, #1
 801339c:	e7c7      	b.n	801332e <quorem+0x96>
 801339e:	6812      	ldr	r2, [r2, #0]
 80133a0:	3b04      	subs	r3, #4
 80133a2:	2a00      	cmp	r2, #0
 80133a4:	d1f0      	bne.n	8013388 <quorem+0xf0>
 80133a6:	3c01      	subs	r4, #1
 80133a8:	e7eb      	b.n	8013382 <quorem+0xea>
 80133aa:	2000      	movs	r0, #0
 80133ac:	e7ee      	b.n	801338c <quorem+0xf4>
	...

080133b0 <_dtoa_r>:
 80133b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133b4:	ed2d 8b04 	vpush	{d8-d9}
 80133b8:	ec57 6b10 	vmov	r6, r7, d0
 80133bc:	b093      	sub	sp, #76	; 0x4c
 80133be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80133c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80133c4:	9106      	str	r1, [sp, #24]
 80133c6:	ee10 aa10 	vmov	sl, s0
 80133ca:	4604      	mov	r4, r0
 80133cc:	9209      	str	r2, [sp, #36]	; 0x24
 80133ce:	930c      	str	r3, [sp, #48]	; 0x30
 80133d0:	46bb      	mov	fp, r7
 80133d2:	b975      	cbnz	r5, 80133f2 <_dtoa_r+0x42>
 80133d4:	2010      	movs	r0, #16
 80133d6:	f001 f951 	bl	801467c <malloc>
 80133da:	4602      	mov	r2, r0
 80133dc:	6260      	str	r0, [r4, #36]	; 0x24
 80133de:	b920      	cbnz	r0, 80133ea <_dtoa_r+0x3a>
 80133e0:	4ba7      	ldr	r3, [pc, #668]	; (8013680 <_dtoa_r+0x2d0>)
 80133e2:	21ea      	movs	r1, #234	; 0xea
 80133e4:	48a7      	ldr	r0, [pc, #668]	; (8013684 <_dtoa_r+0x2d4>)
 80133e6:	f002 f8f1 	bl	80155cc <__assert_func>
 80133ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80133ee:	6005      	str	r5, [r0, #0]
 80133f0:	60c5      	str	r5, [r0, #12]
 80133f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80133f4:	6819      	ldr	r1, [r3, #0]
 80133f6:	b151      	cbz	r1, 801340e <_dtoa_r+0x5e>
 80133f8:	685a      	ldr	r2, [r3, #4]
 80133fa:	604a      	str	r2, [r1, #4]
 80133fc:	2301      	movs	r3, #1
 80133fe:	4093      	lsls	r3, r2
 8013400:	608b      	str	r3, [r1, #8]
 8013402:	4620      	mov	r0, r4
 8013404:	f001 f994 	bl	8014730 <_Bfree>
 8013408:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801340a:	2200      	movs	r2, #0
 801340c:	601a      	str	r2, [r3, #0]
 801340e:	1e3b      	subs	r3, r7, #0
 8013410:	bfaa      	itet	ge
 8013412:	2300      	movge	r3, #0
 8013414:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8013418:	f8c8 3000 	strge.w	r3, [r8]
 801341c:	4b9a      	ldr	r3, [pc, #616]	; (8013688 <_dtoa_r+0x2d8>)
 801341e:	bfbc      	itt	lt
 8013420:	2201      	movlt	r2, #1
 8013422:	f8c8 2000 	strlt.w	r2, [r8]
 8013426:	ea33 030b 	bics.w	r3, r3, fp
 801342a:	d11b      	bne.n	8013464 <_dtoa_r+0xb4>
 801342c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801342e:	f242 730f 	movw	r3, #9999	; 0x270f
 8013432:	6013      	str	r3, [r2, #0]
 8013434:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013438:	4333      	orrs	r3, r6
 801343a:	f000 8592 	beq.w	8013f62 <_dtoa_r+0xbb2>
 801343e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013440:	b963      	cbnz	r3, 801345c <_dtoa_r+0xac>
 8013442:	4b92      	ldr	r3, [pc, #584]	; (801368c <_dtoa_r+0x2dc>)
 8013444:	e022      	b.n	801348c <_dtoa_r+0xdc>
 8013446:	4b92      	ldr	r3, [pc, #584]	; (8013690 <_dtoa_r+0x2e0>)
 8013448:	9301      	str	r3, [sp, #4]
 801344a:	3308      	adds	r3, #8
 801344c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801344e:	6013      	str	r3, [r2, #0]
 8013450:	9801      	ldr	r0, [sp, #4]
 8013452:	b013      	add	sp, #76	; 0x4c
 8013454:	ecbd 8b04 	vpop	{d8-d9}
 8013458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801345c:	4b8b      	ldr	r3, [pc, #556]	; (801368c <_dtoa_r+0x2dc>)
 801345e:	9301      	str	r3, [sp, #4]
 8013460:	3303      	adds	r3, #3
 8013462:	e7f3      	b.n	801344c <_dtoa_r+0x9c>
 8013464:	2200      	movs	r2, #0
 8013466:	2300      	movs	r3, #0
 8013468:	4650      	mov	r0, sl
 801346a:	4659      	mov	r1, fp
 801346c:	f7ed fb2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8013470:	ec4b ab19 	vmov	d9, sl, fp
 8013474:	4680      	mov	r8, r0
 8013476:	b158      	cbz	r0, 8013490 <_dtoa_r+0xe0>
 8013478:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801347a:	2301      	movs	r3, #1
 801347c:	6013      	str	r3, [r2, #0]
 801347e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013480:	2b00      	cmp	r3, #0
 8013482:	f000 856b 	beq.w	8013f5c <_dtoa_r+0xbac>
 8013486:	4883      	ldr	r0, [pc, #524]	; (8013694 <_dtoa_r+0x2e4>)
 8013488:	6018      	str	r0, [r3, #0]
 801348a:	1e43      	subs	r3, r0, #1
 801348c:	9301      	str	r3, [sp, #4]
 801348e:	e7df      	b.n	8013450 <_dtoa_r+0xa0>
 8013490:	ec4b ab10 	vmov	d0, sl, fp
 8013494:	aa10      	add	r2, sp, #64	; 0x40
 8013496:	a911      	add	r1, sp, #68	; 0x44
 8013498:	4620      	mov	r0, r4
 801349a:	f001 fcf7 	bl	8014e8c <__d2b>
 801349e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80134a2:	ee08 0a10 	vmov	s16, r0
 80134a6:	2d00      	cmp	r5, #0
 80134a8:	f000 8084 	beq.w	80135b4 <_dtoa_r+0x204>
 80134ac:	ee19 3a90 	vmov	r3, s19
 80134b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80134b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80134b8:	4656      	mov	r6, sl
 80134ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80134be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80134c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80134c6:	4b74      	ldr	r3, [pc, #464]	; (8013698 <_dtoa_r+0x2e8>)
 80134c8:	2200      	movs	r2, #0
 80134ca:	4630      	mov	r0, r6
 80134cc:	4639      	mov	r1, r7
 80134ce:	f7ec fedb 	bl	8000288 <__aeabi_dsub>
 80134d2:	a365      	add	r3, pc, #404	; (adr r3, 8013668 <_dtoa_r+0x2b8>)
 80134d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134d8:	f7ed f88e 	bl	80005f8 <__aeabi_dmul>
 80134dc:	a364      	add	r3, pc, #400	; (adr r3, 8013670 <_dtoa_r+0x2c0>)
 80134de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134e2:	f7ec fed3 	bl	800028c <__adddf3>
 80134e6:	4606      	mov	r6, r0
 80134e8:	4628      	mov	r0, r5
 80134ea:	460f      	mov	r7, r1
 80134ec:	f7ed f81a 	bl	8000524 <__aeabi_i2d>
 80134f0:	a361      	add	r3, pc, #388	; (adr r3, 8013678 <_dtoa_r+0x2c8>)
 80134f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134f6:	f7ed f87f 	bl	80005f8 <__aeabi_dmul>
 80134fa:	4602      	mov	r2, r0
 80134fc:	460b      	mov	r3, r1
 80134fe:	4630      	mov	r0, r6
 8013500:	4639      	mov	r1, r7
 8013502:	f7ec fec3 	bl	800028c <__adddf3>
 8013506:	4606      	mov	r6, r0
 8013508:	460f      	mov	r7, r1
 801350a:	f7ed fb25 	bl	8000b58 <__aeabi_d2iz>
 801350e:	2200      	movs	r2, #0
 8013510:	9000      	str	r0, [sp, #0]
 8013512:	2300      	movs	r3, #0
 8013514:	4630      	mov	r0, r6
 8013516:	4639      	mov	r1, r7
 8013518:	f7ed fae0 	bl	8000adc <__aeabi_dcmplt>
 801351c:	b150      	cbz	r0, 8013534 <_dtoa_r+0x184>
 801351e:	9800      	ldr	r0, [sp, #0]
 8013520:	f7ed f800 	bl	8000524 <__aeabi_i2d>
 8013524:	4632      	mov	r2, r6
 8013526:	463b      	mov	r3, r7
 8013528:	f7ed face 	bl	8000ac8 <__aeabi_dcmpeq>
 801352c:	b910      	cbnz	r0, 8013534 <_dtoa_r+0x184>
 801352e:	9b00      	ldr	r3, [sp, #0]
 8013530:	3b01      	subs	r3, #1
 8013532:	9300      	str	r3, [sp, #0]
 8013534:	9b00      	ldr	r3, [sp, #0]
 8013536:	2b16      	cmp	r3, #22
 8013538:	d85a      	bhi.n	80135f0 <_dtoa_r+0x240>
 801353a:	9a00      	ldr	r2, [sp, #0]
 801353c:	4b57      	ldr	r3, [pc, #348]	; (801369c <_dtoa_r+0x2ec>)
 801353e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013546:	ec51 0b19 	vmov	r0, r1, d9
 801354a:	f7ed fac7 	bl	8000adc <__aeabi_dcmplt>
 801354e:	2800      	cmp	r0, #0
 8013550:	d050      	beq.n	80135f4 <_dtoa_r+0x244>
 8013552:	9b00      	ldr	r3, [sp, #0]
 8013554:	3b01      	subs	r3, #1
 8013556:	9300      	str	r3, [sp, #0]
 8013558:	2300      	movs	r3, #0
 801355a:	930b      	str	r3, [sp, #44]	; 0x2c
 801355c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801355e:	1b5d      	subs	r5, r3, r5
 8013560:	1e6b      	subs	r3, r5, #1
 8013562:	9305      	str	r3, [sp, #20]
 8013564:	bf45      	ittet	mi
 8013566:	f1c5 0301 	rsbmi	r3, r5, #1
 801356a:	9304      	strmi	r3, [sp, #16]
 801356c:	2300      	movpl	r3, #0
 801356e:	2300      	movmi	r3, #0
 8013570:	bf4c      	ite	mi
 8013572:	9305      	strmi	r3, [sp, #20]
 8013574:	9304      	strpl	r3, [sp, #16]
 8013576:	9b00      	ldr	r3, [sp, #0]
 8013578:	2b00      	cmp	r3, #0
 801357a:	db3d      	blt.n	80135f8 <_dtoa_r+0x248>
 801357c:	9b05      	ldr	r3, [sp, #20]
 801357e:	9a00      	ldr	r2, [sp, #0]
 8013580:	920a      	str	r2, [sp, #40]	; 0x28
 8013582:	4413      	add	r3, r2
 8013584:	9305      	str	r3, [sp, #20]
 8013586:	2300      	movs	r3, #0
 8013588:	9307      	str	r3, [sp, #28]
 801358a:	9b06      	ldr	r3, [sp, #24]
 801358c:	2b09      	cmp	r3, #9
 801358e:	f200 8089 	bhi.w	80136a4 <_dtoa_r+0x2f4>
 8013592:	2b05      	cmp	r3, #5
 8013594:	bfc4      	itt	gt
 8013596:	3b04      	subgt	r3, #4
 8013598:	9306      	strgt	r3, [sp, #24]
 801359a:	9b06      	ldr	r3, [sp, #24]
 801359c:	f1a3 0302 	sub.w	r3, r3, #2
 80135a0:	bfcc      	ite	gt
 80135a2:	2500      	movgt	r5, #0
 80135a4:	2501      	movle	r5, #1
 80135a6:	2b03      	cmp	r3, #3
 80135a8:	f200 8087 	bhi.w	80136ba <_dtoa_r+0x30a>
 80135ac:	e8df f003 	tbb	[pc, r3]
 80135b0:	59383a2d 	.word	0x59383a2d
 80135b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80135b8:	441d      	add	r5, r3
 80135ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80135be:	2b20      	cmp	r3, #32
 80135c0:	bfc1      	itttt	gt
 80135c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80135c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80135ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80135ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80135d2:	bfda      	itte	le
 80135d4:	f1c3 0320 	rsble	r3, r3, #32
 80135d8:	fa06 f003 	lslle.w	r0, r6, r3
 80135dc:	4318      	orrgt	r0, r3
 80135de:	f7ec ff91 	bl	8000504 <__aeabi_ui2d>
 80135e2:	2301      	movs	r3, #1
 80135e4:	4606      	mov	r6, r0
 80135e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80135ea:	3d01      	subs	r5, #1
 80135ec:	930e      	str	r3, [sp, #56]	; 0x38
 80135ee:	e76a      	b.n	80134c6 <_dtoa_r+0x116>
 80135f0:	2301      	movs	r3, #1
 80135f2:	e7b2      	b.n	801355a <_dtoa_r+0x1aa>
 80135f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80135f6:	e7b1      	b.n	801355c <_dtoa_r+0x1ac>
 80135f8:	9b04      	ldr	r3, [sp, #16]
 80135fa:	9a00      	ldr	r2, [sp, #0]
 80135fc:	1a9b      	subs	r3, r3, r2
 80135fe:	9304      	str	r3, [sp, #16]
 8013600:	4253      	negs	r3, r2
 8013602:	9307      	str	r3, [sp, #28]
 8013604:	2300      	movs	r3, #0
 8013606:	930a      	str	r3, [sp, #40]	; 0x28
 8013608:	e7bf      	b.n	801358a <_dtoa_r+0x1da>
 801360a:	2300      	movs	r3, #0
 801360c:	9308      	str	r3, [sp, #32]
 801360e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013610:	2b00      	cmp	r3, #0
 8013612:	dc55      	bgt.n	80136c0 <_dtoa_r+0x310>
 8013614:	2301      	movs	r3, #1
 8013616:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801361a:	461a      	mov	r2, r3
 801361c:	9209      	str	r2, [sp, #36]	; 0x24
 801361e:	e00c      	b.n	801363a <_dtoa_r+0x28a>
 8013620:	2301      	movs	r3, #1
 8013622:	e7f3      	b.n	801360c <_dtoa_r+0x25c>
 8013624:	2300      	movs	r3, #0
 8013626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013628:	9308      	str	r3, [sp, #32]
 801362a:	9b00      	ldr	r3, [sp, #0]
 801362c:	4413      	add	r3, r2
 801362e:	9302      	str	r3, [sp, #8]
 8013630:	3301      	adds	r3, #1
 8013632:	2b01      	cmp	r3, #1
 8013634:	9303      	str	r3, [sp, #12]
 8013636:	bfb8      	it	lt
 8013638:	2301      	movlt	r3, #1
 801363a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801363c:	2200      	movs	r2, #0
 801363e:	6042      	str	r2, [r0, #4]
 8013640:	2204      	movs	r2, #4
 8013642:	f102 0614 	add.w	r6, r2, #20
 8013646:	429e      	cmp	r6, r3
 8013648:	6841      	ldr	r1, [r0, #4]
 801364a:	d93d      	bls.n	80136c8 <_dtoa_r+0x318>
 801364c:	4620      	mov	r0, r4
 801364e:	f001 f82f 	bl	80146b0 <_Balloc>
 8013652:	9001      	str	r0, [sp, #4]
 8013654:	2800      	cmp	r0, #0
 8013656:	d13b      	bne.n	80136d0 <_dtoa_r+0x320>
 8013658:	4b11      	ldr	r3, [pc, #68]	; (80136a0 <_dtoa_r+0x2f0>)
 801365a:	4602      	mov	r2, r0
 801365c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013660:	e6c0      	b.n	80133e4 <_dtoa_r+0x34>
 8013662:	2301      	movs	r3, #1
 8013664:	e7df      	b.n	8013626 <_dtoa_r+0x276>
 8013666:	bf00      	nop
 8013668:	636f4361 	.word	0x636f4361
 801366c:	3fd287a7 	.word	0x3fd287a7
 8013670:	8b60c8b3 	.word	0x8b60c8b3
 8013674:	3fc68a28 	.word	0x3fc68a28
 8013678:	509f79fb 	.word	0x509f79fb
 801367c:	3fd34413 	.word	0x3fd34413
 8013680:	08017aa5 	.word	0x08017aa5
 8013684:	08017abc 	.word	0x08017abc
 8013688:	7ff00000 	.word	0x7ff00000
 801368c:	08017aa1 	.word	0x08017aa1
 8013690:	08017a98 	.word	0x08017a98
 8013694:	08017a25 	.word	0x08017a25
 8013698:	3ff80000 	.word	0x3ff80000
 801369c:	08017c28 	.word	0x08017c28
 80136a0:	08017b17 	.word	0x08017b17
 80136a4:	2501      	movs	r5, #1
 80136a6:	2300      	movs	r3, #0
 80136a8:	9306      	str	r3, [sp, #24]
 80136aa:	9508      	str	r5, [sp, #32]
 80136ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80136b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80136b4:	2200      	movs	r2, #0
 80136b6:	2312      	movs	r3, #18
 80136b8:	e7b0      	b.n	801361c <_dtoa_r+0x26c>
 80136ba:	2301      	movs	r3, #1
 80136bc:	9308      	str	r3, [sp, #32]
 80136be:	e7f5      	b.n	80136ac <_dtoa_r+0x2fc>
 80136c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80136c6:	e7b8      	b.n	801363a <_dtoa_r+0x28a>
 80136c8:	3101      	adds	r1, #1
 80136ca:	6041      	str	r1, [r0, #4]
 80136cc:	0052      	lsls	r2, r2, #1
 80136ce:	e7b8      	b.n	8013642 <_dtoa_r+0x292>
 80136d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80136d2:	9a01      	ldr	r2, [sp, #4]
 80136d4:	601a      	str	r2, [r3, #0]
 80136d6:	9b03      	ldr	r3, [sp, #12]
 80136d8:	2b0e      	cmp	r3, #14
 80136da:	f200 809d 	bhi.w	8013818 <_dtoa_r+0x468>
 80136de:	2d00      	cmp	r5, #0
 80136e0:	f000 809a 	beq.w	8013818 <_dtoa_r+0x468>
 80136e4:	9b00      	ldr	r3, [sp, #0]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	dd32      	ble.n	8013750 <_dtoa_r+0x3a0>
 80136ea:	4ab7      	ldr	r2, [pc, #732]	; (80139c8 <_dtoa_r+0x618>)
 80136ec:	f003 030f 	and.w	r3, r3, #15
 80136f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80136f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80136f8:	9b00      	ldr	r3, [sp, #0]
 80136fa:	05d8      	lsls	r0, r3, #23
 80136fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8013700:	d516      	bpl.n	8013730 <_dtoa_r+0x380>
 8013702:	4bb2      	ldr	r3, [pc, #712]	; (80139cc <_dtoa_r+0x61c>)
 8013704:	ec51 0b19 	vmov	r0, r1, d9
 8013708:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801370c:	f7ed f89e 	bl	800084c <__aeabi_ddiv>
 8013710:	f007 070f 	and.w	r7, r7, #15
 8013714:	4682      	mov	sl, r0
 8013716:	468b      	mov	fp, r1
 8013718:	2503      	movs	r5, #3
 801371a:	4eac      	ldr	r6, [pc, #688]	; (80139cc <_dtoa_r+0x61c>)
 801371c:	b957      	cbnz	r7, 8013734 <_dtoa_r+0x384>
 801371e:	4642      	mov	r2, r8
 8013720:	464b      	mov	r3, r9
 8013722:	4650      	mov	r0, sl
 8013724:	4659      	mov	r1, fp
 8013726:	f7ed f891 	bl	800084c <__aeabi_ddiv>
 801372a:	4682      	mov	sl, r0
 801372c:	468b      	mov	fp, r1
 801372e:	e028      	b.n	8013782 <_dtoa_r+0x3d2>
 8013730:	2502      	movs	r5, #2
 8013732:	e7f2      	b.n	801371a <_dtoa_r+0x36a>
 8013734:	07f9      	lsls	r1, r7, #31
 8013736:	d508      	bpl.n	801374a <_dtoa_r+0x39a>
 8013738:	4640      	mov	r0, r8
 801373a:	4649      	mov	r1, r9
 801373c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013740:	f7ec ff5a 	bl	80005f8 <__aeabi_dmul>
 8013744:	3501      	adds	r5, #1
 8013746:	4680      	mov	r8, r0
 8013748:	4689      	mov	r9, r1
 801374a:	107f      	asrs	r7, r7, #1
 801374c:	3608      	adds	r6, #8
 801374e:	e7e5      	b.n	801371c <_dtoa_r+0x36c>
 8013750:	f000 809b 	beq.w	801388a <_dtoa_r+0x4da>
 8013754:	9b00      	ldr	r3, [sp, #0]
 8013756:	4f9d      	ldr	r7, [pc, #628]	; (80139cc <_dtoa_r+0x61c>)
 8013758:	425e      	negs	r6, r3
 801375a:	4b9b      	ldr	r3, [pc, #620]	; (80139c8 <_dtoa_r+0x618>)
 801375c:	f006 020f 	and.w	r2, r6, #15
 8013760:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013768:	ec51 0b19 	vmov	r0, r1, d9
 801376c:	f7ec ff44 	bl	80005f8 <__aeabi_dmul>
 8013770:	1136      	asrs	r6, r6, #4
 8013772:	4682      	mov	sl, r0
 8013774:	468b      	mov	fp, r1
 8013776:	2300      	movs	r3, #0
 8013778:	2502      	movs	r5, #2
 801377a:	2e00      	cmp	r6, #0
 801377c:	d17a      	bne.n	8013874 <_dtoa_r+0x4c4>
 801377e:	2b00      	cmp	r3, #0
 8013780:	d1d3      	bne.n	801372a <_dtoa_r+0x37a>
 8013782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013784:	2b00      	cmp	r3, #0
 8013786:	f000 8082 	beq.w	801388e <_dtoa_r+0x4de>
 801378a:	4b91      	ldr	r3, [pc, #580]	; (80139d0 <_dtoa_r+0x620>)
 801378c:	2200      	movs	r2, #0
 801378e:	4650      	mov	r0, sl
 8013790:	4659      	mov	r1, fp
 8013792:	f7ed f9a3 	bl	8000adc <__aeabi_dcmplt>
 8013796:	2800      	cmp	r0, #0
 8013798:	d079      	beq.n	801388e <_dtoa_r+0x4de>
 801379a:	9b03      	ldr	r3, [sp, #12]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d076      	beq.n	801388e <_dtoa_r+0x4de>
 80137a0:	9b02      	ldr	r3, [sp, #8]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	dd36      	ble.n	8013814 <_dtoa_r+0x464>
 80137a6:	9b00      	ldr	r3, [sp, #0]
 80137a8:	4650      	mov	r0, sl
 80137aa:	4659      	mov	r1, fp
 80137ac:	1e5f      	subs	r7, r3, #1
 80137ae:	2200      	movs	r2, #0
 80137b0:	4b88      	ldr	r3, [pc, #544]	; (80139d4 <_dtoa_r+0x624>)
 80137b2:	f7ec ff21 	bl	80005f8 <__aeabi_dmul>
 80137b6:	9e02      	ldr	r6, [sp, #8]
 80137b8:	4682      	mov	sl, r0
 80137ba:	468b      	mov	fp, r1
 80137bc:	3501      	adds	r5, #1
 80137be:	4628      	mov	r0, r5
 80137c0:	f7ec feb0 	bl	8000524 <__aeabi_i2d>
 80137c4:	4652      	mov	r2, sl
 80137c6:	465b      	mov	r3, fp
 80137c8:	f7ec ff16 	bl	80005f8 <__aeabi_dmul>
 80137cc:	4b82      	ldr	r3, [pc, #520]	; (80139d8 <_dtoa_r+0x628>)
 80137ce:	2200      	movs	r2, #0
 80137d0:	f7ec fd5c 	bl	800028c <__adddf3>
 80137d4:	46d0      	mov	r8, sl
 80137d6:	46d9      	mov	r9, fp
 80137d8:	4682      	mov	sl, r0
 80137da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80137de:	2e00      	cmp	r6, #0
 80137e0:	d158      	bne.n	8013894 <_dtoa_r+0x4e4>
 80137e2:	4b7e      	ldr	r3, [pc, #504]	; (80139dc <_dtoa_r+0x62c>)
 80137e4:	2200      	movs	r2, #0
 80137e6:	4640      	mov	r0, r8
 80137e8:	4649      	mov	r1, r9
 80137ea:	f7ec fd4d 	bl	8000288 <__aeabi_dsub>
 80137ee:	4652      	mov	r2, sl
 80137f0:	465b      	mov	r3, fp
 80137f2:	4680      	mov	r8, r0
 80137f4:	4689      	mov	r9, r1
 80137f6:	f7ed f98f 	bl	8000b18 <__aeabi_dcmpgt>
 80137fa:	2800      	cmp	r0, #0
 80137fc:	f040 8295 	bne.w	8013d2a <_dtoa_r+0x97a>
 8013800:	4652      	mov	r2, sl
 8013802:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013806:	4640      	mov	r0, r8
 8013808:	4649      	mov	r1, r9
 801380a:	f7ed f967 	bl	8000adc <__aeabi_dcmplt>
 801380e:	2800      	cmp	r0, #0
 8013810:	f040 8289 	bne.w	8013d26 <_dtoa_r+0x976>
 8013814:	ec5b ab19 	vmov	sl, fp, d9
 8013818:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801381a:	2b00      	cmp	r3, #0
 801381c:	f2c0 8148 	blt.w	8013ab0 <_dtoa_r+0x700>
 8013820:	9a00      	ldr	r2, [sp, #0]
 8013822:	2a0e      	cmp	r2, #14
 8013824:	f300 8144 	bgt.w	8013ab0 <_dtoa_r+0x700>
 8013828:	4b67      	ldr	r3, [pc, #412]	; (80139c8 <_dtoa_r+0x618>)
 801382a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801382e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013834:	2b00      	cmp	r3, #0
 8013836:	f280 80d5 	bge.w	80139e4 <_dtoa_r+0x634>
 801383a:	9b03      	ldr	r3, [sp, #12]
 801383c:	2b00      	cmp	r3, #0
 801383e:	f300 80d1 	bgt.w	80139e4 <_dtoa_r+0x634>
 8013842:	f040 826f 	bne.w	8013d24 <_dtoa_r+0x974>
 8013846:	4b65      	ldr	r3, [pc, #404]	; (80139dc <_dtoa_r+0x62c>)
 8013848:	2200      	movs	r2, #0
 801384a:	4640      	mov	r0, r8
 801384c:	4649      	mov	r1, r9
 801384e:	f7ec fed3 	bl	80005f8 <__aeabi_dmul>
 8013852:	4652      	mov	r2, sl
 8013854:	465b      	mov	r3, fp
 8013856:	f7ed f955 	bl	8000b04 <__aeabi_dcmpge>
 801385a:	9e03      	ldr	r6, [sp, #12]
 801385c:	4637      	mov	r7, r6
 801385e:	2800      	cmp	r0, #0
 8013860:	f040 8245 	bne.w	8013cee <_dtoa_r+0x93e>
 8013864:	9d01      	ldr	r5, [sp, #4]
 8013866:	2331      	movs	r3, #49	; 0x31
 8013868:	f805 3b01 	strb.w	r3, [r5], #1
 801386c:	9b00      	ldr	r3, [sp, #0]
 801386e:	3301      	adds	r3, #1
 8013870:	9300      	str	r3, [sp, #0]
 8013872:	e240      	b.n	8013cf6 <_dtoa_r+0x946>
 8013874:	07f2      	lsls	r2, r6, #31
 8013876:	d505      	bpl.n	8013884 <_dtoa_r+0x4d4>
 8013878:	e9d7 2300 	ldrd	r2, r3, [r7]
 801387c:	f7ec febc 	bl	80005f8 <__aeabi_dmul>
 8013880:	3501      	adds	r5, #1
 8013882:	2301      	movs	r3, #1
 8013884:	1076      	asrs	r6, r6, #1
 8013886:	3708      	adds	r7, #8
 8013888:	e777      	b.n	801377a <_dtoa_r+0x3ca>
 801388a:	2502      	movs	r5, #2
 801388c:	e779      	b.n	8013782 <_dtoa_r+0x3d2>
 801388e:	9f00      	ldr	r7, [sp, #0]
 8013890:	9e03      	ldr	r6, [sp, #12]
 8013892:	e794      	b.n	80137be <_dtoa_r+0x40e>
 8013894:	9901      	ldr	r1, [sp, #4]
 8013896:	4b4c      	ldr	r3, [pc, #304]	; (80139c8 <_dtoa_r+0x618>)
 8013898:	4431      	add	r1, r6
 801389a:	910d      	str	r1, [sp, #52]	; 0x34
 801389c:	9908      	ldr	r1, [sp, #32]
 801389e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80138a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80138a6:	2900      	cmp	r1, #0
 80138a8:	d043      	beq.n	8013932 <_dtoa_r+0x582>
 80138aa:	494d      	ldr	r1, [pc, #308]	; (80139e0 <_dtoa_r+0x630>)
 80138ac:	2000      	movs	r0, #0
 80138ae:	f7ec ffcd 	bl	800084c <__aeabi_ddiv>
 80138b2:	4652      	mov	r2, sl
 80138b4:	465b      	mov	r3, fp
 80138b6:	f7ec fce7 	bl	8000288 <__aeabi_dsub>
 80138ba:	9d01      	ldr	r5, [sp, #4]
 80138bc:	4682      	mov	sl, r0
 80138be:	468b      	mov	fp, r1
 80138c0:	4649      	mov	r1, r9
 80138c2:	4640      	mov	r0, r8
 80138c4:	f7ed f948 	bl	8000b58 <__aeabi_d2iz>
 80138c8:	4606      	mov	r6, r0
 80138ca:	f7ec fe2b 	bl	8000524 <__aeabi_i2d>
 80138ce:	4602      	mov	r2, r0
 80138d0:	460b      	mov	r3, r1
 80138d2:	4640      	mov	r0, r8
 80138d4:	4649      	mov	r1, r9
 80138d6:	f7ec fcd7 	bl	8000288 <__aeabi_dsub>
 80138da:	3630      	adds	r6, #48	; 0x30
 80138dc:	f805 6b01 	strb.w	r6, [r5], #1
 80138e0:	4652      	mov	r2, sl
 80138e2:	465b      	mov	r3, fp
 80138e4:	4680      	mov	r8, r0
 80138e6:	4689      	mov	r9, r1
 80138e8:	f7ed f8f8 	bl	8000adc <__aeabi_dcmplt>
 80138ec:	2800      	cmp	r0, #0
 80138ee:	d163      	bne.n	80139b8 <_dtoa_r+0x608>
 80138f0:	4642      	mov	r2, r8
 80138f2:	464b      	mov	r3, r9
 80138f4:	4936      	ldr	r1, [pc, #216]	; (80139d0 <_dtoa_r+0x620>)
 80138f6:	2000      	movs	r0, #0
 80138f8:	f7ec fcc6 	bl	8000288 <__aeabi_dsub>
 80138fc:	4652      	mov	r2, sl
 80138fe:	465b      	mov	r3, fp
 8013900:	f7ed f8ec 	bl	8000adc <__aeabi_dcmplt>
 8013904:	2800      	cmp	r0, #0
 8013906:	f040 80b5 	bne.w	8013a74 <_dtoa_r+0x6c4>
 801390a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801390c:	429d      	cmp	r5, r3
 801390e:	d081      	beq.n	8013814 <_dtoa_r+0x464>
 8013910:	4b30      	ldr	r3, [pc, #192]	; (80139d4 <_dtoa_r+0x624>)
 8013912:	2200      	movs	r2, #0
 8013914:	4650      	mov	r0, sl
 8013916:	4659      	mov	r1, fp
 8013918:	f7ec fe6e 	bl	80005f8 <__aeabi_dmul>
 801391c:	4b2d      	ldr	r3, [pc, #180]	; (80139d4 <_dtoa_r+0x624>)
 801391e:	4682      	mov	sl, r0
 8013920:	468b      	mov	fp, r1
 8013922:	4640      	mov	r0, r8
 8013924:	4649      	mov	r1, r9
 8013926:	2200      	movs	r2, #0
 8013928:	f7ec fe66 	bl	80005f8 <__aeabi_dmul>
 801392c:	4680      	mov	r8, r0
 801392e:	4689      	mov	r9, r1
 8013930:	e7c6      	b.n	80138c0 <_dtoa_r+0x510>
 8013932:	4650      	mov	r0, sl
 8013934:	4659      	mov	r1, fp
 8013936:	f7ec fe5f 	bl	80005f8 <__aeabi_dmul>
 801393a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801393c:	9d01      	ldr	r5, [sp, #4]
 801393e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013940:	4682      	mov	sl, r0
 8013942:	468b      	mov	fp, r1
 8013944:	4649      	mov	r1, r9
 8013946:	4640      	mov	r0, r8
 8013948:	f7ed f906 	bl	8000b58 <__aeabi_d2iz>
 801394c:	4606      	mov	r6, r0
 801394e:	f7ec fde9 	bl	8000524 <__aeabi_i2d>
 8013952:	3630      	adds	r6, #48	; 0x30
 8013954:	4602      	mov	r2, r0
 8013956:	460b      	mov	r3, r1
 8013958:	4640      	mov	r0, r8
 801395a:	4649      	mov	r1, r9
 801395c:	f7ec fc94 	bl	8000288 <__aeabi_dsub>
 8013960:	f805 6b01 	strb.w	r6, [r5], #1
 8013964:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013966:	429d      	cmp	r5, r3
 8013968:	4680      	mov	r8, r0
 801396a:	4689      	mov	r9, r1
 801396c:	f04f 0200 	mov.w	r2, #0
 8013970:	d124      	bne.n	80139bc <_dtoa_r+0x60c>
 8013972:	4b1b      	ldr	r3, [pc, #108]	; (80139e0 <_dtoa_r+0x630>)
 8013974:	4650      	mov	r0, sl
 8013976:	4659      	mov	r1, fp
 8013978:	f7ec fc88 	bl	800028c <__adddf3>
 801397c:	4602      	mov	r2, r0
 801397e:	460b      	mov	r3, r1
 8013980:	4640      	mov	r0, r8
 8013982:	4649      	mov	r1, r9
 8013984:	f7ed f8c8 	bl	8000b18 <__aeabi_dcmpgt>
 8013988:	2800      	cmp	r0, #0
 801398a:	d173      	bne.n	8013a74 <_dtoa_r+0x6c4>
 801398c:	4652      	mov	r2, sl
 801398e:	465b      	mov	r3, fp
 8013990:	4913      	ldr	r1, [pc, #76]	; (80139e0 <_dtoa_r+0x630>)
 8013992:	2000      	movs	r0, #0
 8013994:	f7ec fc78 	bl	8000288 <__aeabi_dsub>
 8013998:	4602      	mov	r2, r0
 801399a:	460b      	mov	r3, r1
 801399c:	4640      	mov	r0, r8
 801399e:	4649      	mov	r1, r9
 80139a0:	f7ed f89c 	bl	8000adc <__aeabi_dcmplt>
 80139a4:	2800      	cmp	r0, #0
 80139a6:	f43f af35 	beq.w	8013814 <_dtoa_r+0x464>
 80139aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80139ac:	1e6b      	subs	r3, r5, #1
 80139ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80139b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80139b4:	2b30      	cmp	r3, #48	; 0x30
 80139b6:	d0f8      	beq.n	80139aa <_dtoa_r+0x5fa>
 80139b8:	9700      	str	r7, [sp, #0]
 80139ba:	e049      	b.n	8013a50 <_dtoa_r+0x6a0>
 80139bc:	4b05      	ldr	r3, [pc, #20]	; (80139d4 <_dtoa_r+0x624>)
 80139be:	f7ec fe1b 	bl	80005f8 <__aeabi_dmul>
 80139c2:	4680      	mov	r8, r0
 80139c4:	4689      	mov	r9, r1
 80139c6:	e7bd      	b.n	8013944 <_dtoa_r+0x594>
 80139c8:	08017c28 	.word	0x08017c28
 80139cc:	08017c00 	.word	0x08017c00
 80139d0:	3ff00000 	.word	0x3ff00000
 80139d4:	40240000 	.word	0x40240000
 80139d8:	401c0000 	.word	0x401c0000
 80139dc:	40140000 	.word	0x40140000
 80139e0:	3fe00000 	.word	0x3fe00000
 80139e4:	9d01      	ldr	r5, [sp, #4]
 80139e6:	4656      	mov	r6, sl
 80139e8:	465f      	mov	r7, fp
 80139ea:	4642      	mov	r2, r8
 80139ec:	464b      	mov	r3, r9
 80139ee:	4630      	mov	r0, r6
 80139f0:	4639      	mov	r1, r7
 80139f2:	f7ec ff2b 	bl	800084c <__aeabi_ddiv>
 80139f6:	f7ed f8af 	bl	8000b58 <__aeabi_d2iz>
 80139fa:	4682      	mov	sl, r0
 80139fc:	f7ec fd92 	bl	8000524 <__aeabi_i2d>
 8013a00:	4642      	mov	r2, r8
 8013a02:	464b      	mov	r3, r9
 8013a04:	f7ec fdf8 	bl	80005f8 <__aeabi_dmul>
 8013a08:	4602      	mov	r2, r0
 8013a0a:	460b      	mov	r3, r1
 8013a0c:	4630      	mov	r0, r6
 8013a0e:	4639      	mov	r1, r7
 8013a10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8013a14:	f7ec fc38 	bl	8000288 <__aeabi_dsub>
 8013a18:	f805 6b01 	strb.w	r6, [r5], #1
 8013a1c:	9e01      	ldr	r6, [sp, #4]
 8013a1e:	9f03      	ldr	r7, [sp, #12]
 8013a20:	1bae      	subs	r6, r5, r6
 8013a22:	42b7      	cmp	r7, r6
 8013a24:	4602      	mov	r2, r0
 8013a26:	460b      	mov	r3, r1
 8013a28:	d135      	bne.n	8013a96 <_dtoa_r+0x6e6>
 8013a2a:	f7ec fc2f 	bl	800028c <__adddf3>
 8013a2e:	4642      	mov	r2, r8
 8013a30:	464b      	mov	r3, r9
 8013a32:	4606      	mov	r6, r0
 8013a34:	460f      	mov	r7, r1
 8013a36:	f7ed f86f 	bl	8000b18 <__aeabi_dcmpgt>
 8013a3a:	b9d0      	cbnz	r0, 8013a72 <_dtoa_r+0x6c2>
 8013a3c:	4642      	mov	r2, r8
 8013a3e:	464b      	mov	r3, r9
 8013a40:	4630      	mov	r0, r6
 8013a42:	4639      	mov	r1, r7
 8013a44:	f7ed f840 	bl	8000ac8 <__aeabi_dcmpeq>
 8013a48:	b110      	cbz	r0, 8013a50 <_dtoa_r+0x6a0>
 8013a4a:	f01a 0f01 	tst.w	sl, #1
 8013a4e:	d110      	bne.n	8013a72 <_dtoa_r+0x6c2>
 8013a50:	4620      	mov	r0, r4
 8013a52:	ee18 1a10 	vmov	r1, s16
 8013a56:	f000 fe6b 	bl	8014730 <_Bfree>
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	9800      	ldr	r0, [sp, #0]
 8013a5e:	702b      	strb	r3, [r5, #0]
 8013a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a62:	3001      	adds	r0, #1
 8013a64:	6018      	str	r0, [r3, #0]
 8013a66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	f43f acf1 	beq.w	8013450 <_dtoa_r+0xa0>
 8013a6e:	601d      	str	r5, [r3, #0]
 8013a70:	e4ee      	b.n	8013450 <_dtoa_r+0xa0>
 8013a72:	9f00      	ldr	r7, [sp, #0]
 8013a74:	462b      	mov	r3, r5
 8013a76:	461d      	mov	r5, r3
 8013a78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013a7c:	2a39      	cmp	r2, #57	; 0x39
 8013a7e:	d106      	bne.n	8013a8e <_dtoa_r+0x6de>
 8013a80:	9a01      	ldr	r2, [sp, #4]
 8013a82:	429a      	cmp	r2, r3
 8013a84:	d1f7      	bne.n	8013a76 <_dtoa_r+0x6c6>
 8013a86:	9901      	ldr	r1, [sp, #4]
 8013a88:	2230      	movs	r2, #48	; 0x30
 8013a8a:	3701      	adds	r7, #1
 8013a8c:	700a      	strb	r2, [r1, #0]
 8013a8e:	781a      	ldrb	r2, [r3, #0]
 8013a90:	3201      	adds	r2, #1
 8013a92:	701a      	strb	r2, [r3, #0]
 8013a94:	e790      	b.n	80139b8 <_dtoa_r+0x608>
 8013a96:	4ba6      	ldr	r3, [pc, #664]	; (8013d30 <_dtoa_r+0x980>)
 8013a98:	2200      	movs	r2, #0
 8013a9a:	f7ec fdad 	bl	80005f8 <__aeabi_dmul>
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	4606      	mov	r6, r0
 8013aa4:	460f      	mov	r7, r1
 8013aa6:	f7ed f80f 	bl	8000ac8 <__aeabi_dcmpeq>
 8013aaa:	2800      	cmp	r0, #0
 8013aac:	d09d      	beq.n	80139ea <_dtoa_r+0x63a>
 8013aae:	e7cf      	b.n	8013a50 <_dtoa_r+0x6a0>
 8013ab0:	9a08      	ldr	r2, [sp, #32]
 8013ab2:	2a00      	cmp	r2, #0
 8013ab4:	f000 80d7 	beq.w	8013c66 <_dtoa_r+0x8b6>
 8013ab8:	9a06      	ldr	r2, [sp, #24]
 8013aba:	2a01      	cmp	r2, #1
 8013abc:	f300 80ba 	bgt.w	8013c34 <_dtoa_r+0x884>
 8013ac0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013ac2:	2a00      	cmp	r2, #0
 8013ac4:	f000 80b2 	beq.w	8013c2c <_dtoa_r+0x87c>
 8013ac8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013acc:	9e07      	ldr	r6, [sp, #28]
 8013ace:	9d04      	ldr	r5, [sp, #16]
 8013ad0:	9a04      	ldr	r2, [sp, #16]
 8013ad2:	441a      	add	r2, r3
 8013ad4:	9204      	str	r2, [sp, #16]
 8013ad6:	9a05      	ldr	r2, [sp, #20]
 8013ad8:	2101      	movs	r1, #1
 8013ada:	441a      	add	r2, r3
 8013adc:	4620      	mov	r0, r4
 8013ade:	9205      	str	r2, [sp, #20]
 8013ae0:	f000 ff28 	bl	8014934 <__i2b>
 8013ae4:	4607      	mov	r7, r0
 8013ae6:	2d00      	cmp	r5, #0
 8013ae8:	dd0c      	ble.n	8013b04 <_dtoa_r+0x754>
 8013aea:	9b05      	ldr	r3, [sp, #20]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	dd09      	ble.n	8013b04 <_dtoa_r+0x754>
 8013af0:	42ab      	cmp	r3, r5
 8013af2:	9a04      	ldr	r2, [sp, #16]
 8013af4:	bfa8      	it	ge
 8013af6:	462b      	movge	r3, r5
 8013af8:	1ad2      	subs	r2, r2, r3
 8013afa:	9204      	str	r2, [sp, #16]
 8013afc:	9a05      	ldr	r2, [sp, #20]
 8013afe:	1aed      	subs	r5, r5, r3
 8013b00:	1ad3      	subs	r3, r2, r3
 8013b02:	9305      	str	r3, [sp, #20]
 8013b04:	9b07      	ldr	r3, [sp, #28]
 8013b06:	b31b      	cbz	r3, 8013b50 <_dtoa_r+0x7a0>
 8013b08:	9b08      	ldr	r3, [sp, #32]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	f000 80af 	beq.w	8013c6e <_dtoa_r+0x8be>
 8013b10:	2e00      	cmp	r6, #0
 8013b12:	dd13      	ble.n	8013b3c <_dtoa_r+0x78c>
 8013b14:	4639      	mov	r1, r7
 8013b16:	4632      	mov	r2, r6
 8013b18:	4620      	mov	r0, r4
 8013b1a:	f000 ffcb 	bl	8014ab4 <__pow5mult>
 8013b1e:	ee18 2a10 	vmov	r2, s16
 8013b22:	4601      	mov	r1, r0
 8013b24:	4607      	mov	r7, r0
 8013b26:	4620      	mov	r0, r4
 8013b28:	f000 ff1a 	bl	8014960 <__multiply>
 8013b2c:	ee18 1a10 	vmov	r1, s16
 8013b30:	4680      	mov	r8, r0
 8013b32:	4620      	mov	r0, r4
 8013b34:	f000 fdfc 	bl	8014730 <_Bfree>
 8013b38:	ee08 8a10 	vmov	s16, r8
 8013b3c:	9b07      	ldr	r3, [sp, #28]
 8013b3e:	1b9a      	subs	r2, r3, r6
 8013b40:	d006      	beq.n	8013b50 <_dtoa_r+0x7a0>
 8013b42:	ee18 1a10 	vmov	r1, s16
 8013b46:	4620      	mov	r0, r4
 8013b48:	f000 ffb4 	bl	8014ab4 <__pow5mult>
 8013b4c:	ee08 0a10 	vmov	s16, r0
 8013b50:	2101      	movs	r1, #1
 8013b52:	4620      	mov	r0, r4
 8013b54:	f000 feee 	bl	8014934 <__i2b>
 8013b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	4606      	mov	r6, r0
 8013b5e:	f340 8088 	ble.w	8013c72 <_dtoa_r+0x8c2>
 8013b62:	461a      	mov	r2, r3
 8013b64:	4601      	mov	r1, r0
 8013b66:	4620      	mov	r0, r4
 8013b68:	f000 ffa4 	bl	8014ab4 <__pow5mult>
 8013b6c:	9b06      	ldr	r3, [sp, #24]
 8013b6e:	2b01      	cmp	r3, #1
 8013b70:	4606      	mov	r6, r0
 8013b72:	f340 8081 	ble.w	8013c78 <_dtoa_r+0x8c8>
 8013b76:	f04f 0800 	mov.w	r8, #0
 8013b7a:	6933      	ldr	r3, [r6, #16]
 8013b7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013b80:	6918      	ldr	r0, [r3, #16]
 8013b82:	f000 fe87 	bl	8014894 <__hi0bits>
 8013b86:	f1c0 0020 	rsb	r0, r0, #32
 8013b8a:	9b05      	ldr	r3, [sp, #20]
 8013b8c:	4418      	add	r0, r3
 8013b8e:	f010 001f 	ands.w	r0, r0, #31
 8013b92:	f000 8092 	beq.w	8013cba <_dtoa_r+0x90a>
 8013b96:	f1c0 0320 	rsb	r3, r0, #32
 8013b9a:	2b04      	cmp	r3, #4
 8013b9c:	f340 808a 	ble.w	8013cb4 <_dtoa_r+0x904>
 8013ba0:	f1c0 001c 	rsb	r0, r0, #28
 8013ba4:	9b04      	ldr	r3, [sp, #16]
 8013ba6:	4403      	add	r3, r0
 8013ba8:	9304      	str	r3, [sp, #16]
 8013baa:	9b05      	ldr	r3, [sp, #20]
 8013bac:	4403      	add	r3, r0
 8013bae:	4405      	add	r5, r0
 8013bb0:	9305      	str	r3, [sp, #20]
 8013bb2:	9b04      	ldr	r3, [sp, #16]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	dd07      	ble.n	8013bc8 <_dtoa_r+0x818>
 8013bb8:	ee18 1a10 	vmov	r1, s16
 8013bbc:	461a      	mov	r2, r3
 8013bbe:	4620      	mov	r0, r4
 8013bc0:	f000 ffd2 	bl	8014b68 <__lshift>
 8013bc4:	ee08 0a10 	vmov	s16, r0
 8013bc8:	9b05      	ldr	r3, [sp, #20]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	dd05      	ble.n	8013bda <_dtoa_r+0x82a>
 8013bce:	4631      	mov	r1, r6
 8013bd0:	461a      	mov	r2, r3
 8013bd2:	4620      	mov	r0, r4
 8013bd4:	f000 ffc8 	bl	8014b68 <__lshift>
 8013bd8:	4606      	mov	r6, r0
 8013bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d06e      	beq.n	8013cbe <_dtoa_r+0x90e>
 8013be0:	ee18 0a10 	vmov	r0, s16
 8013be4:	4631      	mov	r1, r6
 8013be6:	f001 f82f 	bl	8014c48 <__mcmp>
 8013bea:	2800      	cmp	r0, #0
 8013bec:	da67      	bge.n	8013cbe <_dtoa_r+0x90e>
 8013bee:	9b00      	ldr	r3, [sp, #0]
 8013bf0:	3b01      	subs	r3, #1
 8013bf2:	ee18 1a10 	vmov	r1, s16
 8013bf6:	9300      	str	r3, [sp, #0]
 8013bf8:	220a      	movs	r2, #10
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	4620      	mov	r0, r4
 8013bfe:	f000 fdb9 	bl	8014774 <__multadd>
 8013c02:	9b08      	ldr	r3, [sp, #32]
 8013c04:	ee08 0a10 	vmov	s16, r0
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	f000 81b1 	beq.w	8013f70 <_dtoa_r+0xbc0>
 8013c0e:	2300      	movs	r3, #0
 8013c10:	4639      	mov	r1, r7
 8013c12:	220a      	movs	r2, #10
 8013c14:	4620      	mov	r0, r4
 8013c16:	f000 fdad 	bl	8014774 <__multadd>
 8013c1a:	9b02      	ldr	r3, [sp, #8]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	4607      	mov	r7, r0
 8013c20:	f300 808e 	bgt.w	8013d40 <_dtoa_r+0x990>
 8013c24:	9b06      	ldr	r3, [sp, #24]
 8013c26:	2b02      	cmp	r3, #2
 8013c28:	dc51      	bgt.n	8013cce <_dtoa_r+0x91e>
 8013c2a:	e089      	b.n	8013d40 <_dtoa_r+0x990>
 8013c2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013c2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013c32:	e74b      	b.n	8013acc <_dtoa_r+0x71c>
 8013c34:	9b03      	ldr	r3, [sp, #12]
 8013c36:	1e5e      	subs	r6, r3, #1
 8013c38:	9b07      	ldr	r3, [sp, #28]
 8013c3a:	42b3      	cmp	r3, r6
 8013c3c:	bfbf      	itttt	lt
 8013c3e:	9b07      	ldrlt	r3, [sp, #28]
 8013c40:	9607      	strlt	r6, [sp, #28]
 8013c42:	1af2      	sublt	r2, r6, r3
 8013c44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8013c46:	bfb6      	itet	lt
 8013c48:	189b      	addlt	r3, r3, r2
 8013c4a:	1b9e      	subge	r6, r3, r6
 8013c4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8013c4e:	9b03      	ldr	r3, [sp, #12]
 8013c50:	bfb8      	it	lt
 8013c52:	2600      	movlt	r6, #0
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	bfb7      	itett	lt
 8013c58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8013c5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8013c60:	1a9d      	sublt	r5, r3, r2
 8013c62:	2300      	movlt	r3, #0
 8013c64:	e734      	b.n	8013ad0 <_dtoa_r+0x720>
 8013c66:	9e07      	ldr	r6, [sp, #28]
 8013c68:	9d04      	ldr	r5, [sp, #16]
 8013c6a:	9f08      	ldr	r7, [sp, #32]
 8013c6c:	e73b      	b.n	8013ae6 <_dtoa_r+0x736>
 8013c6e:	9a07      	ldr	r2, [sp, #28]
 8013c70:	e767      	b.n	8013b42 <_dtoa_r+0x792>
 8013c72:	9b06      	ldr	r3, [sp, #24]
 8013c74:	2b01      	cmp	r3, #1
 8013c76:	dc18      	bgt.n	8013caa <_dtoa_r+0x8fa>
 8013c78:	f1ba 0f00 	cmp.w	sl, #0
 8013c7c:	d115      	bne.n	8013caa <_dtoa_r+0x8fa>
 8013c7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013c82:	b993      	cbnz	r3, 8013caa <_dtoa_r+0x8fa>
 8013c84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013c88:	0d1b      	lsrs	r3, r3, #20
 8013c8a:	051b      	lsls	r3, r3, #20
 8013c8c:	b183      	cbz	r3, 8013cb0 <_dtoa_r+0x900>
 8013c8e:	9b04      	ldr	r3, [sp, #16]
 8013c90:	3301      	adds	r3, #1
 8013c92:	9304      	str	r3, [sp, #16]
 8013c94:	9b05      	ldr	r3, [sp, #20]
 8013c96:	3301      	adds	r3, #1
 8013c98:	9305      	str	r3, [sp, #20]
 8013c9a:	f04f 0801 	mov.w	r8, #1
 8013c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	f47f af6a 	bne.w	8013b7a <_dtoa_r+0x7ca>
 8013ca6:	2001      	movs	r0, #1
 8013ca8:	e76f      	b.n	8013b8a <_dtoa_r+0x7da>
 8013caa:	f04f 0800 	mov.w	r8, #0
 8013cae:	e7f6      	b.n	8013c9e <_dtoa_r+0x8ee>
 8013cb0:	4698      	mov	r8, r3
 8013cb2:	e7f4      	b.n	8013c9e <_dtoa_r+0x8ee>
 8013cb4:	f43f af7d 	beq.w	8013bb2 <_dtoa_r+0x802>
 8013cb8:	4618      	mov	r0, r3
 8013cba:	301c      	adds	r0, #28
 8013cbc:	e772      	b.n	8013ba4 <_dtoa_r+0x7f4>
 8013cbe:	9b03      	ldr	r3, [sp, #12]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	dc37      	bgt.n	8013d34 <_dtoa_r+0x984>
 8013cc4:	9b06      	ldr	r3, [sp, #24]
 8013cc6:	2b02      	cmp	r3, #2
 8013cc8:	dd34      	ble.n	8013d34 <_dtoa_r+0x984>
 8013cca:	9b03      	ldr	r3, [sp, #12]
 8013ccc:	9302      	str	r3, [sp, #8]
 8013cce:	9b02      	ldr	r3, [sp, #8]
 8013cd0:	b96b      	cbnz	r3, 8013cee <_dtoa_r+0x93e>
 8013cd2:	4631      	mov	r1, r6
 8013cd4:	2205      	movs	r2, #5
 8013cd6:	4620      	mov	r0, r4
 8013cd8:	f000 fd4c 	bl	8014774 <__multadd>
 8013cdc:	4601      	mov	r1, r0
 8013cde:	4606      	mov	r6, r0
 8013ce0:	ee18 0a10 	vmov	r0, s16
 8013ce4:	f000 ffb0 	bl	8014c48 <__mcmp>
 8013ce8:	2800      	cmp	r0, #0
 8013cea:	f73f adbb 	bgt.w	8013864 <_dtoa_r+0x4b4>
 8013cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cf0:	9d01      	ldr	r5, [sp, #4]
 8013cf2:	43db      	mvns	r3, r3
 8013cf4:	9300      	str	r3, [sp, #0]
 8013cf6:	f04f 0800 	mov.w	r8, #0
 8013cfa:	4631      	mov	r1, r6
 8013cfc:	4620      	mov	r0, r4
 8013cfe:	f000 fd17 	bl	8014730 <_Bfree>
 8013d02:	2f00      	cmp	r7, #0
 8013d04:	f43f aea4 	beq.w	8013a50 <_dtoa_r+0x6a0>
 8013d08:	f1b8 0f00 	cmp.w	r8, #0
 8013d0c:	d005      	beq.n	8013d1a <_dtoa_r+0x96a>
 8013d0e:	45b8      	cmp	r8, r7
 8013d10:	d003      	beq.n	8013d1a <_dtoa_r+0x96a>
 8013d12:	4641      	mov	r1, r8
 8013d14:	4620      	mov	r0, r4
 8013d16:	f000 fd0b 	bl	8014730 <_Bfree>
 8013d1a:	4639      	mov	r1, r7
 8013d1c:	4620      	mov	r0, r4
 8013d1e:	f000 fd07 	bl	8014730 <_Bfree>
 8013d22:	e695      	b.n	8013a50 <_dtoa_r+0x6a0>
 8013d24:	2600      	movs	r6, #0
 8013d26:	4637      	mov	r7, r6
 8013d28:	e7e1      	b.n	8013cee <_dtoa_r+0x93e>
 8013d2a:	9700      	str	r7, [sp, #0]
 8013d2c:	4637      	mov	r7, r6
 8013d2e:	e599      	b.n	8013864 <_dtoa_r+0x4b4>
 8013d30:	40240000 	.word	0x40240000
 8013d34:	9b08      	ldr	r3, [sp, #32]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	f000 80ca 	beq.w	8013ed0 <_dtoa_r+0xb20>
 8013d3c:	9b03      	ldr	r3, [sp, #12]
 8013d3e:	9302      	str	r3, [sp, #8]
 8013d40:	2d00      	cmp	r5, #0
 8013d42:	dd05      	ble.n	8013d50 <_dtoa_r+0x9a0>
 8013d44:	4639      	mov	r1, r7
 8013d46:	462a      	mov	r2, r5
 8013d48:	4620      	mov	r0, r4
 8013d4a:	f000 ff0d 	bl	8014b68 <__lshift>
 8013d4e:	4607      	mov	r7, r0
 8013d50:	f1b8 0f00 	cmp.w	r8, #0
 8013d54:	d05b      	beq.n	8013e0e <_dtoa_r+0xa5e>
 8013d56:	6879      	ldr	r1, [r7, #4]
 8013d58:	4620      	mov	r0, r4
 8013d5a:	f000 fca9 	bl	80146b0 <_Balloc>
 8013d5e:	4605      	mov	r5, r0
 8013d60:	b928      	cbnz	r0, 8013d6e <_dtoa_r+0x9be>
 8013d62:	4b87      	ldr	r3, [pc, #540]	; (8013f80 <_dtoa_r+0xbd0>)
 8013d64:	4602      	mov	r2, r0
 8013d66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013d6a:	f7ff bb3b 	b.w	80133e4 <_dtoa_r+0x34>
 8013d6e:	693a      	ldr	r2, [r7, #16]
 8013d70:	3202      	adds	r2, #2
 8013d72:	0092      	lsls	r2, r2, #2
 8013d74:	f107 010c 	add.w	r1, r7, #12
 8013d78:	300c      	adds	r0, #12
 8013d7a:	f7fd fe9d 	bl	8011ab8 <memcpy>
 8013d7e:	2201      	movs	r2, #1
 8013d80:	4629      	mov	r1, r5
 8013d82:	4620      	mov	r0, r4
 8013d84:	f000 fef0 	bl	8014b68 <__lshift>
 8013d88:	9b01      	ldr	r3, [sp, #4]
 8013d8a:	f103 0901 	add.w	r9, r3, #1
 8013d8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8013d92:	4413      	add	r3, r2
 8013d94:	9305      	str	r3, [sp, #20]
 8013d96:	f00a 0301 	and.w	r3, sl, #1
 8013d9a:	46b8      	mov	r8, r7
 8013d9c:	9304      	str	r3, [sp, #16]
 8013d9e:	4607      	mov	r7, r0
 8013da0:	4631      	mov	r1, r6
 8013da2:	ee18 0a10 	vmov	r0, s16
 8013da6:	f7ff fa77 	bl	8013298 <quorem>
 8013daa:	4641      	mov	r1, r8
 8013dac:	9002      	str	r0, [sp, #8]
 8013dae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8013db2:	ee18 0a10 	vmov	r0, s16
 8013db6:	f000 ff47 	bl	8014c48 <__mcmp>
 8013dba:	463a      	mov	r2, r7
 8013dbc:	9003      	str	r0, [sp, #12]
 8013dbe:	4631      	mov	r1, r6
 8013dc0:	4620      	mov	r0, r4
 8013dc2:	f000 ff5d 	bl	8014c80 <__mdiff>
 8013dc6:	68c2      	ldr	r2, [r0, #12]
 8013dc8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8013dcc:	4605      	mov	r5, r0
 8013dce:	bb02      	cbnz	r2, 8013e12 <_dtoa_r+0xa62>
 8013dd0:	4601      	mov	r1, r0
 8013dd2:	ee18 0a10 	vmov	r0, s16
 8013dd6:	f000 ff37 	bl	8014c48 <__mcmp>
 8013dda:	4602      	mov	r2, r0
 8013ddc:	4629      	mov	r1, r5
 8013dde:	4620      	mov	r0, r4
 8013de0:	9207      	str	r2, [sp, #28]
 8013de2:	f000 fca5 	bl	8014730 <_Bfree>
 8013de6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8013dea:	ea43 0102 	orr.w	r1, r3, r2
 8013dee:	9b04      	ldr	r3, [sp, #16]
 8013df0:	430b      	orrs	r3, r1
 8013df2:	464d      	mov	r5, r9
 8013df4:	d10f      	bne.n	8013e16 <_dtoa_r+0xa66>
 8013df6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013dfa:	d02a      	beq.n	8013e52 <_dtoa_r+0xaa2>
 8013dfc:	9b03      	ldr	r3, [sp, #12]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	dd02      	ble.n	8013e08 <_dtoa_r+0xa58>
 8013e02:	9b02      	ldr	r3, [sp, #8]
 8013e04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8013e08:	f88b a000 	strb.w	sl, [fp]
 8013e0c:	e775      	b.n	8013cfa <_dtoa_r+0x94a>
 8013e0e:	4638      	mov	r0, r7
 8013e10:	e7ba      	b.n	8013d88 <_dtoa_r+0x9d8>
 8013e12:	2201      	movs	r2, #1
 8013e14:	e7e2      	b.n	8013ddc <_dtoa_r+0xa2c>
 8013e16:	9b03      	ldr	r3, [sp, #12]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	db04      	blt.n	8013e26 <_dtoa_r+0xa76>
 8013e1c:	9906      	ldr	r1, [sp, #24]
 8013e1e:	430b      	orrs	r3, r1
 8013e20:	9904      	ldr	r1, [sp, #16]
 8013e22:	430b      	orrs	r3, r1
 8013e24:	d122      	bne.n	8013e6c <_dtoa_r+0xabc>
 8013e26:	2a00      	cmp	r2, #0
 8013e28:	ddee      	ble.n	8013e08 <_dtoa_r+0xa58>
 8013e2a:	ee18 1a10 	vmov	r1, s16
 8013e2e:	2201      	movs	r2, #1
 8013e30:	4620      	mov	r0, r4
 8013e32:	f000 fe99 	bl	8014b68 <__lshift>
 8013e36:	4631      	mov	r1, r6
 8013e38:	ee08 0a10 	vmov	s16, r0
 8013e3c:	f000 ff04 	bl	8014c48 <__mcmp>
 8013e40:	2800      	cmp	r0, #0
 8013e42:	dc03      	bgt.n	8013e4c <_dtoa_r+0xa9c>
 8013e44:	d1e0      	bne.n	8013e08 <_dtoa_r+0xa58>
 8013e46:	f01a 0f01 	tst.w	sl, #1
 8013e4a:	d0dd      	beq.n	8013e08 <_dtoa_r+0xa58>
 8013e4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013e50:	d1d7      	bne.n	8013e02 <_dtoa_r+0xa52>
 8013e52:	2339      	movs	r3, #57	; 0x39
 8013e54:	f88b 3000 	strb.w	r3, [fp]
 8013e58:	462b      	mov	r3, r5
 8013e5a:	461d      	mov	r5, r3
 8013e5c:	3b01      	subs	r3, #1
 8013e5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013e62:	2a39      	cmp	r2, #57	; 0x39
 8013e64:	d071      	beq.n	8013f4a <_dtoa_r+0xb9a>
 8013e66:	3201      	adds	r2, #1
 8013e68:	701a      	strb	r2, [r3, #0]
 8013e6a:	e746      	b.n	8013cfa <_dtoa_r+0x94a>
 8013e6c:	2a00      	cmp	r2, #0
 8013e6e:	dd07      	ble.n	8013e80 <_dtoa_r+0xad0>
 8013e70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013e74:	d0ed      	beq.n	8013e52 <_dtoa_r+0xaa2>
 8013e76:	f10a 0301 	add.w	r3, sl, #1
 8013e7a:	f88b 3000 	strb.w	r3, [fp]
 8013e7e:	e73c      	b.n	8013cfa <_dtoa_r+0x94a>
 8013e80:	9b05      	ldr	r3, [sp, #20]
 8013e82:	f809 ac01 	strb.w	sl, [r9, #-1]
 8013e86:	4599      	cmp	r9, r3
 8013e88:	d047      	beq.n	8013f1a <_dtoa_r+0xb6a>
 8013e8a:	ee18 1a10 	vmov	r1, s16
 8013e8e:	2300      	movs	r3, #0
 8013e90:	220a      	movs	r2, #10
 8013e92:	4620      	mov	r0, r4
 8013e94:	f000 fc6e 	bl	8014774 <__multadd>
 8013e98:	45b8      	cmp	r8, r7
 8013e9a:	ee08 0a10 	vmov	s16, r0
 8013e9e:	f04f 0300 	mov.w	r3, #0
 8013ea2:	f04f 020a 	mov.w	r2, #10
 8013ea6:	4641      	mov	r1, r8
 8013ea8:	4620      	mov	r0, r4
 8013eaa:	d106      	bne.n	8013eba <_dtoa_r+0xb0a>
 8013eac:	f000 fc62 	bl	8014774 <__multadd>
 8013eb0:	4680      	mov	r8, r0
 8013eb2:	4607      	mov	r7, r0
 8013eb4:	f109 0901 	add.w	r9, r9, #1
 8013eb8:	e772      	b.n	8013da0 <_dtoa_r+0x9f0>
 8013eba:	f000 fc5b 	bl	8014774 <__multadd>
 8013ebe:	4639      	mov	r1, r7
 8013ec0:	4680      	mov	r8, r0
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	220a      	movs	r2, #10
 8013ec6:	4620      	mov	r0, r4
 8013ec8:	f000 fc54 	bl	8014774 <__multadd>
 8013ecc:	4607      	mov	r7, r0
 8013ece:	e7f1      	b.n	8013eb4 <_dtoa_r+0xb04>
 8013ed0:	9b03      	ldr	r3, [sp, #12]
 8013ed2:	9302      	str	r3, [sp, #8]
 8013ed4:	9d01      	ldr	r5, [sp, #4]
 8013ed6:	ee18 0a10 	vmov	r0, s16
 8013eda:	4631      	mov	r1, r6
 8013edc:	f7ff f9dc 	bl	8013298 <quorem>
 8013ee0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8013ee4:	9b01      	ldr	r3, [sp, #4]
 8013ee6:	f805 ab01 	strb.w	sl, [r5], #1
 8013eea:	1aea      	subs	r2, r5, r3
 8013eec:	9b02      	ldr	r3, [sp, #8]
 8013eee:	4293      	cmp	r3, r2
 8013ef0:	dd09      	ble.n	8013f06 <_dtoa_r+0xb56>
 8013ef2:	ee18 1a10 	vmov	r1, s16
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	220a      	movs	r2, #10
 8013efa:	4620      	mov	r0, r4
 8013efc:	f000 fc3a 	bl	8014774 <__multadd>
 8013f00:	ee08 0a10 	vmov	s16, r0
 8013f04:	e7e7      	b.n	8013ed6 <_dtoa_r+0xb26>
 8013f06:	9b02      	ldr	r3, [sp, #8]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	bfc8      	it	gt
 8013f0c:	461d      	movgt	r5, r3
 8013f0e:	9b01      	ldr	r3, [sp, #4]
 8013f10:	bfd8      	it	le
 8013f12:	2501      	movle	r5, #1
 8013f14:	441d      	add	r5, r3
 8013f16:	f04f 0800 	mov.w	r8, #0
 8013f1a:	ee18 1a10 	vmov	r1, s16
 8013f1e:	2201      	movs	r2, #1
 8013f20:	4620      	mov	r0, r4
 8013f22:	f000 fe21 	bl	8014b68 <__lshift>
 8013f26:	4631      	mov	r1, r6
 8013f28:	ee08 0a10 	vmov	s16, r0
 8013f2c:	f000 fe8c 	bl	8014c48 <__mcmp>
 8013f30:	2800      	cmp	r0, #0
 8013f32:	dc91      	bgt.n	8013e58 <_dtoa_r+0xaa8>
 8013f34:	d102      	bne.n	8013f3c <_dtoa_r+0xb8c>
 8013f36:	f01a 0f01 	tst.w	sl, #1
 8013f3a:	d18d      	bne.n	8013e58 <_dtoa_r+0xaa8>
 8013f3c:	462b      	mov	r3, r5
 8013f3e:	461d      	mov	r5, r3
 8013f40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013f44:	2a30      	cmp	r2, #48	; 0x30
 8013f46:	d0fa      	beq.n	8013f3e <_dtoa_r+0xb8e>
 8013f48:	e6d7      	b.n	8013cfa <_dtoa_r+0x94a>
 8013f4a:	9a01      	ldr	r2, [sp, #4]
 8013f4c:	429a      	cmp	r2, r3
 8013f4e:	d184      	bne.n	8013e5a <_dtoa_r+0xaaa>
 8013f50:	9b00      	ldr	r3, [sp, #0]
 8013f52:	3301      	adds	r3, #1
 8013f54:	9300      	str	r3, [sp, #0]
 8013f56:	2331      	movs	r3, #49	; 0x31
 8013f58:	7013      	strb	r3, [r2, #0]
 8013f5a:	e6ce      	b.n	8013cfa <_dtoa_r+0x94a>
 8013f5c:	4b09      	ldr	r3, [pc, #36]	; (8013f84 <_dtoa_r+0xbd4>)
 8013f5e:	f7ff ba95 	b.w	801348c <_dtoa_r+0xdc>
 8013f62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	f47f aa6e 	bne.w	8013446 <_dtoa_r+0x96>
 8013f6a:	4b07      	ldr	r3, [pc, #28]	; (8013f88 <_dtoa_r+0xbd8>)
 8013f6c:	f7ff ba8e 	b.w	801348c <_dtoa_r+0xdc>
 8013f70:	9b02      	ldr	r3, [sp, #8]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	dcae      	bgt.n	8013ed4 <_dtoa_r+0xb24>
 8013f76:	9b06      	ldr	r3, [sp, #24]
 8013f78:	2b02      	cmp	r3, #2
 8013f7a:	f73f aea8 	bgt.w	8013cce <_dtoa_r+0x91e>
 8013f7e:	e7a9      	b.n	8013ed4 <_dtoa_r+0xb24>
 8013f80:	08017b17 	.word	0x08017b17
 8013f84:	08017a24 	.word	0x08017a24
 8013f88:	08017a98 	.word	0x08017a98

08013f8c <rshift>:
 8013f8c:	6903      	ldr	r3, [r0, #16]
 8013f8e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013f92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f96:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013f9a:	f100 0414 	add.w	r4, r0, #20
 8013f9e:	dd45      	ble.n	801402c <rshift+0xa0>
 8013fa0:	f011 011f 	ands.w	r1, r1, #31
 8013fa4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013fa8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013fac:	d10c      	bne.n	8013fc8 <rshift+0x3c>
 8013fae:	f100 0710 	add.w	r7, r0, #16
 8013fb2:	4629      	mov	r1, r5
 8013fb4:	42b1      	cmp	r1, r6
 8013fb6:	d334      	bcc.n	8014022 <rshift+0x96>
 8013fb8:	1a9b      	subs	r3, r3, r2
 8013fba:	009b      	lsls	r3, r3, #2
 8013fbc:	1eea      	subs	r2, r5, #3
 8013fbe:	4296      	cmp	r6, r2
 8013fc0:	bf38      	it	cc
 8013fc2:	2300      	movcc	r3, #0
 8013fc4:	4423      	add	r3, r4
 8013fc6:	e015      	b.n	8013ff4 <rshift+0x68>
 8013fc8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013fcc:	f1c1 0820 	rsb	r8, r1, #32
 8013fd0:	40cf      	lsrs	r7, r1
 8013fd2:	f105 0e04 	add.w	lr, r5, #4
 8013fd6:	46a1      	mov	r9, r4
 8013fd8:	4576      	cmp	r6, lr
 8013fda:	46f4      	mov	ip, lr
 8013fdc:	d815      	bhi.n	801400a <rshift+0x7e>
 8013fde:	1a9a      	subs	r2, r3, r2
 8013fe0:	0092      	lsls	r2, r2, #2
 8013fe2:	3a04      	subs	r2, #4
 8013fe4:	3501      	adds	r5, #1
 8013fe6:	42ae      	cmp	r6, r5
 8013fe8:	bf38      	it	cc
 8013fea:	2200      	movcc	r2, #0
 8013fec:	18a3      	adds	r3, r4, r2
 8013fee:	50a7      	str	r7, [r4, r2]
 8013ff0:	b107      	cbz	r7, 8013ff4 <rshift+0x68>
 8013ff2:	3304      	adds	r3, #4
 8013ff4:	1b1a      	subs	r2, r3, r4
 8013ff6:	42a3      	cmp	r3, r4
 8013ff8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013ffc:	bf08      	it	eq
 8013ffe:	2300      	moveq	r3, #0
 8014000:	6102      	str	r2, [r0, #16]
 8014002:	bf08      	it	eq
 8014004:	6143      	streq	r3, [r0, #20]
 8014006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801400a:	f8dc c000 	ldr.w	ip, [ip]
 801400e:	fa0c fc08 	lsl.w	ip, ip, r8
 8014012:	ea4c 0707 	orr.w	r7, ip, r7
 8014016:	f849 7b04 	str.w	r7, [r9], #4
 801401a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801401e:	40cf      	lsrs	r7, r1
 8014020:	e7da      	b.n	8013fd8 <rshift+0x4c>
 8014022:	f851 cb04 	ldr.w	ip, [r1], #4
 8014026:	f847 cf04 	str.w	ip, [r7, #4]!
 801402a:	e7c3      	b.n	8013fb4 <rshift+0x28>
 801402c:	4623      	mov	r3, r4
 801402e:	e7e1      	b.n	8013ff4 <rshift+0x68>

08014030 <__hexdig_fun>:
 8014030:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014034:	2b09      	cmp	r3, #9
 8014036:	d802      	bhi.n	801403e <__hexdig_fun+0xe>
 8014038:	3820      	subs	r0, #32
 801403a:	b2c0      	uxtb	r0, r0
 801403c:	4770      	bx	lr
 801403e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014042:	2b05      	cmp	r3, #5
 8014044:	d801      	bhi.n	801404a <__hexdig_fun+0x1a>
 8014046:	3847      	subs	r0, #71	; 0x47
 8014048:	e7f7      	b.n	801403a <__hexdig_fun+0xa>
 801404a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801404e:	2b05      	cmp	r3, #5
 8014050:	d801      	bhi.n	8014056 <__hexdig_fun+0x26>
 8014052:	3827      	subs	r0, #39	; 0x27
 8014054:	e7f1      	b.n	801403a <__hexdig_fun+0xa>
 8014056:	2000      	movs	r0, #0
 8014058:	4770      	bx	lr
	...

0801405c <__gethex>:
 801405c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014060:	ed2d 8b02 	vpush	{d8}
 8014064:	b089      	sub	sp, #36	; 0x24
 8014066:	ee08 0a10 	vmov	s16, r0
 801406a:	9304      	str	r3, [sp, #16]
 801406c:	4bb4      	ldr	r3, [pc, #720]	; (8014340 <__gethex+0x2e4>)
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	9301      	str	r3, [sp, #4]
 8014072:	4618      	mov	r0, r3
 8014074:	468b      	mov	fp, r1
 8014076:	4690      	mov	r8, r2
 8014078:	f7ec f8aa 	bl	80001d0 <strlen>
 801407c:	9b01      	ldr	r3, [sp, #4]
 801407e:	f8db 2000 	ldr.w	r2, [fp]
 8014082:	4403      	add	r3, r0
 8014084:	4682      	mov	sl, r0
 8014086:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801408a:	9305      	str	r3, [sp, #20]
 801408c:	1c93      	adds	r3, r2, #2
 801408e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014092:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014096:	32fe      	adds	r2, #254	; 0xfe
 8014098:	18d1      	adds	r1, r2, r3
 801409a:	461f      	mov	r7, r3
 801409c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80140a0:	9100      	str	r1, [sp, #0]
 80140a2:	2830      	cmp	r0, #48	; 0x30
 80140a4:	d0f8      	beq.n	8014098 <__gethex+0x3c>
 80140a6:	f7ff ffc3 	bl	8014030 <__hexdig_fun>
 80140aa:	4604      	mov	r4, r0
 80140ac:	2800      	cmp	r0, #0
 80140ae:	d13a      	bne.n	8014126 <__gethex+0xca>
 80140b0:	9901      	ldr	r1, [sp, #4]
 80140b2:	4652      	mov	r2, sl
 80140b4:	4638      	mov	r0, r7
 80140b6:	f7fe f9bb 	bl	8012430 <strncmp>
 80140ba:	4605      	mov	r5, r0
 80140bc:	2800      	cmp	r0, #0
 80140be:	d168      	bne.n	8014192 <__gethex+0x136>
 80140c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80140c4:	eb07 060a 	add.w	r6, r7, sl
 80140c8:	f7ff ffb2 	bl	8014030 <__hexdig_fun>
 80140cc:	2800      	cmp	r0, #0
 80140ce:	d062      	beq.n	8014196 <__gethex+0x13a>
 80140d0:	4633      	mov	r3, r6
 80140d2:	7818      	ldrb	r0, [r3, #0]
 80140d4:	2830      	cmp	r0, #48	; 0x30
 80140d6:	461f      	mov	r7, r3
 80140d8:	f103 0301 	add.w	r3, r3, #1
 80140dc:	d0f9      	beq.n	80140d2 <__gethex+0x76>
 80140de:	f7ff ffa7 	bl	8014030 <__hexdig_fun>
 80140e2:	2301      	movs	r3, #1
 80140e4:	fab0 f480 	clz	r4, r0
 80140e8:	0964      	lsrs	r4, r4, #5
 80140ea:	4635      	mov	r5, r6
 80140ec:	9300      	str	r3, [sp, #0]
 80140ee:	463a      	mov	r2, r7
 80140f0:	4616      	mov	r6, r2
 80140f2:	3201      	adds	r2, #1
 80140f4:	7830      	ldrb	r0, [r6, #0]
 80140f6:	f7ff ff9b 	bl	8014030 <__hexdig_fun>
 80140fa:	2800      	cmp	r0, #0
 80140fc:	d1f8      	bne.n	80140f0 <__gethex+0x94>
 80140fe:	9901      	ldr	r1, [sp, #4]
 8014100:	4652      	mov	r2, sl
 8014102:	4630      	mov	r0, r6
 8014104:	f7fe f994 	bl	8012430 <strncmp>
 8014108:	b980      	cbnz	r0, 801412c <__gethex+0xd0>
 801410a:	b94d      	cbnz	r5, 8014120 <__gethex+0xc4>
 801410c:	eb06 050a 	add.w	r5, r6, sl
 8014110:	462a      	mov	r2, r5
 8014112:	4616      	mov	r6, r2
 8014114:	3201      	adds	r2, #1
 8014116:	7830      	ldrb	r0, [r6, #0]
 8014118:	f7ff ff8a 	bl	8014030 <__hexdig_fun>
 801411c:	2800      	cmp	r0, #0
 801411e:	d1f8      	bne.n	8014112 <__gethex+0xb6>
 8014120:	1bad      	subs	r5, r5, r6
 8014122:	00ad      	lsls	r5, r5, #2
 8014124:	e004      	b.n	8014130 <__gethex+0xd4>
 8014126:	2400      	movs	r4, #0
 8014128:	4625      	mov	r5, r4
 801412a:	e7e0      	b.n	80140ee <__gethex+0x92>
 801412c:	2d00      	cmp	r5, #0
 801412e:	d1f7      	bne.n	8014120 <__gethex+0xc4>
 8014130:	7833      	ldrb	r3, [r6, #0]
 8014132:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014136:	2b50      	cmp	r3, #80	; 0x50
 8014138:	d13b      	bne.n	80141b2 <__gethex+0x156>
 801413a:	7873      	ldrb	r3, [r6, #1]
 801413c:	2b2b      	cmp	r3, #43	; 0x2b
 801413e:	d02c      	beq.n	801419a <__gethex+0x13e>
 8014140:	2b2d      	cmp	r3, #45	; 0x2d
 8014142:	d02e      	beq.n	80141a2 <__gethex+0x146>
 8014144:	1c71      	adds	r1, r6, #1
 8014146:	f04f 0900 	mov.w	r9, #0
 801414a:	7808      	ldrb	r0, [r1, #0]
 801414c:	f7ff ff70 	bl	8014030 <__hexdig_fun>
 8014150:	1e43      	subs	r3, r0, #1
 8014152:	b2db      	uxtb	r3, r3
 8014154:	2b18      	cmp	r3, #24
 8014156:	d82c      	bhi.n	80141b2 <__gethex+0x156>
 8014158:	f1a0 0210 	sub.w	r2, r0, #16
 801415c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014160:	f7ff ff66 	bl	8014030 <__hexdig_fun>
 8014164:	1e43      	subs	r3, r0, #1
 8014166:	b2db      	uxtb	r3, r3
 8014168:	2b18      	cmp	r3, #24
 801416a:	d91d      	bls.n	80141a8 <__gethex+0x14c>
 801416c:	f1b9 0f00 	cmp.w	r9, #0
 8014170:	d000      	beq.n	8014174 <__gethex+0x118>
 8014172:	4252      	negs	r2, r2
 8014174:	4415      	add	r5, r2
 8014176:	f8cb 1000 	str.w	r1, [fp]
 801417a:	b1e4      	cbz	r4, 80141b6 <__gethex+0x15a>
 801417c:	9b00      	ldr	r3, [sp, #0]
 801417e:	2b00      	cmp	r3, #0
 8014180:	bf14      	ite	ne
 8014182:	2700      	movne	r7, #0
 8014184:	2706      	moveq	r7, #6
 8014186:	4638      	mov	r0, r7
 8014188:	b009      	add	sp, #36	; 0x24
 801418a:	ecbd 8b02 	vpop	{d8}
 801418e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014192:	463e      	mov	r6, r7
 8014194:	4625      	mov	r5, r4
 8014196:	2401      	movs	r4, #1
 8014198:	e7ca      	b.n	8014130 <__gethex+0xd4>
 801419a:	f04f 0900 	mov.w	r9, #0
 801419e:	1cb1      	adds	r1, r6, #2
 80141a0:	e7d3      	b.n	801414a <__gethex+0xee>
 80141a2:	f04f 0901 	mov.w	r9, #1
 80141a6:	e7fa      	b.n	801419e <__gethex+0x142>
 80141a8:	230a      	movs	r3, #10
 80141aa:	fb03 0202 	mla	r2, r3, r2, r0
 80141ae:	3a10      	subs	r2, #16
 80141b0:	e7d4      	b.n	801415c <__gethex+0x100>
 80141b2:	4631      	mov	r1, r6
 80141b4:	e7df      	b.n	8014176 <__gethex+0x11a>
 80141b6:	1bf3      	subs	r3, r6, r7
 80141b8:	3b01      	subs	r3, #1
 80141ba:	4621      	mov	r1, r4
 80141bc:	2b07      	cmp	r3, #7
 80141be:	dc0b      	bgt.n	80141d8 <__gethex+0x17c>
 80141c0:	ee18 0a10 	vmov	r0, s16
 80141c4:	f000 fa74 	bl	80146b0 <_Balloc>
 80141c8:	4604      	mov	r4, r0
 80141ca:	b940      	cbnz	r0, 80141de <__gethex+0x182>
 80141cc:	4b5d      	ldr	r3, [pc, #372]	; (8014344 <__gethex+0x2e8>)
 80141ce:	4602      	mov	r2, r0
 80141d0:	21de      	movs	r1, #222	; 0xde
 80141d2:	485d      	ldr	r0, [pc, #372]	; (8014348 <__gethex+0x2ec>)
 80141d4:	f001 f9fa 	bl	80155cc <__assert_func>
 80141d8:	3101      	adds	r1, #1
 80141da:	105b      	asrs	r3, r3, #1
 80141dc:	e7ee      	b.n	80141bc <__gethex+0x160>
 80141de:	f100 0914 	add.w	r9, r0, #20
 80141e2:	f04f 0b00 	mov.w	fp, #0
 80141e6:	f1ca 0301 	rsb	r3, sl, #1
 80141ea:	f8cd 9008 	str.w	r9, [sp, #8]
 80141ee:	f8cd b000 	str.w	fp, [sp]
 80141f2:	9306      	str	r3, [sp, #24]
 80141f4:	42b7      	cmp	r7, r6
 80141f6:	d340      	bcc.n	801427a <__gethex+0x21e>
 80141f8:	9802      	ldr	r0, [sp, #8]
 80141fa:	9b00      	ldr	r3, [sp, #0]
 80141fc:	f840 3b04 	str.w	r3, [r0], #4
 8014200:	eba0 0009 	sub.w	r0, r0, r9
 8014204:	1080      	asrs	r0, r0, #2
 8014206:	0146      	lsls	r6, r0, #5
 8014208:	6120      	str	r0, [r4, #16]
 801420a:	4618      	mov	r0, r3
 801420c:	f000 fb42 	bl	8014894 <__hi0bits>
 8014210:	1a30      	subs	r0, r6, r0
 8014212:	f8d8 6000 	ldr.w	r6, [r8]
 8014216:	42b0      	cmp	r0, r6
 8014218:	dd63      	ble.n	80142e2 <__gethex+0x286>
 801421a:	1b87      	subs	r7, r0, r6
 801421c:	4639      	mov	r1, r7
 801421e:	4620      	mov	r0, r4
 8014220:	f000 fee6 	bl	8014ff0 <__any_on>
 8014224:	4682      	mov	sl, r0
 8014226:	b1a8      	cbz	r0, 8014254 <__gethex+0x1f8>
 8014228:	1e7b      	subs	r3, r7, #1
 801422a:	1159      	asrs	r1, r3, #5
 801422c:	f003 021f 	and.w	r2, r3, #31
 8014230:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014234:	f04f 0a01 	mov.w	sl, #1
 8014238:	fa0a f202 	lsl.w	r2, sl, r2
 801423c:	420a      	tst	r2, r1
 801423e:	d009      	beq.n	8014254 <__gethex+0x1f8>
 8014240:	4553      	cmp	r3, sl
 8014242:	dd05      	ble.n	8014250 <__gethex+0x1f4>
 8014244:	1eb9      	subs	r1, r7, #2
 8014246:	4620      	mov	r0, r4
 8014248:	f000 fed2 	bl	8014ff0 <__any_on>
 801424c:	2800      	cmp	r0, #0
 801424e:	d145      	bne.n	80142dc <__gethex+0x280>
 8014250:	f04f 0a02 	mov.w	sl, #2
 8014254:	4639      	mov	r1, r7
 8014256:	4620      	mov	r0, r4
 8014258:	f7ff fe98 	bl	8013f8c <rshift>
 801425c:	443d      	add	r5, r7
 801425e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014262:	42ab      	cmp	r3, r5
 8014264:	da4c      	bge.n	8014300 <__gethex+0x2a4>
 8014266:	ee18 0a10 	vmov	r0, s16
 801426a:	4621      	mov	r1, r4
 801426c:	f000 fa60 	bl	8014730 <_Bfree>
 8014270:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014272:	2300      	movs	r3, #0
 8014274:	6013      	str	r3, [r2, #0]
 8014276:	27a3      	movs	r7, #163	; 0xa3
 8014278:	e785      	b.n	8014186 <__gethex+0x12a>
 801427a:	1e73      	subs	r3, r6, #1
 801427c:	9a05      	ldr	r2, [sp, #20]
 801427e:	9303      	str	r3, [sp, #12]
 8014280:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014284:	4293      	cmp	r3, r2
 8014286:	d019      	beq.n	80142bc <__gethex+0x260>
 8014288:	f1bb 0f20 	cmp.w	fp, #32
 801428c:	d107      	bne.n	801429e <__gethex+0x242>
 801428e:	9b02      	ldr	r3, [sp, #8]
 8014290:	9a00      	ldr	r2, [sp, #0]
 8014292:	f843 2b04 	str.w	r2, [r3], #4
 8014296:	9302      	str	r3, [sp, #8]
 8014298:	2300      	movs	r3, #0
 801429a:	9300      	str	r3, [sp, #0]
 801429c:	469b      	mov	fp, r3
 801429e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80142a2:	f7ff fec5 	bl	8014030 <__hexdig_fun>
 80142a6:	9b00      	ldr	r3, [sp, #0]
 80142a8:	f000 000f 	and.w	r0, r0, #15
 80142ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80142b0:	4303      	orrs	r3, r0
 80142b2:	9300      	str	r3, [sp, #0]
 80142b4:	f10b 0b04 	add.w	fp, fp, #4
 80142b8:	9b03      	ldr	r3, [sp, #12]
 80142ba:	e00d      	b.n	80142d8 <__gethex+0x27c>
 80142bc:	9b03      	ldr	r3, [sp, #12]
 80142be:	9a06      	ldr	r2, [sp, #24]
 80142c0:	4413      	add	r3, r2
 80142c2:	42bb      	cmp	r3, r7
 80142c4:	d3e0      	bcc.n	8014288 <__gethex+0x22c>
 80142c6:	4618      	mov	r0, r3
 80142c8:	9901      	ldr	r1, [sp, #4]
 80142ca:	9307      	str	r3, [sp, #28]
 80142cc:	4652      	mov	r2, sl
 80142ce:	f7fe f8af 	bl	8012430 <strncmp>
 80142d2:	9b07      	ldr	r3, [sp, #28]
 80142d4:	2800      	cmp	r0, #0
 80142d6:	d1d7      	bne.n	8014288 <__gethex+0x22c>
 80142d8:	461e      	mov	r6, r3
 80142da:	e78b      	b.n	80141f4 <__gethex+0x198>
 80142dc:	f04f 0a03 	mov.w	sl, #3
 80142e0:	e7b8      	b.n	8014254 <__gethex+0x1f8>
 80142e2:	da0a      	bge.n	80142fa <__gethex+0x29e>
 80142e4:	1a37      	subs	r7, r6, r0
 80142e6:	4621      	mov	r1, r4
 80142e8:	ee18 0a10 	vmov	r0, s16
 80142ec:	463a      	mov	r2, r7
 80142ee:	f000 fc3b 	bl	8014b68 <__lshift>
 80142f2:	1bed      	subs	r5, r5, r7
 80142f4:	4604      	mov	r4, r0
 80142f6:	f100 0914 	add.w	r9, r0, #20
 80142fa:	f04f 0a00 	mov.w	sl, #0
 80142fe:	e7ae      	b.n	801425e <__gethex+0x202>
 8014300:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014304:	42a8      	cmp	r0, r5
 8014306:	dd72      	ble.n	80143ee <__gethex+0x392>
 8014308:	1b45      	subs	r5, r0, r5
 801430a:	42ae      	cmp	r6, r5
 801430c:	dc36      	bgt.n	801437c <__gethex+0x320>
 801430e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014312:	2b02      	cmp	r3, #2
 8014314:	d02a      	beq.n	801436c <__gethex+0x310>
 8014316:	2b03      	cmp	r3, #3
 8014318:	d02c      	beq.n	8014374 <__gethex+0x318>
 801431a:	2b01      	cmp	r3, #1
 801431c:	d11c      	bne.n	8014358 <__gethex+0x2fc>
 801431e:	42ae      	cmp	r6, r5
 8014320:	d11a      	bne.n	8014358 <__gethex+0x2fc>
 8014322:	2e01      	cmp	r6, #1
 8014324:	d112      	bne.n	801434c <__gethex+0x2f0>
 8014326:	9a04      	ldr	r2, [sp, #16]
 8014328:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801432c:	6013      	str	r3, [r2, #0]
 801432e:	2301      	movs	r3, #1
 8014330:	6123      	str	r3, [r4, #16]
 8014332:	f8c9 3000 	str.w	r3, [r9]
 8014336:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014338:	2762      	movs	r7, #98	; 0x62
 801433a:	601c      	str	r4, [r3, #0]
 801433c:	e723      	b.n	8014186 <__gethex+0x12a>
 801433e:	bf00      	nop
 8014340:	08017b90 	.word	0x08017b90
 8014344:	08017b17 	.word	0x08017b17
 8014348:	08017b28 	.word	0x08017b28
 801434c:	1e71      	subs	r1, r6, #1
 801434e:	4620      	mov	r0, r4
 8014350:	f000 fe4e 	bl	8014ff0 <__any_on>
 8014354:	2800      	cmp	r0, #0
 8014356:	d1e6      	bne.n	8014326 <__gethex+0x2ca>
 8014358:	ee18 0a10 	vmov	r0, s16
 801435c:	4621      	mov	r1, r4
 801435e:	f000 f9e7 	bl	8014730 <_Bfree>
 8014362:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014364:	2300      	movs	r3, #0
 8014366:	6013      	str	r3, [r2, #0]
 8014368:	2750      	movs	r7, #80	; 0x50
 801436a:	e70c      	b.n	8014186 <__gethex+0x12a>
 801436c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801436e:	2b00      	cmp	r3, #0
 8014370:	d1f2      	bne.n	8014358 <__gethex+0x2fc>
 8014372:	e7d8      	b.n	8014326 <__gethex+0x2ca>
 8014374:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014376:	2b00      	cmp	r3, #0
 8014378:	d1d5      	bne.n	8014326 <__gethex+0x2ca>
 801437a:	e7ed      	b.n	8014358 <__gethex+0x2fc>
 801437c:	1e6f      	subs	r7, r5, #1
 801437e:	f1ba 0f00 	cmp.w	sl, #0
 8014382:	d131      	bne.n	80143e8 <__gethex+0x38c>
 8014384:	b127      	cbz	r7, 8014390 <__gethex+0x334>
 8014386:	4639      	mov	r1, r7
 8014388:	4620      	mov	r0, r4
 801438a:	f000 fe31 	bl	8014ff0 <__any_on>
 801438e:	4682      	mov	sl, r0
 8014390:	117b      	asrs	r3, r7, #5
 8014392:	2101      	movs	r1, #1
 8014394:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8014398:	f007 071f 	and.w	r7, r7, #31
 801439c:	fa01 f707 	lsl.w	r7, r1, r7
 80143a0:	421f      	tst	r7, r3
 80143a2:	4629      	mov	r1, r5
 80143a4:	4620      	mov	r0, r4
 80143a6:	bf18      	it	ne
 80143a8:	f04a 0a02 	orrne.w	sl, sl, #2
 80143ac:	1b76      	subs	r6, r6, r5
 80143ae:	f7ff fded 	bl	8013f8c <rshift>
 80143b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80143b6:	2702      	movs	r7, #2
 80143b8:	f1ba 0f00 	cmp.w	sl, #0
 80143bc:	d048      	beq.n	8014450 <__gethex+0x3f4>
 80143be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80143c2:	2b02      	cmp	r3, #2
 80143c4:	d015      	beq.n	80143f2 <__gethex+0x396>
 80143c6:	2b03      	cmp	r3, #3
 80143c8:	d017      	beq.n	80143fa <__gethex+0x39e>
 80143ca:	2b01      	cmp	r3, #1
 80143cc:	d109      	bne.n	80143e2 <__gethex+0x386>
 80143ce:	f01a 0f02 	tst.w	sl, #2
 80143d2:	d006      	beq.n	80143e2 <__gethex+0x386>
 80143d4:	f8d9 0000 	ldr.w	r0, [r9]
 80143d8:	ea4a 0a00 	orr.w	sl, sl, r0
 80143dc:	f01a 0f01 	tst.w	sl, #1
 80143e0:	d10e      	bne.n	8014400 <__gethex+0x3a4>
 80143e2:	f047 0710 	orr.w	r7, r7, #16
 80143e6:	e033      	b.n	8014450 <__gethex+0x3f4>
 80143e8:	f04f 0a01 	mov.w	sl, #1
 80143ec:	e7d0      	b.n	8014390 <__gethex+0x334>
 80143ee:	2701      	movs	r7, #1
 80143f0:	e7e2      	b.n	80143b8 <__gethex+0x35c>
 80143f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80143f4:	f1c3 0301 	rsb	r3, r3, #1
 80143f8:	9315      	str	r3, [sp, #84]	; 0x54
 80143fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d0f0      	beq.n	80143e2 <__gethex+0x386>
 8014400:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014404:	f104 0314 	add.w	r3, r4, #20
 8014408:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801440c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014410:	f04f 0c00 	mov.w	ip, #0
 8014414:	4618      	mov	r0, r3
 8014416:	f853 2b04 	ldr.w	r2, [r3], #4
 801441a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801441e:	d01c      	beq.n	801445a <__gethex+0x3fe>
 8014420:	3201      	adds	r2, #1
 8014422:	6002      	str	r2, [r0, #0]
 8014424:	2f02      	cmp	r7, #2
 8014426:	f104 0314 	add.w	r3, r4, #20
 801442a:	d13f      	bne.n	80144ac <__gethex+0x450>
 801442c:	f8d8 2000 	ldr.w	r2, [r8]
 8014430:	3a01      	subs	r2, #1
 8014432:	42b2      	cmp	r2, r6
 8014434:	d10a      	bne.n	801444c <__gethex+0x3f0>
 8014436:	1171      	asrs	r1, r6, #5
 8014438:	2201      	movs	r2, #1
 801443a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801443e:	f006 061f 	and.w	r6, r6, #31
 8014442:	fa02 f606 	lsl.w	r6, r2, r6
 8014446:	421e      	tst	r6, r3
 8014448:	bf18      	it	ne
 801444a:	4617      	movne	r7, r2
 801444c:	f047 0720 	orr.w	r7, r7, #32
 8014450:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014452:	601c      	str	r4, [r3, #0]
 8014454:	9b04      	ldr	r3, [sp, #16]
 8014456:	601d      	str	r5, [r3, #0]
 8014458:	e695      	b.n	8014186 <__gethex+0x12a>
 801445a:	4299      	cmp	r1, r3
 801445c:	f843 cc04 	str.w	ip, [r3, #-4]
 8014460:	d8d8      	bhi.n	8014414 <__gethex+0x3b8>
 8014462:	68a3      	ldr	r3, [r4, #8]
 8014464:	459b      	cmp	fp, r3
 8014466:	db19      	blt.n	801449c <__gethex+0x440>
 8014468:	6861      	ldr	r1, [r4, #4]
 801446a:	ee18 0a10 	vmov	r0, s16
 801446e:	3101      	adds	r1, #1
 8014470:	f000 f91e 	bl	80146b0 <_Balloc>
 8014474:	4681      	mov	r9, r0
 8014476:	b918      	cbnz	r0, 8014480 <__gethex+0x424>
 8014478:	4b1a      	ldr	r3, [pc, #104]	; (80144e4 <__gethex+0x488>)
 801447a:	4602      	mov	r2, r0
 801447c:	2184      	movs	r1, #132	; 0x84
 801447e:	e6a8      	b.n	80141d2 <__gethex+0x176>
 8014480:	6922      	ldr	r2, [r4, #16]
 8014482:	3202      	adds	r2, #2
 8014484:	f104 010c 	add.w	r1, r4, #12
 8014488:	0092      	lsls	r2, r2, #2
 801448a:	300c      	adds	r0, #12
 801448c:	f7fd fb14 	bl	8011ab8 <memcpy>
 8014490:	4621      	mov	r1, r4
 8014492:	ee18 0a10 	vmov	r0, s16
 8014496:	f000 f94b 	bl	8014730 <_Bfree>
 801449a:	464c      	mov	r4, r9
 801449c:	6923      	ldr	r3, [r4, #16]
 801449e:	1c5a      	adds	r2, r3, #1
 80144a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80144a4:	6122      	str	r2, [r4, #16]
 80144a6:	2201      	movs	r2, #1
 80144a8:	615a      	str	r2, [r3, #20]
 80144aa:	e7bb      	b.n	8014424 <__gethex+0x3c8>
 80144ac:	6922      	ldr	r2, [r4, #16]
 80144ae:	455a      	cmp	r2, fp
 80144b0:	dd0b      	ble.n	80144ca <__gethex+0x46e>
 80144b2:	2101      	movs	r1, #1
 80144b4:	4620      	mov	r0, r4
 80144b6:	f7ff fd69 	bl	8013f8c <rshift>
 80144ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80144be:	3501      	adds	r5, #1
 80144c0:	42ab      	cmp	r3, r5
 80144c2:	f6ff aed0 	blt.w	8014266 <__gethex+0x20a>
 80144c6:	2701      	movs	r7, #1
 80144c8:	e7c0      	b.n	801444c <__gethex+0x3f0>
 80144ca:	f016 061f 	ands.w	r6, r6, #31
 80144ce:	d0fa      	beq.n	80144c6 <__gethex+0x46a>
 80144d0:	4453      	add	r3, sl
 80144d2:	f1c6 0620 	rsb	r6, r6, #32
 80144d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80144da:	f000 f9db 	bl	8014894 <__hi0bits>
 80144de:	42b0      	cmp	r0, r6
 80144e0:	dbe7      	blt.n	80144b2 <__gethex+0x456>
 80144e2:	e7f0      	b.n	80144c6 <__gethex+0x46a>
 80144e4:	08017b17 	.word	0x08017b17

080144e8 <L_shift>:
 80144e8:	f1c2 0208 	rsb	r2, r2, #8
 80144ec:	0092      	lsls	r2, r2, #2
 80144ee:	b570      	push	{r4, r5, r6, lr}
 80144f0:	f1c2 0620 	rsb	r6, r2, #32
 80144f4:	6843      	ldr	r3, [r0, #4]
 80144f6:	6804      	ldr	r4, [r0, #0]
 80144f8:	fa03 f506 	lsl.w	r5, r3, r6
 80144fc:	432c      	orrs	r4, r5
 80144fe:	40d3      	lsrs	r3, r2
 8014500:	6004      	str	r4, [r0, #0]
 8014502:	f840 3f04 	str.w	r3, [r0, #4]!
 8014506:	4288      	cmp	r0, r1
 8014508:	d3f4      	bcc.n	80144f4 <L_shift+0xc>
 801450a:	bd70      	pop	{r4, r5, r6, pc}

0801450c <__match>:
 801450c:	b530      	push	{r4, r5, lr}
 801450e:	6803      	ldr	r3, [r0, #0]
 8014510:	3301      	adds	r3, #1
 8014512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014516:	b914      	cbnz	r4, 801451e <__match+0x12>
 8014518:	6003      	str	r3, [r0, #0]
 801451a:	2001      	movs	r0, #1
 801451c:	bd30      	pop	{r4, r5, pc}
 801451e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014522:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014526:	2d19      	cmp	r5, #25
 8014528:	bf98      	it	ls
 801452a:	3220      	addls	r2, #32
 801452c:	42a2      	cmp	r2, r4
 801452e:	d0f0      	beq.n	8014512 <__match+0x6>
 8014530:	2000      	movs	r0, #0
 8014532:	e7f3      	b.n	801451c <__match+0x10>

08014534 <__hexnan>:
 8014534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014538:	680b      	ldr	r3, [r1, #0]
 801453a:	115e      	asrs	r6, r3, #5
 801453c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014540:	f013 031f 	ands.w	r3, r3, #31
 8014544:	b087      	sub	sp, #28
 8014546:	bf18      	it	ne
 8014548:	3604      	addne	r6, #4
 801454a:	2500      	movs	r5, #0
 801454c:	1f37      	subs	r7, r6, #4
 801454e:	4690      	mov	r8, r2
 8014550:	6802      	ldr	r2, [r0, #0]
 8014552:	9301      	str	r3, [sp, #4]
 8014554:	4682      	mov	sl, r0
 8014556:	f846 5c04 	str.w	r5, [r6, #-4]
 801455a:	46b9      	mov	r9, r7
 801455c:	463c      	mov	r4, r7
 801455e:	9502      	str	r5, [sp, #8]
 8014560:	46ab      	mov	fp, r5
 8014562:	7851      	ldrb	r1, [r2, #1]
 8014564:	1c53      	adds	r3, r2, #1
 8014566:	9303      	str	r3, [sp, #12]
 8014568:	b341      	cbz	r1, 80145bc <__hexnan+0x88>
 801456a:	4608      	mov	r0, r1
 801456c:	9205      	str	r2, [sp, #20]
 801456e:	9104      	str	r1, [sp, #16]
 8014570:	f7ff fd5e 	bl	8014030 <__hexdig_fun>
 8014574:	2800      	cmp	r0, #0
 8014576:	d14f      	bne.n	8014618 <__hexnan+0xe4>
 8014578:	9904      	ldr	r1, [sp, #16]
 801457a:	9a05      	ldr	r2, [sp, #20]
 801457c:	2920      	cmp	r1, #32
 801457e:	d818      	bhi.n	80145b2 <__hexnan+0x7e>
 8014580:	9b02      	ldr	r3, [sp, #8]
 8014582:	459b      	cmp	fp, r3
 8014584:	dd13      	ble.n	80145ae <__hexnan+0x7a>
 8014586:	454c      	cmp	r4, r9
 8014588:	d206      	bcs.n	8014598 <__hexnan+0x64>
 801458a:	2d07      	cmp	r5, #7
 801458c:	dc04      	bgt.n	8014598 <__hexnan+0x64>
 801458e:	462a      	mov	r2, r5
 8014590:	4649      	mov	r1, r9
 8014592:	4620      	mov	r0, r4
 8014594:	f7ff ffa8 	bl	80144e8 <L_shift>
 8014598:	4544      	cmp	r4, r8
 801459a:	d950      	bls.n	801463e <__hexnan+0x10a>
 801459c:	2300      	movs	r3, #0
 801459e:	f1a4 0904 	sub.w	r9, r4, #4
 80145a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80145a6:	f8cd b008 	str.w	fp, [sp, #8]
 80145aa:	464c      	mov	r4, r9
 80145ac:	461d      	mov	r5, r3
 80145ae:	9a03      	ldr	r2, [sp, #12]
 80145b0:	e7d7      	b.n	8014562 <__hexnan+0x2e>
 80145b2:	2929      	cmp	r1, #41	; 0x29
 80145b4:	d156      	bne.n	8014664 <__hexnan+0x130>
 80145b6:	3202      	adds	r2, #2
 80145b8:	f8ca 2000 	str.w	r2, [sl]
 80145bc:	f1bb 0f00 	cmp.w	fp, #0
 80145c0:	d050      	beq.n	8014664 <__hexnan+0x130>
 80145c2:	454c      	cmp	r4, r9
 80145c4:	d206      	bcs.n	80145d4 <__hexnan+0xa0>
 80145c6:	2d07      	cmp	r5, #7
 80145c8:	dc04      	bgt.n	80145d4 <__hexnan+0xa0>
 80145ca:	462a      	mov	r2, r5
 80145cc:	4649      	mov	r1, r9
 80145ce:	4620      	mov	r0, r4
 80145d0:	f7ff ff8a 	bl	80144e8 <L_shift>
 80145d4:	4544      	cmp	r4, r8
 80145d6:	d934      	bls.n	8014642 <__hexnan+0x10e>
 80145d8:	f1a8 0204 	sub.w	r2, r8, #4
 80145dc:	4623      	mov	r3, r4
 80145de:	f853 1b04 	ldr.w	r1, [r3], #4
 80145e2:	f842 1f04 	str.w	r1, [r2, #4]!
 80145e6:	429f      	cmp	r7, r3
 80145e8:	d2f9      	bcs.n	80145de <__hexnan+0xaa>
 80145ea:	1b3b      	subs	r3, r7, r4
 80145ec:	f023 0303 	bic.w	r3, r3, #3
 80145f0:	3304      	adds	r3, #4
 80145f2:	3401      	adds	r4, #1
 80145f4:	3e03      	subs	r6, #3
 80145f6:	42b4      	cmp	r4, r6
 80145f8:	bf88      	it	hi
 80145fa:	2304      	movhi	r3, #4
 80145fc:	4443      	add	r3, r8
 80145fe:	2200      	movs	r2, #0
 8014600:	f843 2b04 	str.w	r2, [r3], #4
 8014604:	429f      	cmp	r7, r3
 8014606:	d2fb      	bcs.n	8014600 <__hexnan+0xcc>
 8014608:	683b      	ldr	r3, [r7, #0]
 801460a:	b91b      	cbnz	r3, 8014614 <__hexnan+0xe0>
 801460c:	4547      	cmp	r7, r8
 801460e:	d127      	bne.n	8014660 <__hexnan+0x12c>
 8014610:	2301      	movs	r3, #1
 8014612:	603b      	str	r3, [r7, #0]
 8014614:	2005      	movs	r0, #5
 8014616:	e026      	b.n	8014666 <__hexnan+0x132>
 8014618:	3501      	adds	r5, #1
 801461a:	2d08      	cmp	r5, #8
 801461c:	f10b 0b01 	add.w	fp, fp, #1
 8014620:	dd06      	ble.n	8014630 <__hexnan+0xfc>
 8014622:	4544      	cmp	r4, r8
 8014624:	d9c3      	bls.n	80145ae <__hexnan+0x7a>
 8014626:	2300      	movs	r3, #0
 8014628:	f844 3c04 	str.w	r3, [r4, #-4]
 801462c:	2501      	movs	r5, #1
 801462e:	3c04      	subs	r4, #4
 8014630:	6822      	ldr	r2, [r4, #0]
 8014632:	f000 000f 	and.w	r0, r0, #15
 8014636:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801463a:	6022      	str	r2, [r4, #0]
 801463c:	e7b7      	b.n	80145ae <__hexnan+0x7a>
 801463e:	2508      	movs	r5, #8
 8014640:	e7b5      	b.n	80145ae <__hexnan+0x7a>
 8014642:	9b01      	ldr	r3, [sp, #4]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d0df      	beq.n	8014608 <__hexnan+0xd4>
 8014648:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801464c:	f1c3 0320 	rsb	r3, r3, #32
 8014650:	fa22 f303 	lsr.w	r3, r2, r3
 8014654:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014658:	401a      	ands	r2, r3
 801465a:	f846 2c04 	str.w	r2, [r6, #-4]
 801465e:	e7d3      	b.n	8014608 <__hexnan+0xd4>
 8014660:	3f04      	subs	r7, #4
 8014662:	e7d1      	b.n	8014608 <__hexnan+0xd4>
 8014664:	2004      	movs	r0, #4
 8014666:	b007      	add	sp, #28
 8014668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801466c <_localeconv_r>:
 801466c:	4800      	ldr	r0, [pc, #0]	; (8014670 <_localeconv_r+0x4>)
 801466e:	4770      	bx	lr
 8014670:	2000038c 	.word	0x2000038c

08014674 <__retarget_lock_init_recursive>:
 8014674:	4770      	bx	lr

08014676 <__retarget_lock_acquire_recursive>:
 8014676:	4770      	bx	lr

08014678 <__retarget_lock_release_recursive>:
 8014678:	4770      	bx	lr
	...

0801467c <malloc>:
 801467c:	4b02      	ldr	r3, [pc, #8]	; (8014688 <malloc+0xc>)
 801467e:	4601      	mov	r1, r0
 8014680:	6818      	ldr	r0, [r3, #0]
 8014682:	f000 bd59 	b.w	8015138 <_malloc_r>
 8014686:	bf00      	nop
 8014688:	20000234 	.word	0x20000234

0801468c <__ascii_mbtowc>:
 801468c:	b082      	sub	sp, #8
 801468e:	b901      	cbnz	r1, 8014692 <__ascii_mbtowc+0x6>
 8014690:	a901      	add	r1, sp, #4
 8014692:	b142      	cbz	r2, 80146a6 <__ascii_mbtowc+0x1a>
 8014694:	b14b      	cbz	r3, 80146aa <__ascii_mbtowc+0x1e>
 8014696:	7813      	ldrb	r3, [r2, #0]
 8014698:	600b      	str	r3, [r1, #0]
 801469a:	7812      	ldrb	r2, [r2, #0]
 801469c:	1e10      	subs	r0, r2, #0
 801469e:	bf18      	it	ne
 80146a0:	2001      	movne	r0, #1
 80146a2:	b002      	add	sp, #8
 80146a4:	4770      	bx	lr
 80146a6:	4610      	mov	r0, r2
 80146a8:	e7fb      	b.n	80146a2 <__ascii_mbtowc+0x16>
 80146aa:	f06f 0001 	mvn.w	r0, #1
 80146ae:	e7f8      	b.n	80146a2 <__ascii_mbtowc+0x16>

080146b0 <_Balloc>:
 80146b0:	b570      	push	{r4, r5, r6, lr}
 80146b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80146b4:	4604      	mov	r4, r0
 80146b6:	460d      	mov	r5, r1
 80146b8:	b976      	cbnz	r6, 80146d8 <_Balloc+0x28>
 80146ba:	2010      	movs	r0, #16
 80146bc:	f7ff ffde 	bl	801467c <malloc>
 80146c0:	4602      	mov	r2, r0
 80146c2:	6260      	str	r0, [r4, #36]	; 0x24
 80146c4:	b920      	cbnz	r0, 80146d0 <_Balloc+0x20>
 80146c6:	4b18      	ldr	r3, [pc, #96]	; (8014728 <_Balloc+0x78>)
 80146c8:	4818      	ldr	r0, [pc, #96]	; (801472c <_Balloc+0x7c>)
 80146ca:	2166      	movs	r1, #102	; 0x66
 80146cc:	f000 ff7e 	bl	80155cc <__assert_func>
 80146d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80146d4:	6006      	str	r6, [r0, #0]
 80146d6:	60c6      	str	r6, [r0, #12]
 80146d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80146da:	68f3      	ldr	r3, [r6, #12]
 80146dc:	b183      	cbz	r3, 8014700 <_Balloc+0x50>
 80146de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80146e0:	68db      	ldr	r3, [r3, #12]
 80146e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80146e6:	b9b8      	cbnz	r0, 8014718 <_Balloc+0x68>
 80146e8:	2101      	movs	r1, #1
 80146ea:	fa01 f605 	lsl.w	r6, r1, r5
 80146ee:	1d72      	adds	r2, r6, #5
 80146f0:	0092      	lsls	r2, r2, #2
 80146f2:	4620      	mov	r0, r4
 80146f4:	f000 fc9d 	bl	8015032 <_calloc_r>
 80146f8:	b160      	cbz	r0, 8014714 <_Balloc+0x64>
 80146fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80146fe:	e00e      	b.n	801471e <_Balloc+0x6e>
 8014700:	2221      	movs	r2, #33	; 0x21
 8014702:	2104      	movs	r1, #4
 8014704:	4620      	mov	r0, r4
 8014706:	f000 fc94 	bl	8015032 <_calloc_r>
 801470a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801470c:	60f0      	str	r0, [r6, #12]
 801470e:	68db      	ldr	r3, [r3, #12]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d1e4      	bne.n	80146de <_Balloc+0x2e>
 8014714:	2000      	movs	r0, #0
 8014716:	bd70      	pop	{r4, r5, r6, pc}
 8014718:	6802      	ldr	r2, [r0, #0]
 801471a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801471e:	2300      	movs	r3, #0
 8014720:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014724:	e7f7      	b.n	8014716 <_Balloc+0x66>
 8014726:	bf00      	nop
 8014728:	08017aa5 	.word	0x08017aa5
 801472c:	08017ba4 	.word	0x08017ba4

08014730 <_Bfree>:
 8014730:	b570      	push	{r4, r5, r6, lr}
 8014732:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014734:	4605      	mov	r5, r0
 8014736:	460c      	mov	r4, r1
 8014738:	b976      	cbnz	r6, 8014758 <_Bfree+0x28>
 801473a:	2010      	movs	r0, #16
 801473c:	f7ff ff9e 	bl	801467c <malloc>
 8014740:	4602      	mov	r2, r0
 8014742:	6268      	str	r0, [r5, #36]	; 0x24
 8014744:	b920      	cbnz	r0, 8014750 <_Bfree+0x20>
 8014746:	4b09      	ldr	r3, [pc, #36]	; (801476c <_Bfree+0x3c>)
 8014748:	4809      	ldr	r0, [pc, #36]	; (8014770 <_Bfree+0x40>)
 801474a:	218a      	movs	r1, #138	; 0x8a
 801474c:	f000 ff3e 	bl	80155cc <__assert_func>
 8014750:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014754:	6006      	str	r6, [r0, #0]
 8014756:	60c6      	str	r6, [r0, #12]
 8014758:	b13c      	cbz	r4, 801476a <_Bfree+0x3a>
 801475a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801475c:	6862      	ldr	r2, [r4, #4]
 801475e:	68db      	ldr	r3, [r3, #12]
 8014760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014764:	6021      	str	r1, [r4, #0]
 8014766:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801476a:	bd70      	pop	{r4, r5, r6, pc}
 801476c:	08017aa5 	.word	0x08017aa5
 8014770:	08017ba4 	.word	0x08017ba4

08014774 <__multadd>:
 8014774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014778:	690d      	ldr	r5, [r1, #16]
 801477a:	4607      	mov	r7, r0
 801477c:	460c      	mov	r4, r1
 801477e:	461e      	mov	r6, r3
 8014780:	f101 0c14 	add.w	ip, r1, #20
 8014784:	2000      	movs	r0, #0
 8014786:	f8dc 3000 	ldr.w	r3, [ip]
 801478a:	b299      	uxth	r1, r3
 801478c:	fb02 6101 	mla	r1, r2, r1, r6
 8014790:	0c1e      	lsrs	r6, r3, #16
 8014792:	0c0b      	lsrs	r3, r1, #16
 8014794:	fb02 3306 	mla	r3, r2, r6, r3
 8014798:	b289      	uxth	r1, r1
 801479a:	3001      	adds	r0, #1
 801479c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80147a0:	4285      	cmp	r5, r0
 80147a2:	f84c 1b04 	str.w	r1, [ip], #4
 80147a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80147aa:	dcec      	bgt.n	8014786 <__multadd+0x12>
 80147ac:	b30e      	cbz	r6, 80147f2 <__multadd+0x7e>
 80147ae:	68a3      	ldr	r3, [r4, #8]
 80147b0:	42ab      	cmp	r3, r5
 80147b2:	dc19      	bgt.n	80147e8 <__multadd+0x74>
 80147b4:	6861      	ldr	r1, [r4, #4]
 80147b6:	4638      	mov	r0, r7
 80147b8:	3101      	adds	r1, #1
 80147ba:	f7ff ff79 	bl	80146b0 <_Balloc>
 80147be:	4680      	mov	r8, r0
 80147c0:	b928      	cbnz	r0, 80147ce <__multadd+0x5a>
 80147c2:	4602      	mov	r2, r0
 80147c4:	4b0c      	ldr	r3, [pc, #48]	; (80147f8 <__multadd+0x84>)
 80147c6:	480d      	ldr	r0, [pc, #52]	; (80147fc <__multadd+0x88>)
 80147c8:	21b5      	movs	r1, #181	; 0xb5
 80147ca:	f000 feff 	bl	80155cc <__assert_func>
 80147ce:	6922      	ldr	r2, [r4, #16]
 80147d0:	3202      	adds	r2, #2
 80147d2:	f104 010c 	add.w	r1, r4, #12
 80147d6:	0092      	lsls	r2, r2, #2
 80147d8:	300c      	adds	r0, #12
 80147da:	f7fd f96d 	bl	8011ab8 <memcpy>
 80147de:	4621      	mov	r1, r4
 80147e0:	4638      	mov	r0, r7
 80147e2:	f7ff ffa5 	bl	8014730 <_Bfree>
 80147e6:	4644      	mov	r4, r8
 80147e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80147ec:	3501      	adds	r5, #1
 80147ee:	615e      	str	r6, [r3, #20]
 80147f0:	6125      	str	r5, [r4, #16]
 80147f2:	4620      	mov	r0, r4
 80147f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147f8:	08017b17 	.word	0x08017b17
 80147fc:	08017ba4 	.word	0x08017ba4

08014800 <__s2b>:
 8014800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014804:	460c      	mov	r4, r1
 8014806:	4615      	mov	r5, r2
 8014808:	461f      	mov	r7, r3
 801480a:	2209      	movs	r2, #9
 801480c:	3308      	adds	r3, #8
 801480e:	4606      	mov	r6, r0
 8014810:	fb93 f3f2 	sdiv	r3, r3, r2
 8014814:	2100      	movs	r1, #0
 8014816:	2201      	movs	r2, #1
 8014818:	429a      	cmp	r2, r3
 801481a:	db09      	blt.n	8014830 <__s2b+0x30>
 801481c:	4630      	mov	r0, r6
 801481e:	f7ff ff47 	bl	80146b0 <_Balloc>
 8014822:	b940      	cbnz	r0, 8014836 <__s2b+0x36>
 8014824:	4602      	mov	r2, r0
 8014826:	4b19      	ldr	r3, [pc, #100]	; (801488c <__s2b+0x8c>)
 8014828:	4819      	ldr	r0, [pc, #100]	; (8014890 <__s2b+0x90>)
 801482a:	21ce      	movs	r1, #206	; 0xce
 801482c:	f000 fece 	bl	80155cc <__assert_func>
 8014830:	0052      	lsls	r2, r2, #1
 8014832:	3101      	adds	r1, #1
 8014834:	e7f0      	b.n	8014818 <__s2b+0x18>
 8014836:	9b08      	ldr	r3, [sp, #32]
 8014838:	6143      	str	r3, [r0, #20]
 801483a:	2d09      	cmp	r5, #9
 801483c:	f04f 0301 	mov.w	r3, #1
 8014840:	6103      	str	r3, [r0, #16]
 8014842:	dd16      	ble.n	8014872 <__s2b+0x72>
 8014844:	f104 0909 	add.w	r9, r4, #9
 8014848:	46c8      	mov	r8, r9
 801484a:	442c      	add	r4, r5
 801484c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014850:	4601      	mov	r1, r0
 8014852:	3b30      	subs	r3, #48	; 0x30
 8014854:	220a      	movs	r2, #10
 8014856:	4630      	mov	r0, r6
 8014858:	f7ff ff8c 	bl	8014774 <__multadd>
 801485c:	45a0      	cmp	r8, r4
 801485e:	d1f5      	bne.n	801484c <__s2b+0x4c>
 8014860:	f1a5 0408 	sub.w	r4, r5, #8
 8014864:	444c      	add	r4, r9
 8014866:	1b2d      	subs	r5, r5, r4
 8014868:	1963      	adds	r3, r4, r5
 801486a:	42bb      	cmp	r3, r7
 801486c:	db04      	blt.n	8014878 <__s2b+0x78>
 801486e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014872:	340a      	adds	r4, #10
 8014874:	2509      	movs	r5, #9
 8014876:	e7f6      	b.n	8014866 <__s2b+0x66>
 8014878:	f814 3b01 	ldrb.w	r3, [r4], #1
 801487c:	4601      	mov	r1, r0
 801487e:	3b30      	subs	r3, #48	; 0x30
 8014880:	220a      	movs	r2, #10
 8014882:	4630      	mov	r0, r6
 8014884:	f7ff ff76 	bl	8014774 <__multadd>
 8014888:	e7ee      	b.n	8014868 <__s2b+0x68>
 801488a:	bf00      	nop
 801488c:	08017b17 	.word	0x08017b17
 8014890:	08017ba4 	.word	0x08017ba4

08014894 <__hi0bits>:
 8014894:	0c03      	lsrs	r3, r0, #16
 8014896:	041b      	lsls	r3, r3, #16
 8014898:	b9d3      	cbnz	r3, 80148d0 <__hi0bits+0x3c>
 801489a:	0400      	lsls	r0, r0, #16
 801489c:	2310      	movs	r3, #16
 801489e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80148a2:	bf04      	itt	eq
 80148a4:	0200      	lsleq	r0, r0, #8
 80148a6:	3308      	addeq	r3, #8
 80148a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80148ac:	bf04      	itt	eq
 80148ae:	0100      	lsleq	r0, r0, #4
 80148b0:	3304      	addeq	r3, #4
 80148b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80148b6:	bf04      	itt	eq
 80148b8:	0080      	lsleq	r0, r0, #2
 80148ba:	3302      	addeq	r3, #2
 80148bc:	2800      	cmp	r0, #0
 80148be:	db05      	blt.n	80148cc <__hi0bits+0x38>
 80148c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80148c4:	f103 0301 	add.w	r3, r3, #1
 80148c8:	bf08      	it	eq
 80148ca:	2320      	moveq	r3, #32
 80148cc:	4618      	mov	r0, r3
 80148ce:	4770      	bx	lr
 80148d0:	2300      	movs	r3, #0
 80148d2:	e7e4      	b.n	801489e <__hi0bits+0xa>

080148d4 <__lo0bits>:
 80148d4:	6803      	ldr	r3, [r0, #0]
 80148d6:	f013 0207 	ands.w	r2, r3, #7
 80148da:	4601      	mov	r1, r0
 80148dc:	d00b      	beq.n	80148f6 <__lo0bits+0x22>
 80148de:	07da      	lsls	r2, r3, #31
 80148e0:	d423      	bmi.n	801492a <__lo0bits+0x56>
 80148e2:	0798      	lsls	r0, r3, #30
 80148e4:	bf49      	itett	mi
 80148e6:	085b      	lsrmi	r3, r3, #1
 80148e8:	089b      	lsrpl	r3, r3, #2
 80148ea:	2001      	movmi	r0, #1
 80148ec:	600b      	strmi	r3, [r1, #0]
 80148ee:	bf5c      	itt	pl
 80148f0:	600b      	strpl	r3, [r1, #0]
 80148f2:	2002      	movpl	r0, #2
 80148f4:	4770      	bx	lr
 80148f6:	b298      	uxth	r0, r3
 80148f8:	b9a8      	cbnz	r0, 8014926 <__lo0bits+0x52>
 80148fa:	0c1b      	lsrs	r3, r3, #16
 80148fc:	2010      	movs	r0, #16
 80148fe:	b2da      	uxtb	r2, r3
 8014900:	b90a      	cbnz	r2, 8014906 <__lo0bits+0x32>
 8014902:	3008      	adds	r0, #8
 8014904:	0a1b      	lsrs	r3, r3, #8
 8014906:	071a      	lsls	r2, r3, #28
 8014908:	bf04      	itt	eq
 801490a:	091b      	lsreq	r3, r3, #4
 801490c:	3004      	addeq	r0, #4
 801490e:	079a      	lsls	r2, r3, #30
 8014910:	bf04      	itt	eq
 8014912:	089b      	lsreq	r3, r3, #2
 8014914:	3002      	addeq	r0, #2
 8014916:	07da      	lsls	r2, r3, #31
 8014918:	d403      	bmi.n	8014922 <__lo0bits+0x4e>
 801491a:	085b      	lsrs	r3, r3, #1
 801491c:	f100 0001 	add.w	r0, r0, #1
 8014920:	d005      	beq.n	801492e <__lo0bits+0x5a>
 8014922:	600b      	str	r3, [r1, #0]
 8014924:	4770      	bx	lr
 8014926:	4610      	mov	r0, r2
 8014928:	e7e9      	b.n	80148fe <__lo0bits+0x2a>
 801492a:	2000      	movs	r0, #0
 801492c:	4770      	bx	lr
 801492e:	2020      	movs	r0, #32
 8014930:	4770      	bx	lr
	...

08014934 <__i2b>:
 8014934:	b510      	push	{r4, lr}
 8014936:	460c      	mov	r4, r1
 8014938:	2101      	movs	r1, #1
 801493a:	f7ff feb9 	bl	80146b0 <_Balloc>
 801493e:	4602      	mov	r2, r0
 8014940:	b928      	cbnz	r0, 801494e <__i2b+0x1a>
 8014942:	4b05      	ldr	r3, [pc, #20]	; (8014958 <__i2b+0x24>)
 8014944:	4805      	ldr	r0, [pc, #20]	; (801495c <__i2b+0x28>)
 8014946:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801494a:	f000 fe3f 	bl	80155cc <__assert_func>
 801494e:	2301      	movs	r3, #1
 8014950:	6144      	str	r4, [r0, #20]
 8014952:	6103      	str	r3, [r0, #16]
 8014954:	bd10      	pop	{r4, pc}
 8014956:	bf00      	nop
 8014958:	08017b17 	.word	0x08017b17
 801495c:	08017ba4 	.word	0x08017ba4

08014960 <__multiply>:
 8014960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014964:	4691      	mov	r9, r2
 8014966:	690a      	ldr	r2, [r1, #16]
 8014968:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801496c:	429a      	cmp	r2, r3
 801496e:	bfb8      	it	lt
 8014970:	460b      	movlt	r3, r1
 8014972:	460c      	mov	r4, r1
 8014974:	bfbc      	itt	lt
 8014976:	464c      	movlt	r4, r9
 8014978:	4699      	movlt	r9, r3
 801497a:	6927      	ldr	r7, [r4, #16]
 801497c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014980:	68a3      	ldr	r3, [r4, #8]
 8014982:	6861      	ldr	r1, [r4, #4]
 8014984:	eb07 060a 	add.w	r6, r7, sl
 8014988:	42b3      	cmp	r3, r6
 801498a:	b085      	sub	sp, #20
 801498c:	bfb8      	it	lt
 801498e:	3101      	addlt	r1, #1
 8014990:	f7ff fe8e 	bl	80146b0 <_Balloc>
 8014994:	b930      	cbnz	r0, 80149a4 <__multiply+0x44>
 8014996:	4602      	mov	r2, r0
 8014998:	4b44      	ldr	r3, [pc, #272]	; (8014aac <__multiply+0x14c>)
 801499a:	4845      	ldr	r0, [pc, #276]	; (8014ab0 <__multiply+0x150>)
 801499c:	f240 115d 	movw	r1, #349	; 0x15d
 80149a0:	f000 fe14 	bl	80155cc <__assert_func>
 80149a4:	f100 0514 	add.w	r5, r0, #20
 80149a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80149ac:	462b      	mov	r3, r5
 80149ae:	2200      	movs	r2, #0
 80149b0:	4543      	cmp	r3, r8
 80149b2:	d321      	bcc.n	80149f8 <__multiply+0x98>
 80149b4:	f104 0314 	add.w	r3, r4, #20
 80149b8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80149bc:	f109 0314 	add.w	r3, r9, #20
 80149c0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80149c4:	9202      	str	r2, [sp, #8]
 80149c6:	1b3a      	subs	r2, r7, r4
 80149c8:	3a15      	subs	r2, #21
 80149ca:	f022 0203 	bic.w	r2, r2, #3
 80149ce:	3204      	adds	r2, #4
 80149d0:	f104 0115 	add.w	r1, r4, #21
 80149d4:	428f      	cmp	r7, r1
 80149d6:	bf38      	it	cc
 80149d8:	2204      	movcc	r2, #4
 80149da:	9201      	str	r2, [sp, #4]
 80149dc:	9a02      	ldr	r2, [sp, #8]
 80149de:	9303      	str	r3, [sp, #12]
 80149e0:	429a      	cmp	r2, r3
 80149e2:	d80c      	bhi.n	80149fe <__multiply+0x9e>
 80149e4:	2e00      	cmp	r6, #0
 80149e6:	dd03      	ble.n	80149f0 <__multiply+0x90>
 80149e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d05a      	beq.n	8014aa6 <__multiply+0x146>
 80149f0:	6106      	str	r6, [r0, #16]
 80149f2:	b005      	add	sp, #20
 80149f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149f8:	f843 2b04 	str.w	r2, [r3], #4
 80149fc:	e7d8      	b.n	80149b0 <__multiply+0x50>
 80149fe:	f8b3 a000 	ldrh.w	sl, [r3]
 8014a02:	f1ba 0f00 	cmp.w	sl, #0
 8014a06:	d024      	beq.n	8014a52 <__multiply+0xf2>
 8014a08:	f104 0e14 	add.w	lr, r4, #20
 8014a0c:	46a9      	mov	r9, r5
 8014a0e:	f04f 0c00 	mov.w	ip, #0
 8014a12:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014a16:	f8d9 1000 	ldr.w	r1, [r9]
 8014a1a:	fa1f fb82 	uxth.w	fp, r2
 8014a1e:	b289      	uxth	r1, r1
 8014a20:	fb0a 110b 	mla	r1, sl, fp, r1
 8014a24:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014a28:	f8d9 2000 	ldr.w	r2, [r9]
 8014a2c:	4461      	add	r1, ip
 8014a2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014a32:	fb0a c20b 	mla	r2, sl, fp, ip
 8014a36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014a3a:	b289      	uxth	r1, r1
 8014a3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014a40:	4577      	cmp	r7, lr
 8014a42:	f849 1b04 	str.w	r1, [r9], #4
 8014a46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014a4a:	d8e2      	bhi.n	8014a12 <__multiply+0xb2>
 8014a4c:	9a01      	ldr	r2, [sp, #4]
 8014a4e:	f845 c002 	str.w	ip, [r5, r2]
 8014a52:	9a03      	ldr	r2, [sp, #12]
 8014a54:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014a58:	3304      	adds	r3, #4
 8014a5a:	f1b9 0f00 	cmp.w	r9, #0
 8014a5e:	d020      	beq.n	8014aa2 <__multiply+0x142>
 8014a60:	6829      	ldr	r1, [r5, #0]
 8014a62:	f104 0c14 	add.w	ip, r4, #20
 8014a66:	46ae      	mov	lr, r5
 8014a68:	f04f 0a00 	mov.w	sl, #0
 8014a6c:	f8bc b000 	ldrh.w	fp, [ip]
 8014a70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014a74:	fb09 220b 	mla	r2, r9, fp, r2
 8014a78:	4492      	add	sl, r2
 8014a7a:	b289      	uxth	r1, r1
 8014a7c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8014a80:	f84e 1b04 	str.w	r1, [lr], #4
 8014a84:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014a88:	f8be 1000 	ldrh.w	r1, [lr]
 8014a8c:	0c12      	lsrs	r2, r2, #16
 8014a8e:	fb09 1102 	mla	r1, r9, r2, r1
 8014a92:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8014a96:	4567      	cmp	r7, ip
 8014a98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014a9c:	d8e6      	bhi.n	8014a6c <__multiply+0x10c>
 8014a9e:	9a01      	ldr	r2, [sp, #4]
 8014aa0:	50a9      	str	r1, [r5, r2]
 8014aa2:	3504      	adds	r5, #4
 8014aa4:	e79a      	b.n	80149dc <__multiply+0x7c>
 8014aa6:	3e01      	subs	r6, #1
 8014aa8:	e79c      	b.n	80149e4 <__multiply+0x84>
 8014aaa:	bf00      	nop
 8014aac:	08017b17 	.word	0x08017b17
 8014ab0:	08017ba4 	.word	0x08017ba4

08014ab4 <__pow5mult>:
 8014ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ab8:	4615      	mov	r5, r2
 8014aba:	f012 0203 	ands.w	r2, r2, #3
 8014abe:	4606      	mov	r6, r0
 8014ac0:	460f      	mov	r7, r1
 8014ac2:	d007      	beq.n	8014ad4 <__pow5mult+0x20>
 8014ac4:	4c25      	ldr	r4, [pc, #148]	; (8014b5c <__pow5mult+0xa8>)
 8014ac6:	3a01      	subs	r2, #1
 8014ac8:	2300      	movs	r3, #0
 8014aca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014ace:	f7ff fe51 	bl	8014774 <__multadd>
 8014ad2:	4607      	mov	r7, r0
 8014ad4:	10ad      	asrs	r5, r5, #2
 8014ad6:	d03d      	beq.n	8014b54 <__pow5mult+0xa0>
 8014ad8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014ada:	b97c      	cbnz	r4, 8014afc <__pow5mult+0x48>
 8014adc:	2010      	movs	r0, #16
 8014ade:	f7ff fdcd 	bl	801467c <malloc>
 8014ae2:	4602      	mov	r2, r0
 8014ae4:	6270      	str	r0, [r6, #36]	; 0x24
 8014ae6:	b928      	cbnz	r0, 8014af4 <__pow5mult+0x40>
 8014ae8:	4b1d      	ldr	r3, [pc, #116]	; (8014b60 <__pow5mult+0xac>)
 8014aea:	481e      	ldr	r0, [pc, #120]	; (8014b64 <__pow5mult+0xb0>)
 8014aec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014af0:	f000 fd6c 	bl	80155cc <__assert_func>
 8014af4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014af8:	6004      	str	r4, [r0, #0]
 8014afa:	60c4      	str	r4, [r0, #12]
 8014afc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014b00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014b04:	b94c      	cbnz	r4, 8014b1a <__pow5mult+0x66>
 8014b06:	f240 2171 	movw	r1, #625	; 0x271
 8014b0a:	4630      	mov	r0, r6
 8014b0c:	f7ff ff12 	bl	8014934 <__i2b>
 8014b10:	2300      	movs	r3, #0
 8014b12:	f8c8 0008 	str.w	r0, [r8, #8]
 8014b16:	4604      	mov	r4, r0
 8014b18:	6003      	str	r3, [r0, #0]
 8014b1a:	f04f 0900 	mov.w	r9, #0
 8014b1e:	07eb      	lsls	r3, r5, #31
 8014b20:	d50a      	bpl.n	8014b38 <__pow5mult+0x84>
 8014b22:	4639      	mov	r1, r7
 8014b24:	4622      	mov	r2, r4
 8014b26:	4630      	mov	r0, r6
 8014b28:	f7ff ff1a 	bl	8014960 <__multiply>
 8014b2c:	4639      	mov	r1, r7
 8014b2e:	4680      	mov	r8, r0
 8014b30:	4630      	mov	r0, r6
 8014b32:	f7ff fdfd 	bl	8014730 <_Bfree>
 8014b36:	4647      	mov	r7, r8
 8014b38:	106d      	asrs	r5, r5, #1
 8014b3a:	d00b      	beq.n	8014b54 <__pow5mult+0xa0>
 8014b3c:	6820      	ldr	r0, [r4, #0]
 8014b3e:	b938      	cbnz	r0, 8014b50 <__pow5mult+0x9c>
 8014b40:	4622      	mov	r2, r4
 8014b42:	4621      	mov	r1, r4
 8014b44:	4630      	mov	r0, r6
 8014b46:	f7ff ff0b 	bl	8014960 <__multiply>
 8014b4a:	6020      	str	r0, [r4, #0]
 8014b4c:	f8c0 9000 	str.w	r9, [r0]
 8014b50:	4604      	mov	r4, r0
 8014b52:	e7e4      	b.n	8014b1e <__pow5mult+0x6a>
 8014b54:	4638      	mov	r0, r7
 8014b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b5a:	bf00      	nop
 8014b5c:	08017cf0 	.word	0x08017cf0
 8014b60:	08017aa5 	.word	0x08017aa5
 8014b64:	08017ba4 	.word	0x08017ba4

08014b68 <__lshift>:
 8014b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b6c:	460c      	mov	r4, r1
 8014b6e:	6849      	ldr	r1, [r1, #4]
 8014b70:	6923      	ldr	r3, [r4, #16]
 8014b72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014b76:	68a3      	ldr	r3, [r4, #8]
 8014b78:	4607      	mov	r7, r0
 8014b7a:	4691      	mov	r9, r2
 8014b7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014b80:	f108 0601 	add.w	r6, r8, #1
 8014b84:	42b3      	cmp	r3, r6
 8014b86:	db0b      	blt.n	8014ba0 <__lshift+0x38>
 8014b88:	4638      	mov	r0, r7
 8014b8a:	f7ff fd91 	bl	80146b0 <_Balloc>
 8014b8e:	4605      	mov	r5, r0
 8014b90:	b948      	cbnz	r0, 8014ba6 <__lshift+0x3e>
 8014b92:	4602      	mov	r2, r0
 8014b94:	4b2a      	ldr	r3, [pc, #168]	; (8014c40 <__lshift+0xd8>)
 8014b96:	482b      	ldr	r0, [pc, #172]	; (8014c44 <__lshift+0xdc>)
 8014b98:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014b9c:	f000 fd16 	bl	80155cc <__assert_func>
 8014ba0:	3101      	adds	r1, #1
 8014ba2:	005b      	lsls	r3, r3, #1
 8014ba4:	e7ee      	b.n	8014b84 <__lshift+0x1c>
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	f100 0114 	add.w	r1, r0, #20
 8014bac:	f100 0210 	add.w	r2, r0, #16
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	4553      	cmp	r3, sl
 8014bb4:	db37      	blt.n	8014c26 <__lshift+0xbe>
 8014bb6:	6920      	ldr	r0, [r4, #16]
 8014bb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014bbc:	f104 0314 	add.w	r3, r4, #20
 8014bc0:	f019 091f 	ands.w	r9, r9, #31
 8014bc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014bc8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014bcc:	d02f      	beq.n	8014c2e <__lshift+0xc6>
 8014bce:	f1c9 0e20 	rsb	lr, r9, #32
 8014bd2:	468a      	mov	sl, r1
 8014bd4:	f04f 0c00 	mov.w	ip, #0
 8014bd8:	681a      	ldr	r2, [r3, #0]
 8014bda:	fa02 f209 	lsl.w	r2, r2, r9
 8014bde:	ea42 020c 	orr.w	r2, r2, ip
 8014be2:	f84a 2b04 	str.w	r2, [sl], #4
 8014be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bea:	4298      	cmp	r0, r3
 8014bec:	fa22 fc0e 	lsr.w	ip, r2, lr
 8014bf0:	d8f2      	bhi.n	8014bd8 <__lshift+0x70>
 8014bf2:	1b03      	subs	r3, r0, r4
 8014bf4:	3b15      	subs	r3, #21
 8014bf6:	f023 0303 	bic.w	r3, r3, #3
 8014bfa:	3304      	adds	r3, #4
 8014bfc:	f104 0215 	add.w	r2, r4, #21
 8014c00:	4290      	cmp	r0, r2
 8014c02:	bf38      	it	cc
 8014c04:	2304      	movcc	r3, #4
 8014c06:	f841 c003 	str.w	ip, [r1, r3]
 8014c0a:	f1bc 0f00 	cmp.w	ip, #0
 8014c0e:	d001      	beq.n	8014c14 <__lshift+0xac>
 8014c10:	f108 0602 	add.w	r6, r8, #2
 8014c14:	3e01      	subs	r6, #1
 8014c16:	4638      	mov	r0, r7
 8014c18:	612e      	str	r6, [r5, #16]
 8014c1a:	4621      	mov	r1, r4
 8014c1c:	f7ff fd88 	bl	8014730 <_Bfree>
 8014c20:	4628      	mov	r0, r5
 8014c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c26:	f842 0f04 	str.w	r0, [r2, #4]!
 8014c2a:	3301      	adds	r3, #1
 8014c2c:	e7c1      	b.n	8014bb2 <__lshift+0x4a>
 8014c2e:	3904      	subs	r1, #4
 8014c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c34:	f841 2f04 	str.w	r2, [r1, #4]!
 8014c38:	4298      	cmp	r0, r3
 8014c3a:	d8f9      	bhi.n	8014c30 <__lshift+0xc8>
 8014c3c:	e7ea      	b.n	8014c14 <__lshift+0xac>
 8014c3e:	bf00      	nop
 8014c40:	08017b17 	.word	0x08017b17
 8014c44:	08017ba4 	.word	0x08017ba4

08014c48 <__mcmp>:
 8014c48:	b530      	push	{r4, r5, lr}
 8014c4a:	6902      	ldr	r2, [r0, #16]
 8014c4c:	690c      	ldr	r4, [r1, #16]
 8014c4e:	1b12      	subs	r2, r2, r4
 8014c50:	d10e      	bne.n	8014c70 <__mcmp+0x28>
 8014c52:	f100 0314 	add.w	r3, r0, #20
 8014c56:	3114      	adds	r1, #20
 8014c58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014c5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014c60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014c64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014c68:	42a5      	cmp	r5, r4
 8014c6a:	d003      	beq.n	8014c74 <__mcmp+0x2c>
 8014c6c:	d305      	bcc.n	8014c7a <__mcmp+0x32>
 8014c6e:	2201      	movs	r2, #1
 8014c70:	4610      	mov	r0, r2
 8014c72:	bd30      	pop	{r4, r5, pc}
 8014c74:	4283      	cmp	r3, r0
 8014c76:	d3f3      	bcc.n	8014c60 <__mcmp+0x18>
 8014c78:	e7fa      	b.n	8014c70 <__mcmp+0x28>
 8014c7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014c7e:	e7f7      	b.n	8014c70 <__mcmp+0x28>

08014c80 <__mdiff>:
 8014c80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c84:	460c      	mov	r4, r1
 8014c86:	4606      	mov	r6, r0
 8014c88:	4611      	mov	r1, r2
 8014c8a:	4620      	mov	r0, r4
 8014c8c:	4690      	mov	r8, r2
 8014c8e:	f7ff ffdb 	bl	8014c48 <__mcmp>
 8014c92:	1e05      	subs	r5, r0, #0
 8014c94:	d110      	bne.n	8014cb8 <__mdiff+0x38>
 8014c96:	4629      	mov	r1, r5
 8014c98:	4630      	mov	r0, r6
 8014c9a:	f7ff fd09 	bl	80146b0 <_Balloc>
 8014c9e:	b930      	cbnz	r0, 8014cae <__mdiff+0x2e>
 8014ca0:	4b3a      	ldr	r3, [pc, #232]	; (8014d8c <__mdiff+0x10c>)
 8014ca2:	4602      	mov	r2, r0
 8014ca4:	f240 2132 	movw	r1, #562	; 0x232
 8014ca8:	4839      	ldr	r0, [pc, #228]	; (8014d90 <__mdiff+0x110>)
 8014caa:	f000 fc8f 	bl	80155cc <__assert_func>
 8014cae:	2301      	movs	r3, #1
 8014cb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014cb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cb8:	bfa4      	itt	ge
 8014cba:	4643      	movge	r3, r8
 8014cbc:	46a0      	movge	r8, r4
 8014cbe:	4630      	mov	r0, r6
 8014cc0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014cc4:	bfa6      	itte	ge
 8014cc6:	461c      	movge	r4, r3
 8014cc8:	2500      	movge	r5, #0
 8014cca:	2501      	movlt	r5, #1
 8014ccc:	f7ff fcf0 	bl	80146b0 <_Balloc>
 8014cd0:	b920      	cbnz	r0, 8014cdc <__mdiff+0x5c>
 8014cd2:	4b2e      	ldr	r3, [pc, #184]	; (8014d8c <__mdiff+0x10c>)
 8014cd4:	4602      	mov	r2, r0
 8014cd6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014cda:	e7e5      	b.n	8014ca8 <__mdiff+0x28>
 8014cdc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014ce0:	6926      	ldr	r6, [r4, #16]
 8014ce2:	60c5      	str	r5, [r0, #12]
 8014ce4:	f104 0914 	add.w	r9, r4, #20
 8014ce8:	f108 0514 	add.w	r5, r8, #20
 8014cec:	f100 0e14 	add.w	lr, r0, #20
 8014cf0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014cf4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014cf8:	f108 0210 	add.w	r2, r8, #16
 8014cfc:	46f2      	mov	sl, lr
 8014cfe:	2100      	movs	r1, #0
 8014d00:	f859 3b04 	ldr.w	r3, [r9], #4
 8014d04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014d08:	fa1f f883 	uxth.w	r8, r3
 8014d0c:	fa11 f18b 	uxtah	r1, r1, fp
 8014d10:	0c1b      	lsrs	r3, r3, #16
 8014d12:	eba1 0808 	sub.w	r8, r1, r8
 8014d16:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014d1a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014d1e:	fa1f f888 	uxth.w	r8, r8
 8014d22:	1419      	asrs	r1, r3, #16
 8014d24:	454e      	cmp	r6, r9
 8014d26:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014d2a:	f84a 3b04 	str.w	r3, [sl], #4
 8014d2e:	d8e7      	bhi.n	8014d00 <__mdiff+0x80>
 8014d30:	1b33      	subs	r3, r6, r4
 8014d32:	3b15      	subs	r3, #21
 8014d34:	f023 0303 	bic.w	r3, r3, #3
 8014d38:	3304      	adds	r3, #4
 8014d3a:	3415      	adds	r4, #21
 8014d3c:	42a6      	cmp	r6, r4
 8014d3e:	bf38      	it	cc
 8014d40:	2304      	movcc	r3, #4
 8014d42:	441d      	add	r5, r3
 8014d44:	4473      	add	r3, lr
 8014d46:	469e      	mov	lr, r3
 8014d48:	462e      	mov	r6, r5
 8014d4a:	4566      	cmp	r6, ip
 8014d4c:	d30e      	bcc.n	8014d6c <__mdiff+0xec>
 8014d4e:	f10c 0203 	add.w	r2, ip, #3
 8014d52:	1b52      	subs	r2, r2, r5
 8014d54:	f022 0203 	bic.w	r2, r2, #3
 8014d58:	3d03      	subs	r5, #3
 8014d5a:	45ac      	cmp	ip, r5
 8014d5c:	bf38      	it	cc
 8014d5e:	2200      	movcc	r2, #0
 8014d60:	441a      	add	r2, r3
 8014d62:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014d66:	b17b      	cbz	r3, 8014d88 <__mdiff+0x108>
 8014d68:	6107      	str	r7, [r0, #16]
 8014d6a:	e7a3      	b.n	8014cb4 <__mdiff+0x34>
 8014d6c:	f856 8b04 	ldr.w	r8, [r6], #4
 8014d70:	fa11 f288 	uxtah	r2, r1, r8
 8014d74:	1414      	asrs	r4, r2, #16
 8014d76:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014d7a:	b292      	uxth	r2, r2
 8014d7c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014d80:	f84e 2b04 	str.w	r2, [lr], #4
 8014d84:	1421      	asrs	r1, r4, #16
 8014d86:	e7e0      	b.n	8014d4a <__mdiff+0xca>
 8014d88:	3f01      	subs	r7, #1
 8014d8a:	e7ea      	b.n	8014d62 <__mdiff+0xe2>
 8014d8c:	08017b17 	.word	0x08017b17
 8014d90:	08017ba4 	.word	0x08017ba4

08014d94 <__ulp>:
 8014d94:	b082      	sub	sp, #8
 8014d96:	ed8d 0b00 	vstr	d0, [sp]
 8014d9a:	9b01      	ldr	r3, [sp, #4]
 8014d9c:	4912      	ldr	r1, [pc, #72]	; (8014de8 <__ulp+0x54>)
 8014d9e:	4019      	ands	r1, r3
 8014da0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8014da4:	2900      	cmp	r1, #0
 8014da6:	dd05      	ble.n	8014db4 <__ulp+0x20>
 8014da8:	2200      	movs	r2, #0
 8014daa:	460b      	mov	r3, r1
 8014dac:	ec43 2b10 	vmov	d0, r2, r3
 8014db0:	b002      	add	sp, #8
 8014db2:	4770      	bx	lr
 8014db4:	4249      	negs	r1, r1
 8014db6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8014dba:	ea4f 5021 	mov.w	r0, r1, asr #20
 8014dbe:	f04f 0200 	mov.w	r2, #0
 8014dc2:	f04f 0300 	mov.w	r3, #0
 8014dc6:	da04      	bge.n	8014dd2 <__ulp+0x3e>
 8014dc8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8014dcc:	fa41 f300 	asr.w	r3, r1, r0
 8014dd0:	e7ec      	b.n	8014dac <__ulp+0x18>
 8014dd2:	f1a0 0114 	sub.w	r1, r0, #20
 8014dd6:	291e      	cmp	r1, #30
 8014dd8:	bfda      	itte	le
 8014dda:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8014dde:	fa20 f101 	lsrle.w	r1, r0, r1
 8014de2:	2101      	movgt	r1, #1
 8014de4:	460a      	mov	r2, r1
 8014de6:	e7e1      	b.n	8014dac <__ulp+0x18>
 8014de8:	7ff00000 	.word	0x7ff00000

08014dec <__b2d>:
 8014dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dee:	6905      	ldr	r5, [r0, #16]
 8014df0:	f100 0714 	add.w	r7, r0, #20
 8014df4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014df8:	1f2e      	subs	r6, r5, #4
 8014dfa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8014dfe:	4620      	mov	r0, r4
 8014e00:	f7ff fd48 	bl	8014894 <__hi0bits>
 8014e04:	f1c0 0320 	rsb	r3, r0, #32
 8014e08:	280a      	cmp	r0, #10
 8014e0a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8014e88 <__b2d+0x9c>
 8014e0e:	600b      	str	r3, [r1, #0]
 8014e10:	dc14      	bgt.n	8014e3c <__b2d+0x50>
 8014e12:	f1c0 0e0b 	rsb	lr, r0, #11
 8014e16:	fa24 f10e 	lsr.w	r1, r4, lr
 8014e1a:	42b7      	cmp	r7, r6
 8014e1c:	ea41 030c 	orr.w	r3, r1, ip
 8014e20:	bf34      	ite	cc
 8014e22:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014e26:	2100      	movcs	r1, #0
 8014e28:	3015      	adds	r0, #21
 8014e2a:	fa04 f000 	lsl.w	r0, r4, r0
 8014e2e:	fa21 f10e 	lsr.w	r1, r1, lr
 8014e32:	ea40 0201 	orr.w	r2, r0, r1
 8014e36:	ec43 2b10 	vmov	d0, r2, r3
 8014e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e3c:	42b7      	cmp	r7, r6
 8014e3e:	bf3a      	itte	cc
 8014e40:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014e44:	f1a5 0608 	subcc.w	r6, r5, #8
 8014e48:	2100      	movcs	r1, #0
 8014e4a:	380b      	subs	r0, #11
 8014e4c:	d017      	beq.n	8014e7e <__b2d+0x92>
 8014e4e:	f1c0 0c20 	rsb	ip, r0, #32
 8014e52:	fa04 f500 	lsl.w	r5, r4, r0
 8014e56:	42be      	cmp	r6, r7
 8014e58:	fa21 f40c 	lsr.w	r4, r1, ip
 8014e5c:	ea45 0504 	orr.w	r5, r5, r4
 8014e60:	bf8c      	ite	hi
 8014e62:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8014e66:	2400      	movls	r4, #0
 8014e68:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8014e6c:	fa01 f000 	lsl.w	r0, r1, r0
 8014e70:	fa24 f40c 	lsr.w	r4, r4, ip
 8014e74:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014e78:	ea40 0204 	orr.w	r2, r0, r4
 8014e7c:	e7db      	b.n	8014e36 <__b2d+0x4a>
 8014e7e:	ea44 030c 	orr.w	r3, r4, ip
 8014e82:	460a      	mov	r2, r1
 8014e84:	e7d7      	b.n	8014e36 <__b2d+0x4a>
 8014e86:	bf00      	nop
 8014e88:	3ff00000 	.word	0x3ff00000

08014e8c <__d2b>:
 8014e8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014e90:	4689      	mov	r9, r1
 8014e92:	2101      	movs	r1, #1
 8014e94:	ec57 6b10 	vmov	r6, r7, d0
 8014e98:	4690      	mov	r8, r2
 8014e9a:	f7ff fc09 	bl	80146b0 <_Balloc>
 8014e9e:	4604      	mov	r4, r0
 8014ea0:	b930      	cbnz	r0, 8014eb0 <__d2b+0x24>
 8014ea2:	4602      	mov	r2, r0
 8014ea4:	4b25      	ldr	r3, [pc, #148]	; (8014f3c <__d2b+0xb0>)
 8014ea6:	4826      	ldr	r0, [pc, #152]	; (8014f40 <__d2b+0xb4>)
 8014ea8:	f240 310a 	movw	r1, #778	; 0x30a
 8014eac:	f000 fb8e 	bl	80155cc <__assert_func>
 8014eb0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014eb4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014eb8:	bb35      	cbnz	r5, 8014f08 <__d2b+0x7c>
 8014eba:	2e00      	cmp	r6, #0
 8014ebc:	9301      	str	r3, [sp, #4]
 8014ebe:	d028      	beq.n	8014f12 <__d2b+0x86>
 8014ec0:	4668      	mov	r0, sp
 8014ec2:	9600      	str	r6, [sp, #0]
 8014ec4:	f7ff fd06 	bl	80148d4 <__lo0bits>
 8014ec8:	9900      	ldr	r1, [sp, #0]
 8014eca:	b300      	cbz	r0, 8014f0e <__d2b+0x82>
 8014ecc:	9a01      	ldr	r2, [sp, #4]
 8014ece:	f1c0 0320 	rsb	r3, r0, #32
 8014ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8014ed6:	430b      	orrs	r3, r1
 8014ed8:	40c2      	lsrs	r2, r0
 8014eda:	6163      	str	r3, [r4, #20]
 8014edc:	9201      	str	r2, [sp, #4]
 8014ede:	9b01      	ldr	r3, [sp, #4]
 8014ee0:	61a3      	str	r3, [r4, #24]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	bf14      	ite	ne
 8014ee6:	2202      	movne	r2, #2
 8014ee8:	2201      	moveq	r2, #1
 8014eea:	6122      	str	r2, [r4, #16]
 8014eec:	b1d5      	cbz	r5, 8014f24 <__d2b+0x98>
 8014eee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014ef2:	4405      	add	r5, r0
 8014ef4:	f8c9 5000 	str.w	r5, [r9]
 8014ef8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014efc:	f8c8 0000 	str.w	r0, [r8]
 8014f00:	4620      	mov	r0, r4
 8014f02:	b003      	add	sp, #12
 8014f04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014f0c:	e7d5      	b.n	8014eba <__d2b+0x2e>
 8014f0e:	6161      	str	r1, [r4, #20]
 8014f10:	e7e5      	b.n	8014ede <__d2b+0x52>
 8014f12:	a801      	add	r0, sp, #4
 8014f14:	f7ff fcde 	bl	80148d4 <__lo0bits>
 8014f18:	9b01      	ldr	r3, [sp, #4]
 8014f1a:	6163      	str	r3, [r4, #20]
 8014f1c:	2201      	movs	r2, #1
 8014f1e:	6122      	str	r2, [r4, #16]
 8014f20:	3020      	adds	r0, #32
 8014f22:	e7e3      	b.n	8014eec <__d2b+0x60>
 8014f24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014f28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014f2c:	f8c9 0000 	str.w	r0, [r9]
 8014f30:	6918      	ldr	r0, [r3, #16]
 8014f32:	f7ff fcaf 	bl	8014894 <__hi0bits>
 8014f36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014f3a:	e7df      	b.n	8014efc <__d2b+0x70>
 8014f3c:	08017b17 	.word	0x08017b17
 8014f40:	08017ba4 	.word	0x08017ba4

08014f44 <__ratio>:
 8014f44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f48:	4688      	mov	r8, r1
 8014f4a:	4669      	mov	r1, sp
 8014f4c:	4681      	mov	r9, r0
 8014f4e:	f7ff ff4d 	bl	8014dec <__b2d>
 8014f52:	a901      	add	r1, sp, #4
 8014f54:	4640      	mov	r0, r8
 8014f56:	ec55 4b10 	vmov	r4, r5, d0
 8014f5a:	f7ff ff47 	bl	8014dec <__b2d>
 8014f5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014f62:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014f66:	eba3 0c02 	sub.w	ip, r3, r2
 8014f6a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014f6e:	1a9b      	subs	r3, r3, r2
 8014f70:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014f74:	ec51 0b10 	vmov	r0, r1, d0
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	bfd6      	itet	le
 8014f7c:	460a      	movle	r2, r1
 8014f7e:	462a      	movgt	r2, r5
 8014f80:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014f84:	468b      	mov	fp, r1
 8014f86:	462f      	mov	r7, r5
 8014f88:	bfd4      	ite	le
 8014f8a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014f8e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014f92:	4620      	mov	r0, r4
 8014f94:	ee10 2a10 	vmov	r2, s0
 8014f98:	465b      	mov	r3, fp
 8014f9a:	4639      	mov	r1, r7
 8014f9c:	f7eb fc56 	bl	800084c <__aeabi_ddiv>
 8014fa0:	ec41 0b10 	vmov	d0, r0, r1
 8014fa4:	b003      	add	sp, #12
 8014fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014faa <__copybits>:
 8014faa:	3901      	subs	r1, #1
 8014fac:	b570      	push	{r4, r5, r6, lr}
 8014fae:	1149      	asrs	r1, r1, #5
 8014fb0:	6914      	ldr	r4, [r2, #16]
 8014fb2:	3101      	adds	r1, #1
 8014fb4:	f102 0314 	add.w	r3, r2, #20
 8014fb8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014fbc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014fc0:	1f05      	subs	r5, r0, #4
 8014fc2:	42a3      	cmp	r3, r4
 8014fc4:	d30c      	bcc.n	8014fe0 <__copybits+0x36>
 8014fc6:	1aa3      	subs	r3, r4, r2
 8014fc8:	3b11      	subs	r3, #17
 8014fca:	f023 0303 	bic.w	r3, r3, #3
 8014fce:	3211      	adds	r2, #17
 8014fd0:	42a2      	cmp	r2, r4
 8014fd2:	bf88      	it	hi
 8014fd4:	2300      	movhi	r3, #0
 8014fd6:	4418      	add	r0, r3
 8014fd8:	2300      	movs	r3, #0
 8014fda:	4288      	cmp	r0, r1
 8014fdc:	d305      	bcc.n	8014fea <__copybits+0x40>
 8014fde:	bd70      	pop	{r4, r5, r6, pc}
 8014fe0:	f853 6b04 	ldr.w	r6, [r3], #4
 8014fe4:	f845 6f04 	str.w	r6, [r5, #4]!
 8014fe8:	e7eb      	b.n	8014fc2 <__copybits+0x18>
 8014fea:	f840 3b04 	str.w	r3, [r0], #4
 8014fee:	e7f4      	b.n	8014fda <__copybits+0x30>

08014ff0 <__any_on>:
 8014ff0:	f100 0214 	add.w	r2, r0, #20
 8014ff4:	6900      	ldr	r0, [r0, #16]
 8014ff6:	114b      	asrs	r3, r1, #5
 8014ff8:	4298      	cmp	r0, r3
 8014ffa:	b510      	push	{r4, lr}
 8014ffc:	db11      	blt.n	8015022 <__any_on+0x32>
 8014ffe:	dd0a      	ble.n	8015016 <__any_on+0x26>
 8015000:	f011 011f 	ands.w	r1, r1, #31
 8015004:	d007      	beq.n	8015016 <__any_on+0x26>
 8015006:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801500a:	fa24 f001 	lsr.w	r0, r4, r1
 801500e:	fa00 f101 	lsl.w	r1, r0, r1
 8015012:	428c      	cmp	r4, r1
 8015014:	d10b      	bne.n	801502e <__any_on+0x3e>
 8015016:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801501a:	4293      	cmp	r3, r2
 801501c:	d803      	bhi.n	8015026 <__any_on+0x36>
 801501e:	2000      	movs	r0, #0
 8015020:	bd10      	pop	{r4, pc}
 8015022:	4603      	mov	r3, r0
 8015024:	e7f7      	b.n	8015016 <__any_on+0x26>
 8015026:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801502a:	2900      	cmp	r1, #0
 801502c:	d0f5      	beq.n	801501a <__any_on+0x2a>
 801502e:	2001      	movs	r0, #1
 8015030:	e7f6      	b.n	8015020 <__any_on+0x30>

08015032 <_calloc_r>:
 8015032:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015034:	fba1 2402 	umull	r2, r4, r1, r2
 8015038:	b94c      	cbnz	r4, 801504e <_calloc_r+0x1c>
 801503a:	4611      	mov	r1, r2
 801503c:	9201      	str	r2, [sp, #4]
 801503e:	f000 f87b 	bl	8015138 <_malloc_r>
 8015042:	9a01      	ldr	r2, [sp, #4]
 8015044:	4605      	mov	r5, r0
 8015046:	b930      	cbnz	r0, 8015056 <_calloc_r+0x24>
 8015048:	4628      	mov	r0, r5
 801504a:	b003      	add	sp, #12
 801504c:	bd30      	pop	{r4, r5, pc}
 801504e:	220c      	movs	r2, #12
 8015050:	6002      	str	r2, [r0, #0]
 8015052:	2500      	movs	r5, #0
 8015054:	e7f8      	b.n	8015048 <_calloc_r+0x16>
 8015056:	4621      	mov	r1, r4
 8015058:	f7fc fd3c 	bl	8011ad4 <memset>
 801505c:	e7f4      	b.n	8015048 <_calloc_r+0x16>
	...

08015060 <_free_r>:
 8015060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015062:	2900      	cmp	r1, #0
 8015064:	d044      	beq.n	80150f0 <_free_r+0x90>
 8015066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801506a:	9001      	str	r0, [sp, #4]
 801506c:	2b00      	cmp	r3, #0
 801506e:	f1a1 0404 	sub.w	r4, r1, #4
 8015072:	bfb8      	it	lt
 8015074:	18e4      	addlt	r4, r4, r3
 8015076:	f000 fb15 	bl	80156a4 <__malloc_lock>
 801507a:	4a1e      	ldr	r2, [pc, #120]	; (80150f4 <_free_r+0x94>)
 801507c:	9801      	ldr	r0, [sp, #4]
 801507e:	6813      	ldr	r3, [r2, #0]
 8015080:	b933      	cbnz	r3, 8015090 <_free_r+0x30>
 8015082:	6063      	str	r3, [r4, #4]
 8015084:	6014      	str	r4, [r2, #0]
 8015086:	b003      	add	sp, #12
 8015088:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801508c:	f000 bb10 	b.w	80156b0 <__malloc_unlock>
 8015090:	42a3      	cmp	r3, r4
 8015092:	d908      	bls.n	80150a6 <_free_r+0x46>
 8015094:	6825      	ldr	r5, [r4, #0]
 8015096:	1961      	adds	r1, r4, r5
 8015098:	428b      	cmp	r3, r1
 801509a:	bf01      	itttt	eq
 801509c:	6819      	ldreq	r1, [r3, #0]
 801509e:	685b      	ldreq	r3, [r3, #4]
 80150a0:	1949      	addeq	r1, r1, r5
 80150a2:	6021      	streq	r1, [r4, #0]
 80150a4:	e7ed      	b.n	8015082 <_free_r+0x22>
 80150a6:	461a      	mov	r2, r3
 80150a8:	685b      	ldr	r3, [r3, #4]
 80150aa:	b10b      	cbz	r3, 80150b0 <_free_r+0x50>
 80150ac:	42a3      	cmp	r3, r4
 80150ae:	d9fa      	bls.n	80150a6 <_free_r+0x46>
 80150b0:	6811      	ldr	r1, [r2, #0]
 80150b2:	1855      	adds	r5, r2, r1
 80150b4:	42a5      	cmp	r5, r4
 80150b6:	d10b      	bne.n	80150d0 <_free_r+0x70>
 80150b8:	6824      	ldr	r4, [r4, #0]
 80150ba:	4421      	add	r1, r4
 80150bc:	1854      	adds	r4, r2, r1
 80150be:	42a3      	cmp	r3, r4
 80150c0:	6011      	str	r1, [r2, #0]
 80150c2:	d1e0      	bne.n	8015086 <_free_r+0x26>
 80150c4:	681c      	ldr	r4, [r3, #0]
 80150c6:	685b      	ldr	r3, [r3, #4]
 80150c8:	6053      	str	r3, [r2, #4]
 80150ca:	4421      	add	r1, r4
 80150cc:	6011      	str	r1, [r2, #0]
 80150ce:	e7da      	b.n	8015086 <_free_r+0x26>
 80150d0:	d902      	bls.n	80150d8 <_free_r+0x78>
 80150d2:	230c      	movs	r3, #12
 80150d4:	6003      	str	r3, [r0, #0]
 80150d6:	e7d6      	b.n	8015086 <_free_r+0x26>
 80150d8:	6825      	ldr	r5, [r4, #0]
 80150da:	1961      	adds	r1, r4, r5
 80150dc:	428b      	cmp	r3, r1
 80150de:	bf04      	itt	eq
 80150e0:	6819      	ldreq	r1, [r3, #0]
 80150e2:	685b      	ldreq	r3, [r3, #4]
 80150e4:	6063      	str	r3, [r4, #4]
 80150e6:	bf04      	itt	eq
 80150e8:	1949      	addeq	r1, r1, r5
 80150ea:	6021      	streq	r1, [r4, #0]
 80150ec:	6054      	str	r4, [r2, #4]
 80150ee:	e7ca      	b.n	8015086 <_free_r+0x26>
 80150f0:	b003      	add	sp, #12
 80150f2:	bd30      	pop	{r4, r5, pc}
 80150f4:	20004178 	.word	0x20004178

080150f8 <sbrk_aligned>:
 80150f8:	b570      	push	{r4, r5, r6, lr}
 80150fa:	4e0e      	ldr	r6, [pc, #56]	; (8015134 <sbrk_aligned+0x3c>)
 80150fc:	460c      	mov	r4, r1
 80150fe:	6831      	ldr	r1, [r6, #0]
 8015100:	4605      	mov	r5, r0
 8015102:	b911      	cbnz	r1, 801510a <sbrk_aligned+0x12>
 8015104:	f000 f9f0 	bl	80154e8 <_sbrk_r>
 8015108:	6030      	str	r0, [r6, #0]
 801510a:	4621      	mov	r1, r4
 801510c:	4628      	mov	r0, r5
 801510e:	f000 f9eb 	bl	80154e8 <_sbrk_r>
 8015112:	1c43      	adds	r3, r0, #1
 8015114:	d00a      	beq.n	801512c <sbrk_aligned+0x34>
 8015116:	1cc4      	adds	r4, r0, #3
 8015118:	f024 0403 	bic.w	r4, r4, #3
 801511c:	42a0      	cmp	r0, r4
 801511e:	d007      	beq.n	8015130 <sbrk_aligned+0x38>
 8015120:	1a21      	subs	r1, r4, r0
 8015122:	4628      	mov	r0, r5
 8015124:	f000 f9e0 	bl	80154e8 <_sbrk_r>
 8015128:	3001      	adds	r0, #1
 801512a:	d101      	bne.n	8015130 <sbrk_aligned+0x38>
 801512c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8015130:	4620      	mov	r0, r4
 8015132:	bd70      	pop	{r4, r5, r6, pc}
 8015134:	2000417c 	.word	0x2000417c

08015138 <_malloc_r>:
 8015138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801513c:	1ccd      	adds	r5, r1, #3
 801513e:	f025 0503 	bic.w	r5, r5, #3
 8015142:	3508      	adds	r5, #8
 8015144:	2d0c      	cmp	r5, #12
 8015146:	bf38      	it	cc
 8015148:	250c      	movcc	r5, #12
 801514a:	2d00      	cmp	r5, #0
 801514c:	4607      	mov	r7, r0
 801514e:	db01      	blt.n	8015154 <_malloc_r+0x1c>
 8015150:	42a9      	cmp	r1, r5
 8015152:	d905      	bls.n	8015160 <_malloc_r+0x28>
 8015154:	230c      	movs	r3, #12
 8015156:	603b      	str	r3, [r7, #0]
 8015158:	2600      	movs	r6, #0
 801515a:	4630      	mov	r0, r6
 801515c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015160:	4e2e      	ldr	r6, [pc, #184]	; (801521c <_malloc_r+0xe4>)
 8015162:	f000 fa9f 	bl	80156a4 <__malloc_lock>
 8015166:	6833      	ldr	r3, [r6, #0]
 8015168:	461c      	mov	r4, r3
 801516a:	bb34      	cbnz	r4, 80151ba <_malloc_r+0x82>
 801516c:	4629      	mov	r1, r5
 801516e:	4638      	mov	r0, r7
 8015170:	f7ff ffc2 	bl	80150f8 <sbrk_aligned>
 8015174:	1c43      	adds	r3, r0, #1
 8015176:	4604      	mov	r4, r0
 8015178:	d14d      	bne.n	8015216 <_malloc_r+0xde>
 801517a:	6834      	ldr	r4, [r6, #0]
 801517c:	4626      	mov	r6, r4
 801517e:	2e00      	cmp	r6, #0
 8015180:	d140      	bne.n	8015204 <_malloc_r+0xcc>
 8015182:	6823      	ldr	r3, [r4, #0]
 8015184:	4631      	mov	r1, r6
 8015186:	4638      	mov	r0, r7
 8015188:	eb04 0803 	add.w	r8, r4, r3
 801518c:	f000 f9ac 	bl	80154e8 <_sbrk_r>
 8015190:	4580      	cmp	r8, r0
 8015192:	d13a      	bne.n	801520a <_malloc_r+0xd2>
 8015194:	6821      	ldr	r1, [r4, #0]
 8015196:	3503      	adds	r5, #3
 8015198:	1a6d      	subs	r5, r5, r1
 801519a:	f025 0503 	bic.w	r5, r5, #3
 801519e:	3508      	adds	r5, #8
 80151a0:	2d0c      	cmp	r5, #12
 80151a2:	bf38      	it	cc
 80151a4:	250c      	movcc	r5, #12
 80151a6:	4629      	mov	r1, r5
 80151a8:	4638      	mov	r0, r7
 80151aa:	f7ff ffa5 	bl	80150f8 <sbrk_aligned>
 80151ae:	3001      	adds	r0, #1
 80151b0:	d02b      	beq.n	801520a <_malloc_r+0xd2>
 80151b2:	6823      	ldr	r3, [r4, #0]
 80151b4:	442b      	add	r3, r5
 80151b6:	6023      	str	r3, [r4, #0]
 80151b8:	e00e      	b.n	80151d8 <_malloc_r+0xa0>
 80151ba:	6822      	ldr	r2, [r4, #0]
 80151bc:	1b52      	subs	r2, r2, r5
 80151be:	d41e      	bmi.n	80151fe <_malloc_r+0xc6>
 80151c0:	2a0b      	cmp	r2, #11
 80151c2:	d916      	bls.n	80151f2 <_malloc_r+0xba>
 80151c4:	1961      	adds	r1, r4, r5
 80151c6:	42a3      	cmp	r3, r4
 80151c8:	6025      	str	r5, [r4, #0]
 80151ca:	bf18      	it	ne
 80151cc:	6059      	strne	r1, [r3, #4]
 80151ce:	6863      	ldr	r3, [r4, #4]
 80151d0:	bf08      	it	eq
 80151d2:	6031      	streq	r1, [r6, #0]
 80151d4:	5162      	str	r2, [r4, r5]
 80151d6:	604b      	str	r3, [r1, #4]
 80151d8:	4638      	mov	r0, r7
 80151da:	f104 060b 	add.w	r6, r4, #11
 80151de:	f000 fa67 	bl	80156b0 <__malloc_unlock>
 80151e2:	f026 0607 	bic.w	r6, r6, #7
 80151e6:	1d23      	adds	r3, r4, #4
 80151e8:	1af2      	subs	r2, r6, r3
 80151ea:	d0b6      	beq.n	801515a <_malloc_r+0x22>
 80151ec:	1b9b      	subs	r3, r3, r6
 80151ee:	50a3      	str	r3, [r4, r2]
 80151f0:	e7b3      	b.n	801515a <_malloc_r+0x22>
 80151f2:	6862      	ldr	r2, [r4, #4]
 80151f4:	42a3      	cmp	r3, r4
 80151f6:	bf0c      	ite	eq
 80151f8:	6032      	streq	r2, [r6, #0]
 80151fa:	605a      	strne	r2, [r3, #4]
 80151fc:	e7ec      	b.n	80151d8 <_malloc_r+0xa0>
 80151fe:	4623      	mov	r3, r4
 8015200:	6864      	ldr	r4, [r4, #4]
 8015202:	e7b2      	b.n	801516a <_malloc_r+0x32>
 8015204:	4634      	mov	r4, r6
 8015206:	6876      	ldr	r6, [r6, #4]
 8015208:	e7b9      	b.n	801517e <_malloc_r+0x46>
 801520a:	230c      	movs	r3, #12
 801520c:	603b      	str	r3, [r7, #0]
 801520e:	4638      	mov	r0, r7
 8015210:	f000 fa4e 	bl	80156b0 <__malloc_unlock>
 8015214:	e7a1      	b.n	801515a <_malloc_r+0x22>
 8015216:	6025      	str	r5, [r4, #0]
 8015218:	e7de      	b.n	80151d8 <_malloc_r+0xa0>
 801521a:	bf00      	nop
 801521c:	20004178 	.word	0x20004178

08015220 <__ssputs_r>:
 8015220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015224:	688e      	ldr	r6, [r1, #8]
 8015226:	429e      	cmp	r6, r3
 8015228:	4682      	mov	sl, r0
 801522a:	460c      	mov	r4, r1
 801522c:	4690      	mov	r8, r2
 801522e:	461f      	mov	r7, r3
 8015230:	d838      	bhi.n	80152a4 <__ssputs_r+0x84>
 8015232:	898a      	ldrh	r2, [r1, #12]
 8015234:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015238:	d032      	beq.n	80152a0 <__ssputs_r+0x80>
 801523a:	6825      	ldr	r5, [r4, #0]
 801523c:	6909      	ldr	r1, [r1, #16]
 801523e:	eba5 0901 	sub.w	r9, r5, r1
 8015242:	6965      	ldr	r5, [r4, #20]
 8015244:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015248:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801524c:	3301      	adds	r3, #1
 801524e:	444b      	add	r3, r9
 8015250:	106d      	asrs	r5, r5, #1
 8015252:	429d      	cmp	r5, r3
 8015254:	bf38      	it	cc
 8015256:	461d      	movcc	r5, r3
 8015258:	0553      	lsls	r3, r2, #21
 801525a:	d531      	bpl.n	80152c0 <__ssputs_r+0xa0>
 801525c:	4629      	mov	r1, r5
 801525e:	f7ff ff6b 	bl	8015138 <_malloc_r>
 8015262:	4606      	mov	r6, r0
 8015264:	b950      	cbnz	r0, 801527c <__ssputs_r+0x5c>
 8015266:	230c      	movs	r3, #12
 8015268:	f8ca 3000 	str.w	r3, [sl]
 801526c:	89a3      	ldrh	r3, [r4, #12]
 801526e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015272:	81a3      	strh	r3, [r4, #12]
 8015274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801527c:	6921      	ldr	r1, [r4, #16]
 801527e:	464a      	mov	r2, r9
 8015280:	f7fc fc1a 	bl	8011ab8 <memcpy>
 8015284:	89a3      	ldrh	r3, [r4, #12]
 8015286:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801528a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801528e:	81a3      	strh	r3, [r4, #12]
 8015290:	6126      	str	r6, [r4, #16]
 8015292:	6165      	str	r5, [r4, #20]
 8015294:	444e      	add	r6, r9
 8015296:	eba5 0509 	sub.w	r5, r5, r9
 801529a:	6026      	str	r6, [r4, #0]
 801529c:	60a5      	str	r5, [r4, #8]
 801529e:	463e      	mov	r6, r7
 80152a0:	42be      	cmp	r6, r7
 80152a2:	d900      	bls.n	80152a6 <__ssputs_r+0x86>
 80152a4:	463e      	mov	r6, r7
 80152a6:	6820      	ldr	r0, [r4, #0]
 80152a8:	4632      	mov	r2, r6
 80152aa:	4641      	mov	r1, r8
 80152ac:	f000 f9e0 	bl	8015670 <memmove>
 80152b0:	68a3      	ldr	r3, [r4, #8]
 80152b2:	1b9b      	subs	r3, r3, r6
 80152b4:	60a3      	str	r3, [r4, #8]
 80152b6:	6823      	ldr	r3, [r4, #0]
 80152b8:	4433      	add	r3, r6
 80152ba:	6023      	str	r3, [r4, #0]
 80152bc:	2000      	movs	r0, #0
 80152be:	e7db      	b.n	8015278 <__ssputs_r+0x58>
 80152c0:	462a      	mov	r2, r5
 80152c2:	f000 f9fb 	bl	80156bc <_realloc_r>
 80152c6:	4606      	mov	r6, r0
 80152c8:	2800      	cmp	r0, #0
 80152ca:	d1e1      	bne.n	8015290 <__ssputs_r+0x70>
 80152cc:	6921      	ldr	r1, [r4, #16]
 80152ce:	4650      	mov	r0, sl
 80152d0:	f7ff fec6 	bl	8015060 <_free_r>
 80152d4:	e7c7      	b.n	8015266 <__ssputs_r+0x46>
	...

080152d8 <_svfiprintf_r>:
 80152d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152dc:	4698      	mov	r8, r3
 80152de:	898b      	ldrh	r3, [r1, #12]
 80152e0:	061b      	lsls	r3, r3, #24
 80152e2:	b09d      	sub	sp, #116	; 0x74
 80152e4:	4607      	mov	r7, r0
 80152e6:	460d      	mov	r5, r1
 80152e8:	4614      	mov	r4, r2
 80152ea:	d50e      	bpl.n	801530a <_svfiprintf_r+0x32>
 80152ec:	690b      	ldr	r3, [r1, #16]
 80152ee:	b963      	cbnz	r3, 801530a <_svfiprintf_r+0x32>
 80152f0:	2140      	movs	r1, #64	; 0x40
 80152f2:	f7ff ff21 	bl	8015138 <_malloc_r>
 80152f6:	6028      	str	r0, [r5, #0]
 80152f8:	6128      	str	r0, [r5, #16]
 80152fa:	b920      	cbnz	r0, 8015306 <_svfiprintf_r+0x2e>
 80152fc:	230c      	movs	r3, #12
 80152fe:	603b      	str	r3, [r7, #0]
 8015300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015304:	e0d1      	b.n	80154aa <_svfiprintf_r+0x1d2>
 8015306:	2340      	movs	r3, #64	; 0x40
 8015308:	616b      	str	r3, [r5, #20]
 801530a:	2300      	movs	r3, #0
 801530c:	9309      	str	r3, [sp, #36]	; 0x24
 801530e:	2320      	movs	r3, #32
 8015310:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015314:	f8cd 800c 	str.w	r8, [sp, #12]
 8015318:	2330      	movs	r3, #48	; 0x30
 801531a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80154c4 <_svfiprintf_r+0x1ec>
 801531e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015322:	f04f 0901 	mov.w	r9, #1
 8015326:	4623      	mov	r3, r4
 8015328:	469a      	mov	sl, r3
 801532a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801532e:	b10a      	cbz	r2, 8015334 <_svfiprintf_r+0x5c>
 8015330:	2a25      	cmp	r2, #37	; 0x25
 8015332:	d1f9      	bne.n	8015328 <_svfiprintf_r+0x50>
 8015334:	ebba 0b04 	subs.w	fp, sl, r4
 8015338:	d00b      	beq.n	8015352 <_svfiprintf_r+0x7a>
 801533a:	465b      	mov	r3, fp
 801533c:	4622      	mov	r2, r4
 801533e:	4629      	mov	r1, r5
 8015340:	4638      	mov	r0, r7
 8015342:	f7ff ff6d 	bl	8015220 <__ssputs_r>
 8015346:	3001      	adds	r0, #1
 8015348:	f000 80aa 	beq.w	80154a0 <_svfiprintf_r+0x1c8>
 801534c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801534e:	445a      	add	r2, fp
 8015350:	9209      	str	r2, [sp, #36]	; 0x24
 8015352:	f89a 3000 	ldrb.w	r3, [sl]
 8015356:	2b00      	cmp	r3, #0
 8015358:	f000 80a2 	beq.w	80154a0 <_svfiprintf_r+0x1c8>
 801535c:	2300      	movs	r3, #0
 801535e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015362:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015366:	f10a 0a01 	add.w	sl, sl, #1
 801536a:	9304      	str	r3, [sp, #16]
 801536c:	9307      	str	r3, [sp, #28]
 801536e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015372:	931a      	str	r3, [sp, #104]	; 0x68
 8015374:	4654      	mov	r4, sl
 8015376:	2205      	movs	r2, #5
 8015378:	f814 1b01 	ldrb.w	r1, [r4], #1
 801537c:	4851      	ldr	r0, [pc, #324]	; (80154c4 <_svfiprintf_r+0x1ec>)
 801537e:	f7ea ff2f 	bl	80001e0 <memchr>
 8015382:	9a04      	ldr	r2, [sp, #16]
 8015384:	b9d8      	cbnz	r0, 80153be <_svfiprintf_r+0xe6>
 8015386:	06d0      	lsls	r0, r2, #27
 8015388:	bf44      	itt	mi
 801538a:	2320      	movmi	r3, #32
 801538c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015390:	0711      	lsls	r1, r2, #28
 8015392:	bf44      	itt	mi
 8015394:	232b      	movmi	r3, #43	; 0x2b
 8015396:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801539a:	f89a 3000 	ldrb.w	r3, [sl]
 801539e:	2b2a      	cmp	r3, #42	; 0x2a
 80153a0:	d015      	beq.n	80153ce <_svfiprintf_r+0xf6>
 80153a2:	9a07      	ldr	r2, [sp, #28]
 80153a4:	4654      	mov	r4, sl
 80153a6:	2000      	movs	r0, #0
 80153a8:	f04f 0c0a 	mov.w	ip, #10
 80153ac:	4621      	mov	r1, r4
 80153ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80153b2:	3b30      	subs	r3, #48	; 0x30
 80153b4:	2b09      	cmp	r3, #9
 80153b6:	d94e      	bls.n	8015456 <_svfiprintf_r+0x17e>
 80153b8:	b1b0      	cbz	r0, 80153e8 <_svfiprintf_r+0x110>
 80153ba:	9207      	str	r2, [sp, #28]
 80153bc:	e014      	b.n	80153e8 <_svfiprintf_r+0x110>
 80153be:	eba0 0308 	sub.w	r3, r0, r8
 80153c2:	fa09 f303 	lsl.w	r3, r9, r3
 80153c6:	4313      	orrs	r3, r2
 80153c8:	9304      	str	r3, [sp, #16]
 80153ca:	46a2      	mov	sl, r4
 80153cc:	e7d2      	b.n	8015374 <_svfiprintf_r+0x9c>
 80153ce:	9b03      	ldr	r3, [sp, #12]
 80153d0:	1d19      	adds	r1, r3, #4
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	9103      	str	r1, [sp, #12]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	bfbb      	ittet	lt
 80153da:	425b      	neglt	r3, r3
 80153dc:	f042 0202 	orrlt.w	r2, r2, #2
 80153e0:	9307      	strge	r3, [sp, #28]
 80153e2:	9307      	strlt	r3, [sp, #28]
 80153e4:	bfb8      	it	lt
 80153e6:	9204      	strlt	r2, [sp, #16]
 80153e8:	7823      	ldrb	r3, [r4, #0]
 80153ea:	2b2e      	cmp	r3, #46	; 0x2e
 80153ec:	d10c      	bne.n	8015408 <_svfiprintf_r+0x130>
 80153ee:	7863      	ldrb	r3, [r4, #1]
 80153f0:	2b2a      	cmp	r3, #42	; 0x2a
 80153f2:	d135      	bne.n	8015460 <_svfiprintf_r+0x188>
 80153f4:	9b03      	ldr	r3, [sp, #12]
 80153f6:	1d1a      	adds	r2, r3, #4
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	9203      	str	r2, [sp, #12]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	bfb8      	it	lt
 8015400:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015404:	3402      	adds	r4, #2
 8015406:	9305      	str	r3, [sp, #20]
 8015408:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80154d4 <_svfiprintf_r+0x1fc>
 801540c:	7821      	ldrb	r1, [r4, #0]
 801540e:	2203      	movs	r2, #3
 8015410:	4650      	mov	r0, sl
 8015412:	f7ea fee5 	bl	80001e0 <memchr>
 8015416:	b140      	cbz	r0, 801542a <_svfiprintf_r+0x152>
 8015418:	2340      	movs	r3, #64	; 0x40
 801541a:	eba0 000a 	sub.w	r0, r0, sl
 801541e:	fa03 f000 	lsl.w	r0, r3, r0
 8015422:	9b04      	ldr	r3, [sp, #16]
 8015424:	4303      	orrs	r3, r0
 8015426:	3401      	adds	r4, #1
 8015428:	9304      	str	r3, [sp, #16]
 801542a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801542e:	4826      	ldr	r0, [pc, #152]	; (80154c8 <_svfiprintf_r+0x1f0>)
 8015430:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015434:	2206      	movs	r2, #6
 8015436:	f7ea fed3 	bl	80001e0 <memchr>
 801543a:	2800      	cmp	r0, #0
 801543c:	d038      	beq.n	80154b0 <_svfiprintf_r+0x1d8>
 801543e:	4b23      	ldr	r3, [pc, #140]	; (80154cc <_svfiprintf_r+0x1f4>)
 8015440:	bb1b      	cbnz	r3, 801548a <_svfiprintf_r+0x1b2>
 8015442:	9b03      	ldr	r3, [sp, #12]
 8015444:	3307      	adds	r3, #7
 8015446:	f023 0307 	bic.w	r3, r3, #7
 801544a:	3308      	adds	r3, #8
 801544c:	9303      	str	r3, [sp, #12]
 801544e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015450:	4433      	add	r3, r6
 8015452:	9309      	str	r3, [sp, #36]	; 0x24
 8015454:	e767      	b.n	8015326 <_svfiprintf_r+0x4e>
 8015456:	fb0c 3202 	mla	r2, ip, r2, r3
 801545a:	460c      	mov	r4, r1
 801545c:	2001      	movs	r0, #1
 801545e:	e7a5      	b.n	80153ac <_svfiprintf_r+0xd4>
 8015460:	2300      	movs	r3, #0
 8015462:	3401      	adds	r4, #1
 8015464:	9305      	str	r3, [sp, #20]
 8015466:	4619      	mov	r1, r3
 8015468:	f04f 0c0a 	mov.w	ip, #10
 801546c:	4620      	mov	r0, r4
 801546e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015472:	3a30      	subs	r2, #48	; 0x30
 8015474:	2a09      	cmp	r2, #9
 8015476:	d903      	bls.n	8015480 <_svfiprintf_r+0x1a8>
 8015478:	2b00      	cmp	r3, #0
 801547a:	d0c5      	beq.n	8015408 <_svfiprintf_r+0x130>
 801547c:	9105      	str	r1, [sp, #20]
 801547e:	e7c3      	b.n	8015408 <_svfiprintf_r+0x130>
 8015480:	fb0c 2101 	mla	r1, ip, r1, r2
 8015484:	4604      	mov	r4, r0
 8015486:	2301      	movs	r3, #1
 8015488:	e7f0      	b.n	801546c <_svfiprintf_r+0x194>
 801548a:	ab03      	add	r3, sp, #12
 801548c:	9300      	str	r3, [sp, #0]
 801548e:	462a      	mov	r2, r5
 8015490:	4b0f      	ldr	r3, [pc, #60]	; (80154d0 <_svfiprintf_r+0x1f8>)
 8015492:	a904      	add	r1, sp, #16
 8015494:	4638      	mov	r0, r7
 8015496:	f7fc fbc5 	bl	8011c24 <_printf_float>
 801549a:	1c42      	adds	r2, r0, #1
 801549c:	4606      	mov	r6, r0
 801549e:	d1d6      	bne.n	801544e <_svfiprintf_r+0x176>
 80154a0:	89ab      	ldrh	r3, [r5, #12]
 80154a2:	065b      	lsls	r3, r3, #25
 80154a4:	f53f af2c 	bmi.w	8015300 <_svfiprintf_r+0x28>
 80154a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80154aa:	b01d      	add	sp, #116	; 0x74
 80154ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154b0:	ab03      	add	r3, sp, #12
 80154b2:	9300      	str	r3, [sp, #0]
 80154b4:	462a      	mov	r2, r5
 80154b6:	4b06      	ldr	r3, [pc, #24]	; (80154d0 <_svfiprintf_r+0x1f8>)
 80154b8:	a904      	add	r1, sp, #16
 80154ba:	4638      	mov	r0, r7
 80154bc:	f7fc fe56 	bl	801216c <_printf_i>
 80154c0:	e7eb      	b.n	801549a <_svfiprintf_r+0x1c2>
 80154c2:	bf00      	nop
 80154c4:	08017cfc 	.word	0x08017cfc
 80154c8:	08017d06 	.word	0x08017d06
 80154cc:	08011c25 	.word	0x08011c25
 80154d0:	08015221 	.word	0x08015221
 80154d4:	08017d02 	.word	0x08017d02

080154d8 <nan>:
 80154d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80154e0 <nan+0x8>
 80154dc:	4770      	bx	lr
 80154de:	bf00      	nop
 80154e0:	00000000 	.word	0x00000000
 80154e4:	7ff80000 	.word	0x7ff80000

080154e8 <_sbrk_r>:
 80154e8:	b538      	push	{r3, r4, r5, lr}
 80154ea:	4d06      	ldr	r5, [pc, #24]	; (8015504 <_sbrk_r+0x1c>)
 80154ec:	2300      	movs	r3, #0
 80154ee:	4604      	mov	r4, r0
 80154f0:	4608      	mov	r0, r1
 80154f2:	602b      	str	r3, [r5, #0]
 80154f4:	f7f0 fb92 	bl	8005c1c <_sbrk>
 80154f8:	1c43      	adds	r3, r0, #1
 80154fa:	d102      	bne.n	8015502 <_sbrk_r+0x1a>
 80154fc:	682b      	ldr	r3, [r5, #0]
 80154fe:	b103      	cbz	r3, 8015502 <_sbrk_r+0x1a>
 8015500:	6023      	str	r3, [r4, #0]
 8015502:	bd38      	pop	{r3, r4, r5, pc}
 8015504:	20004180 	.word	0x20004180

08015508 <__sread>:
 8015508:	b510      	push	{r4, lr}
 801550a:	460c      	mov	r4, r1
 801550c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015510:	f000 fa5c 	bl	80159cc <_read_r>
 8015514:	2800      	cmp	r0, #0
 8015516:	bfab      	itete	ge
 8015518:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801551a:	89a3      	ldrhlt	r3, [r4, #12]
 801551c:	181b      	addge	r3, r3, r0
 801551e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015522:	bfac      	ite	ge
 8015524:	6563      	strge	r3, [r4, #84]	; 0x54
 8015526:	81a3      	strhlt	r3, [r4, #12]
 8015528:	bd10      	pop	{r4, pc}

0801552a <__swrite>:
 801552a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801552e:	461f      	mov	r7, r3
 8015530:	898b      	ldrh	r3, [r1, #12]
 8015532:	05db      	lsls	r3, r3, #23
 8015534:	4605      	mov	r5, r0
 8015536:	460c      	mov	r4, r1
 8015538:	4616      	mov	r6, r2
 801553a:	d505      	bpl.n	8015548 <__swrite+0x1e>
 801553c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015540:	2302      	movs	r3, #2
 8015542:	2200      	movs	r2, #0
 8015544:	f000 f882 	bl	801564c <_lseek_r>
 8015548:	89a3      	ldrh	r3, [r4, #12]
 801554a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801554e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015552:	81a3      	strh	r3, [r4, #12]
 8015554:	4632      	mov	r2, r6
 8015556:	463b      	mov	r3, r7
 8015558:	4628      	mov	r0, r5
 801555a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801555e:	f000 b823 	b.w	80155a8 <_write_r>

08015562 <__sseek>:
 8015562:	b510      	push	{r4, lr}
 8015564:	460c      	mov	r4, r1
 8015566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801556a:	f000 f86f 	bl	801564c <_lseek_r>
 801556e:	1c43      	adds	r3, r0, #1
 8015570:	89a3      	ldrh	r3, [r4, #12]
 8015572:	bf15      	itete	ne
 8015574:	6560      	strne	r0, [r4, #84]	; 0x54
 8015576:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801557a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801557e:	81a3      	strheq	r3, [r4, #12]
 8015580:	bf18      	it	ne
 8015582:	81a3      	strhne	r3, [r4, #12]
 8015584:	bd10      	pop	{r4, pc}

08015586 <__sclose>:
 8015586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801558a:	f000 b83d 	b.w	8015608 <_close_r>

0801558e <__ascii_wctomb>:
 801558e:	b149      	cbz	r1, 80155a4 <__ascii_wctomb+0x16>
 8015590:	2aff      	cmp	r2, #255	; 0xff
 8015592:	bf85      	ittet	hi
 8015594:	238a      	movhi	r3, #138	; 0x8a
 8015596:	6003      	strhi	r3, [r0, #0]
 8015598:	700a      	strbls	r2, [r1, #0]
 801559a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801559e:	bf98      	it	ls
 80155a0:	2001      	movls	r0, #1
 80155a2:	4770      	bx	lr
 80155a4:	4608      	mov	r0, r1
 80155a6:	4770      	bx	lr

080155a8 <_write_r>:
 80155a8:	b538      	push	{r3, r4, r5, lr}
 80155aa:	4d07      	ldr	r5, [pc, #28]	; (80155c8 <_write_r+0x20>)
 80155ac:	4604      	mov	r4, r0
 80155ae:	4608      	mov	r0, r1
 80155b0:	4611      	mov	r1, r2
 80155b2:	2200      	movs	r2, #0
 80155b4:	602a      	str	r2, [r5, #0]
 80155b6:	461a      	mov	r2, r3
 80155b8:	f7f0 fadf 	bl	8005b7a <_write>
 80155bc:	1c43      	adds	r3, r0, #1
 80155be:	d102      	bne.n	80155c6 <_write_r+0x1e>
 80155c0:	682b      	ldr	r3, [r5, #0]
 80155c2:	b103      	cbz	r3, 80155c6 <_write_r+0x1e>
 80155c4:	6023      	str	r3, [r4, #0]
 80155c6:	bd38      	pop	{r3, r4, r5, pc}
 80155c8:	20004180 	.word	0x20004180

080155cc <__assert_func>:
 80155cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80155ce:	4614      	mov	r4, r2
 80155d0:	461a      	mov	r2, r3
 80155d2:	4b09      	ldr	r3, [pc, #36]	; (80155f8 <__assert_func+0x2c>)
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	4605      	mov	r5, r0
 80155d8:	68d8      	ldr	r0, [r3, #12]
 80155da:	b14c      	cbz	r4, 80155f0 <__assert_func+0x24>
 80155dc:	4b07      	ldr	r3, [pc, #28]	; (80155fc <__assert_func+0x30>)
 80155de:	9100      	str	r1, [sp, #0]
 80155e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80155e4:	4906      	ldr	r1, [pc, #24]	; (8015600 <__assert_func+0x34>)
 80155e6:	462b      	mov	r3, r5
 80155e8:	f000 f81e 	bl	8015628 <fiprintf>
 80155ec:	f000 fac0 	bl	8015b70 <abort>
 80155f0:	4b04      	ldr	r3, [pc, #16]	; (8015604 <__assert_func+0x38>)
 80155f2:	461c      	mov	r4, r3
 80155f4:	e7f3      	b.n	80155de <__assert_func+0x12>
 80155f6:	bf00      	nop
 80155f8:	20000234 	.word	0x20000234
 80155fc:	08017d0d 	.word	0x08017d0d
 8015600:	08017d1a 	.word	0x08017d1a
 8015604:	08017d48 	.word	0x08017d48

08015608 <_close_r>:
 8015608:	b538      	push	{r3, r4, r5, lr}
 801560a:	4d06      	ldr	r5, [pc, #24]	; (8015624 <_close_r+0x1c>)
 801560c:	2300      	movs	r3, #0
 801560e:	4604      	mov	r4, r0
 8015610:	4608      	mov	r0, r1
 8015612:	602b      	str	r3, [r5, #0]
 8015614:	f7f0 facd 	bl	8005bb2 <_close>
 8015618:	1c43      	adds	r3, r0, #1
 801561a:	d102      	bne.n	8015622 <_close_r+0x1a>
 801561c:	682b      	ldr	r3, [r5, #0]
 801561e:	b103      	cbz	r3, 8015622 <_close_r+0x1a>
 8015620:	6023      	str	r3, [r4, #0]
 8015622:	bd38      	pop	{r3, r4, r5, pc}
 8015624:	20004180 	.word	0x20004180

08015628 <fiprintf>:
 8015628:	b40e      	push	{r1, r2, r3}
 801562a:	b503      	push	{r0, r1, lr}
 801562c:	4601      	mov	r1, r0
 801562e:	ab03      	add	r3, sp, #12
 8015630:	4805      	ldr	r0, [pc, #20]	; (8015648 <fiprintf+0x20>)
 8015632:	f853 2b04 	ldr.w	r2, [r3], #4
 8015636:	6800      	ldr	r0, [r0, #0]
 8015638:	9301      	str	r3, [sp, #4]
 801563a:	f000 f897 	bl	801576c <_vfiprintf_r>
 801563e:	b002      	add	sp, #8
 8015640:	f85d eb04 	ldr.w	lr, [sp], #4
 8015644:	b003      	add	sp, #12
 8015646:	4770      	bx	lr
 8015648:	20000234 	.word	0x20000234

0801564c <_lseek_r>:
 801564c:	b538      	push	{r3, r4, r5, lr}
 801564e:	4d07      	ldr	r5, [pc, #28]	; (801566c <_lseek_r+0x20>)
 8015650:	4604      	mov	r4, r0
 8015652:	4608      	mov	r0, r1
 8015654:	4611      	mov	r1, r2
 8015656:	2200      	movs	r2, #0
 8015658:	602a      	str	r2, [r5, #0]
 801565a:	461a      	mov	r2, r3
 801565c:	f7f0 fad0 	bl	8005c00 <_lseek>
 8015660:	1c43      	adds	r3, r0, #1
 8015662:	d102      	bne.n	801566a <_lseek_r+0x1e>
 8015664:	682b      	ldr	r3, [r5, #0]
 8015666:	b103      	cbz	r3, 801566a <_lseek_r+0x1e>
 8015668:	6023      	str	r3, [r4, #0]
 801566a:	bd38      	pop	{r3, r4, r5, pc}
 801566c:	20004180 	.word	0x20004180

08015670 <memmove>:
 8015670:	4288      	cmp	r0, r1
 8015672:	b510      	push	{r4, lr}
 8015674:	eb01 0402 	add.w	r4, r1, r2
 8015678:	d902      	bls.n	8015680 <memmove+0x10>
 801567a:	4284      	cmp	r4, r0
 801567c:	4623      	mov	r3, r4
 801567e:	d807      	bhi.n	8015690 <memmove+0x20>
 8015680:	1e43      	subs	r3, r0, #1
 8015682:	42a1      	cmp	r1, r4
 8015684:	d008      	beq.n	8015698 <memmove+0x28>
 8015686:	f811 2b01 	ldrb.w	r2, [r1], #1
 801568a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801568e:	e7f8      	b.n	8015682 <memmove+0x12>
 8015690:	4402      	add	r2, r0
 8015692:	4601      	mov	r1, r0
 8015694:	428a      	cmp	r2, r1
 8015696:	d100      	bne.n	801569a <memmove+0x2a>
 8015698:	bd10      	pop	{r4, pc}
 801569a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801569e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80156a2:	e7f7      	b.n	8015694 <memmove+0x24>

080156a4 <__malloc_lock>:
 80156a4:	4801      	ldr	r0, [pc, #4]	; (80156ac <__malloc_lock+0x8>)
 80156a6:	f7fe bfe6 	b.w	8014676 <__retarget_lock_acquire_recursive>
 80156aa:	bf00      	nop
 80156ac:	20004174 	.word	0x20004174

080156b0 <__malloc_unlock>:
 80156b0:	4801      	ldr	r0, [pc, #4]	; (80156b8 <__malloc_unlock+0x8>)
 80156b2:	f7fe bfe1 	b.w	8014678 <__retarget_lock_release_recursive>
 80156b6:	bf00      	nop
 80156b8:	20004174 	.word	0x20004174

080156bc <_realloc_r>:
 80156bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156c0:	4680      	mov	r8, r0
 80156c2:	4614      	mov	r4, r2
 80156c4:	460e      	mov	r6, r1
 80156c6:	b921      	cbnz	r1, 80156d2 <_realloc_r+0x16>
 80156c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80156cc:	4611      	mov	r1, r2
 80156ce:	f7ff bd33 	b.w	8015138 <_malloc_r>
 80156d2:	b92a      	cbnz	r2, 80156e0 <_realloc_r+0x24>
 80156d4:	f7ff fcc4 	bl	8015060 <_free_r>
 80156d8:	4625      	mov	r5, r4
 80156da:	4628      	mov	r0, r5
 80156dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156e0:	f000 fc6a 	bl	8015fb8 <_malloc_usable_size_r>
 80156e4:	4284      	cmp	r4, r0
 80156e6:	4607      	mov	r7, r0
 80156e8:	d802      	bhi.n	80156f0 <_realloc_r+0x34>
 80156ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80156ee:	d812      	bhi.n	8015716 <_realloc_r+0x5a>
 80156f0:	4621      	mov	r1, r4
 80156f2:	4640      	mov	r0, r8
 80156f4:	f7ff fd20 	bl	8015138 <_malloc_r>
 80156f8:	4605      	mov	r5, r0
 80156fa:	2800      	cmp	r0, #0
 80156fc:	d0ed      	beq.n	80156da <_realloc_r+0x1e>
 80156fe:	42bc      	cmp	r4, r7
 8015700:	4622      	mov	r2, r4
 8015702:	4631      	mov	r1, r6
 8015704:	bf28      	it	cs
 8015706:	463a      	movcs	r2, r7
 8015708:	f7fc f9d6 	bl	8011ab8 <memcpy>
 801570c:	4631      	mov	r1, r6
 801570e:	4640      	mov	r0, r8
 8015710:	f7ff fca6 	bl	8015060 <_free_r>
 8015714:	e7e1      	b.n	80156da <_realloc_r+0x1e>
 8015716:	4635      	mov	r5, r6
 8015718:	e7df      	b.n	80156da <_realloc_r+0x1e>

0801571a <__sfputc_r>:
 801571a:	6893      	ldr	r3, [r2, #8]
 801571c:	3b01      	subs	r3, #1
 801571e:	2b00      	cmp	r3, #0
 8015720:	b410      	push	{r4}
 8015722:	6093      	str	r3, [r2, #8]
 8015724:	da08      	bge.n	8015738 <__sfputc_r+0x1e>
 8015726:	6994      	ldr	r4, [r2, #24]
 8015728:	42a3      	cmp	r3, r4
 801572a:	db01      	blt.n	8015730 <__sfputc_r+0x16>
 801572c:	290a      	cmp	r1, #10
 801572e:	d103      	bne.n	8015738 <__sfputc_r+0x1e>
 8015730:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015734:	f000 b95c 	b.w	80159f0 <__swbuf_r>
 8015738:	6813      	ldr	r3, [r2, #0]
 801573a:	1c58      	adds	r0, r3, #1
 801573c:	6010      	str	r0, [r2, #0]
 801573e:	7019      	strb	r1, [r3, #0]
 8015740:	4608      	mov	r0, r1
 8015742:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015746:	4770      	bx	lr

08015748 <__sfputs_r>:
 8015748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801574a:	4606      	mov	r6, r0
 801574c:	460f      	mov	r7, r1
 801574e:	4614      	mov	r4, r2
 8015750:	18d5      	adds	r5, r2, r3
 8015752:	42ac      	cmp	r4, r5
 8015754:	d101      	bne.n	801575a <__sfputs_r+0x12>
 8015756:	2000      	movs	r0, #0
 8015758:	e007      	b.n	801576a <__sfputs_r+0x22>
 801575a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801575e:	463a      	mov	r2, r7
 8015760:	4630      	mov	r0, r6
 8015762:	f7ff ffda 	bl	801571a <__sfputc_r>
 8015766:	1c43      	adds	r3, r0, #1
 8015768:	d1f3      	bne.n	8015752 <__sfputs_r+0xa>
 801576a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801576c <_vfiprintf_r>:
 801576c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015770:	460d      	mov	r5, r1
 8015772:	b09d      	sub	sp, #116	; 0x74
 8015774:	4614      	mov	r4, r2
 8015776:	4698      	mov	r8, r3
 8015778:	4606      	mov	r6, r0
 801577a:	b118      	cbz	r0, 8015784 <_vfiprintf_r+0x18>
 801577c:	6983      	ldr	r3, [r0, #24]
 801577e:	b90b      	cbnz	r3, 8015784 <_vfiprintf_r+0x18>
 8015780:	f000 fb18 	bl	8015db4 <__sinit>
 8015784:	4b89      	ldr	r3, [pc, #548]	; (80159ac <_vfiprintf_r+0x240>)
 8015786:	429d      	cmp	r5, r3
 8015788:	d11b      	bne.n	80157c2 <_vfiprintf_r+0x56>
 801578a:	6875      	ldr	r5, [r6, #4]
 801578c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801578e:	07d9      	lsls	r1, r3, #31
 8015790:	d405      	bmi.n	801579e <_vfiprintf_r+0x32>
 8015792:	89ab      	ldrh	r3, [r5, #12]
 8015794:	059a      	lsls	r2, r3, #22
 8015796:	d402      	bmi.n	801579e <_vfiprintf_r+0x32>
 8015798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801579a:	f7fe ff6c 	bl	8014676 <__retarget_lock_acquire_recursive>
 801579e:	89ab      	ldrh	r3, [r5, #12]
 80157a0:	071b      	lsls	r3, r3, #28
 80157a2:	d501      	bpl.n	80157a8 <_vfiprintf_r+0x3c>
 80157a4:	692b      	ldr	r3, [r5, #16]
 80157a6:	b9eb      	cbnz	r3, 80157e4 <_vfiprintf_r+0x78>
 80157a8:	4629      	mov	r1, r5
 80157aa:	4630      	mov	r0, r6
 80157ac:	f000 f972 	bl	8015a94 <__swsetup_r>
 80157b0:	b1c0      	cbz	r0, 80157e4 <_vfiprintf_r+0x78>
 80157b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80157b4:	07dc      	lsls	r4, r3, #31
 80157b6:	d50e      	bpl.n	80157d6 <_vfiprintf_r+0x6a>
 80157b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80157bc:	b01d      	add	sp, #116	; 0x74
 80157be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157c2:	4b7b      	ldr	r3, [pc, #492]	; (80159b0 <_vfiprintf_r+0x244>)
 80157c4:	429d      	cmp	r5, r3
 80157c6:	d101      	bne.n	80157cc <_vfiprintf_r+0x60>
 80157c8:	68b5      	ldr	r5, [r6, #8]
 80157ca:	e7df      	b.n	801578c <_vfiprintf_r+0x20>
 80157cc:	4b79      	ldr	r3, [pc, #484]	; (80159b4 <_vfiprintf_r+0x248>)
 80157ce:	429d      	cmp	r5, r3
 80157d0:	bf08      	it	eq
 80157d2:	68f5      	ldreq	r5, [r6, #12]
 80157d4:	e7da      	b.n	801578c <_vfiprintf_r+0x20>
 80157d6:	89ab      	ldrh	r3, [r5, #12]
 80157d8:	0598      	lsls	r0, r3, #22
 80157da:	d4ed      	bmi.n	80157b8 <_vfiprintf_r+0x4c>
 80157dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80157de:	f7fe ff4b 	bl	8014678 <__retarget_lock_release_recursive>
 80157e2:	e7e9      	b.n	80157b8 <_vfiprintf_r+0x4c>
 80157e4:	2300      	movs	r3, #0
 80157e6:	9309      	str	r3, [sp, #36]	; 0x24
 80157e8:	2320      	movs	r3, #32
 80157ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80157ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80157f2:	2330      	movs	r3, #48	; 0x30
 80157f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80159b8 <_vfiprintf_r+0x24c>
 80157f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80157fc:	f04f 0901 	mov.w	r9, #1
 8015800:	4623      	mov	r3, r4
 8015802:	469a      	mov	sl, r3
 8015804:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015808:	b10a      	cbz	r2, 801580e <_vfiprintf_r+0xa2>
 801580a:	2a25      	cmp	r2, #37	; 0x25
 801580c:	d1f9      	bne.n	8015802 <_vfiprintf_r+0x96>
 801580e:	ebba 0b04 	subs.w	fp, sl, r4
 8015812:	d00b      	beq.n	801582c <_vfiprintf_r+0xc0>
 8015814:	465b      	mov	r3, fp
 8015816:	4622      	mov	r2, r4
 8015818:	4629      	mov	r1, r5
 801581a:	4630      	mov	r0, r6
 801581c:	f7ff ff94 	bl	8015748 <__sfputs_r>
 8015820:	3001      	adds	r0, #1
 8015822:	f000 80aa 	beq.w	801597a <_vfiprintf_r+0x20e>
 8015826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015828:	445a      	add	r2, fp
 801582a:	9209      	str	r2, [sp, #36]	; 0x24
 801582c:	f89a 3000 	ldrb.w	r3, [sl]
 8015830:	2b00      	cmp	r3, #0
 8015832:	f000 80a2 	beq.w	801597a <_vfiprintf_r+0x20e>
 8015836:	2300      	movs	r3, #0
 8015838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801583c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015840:	f10a 0a01 	add.w	sl, sl, #1
 8015844:	9304      	str	r3, [sp, #16]
 8015846:	9307      	str	r3, [sp, #28]
 8015848:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801584c:	931a      	str	r3, [sp, #104]	; 0x68
 801584e:	4654      	mov	r4, sl
 8015850:	2205      	movs	r2, #5
 8015852:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015856:	4858      	ldr	r0, [pc, #352]	; (80159b8 <_vfiprintf_r+0x24c>)
 8015858:	f7ea fcc2 	bl	80001e0 <memchr>
 801585c:	9a04      	ldr	r2, [sp, #16]
 801585e:	b9d8      	cbnz	r0, 8015898 <_vfiprintf_r+0x12c>
 8015860:	06d1      	lsls	r1, r2, #27
 8015862:	bf44      	itt	mi
 8015864:	2320      	movmi	r3, #32
 8015866:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801586a:	0713      	lsls	r3, r2, #28
 801586c:	bf44      	itt	mi
 801586e:	232b      	movmi	r3, #43	; 0x2b
 8015870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015874:	f89a 3000 	ldrb.w	r3, [sl]
 8015878:	2b2a      	cmp	r3, #42	; 0x2a
 801587a:	d015      	beq.n	80158a8 <_vfiprintf_r+0x13c>
 801587c:	9a07      	ldr	r2, [sp, #28]
 801587e:	4654      	mov	r4, sl
 8015880:	2000      	movs	r0, #0
 8015882:	f04f 0c0a 	mov.w	ip, #10
 8015886:	4621      	mov	r1, r4
 8015888:	f811 3b01 	ldrb.w	r3, [r1], #1
 801588c:	3b30      	subs	r3, #48	; 0x30
 801588e:	2b09      	cmp	r3, #9
 8015890:	d94e      	bls.n	8015930 <_vfiprintf_r+0x1c4>
 8015892:	b1b0      	cbz	r0, 80158c2 <_vfiprintf_r+0x156>
 8015894:	9207      	str	r2, [sp, #28]
 8015896:	e014      	b.n	80158c2 <_vfiprintf_r+0x156>
 8015898:	eba0 0308 	sub.w	r3, r0, r8
 801589c:	fa09 f303 	lsl.w	r3, r9, r3
 80158a0:	4313      	orrs	r3, r2
 80158a2:	9304      	str	r3, [sp, #16]
 80158a4:	46a2      	mov	sl, r4
 80158a6:	e7d2      	b.n	801584e <_vfiprintf_r+0xe2>
 80158a8:	9b03      	ldr	r3, [sp, #12]
 80158aa:	1d19      	adds	r1, r3, #4
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	9103      	str	r1, [sp, #12]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	bfbb      	ittet	lt
 80158b4:	425b      	neglt	r3, r3
 80158b6:	f042 0202 	orrlt.w	r2, r2, #2
 80158ba:	9307      	strge	r3, [sp, #28]
 80158bc:	9307      	strlt	r3, [sp, #28]
 80158be:	bfb8      	it	lt
 80158c0:	9204      	strlt	r2, [sp, #16]
 80158c2:	7823      	ldrb	r3, [r4, #0]
 80158c4:	2b2e      	cmp	r3, #46	; 0x2e
 80158c6:	d10c      	bne.n	80158e2 <_vfiprintf_r+0x176>
 80158c8:	7863      	ldrb	r3, [r4, #1]
 80158ca:	2b2a      	cmp	r3, #42	; 0x2a
 80158cc:	d135      	bne.n	801593a <_vfiprintf_r+0x1ce>
 80158ce:	9b03      	ldr	r3, [sp, #12]
 80158d0:	1d1a      	adds	r2, r3, #4
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	9203      	str	r2, [sp, #12]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	bfb8      	it	lt
 80158da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80158de:	3402      	adds	r4, #2
 80158e0:	9305      	str	r3, [sp, #20]
 80158e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80159c8 <_vfiprintf_r+0x25c>
 80158e6:	7821      	ldrb	r1, [r4, #0]
 80158e8:	2203      	movs	r2, #3
 80158ea:	4650      	mov	r0, sl
 80158ec:	f7ea fc78 	bl	80001e0 <memchr>
 80158f0:	b140      	cbz	r0, 8015904 <_vfiprintf_r+0x198>
 80158f2:	2340      	movs	r3, #64	; 0x40
 80158f4:	eba0 000a 	sub.w	r0, r0, sl
 80158f8:	fa03 f000 	lsl.w	r0, r3, r0
 80158fc:	9b04      	ldr	r3, [sp, #16]
 80158fe:	4303      	orrs	r3, r0
 8015900:	3401      	adds	r4, #1
 8015902:	9304      	str	r3, [sp, #16]
 8015904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015908:	482c      	ldr	r0, [pc, #176]	; (80159bc <_vfiprintf_r+0x250>)
 801590a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801590e:	2206      	movs	r2, #6
 8015910:	f7ea fc66 	bl	80001e0 <memchr>
 8015914:	2800      	cmp	r0, #0
 8015916:	d03f      	beq.n	8015998 <_vfiprintf_r+0x22c>
 8015918:	4b29      	ldr	r3, [pc, #164]	; (80159c0 <_vfiprintf_r+0x254>)
 801591a:	bb1b      	cbnz	r3, 8015964 <_vfiprintf_r+0x1f8>
 801591c:	9b03      	ldr	r3, [sp, #12]
 801591e:	3307      	adds	r3, #7
 8015920:	f023 0307 	bic.w	r3, r3, #7
 8015924:	3308      	adds	r3, #8
 8015926:	9303      	str	r3, [sp, #12]
 8015928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801592a:	443b      	add	r3, r7
 801592c:	9309      	str	r3, [sp, #36]	; 0x24
 801592e:	e767      	b.n	8015800 <_vfiprintf_r+0x94>
 8015930:	fb0c 3202 	mla	r2, ip, r2, r3
 8015934:	460c      	mov	r4, r1
 8015936:	2001      	movs	r0, #1
 8015938:	e7a5      	b.n	8015886 <_vfiprintf_r+0x11a>
 801593a:	2300      	movs	r3, #0
 801593c:	3401      	adds	r4, #1
 801593e:	9305      	str	r3, [sp, #20]
 8015940:	4619      	mov	r1, r3
 8015942:	f04f 0c0a 	mov.w	ip, #10
 8015946:	4620      	mov	r0, r4
 8015948:	f810 2b01 	ldrb.w	r2, [r0], #1
 801594c:	3a30      	subs	r2, #48	; 0x30
 801594e:	2a09      	cmp	r2, #9
 8015950:	d903      	bls.n	801595a <_vfiprintf_r+0x1ee>
 8015952:	2b00      	cmp	r3, #0
 8015954:	d0c5      	beq.n	80158e2 <_vfiprintf_r+0x176>
 8015956:	9105      	str	r1, [sp, #20]
 8015958:	e7c3      	b.n	80158e2 <_vfiprintf_r+0x176>
 801595a:	fb0c 2101 	mla	r1, ip, r1, r2
 801595e:	4604      	mov	r4, r0
 8015960:	2301      	movs	r3, #1
 8015962:	e7f0      	b.n	8015946 <_vfiprintf_r+0x1da>
 8015964:	ab03      	add	r3, sp, #12
 8015966:	9300      	str	r3, [sp, #0]
 8015968:	462a      	mov	r2, r5
 801596a:	4b16      	ldr	r3, [pc, #88]	; (80159c4 <_vfiprintf_r+0x258>)
 801596c:	a904      	add	r1, sp, #16
 801596e:	4630      	mov	r0, r6
 8015970:	f7fc f958 	bl	8011c24 <_printf_float>
 8015974:	4607      	mov	r7, r0
 8015976:	1c78      	adds	r0, r7, #1
 8015978:	d1d6      	bne.n	8015928 <_vfiprintf_r+0x1bc>
 801597a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801597c:	07d9      	lsls	r1, r3, #31
 801597e:	d405      	bmi.n	801598c <_vfiprintf_r+0x220>
 8015980:	89ab      	ldrh	r3, [r5, #12]
 8015982:	059a      	lsls	r2, r3, #22
 8015984:	d402      	bmi.n	801598c <_vfiprintf_r+0x220>
 8015986:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015988:	f7fe fe76 	bl	8014678 <__retarget_lock_release_recursive>
 801598c:	89ab      	ldrh	r3, [r5, #12]
 801598e:	065b      	lsls	r3, r3, #25
 8015990:	f53f af12 	bmi.w	80157b8 <_vfiprintf_r+0x4c>
 8015994:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015996:	e711      	b.n	80157bc <_vfiprintf_r+0x50>
 8015998:	ab03      	add	r3, sp, #12
 801599a:	9300      	str	r3, [sp, #0]
 801599c:	462a      	mov	r2, r5
 801599e:	4b09      	ldr	r3, [pc, #36]	; (80159c4 <_vfiprintf_r+0x258>)
 80159a0:	a904      	add	r1, sp, #16
 80159a2:	4630      	mov	r0, r6
 80159a4:	f7fc fbe2 	bl	801216c <_printf_i>
 80159a8:	e7e4      	b.n	8015974 <_vfiprintf_r+0x208>
 80159aa:	bf00      	nop
 80159ac:	08017d6c 	.word	0x08017d6c
 80159b0:	08017d8c 	.word	0x08017d8c
 80159b4:	08017d4c 	.word	0x08017d4c
 80159b8:	08017cfc 	.word	0x08017cfc
 80159bc:	08017d06 	.word	0x08017d06
 80159c0:	08011c25 	.word	0x08011c25
 80159c4:	08015749 	.word	0x08015749
 80159c8:	08017d02 	.word	0x08017d02

080159cc <_read_r>:
 80159cc:	b538      	push	{r3, r4, r5, lr}
 80159ce:	4d07      	ldr	r5, [pc, #28]	; (80159ec <_read_r+0x20>)
 80159d0:	4604      	mov	r4, r0
 80159d2:	4608      	mov	r0, r1
 80159d4:	4611      	mov	r1, r2
 80159d6:	2200      	movs	r2, #0
 80159d8:	602a      	str	r2, [r5, #0]
 80159da:	461a      	mov	r2, r3
 80159dc:	f7f0 f8b0 	bl	8005b40 <_read>
 80159e0:	1c43      	adds	r3, r0, #1
 80159e2:	d102      	bne.n	80159ea <_read_r+0x1e>
 80159e4:	682b      	ldr	r3, [r5, #0]
 80159e6:	b103      	cbz	r3, 80159ea <_read_r+0x1e>
 80159e8:	6023      	str	r3, [r4, #0]
 80159ea:	bd38      	pop	{r3, r4, r5, pc}
 80159ec:	20004180 	.word	0x20004180

080159f0 <__swbuf_r>:
 80159f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159f2:	460e      	mov	r6, r1
 80159f4:	4614      	mov	r4, r2
 80159f6:	4605      	mov	r5, r0
 80159f8:	b118      	cbz	r0, 8015a02 <__swbuf_r+0x12>
 80159fa:	6983      	ldr	r3, [r0, #24]
 80159fc:	b90b      	cbnz	r3, 8015a02 <__swbuf_r+0x12>
 80159fe:	f000 f9d9 	bl	8015db4 <__sinit>
 8015a02:	4b21      	ldr	r3, [pc, #132]	; (8015a88 <__swbuf_r+0x98>)
 8015a04:	429c      	cmp	r4, r3
 8015a06:	d12b      	bne.n	8015a60 <__swbuf_r+0x70>
 8015a08:	686c      	ldr	r4, [r5, #4]
 8015a0a:	69a3      	ldr	r3, [r4, #24]
 8015a0c:	60a3      	str	r3, [r4, #8]
 8015a0e:	89a3      	ldrh	r3, [r4, #12]
 8015a10:	071a      	lsls	r2, r3, #28
 8015a12:	d52f      	bpl.n	8015a74 <__swbuf_r+0x84>
 8015a14:	6923      	ldr	r3, [r4, #16]
 8015a16:	b36b      	cbz	r3, 8015a74 <__swbuf_r+0x84>
 8015a18:	6923      	ldr	r3, [r4, #16]
 8015a1a:	6820      	ldr	r0, [r4, #0]
 8015a1c:	1ac0      	subs	r0, r0, r3
 8015a1e:	6963      	ldr	r3, [r4, #20]
 8015a20:	b2f6      	uxtb	r6, r6
 8015a22:	4283      	cmp	r3, r0
 8015a24:	4637      	mov	r7, r6
 8015a26:	dc04      	bgt.n	8015a32 <__swbuf_r+0x42>
 8015a28:	4621      	mov	r1, r4
 8015a2a:	4628      	mov	r0, r5
 8015a2c:	f000 f92e 	bl	8015c8c <_fflush_r>
 8015a30:	bb30      	cbnz	r0, 8015a80 <__swbuf_r+0x90>
 8015a32:	68a3      	ldr	r3, [r4, #8]
 8015a34:	3b01      	subs	r3, #1
 8015a36:	60a3      	str	r3, [r4, #8]
 8015a38:	6823      	ldr	r3, [r4, #0]
 8015a3a:	1c5a      	adds	r2, r3, #1
 8015a3c:	6022      	str	r2, [r4, #0]
 8015a3e:	701e      	strb	r6, [r3, #0]
 8015a40:	6963      	ldr	r3, [r4, #20]
 8015a42:	3001      	adds	r0, #1
 8015a44:	4283      	cmp	r3, r0
 8015a46:	d004      	beq.n	8015a52 <__swbuf_r+0x62>
 8015a48:	89a3      	ldrh	r3, [r4, #12]
 8015a4a:	07db      	lsls	r3, r3, #31
 8015a4c:	d506      	bpl.n	8015a5c <__swbuf_r+0x6c>
 8015a4e:	2e0a      	cmp	r6, #10
 8015a50:	d104      	bne.n	8015a5c <__swbuf_r+0x6c>
 8015a52:	4621      	mov	r1, r4
 8015a54:	4628      	mov	r0, r5
 8015a56:	f000 f919 	bl	8015c8c <_fflush_r>
 8015a5a:	b988      	cbnz	r0, 8015a80 <__swbuf_r+0x90>
 8015a5c:	4638      	mov	r0, r7
 8015a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a60:	4b0a      	ldr	r3, [pc, #40]	; (8015a8c <__swbuf_r+0x9c>)
 8015a62:	429c      	cmp	r4, r3
 8015a64:	d101      	bne.n	8015a6a <__swbuf_r+0x7a>
 8015a66:	68ac      	ldr	r4, [r5, #8]
 8015a68:	e7cf      	b.n	8015a0a <__swbuf_r+0x1a>
 8015a6a:	4b09      	ldr	r3, [pc, #36]	; (8015a90 <__swbuf_r+0xa0>)
 8015a6c:	429c      	cmp	r4, r3
 8015a6e:	bf08      	it	eq
 8015a70:	68ec      	ldreq	r4, [r5, #12]
 8015a72:	e7ca      	b.n	8015a0a <__swbuf_r+0x1a>
 8015a74:	4621      	mov	r1, r4
 8015a76:	4628      	mov	r0, r5
 8015a78:	f000 f80c 	bl	8015a94 <__swsetup_r>
 8015a7c:	2800      	cmp	r0, #0
 8015a7e:	d0cb      	beq.n	8015a18 <__swbuf_r+0x28>
 8015a80:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015a84:	e7ea      	b.n	8015a5c <__swbuf_r+0x6c>
 8015a86:	bf00      	nop
 8015a88:	08017d6c 	.word	0x08017d6c
 8015a8c:	08017d8c 	.word	0x08017d8c
 8015a90:	08017d4c 	.word	0x08017d4c

08015a94 <__swsetup_r>:
 8015a94:	4b32      	ldr	r3, [pc, #200]	; (8015b60 <__swsetup_r+0xcc>)
 8015a96:	b570      	push	{r4, r5, r6, lr}
 8015a98:	681d      	ldr	r5, [r3, #0]
 8015a9a:	4606      	mov	r6, r0
 8015a9c:	460c      	mov	r4, r1
 8015a9e:	b125      	cbz	r5, 8015aaa <__swsetup_r+0x16>
 8015aa0:	69ab      	ldr	r3, [r5, #24]
 8015aa2:	b913      	cbnz	r3, 8015aaa <__swsetup_r+0x16>
 8015aa4:	4628      	mov	r0, r5
 8015aa6:	f000 f985 	bl	8015db4 <__sinit>
 8015aaa:	4b2e      	ldr	r3, [pc, #184]	; (8015b64 <__swsetup_r+0xd0>)
 8015aac:	429c      	cmp	r4, r3
 8015aae:	d10f      	bne.n	8015ad0 <__swsetup_r+0x3c>
 8015ab0:	686c      	ldr	r4, [r5, #4]
 8015ab2:	89a3      	ldrh	r3, [r4, #12]
 8015ab4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015ab8:	0719      	lsls	r1, r3, #28
 8015aba:	d42c      	bmi.n	8015b16 <__swsetup_r+0x82>
 8015abc:	06dd      	lsls	r5, r3, #27
 8015abe:	d411      	bmi.n	8015ae4 <__swsetup_r+0x50>
 8015ac0:	2309      	movs	r3, #9
 8015ac2:	6033      	str	r3, [r6, #0]
 8015ac4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015ac8:	81a3      	strh	r3, [r4, #12]
 8015aca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015ace:	e03e      	b.n	8015b4e <__swsetup_r+0xba>
 8015ad0:	4b25      	ldr	r3, [pc, #148]	; (8015b68 <__swsetup_r+0xd4>)
 8015ad2:	429c      	cmp	r4, r3
 8015ad4:	d101      	bne.n	8015ada <__swsetup_r+0x46>
 8015ad6:	68ac      	ldr	r4, [r5, #8]
 8015ad8:	e7eb      	b.n	8015ab2 <__swsetup_r+0x1e>
 8015ada:	4b24      	ldr	r3, [pc, #144]	; (8015b6c <__swsetup_r+0xd8>)
 8015adc:	429c      	cmp	r4, r3
 8015ade:	bf08      	it	eq
 8015ae0:	68ec      	ldreq	r4, [r5, #12]
 8015ae2:	e7e6      	b.n	8015ab2 <__swsetup_r+0x1e>
 8015ae4:	0758      	lsls	r0, r3, #29
 8015ae6:	d512      	bpl.n	8015b0e <__swsetup_r+0x7a>
 8015ae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015aea:	b141      	cbz	r1, 8015afe <__swsetup_r+0x6a>
 8015aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015af0:	4299      	cmp	r1, r3
 8015af2:	d002      	beq.n	8015afa <__swsetup_r+0x66>
 8015af4:	4630      	mov	r0, r6
 8015af6:	f7ff fab3 	bl	8015060 <_free_r>
 8015afa:	2300      	movs	r3, #0
 8015afc:	6363      	str	r3, [r4, #52]	; 0x34
 8015afe:	89a3      	ldrh	r3, [r4, #12]
 8015b00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015b04:	81a3      	strh	r3, [r4, #12]
 8015b06:	2300      	movs	r3, #0
 8015b08:	6063      	str	r3, [r4, #4]
 8015b0a:	6923      	ldr	r3, [r4, #16]
 8015b0c:	6023      	str	r3, [r4, #0]
 8015b0e:	89a3      	ldrh	r3, [r4, #12]
 8015b10:	f043 0308 	orr.w	r3, r3, #8
 8015b14:	81a3      	strh	r3, [r4, #12]
 8015b16:	6923      	ldr	r3, [r4, #16]
 8015b18:	b94b      	cbnz	r3, 8015b2e <__swsetup_r+0x9a>
 8015b1a:	89a3      	ldrh	r3, [r4, #12]
 8015b1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015b24:	d003      	beq.n	8015b2e <__swsetup_r+0x9a>
 8015b26:	4621      	mov	r1, r4
 8015b28:	4630      	mov	r0, r6
 8015b2a:	f000 fa05 	bl	8015f38 <__smakebuf_r>
 8015b2e:	89a0      	ldrh	r0, [r4, #12]
 8015b30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015b34:	f010 0301 	ands.w	r3, r0, #1
 8015b38:	d00a      	beq.n	8015b50 <__swsetup_r+0xbc>
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	60a3      	str	r3, [r4, #8]
 8015b3e:	6963      	ldr	r3, [r4, #20]
 8015b40:	425b      	negs	r3, r3
 8015b42:	61a3      	str	r3, [r4, #24]
 8015b44:	6923      	ldr	r3, [r4, #16]
 8015b46:	b943      	cbnz	r3, 8015b5a <__swsetup_r+0xc6>
 8015b48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015b4c:	d1ba      	bne.n	8015ac4 <__swsetup_r+0x30>
 8015b4e:	bd70      	pop	{r4, r5, r6, pc}
 8015b50:	0781      	lsls	r1, r0, #30
 8015b52:	bf58      	it	pl
 8015b54:	6963      	ldrpl	r3, [r4, #20]
 8015b56:	60a3      	str	r3, [r4, #8]
 8015b58:	e7f4      	b.n	8015b44 <__swsetup_r+0xb0>
 8015b5a:	2000      	movs	r0, #0
 8015b5c:	e7f7      	b.n	8015b4e <__swsetup_r+0xba>
 8015b5e:	bf00      	nop
 8015b60:	20000234 	.word	0x20000234
 8015b64:	08017d6c 	.word	0x08017d6c
 8015b68:	08017d8c 	.word	0x08017d8c
 8015b6c:	08017d4c 	.word	0x08017d4c

08015b70 <abort>:
 8015b70:	b508      	push	{r3, lr}
 8015b72:	2006      	movs	r0, #6
 8015b74:	f000 fa50 	bl	8016018 <raise>
 8015b78:	2001      	movs	r0, #1
 8015b7a:	f7ef ffd7 	bl	8005b2c <_exit>
	...

08015b80 <__sflush_r>:
 8015b80:	898a      	ldrh	r2, [r1, #12]
 8015b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b86:	4605      	mov	r5, r0
 8015b88:	0710      	lsls	r0, r2, #28
 8015b8a:	460c      	mov	r4, r1
 8015b8c:	d458      	bmi.n	8015c40 <__sflush_r+0xc0>
 8015b8e:	684b      	ldr	r3, [r1, #4]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	dc05      	bgt.n	8015ba0 <__sflush_r+0x20>
 8015b94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	dc02      	bgt.n	8015ba0 <__sflush_r+0x20>
 8015b9a:	2000      	movs	r0, #0
 8015b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015ba2:	2e00      	cmp	r6, #0
 8015ba4:	d0f9      	beq.n	8015b9a <__sflush_r+0x1a>
 8015ba6:	2300      	movs	r3, #0
 8015ba8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015bac:	682f      	ldr	r7, [r5, #0]
 8015bae:	602b      	str	r3, [r5, #0]
 8015bb0:	d032      	beq.n	8015c18 <__sflush_r+0x98>
 8015bb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015bb4:	89a3      	ldrh	r3, [r4, #12]
 8015bb6:	075a      	lsls	r2, r3, #29
 8015bb8:	d505      	bpl.n	8015bc6 <__sflush_r+0x46>
 8015bba:	6863      	ldr	r3, [r4, #4]
 8015bbc:	1ac0      	subs	r0, r0, r3
 8015bbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015bc0:	b10b      	cbz	r3, 8015bc6 <__sflush_r+0x46>
 8015bc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015bc4:	1ac0      	subs	r0, r0, r3
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	4602      	mov	r2, r0
 8015bca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015bcc:	6a21      	ldr	r1, [r4, #32]
 8015bce:	4628      	mov	r0, r5
 8015bd0:	47b0      	blx	r6
 8015bd2:	1c43      	adds	r3, r0, #1
 8015bd4:	89a3      	ldrh	r3, [r4, #12]
 8015bd6:	d106      	bne.n	8015be6 <__sflush_r+0x66>
 8015bd8:	6829      	ldr	r1, [r5, #0]
 8015bda:	291d      	cmp	r1, #29
 8015bdc:	d82c      	bhi.n	8015c38 <__sflush_r+0xb8>
 8015bde:	4a2a      	ldr	r2, [pc, #168]	; (8015c88 <__sflush_r+0x108>)
 8015be0:	40ca      	lsrs	r2, r1
 8015be2:	07d6      	lsls	r6, r2, #31
 8015be4:	d528      	bpl.n	8015c38 <__sflush_r+0xb8>
 8015be6:	2200      	movs	r2, #0
 8015be8:	6062      	str	r2, [r4, #4]
 8015bea:	04d9      	lsls	r1, r3, #19
 8015bec:	6922      	ldr	r2, [r4, #16]
 8015bee:	6022      	str	r2, [r4, #0]
 8015bf0:	d504      	bpl.n	8015bfc <__sflush_r+0x7c>
 8015bf2:	1c42      	adds	r2, r0, #1
 8015bf4:	d101      	bne.n	8015bfa <__sflush_r+0x7a>
 8015bf6:	682b      	ldr	r3, [r5, #0]
 8015bf8:	b903      	cbnz	r3, 8015bfc <__sflush_r+0x7c>
 8015bfa:	6560      	str	r0, [r4, #84]	; 0x54
 8015bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015bfe:	602f      	str	r7, [r5, #0]
 8015c00:	2900      	cmp	r1, #0
 8015c02:	d0ca      	beq.n	8015b9a <__sflush_r+0x1a>
 8015c04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015c08:	4299      	cmp	r1, r3
 8015c0a:	d002      	beq.n	8015c12 <__sflush_r+0x92>
 8015c0c:	4628      	mov	r0, r5
 8015c0e:	f7ff fa27 	bl	8015060 <_free_r>
 8015c12:	2000      	movs	r0, #0
 8015c14:	6360      	str	r0, [r4, #52]	; 0x34
 8015c16:	e7c1      	b.n	8015b9c <__sflush_r+0x1c>
 8015c18:	6a21      	ldr	r1, [r4, #32]
 8015c1a:	2301      	movs	r3, #1
 8015c1c:	4628      	mov	r0, r5
 8015c1e:	47b0      	blx	r6
 8015c20:	1c41      	adds	r1, r0, #1
 8015c22:	d1c7      	bne.n	8015bb4 <__sflush_r+0x34>
 8015c24:	682b      	ldr	r3, [r5, #0]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d0c4      	beq.n	8015bb4 <__sflush_r+0x34>
 8015c2a:	2b1d      	cmp	r3, #29
 8015c2c:	d001      	beq.n	8015c32 <__sflush_r+0xb2>
 8015c2e:	2b16      	cmp	r3, #22
 8015c30:	d101      	bne.n	8015c36 <__sflush_r+0xb6>
 8015c32:	602f      	str	r7, [r5, #0]
 8015c34:	e7b1      	b.n	8015b9a <__sflush_r+0x1a>
 8015c36:	89a3      	ldrh	r3, [r4, #12]
 8015c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c3c:	81a3      	strh	r3, [r4, #12]
 8015c3e:	e7ad      	b.n	8015b9c <__sflush_r+0x1c>
 8015c40:	690f      	ldr	r7, [r1, #16]
 8015c42:	2f00      	cmp	r7, #0
 8015c44:	d0a9      	beq.n	8015b9a <__sflush_r+0x1a>
 8015c46:	0793      	lsls	r3, r2, #30
 8015c48:	680e      	ldr	r6, [r1, #0]
 8015c4a:	bf08      	it	eq
 8015c4c:	694b      	ldreq	r3, [r1, #20]
 8015c4e:	600f      	str	r7, [r1, #0]
 8015c50:	bf18      	it	ne
 8015c52:	2300      	movne	r3, #0
 8015c54:	eba6 0807 	sub.w	r8, r6, r7
 8015c58:	608b      	str	r3, [r1, #8]
 8015c5a:	f1b8 0f00 	cmp.w	r8, #0
 8015c5e:	dd9c      	ble.n	8015b9a <__sflush_r+0x1a>
 8015c60:	6a21      	ldr	r1, [r4, #32]
 8015c62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015c64:	4643      	mov	r3, r8
 8015c66:	463a      	mov	r2, r7
 8015c68:	4628      	mov	r0, r5
 8015c6a:	47b0      	blx	r6
 8015c6c:	2800      	cmp	r0, #0
 8015c6e:	dc06      	bgt.n	8015c7e <__sflush_r+0xfe>
 8015c70:	89a3      	ldrh	r3, [r4, #12]
 8015c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c76:	81a3      	strh	r3, [r4, #12]
 8015c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015c7c:	e78e      	b.n	8015b9c <__sflush_r+0x1c>
 8015c7e:	4407      	add	r7, r0
 8015c80:	eba8 0800 	sub.w	r8, r8, r0
 8015c84:	e7e9      	b.n	8015c5a <__sflush_r+0xda>
 8015c86:	bf00      	nop
 8015c88:	20400001 	.word	0x20400001

08015c8c <_fflush_r>:
 8015c8c:	b538      	push	{r3, r4, r5, lr}
 8015c8e:	690b      	ldr	r3, [r1, #16]
 8015c90:	4605      	mov	r5, r0
 8015c92:	460c      	mov	r4, r1
 8015c94:	b913      	cbnz	r3, 8015c9c <_fflush_r+0x10>
 8015c96:	2500      	movs	r5, #0
 8015c98:	4628      	mov	r0, r5
 8015c9a:	bd38      	pop	{r3, r4, r5, pc}
 8015c9c:	b118      	cbz	r0, 8015ca6 <_fflush_r+0x1a>
 8015c9e:	6983      	ldr	r3, [r0, #24]
 8015ca0:	b90b      	cbnz	r3, 8015ca6 <_fflush_r+0x1a>
 8015ca2:	f000 f887 	bl	8015db4 <__sinit>
 8015ca6:	4b14      	ldr	r3, [pc, #80]	; (8015cf8 <_fflush_r+0x6c>)
 8015ca8:	429c      	cmp	r4, r3
 8015caa:	d11b      	bne.n	8015ce4 <_fflush_r+0x58>
 8015cac:	686c      	ldr	r4, [r5, #4]
 8015cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d0ef      	beq.n	8015c96 <_fflush_r+0xa>
 8015cb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015cb8:	07d0      	lsls	r0, r2, #31
 8015cba:	d404      	bmi.n	8015cc6 <_fflush_r+0x3a>
 8015cbc:	0599      	lsls	r1, r3, #22
 8015cbe:	d402      	bmi.n	8015cc6 <_fflush_r+0x3a>
 8015cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015cc2:	f7fe fcd8 	bl	8014676 <__retarget_lock_acquire_recursive>
 8015cc6:	4628      	mov	r0, r5
 8015cc8:	4621      	mov	r1, r4
 8015cca:	f7ff ff59 	bl	8015b80 <__sflush_r>
 8015cce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015cd0:	07da      	lsls	r2, r3, #31
 8015cd2:	4605      	mov	r5, r0
 8015cd4:	d4e0      	bmi.n	8015c98 <_fflush_r+0xc>
 8015cd6:	89a3      	ldrh	r3, [r4, #12]
 8015cd8:	059b      	lsls	r3, r3, #22
 8015cda:	d4dd      	bmi.n	8015c98 <_fflush_r+0xc>
 8015cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015cde:	f7fe fccb 	bl	8014678 <__retarget_lock_release_recursive>
 8015ce2:	e7d9      	b.n	8015c98 <_fflush_r+0xc>
 8015ce4:	4b05      	ldr	r3, [pc, #20]	; (8015cfc <_fflush_r+0x70>)
 8015ce6:	429c      	cmp	r4, r3
 8015ce8:	d101      	bne.n	8015cee <_fflush_r+0x62>
 8015cea:	68ac      	ldr	r4, [r5, #8]
 8015cec:	e7df      	b.n	8015cae <_fflush_r+0x22>
 8015cee:	4b04      	ldr	r3, [pc, #16]	; (8015d00 <_fflush_r+0x74>)
 8015cf0:	429c      	cmp	r4, r3
 8015cf2:	bf08      	it	eq
 8015cf4:	68ec      	ldreq	r4, [r5, #12]
 8015cf6:	e7da      	b.n	8015cae <_fflush_r+0x22>
 8015cf8:	08017d6c 	.word	0x08017d6c
 8015cfc:	08017d8c 	.word	0x08017d8c
 8015d00:	08017d4c 	.word	0x08017d4c

08015d04 <std>:
 8015d04:	2300      	movs	r3, #0
 8015d06:	b510      	push	{r4, lr}
 8015d08:	4604      	mov	r4, r0
 8015d0a:	e9c0 3300 	strd	r3, r3, [r0]
 8015d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015d12:	6083      	str	r3, [r0, #8]
 8015d14:	8181      	strh	r1, [r0, #12]
 8015d16:	6643      	str	r3, [r0, #100]	; 0x64
 8015d18:	81c2      	strh	r2, [r0, #14]
 8015d1a:	6183      	str	r3, [r0, #24]
 8015d1c:	4619      	mov	r1, r3
 8015d1e:	2208      	movs	r2, #8
 8015d20:	305c      	adds	r0, #92	; 0x5c
 8015d22:	f7fb fed7 	bl	8011ad4 <memset>
 8015d26:	4b05      	ldr	r3, [pc, #20]	; (8015d3c <std+0x38>)
 8015d28:	6263      	str	r3, [r4, #36]	; 0x24
 8015d2a:	4b05      	ldr	r3, [pc, #20]	; (8015d40 <std+0x3c>)
 8015d2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8015d2e:	4b05      	ldr	r3, [pc, #20]	; (8015d44 <std+0x40>)
 8015d30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015d32:	4b05      	ldr	r3, [pc, #20]	; (8015d48 <std+0x44>)
 8015d34:	6224      	str	r4, [r4, #32]
 8015d36:	6323      	str	r3, [r4, #48]	; 0x30
 8015d38:	bd10      	pop	{r4, pc}
 8015d3a:	bf00      	nop
 8015d3c:	08015509 	.word	0x08015509
 8015d40:	0801552b 	.word	0x0801552b
 8015d44:	08015563 	.word	0x08015563
 8015d48:	08015587 	.word	0x08015587

08015d4c <_cleanup_r>:
 8015d4c:	4901      	ldr	r1, [pc, #4]	; (8015d54 <_cleanup_r+0x8>)
 8015d4e:	f000 b8af 	b.w	8015eb0 <_fwalk_reent>
 8015d52:	bf00      	nop
 8015d54:	08015c8d 	.word	0x08015c8d

08015d58 <__sfmoreglue>:
 8015d58:	b570      	push	{r4, r5, r6, lr}
 8015d5a:	2268      	movs	r2, #104	; 0x68
 8015d5c:	1e4d      	subs	r5, r1, #1
 8015d5e:	4355      	muls	r5, r2
 8015d60:	460e      	mov	r6, r1
 8015d62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015d66:	f7ff f9e7 	bl	8015138 <_malloc_r>
 8015d6a:	4604      	mov	r4, r0
 8015d6c:	b140      	cbz	r0, 8015d80 <__sfmoreglue+0x28>
 8015d6e:	2100      	movs	r1, #0
 8015d70:	e9c0 1600 	strd	r1, r6, [r0]
 8015d74:	300c      	adds	r0, #12
 8015d76:	60a0      	str	r0, [r4, #8]
 8015d78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015d7c:	f7fb feaa 	bl	8011ad4 <memset>
 8015d80:	4620      	mov	r0, r4
 8015d82:	bd70      	pop	{r4, r5, r6, pc}

08015d84 <__sfp_lock_acquire>:
 8015d84:	4801      	ldr	r0, [pc, #4]	; (8015d8c <__sfp_lock_acquire+0x8>)
 8015d86:	f7fe bc76 	b.w	8014676 <__retarget_lock_acquire_recursive>
 8015d8a:	bf00      	nop
 8015d8c:	20004175 	.word	0x20004175

08015d90 <__sfp_lock_release>:
 8015d90:	4801      	ldr	r0, [pc, #4]	; (8015d98 <__sfp_lock_release+0x8>)
 8015d92:	f7fe bc71 	b.w	8014678 <__retarget_lock_release_recursive>
 8015d96:	bf00      	nop
 8015d98:	20004175 	.word	0x20004175

08015d9c <__sinit_lock_acquire>:
 8015d9c:	4801      	ldr	r0, [pc, #4]	; (8015da4 <__sinit_lock_acquire+0x8>)
 8015d9e:	f7fe bc6a 	b.w	8014676 <__retarget_lock_acquire_recursive>
 8015da2:	bf00      	nop
 8015da4:	20004176 	.word	0x20004176

08015da8 <__sinit_lock_release>:
 8015da8:	4801      	ldr	r0, [pc, #4]	; (8015db0 <__sinit_lock_release+0x8>)
 8015daa:	f7fe bc65 	b.w	8014678 <__retarget_lock_release_recursive>
 8015dae:	bf00      	nop
 8015db0:	20004176 	.word	0x20004176

08015db4 <__sinit>:
 8015db4:	b510      	push	{r4, lr}
 8015db6:	4604      	mov	r4, r0
 8015db8:	f7ff fff0 	bl	8015d9c <__sinit_lock_acquire>
 8015dbc:	69a3      	ldr	r3, [r4, #24]
 8015dbe:	b11b      	cbz	r3, 8015dc8 <__sinit+0x14>
 8015dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015dc4:	f7ff bff0 	b.w	8015da8 <__sinit_lock_release>
 8015dc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015dcc:	6523      	str	r3, [r4, #80]	; 0x50
 8015dce:	4b13      	ldr	r3, [pc, #76]	; (8015e1c <__sinit+0x68>)
 8015dd0:	4a13      	ldr	r2, [pc, #76]	; (8015e20 <__sinit+0x6c>)
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8015dd6:	42a3      	cmp	r3, r4
 8015dd8:	bf04      	itt	eq
 8015dda:	2301      	moveq	r3, #1
 8015ddc:	61a3      	streq	r3, [r4, #24]
 8015dde:	4620      	mov	r0, r4
 8015de0:	f000 f820 	bl	8015e24 <__sfp>
 8015de4:	6060      	str	r0, [r4, #4]
 8015de6:	4620      	mov	r0, r4
 8015de8:	f000 f81c 	bl	8015e24 <__sfp>
 8015dec:	60a0      	str	r0, [r4, #8]
 8015dee:	4620      	mov	r0, r4
 8015df0:	f000 f818 	bl	8015e24 <__sfp>
 8015df4:	2200      	movs	r2, #0
 8015df6:	60e0      	str	r0, [r4, #12]
 8015df8:	2104      	movs	r1, #4
 8015dfa:	6860      	ldr	r0, [r4, #4]
 8015dfc:	f7ff ff82 	bl	8015d04 <std>
 8015e00:	68a0      	ldr	r0, [r4, #8]
 8015e02:	2201      	movs	r2, #1
 8015e04:	2109      	movs	r1, #9
 8015e06:	f7ff ff7d 	bl	8015d04 <std>
 8015e0a:	68e0      	ldr	r0, [r4, #12]
 8015e0c:	2202      	movs	r2, #2
 8015e0e:	2112      	movs	r1, #18
 8015e10:	f7ff ff78 	bl	8015d04 <std>
 8015e14:	2301      	movs	r3, #1
 8015e16:	61a3      	str	r3, [r4, #24]
 8015e18:	e7d2      	b.n	8015dc0 <__sinit+0xc>
 8015e1a:	bf00      	nop
 8015e1c:	08017a10 	.word	0x08017a10
 8015e20:	08015d4d 	.word	0x08015d4d

08015e24 <__sfp>:
 8015e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e26:	4607      	mov	r7, r0
 8015e28:	f7ff ffac 	bl	8015d84 <__sfp_lock_acquire>
 8015e2c:	4b1e      	ldr	r3, [pc, #120]	; (8015ea8 <__sfp+0x84>)
 8015e2e:	681e      	ldr	r6, [r3, #0]
 8015e30:	69b3      	ldr	r3, [r6, #24]
 8015e32:	b913      	cbnz	r3, 8015e3a <__sfp+0x16>
 8015e34:	4630      	mov	r0, r6
 8015e36:	f7ff ffbd 	bl	8015db4 <__sinit>
 8015e3a:	3648      	adds	r6, #72	; 0x48
 8015e3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015e40:	3b01      	subs	r3, #1
 8015e42:	d503      	bpl.n	8015e4c <__sfp+0x28>
 8015e44:	6833      	ldr	r3, [r6, #0]
 8015e46:	b30b      	cbz	r3, 8015e8c <__sfp+0x68>
 8015e48:	6836      	ldr	r6, [r6, #0]
 8015e4a:	e7f7      	b.n	8015e3c <__sfp+0x18>
 8015e4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015e50:	b9d5      	cbnz	r5, 8015e88 <__sfp+0x64>
 8015e52:	4b16      	ldr	r3, [pc, #88]	; (8015eac <__sfp+0x88>)
 8015e54:	60e3      	str	r3, [r4, #12]
 8015e56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015e5a:	6665      	str	r5, [r4, #100]	; 0x64
 8015e5c:	f7fe fc0a 	bl	8014674 <__retarget_lock_init_recursive>
 8015e60:	f7ff ff96 	bl	8015d90 <__sfp_lock_release>
 8015e64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015e68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015e6c:	6025      	str	r5, [r4, #0]
 8015e6e:	61a5      	str	r5, [r4, #24]
 8015e70:	2208      	movs	r2, #8
 8015e72:	4629      	mov	r1, r5
 8015e74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015e78:	f7fb fe2c 	bl	8011ad4 <memset>
 8015e7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015e80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015e84:	4620      	mov	r0, r4
 8015e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e88:	3468      	adds	r4, #104	; 0x68
 8015e8a:	e7d9      	b.n	8015e40 <__sfp+0x1c>
 8015e8c:	2104      	movs	r1, #4
 8015e8e:	4638      	mov	r0, r7
 8015e90:	f7ff ff62 	bl	8015d58 <__sfmoreglue>
 8015e94:	4604      	mov	r4, r0
 8015e96:	6030      	str	r0, [r6, #0]
 8015e98:	2800      	cmp	r0, #0
 8015e9a:	d1d5      	bne.n	8015e48 <__sfp+0x24>
 8015e9c:	f7ff ff78 	bl	8015d90 <__sfp_lock_release>
 8015ea0:	230c      	movs	r3, #12
 8015ea2:	603b      	str	r3, [r7, #0]
 8015ea4:	e7ee      	b.n	8015e84 <__sfp+0x60>
 8015ea6:	bf00      	nop
 8015ea8:	08017a10 	.word	0x08017a10
 8015eac:	ffff0001 	.word	0xffff0001

08015eb0 <_fwalk_reent>:
 8015eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015eb4:	4606      	mov	r6, r0
 8015eb6:	4688      	mov	r8, r1
 8015eb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015ebc:	2700      	movs	r7, #0
 8015ebe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015ec2:	f1b9 0901 	subs.w	r9, r9, #1
 8015ec6:	d505      	bpl.n	8015ed4 <_fwalk_reent+0x24>
 8015ec8:	6824      	ldr	r4, [r4, #0]
 8015eca:	2c00      	cmp	r4, #0
 8015ecc:	d1f7      	bne.n	8015ebe <_fwalk_reent+0xe>
 8015ece:	4638      	mov	r0, r7
 8015ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ed4:	89ab      	ldrh	r3, [r5, #12]
 8015ed6:	2b01      	cmp	r3, #1
 8015ed8:	d907      	bls.n	8015eea <_fwalk_reent+0x3a>
 8015eda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015ede:	3301      	adds	r3, #1
 8015ee0:	d003      	beq.n	8015eea <_fwalk_reent+0x3a>
 8015ee2:	4629      	mov	r1, r5
 8015ee4:	4630      	mov	r0, r6
 8015ee6:	47c0      	blx	r8
 8015ee8:	4307      	orrs	r7, r0
 8015eea:	3568      	adds	r5, #104	; 0x68
 8015eec:	e7e9      	b.n	8015ec2 <_fwalk_reent+0x12>

08015eee <__swhatbuf_r>:
 8015eee:	b570      	push	{r4, r5, r6, lr}
 8015ef0:	460e      	mov	r6, r1
 8015ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ef6:	2900      	cmp	r1, #0
 8015ef8:	b096      	sub	sp, #88	; 0x58
 8015efa:	4614      	mov	r4, r2
 8015efc:	461d      	mov	r5, r3
 8015efe:	da08      	bge.n	8015f12 <__swhatbuf_r+0x24>
 8015f00:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015f04:	2200      	movs	r2, #0
 8015f06:	602a      	str	r2, [r5, #0]
 8015f08:	061a      	lsls	r2, r3, #24
 8015f0a:	d410      	bmi.n	8015f2e <__swhatbuf_r+0x40>
 8015f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015f10:	e00e      	b.n	8015f30 <__swhatbuf_r+0x42>
 8015f12:	466a      	mov	r2, sp
 8015f14:	f000 f89c 	bl	8016050 <_fstat_r>
 8015f18:	2800      	cmp	r0, #0
 8015f1a:	dbf1      	blt.n	8015f00 <__swhatbuf_r+0x12>
 8015f1c:	9a01      	ldr	r2, [sp, #4]
 8015f1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015f22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015f26:	425a      	negs	r2, r3
 8015f28:	415a      	adcs	r2, r3
 8015f2a:	602a      	str	r2, [r5, #0]
 8015f2c:	e7ee      	b.n	8015f0c <__swhatbuf_r+0x1e>
 8015f2e:	2340      	movs	r3, #64	; 0x40
 8015f30:	2000      	movs	r0, #0
 8015f32:	6023      	str	r3, [r4, #0]
 8015f34:	b016      	add	sp, #88	; 0x58
 8015f36:	bd70      	pop	{r4, r5, r6, pc}

08015f38 <__smakebuf_r>:
 8015f38:	898b      	ldrh	r3, [r1, #12]
 8015f3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015f3c:	079d      	lsls	r5, r3, #30
 8015f3e:	4606      	mov	r6, r0
 8015f40:	460c      	mov	r4, r1
 8015f42:	d507      	bpl.n	8015f54 <__smakebuf_r+0x1c>
 8015f44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015f48:	6023      	str	r3, [r4, #0]
 8015f4a:	6123      	str	r3, [r4, #16]
 8015f4c:	2301      	movs	r3, #1
 8015f4e:	6163      	str	r3, [r4, #20]
 8015f50:	b002      	add	sp, #8
 8015f52:	bd70      	pop	{r4, r5, r6, pc}
 8015f54:	ab01      	add	r3, sp, #4
 8015f56:	466a      	mov	r2, sp
 8015f58:	f7ff ffc9 	bl	8015eee <__swhatbuf_r>
 8015f5c:	9900      	ldr	r1, [sp, #0]
 8015f5e:	4605      	mov	r5, r0
 8015f60:	4630      	mov	r0, r6
 8015f62:	f7ff f8e9 	bl	8015138 <_malloc_r>
 8015f66:	b948      	cbnz	r0, 8015f7c <__smakebuf_r+0x44>
 8015f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f6c:	059a      	lsls	r2, r3, #22
 8015f6e:	d4ef      	bmi.n	8015f50 <__smakebuf_r+0x18>
 8015f70:	f023 0303 	bic.w	r3, r3, #3
 8015f74:	f043 0302 	orr.w	r3, r3, #2
 8015f78:	81a3      	strh	r3, [r4, #12]
 8015f7a:	e7e3      	b.n	8015f44 <__smakebuf_r+0xc>
 8015f7c:	4b0d      	ldr	r3, [pc, #52]	; (8015fb4 <__smakebuf_r+0x7c>)
 8015f7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015f80:	89a3      	ldrh	r3, [r4, #12]
 8015f82:	6020      	str	r0, [r4, #0]
 8015f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f88:	81a3      	strh	r3, [r4, #12]
 8015f8a:	9b00      	ldr	r3, [sp, #0]
 8015f8c:	6163      	str	r3, [r4, #20]
 8015f8e:	9b01      	ldr	r3, [sp, #4]
 8015f90:	6120      	str	r0, [r4, #16]
 8015f92:	b15b      	cbz	r3, 8015fac <__smakebuf_r+0x74>
 8015f94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015f98:	4630      	mov	r0, r6
 8015f9a:	f000 f86b 	bl	8016074 <_isatty_r>
 8015f9e:	b128      	cbz	r0, 8015fac <__smakebuf_r+0x74>
 8015fa0:	89a3      	ldrh	r3, [r4, #12]
 8015fa2:	f023 0303 	bic.w	r3, r3, #3
 8015fa6:	f043 0301 	orr.w	r3, r3, #1
 8015faa:	81a3      	strh	r3, [r4, #12]
 8015fac:	89a0      	ldrh	r0, [r4, #12]
 8015fae:	4305      	orrs	r5, r0
 8015fb0:	81a5      	strh	r5, [r4, #12]
 8015fb2:	e7cd      	b.n	8015f50 <__smakebuf_r+0x18>
 8015fb4:	08015d4d 	.word	0x08015d4d

08015fb8 <_malloc_usable_size_r>:
 8015fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015fbc:	1f18      	subs	r0, r3, #4
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	bfbc      	itt	lt
 8015fc2:	580b      	ldrlt	r3, [r1, r0]
 8015fc4:	18c0      	addlt	r0, r0, r3
 8015fc6:	4770      	bx	lr

08015fc8 <_raise_r>:
 8015fc8:	291f      	cmp	r1, #31
 8015fca:	b538      	push	{r3, r4, r5, lr}
 8015fcc:	4604      	mov	r4, r0
 8015fce:	460d      	mov	r5, r1
 8015fd0:	d904      	bls.n	8015fdc <_raise_r+0x14>
 8015fd2:	2316      	movs	r3, #22
 8015fd4:	6003      	str	r3, [r0, #0]
 8015fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015fda:	bd38      	pop	{r3, r4, r5, pc}
 8015fdc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015fde:	b112      	cbz	r2, 8015fe6 <_raise_r+0x1e>
 8015fe0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015fe4:	b94b      	cbnz	r3, 8015ffa <_raise_r+0x32>
 8015fe6:	4620      	mov	r0, r4
 8015fe8:	f000 f830 	bl	801604c <_getpid_r>
 8015fec:	462a      	mov	r2, r5
 8015fee:	4601      	mov	r1, r0
 8015ff0:	4620      	mov	r0, r4
 8015ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ff6:	f000 b817 	b.w	8016028 <_kill_r>
 8015ffa:	2b01      	cmp	r3, #1
 8015ffc:	d00a      	beq.n	8016014 <_raise_r+0x4c>
 8015ffe:	1c59      	adds	r1, r3, #1
 8016000:	d103      	bne.n	801600a <_raise_r+0x42>
 8016002:	2316      	movs	r3, #22
 8016004:	6003      	str	r3, [r0, #0]
 8016006:	2001      	movs	r0, #1
 8016008:	e7e7      	b.n	8015fda <_raise_r+0x12>
 801600a:	2400      	movs	r4, #0
 801600c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016010:	4628      	mov	r0, r5
 8016012:	4798      	blx	r3
 8016014:	2000      	movs	r0, #0
 8016016:	e7e0      	b.n	8015fda <_raise_r+0x12>

08016018 <raise>:
 8016018:	4b02      	ldr	r3, [pc, #8]	; (8016024 <raise+0xc>)
 801601a:	4601      	mov	r1, r0
 801601c:	6818      	ldr	r0, [r3, #0]
 801601e:	f7ff bfd3 	b.w	8015fc8 <_raise_r>
 8016022:	bf00      	nop
 8016024:	20000234 	.word	0x20000234

08016028 <_kill_r>:
 8016028:	b538      	push	{r3, r4, r5, lr}
 801602a:	4d07      	ldr	r5, [pc, #28]	; (8016048 <_kill_r+0x20>)
 801602c:	2300      	movs	r3, #0
 801602e:	4604      	mov	r4, r0
 8016030:	4608      	mov	r0, r1
 8016032:	4611      	mov	r1, r2
 8016034:	602b      	str	r3, [r5, #0]
 8016036:	f7ef fd69 	bl	8005b0c <_kill>
 801603a:	1c43      	adds	r3, r0, #1
 801603c:	d102      	bne.n	8016044 <_kill_r+0x1c>
 801603e:	682b      	ldr	r3, [r5, #0]
 8016040:	b103      	cbz	r3, 8016044 <_kill_r+0x1c>
 8016042:	6023      	str	r3, [r4, #0]
 8016044:	bd38      	pop	{r3, r4, r5, pc}
 8016046:	bf00      	nop
 8016048:	20004180 	.word	0x20004180

0801604c <_getpid_r>:
 801604c:	f7ef bd56 	b.w	8005afc <_getpid>

08016050 <_fstat_r>:
 8016050:	b538      	push	{r3, r4, r5, lr}
 8016052:	4d07      	ldr	r5, [pc, #28]	; (8016070 <_fstat_r+0x20>)
 8016054:	2300      	movs	r3, #0
 8016056:	4604      	mov	r4, r0
 8016058:	4608      	mov	r0, r1
 801605a:	4611      	mov	r1, r2
 801605c:	602b      	str	r3, [r5, #0]
 801605e:	f7ef fdb4 	bl	8005bca <_fstat>
 8016062:	1c43      	adds	r3, r0, #1
 8016064:	d102      	bne.n	801606c <_fstat_r+0x1c>
 8016066:	682b      	ldr	r3, [r5, #0]
 8016068:	b103      	cbz	r3, 801606c <_fstat_r+0x1c>
 801606a:	6023      	str	r3, [r4, #0]
 801606c:	bd38      	pop	{r3, r4, r5, pc}
 801606e:	bf00      	nop
 8016070:	20004180 	.word	0x20004180

08016074 <_isatty_r>:
 8016074:	b538      	push	{r3, r4, r5, lr}
 8016076:	4d06      	ldr	r5, [pc, #24]	; (8016090 <_isatty_r+0x1c>)
 8016078:	2300      	movs	r3, #0
 801607a:	4604      	mov	r4, r0
 801607c:	4608      	mov	r0, r1
 801607e:	602b      	str	r3, [r5, #0]
 8016080:	f7ef fdb3 	bl	8005bea <_isatty>
 8016084:	1c43      	adds	r3, r0, #1
 8016086:	d102      	bne.n	801608e <_isatty_r+0x1a>
 8016088:	682b      	ldr	r3, [r5, #0]
 801608a:	b103      	cbz	r3, 801608e <_isatty_r+0x1a>
 801608c:	6023      	str	r3, [r4, #0]
 801608e:	bd38      	pop	{r3, r4, r5, pc}
 8016090:	20004180 	.word	0x20004180

08016094 <_init>:
 8016094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016096:	bf00      	nop
 8016098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801609a:	bc08      	pop	{r3}
 801609c:	469e      	mov	lr, r3
 801609e:	4770      	bx	lr

080160a0 <_fini>:
 80160a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160a2:	bf00      	nop
 80160a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80160a6:	bc08      	pop	{r3}
 80160a8:	469e      	mov	lr, r3
 80160aa:	4770      	bx	lr
